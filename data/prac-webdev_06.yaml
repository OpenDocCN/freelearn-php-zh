- en: Chapter 6. PHP and MySQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 PHP和MySQL
- en: In the previous chapter, we discussed PHP as a language for server-side programming.
    Its main use is to generate HTML dynamically to create web pages that are delivered
    to the client by the web server, as well as to store, retrieve, and manipulate
    data on the server. We have used files as the containers for that data, but we
    have given more than one hint that as soon as the amount of data becomes large
    and/or complex, we want to use a database instead.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了PHP作为服务器端编程语言的使用。它的主要用途是动态生成HTML以创建由Web服务器发送给客户端的网页，以及存储、检索和操作服务器上的数据。我们已使用文件作为数据的容器，但我们已经给出不止一个暗示，一旦数据量变得很大和/或复杂，我们希望使用数据库。
- en: In this final chapter of the first part of the book, we introduce MySQL, a database
    of choice for many who do web development. You may have heard of the LAMP stack.
    This is the M in **LAMP** (**Linux/Apache/MySQL/PHP**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书第一部分最后一章中，我们介绍了MySQL，这是许多从事Web开发的人的选择数据库。你可能听说过LAMP栈。这是LAMP中的M（**Linux/Apache/MySQL/PHP**）。
- en: Before diving into MySQL itself, and the way to interface with it in PHP (hence
    the title of this chapter), we would like to give you a casual introduction to
    databases in general.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨MySQL本身以及如何在PHP中与之交互（因此本章的标题）之前，我们想给你一个关于数据库的一般性轻松介绍。
- en: Databases
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库
- en: A database is nothing more than a collection of data, usually organized in some
    structured way. We use databases everyday although we might not think of them
    as databases. Take a phone directory, for instance. It contains a lot of data.
    The data itself consists of names, addresses, and, of course, phone numbers, typically
    sorted by last name. This paper database has many disadvantages, though. Once
    it is printed, it will be incomplete and out of date. And if we want to look up
    the phone numbers of all the people that live in the same street, we would not
    know where to start. But it is a database, alright.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库不过是一组数据的集合，通常以某种结构化的方式组织。我们每天都在使用数据库，尽管我们可能不会把它们当作数据库来想。以电话簿为例。它包含大量数据。数据本身由姓名、地址和当然，电话号码组成，通常按姓氏排序。然而，这个纸质数据库有许多缺点。一旦它被打印出来，就会不完整且过时。如果我们想查找住在同一条街上所有人的电话号码，我们就不知道从哪里开始。但它是数据库，没错。
- en: Relational databases
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系数据库
- en: The term **relational databases** dates back to an article written in 1970 by
    Edgar Frank Codd, working at IBM at the time, called *A Relational Model of Data
    for Large Shared Data Banks*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**关系数据库**这个术语可以追溯到1970年爱德华·弗兰克·科德（Edgar Frank Codd）撰写的一篇文章，当时他在IBM工作，这篇文章名为《大型共享数据银行的关系数据模型》（A
    Relational Model of Data for Large Shared Data Banks）。'
- en: It presents a model that shows the relationships between the different elements
    of data and heavily uses tables. In each of those tables, there are several fields
    or columns that can contain data of various types (strings, numbers, dates, and
    so on). Entries in those tables are called **rows**, and the first column in each
    row is an index or primary key, a number, which is usually not changed after it
    has been created.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它展示了一个显示数据不同元素之间关系的模型，并大量使用表格。在每个这样的表中，都有几个字段或列可以包含各种类型的数据（字符串、数字、日期等等）。这些表中的条目被称为**行**，每行中的第一列是一个索引或主键，一个数字，通常在创建后不会改变。
- en: So there can be a table containing customer information. The index represents
    the customer ID, and all the other columns or fields are classical things, such
    as first name, last name, address, and so on. You can easily create other tables
    and choose what they can contain. Let's assume that we are going to sell books.
    We could have a table with book information, starting with a book ID, book title,
    author, category (fiction or non-fiction, or more categories), ISBN number, price,
    whether it is hardcover, softcover, or an eBook, and so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以有一个包含客户信息的表。索引代表客户ID，而所有其他列或字段都是经典的东西，比如名字、姓氏、地址等等。你可以轻松创建其他表并选择它们可以包含的内容。让我们假设我们打算卖书。我们可以有一个包含书籍信息的表，从书籍ID开始，书籍标题、作者、类别（小说或非小说，或更多类别）、ISBN号码、价格、是否为精装、平装或电子书等等。
- en: You could have a separate table for categories; one for authors too, and then,
    of course, a table for your order information. If you organize your data like
    this and use the customer, category, and book ID in your order information, you
    only need to change things in one place in your database when, for example, the
    customer changes address. The database you are going to learn about in this chapter
    works as we just described.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以有一个单独的表用于分类；一个用于作者，当然还有一个用于你的订单信息的表。如果你这样组织你的数据，并在订单信息中使用客户、分类和书籍ID，那么当例如客户更改地址时，你只需在数据库中的一个地方更改信息。本章中你要学习的数据库正是这样工作的。
- en: The workflow we are proposing is a two-step process. In the first step, we design
    how we want our tables to look and whether they should be part of a single database
    or several. Next, we are going to program our application, our website if you
    like, to use a database and its tables instead of a flat file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提出的流程是一个两步过程。在第一步中，我们设计我们希望我们的表看起来如何，以及它们是否应该属于单个数据库或多个数据库。接下来，我们将编写我们的应用程序，如果你愿意，我们的网站，以使用数据库及其表而不是平面文件。
- en: 'To achieve all of this, you need to learn quite a few new things. It should
    not come as a surprise that one of those things is yet another programming language:
    **SQL**.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现所有这些，你需要学习很多新事物。其中一个新事物是另一种编程语言：**SQL**，这并不令人惊讶。
- en: SQL
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: Many people believe that SQL stands for **Standard Query Language**, but actually
    it doesn't - it is just plain SQL. However, it is a language, and is some kind
    of a standard used to perform queries on a database. It is also one of those few
    programming languages that have been around for many years and is not going away
    soon. I started working with C when people thought of it as new, but even then
    it was developed ten years prior.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人认为SQL代表**标准查询语言**，但实际上并非如此——它只是普通的SQL。然而，它是一种语言，是一种用于在数据库上执行查询的标准。它也是那些存在多年且不会很快消失的少数编程语言之一。我刚开始使用C语言时，人们还认为它是新的，但即使那时它已经发展了十年。
- en: 'SQL is used to query a database and can be thought of as a command-line language,
    that is, things that are typed in a computer console. Here is an example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: SQL用于查询数据库，可以将其视为一种命令行语言，即输入计算机控制台中的内容。以下是一个例子：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is another example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个例子：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If this reminds you of scenes from *The Streets of San Francisco*, or any other
    crime series of the seventies, you are absolutely right. What they were doing
    on these computer screens was looking up things in a database, and that was mostly
    the only thing computers were used for. In our example, `CRIMINALS` is the name
    of a table and the `SELECT` command is used to look up all records where (hence
    `WHERE`) a certain condition is met.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这让你想起了*旧金山街道*或其他七十年代的犯罪系列剧的场景，你绝对是对的。他们在这些计算机屏幕上所做的是在数据库中查找信息，而这几乎就是计算机当时唯一被使用的功能。在我们的例子中，`CRIMINALS`是表名，`SELECT`命令用于查找满足（因此`WHERE`）特定条件的所有记录。
- en: 'There is no need to learn the complete language: with just a few commands and
    condition clauses, we will have enough knowledge to create programs that can do
    the basic operations with a database, as soon as we have created our database(s)
    and tables. That set of basic operations is often referred to as **CRUD** (**Create,
    Read, Update**, **and Delete**). In SQL, we can handle this with just five commands:
    `SELECT`, `INSERT`, `CREATE`, `UPDATE`, and `DELETE`. To accommodate getting data
    to come out of two tables rather than just one, you will learn another useful
    SQL feature called `INNER JOIN`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要学习完整的语言：只需掌握几个命令和条件语句，我们就能拥有足够的知识来创建程序，这些程序可以在我们创建了数据库和表之后立即执行数据库的基本操作。这组基本操作通常被称为**CRUD**（**创建、读取、更新**和**删除**）。在SQL中，我们只需使用五个命令就能处理这些操作：`SELECT`、`INSERT`、`CREATE`、`UPDATE`和`DELETE`。为了适应从两个表而不是一个表中获取数据，你将学习另一个有用的SQL特性，称为`INNER
    JOIN`。
- en: To avoid repetition, we will teach the basics of these commands in the MySQL
    section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免重复，我们将在MySQL部分教授这些命令的基本知识。
- en: MySQL
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL
- en: You do not have to be a mechanic to drive a car, but there has to be an engine
    under the hood or it will not move. To run an application that uses a database,
    there has to be a database engine under the hood. Database servers used to be
    dedicated computers; chances are Karl Malden and Michael Douglas used a database
    server in the TV series I mentioned earlier.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要是机械师就能开车，但引擎必须在引擎盖下，否则它不会移动。要运行使用数据库的应用程序，引擎盖下必须有一个数据库引擎。数据库服务器过去是专用计算机；据我所知，卡尔·马尔登和迈克尔·道格拉斯在我之前提到的电视剧中使用了数据库服务器。
- en: Today, database servers are usually software packages. Oracle Corporation specializes
    in database software; Microsoft has several SQL Server products. These packages
    can be installed on dedicated computers to function solely as a database server,
    but we can also install them on the same computer that acts as a Web Server, as
    well as on our own development system. The package we are going to use is called
    **MySQL**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，数据库服务器通常是软件包。Oracle 公司专注于数据库软件；微软有多个 SQL Server 产品。这些软件包可以安装在专用计算机上，仅作为数据库服务器使用，但也可以安装在充当
    Web 服务器的同一台计算机上，以及我们的开发系统上。我们将要使用的软件包被称为 **MySQL**。
- en: MySQL is open source, which means free, database server that was created by
    a Swedish company acquired by Sun Microsystems, which was in turn acquired by
    Oracle.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 是开源的，这意味着它是一个由瑞典公司创建并由 Sun Microsystems 收购的数据库服务器，Sun Microsystems 又被
    Oracle 收购。
- en: 'If you have installed a bundle such as **XAMPP** or **WAMPSERVER** ([wampserver.com](http://wampserver.com))
    for Windows, then you already have MySQL. If not, you can download it from [mysql.com](http://mysql.com).
    Installation is very straightforward. Afterwards, you may have to go in your computer
    settings to make sure that the MySQL server is fired up each time the system is
    started. Like UNIX systems, MySQL has the concept of users, and the most powerful
    is **root**. MySQL is installed without a password for root. You want to change
    that right away. You can do this with the `mysqladmin` command. For everything
    else, we will use a tool or program it ourselves. Here is the command to change
    the root password:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经为 Windows 安装了如 **XAMPP** 或 **WAMPSERVER** ([wampserver.com](http://wampserver.com))
    这样的捆绑包，那么你已经有 MySQL 了。如果没有，你可以从 [mysql.com](http://mysql.com) 下载它。安装非常简单。之后，你可能需要在计算机设置中检查确保每次启动系统时
    MySQL 服务器都会启动。像 UNIX 系统一样，MySQL 有用户的概念，其中最强大的是 **root**。MySQL 安装时 root 没有密码。你应立即更改它。你可以使用
    `mysqladmin` 命令来完成此操作。对于其他所有事情，我们将使用工具或自己编写程序。以下是更改 root 密码的命令：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: phpMyAdmin
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: phpMyAdmin
- en: '`phpMyAdmin` is an open source utility written in PHP to help you administer
    your MySQL database(s). You do not have to use it, as there are other options,
    but I made it part of my workflow to create users, databases, and tables, and
    even populate tables initially. This is the equivalent of the set of SQL statements
    that SQL buffs call **schema statements**.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`phpMyAdmin` 是一个用 PHP 编写的开源实用工具，用于帮助您管理您的 MySQL 数据库（们）。您不必使用它，因为还有其他选项，但我已经将其作为我的工作流程的一部分来创建用户、数据库和表格，甚至最初填充表格。这相当于
    SQL 精通者所说的 **模式语句**。'
- en: I also use `phpMyAdmin` to occasionally remove or change a table row. `phpMyAdmin`
    is part of XAMPP, so if you do not use XAMPP, you will have to download it first.
    It should be straightforward to use once you grasp the concepts that follow. In
    a worst case scenario, you can grab some articles off the Web. There is even an
    entire book on `phpMyAdmin` by Packt Publishing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我也偶尔使用 `phpMyAdmin` 来删除或更改表格行。`phpMyAdmin` 是 XAMPP 的一部分，所以如果你不使用 XAMPP，你将不得不先下载它。一旦掌握了以下概念，使用起来应该很简单。在最坏的情况下，你可以从网上抓取一些文章。甚至有一本关于
    `phpMyAdmin` 的书，由 Packt Publishing 出版。
- en: Creating databases
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库
- en: You could do everything with a single database and just add tables for each
    project. However, if your projects are sufficiently distinct and rather large,
    it is better to create a different database for each project. `phpMyAdmin` lets
    you do that without the need for SQL commands.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用一个数据库做所有的事情，只需为每个项目添加表格。然而，如果你的项目足够独特且相当大，为每个项目创建不同的数据库会更好。`phpMyAdmin`
    允许你这样做，无需使用 SQL 命令。
- en: Creating and managing users
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和管理用户
- en: We already mentioned a root password. Root is a user that can do everything.
    When your program accesses the database, you do not want anybody to accidentally
    erase any data in a database. That is why we create other users in MySQL, with
    just enough CRUD privileges for your database. All you want to allow is to create,
    read, update, and delete (which is what CRUD stands for) records in a specific
    database. For that purpose, you create users, give them passwords, and assign
    privileges. Once again, thanks to `phpMyAdmin`, you still do not have to learn
    SQL commands.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到了根密码。根用户可以执行所有操作。当你的程序访问数据库时，你不想任何人意外地删除数据库中的任何数据。这就是为什么我们在MySQL中创建其他用户，只赋予数据库足够的CRUD权限。你只想允许在特定数据库中创建、读取、更新和删除（CRUD代表的内容）记录。为此，你创建用户，给他们设置密码，并分配权限。再次感谢`phpMyAdmin`，你仍然不需要学习SQL命令。
- en: Creating and managing database tables
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和管理数据库表
- en: Properly planning the tables that your database will contain is essential for
    success. It is best to first draft things on a piece of paper. Once you are close
    to what you want, you can create tables for your database using `phpMyAdmin`.
    You give the table a name, after specifying which database it belongs to, and
    start listing all the columns, or fields, their names, type, and possibly their
    maximum length, with the index as `primary key` first.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正确规划数据库将包含的表对于成功至关重要。最好首先在纸上草拟一下。一旦你接近你想要的样子，你就可以使用`phpMyAdmin`为你的数据库创建表。你为表命名，指定它属于哪个数据库，然后开始列出所有列，或字段，它们的名称、类型，以及可能的最大长度，索引作为`主键`首先列出。
- en: 'Once you have set that up, you can even start propagating those tables with
    data. For a bookstore webshop application, you can use the tool to enter the information
    on all the books you sell; the application itself will take care of adding customer
    data and order data to your database. `customers` and `orders` are of course candidates
    for tables. With `phpMyAdmin` you will always at least create the structure of
    your table, but it may be your web application that fills it with data. Here are
    two examples of tables: **books** and **authors**.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好，你甚至可以开始传播那些表中的数据。对于一个书店Web商店应用程序，你可以使用这个工具输入你出售的所有书籍的信息；应用程序本身将负责将客户数据和订单数据添加到你的数据库中。"customers"和"orders"当然可以作为表的选择。使用`phpMyAdmin`，你至少会创建你表的结构，但可能是你的Web应用程序填充了数据。以下是有两个表的示例：**books**和**authors**。
- en: 'The books table will have the following data:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍表将包含以下数据：
- en: '![Creating and managing database tables](img/3816_06_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![创建和管理数据库表](img/3816_06_01.jpg)'
- en: 'The authors table will have the following data:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作者表将包含以下数据：
- en: '![Creating and managing database tables](img/3816_06_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![创建和管理数据库表](img/3816_06_02.jpg)'
- en: So, how do we get from the application to the database? This brings us back
    to PHP and the **mysqli** object.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何从应用程序到达数据库？这又把我们带回了PHP和**mysqli**对象。
- en: MySQLi in PHP
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP中的MySQLi
- en: 'Although we omitted this on purpose in [Chapter 5](ch05.html "Chapter 5. PHP"),
    *PHP*, PHP has features found in object-oriented programming languages. So, rather
    than write functions, you can instead create objects and write methods for them.
    This is exactly how the PHP programming interface to MySQL works: there is one
    dedicated object, *mysqli*, and a number of methods. With these methods, you can
    connect to a database, submit queries, fetch the result, and finally close the
    connection.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在[第5章](ch05.html "第5章。PHP")中故意省略了这一点，但PHP具有面向对象编程语言中的特性。所以，你不必编写函数，而是可以创建对象并为它们编写方法。这正是PHP编程接口与MySQL工作的方式：有一个专门的`mysqli`对象和一系列方法。使用这些方法，你可以连接到数据库，提交查询，获取结果，最后关闭连接。
- en: Consider that we have a web application that is an online bookstore. The name
    of our database is `bookstore`, for which we created a user `bookuser`, with `book**4u`
    as the password. The database itself contains at a minimum the table's books and
    authors.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个在线书店的Web应用程序。我们的数据库名为`bookstore`，我们为它创建了一个用户`bookuser`，密码为`book**4u`。数据库本身至少包含书籍和作者表。
- en: Let's write our first PHP program using MySQL now.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在用MySQL编写第一个PHP程序。
- en: Connecting to the database
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: 'First we need to connect to the database. To do so, we need to identify which
    database we want to connect to, on which host the database server is running,
    and which database user we want to use. The host will almost always be `localhost`.
    So, here is the beginning of our program:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要连接到数据库。为了做到这一点，我们需要确定我们想要连接到哪个数据库，数据库服务器在哪个主机上运行，以及我们想要使用的数据库用户。主机几乎总是
    `localhost`。所以，这是我们程序的开始：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We probably want to call the statement that calls the connect method from a
    function so that we can add some intelligence to give the user meaningful information
    when, for some reason, the connection to the database fails.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想要从函数中调用调用连接方法的语句，这样我们就可以添加一些智能功能，在数据库连接失败时，为用户提供有意义的反馈。
- en: The statement about the character set is extremely important. I am an I18N guy,
    so I will spare you the details; I will even spare you from explaining what I18N
    stands for. UTF-8 is a code set that covers how letters used in many different
    languages are translated into numbers. This line helps you confirm that data is
    stored the proper way in your database.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关于字符集的说明非常重要。我是一个 I18N 的人，所以我会省略细节；我甚至不会解释 I18N 是什么意思。UTF-8 是一个代码集，它涵盖了用于许多不同语言的字母如何转换成数字。这一行有助于你确认数据是否以正确的方式存储在你的数据库中。
- en: Next, when your data is retrieved and needs to be displayed on a screen it may
    have to be translated into another codeset. But this way, you at least know which
    way you are storing your own data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当你的数据被检索并需要在屏幕上显示时，它可能需要转换成另一个代码集。但这样，你至少知道你自己的数据是如何存储的。
- en: Our first SQL query, really!
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们真正的第一个 SQL 查询！
- en: 'In plain SQL, the simplest query to get something back from a database, stored
    in our table `books`, would be:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯 SQL 中，从存储在我们表 `books` 中的数据库获取数据的简单查询将是：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is what `phpMyAdmin` will suggest as the default SQL query. It can even
    be shorter:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `phpMyAdmin` 会建议的默认 SQL 查询。它甚至可以更短：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice that the query ends in a semicolon and that we do not mention the name
    of the database. We did that when we made the connection. All SQL keywords are
    in uppercase. Our `WHERE` clause is the simplest imaginable, as it is always true.
    We just added it to help us in the examples. The `*` tells the server to get me
    all columns. If you only want the title and the price, you would use:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到查询以分号结束，并且我们没有提到数据库名称。我们在建立连接时已经做了这件事。所有的 SQL 关键字都是大写的。我们的 `WHERE` 子句是最简单的，因为它总是为真。我们只是添加它来帮助我们理解示例。`*`
    告诉服务器获取所有列。如果你只想获取标题和价格，你会使用：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we are going to translate this into a pair of PHP statements. Before you
    read on, I suggest (assuming that you have created a database and a books table
    and put some books in it) that you go into `phpMyAdmin`, select our database,
    click on the **SQL** tab, type in the above query, and examine the result.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把这个查询翻译成一对 PHP 语句。在你继续阅读之前，我建议（假设你已经创建了一个数据库和书籍表，并在其中放入了一些书籍）你进入 `phpMyAdmin`，选择我们的数据库，点击
    **SQL** 选项卡，输入上面的查询，并检查结果。
- en: Writing a MySQL query in PHP
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 PHP 中编写 MySQL 查询
- en: 'Our first MySQL query in PHP is quite simple. We are going to turn the query
    into a PHP string and call the `query` method to get the result:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 PHP 中的第一个 MySQL 查询相当简单。我们将把查询转换成 PHP 字符串，并调用 `query` 方法来获取结果：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Fetching the result
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取结果
- en: Now, if we typed in everything correctly—at first you may have mistakenly omitted
    one of the semicolons on either side of the closing single quote—MySQL will have
    returned the title and price of every single book in our table. It has done so
    by returning an object that we named `$result`, which we can apply a few methods
    to.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们正确地输入了所有内容——一开始你可能不小心遗漏了关闭单引号两侧的一个分号——MySQL 将会返回我们表中每本书的标题和价格。它是通过返回一个我们命名为
    `$result` 的对象来做到这一点的，我们可以对这个对象应用一些方法。
- en: 'The simplest one will give us the number of rows that were found, the most
    powerful one being `fetch_assoc()`, which will create for us an associative array
    that we can instantly use in a while loop. So, here is how we can generate an
    HTML table with a list of all book titles and prices with just a few lines of
    code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的一个会给我们找到的行数，最强大的是 `fetch_assoc()`，它将为我们创建一个关联数组，我们可以在 while 循环中立即使用。所以，这就是我们如何用几行代码生成一个包含所有书籍标题和价格的
    HTML 表格的方法：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The keys of the associative array are simply the names of the columns in the
    table.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关联数组的键只是表中列的名称。
- en: Obtaining data from more than one table
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从多个表中获取数据
- en: 'Let''s assume we do not want the list of all books, but just those by a single
    author. We want all the books by John Muir, so here is the SQL:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们不想列出所有书籍，只想列出单一作者的书籍。我们想要所有 John Muir 的书籍，所以这里的 SQL 命令是：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Wait a minute! How can we tell which `author_id` John Muir has? We cannot.
    Of John Muir, we know the first and last name, and these are stored in the `authors`
    table. So here comes the most profoundly difficult query of the entire chapter:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下！我们如何知道 John Muir 的 `author_id` 是多少呢？我们不知道。关于 John Muir，我们知道他的名字和姓氏，这些存储在
    `authors` 表中。所以，这就是本章中最困难的一个查询：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Alternatively, we could also use:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们也可以使用：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice the subtle difference? We used `a` and `b` as a shorthand notation for
    authors and books. Because we chose our field names wisely, there are no identical
    names showing up in other tables. If that were the case, we would need to specify
    the table name followed by a dot, as we did in the second example. Otherwise,
    an error message complaining about ambiguity would occur.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到细微的差别吗？我们使用 `a` 和 `b` 作为作者和书籍的简称。因为我们明智地选择了字段名，所以在其他表中没有出现重复的名字。如果那样的话，我们就需要指定表名后跟一个点，就像我们在第二个例子中所做的那样。否则，会出现一个关于歧义的错误信息。
- en: The results of the query are all titles and prices of books where the `author_id`
    in the table books is the same as the `author_id` under `authors`, and in that
    one, it matches the ones with `aname` set to Muir and `afirst` set to John. Notice
    that it is possible to get results of two different John Muirs back with this
    query.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 查询结果包括了所有书籍的标题和价格，其中 `books` 表中的 `author_id` 与 `authors` 表下的 `author_id` 相同，并且在这个表中，它匹配了
    `aname` 设置为 Muir 且 `afirst` 设置为 John 的那些。请注意，使用这个查询可能会返回两个不同的 John Muir 的结果。
- en: This is how you can obtain data out of several tables. There are nuances, such
    as `LEFT JOIN` and `RIGHT JOIN`, but they are beyond the scope of this book.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何从多个表中获取数据的方法。还有一些细微差别，比如 `LEFT JOIN` 和 `RIGHT JOIN`，但这些都超出了本书的范围。
- en: Adding data
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据
- en: 'We mentioned using `phpMyAdmin` to propagate our tables. Once our application
    is running, we need to know how to add a date using PHP code, for instance, to
    add an order to the system. We will provide an example that adds a book to the
    books table. All the strings we use can, of course, be replaced by PHP variables.
    The SQL command we need here is `INSERT`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到了使用 `phpMyAdmin` 来传播我们的表。一旦我们的应用程序运行起来，我们需要知道如何使用 PHP 代码添加日期，例如，向系统中添加一个订单。我们将提供一个向
    `books` 表添加书籍的示例。当然，我们使用的所有字符串都可以替换为 PHP 变量。我们这里需要的 SQL 命令是 `INSERT`：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will automatically add a row to your table, create your primary key with
    a value one higher than all others, insert the title, `author_id`, and insert
    the price into that row. All other fields will get the default value you specified
    while building your tables with `phpMyAdmin`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动在你的表中添加一行，创建一个比其他所有值都高一级的主键，插入标题、`author_id` 并将价格插入该行。所有其他字段将获取你在使用 `phpMyAdmin`
    构建表时指定的默认值。
- en: The `insert_id` function is quite handy if you want to retrieve the value of
    the newly created primary key. We will use this now to change the price from `38`
    to `39`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要检索新创建的主键的值，`insert_id` 函数非常方便。我们现在将使用这个函数将价格从 `38` 改为 `39`。
- en: Updating data
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新数据
- en: 'Let''s assume that we want to change the price of a book or add information
    we did not enter when we issued the `INSERT` command to add data. This is where
    the `UPDATE` command is used. The syntax goes like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要更改书籍的价格或添加我们在发出添加数据的 `INSERT` 命令时没有输入的信息。这就是 `UPDATE` 命令被使用的地方。其语法如下：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will change the price of the book we just added from `38` to `39`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把刚刚添加的书的定价从 `38` 改为 `39`。
- en: You can find a very comprehensive online manual of all the MySQL commands on
    [mysql.com](http://mysql.com), [php.net](http://php.net), and many other websites;
    just search on Google for `mysql UPDATE` and it will be right there. This is why
    we are only giving you the basics in this chapter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [mysql.com](http://mysql.com)、[php.net](http://php.net) 和许多其他网站上找到一个非常全面的
    MySQL 命令在线手册；只需在 Google 上搜索 `mysql UPDATE`，它就会出现。这就是为什么我们只在本章中提供基础知识的原因。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explained how to add a database to the overall web development
    picture. Our database engine of choice is MySQL, as it is open source, has a PHP
    programming interface, and is available on all platforms. We introduced another
    programming language, SQL, and then explained how this fits into the MySQL/PHP
    picture.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了如何将数据库添加到整体网络开发图中。我们选择MySQL作为数据库引擎，因为它开源、具有PHP编程接口，并且可在所有平台上使用。我们介绍了另一种编程语言SQL，并解释了它如何与MySQL/PHP结合。
- en: To create and manage a database, including adding initial data to your tables,
    we talked about using `phpMyAdmin`, a great tool that we recommend adding to your
    workflow.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建和管理数据库，包括向您的表中添加初始数据，我们讨论了使用`phpMyAdmin`，这是一个我们推荐添加到您的工作流程中的优秀工具。
- en: 'This chapter also concludes the first part of this book, which covers what
    I call classical web development. We walked through all the classical components,
    languages in particular, that people have been using to develop websites, and
    simple web applications: HTML, CSS, JavaScript, PHP, and MySQL.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本章也总结了本书的第一部分，这部分内容涵盖了被我称为经典网络开发的内容。我们回顾了所有经典组件，特别是人们用来开发网站和简单网络应用的编程语言：HTML、CSS、JavaScript、PHP和MySQL。
- en: In the second part of the book, we will take it a step further and show you
    how to write shorter code, use a single web page instead of millions to get the
    job done, and write everything in a smarter, different way so that your site or
    app will look great on all devices, from desktop to tablet to smartphone.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第二部分，我们将更进一步，向您展示如何编写更短的代码，使用单个网页而不是数百万个网页来完成工作，并以更智能、不同的方式编写一切，以便您的网站或应用在所有设备上看起来都很棒，从桌面到平板电脑再到智能手机。
