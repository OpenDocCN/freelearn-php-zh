- en: Chapter 6. Media Sharing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：媒体共享
- en: '*Uploading and managing images/videos on the Internet has become very common
    with the advent of social media. More and more applications now allow you to share
    and retrieve media with external media hosts/services such as Google, Flickr,
    and YouTube. In Zend Framework 1.0, the `Zend_Service` package offered a large
    number of third-party integrations. This has changed with ZF2 and the new module
    framework.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*随着社交媒体的出现，上传和管理图片/视频已成为非常普遍的事情。现在越来越多的应用程序允许您通过外部媒体托管/服务（如 Google、Flickr 和
    YouTube）分享和检索媒体。在 Zend Framework 1.0 中，`Zend_Service` 包提供大量第三方集成。这一情况在 ZF2 和新的模块框架中发生了变化。*'
- en: 'In this chapter, we will use various external Zend Framework 2.0 modules to
    manage images and videos. Let''s quickly look at the topics that we will be learning
    in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用各种外部 Zend Framework 2.0 模块来管理图片和视频。让我们快速看一下本章我们将学习的内容：
- en: Installing external modules in the Zend Framework application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Zend Framework 应用程序中安装外部模块
- en: Setting up a simple photo gallery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置简单的照片画廊
- en: Resizing and manipulating images using `WebinoImageThumb`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `WebinoImageThumb` 调整和操作图片
- en: Introduction to the Zend GData API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zend GData API 简介
- en: Using the GData API to fetch albums from Google Photos and YouTube
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GData API 从 Google Photos 和 YouTube 获取相册
- en: External modules
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部模块
- en: One of the most important features of Zend Framework 2.0 is the ability to integrate
    external modules in your PHP application, and this integration is completely managed
    using a dependency management tool (in our case, `Composer`).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Framework 2.0 最重要的特性之一是能够在 PHP 应用程序中集成外部模块，并且这种集成完全通过依赖管理工具（在我们的例子中是 `Composer`）来管理。
- en: This feature allows development of PHP applications without having to worry
    about maintaining external libraries inside your application. Libraries and applications
    can be decoupled and maintained separately.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能允许在不担心维护应用程序内部外部库的情况下开发 PHP 应用程序。库和应用程序可以解耦并分别维护。
- en: In this chapter, we will be using an external module for resizing images; we
    will also make use of external libraries for connecting to Google services.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用外部模块来调整图片；我们还将利用外部库来连接 Google 服务。
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Composer**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Composer**'
- en: Composer is the one of the dependency management solutions used in Zend Framework.
    Composer allows developers to declare the dependencies needed for their application
    and will handle the installation of those libraries. The dependency configuration
    is stored in a file named `composer.json`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 是在 Zend Framework 中使用的依赖管理解决方案之一。Composer 允许开发者声明他们应用程序所需的依赖，并将处理这些库的安装。依赖配置存储在名为
    `composer.json` 的文件中。
- en: Resizing images
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整图片大小
- en: Zend Framework 1.0 had a resize filter that allowed images to be resized on
    upload; with Zend Framework 2.0, this option no longer exists. Our next task will
    be to find a simple image-resizing module and install it in our application. So
    let's get started.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Framework 1.0 有一个调整大小的过滤器，允许在上传时调整图片大小；在 Zend Framework 2.0 中，此选项不再存在。我们的下一个任务将是找到一个简单的图片调整大小模块，并将其安装到我们的应用程序中。所以，让我们开始吧。
- en: Time for action – resizing images using modules
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块调整图片大小的时间
- en: 'Carry out the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Go to the Zend Framework 2 module''s site:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Zend Framework 2 模块网站：
- en: '[http://modules.zendframework.com/](http://modules.zendframework.com/)'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://modules.zendframework.com/](http://modules.zendframework.com/)'
- en: Run a search for `WebinoImageThumb`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索 `WebinoImageThumb`。
- en: To install this module, you will need to update `composer.json` in the application
    root and include this module as a required module.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装此模块，您需要更新应用程序根目录下的 `composer.json` 并将其作为所需模块包含在内。
- en: 'To do this, edit `CommunicationApp/composer.json` and modify the required section:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，请编辑 `CommunicationApp/composer.json` 并修改所需部分：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now run `composer.phar update` to install the newly added dependency.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行 `composer.phar update` 来安装新添加的依赖。
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will be able to see the newly installed modules in the `vendor` folder as
    follows:![Time for action – resizing images using modules](img/1929OS_06_01.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将能够在 `vendor` 文件夹中看到新安装的模块，如下所示：![使用模块调整图片大小的时间](img/1929OS_06_01.jpg)
- en: Now that the module is downloaded, we will need to activate the module in `CommunicationApp/config/application.config.php`
    by adding `'WebinoImageThumb'` to the `modules` array.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在模块已下载，我们需要在 `CommunicationApp/config/application.config.php` 中激活该模块，通过将 `'WebinoImageThumb'`
    添加到 `modules` 数组中。
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*What just happened?*'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have installed an external module into our application using the dependency
    management tool, Composer. We have also activated the module in our application
    so that the module is accessible across the application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已使用依赖管理工具 Composer 将外部模块安装到我们的应用程序中。我们还在应用程序中激活了该模块，以便模块可以在整个应用程序中访问。
- en: Have a go hero
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下
- en: Now that you know how to install new modules in the Zend Framework 2 application,
    here is a simple task for you. Install the Zend GData package on this application.
    Instructions for installing this package are available at [https://packages.zendframework.com/](https://packages.zendframework.com/).
    We will be using this module in the subsequent sections of this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何在 Zend Framework 2 应用程序中安装新模块，这里有一个简单的任务给您。在这个应用程序上安装 Zend GData 包。安装此包的说明可在
    [https://packages.zendframework.com/](https://packages.zendframework.com/) 找到。我们将在本章后续部分使用此模块。
- en: The Photo gallery application
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 照片相册应用程序
- en: Let us get started with implementing our custom photo gallery using Zend Framework
    2\. Since we have already implemented a file management interface, we will use
    a similar interface to implement a photo gallery.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用 Zend Framework 2 实现我们的自定义相册。由于我们已实现了文件管理界面，我们将使用类似的界面来实现相册。
- en: The schema for a photo gallery will be similar to the `Upload` entity; additionally,
    we will have a field to store the `thumbnail` filename, which is generated during
    upload. Both the images and the generated thumbnails will be stored in the `<Module>\data\images`
    folder. We will use a custom action to display the images in the browser.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 照片相册的架构将与 `Upload` 实体类似；此外，我们还将有一个字段来存储在上传过程中生成的 `thumbnail` 文件名。图像和生成的缩略图都将存储在
    `<Module>\data\images` 文件夹中。我们将使用自定义操作在浏览器中显示图像。
- en: 'Before we get started, let''s quickly review some of the important methods
    that are supported by `WebinoImageThumb`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们快速回顾一下由 `WebinoImageThumb` 支持的一些重要方法：
- en: '`resize ($maxWidth = 0, $maxHeight = 0)`: This function resizes the image to
    the specified height and width; if either of the values is set to `0`, that dimension
    will not be considered as a limiter'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resize ($maxWidth = 0, $maxHeight = 0)`: 此函数将图像调整到指定的宽度和高度；如果任一值设置为 `0`，则该维度将不被视为限制'
- en: '`adaptiveResize ($width, $height)`: This function attempts to get the image
    as close to the provided dimensions as possible, and then crops the remaining
    overflow (from the center) to get the image to be the size specified'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adaptiveResize ($width, $height)`: 此函数尝试将图像调整到尽可能接近提供的尺寸，然后裁剪剩余的溢出（从中心）以使图像达到指定的尺寸'
- en: '`crop ($startX, $startY, $cropWidth, $cropHeight)`: This function crops the
    images from the given coordinates to the specified width and height'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop ($startX, $startY, $cropWidth, $cropHeight)`: 此函数从给定的坐标裁剪图像到指定的宽度和高度'
- en: '`rotateImage ($direction = ''CW'')`: Rotates the image by 90 degrees clockwise
    or counterclockwise'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rotateImage ($direction = ''CW'')`: 通过顺时针或逆时针旋转图像 90 度'
- en: '`rotateImageNDegrees ($degrees)`: Rotates the image by the specified degrees'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rotateImageNDegrees ($degrees)`: 通过指定的度数旋转图像'
- en: '`save ($fileName, $format = null)`: Saves the image by the specified filename'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save ($fileName, $format = null)`: 通过指定的文件名保存图像'
- en: Time for action – implementing a simple photo gallery
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 实现一个简单的相册
- en: 'Carry out the following steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create a new entity called `ImageUpload` with the following table structure:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ImageUpload` 的新实体，具有以下表结构：
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create the relevant `ImageUpload` entity in the `src/Users/Model/ImageUpload.php`
    file, the `TableGateway` object in the `src/Users/Model/ImageUploadTable.php`
    file, and the `Controller` (`MediaManagerController`) inside the module (`CommunicationApp/module/Users`)
    in the `src/Users/Controller/MediaManagerController.php` file.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/Users/Model/ImageUpload.php` 文件中创建相关的 `ImageUpload` 实体，在 `src/Users/Model/ImageUploadTable.php`
    文件中创建 `TableGateway` 对象，以及在模块 (`CommunicationApp/module/Users`) 中的 `src/Users/Controller/MediaManagerController.php`
    文件内的 `Controller` (`MediaManagerController`)。
- en: In the `Upload` form's `Submit` process, generate the thumbnail by using a new
    method called `generateThumbnail()`; this method will take the filename of the
    existing image as the parameter. The `resize` method resizes the image to 75x75
    px and saves it to the image upload directory with a `tn_` prefix.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Upload` 表单的 `Submit` 过程中，使用名为 `generateThumbnail()` 的新方法生成缩略图；此方法将现有图像的文件名作为参数。`resize`
    方法将图像调整为 75x75 像素，并带有 `tn_` 前缀保存到图像上传目录。
- en: This method needs to be placed in the `MediaManagerController` file, `src/Users/Controller/MediaManagerController.php`.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法需要放置在 `MediaManagerController` 文件中，`src/Users/Controller/MediaManagerController.php`。
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our next step is to write an action to render the image in the `Full` and `Thumbnail`
    modes; for this we will need to create a custom route that will take the `action`,
    `id`, and `subaction` parameters. This is achieved by the following route definition
    in the module configuration file, `CommunicationApp/module/Users/config/module.config.php`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下一步是编写一个操作，以在 `Full` 和 `Thumbnail` 模式下渲染图像；为此，我们需要创建一个自定义路由，该路由将接受 `action`、`id`
    和 `subaction` 参数。这是通过模块配置文件中的以下路由定义实现的，`CommunicationApp/module/Users/config/module.config.php`：
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our next step is to write an action that will respond to the various image requests.
    This action needs to be placed in the `MediaManagerController` file, `src/Users/Controller/MediaManagerController.php`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下一步是编写一个响应各种图像请求的操作。这个操作需要放置在 `MediaManagerController` 文件中，`src/Users/Controller/MediaManagerController.php`。
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Make sure the process works completely, from uploading the picture to the gallery
    to displaying it in the photo page. See the following code for the usage of `showImageAction()`
    in the `upload` view in the media manager, `CommunicationApp/module/Users/view/users/media-manager/view.phtml`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保整个过程完全工作，从上传图片到画廊，再到在照片页面上显示。请参阅以下代码，了解在媒体管理器中的 `upload` 视图中 `showImageAction()`
    的使用，`CommunicationApp/module/Users/view/users/media-manager/view.phtml`：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now test the application on a browser of your choice. The image upload page
    should look like the following screenshot:![Time for action – implementing a simple
    photo gallery](img/1929OS_06_02.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在您选择的浏览器上测试应用程序。图像上传页面应如下截图所示：![实施简单照片画廊的时间 - 实现简单照片画廊](img/1929OS_06_02.jpg)
- en: 'Once the image upload form is successfully submitted, the image will be resized
    and shown in the gallery as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图像上传表单成功提交，图像将被调整大小并在画廊中显示，如下截图所示：
- en: '![Time for action – implementing a simple photo gallery](img/1929OS_06_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![实施简单照片画廊的时间 - 实现简单照片画廊](img/1929OS_06_03.jpg)'
- en: 'The **View Image** link on top of the resized image takes you to a page with
    the full-sized image:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在调整大小后的图像顶部的 **查看图像** 链接将您带到包含完整尺寸图像的页面：
- en: '![Time for action – implementing a simple photo gallery](img/1929OS_06_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![实施简单照片画廊的时间 - 实现简单照片画廊](img/1929OS_06_04.jpg)'
- en: '*What just happened?*'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么事？*'
- en: We have implemented a simple photo gallery by making use of an external image
    manipulation library. We utilized the `resize` function to create thumbnails and
    we created a custom action to handle image rendering in the web browser.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用外部图像处理库实现了简单的照片画廊。我们使用了 `resize` 函数来创建缩略图，并为在网页浏览器中处理图像渲染创建了一个自定义操作。
- en: Have a go hero
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: Now that you understand how to work with the `WebinoImageThumb` module, your
    next task will be to extend the photo gallery to support the `rotate` function.
    Add a `rotate` function to the **View Image** page and allow the user to rotate
    the image both clockwise and anticlockwise.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何使用 `WebinoImageThumb` 模块，您的下一个任务是将照片画廊扩展以支持 `rotate` 功能。在 **查看图像**
    页面上添加一个 `rotate` 函数，并允许用户顺时针和逆时针旋转图像。
- en: Google Data APIs
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google 数据 API
- en: Google Data APIs provide a simple interface for applications to read and write
    data into various Google services. The Data APIs use a protocol similar to the
    Atom Publishing Protocol for data transfer. All the services are implemented in
    the package called `ZendGdata`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Google 数据 API 为应用程序提供了一个简单的接口，用于读取和写入各种 Google 服务中的数据。数据 API 使用与 Atom 发布协议类似的协议进行数据传输。所有服务都在名为
    `ZendGdata` 的包中实现。
- en: 'Some of the most frequently used Google services that are supported by the
    `ZendGdata` API are listed as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `ZendGdata` API 支持的一些最常用的 Google 服务如下所示：
- en: Picasa Web Albums
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Picasa 网络相册
- en: YouTube
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YouTube
- en: Google Calendar
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 日历
- en: Google Spreadsheets
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 电子表格
- en: Google Documents
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 文档
- en: Google Provisioning
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 配置
- en: Google Analytics
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 分析
- en: Google Blogger
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 博客
- en: Google CodeSearch
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 代码搜索
- en: Google Notebook
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 笔记本
- en: 'Since `ZendGdata` is not provided with the default Zend Framework installation,
    this needs to be installed manually. This can be performed using Composer and
    by fetching `"zendframework/zendgdata": "2.*"`.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '由于 `ZendGdata` 不包含在默认的 Zend 框架安装中，因此需要手动安装。这可以通过 Composer 和获取 `"zendframework/zendgdata":
    "2.*"` 来完成。'
- en: The Google Photos API
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google 照片 API
- en: 'The Google Photos API allows you to fetch, edit, and manage your photos and
    albums in your Picasa or Google+ accounts. The Data API provides all kinds of
    services; some of the key functions are listed as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Google Photos API 允许您从 Picasa 或 Google+ 账户中获取、编辑和管理您的照片和相册。数据 API 提供了各种服务；以下列出了其中一些关键功能：
- en: '`getUserFeed()`: Gets all the associated albums for that user'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUserFeed()`: 获取该用户所有关联的相册'
- en: '`insertAlbumEntry()`: Creates a new album'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertAlbumEntry()`: 创建一个新的相册'
- en: '`getAlbumFeed()`: Fetches the specified album'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAlbumFeed()`: 获取指定的相册'
- en: '`insertPhotoEntry()`: Creates a new photo'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertPhotoEntry()`: 创建一个新的照片'
- en: '`getPhotoFeed()`: Fetches the specified photo'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPhotoFeed()`: 获取指定的照片'
- en: '`insertCommentEntry()`: Creates a new comment'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertCommentEntry()`: 创建一个新的评论'
- en: '`getCommentEntry()`: Fetches the specified comment'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCommentEntry()`: 获取指定的评论'
- en: '`insertTagEntry()`: Creates a new tag'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertTagEntry()`: 创建一个新的标签'
- en: '`getTagEntry()`: Fetches the specified tag'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getTagEntry()`: 获取指定的标签'
- en: '`deleteAlbumEntry()`: Deletes the album'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleteAlbumEntry()`: 删除相册'
- en: '`deletePhotoEntry()`: Deletes the photo'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deletePhotoEntry()`: 删除照片'
- en: '`deleteCommentEntry()`: Deletes the comment'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleteCommentEntry()`: 删除评论'
- en: '`deleteTagEntry()`: Deletes the tag'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleteTagEntry()`: 删除标签'
- en: In this example we will fetch the user's existing albums and the photos stored
    inside those albums.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将获取用户的现有相册以及存储在这些相册中的照片。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Before moving on, ensure that the `ZendGdata` library is installed in your
    application using Composer. Refer to the following installation instructions:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保您已使用 Composer 在应用程序中安装了 `ZendGdata` 库。请参考以下安装说明：
- en: 'Add the following line to the `requires` section of `CommunicationApp/composer.json`:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将以下行添加到 `CommunicationApp/composer.json` 的 `requires` 部分：
- en: '[PRE8]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Update the application dependencies using Composer:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Composer 更新应用程序依赖项：
- en: '[PRE9]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Before getting started, make sure you have uploaded some photos on your Google
    Photos account.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保您已在您的 Google Photos 账户上上传了一些照片。
- en: Time for action – fetching photos from Google Photos
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间 - 从 Google Photos 获取照片
- en: 'Follow these steps to fetch photos from your Google Photos account:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤从您的 Google Photos 账户获取照片：
- en: Create a method, `getGooglePhotos()`, in your controller that will connect to
    Google Photos and fetch all albums from Google Photos. This method needs to be
    placed in the `MediaManagerController` file, `src/Users/Controller/MediaManagerController.php`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的控制器中创建一个名为 `getGooglePhotos()` 的方法，该方法将连接到 Google Photos 并获取所有相册。此方法需要放置在
    `MediaManagerController` 文件中，`src/Users/Controller/MediaManagerController.php`。
- en: Set up the API client to make use of the `Curl` request with the option to disable
    `sslverifypeer`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 API 客户端以使用带有禁用 `sslverifypeer` 选项的 `Curl` 请求。
- en: '[PRE11]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now create a new Google Photos client using the API client.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个新的 Google Photos 客户端，使用 API 客户端。
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now fetch the list of albums using `getUserFeed()` and get the list of images
    inside the album using `getAlbumFeed()`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过 `getUserFeed()` 获取相册列表，并使用 `getAlbumFeed()` 获取相册内的图片列表。
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following code block in the `album` view is used to render the albums;
    this can be placed in the media manager''s `index` view, `CommunicationApp/module/Users/view/users/media-manager/index.phtml`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `album` 视图中的以下代码块用于渲染相册；这可以放置在媒体管理器的 `index` 视图中，`CommunicationApp/module/Users/view/users/media-manager/index.phtml`：
- en: '[PRE14]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Upload pictures to your Google Photos album:![Time for action – fetching photos
    from Google Photos](img/1929OS_06_05.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图片上传到您的 Google Photos 相册：![动手时间 - 从 Google Photos 获取照片](img/1929OS_06_05.jpg)
- en: Open the page in a browser window; you should be able to see all available albums
    and photos inside the album:![Time for action – fetching photos from Google Photos](img/1929OS_06_06.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器窗口中打开页面；您应该能够看到相册内所有可用的相册和照片：![动手时间 - 从 Google Photos 获取照片](img/1929OS_06_06.jpg)
- en: '*What just happened?*'
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have successfully used Google Data APIs to fetch Picasa upload information
    from Google and used that information to render galleries in our application.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功使用 Google Data APIs 从 Google 获取 Picasa 上传信息，并使用这些信息在我们的应用程序中渲染相册。
- en: Have a go hero
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手实践英雄
- en: Your next task will be to implement the photo upload option using Google Data
    APIs when viewing a photo in the photo gallery; you will have a button that will
    allow you to upload the photo to Google Photos.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您接下来的任务是在查看照片库中的照片时使用 Google Data APIs 实现照片上传选项；您将有一个按钮，允许您将照片上传到 Google Photos。
- en: YouTube Data API
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YouTube 数据 API
- en: The YouTube Data API allows access to YouTube content; you can use this API
    to fetch videos, playlists, channels, post comments, and upload and manage videos.
    Users are allowed to perform unauthenticated requests for the retrieval of feeds
    on popular videos, post comments, and so on.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: YouTube数据API允许访问YouTube内容；您可以使用此API获取视频、播放列表、频道、发表评论以及上传和管理视频。用户允许执行未经身份验证的请求以检索热门视频的源、发表评论等。
- en: 'Some of the most frequently used YouTube API methods are listed as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了YouTube API中最常用的方法：
- en: '`getVideoFeed()`: Retrieve videos from a video query'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVideoFeed()`: 从视频查询中检索视频'
- en: '`getTopRatedVideoFeed()`: Retrieve top-rated videos for the specific video
    query'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getTopRatedVideoFeed()`: 检索特定视频查询中的顶级视频'
- en: '`getUserUploads()`: Retrieve the user''s uploaded videos'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUserUploads()`: 检索用户的上传视频'
- en: '`getUserFavorites()`: Retrieve the user''s favorite videos'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUserFavorites()`: 检索用户的收藏视频'
- en: '`getVideoResponseFeed()`: Get video responses for a specific video'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVideoResponseFeed()`: 获取特定视频的回复'
- en: '`getVideoCommentFeed()`: Get comments for a specific video'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVideoCommentFeed()`: 获取特定视频的评论'
- en: '`getPlaylistListFeed()`: Get a user''s playlists'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPlaylistListFeed()`: 获取用户的播放列表'
- en: '`getSubscriptionFeed()`: Get a user''s subscriptions'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getSubscriptionFeed()`: 获取用户的订阅'
- en: '`insertEntry()`: Upload a video to YouTube'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertEntry()`: 上传视频到YouTube'
- en: In this example, we will be retrieving videos for a specific keyword and then
    render them in the web page.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将检索特定关键词的视频，并在网页中渲染它们。
- en: Time for action – listing YouTube videos for a keyword
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 列出关键词的YouTube视频
- en: 'Perform the following steps for listing YouTube videos for a keyword:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以列出关键词的YouTube视频：
- en: Create a function that will get the YouTube videos for the `Zend Framework`
    keyword.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于获取`Zend Framework`关键词的YouTube视频。
- en: 'Establish the connection in a similar way to the previous connection made for
    Google Photos. This needs to be placed in a new method, `getYoutubeVideos()`,
    in the `MediaManagerController` file, `src/Users/Controller/MediaManagerController.php`:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以类似的方式建立连接，就像之前为Google Photos建立的连接一样。这需要放置在`MediaManagerController`文件中的新方法`getYoutubeVideos()`中，`src/Users/Controller/MediaManagerController.php`：
- en: '[PRE15]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Initialize the YouTube client and execute a video query for the keyword `Zend
    Framework`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化YouTube客户端并执行关键词`Zend Framework`的视频查询：
- en: '[PRE16]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Parse the query results and store it in an array:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析查询结果并将其存储在数组中：
- en: '[PRE17]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The resulting content is rendered in the view and a video listing as shown in
    the following screenshot:![Time for action – listing YouTube videos for a keyword](img/1929OS_06_07.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果内容在视图中渲染，并显示如下截图中的视频列表：![行动时间 – 列出关键词的YouTube视频](img/1929OS_06_07.jpg)
- en: '*What just happened?*'
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have utilized the `ZendGData` API's YouTube APIs to retrieve a simple list
    of videos from YouTube for a specific keyword.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了`ZendGData` API的YouTube API来检索特定关键词的YouTube视频列表。
- en: Pop quiz – media sharing
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验 – 媒体共享
- en: Q1\. Which command is used in Composer to install a newly configured dependency?
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 在Composer中，哪个命令用于安装新配置的依赖项？
- en: '`php composer.phar setup`'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`php composer.phar setup`'
- en: '`php composer.phar self-update`'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`php composer.phar self-update`'
- en: '`php composer.phar show`'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`php composer.phar show`'
- en: '`php composer.phar update`'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`php composer.phar update`'
- en: Q2\. Which of the following is a valid method to upload a new photo to Google
    Photos?
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 以下哪个是上传新照片到Google Photos的有效方法？
- en: '`uploadPhoto()`'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`uploadPhoto()`'
- en: '`insertPhoto()`'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`insertPhoto()`'
- en: '`uploadNewPhoto()`'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`uploadNewPhoto()`'
- en: '`insertPhotoEntry()`'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`insertPhotoEntry()`'
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have learned various techniques to manage media; initially
    we started with implementing our own photo gallery and later on we moved on to
    using Google GData APIs to retrieve and store media on the Web.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了各种管理媒体的技术；最初我们从实现自己的相册开始，后来转向使用Google GData API在网络上检索和存储媒体。
- en: In our next chapter, we will be working on implementing a simple search interface.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们下一章中，我们将实现一个简单的搜索界面。
