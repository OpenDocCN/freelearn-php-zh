- en: Chapter 6. Assets, Authentication, and ACL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。资产、认证和ACL
- en: We will make use of our `Backoffice` module for this chapter, since it will
    be the second module that we will develop.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个章节中使用我们的`Backoffice`模块，因为它将是我们将要开发的第二个模块。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Assets management
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产管理
- en: Developing an authentication system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发认证系统
- en: Securing the application using the **Access Control List** (**ACL**) component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**访问控制列表**（**ACL**）组件保护应用程序
- en: Assets management
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产管理
- en: 'Before going further, I would like to introduce you to Phalcon''s assets manager.
    This is a very useful component when you need to handle lots of assets (in general,
    CSS files, images, and JavaScript files). The service should already be available,
    and you can access it via DI using the following command:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步之前，我想向你介绍Phalcon的资产管理器。当你需要处理大量资产时（通常，CSS文件、图像和JavaScript文件），这是一个非常有用的组件。该服务应该已经可用，并且你可以通过DI使用以下命令访问它：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Otherwise, you can use the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，你可以使用以下命令：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'I''ve heard some people complaining that after its installation, this service
    does not exist. If you are using Phalcon version 1.3.* (and you should be), then
    you wouldn''t have any problem. If you use an older version, you might need to
    inject this service into the DI:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我听说有些人抱怨在安装后，这个服务不存在。如果你使用Phalcon版本1.3.*（你应该使用），那么你不会有任何问题。如果你使用较旧版本，你可能需要将此服务注入到DI中：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, let's open the main layout for the back office and do some changes. Open
    `modules/Backoffice/Views/Default/layout.volt` and remove all the lines containing
    `stylesheetLink` and `javascriptInclude`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打开后台办公室的主布局并进行一些更改。打开`modules/Backoffice/Views/Default/layout.volt`，并移除所有包含`stylesheetLink`和`javascriptInclude`的行。
- en: 'Now, between `<head>` and `</head>` sections, add the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`<head>`和`</head>`部分之间，添加以下代码：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And before the `</body>` close tag:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在`</body>`关闭标签之前：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `outputJs` and `outputCss` methods contain two parameters (`headerCss` and
    `footerJs`). These parameters are the names of the assets collections that we
    are going to build in a few moments. I have added two blocks (`css` and `javascripts`),
    because we might want to add some special resource for a certain page.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`outputJs`和`outputCss`方法包含两个参数（`headerCss`和`footerJs`）。这些参数是我们将在接下来的几分钟内构建的资产集合的名称。我添加了两个块（`css`和`javascripts`），因为我们可能想要为某个页面添加一些特殊资源。'
- en: 'Now, we are going to modify the `BaseController.php` file, and we will add
    the assets. Open `Backoffice/Controllers/BaseController.php` and append this code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改`BaseController.php`文件，并添加资产。打开`Backoffice/Controllers/BaseController.php`，并附加以下代码：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can see the new private method `buildAssets()`, where we create the asset
    groups and use special filters to minify them. After that, we call this method
    in `afterExecuteRoute()`. You can create your own custom filters, if you want,
    by extending `Phalcon\Assets\FilterInterface` class. Note that the output goes
    to a new folder named `prod`. We must create this directory and give it the proper
    permissions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到新的私有方法`buildAssets()`，其中我们创建资产组并使用特殊的过滤器来压缩它们。之后，我们在`afterExecuteRoute()`中调用此方法。如果你想，你可以通过扩展`Phalcon\Assets\FilterInterface`类来创建自己的自定义过滤器。请注意，输出将进入一个名为`prod`的新文件夹。我们必须创建此目录并赋予它适当的权限：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you handle many assets, you might want to save a list in a `config` array
    or something similar. If you use assets from a CDN, you need to pass some special
    parameter, for example, something like the following.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处理很多资产，你可能想要在`config`数组或类似的地方保存一个列表。如果你使用来自CDN的资产，你需要传递一些特殊的参数，例如以下内容。
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before checking the result, we need to do two more things. First, remove any
    content from the `IndexController` class to `indexAction()`. The final `IndexController.php`
    file should look like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查结果之前，我们需要做两件事。首先，从`IndexController`类中的`indexAction()`移除任何内容。最终的`IndexController.php`文件应该看起来像这样：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, open the template for `IndexAction()` that can be found at `Backoffice/Views/Default/index/index.volt`,
    remove any content from it, and append this code to it:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开位于`Backoffice/Views/Default/index/index.volt`的`IndexAction()`模板，从中移除任何内容，并将其代码附加到其中：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is it. You should now be able to access `http://www.learning-phalcon.localhost/backoffice`,
    and the result should be exactly the same as that shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样了。你现在应该能够访问`http://www.learning-phalcon.localhost/backoffice`，结果应该与以下截图显示的完全相同：
- en: '![Assets management](img/B03522_06_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![资产管理](img/B03522_06_01.jpg)'
- en: Fig. 1
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图1
- en: This is pretty much everything about assets manager, which is a simple, yet
    powerful and useful tool.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是关于资产管理的内容，这是一个简单、强大且有用的工具。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see an example of custom filters in the official documentation at [http://docs.phalconphp.com/en/latest/reference/assets.html#assets-management](http://docs.phalconphp.com/en/latest/reference/assets.html#assets-management).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在官方文档中看到自定义过滤器的示例 [http://docs.phalconphp.com/en/latest/reference/assets.html#assets-management](http://docs.phalconphp.com/en/latest/reference/assets.html#assets-management)。
- en: Developing an authentication system
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发认证系统
- en: There are always parts within your application that need to be protected. In
    this section, we will implement an authentication system that is partially based
    on the user tables that we created in the previous chapters, and we will use Phalcon's
    ACL component.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序中，总有一些部分需要受到保护。在本节中，我们将实现一个基于我们在前几章中创建的用户表的认证系统，并且我们将使用 Phalcon 的 ACL
    组件。
- en: We are not going to reinvent the wheel, so parts of the HTML code are taken
    from the official Bootstrap website ([http://getbootstrap.com](http://getbootstrap.com)).
    In addition, you can find parts of the PHP code in a plugin that I developed a
    long time ago and which can be found at [https://github.com/calinrada/PhalconUserPlugin](https://github.com/calinrada/PhalconUserPlugin).
    That being said, let's start developing our authentication system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会重新发明轮子，所以部分 HTML 代码是从官方 Bootstrap 网站上获取的 ([http://getbootstrap.com](http://getbootstrap.com))。此外，你还可以在很久以前我开发的一个插件中找到部分
    PHP 代码，该插件可以在 [https://github.com/calinrada/PhalconUserPlugin](https://github.com/calinrada/PhalconUserPlugin)
    找到。话虽如此，让我们开始开发我们的认证系统。
- en: The database structure
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库结构
- en: 'We will add a few more tables for users, and we will create new ones for the
    ACL according to the example found at [https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Acl/Adapter](https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Acl/Adapter)
    because we will use the database adapter. The incubator page contains a structure
    for the SQLite database, but we are going to "convert it" for MySQL. The new `user_*`
    tables are extracted as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为用户添加几个更多表，并根据在 [https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Acl/Adapter](https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Acl/Adapter)
    找到的示例创建新的 ACL 表，因为我们将会使用数据库适配器。孵化器页面包含 SQLite 数据库的结构，但我们将会“转换”它以适应 MySQL。新的 `user_*`
    表的提取方式如下：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And the new `acl_*` tables can look like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `acl_*` 表可以看起来像这样：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Models
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: 'Now that we have the DB structure, we need to generate the models for the newly
    created `user_*` tables. There is really no point in filling pages with complete
    models because for now, they will contain only getters and setters. The sort version
    of our models (without getters and setters) is this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了数据库结构，我们需要为新建的 `user_*` 表生成模型。目前，没有必要用完整的模型填满页面，因为它们现在将只包含获取器和设置器。我们模型的简化版本（不包含获取器和设置器）如下：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can add the getters and setters on your own or check the source code for
    this chapter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自己添加获取器和设置器，或者查看本章的源代码。
- en: 'Next, we will add the relations to the User models so that we can have quick
    access to the data from these new tables. Open `App\Core\Models\User.php` and
    append this code to the `initialize()` method:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向用户模型添加关系，以便我们可以快速访问这些新表中的数据。打开 `App\Core\Models\User.php` 并将以下代码追加到
    `initialize()` 方法中：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As for the `acl_*` tables, for now, we don't need to create any models. The
    `acl` database adapter will handle most of the data from them. We can also add
    data manually or create a task for it. We have database tables and models. Next,
    we will create an authentication component that will interact with them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `acl_*` 表，目前我们不需要创建任何模型。`acl` 数据库适配器将处理它们的大部分数据。我们也可以手动添加数据或为其创建一个任务。我们已经有数据库表和模型。接下来，我们将创建一个与它们交互的认证组件。
- en: 'To do this, navigate to `modules/Core/ directory` and create a new folder named
    `Security`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请导航到 `modules/Core/ 目录` 并创建一个名为 `Security` 的新文件夹：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `security` folder, create a new file named `Auth.php` and add the following
    content:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `security` 文件夹中，创建一个名为 `Auth.php` 的新文件，并添加以下内容：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that this is not the complete code due to its size. Please check
    the source code for this chapter. You can see that this file is extending `\Phalcon\Mvc\User\Component`.
    This means that we already have access to the DI, so we don't have to inject any
    services because they are already available.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于代码量较大，这不是完整的代码。请查看本章的源代码。你可以看到这个文件是扩展`\Phalcon\Mvc\User\Component`的，这意味着我们已经有访问DI的权限，因此我们不需要注入任何服务，因为它们已经可用。
- en: 'Let''s analyze a few of the methods from the `Auth` component a little bit:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下`Auth`组件中的几个方法：
- en: '`registerUserThrottling($user_id)`: This method logs any failed login attempts
    with a time stamp, and it checks the number of attempts for a user from a certain
    IP. If the number of attempts is greater than three, we will delay the response.
    This is a simple method to reduce the effectiveness of brute force attacks.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registerUserThrottling($user_id)`: 这个方法记录任何带有时间戳的失败登录尝试，并检查来自特定IP的用户尝试次数。如果尝试次数超过三次，我们将延迟响应。这是一个简单的方法来减少暴力攻击的有效性。'
- en: '`checkUserFlags($user)`: This method checks whether or not a user is active.
    Here, you can add other checks, for example, whether a user is banned or temporarily
    suspended.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkUserFlags($user)`: 这个方法检查用户是否活跃。在这里，你可以添加其他检查，例如，检查用户是否被禁止或暂时停用。'
- en: '`saveSuccessLogin($user)`: This method saves all the successful logins of a
    user and contains the user ID, IP, user agent, and the date and time.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saveSuccessLogin($user)`: 这个方法保存用户的所有成功登录记录，包含用户ID、IP、用户代理以及日期和时间。'
- en: '`createRememberEnviroment($user)`: This method (check the source code for `Chapter
    6`) creates tokens that we will hold in the database and some cookies. If this
    operation is successful, next time, we can auto login the user, using this information.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createRememberEnviroment($user)`: 这个方法（请查看第6章的源代码）创建我们将保存在数据库和一些cookie中的令牌。如果这个操作成功，下次我们可以使用这些信息自动登录用户。'
- en: '`setIdentity($user)`: This method simply saves an array containing information
    about the current authenticated user in the session. We can retrieve this information
    by using the `getIdentity()` method or directly from the session by calling `$session->get(''identity'')`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setIdentity($user)`: 这个方法简单地保存一个包含当前认证用户信息的数组到会话中。我们可以通过使用`getIdentity()`方法或直接从会话中调用`$session->get(''identity'')`来检索这些信息。'
- en: '`check($credentials)`: This method is the most important one. Here, we first
    check whether there is any user in our database, registered with the e-mail that
    we provided. If the user exists, we compare their password with the one that is
    provided, by making use of the `checkHash()` security component. After that, we
    check whether the user is active, save a log in successful login table, create
    a `Remember me` environment, and then save the information of the user in the
    session, by calling the `setIdentity()` method.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check($credentials)`: 这个方法是最重要的。在这里，我们首先检查我们数据库中是否有任何用户注册了提供的电子邮件。如果用户存在，我们使用`checkHash()`安全组件比较他们的密码与提供的密码。之后，我们检查用户是否活跃，保存成功的登录记录，创建`记住我`环境，然后通过调用`setIdentity()`方法将用户信息保存在会话中。'
- en: '`signin($form)`: We use this method to log in the user with the help of a form
    (and we will create this form in a few moments). If the form is valid, we call
    the `check()` method to validate the credentials. The rest of the methods are
    quite easy to understand.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signin($form)`: 我们使用这个方法通过表单登录用户（我们将在不久后创建这个表单）。如果表单有效，我们调用`check()`方法验证凭据。其余的方法相当容易理解。'
- en: 'We have the `Auth` component, but it is not available just yet. We need to
    add it to our DI. Open `modules/Backoffice/Config/services.php` and add this code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了`Auth`组件，但目前它还不可用。我们需要将其添加到我们的依赖注入（DI）中。打开`modules/Backoffice/Config/services.php`文件并添加以下代码：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, open the `config.php` file and append this code to the `$module_config`
    array:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`config.php`文件并将以下代码追加到`$module_config`数组中：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The component is now active, and we can use it. We will create the templates,
    forms, and controllers for a sign in action. Navigate to `modules/Backoffice/Controllers`
    and create a new file named `AuthController.php` with the following content:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 组件现在已激活，我们可以使用它了。我们将为登录操作创建模板、表单和控制器。导航到`modules/Backoffice/Controllers`并创建一个名为`AuthController.php`的新文件，内容如下：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We don''t have the `UserSinginForm`. Navigate to `modules/Core/` directory
    and create a new folder named `Forms`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有`UserSinginForm`。导航到`modules/Core/`目录并创建一个名为`Forms`的新文件夹：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `Forms` directory, create a new file named `UserSigninForm.php` with
    the following content:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Forms`目录下，创建一个名为`UserSigninForm.php`的新文件，内容如下：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You might have noticed that we are using **CSRF** fields in order to prevent
    **Cross-Site Request Forgery** attacks. If you have no idea what this is, please
    take a few moments and read about it at [https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们正在使用**CSRF**字段来防止**跨站请求伪造**攻击。如果您对此一无所知，请花几分钟时间阅读有关它的内容。[https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)。
- en: 'Next, we will create the templates. We will use the example template from [http://getbootstrap.com/examples/signin/](http://getbootstrap.com/examples/signin/),
    but we will adapt it to our needs. Since our main template, `layout.volt`, contains
    information that would be available just to authenticated users, we will clone
    this template and clean it so that we can use it for our sign in action and other
    actions that requires simple templates. Navigate to `modules/Backoffice/Views/Default/`
    and duplicate the `layout.volt` file by renaming it to `layout_simple.volt`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建模板。我们将使用[http://getbootstrap.com/examples/signin/](http://getbootstrap.com/examples/signin/)上的示例模板，但我们将根据我们的需求对其进行调整。由于我们的主要模板`layout.volt`包含仅对认证用户可用的信息，我们将克隆此模板并清理它，以便我们可以将其用于登录操作和其他需要简单模板的操作。导航到`modules/Backoffice/Views/Default/`，通过将其重命名为`layout_simple.volt`来复制`layout.volt`文件：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, remove the code from `layout_simple.volt` and append the new cleaned
    code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从`layout_simple.volt`中删除代码，并追加新的清理代码：
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The final step is to create the template for `signingAction()`. Navigate to
    `modules/Backoffice/Views/Default` and create a new folder named `auth`. After
    that, in the `auth` folder, create a file named `signin.volt` with the following
    content:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是创建`signingAction()`的模板。导航到`modules/Backoffice/Views/Default`，创建一个名为`auth`的新文件夹。之后，在`auth`文件夹中，创建一个名为`signin.volt`的文件，内容如下：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `signin.volt` template extends the newly created `layout_simple.volt`. Note
    the new `css` block. We have added a new `css` group named `signin`. We will enable
    it in a few moments. The `{{ content() ~ flashSession.output() }}` line is a concatenation,
    because the `flashSession` component is not returned in the `content()` file.
    So, if we output just the `content()` method, the `flashSession` messages will
    not be seen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`signin.volt`模板扩展了新创建的`layout_simple.volt`。注意新的`css`块。我们添加了一个名为`signin`的新`css`组。我们将在几分钟后启用它。`{{
    content() ~ flashSession.output() }}`行是一个连接，因为`flashSession`组件在`content()`文件中没有返回。所以，如果我们只输出`content()`方法，`flashSession`消息将不会被看到。'
- en: 'The template is missing a `css` file. We need to create it and add it to our
    assets collection. To do this, navigate to `public/assets/default/css/` and create
    a new file named `lp.backoffice.signin.css` with the following content:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 模板缺少一个`css`文件。我们需要创建它并将其添加到我们的`assets`集合中。为此，导航到`public/assets/default/css/`，并创建一个名为`lp.backoffice.signin.css`的新文件，内容如下：
- en: '[PRE24]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, we add this file to our `assets` collection. Open `modules/Backoffice/Controllers/BaseController.php`
    and append the following code to the `buildAssets()` method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将此文件添加到我们的`assets`集合中。打开`modules/Backoffice/Controllers/BaseController.php`，并将以下代码追加到`buildAssets()`方法中：
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This should be all. Our `Backoffice` module is not yet protected, but we can
    actually do a `signin` action. Using your browser, go to `http://www.learning-phalcon.localhost/backoffice/auth/signin`,
    and you should be able to see the exact result that is shown in the following
    screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就足够了。我们的`Backoffice`模块尚未受保护，但实际上我们可以执行`signin`操作。使用您的浏览器，访问`http://www.learning-phalcon.localhost/backoffice/auth/signin`，您应该能够看到以下截图所示的精确结果：
- en: '![Models](img/B03522_06_02.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![模型](img/B03522_06_02.jpg)'
- en: The **Sign in** page
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**登录**页面'
- en: 'If you already have a user name, you can try to log in. If not, you can create
    a new user using the task that we created in [Chapter 4](ch04.html "Chapter 4. Database
    Architecture, Models, and CLI Applications"), *Database Architecture, Models,
    and CLI Applications*:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有了用户名，您可以尝试登录。如果没有，您可以使用我们在[第4章](ch04.html "第4章。数据库架构、模型和CLI应用程序")中创建的任务创建一个新用户，*数据库架构、模型和CLI应用程序*：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will create a user who has the e-mail address as `john.doe@learning-phalcon.localhost`
    and the password as `myPassw0rd`. You can use these details to test the form.
    On success, you will be redirected to index page, on failure; you will see some
    error messages.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个用户，其电子邮件地址为 `john.doe@learning-phalcon.localhost`，密码为 `myPassw0rd`。您可以使用这些详细信息来测试表单。成功后，您将被重定向到索引页面，失败时，您将看到一些错误消息。
- en: Now that we have a fully functional authentication system, we can secure the
    entire application. For this, we will make use of Phalcon's `Acl` component.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个完全功能的认证系统，我们可以保护整个应用程序。为此，我们将使用 Phalcon 的 `Acl` 组件。
- en: Securing the application using the ACL component
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ACL 组件保护应用程序
- en: An ACL is very useful when you have users with different roles. For example,
    an administrator should have unlimited access, but an editor should have access
    only to the Articles section. We already have the database structure for the Acl,
    so we just need to create some relations. First, we will create a new intermediate
    table named `user_roles` that will hold information about each user's role. A
    user can have many roles.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有不同角色的用户时，ACL 非常有用。例如，管理员应该有无限访问权限，但编辑员只能访问文章部分。我们已经有 Acl 的数据库结构，所以我们只需要创建一些关系。首先，我们将创建一个名为
    `user_roles` 的新中间表，该表将包含每个用户角色的信息。一个用户可以有多个角色。
- en: '[PRE27]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Another thing that we can do is get rid of the `user_group` table since we are
    not going to use it anymore.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以做的一件事是删除 `user_group` 表，因为我们不再使用它了。
- en: Delete the `modules/Core/Models/UserGroup.php` file.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `modules/Core/Models/UserGroup.php` 文件。
- en: 'Remove this code from `User.php`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `User.php` 中删除此代码：
- en: '[PRE28]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Remove the column from `user` table and drop the `user_group` table:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `user` 表中删除列并删除 `user_group` 表：
- en: '[PRE29]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the user `create()` method by navigating to `Core/Managers/UserManager.php`,
    and remove the following lines of code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 `Core/Managers/UserManager.php` 更新用户 `create()` 方法，并删除以下代码行：
- en: '[PRE30]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: On the `create()` method, replace the `param $user_group_name = 'User'` with
    `$user_role = 'Guest'`. (We will implement the functionality in a few moments.)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `create()` 方法中，将 `param $user_group_name = 'User'` 替换为 `$user_role = 'Guest'`。（我们将在不久后实现此功能。）
- en: Now, let's create the models from `user_role` and `acl_roles`. Remember that
    I will not write down the getters and the setters, just the important stuff.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从 `user_role` 和 `acl_roles` 创建模型。记住，我不会写下获取器和设置器，只写重要的内容。
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We need to make some changes to the `create()` method from `UserManager.php`
    in order to assign existing roles to a user. The new method should look like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将现有角色分配给用户，我们需要对 `UserManager.php` 中的 `create()` 方法进行一些修改。新方法应如下所示：
- en: '[PRE33]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The reason why we define `$o_user_role` as array collection of objects is because
    the relationship between a user and the roles is one-to-many. We also need to
    modify the `createAction()` method from the `UserTask.php`. Open the file located
    at `modules/Tasks/UserTask.php` and append the user''s role as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `$o_user_role` 定义为对象数组集合的原因是用户和角色之间的关系是一对多。我们还需要修改 `UserTask.php` 中的 `createAction()`
    方法。打开位于 `modules/Tasks/UserTask.php` 的文件，并按以下方式追加用户的角色：
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We will use `Guest` by default. Later, we will create a method that will add
    and remove roles for a user. Now, we are going to implement the security check.
    Switch to `modules/Core/Security` folder and create a new file with the following
    content:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将默认使用 `Guest`。稍后，我们将创建一个方法来为用户添加和删除角色。现在，我们将实现安全检查。切换到 `modules/Core/Security`
    文件夹，创建一个包含以下内容的文件：
- en: '[PRE35]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Basically, using the `beforeDispatch()` method, we check for what the user
    is requesting, whether it is authenticated, and whether the role that they have
    allows them to access a certain resource. We need to enable the `Acl` service
    and attach the `Acl` to the events manager. In `config/services.php` (globally),
    add the setting for the `Acl` service:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，使用 `beforeDispatch()` 方法，我们检查用户请求的内容，是否已认证，以及他们拥有的角色是否允许他们访问某个资源。我们需要启用
    `Acl` 服务并将 `Acl` 附加到事件管理器。在 `config/services.php`（全局）中添加 `Acl` 服务的设置：
- en: '[PRE36]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, update the dispatcher with the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用以下代码更新分发器：
- en: '[PRE37]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We will also need to update the `setIdentity()` method from `Auth.php`. Replace
    it with this code to get the user roles from the database:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更新 `Auth.php` 中的 `setIdentity()` 方法。用以下代码替换它以从数据库中获取用户角色：
- en: '[PRE38]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If you followed the steps closely and did everything by the book, you should
    be able to access `http://www.learning-phalcon.localhost/backoffice/`; the browser
    will redirect you to the **Sign in** page (the same page where we saw the **Sign
    in** page).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你严格按照步骤操作，并且一切都按照书本上的方法来做，你应该能够访问 `http://www.learning-phalcon.localhost/backoffice/`；浏览器将会将你重定向到
    **登录** 页面（也就是我们之前看到的 **登录** 页面）。
- en: We are almost at the end of this chapter. What we will do next is create a task
    that will handle `Acl`, and we will use this task in the future when we need to
    modify someone's permissions. Let's see how a simple task for `Acl` can look.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎就要结束这一章了。接下来我们将创建一个处理 `Acl` 的任务，并且在未来当我们需要修改某人的权限时，我们会使用这个任务。让我们看看一个简单的
    `Acl` 任务可以是什么样的。
- en: 'Switch to `modules/Tasks` and create a new file named `AclTask.php`, with the
    following content:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 `modules/Tasks` 并创建一个名为 `AclTask.php` 的新文件，内容如下：
- en: '[PRE39]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We created only one method named `initAction()` that will create the two default
    acl roles: `Administrator` and `Guest`. An administrator will be allowed to access
    everything, whereas a `Guest` role will be able to access nothing. Run this task:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只创建了一个名为 `initAction()` 的方法，它将创建两个默认的 acl 角色：`管理员` 和 `访客`。管理员将能够访问一切，而访客角色将无法访问任何内容。运行此任务：
- en: '[PRE40]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now you should be able to see records in your database with the two roles inserted.
    If you see them, you can navigate to the `user_role` table and insert an `Administrator`
    role for your user, then try to login, then delete the `Administrator` role and
    add the `Guest` one. We will add more methods to this task in the next chapters.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够在数据库中看到已经插入的两个角色的记录。如果你看到了它们，你可以导航到 `user_role` 表，为你的用户插入一个 `管理员` 角色，然后尝试登录，然后删除
    `管理员` 角色并添加 `访客` 角色。我们将在下一章中为这个任务添加更多方法。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about assets management and Access Control List.
    We also developed an authentication system for our application. We will continue
    our journey with the development of the `Backoffice` module, where you will learn
    more about Forms, Volt, and Models.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了资产管理以及访问控制列表。我们还为我们的应用程序开发了一个认证系统。我们将继续我们的旅程，开发 `Backoffice` 模块，在那里你将了解更多关于表单、Volt
    和模型的知识。
