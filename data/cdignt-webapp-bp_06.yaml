- en: Chapter 6. Creating an Authentication System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 创建认证系统
- en: CodeIgniter doesn't come with a user authentication system out of the box (urgh,
    that phrase), but nevertheless it doesn't. If you want to manage users and sessions,
    there are several options open to you. You can install an auth Spark, or you can
    develop your own solution—which is what we will do here.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter没有自带用户认证系统（呃，那个短语），但无论如何，它没有。如果您想管理用户和会话，您有多种选择。您可以安装auth Spark，或者您可以开发自己的解决方案——这正是我们将在这里做的。
- en: One of the irritations I have with other "third-party" plugins (whatever their
    purpose) is that the code is almost always difficult, making maintenance and integration
    difficult. This authentication system is as simple as I can make it, and hopefully,
    it will be easy for you to adapt and extend it for your purposes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我对其他“第三方”插件（无论其用途如何）的烦恼之一是代码几乎总是难以理解，这使得维护和集成变得困难。这个认证系统是我能使其尽可能简单，希望它将很容易为您适应和扩展。
- en: The authentication system provided in this chapter will allow you to create
    and manage users, password resets, user e-mail notifications, user logins, and
    so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供的认证系统将允许您创建和管理用户、密码重置、用户电子邮件通知、用户登录等。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Design and wireframes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和线框
- en: Creating the database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Creating the models
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Creating the views
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: Creating the controllers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Putting it all together
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合所有内容
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'To create this app, we will create five controllers: one to handle signing
    in to sessions, one to handle admin functions (CRUD operations), one for user
    password management, one to allow a user to register, and one to offer functionality
    to a user once they are logged in.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建此应用程序，我们将创建五个控制器：一个用于处理会话登录，一个用于处理管理功能（CRUD操作），一个用于用户密码管理，一个允许用户注册，以及一个在用户登录后提供功能的控制器。
- en: We'll also create a language file to store text, allowing you to have multiple
    language support should that be required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个语言文件来存储文本，以便在需要时支持多种语言。
- en: We will make amends to the `config.php` file to allow for encryption support
    necessary for sessions and password support.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对`config.php`文件进行修改，以允许对会话和密码支持所需的加密支持。
- en: We'll create all the necessary view files and even a CSS file to help Bootstrap
    with some of the views.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建所有必要的视图文件，甚至一个CSS文件来帮助Bootstrap处理一些视图。
- en: However, this app along with all the others in this book, relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you might already
    have, please keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个应用程序以及本书中的其他应用程序，都依赖于我们在[第1章](ch01.html "第1章. 简介和共享项目资源")中完成的基本设置，*简介和共享项目资源*；尽管你可以将大量代码复制并粘贴到几乎任何你已有的应用程序中，但请记住，第一章中完成的基本设置是本章的基础。
- en: So without further ado, let's get on with it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，无需多言，让我们开始吧。
- en: Design and wireframes
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计和线框
- en: As always, before we start building, we should as always take a look at what
    we plan to build.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，在我们开始构建之前，我们应该先看看我们打算构建什么。
- en: 'Firstly, a brief description of our intent: we plan to build an app that will
    provide the following functions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，简要描述我们的意图：我们计划构建一个应用程序，它将提供以下功能：
- en: An admin can manage all users within the system and also allow individual users
    to edit and update their own data.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员可以管理系统中的所有用户，并允许个别用户编辑和更新自己的数据。
- en: Users can reset passwords if they have forgotten them; e-mails confirming this
    will be sent to these users
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户忘记了密码，他们可以重置密码；确认此操作的电子邮件将发送给这些用户
- en: New users are able to register and become part of the system; a password will
    be generated and sent to them in an e-mail
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新用户可以注册并成为系统的一部分；密码将被生成并通过电子邮件发送给他们
- en: We will also look at how to implement code to check for a users' access level.
    You can use this code in your projects to limit users from specific controllers
    and controller functions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将探讨如何实现代码来检查用户的访问级别。您可以在您的项目中使用此代码来限制用户访问特定的控制器和控制器函数。
- en: 'To get a better idea of what''s happening, let''s take a look at the following
    site map:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解正在发生的事情，让我们看看以下网站地图：
- en: '![Design and wireframes](img/7093OS_06_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![设计和线框图](img/7093OS_06_01.jpg)'
- en: 'So, that''s the site map; now, let''s go over each item and get a brief idea
    of what it does:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是网站地图；现在，让我们逐一查看每个项目，并简要了解它们的功能：
- en: '**Signin**: Imagine this as the start point. The user will be able to sign
    in at this point. Depending on the value in `users.usr_access_level`, they will
    either be directed to `me` or `users` controllers. The `me` controller is a place
    for normal users to edit and update their details, while the `users` controller
    offers a place for an admin to manage all users.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录**：想象这是一个起点。用户将能够在此处登录。根据`users.usr_access_level`的值，他们将被导向`me`或`users`控制器。`me`控制器是普通用户编辑和更新他们详情的地方，而`users`控制器提供了一个管理员管理所有用户的地方。'
- en: '**Me**: This currently displays a form to the user; however, consider this
    area a dashboard area for users who are not admins. Admins have their `users.usr_access_level`
    value set to `1`. Currently, the `me` controller will load the `index` function,
    which will allow the user to edit their details—speaking of which, let''s see
    the next block.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我的信息**：目前，这向用户显示一个表单；然而，请将此区域视为非管理员用户的仪表板区域。管理员将`users.usr_access_level`值设置为`1`。目前，`me`控制器将加载`index`函数，允许用户编辑他们的详情——说到这里，让我们看看下一个块。'
- en: '**Edit My Details**: This will display a form to the current user. The form
    will allow the user to change and save their contact data.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑我的详细信息**：这将向当前用户显示一个表单。该表单允许用户更改并保存他们的联系数据。'
- en: '**Users**: The `users` controller handles admin functions such as all CRUD
    operations for users, password resets, and password scramble (for all users).'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：`users`控制器处理管理员功能，例如所有用户的CRUD操作、密码重置和密码混淆（针对所有用户）。'
- en: '**View All**: This lists all users and their current status in the database.
    The users are displayed in a table. Those users who are active (`users.usr_is_active
    = 1`) have no background color to their row, while users who are inactive (`users.usr_is_active
    = 0`) have an orange background color.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看所有**：此列表显示所有用户及其在数据库中的当前状态。用户以表格形式显示。那些活跃的用户（`users.usr_is_active = 1`）的行没有背景色，而不活跃的用户（`users.usr_is_active
    = 0`）的行有橙色背景色。'
- en: '**Create**: As the name suggests, this will display the `users/new_user` view
    that contains a form, allowing an admin to create a user within the system.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**：正如其名所示，这将显示包含表单的`users/new_user`视图，允许管理员在系统中创建用户。'
- en: '**Edit**: This displays a form similar to the previous one, except that it
    is prepopulated with details of the current logged in user. This is loaded when
    the admin presses the Edit link in the View All page.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑**：这显示了一个与上一个类似的表单，但它是预先填充了当前登录用户的详细信息。当管理员在查看所有页面中点击编辑链接时，将加载此表单。'
- en: '**Delete**: This displays a confirmation page, asking the admin to confirm
    whether they wish to delete the user. This is loaded when the admin presses the
    Edit link in the View All page.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除**：这显示了一个确认页面，要求管理员确认他们是否希望删除用户。当管理员在查看所有页面中点击编辑链接时，将加载此页面。'
- en: '**Forgot Password**: This displays a form to the user. The user is invited
    to enter their e-mail address in a form text field and press Submit. If the e-mail
    address exists in the database, then an e-mail is sent to the e-mail address with
    a URL in the body. This URL is the reset URL for this auth system. Appended to
    the URL is a unique code that is used by the system to verify that a password
    reset request is genuine.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**忘记密码**：这向用户显示一个表单。用户被邀请在表单文本字段中输入他们的电子邮件地址并点击提交。如果电子邮件地址存在于数据库中，则将发送一封包含在正文中的URL的电子邮件到该电子邮件地址。此URL是该认证系统的重置URL。附加到URL的是一个系统用于验证密码重置请求是否真实的唯一代码。'
- en: '**Register**: This displays a form to the user, inviting them to enter their
    first name, last name, and e-mail address. Once successfully submitted (there
    were no validation errors), the new user is added to the system and an e-mail
    is sent to the new user informing them of their password; their password was generated
    automatically by the system on their registration.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册**：这向用户显示一个表单，邀请他们输入他们的名字、姓氏和电子邮件地址。一旦成功提交（没有验证错误），新用户将被添加到系统中，并向新用户发送一封电子邮件，告知他们密码；他们的密码是在注册时由系统自动生成的。'
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对网站的结构和形式有了相当好的了解，让我们看看每个页面的线框图。
- en: Me – editing details
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我 – 编辑详情
- en: The following screenshot shows you a wireframe from the Edit My Details item
    discussed in the site map. The normal user (not an admin user) can view their
    details in an HTML form and by pressing Save, they can then update these details.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从网站地图中讨论的“编辑我的详情”项的线框图。普通用户（非管理员用户）可以在HTML表单中查看他们的详细信息，并通过点击保存，他们可以更新这些详细信息。
- en: '![Me – editing details](img/7093OS_06_06.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![我 - 编辑详情](img/7093OS_06_06.jpg)'
- en: Viewing all users
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看所有用户
- en: The following screenshot shows you a wireframe from the View All item in the
    site map. The admin user is able to see all users within the system in a table
    grid. Users are listed and have Edit and Delete options, which the admin user
    can use.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从网站地图中的“查看所有”项的线框图。管理员用户能够以表格网格的形式看到系统中的所有用户。用户被列出，并具有编辑和删除选项，管理员用户可以使用这些选项。
- en: '![Viewing all users](img/7093OS_06_03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![查看所有用户](img/7093OS_06_03.jpg)'
- en: Creating users
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户
- en: The following screenshot shows you a wireframe from point **6** (the Create
    User item) in the site map. It displays a form that contains text fields, allowing
    an admin to enter a user's details. Notice that user access levels can be set
    here; level `1` is treated in the system as an admin, so the user will be able
    to have admin rights assigned to them, whereas higher numbers are normal users.
    Currently, only level `2` (as a normal user) is understood by the system; the
    dropdown has as many as five levels—you can apply these in your adaptation of
    this project as you see fit or even add more should you wish. Setting the user
    as active (`users.usr_is_active = 1`) or inactive (`users.usr_is_active = 0`)
    will restrict the user at login. An active user will have their login request
    processed by the `signin` script, whereas an inactive user won't.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从网站地图中的第**6**点（创建用户项）的线框图。它显示了一个包含文本字段的表单，允许管理员输入用户的详细信息。请注意，用户访问级别可以在此设置；级别`1`在系统中被视为管理员，因此用户将能够获得分配给他们的管理员权限，而更高的数字是普通用户。目前，系统只理解级别`2`（作为普通用户）；下拉菜单有五个级别——您可以根据需要应用这些级别或甚至添加更多。将用户设置为活动状态（`users.usr_is_active
    = 1`）或非活动状态（`users.usr_is_active = 0`）将在登录时限制用户。活动用户将会有他们的登录请求由`signin`脚本处理，而非活动用户则不会。
- en: '![Creating users](img/7093OS_06_08.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户](img/7093OS_06_08.jpg)'
- en: Editing the user details
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑用户详情
- en: The form to edit user details is similar to the New User functionality discussed
    in the previous section. It is accessed through point **5** (the View Users functionality)
    of the site map when an admin user clicks on the Edit link (in the `/views/users/view_all_users.php`
    view file) next to a person's name. The interesting difference here is the Other
    Options panel with the Reset Password Email option. This will reset the user's
    password and send them an e-mail informing them of their new password.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑用户详情的表单与上一节中讨论的新用户功能类似。当管理员用户点击名称旁边的编辑链接（在`/views/users/view_all_users.php`视图文件中）时，通过网站地图的第**5**点（查看用户功能）访问。这里有趣的不同之处在于带有重置密码电子邮件选项的其他选项面板。这将重置用户的密码，并发送电子邮件通知他们新的密码。
- en: '![Editing the user details](img/7093OS_06_05.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![编辑用户详情](img/7093OS_06_05.jpg)'
- en: Deleting a user
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除用户
- en: This is a final confirmation page that asks for permission to delete a user.
    It is accessed through point **5** (the View Users functionality) in the site
    map. An admin clicks on the Edit link to view the Edit User page. Clicking on
    Delete will remove the user from the `users` table, whereas `Cancel` will return
    the admin to point **5** (the View Users item).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个最终确认页面，要求允许删除用户。它通过网站地图中的第**5**点（查看用户功能）访问。管理员点击编辑链接以查看编辑用户页面。点击删除将从`users`表中删除用户，而点击“取消”将使管理员返回到第**5**点（查看用户项）。
- en: '![Deleting a user](img/7093OS_06_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![删除用户](img/7093OS_06_04.jpg)'
- en: Sign in
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录
- en: The following screenshot shows you the plan for the signing-in page. The user
    can enter their username and password and press the Login button. Validation errors
    are displayed above the form (however, validation errors are not shown in the
    following screenshot). There is also a link for someone to initiate a process
    to reset password. The **Forgot Password** link will display a new form, allowing
    that person to enter an e-mail address.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了登录页面的布局。用户可以输入他们的用户名和密码，然后点击登录按钮。验证错误将显示在表单上方（然而，在以下截图中没有显示验证错误）。还有一个链接，供某人启动重置密码的过程。**忘记密码**链接将显示一个新表单，允许该人输入电子邮件地址。
- en: '![Sign in](img/7093OS_06_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![登录](img/7093OS_06_02.jpg)'
- en: Register
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册
- en: The register functionality allows a nonuser to register with the system. The
    potential user is prompted to enter their first name, last name, and e-mail address.
    We use their first and last name in a welcome e-mail that will be sent to the
    e-mail address entered at this stage.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注册功能允许非用户注册到系统中。潜在用户被提示输入他们的名字、姓氏和电子邮件地址。我们使用他们的名字和姓氏在欢迎电子邮件中使用，该电子邮件将发送到本阶段输入的电子邮件地址。
- en: '![Register](img/7093OS_06_07.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![注册](img/7093OS_06_07.jpg)'
- en: File overview
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件概览
- en: 'We''re going to create quite a few files for this project, 23 files in all,
    and they are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这个项目创建很多文件，总共23个文件，具体如下：
- en: '`/path/to/codeigniter/application/core/MY_Controller.php`: This acts as a parent
    class to child classes such as the `users.php` controller. It provides common
    resources such as commonly used helpers, libraries, and error delimiters.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/core/MY_Controller.php`: 这作为`users.php`控制器等子类的一个父类。它提供了常用助手、库和错误分隔符等常用资源。'
- en: '`/path/to/codeigniter/application/models/password_model.php`: This provides
    read/write access to the database—particularly around the `users` table—focusing
    on password specific operations.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/password_model.php`: 这提供了对数据库的读写访问——特别是在`users`表周围——专注于密码特定操作。'
- en: '`/path/to/codeigniter/application/models/signin_model.php`: This provides methods
    that are specific to the sign-in process.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/signin_model.php`: 这提供了特定于登录过程的函数。'
- en: '`/path/to/codeigniter/application/models/users_model.php`: This provides methods
    that are specific to the `users` table.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/users_model.php`: 这提供了特定于`users`表的函数。'
- en: '`/path/to/codeigniter/application/model/register_model.php`: This provides
    methods that assist in a user being added to the `users` table without an admin
    creating them first.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/model/register_model.php`: 这提供了帮助用户被添加到`users`表中的方法，而无需管理员首先创建它们。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`: 这在页面顶部提供了一个导航栏。'
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: 这为应用程序提供语言支持。'
- en: '`/path/to/codeigniter/application/views/users/new_user.php`: This allows an
    admin to create a new user. The user is saved to the `users` table.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/new_user.php`: 这允许管理员创建新用户。用户被保存在`users`表中。'
- en: '`/path/to/codeigniter/application/views/users/view_all_users.php`: This allows
    an admin to view a list of all users in the `users` table.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/view_all_users.php`: 这允许管理员查看`users`表中的所有用户列表。'
- en: '`/path/to/codeigniter/application/views/users/delete_user.php`: This allows
    an admin to delete a user.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/delete_user.php`: 这允许管理员删除用户。'
- en: '`/path/to/codeigniter/application/views/users/edit_user.php`: This allows an
    admin to edit the details of a user.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/edit_user.php`: 这允许管理员编辑用户的详细信息。'
- en: '`/path/to/codeigniter/application/views/users/forgot_password.php`: This allows
    someone who is not logged in to reset their password. This view contains a simple
    form that asks a user to enter their e-mail address. An e-mail is sent to this
    address with a unique code. This code is used to ensure that the change password
    request is genuine.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/forgot_password.php`: 这允许未登录的用户重置他们的密码。此视图包含一个简单的表单，要求用户输入他们的电子邮件地址。将带有唯一代码的电子邮件发送到该地址。此代码用于确保更改密码请求是真实的。'
- en: '`/path/to/codeigniter/application/views/users/me.php`: This allows a user who
    is not an admin to edit their details.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/me.php`: 这允许非管理员用户编辑他们的详细信息。'
- en: '`/path/to/codeigniter/application/views/users/new_password.php`: This allows
    a user who is not logged in to enter a new password.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/new_password.php`: 这允许未登录的用户输入新密码。'
- en: '`/path/to/codeigniter/application/views/users/register.php`: This allows someone
    who is not already a user (a record in the `users` table) to sign in and generate
    a new row in the `users` table.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/register.php`: 这允许尚未成为用户（`users`表中的记录）的人登录并生成`users`表中的新行。'
- en: '`/path/to/codeigniter/application/views/users/signin.php`: This shows a simple
    login form.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/signin.php`: 这显示了一个简单的登录表单。'
- en: '`/path/to/codeigniter/application/views/users/change_password.php`: This allows
    someone who is signed in to reset their password.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/users/change_password.php`：这允许已登录的用户重置他们的密码。'
- en: '`/path/to/codeigniter/application/views/email_scripts/welcome.txt`: This contains
    simple welcome text.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/email_scripts/welcome.txt`：这个文件包含简单的欢迎文本。'
- en: '`/path/to/codeigniter/application/views/email_scripts/new_password.txt`: This
    contains a simple instruction to click on a link to open the `password/new_password`
    controller function'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/email_scripts/new_password.txt`：这个文件包含一个简单的说明，指导用户点击链接以打开
    `password/new_password` 控制器函数。'
- en: '`/path/to/codeigniter/application/views/email_scripts/reset_password.txt`:
    This contains a simple message that informs a user that their password has been
    changed.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/email_scripts/reset_password.txt`：这个文件包含一个简单的消息，通知用户他们的密码已被更改。'
- en: 'The file structure of the preceding 23 files is shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述23个文件的文件结构如下所示：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note the last item in the list, which is `signin.css`. This sits in the `bootstrap/css/`
    folder, which is at the same level as CodeIgniter's `application` folder. We installed
    Twitter Bootstrap in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared
    Project Resources"), *Introduction and Shared Project Resources*. In this chapter,
    we will go through how to place the `bootstrap` folder at the proper folder level
    and location.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意列表中的最后一项，即 `signin.css`。这个文件位于 `bootstrap/css/` 文件夹中，与 CodeIgniter 的 `application`
    文件夹处于同一级别。我们在 [第1章](ch01.html "第1章。简介和共享项目资源")，*简介和共享项目资源* 中安装了 Twitter Bootstrap。在本章中，我们将介绍如何将
    `bootstrap` 文件夹放置在正确的文件夹级别和位置。
- en: Creating the database
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources*, in mind. However, it's not the end of the world if you haven't—the
    code can easily be applied to other situations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你应该已经按照 [第1章](ch01.html "第1章。简介和共享项目资源")，*简介和共享项目资源* 中描述的方式设置了 CodeIgniter
    和 Bootstrap。如果没有，那么你应该知道，本章中的代码是专门针对 [第1章](ch01.html "第1章。简介和共享项目资源")，*简介和共享项目资源*
    中的设置编写的。然而，如果你还没有这样做，也不是世界末日——代码可以轻松地应用于其他情况。
- en: 'Firstly, we''ll build the database. Copy the following MySQL code into your
    database:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将构建数据库。将以下 MySQL 代码复制到你的数据库中：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You'll see that the first table we create is `ci_sessions`. We need this to
    allow CodeIgniter to manage sessions, specifically logged in users. However, it
    is just the standard session table available from *CodeIgniter User Guide*, so
    I'll not include a description of that table as it's not technically specific
    to this application. However, if you're interested, there's a description at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到我们首先创建的表是 `ci_sessions`。我们需要这个表来允许 CodeIgniter 管理会话，特别是登录用户。然而，它只是从 *CodeIgniter
    用户指南* 中可用的标准会话表，所以我不包括该表的描述，因为它在技术上并不特定于这个应用程序。不过，如果你感兴趣，可以在 [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html)
    找到描述。
- en: 'Right, let''s take a look at each item in each table and see what it means:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们逐个查看每个表中的每个条目，看看它的含义：
- en: '| Table: users |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 表：users |'
- en: '| --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Element** | **Description** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| `usr_id` | This is the primary key. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `usr_id` | 这是主键。 |'
- en: '| `acc_id` | Should you wish to associate users with specific accounts (or
    group users together under a sort of umbrella), `acc_id` (for account ID) can
    be a hook that enables you to do that. You''ll need to create an `accounts` table
    to do this, however. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `acc_id` | 如果你希望将用户与特定账户关联（或将用户分组在某种伞状结构下），`acc_id`（账户ID）可以是一个钩子，使你能够做到这一点。但是，你需要创建一个
    `accounts` 表来完成这个操作。 |'
- en: '| `usr_fname` | This is the user''s first name. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `usr_fname` | 这是用户的第一个名字。 |'
- en: '| `usr_lname` | This is the user''s last name. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `usr_lname` | 这是用户的姓氏。 |'
- en: '| `usr_uname` | This is the an option for a username. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `usr_uname` | 这是用户名的选项。 |'
- en: '| `usr_email` | This is the user''s e-mail address. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `usr_email` | 这是用户的电子邮件地址。 |'
- en: '| `usr_hash` | This is a hash of the user''s password. The value in `users.usr_hash`
    is generated in two ways. The first is when someone manually changes their password
    (perhaps by the "forgot password" process). The `$this->encrypt->sha1($this->input->post(''usr_password1''));`
    CodeIgniter function contains the new password from the user.The second way a
    password is created is when a password is generated by the system and is e-mailed
    to the user, for example, when an admin creates a new user manually. This way,
    the admin doesn''t know what the password of the new user is.To achieve this,
    CodeIgniter uses the same `sha1()` encryption function; however, instead of a
    password being supplied from a user through `$POST`, it is made by creating a
    random string and passing it to `sha1()`, as shown here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '| `usr_hash` | 这是用户密码的散列。`users.usr_hash`中的值以两种方式生成。第一种是当有人手动更改密码时（可能是通过“忘记密码”过程）。`$this->encrypt->sha1($this->input->post(''usr_password1''));`
    CodeIgniter函数包含用户的新密码。第二种创建密码的方式是当系统生成密码并发送给用户时，例如，当管理员手动创建新用户时。这种方式下，管理员不知道新用户的密码。为了实现这一点，CodeIgniter使用相同的`sha1()`加密函数；然而，与通过`$POST`从用户那里提供的密码不同，它是通过创建一个随机字符串并将其传递给`sha1()`来生成的，如下所示：'
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `usr_add1` | This is the first line of a person''s address. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `usr_add1` | 这是个人地址的第一行。|'
- en: '| `usr_add2` | This is the second line of a person''s address. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `usr_add2` | 这是个人地址的第二行。|'
- en: '| `usr_add3` | This is the third line of a person''s address. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `usr_add3` | 这是个人地址的第三行。|'
- en: '| `usr_town_city` | This is the town or city of their address. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `usr_town_city` | 这是个人地址的城镇或城市。|'
- en: '| `usr_zip_pcode` | This is the postal code or zip code of the person''s address.
    |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `usr_zip_pcode` | 这是个人地址的邮政编码或邮编。|'
- en: '| `usr_access_level` | This is the indicates the permission level of the user.
    The permission level can govern what actions a user is allowed to perform. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `usr_access_level` | 这表示用户的权限级别。权限级别可以控制用户允许执行的操作。|'
- en: '| `usr_is_active` | This is the indicates whether the user is active (`1`)
    or inactive (`0`)—inactive means that a user cannot log in. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `usr_is_active` | 这表示用户是否活跃（`1`）或非活跃（`0`）——非活跃意味着用户无法登录。|'
- en: '| `usr_created_at` | This is the MySQL timestamp that is created when the record
    is created. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `usr_created_at` | 这是记录创建时创建的MySQL时间戳。|'
- en: '| `usr_pwd_change_code` | This is a unique code that''s generated when a person
    wishes to change their password. This unique code is generated and sent in an
    e-mail to the user who wishes to change their password. The code is appended to
    a URL in the body of the e-mail. The user clicks on this link and is redirected
    to the auth system. The system looks at that code to check whether it is valid
    and matches the e-mail. If it matches, the user can follow onscreen instructions
    to create a new password for them. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `usr_pwd_change_code` | 这是一个当某人希望更改密码时生成的唯一代码。这个唯一代码会生成并发送给希望更改密码的用户。该代码附加在电子邮件正文的URL中。用户点击此链接将被重定向到认证系统。系统查看该代码以检查其是否有效并匹配电子邮件。如果匹配，用户可以按照屏幕上的说明创建一个新的密码。|'
- en: We'll also need to make amends to the `config/database.php` file, namely setting
    the database access details, username password, and so on.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对`config/database.php`文件进行修改，即设置数据库访问详情、用户名密码等。
- en: 'Open the `config/database.php` file and find the following lines:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`config/database.php`文件并找到以下行：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Edit the values in the preceding lines, ensuring you substitute these values
    with ones that are more specific to your setup and situation; so, enter your username,
    password, and so on.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑前述行中的值，确保用更具体于您设置和情况的值替换这些值；因此，输入您的用户名、密码等。
- en: Adjusting the config.php file
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整config.php文件
- en: 'There are a few settings in this file that we''ll need to configure to support
    sessions and encryption. So, open the `config/config.php` file and make the following
    changes:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，有一些设置我们需要配置以支持会话和加密。因此，打开`config/config.php`文件并做出以下更改：
- en: 'We will need to set an encryption key; both sessions and CodeIgniter''s encryption
    functionalities require an encryption key to be set in the `$config` array, so
    find the following line:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要设置一个加密密钥；会话和CodeIgniter的加密功能都需要在`$config`数组中设置一个加密密钥，因此找到以下行：
- en: '[PRE4]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, change it to the following:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，将其更改为以下内容：
- en: '[PRE5]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Now, obviously don't actually change this value to literally a-random-string-of-alphanum-characters
    but change it to, er, a random string of alphanum characters instead—if that makes
    sense? Yeah, you know what I mean.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，显然实际上不要将此值更改为一个随机的字母数字字符序列，而是改为，嗯，一个随机的字母数字字符序列——如果这说得通？是的，你知道我的意思。
- en: 'Next, find the following lines:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，找到以下行：
- en: '[PRE6]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, change it to the following:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，将其更改为以下内容：
- en: '[PRE7]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adjusting the routes.php file
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整 routes.php 文件
- en: 'We want to redirect the user to the `signin` controller rather than default
    CodeIgniter `welcome` controller. We will need to amend the default controller
    settings in the `routes.php` file to reflect this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将用户重定向到 `signin` 控制器而不是默认的 CodeIgniter `welcome` 控制器。我们需要修改 `routes.php`
    文件中的默认控制器设置以反映这一点：
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `config/routes.php` 文件进行编辑，并找到以下行（在文件底部附近）：
- en: '[PRE8]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Firstly, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    this; instead, we want the default controller to be `signin`. So, find the following
    line:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更改默认控制器。最初在 CodeIgniter 应用程序中，默认控制器设置为 `welcome`；然而，我们不需要这个；相反，我们希望默认控制器是
    `signin`。所以，找到以下行：
- en: '[PRE9]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Replace it with the following:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE10]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating the models
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'There are four models in this project, which are as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中有四个模型，如下所示：
- en: '`models/password_model.php`: This contains functions that are specific to creating
    and resetting passwords.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models/password_model.php`：此文件包含创建和重置密码的特定函数。'
- en: '`models/register_model.php`: This contains functions that are specific to registering
    a user.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models/register_model.php`：此文件包含特定于用户注册的函数。'
- en: '`models/signin_model.php`: This contains functions that are specific to signing
    a user into the system.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models/signin_model.php`：此文件包含特定于用户登录系统的函数。'
- en: '`models/users_model.php`: This contains the main bulk of the model functions
    for this project, specifically CRUD operations to be performed on users and various
    other admin functions.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models/users_model.php`：此文件包含本项目的模型函数的主体，特别是对用户执行 CRUD 操作以及各种其他管理功能。'
- en: So that's an overview of the models for this project; now, let's go and create
    each model.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是本项目的模型概述；现在，让我们去创建每个模型。
- en: 'Create the `/path/to/codeigniter/application/models/password_model.php` file
    and add the following code to it:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/models/password_model.php` 文件，并将其中的以下代码添加到其中：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `does_code_match()` function will check whether the code supplied in the
    URL matches that in the database. If it does, it returns `true` or `false` if
    it doesn''t. This is shown here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`does_code_match()` 函数将检查在 URL 中提供的代码是否与数据库中的代码匹配。如果匹配，它返回 `true`；如果不匹配，它返回
    `false`。这在此处显示：'
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create the `/path/to/codeigniter/application/models/register_model.php` model
    file and add the following code to it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/models/register_model.php` 模型文件，并将其中的以下代码添加到其中：
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `register` model contains just one function, which is `register_user()`.
    It simply uses the CodeIgniter Active Record `insert()` class to insert the contents
    of the `$data` array into the `users` table.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`register` 模型只包含一个函数，即 `register_user()`。它简单地使用 CodeIgniter Active Record `insert()`
    类将 `$data` 数组的内 容插入到 `users` 表中。'
- en: 'Create the `/path/to/codeigniter/application/models/users_model.php` model
    file and add the following code to it:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/models/users_model.php` 模型文件，并将其中的以下代码添加到其中：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let's look at the `make_code()` function. This function creates a unique code
    and saves it to the user's record. This code is sent out at the end of a URL in
    an e-mail to the user. If this code in the URL matches the code in the database,
    then chances are that it's a genuine password change as it is unlikely that someone
    would have accurately guessed the code.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `make_code()` 函数。此函数创建一个唯一的代码并将其保存到用户的记录中。此代码在电子邮件的 URL 结尾处发送给用户。如果 URL
    中的此代码与数据库中的代码匹配，那么它很可能是真正的密码更改，因为不太可能有人能准确猜出代码。
- en: 'Notice the PHP construct `do…while`—it looks something like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 PHP 构造 `do…while` 的样子：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So, this means *do something while a condition is met*. With that in mind, think
    about our problem; we have to assign `users.usr_pwd_change_code` with a value
    that doesn't exist in the database already. The code should be a unique value
    to ensure that someone else doesn't have his or her password changed by mistake.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这意味着*在满足条件时执行某些操作*。考虑到这一点，思考我们的问题；我们必须将`users.usr_pwd_change_code`分配一个在数据库中不存在的值。该代码应该是一个唯一的值，以确保其他人不会错误地更改其密码。
- en: We use the `do…while` construct as a means to create code that is unique in
    the database by first creating the code and then looking through the `users` table
    for another occurrence of that code. If it is found, then the number of rows returned
    will be greater or equal to one. Then, another code is generated and another search
    for the `users` table happens.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`do…while`结构作为创建代码的手段，首先创建代码，然后通过遍历`users`表来查找该代码的另一个实例。如果找到，则返回的行数将大于或等于一。然后，生成另一个代码，并在`users`表中再次进行搜索。
- en: 'This will repeat until a code that cannot be found in the `users` table is
    generated. This unique code is then returned as `$url_code`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将重复进行，直到生成一个在`users`表中找不到的代码。然后，这个唯一的代码作为`$url_code`返回：
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following `update_user_password()` function accepts an array of data containing
    the user''s primary key and a new password. The array is provided the `new_password()`
    function of `password_model`. The user''s ID (`users.usr_id`) is from the session
    (as they''re logged in) and the new password is from the form that `new_password()`
    loads (`views/users/new_password.php`):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`update_user_password()`函数接受包含用户主键和新密码的数据数组。该数组由`password_model`的`new_password()`函数提供。用户的ID（`users.usr_id`）来自会话（因为他们已登录），新密码来自`new_password()`加载的表单（`views/users/new_password.php`）：
- en: '[PRE17]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the `/path/to/codeigniter/application/models/signin_model.php` model
    file and add the following code to it:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/models/signin_model.php`模型文件，并将其中的以下代码添加到其中：
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This model contains only one function other than `__construct()`, that is, `does_user_exist($email)`.
    This function takes an e-mail address submitted by the user from the sign-in view
    and returns the active record query.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型除了`__construct()`函数外，还包含一个函数，即`does_user_exist($email)`。此函数接受用户从登录视图提交的电子邮件地址，并返回活动记录查询。
- en: 'The query is evaluated in the `signin` controller with the CodeIgniter database
    function `num_rows()`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 查询在`signin`控制器中使用CodeIgniter数据库函数`num_rows()`进行评估：
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If there is a single match, then the `signin` controller loops over the Active
    Record result and attempts to log the user in.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一个匹配项，则`signin`控制器会遍历活动记录结果，并尝试登录用户。
- en: Creating the views
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: There are quite a few view files and e-mail template files in this project—in
    fact, we're going to create 10 view files, three e-mail scripts, and one header
    file each specific to logging in and amending a navigation file. Right, let's
    get to it.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在此项目中，有相当多的视图文件和电子邮件模板文件——实际上，我们将创建10个视图文件，3个电子邮件脚本，以及一个特定于登录和修改导航文件的头部文件。好吧，让我们开始吧。
- en: 'The following are the standard view files used in this project:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在此项目中使用的标准视图文件：
- en: '`path/to/codeigniter/application/views/users/new_user.php`: This displays a
    form to the admin user, allowing them to create a user. The new user is sent an
    e-mail that welcomes them to the system and informs them of their password. The
    e-mail script is `/views/email_scripts/welcome.txt`.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/new_user.php`: 这向管理员用户显示一个表单，允许他们创建用户。新用户会收到一封电子邮件，欢迎他们加入系统，并告知他们密码。电子邮件脚本位于`/views/email_scripts/welcome.txt`。'
- en: '`path/to/codeigniter/application/views/users/view_all_users.php`: This displays
    a list of users currently in the system. Admin users are able to edit or delete
    a user.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/view_all_users.php`: 这显示系统中当前的用户列表。管理员用户能够编辑或删除用户。'
- en: '`path/to/codeigniter/application/views/users/delete_user.php`: This displays
    a confirmation page to the admin user. This is displayed if the admin user presses
    Delete in the `view_all_users/php` view. The confirmation page asks whether the
    admin user really wishes to delete the selected user.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/delete_user.php`: 这向管理员用户显示一个确认页面。如果管理员用户在`view_all_users/php`视图中按下删除键，则会显示此页面。确认页面询问管理员用户是否真的希望删除所选用户。'
- en: '`path/to/codeigniter/application/views/users/edit_user.php`: This displays
    a form to the admin user. This is displayed if the admin user presses Edit in
    the `view_all_users.php` view. The form is similar to the `new_user.php` file,
    except that there is a panel where the admin user can send an e-mail to the user
    to reset their password.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/edit_user.php`: 这将向管理员用户显示一个表单。如果管理员用户在
    `view_all_users.php` 视图中按下编辑，则会显示此表单。该表单类似于 `new_user.php` 文件，除了有一个面板，管理员用户可以发送电子邮件给用户以重置他们的密码。'
- en: '`path/to/codeigniter/application/views/users/forgot_password.php`: This displays
    a form to anyone asking for an e-mail address. If this e-mail address is in the
    system, an e-mail will be sent to them with instructions on how to reset their
    password.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/forgot_password.php`: 这将向任何请求电子邮件地址的人显示一个表单。如果此电子邮件地址在系统中，将向他们发送一封电子邮件，其中包含重置密码的说明。'
- en: '`path/to/codeigniter/application/views/users/me.php`: This displays a form
    to the current logged in user. The form is similar to `edit_user.php`. It allows
    the current logged in user to edit and amend their account details.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/me.php`: 这将向当前登录用户显示一个表单。该表单类似于
    `edit_user.php`。它允许当前登录用户编辑和修改他们的账户详情。'
- en: '`path/to/codeigniter/application/views/users/new_password.php`: This displays
    a form to anyone, inviting then to enter their e-mail address—the code generated
    earlier from the forgotten password process is already a hidden form element.
    The code and e-mail address are compared, and if the code matches, a new password
    is generated for the user.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/new_password.php`: 这将向任何人显示一个表单，邀请他们输入他们的电子邮件地址——从忘记密码过程中生成的代码已经是隐藏的表单元素。代码和电子邮件地址将被比较，如果代码匹配，将为用户生成一个新的密码。'
- en: '`path/to/codeigniter/application/views/users/register.php`: This displays a
    form to the user, allowing them to enter their first and last names and e-mail
    addresses. They are then added to the database and a password is generated for
    them. This password is sent to them in an e-mail along with a welcome message.
    The text for this e-mail is in `/views/email_scripts/welcome.txt`.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/register.php`: 这将向用户显示一个表单，允许他们输入他们的姓名和电子邮件地址。然后他们将被添加到数据库中，并为他们生成一个密码。此密码将通过电子邮件发送给他们，并附有欢迎信息。此电子邮件的文本位于
    `/views/email_scripts/welcome.txt`。'
- en: '`path/to/codeigniter/application/views/users/signin.php`: This displays a form.
    The form allows a user (normal or admin) to sign in to the system with their username
    and password; remember that their password isn''t stored in the `users` table,
    only a hash of that password is stored. To support this hashing, we''ll need to
    alter the encryption key in the config file. We discussed this in the *Adjusting
    the config.php file* section of this chapter.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/signin.php`: 这将显示一个表单。该表单允许用户（普通或管理员）使用用户名和密码登录系统；请记住，他们的密码没有存储在
    `users` 表中，只存储了密码的散列。为了支持这种散列，我们需要在配置文件中更改加密密钥。我们在本章的 *调整 config.php 文件* 部分讨论了这一点。'
- en: '`path/to/codeigniter/application/views/users/change_password.php`: This displays
    a form to anyone who is logged in. The form allows a user (normal or admin) to
    change their password.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/change_password.php`: 这将向任何登录用户显示一个表单。该表单允许用户（普通或管理员）更改他们的密码。'
- en: 'The following are the e-mail scripts used in this application:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在此应用程序中使用的电子邮件脚本：
- en: '`path/to/codeigniter/application/views/email_scripts/welcome.txt`: This contains
    the text for the welcome e-mail that is sent to a new user when they are either
    added by an admin from the `new_user.php` form or when they create an account
    themselves with the form in the `register.php` view.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/email_scripts/welcome.txt`: 此文件包含当新用户被管理员从
    `new_user.php` 表单添加或当他们使用 `register.php` 视图中的表单自行创建账户时发送的欢迎电子邮件的文本。'
- en: '`path/to/codeigniter/application/views/email_scripts/new_password.txt`: This
    file contains the text informing the user of a password change.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/email_scripts/new_password.txt`: 此文件包含通知用户更改密码的文本。'
- en: '`path/to/codeigniter/application/views/email_scripts/reset_password.txt`: This
    contains a URL that a user can click on to begin the reset password process. The
    URL contains a unique code that the system uses to ensure that it is a genuine
    password change request.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/email_scripts/reset_password.txt`: 此文件包含一个用户可以点击以开始重置密码过程的URL。该URL包含一个系统用于确保这是一个真实的密码更改请求的唯一代码。'
- en: 'The following are the login header and navigation views:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在此应用程序中使用的登录页眉和导航视图：
- en: '`path/to/codeigniter/application/views/common/login_header.php`: The css requirements
    of the login form are different from that of the standard `/views/common/header.php`
    view. Specifically, it needs the `signin.css` file.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/common/login_header.php`：登录表单的CSS要求与标准`/views/common/header.php`视图不同。具体来说，它需要`signin.css`文件。'
- en: '`path/to/codeigniter/application/views/nav/top_nav.php`: This contains navigation
    options that allow admins and normal users to open various pages, and it also
    contains a logout link that allows a user to terminate their session.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/nav/top_nav.php`：它包含允许管理员和普通用户打开各种页面的导航选项，并且还包含一个注销链接，允许用户终止他们的会话。'
- en: Right, these were the view files, both standard HTML and TXT files for e-mails,
    and so on. Let's go over each file in turn and create them.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 正确，这些是视图文件，包括标准HTML和TXT文件用于电子邮件等。让我们逐一查看每个文件并创建它们。
- en: 'Create the `/path/to/codeigniter/application/views/users/register.php` file
    and add the following code to it:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/register.php`文件，并将其中的以下代码添加到该文件中：
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This displays a form to a potential user in the system. It requires the user
    to enter a first name, last name, and an e-mail address. The form is submitted
    to `register/index`, which will validate the data inputted by the user. If there
    were no errors, then the user is added to the `users` table, a password is generated
    for them, and a hash is generated and stored as `users.usr_hash` and e-mailed
    to them. The e-mail template is `welcome.txt`, which is given next.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这向系统中的潜在用户显示一个表单。它要求用户输入名字、姓氏和电子邮件地址。表单提交到`register/index`，该表单将验证用户输入的数据。如果没有错误，则用户将被添加到`users`表中，为他们生成一个密码，并生成一个哈希值存储为`users.usr_hash`并发送给他们。电子邮件模板是`welcome.txt`，如下所示。
- en: 'Create the `/path/to/codeigniter/application/views/email_scripts/welcome.txt`
    file and add the following code to it:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/email_scripts/welcome.txt`文件，并将其中的以下代码添加到该文件中：
- en: '[PRE21]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This is the text for the welcome e-mail sent to users when they register. Notice
    that there are three strings of text enclosed in a percent sign (`%`). These are
    strings of text that will be identified by the signup process and replaced using
    the `str_replace()` PHP function with their true values. For example, assume that
    I register with the site. My name is Robert Foster and my e-mail might be `rob-foster@domain.com`.
    The e-mail sent to `rob-foster@domain.com` would look like the following:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当用户注册时发送给用户的欢迎电子邮件的文本。请注意，有三个文本字符串被百分号（`%`）包围。这些是将在注册过程中被识别并使用`str_replace()`
    PHP函数替换其真实值的文本字符串。例如，假设我注册了该网站。我的名字是Robert Foster，我的电子邮件可能是`rob-foster@domain.com`。发送到`rob-foster@domain.com`的电子邮件看起来如下：
- en: '[PRE22]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the `/path/to/codeigniter/application/views/users/forgot_password.php`
    file and add the following code to it:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/forgot_password.php`文件，并将其中的以下代码添加到该文件中：
- en: '[PRE23]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `forgot_password.php` view file provides a short form to any user to begin
    the process of resetting their password. The user can enter their e-mail address
    and press the Go button. The form is submitted to the `password` controller's
    `forgot_password()` function, where it is validated.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`forgot_password.php`视图文件为任何用户提供一个简短的表单，以开始重置密码的过程。用户可以输入他们的电子邮件地址并按下“Go”按钮。表单提交到`password`控制器的`forgot_password()`函数，在那里进行验证。'
- en: If the e-mail address passes validation, then the `forgot_password()` function
    checks to see whether the e-mail address exists in the `users` table. If it exists,
    then a unique code is generated and stored in `users.usr_pwd_change_code`. If
    the code does not exist, then the user is just redirected to the `forgot_password()`
    function to try again.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电子邮件地址通过验证，则`forgot_password()`函数检查电子邮件地址是否存在于`users`表中。如果存在，则生成一个唯一的代码并存储在`users.usr_pwd_change_code`中。如果代码不存在，则用户将被重定向到`forgot_password()`函数再次尝试。
- en: This code is also appended to a URL and sent in the body of an e-mail to the
    user. The user is instructed to click on the link in the e-mail that will direct
    them to the `password` controller's `new_password()` function. The `new_password()`
    function will load the `users/new_password.php` view file, which will ask the
    user to enter their e-mail address.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码也被附加到URL中，并在电子邮件正文中发送给用户。用户被指示点击电子邮件中的链接，该链接将引导他们到`password`控制器的`new_password()`函数。`new_password()`函数将加载`users/new_password.php`视图文件，该文件将要求用户输入他们的电子邮件地址。
- en: This e-mail address is validated and `new_password()` will look in the `users`
    table to see whether the e-mail address exists. If it exists, it will check to
    see whether the value of the code in the URL matches the value stored in `users.usr_pwd_change_code`.
    If it does, then it is likely to be genuine and a new password is generated. This
    password is e-mailed to the user. A hash is created using the password and stored
    in `users.usr_hash`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此电子邮件地址经过验证，`new_password()`将检查`users`表中是否存在该电子邮件地址。如果存在，它将检查URL中的代码值是否与存储在`users.usr_pwd_change_code`中的值匹配。如果匹配，则很可能是真实的，并将生成一个新的密码。此密码将通过电子邮件发送给用户。使用密码创建一个哈希值并存储在`users.usr_hash`中。
- en: 'Create the `/path/to/codeigniter/application/views/users/signin.php` file and
    add the following code to it:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/signin.php`文件，并将以下代码添加到其中：
- en: '[PRE24]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `signin` view is quite simple: a standard sign-in interface. The user can
    enter their e-mail address and password to sign in. Validation errors are echoed
    above the form if there were any errors, and a **Forgot Password** link allows
    the user to use a method to begin the process of resetting their password.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`signin`视图相当简单：一个标准的登录界面。用户可以输入他们的电子邮件地址和密码进行登录。如果有任何错误，验证错误会显示在表单上方，并且一个**忘记密码**链接允许用户使用一种方法开始重置密码的过程。'
- en: The error messages are contained in a `div` element with the `alert alert-danger`
    Bootstrap class; I prefer a big red error message rather than one of those limp-wristed
    orange jobbies; however, you can change it to something softer, such as `alert
    alert-warning`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息包含在一个具有`alert alert-danger`Bootstrap类的`div`元素中；我更喜欢一个大的红色错误消息而不是那些软绵绵的橙色东西；然而，你可以将其更改为更柔和的样式，例如`alert
    alert-warning`。
- en: 'Create the `/path/to/codeigniter/application/views/users/view_all_users.php`
    file and add the following code to it:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/view_all_users.php`文件，并将以下代码添加到其中：
- en: '[PRE25]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `view_all_users.php` view file displays all users within the system in a
    table at any one time. Only admin users are able to see this list.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`view_all_users.php`视图文件在任何时候都会以表格形式显示系统中的所有用户。只有管理员用户能够看到这个列表。'
- en: The table has options for editing and deleting, allowing the user to edit a
    user (loading the `users` controller's `edit_user()` function) and delete a user
    (loading the `users` controller's `delete_user()` function).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 表格提供了编辑和删除选项，允许用户编辑一个用户（加载`users`控制器的`edit_user()`函数）和删除一个用户（加载`users`控制器的`delete_user()`函数）。
- en: 'Create the `/path/to/codeigniter/application/views/users/new_user.php` file
    and add the following code to it:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/new_user.php`文件，并将以下代码添加到其中：
- en: '[PRE26]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `new_user.php` view file displays a form to an admin user, allowing them
    to create a user in the system. The form is submitted to the `users` controller's
    `new_user()` function. Validation errors are displayed above the form. On a successful
    submission (no validation errors), the `new_user()` function will create a password
    for the user and a hash value based on the password. The password will be sent
    to the user in an e-mail. The text of this e-mail is in the `/views/email_scripts/welcome.txt`
    file.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`new_user.php`视图文件向管理员用户显示一个表单，允许他们在系统中创建用户。表单提交到`users`控制器的`new_user()`函数。验证错误会在表单上方显示。在成功提交（没有验证错误）的情况下，`new_user()`函数将为用户创建一个密码和一个基于密码的哈希值。密码将通过电子邮件发送给用户。此电子邮件的文本位于`/views/email_scripts/welcome.txt`文件中。'
- en: 'Create the `/path/to/codeigniter/application/views/users/edit_user.php` file
    and add the following code to it:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/edit_user.php`文件，并将以下代码添加到其中：
- en: '[PRE27]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `edit_user.php` view file displays a form to an admin user, allowing them
    to edit a user in the system. The form is accessed when an admin user clicks on
    Edit from the `views/users/list_all_users.php` view file. The form is submitted
    to the `users` controller's `edit_user()` function. Validation errors are displayed
    above the form.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit_user.php`视图文件向管理员用户显示一个表单，允许他们编辑系统中的用户。当管理员用户从`views/users/list_all_users.php`视图文件中点击编辑时，会访问此表单。表单提交到`users`控制器的`edit_user()`函数。验证错误会在表单上方显示。'
- en: 'Create the `/path/to/codeigniter/application/views/users/me.php` file and add
    the following code to it:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/me.php`文件，并将以下代码添加到其中：
- en: '[PRE28]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Again, like the forms in `new_user` and `edit_user` views, this form is similar;
    however, it includes a Reset Email link, which will run the `me` controller's
    `pwd_email()` function to create a new password and e-mail it to the current user.
    The password isn't stored in the database; only a hash value is stored (`users.usr_hash`).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，像`new_user`和`edit_user`视图中的表单一样，这个表单也是相似的；然而，它包括一个重置电子邮件链接，该链接将运行`me`控制器的`pwd_email()`函数来创建一个新的密码并将其发送给当前用户。密码不会存储在数据库中；只存储一个哈希值（`users.usr_hash`）。
- en: 'Create the `/path/to/codeigniter/application/views/users/register.php` file
    and add the following code to it:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/register.php`文件，并将以下代码添加到其中：
- en: '[PRE29]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `register.php` view file displays a form to a person wishing to become a
    user within the system. The user is invited to enter a first name and last name
    as well as their e-mail address. They then press the Register button.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`register.php`视图文件向希望成为系统用户的个人显示一个表单。用户被邀请输入他们的名字、姓氏以及他们的电子邮件地址。然后他们点击注册按钮。'
- en: The form is submitted to the `register` controller's `index()` function. The
    `index()` function will perform validation, and any errors are displayed above
    the form.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 表单提交到`register`控制器的`index()`函数。`index()`函数将执行验证，并将任何错误显示在表单上方。
- en: Assuming that there were no errors and the form was submitted without problems,
    the `index()` function will attempt to write them to the `users` table. A password
    is generated and sent to the user in the form of an e-mail. The contents of the
    e-mail are stored in the `views/email_scripts/welcome.txt` view file.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 假设没有错误并且表单提交没有问题，`index()`函数将尝试将它们写入`users`表。生成一个密码并以电子邮件的形式发送给用户。电子邮件的内容存储在`views/email_scripts/welcome.txt`视图文件中。
- en: 'Create the `/path/to/codeigniter/application/views/users/signin.php` file and
    add the following code to it:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/signin.php`文件，并将以下代码添加到其中：
- en: '[PRE30]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `signin.php` view file displays a form to a user. The user is invited to
    enter their e-mail address and password. The form is submitted to the `signin`
    controller's `index()` function, which will validate the input, and assuming there
    were no errors, attempt to process the sign-in request.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`signin.php`视图文件向用户显示一个表单。用户被邀请输入他们的电子邮件地址和密码。表单提交到`signin`控制器的`index()`函数，该函数将验证输入，并在没有错误的情况下尝试处理登录请求。'
- en: Only users who are active can sign in (`users.usr_is_active = 1`) and admin
    users (`users.usr_accss_level = 1`) will see options that are only available to
    admins. The normal users (`users.usr_access_level = 2`) will be directed to the
    `me` controller.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 只有活跃用户才能登录（`users.usr_is_active = 1`）并且管理员用户（`users.usr_accss_level = 1`）将看到只有管理员才能使用的选项。普通用户（`users.usr_access_level
    = 2`）将被重定向到`me`控制器。
- en: Tip
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can, of course, adapt this behavior to any other controller. Instructions
    on how to do this are discussed in the *Ensuring correct access* section.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以将此行为适应到任何其他控制器。如何在*确保正确访问*部分讨论了如何进行此操作。
- en: 'Create the `/path/to/codeigniter/application/views/users/change_password.php`
    file and add the following code to it:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/users/change_password.php`文件，并将以下代码添加到其中：
- en: '[PRE31]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This view file displays an HTML form to the user, allowing them to enter two
    new passwords for their account. The form is submitted to the `me` controller's
    `change_password()` function, which validates the two passwords supplied and checks
    whether they match each other, apart from various other validation checks. If
    validation is passed, then a hash is created from the supplied passwords and that
    hash is saved to the user's record in the database.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图文件向用户显示一个HTML表单，允许他们为他们的账户输入两个新密码。表单提交到`me`控制器的`change_password()`函数，该函数验证提供的两个密码并检查它们是否匹配，除了其他各种验证检查。如果验证通过，则从提供的密码创建一个哈希值，并将该哈希值保存到用户的数据库记录中。
- en: Creating the controllers
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: 'In this project, there are six controllers, which are as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，有六个控制器，具体如下：
- en: '`/core/MY_Controller.php`: This is the parent controller class that contains
    common resources.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/core/MY_Controller.php`：这是包含公共资源的父控制器类。'
- en: '`/controllers/password.php`: This contains functions that allow the user to
    request a new password.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/controllers/password.php`：这个文件包含允许用户请求新密码的功能。'
- en: '`/controllers/me.php`: This provides a location for a normal (that is, not
    an admin) user to alter their account settings: name, e-mail, and so on.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/controllers/me.php`：这为普通用户（即非管理员）提供了一个更改账户设置的位置：姓名、电子邮件等。'
- en: '`/controllers/register.php`: This contains functions that allow a new user
    to sign up and have their details recorded in the `users` table.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/controllers/register.php`：此文件包含允许新用户注册并将他们的详细信息记录在 `users` 表中的功能。'
- en: '`/controllers/signin.php`: This provides a method for users to log in to their
    account and to start a session.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/controllers/signin.php`：此文件为用户提供登录账户并开始会话的方法。'
- en: '`/controllers/users.php`: This provides functions for an admin to manage users
    who have signed up and whose records are in the `users` table.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/controllers/users.php`：此文件为管理员提供管理已注册用户及其在 `users` 表中的记录的功能。'
- en: These are our six controllers (one to extend and five that are extended); let's
    go over each one and create them.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们六个控制器（一个用于扩展和五个用于扩展）；让我们逐一过目并创建它们。
- en: 'Create the `/path/to/codeigniter/application/core/MY_Controller.php` controller
    file and add the following code to it:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/core/MY_Controller.php` 控制器文件，并将以下代码添加到其中：
- en: '[PRE32]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `core/MY_Controller.php` controller acts as an overarching parent controller
    for all controllers that require the user to be logged in before they're accessed.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`core/MY_Controller.php` 控制器作为所有需要在访问之前要求用户登录的控制器的主父控制器。'
- en: 'Create the `/path/to/codeigniter/application/controllers/password.php` controller
    file and add the following code to it. As this controller need not be accessed
    by a logged-in user, we''re not extending it with the `MY_Controller`, but only
    the default `CI_Controller`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/controllers/password.php` 控制器文件，并将以下代码添加到其中。由于此控制器不需要被登录用户访问，我们不是通过
    `MY_Controller` 扩展它，而是仅使用默认的 `CI_Controller`：
- en: '[PRE33]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The **Reset Password page** provides a form to the user, allowing them to enter
    their e-mail address. Once the user has submitted the form, a code is generated
    and prepended to a URL link. This link is sent in an e-mail to the e-mail address
    provided. The unique code in the URL is used by the `password` controller's next
    function, which is `new_password()`, but we'll go into that later.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**重置密码页面**为用户提供一个表单，允许他们输入他们的电子邮件地址。一旦用户提交了表单，就会生成一个代码并附加到 URL 链接的开头。此链接以电子邮件的形式发送到提供的电子邮件地址。URL
    中的唯一代码由 `password` 控制器的下一个函数 `new_password()` 使用，但稍后我们会详细介绍。'
- en: 'First, we define the validation rules for the form in the `users/forgot_password.php`
    view file, as shown here:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `users/forgot_password.php` 视图文件中定义表单的验证规则，如下所示：
- en: '[PRE34]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If the form is being viewed for the first time or has failed the preceding
    validation rules, then the `$this->form_validation()` CodeIgniter function returns
    `FALSE`, loading the `users/forgot_password.php` view file:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单是首次查看或已失败之前的验证规则，则 `$this->form_validation()` CodeIgniter 函数返回 `FALSE`，加载
    `users/forgot_password.php` 视图文件：
- en: '[PRE35]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If the user''s e-mail passes validation, then we will try to generate a unique
    code and send them an e-mail:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户的电子邮件通过验证，那么我们将尝试生成一个唯一的代码并发送电子邮件给他们：
- en: '[PRE36]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'First, we look to see whether the e-mail address supplied in the form actually
    exists in the database. If not, then `$num_res` will not equal `1`. If this is
    the case, then we redirect the user to the `forgot_password()` function. If, however,
    it exists, then we continue to process the request with an if statement:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们查看在表单中提供的电子邮件地址是否实际存在于数据库中。如果不是，则 `$num_res` 将不等于 `1`。如果是这种情况，则将用户重定向到
    `forgot_password()` 函数。然而，如果它存在，则我们使用 if 语句继续处理请求：
- en: '[PRE37]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We call the `make_code()` function of `Users_model`, which will generate a
    unique code for us and return it as the `$code` variable. This `$code` variable
    is added to the `$data` array and sent to the `update_user_code()` function of
    `Users_model`, which will write the unique code that was just generated to `users.usr_pwd_change_code`
    in preparation for the `new_password()` function shown here (`new_password()`
    is run when the user clicks on the URL in the e-mail we will soon send them):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用 `Users_model` 的 `make_code()` 函数，该函数将为我们生成一个唯一的代码，并将其作为 `$code` 变量返回。此
    `$code` 变量被添加到 `$data` 数组中，并发送到 `Users_model` 的 `update_user_code()` 函数，该函数将刚刚生成的唯一代码写入
    `users.usr_pwd_change_code`，为这里显示的 `new_password()` 函数做准备（`new_password()` 在用户点击我们即将发送给他们的电子邮件中的
    URL 时运行）：
- en: '[PRE38]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Right, the code has been created and saved to the correct account in the database,
    and we''re now ready to start with the e-mail. Let''s define the link that will
    go in the e-mail. For this example, it is `http://www.domain.com/password/new_password/UNIQUE-CODE-HERE`;
    however, you''ll need to change this to reflect the path and domain on your servers:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，代码已经创建并保存到数据库中正确的账户，我们现在可以开始发送电子邮件。让我们定义电子邮件中将包含的链接。在这个例子中，它是`http://www.domain.com/password/new_password/UNIQUE-CODE-HERE`；然而，您需要将其更改为反映您服务器上的路径和域名：
- en: '[PRE39]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now we need to load the `reset_password.txt` file. This file contains the template
    text for the body of the e-mail we''ll send. Again, you''ll need to change the
    file path of this file to that on your system. We pass the filename to the `read_file()`
    CodeIgniter function that will open the file and return its contents. The contents
    of this file, that is, the text in the file, is stored as a string in the `$file`
    variable:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要加载`reset_password.txt`文件。此文件包含我们将发送的电子邮件正文的模板文本。同样，您需要将此文件的文件路径更改为系统上的路径。我们将文件名传递给`read_file()`
    CodeIgniter函数，该函数将打开文件并返回其内容。该文件的内容，即文件中的文本，存储在`$file`变量中作为一个字符串：
- en: '[PRE40]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Using the `str_replace()` PHP function, we''ll replace the variables in the
    `$file` variable with the correct values:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`str_replace()` PHP函数，我们将用正确的值替换`$file`变量中的变量：
- en: '[PRE41]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now we''re ready to send the e-mail to the user. We''re using PHP''s `mail()`
    function to send the e-mail for us. If the e-mail was sent, then we will redirect
    the user to the sign-in page. If not, then we just reload the function:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好向用户发送电子邮件。我们使用PHP的`mail()`函数来发送电子邮件。如果电子邮件已发送，则将用户重定向到登录页面。如果没有，则只是重新加载函数：
- en: '[PRE42]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `new_password()` function is accessed when a user clicks on the URL in the
    e-mail they were sent during the execution of the previous function—`forgot_password()`.
    It displays a form to the user, allowing them to enter their new password.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击在执行上一个函数`forgot_password()`期间发送给他们的电子邮件中的URL时，会访问`new_password()`函数。它向用户显示一个表单，允许他们输入新密码。
- en: 'First we define the validation rules for the form in the `users/new_password.php`
    view file:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在`users/new_password.php`视图文件中定义表单的验证规则：
- en: '[PRE43]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If the form is being viewed for the first time or has failed the preceding
    validation rules, then the `$this->form_validation()` CodeIgniter function returns
    `FALSE`, loading the `users/new_password.php` view file. The view file contains
    three form elements: one for a user''s email and two for their new password:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单是第一次查看或未通过前面的验证规则，则`$this->form_validation()` CodeIgniter函数返回`FALSE`，加载`users/new_password.php`视图文件。该视图文件包含三个表单元素：一个用于用户的电子邮件地址和两个用于他们的新密码：
- en: '[PRE44]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If the form has passed validation, then we will try to match the code in the
    URL with an account using the e-mail address as a search term:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单通过了验证，那么我们将尝试将URL中的代码与使用电子邮件地址作为搜索词的账户进行匹配：
- en: '[PRE45]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If the `does_code_match()` function of `Users_model` returns a false value,
    then there is no record in the database that has the e-mail address and code that
    matches the e-mail address supplied in the form and the code in the URL. If that''s
    the case, we redirect them to the `forgot_password()` function to start the process
    again. If, however, it matches, then this is obviously a genuine request:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Users_model`的`does_code_match()`函数返回一个假值，那么数据库中没有记录包含与表单中提供的电子邮件地址和URL中的代码匹配的电子邮件地址和代码。如果是这种情况，我们将他们重定向到`forgot_password()`函数以重新开始这个过程。然而，如果它匹配，那么这显然是一个真实的请求：
- en: '[PRE46]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'As this is most likely a genuine request and the e-mail and unique code have
    matched, let''s create a hash value from the supplied password:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这很可能是真实的请求，并且电子邮件和唯一代码已匹配，让我们从提供的密码中创建一个哈希值：
- en: '[PRE47]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We can store this hash in the `$data` array along with the supplied e-mail:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个哈希存储在`$data`数组中，同时包含提供的电子邮件：
- en: '[PRE48]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now let''s take this e-mail and hash and pass to the `update_user_password()`
    function of `Users_model`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将这封电子邮件和哈希传递给`Users_model`的`update_user_password()`函数：
- en: '[PRE49]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now that the user has updated their password, let''s send them an e-mail confirming
    this:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户已经更新了他们的密码，让我们发送一封电子邮件来确认这一点：
- en: '[PRE50]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We need to load the `new_password.txt` file. This file contains the template
    text for the body of the e-mail we''ll send. Again, you''ll need to change the
    file path of this file to that on your system. We pass the filename to the `read_file()`
    CodeIgniter function that will open the file and return its contents. The contents
    of this file, that is, the text in the file, is stored as a string in the `$file`
    variable:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要加载`new_password.txt`文件。此文件包含我们将发送的电子邮件正文的模板文本。同样，您需要将此文件的文件路径更改为您系统上的路径。我们将文件名传递给`read_file()`
    CodeIgniter函数，该函数将打开文件并返回其内容。该文件的内容，即文件中的文本，被存储在`$file`变量中作为一个字符串：
- en: '[PRE51]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Using the `str_replace()` PHP function, we''ll replace the variables in the
    `$file` variable with the correct values. Once this e-mail is sent, we redirect
    them to the `signin` controller where they can log in using their new password:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`str_replace()` PHP函数，我们将`$file`变量中的变量替换为正确的值。一旦发送了此电子邮件，我们将他们重定向到`signin`控制器，在那里他们可以使用新密码登录：
- en: '[PRE52]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create the `/path/to/codeigniter/application/controllers/me.php` controller
    file and add the following code to it:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/controllers/me.php`控制器文件，并向其中添加以下代码：
- en: '[PRE53]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The `me` controller is to be used by users who are not admins—in other words,
    users whose value of `users.usr_access_level` is set to `2` or above.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`me`控制器应由非管理员用户使用——换句话说，`users.usr_access_level`的值设置为`2`或以上的用户。'
- en: 'This project allows the user to change their details, name, e-mail address,
    and so on. However, you can adapt the `me` controller to display any number of
    things. Or, using the following code in the `__construct()` function of another
    controller, you can provide functions for specific levels of users:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目允许用户更改他们的详细信息、姓名、电子邮件地址等。然而，您可以调整`me`控制器以显示任意数量的内容。或者，您可以在另一个控制器的`__construct()`函数中使用以下代码提供特定级别用户的函数：
- en: '[PRE54]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We will go through this in more detail later on in the *Putting it all together*
    section of this chapter; however, let's quickly mention it here anyway. The preceding
    code checks to see whether the user is logged in and then checks the users' access
    level (`users.usr_access_level`).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的“整合一切”部分更详细地介绍这一点；然而，我们还是在这里简要提及。前面的代码检查用户是否已登录，然后检查用户的访问级别（`users.usr_access_level`）。
- en: If the `users.usr_access_level` value is not greater than or equal to `2` (which
    is the level of a normal user), then it will redirect them to `signin` or `signout`—in
    other words, it will log them out and terminate their session.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`users.usr_access_level`的值不大于或等于`2`（这是普通用户的级别），那么它将重定向他们到`signin`或`signout`——换句话说，它会将他们注销并终止会话。
- en: 'By adjusting the value that is compared (for example `1`, `2`, `3`, and so
    on), you can ensure that users with a specific value can only access this controller:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调整比较的值（例如`1`、`2`、`3`等），您可以确保具有特定值的用户只能访问此控制器：
- en: '[PRE55]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `index()` function allows a normal user to update their details in the
    database. First, we set our validation rules for the form:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`index()`函数允许普通用户在数据库中更新他们的详细信息。首先，我们为表单设置验证规则：'
- en: '[PRE56]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If the form is being viewed for the first time or has failed the preceding
    validation rules, then the `$this->form_validation()` CodeIgniter function returns
    `FALSE`, loading the `users/me.php` view file:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单是第一次查看或已失败之前的验证规则，那么`$this->form_validation()` CodeIgniter函数返回`FALSE`，加载`users/me.php`视图文件：
- en: '[PRE57]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Here, we define the setting for the HTML form items to be displayed in the `users/me.php`
    view file. As we are editing a user who is already logged in, we'll need to grab
    their details from the database in order to prepopulate the form elements.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了要在`users/me.php`视图文件中显示的HTML表单项的设置。由于我们正在编辑一个已经登录的用户，我们需要从数据库中获取他们的详细信息以便预先填充表单元素。
- en: 'We call the `get_user_details()` function of `Users_model`, passing to it the
    user ID fetched from the session:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`Users_model`的`get_user_details()`函数，并将从会话中获取的用户ID传递给它：
- en: '[PRE58]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Once we have fetched the users details and saved them to local variables, we
    apply them to the form items. To do this, we use the `set_value()` CodeIgniter
    function, the first parameter being the name of the form element (for example,
    `<input type="text" name="this-is-the-name" />`) and the second parameter being
    the actual value of the form element:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获取了用户详细信息并将它们保存到局部变量中，我们就将它们应用到表单项上。为此，我们使用CodeIgniter的`set_value()`函数，第一个参数是表单项的名称（例如，`<input
    type="text" name="this-is-the-name" />`）和第二个参数是表单项的实际值：
- en: '[PRE59]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now that validation has passed, we''ll save the posted data to the `$data`
    array in preparation to save it to the `process_update_user()` function of `Users_model`:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在验证已经通过，我们将发布的数据保存到`$data`数组中，以便将其保存到`Users_model`的`process_update_user()`函数中：
- en: '[PRE60]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The `me` controller also contains the `change_password()` function. This allows
    the user who is accessing the controller to change their password. Once accessed,
    the `/views/users/change_password.php` view file displays a simple form that asks
    for a new password. Once the form is submitted and validated successfully, a hash
    is created using the new password provided and saved to the logged-in user''s
    record:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`me`控制器还包含`change_password()`函数。这允许访问控制器的用户更改他们的密码。一旦访问，`/views/users/change_password.php`视图文件将显示一个简单的表单，要求输入新密码。一旦表单提交并成功验证，将使用提供的新密码创建一个哈希值，并将其保存到已登录用户的记录中：'
- en: '[PRE61]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create the `/path/to/codeigniter/application/controllers/register.php` controller
    file and add the following code to it:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/controllers/register.php`控制器文件，并将以下代码添加到其中：
- en: '[PRE62]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The `index()` function displays a small form to a new user. This form allows
    them to enter basic information such as the e-mail address and name. Once the
    user presses the Register button and for form is successfully validated, the user
    is sent a welcome e-mail and is added to the database.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`index()`函数向新用户显示一个小表单。此表单允许他们输入基本信息，如电子邮件地址和姓名。一旦用户按下注册按钮并且表单成功验证，用户将收到一封欢迎邮件并被添加到数据库中。'
- en: 'First, we set the validation rules for the form in `views/users/register.php`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在`views/users/register.php`中设置表单的验证规则：
- en: '[PRE63]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Once the form is successfully validated, we create an e-mail for them. This
    is done by using the `random_string()` CodeIgniter function. We generate an eight-character
    string of alphanumeric digits. This is stored in the `$password` variable—we''ll
    need this to create the hash (which will be stored in `users.usr_hash`) and to
    send it to the user in an e-mail (otherwise they won''t know what their password
    is):'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦表单成功验证，我们就会为他们创建一封电子邮件。这是通过使用CodeIgniter的`random_string()`函数来完成的。我们生成一个由字母数字字符组成的八位字符串。这个字符串存储在`$password`变量中——我们需要这个变量来创建哈希（这将存储在`users.usr_hash`中）并通过电子邮件发送给用户（否则他们不知道自己的密码是是什么）：
- en: '[PRE64]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'After we create their password, we create a hash value of it. This is done
    by passing `$password` to `$this->encrypt->sha1()`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建他们的密码之后，我们为其创建一个哈希值。这是通过将`$password`传递给`$this->encrypt->sha1()`来完成的：
- en: '[PRE65]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, we save everything to the `$data` array in preparation of writing to the
    database. This is done by calling the `register_user()` function of `Register_model`
    and passing it the `$data` array:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将所有内容保存到`$data`数组中，为写入数据库做准备。这是通过调用`Register_model`的`register_user()`函数并传递`$data`数组来完成的：
- en: '[PRE66]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If the `register_user()` function returns `true`, then we send the user an
    e-mail, otherwise we send them back to the `register` controller:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`register_user()`函数返回`true`，那么我们将给用户发送一封电子邮件，否则我们将他们发送回`register`控制器：
- en: '[PRE67]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Create the `/path/to/codeigniter/application/controllers/signin.php` controller
    file and add the following code to it:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/controllers/signin.php`控制器文件，并将以下代码添加到其中：
- en: '[PRE68]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The `index()` function displays a form to the user, allowing them to enter their
    e-mail address and password. It also handles any validation from the sign-in form.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`index()`函数向用户显示一个表单，允许他们输入他们的电子邮件地址和密码。它还处理登录表单的任何验证。'
- en: 'First off, the `index()` function checks to see whether the user is already
    logged in—after all, there''s no point in someone trying to log in when they''re
    already logged in. So, we check for the value of the `logged_in` userdata item.
    If this exists and equals `TRUE`, then they must already be logged in. If this
    is the case, then we work out their user level to see whether they are a normal
    user or an admin. If they are an admin, they''re redirected to the admin area,
    that is, the `users` controller; if they are not an admin user, they are redirected
    to the `me` controller:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`index()`函数检查用户是否已经登录——毕竟，当用户已经登录时尝试登录是没有意义的。因此，我们检查`logged_in`用户数据项的值。如果存在并且等于`TRUE`，那么他们必须已经登录。如果是这种情况，那么我们将计算出他们的用户级别，以确定他们是否是普通用户还是管理员。如果他们是管理员，他们将被重定向到管理员区域，即`users`控制器；如果他们不是管理员用户，他们将被重定向到`me`控制器：
- en: '[PRE69]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'If they get to this point in the code, then they are not logged in, which means
    that we have to display a form so they can log in. Now, we define the validation
    rules for the sign-in form:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们到达代码的这个点，那么他们还没有登录，这意味着我们必须显示一个表单，让他们可以登录。现在，我们定义登录表单的验证规则：
- en: '[PRE70]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Assuming that the validation has passed, we store their e-mail and password
    in local variables, load `Signin_model`, and call the `does_user_exist()` function,
    passing to it the e-mail address supplied by the user. If anything other than
    one record is found, then the form redirects to the `signin` controller for the
    user to try again:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 假设验证通过，我们将他们的电子邮件和密码存储在局部变量中，加载`Signin_model`，并调用`does_user_exist()`函数，将用户提供的电子邮件地址传递给它。如果找到的不是一条记录，则表单将重定向到`signin`控制器，让用户再次尝试：
- en: '[PRE71]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'If, however, exactly one record is found, then we will try to log them in:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果恰好找到一条记录，我们将尝试让他们登录：
- en: '[PRE72]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We generate a hash from the password supplied by the user and compare it to
    the hash value in the database result object returned by the `does_user_exist()`
    call:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从用户提供的密码生成一个哈希值，并将其与`does_user_exist()`调用返回的数据库结果对象中的哈希值进行比较：
- en: '[PRE73]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'If the user gets to this part in the code, then it means that the hash values
    didn''t match, so we''ll display the sign-in view with an error message:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户到达代码的这一部分，这意味着哈希值不匹配，因此我们将显示带有错误信息的登录视图：
- en: '[PRE74]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'However, if the user gets here then the hash values match, the password supplied
    by the user must be correct. So, we package a few items into the `$data` array,
    which they will find useful once they are logged in:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果用户到达这里，那么哈希值匹配，用户提供的密码必须是正确的。因此，我们将一些项目打包到`$data`数组中，一旦他们登录，这些项目将对他们很有用：
- en: '[PRE75]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Then, create a session for them with `$this->session->set_userdata()`:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`$this->session->set_userdata()`为他们创建一个会话：
- en: '[PRE76]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Finally, we work out what controller to redirect them to. If they are an admin
    user (`users.usr_access_level = 1`), they will be directed to `users`; if they
    are a normal user (`users.usr_access_level = 2`), they will be directed to the
    `me` controller; however, if `users.usr_access_level` is anything other than `1`
    or `2`, then they are also directed to the `me` controller by default:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们确定将他们重定向到哪个控制器。如果他们是管理员用户（`users.usr_access_level = 1`），他们将重定向到`users`；如果他们是普通用户（`users.usr_access_level
    = 2`），他们将重定向到`me`控制器；然而，如果`users.usr_access_level`不是`1`或`2`，则默认也将他们重定向到`me`控制器：
- en: '[PRE77]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: What comes up must come down, or something like that; anyway. what's logged
    in must be logged out (dreadful!) anyway—`signout()` is a quick function that
    destroys the session and redirects the user to the `signin` controller.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 事物有起有落，或者类似这样的话；无论如何。已经登录的必须注销（可怕！）——`signout()`是一个快速函数，用于销毁会话并将用户重定向到`signin`控制器。
- en: 'The `signin` controller is called when a user (admin or otherwise) clicks on
    the Logout link in the `top_nav.php` view. Once redirected, the `signin` controller
    will recognize they are no longer logged in and display the sign-in form:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户（管理员或其他用户）点击`top_nav.php`视图中的注销链接时，将调用`signin`控制器。一旦重定向，`signin`控制器将识别他们已经不再登录，并显示登录表单：
- en: '[PRE78]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Create the `/path/to/codeigniter/application/controllers/users.php` controller
    file and add the following code to it:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/controllers/users.php`控制器文件，并向其中添加以下代码：
- en: '[PRE79]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Okay, the first thing to notice is the `__construct()` function. We test the
    user''s access level (`users.usr_access_level`)—if it is not equal to `1` at least,
    then they are not an admin user—so, we redirect them out of the controller:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，首先要注意的是`__construct()`函数。我们测试用户的访问级别（`users.usr_access_level`）——如果它不等于`1`，那么他们就不是管理员用户——因此，我们将他们重定向出控制器：
- en: '[PRE80]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Now, let's take a look at the preceding function. The `index()` function loads
    the `get_all_users()` function of `Users_model` that, as the name suggests, gets
    all users in the `users` table. The result of this is stored in the `$data` array's
    `query` item and is then passed to the `views/users/view_all_users.php` view file.
    This view file will display all users in a table format with two options for editing
    and deleting.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下前面的函数。`index()`函数加载`Users_model`的`get_all_users()`函数，正如其名，它获取`users`表中的所有用户。这个结果存储在`$data`数组的`query`项中，然后传递给`views/users/view_all_users.php`视图文件。这个视图文件将以表格格式显示所有用户，并提供编辑和删除的两种选项。
- en: 'The `new_user()` function handles the creation of users within the system.
    Initially, the `new_user()` function sets the validation rules:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`new_user()`函数处理系统内的用户创建。最初，`new_user()`函数设置验证规则：'
- en: '[PRE81]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'After we set the validation rules (shown in the preceding code), we then test
    for the return value of `$this->form_validation()`. If it''s the first time the
    page is accessed or any form item fails validation, then `FALSE` is returned,
    and the following code is run. Here, we define the settings for the HTML form
    elements displayed in the `views/users/new_user.php` view:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置验证规则（如前述代码所示）之后，我们接着测试 `$this->form_validation()` 的返回值。如果是第一次访问页面或任何表单项验证失败，则返回
    `FALSE`，然后执行以下代码。在这里，我们定义了在 `views/users/new_user.php` 视图中显示的 HTML 表单元素的设置：
- en: '[PRE82]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Assuming that the form data has passed validation, we begin to create a password
    for the user. We use the `random_string()` CodeIgniter function to generate an
    alphanumeric string of characters 8 digits in length.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 假设表单数据通过了验证，我们开始为用户创建密码。我们使用 CodeIgniter 的 `random_string()` 函数生成一个8位长度的字母数字字符串。
- en: 'We then generate a hash from this password using the `$this->encrypt->sha1()`
    CodeIgniter function, as shown in the following snippet. Later on in the code,
    we send the password to the user in an e-mail:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `$this->encrypt->sha1()` CodeIgniter 函数从这个密码生成哈希值，如下述代码片段所示。稍后，在代码中，我们将密码通过电子邮件发送给用户：
- en: '[PRE83]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'We save the form input and `$hash` to the `$data` arrays:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将表单输入和 `$hash` 保存到 `$data` 数组中：
- en: '[PRE84]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Once it is stored in the `$data` array, we attempt to save the hash to the
    database with the `process_create_user()` function of `Users_model`:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它存储在 `$data` 数组中，我们尝试使用 `Users_model` 的 `process_create_user()` 函数将哈希值保存到数据库中：
- en: '[PRE85]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Should the admin user choose to edit a user's details, they can click on Edit
    against the user's name when they're viewing the full user list, as described
    earlier for the `index()` function. If they do press Edit, then the `edit_user()`
    function is called—this is a basic function that uses the form validation functionality
    to validate the user's details should the form be submitted.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 如果管理员用户选择编辑用户的详细信息，当他们查看完整的用户列表时，可以点击用户名称旁边的编辑按钮，如前述 `index()` 函数中描述的那样。如果他们点击编辑，则调用
    `edit_user()` 函数——这是一个基本函数，它使用表单验证功能来验证用户详细信息，以防表单被提交。
- en: 'Initially, we begin by defining the form validation rules:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，我们首先定义表单验证规则：
- en: '[PRE86]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The user''s primary key (`users.usr_id`) is appended to the Edit link and passed
    to the `edit_user()` function. This is used to look up the user in the `users`
    table. The `get_user_details($id)` function of `Users_model` takes one parameter—the
    value of `$id` (as passed in the Edit link or posted using `$_POST` if the form
    is submitted)—and looks for the user. Once found, the details of the query are
    written to local variables and saved to the `$data` array. This, in turn, is passed
    to the `edit_user.php` view where it is used to populate the form items with the
    correct data:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的主键 (`users.usr_id`) 被附加到编辑链接中，并传递给 `edit_user()` 函数。这用于在 `users` 表中查找用户。`Users_model`
    的 `get_user_details($id)` 函数接受一个参数——即 `$id` 的值（如通过编辑链接传递或使用 `$_POST` 提交表单时传递）——并查找用户。一旦找到，查询的详细信息将被写入局部变量并保存到
    `$data` 数组中。然后，它被传递到 `edit_user.php` 视图中，用于用正确数据填充表单项：
- en: '[PRE87]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'After we set the validation rules, we test for the return value of `$this->form_validation()`.
    If it''s the first time the page is accessed or any form item fails validation,
    then `FALSE` is returned, and the following code is run. Here, we define the settings
    for the HTML form elements displayed in the `views/users/edit_user.php` view:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置验证规则之后，我们测试 `$this->form_validation()` 的返回值。如果是第一次访问页面或任何表单项验证失败，则返回 `FALSE`，然后执行以下代码。在这里，我们定义了在
    `views/users/edit_user.php` 视图中显示的 HTML 表单元素的设置：
- en: '[PRE88]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'We build the HTML form elements here, defining their settings in the `$data`
    array, as shown in the following code:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里构建 HTML 表单元素，并在 `$data` 数组中定义它们的设置，如下述代码所示：
- en: '[PRE89]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Assuming that the form input passed validation, we save the new user information
    to the `$data` array:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 假设表单输入通过了验证，我们将新的用户信息保存到 `$data` 数组中：
- en: '[PRE90]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Once everything is added to the `$data` array, we try to update the user''s
    details using the `process_update_user()` function of `Users_model`:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有内容都添加到 `$data` 数组中，我们尝试使用 `Users_model` 的 `process_update_user()` 函数更新用户的详细信息：
- en: '[PRE91]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'By pressing the Delete link in the `views/users/view_all_users.php` file, the
    `users` controller''s `delete_user()` function is called. Like the `edit_user()`
    function, `delete_user()` uses the `users_usr_id` primary key appended to the
    end of the Delete link URL and passes it to the `delete_user($id)` function of
    `Users_model`. This model function takes one parameter—the `$id` (as passed in
    the Delete link or posted using `$_POST` if the form is submitted)—and deletes
    the user from the `users` table:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`views/users/view_all_users.php`文件中点击删除链接，将调用`users`控制器的`delete_user()`函数。与`edit_user()`函数类似，`delete_user()`使用附加在删除链接URL末尾的`users_usr_id`主键，并将其传递给`Users_model`的`delete_user($id)`函数。此模型函数接受一个参数——`$id`（如通过删除链接传递或如果表单被提交则使用`$_POST`传递）——并从`users`表中删除用户：
- en: '[PRE92]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Creating the language file
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建语言文件
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中的所有项目一样，我们正在使用语言文件来为用户提供文本。这样，您就可以启用多区域/多语言支持。
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/language/english/en_admin_lang.php`文件，并将以下代码添加到其中：
- en: '[PRE93]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Putting it all together
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有这些整合在一起
- en: Okay, so that's the code. Now, let's take a look at some ways in which it can
    be used—this will help us get a good idea about how it all interacts with each
    other.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是代码。现在，让我们看看它可以用作哪些方式——这将帮助我们了解它如何相互交互。
- en: User registration
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户注册
- en: 'The following is the sequence of steps:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一系列步骤：
- en: A user opens the `register` controller in their browser and is prompted to enter
    their first name, last name, and e-mail address
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在浏览器中打开`register`控制器，并被提示输入他们的名字、姓氏和电子邮件地址
- en: The user submits the form and the form is posted to the `index()` register function
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户提交表单，表单被发送到`index()`注册函数
- en: The `register` controller saves the user's details to the `users` table and
    generates a password for them
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`register`控制器将用户的详细信息保存到`users`表中，并为它们生成密码'
- en: This is sent to them in an e-mail and is sent to the email address submitted
    earlier
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将通过电子邮件发送给他们，并发送到之前提交的电子邮件地址
- en: The user can then log back in to the system and amend their details as they
    wish
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，用户可以登录系统并修改他们想要的详细信息
- en: Ensuring correct access
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保正确的访问权限
- en: It is possible to allocate controllers and even certain functions to be accessed
    by users with a specific access level only. We touched on this earlier in the
    chapter; however, we're going to discuss it here as well.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将控制器和某些特定功能分配给只有特定访问级别的用户访问。我们之前在章节中提到了这一点；然而，我们还将在这里讨论它。
- en: 'Look at the following code snippet, specifically, the parts in bold:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 看以下代码片段，特别是粗体部分：
- en: '[PRE94]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: This function can be placed into any controller or function as you wish; doing
    so will protect this code block from access to users without the correct access
    level. The first part checks whether a user is logged in (that is, if a session
    exists), but the second comparison looks at the user access level set at the sign-in.
    By adjusting the value checked for, you can tailor access to specific users, user
    groups, or access levels.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此函数放置在任何控制器或函数中，如您所愿；这样做将保护此代码块免受没有正确访问级别的用户的访问。第一部分检查用户是否已登录（即，如果存在会话），但第二个比较查看在登录时设置的用户的访问级别。通过调整检查的值，您可以定制对特定用户、用户组或访问级别的访问。
- en: Summary
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So there you are—a simple auth system using Twitter Bootstrap as a frontend.
    It should be simple to adapt and amend to suit your needs but still enable you
    to do the basics.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是您所看到的——一个使用Twitter Bootstrap作为前端的前端简单的认证系统。它应该很容易适应和修改以满足您的需求，但仍然允许您完成基本操作。
- en: In the next chapter we will look at creating a simple e-commerce site that will
    allow you to have a simple shop and a look at options on how you can extend it.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨创建一个简单的电子商务网站，这将允许您拥有一个简单的商店，并查看您可以如何扩展它的选项。
