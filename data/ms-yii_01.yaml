- en: Chapter 1. Composer, Configuration, Classes, and Path Aliases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章。Composer、配置、类和路径别名
- en: Before diving into Yii Framework 2, we need to take a look at how it is installed,
    how it is configured, and what the core building blocks of the framework are.
    In this chapter, we'll go over how to install the framework itself and prebuilt
    applications via a package management tool called **Composer**. We'll also cover
    some common configurations of both Yii Framework 2 and our web server, including
    making our applications aware of the environment they are running on and responding
    appropriately to that environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解 Yii Framework 2 之前，我们需要看看它是如何安装的，如何配置的，以及框架的核心构建块是什么。在本章中，我们将介绍如何通过名为
    **Composer** 的包管理工具安装框架本身和预构建的应用程序。我们还将涵盖 Yii Framework 2 和我们的 Web 服务器的一些常见配置，包括使我们的应用程序了解它们正在运行的环境，并相应地对此环境做出反应。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The most common ways to reference Yii Framework 2 are *Yii Framework 2*, *YF2*,
    and *Yii2*. We'll be using these terms interchangeably throughout the book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 引用 Yii Framework 2 最常见的方式是 *Yii Framework 2*、*YF2* 和 *Yii2*。本书中我们将交替使用这些术语。
- en: Composer
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer
- en: 'There are several different ways to install Yii2, ranging from downloading
    the framework from source control (typically, from GitHub at [https://github.com/yiisoft/yii2](https://github.com/yiisoft/yii2))
    to using a package manager such as Composer. With modern web applications, Composer
    is the preferred method to install Yii2 as it enables us to install, update, and
    manage all dependencies and extensions for our application in an automated fashion.
    Additionally, using Composer, we can ensure that Yii Framework 2 is kept up to
    date with the latest security and bug fixes. Composer can be installed by following
    the instructions on [https://getcomposer.org](https://getcomposer.org). Typically,
    this process looks as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Yii2 有几种不同的方式，从从源代码控制（通常是从 GitHub 的 [https://github.com/yiisoft/yii2](https://github.com/yiisoft/yii2)）下载框架到使用包管理器（如
    Composer）。在现代 Web 应用程序中，Composer 是安装 Yii2 的首选方法，因为它使我们能够以自动化的方式安装、更新和管理我们应用程序的所有依赖项和扩展。此外，使用
    Composer，我们可以确保 Yii Framework 2 保持最新状态，包括最新的安全和错误修复。Composer 可以通过遵循 [https://getcomposer.org](https://getcomposer.org)
    上的说明进行安装。通常，这个过程如下所示：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, if you don''t have cURL available on your system, it can be
    installed through PHP itself:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你系统上没有 cURL，可以通过 PHP 本身进行安装：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once installed, we should move Composer to a more centralized directory so
    that we can call it from any directory on our system. Installing Composer from
    a centralized directory rather than on a per-project basis has several advantages:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们应该将 Composer 移动到一个更集中的目录，这样我们就可以从系统上的任何目录调用它。与基于每个项目的安装相比，从集中式目录安装 Composer
    有几个优点：
- en: It can be called anywhere from any project. When working with multiple projects,
    we can ensure that we use the same dependency manager each time and for every
    project.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以从任何项目中进行调用。当处理多个项目时，我们可以确保每次和每个项目都使用相同的依赖管理器。
- en: In a centralized directory, Composer only needs to be updated once rather than
    in every project we are working on.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集中式目录中，Composer 只需要更新一次，而不是在我们正在工作的每个项目中都更新。
- en: Dependency managers are rarely considered code that should be pushed to your
    DCVS repository. Keeping the `composer.phar` file out of your repository reduces
    the amount of code you need to commit and push and ensures that your source code
    remains isolated from your package manager code.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖管理器很少被认为是应该推送到你的 DCVS 仓库的代码。将 `composer.phar` 文件保留在仓库之外可以减少你需要提交和推送的代码量，并确保你的源代码与包管理器代码保持隔离。
- en: By installing Composer from a centralized directory, we can ensure that Composer
    is always available, which saves us a step each time we clone a project that depends
    on Composer.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从集中式目录安装 Composer，我们可以确保 Composer 总是可用的，这样每次克隆依赖于 Composer 的项目时，我们都可以节省一个步骤。
- en: 'A good directory to move Composer to is `/usr/local/bin,` as shown in the following
    example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Composer 移动到 `/usr/local/bin` 是一个不错的选择，如下面的示例所示：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Throughout this book, we'll be using Unix-style commands when referencing command-line
    arguments. Consequently, some commands may not work on Windows. If you decide
    to set up a Windows environment, you might need to use `Composer-Setup.exe` (available
    at [https://getcomposer.org/Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe))
    to get Composer configured for your system. If you have any issues getting Composer
    to run on your system, ensure that you check out the Composer documentation available
    at [https://getcomposer.org/doc/](https://getcomposer.org/doc/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，当我们引用命令行参数时，将使用Unix风格的命令。因此，一些命令可能在Windows上无法工作。如果你决定设置Windows环境，你可能需要使用`Composer-Setup.exe`（可在[https://getcomposer.org/Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe)找到）来为你的系统配置Composer。如果你在系统上运行Composer时遇到任何问题，请确保查看在[https://getcomposer.org/doc/](https://getcomposer.org/doc/)提供的Composer文档。
- en: 'Alternatively, if you have Composer installed on your system already, ensure
    that you update it to the latest version by running this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你已经在你的系统上安装了Composer，确保通过运行以下命令将其更新到最新版本：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The commands that we use through this book are based on the assumption that
    you have sufficient privileges to run them. On Unix-like systems, you may need
    to preface some commands with `sudo` in order to execute the command with a high
    permissions set. Alternatively if you are running these commands on Windows, you
    should ensure that you are running the listed commands in a command prompt that
    has elevated privileges. Ensure that you follow best practices when using `sudo`
    and when using elevated command prompts in order to ensure your system stays secure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中所使用的命令基于假设你有足够的权限来运行它们。在类Unix系统中，你可能需要在一些命令前加上`sudo`以便以高权限集执行命令。如果你在Windows上运行这些命令，你应该确保你在具有提升权限的命令提示符中运行列出的命令。确保在使用`sudo`和使用提升的命令提示符时遵循最佳实践，以确保你的系统保持安全。
- en: Once Composer is installed, we'll need to install a global plugin called **The
    Composer Asset Plugin** (available at [https://github.com/francoispluchino/composer-asset-plugin](https://github.com/francoispluchino/composer-asset-plugin)).
    This plugin enables Composer to manage asset files for us without the need to
    install additional software (these programs are Bower, an asset dependency manager
    created by Twitter, and Node Package Manager, or NPM, which is a JavaScript dependency
    manager).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Composer，我们还需要安装一个名为**The Composer Asset Plugin**的全局插件（可在[https://github.com/francoispluchino/composer-asset-plugin](https://github.com/francoispluchino/composer-asset-plugin)找到）。此插件使Composer能够为我们管理资产文件，而无需安装额外的软件（这些程序是Bower，由Twitter创建的资产依赖管理器，以及Node
    Package Manager，或NPM，它是一个JavaScript依赖管理器）。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Due to the GitHub API's rate limiting, during installation, Composer may ask
    you to enter your GitHub credentials. After entering your credentials, Composer
    will request a dedicated API key from GitHub that can be used for future installations.
    Ensure that you check out the Composer documentation at [https://getcomposer.org/doc/](https://getcomposer.org/doc/)
    for more information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GitHub API的速率限制，在安装过程中，Composer可能会要求你输入你的GitHub凭据。输入凭据后，Composer将从GitHub请求一个专用的API密钥，该密钥可用于未来的安装。确保查看[https://getcomposer.org/doc/](https://getcomposer.org/doc/)上的Composer文档以获取更多信息。
- en: 'With Composer installed, we can now instantiate our application. If we want
    to install an existing Yii2 package, we can simply run the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Composer后，我们现在可以实例化我们的应用程序。如果我们想安装现有的Yii2包，我们可以简单地运行以下命令：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using the Yii2 basic app as an example, this command will look like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以Yii2基本应用程序为例，此命令将看起来像这样：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After running the command, you should see output similar to the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，你应该看到类似以下内容的输出：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Your output may differ slightly due to the data cached on your system and versions
    of subpackages.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出可能会因系统上缓存的数据和子包的版本而略有不同。
- en: This command will install the Yii2 basic app to a folder called basic. When
    creating a new Yii2 project, you'll typically want to use the create-project command
    to clone "yii2-app-basic" and then develop your application from there as the
    basic app comes prepopulated with just about everything you need to start a new
    project. However, you can also create a Yii2 project from scratch that, while
    more complicated, gives you more control over your application's structure.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将安装 Yii2 基础应用程序到名为 basic 的文件夹中。在创建新的 Yii2 项目时，你通常会使用 create-project 命令来克隆
    "yii2-app-basic"，然后从那里开始开发你的应用程序，因为基础应用程序已经预先填充了几乎所有你需要开始新项目的东西。然而，你也可以从头开始创建一个
    Yii2 项目，虽然这更复杂，但它让你对你的应用程序结构有更多的控制。
- en: 'Let''s take a look at the `composer.json` file that was created when we ran
    the `create-project` command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们运行 `create-project` 命令时创建的 `composer.json` 文件：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'While most of these items (such as the name, description, license, and require
    blocks) are rather self-explanatory, there are a few Yii2-specific items in here
    that we should take note of. The first section we want to look at is the `"scripts"`
    section:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些项目中的大多数（如名称、描述、许可证和 require 块）相当直观，但这里也有一些特定于 Yii2 的项目需要注意。我们首先想要查看的部分是
    `"scripts"` 部分：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This script tells Composer that when the `create-project` command is run, it
    should run the `postCreateProject` static function. Looking at the the framework
    source code, we see that this file is referenced in the `yii2-composer` package
    (refer to [https://github.com/yiisoft/yii2-composer/blob/master/Installer.php#L232](https://github.com/yiisoft/yii2-composer/blob/master/Installer.php#L232)).
    This command then runs several post-project creation actions, namely setting the
    local disk permissions, generating a unique cookie validation key, and setting
    some asset installer paths for composer-asset-plugin.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本告诉 Composer 当运行 `create-project` 命令时，应该运行 `postCreateProject` 静态函数。查看框架源代码，我们看到此文件在
    `yii2-composer` 包中被引用（参考 [https://github.com/yiisoft/yii2-composer/blob/master/Installer.php#L232](https://github.com/yiisoft/yii2-composer/blob/master/Installer.php#L232)）。然后此命令运行几个项目创建后的操作，包括设置本地磁盘权限、生成唯一的cookie验证密钥以及为
    composer-asset-plugin 设置一些资产安装器路径。
- en: 'Next, we have the `"extra"` block:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有 `"extra"` 块：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This section tells Composer to use these options when it runs the `postCreateProject`
    command. These preconfigured options give us a good starting point to create our
    applications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分告诉 Composer 在运行 `postCreateProject` 命令时使用这些选项。这些预配置选项为我们创建应用程序提供了一个良好的起点。
- en: Configuration
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: With our basic application now installed, let's take a look at a few basic configuration
    and bootstrap files that Yii2 automatically generated for us.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了基本应用程序，让我们看看 Yii2 自动为我们生成的几个基本配置和引导文件。
- en: Requirements checker
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求检查器
- en: 'Projects created from `yii2-app-basic` now come with a built-in requirements
    script called `requirements.php`. This script checks several different values
    in order to ensure that Yii2 can run on our application server. Before running
    our application, let''s run the requirements checker:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `yii2-app-basic` 创建的项目现在自带一个名为 `requirements.php` 的内置需求脚本。此脚本检查几个不同的值，以确保
    Yii2 可以在我们的应用服务器上运行。在运行我们的应用程序之前，让我们先运行需求检查器：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You''ll get output similar to the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到类似以下内容的输出：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In general, as long as the error count is set to `0`, we'll be good to move
    forward. If the requirements checker notices an error, it will report it in the
    `Check conclusion` section for you to rectify.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，只要错误计数设置为 `0`，我们就可以继续前进。如果需求检查器发现错误，它将在 `Check conclusion` 部分报告错误，以便你进行纠正。
- en: Tip
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As part of your deployment process, it is recommended that your deployment tool
    runs the requirements checker. This helps ensure that your application server
    meets all the requirements for Yii2 and that your application doesn't get deployed
    to a server or environment that doesn't support it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作为你的部署过程的一部分，建议你的部署工具运行需求检查器。这有助于确保你的应用服务器满足 Yii2 的所有要求，并且你的应用程序不会被部署到不支持它的服务器或环境中。
- en: Entry scripts
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入口脚本
- en: 'Like its predecessor, Yii Framework 2 comes with two separate entry scripts:
    one for web applications and the other for console applications.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与其前身一样，Yii Framework 2 附带两个独立的入口脚本：一个用于网页应用程序，另一个用于控制台应用程序。
- en: Web entry script
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网页入口脚本
- en: 'In Yii2, the entry script for web applications has been moved from the root
    (`/`) folder to the `web/` folder. In Yii1, our PHP files were stored in the `protected/`
    directory. By moving our entry scripts to the `web/` directory, Yii2 has increased
    the security of our application by reducing the amount of web server configuration
    we need to run our application. Furthermore, all public asset (JavaScript and
    CSS) files are now completely isolated from our source code directories. If we
    open up `web/index.php`, our entry script now looks as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii2中，Web应用的入口脚本已从根（`/`）文件夹移动到`web/`文件夹。在Yii1中，我们的PHP文件存储在`protected/`目录中。通过将我们的入口脚本移动到`web/`目录，Yii2通过减少我们需要运行应用程序的Web服务器配置来增加了我们应用程序的安全性。此外，所有公共资产（JavaScript和CSS）文件现在完全与我们的源代码目录隔离。如果我们打开`web/index.php`，我们的入口脚本现在看起来如下所示：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: The latest and most up to date copies of source code for this book is maintained
    on the Packt Publishing website, [http://www.packtpub.com](http://www.packtpub.com),
    and on GitHub at [https://github.com/masteringyii](https://github.com/masteringyii),
    for each chapter where applicable.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本书最新和最完整的源代码副本维护在Packt Publishing网站上，[http://www.packtpub.com](http://www.packtpub.com)，以及GitHub上的[https://github.com/masteringyii](https://github.com/masteringyii)，适用于每一章的相关内容。
- en: While suitable for basic applications, the default entry script requires us
    to manually comment out and change the code when moving to different environments.
    Since changing the code in a nondevelopment environment doesn't follow best practices,
    we should change this code block so that we don't have to touch our code to move
    it to a different environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然适用于基本应用，但默认的入口脚本需要我们在迁移到不同环境时手动注释和更改代码。由于在非开发环境中更改代码不符合最佳实践，我们应该更改此代码块，这样我们就不必触摸我们的代码来将其移动到不同的环境。
- en: 'We''ll start by creating a new application-wide constant called `APPLICATION_ENV`.
    This variable will be defined by either our web server or our console environment
    and will allow us to dynamically load different configuration files depending
    upon the environment that we''re working in:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个新的应用程序范围常量`APPLICATION_ENV`。该变量将由我们的Web服务器或控制台环境定义，并允许我们根据我们正在工作的环境动态加载不同的配置文件：
- en: 'After the opening `<?php` tag in `web/index.php`, add the following code block:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web/index.php`中的`<?php`标签之后，添加以下代码块：
- en: '[PRE14]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Our application now knows how to read the `APPLCATTION_ENV` variable from the
    environment variable, which will be passed either though our command line or our
    web server configuration. By default, if no environment is set, the `APPLICATION_ENV`
    variable will be set to prod.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的应用程序现在知道如何从环境变量中读取`APPLCATTION_ENV`变量，该变量将通过我们的命令行或我们的Web服务器配置传递。默认情况下，如果没有设置环境，`APPLICATION_ENV`变量将被设置为prod。
- en: 'Next, we''ll want to load a separate environment file that contains several
    environmental constants that we''ll use to dynamically change how our application
    runs in different environments:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们希望加载一个包含多个环境常量的单独环境文件，我们将使用这些常量来动态更改我们的应用程序在不同环境中的运行方式：
- en: '[PRE15]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we''ll configure Yii to set the `YII_DEBUG` and `YII_ENV` variables according
    to our application:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们将配置Yii以根据我们的应用程序设置`YII_DEBUG`和`YII_ENV`变量：
- en: '[PRE16]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, follow the rest of our `index.php` file under `web/`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照`web/`下的我们的`index.php`文件的其余部分进行操作：
- en: '[PRE17]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With these changes, our web application is now configured to be aware of its
    environment and load the appropriate configuration files.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，我们的Web应用程序现在已配置为能够了解其环境并加载适当的配置文件。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't worry; later in the chapter, we'll cover how to define the `APPLICATION_ENV`
    variable for both our web server (either Apache or NGINX) and our command line.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心；在本章的后面部分，我们将介绍如何为我们的Web服务器（Apache或NGINX）和命令行定义`APPLICATION_ENV`变量。
- en: Configuration files
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件
- en: In Yii2, configuration files are still split into console- and web-specific
    configurations. As there are many commonalities between these two files (such
    as our database and environment configuration), we'll store common elements in
    their own files and include those files in both our web and console configurations.
    This will help us follow the DRY standard, and reduce duplicate code within our
    application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii2中，配置文件仍然分为控制台和Web特定的配置。由于这两个文件之间有许多共同点（例如我们的数据库和环境配置），我们将存储常见元素在其自己的文件中，并在我们的Web和控制台配置中包含这些文件。这将帮助我们遵循DRY标准，并减少我们应用程序中的重复代码。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **DRY** (**don't repeat yourself**) principle in software development states
    that we should avoid having the same code block appear in multiple places in our
    application. By keeping our application DRY, we can ensure that our application
    is performant and can reduce bugs in our application. By moving our database and
    parameters' configuration to their own file, we can reuse that same code in both
    our web and console configuration files.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发中的**DRY**（**不要重复自己**）原则指出，我们应该避免在应用程序的多个地方出现相同的代码块。通过保持应用程序DRY，我们可以确保应用程序的性能，并减少应用程序中的错误。通过将数据库和参数的配置移动到它们自己的文件中，我们可以在Web和控制台配置文件中重用相同的代码。
- en: Web and console configuration files
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络和控制台配置文件
- en: 'Yii2 supports two different kinds of configuration files: one for web applications
    and another for console applications. In Yii2, our web configuration file is stored
    in `config/web.php` and our console configuration file is stored in `config/console.php`.
    If you''re familiar with Yii1, you''ll see that the basic structure of both of
    these files hasn''t changed all that much.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2支持两种不同类型的配置文件：一个用于Web应用程序，另一个用于控制台应用程序。在Yii2中，我们的Web配置文件存储在`config/web.php`中，我们的控制台配置文件存储在`config/console.php`中。如果你熟悉Yii1，你会看到这两个文件的基本结构并没有发生太大的变化。
- en: Database configuration
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库配置
- en: The next file we'll want to look at is our database configuration file stored
    in `config/db.php`. This file contains all the information our web and console
    applications will need in order to connect to the database.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要查看的下一个文件是我们的数据库配置文件，存储在`config/db.php`中。此文件包含我们的Web和控制台应用程序连接到数据库所需的所有信息。
- en: 'In our basic application, this file looks as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的基本应用程序中，此文件看起来如下：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For an application that is aware of its environment, however, we should replace
    this file with a configuration that will use the `APPLICATION_ENV` variable that
    we defined earlier:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于一个了解其环境的程序，我们应该用以下配置替换此文件，以使用我们之前定义的`APPLICATION_ENV`变量：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Right now, we're just setting things up. We'll cover how to set up our directories
    in the next section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只是在设置一些基本配置。我们将在下一节中介绍如何设置我们的目录。
- en: With this change, our application now knows that it needs to look in a file
    called `db.php` under `config/env/<APPLICATION_ENV>/` to pull the correct configuration
    environment for that file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个更改，我们的应用程序现在知道它需要查看位于`config/env/<APPLICATION_ENV>/`下的一个名为`db.php`的文件，以获取该文件的正确配置环境。
- en: Parameter configuration
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数配置
- en: 'In a manner similar to our database configuration file, Yii also lets us use
    a parameter file where we can store all of the noncomponent parameters for our
    application. This file is located at `config/params.php`. Since the basic app
    doesn''t make this file aware of its environment, we''ll change it to do that
    as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们的数据库配置文件，Yii还允许我们使用一个参数文件，我们可以将应用程序的所有非组件参数存储在这个文件中。此文件位于`config/params.php`。由于基本应用程序没有使此文件了解其环境，我们将对其进行更改，如下所示：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Environment configuration
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境配置
- en: 'Finally, we have the environment configuration that we defined earlier when
    working with our entry scripts. We''ll store this file in config/env.php, and
    it should be written as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有之前在处理入口脚本时定义的环境配置。我们将此文件存储在`config/env.php`中，并且它应该编写如下：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Most modern applications have several different environments depending upon
    their requirements. Typically, we''d break them down into four distinct environments:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代应用程序都有几个不同的环境，这取决于它们的需求。通常，我们会将它们分为四个不同的环境：
- en: The first environment we typically have is called **DEV**. This environment
    is where all of our local development occurs. Typically, developers have complete
    control over this environment and can change it, as required, to build their applications.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通常遇到的第一种环境被称为**DEV**。这个环境是我们所有本地开发发生的地方。通常，开发者可以完全控制这个环境，并根据需要对其进行更改，以构建他们的应用程序。
- en: The second environment that we typically have is a testing environment called
    **TEST**. Normally, we'd deploy our application to this environment in order to
    make sure that our code works in a production-like setting; however, we normally
    would still have high log levels and debug information available to us when using
    this environment.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通常遇到的第二种环境是一个名为**TEST**的测试环境。通常，我们会将应用程序部署到这个环境中，以确保我们的代码在类似生产的环境中能够正常工作；然而，当我们使用这个环境时，我们通常仍然可以访问高日志级别和调试信息。
- en: The third environment we typically have is called **UAT**, or the User Acceptance
    Testing environment. This is a separate environment that we'd provide to our client
    or business stakeholders for them to test the application to verify that it does
    what they want it to do.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通常拥有的第三个环境被称为 **UAT**，即用户验收测试环境。这是一个独立的环境，我们将将其提供给我们的客户或业务利益相关者，以便他们可以测试应用程序，以验证它是否按他们期望的方式工作。
- en: Finally, in our typical setup, we'd have our **PROD** or production environment.
    This is where our code finally gets deployed to and where all of our users ultimately
    interact with our application.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在我们的典型设置中，我们会有一个 **PROD** 或生产环境。这是我们的代码最终部署的地方，也是所有用户最终与我们的应用程序交互的地方。
- en: 'As outlined in the previous sections, we''ve been pointing all of our environment
    configuration files to the `config/env/<env>` folder. Since our local environment
    is going to be called `DEV`, we''ll create it first:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，我们已经将所有环境配置文件指向了 `config/env/<env>` 文件夹。由于我们的本地环境将被命名为 `DEV`，我们将首先创建它：
- en: 'We''ll start by creating our `DEV` environment folder from the command line:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先从命令行创建我们的 `DEV` 环境文件夹：
- en: '[PRE22]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we''ll create our `dev` database configuration file in `db.php` under
    `config/env/dev/`. For now, we''ll stick with a basic SQLite database:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `config/env/dev/` 下的 `db.php` 中创建我们的 `dev` 数据库配置文件。目前，我们将坚持使用基本的 SQLite
    数据库：
- en: '[PRE23]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we''ll create our environment configuration file in `env.php` under `config/env/dev`.
    If you recall from earlier in the chapter, this is where our `debug` flag was
    stored, so this file will look as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `config/env/dev` 下的 `env.php` 中创建我们的环境配置文件。如果您还记得本章前面的内容，这就是我们存储 `debug`
    标志的地方，因此这个文件将如下所示：
- en: '[PRE24]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we''ll create our `params.php` file under `config/env/dev/`. As of
    now, this file will simply return an empty array:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将在 `config/env/dev/` 下创建我们的 `params.php` 文件。到目前为止，这个文件将简单地返回一个空数组：
- en: '[PRE25]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, for simplicity, let''s copy over this configuration to our other environments.
    From the command line, we can do that as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了简单起见，让我们将此配置复制到我们的其他环境中。从命令行，我们可以这样做：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Setting up our application environment
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置我们的应用程序环境
- en: Now that we've told Yii what files and configurations it needs to use for each
    environment, we need to tell it what environment to use. To do this, we'll set
    custom variables in our web server configuration that will pass this option to
    Yii.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经告诉 Yii 它需要使用哪些文件和配置来为每个环境，我们需要告诉它使用哪个环境。为此，我们将在我们的 Web 服务器配置中设置自定义变量，这将把这个选项传递给
    Yii。
- en: Setting the web environment for NGINX
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 NGINX 的网络环境
- en: 'With our console application properly configured, we now need to configure
    our web server to pass the `APPLICATION_ENV` variable to our application. In a
    typical NGINX configuration, we have a location block that looks as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的控制台应用程序正确配置后，我们现在需要配置我们的 Web 服务器以将 `APPLICATION_ENV` 变量传递给我们的应用程序。在典型的 NGINX
    配置中，我们有一个如下所示的位置块：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To pass the `APPLICATION_ENV` variable to our application, all we need to do
    is define a new `fastcgi_param` as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `APPLICATION_ENV` 变量传递给我们的应用程序，我们只需定义一个新的 `fastcgi_param`，如下所示：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: After making this change, simply restart NGINX.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行此更改后，只需重新启动 NGINX。
- en: Setting the web environment for Apache
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Apache 的网络环境
- en: 'We can also easily configure Apache to pass the `APPLICATION_ENV` variable
    to our application. With Apache, we typically have a VirtualHost block that looks
    as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以轻松地配置 Apache 将 `APPLICATION_ENV` 变量传递给我们的应用程序。使用 Apache，我们通常有一个如下所示的 VirtualHost
    块：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To pass the `APPLICATION_ENV` variable to our application, all we need to do
    is use the `SetEnv` command as follows, which can be placed anywhere in our VirtualHost
    block:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `APPLICATION_ENV` 变量传递给我们的应用程序，我们只需使用如下所示的 `SetEnv` 命令，这个命令可以放置在我们的 VirtualHost
    块的任何位置：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: After making this change, simply restart Apache and navigate to your application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行此更改后，只需重新启动 Apache 并导航到您的应用程序。
- en: At the most basic level, our application isn't doing anything different from
    what it was when we first ran the composer `create-project` command. Despite not
    doing anything different, our application is now significantly more powerful and
    flexible than it was before our changes. Later on in the book, we'll take a look
    at how these changes in particular can make automated deployments of our application
    a seamless and simple process.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的层面上，我们的应用程序与我们第一次运行 composer `create-project` 命令时并没有做任何不同的事情。尽管没有做任何不同的事情，但我们的应用程序现在比之前的变化要强大得多，也更加灵活。在本书的后面部分，我们将探讨这些特定的变化如何使我们的应用程序的自动化部署变得无缝且简单。
- en: Components and objects
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件和对象
- en: 'There are two base classes that almost everything in Yii2 extends from: the
    `Component` class and the `Object` class.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2中几乎所有内容都扩展自两个基类：`Component` 类和 `Object` 类。
- en: Components
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件
- en: 'In Yii2, the `Component` class has replaced the `CComponent` class from Yii1\.
    In Yii1, components act as service locators that host a specific set of application
    components that provide different services for the processing of requests. Each
    component in Yii2 can be accessed using the following syntax:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 中，`Component` 类取代了 Yii1 中的 `CComponent` 类。在 Yii1 中，组件作为服务定位器，托管一组特定的应用程序组件，为请求处理提供不同的服务。在
    Yii2 中，每个组件都可以使用以下语法进行访问：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'For example, the database component can be accessed using this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以使用以下方式访问数据库组件：
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The cache component can be accessed using this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下方式访问缓存组件：
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Yii2 automatically registers each component at runtime via the application configuration
    that we mentioned in the previous section by name.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 通过我们之前提到的应用程序配置自动在运行时按名称注册每个组件。
- en: 'To improve performance in Yii2 applications, components are lazy-loaded or
    only instantiated the first time they are accessed. This means that if the cache
    component is never used in your application code, the cache component will never
    be loaded. At times, however, this can be nonideal, so to force load a component,
    you can bootstrap it by adding it to the bootstrap configuration option in either
    `config/web.php` or `config/console.php`. For instance, if we want to bootstrap
    the log component, we can do that as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高 Yii2 应用程序的性能，组件是延迟加载的，或者只有在第一次访问时才实例化。这意味着如果缓存组件在你的应用程序代码中从未使用过，缓存组件将永远不会被加载。然而，有时这并不理想，因此为了强制加载一个组件，你可以通过将其添加到配置文件中的
    `bootstrap` 配置选项来引导它。例如，如果我们想引导日志组件，我们可以这样做：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `bootstrap` option behaves in a manner similar to the preload option in
    Yii1—any component that you want or need to be instantiated on bootstrap will
    be loaded if it is in the `bootstrap` section of your configuration file.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`bootstrap` 选项的行为类似于 Yii1 中的预加载选项——任何你想要或需要在引导时实例化的组件，如果它在配置文件的 `bootstrap`
    部分中，将会被加载。'
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on service locators and components, ensure that you read
    the *Definitive Guide to Yii* guide located at [http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html](http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html)
    and [http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html](http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 关于服务定位器和组件的更多信息，请确保阅读位于 [http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html](http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html)
    和 [http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html](http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html)
    的 *Definitive Guide to Yii* 指南。
- en: Objects
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象
- en: In Yii2, almost every class that doesn't extend from the `Component` class extends
    from the `Object` class. The `Object` class is the base class that implements
    the property feature. In Yii2, the property feature allows you to access a lot
    of information about an object, such as the `__get` and `__set` magic methods,
    as well as other utility functions, such as `hasProperty()`, `canGetProperty()`,
    and `canSetProperty()`. Combined, this makes objects in Yii2 extremely powerful.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 中，几乎所有不扩展自 `Component` 类的类都扩展自 `Object` 类。`Object` 类是实现了属性特征的基类。在 Yii2
    中，属性特征允许你访问有关对象的大量信息，例如 `__get` 和 `__set` 魔法方法，以及其他实用函数，如 `hasProperty()`、`canGetProperty()`
    和 `canSetProperty()`。结合这些功能，使得 Yii2 中的对象非常强大。
- en: Tip
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `object` class is extremely powerful, and many classes in Yii extend from
    it. Despite this, using the magic methods `__get` and `__set` yourself is not
    considered best practice as it is slower than a native PHP method and doesn't
    integrate well with your IDE's autocomplete tool and documentation tools.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`object` 类非常强大，许多 Yii 类都从它扩展。尽管如此，自己使用魔法方法 `__get` 和 `__set` 并不是最佳实践，因为它比原生
    PHP 方法慢，并且与你的 IDE 自动完成工具和文档工具的集成不佳。'
- en: Path aliases
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路径别名
- en: In Yii2, path aliases are used to represent file paths or URL paths so that
    we don't hardcode paths or URLs directly into our application. In Yii2, aliases
    always start with the `@` symbol so that Yii knows how to differentiate it from
    a file path or URL.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 中，路径别名用于表示文件路径或 URL 路径，这样我们就不需要在我们的应用程序中直接硬编码路径或 URL。在 Yii2 中，别名始终以 `@`
    符号开头，这样 Yii 就知道如何将其与文件路径或 URL 区分开来。
- en: 'Aliases can be defined in several ways. The most basic way to define a new
    alias is to call `\Yii::setAlias()`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 别名可以通过多种方式定义。定义新别名的最基本方法是调用 `\Yii::setAlias()`：
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Aliases can also be defined in the application configuration file by setting
    the alias option as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过在应用程序配置文件中设置别名选项来定义别名，如下所示：
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Also, aliases can be easily retrieved using `\Yii::getAlias()`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以使用 `\Yii::getAlias()` 轻松检索别名：
- en: '[PRE37]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Several places in Yii are alias-aware and will accept aliases as inputs. For
    example, `yii\caching\FileCache` accepts a file alias as an alias for the `$cachePath`
    parameter:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 中的几个地方是别名感知的，并且会接受别名作为输入。例如，`yii\caching\FileCache` 接受文件别名作为 `$cachePath`
    参数的别名：
- en: '[PRE38]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on path aliases, check out the Yii documentation at [http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html](http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 关于路径别名的更多信息，请查看 Yii 文档，网址为 [http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html](http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html)。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went over how to create new Yii2 applications via composer.
    We also went over the basic configuration files that come with Yii2 as well as
    how to configure our web application to load environment-specific configuration
    files. Finally, we also covered components, objects, and path aliases, which are
    fundamental to gaining mastery over Yii.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何通过 composer 创建新的 Yii2 应用程序。我们还介绍了 Yii2 伴随的基本配置文件，以及如何配置我们的 Web 应用程序以加载特定环境的配置文件。最后，我们还涵盖了组件、对象和路径别名，这些都是掌握
    Yii 的基础。
- en: In the next chapter, we'll cover everything you need to know in order to become
    a master of console commands and applications.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖你需要知道的一切，以便成为控制台命令和应用程序的大师。
