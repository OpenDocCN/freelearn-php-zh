- en: Chapter 6. Asset Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 资产管理
- en: Modern web applications are made up of many different components. Second only
    to functionality, the presentation of our application might be considered the
    most important aspect of our application. Presentation of our user interface and
    the corresponding user experience is vital to building excellent web applications.
    In web applications, the presentation and experience is usually defined by **Cascading
    Style Sheets** (**CSS**), and JavaScript files. With raw HTML, we can include
    any necessary scripts and styles we need to, however often we need to handle our
    assets in a programmatic way (such as when using modules, components, or widgets).
    To help manage our assets, we can use a combination of third-party tools and Yii2's
    built-in asset manager. In this chapter, we'll cover how to use Yii2's asset management
    tools, as well as cover several third-party tools we can use to simplify management
    of our asset files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web应用程序由许多不同的组件组成。除了功能之外，我们应用程序的展示可能被认为是其最重要的方面。用户界面的展示和相应的用户体验对于构建优秀的Web应用程序至关重要。在Web应用程序中，展示和体验通常由**层叠样式表**（**CSS**）和JavaScript文件定义。使用原始HTML，我们可以包含所需的任何脚本和样式，但通常我们需要以编程方式处理我们的资产（例如，当使用模块、组件或小部件时）。为了帮助管理我们的资产，我们可以使用第三方工具和Yii2内置的资产管理器的组合。在本章中，我们将介绍如何使用Yii2的资产管理工具，以及介绍我们可以使用的几个第三方工具，以简化资产文件的管理。
- en: Asset bundles
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产包
- en: Assets in Yii2 are managed through an asset bundle. An asset bundle in Yii2
    is simply a class that declares all the assets that we want to use in our application,
    and resides within the `assets/` directory of our application, usually within
    the `AppAsset.php` file that declares an `AppAsset` class that extends `yii\web\AssetBundle`.
    Since our default application comes within a pre-defined `AppAsset` class, let's
    take a look at what is already defined in that file.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2中通过资产包管理资源。在Yii2中，资产包简单来说是一个声明我们希望在应用程序中使用的所有资源的类，它位于我们应用程序的`assets/`目录中，通常位于声明`AppAsset`类的`AppAsset.php`文件中，该类扩展了`yii\web\AssetBundle`。由于我们的默认应用程序包含一个预定义的`AppAsset`类，让我们看看该文件中已经定义了什么。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Our example asset bundle file declares several public properties. The first
    properties are the base path and base URL for our application which define where
    our assets should be loaded from. The second properties are an array of CSS and
    JavaScript files which define which assets should be registered with our asset
    bundle. Finally our asset bundle defines which asset bundles our current asset
    bundle depends upon. The details of the most common properties are outlined as
    follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例资产包文件声明了几个公共属性。第一个属性是应用程序的基路径和基URL，它们定义了我们的资产应该从哪里加载。第二个属性是CSS和JavaScript文件的数组，它们定义了应该与我们的资产包注册哪些资产。最后，我们的资产包定义了当前资产包依赖于哪些资产包。以下是最常见属性的详细说明：
- en: '| Property | Explanation |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 说明 |'
- en: '| --- | --- |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `basePath` | The string or path alias to the public directory of our web
    server contains the asset files. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `basePath` | 包含资产文件的Web服务器公共目录的字符串或路径别名。 |'
- en: '| `baseUrl` | The base URL for the relative assets listed in the JS or CSS
    property. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `baseUrl` | JS或CSS属性中列出的相对资源的基URL。 |'
- en: '| `css` | An array of CSS files to include in the asset bundle. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `css` | 要包含在资产包中的CSS文件数组。 |'
- en: '| `cssOptions` | An array of options and conditionals that will be rendered
    with the generated `<link>` tag. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `cssOptions` | 将与生成的`<link>`标签一起渲染的选项和条件数组。 |'
- en: '| `depends` | A array of asset bundles that this asset bundle depends upon.
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `depends` | 依赖于此资产包的资产包数组。 |'
- en: '| `js` | An array of JavaScript files to be included in the asset bundle. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `js` | 要包含在资产包中的JavaScript文件数组。 |'
- en: '| `jsOptions` | An array of options and conditionals that will be rendered
    with the generated `<script>` tag. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `jsOptions` | 将与生成的`<script>`标签一起渲染的选项和条件数组。 |'
- en: '| `publishOptions` | Options to be passed to the `publish()` method of `yii\web\AssetManager`.
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `publishOptions` | 要传递给`yii\web\AssetManager`的`publish()`方法的选项。 |'
- en: '| `sourcePath` | Defines the directory that contains the asset files we want
    to include in our bundle. Setting this property will override `basePath` and `baseUrl`.
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `sourcePath` | 定义包含我们想要包含在包中的资产文件的目录。设置此属性将覆盖`basePath`和`baseUrl`。 |'
- en: Using asset bundles
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用资产包
- en: After defining our asset bundles, we then need to include them in our layout
    files. We can do that by adding the following to the beginning of our main layout
    file (in our case this is `views/layouts/main.php`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了我们的资源包之后，我们还需要将它们包含到我们的布局文件中。我们可以通过在主布局文件的开头添加以下内容来实现（在我们的例子中这是`views/layouts/main.php`）。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On page load, our asset bundle will register all of its dependent asset bundles,
    and publish any and all non-web accessible files to a web-accessible directory.
    Then during the view rendering stage, it will generate all the necessary HTML
    markup to be included in our view.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载时，我们的资源包将注册所有依赖的资源包，并将所有非Web可访问的文件发布到Web可访问的目录。然后在视图渲染阶段，它将生成所有必要的HTML标记以包含在我们的视图中。
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In the previous instance, `$this` is an instance of `yii\web\View`. When working
    in widgets or components, you can retrieve the view object within a component
    or widget by using `$this->view`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`$this`是`yii\web\View`的一个实例。当在组件或小部件中工作时，您可以通过使用`$this->view`在组件或小部件中检索视图对象。
- en: Configuration
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: Internally, Yii2 manages asset bundles and their configuration through the `assetManager`
    application component, which is implemented by the `yii\web\AssetManager` class.
    By configuring the `$bundles` property of this component, we can customize how
    our asset bundles behave. Take for instance the `yii\web\JQueryAsset` bundle;
    by default, it provides a version of jQuery from **Bower** (a third-party asset
    dependency manager we'll cover later in the chapter) when our Yii2 project is
    installed. If we wanted this asset bundle to use a different version of jQuery,
    or wanted to improve performance by using a third-party CDN, we could override
    the jQuery asset bundle options as follows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，Yii2通过`assetManager`应用程序组件来管理资源包及其配置，该组件由`yii\web\AssetManager`类实现。通过配置此组件的`$bundles`属性，我们可以自定义资源包的行为。以`yii\web\JQueryAsset`资源包为例；默认情况下，它提供从**Bower**（我们将在本章后面讨论的第三方资源依赖管理器）提供的jQuery版本，当我们的Yii2项目安装时。如果我们想使用这个资源包的不同版本的jQuery，或者想通过使用第三方CDN来提高性能，我们可以像以下这样覆盖jQuery资源包选项。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this instance, we're redefining the JavaScript files for the asset bundle
    by setting the `js` parameter to a CloudFlare CDN, and telling our `JQueryAsset`
    bundle to not push the asset as it is being rendered from a third-party CDN.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们通过将`js`参数设置为CloudFlare CDN，并告诉我们的`JQueryAsset`资源包不要将资源作为从第三方CDN渲染的内容来重新定义资源包的JavaScript文件。
- en: Alternatively, we can also conditionally redefine which files are rendering,
    say in the instance where we have a minified version of a script we want to display
    in production, but a non-minified version we'd like to use in other environments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们也可以有条件地重新定义正在渲染的文件，比如在我们有一个想要在生产环境中显示的脚本压缩版本，但在其他环境中我们希望使用非压缩版本的情况下。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As a reminder, our `APPLICATION_ENV` constant is dependent upon our multi-environment
    setup we established in [Chapter 1](part0014_split_000.html#DB7S2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 1. Composer, Configuration, Classes, and Path Aliases"), *Composer, Configuration,
    Classes, and Path Aliases*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，我们的`APPLICATION_ENV`常量依赖于我们在[第1章](part0014_split_000.html#DB7S2-ad3e09b384df46aea690d9c8897d5fe7
    "第1章。Composer, 配置, 类和路径别名")中建立的多环境设置，*Composer, 配置, 类和路径别名*。
- en: Additionally, we can disable specific asset bundles by setting that bundle to
    `false`, as shown in the following example.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以通过将特定的资源包设置为`false`来禁用特定的资源包，如下面的示例所示。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Moreover, we can completely disable all included asset bundles within our application
    by setting the `bundles` property to `false`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以通过将`bundles`属性设置为`false`来完全禁用应用程序中包含的所有资源包。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Asset mapping
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源映射
- en: In some instances, multiple asset bundles may define different versions of the
    same script. For example, one asset bundle may include jQuery version 2.1.3, and
    another may define 2.1.4\. To resolve these conflicts, we can set the `assetMap`
    property of our configuration file to resolve any named instances of an asset
    file to a single dependency that will be included in our view.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，多个资源包可能定义了同一脚本的不同版本。例如，一个资源包可能包含jQuery版本2.1.3，另一个可能定义2.1.4。为了解决这些冲突，我们可以将配置文件的`assetMap`属性设置为将任何命名的资源文件实例解析为单个依赖项，该依赖项将被包含在我们的视图中。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this instance, any asset bundle that has an instance of `jquery.js` and `jquery.min.js`
    defined within the `js` section of the asset bundle will have that asset re-mapped
    to our CloudFlare CDN asset.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，任何在资产包的`js`部分定义了`jquery.js`和`jquery.min.js`实例的资产包，都将将该资产重新映射到我们的CloudFlare
    CDN资产。
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `assetMap` property matches on the last part of an asset file within bundles
    as a key-value pair.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`assetMap`属性将资产文件在包中的最后一部分作为键值对进行匹配。'
- en: Asset types and locations
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产类型和位置
- en: Depending upon their location, Yii2 will classify an asset in one of three different
    ways. Assets will be classified as a source asset, a published asset, or an external
    asset. Source assets are asset files that are mixed in within our source code
    and are not in a web-accessible directory. Such assets are often included with
    modules, widgets, extensions, or components. Any assets that Yii2 defines as source
    assets will need to be published by Yii2 to a web-accessible directory. Published
    assets are source assets that have been published to a web-accessible directory.
    And finally, external assets are assets that are located in a web-accessible location,
    such as on our current server or on another server or CDN. Unlike published assets,
    Yii2 will not publish these assets to our assets directory, and will instead reference
    them directly as an external resource.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 根据它们的位置，Yii2将资产分为三种不同的方式。资产将被分类为源资产、发布资产或外部资产。源资产是混合在我们源代码中的资产文件，并且不在可访问的Web目录中。这类资产通常包含在模块、小部件、扩展或组件中。任何Yii2定义为源资产的资产都需要由Yii2发布到可访问的Web目录。发布资产是已发布到可访问的Web目录的源资产。最后，外部资产是位于可访问位置上的资产，例如在我们的当前服务器上、另一个服务器或CDN上。与发布资产不同，Yii2不会将这些资产发布到我们的资产目录，而是直接将它们作为外部资源引用。
- en: When working with asset bundles, if the `sourcePath` property is specified,
    Yii2 will consider any assets listed with a relative path as a source asset, and
    will attempt to publish those assets during runtime. If the `sourcePath` property
    is not specified, Yii2 will assume the listed assets are in a web-accessible directory
    and are published. In this case, it is necessary to specify either the `basePath`
    property, or the `baseUrl` property to tell Yii2 where the assets are located.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当与资产包一起工作时，如果指定了`sourcePath`属性，Yii2会将任何带有相对路径列出的资产视为源资产，并在运行时尝试发布这些资产。如果没有指定`sourcePath`属性，Yii2将假设列出的资产位于一个可访问的Web目录中，并且已发布。在这种情况下，有必要指定`basePath`属性或`baseUrl`属性，以告诉Yii2资产所在的位置。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Do not use the `@webroot/assets` alias for the `sourcePath` property, as this
    directory is used by asset manager to save the asset files published from their
    source location. Any data stored in this directory could be removed at any time
    by Yii2.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用`@webroot/assets`别名作为`sourcePath`属性，因为这个目录由资产管理器用于保存从其源位置发布的资产文件。存储在这个目录中的任何数据都可能随时被Yii2删除。
- en: Asset options
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产选项
- en: Like the `yii\web\View` methods `registerJsFile()` and `registerCssFile()`,
    asset bundles can be rendered with a given set of options by setting the respective
    `$jsOptions` and `$cssOptions` properties of our asset bundle.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与`yii\web\View`方法`registerJsFile()`和`registerCssFile()`一样，我们可以通过设置资产包的相应`$jsOptions`和`$cssOptions`属性，以一组给定的选项来渲染资产包。
- en: For example, we can have our asset bundle include our listed JavaScript files
    at the end of the `<body>` tag within our view.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在视图中的`<body>`标签末尾包含我们的列出的JavaScript文件，使我们的资产包包含在内。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `yii\web\View` class also provides position methods for the beginning of
    the body (`yii\web\View::POS_BEGIN`), the end of the body (`yii\web\View::POS_END`),
    within a `jQuery(window).load()` event (`yii\web\View::POS_LOAD`), and within
    a `jQuery(window).ready()` event (`yii\web\View::POS_READY`).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`yii\web\View`类还提供了定位方法，用于身体的开头（`yii\web\View::POS_BEGIN`），身体的末尾（`yii\web\View::POS_END`），在`jQuery(window).load()`事件中（`yii\web\View::POS_LOAD`），以及在`jQuery(window).ready()`事件中（`yii\web\View::POS_READY`）。'
- en: 'With CSS, we can also define `<noscript>` blocks as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，我们还可以定义如下`<noscript>`块：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Additionally, we can wrap our CSS blocks in conditionals:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以在条件语句中包裹我们的CSS块：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will result in the following HTML being rendered:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下HTML被渲染：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Setting the `$jsOptions` or `$cssOptions` property will apply the specified
    options to all CSS and JavaScript files defined in the asset bundle. To apply
    different conditionals to each asset individually, you'll need to create a separate
    asset bundle defining those conditionals, or inline the assets within the view
    using `theregisterCssFile()` or `registerJsFile()` methods.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 `$jsOptions` 或 `$cssOptions` 属性将把指定的选项应用到资产包中定义的所有 CSS 和 JavaScript 文件上。为了对每个资产应用不同的条件，您需要创建一个包含这些条件的单独资产包，或者使用
    `theregisterCssFile()` 或 `registerJsFile()` 方法在视图中内联资产。
- en: Asset publication
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产发布
- en: As previously mentioned, if the assets referenced by an asset bundle are located
    in a directory that is not publicly accessible from a web browser (or has the
    `sourcePath` property set), its assets will be copied to `@webroot/assets` (which
    corresponds to the web path of `@web/assets`) as part of the automatic publication
    process the asset manager performs when the bundle is registered with the view.
    As previously mentioned, the publication path can be altered by setting the `baseUrl`
    and `basePath` properties of the asset bundle.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果资产包引用的资产位于一个从网络浏览器无法公开访问的目录中（或者设置了 `sourcePath` 属性），其资产将作为资产管理器在将包注册到视图时执行的自动发布过程的一部分被复制到
    `@webroot/assets`（对应于 `@web/assets` 的网络路径）。如前所述，可以通过设置资产包的 `baseUrl` 和 `basePath`
    属性来更改发布路径。
- en: As you may expect, the process of copying over files on a web request can be
    rather expensive, and can cause performance-related issues in production environments
    if allowed to continually run. To help alleviate this problem, Yii2 provides two
    alternatives.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所预期的那样，在 Web 请求上复制文件的过程可能相当昂贵，如果允许其持续运行，可能会在生产环境中引起与性能相关的问题。为了帮助减轻这个问题，Yii2
    提供了两种替代方案。
- en: 'Rather than copying over files, Yii''s asset manager can be configured to create
    a symbolic link between the origin asset files and the web-accessible directory
    by setting the `linkAssets` property of `assetManager` as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是复制文件，Yii 的资产管理器可以通过设置 `assetManager` 的 `linkAssets` 属性来配置在原始资产文件和可访问的网页目录之间创建一个符号链接，如下所示：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The publication process usually only occurs once. Once Yii2 has published our
    assets, it won't publish them again unless we remove our assets directory or tell
    Yii2 to republish our assets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 发布过程通常只发生一次。一旦 Yii2 发布了我们的资产，它就不会再次发布，除非我们删除我们的资产目录或告诉 Yii2 重新发布我们的资产。
- en: By default, Yii2 will run the publication process on every file listed in the
    `sourcePath` property, which means if you have a large directory then every file
    will be copied over regardless of whether it is actually used. To have Yii2's
    asset manager only copy over the files you need, you can modify the `publishOptions`
    property of the asset bundle.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Yii2 将在 `sourcePath` 属性中列出的每个文件上运行发布过程，这意味着如果您有一个大目录，那么无论文件是否实际使用，每个文件都会被复制。为了使
    Yii2 的资产管理器只复制您需要的文件，您可以修改资产包的 `publishOptions` 属性。
- en: Take for instance if we're using Yahoo's popular CSS library, `purecss`. To
    build `purecss` from source, we need to run Bower, NPM, and Grunt, which will
    leave behind build files we shouldn't publish to our web directory.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们使用雅虎流行的 CSS 库 `purecss` 为例。要从源代码构建 `purecss`，我们需要运行 Bower、NPM 和 Grunt，这将留下我们不希望发布到我们的网页目录中的构建文件。
- en: By setting the `publishOptions` property as shown in the following example,
    we can ensure only the build files are published, which can drastically improve
    performance during initial publication.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置如以下示例所示的 `publishOptions` 属性，我们可以确保只发布构建文件，这可以在初始发布期间显著提高性能。
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Client cache management with asset bundles
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产包的客户端缓存管理
- en: When running applications in production, we often set long-lived cache expiration
    dates on our JavaScript and CSS assets to improve performance. When pushing out
    new code, often our assets will change, but their file locations will not, which
    will prevent clients from receiving our updated assets when we make changes. The
    simplest way to overcome this issue is to append a version or timestamp to the
    end of our assets so that browsers can cache a specific version of our assets,
    and be able to re-cache new assets as we push to them.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中运行应用程序时，我们通常会在我们的 JavaScript 和 CSS 资产上设置长期缓存过期日期，以提高性能。当推送新代码时，我们的资产通常会发生变化，但它们的文件位置不会变，这将在我们进行更改时阻止客户端接收我们的更新资产。克服这个问题的最简单方法是在我们的资产末尾附加一个版本号或时间戳，这样浏览器就可以缓存我们资产的特定版本，并且在我们推送新资产时能够重新缓存。
- en: 'With Yii2, we can configure our asset manager to automatically append the last
    modified timestamp to our assets by setting the `appendTimestamp` property of
    our `assetManager` as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Yii2，我们可以通过设置 `assetManager` 的 `appendTimestamp` 属性来配置资产管理器，使其自动将最后修改时间戳附加到我们的资产上，如下所示：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using preprocessor with asset bundles
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用资产包的预处理器
- en: 'To make asset development simpler and easy to manage, many developers have
    moved to extended syntax languages such as LESS and CoffeeScript, and rely on
    their corresponding tools to convert those assets into CSS and JavaScript files.
    Yii2 can help facilitate this process by enabling asset manager to take care of
    this build process for you. Using Yii2''s asset bundles, you can list LESS, SCSS,
    Stylus, CoffeeScript, and TypeScript files directly in asset bundles and Yii2
    will identify them and automatically run them through their corresponding preprocessor.
    Take for instance the following asset bundle:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使资产开发更加简单且易于管理，许多开发者已经转向使用扩展语法语言，如 LESS 和 CoffeeScript，并依赖它们相应的工具将这些资产转换为
    CSS 和 JavaScript 文件。Yii2 可以通过启用资产管理器来帮助简化此过程，使其为您处理构建过程。使用 Yii2 的资产包，您可以直接在资产包中列出
    LESS、SCSS、Stylus、CoffeeScript 和 TypeScript 文件，Yii2 将识别它们，并自动通过相应的预处理器运行它们。以下是一个资产包的示例：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When our asset bundle is registered with our view, Yii2 will automatically run
    the appropriate pre-processor tool to convert the assets to CSS and JavaScript
    to include in our views.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的资产包注册到我们的视图中时，Yii2 将自动运行适当的预处理器工具，将资产转换为 CSS 和 JavaScript 以包含在我们的视图中。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Yii2 is dependent upon the corresponding pre-processor software to be installed
    on your computer for this feature to work.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 依赖于您的计算机上安装的相应预处理器软件才能使此功能正常工作。
- en: When working with pre-processors it may be necessary to specify additional arguments
    to the pre-processor for your assets to be generated correctly. To set this in
    Yii2, you can set the `converter` property of our `assetManager` instance as follows.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当与预处理器一起工作时，可能需要为您的资产指定额外的参数，以确保它们能够正确生成。在 Yii2 中，您可以通过以下方式设置 `assetManager`
    实例的 `converter` 属性来实现这一点。
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: While convenient to use, it's generally not a good idea to let Yii2 build our
    asset files in production, as it introduces unnecessary software into production
    environments that may not match that in your development environment or have security
    vulnerabilities, and can seriously hinder application performance as Yii2 will
    need to build out the asset files on its initial run. When working in production,
    it's usually a better idea to build all of your asset files on a build server
    before pushing your application out to production. We'll cover how to build asset
    files with Grunt, NodeJS, and Bower later on in this chapter, and cover some basic
    deployment strategies in [Chapter 13](part0079_split_000.html#2BASE2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 13. Debugging and Deploying"), *Debugging and Deploying*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用起来很方便，但在生产环境中让 Yii2 构建我们的资产文件通常不是一个好主意，因为它会将不必要的软件引入生产环境，这些软件可能与您的开发环境不匹配或存在安全漏洞，并且可能会严重阻碍应用程序的性能，因为
    Yii2 需要在其首次运行时构建资产文件。在生产环境中工作，通常在将应用程序推送到生产之前，在构建服务器上构建所有资产文件是一个更好的选择。我们将在本章后面介绍如何使用
    Grunt、NodeJS 和 Bower 构建资产文件，并在第 13 章[调试和部署](part0079_split_000.html#2BASE2-ad3e09b384df46aea690d9c8897d5fe7
    "第 13 章。调试和部署")中介绍一些基本的部署策略。
- en: The asset command line tool
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产命令行工具
- en: With HTTP/1.1 applications, to save bandwidth and requests, it's often better
    to combine and compress multiple asset files together. Yii2 can help facilitate
    this process through the `asset` command, which can help you use Yii2, and some
    third-party Java tools to compress and combine your asset files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 HTTP/1.1 应用程序，为了节省带宽和请求，通常最好将多个资产文件合并并压缩在一起。Yii2 可以通过 `asset` 命令帮助简化此过程，该命令可以帮助您使用
    Yii2 以及一些第三方 Java 工具来压缩和合并您的资产文件。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Due to changes in the HTTP/2 protocol, it's often more beneficial to serve asset
    files individually rather than combining them. As more web servers such as Nginx
    and Apache start supporting the HTTP/2 protocol, you should run your own experiments
    to determine if combining assets or not is the best choice for your application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 HTTP/2 协议的变化，通常单独提供资产文件比合并它们更有益。随着更多像 Nginx 和 Apache 这样的网络服务器开始支持 HTTP/2
    协议，您应该进行自己的实验，以确定对于您的应用程序来说，合并资产文件是否是最佳选择。
- en: 'The `asset` command-line tool provides two options `asset/template`, which
    is used to generate an instruction file called `asset.php` for use by the second
    command `asset/compress`, which is used to compress files together. The first
    tool, `asset/template`, is invoked as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`asset`命令行工具提供了两个选项`asset/template`，该选项用于生成一个名为`asset.php`的指令文件，供第二个命令`asset/compress`使用，该命令用于压缩文件。第一个工具`asset/template`的调用方式如下：'
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After running this command, a file called `assets.php` will be generated in
    the `config` directory of our application, and by default will have the following
    output.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，将在我们应用程序的`config`目录中生成一个名为`assets.php`的文件，默认输出如下。
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To compress assets, Yii2 by default will try to use Closure Compiler ([https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/))
    and YUI Compressor ([https://github.com/yui/yuicompressor/](https://github.com/yui/yuicompressor/)).
    You will need to install both of these tools for the `asset` command to function
    as intended.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了压缩资产，Yii2默认会尝试使用Closure Compiler（[https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)）和YUI
    Compressor（[https://github.com/yui/yuicompressor/](https://github.com/yui/yuicompressor/)）。您需要安装这两个工具，以便`asset`命令按预期工作。
- en: This configuration file defines several different options. The first two options,
    `jsCompressor` and `cssCompressor`, define what commands should be run to compress
    both JavaScript and CSS files. By default, these tools will try to use Closure
    Compile and YUI Compressor; both can be configured as needed if you wish to use
    other tools.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置文件定义了几个不同的选项。前两个选项`jsCompressor`和`cssCompressor`定义了压缩JavaScript和CSS文件应运行的命令。默认情况下，这些工具将尝试使用Closure
    Compile和YUI Compressor；如果您希望使用其他工具，这两个工具都可以按需进行配置。
- en: The second option, `bundles`, defines the asset bundles that you wish to compress
    together. The third option, `assetManager`, defines some basic options that the
    asset manager component should use, such as the `basePath` and `baseUrl` for the
    compressed assets. Finally, the `targets` option defines the output asset bundles
    that will be generated. By default, Yii2 will create a target called `all`, and
    will generate compressed assets for all asset bundles listed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项`bundles`定义了您希望一起压缩的资产包。第三个选项`assetManager`定义了资产管理器组件应使用的一些基本选项，例如压缩资产的`basePath`和`baseUrl`。最后，`targets`选项定义了将生成的输出资产包。默认情况下，Yii2将创建一个名为`all`的目标，并为列出的所有资产包生成压缩资产。
- en: 'In many cases, we often have assets split among several different asset bundles,
    such as a shared, frontend, and backend tool. As the frontend assets don''t need
    to be included with our backend assets, we can define multiple targets, which
    will generate separate assets after compression, allowing us to include those
    assets specifically, thus saving bandwidth for our end user. An example is shown
    as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们通常会将资产分散在几个不同的资产包中，例如共享的、前端的和后端的工具。由于前端资产不需要与我们的后端资产一起包含，我们可以定义多个目标，压缩后生成单独的资产，这样我们就可以专门包含这些资产，从而为我们的最终用户节省带宽。以下是一个示例：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After writing our asset configuration file, we can then generate our compressed
    asset files by running the asset command, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写我们的资产配置文件后，我们可以通过运行资产命令来生成我们的压缩资产文件，如下所示：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The asset configuration file is provided as convenience should desire to keep
    everything in Yii2 as much as possible. While Closure Compiler and YUI Compressor
    are good tools, tools like Grunt and NodeJS can often provide a solution that
    is easier to work with and develop for, while eliminating much of the configuration
    you need to do in Yii2 to compile and compress assets. When working with assets,
    be sure to find a tool that works best with your development workflow, team, and
    build process.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 资产配置文件作为便利性提供，以便尽可能地将所有内容保持在Yii2中。虽然Closure Compiler和YUI Compressor是很好的工具，但像Grunt和NodeJS这样的工具通常可以提供更易于使用和开发的解决方案，同时消除在Yii2中编译和压缩资产所需的大部分配置。在处理资产时，务必找到最适合您的开发工作流程、团队和构建过程的工具。
- en: Third-party asset tools
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方资产工具
- en: 'When working with modern web applications, we often need to include many different
    types of asset from various sources. Including these assets directly in our application
    can cause several problems, namely:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理现代Web应用程序时，我们经常需要从各种来源包含许多不同类型的资产。直接将这些资产包含在我们的应用程序中可能会导致几个问题，具体如下：
- en: Licensing of third-party assets
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方资产的许可
- en: Management of versions and security
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本和安全管理
- en: Repository size
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库大小
- en: Build processes
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程
- en: Rather than including assets directly in our application, we can utilize third-party
    asset management tools such as NodeJS and Bower, which can alleviate all of the
    issues outlined previously.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是直接在我们的应用程序中包含资产，我们可以利用第三方资产管理系统，如 NodeJS 和 Bower，这可以缓解之前概述的所有问题。
- en: With Yii2, we can work directly with Node and Bower packages. For simple applications,
    we can include these packages directly in our `composer.json` file by including
    `bower-asset/PackageName` and `npm-asset/PackageName` within the `require` section.
    Yii2's post-scripts will automatically take care of including these assets within
    the `@bower` folder and the `@npm` folder, which we can then reference in our
    asset bundle. In a typical Yii2 instance, this will correspond to `vendor/bower`
    and `vendor/npm`, respectively.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Yii2，我们可以直接使用 Node 和 Bower 包。对于简单的应用程序，我们可以在 `composer.json` 文件中直接包含这些包，通过在
    `require` 部分包含 `bower-asset/PackageName` 和 `npm-asset/PackageName`。Yii2 的后置脚本将自动处理将这些资产包含在
    `@bower` 文件夹和 `@npm` 文件夹中，然后我们可以在我们的资产包中引用它们。在一个典型的 Yii2 实例中，这分别对应于 `vendor/bower`
    和 `vendor/npm`。
- en: 'With more complicated projects, it may make more sense to utilize those third-party
    tools directly in our application, and included the requisite CSS and JavaScript
    files later. In this next section, we''ll take a look at three tools: NodeJS,
    Bower, and Grunt, and explore how we can use them in conjunction with Yii2.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的项目，直接在我们的应用程序中利用这些第三方工具可能更有意义，稍后包含必要的 CSS 和 JavaScript 文件。在下一节中，我们将探讨三个工具：NodeJS、Bower
    和 Grunt，并探讨我们如何与 Yii2 结合使用它们。
- en: NodeJS
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NodeJS
- en: The first and most important tool we'll often use to manage our assets is called
    **NodeJS**, and is a tool that we can use to install the other two packages, Bower
    and Grunt. To get started with node, we'll first need to download the software
    from [https://nodejs.org/download/](https://nodejs.org/download/) and install
    it on our system.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常用来管理我们的资产的第一和最重要的工具被称为 **NodeJS**，这是一个我们可以用来安装其他两个包（Bower 和 Grunt）的工具。要开始使用
    NodeJS，我们首先需要从 [https://nodejs.org/download/](https://nodejs.org/download/) 下载软件并在我们的系统上安装它。
- en: 'For our purposes, NodeJS will provide us with the tools and packages that we
    need to automatically download and build our asset files. To get started with
    NodeJS, we first need to include a `package.json` file within our application.
    This file will define all the dependencies we want to use. A typical NodeJS file
    for asset management will look as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，NodeJS 将为我们提供自动下载和构建我们的资产文件所需的工具和包。要开始使用 NodeJS，我们首先需要在我们的应用程序中包含一个
    `package.json` 文件。此文件将定义我们想要使用的所有依赖项。一个典型的用于资产管理 NodeJS 文件将如下所示：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There are two different ways of working with other packages such as Bower and
    Grunt within NodeJS. The first way is to include them as dependencies within our
    `package.json` file. This is advantageous as we can version lock our build tools
    to our application. Alternatively, we can globally install these tools so that
    we can run them directly through the command line. When working with many developers
    and teams, it's generally better to use the tools as defined in the `package.json`
    file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NodeJS 中与其他包（如 Bower 和 Grunt）一起工作的有两种不同的方式。第一种方式是在我们的 `package.json` 文件中将它们作为依赖项包含。这样做的好处是我们可以将构建工具的版本锁定到我们的应用程序中。或者，我们可以全局安装这些工具，这样我们就可以直接通过命令行运行它们。当与许多开发者和团队一起工作时，通常最好使用
    `package.json` 文件中定义的工具。
- en: In our `package.json` file, we defined a few details about our repository such
    as the name, description, and repository details, as well as several of the tools
    we want to use, such as Bower, Grunt, and a few Grunt tools to concatenate and
    minify our CSS and JavaScript files.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `package.json` 文件中，我们定义了一些关于我们的存储库的详细信息，例如名称、描述和存储库详细信息，以及我们想要使用的几个工具，例如
    Bower、Grunt 和一些用于连接和压缩 CSS 和 JavaScript 文件的 Grunt 工具。
- en: 'With our NodeJS configuration file setup; we can now use NodeJS to add these
    tools to our repository by running the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 NodeJS 配置文件设置完成后；我们现在可以使用 NodeJS 通过运行以下命令将这些工具添加到我们的存储库中：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will install our build tools to the `node_modules` directory.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装我们的构建工具到 `node_modules` 目录。
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since this directory contains build tools, we should exclude it from our repository
    by adding it to our `.gitignore` file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此目录包含构建工具，我们应该通过将其添加到我们的 `.gitignore` 文件中来排除它。
- en: Bower
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bower
- en: 'To manage CSS and JavaScript libraries, we can utilize an asset dependency
    management tool called Bower. To get started with Bower, we first need to create
    a `bower.json` file in the root directory of our application, and populate it
    with the libraries we want to include. As an example, let''s include the popular
    CSS library PureCSS in our application. We can do that by writing out a basic
    `bower.json` file as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理 CSS 和 JavaScript 库，我们可以利用一个名为 Bower 的资产依赖管理工具。要开始使用 Bower，我们首先需要在应用程序的根目录中创建一个
    `bower.json` 文件，并填充我们想要包含的库。例如，让我们在我们的应用程序中包含流行的 CSS 库 PureCSS。我们可以通过编写以下基本的 `bower.json`
    文件来实现这一点：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A full list of package names can be discovered at [http://bower.io/](http://bower.io/).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称的完整列表可以在 [http://bower.io/](http://bower.io/) 查找。
- en: 'To install these packages, we can then run Bower from our `node_modules` directory
    as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这些包，然后我们可以从我们的 `node_modules` 目录运行 Bower，如下所示：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will add our libraries and CSS to the `vendor/bower` directory in the root
    of our application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把我们的库和 CSS 添加到应用程序根目录下的 `vendor/bower` 目录。
- en: Tip
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: By default, Bower will install itself to the `bower_components` directory. Since,
    however, Yii2 has already defined the installation directory, it is re-mapped
    to `vendor/bower`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Bower 会将其自身安装到 `bower_components` 目录。然而，由于 Yii2 已经定义了安装目录，它被重新映射到 `vendor/bower`。
- en: Grunt
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Grunt
- en: Since we already know how to use YUI Compressor and Closure Compiler and the
    Yii2 `asset` command, one option we have at this point is to direct our asset
    bundle and asset configuration file to the `node_modules` and `bower_components`
    directory. While this eliminates many of the issues listed previously, we can
    alternatively use another third-party tool called Grunt to take care of compressing
    and concatenating our files together.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经知道如何使用 YUI Compressor 和 Closure Compiler 以及 Yii2 的 `asset` 命令，此时我们有一个选项是将我们的资产包和资产配置文件直接指向
    `node_modules` 和 `bower_components` 目录。虽然这消除了之前列出的许多问题，但我们还可以使用另一个名为 Grunt 的第三方工具来处理压缩和合并我们的文件。
- en: In short, Grunt is JavaScript task-runner, designed to help automate much of
    the trivial tasks that need to be repeated, such as building asset files. The
    main benefit of using a tool like Grunt is that you can automate your workflow
    both for development and for your build server.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Grunt 是一个 JavaScript 任务运行器，旨在帮助自动化许多需要重复执行的任务，例如构建资产文件。使用像 Grunt 这样的工具的主要好处是，您可以自动化开发和构建服务器的整个工作流程。
- en: To get started with Grunt, we first need to create a file called `Gruntfile.js`,
    which will contain all the build instructions for our app.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Grunt，我们首先需要创建一个名为 `Gruntfile.js` 的文件，它将包含我们应用程序的所有构建指令。
- en: The first step in creating our `Gruntfile.js` file is to declare that we're
    using Grunt, and to specify the Grunt modules we want to use (the names of which
    we specified in our `package.json` file).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们的 `Gruntfile.js` 文件的第一个步骤是声明我们正在使用 Grunt，并指定我们想要使用的 Grunt 模块（这些名称我们在 `package.json`
    文件中指定）。
- en: '[PRE24]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Within this section, we'll then want to declare our default task by specifying
    which tasks we want to run when we run Grunt. In our case, we want to concatenate
    our JavaScript and CSS files, then minify both our JavaScript and CSS files.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过指定在运行 Grunt 时想要运行的任务来声明我们的默认任务。在我们的例子中，我们想要连接我们的 JavaScript 和 CSS
    文件，然后最小化我们的 JavaScript 和 CSS 文件。
- en: '[PRE25]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We then begin configuring our Grunt tasks by telling Grunt where it can find
    our `package.json` file, and setting up some basic path aliases.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们开始配置我们的 Grunt 任务，告诉 Grunt 它可以在哪里找到我们的 `package.json` 文件，并设置一些基本的路径别名。
- en: '[PRE26]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Within this section we then define our task to concatenate our JavaScript and
    CSS files.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本节中，我们定义我们的任务以连接我们的 JavaScript 和 CSS 文件。
- en: '[PRE27]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Our task to minify our CSS assets after concatenating them together.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的任务是在连接我们的 CSS 资产后最小化它们。
- en: '[PRE28]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: And finally, the task to compress our JavaScript files.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，压缩我们的 JavaScript 文件的任务。
- en: '[PRE29]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'With our `Gruntfile.js` file now configured, we can then build our asset files
    by running Grunt as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `Gruntfile.js` 文件配置完成后，我们可以通过以下方式运行 Grunt 来构建我们的资产文件：
- en: '[PRE30]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If everything ran well, we should see the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到以下输出：
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As shown in the output of Grunt, we generated four files for us, a compressed
    and uncompressed JavaScript and CSS file containing all the assets we want to
    include in our website. From this point, we can then conditionally include our
    asset files in our asset bundle, and toggle off our `APPLICATION_ENV` or `YII_ENV_<ENV>`
    environment so that we use the minified versions in production, and the non-minified
    versions in our non-production environment.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如Grunt输出所示，我们为我们生成了四个文件，包括压缩和解压缩的JavaScript和CSS文件，这些文件包含了我们想要包含在我们网站中的所有资源。从这一点出发，我们就可以有条件地将我们的资源文件包含在我们的资源包中，并切换掉我们的`APPLICATION_ENV`或`YII_ENV_<ENV>`环境，以便在生产环境中使用压缩版本，在非生产环境中使用非压缩版本。
- en: Tip
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: NodeJS, Bower, and Grunt each provide powerful tools to accomplish certain tasks
    automatically, and work well with Yii2\. Before deciding on a specific technology
    to use however, be sure to consult your team to determine what works best for
    them.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: NodeJS、Bower和Grunt各自提供了强大的工具来自动完成某些任务，并且与Yii2配合良好。然而，在决定使用特定技术之前，务必咨询您的团队，以确定对他们来说什么是最有效的。
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we covered how assets work and are managed in Yii2\. We explored
    the basics of asset bundle files and their integration with Yii2''s asset manager.
    We also explored how we can use the `asset` command to build configuration files
    and to combine and compress our assets. Finally, we explored three third-party
    tools: NodeJS, Bower, and Grunt, and illustrated how we can use those tools in
    conjunction with our asset bundle to automate the building of our asset files.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了资源在Yii2中的工作方式和管理工作。我们探讨了资源包文件的基本知识及其与Yii2资源管理器的集成。我们还探讨了如何使用`asset`命令来构建配置文件，以及如何组合和压缩我们的资源。最后，我们探讨了三个第三方工具：NodeJS、Bower和Grunt，并说明了如何结合我们的资源包使用这些工具来自动化我们的资源文件构建。
- en: Having explored the front-end aspect of Yii, in the next chapter, we're going
    to return to the backend to learn how we can handle user authentication and authorization
    within our application, as well as cover how we can set up access control filters
    and rule-based authentication within our app.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了Yii的前端方面之后，在下一章中，我们将回到后端，学习我们如何在应用程序中处理用户认证和授权，以及如何在我们的应用程序中设置访问控制过滤器以及基于规则的认证。
