- en: Chapter 5. Using Collections to Enhance Results
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用集合增强结果
- en: Until now, I told you everything about models and how to create relationships
    between them. I explained you how to query your data and relationships and even
    to specify complex conditions and constraints. However, I have never told you
    anything about what Eloquent's outputs are. Yes, sometimes, I mentioned an *array*
    or just the word *results*. Don't worry; it wasn't wrong, but there is something
    more under the hood.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我告诉你了关于模型以及如何创建它们之间关系的一切。我解释了如何查询你的数据和关系，甚至如何指定复杂的条件和约束。然而，我从未告诉你关于Eloquent输出的一切。是的，有时我提到了一个*数组*或者只是说*结果*。别担心，这并不错，但还有更多隐藏的东西。
- en: Well, in this chapter, I will discuss collections. When retrieving your results
    from a query (using, for instance, `get()` or `all()`), you are getting a collection.
    That's the right term to use.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，在本章中，我将讨论集合。当你从查询（例如使用`get()`或`all()`）检索结果时，你得到的是一个集合。这就是正确的术语。
- en: Basically, you can think of a collection as an array of results but with some
    extra utility methods. In fact, when you use a collection, you are using an instance
    of the `Collection` class under `Illuminate\Database\Eloquent`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可以将集合视为结果数组，但具有一些额外的实用方法。事实上，当你使用集合时，你正在使用`Illuminate\Database\Eloquent`中的`Collection`类的一个实例。
- en: This class implements the `AggregateIterator` interface that lets you treat
    a collection like an array. You can use collections to perform many operations,
    sometimes complex operations as well. First of all, you will see how to perform
    some basic research operations and checks with collections.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类实现了`AggregateIterator`接口，允许你将集合当作数组来处理。你可以使用集合执行许多操作，有时甚至是复杂的操作。首先，你将看到如何使用集合执行一些基本的研究操作和检查。
- en: Then, we will see some results transformation methods. Do you remember, in [Chapter
    3](ch03.html "Chapter 3. The Most Important Element – the Model!"), *The Most
    Important Element – the Model!*, I had told you about the automatic transformation
    in JSON of a model result? Great! It's one of these methods.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将看到一些结果转换方法。你还记得吗，在[第3章](ch03.html "第3章。最重要的元素——模型！")中，我提到了模型结果在JSON中的自动转换？太棒了！这是这些方法之一。
- en: Straight after, we will go a little deeper; after all, a collection is made
    up of elements. We will work with these elements. With a collection, obviously,
    you can iterate through its elements. There are some dedicated methods for iterations.
    Also, you will learn how to filter a collection in an easy way, just as many things
    in Eloquent are easy. Finally, we will talk about sorting operations on collections
    and how to deal with them. So, nothing of this really is essential, but it will
    help you to better understand how Eloquent works in every single way.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入探讨；毕竟，集合是由元素组成的。我们将与这些元素一起工作。显然，使用集合，你可以遍历其元素。有一些专门的方法用于迭代。此外，你还将学习如何以简单的方式过滤集合，就像Eloquent中的许多事情一样简单。最后，我们将讨论集合上的排序操作以及如何处理它们。所以，这些内容并不是真正必要的，但它将帮助你更好地理解Eloquent以各种方式的工作。
- en: 'Are you ready? Here are the topics to cover:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好了吗？以下是我们要讨论的主题：
- en: Basic collection operations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本集合操作
- en: Transforming collections
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换集合
- en: Iterating and filtering
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代和过滤
- en: Sorting
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序
- en: Basic collection operations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本集合操作
- en: 'Let''s start with some really basic methods. For a better understanding of
    what you are going to do, I *strongly suggest that you try on your project* every
    single method from the following list:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些真正基本的方法开始。为了更好地理解你将要做什么，我**强烈建议**你在以下列表中的每个方法都在你的项目上尝试一次：
- en: The first is `contains()`. It returns true or false if a record with a certain
    ID is included in the collection.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是`contains()`。如果集合中包含具有特定ID的记录，它将返回true或false。
- en: 'Here''s an example:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All you have to do, here, is to specify the ID as a parameter.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你只需要指定ID作为参数。
- en: 'As I told you earlier, you can use a collection as an array. So, if you want
    to get the third element in a collection, you can use this:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如我之前所说，你可以将集合当作数组来使用。所以，如果你想获取集合中的第三个元素，你可以这样做：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, if you don''t like this syntax for some reason, you can use `get()`
    in an alternative way, like this:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，如果你出于某种原因不喜欢这种语法，你可以以这种方式使用`get()`作为替代，如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With this *powered* syntax, you can also specify a default value if the desired
    index doesn''t exist:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这种*增强*语法，你还可以指定一个默认值，如果所需的索引不存在：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Obviously, you can check the existence of a specific element, if you want,
    with `has()`:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显然，如果你想检查特定元素的存在，你可以使用 `has()`：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As the opposite of `get()`, you can add an element with a specific index using
    `put()`:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 `get()` 相反，你可以使用 `put()` 添加一个具有特定索引的元素：
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you may imagine, the first argument is the desired index, and the second
    argument is the value.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所想，第一个参数是期望的索引，第二个参数是值。
- en: 'Another cool method is `prepend()`, which you can use to prepend an element
    to a certain collection. Here''s the syntax:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个很酷的方法是 `prepend()`，你可以用它将一个元素添加到特定的集合中。以下是语法：
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you want to get an array with all the primary keys, you can use a dedicated
    `modelKeys()` method!
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要获取包含所有主键的数组，你可以使用专门的 `modelKeys()` 方法！
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It's not over yet; actually, there are many methods you can use for many different
    things.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还没有结束；实际上，有许多你可以用于许多不同事情的方法。
- en: 'An example is `random()`, which extracts a single random item from the specified
    collection:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，`random()` 方法可以从指定的集合中提取一个随机项：
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Also, you can use `keys()` or `values()` to get arrays for only keys or values,
    respectively.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，你可以使用 `keys()` 或 `values()` 来获取仅包含键或值的数组。
- en: '[PRE9]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What? You want to treat your collection as a stack? No problem, `pop()` and
    `push()` are here to help!
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么？你想把你的集合当作栈来处理？没问题，`pop()` 和 `push()` 就在这里帮助你！
- en: '[PRE10]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, what about searching for an item in a collection using syntax similar
    to the `here()` you called on models? Take a look at this:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，关于使用类似于你在模型上调用的 `here()` 语法在集合中搜索一个项，看看这个：
- en: '[PRE11]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that this method returns another category. This means that you can use
    many chained calls of `where()`. Here''s another example that gives a better idea:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这个方法返回另一个分类。这意味着你可以使用多个 `where()` 的链式调用。以下是一个更好的例子：
- en: '[PRE12]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's close this first part of our chapter with `perPage`, which is a really
    intuitive method that gets a certain number of items, and all you have to do is
    to specify the page and number of items you want per page.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们用 `perPage` 来结束本章的第一部分，这是一个非常直观的方法，它获取一定数量的项目，而你只需要指定你想要每页显示的项目数量。
- en: 'The syntax is something like this:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法类似于这样：
- en: '[PRE13]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With this simple call, you are getting 10 books, starting from the second page.
    I think this is a great example of expressive syntax of methods that Eloquent
    (and Laravel) offers.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过这个简单的调用，你正在获取从第二页开始的 10 本书。我认为这是一个 Eloquent（以及 Laravel）提供的方法表达性语法的绝佳例子。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to know more about the `Collection` class and what it offers, take
    a look at [http://laravel.com/api/5.0/Illuminate/Database/Eloquent/Collection.html](http://laravel.com/api/5.0/Illuminate/Database/Eloquent/Collection.html)
    or look directly at the code in `Illuminate\Database\Eloquent\Collection` and
    `Illuminate\Support\Collection` classes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 `Collection` 类及其提供的内容，请查看 [http://laravel.com/api/5.0/Illuminate/Database/Eloquent/Collection.html](http://laravel.com/api/5.0/Illuminate/Database/Eloquent/Collection.html)
    或直接查看 `Illuminate\Database\Eloquent\Collection` 和 `Illuminate\Support\Collection`
    类中的代码。
- en: Transforming collections
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换集合
- en: 'Quite often, Eloquent automatically takes a collection to transform it into
    something that you can output in a better way. For example, here is the code that
    I am using to show a list of a magazine website''s news categories:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见，Eloquent 会自动将集合转换成你可以以更好的方式输出的东西。例如，以下是我用来显示杂志网站新闻分类列表的代码：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is the corresponding output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相应的输出：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'However, now consider the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在考虑以下代码：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, let''s change the code to this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们将代码更改为这个：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is what happens:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是发生的事情：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Wait, wait; what? Just changing a `dd()` call with a return? Well, you can
    see this magic using two special methods: `toArray` and `toJSON`. You can also
    use them manually, if you need, just like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，等等；什么？只是改变一个 `dd()` 调用并返回？嗯，你可以使用两个特殊方法 `toArray` 和 `toJSON` 来看到这个魔法。如果你需要，你也可以手动使用它们，就像这样：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Cool, right?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，对吧？
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `dd()` function I used before is a Laravel utility. It's a mix of the native
    PHP `var_dump()` and `die()`. To be more precise, it shows the value of a certain
    object or variable, and then stops the script.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前使用的 `dd()` 函数是 Laravel 的一个实用工具。它是原生 PHP 的 `var_dump()` 和 `die()` 的混合。更准确地说，它会显示某个对象或变量的值，然后停止脚本。
- en: Iterating and filtering
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代和过滤
- en: Sometimes you will need something more than passing a collection in to a view,
    or a simple `toArray()` call. An Eloquent collection has many methods that you
    can use to filter and iterate through its elements. Let's see something in action!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你需要做的不只是将集合传递给视图，或者进行简单的 `toArray()` 调用。Eloquent 集合有许多你可以用来过滤和遍历其元素的方法。让我们看看实际操作！
- en: Iterating
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代
- en: 'First of all, let''s begin with simple iteration. You can call the `each()`
    method to iterate the elements of a certain collection:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从简单的迭代开始。你可以调用 `each()` 方法来遍历某个集合的元素：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'All you have to do is to pass as the first (and only) argument a closure with
    a single parameter: the single item to be used. In this example, I just printed
    all the titles.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你所要做的就是传递一个闭包作为第一个（也是唯一一个）参数，该闭包有一个参数：将被使用的单个项。在这个例子中，我只是打印了所有的标题。
- en: Filtering
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤
- en: 'If you want to filter your collection in a more complex way, you can use `filter()`.
    Let''s take an example: I want to select every book that was printed after 1840.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更复杂地过滤你的集合，你可以使用 `filter()`。让我们来看一个例子：我想选择所有在 1840 年之后打印的书籍。
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The syntax is really similar to the previous example. You have a closure as
    a parameter, with a single argument passed; that is, the collection item.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 语法与上一个示例非常相似。你有一个闭包作为参数，传递一个单一参数；即集合项。
- en: However, this time you will have to check your conditions and return true or
    false if you want to include (or not) this item in the `result` collection.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这次你必须检查你的条件，如果你想包含（或不包含）这个项在 `result` 集合中，你需要返回 true 或 false。
- en: So, in this specific case, the current `$book` value was printed after 1840?
    Great, come in. Not printed after 1840? Bye bye!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个特定的情况下，当前的 `$book` 值是在 1840 年之后打印的吗？太好了，请进。不是在 1840 年之后打印的？再见！
- en: Sorting
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: Finally, you can sort data using a certain field. The methods you must use,
    this time, are `sortBy` and `sortByDesc`. I think you are quite smart enough to
    understand what they do, right?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以使用某个字段对数据进行排序。这次你必须使用的方法是 `sortBy` 和 `sortByDesc`。我想你足够聪明，能够理解它们的作用，对吧？
- en: 'However, here are some examples:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里有一些示例：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Also, you can use a shortcut if your closure logic is really simple, such as
    the earlier examples:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你的闭包逻辑非常简单，你可以使用快捷方式，例如之前的示例：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Let's be clear; in my opinion, knowing every single method of a collection isn't
    really indispensable. However, it can be really useful in some situations where
    you need a certain method to do something very specific. How can I say it? The
    more things you know, the better you are!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们明确一下；在我看来，了解集合的每一个方法并不是真的必不可少。然而，在某些需要特定方法来完成非常具体任务的情况下，它可能非常有用。我该如何表达呢？你知道的事情越多，你就越优秀！
- en: Now, let's move on! After this little break, it's time to go down in to the
    world of events!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续前进！在这个短暂的休息之后，是时候进入事件的世界了！
