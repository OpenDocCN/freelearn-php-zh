- en: Chapter 7. Creating a Secure User Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。创建一个安全用户环境
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Escaping user input
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免用户输入
- en: Preventing cross-site request forgery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止跨站请求伪造
- en: Escaping data – for a database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免数据库中的数据转义
- en: Using HTTPS with CodeIgniter
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CodeIgniter 中使用 HTTPS
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Firstly, a disclaimer: no method or system can ever be entirely foolproof and
    secure all the time, and you should be aware of the correct security measures
    that you should apply for the programming task or context in which you are coding.
    I will put some links to other information resources at the end of this chapter.
    Having said that, CodeIgniter offers some useful techniques for reducing the chance
    that something can go wrong, for example, in this chapter are several recipes
    that can help reduce the chances of something untoward--however, you should always
    remain vigilant and ensure that you''re building securely.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一个免责声明：没有任何方法或系统可以永远完全无懈可击且始终保持安全，你应该了解在编程任务或你正在编码的上下文中应该应用的正确安全措施。我将在本章末尾提供一些其他信息资源的链接。话虽如此，CodeIgniter
    提供了一些有用的技术来降低出错的可能性，例如，在本章中提供了一些可以帮助降低意外发生概率的食谱——然而，你始终应该保持警惕，并确保你正在安全地构建。
- en: Escaping user input
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免用户输入
- en: The CodeIgniter security class function, `xss_clean()`, attempts to clean input
    from the `POST` or `COOKIE` data to mitigate against techniques that can allow
    for the injection of code into a website. For example, it would seek to prevent
    JavaScript code from being executed if it is included in a blog post submitted
    by a user, or look at the data submitted in a text input field and escape disallowed
    characters.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter 安全类函数 `xss_clean()` 尝试清理 `POST` 或 `COOKIE` 数据，以减轻允许向网站注入代码的技术。例如，它会试图防止用户提交的博客文章中包含的
    JavaScript 代码被执行，或者检查文本输入字段中提交的数据并转义不允许的字符。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You can apply this to any controller you''re creating, or if you''ve extended
    using `MY_Controller`, you can add it to that if you wish. You can also autoload
    the security helper by adding it to `$autoload[''helper''] = array()` in the `/path/to/codeigniter/application/config/autoload.php`
    file. To be explicitly clear, here we''re loading the security helper in the constructor
    of the controller (that is, any controller you have):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将此应用于你创建的任何控制器，或者如果你已经通过 `MY_Controller` 扩展，你可以根据需要将其添加到其中。你还可以通过在 `/path/to/codeigniter/application/config/autoload.php`
    文件中将它添加到 `$autoload['helper'] = array()` 来自动加载安全助手。为了明确起见，这里我们是在控制器的构造函数中加载安全助手（即任何你拥有的控制器）：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: There are two ways to do this, globally (CodeIgniter does it every time it encounters
    the `POST` or `COOKIE` data), and individually (CodeIgniter lets you define when
    to call the clean `COOKIE` or `POST` data).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以实现这一点，全局的（CodeIgniter 每次遇到 `POST` 或 `COOKIE` 数据时都会这样做），以及单独的（CodeIgniter
    允许你定义何时调用清理后的 `COOKIE` 或 `POST` 数据）。
- en: Globally
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局
- en: 'CodeIgniter can call xss_clean() automatically each time it encounters the
    POST or COOKIE data without you needing to explicitly call xss_clean(). To do
    this, you''ll need to amend the following file:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CodeIgniter 可以在每次遇到 POST 或 COOKIE 数据时自动调用 xss_clean()，而无需你显式调用 xss_clean()。为此，你需要修改以下文件：
- en: '`/path/to/codeigniter/application/config/config.php`'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/config/config.php`'
- en: 'Change the value of `$config[''global_xss_filtering'']` to `TRUE`, as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `$config['global_xss_filtering']` 的值更改为 `TRUE`，如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, be aware that there is a computational overhead in doing so and it
    may not always be necessary for you to run this all the time.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，请注意，这样做会有计算开销，并且不一定总是需要你一直运行它。
- en: Individually
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单独
- en: 'Ensure that `$config[''global_xss_filtering'']` is set to `FALSE`, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将 `$config['global_xss_filtering']` 设置为 `FALSE`，如下所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will turn off global XSS filtering. When you wish to use `xss_cean()`,
    enter the following code into your controller or model:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将关闭全局 XSS 过滤。当你希望使用 `xss_clean()` 时，请将以下代码输入到你的控制器或模型中：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In either example, you're calling the same CodeIgniter method; one is being
    called automatically and the other is calling it on a case-by-case basis. The
    code in question can be found at `/path/to/codeigniter/system/core/Security.php`
    (find the function, `xss_clean()`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何示例中，你都在调用相同的 CodeIgniter 方法；一个方法是自动调用的，另一个是逐个调用的。相关代码可以在 `/path/to/codeigniter/system/core/Security.php`（找到函数
    `xss_clean()`）中找到。
- en: Preventing cross-site request forgery
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止跨站请求伪造
- en: A cross-site request forgery is where an attacker pretends to be a user that
    the website recognizes (such as a logged-in user), and the attacker is then able
    to access a logged-in user's profile as though they were the genuine user. There
    is a wealth of technical information available, such as websites, books, and so
    on, on how that happens, which is why we're not going to look into that here.
    Instead, we're going to look at how CodeIgniter mitigates against cross-site request
    forgeries.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 跨站请求伪造是指攻击者假装成网站识别的用户（例如已登录用户），然后攻击者能够像真正的用户一样访问已登录用户的个人资料。关于这种情况的详细信息，如网站、书籍等，有很多技术信息，因此我们在这里不会深入研究。相反，我们将探讨
    CodeIgniter 如何减轻跨站请求伪造的影响。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to amend one file and create two files by performing the following
    steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤修改一个文件并创建两个文件：
- en: 'First, we need to amend some configuration items. To do that, we''ll need to
    open the following file: `/path/to/codeigniter/application/config/config.php`'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要修改一些配置项。为此，我们需要打开以下文件：`/path/to/codeigniter/application/config/config.php`
- en: 'Find the following configuration options and make the amendments as listed
    in the table:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 找到以下配置选项，并根据表格中的说明进行修改：
- en: '| Configuration Item | Default Value | Change to/Description |'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 配置项 | 默认值 | 修改为/描述 |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `$config[''csrf_protection'']` | `TRUE` | Specifies whether to turn request
    forgery protection on or off |'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''csrf_protection'']` | `TRUE` | 指定是否开启请求伪造保护 |'
- en: '| `$config[''csrf_token_name'']` | `csrf_test_name` | Specifies the name of
    the hidden form element used in a form (see the *How it works...* section) |'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''csrf_token_name'']` | `csrf_test_name` | 指定在表单中使用的隐藏表单元素的名称（见
    *工作原理...* 部分） |'
- en: '| `$config[''csrf_cookie_name'']` | `csrf_cookie_name` | Specifies the name
    of the cookie that is set on the user''s machine |'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''csrf_cookie_name'']` | `csrf_cookie_name` | 指定在用户机器上设置的 cookie
    的名称 |'
- en: '| `$config[''csrf_expire'']` | `7200` | The number of seconds that a single
    token is allowed to exist for; after this time, if a form is submitted, CodeIgniter
    will throw an error |'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''csrf_expire'']` | `7200` | 单个令牌允许存在的秒数；在此时间后，如果提交表单，CodeIgniter
    将抛出错误 |'
- en: 'Next, we create the following two files:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建以下两个文件：
- en: '`/path/to/codeigniter/application/controllers/csrf.php`'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/csrf.php`'
- en: '`/path/to/codeigniter/application/views/csrf/csrf.php`'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/csrf/csrf.php`'
- en: 'Add the following code into the, `csrf.php` controller. This controller will
    load the required helpers and display the simple form in the `views/csrf/csrf.php`
    file:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `csrf.php` 控制器中。此控制器将加载所需的辅助函数并在 `views/csrf/csrf.php` 文件中显示简单的表单：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following code into the, `csrf.php` view file. This view will create
    the HTML form. We''re using CodeIgniter''s `form_open()` facility to do the work
    for us so that we don''t have to it:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `csrf.php` 视图文件中。此视图将创建 HTML 表单。我们使用 CodeIgniter 的 `form_open()` 功能来为我们完成工作，这样我们就不必手动完成：
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'If you load the controller in the web browser and view the HTML source of the
    page, you should see the following code snippet:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将控制器加载到网页浏览器中并查看页面的 HTML 源代码，你应该会看到以下代码片段：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Take a close look at the highlighted line. CodeIgniter has added a hidden form
    element named `csrf_test_name`. We set the name in the configuration file, `config.php`
    (details explained earlier) The actual value of this field will be different every
    time you run it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看高亮行。CodeIgniter 添加了一个名为 `csrf_test_name` 的隐藏表单元素。我们在配置文件 `config.php` 中设置了名称（详情见前文）。此字段的实际值每次运行都会不同。
- en: 'So, what happens when you click on the **Submit** button? Well, CodeIgniter
    compares the value set in the cookie on the user''s machine (set as `csrf_cookie_name`
    in `config.php`) to the value set in the hidden form element (set as `csrf_test_name`
    in `config.php`). If the two values do not match, CodeIgniter assumes that there
    is a problem and throws an error, as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当你点击 **提交** 按钮时会发生什么？嗯，CodeIgniter 会将用户机器上的 cookie 中设置的值（在 `config.php` 中设置为
    `csrf_cookie_name`）与隐藏表单元素中设置的值（在 `config.php` 中设置为 `csrf_test_name`）进行比较。如果这两个值不匹配，CodeIgniter
    假设存在问题并抛出错误，如下面的截图所示：
- en: '![How it works...](img/2308OS_07_01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/2308OS_07_01.jpg)'
- en: You can see this yourself by adjusting the `csrf_exipre` value from the default,
    `7200` seconds, to something a little easier to wait for, such as `10` seconds.
    Then load the controller in a browser, wait for the new set value of seconds,
    and click on the **Submit** button. You'll see the preceding error. Remember to
    put this value back to `7200` (or whatever you wish) after you have finished.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调整 `csrf_exipre` 值从默认的 `7200` 秒到一个更容易等待的时间，例如 `10` 秒来自己查看。然后在浏览器中加载控制器，等待新的秒数设置，然后点击**提交**按钮。您将看到前面的错误。请记住，在完成操作后，将此值恢复到
    `7200`（或您希望的任何值）。
- en: This CSRF check enables CodeIgniter to mitigate against CSRF as the cookie set
    on a user's machine is unlikely to be guessed and imitated by an attacker on another
    machine who can then set that value in `csrf_cookie_name` and `csrf_test_name`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此CSRF检查使CodeIgniter能够减轻CSRF攻击，因为设置在用户机器上的cookie不太可能被另一台机器上的攻击者猜测和模仿，然后攻击者可以在
    `csrf_cookie_name` 和 `csrf_test_name` 中设置该值。
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: CSRF protection in CodeIgniter is unsuitable for AJAX forms.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter中的CSRF保护不适合AJAX表单。
- en: Escaping data – for a database
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据转义 – 用于数据库
- en: It's never a good idea to trust any information or data that comes the user;
    you should always consider any data from the user to be untrustworthy and potentially
    dangerous. You are strongly advised to ensure that you escape any data coming
    in from the user, and never trust any data from the user unless you have passed
    it through various processes that should make that data safe enough to work with.
    One of these techniques is **escaping data**. This recipe demonstrates the escaping
    of variables in a database query.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 信任来自用户的信息或数据从来都不是一个好主意；您应该始终认为来自用户的数据是不可信的，并且可能具有潜在的危险性。强烈建议您确保对来自用户的数据进行转义，并且除非您已经通过各种应该使数据足够安全以供使用的过程处理了这些数据，否则不要信任任何来自用户的数据。这些技术之一是**数据转义**。这个配方演示了在数据库查询中转义变量的过程。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, we''ll need to create a database table. For this example, let''s assume
    the database table is named `escape`. Enter the following SQL into your database:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个数据库表。在这个例子中，让我们假设数据库表名为 `escape`。将以下SQL语句输入到您的数据库中：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now that we''ve created the database table, we''ll begin escaping input from
    the user. We''re going to create the following three files:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了数据库表，我们将开始对用户输入进行转义。我们将创建以下三个文件：
- en: '`/path/to/codeigniter/application/controllers/escape.php`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/escape.php`'
- en: '`/path/to/codeigniter/application/models/escape_model.php`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/escape_model.php`'
- en: '`/path/to/codeigniter/application/views/escape/escape.php`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/escape/escape.php`'
- en: 'Create the, `/path/to/codeigniter/application/controllers/escape.php` file,
    and add the following code to it:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/controllers/escape.php`，并将以下代码添加到该文件中：
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the, `/path/to/codeigniter/application/views/escape/escape.php` file,
    and add the following code to it. The `escape.php` controller will display a simple
    form to the user asking them to enter their first and last name, as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/escape/escape.php`，并将以下代码添加到该文件中。`escape.php`
    控制器将向用户显示一个简单的表单，要求他们输入他们的名字和姓氏，如下所示：
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the, `/path/to/codeigniter/application/models/escape_model.php` file,
    and add the following code to it. As we''re explicitly typing the query, we''re
    going to use `$this->db->escape()` to do the escaping for us as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/models/escape_model.php`，并将以下代码添加到该文件中。由于我们正在显式地编写查询，我们将使用
    `$this->db->escape()` 来为我们执行转义，如下所示：
- en: '[PRE10]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Okay, if you load the controller in your browser, you''ll see the form. This
    form asks the user to enter their first file name and last () name, so let''s
    enter `Rob''s` as the first name and `Foster` as the last name. You''ll notice
    that there''s an apostrophe at the end of word *Rob*, go ahead and click on the
    **Submit** button. The form should submit to the `escape.php` controller, which
    will package up the post input into an array and send to the model. This is where
    the work begins; take a look at the highlighted text in the preceding model script,
    check out the lines, `$this->db->escape($data[''firstname''])` and `$this->db->escape($data[''lastname''])`,
    the CodeIgniter function is escaping the input passed to it, and inserting it
    safely into the database. You can see this by looking in the database; to do this,
    run the command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，如果你在浏览器中加载控制器，你会看到表单。这个表单要求用户输入他们的第一个文件名和最后一个()名字，所以让我们以`Rob's`作为第一个名字，以`Foster`作为最后一个名字。你会注意到单词*Rob*的末尾有一个撇号，接下来点击**提交**按钮。表单应该提交到`escape.php`控制器，该控制器将表单的输入封装成一个数组并发送到模型。这就是工作的开始；看看前面模型脚本中突出显示的文本，检查以下行，`$this->db->escape($data['firstname'])`和`$this->db->escape($data['lastname'])`，CodeIgniter函数正在将其传递给它的输入进行转义，并安全地插入到数据库中。你可以通过查看数据库来看到这一点；要这样做，运行以下命令：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And you should see something similar to the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下截图类似的内容：
- en: '![How it works...](img/2308OS_07_02.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2308OS_07_02.jpg)'
- en: 'You can, for the sake of demonstration, remove `$this->db->escape()` from the
    model query and see what happens. Amend the code in the model to reflect the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，你可以从模型查询中移除`$this->db->escape()`，看看会发生什么。修改模型中的代码以反映以下内容：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You''ll see a database error, as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到一个数据库错误，如下面的截图所示：
- en: '![How it works...](img/2308OS_07_03.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2308OS_07_03.jpg)'
- en: You can see from the preceding error that the values for first name and last
    name haven't been properly escaped. In fact, the apostrophe in *Rob* (`Rob's`)
    is treated as SQL query syntax rather than an actual variable. You can see how
    `$this->db->escape()` works for you to make queries safer and easier.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的错误中可以看出，第一个名字和最后一个名字的值还没有被正确转义。实际上，*Rob*（`Rob's`）中的撇号被当作SQL查询语法处理，而不是一个实际的变量。你可以看到`$this->db->escape()`是如何为你工作，使查询更安全、更简单的。
- en: There's more...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are two more escaping functions you should be aware of, these are `escape_str()`
    and `escape_like_str()`. Their use is identical to `escape()`; however, you would
    call each function with `$this->db->escape_str()` and `$this->db->escape_like_str()`
    respectively.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该还知道另外两个转义函数，这些是`escape_str()`和`escape_like_str()`。它们的使用与`escape()`相同；然而，你需要分别使用`$this->db->escape_str()`和`$this->db->escape_like_str()`来调用每个函数。
- en: What are they for? Well, `escape_str()` will still escape data passed to it
    like the `escape()` function does, but it can also escape data other than just
    strings (which `escape()` is limited to). `escape_like_str()` can be used when
    you're relying on wildcards to narrow down query results. For more information,
    go to [http://ellislab.com/codeigniter/user-guide/database/queries.html](http://ellislab.com/codeigniter/user-guide/database/queries.html).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是做什么用的？`escape_str()`仍然会像`escape()`函数一样转义传递给它的数据，但它还可以转义除了字符串之外的数据（`escape()`仅限于字符串）。`escape_like_str()`可以在你依赖通配符来缩小查询结果时使用。有关更多信息，请访问[http://ellislab.com/codeigniter/user-guide/database/queries.html](http://ellislab.com/codeigniter/user-guide/database/queries.html)。
- en: Using HTTPS with CodeIgniter
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CodeIgniter中使用HTTPS
- en: Using SSL is a huge topic, as is online security in general; therefore, I strongly
    recommend you read widely about web security (because this recipe isn't really
    a security primer). However, if you specifically wish to protect certain pages
    with an SSL certificate, there is an easy way to do it. We can create a CodeIgniter
    helper file to toggle SSL support on or off. Let's see how to do it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSL是一个很大的话题，在线安全也是如此；因此，我强烈建议你广泛阅读有关网络安全的资料（因为这篇食谱并不是真正的安全入门指南）。然而，如果你特别希望使用SSL证书保护某些页面，有一个简单的方法可以做到。我们可以创建一个CodeIgniter辅助文件来切换SSL支持的开或关。让我们看看如何做到这一点。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: I'm sure you know of the benefits of requiring certain pages in a website to
    be protected with an SSL certificate. The sight of that green address bar and
    little padlock can go a long way in allaying a user's concerns with entering data
    in a website. CodeIgniter doesn't come with SSL support built-in; however, it
    is perfectly easy to implement using a simple helper. Obviously, SSL support isn't
    the be-all and end-all of website security, and should always be implemented alongside
    other security measures to mitigate against unwanted visitors.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您知道要求网站上的某些页面使用 SSL 证书进行保护的好处。看到那个绿色的地址栏和小的锁头可以大大减轻用户在网站上输入数据的担忧。CodeIgniter
    并未内置 SSL 支持；然而，使用简单的辅助函数实现它非常容易。显然，SSL 支持并不是网站安全的全部，应始终与其他安全措施一起实施，以减轻不受欢迎的访问者。
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We're going to create a recipe that enables a user to view a page that isn't
    secured behind a HTTPS connection, and have them click on a link that will redirect
    them to a page that is secured behind a HTTPS connection. The parts of the code
    that implement the HTTPS connection and check whether a page is being viewed via
    HTTPS are highlighted, so you can quickly get into the bones of what's happening.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个菜谱，允许用户查看一个不受 HTTPS 连接保护的页面，并让他们点击一个链接，该链接将把他们重定向到一个受 HTTPS 连接保护的页面。实现
    HTTPS 连接和检查页面是否通过 HTTPS 观看的代码部分被突出显示，这样您可以快速了解正在发生的事情的核心。
- en: 'We''re going to create the following five files:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下五个文件：
- en: '`/path/to/codeigniter/application/views/https/with_https.php`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/https/with_https.php`'
- en: '`/path/to/codeigniter/application/views/https/without_https.php`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/https/without_https.php`'
- en: '`/path/to/codeigniter/application/controllers/with_https.php`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/with_https.php`'
- en: '`/path/to/codeigniter/application/controllers/without_https.php`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/without_https.php`'
- en: '`/path/to/codeigniter/application/helpers/ssl_helper.php`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/helpers/ssl_helper.php`'
- en: 'Create the, `/path/to/codeigniter/application/views/https/with_https.php` file,
    and add the following code to it:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/https/with_https.php`，并将以下代码添加到该文件中：
- en: '[PRE13]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the `/path/to/codeigniter/application/views/https/without_https.php`
    file, and add the following code to it:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/https/without_https.php`，并将以下代码添加到该文件中：
- en: '[PRE14]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the `/path/to/codeigniter/application/controllers/with_https.php` file.
    This controller will load the `ssl_helper` and set support to `on.`It will also
    display a link to the `without_https` controller. Add the following code to the
    `With_https` controller:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/controllers/with_https.php`。此控制器将加载 `ssl_helper`
    并将支持设置为 `on`。它还将显示一个链接到 `without_https` 控制器的链接。将以下代码添加到 `With_https` 控制器中：
- en: '[PRE15]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create the `/path/to/codeigniter/application/controllers/without_https.php`
    file, and add the following code to it. This controller will load the `ssl_helper`
    and set SSL support to `off`. It will also display a link to the `with_https`
    controller. Add the following code to the `Without_https` controller:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/controllers/without_https.php`，并将以下代码添加到该文件中。此控制器将加载
    `ssl_helper` 并将 SSL 支持设置为 `off`。它还将显示一个链接到 `with_https` 控制器的链接。将以下代码添加到 `Without_https`
    控制器中：
- en: '[PRE16]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create the `/path/to/codeigniter/application/helpers/ssl_helper.php` file.
    This helper will take one function argument passed to it by the calling controllers
    and alter the `base_url` value depending on whether we need SSL support or not.
    Add the following code to the helper, `ssl_helper`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/helpers/ssl_helper.php`。此辅助函数将接受由调用控制器传递给它的一个函数参数，并根据我们是否需要
    SSL 支持来更改 `base_url` 的值。将以下代码添加到辅助函数 `ssl_helper` 中：
- en: '[PRE17]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Port 443 is the default HTTPS port; however, this might not always be the case,
    and the SSL port may be configured differently on your environment and it may
    be another number on the system you're developing on or developing for. Remember
    to use the correct port in your environment.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 端口 443 是默认的 HTTPS 端口；然而，这并不总是如此，SSL 端口可能根据您的环境配置不同，或者您正在开发或为的系统上可能是另一个数字。请记住在您的环境中使用正确的端口。
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Whichever controller we load (`with_https` or `without_https`), one of the
    first things done in the constructor is to load the helper, `ssl_helper`, with
    the following line:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们加载哪个控制器（`with_https` 或 `without_https`），构造函数中首先执行的操作之一是加载辅助函数 `ssl_helper`，如下所示：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can see this line highlighted in each controller. We then need to call
    the helper function, `toggle_ssl(string)`, passing a string of either `on` or
    `off to it`. Obviously, `on` will enforce SSL and `off` will remove it. When the
    `ssl_helper` is called, it immediately calls (by reference: using `&` to copy
    by reference) the main CodeIgniter super object. We can see it being called by
    reference by inclusion of the ampersand character before the PHP function, `get_instance()`.
    The object is then stored for us to use in the helper as the variable, `$CI,`
    as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在每个控制器中看到这一行被突出显示。然后我们需要调用辅助函数`toggle_ssl(string)`，向其传递一个`on`或`off`的字符串。显然，`on`将强制执行SSL，而`off`将移除它。当调用`ssl_helper`时，它立即通过引用（使用`&`来通过引用复制）调用主CodeIgniter超级对象。我们可以通过在PHP函数`get_instance()`之前包含符号`&`来看到它是通过引用被调用的。然后对象被存储起来，供我们在辅助函数中使用，变量为`$CI`，如下所示：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Depending on the value passed to it, the helper will do one of the following
    three things:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 根据传递给它的值，辅助函数将执行以下三个操作之一：
- en: 'If the value is `on`, then we wish to turn on SSL support. Using the PHP function,
    `str_replace`, we swap the `http://` part of the `base_url` value to `https://`,
    saving that on the fly as CodeIgniter''s new `base_url` value as follows:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果值是`on`，那么我们希望开启SSL支持。使用PHP函数`str_replace`，我们将`base_url`值中的`http://`部分替换为`https://`，并在飞行中保存为CodeIgniter的新`base_url`值，如下所示：
- en: '[PRE20]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If the value is `off`, we do exactly the same but in reverse. We swap the `https://`
    part of the current `base_url` value to `http://` as follows:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果值是`off`，我们做完全相同的事情，但方向相反。我们将当前`base_url`值中的`https://`部分替换为`http://`，如下所示：
- en: '[PRE21]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After both preceding `str_replace`, we test the current value of the `$_SERVER`
    array element, `SERVER_PORT;`, redirecting accordingly.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行上述两次`str_replace`之后，我们测试`$_SERVER`数组元素`SERVER_PORT;`的当前值，并相应地进行重定向。
- en: If the value passed to `toggle_ssl` isn't either `on` or `off`, then the default
    action will set SSL support to `off`.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果传递给`toggle_ssl`的值既不是`on`也不是`off`，则默认操作将SSL支持设置为`off`。
- en: There's more...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Some of you may not be familiar with setting up SSL on your machine. Setting
    SSL up is out of the scope of this book; however, it's quite simple to do. There's
    a great link from the Apache Foundation in the following section that details
    how to set up an SSL certificate.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人对在他们的机器上设置SSL可能不太熟悉。设置SSL超出了这本书的范围；然而，它相当简单。在以下部分有一个Apache基金会提供的非常棒的链接，详细说明了如何设置SSL证书。
- en: Setting up HTTPS on localhost
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在本地主机上设置HTTPS
- en: It is possible to set up HTTPS on localhost (assuming that's what you're developing
    on). I've found an URL that's particularly helpful in getting a self-certified
    SSL certificate on localhost.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地主机上设置HTTPS是可能的（假设你正在开发的是这个）。我找到了一个特别有用的URL，它有助于在本地主机上获得自签名的SSL证书。
- en: 'A self-certified SSL certificate is just an SSL certificate which you''ve made
    yourself. It''s going to be just as good as one you purchase; however, if you
    push it to a live production environment and an actual user visits. Their browser
    will tell them the issuing authority is unknown (because you made it yourself),
    the user will probably think that this means that the site is dangerous and leave.
    Therefore, for a live site, you''ll need a certificate from a recognized issuing
    authority while for testing, you can make one yourself. The following links will
    help you make one:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 自签名的SSL证书只是你自己制作的SSL证书。它将和购买的一样好；然而，如果你将其推送到实际的生产环境并且有真实用户访问，他们的浏览器会告诉他们颁发机构是未知的（因为你自己制作的），用户可能会认为这意味着该网站是危险的并离开。因此，对于实际网站，你需要从认可的颁发机构获取证书，而在测试时，你可以自己制作一个。以下链接将帮助你制作一个：
- en: '[http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html](http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html](http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html)'
- en: '[https://www.verisign.com](https://www.verisign.com )'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.verisign.com](https://www.verisign.com)'
- en: '[https://www.globalsign.co.uk/](https://www.globalsign.co.uk/)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.globalsign.co.uk/](https://www.globalsign.co.uk/)'
- en: Alternatively, if you have managed hosting a lot, your package or product from
    the host providing company will come with an SSL certificate, or it is likely
    that the host provider will be able to set one up for you (check the terms of
    the contract).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你管理了很多托管服务，你从提供服务的公司那里获得的套餐或产品将包含一个SSL证书，或者很可能是托管提供商能够为你设置一个（检查合同的条款）。
