- en: Chapter 5. Managing Data In and Out
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 管理数据输入和输出
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Sending different data to multiple views
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向多个视图发送不同的数据
- en: Validating user input
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证用户输入
- en: Preparing user input
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备用户输入
- en: Sticky form elements in CodeIgniter
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CodeIgniter中的粘性表单元素
- en: Displaying errors next to form items
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单项旁边显示错误
- en: Reading files from the filesystem
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件系统中读取文件
- en: Writing files to the filesystem
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件写入文件系统
- en: Creating and downloading ZIP files
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和下载ZIP文件
- en: Uploading files with CodeIgniter
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CodeIgniter上传文件
- en: Creating and using validation callbacks
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和使用验证回调
- en: Using the language class
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用语言类
- en: Using the language class – switching a language on the fly
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用语言类 – 动态切换语言
- en: Confirming cookie acceptance from the user
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户处确认cookie接受
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Managing data is an important subject covering not only the format of output
    data, database structure, and access methods but also security; any discussion
    of data and managing that data will obviously feature discussions of security
    and the protection of your system and its data. As such, there will be some cross-over
    with the security chapter and I recommend that you also read that chapter alongside
    this.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 管理数据是一个重要的主题，不仅涵盖输出数据的格式、数据库结构和访问方法，还包括安全性；关于数据和管理的任何讨论显然都会涉及安全性和保护您的系统和数据。因此，这将与安全章节有一些交叉，我建议您在阅读本章的同时也阅读那个章节。
- en: Sending different data to multiple views
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向多个视图发送不同的数据
- en: Someone recently asked me if they could send different data to different views
    in the same browser page and have the data displayed in its own section. Luckily,
    this can be done easily; you can pass more than one array of data to more than
    one view at the same time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最近有人问我是否可以在同一浏览器页面上向不同的视图发送不同的数据，并在其自己的部分显示这些数据。幸运的是，这可以轻松完成；你可以同时向多个视图传递多个数据数组。
- en: This can be really useful if your web page is split into sections with each
    section displaying its own data. For example, you may want a section displaying
    most read articles with another displaying most shared articles.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网页被分成几个部分，每个部分显示其自己的数据，这可能会非常有用。例如，您可能希望一个部分显示最受欢迎的文章，另一个部分显示最受欢迎的分享文章。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'As we''re going to be pulling data from a database we will need to ensure that
    a few `config` variables are set to allow us to do this. Open up the `/path/to/codeigniter/application/config/database.php`
    file and find the following settings. Then, amend them to match your requirements:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将从数据库中提取数据，我们需要确保一些 `config` 变量被设置为允许我们这样做。打开 `/path/to/codeigniter/application/config/database.php`
    文件并找到以下设置。然后，根据您的需求修改它们：
- en: '| Option Name | Valid Options | Description |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 选项名称 | 有效选项 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `$db[''default''][''hostname'']` | Usually localhost | This is the server
    on which the database sits |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `$db[''default''][''hostname'']` | 通常为 localhost | 这是数据库所在的服务器 |'
- en: '| `$db[''default''][''username'']` | ? | The database access username |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `$db[''default''][''username'']` | ? | 数据库访问用户名 |'
- en: '| `$db[''default''][''password'']` | ? | The password for the database |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `$db[''default''][''password'']` | ? | 数据库密码 |'
- en: '| `$db[''default''][''database'']` | ? | The name of the database |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `$db[''default''][''database'']` | ? | 数据库名称 |'
- en: 'Now that we''ve configured CodeIgniter to connect to a database, copy the following
    code into your database:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了CodeIgniter以连接到数据库，将以下代码复制到您的数据库中：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We''re going to create four files:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建四个文件：
- en: '`/path/to/codeigniter/application/controllers/articles.php`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/articles.php`'
- en: '`/path/to/codeigniter/application/models/content_model.php`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/content_model.php`'
- en: '`/path/to/codeigniter/application/views/articles/left.php`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/articles/left.php`'
- en: '`/path/to/codeigniter/application/views/articles/right.php`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/articles/right.php`'
- en: 'Create the `/path/to/codeigniter/application/controllers/articles.php` file
    and copy the following code into it:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/controllers/articles.php` 文件并将以下代码复制到其中：
- en: '[PRE1]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the `/path/to/codeigniter/application/models/content_model.php` file
    and copy the following code into it:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/models/content_model.php` 文件并将以下代码复制到其中：
- en: '[PRE2]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the `/path/to/codeigniter/application/views/articles/left.php` file
    and copy the following code into it:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/articles/left.php` 文件并将以下代码复制到其中：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create the `/path/to/codeigniter/application/views/articles/right.php` file
    and copy the following code into it:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/articles/right.php` 文件并将以下代码复制到其中：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`public function index()` loads the `content_model` by `$this->load->model(''content_model'');`
    and calls the two model functions `get_main_article()` and `get_article_list()`.
    The `get_main_article()` function fetches the row for the left-hand view and stores
    it in the `$left_data` array and `get_article_list()` fetches results for the
    right-hand view and stores it in the `$right_data` array:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`public function index()` 通过 `$this->load->model(''content_model'');` 加载 `content_model`
    模型，并调用两个模型函数 `get_main_article()` 和 `get_article_list()`。`get_main_article()`
    函数获取左侧视图的行并将其存储在 `$left_data` 数组中，而 `get_article_list()` 函数获取右侧视图的结果并将其存储在 `$right_data`
    数组中：'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Both left and right views are called and both the arrays (`$left_data` and
    `$right_data`) passed to them:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 左视图和右视图都被调用，并且将数组（`$left_data` 和 `$right_data`）传递给它们：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each view will then loop through the specific array outputting the fields we
    want.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，每个视图将遍历特定的数组，输出我们想要的字段。
- en: Validating user input
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证用户输入
- en: Validating user input allows you to set rules against which input coming in
    from the user can be judged. For example, you may wish to enforce certain conditions
    on an e-mail field, most obviously checking for a valid e-mail syntax, but also
    the minimum and maximum length, and whether it is required. CodeIgniter can even
    look into a database and check for duplicate values. In this recipe, we're going
    to build a controller and view, which together will allow the user to input data
    and have it validated against rules that will be set; errors, if any, will be
    reported back to the user.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 验证用户输入允许您设置规则，以便可以对来自用户的输入进行判断。例如，您可能希望对电子邮件字段强制执行某些条件，最明显的是检查有效的电子邮件语法，但也可以检查最小和最大长度，以及是否为必填项。CodeIgniter甚至可以检查数据库中的重复值。在这个菜谱中，我们将构建一个控制器和视图，它们一起将允许用户输入数据，并对其与设置的规则进行验证；如果有任何错误，将反馈给用户。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You''ll need to be aware of a few things before getting started. The following
    is a table of all available CodeIgniter validation rules:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您需要了解一些事情。以下是一个所有可用CodeIgniter验证规则的表格：
- en: '| Rule | Parameter | Description |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 规则 | 参数 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| required | No | It specifies if the specific form element must have data
    when submitted by the user. It will return `FALSE` if empty. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 必填 | 否 | 它指定特定的表单元素在用户提交时是否必须具有数据。如果为空，则返回 `FALSE`。|'
- en: '| matches | Yes | It compares the data between two form elements to see if
    they match. It will return `FALSE` if they don''t match and `TRUE` if they do.
    Example use:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '| 匹配 | 是 | 它比较两个表单元素之间的数据，以查看它们是否匹配。如果不匹配，则返回 `FALSE`；如果匹配，则返回 `TRUE`。示例用法：'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| is_unique | Yes | It queries a database to see if the value of a table record
    item matches the value of the form element being submitted. It will return `FALSE`
    if the form element is not unique. Example use:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '| 唯一 | 是 | 它查询数据库以查看表记录项的值是否与提交的表单元素的值匹配。如果表单元素不是唯一的，则返回 `FALSE`。示例用法：'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| min_length | Yes | It checks the length of the value in the form element
    to see if it is less than the parameter specified. It will return `FALSE` if the
    form element is smaller than the value specified. Example use:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '| 最小长度 | 是 | 它检查表单元素中的值的长度是否小于指定的参数。如果表单元素小于指定的值，则返回 `FALSE`。示例用法：'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| max_length | Yes | It is the reverse of min_length; it checks if the length
    of the value in the form element is greater than the parameter specified. It will
    return `FALSE` if the form element is greater than the value specified. Example
    use:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '| 最大长度 | 是 | 它是 min_length 的反义词；它检查表单元素中的值的长度是否大于指定的参数。如果表单元素大于指定的值，则返回 `FALSE`。示例用法：'
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| exact_length | Yes | It checks if the length of the value in the form element
    is the exact value as compared to the specified parameter. It will return `FALSE`
    if the form element is anything other than what is specified. Example use:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '| 精确长度 | 是 | 它检查表单元素中的值的长度是否与指定的参数完全相同。如果表单元素不是指定的内容，则返回 `FALSE`。示例用法：'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| greater_than | Yes | It checks if the value in the form element is greater
    than a supplied parameter. It will return `FALSE` if the form element is less
    than the parameter value or that value is not numeric. Example use:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '| 大于 | 是 | 它检查表单元素中的值是否大于提供的参数。如果表单元素小于参数值或该值不是数字，则返回 `FALSE`。示例用法：'
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| less_than | Yes | It is the reverse of greater_than. It checks if the value
    in the form element is less than a supplied parameter. It will return `FALSE`
    if the form element is greater than the parameter value or that value is not numeric.
    Example use:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '| less_than | 是 | 它是 greater_than 的反义词。它检查表单元素中的值是否小于提供的参数。如果表单元素大于参数值或该值不是数字，它将返回
    `FALSE`。示例用法：'
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| alpha | No | It checks if the value in the form element contains alphabetical
    characters only. It will return `FALSE` if the form element value is anything
    other than that. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| alpha | 否 | 它检查表单元素中的值是否只包含字母字符。如果表单元素值不是这样，它将返回 `FALSE`。 |'
- en: '| alpha_numeric | No | It checks if the value in the form element contains
    alphabetical and integer values only. It will return `FALSE` if the form element
    value is anything other than that. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| alpha_numeric | 否 | 它检查表单元素中的值是否只包含字母和整数。如果表单元素值不是这样，它将返回 `FALSE`。 |'
- en: '| alpha_dash | No | It checks if the value of the form element contains anything
    other than alpha-numeric characters, underscores or dashes. It will return `FALSE`
    if it contains any other value. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| alpha_dash | 否 | 它检查表单元素的值是否只包含字母数字字符、下划线或破折号。如果包含其他任何值，它将返回 `FALSE`。 |'
- en: '| numeric | No | It checks if the value of the form element contains anything
    other than numeric characters. It will return `FALSE` if the form element contains
    anything other than that. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| numeric | 否 | 它检查表单元素的值是否只包含数字字符。如果表单元素包含除数字以外的任何内容，它将返回 `FALSE`。 |'
- en: '| integer | No | It checks if the value of the form element contains anything
    other than integer values. It will return `FALSE` if the form element contains
    anything other than that. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| integer | 否 | 它检查表单元素的值是否只包含整数。如果表单元素包含除整数以外的任何内容，它将返回 `FALSE`。 |'
- en: '| decimal | Yes | It checks if the value of the form element contains a decimal
    value, that is a number separated with a decimal point (`.`), otherwise it will
    return `FALSE`. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| decimal | 是 | 它检查表单元素的值是否包含十进制值，即用小数点（`.`）分隔的数字，否则它将返回 `FALSE`。 |'
- en: '| is_natural | No | It checks if the value of the form element contains anything
    other than natural numbers—that is to say anything other than 1, 2, 3, 4, 5, and
    so on. It will return `FALSE` if the form element contains anything other than
    that. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| is_natural | 否 | 它检查表单元素的值是否只包含自然数——也就是说，除了 1、2、3、4、5 等等之外的内容。如果表单元素包含除这些之外的内容，它将返回
    `FALSE`。 |'
- en: '| is_natural_no_zero | No | It checks if the value of the form element contains
    anything other than natural numbers, which are greater than zero. It will return
    `FALSE` if the value is anything other than natural numbers or zero. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| is_natural_no_zero | 否 | 它检查表单元素的值是否只包含大于零的自然数。如果值不是自然数或零，它将返回 `FALSE`。 |'
- en: '| valid_email | No | It checks if the value of the form element contains a
    valid e-mail as calculated by Regular Expression within CodeIgniter. It will return
    `FALSE` if the form element does not contain a valid e-mail address. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| valid_email | 否 | 它检查表单元素的值是否包含由 CodeIgniter 内部的正则表达式计算出的有效电子邮件。如果表单元素不包含有效电子邮件地址，它将返回
    `FALSE`。 |'
- en: '| valid_emails | No | It checks if the value of the form element contains valid
    e-mail addresses as calculated by Regular Expression within CodeIgniter. It will
    return `FALSE` if the form element does not contain a valid e-mail address. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| valid_emails | 否 | 它检查表单元素的值是否包含由 CodeIgniter 内部的正则表达式计算出的有效电子邮件地址。如果表单元素不包含有效电子邮件地址，它将返回
    `FALSE`。 |'
- en: '| valid_ip | No | It checks if the supplied IP address is valid. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| valid_ip | 否 | 它检查提供的 IP 地址是否有效。 |'
- en: '| valid_base64 | No | It returns `FALSE` if the supplied string contains anything
    other than valid Base64 characters. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| valid_base64 | 否 | 如果提供的字符串包含除有效的 Base64 字符以外的任何内容，它将返回 `FALSE`。 |'
- en: There are also some basic config changes we'll need to make before we start
    working through our recipes. We're going to amend the `path/to/codeigniter/application/config/config.php`
    file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始处理我们的食谱之前，我们需要做一些基本的配置更改。我们将修改 `path/to/codeigniter/application/config/config.php`
    文件。
- en: '| Config Item | Change to Value | Description |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 配置项 | 更改为值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `$config[''global_xrsf_filtering'']` | TRUE | It specifies whether CodeIgniter
    always filters for Cross-Site Scripting. For security purposes it is recommended
    that this is set to `TRUE`. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''global_xrsf_filtering'']` | 是 | 它指定 CodeIgniter 是否始终过滤跨站脚本。出于安全考虑，建议将其设置为
    `TRUE`。 |'
- en: '| `$config[''csrf_protection'']` | TRUE | It specifies whether to use Cross-Site
    Request Forgery protection. For security purposes it is recommended that this
    is set to `TRUE`. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''csrf_protection'']` | TRUE | 它指定是否使用跨站请求伪造保护。出于安全考虑，建议将其设置为 `TRUE`。
    |'
- en: '| `$config[''csrf_token_name'']` | Your own string | It specifies that if the
    user closes his/her browser the session becomes void. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''csrf_token_name'']` | 您自己的字符串 | 它指定如果用户关闭他的/她的浏览器，会话将变为无效。 |'
- en: '| `$config[''csrf_cookie_name'']` | Another string of your choice | It specifies
    whether the cookie should be encrypted on the user''s computer. For security purposes
    this should be set to `TRUE`. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''csrf_cookie_name'']` | 您选择的另一个字符串 | 它指定了是否应在用户的计算机上对cookie进行加密。出于安全考虑，应将其设置为
    `TRUE`。 |'
- en: '| `$config[''csrf_expire'']` | 7200 | It specifies the length of time in seconds.
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''csrf_expire'']` | 7200 | 它指定了以秒为单位的时间长度。 |'
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the following files in your CodeIgniter install:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 CodeIgniter 安装中创建以下文件：
- en: '`/path/to/codeigniter/application/controllers/form.php`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/form.php`'
- en: '`/path/to/codeigniter/application/views/new_record.php`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/new_record.php`'
- en: 'Add the following code into the `path/to/codeigniter/application/controllers/form.php`
    file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `path/to/codeigniter/application/controllers/form.php` 文件中：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following code into the `path /to/codeigniter/application/views/new_record.php`
    file:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `path /to/codeigniter/application/views/new_record.php` 文件中：
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'CodeIgniter will first run `public function index()`, which will immediately
    redirect to `public function submit_form()`.The `submit_form()` function will
    set our error delimiters with the line `$this->form_validation->set_error_delimiters('''',
    ''<br />'');` and then list the validation rules for each form element:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter 首先运行 `public function index()`，这将立即重定向到 `public function submit_form()`。`submit_form()`
    函数将使用以下行设置我们的错误定界符 `$this->form_validation->set_error_delimiters('', '<br />');`
    并列出每个表单元素的验证规则：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As the form is being run for the first time `$this->form_validation->run()`
    will return `FALSE` and so load the view file `$this->load->view(''new_record'');`,
    which will render the form to the user. The user can then enter his/her details
    into the form. Once the user clicks on the **Submit** button, CodeIgniter again
    loads public function `submit_form()`, but this time, as the form is being submitted
    the validation rules are applied to the data being submitted. CodeIgniter will
    compare the data submitted against the rules and return `FALSE` if that data fails
    to match the rules in validation. If those rules are not met, the user will see
    error messages in the view. The following code checks if there are any validation
    errors, if so it will display them one by one:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单首次运行时，`$this->form_validation->run()` 将返回 `FALSE`，因此加载视图文件 `$this->load->view('new_record');`，这将向用户渲染表单。用户可以随后将他的/她的详细信息输入到表单中。一旦用户点击**提交**按钮，CodeIgniter
    再次加载公共函数 `submit_form()`，但这次，由于表单正在提交，验证规则将应用于提交的数据。CodeIgniter 将比较提交的数据与规则，如果数据未通过验证规则，则返回
    `FALSE`。如果这些规则未满足，用户将在视图中看到错误消息。以下代码检查是否存在任何验证错误，如果有，则逐个显示：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Preparing user input
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备用户输入
- en: The validation rules can also be used to prepare input for you. For example,
    you can `trim()` whitespace from the input or apply `htmlspecialchars()`. Any
    PHP function can be used, as long as that function accepts one parameter as an
    argument by default.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 验证规则也可以用来为您准备输入。例如，您可以从输入中删除空白字符或应用 `htmlspecialchars()`。只要该函数默认接受一个参数作为参数，就可以使用任何
    PHP 函数。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s assume that we want to `trim()` whitespaces from the beginning and end
    of the input and generate an `md5` hash of the input:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要从输入的开始和结束处删除空白字符并生成输入的 `md5` 哈希：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Sticky form elements in CodeIgniter
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CodeIgniter中的粘性表单元素
- en: It is good for user experience to offer feedback; we do this in the preceding
    sections with `validation_errors()`, but it is also useful to keep user data in
    form elements to save them having to re-type everything, should there be an error.
    To do this, we need to use CodeIgniter's `set_value()` function.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 提供反馈对用户体验很有好处；我们在前面的部分中使用 `validation_errors()` 来做这件事，但保留用户数据在表单元素中也很有用，以避免在出现错误时需要重新输入所有内容。为此，我们需要使用
    CodeIgniter 的 `set_value()` 函数。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that you load `$this->load->helper('form');` from within the `__constructor()`
    of the controller; however, you can always autoload the helper from `/path.to/codeigniter/application/config/autoload.php`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在控制器中的 `__constructor()` 内加载 `$this->load->helper('form');`；然而，你始终可以从 `/path.to/codeigniter/application/config/autoload.php`
    中自动加载辅助函数。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We're going to edit the `/path/to/codeigniter/application/views/new_record.php`
    file.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编辑 `/path/to/codeigniter/application/views/new_record.php` 文件。
- en: 'Amend the file to show the following (changes in bold):'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件以显示以下内容（粗体表示更改）：
- en: '[PRE19]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Essentially, it is exactly the same functionality as the *Validating User Input*
    recipe, except that now the CodeIgniter function, `set_value()`, populates the
    form element value with the data submitted previously by the user.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，这与 *验证用户输入* 食谱中的功能完全相同，但现在 CodeIgniter 函数 `set_value()` 将用户之前提交的数据填充到表单元素值中。
- en: Displaying errors next to form items
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表单项旁边显示错误
- en: In the preceding example, we displayed errors one by one at the top of the HTML
    page; however, you may wish to display each individual error closer to the form
    element to which it refers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们在 HTML 页面的顶部逐个显示错误；然而，你可能希望将每个单独的错误显示在它所引用的表单元素附近。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We're going to amend the `/path/to/codeigniter/application/views/new_record.php`
    file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改 `/path/to/codeigniter/application/views/new_record.php` 文件。
- en: 'Amend the code to reflect the following (changes in bold):'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改代码以反映以下内容（粗体表示更改）：
- en: '[PRE20]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Essentially, it's exactly the same validation functionality as the preceding
    recipe; the only change is how we're displaying the errors. We have removed the
    line `<p><?php echo validation_errors(); ?></p>`, as we're not listing the errors
    one by one. We have added the CodeIgniter's `form_error()` statement, passing
    it the name of the HTML form element so that if CodeIgniter's validation class
    discovers that the posted form data does not meet the parameters assigned to it
    as validation rules, an error will be displayed above the form element.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，这与前面的食谱中的验证功能完全相同；唯一的区别是我们显示错误的方式。我们已经移除了 `<p><?php echo validation_errors();
    ?></p>` 这一行，因为我们不是逐个列出错误。我们添加了 CodeIgniter 的 `form_error()` 语句，传递给它 HTML 表单元素的名称，这样如果
    CodeIgniter 的验证类发现提交的表单数据不符合分配给它的验证规则，错误将显示在表单元素上方。
- en: Reading files from the filesystem
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件系统中读取文件
- en: Although you're probably going to be writing and reading data in a database
    you will certainly come in contact with the requirement to write something to
    the disk, and read from files stored on it. CodeIgniter can support several methods
    for interacting with files.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可能会在数据库中编写和读取数据，但你肯定会接触到将内容写入磁盘和从存储在其上的文件中读取的需求。CodeIgniter 可以支持多种与文件交互的方法。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'There are no configuration options to change here, but ensure that you load
    the file helper in your controller constructor (and also the `url` helper):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有配置选项可以更改，但请确保你在控制器构造函数中加载文件辅助函数（以及 `url` 辅助函数）：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We''re going to read files from the disk and display details about them to
    a view. Firstly, we''re going to create two files:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将读取磁盘上的文件并将它们的详细信息显示给视图。首先，我们将创建两个文件：
- en: '`/path/to/codeigniter/application/controllers/file.php`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/file.php`'
- en: '`/path/to/codeigniter/application/views/file/view_file.php`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/file/view_file.php`'
- en: 'Add the following code into `/path/to/codeigniter/application/controllers/file.php`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `/path/to/codeigniter/application/controllers/file.php`：
- en: '[PRE22]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following code into `/path/to/codeigniter/application/views/files/view_file.php`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `/path/to/codeigniter/application/views/files/view_file.php`：
- en: '[PRE23]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The business end of this is the controller, `function view_all_files()`. We're
    doing three things. First, is setting the target directory with which we wish
    to read the line `$data['dir'] = '/full/path/to/read';` obviously replacing '`/full/path/to/read'`
    with the actual path.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的业务逻辑是控制器中的 `function view_all_files()` 函数。我们做了三件事。首先，是设置我们希望读取的目标目录，使用
    `$data['dir'] = '/full/path/to/read';` 这行代码，显然将 '`/full/path/to/read'` 替换为实际路径。
- en: We then pass `$data['dir']` to the CodeIgniter function, which does the heavy
    lifting for us, `get_dir_file_info()` returns an array for every item in the target
    directory. We store this in `$data['files']`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将 `$data['dir']` 传递给 CodeIgniter 函数，它为我们做繁重的工作，`get_dir_file_info()` 为目标目录中的每个项目返回一个数组。我们将其存储在
    `$data['files']` 中。
- en: '`$this->load->view(''files/view_file'', $data);` calls the HTML template, passing
    to it the files array, which in turn loops through the `$files` array, outputting
    to an HTML table.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`$this->load->view(''files/view_file'', $data);` 调用HTML模板，将其文件数组传递给它，然后它反过来遍历
    `$files` 数组，输出到HTML表格中。'
- en: We also use the PHP function `is_dir()` to test whether an item is a directory
    or not; if it is, we make it bold in the HTML code—for no other reason than it's
    good to know what you're looking at.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用PHP函数 `is_dir()` 来测试一个项目是否是目录；如果是，我们在HTML代码中将其加粗——没有其他原因，只是知道你在看什么是个好习惯。
- en: It would be a great idea to move much of this functionality to a library or
    helper so that it can be more easily shared by other parts of your application
    if necessary.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将这部分功能移动到库或辅助函数中是个不错的想法，这样在必要时可以更容易地被应用程序的其他部分共享。
- en: Writing files to the filesystem
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文件写入文件系统
- en: If you're reading from a disk (as we have seen previously), you'll probably
    want to write to a disk. Now, we'll look at creating several types of files and
    writing them to a location on the disk.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在从磁盘读取（如我们之前所见），你可能希望将数据写入磁盘。现在，我们将查看创建几种类型的文件并将它们写入磁盘上的位置。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to amend the file:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改以下文件：
- en: '`/path/to/codeigniter/application/controllers/write_file.php`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/write_file.php`'
- en: 'Amend `/path/to/codeigniter/application/controllers/file/file.php` to reflect
    the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 `/path/to/codeigniter/application/controllers/file/file.php` 以反映以下内容：
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `public function write()` function sets the `$data_to_write` variable to
    a string; however, this could be amended to accept user input, database results,
    and so on. The `$path` array is also defined, this should be the full path with
    the file extension. The destination directory should have enough permissions to
    allow CodeIgniter to write to it. Then, we test for the return result of the CodeIgniter
    function, `write_file()`. If there was an error, we display a short message; however,
    you can amend this, perhaps report to the error log. If successful it displays
    a success message; again this can also be amended to other behavior.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`public function write()` 函数将 `$data_to_write` 变量设置为一个字符串；然而，这可以被修改为接受用户输入、数据库结果等。`$path`
    数组也被定义，这应该是带有文件扩展名的完整路径。目标目录应该有足够的权限允许CodeIgniter写入。然后，我们测试CodeIgniter函数 `write_file()`
    的返回结果。如果有错误，我们显示一条简短的消息；然而，你可以修改它，也许报告到错误日志。如果成功，它将显示一条成功消息；同样，这也可以被修改为其他行为。'
- en: Creating and downloading ZIP files
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和下载ZIP文件
- en: You may wish to generate ZIP folders from your application and force a download
    for your users; for example, if you have a group of files, such as a press pack,
    which you wish to be kept together, or a set of CSV files. Saving them into a
    ZIP file and allowing a download is a great way to do this.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望从你的应用程序中生成ZIP文件夹并强制用户下载；例如，如果你有一组文件，如新闻包，你希望它们保持在一起，或者一组CSV文件。将它们保存到ZIP文件中并允许下载是做这件事的一个很好的方法。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create a new file:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新文件：
- en: '`/path/to/codeigniter/application/controllers/zip.php`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/zip.php`'
- en: 'And copy the following code into it:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码复制到其中：
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is actually quite simple, we start by declaring a `$file_name`. This is
    a string, you'll notice that the filename also contains a folder name `my_zipped_files_folder`—you
    don't have to include a folder but if you do CodeIgniter will automatically create
    a folder in the ZIP archive.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上非常简单，我们首先声明一个 `$file_name`。这是一个字符串，你会注意到文件名还包含一个文件夹名 `my_zipped_files_folder`——你不必包含文件夹，但如果你这样做，CodeIgniter
    将会自动在ZIP存档中创建一个文件夹。
- en: 'We then create some data—in this case it is written as a string of text; however,
    it could easily be output from a database. For example, we could change the `$data`
    line to:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一些数据——在这种情况下，它被写成一个文本字符串；然而，它可以从数据库中轻松输出。例如，我们可以将 `$data` 行更改为：
- en: '[PRE26]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: After we create our `$data` we then create the date, which we'll use in the
    filename for our ZIP. The line `$this->zip->add_data($file_name, $data);` takes
    as argument the filename and data we created earlier and creates a file inside
    the ZIP file and fills it with the string in `$data`. `$this->zip->archive('/path/to/your/zip/folder/'.$date.'.zip');`
    will write the ZIP to the disc using `$date` as the ZIP filename. `$this->zip->download($date.'.zip');`
    forces the ZIP file to open in the client browser and `$this->zip->clear_data();`
    will clear the ZIP file from the cache.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建 `$data` 之后，我们接着创建日期，我们将使用该日期作为 ZIP 文件名。行 `$this->zip->add_data($file_name,
    $data);` 将我们之前创建的文件名和数据作为参数，并在 ZIP 文件内创建一个文件，并用 `$data` 中的字符串填充它。`$this->zip->archive('/path/to/your/zip/folder/'.$date.'.zip');`
    将使用 `$date` 作为 ZIP 文件名将 ZIP 文件写入磁盘。`$this->zip->download($date.'.zip');` 将强制 ZIP
    文件在客户端浏览器中打开，而 `$this->zip->clear_data();` 将清除 ZIP 文件缓存。
- en: Uploading files with CodeIgniter
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter 上传文件
- en: CodeIgniter comes with very good file uploading support, which can take a lot
    of the hassle out of writing upload functions.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter 提供了非常好的文件上传支持，这可以减少编写上传函数的许多麻烦。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'There are some settings you should be aware of which you''ll probably need
    to change for your environment. Firstly, ensure that you load the upload library
    using:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意一些设置，您可能需要根据您的环境进行更改。首先，确保您使用以下方式加载上传库：
- en: '[PRE27]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is a table of settings that should be placed in the `$config`
    array in the controller you are using, such as the following `Fileupload` controller:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在您使用的控制器（如以下 `Fileupload` 控制器）中的 `$config` 数组中应放置的设置表：
- en: '| Setting | Default | Change to | Description |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| Setting | Default | Change to | Description |'
- en: '| --- | --- | --- | --- |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `upload_path` | None | None | It specifies the path to the folder where the
    uploaded file should go. Ensure that you have set the correct permissions to enable
    CodeIgniter to write to it. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `upload_path` | None | None | 它指定了上传文件应放入的文件夹路径。请确保您已设置正确的权限以启用 CodeIgniter
    向其写入。 |'
- en: '| `allowed_types` | None | None | It specifies the allowed mime types, which
    are allowed in the upload. This can be useful as it allows you to white list uploaded
    file types; that is, it allows you to define only allowed types. You should separate
    each type with a pipe (`&#124;`). For example:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '| `allowed_types` | None | None | 它指定了允许上传的 MIME 类型。这很有用，因为它允许您将上传的文件类型列入白名单；也就是说，它允许您仅定义允许的类型。您应该使用管道（`&#124;`）分隔每个类型。例如：'
- en: '[PRE28]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `file_name` | None | Desired file name | If this value is set, CodeIgniter
    will attempt to rename the file to this value on upload. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `file_name` | None | Desired file name | 如果设置了此值，CodeIgniter 将在上传时尝试将文件重命名为此值。
    |'
- en: '| `overwrite` | FALSE | TRUE/FALSE | CodeIgniter looks in the upload destination
    folder to see if a file with a matching file name already exists. If this is set
    to `TRUE` that file will be overwritten; if it is set to `FALSE`, a number will
    be appended to the file name. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `overwrite` | FALSE | TRUE/FALSE | CodeIgniter 会检查上传目标文件夹中是否存在具有匹配文件名的文件。如果设置为
    `TRUE`，则该文件将被覆盖；如果设置为 `FALSE`，则会在文件名后附加一个数字。 |'
- en: '| `max_size` | 0 | None | It specifies the maximum size in kilobytes that the
    file is allowed to be. Setting it to zero will tell CodeIgniter that there is
    no limit. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `max_size` | 0 | None | 它指定了文件允许的最大大小（以千字节为单位）。将其设置为零将告诉 CodeIgniter 没有限制。
    |'
- en: '| `max_width` | 0 | None | It specifies the maximum width in pixels. Setting
    it to zero will tell CodeIgniter that there is no limit. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `max_width` | 0 | None | 它指定了以像素为单位的最大宽度。将其设置为零将告诉 CodeIgniter 没有限制。 |'
- en: '| `max_height` | 0 | None | It specifies the maximum height in pixels. Setting
    it to zero will tell CodeIgniter that there is no limit. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `max_height` | 0 | None | 它指定了以像素为单位的最大高度。将其设置为零将告诉 CodeIgniter 没有限制。 |'
- en: '| `max_filename` | 0 | None | It specifies the maximum character file name
    length of the uploaded file. Setting it to zero will tell CodeIgniter that there
    is no limit. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `max_filename` | 0 | None | 它指定了上传文件的文件名最大字符长度。将其设置为零将告诉 CodeIgniter 没有限制。
    |'
- en: '| `encrypt_name` | FALSE | TRUE/FALSE | It tells CodeIgniter that you wish
    to encrypt the file name of the image on upload. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `encrypt_name` | FALSE | TRUE/FALSE | 它告诉 CodeIgniter 您希望在上传时加密图像的文件名。 |'
- en: '| `remove_spaces` | TRUE | TRUE/FALSE | It specifies if you want whitespace
    removed from the filename on upload. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `remove_spaces` | TRUE | TRUE/FALSE | 它指定了您是否希望在上传时从文件名中删除空格。 |'
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create two files:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个文件：
- en: '`/path/to/codeigniter/application/controllers/fileupload.php`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/fileupload.php`'
- en: '`/path/to/codeigniter/application/views/upload/upload.php`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/upload/upload.php`'
- en: 'Add the following code into the file `/path/to/codeigniter/application/controllers/fileupload.php`:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件`/path/to/codeigniter/application/controllers/fileupload.php`中：
- en: '[PRE29]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following code into the file `/path/to/codeigniter/application/views/upload.php`:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件`/path/to/codeigniter/application/views/upload.php`中：
- en: '[PRE30]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is thankfully very simple; when `Fileupload` is run `function index()`
    will `redirect()` to `function upload()`, which will in turn load the HTML upload
    form. Once a user has submitted that form `function upload()` will run again and
    attempt to upload the file with the CodeIgniter function, `do_upload()`. The `do_upload()`
    function will perform the task of uploading the file and preparing it for writing
    to the filesystem such as checking that the file size, file type, and so on match
    your settings, ensuring that the upload destination directory exists and is writable,
    and finally using the PHP function `move_uploaded_file()` it'll complete the task
    of uploading the file.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这很幸运地非常简单；当`Fileupload`运行时，`function index()`将`redirect()`到`function upload()`，然后`function
    upload()`将加载HTML上传表单。一旦用户提交了该表单，`function upload()`将再次运行并尝试使用CodeIgniter函数`do_upload()`上传文件。`do_upload()`函数将执行上传文件的任务，并为写入文件系统做准备，例如检查文件大小、文件类型等是否与你的设置匹配，确保上传目标目录存在且可写，最后使用PHP函数`move_uploaded_file()`来完成上传文件的任务。
- en: The `if` statement catches the result of this; if `TRUE` the file is uploaded
    successfully and the success form is displayed, the `$data` array is populated
    with the output of the CodeIgniter function `$this->upload->data()`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句捕获了这个结果；如果返回`TRUE`，文件上传成功，并显示成功表单，`$data`数组被填充了CodeIgniter函数`$this->upload->data()`的输出。'
- en: However, if `do_upload()` returned `FALSE`, the HTML upload form is displayed
    again, this time with an error message to the user.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果`do_upload()`返回`FALSE`，HTML上传表单将再次显示，这次会向用户显示错误消息。
- en: There's more...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'You''ll probably get a few errors the first time you try this, usually because
    you have an incorrect upload path, or that destination folder could have the wrong
    permissions assigned to it. It''ll take a little tweaking to get it right. The
    following are some of the more common errors you''ll get:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你第一次尝试时可能会遇到一些错误，通常是因为上传路径不正确，或者目标文件夹可能被分配了错误的权限。可能需要一点调整才能正确设置。以下是一些更常见的错误：
- en: '**The upload path does not appear to be valid**: This means you''ve put the
    wrong value in `$config[''upload_path'']`, check that you have the correct path
    to your uploads folder. Ensure that you have a trailing slash / at the end of
    your path.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上传路径似乎不正确**：这意味着你在`$config[''upload_path'']`中输入了错误的值，请检查你是否有了正确的上传文件夹路径。确保你的路径末尾有一个尾随斜杠
    /。'
- en: '**The upload destination folder does not appear to be writable**: This means
    the directory you want to upload doesn''t have write permissions; usually this
    can be fixed on the command line by `chmod 777 -R [dir _name]` where `[dir_name]`
    is the path to the directory you want to upload to. Naturally, having a folder
    with permissions of `777` might cause you a headache later on, so ensure that
    the upload folder is outside of the web root.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上传目标文件夹似乎不可写**：这意味着你想要上传的目录没有写权限；通常可以在命令行上通过`chmod 777 -R [dir_name]`来修复，其中`[dir_name]`是你想要上传到的目录的路径。当然，拥有权限为`777`的文件夹可能会给你带来麻烦，所以请确保上传文件夹位于Web根目录之外。'
- en: Creating and using validation callbacks
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用验证回调
- en: Callbacks are used when you want to validate data in a way that may not be supported
    by the CodeIgniter's validation class. The benefit of using callbacks is that
    posted data can be easily validated by a custom function you define, and errors,
    if any, are passed into the error reporting functions.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想以可能不被CodeIgniter验证类支持的方式验证数据时，会使用回调函数。使用回调的好处是可以通过你定义的自定义函数轻松验证提交的数据，如果有错误，错误会被传递到错误报告函数中。
- en: How to do it...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We''re going to amend the file:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改文件：
- en: '`/path/to/codeigniter/application/controllers/form.php`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/form.php`'
- en: 'Amend that file to show the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 修改该文件以显示以下内容：
- en: '[PRE31]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is actually very simple, especially if you have used callbacks in other
    applications. When the user submits the form, CodeIgniter validates the form as
    it would do normally, except that when CodeIgniter comes to validate the user's
    e-mail, the function, `callback_email_check($email)`, is run. This function can
    perform any test and return `TRUE` or `FALSE`, and if `FALSE` a message too.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上非常简单，尤其是如果你在其他应用程序中使用过回调。当用户提交表单时，CodeIgniter 会像通常那样验证表单，除了当 CodeIgniter
    到达验证用户电子邮件时，会运行函数 `callback_email_check($email)`。这个函数可以执行任何测试并返回 `TRUE` 或 `FALSE`，如果
    `FALSE` 则返回一条消息。
- en: Using the language class
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用语言类
- en: One of the most useful features of CodeIgniter is its language class and support.
    It allows you to store content and set that content to belong to various languages;
    it is then possible to switch between languages to display different text in the
    same place holders in the view files. It's really easy to set up and this is how
    you do it.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter 最有用的功能之一是其语言类和对其的支持。它允许你存储内容并将内容设置为属于各种语言；然后可以在视图文件中的相同占位符之间切换语言以显示不同的文本。设置起来非常简单，这就是你如何操作的方法。
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A little information about language files. You'll need to know the rules for
    naming them. Language files are stored at `/path/to/codeigniter/application/system/language/[language_name]/`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 关于语言文件的简要信息。你需要了解它们的命名规则。语言文件存储在 `/path/to/codeigniter/application/system/language/[language_name]/`。
- en: 'Where `[language_name]` is the name of the language you wish to support. So,
    for example, if you want to support English, French, and German you will create
    three file names:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `[language_name]` 是你希望支持的语言的名称。例如，如果你想支持英语、法语和德语，你将创建三个文件名：
- en: '`/path/to/codeigniter/application/language/english/en_lang.php`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/english/en_lang.php`'
- en: '`/path/to/codeigniter/application/language/french/fr_lang.php`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/french/fr_lang.php`'
- en: '`/path/to/codeigniter/application/language/german/de_lang.php`'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/german/de_lang.php`'
- en: You can see above that the three files are named 'en', 'fr', and 'de'. Appended
    to the names is `_lang.php`; you must append each file with `_lang.php` so that
    CodeIgniter knows it is a language file.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到上面的三个文件分别命名为 'en'、'fr' 和 'de'。名称后附加的是 `_lang.php`；你必须将每个文件附加 `_lang.php`，这样
    CodeIgniter 才知道它是一个语言文件。
- en: How to do it...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'So, in order to create an English language file create the following files:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了创建一个英语语言文件，你需要创建以下文件：
- en: '`/path/to/codeigniter/application/system/language/english/en_lang.php`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/system/language/english/en_lang.php`'
- en: '`/path/to/codeigniter/application/controllers/lang.php`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/lang.php`'
- en: '`/path/to/codeigniter/application/views/lang/english.php`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/lang/english.php`'
- en: Add the following code into `/path/to/codeigniter/application/controllers/lang.php`
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `/path/to/codeigniter/application/controllers/lang.php`
- en: '[PRE32]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Add the following code into `/path/to/codeigniter/application/views/lang/form.php`
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `/path/to/codeigniter/application/views/lang/form.php`
- en: '[PRE33]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Add the following code into `/path/to/codeigniter/language/english/en_lang.php`
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `/path/to/codeigniter/application/language/english/en_lang.php`
- en: '[PRE34]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the constructor of the controller `/path/to/codeigniter/application/controllers/lang.php`
    we''re loading helpers, such as form and URL, but we''re also doing two language-related
    things, loading the language helper and setting the language to be used:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器 `/path/to/codeigniter/application/controllers/lang.php` 的构造函数中，我们正在加载辅助函数，如表单和
    URL，但我们也在做两个与语言相关的事情：加载语言辅助函数并设置要使用的语言：
- en: '[PRE35]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Where `'en'` is the language and `'English'` is the folder we're storing all
    English-related content in.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `'en'` 是语言，`'English'` 是我们存储所有与英语相关内容的文件夹。
- en: 'We''re loading the language helper and declaring the language filename and
    the language to be used, specifically the line:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在加载语言辅助函数并声明语言文件名和要使用的语言，具体如下：
- en: '[PRE36]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here, the first parameter is the name of the language file minus the `_lang.php`
    (so en_lang.php will be just `'en'`, `fr_lang.php` will just be `'fr'` and so
    on). The second parameter is the language (in this case, it is the folder in the
    `/path/to/codeigniter/application/language/` folder).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，第一个参数是语言文件名（不带 `_lang.php`），所以 en_lang.php 将是 `'en'`，fr_lang.php 将是 `'fr'`
    等等。第二个参数是语言（在这种情况下，它是 `/path/to/codeigniter/application/language/` 文件夹中的文件夹）。
- en: Once we have loaded the language class and defined the correct language and
    filename, we can then begin to pull out items in the `$lang` array. The way we
    pull items out of the `$lang` array is by echoing `$this->lang->line(array_element_name);`
    so, to pull out the form title we would write echo `$this->lang->line('form_title');`
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加载了语言类并定义了正确的语言和文件名，我们就可以开始从 `$lang` 数组中提取项目。我们从 `$lang` 数组中提取项目的方式是通过输出
    `$this->lang->line(array_element_name);`，因此，要提取表单标题，我们将编写 `echo $this->lang->line('form_title');`
- en: Confirming cookie acceptance from the user
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确认用户接受cookie
- en: Various states and regions now require websites to ask their users if they approve
    of that website writing cookies to their computer. There is some debate as to
    how this can be provisioned by the website and what constitutes approval from
    the user. You may have noticed that recently websites display a notice to the
    user requesting approval. Something called Implied Consent is the current thinking;
    a notice is shown informing the user that if they continue to use the site they
    are happy with the cookies being written.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在许多州和地区要求网站询问用户是否同意该网站向他们的计算机写入cookie。关于网站如何提供这种服务以及用户的同意构成什么存在一些争议。你可能已经注意到，最近网站向用户显示了一个请求批准的通知。所谓的默示同意是目前的观点；显示一个通知告知用户，如果他们继续使用该网站，他们将满意cookie的写入。
- en: The following recipe does just that; and a notice is shown to the user that
    will disappear if they click on a link indicating they are happy with cookies
    being written.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配方正是如此；并且会向用户显示一个通知，如果他们点击链接表示他们同意写入cookie，则该通知会消失。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need to make sure some config variables are set for us to be able to read
    and write cookies to a user’s computer.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保一些配置变量被设置，以便我们能够读取和写入用户的计算机上的cookie。
- en: 'Open the `/path/to/codeigniter/application/config/config.php` file and make
    the following changes:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `/path/to/codeigniter/application/config/config.php` 文件并做出以下更改：
- en: '| $config array items | Description |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| $config 数组项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `$config[‘cookie_prefix’] = “”;` | It specifies if you wish for a character
    to be there before the cookie name; for example, `$config[‘cookie_prefix’] = “thisprefix_”;`
    will produce a cookie called `thisprefix_cookie_con`’ (`cookie_conf` being the
    example cookie, in your application you will replace it with the cookie name you
    are working with). |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `$config[‘cookie_prefix’] = “”;` | 它指定了是否希望在cookie名称之前有一个字符；例如，`$config[‘cookie_prefix’]
    = “thisprefix_”;` 将生成一个名为 `thisprefix_cookie_con` 的cookie（`cookie_conf` 是示例cookie，在你的应用程序中，你将用你正在处理的cookie名称替换它）。
    |'
- en: '| `$config[‘cookie_domain’] = “”;` | It specifies the domain of the server;
    if you are developing on local host, it is best to leave this value as blank,
    replacing with the domain name and path once you move out of a localhost environment.
    |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `$config[‘cookie_domain’] = “”;` | 它指定了服务器的域名；如果你在本地主机上进行开发，最好将此值留空，一旦你离开本地主机环境，再替换为域名和路径。
    |'
- en: '| `$config[‘cookie_path’] = “/”;` | It specifies the path to the cookie—chances
    are you’ll want this to remain `/`. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `$config[‘cookie_path’] = “/”;` | 它指定了cookie的路径——你可能会想要保持它为 `/`。 |'
- en: '| `$config[‘cookie_secure’] = FALSE;` | It specifies if you wish to encrypt
    the cookie value, TRUE if you want it to be encrypted and FALSE if not. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `$config[‘cookie_secure’] = FALSE;` | 它指定了是否希望加密cookie值，如果想要加密则设置为TRUE，如果不加密则设置为FALSE。
    |'
- en: How to do it...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We’re going to create two files:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个文件：
- en: '`/path/to/codeigniter/application/controllers/cookie_conf.php`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/cookie_conf.php`'
- en: '`/path/to/codeigniter/application/views/cookie_conf/cookie_conf.php`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/cookie_conf/cookie_conf.php`'
- en: 'Create the file `/path/to/codeigniter/application/controllers/cookie_conf.php`
    and copy the following code into it:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/controllers/cookie_conf.php` 并将以下代码复制到其中：
- en: '[PRE37]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the file `/path/to/codeigniter/application/views/cookie_conf/cookie_conf.php`
    and copy the following code into it:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/cookie_conf/cookie_conf.php` 并将以下代码复制到其中：
- en: '[PRE38]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works...
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'There are a few things going on here but essentially it’s quite simple. Take
    a look at the following flowchart, it gives a pretty good overview of what is
    happening:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了一些事情，但本质上非常简单。看看下面的流程图，它给出了一个相当好的概述：
- en: '![How it works...](img/2308OS_05_1.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2308OS_05_1.jpg)'
- en: We start with the page being loaded. Does the cookie exist? The following code
    is from the `cookie_conf` controller. It checks to see if a cookie named `cookie_conf`
    already exists and if not will create that cookie with a value of `cookie-conf-unconfirmed`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从页面加载开始。cookie存在吗？以下代码来自`cookie_conf`控制器。它检查是否存在名为`cookie_conf`的cookie，如果不存在，则创建该cookie，其值为`cookie-conf-unconfirmed`。
- en: '[PRE39]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The following code is also from `cookie_conf`. After checking for an existence
    of a cookie (creating one if it doesn’t exist), the controller then looks at the
    value of that cookie. If the cookie does not exist or contains the value `cookie-conf-unconfirmed`,
    `$data[‘display_cookie_conf’]` is set to `TRUE`, otherwise it is set to `FALSE`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码也来自`cookie_conf`。在检查cookie是否存在（如果不存在则创建一个）之后，控制器会查看该cookie的值。如果cookie不存在或包含值`cookie-conf-unconfirmed`，则`$data[‘display_cookie_conf’]`被设置为`TRUE`，否则设置为`FALSE`。
- en: '[PRE40]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`cookie_conf` then loads the view. In the view is some PHP code, which checks
    if `$display_cookie_conf` is set and if so looks at its value. If it is `FALSE`,
    the code is skipped over; however, if it is `TRUE`, the HTML code is displayed.
    The user is given two options, one to agree with the cookie policy and the other
    to disagree.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`cookie_conf`随后加载视图。在视图中有一些PHP代码，它检查`$display_cookie_conf`是否已设置，如果是，则查看其值。如果它是`FALSE`，则代码会被跳过；然而，如果它是`TRUE`，则显示HTML代码。用户有两个选择，一个是同意cookie策略，另一个是不同意。'
- en: If the user disagrees, you’ll have to implement your own action on this event.
    The preceding code will respond by echoing out the text `‘You don’t agree to the
    cookie’`; but in real situations you’ll have to decide how you want to proceed.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户不同意，你将不得不实现自己的动作来处理这个事件。前面的代码将通过输出文本`‘您不同意cookie’`来响应；但在实际情况中，你必须决定你想要如何进行。
- en: If the user agrees, the `cookie-conf-container` will slide up and `public function
    agree()` in the `Cookie_conf` controller is called by AJAX, setting the value
    of the cookie from `cookie-cong’unconfirmed’` to `‘confirmed’`.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户同意，`cookie-conf-container`将会滑动上升，并且通过AJAX调用`Cookie_conf`控制器中的`public function
    agree()`，将cookie的值从`cookie-cong’unconfirmed’`更改为`‘confirmed’`。
- en: '[PRE41]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Any subsequent visit will make `cookie_conf` look for that cookie, and as long
    as it exists and contains the value `‘confirmed’` the `‘cookie-cong-container’`
    will not be displayed.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 任何随后的访问都会让`cookie_conf`寻找那个cookie，只要它存在并且包含值`‘confirmed’`，则`‘cookie-cong-container’`将不会显示。
- en: There’s more...
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: I want to mention a couple of gotchas which you might experience while implementing
    the cookie authorization recipe.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我想提及一些你可能在使用cookie授权配方实现过程中遇到的问题。
- en: '**Localhost and Cookies**: Firstly, the domain attribute. If you are developing
    on localhost, you should leave this value blank. Reason being that web browsers
    often have trouble with implementing cookies if domain is set to local host. Why?
    Because browsers are programmed to expect at least two items in the domain attribute
    those being the domain name and a tld, so the browser is expecting something similar
    to domain.com—localhost obviously doesn’t look like that. So for developing in
    localhost, leave the domain attribute blank, replacing with the correct domain
    and path once you move out of the localhost environment.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地主机和Cookies**：首先，是域属性。如果你在本地主机上进行开发，你应该留空这个值。原因是网络浏览器在域设置为本地主机时经常难以实现cookie。为什么？因为浏览器被编程为期望域属性中至少有两个项目，即域名和顶级域名（tld），因此浏览器期望类似domain.com的东西——显然localhost看起来不像那样。所以，在本地主机上进行开发时，请留空域属性，一旦你离开本地主机环境，就替换为正确的域名和路径。'
- en: '**Expire value**: Make sure that you define the expire value as an integer
    rather than a string; so don’t put the expire value in single or double quotes,
    you want this: 12345, and not this: ‘12345’.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过期值**：确保将过期值定义为整数而不是字符串；因此不要将过期值放在单引号或双引号中，你应该这样写：12345，而不是这样：‘12345’。'
