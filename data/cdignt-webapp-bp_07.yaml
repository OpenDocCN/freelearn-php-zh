- en: Chapter 7. Creating an E-Commerce Site
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 创建电子商务网站
- en: This is a small, concise e-commerce application. There's no admin CMS to manage
    products (it would have been too much to write about in this chapter), but there
    is an easy-to-use (and importantly for you easy to adapt) process to display products
    and let customers order them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小型、简洁的电子商务应用程序。没有管理CMS来管理产品（在本章中写太多会过于复杂），但有一个易于使用（并且对于您来说易于适应）的过程来显示产品并让客户订购它们。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Design and wireframes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和线框
- en: Creating the database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Creating models
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Creating views
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: Creating controllers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Putting it all together
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合所有内容
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this project, we will create a simple shopping cart. This application will
    allow customers to view products, filter products by category, and add products
    to their cart.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将创建一个简单的购物车。这个应用程序将允许客户查看产品，按类别过滤产品，并将产品添加到他们的购物车中。
- en: It will also let customers alter their shopping cart by removing items or changing
    the quantity of these items.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将允许客户通过删除项目或更改这些项目的数量来更改他们的购物车。
- en: Finally, there is a customer details form that allows their personal details
    to be saved against an order for processing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一个客户详细信息表，允许将他们的个人详细信息保存到订单中以便处理。
- en: To create the web application for this project, we will create one controller;
    this will handle the display of products, amend the quantities of products in
    the cart, and also handle the processing of orders.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个项目的网络应用程序，我们将创建一个控制器；这将处理产品的显示、修改购物车中产品的数量，并处理订单的处理。
- en: We'll create a language file to store text, which will allow you to have multiple
    language support should that be required.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个语言文件来存储文本，这样在需要的情况下，您就可以拥有多种语言支持。
- en: We'll create all the necessary view files and a model to interface with the
    database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建所有必要的视图文件和一个与数据库接口的模型。
- en: However, this app along with all the others in this book relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you might already
    have, please keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个应用程序以及本书中的其他所有应用程序都依赖于我们在[第1章](ch01.html "第1章。简介和共享项目资源")中做的基本设置，*简介和共享项目资源*；尽管您可以取大量代码并将其放入您可能已经拥有的任何应用程序中，但请记住，第一章中做的设置是这个章节的基础。
- en: So without further ado, let's get on with it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无需多言，让我们开始吧。
- en: Design and wireframes
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计和线框
- en: As always, before we start building, we should take a look at what we plan to
    build.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，在我们开始构建之前，我们应该看看我们打算构建什么。
- en: Firstly, we will provide a brief description of our intent. We plan to build
    an app that will allow people to view products as an online shop. They can sort
    these products by category. Add products to a cart and enter their details to
    create an order. A special code called `order_fulfilment_code` is generated (saved
    in the database in `orders.order_fulfilment_code`). This code will allow you to
    track any order through a payment system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将简要描述我们的意图。我们计划构建一个应用程序，让人们可以像在线商店一样查看产品。他们可以按类别对这些产品进行排序。将产品添加到购物车中，并输入他们的详细信息以创建订单。将生成一个称为`order_fulfilment_code`的特殊代码（保存在`orders.order_fulfilment_code`数据库中）。此代码将允许您通过支付系统跟踪任何订单。
- en: 'Anyway, to get a better idea of what''s happening, let''s take a look at the
    following site map:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，为了更好地了解正在发生的事情，让我们看看以下网站地图：
- en: '![Design and wireframes](img/7093OS_07_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![设计和线框](img/7093OS_07_01.jpg)'
- en: 'So that''s the site map—the first thing to notice is how simple the site is.
    There are only four main areas to this project. Let''s go over each item and get
    a brief idea of what it does:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是网站地图——首先要注意的是网站有多简单。这个项目只有四个主要区域。让我们逐一了解每个项目，并简要了解它们的功能：
- en: '**Home**: This is the initial landing area. The `index()` function displays
    products to view and also displays categories with which a user can filter the
    products to see items related to that category. So, by clicking on the Books category,
    they will see only products that are assigned the category as books.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首页**：这是初始着陆区域。`index()`函数显示要查看的产品，并显示用户可以过滤产品以查看相关项目的类别。因此，通过点击书籍类别，他们将只能看到被分配为书籍类别的产品。'
- en: '**Add to cart**: This processes the addition of a product to the user''s cart.
    The number of items in a cart is presented in the navigation bar at all times.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加到购物车**：这处理将产品添加到用户购物车中的过程。购物车中的项目数量始终在导航栏中显示。'
- en: '**Cart**: This displays a list of items in the cart as well as an option to
    increase or decrease the number of each items in that cart.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**购物车**：这显示了购物车中的项目列表以及增加或减少该购物车中每个项目数量的选项。'
- en: '**Proceed to checkout**: This displays a form to the users, inviting them to
    enter their information. Once they press Go, their order and details are added
    to the database for processing.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前往结账**：这向用户显示一个表单，邀请他们输入信息。一旦他们点击“前往”，他们的订单和详细信息就会被添加到数据库中进行处理。'
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对网站的结构和形式有了相当好的了解，让我们来看看每个页面的线框图。
- en: Home – index()
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首页 – index()
- en: The following screenshot shows you a wireframe from point **1** (the Home (`index()`)
    item) in the site map. Initially, the user is shown a list of products. This list
    is not filtered. On the right-hand side of the wireframe is a list of categories
    (as found in the `categories` table). The user is able to click on these categories
    to filter the results they view on the left-hand side, and clicking on All Categories
    clears the filter once more.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了网站地图中**1**（首页`index()`项）的线框图。最初，用户会看到一个产品列表。该列表未经过筛选。在线框图的右侧是一个类别列表（如`categories`表中所示）。用户可以点击这些类别来筛选左侧查看的结果，点击**所有类别**将再次清除筛选。
- en: Beneath each product is the **Add to cart** button, which allows the user to
    add a particular product to their cart.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个产品下方都有一个**添加到购物车**按钮，允许用户将特定产品添加到购物车中。
- en: '![Home – index()](img/7093OS_07_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![首页 – index()](img/7093OS_07_02.jpg)'
- en: Add to cart – add()
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加到购物车 – add()
- en: The following screenshot shows you a user clicking and adding a product to their
    cart. This is done by clicking on an **Add to** **cart** button below a particular
    product. Clicking on this button will call the `shop` controller's `add()` function,
    which will then call the CodeIgniter `Cart` class' `$this->cart->insert()` function,
    which will add the product to the cart.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了用户点击并添加产品到购物车的过程。这是通过点击特定产品下方的**添加到** **购物车**按钮完成的。点击此按钮将调用`shop`控制器的`add()`函数，然后该函数将调用CodeIgniter
    `Cart`类的`$this->cart->insert()`函数，该函数将产品添加到购物车中。
- en: '![Add to cart – add()](img/7093OS_07_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![添加到购物车 – add()](img/7093OS_07_05.jpg)'
- en: Cart – display_cart()
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 购物车 – display_cart()
- en: The following screenshot shows you a wireframe from point 3 (the Cart `display_cart()`
    item) in the site map. The user is presented with a list of items currently in
    the cart. The `display_cart()` function is accessed in two ways—either by clicking
    on the **Cart** link in the top navigation menu or immediately after clicking
    on **Add to cart** under a product displayed in point **1** (the Home `index()`
    item) in the site map. Adjusting the value in the text box under Quantity and
    pressing the **Update Cart** button will increase or decrease the number of that
    product in the cart.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了网站地图中**3**（购物车`display_cart()`项）的线框图。用户会看到一个当前购物车中的项目列表。`display_cart()`函数可以通过两种方式访问——要么点击顶部导航菜单中的**购物车**链接，要么在点击网站地图中**1**（首页`index()`项）下显示的产品**添加到购物车**后立即进行。
- en: Pressing Proceed to check out will call the `user_details()` function from point
    **4** (the Proceed to checkout item) in the site map.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**前往结账**将调用网站地图中**4**（前往结账项）的`user_details()`函数。
- en: '![Cart – display_cart()](img/7093OS_07_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![购物车 – display_cart()](img/7093OS_07_03.jpg)'
- en: User Details – user_details()
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户详情 – user_details()
- en: The following screenshot shows you a wireframe from point **4** (the Proceed
    to checkout `user_details()` item) in the site map. The user is presented with
    a form in which they can add their contact and delivery details for the order.
    Once the user enters their details and presses Go, their order (content of the
    cart) and contact details are written to the `orders` and `customer` tables, which
    are joined in the `orders` table by the customer ID.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了网站地图中**4**（前往结账`user_details()`项）的线框图。用户会看到一个表单，可以在其中添加他们的联系和配送详情。一旦用户输入详细信息并点击“前往”，他们的订单（购物车内容）和联系详情就会被写入`orders`和`customer`表，这两个表通过客户ID在`orders`表中连接。
- en: '![User Details – user_details()](img/7093OS_07_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![用户详情 – user_details()](img/7093OS_07_04.jpg)'
- en: File overview
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件概览
- en: 'This is a relatively small project, and all in all, we''re only going to create
    seven files; these are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对较小的项目，总的来说，我们只需要创建七个文件；具体如下：
- en: '`/path/to/codeigniter/application/models/shop_model.php`: This provides read/write
    access to the database.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/shop_model.php`: 该文件提供对数据库的读写访问。'
- en: '`/path/to/codeigniter/application/views/shop/display_products.php`: This displays
    a list of products to the user, allows them to add a product to the cart, and
    filters products by categories—as defined in the `categories` table.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/shop/display_products.php`: 该文件向用户显示产品列表，允许他们添加产品到购物车，并按类别过滤产品——如`categories`表中所定义的。'
- en: '`/path/to/codeigniter/application/views/shop/display_cart.php`: This displays
    the contents of the cart to the user. There are form options to amend product
    quantities and proceed to the checkout.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/shop/display_cart.php`: 该文件向用户显示购物车的内容。有表单选项可以修改产品数量并进入结账流程。'
- en: '`/path/to/codeigniter/application/views/shop/user_details.php`: This displays
    a form to the user, allowing them to enter their contact details for their order
    fulfillment. User information is stored in the `customer` table, which is joined
    to the `orders` table—in the `orders` table—by the `customer` table''s primary
    key.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/shop/user_details.php`: 该文件向用户显示一个表单，允许他们输入订单履行的联系详情。用户信息存储在`customer`表中，该表通过`customer`表的主键与`orders`表（在`orders`表中）关联。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`: 该文件在页面顶部提供导航栏。'
- en: '`/path/to/codeigniter/application/controllers/shop.php`: This contains all
    the necessary functions to display products, add products to a cart, amend that
    cart, and process the customer details.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/shop.php`: 该文件包含显示产品、将产品添加到购物车、修改购物车和处理客户详情所需的所有必要函数。'
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: 该文件为应用程序提供语言支持。'
- en: 'The file structure of the preceding seven files is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前述七个文件的文件结构如下：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating the database
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources*, in mind. However, it's not the end of the world if you haven't;
    the code can easily be applied to other situations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你应该已经按照[第1章](ch01.html "第1章。简介和共享项目资源")中所述设置了CodeIgniter和Bootstrap，*简介和共享项目资源*。如果没有，那么你应该知道，本章中的代码是专门针对[第1章](ch01.html
    "第1章。简介和共享项目资源")中的设置编写的。然而，如果你还没有设置，也不是世界末日；代码可以轻松应用于其他情况。
- en: 'First, we''ll build the database. Copy the following MySQL code to your database:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将构建数据库。将以下MySQL代码复制到您的数据库中：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Now take a look at that last bit of SQL code; it's quite big and fiddly. Don't
    panic; all SQL code is available online from this book's support page on the Packt
    website.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看最后那段SQL代码；它相当大且复杂。不要慌张；所有SQL代码都可以从本书在Packt网站上的支持页面在线获取。
- en: You'll see that the first table we create is `ci_sessions`. We need this to
    allow CodeIgniter to manage sessions, specifically, a customer's cart. However,
    this is just the standard session table available from the *CodeIgniter User Guide*,
    so I'll not include a description of that table as it's not technically specific
    to this application. However, if you're interested, there's a description at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到我们首先创建的表是`ci_sessions`。我们需要这个表来允许CodeIgniter管理会话，特别是客户的购物车。然而，这只是从*CodeIgniter用户指南*中可用的标准会话表，因此我不会包括该表的描述，因为它不是技术特定于这个应用程序的。但是，如果你感兴趣，可以在[http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html)找到描述。
- en: Right, let's take a look at each item in each table and see what it means. First
    we will see the `categories` table.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们逐个查看每个表中的每个项目，看看它们代表什么。首先，我们将查看`categories`表。
- en: '| Table: categories |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 表：categories |'
- en: '| --- |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Element** | **Description** |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| `cat_id` | This is the primary key |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `cat_id` | 这是主键 |'
- en: '| `cat_name` | This is the name of the category, and it is displayed as a title
    in the right-hand side category filter list in the `views/shop/display_products.php`
    file |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `cat_name` | 这是分类的名称，并在`views/shop/display_products.php`文件中右侧分类过滤器列表中作为标题显示
    |'
- en: '| `cat_url_name` | This is the short version of the `cat_name` element; it
    is used as the third parameter of the URL when a user clicks on a category in
    the right-hand side category filter list in the `views/shop/display_products.php`
    file |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `cat_url_name` | 这是`cat_name`元素的简短版本；当用户在`views/shop/display_products.php`文件中点击右侧分类过滤器列表中的分类时，它用作URL的第三个参数
    |'
- en: 'Now take a look at the `products` table:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看`products`表：
- en: '| Table: products |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 表：products |'
- en: '| --- |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Element** | **Description** |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| `product_id` | This is the primary key |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `product_id` | 这是主键 |'
- en: '| `product_name` | This is the name of the product |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `product_name` | 这是产品的名称 |'
- en: '| `product_code` | This is a place where you can store your internal reference
    code for the product |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `product_code` | 这是您可以存储产品内部参考代码的地方 |'
- en: '| `product_description` | This is the description of the product |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `product_description` | 这是产品的描述 |'
- en: '| `category_id` | This is the category that the product belongs to, and it
    is the primary key of the `categories` table |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `category_id` | 这是产品所属的分类，也是`categories`表的主键 |'
- en: '| `product_price` | This is the price of the product |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `product_price` | 这是产品的价格 |'
- en: 'Next we will see the `customer` table:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将看到`customer`表：
- en: '| Table: customer |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 表：customer |'
- en: '| --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Element** | **Description** |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| `cust_id` | This is the primary key |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `cust_id` | 这是主键 |'
- en: '| `cust_first_name` | This is the customer''s first name |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `cust_first_name` | 这是客户的姓氏 |'
- en: '| `cust_last_name` | This is the customer''s last name |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `cust_last_name` | 这是客户的姓氏 |'
- en: '| `cust_email` | This is the customer''s e-mail address |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `cust_email` | 这是客户的电子邮件地址 |'
- en: '| `cust_created_at` | This is the MySQL timestamp of the date on which the
    row was created in the database |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `cust_created_at` | 这是数据库中创建行的MySQL时间戳 |'
- en: '| `cust_address` | This is the customer address (payment address) |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `cust_address` | 这是客户地址（支付地址） |'
- en: 'Finally, let''s see the `orders` table:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看`orders`表：
- en: '| Table: orders |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 表：orders |'
- en: '| --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Element** | **Description** |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| `order_id` | This is the primary key |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `order_id` | 这是主键 |'
- en: '| `cust_id` | This is the primary key of the customer from the `customer` table
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `cust_id` | 这是来自`customer`表的客户主键 |'
- en: '| `order_details` | This is a serialized dump of the `cart` table populated
    by the `serialize($this->cart->contents()` `)` line |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `order_details` | 这是`cart`表序列化的输出，由`serialize($this->cart->contents())`行填充
    |'
- en: '| `order_subtotal` | This is the value of the order |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `order_subtotal` | 这是订单的值 |'
- en: '| `order_created_at` | This is the MySQL timestamp of the date the row that
    was created in the database |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `order_created_at` | 这是数据库中创建行的MySQL时间戳 |'
- en: '| `order_closed` | The default value is `0` but can be `1`. `0`; it indicates
    that this is a new order, and `1` is that the order has been fulfilled |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `order_closed` | 默认值是`0`但可以是`1`。`0`表示这是一个新订单，而`1`表示订单已履行 |'
- en: '| `order_fulfilment_code` | This is the value of the `$payment_code` generated
    in the `shop` controller''s `user_details()` function, and it can be used to track
    the order through a payment system |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `order_fulfilment_code` | 这是`shop`控制器中的`user_details()`函数生成的`$payment_code`的值，它可以用来通过支付系统跟踪订单
    |'
- en: '| `order_delivery_address` | This is the delivery address of the order |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `order_delivery_address` | 这是订单的配送地址 |'
- en: We'll also need to make amends to the `config/database.php` file, namely setting
    the database access details, username password, and so on.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对`config/database.php`文件进行修改，即设置数据库访问详情、用户名、密码等。
- en: 'Open the `config/database.php` file and find the following lines:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`config/database.php`文件并找到以下行：
- en: '[PRE2]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now edit the values in the preceding lines, ensuring you substitute these values
    with ones more specific to your setup and situation; so, enter your username,
    password, and so on.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编辑前面的行中的值，确保将这些值替换为更适合您设置和情况的值；因此，输入您的用户名、密码等。
- en: Adjusting the config.php file
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整`config.php`文件
- en: 'There are a few things in this file that we''ll need to configure to support
    sessions and encryption. So open the `config/config.php` file and make the following
    changes:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中有几件事情我们需要配置以支持会话和加密。因此，打开`config/config.php`文件并做出以下更改：
- en: 'We will need to set an encryption key; both sessions and CodeIgniter''s encryption
    functionality require a encryption key to be set in the `$config` array, so find
    the following line:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要设置一个加密密钥；会话和CodeIgniter的加密功能都需要在`$config`数组中设置一个加密密钥，所以找到以下行：
- en: '[PRE3]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Replace it with the following:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE4]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Now obviously, don't actually change the value to literally a-random-string-of-alphanum-characters;
    instead, change it to, er, a random string of alphanum characters—if that makes
    sense? Yeah, you know what I mean.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显然，实际上不要将值改为一个随机的字母数字字符序列；相反，改为，嗯，一个随机的字母数字字符序列——如果这说得通的话？是的，你知道我的意思。
- en: 'Find these lines:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到以下行：
- en: '[PRE5]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Replace the lines with the following:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用以下内容替换这些行：
- en: '[PRE6]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adjusting the routes.php file
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整routes.php文件
- en: 'We want to redirect the user to the `shop` controller rather than the default
    CodeIgniter `welcome` controller. We will need to amend the default controller
    setting in the `routes.php` file to reflect this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将用户重定向到`shop`控制器而不是默认的CodeIgniter `welcome`控制器。我们需要修改`routes.php`文件中的默认控制器设置以反映这一点：
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config/routes.php`文件进行编辑，并找到以下行（文件底部附近）：
- en: '[PRE7]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Firstly, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    that. Instead, we want the default controller to be `shop`. So, find the following
    line:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更改默认控制器。最初在一个CodeIgniter应用程序中，默认控制器被设置为`welcome`；然而，我们不需要它。相反，我们希望默认控制器是`shop`。所以，找到以下行：
- en: '[PRE8]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change it to the following:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改成以下内容：
- en: '[PRE9]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creating the model
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: There is only one model in this project—`shop_model.php`—which contains functions
    that are specific to searching and writing products to the database.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中有且只有一个模型——`shop_model.php`——它包含特定于搜索和将产品写入数据库的函数。
- en: This is our one and only model for this project; let's briefly go over each
    function in it to give us a general idea of what it does, and then we will go
    into more detail in the code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本项目唯一的模型；让我们简要地回顾一下其中的每个函数，以了解其一般功能，然后我们将更详细地进入代码部分。
- en: 'There are five main functions in this model, which are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中有五个主要函数，具体如下：
- en: '`get_product_details()`: This accepts one argument—the `$product_id`—of the
    product being added to the cart and returns a database result object that contains
    information about a specific product. This model function is used by the `shop`
    controller''s `add()` function to fetch the correct details about a product before
    it is added to the cart.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_product_details()`: 这个函数接受一个参数——即将添加到购物车的产品的`$product_id`——并返回一个包含特定产品信息的数据库结果对象。这个模型函数被`shop`控制器的`add()`函数用来在产品添加到购物车之前获取正确的产品详情。'
- en: '`get_all_products()`: This accepts no argument. This model function will return
    a list of products (as defined in the `products` table) to the `shop` controller''s
    `index()` function.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_all_products()`: 这个函数不接受任何参数。这个模型函数将返回产品列表（如`products`表中定义的）到`shop`控制器的`index()`函数。'
- en: '`get_all_products_by_category_name()`: This accepts one argument—`$cat_url_name`
    (defined in the database as `categories.cat_url_name`). This function is called
    if a user has clicked on a category filter link (displayed on the right-hand side
    of the wireframe in the *Home – index()* section of this chapter).'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_all_products_by_category_name()`: 这个函数接受一个参数——`$cat_url_name`（在数据库中定义为`categories.cat_url_name`）。当用户点击了分类筛选链接（在本章“首页
    – index()”部分的页面右侧显示）时，会调用此函数。'
- en: '`get_all_categories()`: This fetches categories from the `categories` table.
    It is used to populate the categories list (displayed on the right-hand side of
    the wireframe in the *Home – index()* section of this chapter).'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_all_categories()`: 这个函数从`categories`表中获取分类。它用于填充分类列表（在本章“首页 – index()”部分的页面右侧显示）。'
- en: '`save_cart_to_database()`: This accepts two arguments: `$cust_data` and `$order_data`.
    The `$cust_data` is data submitted by the user in point **4** (the Proceed to
    checkout `user_details()` item) in the site map, and `$order_data` is the contents
    of their cart. The customer data is added to the `customer` table and the primary
    key that''s generated is used as a foreign key in the `orders` table.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save_cart_to_database()`: 这个函数接受两个参数：`$cust_data` 和 `$order_data`。`$cust_data`
    是用户在网站地图中第 **4** 点（继续结账的 `user_details()` 项目）提交的数据，而 `$order_data` 是他们购物车的内容。客户数据被添加到
    `customer` 表中，生成的主键被用作 `orders` 表的外键。'
- en: That was a quick overview, so let's create the model and discuss how it functions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简要概述，所以让我们创建模型并讨论其功能。
- en: 'Create the `/path/to/codeigniter/application/models/shop_model.php` file and
    add the following code to it:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/path/to/codeigniter/application/models/shop_model.php` 文件中创建文件，并将以下代码添加到其中：
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding `get_product_details()` function returns a list of all products.
    This function is called by the `shop` controller's `index()` function if the user
    hasn't filtered any results, that is, they haven't clicked on a category link
    in the `views/shop/display_products.php` file:products() {
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `get_product_details()` 函数返回所有产品的列表。如果用户没有过滤任何结果，即他们没有在 `views/shop/display_products.php`
    文件中点击类别链接，这个函数将由 `shop` 控制器的 `index()` 函数调用：products() {
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding `get_all_products()` function returns a list of products with
    a filter applied. This function is called by the `shop` controller''s `index()`
    function if the user has filtered the products by a category, that, they have
    clicked on a category link in the `views/shop/display_products.php` file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `get_all_products()` 函数返回应用了过滤条件的产品列表。如果用户通过类别过滤了产品，即他们点击了 `views/shop/display_products.php`
    文件中的类别链接，这个函数将由 `shop` 控制器的 `index()` 函数调用：
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding `get_all_products_by_category_name()` function returns a list
    of all categories in the `categories` table. This model function is called from
    the `shop` controller''s `index()` function to supply data to the product categories
    list on the right-hand side of the `views/shop/display_products.php` file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `get_all_products_by_category_name()` 函数返回 `categories` 表中所有类别的列表。这个模型函数是从
    `shop` 控制器的 `index()` 函数中调用的，以向 `views/shop/display_products.php` 文件右侧的产品类别列表提供数据：
- en: '[PRE13]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding `get_all_categories()` function returns a list of all categories
    in the `categories` table. This list is used in the `views/shop/display_products.php`
    file where a `foreach` loop iterates over the database object and displays the
    categories to the user. A user can then click on a category and filter their results.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `get_all_categories()` 函数返回 `categories` 表中所有类别的列表。这个列表在 `views/shop/display_products.php`
    文件中使用，其中 `foreach` 循环遍历数据库对象并显示类别给用户。用户可以点击一个类别并过滤他们的结果。
- en: 'Now, take a look at the following snippet:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看一下以下片段：
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding `save_cart_to_database()` function saves an order to the database;
    it converts the data in a cart, along with the data entered by the user in the
    `views/shop/user_details.php` file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `save_cart_to_database()` 函数将订单保存到数据库中；它将购物车中的数据以及用户在 `views/shop/user_details.php`
    文件中输入的数据进行转换。
- en: As you can see, the model is fairly straightforward and concise, so let's now
    take a look at the views.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，模型相当直接和简洁，因此现在让我们看看视图。
- en: Creating the views
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'There are four views in this project, and these are as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中有四个视图，具体如下：
- en: '`/path/to/codeigniter/application/views/shop/display_products.php`: This displays
    a list of products to the user and allows them to add products to their cart and
    also filter products.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/shop/display_products.php`: 这个视图向用户显示产品列表，并允许他们添加产品到购物车，也可以过滤产品。'
- en: '`/path/to/codeigniter/application/views/shop/display_cart.php`: This displays
    all products in the user''s cart, allows them to alter the quantities of products
    in their cart, and also gives an option to move to the checkout stage. This is
    a customized version of the cart template available from the CodeIgniter documentation.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/shop/display_cart.php`: 这个视图显示用户购物车中的所有产品，允许他们更改购物车中产品的数量，并提供一个选项跳转到结账阶段。这是从
    CodeIgniter 文档中可用的购物车模板的定制版本。'
- en: '`/path/to/codeigniter/application/views/shop/user_details.php`: This displays
    a form to the user, allowing them to enter information about their order, such
    as their contact details and delivery address.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/shop/user_details.php`: 这个视图向用户显示一个表单，允许他们输入有关订单的信息，例如他们的联系细节和送货地址。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This displays the
    top-level menu. In this project, this is very simple, containing a project name
    and link to go to the `` shop` `` controller and a link named **Cart**; there
    is a variable positioned next to the word Cart, displaying the value (0 by default);
    however, this is in fact the number of items in the cart at any one time. If there
    were seven items in the cart, the link would say Cart (7).'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`：此视图显示顶级菜单。在此项目中，这非常简单，包含项目名称和链接到
    `shop` 控制器以及名为 **购物车** 的链接；旁边有一个变量，显示值（默认为 0）；然而，这实际上是任何时刻购物车中的项目数量。如果购物车中有七个项目，链接将显示为购物车（7）。'
- en: That was a good overview of the views; now let's go over each one, build the
    code, and discuss how they function.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 那是对视图的良好概述；现在让我们逐一查看每个视图，构建代码，并讨论它们的功能。
- en: 'Create the `/path/to/codeigniter/application/views/shop/display_products.php`
    file and add the following code to it:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/shop/display_products.php` 文件，并将以下代码添加到其中：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding block of code outputs a list of products and displays them with
    a description (`products.product_description`), price (`products.product_price`),
    and link to add to cart.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块输出产品列表，并显示描述（`products.product_description`）、价格（`products.product_price`）和添加到购物车的链接。
- en: 'A `foreach` loop is used to iterate over the products in `$query`. The `$query`
    value is populated by data returned by the `get_all_products()` function of `Shop_model`;
    or, if the user has filtered by a category (explained in the following HTML),
    then `$query` is populated by the `get_all_products_by_category_name()` function
    of `Shop_model`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `foreach` 循环遍历 `$query` 中的产品。`$query` 的值由 `Shop_model` 的 `get_all_products()`
    函数返回的数据填充；或者，如果用户已按类别（在下述 HTML 中解释）过滤，则 `$query` 由 `Shop_model` 的 `get_all_products_by_category_name()`
    函数填充：
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding block of code outputs a list of categories that the user can use
    to filter results. We use a `foreach` loop to iterate over the `$cat_query` array.
    This array is supplied by the `get_all_categories()` function of `Shop_model`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块输出用户可以使用以过滤结果的类别列表。我们使用 `foreach` 循环遍历 `$cat_query` 数组。此数组由 `Shop_model`
    的 `get_all_categories()` 函数提供。
- en: 'Create the `/path/to/codeigniter/application/views/shop/display_cart.php` file
    and add the following code to it:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/shop/display_cart.php` 文件，并将以下代码添加到其中：
- en: '[PRE17]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This view is responsible for displaying the contents of the cart to the user
    and also allowing the user to adjust item quantities in the cart.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图负责向用户显示购物车的内容，并允许用户调整购物车中的项目数量。
- en: 'Look at the following line of code; with it, we create the `$i` variable. This
    variable is incremented in the `foreach` loop. We use the `$i` variable to give
    the product quantity textbox a unique name, that is, 1, 2, 3, 4, and so on:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下代码行；通过它，我们创建了 `$i` 变量。这个变量在 `foreach` 循环中递增。我们使用 `$i` 变量给产品数量文本框赋予一个唯一的名称，即
    1、2、3、4，依此类推：
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This `foreach` loop iterates over each item in the CodeIgniter `Cart` class''s
    `$this->cart->contents()` function. Each iteration is treated as the `$item` variable:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `foreach` 循环遍历 CodeIgniter `Cart` 类的 `$this->cart->contents()` 函数中的每个项目。每次迭代被视为
    `$item` 变量：
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After the `foreach` loop, we display a button to the user. The following code
    is for the button that will submit the form along with any adjusted item quantities:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `foreach` 循环之后，我们向用户显示一个按钮。以下代码是用于提交表单以及任何调整后的项目数量的按钮：
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create the `/path/to/codeigniter/application/views/shop/user_details.php` file
    and add the following code to it:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/shop/user_details.php` 文件，并将以下代码添加到其中：
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding block of code creates a form into which the user can enter contact
    details necessary for fulfilling their order.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块创建了一个表单，用户可以输入完成订单所需的联系详细信息。
- en: 'Create the `/path/to/codeigniter/application/views/nav/top_nav.php` file and
    add the following code to it:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/nav/top_nav.php` 文件，并将以下代码添加到其中：
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding block of code creates the navigation menu at the top of the page.
    Take a look at the code in bold, shown again here (restructured):'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块在页面顶部创建导航菜单。请查看以下加粗的代码，此处再次展示（重构后）：
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding block of code displays the word Cart along with a value in brackets.
    This value is initially set to 0 (zero). However, this value is in fact the quantity
    of items in the cart—if no items are in the cart, that number will be zero by
    default.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块显示了与括号中的值一起的单词“Cart”。这个值最初被设置为0（零）。然而，这个值实际上是购物车中的物品数量——如果没有物品在购物车中，这个数字将默认为零。
- en: To start with, we use a PHP ternary operator to switch between displaying zero
    and the actual number of items in the cart. If the number of items is greater
    than zero, then there must be some items in the cart. So, we display that number
    of items, otherwise we display zero.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用PHP三元运算符在显示零和购物车中实际物品数量之间进行切换。如果物品数量大于零，那么购物车中肯定有一些物品。因此，我们显示那个数量，否则显示零。
- en: The word Cart is set in the language file, but what about the value of the number
    of cart items? Where does that come from?
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 单词“Cart”是在语言文件中设置的，但购物车中物品数量的值是从哪里来的呢？
- en: 'The number of items in the cart is calculated from several functions in the
    `shop` controller, which are `index()`, `update_cart()` and `user_details()`.
    Let''s take a look at just one of these (as they all work the same) and see how
    it works in the `index()` function; check out the following code segment from
    the `index()` function:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车中的物品数量是由`shop`控制器中的几个函数计算得出的，这些函数包括`index()`、`update_cart()`和`user_details()`。让我们看看其中的一个（因为它们的工作方式相同）并看看它在`index()`函数中的工作方式；查看以下来自`index()`函数的代码段：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We fetch the contents of the cart stored in the `cart_contents` session item
    and store it in the `$cart_contents` variable (to keep it simple).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从存储在`cart_contents`会话项中的购物车内容中获取内容，并将其存储在`$cart_contents`变量中（为了简单起见）。
- en: The CodeIgniter `Cart` class automatically keeps a running total of the number
    of all items currently in the cart and conveniently stores it in the `total_items`
    item in the `$cart_contents` array.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter的`Cart`类会自动跟踪购物车中所有物品的总数，并方便地将它存储在`$cart_contents`数组中的`total_items`项中。
- en: We then assign `$data['items']` the value of `total_items` (which should be
    the number of items in the cart) and send it to the `nav/top_nav.php` view file
    where is it displayed next to the word Cart.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`$data['items']`的值设置为`total_items`（这应该是购物车中的物品数量），并将其发送到`nav/top_nav.php`视图文件，在那里它紧挨着“Cart”这个词显示。
- en: Creating the controllers
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: We're going to create only one controller in this project, which is `/path/to/codeigniter/application/controllers/shop.php`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将只创建一个控制器，即`/path/to/codeigniter/application/controllers/shop.php`。
- en: Let's go over that controller now, look at the code, and discuss how it functions.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来回顾一下那个控制器，看看代码，并讨论它是如何工作的。
- en: 'Create the `/path/to/codeigniter/application/controllers/shop.php` file and
    add the following code to it:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/controllers/shop.php`文件，并向其中添加以下代码：
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We want to display the correct products and as such, we need to test whether
    the user has clicked on one of the filter links on the right-hand side of the
    `views/shop/display_products.php` file. We test for the presence of a third `uri`
    parameter.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望显示正确的产品，因此我们需要测试用户是否点击了`views/shop/display_products.php`文件右侧的其中一个筛选链接。我们测试是否存在第三个`uri`参数。
- en: If the third parameter does not exist, then we can safely assume the user does
    not want any filtering. So we call the `get_all_products()` function of `Shop_model`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第三个参数不存在，那么我们可以安全地假设用户不想进行任何过滤。因此，我们调用`Shop_model`的`get_all_products()`函数。
- en: If a third parameter exists, then the user must be filtering their results.
    So we call the `get_all_products_by_category_name($this->uri->segment(3))` function,
    passing to it the third parameter.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在第三个参数，那么用户必须正在过滤他们的结果。因此，我们调用`get_all_products_by_category_name($this->uri->segment(3))`函数，并将第三个参数传递给它。
- en: The third parameter comes from the `categories.cat_url_name` column in the database,
    which is written out in the `views/shop/display_products.php` file by a `foreach`
    loop.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数来自数据库中的`categories.cat_url_name`列，在`views/shop/display_products.php`文件中通过一个`foreach`循环写出来。
- en: 'The loop iterates over the `cat_query` database object, which is populated
    by the `get_all_categories()` function of `Shop_model`, as shown here:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 循环遍历由`Shop_model`的`get_all_categories()`函数填充的`cat_query`数据库对象，如下所示：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As mentioned in the preceding paragraph, the `get_all_categories()` function
    of `Shop_model` is called, returning its result to `$data[''cat_query'']`. In
    the `views/shop/display_products.php` file, it is iterated over with a `foreach`
    loop to create a list of categories:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一段所述，调用`Shop_model`的`get_all_categories()`函数，将其结果返回到`$data['cat_query']`。在`views/shop/display_products.php`文件中，它通过`foreach`循环遍历以创建分类列表：
- en: '[PRE27]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we fetch the number of items in the cart from the `cart_contents` session
    item. A full explanation of this is in the *Creating the views* section of this
    chapter, specifically in the explanation for the `/path/to/codeigniter/application/views/nav/top_nav.php`
    view file:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们从`cart_contents`会话项中获取购物车中的商品数量。关于这一点的完整解释在本章的*创建视图*部分，特别是在对`/path/to/codeigniter/application/views/nav/top_nav.php`视图文件的解释中：
- en: '[PRE28]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following `add()` function adds an item to the cart. It is called from
    the `views/shop/display_products.php` file when a user clicks on Add to cart.
    The third parameter of the link in **Add to cart** is the product ID (`products.product_id`).
    We grab the product ID from the URI (it''s the third segment) and pass it to the
    `get_product_details($product_id)` function of `Shop_model`. This will return
    the product details in the `$query` variable. We loop over `$query`, pulling out
    the individual details for the product and saving them to the `$data` array:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`add()`函数将商品添加到购物车。它从`views/shop/display_products.php`文件中调用，当用户点击“添加到购物车”时。**添加到购物车**链接的第三个参数是产品ID（`products.product_id`）。我们从URI（它是第三个部分）中获取产品ID，并将其传递给`Shop_model`的`get_product_details($product_id)`函数。这将返回产品详情到`$query`变量。我们遍历`$query`，提取产品的单个详情并将其保存到`$data`数组中：
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We save the `$data` array to the cart using the CodeIgniter `Cart` class''s
    `$this->cart->insert();`function:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用CodeIgniter `Cart`类的`$this->cart->insert();`函数将`$data`数组保存到购物车中：
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We then fetch a list of all categories and the new number of items in the cart
    and send them to the `nav/top_nav.php` view file.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后获取所有分类列表以及购物车中新的商品数量，并将它们发送到`nav/top_nav.php`视图文件。
- en: 'The `shop/display_cart.php` view file will loop over the contents of the cart
    using the CodeIgniter `Cart` class''s `$this->cart->contents()` function:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`shop/display_cart.php`视图文件将使用CodeIgniter `Cart`类的`$this->cart->contents()`函数遍历购物车的内容：'
- en: '[PRE31]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `update_cart()` function is called when the user clicks on the **Update
    Cart** button in the `views/shop/display_cart.php` file. When it is called, it
    loops over the input posted from the form in `views/shop/display_cart.php` and
    saves it to the `$data` array; let''s take a look:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在`views/shop/display_cart.php`文件中点击**更新购物车**按钮时，将调用`update_cart()`函数。当它被调用时，它遍历来自`views/shop/display_cart.php`表单的输入并将其保存到`$data`数组中；让我们看一下：
- en: '[PRE32]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: First we create an array called `$data` in which we can store the adjusted cart
    data (we'll use this later). Then, we create a `$i` variable; we'll use this to
    create a multidimensional array, incrementing the value of `$i` on every iteration
    of the loop—with `$i` keeping the `rowid` value (the ID of the product in the
    cart) and `qty` value linked and related to each other.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个名为`$data`的数组，在其中我们可以存储调整后的购物车数据（我们稍后会用到）。然后，我们创建一个`$i`变量；我们将使用这个变量来创建一个多维数组，在循环的每次迭代中增加`$i`的值——`$i`保持`rowid`值（购物车中产品的ID）和`qty`值相关联。
- en: We loop over the posted data (from the form in `views/shop/display_cart.php`),
    treating each iteration of the loop as `$item`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遍历提交的数据（来自`views/shop/display_cart.php`中的表单），将循环的每次迭代视为`$item`。
- en: 'Each `$item` has a `rowid` element (the position of the product in the cart)
    and `qty`, which is the adjusted product quantity:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`$item`都有一个`rowid`元素（产品在购物车中的位置）和`qty`，这是调整后的产品数量：
- en: '[PRE33]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now that the cart data has been looped over and any quantity adjustments made,
    we''ll use the CodeIgniter `Cart` class''s `$this->cart->update()` function to
    update the cart. We then redirect the user using the `redirect()` function to
    the `shop` controller''s `display_cart()` function, which will report the new
    values to the user:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在购物车数据已经迭代完毕，并且已经进行了任何数量的调整，我们将使用CodeIgniter `Cart`类的`$this->cart->update()`函数来更新购物车。然后，我们使用`redirect()`函数将用户重定向到`shop`控制器的`display_cart()`函数，该函数将向用户报告新的值：
- en: '[PRE34]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The actual iteration over the cart data is done in the `views/shop/display_cart.php`
    view file, but the `display_cart()` function exists to offer a specific way to
    view items in the cart. Calling this function loads the `views/shop/display_cart.php`
    view:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，对购物车数据的迭代是在`views/shop/display_cart.php`视图文件中完成的，但`display_cart()`函数的存在是为了提供一种特定方式来查看购物车中的商品。调用此函数将加载`views/shop/display_cart.php`视图：
- en: '[PRE35]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `user_details()` function is responsible for displaying a form to the user,
    allowing them to enter their contact details, validating those details, and converting
    their cart to an order. Let's look in detail at how this works.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_details()` 函数负责向用户显示表单，允许他们输入联系信息，验证这些信息，并将购物车转换为订单。让我们详细看看它是如何工作的。'
- en: 'First off, we start by setting the validation rules for the form submission:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们开始设置表单提交的验证规则：
- en: '[PRE36]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If this is the initial page load or there were errors with the submission of
    the form, then the `$this->form_validation->run()` function will return `FALSE`.
    If either of these happens, then we will begin to build the form elements, defining
    the settings for each form item:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是初始页面加载或表单提交出现错误，则 `$this->form_validation->run()` 函数将返回 `FALSE`。如果发生任何一种情况，我们将开始构建表单元素，为每个表单项定义设置：
- en: '[PRE37]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now we fetch the number of items in the cart from the `cart_contents` session
    item. A full explanation of this is in the *Creating the views* section of this
    chapter under the explanation for the `/path/to/codeigniter/application/views/nav/top_nav.php`
    view file. After we have the contents of the cart for the **Cart** link in the
    navigation bar, we''ll load the `views/shop/user_details.php` file, which will
    do the job of displaying the form:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们从 `cart_contents` 会话项中获取购物车中的项目数量。关于这一点的完整解释在本章的 *创建视图* 部分中，在 `/path/to/codeigniter/application/views/nav/top_nav.php`
    视图文件的说明下。在获取导航栏中 **Cart** 链接的购物车内容后，我们将加载 `views/shop/user_details.php` 文件，该文件将负责显示表单：
- en: '[PRE38]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If, however, there were no errors with the form when it was submitted, then
    we will arrive at the following code. We define two arrays—one called `$cust_data`,
    which will store the information submitted by the user in the form in the `views/shop/user_details.php`
    file and the other called `$order_details`, which will store a serialized dump
    of the cart. So, the following block of code saves the users'' form data:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在提交表单时没有错误，那么我们将到达以下代码。我们定义两个数组——一个称为 `$cust_data`，它将存储用户在 `views/shop/user_details.php`
    文件中的表单提交的信息，另一个称为 `$order_details`，它将存储购物车的序列化输出。因此，以下代码块保存用户的表单数据：
- en: '[PRE39]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `$payment_code` value acts as a type of hook that you can use for payment
    processing. For example, most payment processing systems support the addition
    of a *code*—usually a string of text and/or numbers that are generated by the
    shop application, saved to the database, and sent off to the payment provider.
    After the payment, a webhook script will receive a signal from the payment processing
    system containing a success or error message (the success or error of the attempted
    payment from the customer''s bank account), along with the *code*. This way, you
    can ensure that the correct order has been paid for (or not); anyway, `$payment_code`
    is the following method in the current project:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`$payment_code` 值充当一种钩子，可用于支付处理。例如，大多数支付处理系统支持添加一个 *代码*——通常是由商店应用程序生成的一串文本和/或数字，保存到数据库中，并发送给支付提供商。支付完成后，webhook
    脚本将从支付处理系统接收一个信号，其中包含成功或错误消息（来自客户银行账户的尝试支付的成功或失败），以及 *代码*。这样，您可以确保正确的订单已被支付（或未支付）；无论如何，`$payment_code`
    是当前项目中以下方法：'
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following block of code saves the cart data to the `$order_data` array.
    The contents of the cart are fetched from the cart by the CodeIgniter `Cart` class''s
    `$this->cart->contents()` function. The retuned array is passed to the `serialize()`
    PHP function and is written to `$order_data[''order_details''`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块将购物车数据保存到 `$order_data` 数组中。通过 CodeIgniter `Cart` 类的 `$this->cart->contents()`
    函数从购物车中获取购物车内容。返回的数组传递给 `serialize()` PHP 函数，并写入 `$order_data['order_details']`：
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now that the customer's contact details and order details are in arrays, we
    can start to save them to the database. We call the `save_cart_to_database()`
    function of `Shop_model`, passing to it the `$cust_data` and `$order_data` array.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在客户的联系信息和订单详情都存储在数组中，我们可以开始将它们保存到数据库中。我们调用 `Shop_model` 的 `save_cart_to_database()`
    函数，并将 `$cust_data` 和 `$order_data` 数组传递给它。
- en: 'The `save_cart_to_database()` function of `Shop_model` first saves the customer
    to the `customer` table, returning the primary key of the insert and using that
    primary key as the foreign key value that goes in `orders.cust_id`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shop_model` 的 `save_cart_to_database()` 函数首先将客户信息保存到 `customer` 表中，返回插入的主键，并使用该主键作为外键值放入
    `orders.cust_id`：'
- en: '[PRE42]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Creating the language file
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建语言文件
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support. Let's create the language file.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中的所有项目一样，我们正在使用语言文件向用户提供服务。这样，您就可以启用多区域/多语言支持。让我们创建语言文件。
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/language/english/en_admin_lang.php`文件，并向其中添加以下代码：
- en: '[PRE43]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Putting it all together
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合起来
- en: Okay, here are a few examples that will help put everything together.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里有一些示例，将帮助您将所有内容整合在一起。
- en: Filtering a search
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤搜索
- en: 'When you filter a search, the following events take place:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当你过滤搜索时，以下事件会发生：
- en: The user visits the site and CodeIgniter routes them to the `shop` controller.
    The `shop` controller loads the `index()` function
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户访问网站，CodeIgniter将他们路由到`shop`控制器。`shop`控制器加载`index()`函数
- en: The `index()` function recognizes that there is no third parameter in the URL,
    so it calls the `get_all_products()` function of `Shop_model`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index()`函数识别出URL中没有第三个参数，因此它调用`Shop_model`的`get_all_products()`函数。'
- en: The `index()` function loads the `get_all_categories()` function of `Shop_model`,
    passing the retuned result to `$data['cat_query']`. This is passed to the `views/shop/display_products.php`
    file, which—using a `foreach` loop—echoes out the categories.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index()`函数加载`Shop_model`的`get_all_categories()`函数，将返回的结果传递给`$data[''cat_query'']`。这被传递到`views/shop/display_products.php`文件，该文件使用`foreach`循环输出类别。'
- en: The user clicks on a category in the list. The URL calls the `index()` function,
    but this time with a third parameter.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户点击列表中的某个类别。URL调用`index()`函数，但这次带有第三个参数。
- en: The `index()` function recognizes this third parameter and loads the `get_all_products_by_category_name()`
    function of `Shop_model`, passing it the third `uri` segment.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index()`函数识别出这个第三个参数，并加载`Shop_model`的`get_all_products_by_category_name()`函数，将第三个`uri`段传递给它。'
- en: The `get_all_products_by_category_name()` function of `Shop_model` then looks
    in the `categories` table for a category whose `categories.cat_url_name` value
    matches that supplied in the third parameter and returns the primary key of the
    category.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Shop_model`的`get_all_products_by_category_name()`函数然后查找`categories`表中一个`categories.cat_url_name`值与第三个参数中提供的值相匹配的类别，并返回该类别的主键。'
- en: It then looks in the `products` table for all products whose `products.category_id`
    value matches the primary key of the category found in just the previous step
    using `get_all_products_by_category_name()` and then returns the query to the
    `shop` controller's `index()` function, where it is sent to the `views/shop/view_products.php`
    file.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后它在`products`表中查找所有`products.category_id`值与上一步中找到的类别的主键相匹配的产品，使用`get_all_products_by_category_name()`返回查询，并将其发送到`shop`控制器的`index()`函数，该函数将其发送到`views/shop/view_products.php`文件。
- en: Adding to cart
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加到购物车
- en: 'The sequence of events to add items to a cart is as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 将商品添加到购物车的事件顺序如下：
- en: The user visits the site and CodeIgniter routes them to the `shop` controller.
    The `shop` controller loads the `index()` function
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户访问网站，CodeIgniter将他们路由到`shop`控制器。`shop`控制器加载`index()`函数
- en: The `index()` function recognizes that there is no third parameter in the URL,
    so it calls the `get_all_products()` function of `Shop_model`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index()`函数识别出URL中没有第三个参数，因此它调用`Shop_model`的`get_all_products()`函数。'
- en: Using a `foreach` loop, the `views/shop/display_products.php` file iterates
    over the result object from `get_all_products()` and displays each product in
    turn.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`foreach`循环，`views/shop/display_products.php`文件遍历`get_all_products()`的结果对象，并依次显示每个产品。
- en: The user clicks on the **Add to cart** button
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户点击了**添加到购物车**按钮
- en: CodeIgniter calls the `shop` controller's `add()` function
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CodeIgniter调用`shop`控制器的`add()`函数
- en: The `add()` function grabs the product ID from the third `uri` segment and sends
    it to the `get_product_details()` function of `Shop_model`.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`add()`函数从第三个`uri`段中获取产品ID，并将其发送到`Shop_model`的`get_product_details()`函数。'
- en: The `get_product_details()` function looks in the `products` table for the product
    whose primary key matches that in the argument passed to it and returns it to
    the `$query` variable.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`get_product_details()`函数在`products`表中查找与传递给它的参数中的主键匹配的产品，并将其返回给`$query`变量。'
- en: Using a `foreach` loop, we iterate over `$query`, fetching the details of the
    product, such as `product_name` and `product_price`, and saving them to an array
    called `$data`, which we will add to the cart. We also set the `qty` value to
    `1` (as they're only adding one item).
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`foreach`循环遍历`$query`，获取产品的详细信息，如`product_name`和`product_price`，并将它们保存到名为`$data`的数组中，我们将将其添加到购物车中。我们还设置`qty`值为`1`（因为他们只添加一个商品）。
- en: Using the CodeIgniter `Cart` class's `$this->cart->insert()` function, we add
    the product to the cart by passing it the `$data` array.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CodeIgniter `Cart`类的`$this->cart->insert()`函数，通过传递`$data`数组将产品添加到购物车中。
- en: We then direct the user to `display_cart()` to make any amends should they wish.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将用户引导到`display_cart()`，以便他们可以做出任何修改。
- en: Altering the product quantity
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改产品数量
- en: 'The user can access the cart in one of these two ways:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过以下两种方式之一访问购物车：
- en: By clicking on **Cart** in the navigation bar at the top of the page
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击页面顶部的导航栏中的**购物车**
- en: By being directed there automatically once they add an item to their cart
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在他们向购物车添加商品后自动跳转至购物车页面
- en: 'We''ll pick up the story assuming that the user has used either of these methods
    (as they both drop us here):'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设用户使用了这两种方法之一（因为它们都带我们到这里）：
- en: CodeIgniter calls the `display_cart()` shop function.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CodeIgniter调用`display_cart()`购物功能。
- en: The bulk of the work in displaying the cart occurs in the `views/shop/display_cart.php`
    file, which is a modified version of the template found in the CodeIgniter documentation.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示购物车的大部分工作发生在`views/shop/display_cart.php`文件中，这是CodeIgniter文档中找到的模板的修改版本。
- en: A variable called `$i` is created and given the value of `1`; this will increment
    as the loop iterates.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了一个变量`$i`并赋予其值为`1`；这将随着循环的迭代而递增。
- en: Using a `foreach` loop, we iterate ever the CodeIgniter `Cart` class's `$this->cart->contents()`
    function. For each iteration, we call `$item`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`foreach`循环遍历CodeIgniter `Cart`类的`$this->cart->contents()`函数。对于每次迭代，我们调用`$item`。
- en: An iteration writes the details of each product to an HTML table.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代将每个产品的详细信息写入HTML表格中。
- en: An HTML text input is created called `$i`, so if the current iteration is `1`,
    then the name of the textbox will be `1`, and if the current iteration is `4`,
    the name of the textbox will be `4`.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了一个名为`$i`的HTML文本输入框，因此如果当前迭代是`1`，则文本框的名称将是`1`，如果当前迭代是`4`，则文本框的名称将是`4`。
- en: There are three items in the cart (three rows). Each row shows that there is
    one item of each of the three products in the cart. The user wishes to change
    the quantities of the product in the third row.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 购物车中有三个商品（三行）。每一行显示购物车中每种商品各有一个。用户希望更改第三行中产品的数量。
- en: The user selects the value of the textbox named `3` and replaces the value in
    that textbox with the number `2` (which means that the user wishes to buy one
    item of product 1, one item of product 2, and two items of product 3).
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户选择名为`3`的文本框的值，并将该文本框中的值替换为数字`2`（这意味着用户希望购买产品1的一个商品，产品2的一个商品，和产品3的两个商品）。
- en: The user presses the **Update Cart** button.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户按下**更新购物车**按钮。
- en: CodeIgniter calls the `update_cart()` shop function.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CodeIgniter调用`update_cart()`购物功能。
- en: The `update_cart()` function adjusts the quantity of the third product in the
    cart.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`update_cart()`函数调整购物车中第三种产品的数量。'
- en: For a detailed breakdown, check out the explanation in the *Creating the controllers*
    section of this chapter—look for the `update_cart()` function description.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 对于详细说明，请查看本章*创建控制器*部分的解释——寻找`update_cart()`函数描述。
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this project, you saw the beginnings of a great shop platform. As always,
    there are a few things you can do to expand upon the functionality, which are
    as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你看到了一个伟大的购物平台的开端。像往常一样，有一些事情你可以做来扩展功能，如下所示：
- en: '**Product CMS**: This project doesn''t come with a CMS to manage products or
    categories—this is simply because adding such a functionality would have been
    far too big a topic to cover. However, perhaps you could add some sort of functionality
    to govern products, adding new ones, deleting old ones, and so on.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品内容管理系统**：本项目不附带用于管理产品或类别的CMS——这仅仅是因为添加此类功能将是一个过于庞大的主题，难以涵盖。然而，也许你可以添加某种功能来管理产品，添加新产品、删除旧产品等。'
- en: '**Product images**: You could add a column to the `products` table where an
    image file name can be stored and then echo out that value in an HTML `<img src="img/li>`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品图片**：你可以在`products`表中添加一列，用于存储图片文件名，然后通过HTML `<img src="img/li">`回显该值。'
- en: '``**Product pages**: You could add a link to the product title, opening a new
    page and displaying detailed information about that product, such as color, size,
    weight, "what''s in the box", and so on. Of course, you''ll need to add extra
    columns to the `products` table to support the new information, but this can be
    done quite easily.``'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``**产品页面**：你可以在产品标题中添加一个链接，打开新页面并显示有关该产品的详细信息，例如颜色、尺寸、重量、“盒内物品”等等。当然，你需要向`products`表添加额外的列来支持新信息，但这可以相当容易地完成。```'
- en: '`**BOGOFF**: Verb, British slang—an encouragement from one person to another
    to leave! Depart! Never to be seen again!  Well, not quite, but you could add
    a **Buy One Get One Free** (erm, not sure about the last F) option. You could
    add logic so that if a certain number of products are selected, a discount is
    applied.`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**BOGOFF**: 动词，英国俚语——一个人对另一个人的一种鼓励，离开！离开！永远不再出现！ 嗯，不是完全如此，但你可以添加一个**买一送一**（呃，不确定最后一个F）选项。你可以添加逻辑，以便在选择了特定数量的产品时应用折扣。`'
