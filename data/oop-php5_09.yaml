- en: Chapter 9. Building Better with MVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：用MVC构建更好的应用
- en: In chapter 4 we learned how design patterns can simplify your daily programming
    life by providing you with common approaches for solving problems. One of the
    popular design patterns used for application architecture is **Model-View-Controller,**
    which is also known as **MVC**. In RAD (Rapid Application Development) for PHP,
    MVC frameworks play a vital role. These days several MVC frameworks have gained
    public interest and many of them are enterprise-ready. For example, **symfony**
    framework has been used in developing Yahoo bookmarks, CakePHP is being developed
    in refactoring Mambo, CodeIgniter is used by many big applications showcased on
    their site. Also there are popular MVC frameworks like Zend Framework, which is
    used by IBM and also used to develop the Magento open-source ecommerce solution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四章中，我们学习了设计模式如何通过提供解决问题的常用方法来简化你的日常编程生活。在应用架构中，一种流行的设计模式是**模型-视图-控制器**（Model-View-Controller），也称为**MVC**。在PHP的快速应用开发（Rapid
    Application Development, RAD）中，MVC框架扮演着至关重要的角色。如今，几个MVC框架已经引起了公众的兴趣，其中许多已经准备好用于企业级应用。例如，**symfony**框架已被用于开发Yahoo书签，CakePHP正在重构Mambo，CodeIgniter被许多在网站上展示的大型应用所使用。还有像Zend
    Framework这样的流行MVC框架，它被IBM使用，也被用于开发Magento开源电子商务解决方案。
- en: Therefore, nowadays, writing code from scratch and fine tuning it is obsolete,
    and if you are doing this, you should really avoid it. In this chapter, we will
    discuss the basic structure of MVC frameworks and then introduce you to some of
    these popular frameworks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如今，从头开始编写代码并进行微调已经过时了，如果你正在这样做，你应该真正避免这样做。在本章中，我们将讨论MVC框架的基本结构，然后介绍一些这些流行的框架。
- en: What is MVC?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是MVC？
- en: As the name implies, MVC consists of three components. The first one is Model,
    the second one is View, and the third one is Controller. This doesn't make any
    sense if we just list the names. To begin with, Model is an object, which interacts
    with a database. All business logics are usually written inside the model. A controller
    is a piece of code, which takes user inputs and based on that initializes models
    and other objects, and finally invokes all of them. Finally, the View is a component,
    which displays the result generated by controller with the help of model.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，MVC由三个组件组成。第一个是模型（Model），第二个是视图（View），第三个是控制器（Controller）。如果我们只是列出名称，这并没有什么意义。首先，模型是一个与数据库交互的对象。所有业务逻辑通常都写在模型中。控制器是一段代码，它接收用户输入，基于这些输入初始化模型和其他对象，并最终调用它们。最后，视图是一个组件，它使用模型帮助显示控制器生成的结果。
- en: So for good practice, you should never implement any business logic in view
    or controller. Similarly, you should never process the output results in a model.
    And you should never produce any output directly from controller (instead use
    the view).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了良好的实践，你永远不应该在视图或控制器中实现任何业务逻辑。同样，你也不应该在模型中处理输出结果。而且，你永远不应该直接从控制器中产生任何输出（而是使用视图）。
- en: In the following sections we will be creating a very small MVC.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将创建一个非常小的MVC。
- en: Planning for the Project
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目规划
- en: 'For successfully developing any application you must have a clear target. Whenever
    the architecture of an application is robust, stable, and foolproof, you will
    get a huge number of users using your application. The MVC framework we are going
    to develop in this chapter will serve the following issues successfully:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功开发任何应用，你必须有一个明确的目标。每当一个应用架构强大、稳定、无懈可击时，你将获得大量用户使用你的应用。在本章中，我们将开发的MVC框架将成功解决以下问题：
- en: Small footprint
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本小
- en: Easy loading of components, libraries, helpers, and models
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易加载组件、库、辅助工具和模型
- en: Nice and flexible syntax for developing view
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发视图的优雅且灵活的语法
- en: Excellent support with popular database servers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对流行数据库服务器的出色支持
- en: Will not be resource extensive
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不会占用大量资源
- en: Easy to use
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于使用
- en: Easy to integrate with other component frameworks like Pear, ezComponents, and
    so on.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易与其他组件框架如Pear、ezComponents等集成。
- en: Support for caching
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持缓存
- en: Layout support like RubyOnRails for easy design of your web application
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似于RubyOnRails的布局支持，便于设计你的Web应用
- en: A native gzip compressor for JavaScript
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生gzip压缩器用于JavaScript
- en: Ajax support
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Ajax
- en: Designing the Bootstrap File
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计引导文件
- en: The bootstrap is a file, which just prepares the environment for successful
    execution and integration of controllers, models, and views. Basically a bootstrap
    file initializes the environment, the router, the object loader, and passes all
    the input parameters to the controller. We will design the bootstrap file, which
    will receive all the parameters of a successful request URL with the help of `mod_rewrite`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 引导文件是一个文件，它只为成功执行和集成控制器、模型和视图准备环境。基本上，引导文件初始化环境、路由器、对象加载器，并将所有输入参数传递给控制器。我们将设计一个引导文件，它将借助`mod_rewrite`接收成功请求URL的所有参数。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`mod_rewrite` is an apache module, which helps to redirect a request defined
    by a pattern (regular expression) to another request URL. It is an essential module
    for almost every web application designed. If you are interested in studying more
    on it, you can go to: [http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_rewrite`是一个Apache模块，它通过模式（正则表达式）帮助将请求重定向到另一个请求URL。对于几乎每个设计的Web应用程序来说，这是一个必不可少的模块。如果你对它感兴趣并想了解更多，你可以访问：[http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html)'
- en: 'To enable `mod_rewrite` you can follow the following details. Firstly, open
    `httpd.conf` and add the following lines:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用`mod_rewrite`，你可以按照以下细节操作。首先，打开`httpd.conf`并添加以下行：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We have to place the following code in an `.htaccess` file and place it inside
    our application root.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在`.htaccess`文件中放置以下代码，并将其放置在我们的应用程序根目录内。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code will just redirect every request to `index.php`, which will be our
    bootstrap file. This bootstrap file will receive any requested URL and then split
    it into different parts like controller, action and parameters. For example, the
    format will be `http://our_application/controller/action/param/param..../param`.
    The bootstrap will analyze the URL with the help of a router and then with the
    help of dispatcher it will invoke controller and action with all the parameters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将仅仅将每个请求重定向到`index.php`，这将是我们的引导文件。这个引导文件将接收任何请求的URL，并将其拆分为不同的部分，如控制器、操作和参数。例如，格式将是`http://our_application/controller/action/param/param..../param`。引导文件将借助路由器分析URL，然后借助分发器调用控制器和操作，并传递所有参数。
- en: 'Here is the code of our bootstrap file (`index.php`):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们引导文件（`index.php`）的代码：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above code you see that there is an object called `loader`. The main
    purpose of this is to load objects for us, but via the Singleton pattern. This
    will help us to minimize the load. Using this loader we will load an object named
    `router`. There is also an object called `dispatcher`, which will finally dispatch
    the web request with the help of router.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，你可以看到一个名为`loader`的对象。这个对象的主要目的是为我们加载对象，但通过单例模式。这将帮助我们最小化加载。使用这个loader，我们将通过单例模式加载一个名为`router`的对象。还有一个名为`dispatcher`的对象，它将最终借助路由器将Web请求分发出去。
- en: Let's check the code of `core/ini.php`, which is a helper to help easy inclusion
    of class files from different directories.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`core/ini.php`的代码，这是一个辅助工具，用于帮助轻松地从不同目录包含类文件。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here goes the `initializer` file (`core/main/initializer.php`):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`initializer`文件（`core/main/initializer.php`）的内容：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you take a look at the code of the `initializer` file, you will find that
    it actually just extends the include path.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`initializer`文件的代码，你会发现它实际上只是扩展了包含路径。
- en: Here is the code of our `loader` file (`core/main/loader.php`), which will load
    different components via the Singleton pattern.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们`loader`文件（`core/main/loader.php`）的代码，它将通过单例模式加载不同的组件。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Loader uses another `config` file (`core/main/config.php`), which actually
    loads different `configs` from under `config/configs.php` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Loader使用另一个`config`文件（`core/main/config.php`），实际上是从`config/configs.php`文件下加载不同的`configs`：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you wonder how our `configs.php` will look, here it goes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道我们的`configs.php`将如何看起来，下面是它的样子：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Well, if you look at the code of `loader.php` there is a section like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，如果你查看`loader.php`的代码，会发现一个类似这样的部分：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So `$config->debug` actually returns the value of `$configs['debug']` with the
    help of `__get()` `magic` method in `config.php`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`$config->debug`实际上是通过`config.php`中的`__get()` `魔法`方法返回`$configs['debug']`的值。
- en: 'In loader there is a method named `base::backtrace()`. `base` is a static object
    declared in `core/libraries/base.php`. It contains some useful functions to use
    throughout the framework. This is in `core/libraries/base.php`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在loader中有一个名为`base::backtrace()`的方法。`base`是在`core/libraries/base.php`中声明的静态对象。它包含了一些在整个框架中使用的有用函数。这是在`core/libraries/base.php`中：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Therefore `base::backtrace()` actually prints `debug_backtrace` for easy tracing
    exceptions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`base::backtrace()` 实际上打印 `debug_backtrace` 以便于跟踪异常。
- en: 'So far we haven''t seen the code of `router.php` and `dispatcher.php`. Router
    and dispatcher are the main part of the whole application. Here is the code of
    `router.php` (`core/main/router.php`):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有看到 `router.php` 和 `dispatcher.php` 的代码。路由器和调度器是整个应用的主要部分。以下是 `router.php`
    的代码（`core/main/router.php`）：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What router actually does is find the controller, action, and parameters from
    a request URL. If the controller name is not found, it uses the default controller
    name and if default controller name is not found in `config` file, it will use
    `index` as the default controller.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器实际上执行的操作是从请求 URL 中找到控制器、操作和参数。如果找不到控制器名称，它将使用默认控制器名称；如果默认控制器名称在 `config`
    文件中找不到，它将使用 `index` 作为默认控制器。
- en: Before proceeding to dispatcher, we must look at the view engine, which will
    be used for template engine, so that anyone from controller can set variables
    like this `$this->view->set(varname,` `value)`. After that, anyone can access
    the variable as `$varname` in our view file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续到调度器之前，我们必须看看视图引擎，这将用于模板引擎，这样任何从控制器都可以设置变量，例如 `$this->view->set(varname,
    value)`。之后，任何人都可以在我们的视图文件中以 `$varname` 的形式访问该变量。
- en: 'So here comes the view engine (`core/main/view.php`):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是视图引擎（`core/main/view.php`）：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here comes the dispatcher, the core part of our framework (`core/main/dispatcher.php`):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是调度器，它是我们框架的核心部分（`core/main/dispatcher.php`）：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here's what dispatcher mainly does (as seen from the highlighted section of
    the above code). It takes a router object as parameter then finds controller,
    action, and parameters from router. If the controller file is available, it loads
    that and then initializes the controller. After initializing, it just accesses
    the action.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是调度器主要执行的操作（如上代码中高亮部分所示）。它接受一个路由对象作为参数，然后从路由器中找到控制器、操作和参数。如果控制器文件可用，它将加载该文件并初始化控制器。初始化后，它仅访问操作。
- en: After that, dispatcher initializes the current view object using loader. As
    it is coming via Singleton, all variables set to it are still in scope. Dispatcher
    then passes the view template file, variables to a function named `_loadTemplate`
    in base.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，调度器使用加载器初始化当前视图对象。由于它是通过 Singleton 来的，所以设置给它的所有变量仍然在作用域内。然后调度器将视图模板文件和变量传递给
    base 中的 `_loadTemplate` 函数。
- en: So what is the purpose of `$uselayout`? It just indicates whether a layout file
    should be appended to our template. This is more fun when we see it in practice.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`$uselayout` 的目的是什么？它只是指示是否应该将布局文件附加到我们的模板上。当我们在实践中看到它时，这更有趣。'
- en: 'Here is the `base::_loadTemplate()` function:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `base::_loadTemplate()` 函数：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you are confused about placing these files, here is the directory structure
    to help you understand:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对这些文件的放置感到困惑，这里有一个目录结构来帮助您理解：
- en: '![Designing the Bootstrap File](img/2561_09_00.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![设计 Bootstrap 文件](img/2561_09_00.jpg)'
- en: Why are there other files like `jsm.php`, `benchmark.php`, `unittest.php`, `helper.php`,
    `model.php`, `library.php`, `cache.php`, and `db.php`?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么还有像 `jsm.php`、`benchmark.php`、`unittest.php`、`helper.php`、`model.php`、`library.php`、`cache.php`
    和 `db.php` 这样的其他文件？
- en: 'These files will help us for the following sections:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些文件将帮助我们理解以下部分：
- en: '`jsm.php`: Helps to load JavaScript with automatic gzip compression'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jsm.php`：帮助使用自动 gzip 压缩加载 JavaScript'
- en: '`db.php`: For connecting to different database'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.php`：用于连接不同的数据库'
- en: '`library.php`: Helps to load library files'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`library.php`：帮助加载库文件'
- en: '`unittest.php`: Will help to automate unit testing'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unittest.php`：将帮助自动化单元测试'
- en: '`model.php`: Will help to load models for database access'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model.php`：将帮助加载用于数据库访问的模型'
- en: Now let's see what our `model` and `library` are doing.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看我们的 `model` 和 `library` 都在做什么。
- en: 'Here comes `core/main/model.php`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 `core/main/model.php`：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Whenever a form is submitted, we want to populate any model right after initializing
    it. Therefore, we have kept a configuration variable named `auto_model_association`
    for it. If you set it to true, models will be automatically associated.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每当表单提交时，我们希望在初始化模型后立即填充它。因此，我们保留了一个名为 `auto_model_association` 的配置变量。如果您将其设置为
    true，模型将自动关联。
- en: 'Here comes the library loader `(core/main/library.php`):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是库加载器（`core/main/library.php`）：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`library.php` helps only to load libraries via a Singleton.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`library.php` 只帮助通过 Singleton 加载库。'
- en: Now we will see the JavaScript loader, which by default delivers each library
    with gzip compression. These days every browser supports gzip compression for
    faster loading of any object. We are also distributing distributing our framework
    with built-in support for prototype, jQuery and script.aculo.us.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到 JavaScript 加载器，它默认使用 gzip 压缩来提供每个库。如今，每个浏览器都支持 gzip 压缩，以加快任何对象的加载速度。我们还在我们的框架中内置了对
    prototype、jQuery 和 script.aculo.us 的支持。
- en: 'Here is `core/libraries/jsm.php`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '这里是 `core/libraries/jsm.php`:'
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you take a look at the code you will find that it loads every JavaScript
    file via `gzip.php`, which is actually responsible for compressing the content.
    So here is the code of `gzip.php` (`core/js/gzip.php`):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你查看代码，你会发现它通过 `gzip.php` 加载每个 JavaScript 文件，实际上 `gzip.php` 负责压缩内容。所以这里是 `gzip.php`
    的代码（`core/js/gzip.php`）:'
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you have other libraries to load, you can modify this library and add them
    in the following line.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还有其他库要加载，你可以修改这个库，并在以下行中添加它们。
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Lastly, we have another file, which helps us writing a unit test during the
    developing of our application. `unittest.php` is responsible for that and there
    is also a Boolean configuration flag for this: `unit_test_enabled`.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还有一个文件，它帮助我们在我们应用程序的开发过程中编写单元测试。`unittest.php` 负责这个，还有一个布尔配置标志：`unit_test_enabled`。
- en: 'Here is `core/main/unittest.php`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '这里是 `core/main/unittest.php`:'
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We must keep a built-in support for benchmarking our code to help profiling.
    Therefore, we have `benchmark.php` (`core/main/benchmark.php`) which performs
    it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须保留内置的代码基准测试支持，以帮助分析。因此，我们有 `benchmark.php` (`core/main/benchmark.php`) 来执行它：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Adding Database Support
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据库支持
- en: 'Our framework must have a data abstraction layer to facilitate database operations
    painlessly. We are going to provide support to three popular databases: SQLite,
    PostgreSQL, and MySQL. Here is the code of our data abstraction layer in `core/main/db.php`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的框架必须有一个数据抽象层，以简化数据库操作。我们将为三个流行的数据库提供支持：SQLite、PostgreSQL 和 MySQL。以下是我们的数据抽象层代码在
    `core/main/db.php` 中：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'It uses an abstract driver object to ensure the extensibility and consistency
    of the driver objects. In the future, if any third-party developer wants to introduce
    new drivers he must extend it in `core/main/dbdrivers/abstract.dbdriver.php`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用一个抽象驱动对象来确保驱动对象的可扩展性和一致性。将来，如果任何第三方开发者想要引入新的驱动，他必须在 `core/main/dbdrivers/abstract.dbdriver.php`
    中扩展它：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Drivers
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 驾驶员
- en: 'Now here comes the trickiest part; the drivers. Let''s take a look at SQLite
    driver file `core/main/dbdrivers/sqlitedriver.php`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '现在是难度最大的部分；驾驶员。让我们看看 SQLite 驱动文件 `core/main/dbdrivers/sqlitedriver.php`:'
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you take a look at the code, you will find that we just implemented all the
    functions described in `abstractdbdriver` object in `abstractdbdriver.php`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看代码，你会发现我们只是在 `abstractdbdriver.php` 文件中实现了 `abstractdbdriver` 对象中描述的所有功能。
- en: 'Here comes the driver file for MySQL, `core/main/dbdrivers/mysqldriver.php`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '现在是 MySQL 驱动文件，`core/main/dbdrivers/mysqldriver.php`:'
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And finally, here comes the PostgreSQL driver, `core/main/dbdrivers/postgresql.php`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，这里是 PostgreSQL 驱动，`core/main/dbdrivers/postgresql.php`:'
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now our framework is done. In the coming sections, we will see how to build
    applications over this framework.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的框架已经完成。在接下来的章节中，我们将看到如何在这个框架上构建应用程序。
- en: Building Applications over our Framework
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的框架上构建应用程序
- en: Now is the colourful moment. So far, we have done so many things to ease developing
    applications over our framework. So now in this section we will develop a basic
    blog application and discuss how to take advantage of our framework.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是精彩时刻。到目前为止，我们已经做了很多工作来简化在我们框架上开发应用程序。所以现在在本节中，我们将开发一个基本的博客应用程序，并讨论如何利用我们的框架。
- en: For those unfamiliar with Blogs, they are simply web-based publishing systems,
    where people are allowed to write anything and publish it. In this application
    we will allow users to write articles, display them, and also allow users to publish
    comments.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不熟悉博客的人来说，它们只是基于网络的发布系统，人们可以写任何东西并发布。在这个应用程序中，我们将允许用户撰写文章、显示它们，并允许用户发布评论。
- en: 'Let''s create a MySQL database named `packtblog` with three tables; `Users`,
    `Posts`, and `Comments`. Here is the database schema:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `packtblog` 的 MySQL 数据库，包含三个表；`Users`、`Posts` 和 `Comments`。以下是数据库模式：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Authentication Controller
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证控制器
- en: 'Let''s design our main controller with users who, will be able to register,
    or log into, their system. The code in the `app/controllers/auth.php` file is
    as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设计我们的主要控制器，其中用户将能够注册或登录到他们的系统。`app/controllers/auth.php` 文件中的代码如下：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here are the views for authentication controller:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是认证控制器的视图：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This will display the following screen:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示以下屏幕：
- en: '![Authentication Controller](img/2561_09_01.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![认证控制器](img/2561_09_01.jpg)'
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will display the following screen:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示以下屏幕：
- en: '![Authentication Controller](img/2561_09_02.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![认证控制器](img/2561_09_02.jpg)'
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will display the following screen:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示以下屏幕：
- en: '![Authentication Controller](img/2561_09_03.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![认证控制器](img/2561_09_03.jpg)'
- en: Now comes the controller which will handle the blog operations
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是处理博客操作的控制器
- en: 'The code in the `app/controllers/blog.php` is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/controllers/blog.php`中的代码如下：'
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And here are the views of our blog controller:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的博客控制器的视图：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This will display the following form:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示以下表单：
- en: '![Authentication Controller](img/2561_09_04.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![认证控制器](img/2561_09_04.jpg)'
- en: 'And last but not the least here comes the `config` file. Place it in `app/config/configs.php`
    or `core/config/configs.php`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，这里是`config`文件。将其放置在`app/config/configs.php`或`core/config/configs.php`中：
- en: '[PRE36]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the rapid development of PHP applications, frameworks play a very important
    role. That is why today there are so many enterprise-level frameworks in the market
    and you have so many choices. We have learnt how to build a framework in this
    chapter which will also help to understand object loading, data abstraction layers,
    and the importance of separation. Finally, we took a closer look at how applications
    are done.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP应用的快速发展中，框架扮演着非常重要的角色。这就是为什么今天市场上存在如此多的企业级框架，你有很多选择。在本章中，我们学习了如何构建框架，这也有助于理解对象加载、数据抽象层以及分离的重要性。最后，我们更深入地了解了应用程序是如何实现的。
