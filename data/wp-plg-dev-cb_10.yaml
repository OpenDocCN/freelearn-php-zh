- en: Adding New Widgets to the WordPress Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将新小部件添加到WordPress库
- en: 'In this chapter, you will learn how to create your own widget through the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将通过以下主题了解如何创建自己的小部件：
- en: Creating a new widget in WordPress
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在WordPress中创建新小部件
- en: Displaying configuration options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示配置选项
- en: Validating configuration options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证配置选项
- en: Implementing the widget display function
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现小部件显示函数
- en: Adding a custom dashboard widget
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义仪表板小部件
- en: Adding a custom widget to the network dashboard
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将自定义小部件添加到网络仪表板
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Widgets have been present in WordPress from the early days of the platform.
    They allow users to easily populate sidebars or other areas of their website theme
    with blocks of content that are provided by WordPress itself (post or page data),
    or by any plugins that have been installed (for example, bug tracking system information).
    Looking at a WordPress installation, the default set of widgets include the Archives
    widget, which lists monthly post archives, and the Recent Comments widget, which
    provides an easy way to display visitor comments stored on your WordPress website.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件自WordPress平台早期以来就存在。它们允许用户轻松地将由WordPress本身（帖子或页面数据）或已安装的任何插件（例如，错误跟踪系统信息）提供的内容块填充到他们的网站主题的侧边栏或其他区域。查看WordPress安装，默认的小部件集包括存档小部件，它列出月度帖子存档，以及最近评论小部件，它提供了一个简单的方式来显示存储在您的WordPress网站上的访客评论。
- en: Following its open design, WordPress provides functions that allow plugin developers
    to create new widgets that users will be able to add to their page design. This
    chapter shows how to use the widget class to create a custom widget. It also covers
    the second type of widget, the dashboard widget, which can be used to display
    plugin-specific information on the front page of the administrative area.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循其开放设计，WordPress提供了允许插件开发者创建新小部件的函数，用户可以将这些小部件添加到他们的页面设计中。本章展示了如何使用小部件类创建自定义小部件。它还涵盖了第二种类型的小部件，仪表板小部件，可以用于在管理区域的前页上显示插件特定的信息。
- en: Creating a new widget in WordPress
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在WordPress中创建新小部件
- en: The first step in creating a custom widget is to define its name and indicate
    which class contains all of its implementation functions. Once the new element
    has been registered with the system, it will immediately appear in the widget
    list, where users will be able to drag and drop it to their sidebars.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义小部件的第一步是定义其名称，并指出哪个类包含所有实现函数。一旦新元素在系统中注册，它将立即出现在小部件列表中，用户可以将其拖放到侧边栏。
- en: This recipe defines a new widget that displays recent book reviews from the
    custom post type category created in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方定义了一个新小部件，用于显示来自[第4章](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml)，“自定义帖子类型的威力”中创建的自定义帖子类型分类的最新书评。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Updating page title to include custom
    post data using plugin filters* recipe from Chapter 4, *The Power of Custom Post
    Types*, to have a starting point for this recipe. Alternatively, you can get the
    resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php`) from the
    code bundle and activate the `Chapter 4 - Book Reviews` plugin.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了第4章，“自定义帖子类型的威力”中的*使用插件过滤器更新页面标题以包含自定义帖子数据*配方，以便为本配方提供一个起点。或者，您可以从代码包中获取结果代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v11.php`）并激活`第4章 - 书评`插件。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch10-book-review-widget`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch10-book-review-widget`的新目录。
- en: Navigate to the directory and create a text file called `ch10-book-review-widget.php`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录并创建一个名为`ch10-book-review-widget.php`的文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 10 - Book Review Widget`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，命名为“第10章 - 书评小部件”。
- en: 'Add the following line of code to register a function to be called when widgets
    are initialized:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在初始化小部件时被调用的函数：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code segment to provide an implementation for the `ch10brw_create_widgets`
    function:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch10brw_create_widgets`函数的实现：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Insert the following block of code to declare the `Book_Reviews` class along
    with its constructor method:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码块以声明`Book_Reviews`类及其构造函数：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save and close the plugin file.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins management page and Activate the `Chapter 10 - Book
    Review Widget` plugin.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活`第10章 - 图书评论小工具`插件。
- en: Visit the Widgets section of the Appearance administration page to see the newly
    created Book Reviews widget appear as part of the list of Available Widgets.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问外观管理页面的小工具部分，以查看新创建的图书评论小工具作为可用小工具列表的一部分出现。
- en: 'Drag and drop the new widget to one of the available sidebars listed on the
    right-hand side to create a widget instance, and see that the widget currently
    has no available options to configure it:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新小工具拖放到右侧列出的可用侧边栏之一以创建小工具实例，并查看当前小工具没有可配置的选项：
- en: '![](img/32e68aaf-3f26-4409-af25-a9f363411243.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/32e68aaf-3f26-4409-af25-a9f363411243.png)'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `widgets_init` action hook is used to register a function to be executed
    when widgets are being created by WordPress. When the callback occurs, we create
    a new widget by calling the simple `register_widget` function. As can be seen
    in the recipe, this function requires a single argument that indicates the name
    of the class that contains the widget definition.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`widgets_init`动作钩子用于注册一个在WordPress创建小工具时要执行的功能。当回调发生时，我们通过调用简单的`register_widget`函数创建一个新的小工具。如菜谱所示，此函数需要一个参数，表示包含小工具定义的类的名称。'
- en: The rest of the recipe declares the widget implementation class, which extends
    the WordPress `WP_Widget` class. While the class has many potential member methods,
    this recipe only defines the class constructor, which initializes the object instance
    by specifying a unique identifier, a title, and a description embedded within
    an array of optional parameters. As with any other functions declared in plugins,
    it is important to give unique names to the widget class and widget identifier
    in order to avoid conflict with other plugins.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 菜谱的其余部分声明了小工具实现类，该类扩展了WordPress的`WP_Widget`类。虽然该类有许多潜在的成员方法，但本菜谱仅定义了类构造函数，该构造函数通过指定一个唯一标识符、一个标题以及嵌入在可选参数数组中的描述来初始化对象实例。与插件中声明的任何其他函数一样，为小工具类和小工具标识符提供唯一名称以避免与其他插件冲突是很重要的。
- en: When the plugin is activated, users can see the new widget immediately and are
    able to add one or more instances of the new element as part of a sidebar's content.
    However, the new widget will not render anything other than an error message on
    website pages until its `widget` method is implemented in a later recipe in this
    chapter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当插件激活时，用户可以立即看到新小工具，并且能够将新元素的一个或多个实例作为侧边栏内容的一部分添加。然而，直到本章稍后的菜谱中实现了其`widget`方法，新小工具在网站页面上除了错误消息之外不会渲染任何内容。
- en: There's more...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: As you may have noticed, this recipe creates a separate plugin file and directory
    from the main book review plugin created in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所注意到的，这个菜谱创建了一个与在[第4章](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml)中创建的主要图书评论插件分开的插件文件和目录，*自定义文章类型的威力*。
- en: Plugins extending other plugins
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展其他插件的插件
- en: While we could have placed the widget creation code in the same file as the
    book review plugin, placing it in a separate file is just as valid. Some plugins
    distributed on the official [wordpress.org](http://wordpress.org) repository actually
    use that technique to break up their functionality into more manageable code segments.
    The only thing to be careful of with this technique is to be sure that all the
    elements that a secondary plugin is dependent upon are loaded before referring
    to them in callback functions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以将小工具创建代码放在与图书评论插件相同的文件中，但将其放在单独的文件中同样有效。实际上，官方[wordpress.org](http://wordpress.org)仓库中的一些插件确实使用这种技术将它们的功能分解成更易管理的代码段。使用这种技术时，需要注意确保在回调函数中引用它们之前，所有次要插件所依赖的元素都已加载。
- en: In this case, since widgets are created late in the WordPress initialization
    process, the custom post type that will be required by the widget will be available.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于小工具是在WordPress初始化过程的后期创建的，因此小工具将需要的自定义文章类型将可用。
- en: See also
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Updating page title to include custom post data using plugin filters* recipe
    in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml)，*自定义文章类型的威力*中的*使用插件过滤器更新页面标题以包含自定义文章数据*菜谱'
- en: Displaying configuration options
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示配置选项
- en: Similar to the plugin configuration pages, widgets can have one or more options
    to allow users to specify how some aspects of the component will behave. These
    options can be configured individually for each instance of a widget that is added
    to a website layout. To handle all of the logistics around multiple possible widget
    instances, WordPress actually takes care of most of the data handling and storage
    tasks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与插件配置页面类似，小部件可以有一个或多个选项，允许用户指定组件的一些方面应该如何表现。这些选项可以为添加到网站布局的每个小部件实例单独配置。为了处理所有关于多个可能的小部件实例的物流，WordPress实际上负责大多数数据处理和存储任务。
- en: This recipe shows how to add a new method to the book review widget class to
    display configuration options.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何向书评小部件类添加新方法以显示配置选项。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Creating a new widget in WordPress* recipe
    to have a starting point for this recipe. Alternatively, you can get the resulting
    code (`Chapter 10/ch10-book-review-widget/ch10-book-review-widget-v1.php`) from
    the code bundle and rename the file as `ch10-book-review-widget.php`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*在WordPress中创建新小部件*的食谱，以便为本食谱提供一个起点。或者，您可以从代码包中获取结果代码（`第10章/ch10-book-review-widget/ch10-book-review-widget-v1.php`），并将文件重命名为`ch10-book-review-widget.php`。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Navigate to the `ch10-book-review-widget` directory and edit `ch10-book-review-widget.php`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch10-book-review-widget`目录并编辑`ch10-book-review-widget.php`。
- en: 'Find the `Book_Reviews` class and add the following block of code within the
    class to define the `form` method:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Book_Reviews`类中找到并添加以下代码块以定义`form`方法：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save and close the plugin file.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Refresh the Appearance | Widgets administration page and expand the Book Reviews
    widget instance to see the newly created options.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新外观 | 小部件管理页面，并展开书评小部件实例以查看新创建的选项。
- en: 'Change the widget options and click on Save to update its configuration:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改小部件选项并点击保存以更新其配置：
- en: '![](img/508cf006-79e8-4c98-b823-8fcb7ff4525a.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/508cf006-79e8-4c98-b823-8fcb7ff4525a.png)'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When users create a new widget instance, WordPress automatically manages configuration
    options for that element using an array variable. It also calls the widget class'
    `form` method, if present, to render the widget instance's options in a configuration
    panel.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户创建一个新的小部件实例时，WordPress会自动管理该元素的配置选项，使用一个数组变量。如果存在，它还会调用小部件类的`form`方法，以在配置面板中渲染小部件实例的选项。
- en: 'The first few lines of code in the `form` method verify that the `instance`
    array contains proper values that specify whether the widget should be displayed,
    the number of book reviews to be shown, and the title that should be displayed
    at the beginning of the widget. If any of these options are missing, we use the
    PHP ternary conditional operator (`?:`) to assign default values to the `render_widget`,
    `nb_book_reviews`, and `widget_title` functions. This operator expects three expressions,
    ordered as follows: `(expr1)?(expr2):(expr3)`. It will then return `expr2` if
    `expr1` is true and `expr3` if it''s false.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`form`方法中的前几行代码验证`instance`数组是否包含适当的值，指定小部件是否应该显示，要显示的书籍评论数量，以及小部件开始时应显示的标题。如果这些选项中的任何一个缺失，我们使用PHP三元条件运算符（`?:`）为`render_widget`、`nb_book_reviews`和`widget_title`函数分配默认值。此运算符期望三个表达式，顺序如下：（expr1）?（expr2）:（expr3）。如果`expr1`为真，则返回`expr2`；如果为假，则返回`expr3`。'
- en: With these variables in place, the rest of the `form` method's code uses a mix
    of HTML and PHP code to render the configuration fields that are shown in the
    widget editor. The `get_field_id` and `get_field_name` methods, seen throughout
    this code, are used to generate unique identifiers that will help WordPress to
    store data separately for all widget instances.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些变量就绪后，`form`方法的其余代码使用HTML和PHP代码的混合来渲染在小部件编辑器中显示的配置字段。在整个代码中看到的`get_field_id`和`get_field_name`方法用于生成唯一的标识符，这将帮助WordPress为所有小部件实例分别存储数据。
- en: As can be seen in this recipe, the widget class is able to automatically process
    and save widget configuration parameters. However, it should be noted that allowing
    WordPress to handle this task by itself means that no validation will be performed
    on the data entered. This could cause problems if a user enters text instead of
    the number of reviews to be displayed. The next recipe shows how to handle data
    validation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如本菜谱所示，部件类能够自动处理和保存部件配置参数。然而，需要注意的是，允许 WordPress 自行处理此任务意味着不会对输入的数据进行验证。如果用户输入文本而不是要显示的评论数量，这可能会导致问题。下一个菜谱将展示如何处理数据验证。
- en: See also
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a new widget in WordPress* recipe
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 WordPress 中创建新部件*菜谱'
- en: Validating configuration options
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证配置选项
- en: The widget configuration panel that was put in place in the previous recipe
    was functional, allowing users to change options and save updated values in the
    website database. That being said, all WordPress does by default when the user
    saves a widget is store values directly to the site database. Since accepting
    user data blindly can lead to functionality problems and security risks if wrong
    or malicious values are entered, it is preferable to add data validation rules
    through the creation of an `update` method that will be able to verify configuration
    data before it is saved. This recipe shows how to implement a widget's `update`
    method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个菜谱中放置的部件配置面板是功能性的，允许用户更改选项并在网站数据库中保存更新后的值。话虽如此，WordPress 默认情况下在用户保存部件时所做的只是直接将值存储到网站数据库中。由于盲目接受用户数据可能会导致功能问题和安全风险，如果输入了错误或恶意值，因此最好通过创建一个能够验证配置数据在保存之前的`update`方法来添加数据验证规则。本菜谱展示了如何实现部件的`update`方法。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Displaying configuration options* recipe
    to have a starting point for this recipe. Alternatively, you can get the resulting
    code (`Chapter 10/ch10-book-review-widget/ch10-book-review-widget-v2.php`) from
    the code bundle and rename the file as `ch10-book-review-widget.php`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*显示配置选项*菜谱，以便为本菜谱提供一个起点。或者，您可以从代码包中获取结果代码（`第10章/ch10-book-review-widget/ch10-book-review-widget-v2.php`）并将文件重命名为`ch10-book-review-widget.php`。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的 WordPress 插件目录。
- en: Navigate to the `ch10-book-review-widget` directory and edit `ch10-book-review-widget.php`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch10-book-review-widget`目录并编辑`ch10-book-review-widget.php`。
- en: 'Find the `Book_Reviews` class and add the following block of code within the
    class to define the `update` method:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`Book_Reviews`类，并在类内添加以下代码块以定义`update`方法：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save and close the plugin file.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Visit the Widgets section of the Appearance administration page and expand the
    Book Reviews widget instance.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问外观管理页面的部件部分并展开书评部件实例。
- en: Enter a textual value in the Number of reviews to display field and save the
    widget. You will see that the field's value reverts to the last valid number saved
    for this field.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在要显示的评论数量字段中输入文本值并保存部件。您会看到该字段的值会恢复为该字段保存的最后一个有效数字。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `update` method receives two arrays of data and must return a single array
    to be saved in the website database. The two incoming arrays contain the new option
    values entered by the user and the values that were previously stored for the
    widget, respectively.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`方法接收两个数据数组，并必须返回一个数组以保存到网站数据库中。这两个传入的数组分别包含用户输入的新选项值和部件之前存储的值。'
- en: To start from known values, the method's implementation starts by making a copy
    of the old values to a new variable called `$instance`. It follows this initialization
    by calling the `sanitize_text_field` function to remove potentially harmful HTML
    or PHP tags from text fields, saving the return value in the `$instance` array.
    It also calls the PHP `is_numeric` and `intval` functions on entry, indicating
    the number of reviews to be displayed to make sure that it's a numeric value.
    If anything other than a number is entered, the previous field value will be saved
    and displayed back to the user. Unfortunately, it is not possible to display an
    error message when this type of validation of widget options is performed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要从已知值开始，方法实现首先将旧值复制到一个名为`$instance`的新变量中。然后通过调用`sanitize_text_field`函数来初始化，该函数从文本字段中移除可能有害的HTML或PHP标签，并将返回值保存到`$instance`数组中。它还在进入时调用PHP的`is_numeric`和`intval`函数，以指示要显示的评论数量，确保它是一个数值。如果输入的不是数字，则将保存并显示之前的字段值给用户。不幸的是，当执行此类小部件选项验证时，无法显示错误消息。
- en: See also
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关阅读
- en: The *Displaying configuration options* recipe
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显示配置选项*配方'
- en: Implementing the widget display function
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现小部件显示函数
- en: For all of the widget creation work that we have done so far, our new creation
    does not display any content on the website yet. When displaying an area that
    contains widgets, WordPress tries to call a method named `widget` for each user-selected
    widget to output the desired content to the browser.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们迄今为止所做的所有小部件创建工作，我们的新创建在网站上还没有显示任何内容。当显示包含小部件的区域时，WordPress会尝试为每个用户选择的每个小部件调用名为`widget`的方法，以便将所需的内容输出到浏览器。
- en: This recipe shows how to implement a `widget` method to display a list of recent
    book reviews when the widget is instantiated in a sidebar.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何在侧边栏中实例化小部件时，如何实现一个`widget`方法来显示最近的书评列表。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Validating configuration options* recipe
    to have a starting point for this recipe. Alternatively, you can get the resulting
    code (`Chapter 10/ch10-book-review-widget/ch10-book-review-widget-v3.php`) from
    the code bundle and rename the file as `ch10-book-review-widget.php`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*验证配置选项*配方，以便为本配方提供一个起点。或者，您可以从代码包中获取结果代码（`第10章/ch10-book-review-widget/ch10-book-review-widget-v3.php`），并将文件重命名为`ch10-book-review-widget.php`。
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Navigate to the `ch10-book-review-widget` directory and edit `ch10-book-review-widget.php`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch10-book-review-widget`目录并编辑`ch10-book-review-widget.php`。
- en: 'Find the `Book_Reviews` class and add the following block of code within the
    class to define the `widget` method:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类`Book_Reviews`中找到并添加以下代码块以定义`widget`方法：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save and close the plugin file.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Visit the website''s front page to see the newly added widget contents displayed
    in the sidebar:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问网站的前页以查看新添加的小部件内容在侧边栏中显示：
- en: '![](img/eb74f96f-d123-4879-b1e6-1eaa960a94d0.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb74f96f-d123-4879-b1e6-1eaa960a94d0.png)'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Similar to action hooks that we have seen in the earlier chapters, the `widget`
    method is meant to directly output HTML code to the browser that will be displayed
    when an instance of the new widget has been created in a sidebar.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在早期章节中看到的动作钩子类似，`widget`方法旨在直接输出HTML代码到浏览器，当在侧边栏中创建新小部件的实例时，这些代码将在浏览器中显示。
- en: The `widget` method starts by checking whether or not the widget should be displayed.
    If it should, it continues by calling the standard PHP `extract` function on the
    first parameter received, an array named `$args`. Calling this function parses
    the array and creates variables for each element found, making it easier for the
    following code to access the elements that should be placed before and after the
    widget title and widget content.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget`方法首先检查小部件是否应该显示。如果应该显示，它将继续通过在接收到的第一个参数上调用标准的PHP `extract`函数，即名为`$args`的数组，来继续操作。调用此函数解析数组并为每个找到的元素创建变量，这使得后续代码更容易访问应该放置在标题和小部件内容之前和之后的元素。'
- en: After this initial statement, the recipe continues by retrieving the number
    of items to display and the widget title from the `$instance` array, which has
    been received as the second method parameter using the same technique that was
    shown when implementing the `form` method.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个初始声明之后，配方继续通过从`$instance`数组中检索要显示的项目数量和小工具标题，该数组作为第二个方法参数使用与实现`form`方法时相同的技巧接收，来继续。
- en: The rest of the code is very similar to the book review shortcode created in
    [*Chapter 4*](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types* (displaying custom post type data in shortcodes), where we assemble
    a query string that indicates the type and maximum quantity of data that we want
    to retrieve from the database. The resulting query is executed by creating a new
    instance of the WordPress `WP_Query` object. If results are found, the following
    recipe code cycles through all the entries and outputs code to render an unordered
    list of all the items found. Last, but not least, the recipe formats the widget
    content by outputting the values of the `$before_widget`, `$after_widget`, `$before_title`,
    and `$after_title` widget class variables, and the user-specified widget title
    in the right places.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码与在[*第4章*](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml)，*自定义帖子类型的威力*（在短代码中显示自定义帖子类型数据）中创建的书评短代码非常相似，在那里我们组装一个查询字符串，指示从数据库中检索的数据类型和最大数量。通过创建WordPress
    `WP_Query`对象的新实例来执行生成的查询。如果找到结果，以下配方代码将遍历所有条目并输出代码以渲染找到的所有项目的无序列表。最后，但同样重要的是，配方通过输出`$before_widget`、`$after_widget`、`$before_title`和`$after_title`小工具类变量以及用户指定的正确位置的小工具标题来格式化小工具内容。
- en: See also
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating a new widget in WordPress* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在WordPress中创建新小工具的配方*'
- en: Adding a custom dashboard widget
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义仪表板小工具
- en: While widgets are primarily used by website administrators to easily add content
    to their front-facing websites, WordPress contains another type of widget that
    plugin developers can use to enhance user experience. Dashboard plugins are sections
    that appear on the front page of a website's administration area. These sections
    can offer any kind of functionality, from simple information displays indicating
    how much data is stored in a plugin to forms that allow website administrators
    to quickly perform configuration tasks.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然小工具主要用于网站管理员轻松地将内容添加到他们的前端网站，但WordPress还包含另一种插件开发者可以使用以增强用户体验的小工具。仪表板插件是出现在网站管理区域首页的板块。这些板块可以提供任何类型的功能，从简单显示存储在插件中的数据量到允许网站管理员快速执行配置任务表单。
- en: This recipe shows how to add a new dashboard widget that indicates how many
    book reviews are stored in the system, along with links to quickly access them.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方展示了如何添加一个新仪表板小工具，该小工具指示系统中存储了多少书评，并提供快速访问它们的链接。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Updating page title to include custom
    post data using plugin filters* recipe from [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*, to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php`)
    from the code bundle and activate the `Chapter 4 - Book Reviews` plugin.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了来自[第4章](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml)，*自定义帖子类型的威力*中的*使用插件过滤器更新页面标题以包含自定义帖子数据*配方，以便为本配方提供一个起点。或者，你可以从代码包中获取结果代码（`第4章/ch4-book-reviews/ch4-book-reviews-v11.php`），并激活`第4章
    - 书评`插件。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录。
- en: Create a new directory called `ch10-book-review-dashboard-widget`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch10-book-review-dashboard-widget`的新目录。
- en: Navigate to the directory and create a text file called `ch10-book-review-dashboard-widget.php`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录，创建一个名为`ch10-book-review-dashboard-widget.php`的文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 10 - Book Review Dashboard Widget`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为`第10章 - 书评仪表板小工具`。
- en: 'Add the following line of code to register a function to be called when the
    dashboard contents are being prepared:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册在准备仪表板内容时调用的函数：
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code segment to provide an implementation for the `ch10brdw_add_dashboard_widget`
    function:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch10brdw_add_dashboard_widget`函数的实现：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Insert the following block of code to implement the `ch10brdw_dashboard_widget`
    function declared in the previous step:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码块以实现之前步骤中声明的`ch10brdw_dashboard_widget`函数：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save and close the plugin file.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins management page and Activate the `Chapter 10 - Book
    Review Dashboard Widget` plugin.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活`第10章 - 书评仪表板小部件`插件。
- en: 'Navigate to the website''s Dashboard to see the new Book Reviews widget at
    the bottom of the page, as shown in the following screenshot:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到网站的仪表板，查看页面底部的新的书评小部件，如下一个屏幕截图所示：
- en: '![](img/af35d77c-3218-493a-a65e-4da723b1f0e4.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/af35d77c-3218-493a-a65e-4da723b1f0e4.png)'
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Any plugin can register its own dashboard widget when WordPress is putting together
    content for this administrative landing page. After registering a function to
    be called during the dashboard setup phase, our recipe makes a call to the `wp_add_dashboard_widget`
    function to add our own element to the website when the callback is executed.
    The `wp_add_dashboard_widget` function requires three parameters that need to
    provide a unique identifier for the new item, a title to be displayed at the top
    of the widget, and a function that will be responsible for generating the widget's
    contents. The `wp_add_dashboard_widget` function also has an optional fourth parameter
    that can be used when the widget needs to process form data as part of the dashboard
    widget contents.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 任何插件都可以在WordPress组合此管理登录页面内容时注册自己的仪表板小部件。在注册一个在仪表板设置阶段被调用的函数后，我们的配方会调用`wp_add_dashboard_widget`函数，在回调执行时将我们的元素添加到网站上。`wp_add_dashboard_widget`函数需要三个参数，这些参数需要为新项目提供一个唯一的标识符，一个要在小部件顶部显示的标题，以及一个将负责生成小部件内容的函数。`wp_add_dashboard_widget`函数还有一个可选的第四个参数，可以在小部件需要作为仪表板小部件内容的一部分处理表单数据时使用。
- en: As can be seen in the previous screenshot, dashboard widgets are displayed using
    WordPress meta boxes, where any HTML code echoed by the content display function
    directly appears in the box.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，仪表板小部件是通过WordPress元框显示的，其中内容显示函数直接回显的任何HTML代码都直接出现在框中。
- en: While the display function is mostly composed of HTML code, we also make a call
    to the `wp_count_posts` utility function, which easily returns the number of posts
    for a given post type.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然显示函数主要由HTML代码组成，但我们还调用了`wp_count_posts`实用函数，该函数可以轻松返回给定文章类型的帖子数量。
- en: The new widget can be hidden and moved to a new location on the Dashboard, like
    any other built-in widget. Just like the front-facing widget plugin created earlier
    in this chapter, it should be noted that all the code in this plugin is in a separate
    file to the original book review plugin, to organize its code separately from
    the original plugin file created in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 新小部件可以被隐藏并移动到仪表板上的新位置，就像任何其他内置小部件一样。就像本章早期创建的前端小部件插件一样，需要注意的是，此插件中的所有代码都位于一个单独的文件中，与在[第4章](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml)，*自定义文章类型的威力*中创建的原始书评插件文件分开，以将代码单独组织在原始插件文件之外。
- en: See also
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Updating page title to include custom post data using plugin filters* recipe
    in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml)，*自定义文章类型的威力*中，查看*使用插件过滤器更新页面标题以包含自定义文章数据*的配方。
- en: Adding a custom widget to the network dashboard
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向网络仪表板添加自定义小部件
- en: As discussed in the recipe titled *Creating network-level admin pages* back
    in [*Chapter 3*](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*, WordPress offers a very powerful mode called Network mode,
    which allows for multiple websites to be served from a single installation of
    the platform. When creating a plugin, developers need to think if it would make
    sense for their plugin to offer a dashboard widget that would only be seen in
    the network administrator's dashboard instead of being seen in individual website
    dashboards, or if their plugin's scope is really more relevant at each website's
    level. The following recipe shows how to modify the dashboard widget defined in
    the previous recipe so that it appears in the network administration panel on
    network installations, while still appearing in the administration dashboard in
    single site installations.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在标题为*创建网络级别管理页面*的菜谱中讨论的那样，该菜谱位于[*第3章*](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)，*用户设置和管理页面*，WordPress提供了一个非常强大的模式，称为网络模式，它允许从单个平台安装中为多个网站提供服务。当创建插件时，开发者需要考虑他们的插件是否应该提供一个仪表板小部件，该小部件仅在网络管理员的仪表板中可见，而不是在单个网站仪表板中可见，或者他们的插件的范围是否真的更相关于每个网站的级别。以下菜谱展示了如何修改之前定义的仪表板小部件，以便在网络安装上出现在网络管理面板中，同时在单个站点安装的行政仪表板中仍然可见。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Adding a custom dashboard widget* recipe
    to have a starting point for this recipe. Alternatively, you can get the resulting
    code (`Chapter 10/ch10-book-review-dashboard-widget/ch10-book-review-dashboard-widget-v1.php`)
    from the code bundle and rename the file `ch10-book-review-dashboard-widget.php`.
    You should also have access to a network site configured as a Network to test
    all of this plugin's functionality.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*添加自定义仪表板小部件*菜谱，以便为本菜谱提供一个起点。或者，您可以从代码包中获取结果代码（`Chapter 10/ch10-book-review-dashboard-widget/ch10-book-review-dashboard-widget-v1.php`），并将文件重命名为`ch10-book-review-dashboard-widget.php`。您还应该能够访问一个配置为网络的网络站点，以测试此插件的所有功能。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch10-book-review-dashboard-widget` and edit `ch10-book-review-dashboard-widget.php`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch10-book-review-dashboard-widget`的新目录，并编辑`ch10-book-review-dashboard-widget.php`。
- en: 'Locate the `add_action` call that was first added at the top of the plugin
    and add the following highlighted lines of code around the existing function call:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到最初在插件顶部添加的`add_action`调用，并在现有函数调用周围添加以下突出显示的代码行：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Locate the `ch10brdw_dashboard_widget` function and add the following code
    to the function around the existing implementation of the function. The new lines
    of code are shown in bold:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`ch10brdw_dashboard_widget`函数，并在函数的现有实现周围添加以下代码。新的代码行以粗体显示：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save and close the plugin file.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Navigate to the website Dashboard (on a single site installation) or to the
    Network-level Dashboard (in a network installation) to see the same widget as
    before or to see the network-level dashboard, respectively:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到网站仪表板（在单个站点安装上）或网络级别仪表板（在网络安装上），以查看之前相同的仪表板或分别查看网络级别仪表板：
- en: '![](img/4e8d787f-500a-42bb-a603-67ade585273a.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e8d787f-500a-42bb-a603-67ade585273a.png)'
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The initial change made in this recipe is to check whether the plugin is running
    on a single site or network installation of WordPress and associate a callback
    function with the appropriate action hook depending on the result. As you can
    see, we use the same callback function in both cases, since the widget registering
    function should call `wp_add_dashboard_widget` to register a widget with the system
    in either case.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中进行的初始更改是检查插件是否运行在单个站点的WordPress安装或网络安装上，并根据结果将回调函数与适当的行为钩子关联。正如您所看到的，我们在两种情况下都使用了相同的回调函数，因为无论在哪种情况下，小部件注册函数都应该调用`wp_add_dashboard_widget`来注册一个与系统相关联的小部件。
- en: The widget rendering function is also shared between both modes. When running
    in a network installation, the rendering code first gets a list of all sites using
    the `get_sites` function, then cycles through the list of sites and uses the `switch_to_blog`
    function to access data from each site's database tables. Once all the blogs have
    been processed, we use the `restore_current_blog` function to go back to the original
    site that is configured as the top-level site in the network.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 小工具渲染函数在两种模式下也是共享的。在网络安装上运行时，渲染代码首先通过`get_sites`函数获取所有站点的列表，然后遍历站点列表，并使用`switch_to_blog`函数访问每个站点的数据库表中的数据。一旦处理完所有博客，我们使用`restore_current_blog`函数回到配置为网络顶级站点的原始站点。
- en: It is important to restore the current blog to avoid leaving some internal variables
    pointing to the wrong site.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复当前博客非常重要，以避免留下一些内部变量指向错误的站点。
- en: When running on a single site installation of WordPress, we create a dummy list
    of sites that contains a single entry to allow us to use the same `foreach` loop
    control structure. We then avoid calling the functions that are related to network
    site operations when WordPress is not configured in the multisite mode. Otherwise,
    the actual code that queries how many book reviews are present and displays them
    is identical between both versions of the widget.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当在单个站点的WordPress安装上运行时，我们创建一个包含单个条目的虚拟站点列表，以便我们能够使用相同的`foreach`循环控制结构。然后，当WordPress未配置为多站点模式时，我们避免调用与网络站点操作相关的函数。否则，查询有多少书评存在并显示它们的实际代码在两个版本的插件中是相同的。
- en: See also
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding a custom dashboard widget* recipe
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加自定义仪表板小工具* 菜谱'
