- en: Chapter 11. Utility Classes and Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。实用类和工具
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Working with the Set class
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Set 类
- en: Manipulating strings with the String class
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 String 类操作字符串
- en: Sending an e-mail
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送电子邮件
- en: Detecting file types with MagicDb
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MagicDb 检测文件类型
- en: Throwing and handling exceptions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抛出和处理异常
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter introduces a set of utility classes and helpful techniques that
    improve the architecture of a CakePHP application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一组实用类和有用的技术，这些技术可以改善 CakePHP 应用的架构。
- en: The first recipe shows how to work with a CakePHP class that optimizes the manipulation
    of arrays. The second recipe shows how to manipulate strings with CakePHP's **String**
    class. The third recipe shows how to send an email using the `Email` component.
    The fourth recipe shows how to use the `MagicDb` class to detect the type of a
    file.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一道菜谱展示了如何使用 CakePHP 类优化数组操作。第二道菜谱展示了如何使用 CakePHP 的 **String** 类操作字符串。第三道菜谱展示了如何使用
    `Email` 组件发送电子邮件。第四道菜谱展示了如何使用 `MagicDb` 类检测文件的类型。
- en: Working with the Set class
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Set 类
- en: One of the most debated decisions CakePHP has ever made was returning arrays
    as a result of a model `find` operation. While ORM purists may argue that each
    returned item should be an instance of a model class, arrays prove themselves
    very useful, fast, and flexible for manipulating characteristics that can be impossible
    to achieve with a pure object approach.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 做过的最具争议的决定之一是将模型 `find` 操作的结果返回为数组。虽然 ORM 纯粹主义者可能会争论每个返回项都应该是模型类的一个实例，但数组证明自己在操作那些用纯对象方法难以实现的特征时非常实用、快速且灵活。
- en: The `Set` class was introduced to give the developer even more power when dealing
    with array based data structures. With a simple method call, we can manipulate
    an array with ease, avoiding us the pain of having to build long and complex code
    blocks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set` 类被引入，以便在处理基于数组的复杂数据结构时，开发者能够拥有更多的权力。通过简单的调用方法，我们可以轻松地操作数组，避免了编写长而复杂的代码块的需要。'
- en: This recipe shows how to use some of the most useful methods this class provides,
    while introducing other available methods that may be useful under different scenarios.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱展示了如何使用这个类提供的最有用的方法，同时介绍了在其他不同场景下可能有用的其他方法。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through this recipe, we need some data to work with. Create the following
    tables, and populate them with data, by issuing these SQL statements:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个菜谱，我们需要一些数据来操作。创建以下表，并通过发出以下 SQL 语句填充它们：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a controller in a file named `exams_controller.php` and place it in
    your `app/controllers` folder, with the following contents:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为 `exams_controller.php` 的文件中创建一个控制器，并将其放置在您的 `app/controllers` 文件夹中，内容如下：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file named `exam.php` and place it in your `app/models` folder, with
    the following contents:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `exam.php` 的文件，并将其放置在您的 `app/models` 文件夹中，内容如下：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file named `grade.php` and place it in your `app/models` folder, with
    the following contents:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `grade.php` 的文件，并将其放置在您的 `app/models` 文件夹中，内容如下：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit your `app/controllers/exams_controller.php` file and insert the following
    contents in its `index()` method:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的 `app/controllers/exams_controller.php` 文件，并在其 `index()` 方法中插入以下内容：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a folder named `exams` and place it in your `app/views` folder. Create
    a file named `index.ctp` and place it in your `app/views/exams` folder, with the
    following contents:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `exams` 的文件夹，并将其放置在您的 `app/views` 文件夹中。创建一个名为 `index.ctp` 的文件，并将其放置在
    `app/views/exams` 文件夹中，内容如下：
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you now browse to `http://localhost/exams`, you should see the average grade
    for all exams, a detailed list of what each student got on each exam, and the
    list of all categories, as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在浏览到 `http://localhost/exams`，您应该看到所有考试的平均成绩，每个学生在每个考试中的详细成绩列表，以及所有类别的列表，如下面的截图所示：
- en: '![How to do it...](img/1926_11_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1926_11_01.jpg)'
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We start by using the `Set::extract()` method to extract information out of
    the result obtained after fetching all rows from the `Exam` model. The information
    we are interested in retrieving is the list of all grades. The `extract()` method
    takes up to three arguments:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用 `Set::extract()` 方法从从 `Exam` 模型中获取所有行后的结果中提取信息。我们感兴趣的是检索所有成绩的列表。`extract()`
    方法最多接受三个参数：
- en: '`path`: An X-Path 2.0-compatible expression that shows the path to the information
    that should be extracted.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`: 一个与 X-Path 2.0 兼容的表达式，用于显示应提取信息的路径。'
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Set` class supports only a subset of the X-Path 2.0 specification. Expressions
    such as `//`, which are valid in X-Path, are not available in `Set`. Continue
    reading this recipe to learn what expressions are supported.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Set` 类仅支持 X-Path 2.0 规范的一部分。在 X-Path 中有效的表达式，如 `//`，在 `Set` 中不可用。继续阅读本食谱以了解支持哪些表达式。'
- en: '`data`: The array data structure from which to extract the information.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：从其中提取信息的数组数据结构。'
- en: '`options`: These are optional settings. At the time of this writing, only the
    option `flatten` (a boolean) is available. Setting it to `false` will return the
    extracted field as part of the resulting structure. Defaults to `true`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`：这些是可选设置。在撰写本文时，只有选项 `flatten`（一个布尔值）可用。将其设置为 `false` 将返回作为结果结构一部分的提取字段。默认为
    `true`。'
- en: 'The `path` argument offers a flexible approach when defining what information
    we are interested in. To further understand its syntax, consider the data structure
    that results from fetching all `Exam` records, together with their `Category`
    information, and all associated `Grade` records:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`path` 参数在定义我们感兴趣的信息时提供了一个灵活的方法。为了进一步了解其语法，考虑从获取所有 `Exam` 记录及其 `Category` 信息以及所有相关的
    `Grade` 记录得到的数据结构：'
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In X-Path 2.0, the path is an expression separated by the forward slash (/),
    while each part in that expression represents a subpath (CakePHP's `Set::extract()`
    method also enforces a starting slash.) Therefore, the expression `/children`
    refers to a path that includes only elements named `children`, while the expression
    `/children/grandchildren` will select items named `grandchildren` that are descendents
    of items named `children`. When we refer to the name of an item, we are referring
    to the key in the array structure.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 X-Path 2.0 中，路径是一个由正斜杠 (/) 分隔的表达式，而该表达式中的每一部分代表一个子路径（CakePHP 的 `Set::extract()`
    方法也强制使用起始斜杠）。因此，表达式 `/children` 指的是只包含名为 `children` 的元素的路径，而表达式 `/children/grandchildren`
    将选择名为 `grandchildren` 的项，这些项是名为 `children` 的项的后代。当我们提到一个项的名称时，我们指的是数组结构中的键。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about X-Path 2.0 can be obtained at [http://www.w3.org/TR/xpath20](http://www.w3.org/TR/xpath20).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 X-Path 2.0 的信息可以在 [http://www.w3.org/TR/xpath20](http://www.w3.org/TR/xpath20)
    获取。
- en: 'If we intended to grab only the `Exam` fields (thus discarding the information
    regarding `Category` and `Grade)`, we would use the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想获取 `Exam` 字段（从而丢弃有关 `Category` 和 `Grade` 的信息），我们会使用以下方法：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This would return an array of elements, each element indexed by `Exam`, and
    having as its value all the fields for the `Exam` key. If we were only interested
    in the `name` field, we would add another subpath to the expression:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个元素数组，每个元素按 `Exam` 索引，其值是 `Exam` 键的所有字段。如果我们只对 `name` 字段感兴趣，我们会在表达式中添加另一个子路径：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also further limit a path by adding conditional expressions. A conditional
    expression filters the elements (using the `Set::matches()` method), by applying
    one of the typical comparison operators (`<, <=, >, >=, =, !=`) to each element
    that matches the path. To obtain all `Grade` records where the value of the `grade`
    field is less than `8`, we would use the following expression (notice how the
    conditional expression is applied to a subpath and is surrounded with brackets):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过添加条件表达式进一步限制路径。条件表达式通过将典型的比较运算符（`<, <=, >, >=, =, !=`）应用于与路径匹配的每个元素来过滤元素（使用
    `Set::matches()` 方法）。为了获取所有 `grade` 字段值小于 `8` 的 `Grade` 记录，我们会使用以下表达式（注意条件表达式是如何应用于子路径并且被括号包围的）：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Instead of a comparison operator, we can use position expressions, which can
    be any of the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用位置表达式代替比较运算符，这些表达式可以是以下任何一种：
- en: '`:first`: Refers to the first matching element.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:first`：指的是第一个匹配的元素。'
- en: '`:last`: Refers to the last matching element.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:last`：指的是最后一个匹配的元素。'
- en: '`number`: Refers to the element located in the position indicated by number,
    where `number` is a number greater than or equal to `1`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number`：指的是位于由数字指示的位置的元素，其中 `number` 是大于或等于 `1` 的数字。'
- en: '`start:end`: Refers to all elements starting at position `start`, and ending
    at position `end`. Both `start` and `end` are numbers greater than, or equal to,
    `1`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start:end`：指的是从位置 `start` 开始，到位置 `end` 结束的所有元素。`start` 和 `end` 都是大于或等于 `1`
    的数字。'
- en: 'To filter the data set so that only the second and third elements of all `Grade`
    records are returned, using the subset of records where `grade` is greater than
    or equal to `8`, and obtaining only the value for the `grade` field, we would
    do:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要过滤数据集，以便只返回所有 `Grade` 记录的第二和第三个元素，使用 `grade` 大于或等于 `8` 的记录子集，并仅获取 `grade` 字段的值，我们将这样做：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Going back to the recipe, we started by extracting only the value of the `grade`
    field for each `Grade` record. This `Set::extract()` call returns an array of
    `grade` values, so we can then use PHP's `array_sum()` and `count()` functions
    to calculate the average grading.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 回到配方，我们首先只提取每个 `Grade` 记录的 `grade` 字段的值。这个 `Set::extract()` 调用返回一个 `grade` 值的数组，然后我们可以使用
    PHP 的 `array_sum()` 和 `count()` 函数来计算平均评分。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A handful of examples of the `Set::extract()` method, and other `Set` methods,
    can be obtained from its test case. Look into your CakePHP core folder for the
    `tests/cases/libs/set.test.php` file and go through the different test cases.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set::extract()` 方法和其他 `Set` 方法的几个示例可以从其测试用例中获得。查看您的 CakePHP 核心文件夹中的 `tests/cases/libs/set.test.php`
    文件，并查看不同的测试用例。'
- en: 'We then use the `Set::combine()` method. This method takes up to four arguments:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用 `Set::combine()` 方法。此方法最多接受四个参数：
- en: '`data`: The array data structure on which to operate.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：要操作的数据数组。'
- en: '`path1`: The X-Path 2.0 path used to fetch the keys of the resulting array.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path1`：用于获取结果数组键的 X-Path 2.0 路径。'
- en: '`path2`: The X-Path 2.0 path used to fetch the values of the resulting array.
    If not specified, the values will be set to `null`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path2`：用于获取结果数组值的 X-Path 2.0 路径。如果没有指定，值将被设置为 `null`。'
- en: '`groupPath`: The X-Path 2.0 path to use when looking to group the resulting
    items so each item is a subitem of the corresponding group.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupPath`：用于将结果项分组以便每个项都是相应组的子项的 X-Path 2.0 路径。'
- en: Using the `/Category/id` expression as keys and `/Category/name` as values,
    we obtain an indexed array, where the keys are the `Category` IDs, and the values
    their respective `Category` names.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `/Category/id` 表达式作为键，`/Category/name` 作为值，我们获得一个索引数组，其中键是 `Category` ID，值是相应的
    `Category` 名称。
- en: 'The `groupPath` argument can serve useful in many scenarios. Consider the need
    of obtaining the grades for all exams for a particular student, grouped by the
    category of the exam. Using the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupPath` 参数在许多场景中非常有用。考虑一下需要按考试类别分组获取特定学生的所有考试成绩的需求。使用以下方法：'
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We would obtain what we need in an easy to navigate array:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得一个易于导航的数组：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The recipe continues by fetching all grades, and then using the `Set::format()`
    method to obtain a list of formatted strings. This method takes three arguments:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 配方继续通过获取所有评分，然后使用 `Set::format()` 方法获取格式化字符串列表。此方法接受三个参数：
- en: '`data`: The data to format.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：要格式化的数据。'
- en: '`format`: The `sprintf()-based` string that contains the format to use.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format`：包含要使用的格式的 `sprintf()` 基于字符串。'
- en: '`keys`: The array of X-Path 2.0 paths to use when replacing the `sprintf()`
    conversion specifications included in `format`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys`：用于替换包含在 `format` 中的 `sprintf()` 转换规范的 X-Path 2.0 路径数组。'
- en: Note
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the `sprintf()` based conversion specifications see [http://php.net/sprintf](http://php.net/sprintf).
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于基于 `sprintf()` 的转换规范的信息，请参阅 [http://php.net/sprintf](http://php.net/sprintf)。
- en: '`Set::format()` applies the `format` string to each item in the `data` array,
    and returns an array of formatted strings. In the recipe we used the string `%s`
    got `a %-.1f in %s (%s)`. This string contains four conversion specifications:
    a string, a floating number (which we are forcing to only include one decimal
    digit), and two other strings. This means that our keys argument should contain
    four paths. Each of those paths will be used, in sequence to replace their corresponding
    conversion specification.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set::format()` 将 `format` 字符串应用于 `data` 数组中的每个项，并返回一个格式化字符串数组。在配方中，我们使用了字符串
    `%s` got `a %-.1f in %s (%s)`。此字符串包含四个转换规范：一个字符串、一个浮点数（我们强制只包含一位小数），以及另外两个字符串。这意味着我们的
    `keys` 参数应包含四个路径。每个路径都将按顺序用于替换其相应的转换规范。'
- en: 'The recipe ends by using the `Set::map()` method, which can be useful if you
    want to deal with objects, rather than arrays. This method takes two optional
    arguments:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 配方最后使用 `Set::map()` 方法结束，如果您想处理对象而不是数组，这个方法非常有用。此方法接受两个可选参数：
- en: '`class`: The class name to be used when creating an instance of an object.
    This argument is normally used to specify the data, and the `tmp` argument is
    used to specify the class name.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class`: 创建对象实例时要使用的类名。这个参数通常用于指定数据，而 `tmp` 参数用于指定类名。'
- en: '`tmp`: If the first argument is an array, then this argument behaves as the
    `class` argument. Otherwise it is safely ignored.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tmp`: 如果第一个参数是数组，则此参数的行为类似于 `class` 参数。否则，它将被安全忽略。'
- en: Simply calling this method with the data to convert will convert that data to
    a set of generic object instances, recursively. If the `class` argument is used,
    then the class name specified in that argument will be used when creating the
    respective object instances.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 只需用要转换的数据调用此方法，就会递归地将该数据转换为一系列通用对象实例。如果使用 `class` 参数，那么在创建相应的对象实例时将使用该参数中指定的类名。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The usefulness of the `Set` class does not end here. There are several other
    methods that were not covered in this recipe, but can help us when developing
    our CakePHP applications. Some of these methods are:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set` 类的有用性不仅限于此。还有一些其他方法在本食谱中没有涉及，但可以帮助我们在开发 CakePHP 应用程序时。其中一些方法包括：'
- en: '`merge()`: Acts as a combination of two PHP methods: `array_merge()` and `array_merge_recursive()`,
    allowing the proper merging of arrays when the same key exists in at least two
    of the arguments, and they are themselves arrays. In this case, it performs another
    `Set::merge()` on those elements.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`merge()`: 作为两个 PHP 方法的组合：`array_merge()` 和 `array_merge_recursive()`，允许在至少两个参数中存在相同的键，并且它们自身是数组时，正确合并数组。在这种情况下，它将对这些元素执行另一个
    `Set::merge()`。'
- en: '`filter()`: Filter empty elements out of an array, leaving in real values that
    evaluate to empty (`0`, and`''0''`)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter()`: 从数组中过滤掉空元素，保留评估为空的实值（`0` 和 `''0''`）'
- en: '`pushDiff()`: Pushes the differences from one array to another, inserting the
    nonexistent keys from the second argument to the first, recursively.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pushDiff()`: 将一个数组的差异推送到另一个数组中，从第二个参数中插入到第一个参数中不存在的键，递归地。'
- en: '`numeric()`: Determines if the elements in the array contain only numeric values.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numeric()`: 判断数组中的元素是否只包含数值。'
- en: '`diff()`: Computes and returns the different elements between two arrays.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diff()`: 计算并返回两个数组之间的不同元素。'
- en: '`reverse()`: Converts an object into an array. This method can be seen as the
    opposite of the `Set::map()` method.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reverse()`: 将对象转换为数组。这个方法可以看作是 `Set::map()` 方法的相反。'
- en: '`sort()`: Sorts an array by the value specified in an X-Path 2.0 compatible
    path.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort()`: 根据在 X-Path 2.0 兼容路径中指定的值对数组进行排序。'
- en: Manipulating strings with the String class
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 String 类操作字符串
- en: String manipulation is probably one of PHP's biggest strengths, as it offers
    a handful of functions to perform a variety of operations. Even when almost every
    need can be fulfilled by using PHP's core methods, some forms of string manipulation
    may prove troublesome.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串操作可能是 PHP 最强大的功能之一，因为它提供了一系列函数来执行各种操作。即使几乎每个需求都可以通过使用 PHP 的核心方法来满足，某些形式的字符串操作可能会变得麻烦。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To find out more about some of PHP's core string methods see [http://php.net/manual/en/ref.strings.php](http://php.net/manual/en/ref.strings.php).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 PHP 核心字符串方法的信息，请参阅 [http://php.net/manual/en/ref.strings.php](http://php.net/manual/en/ref.strings.php)。
- en: CakePHP offers a utility class named `String` to help us deal with strings.
    This recipe introduces the class and its few, yet useful set of methods.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 提供了一个名为 `String` 的实用类，帮助我们处理字符串。本食谱介绍了该类及其少量但有用的方法集。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need a controller to use as placeholder for our code. Create a file named
    `examples_controller.php` and place it in your `app/controllers` folder, with
    the following contents:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个控制器来作为我们代码的占位符。创建一个名为 `examples_controller.php` 的文件，并将其放置在 `app/controllers`
    文件夹中，内容如下：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Edit the `app/controllers/examples_controller.php` file and add the following
    at the beginning of the `index()` method:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `app/controllers/examples_controller.php` 文件，并在 `index()` 方法的开头添加以下内容：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you now browse to `http://localhost/examples` you should see a text output
    similar to the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在浏览到 `http://localhost/examples`，你应该会看到以下类似文本输出：
- en: '**[4d403ee1-6bbc-48c6-a8cc-786894a56bba] Hello Doe, Jane! Your email is: jane.doe@email.com**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**[4d403ee1-6bbc-48c6-a8cc-786894a56bba] Hello Doe, Jane! Your email is: jane.doe@email.com**'
- en: '**[4d403ee1-9e84-487f-95cf-786894a56bba] Hello Doe, John! Your email is: john.doe@email.com**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**[4d403ee1-9e84-487f-95cf-786894a56bba] Hello Doe, John! Your email is: john.doe@email.com**'
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `String` class offers the following methods for string manipulation:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`String` 类提供了以下字符串操作方法：'
- en: '`cleanInsert()`: Cleans a string generated via the `String::insert()` method.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cleanInsert()`: 清理通过 `String::insert()` 方法生成的字符串。'
- en: '`insert()`: Replaces variable placeholders in a string with a set of values.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert()`: 在字符串中用一组值替换变量占位符。'
- en: '`tokenize()`: Separates a string into parts using a given separator, and ignoring
    the separator instances that appear between the specified bound strings.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tokenize()`: 使用给定的分隔符将字符串分割成部分，并忽略出现在指定边界字符串之间的分隔符实例。'
- en: '`uuid()`: Returns a random UUID string.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uuid()`: 返回一个随机的 UUID 字符串。'
- en: 'This recipe starts by defining an array of two strings, each of them following
    a format similar to what we would find on a CSV (comma-separated values) file.
    For each of those lines, we use the `String::tokenize()` method to separate the
    CSV line into a set of values. This method takes up to four arguments:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱首先定义一个包含两个字符串的数组，每个字符串的格式类似于我们会在 CSV（逗号分隔值）文件中找到的格式。对于这些行中的每一行，我们使用 `String::tokenize()`
    方法将 CSV 行分割成一组值。此方法最多接受四个参数：
- en: '`data`: The string to separate.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`: 要分割的字符串。'
- en: '`separator`: The token that separates the string. Defaults to`,.`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`separator`: 分隔字符串的标记。默认为 `,.`'
- en: '`` `leftBound`: The boundary string that indicates the start of an area where
    `separator` characters should be ignored. Defaults to `(`. ``'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `leftBound`: 指示应忽略 `separator` 字符的区域开始的边界字符串。默认为 `(`。 ``'
- en: '`` `rightBound`: Similar to `leftBound`, but marks the end of that area. Defaults
    to `)`. ``'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `rightBound`: 与 `leftBound` 类似，但标记了该区域的结束。默认为 `)`。 ``'
- en: '``We tell `String::tokenize()` to separate each line taking into account that
    any expression enclosed between quotes can include the separator character, in
    which case it should be ignored. We then use PHP''s `array_combine()` function
    so that each line becomes an associative array, indexed by field name and having
    as its values the corresponding field value.``'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '``我们告诉 `String::tokenize()` 分割每一行，考虑到任何用引号括起来的表达式可以包含分隔符字符，在这种情况下应忽略它。然后我们使用
    PHP 的 `array_combine()` 函数，使每一行成为一个关联数组，以字段名称为索引，其值对应于相应的字段值。``'
- en: '``As the string returned by the `String::tokenize()` method includes the boundary
    strings defined in the `leftBound` and `rightBound` arguments if they were part
    of the original string, we proceed to remove them from each line.``'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '``由于 `String::tokenize()` 方法返回的字符串包含了 `leftBound` 和 `rightBound` 参数中定义的边界字符串（如果它们是原始字符串的一部分），我们继续从每一行中删除它们。``'
- en: '``We then add a random UUID string as the value for each line''s `id` field,
    using the `String::uuid()` method. This string will be unique to each line, and
    should never repeat itself, even across separate requests.``'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '``然后我们使用 `String::uuid()` 方法将一个随机 UUID 字符串作为每行的 `id` 字段值。这个字符串将对于每一行都是唯一的，并且不应该重复，即使在不同的请求之间也不应该重复。``'
- en: '`Note`'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`注意`'
- en: '`More information about UUIDs can be obtained at [http://en.wikipedia.org/wiki/Universally_unique_identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier).`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`更多关于 UUID 的信息可以在 [http://en.wikipedia.org/wiki/Universally_unique_identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
    获取。`'
- en: '``Finally, we go through each line and output a dynamically generated string
    through the `String::insert()` method. This method takes up to three arguments:``'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '``最后，我们遍历每一行，并通过 `String::insert()` 方法输出一个动态生成的字符串。此方法最多接受三个参数：``'
- en: '`` `str`: String that contains the variable placeholders that should be replaced.
    ``'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `str`: 包含应替换的变量占位符的字符串。 ``'
- en: '`` `data`: Associative array in the form `variable => value`, used to replace
    the variable placeholders with their respective value. ``'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `data`: 形式为 `variable => value` 的关联数组，用于将变量占位符替换为其相应的值。 ``'
- en: '`` `options`: Set of options to define how the method should behave. Available
    options:  *   `before`: String that indicates the start of a variable placeholder.
    Defaults to:. *   `after`: String that indicates the end of a variable placeholder.
    Defaults to `null`, which means a placeholder starts with the string defined in
    `before`, and end where the word ends. ``'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `options`: 定义方法应如何行为的选项集。可用选项：*   `before`: 指示变量占位符开始的字符串。默认为:. *   `after`:
    指示变量占位符结束的字符串。默认为 `null`，这意味着占位符从 `before` 中定义的字符串开始，并在单词结束时结束。 ``'
- en: '`` `escape`: Character to use when looking to escape the string used in the
    `before` option. Defaults to `\`. ``'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `escape`: 在查找用于 `before` 选项的字符串时使用的字符。默认为 `\`。 ``'
- en: '`` `format`: Regular expression used to find variable placeholders. ``'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `format`: 用于查找变量占位符的正则表达式。 ``'
- en: '`` `clean`: If specified, it will clean the replaced string through the `String::cleanInsert()`
    method. Defaults to `false`, which means no cleaning is done. ``'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `clean`: 如果指定，它将通过 `String::cleanInsert()` 方法清理替换后的字符串。默认为 `false`，这意味着不进行清理。``'
- en: '``In our example, we use the string `[:id] Hello :name! Your email is\\: :email`.
    This string contains three variable placeholders: `:id, :name`, and `:email`.
    Each of those get replaced by the respective value in the associative array that
    is passed as the second argument to the `String::insert()` method.``'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '``在我们的例子中，我们使用字符串 `[:id] Hello :name! Your email is\\: :email`。这个字符串包含三个变量占位符：`:id,
    :name` 和 `:email`。这些占位符中的每一个都会被作为 `String::insert()` 方法的第二个参数传递的关联数组中的相应值所替换。``'
- en: '[PRE16] class EmailsController extends AppController { public $uses = null;
    public function index() { $this->_stop(); } }  [PRE17]     public $components
    = array(     ''Email'' => array(     ''delivery'' => ''smtp'',     ''smtpOptions''
    => array(     ''host'' => ''ssl://smtp.gmail.com'',     ''port'' => 465,     ''username''
    => ''email@gmail.com'',     ''password'' => ''password''     )     )     );          [PRE18]     $this->Email->to
    = ''Destination <email@gmail.com>'';     $this->Email->subject = ''Testing the
    Email component'';     $sent = $this->Email->send(''Hello world!'');     if (!$sent)
    {     echo ''ERROR: '' . $this->Email->smtpError . ''<br />'';     } else {     echo
    ''Email sent!'';     }          [PRE19]     $this->set(array(     ''name'' =>
    ''Mariano Iglesias'',     ''url'' => Router::url(''/'', true)     ));     $this->Email->to
    = ''Destination <email@gmail.com>'';     $this->Email->subject = ''Testing the
    Email component'';     $this->Email->sendAs = ''both'';     $this->Email->template
    = ''test'';     $sent = $this->Email->send();     if (!$sent) {     echo ''ERROR:
    '' . $this->Email->smtpError . ''<br />'';     } else {     echo ''Email sent!'';     }          [PRE20]     <html>     <head><title><?php
    echo $title_for_layout;?></title></head>     <body>     <?php echo $content_for_layout;
    ?>     <p><small>This email was sent on: <?php echo date(''F d, Y H:i''); ?></small></p>     </body>     </html>          [PRE21]     <?php
    echo $content_for_layout; ?>     This email was sent on: <?php echo date(''F d,
    Y H:i''); ?>          [PRE22]     <p>Hello <?php echo $name; ?>!</p>     <p>This
    is a test email from <?php echo $this->Html->link(''My Test Application'', $url);
    ?></p>          [PRE23]     Hello <?php echo $name; ?>!     This is a test email
    from My Test Application: <?php echo $url; ?>          [PRE24] CREATE TABLE `uploads`(
    `id` INT UNSIGNED AUTO_INCREMENT NOT NULL, `file` VARCHAR(255) NOT NULL, `mime`
    VARCHAR(255) default NULL, `description` TEXT default NULL, PRIMARY KEY(`id`)
    );  [PRE25] class UploadsController extends AppController { public function add()
    { if (!empty($this->data)) { $this->Upload->create(); if ($this->Upload->save($this->data))
    { $this->Session->setFlash(''File succesfully uploaded''); $this->redirect(array(''action''=>''view'',
    $this->Upload->id)); } else { $this->Session->setFlash(''Please correct the errors
    marked below''); } } } }  [PRE26] <?php echo $this->Form->create(''Upload'', array(''type''=>''file''));
    echo $this->Form->inputs(array( ''file'' => array(''type''=>''file'') )); echo
    $this->Form->end(''Upload''); ?>  [PRE27]     public function view($id) {     $upload
    = $this->Upload->find(''first'', array(     ''conditions'' => array(''Upload.id''
    => $id)     ));     if (empty($upload)) {     $this->cakeError(''error404'');     }     $this->set(compact(''upload''));     }     public
    function download($id) {     $upload = $this->Upload->find(''first'', array(     ''conditions''
    => array(''Upload.id'' => $id)     ));     if (empty($upload)) {     $this->cakeError(''error404'');     }     $path
    = TMP . $upload[''Upload''][''file''];     header(''Content-type: ''.$upload[''Upload''][''mime'']);     readfile($path);     $this->_stop();     }          [PRE28]     <h2><?php
    echo $upload[''Upload''][''file'']; ?></h2>     <p>     <strong>File</strong>:
    <?php echo $upload[''Upload''][''file'']; ?><br />     <strong>MIME Type</strong>:
    <?php echo $upload[''Upload''][''mime'']; ?><br />     <strong>Description</strong>:
    <?php echo $upload[''Upload''][''description'']; ?>     </p>     <br />     <p>     <?php
    if (strpos($upload[''Upload''][''mime''], ''image/'') === 0) { ?>     <?php echo
    $this->Html->image(array(''action''=>''download'', $upload[''Upload''][''id'']),
    array(''height''=>200)); ?>     <?php } else { ?>     <?php echo $this->Html->link(''Download'',
    array(''action''=>''download'', $upload[''Upload''][''id''])); ?>     <?php }
    ?>     </p>          [PRE29]     <?php     class Upload extends AppModel {     protected
    $magicDb;     protected function getMagicDb() {     if (!isset($this->magicDb))
    {     App::import(''Core'', ''MagicDb'');     $magicDb = new MagicDb();     if
    (!$magicDb->read(APP . ''vendors'' . DS . ''magic.db'')) {     return null;     }     $this->magicDb
    = $magicDb;     }     return $this->magicDb;     }     }     ?>          [PRE30]     public
    function beforeValidate($options = array()) {     $result = parent::beforeValidate($options);     $data
    = $this->data[$this->alias];     if (!empty($data[''file''])) {     if (     empty($data[''file''])
    ||     !is_array($data[''file'']) ||     empty($data[''file''][''tmp_name''])
    ||     !is_uploaded_file($data[''file''][''tmp_name''])     ) {     $this->invalidate(''file'',
    ''No file uploaded'');     return false;     }     $magicDb = $this->getMagicDb();     if
    (!isset($magicDb)) {     $this->invalidate(''file'', ''Can\''t get instance of
    MagicDb'');     return false;     }     $path = TMP . $data[''file''][''name''];     if
    (!move_uploaded_file($data[''file''][''tmp_name''], $path)) {     $this->invalidate(''file'',
    ''Could not move uploaded file'');     return false;     }     $data[''file'']
    = basename($path);     unset($data[''mime'']);     $analysis = $magicDb->analyze($path);     if
    (!empty($analysis)) {     $analysis = $analysis[0];     if (preg_match(''/^\[.+?;ext=[^;]+;mime=([^;]+);.*?\](.*)$/i'',
    $analysis[3], $match)) {     $data[''mime''] = $match[1];     if (empty($data[''description'']))
    {     $data[''description''] = $match[2];     }     }     }     if (empty($data[''mime'']))
    {     $this->invalidate(''Can\''t recognize file ''.$data[''file'']);     return
    false;     }     $this->data[$this->alias] = $data;     } else {     $this->invalidate(''file'',
    ''This field is required'');     return false;     }     return $result;     }          [PRE31]     $this->cakeError(''error404'');          [PRE32]     throw
    new AppException(''Upload ''.$id.'' not found'');          [PRE33]     <?php     class
    AppException extends Exception {     public function getInfo() {     return array(     ''message''
    => $this->getMessage(),     ''trace'' => $this->getStackTrace(),     ''url'' =>
    Router::url(null, true),     ''method'' => env(''REQUEST_METHOD''),     ''referer''
    => env(''HTTP_REFERER''),     ''POST'' => $_POST,     ''GET'' => $_GET,     ''SESSION''
    => $_SESSION     );     }     public function getStackTrace($array = true, $count
    = 5) {     if ($array) {     $trace = $this->getTrace();     if (!empty($count))
    {     $trace = array_slice($trace, 0, $count);     }     foreach($trace as $i
    => $row) {     $location = '''';     if (!empty($row[''class''])) {     $location
    .= $row[''class''] . $row[''type''] . $row[''function''] . ''()'';     }     $file
    = !empty($row[''file'']) ? str_replace(ROOT.DS, '''', $row[''file'']) : '''';     if
    (!empty($file)) {     if (!empty($location)) {     $location .= '' ('' . $file
    . ''@'' . $row[''line''] . '')'';     } else {     $location .= $file . ''@''
    . $row[''line''];     }     }     $trace[$i][''location''] = $location;     unset($trace[$i][''args'']);     }     return
    $trace;     }     return $this->getTraceAsString();     }     }     ?>          [PRE34]     <?php     App::import(array(''type''=>''File'',
    ''name''=>''AppException'', ''file''=>APP.''app_exception.php''));     App::import(''Core'',
    ''Controller'');     class ExceptionHandler extends Object {     public static
    function handleException($exception) {     self::getInstance();     self::logException($exception);     self::renderException($exception);     self::_stop();     }     }          [PRE35]     public
    function renderException($exception) {     $Dispatcher = new Dispatcher();     $Controller
    = new Controller();     $Controller->params = array(     ''controller'' => ''exceptions'',     ''action''
    => ''exception''     );     $Controller->viewPath = ''exceptions'';     if (file_exists(VIEWS.''layouts''.DS.''exception.ctp''))
    {     $Controller->layout = ''exception'';     }     $Controller->base = $Dispatcher->baseUrl();     $Controller->webroot
    = $Dispatcher->webroot;     $Controller->set(compact(''exception''));     $View
    = new View($Controller);     if (!file_exists(VIEWS.''exceptions''.DS.''view.ctp''))
    {     if (Configure::read(''debug'') > 0) {     echo ''<strong>Exception</strong>:
    '';     echo $exception->getMessage();     echo ''<pre>'';     echo $exception->getStackTrace(false);     echo
    ''</pre>'';     return;     }     return $Controller->redirect(null, 500);     }     echo
    $View->render(''view'');     }     public function logException($exception) {     $trace
    = $exception->getStackTrace();     $message = get_class($exception) . '' thrown
    in '' . $trace[0][''location''];     $message .= '': '' . $exception->getMessage();     if
    (is_a($exception, instanceof AppException)) {     $message .= '' | DEBUG: '' .
    json_encodevar_export($exception->getInfo(), true); }     self::log($message,
    LOG_ERROR);     }          [PRE36]     App::import(''Lib'', ''ExceptionHandler'');     set_exception_handler(array(''ExceptionHandler'',
    ''handleException''));          [PRE37]     <h2><?php echo $exception->getMessage();
    ?></h2>     <?php if (Configure::read(''debug'') > 0) { ?>     <ol>     <?php
    foreach($exception->getStackTrace() as $trace) { ?>     <li><?php echo $trace[''location''];
    ?></li>     <?php } ?>     </ol>     <?php if (is_a($exception, ''AppException''))
    { ?>     <?php debug(array_diff_key($exception->getInfo(), array(''message''=>null,
    ''trace''=>null))); ?>     <?php } ?>     <?php } else { ?>     <p>An error has
    been found. It has been logged, and will soon be fixed.</p>     <?php } ?>          [PRE38]`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE16] class EmailsController extends AppController { public $uses = null;
    public function index() { $this->_stop(); } }  [PRE17]     public $components
    = array(     ''Email'' => array(     ''delivery'' => ''smtp'',     ''smtpOptions''
    => array(     ''host'' => ''ssl://smtp.gmail.com'',     ''port'' => 465,     ''username''
    => ''email@gmail.com'',     ''password'' => ''password''     )     )     );          [PRE18]     $this->Email->to
    = ''Destination <email@gmail.com>'';     $this->Email->subject = ''Testing the
    Email component'';     $sent = $this->Email->send(''Hello world!'');     if (!$sent)
    {     echo ''ERROR: '' . $this->Email->smtpError . ''<br />'';     } else {     echo
    ''Email sent!'';     }          [PRE19]     $this->set(array(     ''name'' =>
    ''Mariano Iglesias'',     ''url'' => Router::url(''/'', true)     ));     $this->Email->to
    = ''Destination <email@gmail.com>'';     $this->Email->subject = ''Testing the
    Email component'';     $this->Email->sendAs = ''both'';     $this->Email->template
    = ''test'';     $sent = $this->Email->send();     if (!$sent) {     echo ''ERROR:
    '' . $this->Email->smtpError . ''<br />'';     } else {     echo ''Email sent!'';     }          [PRE20]     <html>     <head><title><?php
    echo $title_for_layout;?></title></head>     <body>     <?php echo $content_for_layout;
    ?>     <p><small>This email was sent on: <?php echo date(''F d, Y H:i''); ?></small></p>     </body>     </html>          [PRE21]     <?php
    echo $content_for_layout; ?>     This email was sent on: <?php echo date(''F d,
    Y H:i''); ?>          [PRE22]     <p>Hello <?php echo $name; ?>!</p>     <p>This
    is a test email from <?php echo $this->Html->link(''My Test Application'', $url);
    ?></p>          [PRE23] Hello <?php echo $name; ?>!     This is a test email from
    My Test Application: <?php echo $url; ?>          [PRE24] CREATE TABLE `uploads`(
    `id` INT UNSIGNED AUTO_INCREMENT NOT NULL, `file` VARCHAR(255) NOT NULL, `mime`
    VARCHAR(255) default NULL, `description` TEXT default NULL, PRIMARY KEY(`id`)
    );  [PRE25] class UploadsController extends AppController { public function add()
    { if (!empty($this->data)) { $this->Upload->create(); if ($this->Upload->save($this->data))
    { $this->Session->setFlash(''File succesfully uploaded''); $this->redirect(array(''action''=>''view'',
    $this->Upload->id)); } else { $this->Session->setFlash(''Please correct the errors
    marked below''); } } } }  [PRE26] <?php echo $this->Form->create(''Upload'', array(''type''=>''file''));
    echo $this->Form->inputs(array( ''file'' => array(''type''=>''file'') )); echo
    $this->Form->end(''Upload''); ?>  [PRE27]     public function view($id) {     $upload
    = $this->Upload->find(''first'', array(     ''conditions'' => array(''Upload.id''
    => $id)     ));     if (empty($upload)) {     $this->cakeError(''error404'');     }     $this->set(compact(''upload''));     }     public
    function download($id) {     $upload = $this->Upload->find(''first'', array(     ''conditions''
    => array(''Upload.id'' => $id)     ));     if (empty($upload)) {     $this->cakeError(''error404'');     }     $path
    = TMP . $upload[''Upload''][''file''];     header(''Content-type: ''.$upload[''Upload''][''mime'']);     readfile($path);     $this->_stop();     }          [PRE28]     <h2><?php
    echo $upload[''Upload''][''file'']; ?></h2>     <p>     <strong>File</strong>:
    <?php echo $upload[''Upload''][''file'']; ?><br />     <strong>MIME Type</strong>:
    <?php echo $upload[''Upload''][''mime'']; ?><br />     <strong>Description</strong>:
    <?php echo $upload[''Upload''][''description'']; ?>     </p>     <br />     <p>     <?php
    if (strpos($upload[''Upload''][''mime''], ''image/'') === 0) { ?>     <?php echo
    $this->Html->image(array(''action''=>''download'', $upload[''Upload''][''id'']),
    array(''height''=>200)); ?>     <?php } else { ?>     <?php echo $this->Html->link(''Download'',
    array(''action''=>''download'', $upload[''Upload''][''id''])); ?>     <?php }
    ?>     </p>          [PRE29]     <?php     class Upload extends AppModel {     protected
    $magicDb;     protected function getMagicDb() {     if (!isset($this->magicDb))
    {     App::import(''Core'', ''MagicDb'');     $magicDb = new MagicDb();     if
    (!$magicDb->read(APP . ''vendors'' . DS . ''magic.db'')) {     return null;     }     $this->magicDb
    = $magicDb;     }     return $this->magicDb;     }     }     ?>          [PRE30]     public
    function beforeValidate($options = array()) {     $result = parent::beforeValidate($options);     $data
    = $this->data[$this->alias];     if (!empty($data[''file''])) {     if (     empty($data[''file''])
    ||     !is_array($data[''file'']) ||     empty($data[''file''][''tmp_name''])
    ||     !is_uploaded_file($data[''file''][''tmp_name''])     ) {     $this->invalidate(''file'',
    ''No file uploaded'');     return false;     }     $magicDb = $this->getMagicDb();     if
    (!isset($magicDb)) {     $this->invalidate(''file'', ''Can\''t get instance of
    MagicDb'');     return false;     }     $path = TMP . $data[''file''][''name''];     if
    (!move_uploaded_file($data[''file''][''tmp_name''], $path)) {     $this->invalidate(''file'',
    ''Could not move uploaded file'');     return false;     }     $data[''file'']
    = basename($path);     unset($data[''mime'']);     $analysis = $magicDb->analyze($path);     if
    (!empty($analysis)) {     $analysis = $analysis[0];     if (preg_match(''/^\[.+?;ext=[^;]+;mime=([^;]+);.*?\](.*)$/i'',
    $analysis[3], $match)) {     $data[''mime''] = $match[1];     if (empty($data[''description'']))
    {     $data[''description''] = $match[2];     }     }     }     if (empty($data[''mime'']))
    {     $this->invalidate(''Can\''t recognize file ''.$data[''file'']);     return
    false;     }     $this->data[$this->alias] = $data;     } else {     $this->invalidate(''file'',
    ''This field is required'');     return false;     }     return $result;     }          [PRE31]     $this->cakeError(''error404'');          [PRE32]     throw
    new AppException(''Upload ''.$id.'' not found'');          [PRE33]     <?php     class
    AppException extends Exception {     public function getInfo() {     return array(     ''message''
    => $this->getMessage(),     ''trace'' => $this->getStackTrace(),     ''url'' =>
    Router::url(null, true),     ''method'' => env(''REQUEST_METHOD''),     ''referer''
    => env(''HTTP_REFERER''),     ''POST'' => $_POST,     ''GET'' => $_GET,     ''SESSION''
    => $_SESSION     );     }     public function getStackTrace($array = true, $count
    = 5) {     if ($array) {     $trace = $this->getTrace();     if (!empty($count))
    {     $trace = array_slice($trace, 0, $count);     }     foreach($trace as $i
    => $row) {     $location = '''';     if (!empty($row[''class''])) {     $location
    .= $row[''class''] . $row[''type''] . $row[''function''] . ''()'';     }     $file
    = !empty($row[''file'']) ? str_replace(ROOT.DS, '''', $row[''file'']) : '''';     if
    (!empty($file)) {     if (!empty($location)) {     $location .= '' ('' . $file
    . ''@'' . $row[''line''] . '')'';     } else {     $location .= $file . ''@''
    . $row[''line''];     }     }     $trace[$i][''location''] = $location;     unset($trace[$i][''args'']);     }     return
    $trace;     }     return $this->getTraceAsString();     }     }     ?>          [PRE34]     <?php     App::import(array(''type''=>''File'',
    ''name''=>''AppException'', ''file''=>APP.''app_exception.php''));     App::import(''Core'',
    ''Controller'');     class ExceptionHandler extends Object {     public static
    function handleException($exception) {     self::getInstance();     self::logException($exception);     self::renderException($exception);     self::_stop();     }     }          [PRE35]     public
    function renderException($exception) {     $Dispatcher = new Dispatcher();     $Controller
    = new Controller();     $Controller->params = array(     ''controller'' => ''exceptions'',     ''action''
    => ''exception''     );     $Controller->viewPath = ''exceptions'';     if (file_exists(VIEWS.''layouts''.DS.''exception.ctp''))
    {     $Controller->layout = ''exception'';     }     $Controller->base = $Dispatcher->baseUrl();     $Controller->webroot
    = $Dispatcher->webroot;     $Controller->set(compact(''exception''));     $View
    = new View($Controller);     if (!file_exists(VIEWS.''exceptions''.DS.''view.ctp''))
    {     if (Configure::read(''debug'') > 0) {     echo ''<strong>Exception</strong>:
    '';     echo $exception->getMessage();     echo ''<pre>'';     echo $exception->getStackTrace(false);     echo
    ''</pre>'';     return;     }     return $Controller->redirect(null, 500);     }     echo
    $View->render(''view'');     }     public function logException($exception) {     $trace
    = $exception->getStackTrace();     $message = get_class($exception) . '' thrown
    in '' . $trace[0][''location''];     $message .= '': '' . $exception->getMessage();     if
    (is_a($exception, instanceof AppException)) {     $message .= '' | DEBUG: '' .
    json_encodevar_export($exception->getInfo(), true); }     self::log($message,
    LOG_ERROR);     }          [PRE36]     App::import(''Lib'', ''ExceptionHandler'');     set_exception_handler(array(''ExceptionHandler'',
    ''handleException''));          [PRE37]     <h2><?php echo $exception->getMessage();
    ?></h2>     <?php if (Configure::read(''debug'') > 0) { ?>     <ol>     <?php
    foreach($exception->getStackTrace() as $trace) { ?>     <li><?php echo $trace[''location''];
    ?></li>     <?php } ?>     </ol>     <?php if (is_a($exception, ''AppException''))
    { ?>     <?php debug(array_diff_key($exception->getInfo(), array(''message''=>null,
    ''trace''=>null))); ?>     <?php } ?>     <?php } else { ?>     <p>An error has
    been found. It has been logged, and will soon be fixed.</p>     <?php } ?>          [PRE38]'
