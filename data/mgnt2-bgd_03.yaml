- en: Chapter 3. Programming Concepts and Conventions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 编程概念和约定
- en: With years of experience, the Magento platform grew up to implement a lot of
    industry concepts, standards, and conventions. Throughout this chapter, we will
    look into several of these independent sections that stand out in day-to-day interactions
    with Magento development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借多年的经验，Magento平台发展起来，实现了许多行业概念、标准和约定。在本章中，我们将探讨几个在日常与Magento开发互动中突出的独立部分。
- en: 'We will go through the following sections in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下部分：
- en: Composer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer
- en: Service contracts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务合同
- en: Code generation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码生成
- en: The `var` directory
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`目录'
- en: Coding standards
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码标准
- en: Composer
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer
- en: '**Composer** is a tool that handles dependency management in PHP. It is not
    a package manager like **Yum** and **Apt** on Linux systems are. Though it deals
    with libraries (packages), it does so on a per-project level. It does not install
    anything globally. Composer is a multiplatform tool. Therefore, it runs equally
    well on Windows, Linux, and OS X.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Composer**是一个处理PHP依赖管理的工具。它不像Linux系统中的**Yum**和**Apt**那样是一个包管理器。尽管它处理库（包），但它是在每个项目级别上处理的。它不会全局安装任何东西。Composer是一个多平台工具。因此，它在Windows、Linux和OS
    X上运行得同样好。'
- en: 'Installing Composer on a machine is as simple as running the installer in the
    project directory by using the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器上安装Composer就像在项目目录中运行安装程序一样简单，使用以下命令即可：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: More information about the installation of Composer can be found on its official
    website, which can be viewed by visiting [https://getcomposer.org](https://getcomposer.org).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Composer安装的信息可以在其官方网站上找到，可以通过访问[https://getcomposer.org](https://getcomposer.org)查看。
- en: 'Composer is used to fetch Magento and the third-party components that it uses.
    As seen in the previous chapter, the following `composer` command is what pulls
    everything into the specified directory:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Composer用于获取Magento及其使用的第三方组件。如前一章所见，以下`composer`命令是将所有内容拉入指定目录的命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once Magento is downloaded and installed, there are numerous `composer.json`
    files that can be found in its directory. Assuming `<installation directory name>`
    is `magento2`, if we were to do a quick search executing command such as find
    `magento2/ -name ''composer.json''`, that would yield over 100 `composer.json`
    files. Some of these files are (partially) listed here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载并安装了Magento，你可以在其目录中找到许多`composer.json`文件。假设`<安装目录名称>`是`magento2`，如果我们执行如`find
    magento2/ -name 'composer.json'`之类的快速搜索命令，那么将产生超过100个`composer.json`文件。其中一些文件（部分）如下所示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The most relevant file is probably the `composer.json` file in the root of
    the `magento` directory. Its content appears like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最相关的文件可能是位于`magento`目录根目录下的`composer.json`文件。其内容看起来像这样：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Composer's JSON file follows a certain schema. You will find a detailed documentation
    of this schema at [https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md).
    Applying to the schema ensures validity of the composer file. We can see that
    all the listed keys such as `name`, `description`, `require`, `config`, and so
    on, are defined by the schema.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Composer的JSON文件遵循一定的模式。你可以在[https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)找到这个模式的详细文档。遵循该模式确保了composer文件的正确性。我们可以看到，所有列出的键，如`name`、`description`、`require`、`config`等，都是由该模式定义的。
- en: 'Let''s take a look at the individual module''s `composer.json` file. One of
    the simpler modules with the least amount of dependencies is the `Contact` module
    with its `vendor/magento/module-contact/composer.json` content, which looks like
    this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看单个模块的`composer.json`文件。一个具有最少依赖的简单模块是`Contact`模块，其`vendor/magento/module-contact/composer.json`内容如下所示：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will see that the modules define dependencies on the PHP version and other
    modules. Furthermore, you will see the use of PSR-4 for autoloading and the direct
    loading of the `registration.php` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到模块定义了对PHP版本和其他模块的依赖。此外，你还会看到PSR-4用于自动加载以及直接加载`registration.php`文件。
- en: 'Next, let''s take a look at the contents of `vendor/magento/language-en_us/composer.json`
    from the `en_us` language module:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`en_us`语言模块中的`vendor/magento/language-en_us/composer.json`文件的内容：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, let''s take a look at the contents of `vendor/magento/theme-frontend-luma/composer.json`
    from the `luma` theme:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看`luma`主题中的`vendor/magento/theme-frontend-luma/composer.json`文件的内容：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As mentioned previously, there are a lot more composer files scattered around
    Magento.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在Magento中散布着许多更多的composer文件。
- en: Service contracts
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务合同
- en: A **service contract** is a set of PHP interfaces that is defined by a module.
    This contract comprises data interfaces and service interfaces.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务合约**是一组由模块定义的PHP接口。此合约包括数据接口和服务接口。'
- en: The role of the data interface is to preserve data integrity, while the role
    of the service interface is to hide the business logic details from service consumers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据接口的作用是保持数据完整性，而服务接口的作用是隐藏业务逻辑细节，使其不被服务消费者看到。
- en: '**Data interfaces** define various functions, such as validation, entity information,
    search related functions, and so on. They are defined within the `Api/Data` directory
    of an individual module. To better understand the actual meaning of it, let''s
    take a look at the data interfaces for the `Magento_Cms` module. In the `vendor/magento/module-cms/Api/Data/`
    directory, there are four interfaces defined, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据接口**定义了各种功能，如验证、实体信息、搜索相关功能等。它们定义在单个模块的`Api/Data`目录中。为了更好地理解其真正含义，让我们看看`Magento_Cms`模块的数据接口。在`vendor/magento/module-cms/Api/Data/`目录中，定义了四个接口，如下所示：'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `CMS` module actually deals with two entities, one being `Block` and the
    other one being `Page`. Looking at the interfaces defined in the preceding code,
    we can see that we have separate data interface for the entity itself and separate
    data interface for search results.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMS`模块实际上处理两个实体，一个是`Block`，另一个是`Page`。查看前面代码中定义的接口，我们可以看到我们有一个针对实体的单独数据接口和针对搜索结果的单独数据接口。'
- en: 'Let''s take a closer look at the (stripped) contents of the `BlockInterface.php`
    file, which is defined as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看`BlockInterface.php`文件的内容（已去除），其定义如下：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding interface defines all the getter and setter methods for the entity
    at hand along with the constant values that denote entity field names. These data
    interfaces do not include management actions, such as `delete`. The implementation
    of this specific interface can be seen in the `vendor/magento/module-cms/Model/Block.php`
    file, where these constants come to use, as follows (partially):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的接口定义了当前实体的所有获取器和设置器方法，以及表示实体字段名的常量值。这些数据接口不包括管理操作，如`delete`。这个特定接口的实现可以在`vendor/magento/module-cms/Model/Block.php`文件中看到，其中这些常量被使用，如下（部分）所示：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Service interfaces are the ones that include management, repository, and metadata
    interfaces. These interfaces are defined directly within the module''s `Api` directory.
    Looking back at the `Magento Cms` module, its `vendor/magento/module-cms/Api/`
    directory has two service interfaces, which are defined as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 服务接口包括管理、仓库和元数据接口。这些接口直接定义在模块的`Api`目录中。回顾`Magento Cms`模块，其`vendor/magento/module-cms/Api/`目录中有两个服务接口，定义如下：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A quick look into the contents of `BlockRepositoryInterface.php` reveals the
    following (partial) content:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看`BlockRepositoryInterface.php`的内容，揭示以下（部分）内容：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we see methods that are used to save, fetch, search, and delete the entity.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到用于保存、检索、搜索和删除实体的方法。
- en: These interfaces are then implemented via the Web API definitions, as we will
    see later in [Chapter 9](part0064_split_000.html#1T1402-818f5224668745eb9070ddf1d85e6bfa
    "Chapter 9. The Web API"), *The Web API*. The result is well-defined and durable
    API's that other modules and third-party integrators can consume.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接口随后通过Web API定义实现，正如我们将在[第9章](part0064_split_000.html#1T1402-818f5224668745eb9070ddf1d85e6bfa
    "第9章。Web API")中看到的，结果是定义良好且持久的API，其他模块和第三方集成者可以消费这些API。
- en: Code generation
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码生成
- en: One of the neat features of the Magento application is code generation. **Code
    generation**, as implied by its name, generates nonexistent classes. These classes
    are generated in Magento's `var/generation` directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Magento应用程序的一个巧妙特性是代码生成。正如其名称所暗示的，**代码生成**会生成不存在的类。这些类在Magento的`var/generation`目录中生成。
- en: The directory structure within `var/generation` is somewhat similar to that
    of the core `vendor/magento/module-*` and `app/code` directories. To be more precise,
    it follows the module structure. The code is generated for something that is called
    **Factory**, **Proxy**, and **Interceptor** classes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`var/generation`目录内的目录结构在一定程度上类似于核心的`vendor/magento/module-*`和`app/code`目录。更精确地说，它遵循模块结构。代码是为所谓的**Factory**、**Proxy**和**Interceptor**类生成的。'
- en: 'The Factory class creates an instance of a type. For example, a `var/generation/Magento/Catalog/Model/ProductFactory.php`
    file with a `Magento\Catalog\Model\ProductFactory` class has been created because
    somewhere within the `vendor/magento` directory and its code, there is a call
    to the `Magento\Catalog\Model\ProductFactory` class, which originally does not
    exist in Magento. During runtime, when `{someClassName}Factory` is called in the
    code, Magento creates a Factory class under the `var/generation` directory if
    it does not exist. The following code is an example of the (partial) `ProductFactory`
    class:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂类创建一个类型的实例。例如，由于在`vendor/magento`目录及其代码中某处调用了`Magento\Catalog\Model\ProductFactory`类，因此已创建了一个包含`Magento\Catalog\Model\ProductFactory`类的`var/generation/Magento/Catalog/Model/ProductFactory.php`文件。在运行时，当代码中调用`{someClassName}Factory`时，如果不存在，Magento会在`var/generation`目录下创建一个工厂类。以下代码是`ProductFactory`类的（部分）示例：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note the `create` method that creates and returns the `Product` type instance.
    Also, note how the generated code is *type safe* providing `@return` annotation
    for **integrated development environments** (**IDEs**) to support the autocomplete
    functionality.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`create`方法，它创建并返回`Product`类型实例。还要注意生成的代码是如何*类型安全*的，为**集成开发环境**（**IDEs**）提供`@return`注解以支持自动完成功能。
- en: '**Factories** are used to isolate an object manager from the business code.
    Factories can be dependent on the object manager, unlike business objects.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**工厂**用于将对象管理器与业务代码隔离开来。与业务对象不同，工厂可以依赖于对象管理器。'
- en: The Proxy class is a wrapper for some **base class**. Proxy classes provide
    better performance than the base classes because they can be instantiated without
    instantiating a base class. A base class is instantiated only when one of its
    methods is called. This is highly convenient for cases where the base class is
    used as a dependency, but it takes a lot of time to instantiate, and its methods
    are used only during some paths of execution.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 代理类是对某些**基类**的包装。代理类比基类提供更好的性能，因为它们可以在不实例化基类的情况下被实例化。基类仅在调用其方法时才被实例化。这对于将基类用作依赖项且实例化耗时且仅在执行路径的某些部分使用其方法的情况非常方便。
- en: Like Factory, the Proxy classes are also generated under the `var/generation`
    directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与工厂类似，代理类也生成在`var/generation`目录下。
- en: If we were to take a look at the `var/generation/Magento/Catalog/Model/Session/Proxy.php`
    file that contains the `Magento\Catalog\Model\Session\Proxy` class, we would see
    that it actually extends \`Magento\Catalog\Model\Session`. The wrapping Proxy
    class implements several magical methods along the way, such as `__sleep`, `__wakeup`,
    `__clone`, and `__call`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看包含`Magento\Catalog\Model\Session\Proxy`类的`var/generation/Magento/Catalog/Model/Session/Proxy.php`文件，我们会看到它实际上扩展了`Magento\Catalog\Model\Session`。包装的代理类在过程中实现了几个魔法方法，例如`__sleep`、`__wakeup`、`__clone`和`__call`。
- en: Interceptor is yet another class type that gets autogenerated by Magento. It
    is related to the plugins feature, which will be discussed in detail later in
    [Chapter 6](part0043_split_000.html#190862-818f5224668745eb9070ddf1d85e6bfa "Chapter 6. Plugins"),
    *Plugins*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器是另一种由Magento自动生成的类类型。它与插件功能相关，将在[第6章](part0043_split_000.html#190862-818f5224668745eb9070ddf1d85e6bfa
    "第6章。插件")中详细讨论，*插件*。
- en: In order to trigger code regeneration, we can use the code compiler that is
    available on the console. We can run either the *single-tenant* compiler or the
    *multi-tenant* compiler.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了触发代码生成，我们可以使用控制台上可用的代码编译器。我们可以运行*单租户*编译器或*多租户*编译器。
- en: 'The *single-tenant* implies one website and store, and it is executed by using
    the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*单租户*意味着一个网站和商店，并且通过以下命令执行。'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The *multi-tenant* implies more than one independent Magento application, and
    it is executed by using following command.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*多租户*意味着不止一个独立的Magento应用程序，并且通过以下命令执行。'
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Code compilation generates factories, proxies, interceptors, and several other
    classes, as listed in the `setup/src/Magento/Setup/Module/Di/App/Task/Operation/`
    directory.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编译生成工厂、代理、拦截器和`setup/src/Magento/Setup/Module/Di/App/Task/Operation/`目录中列出的其他几个类。
- en: The var directory
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量目录
- en: 'Magento does a lot of caching and autogeneration of certain class types. These
    caches and generated classes are all located in Magento''s root `var` directory.
    The usual contents of the `var` directory is as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Magento执行大量的缓存和某些类类型的自动生成。这些缓存和生成的类都位于Magento根目录的`var`目录中。`var`目录的常规内容如下：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: During development, we will most likely need to periodically clear these so
    that our changes can kick in.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们很可能需要定期清除这些，以便我们的更改能够生效。
- en: 'We can issue the console command as follows to clear individual directories:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式发出控制台命令以清除单个目录：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alternatively, we can use the built-in `bin/magento` console tool to trigger
    commands that will delete the proper directories for us, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用内置的 `bin/magento` 控制台工具来触发命令，自动删除相应的目录，如下所示：
- en: '`bin/magento setup:upgrade`: This updates the Magento database schema and data.
    While doing this, it truncates the `var/di` and `var/generation` directories.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin/magento setup:upgrade`: 这将更新 Magento 数据库模式和数据。在此过程中，它将截断 `var/di` 和 `var/generation`
    目录。'
- en: '`bin/magento setup:di:compile`: This clears the `var/generation` directory.
    After doing this, it compiles the code in it again.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin/magento setup:di:compile`: 这将清除 `var/generation` 目录。在此之后，它将再次编译其中的代码。'
- en: '`bin/magento deploy:mode:set {mode}`: This changes the mode from the developer
    mode to the production mode and vice versa. While doing this, it truncates the
    `var/di`, `var/generation`, and `var/view_preprocessed` directories.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin/magento deploy:mode:set {mode}`: 这将模式从开发模式更改为生产模式，反之亦然。在此过程中，它将截断 `var/di`、`var/generation`
    和 `var/view_preprocessed` 目录。'
- en: '`bin/magento cache:clean {type}`: This cleans the `var/cache` and `var/page_cache`
    directories.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin/magento cache:clean {type}`: 这将清理 `var/cache` 和 `var/page_cache` 目录。'
- en: It is important to keep the `var` directory in mind at all times during development.
    Otherwise, the code might encounter exceptions and function improperly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，始终要记住 `var` 目录。否则，代码可能会遇到异常并无法正常工作。
- en: Coding standards
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码标准
- en: '`code documentation. The idea is to unify the usage of code DocBlocks for all
    files regardless of the programming language in use. However, a DocBlock standard
    for that particular language may override it.`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`代码文档。其想法是统一所有文件中代码 DocBlocks 的使用，无论使用哪种编程语言。然而，特定语言的 DocBlock 标准可能会覆盖它。`'
- en: '`` The `a subset of Google JavaScript Style Guide and JSDoc, which can be found
    at [http://usejsdoc.org](http://usejsdoc.org).` ``'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`` 这是 Google JavaScript 风格指南和 JSDoc 的一个子集，可以在 [http://usejsdoc.org](http://usejsdoc.org)
    找到。` ``'
- en: '`` `The **LESS**` **coding standard defines the formatting and coding style
    when working with LESS and CSS files.** ``'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`` `The **LESS**` **编码标准定义了在处理 LESS 和 CSS 文件时的格式化和编码风格。** ``'
- en: '`**Note**`'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`**注意**`'
- en: '`**You can read more about the actual details of each standard at [http://devdocs.magento.com](http://devdocs.magento.com),
    as they are too extensive to be covered in this book.**`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`**您可以在 [http://devdocs.magento.com](http://devdocs.magento.com) 上阅读有关每个标准的实际细节，因为它们过于广泛，无法在本书中涵盖。**`'
- en: '``**# Summary    In this chapter, we took a look at Composer, which is one
    of the first things that we will interact with when installing Magento. We then
    moved on to service contracts as one of the strongest Magento architectural parts,
    which turned out to be good old PHP interfaces in use. Further, we covered some
    bits about the Magento code generation feature. Thus, we have a basic knowledge
    of the Factory and Proxy classes. We then had a look at the `var` directory and
    explored its role, especially during development. Finally, we touched upon the
    coding standards used in Magento.    In the next chapter, we will discuss the
    dependency injection, which is one of the most important architectural parts of
    Magento.**``'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '``**# 摘要    在本章中，我们探讨了 Composer，这是我们安装 Magento 时将首先与之交互的东西之一。然后，我们转向服务合同，它是
    Magento 架构中最强大的部分之一，结果是我们使用的是老式的 PHP 接口。此外，我们还介绍了一些关于 Magento 代码生成功能的内容。因此，我们对
    Factory 和 Proxy 类有了基本的了解。然后，我们查看 `var` 目录并探讨了其在开发过程中的作用。最后，我们简要介绍了 Magento 中使用的编码标准。    在下一章中，我们将讨论依赖注入，这是
    Magento 最重要的架构部分之一。**```'
