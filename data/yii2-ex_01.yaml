- en: Chapter 1. Starting with Yii2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 从Yii2开始
- en: Yii2 is a complete rewrite of the first version of one of the most famous PHP
    frameworks. It is a well-documented framework with a very active community.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2是对最著名的PHP框架之一的第一版本的完全重写。它是一个文档齐全的框架，拥有非常活跃的社区。
- en: 'Officially, we can find three types of support: a guide, for a complete navigation
    through framework topics at [http://www.yiiframework.com/doc-2.0/guide-index.html](http://www.yiiframework.com/doc-2.0/guide-index.html),
    a reference to explore all classes that compose the framework at [http://www.yiiframework.com/doc-2.0/index.html](http://www.yiiframework.com/doc-2.0/index.html),
    and finally forum support at [http://www.yiiframework.com/forum/](http://www.yiiframework.com/forum/).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正式来说，我们可以找到三种类型的支持：指南，可以在[http://www.yiiframework.com/doc-2.0/guide-index.html](http://www.yiiframework.com/doc-2.0/guide-index.html)中找到，以全面导航框架主题；参考，可以在[http://www.yiiframework.com/doc-2.0/index.html](http://www.yiiframework.com/doc-2.0/index.html)中探索组成框架的所有类；最后，论坛支持在[http://www.yiiframework.com/forum/](http://www.yiiframework.com/forum/)。
- en: 'In this chapter, we will go through the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Requirements and tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求和工具
- en: Installing Yii2 with Composer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Composer安装Yii2
- en: Application structure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用结构
- en: Application properties
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用属性
- en: Common application components
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的应用组件
- en: Handling application events
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理应用事件
- en: Pattern MVC in Yii2
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yii2中的MVC模式
- en: Naming convention
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名规范
- en: Configuring debug toolbar
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置调试工具栏
- en: Using logger
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日志记录器
- en: Example – hello world from scratch with the Yii basic template and bootstrap
    template
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 使用Yii基本模板和bootstrap模板从头开始创建hello world
- en: Requirements and tools
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求和工具
- en: The basic requirements for Yii2 are a web server (local or remote) and PHP v.5.4
    (or newer). It is recommended to have a shell (or command line) access to the
    machine (local or remote) where we store the code, as there are scripts that it
    will be very beneficial to use in the development of complex applications. We
    can also develop the application locally and upload it to the web server when
    we wish to test it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2的基本需求是一个网络服务器（本地或远程）和PHP v.5.4（或更高版本）。建议我们能够访问存储代码的机器（本地或远程）的shell（或命令行），因为有一些脚本在开发复杂应用程序时非常有用。我们也可以在本地开发应用程序，并在我们希望测试它时将其上传到Web服务器。
- en: For remote hosting, there are multiple options. We can use a simple web hosting
    service (with PHP v.5.4 support) or we can opt for virtual or dedicated server
    hosting. Keep in mind that with the former option, if the server doesn't meet
    the PHP requirements, it can be difficult to change whatever is wrong.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于远程托管，有多种选择。我们可以使用简单的支持PHP v.5.4的Web托管服务，或者选择虚拟或专用服务器托管。记住，在使用前者的情况下，如果服务器不符合PHP要求，更改任何问题都可能很困难。
- en: Yii2 has a script, `requirements.php`, which checks whether our hosting meets
    the requirements to run Yii2 application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2有一个名为`requirements.php`的脚本，用于检查我们的托管是否符合运行Yii2应用程序的要求。
- en: Installing Yii2 with Composer
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Composer安装Yii2
- en: Composer is a tool for dependency management in PHP. Yii2 uses it to install
    itself and other vendors' modules (for example, bootstrap).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是PHP中依赖管理的工具。Yii2使用它来安装自身和其他供应商的模块（例如，bootstrap）。
- en: It is also possible to install Yii2 in the old way, by downloading the complete
    package and transferring it to the host, local or remote, where the framework
    will be installed. However, Composer will give us many benefits, like the ability
    to easily update the framework and ensure that all package dependencies are satisfied.
    Composer is de facto the new way to install and maintain projects, so I recommend
    using it from the start. If you are unsure about using Composer, it's worth mentioning
    that most users will need to learn two or three commands at most, so it's not
    a steep learning curve.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用旧的方式安装Yii2，即下载完整包并将其传输到主机，无论是本地还是远程，框架都将安装在那里。然而，Composer会给我们带来许多好处，比如可以轻松更新框架并确保所有包依赖都得到满足。Composer实际上是安装和维护项目的标准方式，所以我建议从一开始就使用它。如果你不确定如何使用Composer，值得一提的是，大多数用户最多只需要学习两到三个命令，所以学习曲线并不陡峭。
- en: 'Yii2 has two available templates to start with: basic and advanced. We will
    start with the basic template, but we will also see in the next chapters how to
    use advanced templates.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2提供了两个可用的模板来开始：基本和高级。我们将从基本模板开始，但接下来几章我们也会看到如何使用高级模板。
- en: 'So, let''s look at how to install Yii2 with Composer. We need to access the
    folder through the console, where the web server''s httpdocs point to and launch
    these commands:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看如何使用Composer安装Yii2。我们需要通过控制台访问文件夹，其中web服务器的httpdocs指向并运行以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These commands are useful if we are in the Linux or Mac environment. On Windows,
    you need to download `Composer-Setup.exe` from Composer's official website and
    run it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Linux或Mac环境中，这些命令很有用。在Windows上，您需要从Composer的官方网站下载`Composer-Setup.exe`并运行它。
- en: The first command gets the [http://getcomposer.org/installer](http://getcomposer.org/installer)
    URL and passes it to PHP to create the `composer.phar` file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令获取[http://getcomposer.org/installer](http://getcomposer.org/installer)
    URL并将其传递给PHP以创建`composer.phar`文件。
- en: The second command installs the Composer asset plugin, which allows us to manage
    bower and npm package dependencies through Composer.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个命令安装了Composer资产插件，这使我们能够通过Composer管理bower和npm包依赖。
- en: The third and final command installs Yii2 in a directory named `basic`. If you
    want, you can choose a different directory name.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个也是最后的命令是在名为`basic`的目录中安装Yii2。如果您愿意，可以选择不同的目录名称。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: During the installation, Composer may ask for our GitHub login credentials and
    this is normal because Composer needs to get enough API rate limit to retrieve
    the dependent package information from GitHub. If you don't have a GitHub account,
    this is the right moment to create a new one!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，Composer可能会要求我们提供GitHub登录凭证，这是正常的，因为Composer需要获取足够的API速率限制来从GitHub检索依赖包信息。如果您还没有GitHub账户，现在是创建一个新账户的好时机！
- en: If we are using Windows, we need to download it from [https://getcomposer.org](https://getcomposer.org)
    and run it. The last two commands will be the same.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用Windows，我们需要从[https://getcomposer.org](https://getcomposer.org)下载它并运行。最后两个命令将是相同的。
- en: We have installed Yii2!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经安装了Yii2！
- en: To test it, point to `http://hostname/basic/web` and we should see the *My Yii
    Application* page.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试它，请指向`http://hostname/basic/web`，我们应该看到*我的Yii应用程序*页面。
- en: Application structure
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序结构
- en: Yii2's application structure is very clear, precise, and redundant (for advanced
    applications).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2的应用程序结构非常清晰、精确且冗余（对于高级应用程序）。
- en: 'The contents of the `basic` folder should be as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`basic`文件夹的内容应该如下：'
- en: '| Folder names | Description |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `assets` | This includes the files (`.js` and `.css`) referenced in the web
    page and dependencies of the app. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `assets` | 这包括在网页中引用的文件（`.js`和`.css`）以及应用程序的依赖项。|'
- en: '| `commands` | This includes the controllers used from the command line. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `commands` | 这包括从命令行使用的控制器。|'
- en: '| `config` | This includes the controllers used from web. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `config` | 这包括从web使用的控制器。|'
- en: '| `mail` | This is the mail layout repository. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `mail` | 这是邮件布局仓库。|'
- en: '| `models` | This includes the models used in the whole application. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `models` | 这包括整个应用程序中使用的模型。|'
- en: '| `runtime` | This is used from Yii2 to store runtime data as logs. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `runtime` | 这用于Yii2存储运行时数据作为日志。|'
- en: '| `tests` | This includes all the test''s repositories (unit, functional, fixtures,
    and so on). |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `tests` | 这包括所有测试的仓库（单元、功能、固定等）。|'
- en: '| `vendor` | This includes the third-party module repositories managed by Composer.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `vendor` | 这包括由Composer管理的第三方模块仓库。|'
- en: '| `views` | This contains PHP files, divided into folders that refer to controller
    names, used to render the main content of the page template. It is mainly called
    from the controller''s actions to render the display output. A folder named layout
    contains the page template''s PHP files. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `views` | 这包含PHP文件，分为文件夹，这些文件夹与控制器名称相关联，用于渲染页面模板的主要内容。它主要从控制器动作中调用以渲染显示输出。一个名为layout的文件夹包含页面模板的PHP文件。|'
- en: '| `web` | This is the entry point from web |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `web` | 这是网页的入口点 |'
- en: 'Open `web/index.php` to view content:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`web/index.php`以查看内容：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the first two constant definitions are very important.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，前两个常量定义非常重要。
- en: '`YII_DEBUG` defines whether you are in debug mode or not. If we set this, we
    will have more log information and will see the detail error call stack.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`YII_DEBUG`定义了您是否处于调试模式。如果我们设置了它，我们将有更多的日志信息，并且会看到详细的错误调用堆栈。'
- en: '`YII_ENV` defines the environment mode we are working in, and its default value
    is `prod`. The available values are `test`, `dev`, and `prod`. These values are
    used in configuration files to define, for example, a different DB connection
    (local database different from remote database) or other values, always in configuration
    files.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`YII_ENV` 定义了我们正在工作的环境模式，默认值是 `prod`。可用的值有 `test`、`dev` 和 `prod`。这些值在配置文件中使用，例如定义不同的数据库连接（本地数据库与远程数据库不同）或其他值，始终在配置文件中。'
- en: Since we are at the start of our project, it is recommended to set `YII_DEBUG`
    to `true`, in order to have more detailed information in case we make a mistake
    in our code, instead of the unhelpful, blank.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们处于项目的开始阶段，建议将 `YII_DEBUG` 设置为 `true`，以便在代码中出错时获得更详细的信息，而不是无用的空白。
- en: 'The following table contains a list of all Yii2''s objects:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下表包含了一个列表，列出了所有Yii2的对象：
- en: '| Objects | Description |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 对象 | 描述 |'
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Models, Views, and Controllers | These are the common objects to apply the
    MVC pattern to:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '| 模型、视图和控制器 | 这些是应用中常用的对象，可以应用MVC模式：'
- en: Models are data representation and manipulation, usually from the database
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型是数据表示和操作，通常来自数据库
- en: Views are used to present data to the end user
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图用于向最终用户展示数据
- en: Controllers are objects that process requests and generate responses
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器是处理请求并生成响应的对象
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Components | These are objects that contain logic. The user can write his
    own components to create reusable functionalities.For example, a component could
    be a currency converter object, which can be used at many instances in our application.
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 这些是包含逻辑的对象。用户可以编写自己的组件来创建可重用的功能。例如，一个组件可以是货币转换对象，可以在我们的应用中的多个实例中使用。
    |'
- en: '| Application Components | They are singletons that can be called at any point
    in the app. Singleton means an object instanced just one time in the entire application
    (so the object will always be the same).The difference between Application Components
    and Components is that the first can have just one instance in the whole application.
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 应用组件 | 它们是可以在应用中的任何位置调用的单例对象。单例意味着在整个应用中只实例化一次对象（因此对象始终是相同的）。应用组件与组件之间的区别在于，前者在整个应用中只有一个实例。
    |'
- en: '| Widgets | These view reusable objects, containing both logic and rendering
    code. A widget could be, for example, a box displaying today''s weather info.
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 这些是包含逻辑和渲染代码的可重用视图对象。例如，一个小部件可以是显示今天天气信息的框。 |'
- en: '| Filters | These are objects that run before or after the execution of Controller
    actions. A filter can be used to change the format response output of the page,
    for example, from HTML to JSON. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 过滤器 | 这些是在控制器动作执行前后运行的对象。过滤器可以用来改变页面响应输出的格式，例如，从HTML到JSON。 |'
- en: '| Modules | This contains all the objects of an app, such as Models, Views,
    Controller, Components, and so on; we can consider them as subapp, containing
    reusable sections (for example, user management). |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 这包含了一个应用中所有的对象，例如模型（Models）、视图（Views）、控制器（Controller）、组件（Components）等；我们可以把它们看作是子应用，包含可重用的部分（例如，用户管理）。
    |'
- en: '| Extensions | Extensions are modules packaged, that we can easily manage using
    Composer. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 扩展 | 扩展是打包的模块，我们可以使用Composer轻松管理它们。 |'
- en: Application properties
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用属性
- en: A Yii2 application can be configured through several properties.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Yii2应用可以通过多个属性进行配置。
- en: 'The properties that need to be configured in any application are listed in
    the following table:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了任何应用中需要配置的属性：
- en: '| Properties | Description |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `id` | This indicates a unique ID to distinguish this application from others.
    It is mainly used programmatically. An example of this property is `basic`. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `id` | 这表示一个唯一的ID，用于区分此应用与其他应用。它主要用于程序化操作。这个属性的例子是 `basic`。 |'
- en: '| `basePath` | This specifies the root directory of the application. This path
    is the starting point for all the other types of application objects, such as
    models, controllers, and views. An example of this property is `dirname(__DIR__)`.
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `basePath` | 这指定了应用的根目录。这个路径是所有其他类型的应用对象（如模型、控制器、视图）的起点。这个属性的例子是 `dirname(__DIR__)`。
    |'
- en: 'The other common properties are listed in the following table:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了其他常见的属性：
- en: '| Properties | Description |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `aliases` | This indicates an alias name for path definitions. They are defined
    using a key/value array and they are very useful when we need to set a path as
    a constant that live in the whole application. We type an alias preceded by an
    `@` character. An example of this property is `''@fileupload'' => ''path/to/files/uploaded''`.
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `aliases` | 这表示路径定义的别名。它们使用键/值数组定义，当我们需要将路径设置为在整个应用程序中存在的常量时非常有用。我们输入一个以`@`字符为前缀的别名。此属性的示例是`''@fileupload''
    => ''path/to/files/uploaded''`。 |'
- en: '| `bootstrap` | This property allows you to configure an array of components
    to be run during the application bootstrap process. A common usage is to load
    the log or profile component, gii, or any other component. Be careful not to load
    too many components, otherwise the response performance of your pages may degrade.
    An example of this property is `''log''`, `''gii''`. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `bootstrap` | 此属性允许您配置在应用程序启动过程中运行的组件数组。常见用法是加载日志或配置文件组件、gii或任何其他组件。请注意不要加载太多组件，否则您页面的响应性能可能会下降。此属性的示例是`''log''`、`''gii''`。
    |'
- en: '| `catchAll` | This property captures every request and it is used in the maintenance
    mode of the site. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `catchAll` | 此属性捕获每个请求，并在网站的维护模式下使用。 |'
- en: '| `components` | This property points out a list of application components
    that you can use in the whole application. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `components` | 此属性指出可以在整个应用程序中使用的应用程序组件列表。 |'
- en: '| `language` | This property specifies the language used to display the content.
    An example of this property is `''language'' => ''en''`. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `language` | 此属性指定用于显示内容的语言。此属性的示例是`''language'' => ''en''`。 |'
- en: '| `modules` | This property points out a list of application modules that can
    be used in the application. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `modules` | 此属性指出应用程序中可以使用的应用程序模块列表。 |'
- en: '| `name` | This property indicates the name of your app. An example of this
    property is `''name'' => ''My App''`. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 此属性指示您的应用程序名称。此属性的示例是`''name'' => ''My App''`。 |'
- en: '| `params` | This property specifies an array of parameters, through key/value
    pairs. This is a container for global params, such as the administrator''s e-mail
    address. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `params` | 此属性指定一个参数数组，通过键/值对。这是一个全局参数的容器，例如管理员的电子邮件地址。 |'
- en: '| `timeZone` | This property indicates the time zone that should be used in
    the application. An example of this property is `''timeZone'' => ''Europe/Rome''`.
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `timeZone` | 此属性指示应用程序应使用的时间区域。此属性的示例是`''timeZone'' => ''Europe/Rome''`。
    |'
- en: '| `charset` | This property points out the charset used in the application.
    The default value is `UTF-8`. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `charset` | 此属性指出应用程序中使用的字符集。默认值是`UTF-8`。 |'
- en: '| `defaultRoute` | This property contains a route to be used when a request
    does not a specify one. This property has different default values according to
    the environment we are using.For web applications, this value will be `site`,
    so that `SiteController` could be used to handle these requests.For console applications,
    this value will be `help`, so that `yii\console\controllers\HelpController` can
    be used invoking its index action that will display help information. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `defaultRoute` | 此属性包含一个在请求未指定时使用的路由。根据我们使用的环境，此属性有不同的默认值。对于Web应用程序，此值将是`site`，以便`SiteController`可以用来处理这些请求。对于控制台应用程序，此值将是`help`，以便可以使用`yii\console\controllers\HelpController`调用其索引操作，该操作将显示帮助信息。
    |'
- en: Common application components
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见应用程序组件
- en: 'Here''s a list of the most-used application components:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最常用的应用程序组件列表：
- en: '`request`: This component handles all client requests and provides methods
    to easily get parameters from server global variables, such as `$_SERVER`, `$_POST`,
    `$_GET`, and `$_COOKIES`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request`：此组件处理所有客户端请求，并提供从服务器全局变量（如`$_SERVER`、`$_POST`、`$_GET`和`$_COOKIES`）中轻松获取参数的方法。'
- en: 'The default state has `enableCookieValidation` set to true, so you need to
    set `cookieValidationKey` parameter as shown in this example:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认状态下，`enableCookieValidation`设置为true，因此您需要设置`cookieValidationKey`参数，如下例所示：
- en: '[PRE2]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`cache`: This component helps you handle cache data. Yii2 defaults to the `FileCache`
    instance for the cache, but we can also configure an `ApcCache`, `DbCache`, `MemCache`,
    and so on.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache`：此组件帮助您处理缓存数据。Yii2默认使用`FileCache`实例作为缓存，但我们也可以配置`ApcCache`、`DbCache`、`MemCache`等。'
- en: 'The following is a standard installation of Yii2:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是对Yii2的标准安装：
- en: '[PRE3]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`user`: This component deals with user authentication in the app. The most
    important parameter is the `identityClass` parameter, which defines the class
    that contains the user''s model data, in order to have a specific method to log
    in or log out a user from the app.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：此组件处理应用程序中的用户身份验证。最重要的参数是 `identityClass` 参数，它定义了包含用户模型数据的类，以便有特定的登录或注销用户的应用程序方法。'
- en: 'Consider the following example:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE4]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`errorHandler`: This component provides functionalities to handle uncaught
    errors and exceptions. It can be configured by specifying the action to run.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`errorHandler`：此组件提供处理未捕获的错误和异常的功能。可以通过指定要运行的操作进行配置。'
- en: 'Consider the following example:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE5]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`mailer`: This component configures mailer connection parameters to the system
    that will send an e-mail. Usually, it is the same machine hosting our website,
    so the default values are probably correct.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mailer`：此组件配置邮件发送系统的连接参数。通常，它是托管我们网站的同一台机器，因此默认值可能正确。'
- en: 'Consider the following example:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE6]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`log`: This component is mainly used in the debug environment to log the app
    execution. We can set the debug level and destination.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log`：此组件主要用于调试环境中的应用程序执行日志。我们可以设置调试级别和目的地。'
- en: 'Consider the following example:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE7]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`db`: This component handles a database connection. We can have several db
    configuration in our app; in this case, we can define more components with the
    `Connection` class located at `yii\db\`.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db`：此组件处理数据库连接。在我们的应用程序中可以有多个 db 配置；在这种情况下，我们可以定义更多位于 `yii\db\` 的 `Connection`
    类的组件。'
- en: 'Consider the following example:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE8]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Handling application events
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理应用程序事件
- en: During its lifecycle, an application can trigger many events. These events can
    be declared in application configuration or programmatically. Common triggers
    are `beforeRequest`, `afterRequest`, `beforeAction`, and `afterAction`, but every
    object can have its own events.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在其生命周期中，一个应用程序可以触发许多事件。这些事件可以在应用程序配置中声明或通过程序方式声明。常见的触发器有 `beforeRequest`、`afterRequest`、`beforeAction`
    和 `afterAction`，但每个对象都可以有自己的事件。
- en: For example, a common use of events is to set `mysql db timezone`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，事件的一个常见用途是设置 `mysql db timezone`。
- en: 'To set the time zone to UTC in db component configuration, we must define a
    handler for the `afterOpen` event:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 db 组件配置中将时区设置为 UTC，我们必须为 `afterOpen` 事件定义一个处理程序：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: An anonymous function, attached to `on afterOpen` event handlers, has an `$event`
    parameter, which is an instance of the `yii\base\ActionEvent` class. This class
    has a `$sender` object that refers to the sender of the event. In this case, `$sender`
    refers to the instance of database components (db). This property may also be
    null when this event is a class-level event.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一个匿名函数，附加到 `on afterOpen` 事件处理程序，有一个 `$event` 参数，它是 `yii\base\ActionEvent` 类的实例。此类有一个
    `$sender` 对象，它引用事件的发送者。在这种情况下，`$sender` 指的是数据库组件（db）的实例。当此事件是类级别事件时，此属性也可能为 null。
- en: The MVC pattern in Yii2
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yii2 中的 MVC 模式
- en: Yii2 is built according to the **Model-View-Controller** (**MVC**) design pattern.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 是根据 **模型-视图-控制器**（**MVC**）设计模式构建的。
- en: Models, representing logic, are objects extended from `\yii\base\Model`, which
    offer many features such as attribute, attribute labels, massive assignment (to
    fill object attributes directly for an array), validation rules, and data exporting.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 模型，代表逻辑，是从 `\yii\base\Model` 扩展的对象，提供了许多功能，例如属性、属性标签、大量赋值（直接为数组填充对象属性）、验证规则和数据导出。
- en: Normally, in common apps, a Model will be generated from the database, extending
    `yii\db\ActiveRecord` that implements the Active Record design pattern, with many
    methods to manipulate data. Yii2 provides Gii, a tool used to generate Model classes
    directly from the database's table structure.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在常见应用程序中，模型将从数据库生成，扩展 `yii\db\ActiveRecord`，该类实现了 Active Record 设计模式，具有许多用于操作数据的方法。Yii2
    提供了 Gii 工具，该工具用于直接从数据库的表结构生成模型类。
- en: Controllers, the bridge between view and model, are class instances extending
    from `yii\base\Controller`, used to process requests and generate responses.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器，视图和模型之间的桥梁，是扩展自 `yii\base\Controller` 的类实例，用于处理请求和生成响应。
- en: Controllers mainly contain functions whose name starts with the action prefix
    that allows the framework to recognize those functions as routes, which can be
    requested.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器主要包含以动作前缀开头的函数，这使得框架能够识别这些函数作为路由，可以请求。
- en: Finally, we will look at views that deal with displaying data to end users that
    are mainly rendered in the page layout from controllers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将查看处理向最终用户显示数据的视图，这些数据主要在页面布局中由控制器渲染。
- en: Naming convention
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名规范
- en: In order to allow auto-loading, Yii2 uses a simple standard to set names.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许自动加载，Yii2 使用一个简单的标准来设置名称。
- en: 'Routes that refer respectively to module, controller, and the action requested
    take the following format:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 指向请求的模块、控制器和操作的路线采用以下格式：
- en: '`ModuleID/ControllerID/ActionID`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModuleID/ControllerID/ActionID`'
- en: 'We will look at each element in detail as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将如下详细查看每个元素：
- en: The ModuleID is optional, so often the format is ControllerID/ActionID
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ModuleID 是可选的，因此通常格式是 ControllerID/ActionID
- en: The ModuleID must be specified in the module's configuration property, under
    the same name
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须在模块的配置属性中指定 ModuleID，名称相同
- en: The ControllerID and ActionID should contain only English characters in lowercase,
    digits, underscores, dashes, and forward slashes
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ControllerID 和 ActionID 应仅包含小写英文字符、数字、下划线、破折号和正斜杠
- en: An example of route is `http://hostname/index.php?r=site/index`, where `site`
    is the ControllerID and `index` is the ActionID.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 路由的一个示例是 `http://hostname/index.php?r=site/index`，其中 `site` 是 ControllerID，`index`
    是 ActionID。
- en: Starting from ControllerID, it is very easy to create the Controller class name.
    Just turn into uppercase the first letter of each word separated by dashes, then
    remove dashes and append the suffix Controller. If ControllerID contains slashes,
    just apply the rules to the part after the last slash in the ID. This is possible
    because controllers can be collected in subfolders, starting from `app\controllers`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从 ControllerID 开始，创建控制器类名非常简单。只需将每个由破折号分隔的单词的首字母转换为大写，然后删除破折号并附加后缀 Controller。如果
    ControllerID 包含斜杠，只需将规则应用于 ID 中最后一个斜杠之后的部分。这是可能的，因为控制器可以从 `app\controllers` 开始收集在子文件夹中。
- en: 'The following are some examples:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: Shop points to `app\controllers\ShopController`
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商店指向 `app\controllers\ShopController`
- en: Preferred number points to `app\controllers\PreferredNumberController`
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先数字指向 `app\controllers\PreferredNumberController`
- en: Admin/users account points to `app\controllers\admin\UsersAccountController`![Naming
    convention](img/B04656_01_03.jpg)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员/用户账户指向 `app\controllers\admin\UsersAccountController`![命名规范](img/B04656_01_03.jpg)
- en: Routes are passed to entry script `basic/web/index.php` through the `r` parameter.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 路由通过 `r` 参数传递到入口脚本 `basic/web/index.php`。
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default page `http://hostname/basic/web/index.php` is equivalent to `http://hostname/basic/web/index.php?r=site/index`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 默认页面 `http://hostname/basic/web/index.php` 等同于 `http://hostname/basic/web/index.php?r=site/index`。
- en: Configuring the debug toolbar
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置调试工具栏
- en: It is important to have a rich collection of tools to make development easier
    in displaying some useful information about requests and responses.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个丰富的工具集，以便在显示有关请求和响应的有用信息时使开发更容易，这是很重要的。
- en: For this purpose, Yii2 provides a toolbar that displays several types of info.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，Yii2 提供了一个显示多种信息的工具栏。
- en: 'A common way to activate the debug toolbar is to set in `config/web.php`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 激活调试工具栏的一种常见方法是在 `config/web.php` 中设置：
- en: '[PRE10]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now you can set the following values:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以设置以下值：
- en: '`debug` to `bootstrap` config node'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `debug` 配置节点更改为 `bootstrap`
- en: '`debug` to `modules` config node, using the `Module` class under `yii\debug\`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `debug` 配置节点更改为 `modules` 配置节点，使用 `yii\debug\` 下的 `Module` 类
- en: The default installation of the Yii2 basic template already enables the debug
    toolbar, as we can see at the bottom of the `config/web.php` configuration file.
    The Gii module is also enabled as well, but we will work with it later.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 基本模板的默认安装已经启用了调试工具栏，正如我们可以在 `config/web.php` 配置文件的底部看到的那样。Gii 模块也已启用，但我们将稍后处理它。
- en: '[PRE11]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This config entry is only valid in the `YII_ENV_DEV` mode. So, we must check
    whether the `web/index.php YII_ENV` variable has the `dev` value (as shown in
    the default installation).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置条目仅在 `YII_ENV_DEV` 模式下有效。因此，我们必须检查 `web/index.php YII_ENV` 变量是否具有 `dev` 值（如默认安装所示）。
- en: '![Configuring the debug toolbar](img/B04656_01_04.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![配置调试工具栏](img/B04656_01_04.jpg)'
- en: Debug toolbar closed
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 调试工具栏已关闭
- en: 'If we try to reload the web page at `basic/web/index.php` after these checks,
    we should see the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些检查之后，如果我们尝试重新加载 `basic/web/index.php` 上的网页，我们应该看到以下截图：
- en: '![Configuring the debug toolbar](img/B04656_01_02.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![配置调试工具栏](img/B04656_01_02.jpg)'
- en: Debug toolbar opened
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 调试工具栏已打开
- en: The right arrow reports that the debug toolbar is active but closed. If we click
    on it, the complete toolbar will open. Now, click on any item, the debug panel
    will be displayed.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 右箭头报告调试工具栏处于活动状态但已关闭。如果我们点击它，完整的工具栏将打开。现在，点击任何项目，调试面板将显示。
- en: By default, the debug toolbar can be used only in localhost. However, if we
    are using Yii2 in the remote hosting environment, we set the `allowedIPs` property
    of the `debug` module.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，调试工具栏只能在本地主机上使用。但是，如果我们正在使用 Yii2 在远程托管环境中，我们将设置 `debug` 模块的 `allowedIPs`
    属性。
- en: '[PRE12]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In `allowedIPs` there is only localhost (in the IPv4 and IPv6 forms). We need
    to put our Internet connection and IP source address here, which can be easily
    found using any `my IP` service on the Internet, such as [http://www.whatismyip.com/](http://www.whatismyip.com/).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `allowedIPs` 中只有本地主机（IPv4 和 IPv6 形式）。我们需要在这里放置我们的互联网连接和 IP 源地址，这可以通过使用互联网上的任何
    `我的 IP` 服务轻松找到，例如 [http://www.whatismyip.com/](http://www.whatismyip.com/)。
- en: 'If our IP source is, for example, `1.2.3.4`, we must add this entry to `allowedIPs`,
    in this way:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的 IP 源是，例如，`1.2.3.4`，我们必须将此条目添加到 `allowedIPs` 中，这样：
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Remember that if we do not have an Internet connection with a static IP, this
    IP might change. So we need to check whether `allowedIPs` contains our current
    IP.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果我们没有静态 IP 的互联网连接，这个 IP 可能会改变。因此，我们需要检查 `allowedIPs` 是否包含我们的当前 IP。
- en: 'You could also use an asterisk `*` to allow all IP addresses, so you do not
    have to deal with dynamic IP issues. If you do this, you need to remember to remove
    the asterisk before deployment. Finally, at the bottom of our current configuration
    `config/web.php`, you will see the following code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用星号 `*` 允许所有 IP 地址，这样您就不必处理动态 IP 问题。如果您这样做，您需要记住在部署之前删除星号。最后，在我们的当前配置 `config/web.php`
    的底部，您将看到以下代码：
- en: '[PRE14]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let's return to the `basic/web/index.php` webpage and take a look at the debug
    info panel.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到 `basic/web/index.php` 网页并查看调试信息面板。
- en: 'The debug information is distributed in the menu:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 调试信息分布在菜单中：
- en: '**Configuration**: This is the installed PHP version and configuration and
    also the installed Yii2 framework version.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：这包括已安装的 PHP 版本和配置，以及已安装的 Yii2 框架版本。'
- en: '**Request**: This is the info about the request just sent, displaying parameters
    of the request, headers of the request and other useful data as response and session
    data.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求**：这是关于刚刚发送的请求的信息，显示请求的参数、请求的头部和其他有用的数据，如响应和会话数据。'
- en: '**Logs**: This involves the actions performed by Yii2 during the execution.
    There are additional filters in this section to select the types of logs to be
    displayed.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**：这涉及 Yii2 在执行期间执行的操作。本节中还有额外的过滤器，用于选择要显示的日志类型。'
- en: '**Performance Profiling**: This includes info about timing and duration of
    process.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能分析**：这包括关于处理过程的时间和持续时间的详细信息。'
- en: '**Database**: This includes info about all database query occurred; we can
    filter for type of query to locate a specific query.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：这包括关于所有数据库查询发生的详细信息；我们可以过滤查询类型以定位特定查询。'
- en: It is possible to filter all data using internal grid filter or to filter for
    all, latest or selecting among the last 10 rows of the log on top of the content
    pane.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用内部网格过滤器过滤所有数据，或者过滤所有、最新或选择内容面板顶部最后 10 行日志。
- en: Using the logger
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用记录器
- en: In the Yii2 application, the debug info is stored using the log component. We
    can use this tool both in the development and production environment, but for
    reasons of performance and security in production, we should log only the important
    messages.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 应用程序中，调试信息是通过日志组件存储的。我们可以在开发和生产环境中使用此工具，但出于性能和安全的考虑，在生产环境中，我们应该只记录重要消息。
- en: 'The default configuration file of the Yii2 basic template provides log entry
    in the `components` property of `config/web.php`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 基本模板的默认配置文件在 `config/web.php` 的 `components` 属性中提供日志条目：
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Example – Hello world from scratch with the Yii basic template and bootstrap
    template
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用 Yii 基本模板和 Bootstrap 模板从头开始创建“Hello world”
- en: It is now time to code our first project using Yii2.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用 Yii2 编写我们的第一个项目了。
- en: 'If we have not installed Yii2 yet, we will to do it now using Composer as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还没有安装 Yii2，我们现在将使用 Composer 来完成安装，如下所示：
- en: Open Command Prompt to the web server.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开到 Web 服务器的命令提示符。
- en: Go to the document root of the web server (`/var/www` in a Linux machine).
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Web 服务器文档根目录（Linux 机器上的 `/var/www`）。
- en: 'Launch these commands (as described in the *Installing Yii with Composer* section):'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动这些命令（如 *使用 Composer 安装 Yii* 部分所述）：
- en: '[PRE16]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we need a fresh installation of Yii2 in the basic folder of the web server
    document root. Point the browser to `http:/hostname/basic/web` and we should see
    Yii2''s congratulations page:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在Web服务器文档根的基本文件夹中安装一个全新的 Yii2。将浏览器指向`http:/hostname/basic/web`，我们应该看到Yii2的祝贺页面：
- en: '![Example – Hello world from scratch with the Yii basic template and bootstrap
    template](img/B04656_01_05.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 使用 Yii 基本模板和 Bootstrap 模板从头开始创建 Hello world](img/B04656_01_05.jpg)'
- en: An example of the Hello world page
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Hello world 页面的示例
- en: We will create our first action to display a memorable `hello world` on the
    screen.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建第一个动作，在屏幕上显示一个难忘的`hello world`。
- en: We know from the *Application properties* section, in the defaultRoute entry,
    that the `SiteController` controller will be called when no route is specified
    in request.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从“应用程序属性”部分我们知道，在默认路由条目中，当请求未指定路由时，将调用`SiteController`控制器。
- en: So, we enter `basic/controllers` and open `SiteController.php`, which is the
    default controller.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们进入`basic/controllers`并打开默认控制器`SiteController.php`。
- en: In the `SiteController` class definition, we add a new method at the top, called
    `actionHelloWorld`, without parameters.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SiteController`类定义中，我们在顶部添加了一个新方法，称为`actionHelloWorld`，没有参数。
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let's save the file and point to `http://hostname/basic/web/index.php?r=site/hello-world`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存文件，并将浏览器指向`http://hostname/basic/web/index.php?r=site/hello-world`。
- en: You should see a blank page with `hello world`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个空白页面，上面显示“hello world”。
- en: Note
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Pay attention when using the name route convention. Uppercase letters are translated
    to lowercase and dashes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名称路由约定时请注意。大写字母将被转换为小写字母和短横线。
- en: This is fantastic, but now we just want to put `hello world` within the page
    template.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒，但现在我们只想在页面模板中放置`hello world`。
- en: We must now create a view with the content of response hello world!. In order
    to do this, we need to create a file named `helloWorld.php` as the name of the
    action under `views/site`. The naming convention need not necessarily be the same
    here because the view file is not automatically called from the framework.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要创建一个包含响应内容“hello world!”的视图。为了做到这一点，我们需要在`views/site`下创建一个名为`helloWorld.php`的文件，作为操作的名称。命名约定在这里不一定必须相同，因为视图文件不是由框架自动调用的。
- en: This file only contains the `hello world` text.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件仅包含“hello world”文本。
- en: 'We update `SiteController` with the following code:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下代码更新`SiteController`：
- en: '[PRE18]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the `actionHelloWorld()` method, `$this` refers to the SiteController's instance,
    and `render()` will insert the `views/helloWorld.php` file content in the main
    content layout page.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`actionHelloWorld()`方法中，`$this`指的是`SiteController`的实例，`render()`将插入`views/helloWorld.php`文件内容到主要内容布局页面。
- en: The extension of the view file, `.php`, is automatically added from the framework
    to view the name parameter passed to the render method.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 视图文件的扩展名`.php`是由框架自动添加的，用于查看传递给渲染方法的名称参数。
- en: 'What if we want to pass a parameter, such as name, to `actionHelloWorld()`?
    Formally, we need to add just one parameter to `actionHelloWorld()` in SiteController
    as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想向`actionHelloWorld()`传递一个参数，例如名称，怎么办？正式来说，我们只需要在`SiteController`中向`actionHelloWorld()`添加一个参数，如下所示：
- en: '[PRE19]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, under `view/site/helloWorld.php` add the following code:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`view/site/helloWorld.php`下添加以下代码：
- en: '[PRE20]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With the update of `actionHelloWorld()`, we will pass as a second parameter,
    an array of variables, that will be visible and used in View.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更新`actionHelloWorld()`，我们将作为第二个参数传递一个变量数组，这些变量将在视图中可见并使用。
- en: When we use parameters in the action function, we must remember that they will
    be mandatory and we must respect the order when passing it to the request.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在动作函数中使用参数时，我们必须记住它们将是必需的，并且我们必须在传递给请求时尊重顺序。
- en: 'To avoid this obligation, we can use the old method, parsing parameters into
    the function:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个义务，我们可以使用旧方法，将参数解析到函数中：
- en: '[PRE21]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With this solution, we can decide whether to pass the `nameToDisplay` parameter
    to request. The default value of the `nameToDisplay` parameter will be null, but
    we can decide to assign a different value.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种解决方案，我们可以决定是否将`nameToDisplay`参数传递给请求。`nameToDisplay`参数的默认值将是null，但我们可以决定分配不同的值。
- en: 'The following is a URL example passing the `nameToDisplay` parameter `Foo`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个传递`nameToDisplay`参数`Foo`的URL示例：
- en: '`http://hostname/basic/web/index.php?r=site/hello-world&nameToDisplay=Foo`'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://hostname/basic/web/index.php?r=site/hello-world&nameToDisplay=Foo`'
- en: Summary
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at a basic understanding of the Yii2 framework, starting
    from requirements to explain the main features. Then we used debugging and logging
    tools to trace our code and were able to find errors. Finally, we wrote our first
    project based on the basic template.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Yii2框架的基本理解，从需求开始解释其主要特性。然后我们使用了调试和日志工具来追踪我们的代码，并能够找到错误。最后，我们基于基本模板编写了我们的第一个项目。
- en: Next, you will learn how to create our controllers and views, to create custom
    interaction with frontend users.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将学习如何创建我们的控制器和视图，以创建与前端用户的自定义交互。
