- en: Chapter 5. The API Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。API 模块
- en: 'An **Application Programming Interface** (**API**) is the most common way of
    exposing services to third parties, and lately, most of the software out there
    is driven by APIs. Why? Because, by having an API for your application, not only
    is it easy to implement a fully functional HTML + JS frontend, but you can also
    use it if you develop a mobile application, for example. In this chapter, we will
    implement most of the functionalities needed for our project, covering topics
    such as these:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序编程接口（API**）是向第三方公开服务最常见的方式，最近，大多数软件都是由 API 驱动的。为什么？因为，如果你的应用程序有一个 API，不仅容易实现一个完整的
    HTML + JS 前端，而且如果你开发一个移动应用程序，也可以使用它。在本章中，我们将实现项目所需的大部分功能，涵盖以下主题：'
- en: Using APIs—recommended practices
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 API - 推荐做法
- en: Enabling SSL on our local machine
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上启用 SSL
- en: Creating the module structure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模块结构
- en: Writing a fully functional REST module with Phalcon PHP
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Phalcon PHP 编写一个完整的 REST 模块
- en: Securing an API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护 API
- en: Documenting the API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录 API
- en: Using APIs – recommended practices
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 API - 推荐做法
- en: 'If you are completely new to APIs, I recommend that you read at least the basics
    about developing an API. In the simplest way, an API response can be created with
    plain PHP, like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完全不了解 API，我建议你至少阅读一下关于开发 API 的基础知识。以最简单的方式，一个 API 响应可以用纯 PHP 创建，如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we are going to talk about some general rules that you should follow
    when developing an API, which are discussed as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论在开发 API 时你应该遵循的一些通用规则，如下所述：
- en: 'Use plural nouns instead of verbs, use concrete names, and make use of HTTP
    verbs (`GET`, `POST`, `PUT`, and `DELETE`) to operate on them:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用复数名词而不是动词，使用具体名称，并利用 HTTP 动词（`GET`、`POST`、`PUT` 和 `DELETE`）来操作它们：
- en: 'This format is bad:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种格式是错误的：
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This format is good:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种格式是好的：
- en: '[PRE2]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use verbs when the response does not involve a resource:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当响应不涉及资源时使用动词：
- en: '[PRE3]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Always version your API. In this way, when you make changes to your application,
    you ensure backward compatibility. Some examples are given here:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 始终为你的 API 打上版本号。这样，当你对应用程序进行更改时，你可以确保向后兼容性。这里给出了一些示例：
- en: '[PRE4]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Always use a secure connection (HTTPS), as you can see in the preceding information
    box.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终使用安全连接（HTTPS），如前文信息框所示。
- en: 'Allow data filtering and sorting:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许数据过滤和排序：
- en: '[PRE5]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Use `camelCase` instead of `snake_case`. I know that using snake case it would
    be easier to read, and I agree with you. But since (I assume that) you are going
    to represent your data in JSON format, you should use the JavaScript naming conventions.
    Anyway, this is a recommendation. After many years, I still cannot get used to
    camel case for these situations. In this book, I will use snake case.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `camelCase` 而不是 `snake_case`。我知道使用 snake case 会更容易阅读，我也同意你的观点。但是，由于（我假设）你打算以
    JSON 格式表示你的数据，你应该使用 JavaScript 命名约定。无论如何，这是一个建议。多年过去了，我仍然无法适应这些情况下的 camel case。在这本书中，我将使用
    snake case。
- en: If a business decision does not force you to expose XML format, go with JSON.
    From my point of view, XML is kind of dead.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果业务决策没有强迫你公开 XML 格式，请选择 JSON。从我的观点来看，XML 有点过时了。
- en: These are just a few general rules. You are going to learn about a few more,
    later in this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些基本的规则。你将在本章后面学习更多。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you don't know much about APIs, please check out resources such as [https://blog.apigee.com/taglist/restful](https://blog.apigee.com/taglist/restful),
    [http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api),
    or *Web API design*, an e-book by Brian Mulloy (38 pages).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太了解 API，请查看以下资源，例如 [https://blog.apigee.com/taglist/restful](https://blog.apigee.com/taglist/restful)，[http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api)，或
    *Web API 设计*，布赖恩·穆洛伊（Brian Mulloy）的电子书（38 页）。
- en: Enabling SSL on our local machine
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地机器上启用 SSL
- en: 'We will take into account one of the API rules: always use a secure connection.
    Assuming that you are using Nginx, this can be done in four easy steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将考虑 API 的一条规则：始终使用安全连接。假设你正在使用 Nginx，这可以通过以下四个简单步骤完成：
- en: 'Create a directory, `/etc/nginx/ssl`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录，`/etc/nginx/ssl`：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Generate a new certificate using the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Phalcon PHP 生成一个新的证书：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At this point you will be asked to provide some information about the new certificate,
    as shown in the following diagram:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此阶段，你将被要求提供一些关于新证书的信息，如下所示：
- en: '![Enabling SSL on our local machine](img/B03522_05_01.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在我们的本地机器上启用 SSL](img/B03522_05_01.jpg)'
- en: 'Open the `learning-phalcon.localhost` configuration file (`/etc/nginx/sites-available/learning-phalcon.localhost`)
    and enable SSL:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `learning-phalcon.localhost` 配置文件（`/etc/nginx/sites-available/learning-phalcon.localhost`）并启用
    SSL：
- en: '[PRE8]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then reload the Nginx configuration:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后重新加载 Nginx 配置：
- en: '[PRE9]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now you can try to access `https://learning-phalcon.localhost/`. In any browser
    that you are using, you will get a warning saying that the server certificate
    is not trusted. This is normal because it has not been signed by any authority.
    On Chrome, you should click on the **Advanced** link (seen in the following screenshot)
    and then on the **Proceed to learning-phalcon.localhost (unsafe**) link (shown
    in the next screenshot). Other browsers will have similar links:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以尝试访问 `https://learning-phalcon.localhost/`。在任何你使用的浏览器中，你将收到一个警告，说明服务器证书不受信任。这是正常的，因为它没有被任何权威机构签名。在
    Chrome 中，你应该点击以下截图中的 **高级** 链接，然后点击 **继续访问 learning-phalcon.localhost（不安全**）链接（如下一个截图所示）。其他浏览器将有类似的链接：
- en: '![Enabling SSL on our local machine](img/B03522_05_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的本地机器上启用 SSL](img/B03522_05_02.jpg)'
- en: 'After you click on **Advanced**, a new page will open and it should look like
    the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **高级** 后，将打开一个新页面，其外观应该如下截图所示：
- en: '![Enabling SSL on our local machine](img/B03522_05_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的本地机器上启用 SSL](img/B03522_05_03.jpg)'
- en: Note that your connection is not actually secured. The purpose of this was for
    us to be able to access our project via HTTPS.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你的连接实际上并没有被加密。这样做的目的是为了我们能够通过 HTTPS 访问我们的项目。
- en: Creating the module structure
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模块结构
- en: 'We have already created the basic structure in the previous chapters. The directory
    structure should look like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前的章节中创建了基本结构。目录结构应该看起来像这样：
- en: '![Creating the module structure](img/B03522_05_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![创建模块结构](img/B03522_05_04.jpg)'
- en: 'This is okay. What we need to do here is enable the routing and add some methods
    to `BaseController` so that we can move forward. Let''s start this process by
    performing the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可以的。我们需要在这里做的是启用路由并添加一些方法到 `BaseController` 中，以便我们能够继续前进。让我们通过以下步骤开始这个过程：
- en: 'Open the `routing.php` file from the `api` module, delete its content, and
    put in this code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `api` 模块打开 `routing.php` 文件，删除其内容，并放入以下代码：
- en: '[PRE10]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we add an array with the available versions of our API, and we tell the
    router to remove extra slashes. Therefore, a request to `/api/v1/articles` will
    be the same as a request to `/api/v1/articles/`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个包含我们 API 可用版本的数组，并告诉路由器删除额外的斜杠。因此，对 `/api/v1/articles` 的请求将与对 `/api/v1/articles/`
    的请求相同。
- en: After that, we make use of the router's capability of grouping and create a
    new group for the articles.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们利用路由器的分组能力创建一个新的文章分组。
- en: Finally, we mount the `articles` group onto the router.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将 `articles` 分组挂载到路由器上。
- en: 'There are a few things that we need to fix regarding the routing system. They
    are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于路由系统，我们需要解决几个问题。它们如下：
- en: 'We''ll be putting in new content in the global routing file (`config/routing.php`),
    like the following:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在全局路由文件（`config/routing.php`）中添加新内容，如下所示：
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Delete the `modules/App/Core/Config/routing.php` file—we are not going to have
    any routes for the core module. This module is more like a library.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `modules/App/Core/Config/routing.php` 文件——我们不会为核心模块设置任何路由。这个模块更像是一个库。
- en: 'Finally, replace the content of `modules/Frontend/Config/routing.php` with
    this content:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将 `modules/Frontend/Config/routing.php` 的内容替换为以下内容：
- en: '[PRE12]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The new router group uses a controller named `Articles`, which does not exist.
    Now, let''s continue with further processes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 新的路由器组使用了一个名为 `Articles` 的控制器，该控制器不存在。现在，让我们继续进行以下步骤：
- en: 'Let''s create `ArticlesController.php` with the following content:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建 `ArticlesController.php` 并包含以下内容：
- en: '[PRE13]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows the output after running the `ArticlesController.php`
    file:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了运行 `ArticlesController.php` 文件后的输出：
- en: '![Creating the module structure](img/B03522_05_05.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建模块结构](img/B03522_05_05.jpg)'
- en: Now, if you access `https://learning-phalcon.localhost/api/v1/articles`, you
    should see the same content as shown in the preceding screenshot.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果你访问 `https://learning-phalcon.localhost/api/v1/articles`，你应该看到前面截图所示的内容。
- en: 'Next, let''s modify our base controller. Open `BaseController.php` and append
    this content:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们修改我们的基本控制器。打开 `BaseController.php` 并添加以下内容：
- en: '[PRE14]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we have left out some methods. For a complete class, check out the
    source code for this chapter.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们省略了一些方法。要查看完整的类，请查看本章的源代码。
- en: 'Now, let''s edit the `listAction()` function in `ArticlesController.php`. The
    new `listAction()`function will look like this:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们编辑`ArticlesController.php`中的`listAction()`函数。新的`listAction()`函数将看起来像这样：
- en: '[PRE15]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can now reopen `https://learning-phalcon.localhost/api/v1/articles` and
    check the result. You should see JSON-encoded text, as shown in this screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以重新打开`https://learning-phalcon.localhost/api/v1/articles`并检查结果。你应该会看到如截图所示的JSON编码文本：
- en: '![Creating the module structure](img/B03522_05_06.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![创建模块结构](img/B03522_05_06.jpg)'
- en: We have the basics. Let's move forward with our project and develop its API.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了基础知识。让我们继续推进我们的项目并开发其API。
- en: Writing a fully functional REST module with Phalcon PHP
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Phalcon PHP编写一个完全功能的REST模块
- en: Before starting, I recommend that you use a RESTful client that will help you
    test things faster. Personally, I prefer DHC (it's a Chrome extension), which
    can be found at [https://chrome.google.com/webstore/detail/dhc-resthttp-api-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en](https://chrome.google.com/webstore/detail/dhc-resthttp-api-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我建议您使用一个RESTful客户端，这将帮助您更快地测试事物。我个人更喜欢DHC（这是一个Chrome扩展），您可以在[https://chrome.google.com/webstore/detail/dhc-resthttp-api-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en](https://chrome.google.com/webstore/detail/dhc-resthttp-api-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en)找到它。
- en: We are going to develop the CRUD operations for `Articles`, `Categories`, `Hashtags`
    and `Users`. Let's start with `Articles`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发`Articles`、`Categories`、`Hashtags`和`Users`的CRUD操作。让我们从`Articles`开始。
- en: Articles
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文章
- en: We have already created the controller, so by executing a `GET` method on `https://learning-phalcon.localhost/api/v1/articles`,
    you should get a response. Let's implement the article manager for the articles
    listing so that we can retrieve real data.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了控制器，因此通过在`https://learning-phalcon.localhost/api/v1/articles`上执行`GET`方法，你应该会得到一个响应。让我们实现文章列表的文章管理器，以便我们可以检索真实数据。
- en: 'First of all, we will make some changes to the `Article` model and overwrite
    the `toArray()` method. Open `modules/Core/Models/Article.php` and append the
    following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将对`Article`模型进行一些更改并重写`toArray()`方法。打开`modules/Core/Models/Article.php`并追加以下代码：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, we append everything related to the article: translations,
    information about the author, categories, and hashtags.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们添加了与文章相关的一切：翻译、作者信息、类别和标签。
- en: 'As the categories have translations, we will also overwrite the `toArray()`
    method from the category model. Open `modules/Core/Models/Category.php` and add
    the following code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于类别有翻译，我们还将重写类别模型的`toArray()`方法。打开`modules/Core/Models/Category.php`并添加以下代码：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: All we have to do now is implement a new method in the Article manager. We call
    that method from the Article controller, and we should have our first call ready.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的是在文章管理器中实现一个新的方法。我们从文章控制器调用该方法，我们应该准备好第一次调用。
- en: 'Open `modules/Core/Managers/ArticleManager.php` and append the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`modules/Core/Managers/ArticleManager.php`并追加以下代码：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You will see that the method name is `restGet`. I like to append the `rest`
    prefix to my methods that are strictly used for APIs. It is a personal preference;
    you can use any naming conventions for your projects.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到方法名是`restGet`。我喜欢在我的严格用于API的方法中添加`rest`前缀。这是一个个人偏好；您可以为您的项目使用任何命名约定。
- en: The `restGet()` method will throw exceptions. If we request a list of articles
    and the request is successful but we don't have the articles in the database,
    we use HTTP code 204\. In simple words, it means, *Your request was okay, but
    I have no content*. We use HTTP `404 (not found)` if we try to get an article
    by ID but that article does not exist in our database.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`restGet()`方法将抛出异常。如果我们请求文章列表并且请求成功但我们数据库中没有文章，我们使用HTTP代码204。简单来说，这意味着，“您的请求是好的，但我没有内容”。如果我们尝试通过ID获取文章但该文章在我们的数据库中不存在，我们使用HTTP
    `404 (not found)`。'
- en: 'The final step is to call this method from our controller. Open `modules/Api/Controllers/ArticlesController.php`
    and update the `listAction()` method with the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是从我们的控制器调用此方法。打开`modules/Api/Controllers/ArticlesController.php`并更新`listAction()`方法，如下所示：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'That''s it! From your favorite API client, make a `GET` request to `http://learning-phalcon.localhost/api/v1/articles`,
    or do it from the command line with CURL:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！从您最喜欢的API客户端，向`http://learning-phalcon.localhost/api/v1/articles`发送`GET`请求，或者从命令行使用CURL执行：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you did everything well, you should be able to see a response similar to
    what is presented in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做得很好，你应该能看到以下截图所示的响应：
- en: '![Articles](img/B03522_05_07.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![文章](img/B03522_05_07.jpg)'
- en: 'We now have all of the information needed to render the most common data for
    an article. Consider, for example, if you are going to get this data with jQuery,
    it is easy:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了渲染文章最常见数据所需的所有信息。例如，如果你打算用jQuery获取这些数据，很容易：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can also append the page number in your request like this: `http://learning-phalcon.localhost/api/v1/articles?p=2`.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在请求中添加页码，如下所示：`http://learning-phalcon.localhost/api/v1/articles?p=2`。
- en: 'Let''s continue with our CRUD operations as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续我们的CRUD操作如下：
- en: 'We will now create a service to retrieve a single article. Open the `routing.php`
    file from the `api` module, and append the following route to the `$articles`
    group:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一个服务来检索单个文章。打开`api`模块中的`routing.php`文件，并将以下路由添加到`$articles`组中：
- en: '[PRE22]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, we add the `get()` method to `ArticlesController.php`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在`ArticlesController.php`中添加`get()`方法：
- en: '[PRE23]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'That''s it! You can now request an article that exists in your database, and
    you should get exactly the same structure. Also, the `items` key will contain
    only this article. In my case, it was the article with the ID equal to `6`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你现在可以请求数据库中存在的文章，你应该得到完全相同的结构。此外，`items`键将只包含这篇文章。在我的情况下，它是ID等于`6`的文章：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you request a non-existing article, you should get a response similar to
    what is shown in this screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你请求一个不存在的文章，你应该得到一个类似于以下截图的响应：
- en: '![Articles](img/B03522_05_08.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![文章](img/B03522_05_08.jpg)'
- en: 'Next, we are going to implement the `update` method for an article as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实现文章的`update`方法如下：
- en: 'First, we need to add the routing information. Open `modules/Api/Config/routing.php`
    and append the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要添加路由信息。打开`modules/Api/Config/routing.php`并添加以下代码：
- en: '[PRE25]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that we use `PUT`, the recommended method for updating resources.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们使用`PUT`，这是更新资源的推荐方法。
- en: 'Create a new method named `updateAction()` in `ArticlesController.php` with
    the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ArticlesController.php`中创建一个名为`updateAction()`的新方法，并添加以下代码：
- en: '[PRE26]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In `updateAction()`, we check whether the content-type header is of the `application/json`
    type. If it is, we call `getJsonRawBody()` from the request object. The `true`
    Boolean parameter means that we force decoding as an array. If the data is received
    via a form, we will make use of the `getPut()` method.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`updateAction()`中，我们检查内容类型头是否为`application/json`类型。如果是，我们从请求对象中调用`getJsonRawBody()`。布尔参数`true`表示我们强制解码为数组。如果数据通过表单接收，我们将使用`getPut()`方法。
- en: 'Submitting data as a JSON body is the best approach from my point of view.
    Using jQuery, you can do this very simply, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据作为JSON体提交是我认为的最佳方法。使用jQuery，你可以非常简单地做到这一点，如下所示：
- en: '[PRE27]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s see how our `restUpdate()` method looks. Open `ArticleManager.php`
    and add the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们的`restUpdate()`方法看起来如何。打开`ArticleManager.php`并添加以下代码：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As you can see, for now, we are going to update only one field: `article_is_published`.
    If the article has been successfully updated, you will get the new update article
    as a response (check out the following screenshot). Now let''s test this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，目前我们只将更新一个字段：`article_is_published`。如果文章已成功更新，您将得到新的更新文章作为响应（查看以下截图）。现在让我们测试一下：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![Articles](img/B03522_05_09.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![文章](img/B03522_05_09.jpg)'
- en: 'If we don''t provide any data, we will get a `400 Bad Request` message, like
    this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不提供任何数据，我们将得到一个`400 Bad Request`消息，如下所示：
- en: '![Articles](img/B03522_05_10.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![文章](img/B03522_05_10.jpg)'
- en: 'Well done! So far, we have exposed a service with three methods: `GET` for
    a list of articles, `GET` for a single article, and `PUT` for updating an article.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！到目前为止，我们已经公开了一个具有三种方法的服务：`GET`用于文章列表，`GET`用于单个文章，`PUT`用于更新文章。
- en: 'We will continue developing the remaining two methods: `DELETE` (for deleting)
    and `POST` (for creation). Let''s start with the easier one, which is `DELETE`.
    To do so, let''s perform the following steps:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续开发剩余的两个方法：`DELETE`（用于删除）和`POST`（用于创建）。让我们从更容易的一个开始，即`DELETE`。为此，让我们执行以下步骤：
- en: 'Open the API routing file and append the following code:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开API路由文件，并添加以下代码：
- en: '[PRE30]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we create a method named `deleteAction()` in `ArticlesController.php`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`ArticlesController.php`中创建一个名为`deleteAction()`的方法：
- en: '[PRE31]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, create the `restDelete()` method in `ArticlesManager.php`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`ArticlesManager.php`中创建`restDelete()`方法：
- en: '[PRE32]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Before testing, we must make a small change to the `Articles.php` model by adding
    `\Phalcon\Mvc\Model\Relation::ACTION_CASCADE` to the foreign key for translations,
    otherwise, we will get an error message saying **Record is referenced by model
    App\\Core\\Models\\ArticleTranslation**. This change is needed because of the
    existing relation between articles and translations. When we delete an article,
    its translation will be automatically deleted.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试之前，我们必须对 `Articles.php` 模型进行一个小改动，即在翻译的外键中添加 `\Phalcon\Mvc\Model\Relation::ACTION_CASCADE`，否则我们将收到一个错误消息，说
    **“Record is referenced by model App\\Core\\Models\\ArticleTranslation”**。这个改动是因为文章和翻译之间现有的关系。当我们删除文章时，其翻译将被自动删除。
- en: 'Open `modules/Core/Models/Article.php` file and replace the relation for translations
    with the following code snippet:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `modules/Core/Models/Article.php` 文件，将翻译的关系替换为以下代码片段：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can now test our code, and the result should be similar to what is shown
    in the following screenshot. If the article was not found, you will receive a
    404 error instead of 200:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以测试我们的代码，结果应该类似于以下截图所示。如果没有找到文章，你将收到一个 404 错误而不是 200：
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Articles](img/B03522_05_11.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![文章](img/B03522_05_11.jpg)'
- en: That's it! You can delete articles by simply making a `DELETE` request to the
    right URL.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些！你可以通过简单地向正确的 URL 发送 `DELETE` 请求来删除文章。
- en: 'Now, let''s continue with the implementation of `POST` (to create an article).
    To do so, perform the following steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续实现 `POST` 操作（用于创建文章）。为此，执行以下步骤：
- en: 'Open `modules/Api/Config/routing.php` and add this code:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `modules/Api/Config/routing.php` 文件并添加以下代码：
- en: '[PRE35]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Implement a `createAction()` method in `ArticlesController.php`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ArticlesController.php` 中实现 `createAction()` 方法：
- en: '[PRE36]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The manager (`ArticleManager.php`) will contain a new method named `restCreate()`,
    but we will also update the `create()` method:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理器（`ArticleManager.php`）将包含一个名为 `restCreate()` 的新方法，但我们也会更新 `create()` 方法：
- en: '[PRE37]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s test the new code. Create a JSON body content and the `POST` method
    data to `/api/v1/articles` as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试新的代码。创建一个 JSON 主体内容，并将 `POST` 方法数据发送到 `/api/v1/articles`，如下所示：
- en: '[PRE38]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Don''t forget to replace the user ID, and the IDs of the categories and hashtags
    that you have in your database. The result should be a newly created article,
    similar to the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记替换用户 ID 以及你在数据库中的分类和标签的 ID。结果应该是一个新创建的文章，类似于以下截图：
- en: '![Articles](img/B03522_05_12.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![文章](img/B03522_05_12.jpg)'
- en: Following the same rule as followed in `Articles`, you should try to develop
    the rest of the endpoints (categories, hashtags, and users). If you don't feel
    comfortable with it, you can always check out the source code for this chapter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `Articles` 中遵循的相同规则，你应该尝试开发其余的端点（分类、标签和用户）。如果你觉得不舒服，你总是可以查看本章的源代码。
- en: Securing an API
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护 API
- en: In general, when you put something online, it is not secure anymore. Virtually
    anything can be hacked. What can you do in this case? Well, if you are not a billionaire
    who can afford huge investments in human resources and security software and hardware,
    all that you can do is try to make the attackers' life a bit rough and always
    monitor your stuff.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你把东西放到网上时，它就不再安全了。几乎任何东西都可以被黑客攻击。在这种情况下，你能做什么呢？好吧，如果你不是可以负担得起大量人力资源和安全软硬件投资的亿万富翁，你所能做的就是尽量让攻击者的生活变得艰难，并始终监控你的东西。
- en: There are hundreds of books about security and securing an API. We will try
    to implement a few basic security methods that can help you avoid a disaster.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 关于安全和保护 API 的书籍有成百上千本。我们将尝试实现一些基本的安全方法，这些方法可以帮助你避免灾难。
- en: 'So what are these methods? Here is a list:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这些方法是什么呢？以下是一个列表：
- en: Always use SSL
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是使用 SSL
- en: Add an API key for extra protection
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 API 密钥以提供额外保护
- en: Limit the number of requests per second from the same IP
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制来自同一 IP 的每秒请求数量
- en: Limit access to resources, such as `DELETE`, `PUT`, `POST`, for authenticated
    users
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制对资源的访问，例如 `DELETE`、`PUT`、`POST`，仅对认证用户开放
- en: Using SSL
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SSL
- en: There is no need to elaborate on SSL. Using a secure connection is how you need
    to go about it. SSL certificates are quite cheap these days. For example, the
    guys from [http://www.namecheap.com](http://www.namecheap.com) sell the multi-domain
    SSL certificate for 80 EUR per year.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要详细说明 SSL。使用安全连接是你应该采取的方式。SSL 证书现在相当便宜。例如，[http://www.namecheap.com](http://www.namecheap.com)
    的人以每年 80 欧元的单价出售多域名 SSL 证书。
- en: Adding an API key for extra protection
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 API 密钥以提供额外保护
- en: 'We will create a white list of API keys in our global configuration. We will
    append an APIKEY header to all our requests and check it against the values from
    config. If the API key does not match, the server will respond with a `403 Forbidden`
    error. If you use this key in a JavaScript environment, everyone will be able
    to see it, but at least you can take control and change the API key in a second.
    Let''s implement the protection:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在全局配置中创建一个API密钥白名单。我们将向所有请求追加一个APIKEY头，并与配置中的值进行核对。如果API密钥不匹配，服务器将响应一个“403禁止访问”错误。如果你在JavaScript环境中使用这个密钥，任何人都能看到它，但至少你可以控制并更改API密钥。让我们实现保护措施：
- en: 'Open the `config/config.php` global configuration file and append this code
    to the `$config` array:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开全局配置文件`config/config.php`并将以下代码追加到`$config`数组中：
- en: '[PRE39]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create a new directory named `Listeners` in `modules/Core/`, and create a new
    file named `ApiListener.php` with the following content:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`modules/Core/`中创建一个名为`Listeners`的新目录，并创建一个名为`ApiListener.php`的新文件，内容如下：
- en: '[PRE40]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, inject this service into `dispatcher`. Open `modules/Api/service.php`
    and replace the `$di[''dispatcher'']` array with this:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将这个服务注入到`dispatcher`中。打开`modules/Api/service.php`并将`$di['dispatcher']`数组替换为以下内容：
- en: '[PRE41]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If you make a request using the following command line, you will notice that
    all you get is a `403 Forbidden` error:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用以下命令行发出请求，你会注意到你得到的是“403禁止访问”错误：
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `403 Forbidden` error is as presented in the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: “403禁止访问”错误如以下截图所示：
- en: '![Adding an API key for extra protection](img/B03522_05_13.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![为额外保护添加API密钥](img/B03522_05_13.jpg)'
- en: 'This happened because you didn''t provide the APIKEY header. All you need to
    do is provide the correct header with the correct key, and you will get the article:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为你没有提供APIKEY头。你所需要做的就是提供正确的头和正确的密钥，你将得到这篇文章：
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This is it! Of course, this method can be improved, but that is beyond the scope
    of this book. Additionally, you can map API keys with clients and/or IP addresses,
    and so on.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！当然，这个方法可以改进，但这超出了本书的范围。此外，你可以将API密钥与客户端和/或IP地址等进行映射。
- en: Limiting the number of requests per second from the same IP
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制来自同一IP的每秒请求数量
- en: 'We will use a simple solution from Redis for limiting the number of requests
    per second from the same IP. Let''s assume that we want a limit of five requests
    per second from the same IP:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Redis的一个简单解决方案来限制来自同一IP的每秒请求数量。假设我们希望来自同一IP的每秒限制为五个请求：
- en: 'Open `ApiListener.php` and add the following method:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ApiListener.php`并添加以下方法：
- en: '[PRE44]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, update the `beforeExecuteRoute()` method with the following code:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下代码更新`beforeExecuteRoute()`方法：
- en: '[PRE45]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: That's all! You can easily test it by replacing `5` with `2`, and make some
    requests. You will get a 429 response. You can use this method in conjunction
    with API keys and users to limit the requests for a certain user.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 那就结束了！你可以通过将`5`替换为`2`来轻松测试它，并发出一些请求。你会得到一个429响应。你可以结合使用API密钥和用户来限制特定用户的请求。
- en: Limiting access to resources such as DELETE, PUT, and POST for authenticated
    users
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制认证用户对DELETE、PUT和POST等资源的访问
- en: 'If you are going to expose your API, you need to be sure that only authenticated
    users can access certain resources. This means that you shouldn''t access these
    resources from a public interface, for example, the frontend. A quick and convenient
    solution would be to use another header (let''s call it `TOKEN`) that will be
    used in CRUD operations from the admin interface. Let''s perform the following
    set of steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算公开你的API，你需要确保只有认证用户可以访问某些资源。这意味着你不应该从公共接口访问这些资源，例如前端。一个快速方便的解决方案是使用另一个头（让我们称它为`TOKEN`），它将在从管理界面进行的CRUD操作中使用。让我们执行以下步骤：
- en: 'Here, we''ll first add a new method, `resourceWithToken()`, in `ApiListener.php`
    as follows, and then update `beforeExecuteRoute()` method:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们首先在`ApiListener.php`中添加一个新的方法`resourceWithToken()`，如下所示，然后更新`beforeExecuteRoute()`方法：
- en: '[PRE46]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Append the following code to the `beforeExecuteRoute()` method:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码追加到`beforeExecuteRoute()`方法中：
- en: '[PRE47]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If you try `POST`, `PUT`, or `DELETE`, you will get a 405 error. From now on,
    you need to append the header named TOKEN with the `mySecretToken` value, as shown
    in this example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试`POST`、`PUT`或`DELETE`，你会得到一个405错误。从现在开始，你需要追加名为TOKEN的头，并带有`mySecretToken`值，如以下示例所示：
- en: '[PRE48]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Remember that this will not secure your API if you call it from a frontend using
    JavaScript, because the value of the token will be visible to everyone.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你使用 JavaScript 从前端调用它，这不会保护你的 API，因为令牌的值将对每个人可见。
- en: There are hundreds of other solutions, and you should carefully study what is
    needed. Also, securing your API is not enough. Securing the entire application,
    plus the server (for example, by using firewalls), is important too. But just
    for the purpose of this chapter, what we did should be enough to protect us from
    the most common attacks.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有数百种其他解决方案，你应该仔细研究你需要什么。此外，保护你的 API 并不足以。保护整个应用程序，以及服务器（例如，通过使用防火墙）也同样重要。但仅就本章的目的而言，我们所做的一切应该足以保护我们免受最常见的攻击。
- en: Read more, document yourself, and ask for experts' opinions. Most of the time,
    what seems to be a good solution for someone might not be a good solution for
    you.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 读取更多内容，自我学习，并寻求专家的意见。大多数时候，对某人来说似乎是一个好解决方案，可能对你来说并不是一个好解决方案。
- en: Documenting the API
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录 API
- en: Documentation is probably one of the most important things you should spend
    time on. When I discovered Phalcon, the first thing that I did was to develop
    a simple API. When I needed to create documentation for my API, I found myself
    in a strange situation; there were just a few solutions out there, and most of
    them had dependencies. This was back in the summer of 2013 or so.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 文档可能是你应该花时间做的最重要的事情之一。当我发现 Phalcon 时，我做的第一件事就是开发一个简单的 API。当我需要为我的 API 创建文档时，我发现自己处于一个奇怪的情况；当时只有少数解决方案，而且大多数都有依赖项。那是在
    2013 年夏天左右。
- en: So, I decided to create my own API documentation generator, without any dependencies—just
    pure PHP. I am going to use this tool (it is publicly available on GitHub at [https://github.com/calinrada/php-apidoc](https://github.com/calinrada/php-apidoc))
    to create and generate the API documentation for our project.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我决定创建自己的 API 文档生成器，没有任何依赖项——只是纯 PHP。我将使用这个工具（它在 GitHub 上公开可用，网址为 [https://github.com/calinrada/php-apidoc](https://github.com/calinrada/php-apidoc)）来创建和生成我们项目的
    API 文档。
- en: Installation
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: 'You should already have it, because I was using the extractor from it to generate
    comments for the CLI tasks. If you missed it, you can do it in two easy steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经有了它，因为我一直在使用它来生成 CLI 任务的注释。如果你错过了它，你可以通过两个简单的步骤来完成：
- en: '[PRE49]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Usage
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: 'We''ll perform a couple of steps to properly understand the usage:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行几个步骤来正确理解用法：
- en: 'Let''s create a new CLI task named `ApidocTask.php` with the following content:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `ApidocTask.php` 的新 CLI 任务，内容如下：
- en: '[PRE50]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We are going to use annotation to document each method.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用注解来记录每个方法。
- en: Note
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For additional information on this, check out [https://github.com/calinrada/php-apidoc#usage](https://github.com/calinrada/php-apidoc#usage)
    and [https://github.com/calinrada/php-apidoc#available-methods](https://github.com/calinrada/php-apidoc#available-methods).
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于这方面的更多信息，请参阅 [https://github.com/calinrada/php-apidoc#usage](https://github.com/calinrada/php-apidoc#usage)
    和 [https://github.com/calinrada/php-apidoc#available-methods](https://github.com/calinrada/php-apidoc#available-methods)。
- en: 'Open `ArticlesController.php` and append the following content to the `listActi/on()`
    method:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ArticlesController.php` 并将以下内容追加到 `listActi/on()` 方法中：
- en: '[PRE51]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now switch to the command prompt and execute the following command line:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在切换到命令提示符并执行以下命令行：
- en: '[PRE52]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The task creates a new symlink in your public folder. Now you can access the
    API documentation at `http://learning-phalcon.localhost/apidoc/`, and you should
    be able to see exactly the same output as presented in the following screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 任务会在你的公共文件夹中创建一个新的符号链接。现在你可以通过 `http://learning-phalcon.localhost/apidoc/` 访问
    API 文档，你应该能够看到以下截图中所展示的完全相同的输出：
- en: '![Usage](img/B03522_05_14.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![用法](img/B03522_05_14.jpg)'
- en: It's time to close this chapter. Please take your time to read as much as possible
    about developing APIs, especially secure APIs.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候关闭这一章了。请花时间尽可能多地阅读有关开发 API 的内容，特别是安全 API。
- en: Summary
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discovered how easily and quickly we can develop an API.
    You learned about the recommended practices and a few common ways of securing
    an API. We covered new topics, such as route grouping and filtering results.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们发现了我们如何轻松快速地开发 API。你了解了推荐的实践和几种常见的保护 API 的方法。我们涵盖了新的主题，如路由分组和过滤结果。
- en: In the next chapters, we will switch layouts and JavaScript integration, but
    we will continue to adapt, or change, things in the API, database, and models.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将切换布局和 JavaScript 集成，但我们将继续适应或更改 API、数据库和模型中的事物。
