- en: Chapter 2. User Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 用户管理
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Viewing users
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看用户
- en: Creating users
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户
- en: Editing users
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑用户
- en: Deleting users
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户
- en: Generating passwords with CodeIgniter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter 生成密码
- en: Generating passwords with CodeIgniter – the bare bones
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter 生成密码 – 基础
- en: Forgot password? – resetting passwords with CodeIgniter
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忘记密码？ – 使用 CodeIgniter 重置密码
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Chances are that a lot of the sites and apps you'll build with CodeIgniter will
    need users, and there will be a need to manage them and their details directly,
    that is create, update, edit, and delete them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 很有可能，你用 CodeIgniter 构建的许多网站和应用都需要用户，并且需要直接管理他们及其详细信息，也就是说创建、更新、编辑和删除他们。
- en: In this chapter, we'll look at basic user management and, build a simple CRUD
    interface to manage and maintain those users in a database. Later, in [Chapter
    7](ch07.html "Chapter 7. Creating a Secure User Environment"), *Creating a Secure
    User Environment*, we will be looking at securing your user information with login
    and session functionality, but for now, we will concentrate on building a user
    management interface.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨基本用户管理，并构建一个简单的 CRUD 界面来管理和维护数据库中的这些用户。稍后，在 [第七章](ch07.html "第七章 创建安全用户环境")，*创建安全用户环境*
    中，我们将探讨使用登录和会话功能来保护用户信息，但就目前而言，我们将专注于构建用户管理界面。
- en: 'Before we begin, we''ll need to alter some settings in a couple of config files
    in the `application/config` folder. We''ll be editing the following files:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要在 `application/config` 文件夹中的几个配置文件中更改一些设置。我们将编辑以下文件：
- en: '`path/to/codeigniter/application/config/config.php`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/config/config.php`'
- en: '`path/to/codeigniter/application/config/database.php`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/config/database.php`'
- en: 'Find the following config values in the `path/to/codeigniter/application/config/config.php`
    file and amend them to reflect the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `path/to/codeigniter/application/config/config.php` 文件中找到以下配置值，并修改它们以反映以下内容：
- en: '| Config item | Change to | Description |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 配置项 | 更改为 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `$config[''sess_cookie_name'']` | `ci_session` | This should be the name
    of the cookie written to the users computer. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''sess_cookie_name'']` | `ci_session` | 这应该是写入用户计算机的 cookie 的名称。
    |'
- en: '| `$config[''sess_expiration'']` | `7200` | This is the number of seconds a
    session should remain active after a period of no activity before becoming void.
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''sess_expiration'']` | `7200` | 这是在会话在一段时间内没有活动后变为无效之前应保持活跃的秒数。
    |'
- en: '| `$config[''sess_expire_on_close'']` | `TRUE` | This specifies that if the
    user closes their browser, the session becomes void. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''sess_expire_on_close'']` | `TRUE` | 这指定了如果用户关闭浏览器，会话将变为无效。 |'
- en: '| `$config[''sess_encrypt_cookie'']` | `TRUE` | This specifies that if the
    cookie should be encrypted on the user''s computer; for security purposes, this
    should be set to `TRUE`. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''sess_encrypt_cookie'']` | `TRUE` | 这指定了如果 cookie 应在用户的计算机上加密；出于安全考虑，应将其设置为
    `TRUE`。 |'
- en: '| `$config[''sess_use_database'']` | `TRUE` | This specifies whether or not
    to store sessions in the database. For security purposes, this should be set to
    `TRUE`. You will also need to create the session table, which can be found in
    the *Database schema* section. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''sess_use_database'']` | `TRUE` | 这指定了是否将会话存储在数据库中。出于安全考虑，应将其设置为
    `TRUE`。你还需要创建会话表，该表可以在 *数据库模式* 部分找到。 |'
- en: '| `$config[''sess_table_name'']` | `sessions` | This specifies the name of
    the database table used to store session data. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''sess_table_name'']` | `sessions` | 这指定了用于存储会话数据的数据库表名称。 |'
- en: '| `$config[''sess_match_ip'']` | `TRUE` | This specifies CodeIgniter should
    monitor the IP address of requests and against that of the `session_id`. If the
    IP of an incoming request doesn''t match the previous values, the session is disallowed.
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''sess_match_ip'']` | `TRUE` | 这指定了 CodeIgniter 应该监控请求的 IP 地址与 `session_id`
    的对比。如果传入请求的 IP 地址与之前的值不匹配，则不允许会话。 |'
- en: '| `$config[''sess_match_useragent'']` | `TRUE` | This specifies CodeIgniter
    should monitor the user agent address of requests and against that of the `session_id`.
    If the user agent of an incoming request doesn''t match the previous values, the
    session is disallowed. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `$config[''sess_match_useragent'']` | `TRUE` | 这指定了 CodeIgniter 应该监控请求的用户代理地址与
    `session_id` 的对比。如果传入请求的用户代理地址与之前的值不匹配，则不允许会话。 |'
- en: 'Find the following config values in the `path/to/codeigniter/application/config/database.php`
    file and amend them to reflect the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `path/to/codeigniter/application/config/database.php` 文件中找到以下配置值，并修改它们以反映以下内容：
- en: '| Config item | Change to value | Description |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 配置项 | 更改为值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `$db[''default''][''hostname'']` | `localhost` | The hostname of your database;
    this is usually either `localhost` or an IP address |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `$db[''default''][''hostname'']` | `localhost` | 数据库的主机名；这通常是 `localhost`
    或 IP 地址 |'
- en: '| `$db[''default''][''username'']` | ? | The username you wish to use to connect
    to your database |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `$db[''default''][''username'']` | ? | 您希望用于连接数据库的用户名 |'
- en: '| `$db[''default''][''password'']` | ? | The password used to connect to your
    database |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `$db[''default''][''password'']` | ? | 连接到数据库使用的密码 |'
- en: '| `$db[''default''][''database'']` | ? | The name of the database, which you
    wish to connect to, for example, `users` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `$db[''default''][''database'']` | ? | 您希望连接到的数据库名称，例如，`users` |'
- en: Database schema
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库模式
- en: 'Using the method of your choice (command line, phpmyadmin, and so on) enter
    the following code into your database:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您选择的方法（命令行、phpmyadmin 等）将以下代码输入到您的数据库中：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What are the columns for and what type of data will we store in them? The following
    table is a guide to the preceding database schema:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 列是什么以及我们将存储什么类型的数据？以下表格是先前数据库模式的指南：
- en: '| Item name | Attributes | Description |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 项目名称 | 属性 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `user_id` | `INTEGER(11)` | The table primary key. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `user_id` | `INTEGER(11)` | 表的主键。 |'
- en: '| `user_first_name` | `VARCHAR(125)` | The user''s first name. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `user_first_name` | `VARCHAR(125)` | 用户的第一个名字。 |'
- en: '| `user_last_name` | `VARCHAR(125)` | The user''s last name. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `user_last_name` | `VARCHAR(125)` | 用户的姓氏。 |'
- en: '| `user_email` | `VARCHAR(255)` | The user''s e-mail address, for example,
    `<[name@example.org](mailto:name@example.org)>`. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `user_email` | `VARCHAR(255)` | 用户的电子邮件地址，例如，`<name@example.org>`。 |'
- en: '| `user_created_date` | `INTEGER(11)` | The unix timestamp for the date the
    user was created within the database. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `user_created_date` | `INTEGER(11)` | 用户在数据库中创建的日期的 Unix 时间戳。 |'
- en: '| `user_is_active` | `INTEGER(1)` | The Boolean value represented as `0` or
    `1`, if the user is active. This variable specifies whether the user is active
    within the system. An active user can login, while inactive users cannot. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `user_is_active` | `INTEGER(1)` | 以 `0` 或 `1` 表示的布尔值，如果用户是活跃的。此变量指定用户是否在系统中活跃。活跃用户可以登录，而不活跃用户则不能。
    |'
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you have already created a sessions table, then you can omit that table.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经创建了会话表，则可以省略该表。
- en: Viewing users
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看用户
- en: A good place for us to begin is to display a list of our users. We're going
    to create a model, view, and controller to provide the functionality to do this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始的好地方是显示我们用户的列表。我们将创建一个模型、视图和控制台，以提供执行此操作的功能。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following three files:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下三个文件：
- en: '`path/to/codeigniter/application/models/users_model.php`: This file gives us
    CRUD support with the database'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/models/users_model.php`: 此文件为我们提供数据库的 CRUD
    支持'
- en: '`path/to/codeigniter/application/views/users/view_all_users.php`: This file
    contains a `foreach` loop, which runs through the results array, writing all users
    to a table'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/view_all_users.php`: 此文件包含一个 `foreach`
    循环，遍历结果数组，将所有用户写入表格'
- en: '`path/to/codeigniter/application/controllers/users.php`: This file contains
    the code necessary to handle the CRUD functionality'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/controllers/users.php`: 此文件包含处理 CRUD 功能所需的代码'
- en: 'Copy the following code into the, `path/to/codeigniter/application/controllers/users.php`
    file:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `path/to/codeigniter/application/controllers/users.php` 文件中：
- en: '[PRE1]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Copy the following code into the, `path/to/codeigniter/application/models/users_model.php`
    file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `path/to/codeigniter/application/models/users_model.php` 文件中：
- en: '[PRE2]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Copy the following code into the, `path/to/codeigniter/application/views/users/view_all_users.php`
    file:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `path/to/codeigniter/application/views/users/view_all_users.php` 文件中：
- en: '[PRE3]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is fairly standard stuff and there's nothing complicated going on. We have
    a controller running the show, which loads some useful helpers to provide support
    with functions such as `redirect()`, other security functions, and the `Users_model`
    in its constructor. `public function index()` redirects to `public function view_users()`,
    which in turn connects to the, `get_all_users()`function in the, `Users_model
    model`, using the, `$this->Users_model->get_all_users()`syntax to return an Active
    Record result set. This result set is then passed to the, `users/view_all_users
    view`, where it is displayed in a `foreach` loop in a table. See...I told you
    it was simple!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当标准，没有复杂的事情发生。我们有一个控制器正在运行显示，它加载了一些有用的辅助函数来支持诸如`redirect()`、其他安全函数以及构造函数中的`Users_model`等功能。`public
    function index()`将重定向到`public function view_users()`，然后通过`$this->Users_model->get_all_users()`语法连接到`Users_model`模型中的`get_all_users()`函数，以返回一个活动记录结果集。然后，这个结果集被传递到`users/view_all_users`视图，在其中通过`foreach`循环在表格中显示。看...我告诉过你这是多么简单！
- en: Creating users
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户
- en: You will always need a method to create users yourself from within an application,
    and will need to; manually enter their data rather than the user entering the
    data themselves. We're going to build functionality to allow you to create users
    one by one.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你总是需要一种方法从应用程序内部创建用户，并且需要手动输入他们的数据，而不是让用户自己输入数据。我们将构建允许你逐个创建用户的功能。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll need to create one file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个文件：
- en: '`path/to/codeigniter/application/views/users/new_user.php`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/new_user.php`'
- en: 'And amend the following two files:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 并且修改以下两个文件：
- en: '`path/to/codeigniter/application/controllers/users.php`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/controllers/users.php`'
- en: '`path/to/codeigniter/application/models/users_model.php`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/models/users_model.php`'
- en: 'Copy the following code into the, `path/to/codeigniter/application/views/users/new_user.php`
    file:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到`path/to/codeigniter/application/views/users/new_user.php`文件中：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Amend the, `path/to/codeigniter/application/controllers/users.php` file, with
    the following code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`path/to/codeigniter/application/controllers/users.php`文件，添加以下代码：
- en: '[PRE5]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Amend the, `path/to/codeigniter/application/models/users_model.php` file, with
    the following code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`path/to/codeigniter/application/models/users_model.php`文件，添加以下代码：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There's a little more going on here than with the preceding `view_users` code,
    but it's still simple and straightforward. `public function new_user()` performs
    several functions, such as loading the view file, to validating any data inputted
    after submission, and displaying a view.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里发生的事情比前面的`view_users`代码要稍微复杂一些，但仍然简单直接。`public function new_user()`执行多个功能，例如加载视图文件、验证提交后输入的任何数据，以及显示视图。
- en: If `public function new_user()` is being called for the first time (that is,
    it is not being called by a form submission), then the validation check (`$this->form_validation->run()`)
    will equal `FALSE` and the code within the parentheses will be executed. In this
    case, the code will load the, `cust/new_user` view.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`public function new_user()`是第一次被调用（即，它不是由表单提交调用的），那么验证检查（`$this->form_validation->run()`）将等于`FALSE`，并且括号内的代码将被执行。在这种情况下，代码将加载`cust/new_user`视图。
- en: 'However, if the function is loaded as the result of a form submission, then
    CodeIgniter will begin checking the user input. The first line of the function
    loads the necessary library to enable checking the user''s input: `$this->library(''form_validation'')`,
    and our error delimiters are set with the function, `set_error_deimiters()`. Each
    item in the form is then checked against the criteria we specify. A full list
    of validation criteria options are available at: [http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html](http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果函数是作为表单提交的结果加载的，那么CodeIgniter将开始检查用户输入。函数的第一行加载必要的库以启用检查用户的输入：`$this->library('form_validation')`，并且我们的错误分隔符通过函数`set_error_deimiters()`设置。然后，表单中的每个项目都会与我们指定的标准进行核对。完整的验证标准选项列表可在：[http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html](http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html)找到
- en: We will also discuss form validation in greater detail in [Chapter 5](ch05.html
    "Chapter 5. Managing Data In and Out"), *Managing Data In and Out*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在[第5章](ch05.html "第5章。管理输入和输出")*管理输入和输出*中更详细地讨论表单验证。
- en: If validation isn't passed (the input from the user didn't meet the requirements
    we set), then `$this->form_validation->run()` will return `FALSE` and the form
    will be displayed again. The form elements in the view are able to display the
    user's input (so they don't have to re-enter everything from scratch).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证未通过（用户的输入未满足我们设定的要求），则 `$this->form_validation->run()` 将返回 `FALSE`，表单将再次显示。视图中的表单元素能够显示用户的输入（因此他们不需要从头开始重新输入一切）。
- en: 'Once validation is passed (`$this->form_validation->run()` returns `TRUE`),
    then we''ll package up the input into an array: `$data`. As we''re using Active
    Record to interact with the database, the keys of the `$data` array must match
    the column names of our database table.The `$data` array is then sent to the `Users_model`
    for writing to the database using the syntax: `$this->Users_model->get_all_users()`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦验证通过（`$this->form_validation->run()` 返回 `TRUE`），然后我们将输入打包成一个数组：`$data`。由于我们使用
    Active Record 与数据库交互，`$data` 数组的键必须与我们的数据库表列名匹配。然后，`$data` 数组被发送到 `Users_model`
    以使用以下语法写入数据库：`$this->Users_model->get_all_users()`。
- en: Editing users
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑用户
- en: 'You will always need some method to edit users yourself from within an application.
    In this section, we will look at creating functionality to do just that: to update
    and edit user details.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终需要一些方法来从应用程序内部自行编辑用户。在本节中，我们将查看创建执行此操作的功能：更新和编辑用户详细信息。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We''ll need to create one file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个文件：
- en: '`path/to/codeigniter/application/views/users/edit_user.php`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/edit_user.php`'
- en: 'And amend the following two files:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 修改以下两个文件：
- en: '`path/to/codeigniter/application/controllers/users.php`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/controllers/users.php`'
- en: '`path/to/codeigniter/application/models/users_model.php`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/models/users_model.php`'
- en: 'Copy the following code to the, `path/to/codeigniter/application/views/users/edit_user.php`
    file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `path/to/codeigniter/application/views/users/edit_user.php` 文件：
- en: '[PRE7]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Amend the, `path/to/codeigniter/application/controllers/users.php` file, with
    the following code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `path/to/codeigniter/application/controllers/users.php` 文件，使用以下代码：
- en: '[PRE8]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Amend the, `path/to/codeigniter/application/models/users_model.php` file, with
    the following code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `path/to/codeigniter/application/models/users_model.php` 文件，使用以下代码：
- en: '[PRE9]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is similar functionality to creating a new user (mentioned earlier), but
    instead of writing a row to the users table, we're removing a row based on the
    user's primary key.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这与创建新用户（前面提到过）的功能类似，但不同之处在于，我们不是向用户表写入一行，而是基于用户的唯一键删除一行。
- en: First we'll need to grab the user's ID. At this point, the user's ID is probably
    coming from an URL, but may also be coming from a post array (for example, if
    returned `FALSE`). The following code works out how the `$id` variable is coming
    in (either post or URL), and stores it in the `$id` variable ready for later processing:.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要获取用户的 ID。此时，用户的 ID 可能来自 URL，但也可能来自 post 数组（例如，如果返回 `FALSE`）。以下代码确定 `$id`
    变量是如何进入的（无论是 post 还是 URL），并将其存储在 `$id` 变量中，以便稍后处理：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We then validate the users edited data—if the data passes validation we package
    up the incoming form data into an associative array (called `$data`). We use the
    array keys as a mapper to the column names in our database—that is to say that
    the keys in the array match the database column—stake a look at the following
    code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后验证编辑后的用户数据——如果数据通过验证，我们将将传入的表单数据打包成一个关联数组（称为 `$data`）。我们使用数组键作为映射到我们数据库列名的映射器——也就是说，数组中的键与数据库列匹配——请查看以下代码：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see that the keys of the associative array match the column names in
    the database table; so the key `first_name` in the array will map to `first_name`
    column in the table. The key `last_name` in the array will map to the `last_name`
    column in the table.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到关联数组的键与数据库表中的列名匹配；因此，数组中的 `first_name` 键将映射到表中的 `first_name` 列。数组中的 `last_name`
    键将映射到表中的 `last_name` 列。
- en: Next we write the users edited information to the database. We do this by sending
    the `$data` array we just created (along with the `$id` variable) to our `Users_model`
    function `process_update_user()`, which will perform the task of updating.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将用户编辑后的信息写入数据库。我们通过将刚刚创建的 `$data` 数组（以及 `$id` 变量）发送到我们的 `Users_model`
    函数 `process_update_user()` 来完成此操作，该函数将执行更新任务。
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Deleting users
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除用户
- en: It's always a good idea to be able to delete users from an interface rather
    than removing them from the database directly or not deleting them at all. We're
    going to create a CRUD interface to allow us to remove users from the database.
    Here's how to do it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 总是有一个好主意能够从界面上删除用户，而不是直接从数据库中删除他们，或者根本不删除他们。我们将创建一个CRUD界面，以便我们可以从数据库中删除用户。下面是如何做到这一点。
- en: How to do it…
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We''ll need to create one file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个文件：
- en: '`path/to/codeigniter/application/views/users/delete_user.php`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/users/delete_user.php`'
- en: 'Add the following code into the, `views/users/delete_user.php` file:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`views/users/delete_user.php`文件中：
- en: '[PRE13]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Amend the following two files:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改以下两个文件：
- en: '`path/to/codeigniter/application/controllers/users.php`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/controllers/users.php`'
- en: '`path/to/codeigniter/application/models/users_model.php`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/models/users_model.php`'
- en: 'Amend the, `controllers/users.php` file, with the following code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`controllers/users.php`文件，添加以下代码：
- en: '[PRE14]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Amend the, `controllers/users_model.php` file, with the following code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`controllers/users_model.php`文件，添加以下代码：
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is similar functionality to creating a new user (explained earlier), but
    instead of writing a row to the users table, we're removing a row based on the
    user's primary key.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这与创建新用户（前面已解释）的功能类似，但不同之处在于，我们不是向用户表写入一行，而是根据用户的唯一键删除一行。
- en: First, we'll need to grab the user's ID. At this point the user's ID is probably
    coming from an URL, but may also be coming from the post array.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要获取用户的ID。在这个时候，用户的ID可能来自URL，但也可能来自POST数组。
- en: 'The following code works out how the `$id` variable is coming in (either from
    post or by URL) and stores it in the `$id` variable ready for processing later:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码确定了`$id`变量是如何进入的（无论是通过POST还是通过URL），并将其存储在`$id`变量中，以便稍后处理：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If `public function delete_user()` is being called for the first time (that
    is, it is not being called by a form submission), then the user's primary key
    is passed to `public function delete_user()` from within the URL. It is picked
    up by `$this->uri->segment(3)`and is sent to the, `users/delete_user.php` view
    by assigning it in `$this->load->view('user/delete_user', $data['id])`. Within
    the view, the `$id` value is written as a hidden HTML form the element.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`public function delete_user()`是第一次被调用（即，它不是由表单提交调用的），那么用户的唯一键将从URL传递给`public
    function delete_user()`。它通过`$this->uri->segment(3)`被拾取，并通过将`$data['id']`分配给`$this->load->view('user/delete_user',
    $data['id'])`发送到`users/delete_user.php`视图。在视图中，`$id`值被写入一个隐藏的HTML表单元素。
- en: It is necessary to assign the user's ID as a hidden element in the form because
    when the form is submitted, `public function delete_user()` will require the ID
    of the user. A the form is being submitted rather than a first load, the ID will
    not be available from `$this->uri->segment(3)`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 必须将用户的ID作为隐藏元素分配到表单中，因为当表单提交时，`public function delete_user()`将需要用户的ID。如果表单是提交而不是首次加载，则ID将无法从`$this->uri->segment(3)`中获取。
- en: '`public function delete_user()` performs several functions similar to `public
    function new_user()`. These are loading the view file, validating any data inputted
    after submission, and displaying a view.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`public function delete_user()`执行了与`public function new_user()`类似的多项功能。这些功能包括加载视图文件、验证提交后的任何数据输入，并显示视图。'
- en: 'If `public function delete_user()` is being called as the result of a form
    submission, CodeIgniter will begin checking and validating the user input; in
    this case, submitted input consists only of the users ID, which is written as
    a hidden form element in the view. The first line of the function loads the necessary
    library to enable checking the user''s input: `$this->library(''form_validation'')`,
    and our error delimiters are set with the function, `set_error_deimiters()`. The
    user ID is then checked against the criteria we specify. A full list of validation
    criteria options are available at:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`public function delete_user()`是作为表单提交的结果被调用的，CodeIgniter将开始检查和验证用户输入；在这种情况下，提交的输入仅包括用户ID，它作为隐藏表单元素在视图中写入。函数的第一行加载必要的库以启用检查用户输入：`$this->library('form_validation')`，并且我们的错误定界符通过函数`set_error_deimiters()`设置。然后，用户ID将与我们指定的标准进行核对。完整的验证标准选项列表可在以下位置找到：
- en: '[http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html](http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html).
    We will also discuss form validation in greater detail in [Chapter 5](ch05.html
    "Chapter 5. Managing Data In and Out"), *Managing Data In and Out*.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html](http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html)。我们还将更详细地讨论表单验证，见[第5章](ch05.html
    "第5章。管理输入和输出")，*管理输入和输出*。'
- en: If validation isn't passed (the input from the user didn't meet the requirements
    we set), then `$this->form_validation->run()` will return `FALSE`, and the form
    will be displayed again.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证未通过（用户的输入没有满足我们设定的要求），那么`$this->form_validation->run()`将返回`FALSE`，表单将再次显示。
- en: 'Once validation is passed (`$this->form_validation->run()` returns `TRUE`),
    then we''ll package up the input into an array: `$data`. As we''re using Active
    Record to interact with the database, the keys of the `$data` array must match
    the column names of our database table.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦验证通过（`$this->form_validation->run()`返回`TRUE`），然后我们将输入打包到一个数组中：`$data`。由于我们使用Active
    Record与数据库交互，`$data`数组的键必须匹配我们数据库表的列名。
- en: 'The `$data` array is then sent to the `Users_model` for deletion from the database
    using the syntax: `$this->Users_model->delete_user($id)`.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下语法将`$data`数组发送到`Users_model`以从数据库中删除用户：`$this->Users_model->delete_user($id)`。
- en: Generating passwords with CodeIgniter
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CodeIgniter生成密码
- en: There are two ways to explain this. As this is a recipe book, I'm going to give
    you the structure for a user to register (part of this process is creating a hash
    from the password the user will provide) and also the signin form (part of this
    process is to validate a password against a hash). But I'm aware that you won't
    necessarily need all the following files, the lines which focus on password hashing
    in the following examples. This way, you can quickly see how the process works
    and apply it to your situation.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以解释这一点。由于这是一本食谱书，我将给出用户注册的结构（这个过程的一部分是从用户提供的密码创建哈希），以及登录表单（这个过程的一部分是验证密码与哈希）。但我意识到您可能不需要所有以下文件，以下示例中专注于密码哈希的行。这样，您可以快速了解这个过程是如何工作的，并将其应用于您的情况。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, let''s make the database schema to support the recipe. If you have your
    own table ready and are just looking for the hashing code, you can probably skip
    this part. Otherwise, copy the following code into your database:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建数据库模式以支持食谱。如果您已经有了自己的表并且只是寻找哈希代码，您可能可以跳过这部分。否则，将以下代码复制到您的数据库中：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit h
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问
- en: 'The register table description is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表描述如下：
- en: '| Item name | Attributes | Description |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 项目名称 | 属性 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `user_id` | `INTEGER(11)` | Table primary key |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `user_id` | `INTEGER(11)` | 表的主键 |'
- en: '| `user_first_name` | `VARCHAR(125)` | The user''s first name |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `user_first_name` | `VARCHAR(125)` | 用户的姓名 |'
- en: '| `user_last_name` | `VARCHAR(125)` | The user''s last name |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `user_last_name` | `VARCHAR(125)` | 用户姓氏 |'
- en: '| `user_email` | `VARCHAR(255)` | The user''s e-mail address, for example,
    `<[name@example.org](mailto:name@example.org)>` |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `user_email` | `VARCHAR(255)` | 用户的电子邮件地址，例如，`<name@example.org>` |'
- en: '| `user_hash` | `TEXT` | The hash of their password generated by `$this->encrypt->sha1($string_to_hash
    [, $key])` |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `user_hash` | `TEXT` | 由`$this->encrypt->sha1($string_to_hash [, $key])`生成的密码哈希
    |'
- en: You'll also have to create a sessions table and ensure that the config file
    is set up to handle database stored sessions. For instructions on how to do that,
    see
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须创建一个会话表，并确保配置文件已设置以处理数据库存储的会话。有关如何操作的说明，请参阅
- en: 'That''s the database done! We''re going to use the CodeIgniter **encrypt**
    library to do the heavy lifting of hashing the password for us, specifically,
    `$this->encrypt->sha1($string_to_hash [, $key])`, where `$key` is optional. There
    are a few things we need to set up first.You''ll need to decide on the encryption
    key you want to use: this can either be the encryption key that you''ve set in
    `$config[''encryption_key'']` in `config.php`, or you can pass a new key as a
    second parameter to CodeIgniter. The presence of this second parameter overrides
    the value set in `$config[''encryption_key'']`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库设置完成！我们将使用 CodeIgniter 的 **encrypt** 库来为我们处理密码哈希的重负载，具体来说，`$this->encrypt->sha1($string_to_hash
    [, $key])`，其中 `$key` 是可选的。我们首先需要设置一些事情。您需要决定要使用的加密密钥：这可以是您在 `config.php` 中的 `$config['encryption_key']`
    中设置的加密密钥，或者您可以将新密钥作为第二个参数传递给 CodeIgniter。第二个参数的存在会覆盖 `$config['encryption_key']`
    中设置的值。
- en: In the following recipe, we are using the value in `$config['encryption_key']`
    to serve as our encryption key; as such, we won't be passing a second parameter.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的菜谱中，我们使用 `$config['encryption_key']` 中的值作为我们的加密密钥；因此，我们不会传递第二个参数。
- en: Tip
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When creating a key, try not to use just a single word as this may be cracked
    using a rainbow table; instead use a fairly long string with random alphanumeric
    characters.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建密钥时，尽量不要只使用单个单词，因为这可能会被彩虹表破解；相反，使用一个相当长的随机字母数字字符串。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we''re going to create the following seven files:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建以下七个文件：
- en: '`/path/to/codeigniter/application/controllers/register.php`: This file contains
    a form allowing the user to sign up, and a record is then added to the database
    table (SQL in the *Getting ready* section)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/register.php`: 此文件包含一个允许用户注册的表单，然后记录被添加到数据库表（在
    *准备阶段* 部分的 SQL）'
- en: '`/path/to/codeigniter/application/models/register_model.php`: This file interacts
    with the database for the controller'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/register_model.php`: 此文件与控制器交互以与数据库进行交互'
- en: '`/path/to/codeigniter/application/views/register/register.php`: This file is
    for the registration form'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/register/register.php`: 此文件用于注册表单'
- en: '`/path/to/codeigniter/application/controllers/signin.php`: This file handles
    the login process, including comparing the password against the hash'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/signin.php`: 此文件处理登录过程，包括将密码与哈希值进行比较'
- en: '`/path/to/codeigniter/application/models/signin_model.php`: This file interacts
    with the database for the controller'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/signin_model.php`: 此文件与控制器交互以与数据库进行交互'
- en: '`/path/to/codeigniter/application/views/signin/signin.php`: This file is for
    the signin form'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/signin/signin.php`: 此文件用于登录表单'
- en: '`/path/to/codeigniter/application/views/signin/loggedin.php`: This file presents
    a page indicating a successful sign-in'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/signin/loggedin.php`: 此文件显示一个表示成功登录的页面'
- en: 'Copy the following code into the, `/path/to/codeigniter/application/controllers/register.php`
    file:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `/path/to/codeigniter/application/controllers/register.php` 文件中：
- en: '[PRE18]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Copy the following code into the, `/path/to/codeigniter/application/models/register_model.php`
    file:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `/path/to/codeigniter/application/models/register_model.php` 文件中：
- en: '[PRE19]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Copy the following code into the, `/path/to/codeigniter/application/views/register/register.php`
    file:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `/path/to/codeigniter/application/views/register/register.php` 文件中：
- en: '[PRE20]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Copy the following code in to the, `/path/to/codeigniter/application/controllers/signin.php`
    file:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `/path/to/codeigniter/application/controllers/signin.php` 文件中：
- en: '[PRE21]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Copy the following code in to the, `/path/to/codeigniter/application/models/signin_model.php`
    file:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `/path/to/codeigniter/application/models/signin_model.php` 文件中：
- en: '[PRE22]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then copy the following code in to the, `/path/to/codeigniter/application/views/signin/signin.php`
    file:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将以下代码复制到 `/path/to/codeigniter/application/views/signin/signin.php` 文件中：
- en: '[PRE23]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then copy the following code in to the, `/path/to/codeigniter/application/views/signin/loggedin.php`
    file:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将以下代码复制到 `/path/to/codeigniter/application/views/signin/loggedin.php` 文件中：
- en: '[PRE24]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Okay, there's a lot going on in this example but it's actually fairly simple.
    Take a look at the preceding code again—specifically the lines which are highlighted
    as these are the lines that are password specific. The files created in the preceding
    section show the creation of a user and the logging in of that user. Of course,
    your code will be different; but let's concentrate on those highlighted lines.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这个例子中有很多内容，但实际上相当简单。再次看看前面的代码——特别是那些被突出显示的行，因为这些行是密码特定的。前面章节中创建的文件显示了创建用户和登录该用户的过程。当然，你的代码会有所不同；但让我们专注于那些突出显示的行。
- en: They show the code that performs the hashing and comparison of passwords (a
    concise version can be found in the following recipe).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 他们展示了执行密码哈希和比较的代码（一个简化的版本可以在下面的菜谱中找到）。
- en: 'Firstly, let''s look at the register user process. The register controller
    accepts user-submitted information from the `/path/to/codeigniter/application/views/register/register.php`
    view. Upon successfully passing the following validation line:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看注册用户的过程。注册控制器从 `/path/to/codeigniter/application/views/register/register.php`
    视图中接受用户提交的信息。在成功通过以下验证行后：
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: will generate a hashed value using the password the user supplied, this hashed
    value is stored in the, `$hash` variable (obvious huh?).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用用户提供的密码生成一个哈希值，这个哈希值存储在 `$hash` 变量中（很明显吧？）。
- en: '`$hash` is then added to the `$data` array for insertion into the database
    as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将 `$hash` 添加到 `$data` 数组中，以便将其插入数据库，如下所示：
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now let''s take a look at the sign-in process. `public function login()` accepts
    the e-mail address and password from the user (from the, `/path/to/codeigniter/application/views/signin/signin.php`
    view), and upon successfully passing validation, we look up the user-supplied
    e-mail address in the register table as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来了解一下登录过程。`public function login()` 函数接收用户提供的电子邮件地址和密码（来自 `/path/to/codeigniter/application/views/signin/signin.php`
    视图），在成功通过验证后，我们按照以下方式在注册表中查找用户提供的电子邮件地址：
- en: '[PRE27]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If the e-mail exists, we generate a hash from the user-supplied password. This
    process is the same as the functionality found in the registration process as
    follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电子邮件存在，我们将从用户提供的密码生成一个哈希值。这个过程与注册过程中的功能相同，如下所示：
- en: '[PRE28]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, take a look at the highlighted line in the preceding code. We're comparing
    the hash we generated from the user-supplied password against `user_hash` in the
    record we pulled from the register table. If the two hashes do not match, then
    the user must not have supplied the correct password, so we send them back to
    the signin form and wait for another attempt. However, if the two hashes do match,
    then the user must have supplied the correct password, so we'll start a session
    for them and redirect them to `public function loggedin()`.In this case, it is
    a brief message, indicating that they are successfully logged in. However, in
    your application, this would be some sort of password protected member area, perhaps
    a dashboard.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看前面代码中突出显示的行。我们正在将用户提供的密码生成的哈希值与从注册表中提取的记录中的 `user_hash` 进行比较。如果两个哈希值不匹配，那么用户可能没有提供正确的密码，因此我们将他们送回登录表单并等待另一次尝试。然而，如果两个哈希值匹配，那么用户必须已经提供了正确的密码，因此我们将为他们启动一个会话并将他们重定向到
    `public function loggedin()`。在这种情况下，这是一个简短的消息，表明他们已成功登录。然而，在你的应用程序中，这可能是某种受密码保护的会员区域，可能是仪表板。
- en: Generating passwords with CodeIgniter – the bare bones
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter 生成密码 – 简洁版
- en: Okay, this is just the bare bones process. If you want a full example, then
    the preceding recipe is for you. This recipe is for people who already have a
    create-user process, but wish to integrate some password protection into an existing
    process.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这只是一个简洁的过程。如果你想看一个完整的例子，那么前面的菜谱就是为你准备的。这个菜谱是为那些已经有创建用户过程，但希望将一些密码保护集成到现有过程中的用户准备的。
- en: How to do it...
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'If you don''t need the preceding recipe and only require the bare bones of
    hashing/comparing; please refer to the following steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不需要前面的菜谱，只需要哈希/比较的简洁版；请参考以下步骤：
- en: Generating a hash
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成哈希值
- en: 'To generate a hash, perform the following steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个哈希值，请执行以下步骤：
- en: 'Generate a hash with a key in `$config[''encryption_key'']` as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `$config['encryption_key']` 中的关键字生成哈希值，如下所示：
- en: '[PRE29]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Generate a hash with a key other than that in `$config[''encryption_key'']`
    as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用除 `$config['encryption_key']` 之外的关键字生成哈希值，如下所示：
- en: '[PRE30]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Tip
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In a production environment, replace the `$key` value (`This-is-the-key`) with
    a realistic value. Make it a long string of alphanumeric characters; the more
    random the better!
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生产环境中，将 `$key` 值（`This-is-the-key`）替换为真实的值。使其成为一个由字母数字字符组成的较长字符串；越随机越好！
- en: Comparing hashed values
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较哈希值
- en: 'The hash values are compared as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希值比较如下：
- en: '[PRE31]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '**Generating a hash with the $config[''encryption_key''] value**: First, we
    load the encrypt library with `$this->load->library(''encrypt'')`, then we call
    the `sha1` function in the encrypt library and pass to it the, `$text_to_be_hashed`
    variable. The key used to encrypt the `$text_to_be_hashed string`, comes from
    the value set in the config array item, `$config[''encryption_key'']`, in the
    `config.php` file. `$this->encrypt->sha1($text_to_be_hashed)` will return a string
    that we''ll store in the, `$hash` variable.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 $config[''encryption_key''] 值生成哈希**：首先，我们使用 `$this->load->library(''encrypt'')`
    加载加密库，然后调用加密库中的 `sha1` 函数，并将 `$text_to_be_hashed` 变量传递给它。用于加密 `$text_to_be_hashed`
    字符串的密钥来自配置数组项 `$config[''encryption_key'']`，在 `config.php` 文件中设置。`$this->encrypt->sha1($text_to_be_hashed)`
    将返回一个字符串，我们将将其存储在 `$hash` 变量中。'
- en: '**Generating a hash without the $config[''encryption_key''] value (that is
    adding a second parameter)**: First, we load the encrypt library with `$this->load->library(''encrypt'')`,
    then we call the `sha1` function in the encrypt library and pass to it the, `$text_to_be_hashed`,
    and also an encryption key as a second parameter:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**不使用 $config[''encryption_key''] 值生成哈希（即添加第二个参数）**：首先，我们使用 `$this->load->library(''encrypt'')`
    加载加密库，然后调用加密库中的 `sha1` 函数，并将 `$text_to_be_hashed` 和一个加密密钥作为第二个参数传递给它：'
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Adding this key as a second parameter (`$key`) will cause CodeIgniter to use
    that key rather than any value set in `$config['encryption_key']`. `$this->encrypt->sha1($text_to_be_hashed,
    $key)` will return a string that we'll store in the variable, `$hash`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 将此密钥作为第二个参数（`$key`）添加将导致 CodeIgniter 使用该密钥而不是 `$config['encryption_key']` 中设置的任何值。`$this->encrypt->sha1($text_to_be_hashed,
    $key)` 将返回一个字符串，我们将将其存储在变量 `$hash` 中。
- en: After loading the encryption support library with `$this->load->library('encrypt')`,
    a string of text (in this case, in the, `$password` variable) is passed to the
    `sha1` function in the encrypt library, storing its product in the, `$hash` variable.
    We can now use this variable to compare a stored value, such as from a database
    select result. In this example, we compare `$hash` with the value in `$row->user_hash`.
    If they do not match, we send `redirect()` to the login screen, but you could
    easily code any action, such as logging the event or displaying a message rather
    than a redirect. If the `$hash` and `$row->user_hash` values do match, then you
    could perform an action based on this confirmation; an example would be logging
    the user in.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `$this->load->library('encrypt')` 加载加密支持库后，一个文本字符串（在这种情况下，在 `$password`
    变量中）被传递到加密库中的 `sha1` 函数，并将其结果存储在 `$hash` 变量中。我们现在可以使用这个变量来比较存储的值，例如来自数据库选择结果。在这个例子中，我们比较
    `$hash` 与 `$row->user_hash` 中的值。如果它们不匹配，我们将发送 `redirect()` 到登录屏幕，但你可以轻松地编写任何操作，例如记录事件或显示消息而不是重定向。如果
    `$hash` 和 `$row->user_hash` 的值匹配，那么你可以根据这个确认执行操作；一个例子就是登录用户。
- en: Forgot password? – resetting passwords with CodeIgniter
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忘记密码？ – 使用 CodeIgniter 重置密码
- en: Everyone forgets their password from time to time and it's likely that a user
    may wish to be reminded of their password. However, we cannot send them their
    password as we don't have it; we are only storing a hash of it—the password isn't
    actually stored in the database. The user will have to reset their password; generating
    a new hash as they do so.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人有时都会忘记他们的密码，用户可能希望被提醒他们的密码。然而，我们不能发送他们的密码，因为我们没有它；我们只存储它的哈希值——密码实际上并没有存储在数据库中。用户将不得不重置他们的密码；在这样做时生成一个新的哈希值。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We want to be sure that a user has genuinely requested a new password, therefore,
    we''re going to add a column in the register table to support this. The new column
    called `forgot_password` will contain a code which we will generate when a new
    password is requested; and we will check that code when the user is redirected
    back to the site from a url in an e-mail, which we will also send to them. Copy
    the following code into your database:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要确保用户确实请求了新的密码，因此，我们将在注册表中添加一个列来支持这一点。新列名为 `forgot_password`，它将包含一个代码，当请求新密码时我们将生成这个代码；当用户从电子邮件中的
    URL 被重定向回网站时，我们将检查这个代码，我们也会将这个电子邮件发送给他们。将以下代码复制到您的数据库中：
- en: '[PRE33]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following two files:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下两个文件：
- en: '`/path/to/codeigniter/application/views/signin/forgot_password.php`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/signin/forgot_password.php`'
- en: '`/path/to/codeigniter/application/views/signin/new_password.php`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/signin/new_password.php`'
- en: 'And amend the following three files:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 并且修改以下三个文件：
- en: '`/path/to/codeigniter/application/controllers/signin.php`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/signin.php`'
- en: '`/path/to/codeigniter/application/models/signin_model.php`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/signin_model.php`'
- en: '`/path/to/codeigniter/application/views/signin/signin.php`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/signin/signin.php`'
- en: 'Copy the following code into `/path/to/codeigniter/application/views/signin/forgot_password.php`:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到`/path/to/codeigniter/application/views/signin/forgot_password.php`文件中：
- en: '[PRE34]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Copy the following code into `/path/to/codeigniter/application/views/signin/new_password.php`:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到`/path/to/codeigniter/application/views/signin/new_password.php`文件中：
- en: '[PRE35]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Amend `/path/to/codeigniter/application/controllers/signin.php`, adding the
    following code:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`/path/to/codeigniter/application/controllers/signin.php`文件，添加以下代码：
- en: '[PRE36]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, amend `/path/to/codeigniter/application/models/signin_model.php`, adding
    the following code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，修改`/path/to/codeigniter/application/models/signin_model.php`文件，添加以下代码：
- en: '[PRE37]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then, amend `/path/to/codeigniter/application/views/signin.php`, adding the
    following code:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，修改`/path/to/codeigniter/application/views/signin.php`文件，添加以下代码：
- en: '[PRE38]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Tip
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'We''re only changing one line from this file: the highlighted line is an `anchor()`
    statement, which displays a link to the forgot password form.'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们只更改了此文件中的一行：高亮显示的行是一个`anchor()`语句，它显示了一个指向忘记密码表单的链接。
- en: How it works...
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Firstly, take a look at the following flowchart:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，看一下下面的流程图：
- en: '![How it works...](img/2308OS_02_01.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2308OS_02_01.jpg)'
- en: Now, let's imagine that a user has forgotten their password and wishes to be
    reminded of it. The user will click on the forgot password link in the amended
    signin form (`/path/to/codeigniter/application/views/signin/signin.php`), which
    redirects them to `public function forgot_password()` in the signin controller.
    The `forgot_password()` function immediately displays the, `/path/to/codeigniter/application/views/signin/forgot_password.php
    view`. The user enters an e-mail address and submits the form using the **Submit**
    button.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设一个用户忘记了他们的密码并希望被提醒。用户将点击修改后的登录表单中的忘记密码链接（`/path/to/codeigniter/application/views/signin/signin.php`），这将他们重定向到签到控制器中的`public
    function forgot_password()`。`forgot_password()`函数立即显示`/path/to/codeigniter/application/views/signin/forgot_password.php`视图。用户输入电子邮件地址并使用**提交**按钮提交表单。
- en: Next the `forgot_password()` function will validate the input supplied by the
    user and if that input passes the validation rules the `forgot_password()` function
    will look in the database to see if a row exists in the register table whose e-mail
    matches the supplied e-mail in the form submission. If a match is found a tracking
    code (this is used for the hidden form element in the form view file) is generated
    and assigned to the `$data` array. This code is then written to the row in the
    database we just looked for, and an e-mail is sent to the e-mail address associated
    with the account (or row). In this case we're using the PHPs `mail()` function
    rather than CodeIgniter's mail functionality; you can of course use CodeIgniter
    to send the e-mail rather than PHP `mail()`—we discuss sending e-mails in CodeIgniter
    in [Chapter 4](ch04.html "Chapter 4. Email, HTML Table, and Text Libraries"),
    *Email, HTML Table, and Text Libraries*, anyway—back to the story.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`forgot_password()`函数将验证用户提供的输入，如果该输入通过了验证规则，则`forgot_password()`函数将在数据库中查找是否存在一个在注册表中的行，其电子邮件与表单提交中提供的电子邮件匹配。如果找到匹配项，则生成一个跟踪代码（这用于表单视图文件中的隐藏表单元素），并将其分配给`$data`数组。然后，将此代码写入我们刚刚查找的数据库行中，并向与该账户（或行）关联的电子邮件地址发送电子邮件。在这种情况下，我们使用PHP的`mail()`函数而不是CodeIgniter的邮件功能；当然，您当然可以使用CodeIgniter发送电子邮件而不是PHP的`mail()`函数——无论如何，我们将在[第4章](ch04.html
    "第4章。电子邮件、HTML表格和文本库")中讨论如何在CodeIgniter中发送电子邮件，*电子邮件、HTML表格和文本库*——回到故事中。
- en: Next, it's over to our user. They should look in their e-mail inbox for the
    e-mail we've just sent them, if they do they'll see a link in that e-mail directing
    them back to our system and to `public function new_password()`. Clicking on that
    link will open the, `/path/to/codeigniter/application/views/signin/new_password.php
    view`, which will display the reset password form.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，轮到我们的用户了。他们应该在他们的电子邮件收件箱中查找我们刚刚发送给他们的电子邮件，如果他们找到了，他们会看到一封电子邮件中的链接，该链接将他们引导回我们的系统，并到`public
    function new_password()`。点击该链接将打开`/path/to/codeigniter/application/views/signin/new_password.php`视图，该视图将显示重置密码表单。
- en: Remember that the `$code` we parameter generated? `$code` was the third URL
    parameter and is now set as a hidden form element. The user enters their e-mail
    and password (twice to confirm) and clicks on **Submit**. The form then posts
    to `public function new_password()`, which validates for form.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们生成的`$code`吗？`$code`是第三个URL参数，现在被设置为隐藏表单元素。用户输入他们的电子邮件和密码（两次以确认）然后点击**提交**。表单随后提交到`public
    function new_password()`，该函数用于验证表单。
- en: Upon passing validation, the e-mail address and code are looked up in the register
    table. If found (and they match), a new `$hash` array is made and saved to their
    record in the database. Finally, they're redirected to the signin form, where
    they can log()in using their new password.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 通过验证后，电子邮件地址和代码在注册表中查找。如果找到（并且它们匹配），就会创建一个新的`$hash`数组并将其保存到数据库中的记录中。最后，他们被重定向到登录表单，在那里他们可以使用新密码进行log()in。
