- en: Chapter 3. ActiveRecord, Model, and Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：ActiveRecord、模型和数据库
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting data from a database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库获取数据
- en: Defining and using multiple DB connections
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和使用多个DB连接
- en: Customizing the ActiveQuery class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义ActiveQuery类
- en: Processing model fields with AR event-like methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AR事件方法处理模型字段
- en: Automating timestamps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化时间戳
- en: Setting up an author automatically
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动设置作者
- en: Setting up a slug automatically
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动设置slug
- en: Transactions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务
- en: Replication and read-write splitting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制和读写分离
- en: Implementing single table inheritance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现单表继承
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to work with a database efficiently, when
    to use models and when not to, how to work with multiple databases, how to automatically
    preprocess Active Record fields, how to use transactions, and so on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何高效地与数据库工作，何时使用模型，何时不使用模型，如何与多个数据库工作，如何自动预处理Active Record字段，如何使用事务，等等。
- en: Getting data from a database
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库获取数据
- en: Most applications use databases today. Be it a small website or a social network,
    at least some parts are powered by databases.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，大多数应用程序都使用数据库。无论是小型网站还是社交网络，至少有一部分是由数据库驱动的。
- en: 'Yii introduces three ways to allow you to work with databases. They are as
    follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Yii介绍了三种方法来允许您与数据库工作。具体如下：
- en: Active Record
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Active Record
- en: Query Builder
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询构建器
- en: SQL via DAO
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过DAO使用SQL
- en: We will use all these methods to get data from the `film`, `film_actor`, and
    `actor` tables and show it in a list. Also, we will compare the execution time
    and memory usage to determine in which cases we should use these methods.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用所有这些方法从`film`、`film_actor`和`actor`表中获取数据，并在列表中显示。此外，我们还将比较执行时间和内存使用情况，以确定在哪些情况下应该使用这些方法。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的Composer包管理器创建一个新的应用程序，官方指南链接为[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: Download the Sakila database from [http://dev.mysql.com/doc/index-other.html](http://dev.mysql.com/doc/index-other.html).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://dev.mysql.com/doc/index-other.html](http://dev.mysql.com/doc/index-other.html)下载Sakila数据库。
- en: Execute the downloaded SQLs; first schema, then data.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行下载的SQL文件；首先执行模式，然后执行数据。
- en: Configure the DB connection in `config/main.php` to use the Sakila database.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config/main.php`中配置DB连接以使用Sakila数据库。
- en: Use Gii to create models for the actor and film tables.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii为actor和film表创建模型。
- en: How to do it…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create `app/controllers/DbController.php` as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`app/controllers/DbController.php`如下：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we have three actions corresponding to the three different methods of
    getting data from a database.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们有三个动作对应于从数据库获取数据的三个不同方法。
- en: After running the preceding `db/ar`, `db/query` and `db/sql` actions, you should
    get a tree showing 200 actors and 1,000 films they have acted in, as shown in
    the following screenshot:![How to do it…](img/image00373.jpeg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行前面的`db/ar`、`db/query`和`db/sql`动作之后，您应该得到一个显示200名演员和他们在其中出演的1,000部电影的树状图，如下截图所示：![如何做…](img/image00373.jpeg)
- en: 'At the bottom, there are statistics that give information about the memory
    usage and execution time. Absolute numbers can be different if you run this code,
    but the difference between the methods used should be about the same:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部，有一些统计信息提供了有关内存使用和执行时间的详细信息。如果您运行此代码，绝对数字可能会有所不同，但使用的方法之间的差异应该大致相同：
- en: '| Method | Memory usage (megabytes) | Execution time (seconds) |'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 方法 | 内存使用（兆字节） | 执行时间（秒） |'
- en: '| --- | --- | --- |'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Active Record | 21.4 | 2.398 |'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Active Record | 21.4 | 2.398 |'
- en: '| Query Builder | 28.3 | 0.477 |'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 查询构建器 | 28.3 | 0.477 |'
- en: '| SQL (DAO) | 27.6 | 0.481 |'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| SQL（DAO） | 27.6 | 0.481 |'
- en: How it works…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `actionAr` action method gets model instances using the Active Record approach.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`actionAr`动作方法使用Active Record方法获取模型实例。'
- en: We start with the `Actor` model generated with Gii to get all the actors, and
    specify `joinWith => 'films'` to get the corresponding films using a single query
    or eager loading through relation, which Gii builds for us from `InnoDB` table
    foreign keys. We then simply iterate over all the actors and for each actor, over
    each film. Then, for each item, we print its name.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 Gii 生成的 `Actor` 模型开始，以获取所有演员，并指定 `joinWith => 'films'` 以使用单个查询或通过关系预加载获取相应的电影，这些关系由
    Gii 从 `InnoDB` 表的外键为我们构建。然后，我们简单地遍历所有演员，并对每个演员及其每部电影进行遍历。然后，对于每个项目，我们打印其名称。
- en: The `actionQuery` function uses Query Builder. First, we create a query for
    the current DB connection with `\yii\db\Query`. We then add query parts one by
    one with `from`, `joinInner`, and `leftJoin`. These methods escape values, tables,
    and field names automatically. The `all()` function of `\yii\db\Query` returns
    an array of raw database rows. Each row is also an array, indexed with result
    field names. We pass the result to `renderRows`, which renders it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`actionQuery` 函数使用查询构建器。首先，我们使用 `\yii\db\Query` 为当前数据库连接创建查询。然后，我们使用 `from`、`joinInner`
    和 `leftJoin` 逐个添加查询部分。这些方法会自动转义值、表和字段名称。`\yii\db\Query` 的 `all()` 函数返回一个原始数据库行数组。每一行也是一个数组，使用结果字段名称作为索引。我们将结果传递给
    `renderRows`，它将其渲染。'
- en: 'With `actionSql`, we do the same, except that we pass SQL directly instead
    of adding its parts one by one. It''s worth mentioning that we should escape parameter
    values manually using `Yii::app()->db->quoteValue` before using them in the query
    string:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `actionSql`，我们做同样的事情，只是我们直接传递 SQL 而不是逐个添加其部分。值得注意的是，在使用查询字符串之前，我们应该使用 `Yii::app()->db->quoteValue`
    手动转义参数值：
- en: The `renderRows` method renders the Query Builder.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderRows` 方法渲染查询构建器。'
- en: The `renderRecords` method renders the active records.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderRecords` 方法渲染活动记录。'
- en: '| Method | Active Record | Query Builder | SQL (DAO) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | Active Record | 查询构建器 | SQL (DAO) |'
- en: '| --- | --- | --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Syntax | This will do SQL for you.Gii will generate models and relations
    for you.Works with models, completely OO-style, and a very clean API.Produces
    an array of properly nested models as the result. | Clean API, suitable for building
    query on the fly.Produces raw data arrays as the result. | Good for complex SQL.Manual
    values and keyword quoting.Not very suitable for building a query on the fly.Produces
    raw data arrays as the result. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 语法 | 这将为您生成 SQL。Gii 将为您生成模型和关系。与模型一起工作，完全面向对象风格，API 非常干净。结果生成正确嵌套的模型数组。 |
    清洁的 API，适合实时构建查询。结果生成原始数据数组。 | 适合复杂 SQL。手动值和关键字引用。不适合实时构建查询。结果生成原始数据数组。 |'
- en: '| Performance | Higher memory usage and execution time compared to SQL and
    Query Builder. | Okay. | Okay. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 性能 | 与 SQL 和查询构建器相比，内存使用量和执行时间更高。 | 正常。 | 正常。 |'
- en: '| Extra features | Quotes values and names automatically.Behaviors. Before/after
    hooks.Validation. Prototyping selects. | Quotes values and names automatically.
    | None. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 额外功能 | 自动引用值和名称。行为。前后钩子。验证。原型选择。 | 自动引用值和名称。 | 无。 |'
- en: '| Best for | Update, delete, and create actions for single models (the model
    gives a huge benefit when using with forms). | Working with large amount of data
    and building queries on the fly. | Complex queries you want to complete with pure
    SQL and have maximum possible performance. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 适用于 | 单个模型（模型与表单结合使用时提供巨大优势）的更新、删除和创建操作。 | 处理大量数据并在实时构建查询。 | 使用纯 SQL 完成复杂查询，并具有最大可能的性能。
    |'
- en: There's more...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'In order to learn more about working with databases in Yii, refer to the following
    resources:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何在 Yii 中与数据库一起工作，请参考以下资源：
- en: '[http://www.yiiframework.com/doc-2.0/guide-db-dao.html](http://www.yiiframework.com/doc-2.0/guide-db-dao.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-db-dao.html](http://www.yiiframework.com/doc-2.0/guide-db-dao.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-db-query-builder.html](http://www.yiiframework.com/doc-2.0/guide-db-query-builder.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-db-query-builder.html](http://www.yiiframework.com/doc-2.0/guide-db-query-builder.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-db-active-record.html](http://www.yiiframework.com/doc-2.0/guide-db-active-record.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-db-active-record.html](http://www.yiiframework.com/doc-2.0/guide-db-active-record.html)'
- en: Defining and using multiple DB connections
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义和使用多个数据库连接
- en: Multiple database connections are not used very often for new standalone web
    applications. However, when you are building an add-on application for an existing
    system, you will most probably need another database connection.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的独立Web应用程序中，多数据库连接并不常用。然而，当你为现有系统构建附加应用程序时，你很可能需要另一个数据库连接。
- en: From this recipe, you will learn how to define multiple DB connections and use
    them with DAO, Query Builder, and Active Record models.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个菜谱中，你将学习如何定义多个数据库连接，并使用它们与DAO、查询构建器和活动记录模型。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的应用程序，如官方指南[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)中所述。
- en: Create two MySQL databases named `db1` and `db2`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个名为`db1`和`db2`的MySQL数据库。
- en: 'Create a table named post in `db1`, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`db1`中创建一个名为`post`的表，如下所示：
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a table named `comment` in `db2`, as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`db2`中创建一个名为`comment`的表，如下所示：
- en: '[PRE2]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will start with configuring the DB connections. Open `config/main.php` and
    define a primary connection as described in the official guide:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从配置数据库连接开始。打开`config/main.php`，并按照官方指南定义一个主连接：
- en: '[PRE3]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Copy it, rename the `db` component to `db2`, and change the connection string
    accordingly. Also, you need to add the class name as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制它，将`db`组件重命名为`db2`，并相应地更改连接字符串。此外，你还需要添加类名如下：
- en: '[PRE4]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That is it. Now you have two database connections and you can use them with
    DAO and Query Builder, as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。现在你有了两个数据库连接，你可以使用它们与DAO和查询构建器，如下所示：
- en: '[PRE5]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, if we need to use Active Record models, we first need to create the Post
    and Comment models with Gii. You can select an appropriate connection for each
    model. Set the `db2` for database connection ID when you create the Comment model,
    as shown in the following screenshot:![How to do it...](img/image00375.jpeg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们需要使用活动记录模型，我们首先需要使用Gii创建Post和Comment模型。你可以为每个模型选择一个合适的连接。在创建Comment模型时，将数据库连接ID设置为`db2`，如下所示：![如何操作...](img/image00375.jpeg)
- en: 'Now you can use the `Comment` model as usual and create c`ontrollers/ DbController.php`,
    as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以像往常一样使用`Comment`模型，并创建`controllers/DbController.php`，如下所示：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run `db/index` multiple times and you should see records added to both databases,
    as shown in the following screenshot:![How to do it...](img/image00377.jpeg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多次运行`db/index`，你应该会看到记录被添加到两个数据库中，如下所示：![如何操作...](img/image00377.jpeg)
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In Yii, you can add and configure your own components through the configuration
    file. For nonstandard components such as `db2`, you have to specify the component
    class. Similarly, you can add `db3`, `db4`, or any other component, for example,
    `facebookApi`. The remaining array key/value pairs are assigned to the component's
    public properties, respectively.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，你可以通过配置文件添加和配置自己的组件。对于非标准组件，如`db2`，你必须指定组件类。同样，你可以添加`db3`、`db4`或任何其他组件，例如`facebookApi`。剩余的数组键/值对分别分配给组件的公共属性。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Depending on the RDBMS used, there are additional things we can do to make it
    easier to use multiple databases.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的RDBMS，我们可以做更多的事情来简化使用多个数据库的过程。
- en: Cross-database relations
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跨数据库关系
- en: 'If you are using MySQL, it is possible to create cross-database relations for
    your models. In order to do this, you should prefix the `Comment` model''s table
    name with the database name, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是MySQL，你可以为你的模型创建跨数据库关系。为了做到这一点，你应该在`Comment`模型表名前加上数据库名，如下所示：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, if you have a comments relation defined in the `Post` model relations
    method, you can use the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在`Post`模型的关系方法中定义了评论关系，你可以使用以下代码：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See also
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-db-dao.html#creating-db-connections](http://www.yiiframework.com/doc-2.0/guide-db-dao.html#creating-db-connections).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-db-dao.html#creating-db-connections](http://www.yiiframework.com/doc-2.0/guide-db-dao.html#creating-db-connections)。
- en: Customizing the ActiveQuery class
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义ActiveQuery类
- en: By default, all Active Record queries are supported by `yii\db\ActiveQuery`.
    To use a customized query class in an Active Record class, you should override
    the `yii\db\ActiveRecord::find()` method and return an instance of your customized
    query class.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有Active Record查询都由`yii\db\ActiveQuery`支持。要在Active Record类中使用自定义查询类，您应该重写`yii\db\ActiveRecord::find()`方法并返回您自定义查询类的实例。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的Composer包管理器创建一个新的应用程序，官方指南链接为[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Set up the database connection and create a table named `post`, as follows:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤设置数据库连接并创建一个名为`post`的表：
- en: '[PRE9]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Generate a `Post` model using Gii with an enabled **Generate ActiveQuery** option
    that generates the `PostQuery` class.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii生成带有已启用**生成ActiveQuery**选项的`Post`模型，这将生成`PostQuery`类。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add the following method to `models/PostQuery.php`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加到`models/PostQuery.php`中：
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'That is it. Now, we can use our model. Create `controllers/DbController.php`
    as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些了。现在，我们可以使用我们的模型。按照以下步骤创建`controllers/DbController.php`：
- en: '[PRE11]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, run `db/index` and you should get an output similar to the one shown in
    the following screenshot:![How to do it...](img/image00380.jpeg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行`db/index`，您应该得到一个类似于以下截图的输出：![如何操作...](img/image00380.jpeg)
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: We have rewritten the `find` method in the `Post` model and extended the ActiveQuery
    class. The `lang` method returns ActiveQuery with the specified language value.
    In order to support chained calls, `lang` returns the model instance by itself.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Post`模型中重写了`find`方法并扩展了ActiveQuery类。`lang`方法返回具有指定语言值的ActiveQuery。为了支持链式调用，`lang`方法返回模型实例本身。
- en: There's more…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: According to the Yii2 Guide, in Yii 1.1, there was a concept called scope. Scope
    is no longer directly supported in Yii 2.0, and you should use customized query
    classes and query methods to achieve the same goal.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Yii2指南，在Yii 1.1中有一个名为“范围”的概念。在Yii 2.0中，范围不再直接支持，您应该使用自定义查询类和查询方法来实现相同的目标。
- en: See also
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'For further information, refer to the following URLs:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多信息，请参考以下URL：
- en: '[http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#customizing-query-classes](http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#customizing-query-classes)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#customizing-query-classes](http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#customizing-query-classes)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-intro-upgrade-from-v1.html#active-record](http://www.yiiframework.com/doc-2.0/guide-intro-upgrade-from-v1.html#active-record)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-intro-upgrade-from-v1.html#active-record](http://www.yiiframework.com/doc-2.0/guide-intro-upgrade-from-v1.html#active-record)'
- en: Processing model fields with AR event-like methods
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AR事件方法处理模型字段
- en: Active Record implementation in Yii is very powerful and has many features.
    One of these features is the event-like methods, which you can use to preprocess
    model fields before putting them into the database or getting them from a database,
    as well as to delete data related to the model, and so on.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Yii中的Active Record实现非常强大，具有许多功能。其中之一是事件方法，您可以使用它来在将模型字段放入数据库或从数据库获取之前预处理模型字段，以及删除与模型相关的数据等。
- en: In this recipe, we will link all URLs in the post text and list all existing
    Active Record event-like methods.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将链接帖子文本中的所有URL并列出所有现有的Active Record事件方法。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的应用程序，如官方指南中所述，官方指南链接为[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Set up the database connection and create a table named `post`, as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤设置数据库连接并创建一个名为`post`的表：
- en: '[PRE12]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Generate the `post` model using Gii.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii生成`post`模型。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add the following method to `models/Post.php`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加到`models/Post.php`中：
- en: '[PRE13]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'That is it. Now, try saving a post containing a link. Create `controllers/TestController.php`
    as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些了。现在，尝试保存一个包含链接的帖子。按照以下步骤创建`controllers/TestController.php`：
- en: '[PRE14]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That is it. Now, run `test/index`. You should get the following result:![How
    to do it...](img/image00383.jpeg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些了。现在，运行 `test/index`。你应该得到以下结果：![如何操作...](img/image00383.jpeg)
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `beforeSave` method is implemented in the `ActiveRecord` class and executed
    just before saving a model. Using a regular expression, we replace everything
    that looks like a URL with a link that uses this URL and call the parent implementation,
    so that real events are raised properly. In order to prevent saving, you can return
    false.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeSave` 方法在 `ActiveRecord` 类中实现，并在保存模型之前执行。使用正则表达式，我们替换所有看起来像 URL 的内容，并用使用此
    URL 的链接替换，然后调用父实现，以确保正确地引发真实事件。为了防止保存，你可以返回 false。'
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#active-record-life-cycles](http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#active-record-life-cycles).
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#active-record-life-cycles](http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#active-record-life-cycles)。
- en: The *Working with events* recipe in [Chapter 1](part0015.xhtml#E9OE1-ae331331bc644dc9b658d3634f0748da
    "Chapter 1. Fundamentals"), *Fundamentals*
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 1 章](part0015.xhtml#E9OE1-ae331331bc644dc9b658d3634f0748da "第 1 章。基础")中的
    *使用事件* 配方，*基础*'
- en: The *Automating timestamps* recipe
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动化时间戳* 的配方'
- en: The *Setting up an author automatically* recipe
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动设置作者* 的配方'
- en: The *Setting up a slug automatically* recipe
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动设置缩略词* 的配方'
- en: Automating timestamps
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化时间戳
- en: For instance, we have a simple blog application. As in any blog, it has posts,
    comments, and so on. We would like to populate the timestamps during the create/update
    events for posts. Let us assume that our post model is named `BlogPost` model.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有一个简单的博客应用程序。就像任何博客一样，它有帖子、评论等。我们希望在创建/更新帖子事件期间填充时间戳。让我们假设我们的帖子模型名为 `BlogPost`
    模型。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的 Composer 包管理器创建一个新的应用程序，请参阅[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Set up the database connection and create a table named `blog_post`, as follows:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置数据库连接并创建一个名为 `blog_post` 的表，如下所示：
- en: '[PRE15]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Use Gii to create a model for the `blog_post` table.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Gii 为 `blog_post` 表创建一个模型。
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add the following method to `models/BlogPost.php`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加到 `models/BlogPost.php`：
- en: '[PRE16]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create `controllers/TestController.php` as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `controllers/TestController.php`，如下所示：
- en: '[PRE17]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: That is it. Now, run `test/index`. You should get the following result:![How
    to do it...](img/image00387.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些了。现在，运行 `test/index`。你应该得到以下结果：![如何操作...](img/image00387.jpeg)
- en: How it works…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, the Timestamp behavior populates `created_at` (the timestamp which
    points to the time when the model was created) and `updated_at` (the time when
    the model was updated). It's a standard practice to name these fields, but if
    we would like to make a change, we can specify fields, which will be updated,
    and model events.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，时间戳行为会填充 `created_at`（指向模型创建时间的戳）和 `updated_at`（模型更新的时间）。命名这些字段是标准做法，但如果我们要进行更改，我们可以指定要更新的字段和模型事件。
- en: There's more…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For instance, our fields are named `creation_date` and `modified_date`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的字段命名为 `creation_date` 和 `modified_date`。
- en: 'Let''s configure our model with behavior according to these fields. In addition,
    we should add our behavior''s code to our `Post` model:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据这些字段配置我们的模型。此外，我们还应该将我们的行为代码添加到我们的 `Post` 模型中：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In this example, we''ve pointed to the `creation_date` and `modified_date`
    attributes before creating and updating our model accordingly by dint of using
    special ActiveRecord events: `EVENT_BEFORE_INSERT` and `EVENT_BEFORE_UPDATE`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们通过使用特殊的 ActiveRecord 事件：`EVENT_BEFORE_INSERT` 和 `EVENT_BEFORE_UPDATE`，在创建和更新模型之前相应地指向
    `creation_date` 和 `modified_date` 属性。
- en: In addition...
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 此外...
- en: 'You may want to save the timestamp for custom scenarios. Let''s say you want
    to update the `last_login` field, for example, for a specific controller action.
    In this situation, you can trigger the timestamp update for your specific attribute
    using the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想为自定义场景保存时间戳。比如说，你想更新 `last_login` 字段，例如，对于特定的控制器操作。在这种情况下，你可以使用以下方式触发特定属性的时戳更新：
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Be aware that `touch()` can''t be used for new models. You will get `InvalidCallException`
    in this case:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`touch()` 不能用于新模型。在这种情况下，您将得到 `InvalidCallException`：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `touch()` method calls model saving inside itself so you don't need to save
    the model after calling it.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`touch()` 方法在其内部调用模型保存，因此您在调用它之后不需要保存模型。'
- en: See also
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html#using-timestampbehavior](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html#using-timestampbehavior).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html#using-timestampbehavior](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html#using-timestampbehavior)。
- en: Setting up an author automatically
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动设置作者
- en: The `Blameable` behavior allows you to update one or more authors' fields automatically.
    This is primarily used to populate data into the `created_by` and `updated_by`
    fields. Similar to the Timestamp behavior, you can easily specify some special
    parameters and essential events for this behavior.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`Blameable` 行为允许您自动更新一个或多个作者的字段。这主要用于将数据填充到 `created_by` 和 `updated_by` 字段中。类似于
    Timestamp 行为，您可以轻松指定一些特殊参数和基本事件来使用此行为。'
- en: Let us return to the example from the previous section. We also have posts in
    our blog application. For example, let's assume that our blog model is called
    `BlogPost`. The model has `author_id`,the field which points to who created this
    post, and `updater_id,` the field which points to who updated it. We would like
    to populate these attributes automatically during the create/update model events.
    Now you can learn how to do it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到上一节的例子。在我们的博客应用程序中，我们也有帖子。例如，假设我们的博客模型被命名为 `BlogPost`。该模型有 `author_id`
    字段，它指向创建此帖子的用户，还有 `updater_id` 字段，它指向更新它的用户。我们希望在创建/更新模型事件期间自动填充这些属性。现在您可以学习如何做到这一点。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的 Composer 包管理器创建一个新的应用程序，请参阅[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Set up the database connection and create a table named `blog_post`, as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置数据库连接并创建一个名为 `blog_post` 的表，如下所示：
- en: '[PRE21]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Use Gii to create the `BlogPost` model for the `blost_post` table.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Gii 为 `blost_post` 表创建 `BlogPost` 模型。
- en: How to do it…
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Add the following `behaviors` method to `models/BlogPost.php`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `behaviors` 方法添加到 `models/BlogPost.php`：
- en: '[PRE22]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create `controllers/TestController.php` as follows:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建 `controllers/TestController.php`：
- en: '[PRE23]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: That is it. Now, run `test/index`. You will get the following result:![How to
    do it…](img/image00388.jpeg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。现在，运行 `test/index`。您将得到以下结果：![如何做到这一点…](img/image00388.jpeg)
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, the `Blameable` behavior populates the `created_by` and `updated_by`
    attributes, but we will make a change and set up our behavior according to our
    own fields.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Blameable` 行为填充 `created_by` 和 `updated_by` 属性，但我们将进行更改，并根据自己的字段设置我们的行为。
- en: We also specified model events and fields in the model, so, during the model
    creation, `author_id` will be populated. Similarly, during the model update, we
    will populate `updater_id`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在模型中指定了模型事件和字段，因此，在模型创建期间，`author_id` 将被填充。同样，在模型更新期间，我们将填充 `updater_id`。
- en: What `Blameable` does is insert the current user id value into the `created_by`
    and `updated_by` fields during the create/update model events. This is a super-convenient
    way of doing things. Every time a model gets created or updated, we automatically
    fill out the essential fields.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`Blameable` 的作用是在创建/更新模型事件期间将当前用户 ID 值插入到 `created_by` 和 `updated_by` 字段中。这是一种非常方便的做法。每次模型被创建或更新时，我们都会自动填写这些基本字段。'
- en: This works out really well for little projects such as for large systems, where
    multiple users are admin and you need to keep track of who is doing what. You
    can also use this for frontend implementations, for example, if you had a `blog_comment`
    table and you wanted to use this method to keep track of the author of a comment.
    Also, you could set the author's fields in the controller, but the behavior helps
    you to avoid writing unnecessary and additional code. This is a very effective
    and easy way to implement this thing.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于小型项目来说效果很好，例如对于大型系统，其中多个用户是管理员，你需要跟踪谁在做什么。你也可以用于前端实现，例如，如果你有一个`blog_comment`表，你想要使用这种方法来跟踪评论的作者。此外，你可以在控制器中设置作者的字段，但行为可以帮助你避免编写不必要的额外代码。这是一个非常有效且简单的方法来实现这一点。
- en: There's more…
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Sometimes we need to fill out `author_id` and `updater_id` by an id other than
    that of the current user. In such a case, we may detach our behavior as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要用除当前用户ID之外的其他ID填写`author_id`和`updater_id`。在这种情况下，我们可能需要按照以下方式移除我们的行为：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We can detach any behavior we like in this way.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用这种方式移除任何我们喜欢的行为。
- en: See also
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/yii-behaviors-blameablebehavior.html](http://www.yiiframework.com/doc-2.0/yii-behaviors-blameablebehavior.html).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅[http://www.yiiframework.com/doc-2.0/yii-behaviors-blameablebehavior.html](http://www.yiiframework.com/doc-2.0/yii-behaviors-blameablebehavior.html)。
- en: Setting up a slug automatically
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动设置缩略名
- en: On the web, slug is a short text used in a URL to identify and describe a resource.
    A slug is the part of a URL which identifies a page using human-readable keywords.
    Sluggable behavior is the Yii2 model behavior that allows us to generate unique
    slugs.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上，缩略名是用于URL中标识和描述资源的简短文本。缩略名是URL的一部分，它使用人类可读的关键字来标识一个页面。可缩略行为是Yii2模型行为，允许我们生成唯一的缩略名。
- en: In this section, we will be guiding you through modifying Yii's default view
    URL routes for model objects to be more user-friendly and search engine-friendly.
    Yii provides built-in support for this via its sluggable behaviors.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将指导你修改Yii的默认视图URL路由，使其对模型对象更加用户友好和搜索引擎友好。Yii通过其可缩略行为提供了内置支持。
- en: Getting ready
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的应用程序，如官方指南中所述[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Set up the database connection and create a table named `blog_post`, as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置数据库连接并创建一个名为`blog_post`的表，如下所示：
- en: '[PRE25]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Use Gii to create a model for the post table.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii为帖子表创建模型。
- en: How to do it…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Add the following `behaviors` method to `models/BlogPost.php`:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`behaviors`方法添加到`models/BlogPost.php`中：
- en: '[PRE26]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create `controllers/TestController.php` as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建`controllers/TestController.php`：
- en: '[PRE27]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The result will be as follows:![How to do it…](img/image00390.jpeg)
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将如下所示：![如何做…](img/image00390.jpeg)
- en: How it works…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Yii offers some nice enhancements to `SluggableBehavior` for useful scenarios.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yii为`SluggableBehavior`提供了一些有用的增强功能。
- en: For example, once a search engine records a slug, you probably don't want the
    page URL to change.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，一旦搜索引擎记录了一个缩略名，你可能不希望页面URL发生变化。
- en: The immutable attribute tells Yii to keep the slug the same after it's first
    created—even if the title will be updated.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变属性告诉Yii在首次创建后保持缩略名不变——即使标题将被更新。
- en: If users enter messages that overlap in content, the `ensureUnique` property
    will automatically append a unique suffix to duplicates. This makes certain that
    each message has a unique URL, even if the message is identical.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户输入的内容重叠的消息，`ensureUnique`属性将自动为重复项添加一个唯一的后缀。这确保了每个消息都有一个唯一的URL，即使消息是相同的。
- en: If you go ahead and create another post with the exact same title, you'll see
    that its slug is incremented to hot-update-for-ios-devices-2.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你继续创建一个与标题完全相同的另一篇帖子，你会发现它的缩略名已增加为hot-update-for-ios-devices-2。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: If you get an error related to the immutable property, it may be
    that you need to run a Composer update to get the latest version of Yii.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：如果你遇到了与不可变属性相关的错误，可能需要运行Composer更新以获取Yii的最新版本。'
- en: There's more…
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Use Gii to generate CRUD for the model class `app\models\Post` and the controller
    class `app\controllers\BlogPostController`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii为模型类`app\models\Post`和控制器类`app\controllers\BlogPostController`生成CRUD。
- en: 'Add the following action to `controllers/BlogPostController.php`:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下操作添加到 `controllers/BlogPostController.php` 文件中：
- en: '[PRE28]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That it is. If you run `blogpost/slug` with the slug value as `sluggablebehavior-test`,
    you will get the following result:![There's more…](img/image00392.jpeg)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。如果你使用 slug 值为 `sluggablebehavior-test` 的 `blogpost/slug` 运行，你将得到以下结果：![还有更多…](img/image00392.jpeg)
- en: It's suggested that the previous slug recipe be successfully completed with
    a created instance of `Post` model.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建议使用创建的 `Post` 模型实例成功完成之前的 slug 调配方。
- en: 'To beautify the URL, add the following `urlManager` component in `config\web.php`:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了美化 URL，请在 `config\web.php` 中添加以下 `urlManager` 组件：
- en: '[PRE29]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It's important that the `'blog-post/<slug>' => 'blog-post/slug'` rule is the
    last in the post URL rule list.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 `'blog-post/<slug>' => 'blog-post/slug'` 规则在帖子 URL 规则列表中是最后一个。
- en: Now, if you go to the page using your slug URL, such as `index.php/blog-post/super-quote-title-1/`,
    you will get a result like similar to that in step 3:![There's more…](img/image00395.jpeg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你使用 slug URL 访问页面，例如 `index.php/blog-post/super-quote-title-1/`，你将得到类似于第
    3 步的结果：![还有更多…](img/image00395.jpeg)
- en: See also
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further information, refer to:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅：
- en: '[http://www.yiiframework.com/doc-2.0/yii-behaviors-sluggablebehavior.html](http://www.yiiframework.com/doc-2.0/yii-behaviors-sluggablebehavior.html)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-behaviors-sluggablebehavior.html](http://www.yiiframework.com/doc-2.0/yii-behaviors-sluggablebehavior.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-runtime-routing.html#url-rules](http://www.yiiframework.com/doc-2.0/guide-runtime-routing.html#url-rules)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-runtime-routing.html#url-rules](http://www.yiiframework.com/doc-2.0/guide-runtime-routing.html#url-rules)'
- en: Transactions
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务
- en: In modern databases, transactions also do some other things, such as ensuring
    that you can't access data that another person has written halfway. However, the
    basic idea is the same—transactions are there to ensure that no matter what happens,
    the data you work with will be in a sensible state. They guarantee that there
    will *not* be a situation where money is withdrawn from one account, but not deposited
    to another.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代数据库中，事务还会做一些其他事情，例如确保你不能访问其他人半途写入的数据。然而，基本思想是相同的——事务是为了确保无论发生什么情况，你处理的数据都将处于合理的状态。它们保证不会出现从某个账户提取了钱，但没有存入另一个账户的情况。
- en: Yii2 supports a powerful transaction mechanism with savepoints.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 支持一个强大的带有 savepoints 的事务机制。
- en: A classic example is of transferring money from one bank account to another.
    To do that, you have to first withdraw the amount from the source account, and
    then deposit it to the destination account. The operation has to succeed in full.
    If you stop halfway, the money will be lost, and that is very bad. For instance,
    we have a recipient account and a sender account. We would like to transfer money
    from sender to recipient. Let's assume that we have an account model.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一个经典的例子是将一笔钱从一个银行账户转到另一个账户。为此，你必须首先从源账户中提取金额，然后将其存入目标账户。操作必须完全成功。如果你半途而废，钱就会丢失，这非常糟糕。例如，我们有一个收款账户和一个付款账户。我们希望从付款账户向收款账户转账。假设我们有一个账户模型。
- en: Getting ready...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: Our account model will be very simple and it will contain only the `id` and
    `balance` fields.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的账户模型将非常简单，它只包含 `id` 和 `balance` 字段。
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的 Composer 包管理器创建一个新的应用程序，官方指南链接为 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Create a migration, which adds an account table, using the following command:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个迁移，使用以下命令添加账户表：
- en: '[PRE30]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Also, update the just- created migration using the following code:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，使用以下代码更新刚刚创建的迁移：
- en: '[PRE31]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, install migration with the following command:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令安装迁移：
- en: '[PRE32]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Use Gii to create a model for the account table.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Gii 创建账户表的模型。
- en: 'Create a migration, which adds some test `Account` models with balance for
    our table:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个迁移，为我们的表添加一些带有余额的测试 `Account` 模型：
- en: '[PRE33]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Also, update the just-created migration using the following code:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，使用以下代码更新刚刚创建的迁移：
- en: '[PRE34]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How to do it…
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Add the following rule to the `rules` method, to `models/Account.php`:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下规则添加到 `rules` 方法中，到 `models/Account.php` 文件中：
- en: '[PRE35]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Let us assume that our balance may be only positive and that it can't be negative.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们的余额只能是正数，不能是负数。
- en: 'Create `TestController` with success and error actions:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建具有成功和错误操作的 `TestController`：
- en: '[PRE36]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Run `test/success` and you should get the output shown in the following screenshot:![How
    to do it…](img/image00397.jpeg)
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `test/success` 并应得到以下截图所示的输出：![如何操作…](img/image00397.jpeg)
- en: In this case, the transaction mechanism will not update the recipient and sender
    balance if some error occurred.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，如果发生某些错误，事务机制将不会更新接收者和发送者的余额。
- en: Run `test/erro`r and you should get the output shown in the following screenshot:![How
    to do it…](img/image00400.jpeg)
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `test/erro`r 并应得到以下截图所示的输出：![如何操作…](img/image00400.jpeg)
- en: As you will remember, we added a rule to the `Account` model, so our account
    balance can be only positive. The transaction will roll back in this case and
    it prevents a situation where money is withdrawn from a sender's account but not
    deposited to the recipient's account.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所记，我们向 `Account` 模型添加了一条规则，因此我们的账户余额只能是正数。在这种情况下，事务将回滚，这防止了从发送者账户中取款但未将款项存入接收者账户的情况发生。
- en: See also
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For further information, refer to:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅：
- en: '[http://www.yiiframework.com/doc-2.0/guide-db-dao.html#performing-transactions](http://www.yiiframework.com/doc-2.0/guide-db-dao.html#performing-transactions)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-db-dao.html#performing-transactions](http://www.yiiframework.com/doc-2.0/guide-db-dao.html#performing-transactions)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-db-dao.html#nesting-transactions](http://www.yiiframework.com/doc-2.0/guide-db-dao.html#nesting-transactions)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-db-dao.html#nesting-transactions](http://www.yiiframework.com/doc-2.0/guide-db-dao.html#nesting-transactions)'
- en: Replication and read-write splitting
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制和读写分离
- en: In this recipe we will have a look at how to do replication and read-write splitting.
    We will see how slave and master servers help us in getting these done.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何进行复制和读写分离。我们将看到从服务器和主服务器如何帮助我们完成这些操作。
- en: Getting ready
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Composer 包管理器创建一个新的应用程序，如官方指南[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)中所述。
- en: 'Set up the database connection and create a table named `post`, as follows:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方指南设置数据库连接并创建一个名为 `post` 的表，如下所示：
- en: '[PRE37]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Generate the `BlogPost` model for the table `blog_post`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `blog_post` 表生成 `BlogPost` 模型。
- en: Configure master-slave replication between your database servers, for example,
    as in the article at [https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-in-mysql/](https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-in-mysql/).
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的数据库服务器之间配置主从复制，例如，如文章[https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-in-mysql/](https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-in-mysql/)中所述。
- en: 'Configure the `db` component in `config/main.php`; here''s an example of configuration:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config/main.php` 中配置 `db` 组件；以下是一个配置示例：
- en: '[PRE38]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How to do it…
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create `TestController.php` as follows:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `TestController.php` 如下所示：
- en: '[PRE39]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Run `test/index` and you should get the output shown in the following screenshot:![How
    to do it…](img/image00401.jpeg)
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `test/index` 并应得到以下截图所示的输出：![如何操作…](img/image00401.jpeg)
- en: How it works…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Slave servers are used for data reading, whereas the master server is used for
    writing. After the ActiveRecord model is saved at the master server, new records,
    replicate to the slave server and then `$replModel` finds records on it.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器用于数据读取，而主服务器用于写入。在主服务器上保存 ActiveRecord 模型后，新记录将复制到从服务器，然后 `$replModel` 在其上查找记录。
- en: There's more…
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The `\yii\db\Connection` component supports load balancing and failover between
    slaves. When performing a read query for the first time, the `\yii\db\Connection`
    component will randomly pick a slave and try connecting to it. If the slave is
    found dead, it will try another one. If none of the slaves are available, it will
    connect to the master. By configuring a server status cache, a dead server can
    be remembered so that it will not be tried again during a certain period of time.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`\yii\db\Connection` 组件支持在从库之间进行负载均衡和故障转移。当第一次执行读查询时，`\yii\db\Connection` 组件将随机选择一个从库并尝试连接到它。如果发现从库已死，它将尝试另一个。如果所有从库都不可用，它将连接到主库。通过配置服务器状态缓存，可以记住已死的服务器，这样在一段时间内就不会再次尝试连接。'
- en: See also
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For further information, refer to the following URLs:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅以下网址：
- en: '[http://www.yiiframework.com/doc-2.0/guide-db-dao.html#replication-and-read-write-splitting](http://www.yiiframework.com/doc-2.0/guide-db-dao.html#replication-and-read-write-splitting)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-db-dao.html#replication-and-read-write-splitting](http://www.yiiframework.com/doc-2.0/guide-db-dao.html#replication-and-read-write-splitting)'
- en: '[http://dev.mysql.com/doc/refman/5.6/en/replication.html](http://dev.mysql.com/doc/refman/5.6/en/replication.html)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://dev.mysql.com/doc/refman/5.6/en/replication.html](http://dev.mysql.com/doc/refman/5.6/en/replication.html)'
- en: '[http://docs.mongodb.org/manual/tutorial/deploy-replica-set/](http://docs.mongodb.org/manual/tutorial/deploy-replica-set/)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.mongodb.org/manual/tutorial/deploy-replica-set/](http://docs.mongodb.org/manual/tutorial/deploy-replica-set/)'
- en: '[http://docs.mongodb.org/manual/tutorial/deploy-replica-set-for-testing/](http://docs.mongodb.org/manual/tutorial/deploy-replica-set-for-testing/)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.mongodb.org/manual/tutorial/deploy-replica-set-for-testing/](http://docs.mongodb.org/manual/tutorial/deploy-replica-set-for-testing/)'
- en: Implementing single table inheritance
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现单表继承
- en: Relational databases do not support inheritance. If we need to store inheritance
    in the database, we should somehow support it through code. This code should be
    efficient, so that it should generate as few JOINs as possible. A common solution
    to this problem was described by *Martin Fowler* and is named **single table inheritance**.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库不支持继承。如果我们需要在数据库中存储继承，我们应该通过某种方式通过代码来支持它。这段代码应该高效，因此应该尽可能少地生成JOIN操作。对此问题的一个常见解决方案是由
    *Martin Fowler* 描述的，被称为**单表继承**。
- en: When we use this pattern, we store all the class tree data in a single table
    and use the type field to determine a model for each row.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用这种模式时，我们将整个类树的数据存储在单个表中，并使用类型字段来确定每一行的模型。
- en: 'As an example, we will implement the single table inheritance for the following
    class tree:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将为以下类树实现单表继承：
- en: Car
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Car
- en: '|- SportCar'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '|- SportCar'
- en: '|- FamilyCar'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '|- FamilyCar'
- en: Getting ready
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的应用程序，具体操作请参考官方指南中的[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Create and set up a database. Add the following table:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并设置数据库。添加以下表：
- en: '[PRE40]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Use Gii to create a `Car` model for the `car` table and generate ActiveQuery
    for the `Car` model.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii为 `car` 表创建一个 `Car` 模型，并为 `Car` 模型生成 ActiveQuery。
- en: How to do it…
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做这件事...
- en: 'Add the following method and property to `models/CarQuery.php`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将以下方法和属性添加到 `models/CarQuery.php`:'
- en: '[PRE41]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create `models/SportCar.php` as follows:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '按照以下方式创建 `models/SportCar.php`:'
- en: '[PRE42]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create `models/FamilyCar.php` as follows:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '按照以下方式创建 `models/FamilyCar.php`:'
- en: '[PRE43]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the following method to `models/Car.php`:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将以下方法添加到 `models/Car.php`:'
- en: '[PRE44]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add `TestController` with the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '添加以下代码的 `TestController`:'
- en: '[PRE45]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Run `test/index` and you should get the output shown in the following screenshot:![How
    to do it…](img/image00403.jpeg)
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `test/index`，你应该会得到以下截图所示的输出：![如何做这件事…](img/image00403.jpeg)
- en: How it works…
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The base model `Car` is a typically-used Yii AR model except that it has two
    added methods. The `tableName` method explicitly declares the table name to be
    used for the model. For the `Car` model alone, this does not make sense, but for
    child models, it will return the same car table, which is just what we want—a
    single table for the entire class tree. The instantiate method is used by AR internally
    to create a model instance from the raw data when we call methods such as `Car:::find()->all()`.
    We use a `switch` statement to create different classes based on the type attribute
    and use the same class if the attribute value is either not specified or points
    to the non-existing class.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 基础模型 `Car` 是一个典型的 Yii AR 模型，除了它有两个附加的方法。`tableName` 方法明确声明了用于模型的表名。对于 `Car`
    模型本身来说，这没有意义，但对于子模型来说，它将返回相同的汽车表，这正是我们想要的——整个类树的单个表。`instantiate` 方法由 AR 内部使用，在调用
    `Car:::find()->all()` 等方法时，从原始数据创建模型实例。我们使用 `switch` 语句根据类型属性创建不同的类，如果属性值未指定或指向不存在的类，则使用相同的类。
- en: The `SportCar` and `FamilyCar` models simply set the default AR scope, so when
    we search for models with the `SportCar::` `model()->` methods, we will get the
    `SportCar` model only.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`SportCar` 和 `FamilyCar` 模型仅简单地设置了默认的 AR 范围，因此当我们使用 `SportCar::` `model()->`
    方法搜索模型时，我们只会得到 `SportCar` 模型。'
- en: See also
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: 'Use the following references to learn more about the single table inheritance
    pattern and Yii Active Record implementation:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下参考资料了解更多关于单表继承模式和 Yii Active Record 实现的信息：
- en: '[http://martinfowler.com/eaaCatalog/singleTableInheritance.html](http://martinfowler.com/eaaCatalog/singleTableInheritance.html)'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://martinfowler.com/eaaCatalog/singleTableInheritance.html](http://martinfowler.com/eaaCatalog/singleTableInheritance.html)'
- en: '[https://blog.liip.ch/archive/2012/03/27/table-inheritance-with-doctrine.html](https://blog.liip.ch/archive/2012/03/27/table-inheritance-with-doctrine.html)'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://blog.liip.ch/archive/2012/03/27/table-inheritance-with-doctrine.html](https://blog.liip.ch/archive/2012/03/27/table-inheritance-with-doctrine.html)'
- en: '[http://www.yiiframework.com/doc/api/CActiveRecord/](http://www.yiiframework.com/doc/api/CActiveRecord/)'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc/api/CActiveRecord/](http://www.yiiframework.com/doc/api/CActiveRecord/)'
