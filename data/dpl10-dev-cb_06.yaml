- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Accessing and Working with Entities
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问和使用实体
- en: In this chapter, we will go through the **create, read, update, and delete**
    (**CRUD**) operations of working with entities in Drupal. We will create a series
    of routes to create, read, update, and delete nodes that are articles.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍在Drupal中处理实体的**创建、读取、更新和删除**（**CRUD**）操作。我们将创建一系列路由来创建、读取、更新和删除文章节点。
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating and saving an entity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和保存实体
- en: Querying and loading entities
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询和加载实体
- en: Checking entity access
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查实体访问
- en: Updating an entity’s field values
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新实体的字段值
- en: Performing entity validation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行实体验证
- en: Deleting an entity
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除实体
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will require a custom module that has a `routing.yml` file and
    a controller named `ArticleController` in the `src/Controller` directory of the
    module. In the following recipes, the module name is `mymodule`. Replace as appropriate.
    You can find the full code used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp06](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp06)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要自定义模块，该模块包含一个`routing.yml`文件，并在模块的`src/Controller`目录中有一个名为`ArticleController`的控制器。在下面的示例中，模块名称为`mymodule`。请根据需要替换。您可以在GitHub上找到本章使用的完整代码：[https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp06](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp06)
- en: We are using the **Article content** type created by the standard Drupal installation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用由标准Drupal安装创建的**文章内容**类型。
- en: The recipes in this chapter have example HTTP requests that are used to interact
    with code created in each recipe. These HTTP requests can be run with any HTTP
    client. If you use VSCode, try the **REST Client** extension ([https://marketplace.visualstudio.com/items?itemName=humao.rest-client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client)),
    or if you have PhpStorm, use the built-in **HTTP Client** ([https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html](https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html)).
    If for some reason you do not have an editor or cannot get those working, you
    can use Postman ([https://www.postman.com/](https://www.postman.com/)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例包含用于与每个示例中创建的代码交互的HTTP请求。这些HTTP请求可以用任何HTTP客户端运行。如果您使用VSCode，请尝试**REST
    Client**扩展（[https://marketplace.visualstudio.com/items?itemName=humao.rest-client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client)），或者如果您有PhpStorm，请使用内置的**HTTP
    Client**（[https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html](https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html)）。如果由于某些原因您没有编辑器或无法使其工作，您可以使用Postman（[https://www.postman.com/](https://www.postman.com/)）。
- en: Creating and saving an entity
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和保存实体
- en: In this recipe, we will define a route to create a new article. The route will
    be for an HTTP `POST` request sending JSON to specify the article’s title and
    body text.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将定义一个路由来创建一个新的文章。该路由将用于发送JSON的HTTP `POST`请求，以指定文章的标题和正文文本。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create a `store` method in the `ArticleController` controller in your module
    that will receive the incoming request object:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的模块中`ArticleController`控制器中创建一个`store`方法，该方法将接收传入的请求对象：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We need the request object so that we can retrieve the JSON provided in the
    request payload.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要请求对象，以便我们可以检索请求有效载荷中提供的JSON。
- en: 'Next, we will convert the request’s content from JSON to a PHP array using
    Drupal’s JSON serialization utility class:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用Drupal的JSON序列化实用工具类将请求的内容从JSON转换为PHP数组：
- en: '[PRE10]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: While we could use the `json_decode` function directly, leveraging utility classes
    provided by Drupal standardizes the way code works.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以直接使用`json_decode`函数，但利用Drupal标准提供的实用工具类可以标准化代码的工作方式。
- en: 'Then, we get the entity type manager and retrieve the entity storage for the
    `node` entity type:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们获取实体类型管理器并检索`node`实体类型的实体存储：
- en: '[PRE16]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The entity type manager is a repository of information for entity types and
    is used to get handlers for entity types, such as the storage handler. When getting
    an entity storage handler, you pass the entity type ID.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类型管理器是实体类型信息的存储库，用于获取实体类型的处理程序，例如存储处理程序。在获取实体存储处理程序时，您需要传递实体类型ID。
- en: 'From the storage, invoke the `create` method to create a new node entity object:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从存储中调用`create`方法来创建一个新的节点实体对象：
- en: '[PRE25]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `create` method instantiates a new entity object with the entity type class.
    For the node entity type, our `$article` variable will be of the `\Drupal\node\Node`
    type. When instantiating a new entity, you must specify its bundle, which we do
    with the `type` key set to `article`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`create` 方法使用实体类型类实例化一个新的实体对象。对于节点实体类型，我们的 `$article` 变量将是 `\Drupal\node\Node`
    类型。在实例化新实体时，你必须指定其包，我们通过将 `type` 键设置为 `article` 来做到这一点。'
- en: 'Provide an associative array of `title` and `body` to the `create` method,
    copying values from the JSON we received from the request:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `create` 方法提供一个 `title` 和 `body` 的关联数组，从我们接收到的请求 JSON 中复制值：
- en: '[PRE37]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Invoke the `save` method on the entity object to save the entity:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实体对象上调用 `save` 方法以保存实体：
- en: '[PRE50]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We will now return a response with a Location header that has the URL to the
    newly created now and an HTTP status code of `201 Created`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将返回一个带有位置头部的响应，该头部包含新创建的节点 URL 和 HTTP 状态码 `201 Created`：
- en: '[PRE65]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The `201 Created` status code is used to represent a successful response and
    signifies that an item has been created. When a `201 Created` response is returned,
    it is recommended to return a `Location` header with a URL to the created item.
    Entity classes have a `toUrl` method to return a URL object, and then call its
    `toString` method to convert it to a string from an object.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`201 Created` 状态码用于表示成功的响应，并表明已创建一个项目。当返回 `201 Created` 响应时，建议返回一个带有创建项目 URL
    的 `Location` 头部。实体类有一个 `toUrl` 方法来返回一个 URL 对象，然后调用其 `toString` 方法将其从对象转换为字符串。'
- en: 'We must create the route in our module’s `routing.yml` that points to the `store`
    method of `ArticleController` for an HTTP `POST` request to the `/``articles`
    path:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在模块的 `routing.yml` 中创建路由，指向 `ArticleController` 的 `store` 方法，以处理对 `/articles`
    路径的 HTTP `POST` 请求：
- en: '[PRE87]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Routes may specify the HTTP methods they support with the `methods` key. In
    this recipe, we have set `requirements` to `_access: ''TRUE''` only to bypass
    access checks. This should be set to `_entity_create_access: ''node''`.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '路由可以通过 `methods` 键指定它们支持的 HTTP 方法。在这个菜谱中，我们只将 `requirements` 设置为 `_access:
    ''TRUE''` 以绕过访问检查。这应该设置为 `_entity_create_access: ''node''`。'
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建你的 Drupal 网站的缓存，使其了解新的路由：
- en: '[PRE95]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'An HTTP request such as the following can then be used to create a new node
    that is an article on your Drupal site:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用以下 HTTP 请求来创建一个新节点，该节点是你的 Drupal 网站上的文章：
- en: '[PRE96]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: How it works…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `create` method is used to instantiate a new entity object and returns an
    object of that entity type’s class. For this recipe, the `node` storage will return
    entities with the `\Drupal\node\Node` class. The values accepted in the `create`
    method are based on that entity type’s field definitions. These include the base
    fields and any fields created through the user interface.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`create` 方法用于实例化一个新的实体对象，并返回该实体类型的类对象。对于这个菜谱，`node` 存储将返回具有 `\Drupal\node\Node`
    类的实体。`create` 方法接受的值基于该实体类型的字段定义。这包括基本字段和通过用户界面创建的任何字段。'
- en: The bundle for an entity type must be specified when it is created. This is
    used to determine the fields available since each bundle can have different fields.
    For nodes, the bundle field is named `type`. That is why we provide the `article`
    value for the `type` key.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建实体类型时必须指定其实体类型的包。这用于确定可用的字段，因为每个包可以有不同的字段。对于节点，包字段名为 `type`。这就是为什么我们为 `type`
    键提供 `article` 值。
- en: The `save` method then commits the entity to the database storage.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 `save` 方法将实体提交到数据库存储。
- en: 'When an entity is inserted on its first save, the entity storage fires invoke
    the following hooks, allowing you to hook into the insert of a new entity. The
    entity being inserted is passed as an argument:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当实体在其首次保存时插入，实体存储触发调用以下钩子，允许你钩入新实体的插入。正在插入的实体作为参数传递：
- en: '`hook_ENTITY_TYPE_presave`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_ENTITY_TYPE_presave`'
- en: '`hook_entity_presave`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_entity_presave`'
- en: '`hook_ENTITY_TYPE_insert`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_ENTITY_TYPE_insert`'
- en: '`hook_entity_insert`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_entity_insert`'
- en: Querying and loading entities
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询和加载实体
- en: In this recipe, we will use an entity query to find all published articles and
    return them as JSON. We will also allow specifying the sort order via a query
    parameter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用实体查询来查找所有已发布的文章并将它们作为 JSON 返回。我们还将允许通过查询参数指定排序顺序。
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Create an `index` method in the `ArticleController` controller in your module
    that will receive the incoming `Request` object:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块中创建 `ArticleController` 控制器的 `index` 方法，它将接收传入的 `Request` 对象：
- en: '[PRE103]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: The `request` object will be used to retrieve query parameters passed in the
    URL.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`request`对象将用于检索通过URL传递的查询参数。'
- en: 'From the request, get the sort query parameter, defaulting to `DESC`:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从请求中获取排序查询参数，默认为`DESC`：
- en: '[PRE113]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Then, we get the entity type manager and retrieve the entity storage for the
    node entity type:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们获取实体类型管理器并检索节点实体类型的实体存储：
- en: '[PRE117]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: The entity type manager is a repository of information for entity types and
    is used to get handlers for entity types, such as the storage handler. When getting
    an entity storage handler, you pass the entity type ID.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类型管理器是实体类型信息的存储库，用于获取实体类型的处理程序，例如存储处理程序。在获取实体存储处理程序时，您传递实体类型ID。
- en: 'From the storage handler, invoke the `getQuery` method. This returns a query
    object that is used to perform an entity query:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从存储处理程序中调用`getQuery`方法。这将返回一个查询对象，用于执行实体查询：
- en: '[PRE124]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Drupal requires specifying if the entity query should perform entity access
    checks when querying for content entities. We must call the `accessCheck` method
    and set it to `TRUE` or `FALSE`. In this case, we want entity access checks to
    be applied to the entity query.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal要求指定在查询内容实体时实体查询是否应执行实体访问检查。我们必须调用`accessCheck`方法并将其设置为`TRUE`或`FALSE`。在这种情况下，我们希望实体访问检查应用于实体查询。
- en: 'We will add conditions to the query to make sure we only return published articles:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在查询中添加条件以确保只返回已发布的文章：
- en: '[PRE133]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: The `condition` method is passed the field name and value to create a condition.
    The first condition ensures we only query for nodes with the type (bundle) of
    `article`. The second condition is to ensure the `status` field is `true` for
    published.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`condition`方法传递字段名和值以创建条件。第一个条件确保我们只查询类型（捆绑）为`article`的节点。第二个条件是确保`status`字段为`true`表示已发布。'
- en: 'Then, we specify the `sort` order of the query from our URL query parameter:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们指定查询的`sort`顺序来自我们的URL查询参数：
- en: '[PRE144]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: The `sort` method is passed the field name to order the query by and a direction
    of `ASC` or `DESC`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort`方法传递用于排序查询的字段名和方向`ASC`或`DESC`。'
- en: 'Calling the `execute` method will execute the entity query and return the available
    entity IDs:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`execute`方法将执行实体查询并返回可用的实体ID：
- en: '[PRE156]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'After calling `execute`, we have an array of node IDs that can be passed to
    the `loadMultiple` method from the entity storage to load the nodes:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`execute`之后，我们得到一个节点ID数组，可以将这些ID传递给实体存储中的`loadMultiple`方法来加载节点：
- en: '[PRE169]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'We can now use `array_map` to turn the nodes into array values and return a
    JSON response of articles:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以使用`array_map`将节点转换为数组值并返回文章的JSON响应：
- en: '[PRE183]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: The `array_map` function allows you to transform the values of items in an existing
    array. We will use `array_map` to iterate over the returned node entities and
    call the `toArray` method to get their values as an array.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`array_map`函数允许您转换现有数组中项的值。我们将使用`array_map`遍历返回的节点实体并调用`toArray`方法以获取它们的值作为数组。'
- en: 'We must create the route in `routing.yml` that points to the `index` method
    of `ArticleController` for an HTTP `GET` request to the `/``articles` path:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在`routing.yml`中创建路由，指向`ArticleController`的`index`方法，以便对`/articles`路径的HTTP
    `GET`请求：
- en: '[PRE202]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Routes may share the same path if they explicitly define the HTTP methods they
    support.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路由明确定义它们支持的HTTP方法，则路由可以共享相同的路径。
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的Drupal站点的缓存，使其了解新的路由：
- en: '[PRE210]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'An HTTP request such as the following can then be used to retrieve the articles
    on your Drupal site:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用如下所示的HTTP请求来检索您的Drupal站点上的文章：
- en: '[PRE211]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: How it works…
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Entity queries are an abstraction above the Database API in Drupal. Drupal stores
    entity and field data in normalized database tables. The entity query builds the
    appropriate database query to check the entity’s base table, data table, and any
    field tables. It orchestrates all of the `JOIN` statements required.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 实体查询是Drupal数据库API之上的一个抽象。Drupal将实体和字段数据存储在规范化的数据库表中。实体查询构建适当的数据库查询以检查实体的基础表、数据表以及任何字段表。它协调所有所需的`JOIN`语句。
- en: When an entity query is executed, it returns the IDs of matching entities. These
    IDs are then passed to the `loadMultiple` method to retrieve entity objects.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行实体查询时，它返回匹配实体的ID。然后，将这些ID传递给`loadMultiple`方法以检索实体对象。
- en: There’s more…
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There are more things that can be done with entity queries.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 实体查询可以做更多的事情。
- en: Count queries
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计数查询
- en: 'An entity query can also perform a count instead of returning the entity IDs.
    This is done by calling the `count` method on an entity query object:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 实体查询也可以执行计数而不是返回实体ID。这是通过在实体查询对象上调用`count`方法来完成的：
- en: '[PRE213]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: The preceding code would return the number of unpublished articles.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将返回未发布文章的数量。
- en: Checking entity access
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查实体访问
- en: In this recipe, we will demonstrate how to check whether the current user has
    access to view an `_entity_access` route requirement to perform entity access
    checks. This recipe will use its own entity access control so that the response
    is a `404 Not Found` response instead of a `403` `Forbidden` response.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将演示如何检查当前用户是否有权查看用于执行实体访问检查的`_entity_access`路由要求。此配方将使用自己的实体访问控制，以便响应是一个`404
    Not Found`响应而不是`403` `Forbidden`响应。
- en: How to do it…
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Create a `get` method in the `ArticleController` controller in your module
    that has a parameter for the `node` entity object that will be provided by a route
    parameter:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块中创建一个`ArticleController`控制器中的`get`方法，该方法有一个参数用于`node`实体对象，该对象将由路由参数提供：
- en: '[PRE214]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: If using the same controller from previous recipes, this adds a new `use` statement
    for the `Drupal\node\NodeInterface` interface.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用之前配方中的相同控制器，这将添加一个新的`use`语句用于`Drupal\node\NodeInterface`接口。
- en: 'Then, we get the entity type manager and retrieve the access control handler
    for the `node` entity type:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们获取实体类型管理器并检索`node`实体类型的访问控制处理程序：
- en: '[PRE225]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: The entity type manager is a repository of information for entity types and
    is used to get handlers for entity types, such as the access control handler.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类型管理器是实体类型信息的存储库，用于获取实体类型的处理程序，例如访问控制处理程序。
- en: 'From the access control handler, invoke the `access` method:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从访问控制处理程序中调用`access`方法：
- en: '[PRE231]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: The first parameter of `access` is the entity. The second parameter is the operation,
    which is `view` for this recipe. By default, the `access` method returns a Boolean
    value.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`access`的第一个参数是实体。第二个参数是操作，对于此配方是`view`。默认情况下，`access`方法返回一个布尔值。'
- en: 'If the result is not allowed, we want to return a `404 Not` `Found` response:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果结果不允许，我们希望返回一个`404 Not Found`响应：
- en: '[PRE239]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: We will return a JSON response, but with `NULL` data and a `404` status code.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将返回一个JSON响应，但带有`NULL`数据和`404`状态码。
- en: 'If the result is allowed, return a JSON response of the article node’s content:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果结果是允许的，返回文章节点内容的JSON响应：
- en: '[PRE250]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'We must create the route in our module’s `routing.yml` that points to the `get`
    method of `ArticleController` for an HTTP `GET` request to the `/``articles/{node}`
    path:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在模块的`routing.yml`中创建一个路由，指向`ArticleController`的`get`方法，以便对`/articles/{node}`路径的HTTP
    `GET`请求：
- en: '[PRE264]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Since our route parameter is named `node` and our controller method accepts
    the class for a node entity, Drupal will automatically have our `node` parameter
    converted to an entity object for us.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的路由参数名为`node`，并且我们的控制器方法接受节点实体的类，Drupal将自动将我们的`node`参数转换为实体对象。
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建你的Drupal站点的缓存，使其了解新的路由：
- en: '[PRE271]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: 'An HTTP request such as the following can then be used to retrieve an article
    that is on your Drupal site:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，可以使用如下HTTP请求检索你Drupal站点上的文章：
- en: '[PRE272]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: How it works…
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This recipe did not use the `_entity_access` route requirement to showcase entity
    validation. The `_entity_access` route requirement invokes the access method on
    the entity located in the route parameter against an operation.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方未使用`_entity_access`路由要求来展示实体验证。`_entity_access`路由要求在路由参数中位于实体上的操作上调用访问方法。
- en: 'The following operations are recognized by Drupal’s entity access system:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 以下操作被Drupal的实体访问系统识别：
- en: '`view`: The user is allowed to view the entity.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view`: 用户被允许查看实体。'
- en: '`view_label`: A less used operation. It is used to check whether the user has
    the privilege to at least view the entity’s label/title.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_label`: 一个较少使用的操作。它用于检查用户是否有权至少查看实体标签/标题。'
- en: '`update`: The user is allowed to update the entity.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`: 用户被允许更新实体。'
- en: '`delete`: The user is allowed to delete the entity.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete`: 用户被允许删除实体。'
- en: Note
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The access to create an entity is a different call to the access control handler
    since it cannot be checked against an entity object. The `createAccess` method
    on the access control handler is used to see if a user has access to create a
    new entity of the entity type.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 创建实体的访问是一个对访问控制处理器的不同调用，因为它不能与实体对象进行比较。访问控制处理器上的 `createAccess` 方法用于检查用户是否有权创建新实体。
- en: 'Checking `access` of an entity can also be done by invoking the `access` method
    on the entity itself. This recipe is intended to showcase the access control handler
    as well. The recipe could check access by performing the following:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在实体本身上调用 `access` 方法也可以检查实体的 `access`。此菜谱旨在展示访问控制处理器。菜谱可以通过执行以下操作来检查访问：
- en: '[PRE274]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'By default, the access check uses the current user. Access checks allow passing
    an alternative user account to perform access checks. This may be useful when
    running code on the command line or in background jobs:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，访问检查使用当前用户。访问检查允许传递一个替代用户账户以执行访问检查。这在在命令行或后台作业中运行代码时可能很有用：
- en: '[PRE275]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Updating an entity’s field values
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新实体的字段值
- en: In this recipe, we will define a route to update the field values of an article
    node. The route will be for an `HTTP PATCH` request sending JSON to specify a
    new title and body text.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在此菜谱中，我们将定义一个路由来更新文章节点的字段值。该路由将用于发送 JSON 的 `HTTP PATCH` 请求，以指定新的标题和正文文本。
- en: How to do it…
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create an `update` method in the `ArticleController` controller that receives
    the incoming request and node object:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ArticleController` 控制器中创建一个 `update` 方法，该方法接收传入的请求和节点对象：
- en: '[PRE276]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: We need the request object so that we can retrieve the JSON payload provided
    to this method and the node object to update.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要请求对象，以便我们可以检索此方法提供的 JSON 负载以及节点对象以进行更新。
- en: 'Next, we will convert the request’s content from JSON to a PHP array using
    Drupal’s JSON serialization utility class:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 Drupal 的 JSON 序列化实用工具类将请求的内容从 JSON 转换为 PHP 数组：
- en: '[PRE287]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: While we could use the `json_decode` function directly, leveraging utility classes
    provided by Drupal standardizes the way code works.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以直接使用 `json_decode` 函数，但利用 Drupal 标准提供的实用工具类可以标准化代码的工作方式。
- en: 'First, we will update the article node’s `title`, if provided in the request’s
    JSON:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，如果请求的 JSON 中提供了，我们将更新文章节点标题：
- en: '[PRE293]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Some entity classes provide methods for setting specific field values like the
    `Node` class does with `setTitle` to modify the node’s `title`.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 一些实体类提供了设置特定字段值的方法，例如 `Node` 类使用 `setTitle` 来修改节点的 `title`。
- en: 'Then, we will update the article’s body field, if provided in the request’s
    JSON:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，如果请求的 JSON 中提供了，我们将更新文章的主体字段：
- en: '[PRE302]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: The `set` method allows us to set the value for a field. The first parameter
    is the field name and the second parameter is the field’s value.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`set` 方法允许我们设置字段的值。第一个参数是字段名，第二个参数是字段的值。'
- en: 'After the fields have been updated, we can save the entity and return it as
    a JSON response:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新字段后，我们可以保存实体并将其作为 JSON 响应返回：
- en: '[PRE314]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'We must create the route in `routing.yml` that points to the `update` method
    of `ArticleController` for an HTTP `PATCH` request to the `/``articles/{node}`
    path:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在 `routing.yml` 中创建路由，该路由指向 `ArticleController` 的 `update` 方法，用于对 `/articles/{node}`
    路径的 HTTP `PATCH` 请求：
- en: '[PRE330]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'This route should have `_entity_access: ''node.update''` as its requirements.
    However, we have used `_access: ''TRUE''` to bypass access checks for this recipe.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '此路由应具有 `_entity_access: ''node.update''` 作为其要求。然而，我们已使用 `_access: ''TRUE''`
    来绕过此菜谱的访问检查。'
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的 Drupal 网站缓存，使其了解新路由：
- en: '[PRE338]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'An HTTP request such as the following can then be used to update an article
    that is on your Drupal site:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，可以使用以下 HTTP 请求来更新您 Drupal 网站上的文章：
- en: '[PRE339]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: How it works…
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When updating an entity, the entity storage updates the field values in the
    database and the entity’s database record. The entity storage will write the field
    values to the appropriate database tables that hold field values.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 当更新一个实体时，实体存储会在数据库中更新字段值以及实体的数据库记录。实体存储会将字段值写入包含字段值的适当数据库表。
- en: 'When an entity is updated, the entity storage fires invoke the following hooks,
    allowing you to hook into an update to an entity. The entity being updated is
    passed as an argument:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 当实体被更新时，实体存储会触发以下钩子，允许您挂钩到实体的更新。正在更新的实体作为参数传递：
- en: '`hook_ENTITY_TYPE_presave`'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_ENTITY_TYPE_presave`'
- en: '`hook_entity_presave`'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_entity_presave`'
- en: '`hook_ENTITY_TYPE_update`'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_ENTITY_TYPE_update`'
- en: '`hook_entity_update`'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_entity_update`'
- en: Entities may also be validated, to ensure their updated values are correct.
    This is covered in the next recipe, *Performing* *entity validation*.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 实体也可以进行验证，以确保其更新的值是正确的。这将在下一个菜谱*执行实体验证*中介绍。
- en: Performing entity validation
  id: totrans-469
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行实体验证
- en: In this recipe, we will walk through entity validation. Drupal has integrated
    with the **Symfony Validator** component. Entities can be validated before saving.
    We will build off of the last recipe, which allows updating an article node to
    add validation of its values.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将介绍实体验证。Drupal已经集成了**Symfony Validator**组件。实体在保存之前可以进行验证。我们将基于上一个菜谱，允许更新文章节点以添加对其值的验证。
- en: How to do it…
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will be adding validation to the `update` method from the previous recipe:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将向上一个菜谱中的`update`方法添加验证：
- en: '[PRE346]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'We will modify the `update` method to `validate` the node before saving:'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将修改`update`方法，在保存节点之前对其进行`validate`：
- en: '[PRE362]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: We will invoke the `validate` method, which runs the validation system against
    all constraints on the entity and its field values.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调用`validate`方法，该方法将对实体及其字段值上的所有约束执行验证。
- en: 'The `validate` method returns an object containing any constraint violations
    and does not throw an exception. We must check whether there are any violations:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`validate`方法返回一个包含任何约束违规的对象，并且不会抛出异常。我们必须检查是否存在任何违规：'
- en: '[PRE379]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: The returned object, an instance of `\Drupal\Core\Entity\EntityConstraintViolationListInterface`,
    implements `\Countable`. This allows us to use the `count` function to see if
    there are any violations.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象，一个`\Drupal\Core\Entity\EntityConstraintViolationListInterface`的实例，实现了`\Countable`接口。这允许我们使用`count`函数来查看是否存在任何违规。
- en: 'If there are constraint violations, we will build an array of error messages
    and return a `400 Bad` `Request` response:'
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在约束违规，我们将构建一个错误消息数组，并返回一个`400 Bad Request`响应：
- en: '[PRE398]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: The `EntityConstraintViolationListInterface` object is also iterable, allowing
    us to loop over all of the violations. From each violation, we can use `getPropertyPath`
    to identify the invalid field and `getMessage` for information about the invalid
    value.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '`EntityConstraintViolationListInterface`对象也是可迭代的，允许我们遍历所有违规。从每个违规中，我们可以使用`getPropertyPath`来识别无效字段，并使用`getMessage`来获取有关无效值的信息。'
- en: 'The following HTTP request would trigger a constraint violation for an empty
    value in the `title` field:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下HTTP请求会在`title`字段为空值时触发约束违规：
- en: '[PRE423]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: How it works…
  id: totrans-564
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Drupal utilizes the Symfony Validator component ([https://symfony.com/components/Validator](https://symfony.com/components/Validator))
    to validate data. The Validator component has a concept of constraints that are
    validated, and if the validation fails a violation is reported. Drupal’s entity
    validation works with an outside-in approach: entity-level constraints are validated
    and then each field is validated, going down through each field’s properties.'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal使用**Symfony Validator**组件([https://symfony.com/components/Validator](https://symfony.com/components/Validator))来验证数据。Validator组件有一个概念，即需要验证的约束，如果验证失败，则会报告违规。Drupal的实体验证采用自外向内的方法：验证实体级别的约束，然后逐个验证每个字段，逐级向下验证每个字段的属性。
- en: Entity validation does not automatically run when an entity is saved. It is
    an explicit operation that must be invoked when manipulating entities programmatically.
    The only time Drupal invokes entity validation is when an entity is modified through
    its forms.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 实体验证在实体保存时不会自动运行。它是一个显式操作，在以编程方式操作实体时必须调用。Drupal仅在通过其表单修改实体时调用实体验证。
- en: At the same time, the invoker of the entity invalidation must choose how to
    react to constraint violations, such as our recipe did to prevent the entity from
    being saved. An invalid entity can always be saved programmatically.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，实体无效化的调用者必须选择如何对约束违规做出反应，就像我们的菜谱那样防止实体被保存。无效实体始终可以通过编程方式保存。
- en: There’s more…
  id: totrans-568
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are more options when validating an entity’s values. Let us see a few
    of these options in the following sections.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证实体值时，有更多选项。让我们在接下来的几节中看看这些选项。
- en: Validating fields directly
  id: totrans-570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接验证字段
- en: 'Field item classes have a `validate` method for directly validating a specific
    field instead of validating the entire entity. This can be done by using the `get`
    method to get the field item and then invoking the `validate` method on the field
    item:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 字段项类有一个`validate`方法，可以直接验证特定字段而不是验证整个实体。这可以通过使用`get`方法获取字段项，然后在字段项上调用`validate`方法来完成：
- en: '[PRE430]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: Filtering constraint violations
  id: totrans-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤约束违规
- en: 'The `EntityConstraintViolationListInterface` class extends the `Symfony\Component\Validator\ConstraintViolationListInterface`
    class provided by Symfony. This adds Drupal-specific methods for filtering returned
    violations. The following methods are available to filter the violations:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '`EntityConstraintViolationListInterface` 类扩展了由 Symfony 提供的 `Symfony\Component\Validator\ConstraintViolationListInterface`
    类。这为 Drupal 添加了特定的方法来过滤返回的违规。以下方法可用于过滤违规：'
- en: '`getEntityViolations`: Some violations may be at the entity level and not at
    the class level. Constraints may be applied at the entity level and not to specific
    fields. For example, the Workspaces module adds a constraint at the entity level
    to check for workspace conflicts.'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getEntityViolations`：一些违规可能位于实体级别，而不是类级别。约束可能应用于实体级别，而不是特定字段。例如，Workspaces
    模块在实体级别添加了一个约束来检查工作区冲突。'
- en: '`filterByFields`: Given a series of field names, the violations are reduced
    to only those that apply to those fields.'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filterByFields`：给定一系列字段名，违规将仅限于那些适用于这些字段。'
- en: '`filterByFieldAccess`: This filters the violations based on fields accessible
    only to the user. Drupal allows saving entities in an invalid state, especially
    if a workflow allows a less privileged user to modify specific fields of an entity.
    If using this filter, be cautious because the entity must have updated fields
    the user may not have had access to.'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filterByFieldAccess`：此过滤器基于用户可访问的字段过滤违规。Drupal 允许以无效状态保存实体，特别是如果工作流允许权限较低的用户修改实体的特定字段。如果使用此过滤器，请谨慎，因为实体必须具有用户可能没有访问权限的更新字段。'
- en: The previous methods always return a new object instance and do not have side
    effects on the original violations list.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的方法总是返回一个新的对象实例，并且不会对原始违规列表产生副作用。
- en: Deleting an entity
  id: totrans-579
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除实体
- en: In this recipe, we will walk through deleting an entity. Deleting an entity
    allows you to remove an entity from the database so that it no longer exists.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 在此菜谱中，我们将逐步讲解如何删除实体。删除实体允许您从数据库中删除实体，使其不再存在。
- en: How to do it…
  id: totrans-581
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create a `delete` method in the `ArticleController` controller in your module
    that has a parameter for the node entity object that will be provided by a route
    parameter:'
  id: totrans-582
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的模块中，在 `ArticleController` 控制器中创建一个 `delete` 方法，该方法有一个参数用于节点实体对象，该对象将由路由参数提供：
- en: '[PRE431]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'To delete an entity, you will invoke the `delete` method:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除实体，您将调用 `delete` 方法：
- en: '[PRE442]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: The `delete` method immediately removes the entity from the database storage.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete` 方法立即从数据库存储中删除实体。'
- en: 'We will then return an empty JSON response:'
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将返回一个空的 JSON 响应：
- en: '[PRE446]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: When no content is returned, we will use the `204 No Content` status code.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有返回内容时，我们将使用 `204 No Content` 状态码。
- en: 'We must create the route in `routing.yml` that points to the `delete` method
    of `ArticleController` for an HTTP `DELETE` request to the `/``articles/{node}`
    path:'
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在 `routing.yml` 中创建路由，该路由指向 `ArticleController` 的 `delete` 方法，以便对 `/articles/{node}`
    路径进行 HTTP `DELETE` 请求：
- en: '[PRE451]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: 'This route should have `_entity_access: ''node.delete''` for its requirements.
    However, we have used `_access: ''TRUE''` to bypass access checks for this recipe.'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '此路由的要求应该是 `_entity_access: ''node.delete''`。然而，我们使用了 `_access: ''TRUE''` 来绕过此菜谱的访问检查。'
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的 Drupal 网站缓存，使其了解新的路由：
- en: '[PRE459]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: 'An HTTP request such as the following can then be used to retrieve an article
    that is on your Drupal site:'
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用如下 HTTP 请求检索您 Drupal 网站上的文章：
- en: '[PRE460]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: 'A second HTTP request to get the article will return a `404 Not Found` response
    since it has been deleted:'
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对文章进行第二次 HTTP 请求将返回 `404 Not Found` 响应，因为它已被删除：
- en: '[PRE462]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: How it works…
  id: totrans-625
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `delete` method on the entity class is delegated to the `delete` method
    on the entity type’s storage handler. When a content entity is deleted, the storage
    purges all field values from the database and the entity’s database record. Deletion
    is permanent and cannot be reversed.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类上的 `delete` 方法被委派给实体类型存储处理器的 `delete` 方法。当内容实体被删除时，存储会从数据库中清除所有字段值和实体的数据库记录。删除是永久的，无法撤销。
- en: 'When an entity is deleted, the entity storage fires invoke the following hooks,
    allowing you to hook into an entity’s deletion. The entity being deleted is passed
    as an argument:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 当实体被删除时，实体存储会触发以下钩子，允许您挂钩到实体的删除。正在删除的实体作为参数传递：
- en: '`hook_ENTITY_TYPE_predelete`'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_ENTITY_TYPE_predelete`'
- en: '`hook_entity_predelete`'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_entity_predelete`'
- en: '`hook_ENTITY_TYPE_delete`'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_ENTITY_TYPE_delete`'
- en: '`hook_entity_delete`'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hook_entity_delete`'
- en: Throwing an exception in a hook will roll back the database transaction and
    prevent the entity from being deleted, but it may also crash Drupal if not handled
    appropriately.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 在钩子中抛出异常将回滚数据库事务并阻止实体被删除，但如果不适当处理，也可能导致Drupal崩溃。
