- en: Chapter 5. Reflection and Unit Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：反射与单元测试
- en: PHP5 brings in many new flavors compared to PHP4\. It replaces many old APIs
    with smarter, new ones. One of them is Reflection API. Using this cool set of
    API, you can reverse engineer any class or object to figure out its properties
    and methods. You can invoke those methods dynamically and do some more. In this
    chapter we will learn in more detail about reflections and use of each of these
    functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PHP5 相比 PHP4 带来了许多新的特性。它用更智能的新 API 替换了许多旧的 API。其中之一就是反射 API。使用这个酷炫的 API 集合，你可以逆向工程任何类或对象，以了解其属性和方法。你可以动态地调用这些方法并做更多的事情。在本章中，我们将更详细地学习反射以及这些函数的用法。
- en: Another very important part of software development is building test suits for
    automated testing of your piece of work. This is to ensure it's working correctly
    and after any changes it maintains backward compatibility. To ease the process
    for PHP developers, there are a lot of testing tools available on the market.
    Among them are some very popular tools like PHPUnit. In this chapter we will learn
    about unit testing with PHP.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发的另一个非常重要的部分是为你的作品构建测试套件以进行自动化测试。这是为了确保它能够正确工作，并且在任何更改之后保持向后兼容性。为了简化 PHP
    开发者的过程，市场上有很多测试工具。其中一些非常流行的工具有 PHPUnit。在本章中，我们将学习使用 PHP 进行单元测试。
- en: Reflection
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reflection
- en: 'Reflection API provides some functionality to find out what is inside an object
    or a class at runtime. Besides that, reflection API lets you invoke dynamically
    any method or property of any object. Let''s get our hands dirty with reflection.
    There are numerous objects introduced in reflection API. Among them, the following
    are important:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 反射 API 提供了一些功能，可以在运行时找出对象或类中的内容。除此之外，反射 API 允许你动态地调用任何对象的任何方法或属性。让我们来实际操作一下反射。反射
    API 中引入了众多对象。其中，以下对象非常重要：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let us go and play with `ReflectionClass` first.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先去玩一玩 `ReflectionClass` 吧。
- en: ReflectionClass
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReflectionClass
- en: 'This is one of the major core classes in reflection API. This class helps you
    to reverse engineer any object in the broad sense. The structure of this class
    is shown here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是反射 API 中的一个主要核心类。这个类帮助你以广义的方式逆向工程任何对象。这个类的结构如下所示：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s discuss how this class actually works. First we will find their methods
    and purpose:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下这个类是如何实际工作的。首先，我们将找到它们的方法和目的：
- en: '`export()` method dumps the internal structure of any object, which is almost
    similar to `var_dump` function.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export()` 方法将任何对象的内部结构输出，这与 `var_dump` 函数类似。'
- en: '`getName()` function returns the internal name of an object, hence the class
    name.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getName()` 函数返回对象的内部名称，即类名。'
- en: '`isInternal()` returns true if the class is a built-in object inside PHP5\.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isInternal()` 方法如果类是 PHP5 内置对象则返回 true。'
- en: '`isUserDefined()` is the opposite of `isInternal()` method. It just returns
    whether the object is defined by the user.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isUserDefined()` 方法与 `isInternal()` 方法的相反。它仅仅返回对象是否是由用户定义的。'
- en: '`getFileName()` function returns the PHP script file name where the class is
    written.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getFileName()` 函数返回包含类的 PHP 脚本文件名。'
- en: '`getStartLine()` returns at which line the code of that class begins in the
    script file.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getStartLine()` 返回该类代码在脚本文件中的起始行。'
- en: '`getDocComment()` is another interesting function which returns the class level
    document for that object. We will demonstrate it in examples later in this chapter.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDocComment()` 是另一个有趣的函数，它返回该对象的类级别文档。我们将在本章后面的示例中演示它。'
- en: '`getConstructor()` returns the reference of the constructor of the object as
    a `ReflectionMethod` object.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getConstructor()` 返回对象的构造函数的引用，作为一个 `ReflectionMethod` 对象。'
- en: '`getMethod()` function returns the address of any method passed to it as a
    string. The returned object is a `ReflectionMethod` object.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getMethod()` 函数返回传递给它的任何方法的地址。返回的对象是一个 `ReflectionMethod` 对象。'
- en: '`getMethods()` returns an array of all the methods in the object. In that array
    every method is returned as `ReflectionMethod` object.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getMethods()` 返回对象中所有方法的数组。在该数组中，每个方法都返回为一个 `ReflectionMethod` 对象。'
- en: '`getProperty()` function returns a reference to any property in that object,
    as a `ReflectionProperty` object.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getProperty()` 函数返回该对象中任何属性的引用，作为一个 `ReflectionProperty` 对象。'
- en: '`getConstants()` returns an array of constants in that object.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getConstants()` 返回该对象中常量的数组。'
- en: '`getConstant()` returns the value of any particular constant.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getConstant()` 返回任何特定常量的值。'
- en: If you want a reference to the interfaces that a class implemented (if any),
    you can use `getInterfaces()` function which, returns an array of interfaces as
    `ReflectionClass` object.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想查看一个类实现（如果有）的接口引用，您可以使用`getInterfaces()`函数，该函数返回一个包含`ReflectionClass`对象的接口数组。
- en: The `getModifiers()` method returns the list of modifiers relevant to that class.
    For example, it could be public, private, protected, abstract, static, or final.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getModifiers()`方法返回与该类相关的修饰符列表。例如，它可能是公共的、私有的、受保护的、抽象的、静态的或最终的。'
- en: '`newInstance()` `f`unction returns a new instance of that class and returns
    it as a regular object (which is actually `stdClas;` `stdClass` is the base class
    of every PHP object).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`newInstance()` `函数返回该类的新实例，并以常规对象的形式返回它（实际上是`stdClas;` `stdClass`是每个PHP对象的基础类）。'
- en: You want a reference to the parent class of any class? You can use `getParentClass()`
    method to get that as a `ReflectionClass` object.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想获取任何类的父类引用？您可以使用`getParentClass()`方法来获取它，作为`ReflectionClass`对象。
- en: Another cool function of `ReflectionClass()` is that it can tell from which
    extension a class has been originated. For example, `ArrayObject` class is originated
    from SPL class. You have to use `getExtensionName()` function for that.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReflectionClass()`的另一个酷炫功能是它可以告诉你一个类是从哪个扩展中起源的。例如，`ArrayObject`类是从SPL类起源的。您必须使用`getExtensionName()`函数来实现这一点。'
- en: Let's write some code now. We will see these functions in real life code. Here,
    I am showing a fantastic example taken from the PHP Manual.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来写一些代码。我们将看到这些函数在实际代码中的应用。在这里，我展示了一个来自PHP手册的精彩示例。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now save the above code in a file named `class.counter.php`. When you run the
    above code, you will get the following output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将上述代码保存到名为`class.counter.php`的文件中。当您运行上述代码时，您将得到以下输出：
- en: '**X-Powered-By: PHP/5.1.1**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**X-Powered-By: PHP/5.1.1**'
- en: '**Content-type: text/html**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容类型: text/html**'
- en: '**===> The user-defined class ''Counter'' [extends ReflectionClass::__set_state(array(**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**===> 用户定义的类 ''Counter'' [扩展 ReflectionClass::__set_state(array(**'
- en: '**''name'' => ''Object'',**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**''name'' => ''Object'',**'
- en: '**))]**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**))]**'
- en: '**declared in PHPDocument2**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**在PHPDocument2中声明**'
- en: '**lines 15 to 29**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**第15行到第29行**'
- en: '**having the modifiers 0 []**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**具有修饰符 0 []**'
- en: '**---> Documentation:**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**---> 文档:**'
- en: '**''/****'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**''/****'
- en: '*** A counter class**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*** 一个计数器类**'
- en: '***/''**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '***/''**'
- en: '**---> Implements:**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**---> 实现:**'
- en: '**array (**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**array (**'
- en: '**0 =>**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**0 =>**'
- en: '**ReflectionClass::__set_state(array(**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**ReflectionClass::__set_state(array(**'
- en: '**''name'' => ''NSerializable'',**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**''name'' => ''NSerializable'',**'
- en: '**)),**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**)),**'
- en: '**)**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**---> Constants: array (**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**---> 常量: array (**'
- en: '**''START'' => 0,**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**''START'' => 0,**'
- en: '**)**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**---> Properties: array (**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**---> 属性: array (**'
- en: '**0 =>**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**0 =>**'
- en: '**ReflectionProperty::__set_state(array(**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**ReflectionProperty::__set_state(array(**'
- en: '**''name'' => ''c'',**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**''name'' => ''c'',**'
- en: '**''class'' => ''Counter'',**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**''class'' => ''Counter'',**'
- en: '**)),**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**)),**'
- en: '**)**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**---> Methods: array (**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**---> 方法: array (**'
- en: '**0 =>**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**0 =>**'
- en: '**ReflectionMethod::__set_state(array(**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**ReflectionMethod::__set_state(array(**'
- en: '**''name'' => ''count'',**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**''name'' => ''count'',**'
- en: '**''class'' => ''Counter'',**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**''class'' => ''Counter'',**'
- en: '**)),**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**)),**'
- en: '**)**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**---> $counter is instance? yes**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**---> $counter 是实例？是**'
- en: '**---> new Object() is instance? No**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**---> new Object() 是实例？否**'
- en: ReflectionMethod
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReflectionMethod
- en: 'This is the class used to investigate any method of the class and then invoke
    it. Let us see the structure of this class:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于调查类的任何方法并调用它的类。让我们看看这个类的结构：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The most important methods of this class are `getNumberOfParamaters`, `getNumberOfRequiredParameters`,
    `getParameters`, and `invoke`. The first three of these are self explanatory;
    let''s look at the fourth one which is invoked. This is a nice example taken from
    the PHP Manual:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类最重要的方法是`getNumberOfParameters`、`getNumberOfRequiredParameters`、`getParameters`和`invoke`。前三个方法很容易理解；让我们看看第四个方法，即调用。这是一个来自PHP手册的精彩示例：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When executed, this code will give the following output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行此代码时，将给出以下输出：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ReflectionParameter
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReflectionParameter
- en: 'Another very important object in the reflection family is `ReflectionParameter`.
    Using this class you can analyze parameters of any method and take action accordingly.
    Let us take a look at the object structure:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 反射家族中另一个非常重要的对象是`ReflectionParameter`。使用这个类，您可以分析任何方法的参数并相应地采取行动。让我们看看这个对象的结构：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To make things easier, have a look at the following example to see how this
    thing works.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更简单，请查看以下示例以了解这个功能是如何工作的。
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you run the above code snippet, you will get the following output:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行上述代码片段，您将得到以下输出：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ReflectionProperty
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReflectionProperty
- en: 'This is the last one under the reflection family that we are going to discuss
    here. This class helps you to investigate class properties and reverse engineer
    them. This class has the following structure:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们要在这里讨论的反射家族中的最后一个。这个类帮助你调查类属性并逆向工程它们。这个类具有以下结构：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here is an example taken directly from the PHP Manual, that helps describe how
    it actually works.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个直接从PHP手册中摘取的例子，有助于描述它实际上是如何工作的。
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The code produces the following output upon execution. This code inspects a
    property with the help of `ReflectionProperty` and displays the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，代码产生以下输出。此代码使用`ReflectionProperty`检查一个属性，并显示以下输出：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We will see some more uses of Reflection API in later chapters, when we will
    learn build an MVC framework.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中看到Reflection API的更多用途，当我们学习构建MVC框架时。
- en: Unit Testing
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Another very important part of programming is unit testing, by which you can
    test pieces of code, whether it works perfectly or not. You can write test cases
    against any version of your code to check if your code works after refactoring.
    Unit testing ensures the workability of the code and helps to pin-point the problem
    when it occurs. When you code your application, unit tests works as your skeleton.
    Unit testing is a mandatory part of programming for programmers of every language.
    There are unit testing packages available for almost all major programming languages.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 编程的另一个非常重要的部分是单元测试，通过它可以测试代码片段，是否工作得完美。你可以针对代码的任何版本编写测试用例，以检查重构后代码是否工作正常。单元测试确保代码的可工作性，并在问题发生时帮助定位问题。当你编写应用程序时，单元测试就像你的骨架。单元测试是所有语言程序员的编程必经之路。几乎所有主要的编程语言都有单元测试包可用。
- en: As with every other programming language, there is one package for Java that
    is considered as a standard model for every other unit testing package for other
    languages. This package is called as **JUnit** which is for Java developers. The
    standard and testing style maintained in JUnit is usually followed in many other
    unit testing packages. So JUnit has become a defacto in the unit testing area.
    The port of JUnit for PHP developers is known as **PHPUnit**, which was developed
    by Sebastian Bergmann. PHPUnit is a very popular unit testing package.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他任何编程语言一样，有一个Java包被认为是其他语言每个单元测试包的标准模型。这个包被称为**JUnit**，它是为Java开发者准备的。JUnit中维护的标准和测试风格通常被许多其他单元测试包所遵循。因此，JUnit已经成为单元测试领域的默认选择。为PHP开发者提供的JUnit版本被称为**PHPUnit**，由Sebastian
    Bergmann开发。PHPUnit是一个非常流行的单元测试包。
- en: One of the main reasons for writing unit tests is that you cannot figure out
    all the bugs if you just write your code and deploy your application. There might
    be small bugs that might crash your application violently by returning a non relevant
    value. Don't overlook these small scenarios. There might be cases when you wouldn't
    imagine one of your codes returning an extremely odd result. Unit testing helps
    you by writing different test cases. Unit testing is not a thing which needs a
    lot of time to write, however the outcome is amazing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试的主要原因是，如果你只是编写代码并部署应用程序，你无法找出所有的错误。可能会有一些小错误，通过返回一个不相关的值，可能会使你的应用程序突然崩溃。不要忽视这些小场景。可能会有你无法想象到你的代码返回一个极其奇怪结果的情况。单元测试通过编写不同的测试用例来帮助你。单元测试不是一件需要花费很多时间来编写的事情，然而结果却是惊人的。
- en: In the following section we will learn the basics of unit testing, and get our
    hands dirty writing successful unit tests.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习单元测试的基础知识，并亲自动手编写成功的单元测试。
- en: Benefits of Unit Testing
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试的好处
- en: 'Unit testing has a lot of benefits, some of them are that it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试有很多好处，其中一些是它：
- en: Ensures the consistency of your application.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的应用程序的一致性。
- en: Ensures the workability of your complete application after any kind of refactoring.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在重构后你的完整应用程序仍然可用。
- en: Checks the redundancy and removes them from your code.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查冗余并从你的代码中移除它们。
- en: Designs good API.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计良好的API。
- en: Easily figures out where the problem is.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以轻松地找出问题所在。
- en: Speeds up the debugging process if anything goes wrong; as you know particularly
    where the bug resides.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果出现问题，可以加快调试过程；正如你所知，尤其是你知道错误所在的地方。
- en: Minimizes the effort of documentation by providing working examples of your
    API.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提供API的工作示例来最小化文档的工作量。
- en: Helps to do a regression test so that no regression occurs again.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助进行回归测试，以确保不再发生回归。
- en: A small Introduction to Vulnerable Bugs
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脆弱漏洞的简要介绍
- en: 'Bugs can be of different types. Some bugs could just bother your users, some
    bug stops the functionality, and some bug vulnerability corrupts your resources.
    Let us consider the following example. You have written a function which takes
    two parameters and updates the database accordingly. The first parameter is the
    name of the field and the second parameter is the value of that field by which
    it should locate the data and then update them. Now let us design it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 缺陷可能有不同类型。一些缺陷可能会困扰你的用户，一些缺陷会停止功能，而一些缺陷漏洞会损坏你的资源。让我们考虑以下示例。你编写了一个函数，它接受两个参数并相应地更新数据库。第一个参数是字段的名称，第二个参数是那个字段的值，通过这个值它应该定位数据并更新它们。现在让我们设计它：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now when you call it like this, it shows a specific data:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你这样调用它时，它会显示特定的数据：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'But when you call it like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当你这样调用它时：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It displays the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了以下内容：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is not a correct output; and as it is happening in runtime if it was `update`
    instead of a `select` query, your whole data may get corrupt. So how can you ensure
    that the output is always a valid one? Well, we will do that easily with unit
    testing later in this chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个正确的输出；并且如果在运行时它是一个`update`查询而不是`select`查询，你的整个数据可能会被损坏。那么你如何确保输出始终是有效的呢？嗯，我们将在本章的后面通过单元测试轻松地做到这一点。
- en: Preparing for Unit Testing
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备进行单元测试
- en: To write successful unit test for PHP applications using PHPUnit, you need to
    download the package, configure it, and then do some small tasks before actually
    being able to execute your tests.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PHPUnit为PHP应用程序编写成功的单元测试，你需要下载该包，配置它，然后在实际执行测试之前做一些小任务。
- en: You can either run PHPUnit tests from the command line or from inside your script.
    For now we will run our tests from within our script, but in later sections, we
    will learn how to run unit tests from command line.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从命令行或从你的脚本内部运行PHPUnit测试。目前，我们将从我们的脚本内部运行测试，但在后面的章节中，我们将学习如何从命令行运行单元测试。
- en: 'To start, download the package from [http://www.phpunit.de](http://www.phpunit.de)
    and extract it in your include path. If you are not sure what is your include
    path you can get that from `include_path` settings in your `php.ini`. Or you can
    execute the following PHP script to display the output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从[http://www.phpunit.de](http://www.phpunit.de)下载该包，并将其提取到你的包含路径中。如果你不确定你的包含路径是什么，你可以从`php.ini`中的`include_path`设置中获取它。或者，你可以执行以下PHP脚本来显示输出：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now extract the PHPUnit archive and place the PHPUnit folder in a folder, which
    is in your include path. This PHPUnit folder contains two other folders named
    `PHPUnit` and `PHPUnit2`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，提取PHPUnit存档，并将PHPUnit文件夹放置在包含路径中的一个文件夹中。这个PHPUnit文件夹包含两个其他文件夹，分别命名为`PHPUnit`和`PHPUnit2`。
- en: You are done as soon as you place the folders in your include path directories.
    Now we are ready to go.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将文件夹放置在你的包含路径目录中时，你就完成了。现在我们准备出发了。
- en: Starting Unit Testing
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始单元测试
- en: A unit test is actually a collection of different tests against your code. It
    is not a big job to write unit tests using PHPUnit. All you have to do is simply
    follow a set of conventions. Let's take a look at the following example, where
    you create a string manipulator class, which returns the number of words available
    in a string.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试实际上是对你的代码进行的一系列不同测试。使用PHPUnit编写单元测试并不是一项大工程。你只需要简单地遵循一套约定。让我们看看以下示例，其中你创建了一个字符串处理类，该类返回字符串中可用的单词数量。
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now we will write a unit test for this class. We have to extend the `PHPUnit_Framework_TestCase`
    to write any unit test. And we have to use `PHPUnit_Framework_TestSuite` to create
    the test suite, which actually holds a collection of tests. Then we will use `PHPUnit_TextUI_TestRunner`
    to run the tests from the suite and print the result.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为这个类编写一个单元测试。我们必须扩展`PHPUnit_Framework_TestCase`来编写任何单元测试。我们必须使用`PHPUnit_Framework_TestSuite`来创建测试套件，它实际上包含了一系列测试。然后我们将使用`PHPUnit_TextUI_TestRunner`从套件中运行测试并打印结果。
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Running the test:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now if you run the code in `testsuite.wordcount.php` you will get the following
    output:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你在`testsuite.wordcount.php`中运行代码，你将得到以下输出：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That means our test has passed and our word-counter function works perfectly,
    however, we will write some more test cases for that function.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的测试已经通过，我们的单词计数函数工作得非常完美，然而，我们还将为该函数编写更多的测试用例。
- en: 'Let us add this new test case in our `class.testwordcount.php`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`class.testwordcount.php`中添加这个新的测试用例：
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now if we run our test suite we will get the following result:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们运行我们的测试套件，我们将得到以下结果：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here, we found that our foolproof word-count function fails. So what was our
    test input? We just add more spaces in our test parameter `my` `name` `is` `afif`,
    and then our function fails. This is because it splits the sentence with white
    space and returns the number of split parts. As there are more white spaces, so
    our function fails gracefully. That''s a pretty nice test case; we found that
    our function might fail in real life if we release our code with this version
    of word counter. PHPUnit has become useful for us already. Now we will solve our
    function so that it returns the correct result if our sentence contains more white
    spaces. We change our `class.wordcount.php` to this new one:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们发现我们的万无一失的单词计数函数失败了。那么我们的测试输入是什么？我们只是在测试参数`my` `name` `is` `afif`中添加了更多的空格，然后我们的函数失败了。这是因为它用空白字符分割句子，并返回分割的部分数。因为有更多的空白字符，所以我们的函数优雅地失败了。这是一个相当好的测试用例；我们发现，如果我们用这个版本的单词计数器发布我们的代码，我们的函数在现实生活中可能会失败。PHPUnit已经对我们很有用了。现在我们将解决我们的函数，使其在句子包含更多空格时返回正确的结果。我们将`class.wordcount.php`更改为这个新版本：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now if we run our test suite, it will give the following output.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们运行我们的测试套件，它将给出以下输出。
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'However we want more proof that our function will work better in the wild.
    So we are writing another test case. Let''s add this new test case in our `class.testwordcount.php`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们希望有更多的证据表明我们的函数在野外将工作得更好。因此，我们正在编写另一个测试用例。让我们在`class.testwordcount.php`中添加这个新的测试用例：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: And let's run the suit again. What is the result now?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行这个套件。现在结果是什么？
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That's pretty satisfying. All our tests are running ok. The function is now
    a good one.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当令人满意。所有的测试都在正常运行。现在这个函数已经很好了。
- en: This is how unit test can help us in real life.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是单元测试如何在现实生活中帮助我们。
- en: Testing an Email Validator Object
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试电子邮件验证器对象
- en: 'Now, let''s repeat the steps again. This time we will write unit tests for
    our brand new `Emailvalidator` class which our developer said is a good one. Let''s
    take a look at our validator function first:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次重复这些步骤。这次我们将为我们的全新`Emailvalidator`类编写单元测试，我们的开发者说这是一个好的类。让我们首先看看我们的验证器函数：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And here comes our test case:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们的测试用例：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now you have to write the test suit and run:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你必须编写测试套件并运行：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You will get the following output when you run this test suite:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个测试套件时，你会得到以下输出：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now try harder; try to break your code. Try all the possible cases that may
    occur in an email and try as many as you can. We are going to add more test cases:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更加努力；尝试破坏你的代码。尝试所有可能出现在电子邮件中的情况，尽可能多地尝试。我们将添加更多的测试用例：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When you run the test suite, you will get the following result:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行测试套件时，你会得到以下结果：
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: So our email validator fails! If you look at the result you will see that it
    fails with `testEmailWithDotInName`. Therefore, we have to change the regular
    expression pattern we used and allow `.` in the name.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的电子邮件验证器失败了！如果你查看结果，你会看到它因`testEmailWithDotInName`而失败。因此，我们必须更改我们使用的正则表达式模式，并允许在名称中使用`.`。
- en: 'Let''s redesign the validator as show here:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式重新设计验证器：
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now if you run your test suites again, you will see the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你再次运行你的测试套件，你会看到以下输出：
- en: '[PRE36]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Our test passes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试通过了。
- en: So what is the benefit? Time after time, when you need to add new validation
    rules to your regular expression, this unit test will help to do the regression
    test so that the same fault never occurs again.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 那么好处是什么？一次又一次，当你需要向你的正则表达式添加新的验证规则时，这个单元测试将帮助你进行回归测试，以确保同样的错误不再发生。
- en: That's the beauty of Unit Testing.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是单元测试的美丽之处。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will find two functions named `setUp()` and `tearDown()` in the above example.
    `setUp()` is used for setting up everything for the test; you can use it to connect
    to DB, to open a file or something similar. `tearDown()` is for cleaning. It is
    called when the script finishes executing.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在上面的例子中找到两个名为`setUp()`和`tearDown()`的函数。`setUp()`用于为测试设置一切；你可以用它来连接到数据库，打开一个文件或类似的东西。`tearDown()`用于清理。它在脚本执行完毕时被调用。
- en: Unit Testing for Everyday Script
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每日脚本单元测试
- en: Alongside these unit tests for functions and small classes, you will need to
    write unit tests for a final result achieved by different functions. However,
    as specific you go with your unit tests, the better outcome you can expect. Do
    also remember that of the many unit tests you write, only few of them are actually
    useful.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些函数和小类的单元测试之外，你还需要为不同函数最终得到的结果编写单元测试。然而，你的单元测试越具体，你预期的结果就越好。也要记住，在你写的许多单元测试中，只有少数是有用的。
- en: Now we will discuss how to test routines that works with a database. Let us
    create a small class which inserts, finds and updates the record, which we will
    write unit tests for. Here comes our small class, which directly interacts with
    a table named `users` in our database.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论如何测试与数据库一起工作的例程。让我们创建一个小的类，它可以直接与数据库中的`users`表交互，我们将为它编写单元测试。以下是我们的小型类，它直接与数据库中的`users`表交互。
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We need to test all the public methods in this class to ensure they are working
    properly. So here come our test cases.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要测试这个类中的所有公共方法，以确保它们正常工作。因此，我们的测试用例如下。
- en: '[PRE38]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The test suite is like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件如下：
- en: '[PRE39]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: So what result will you get?
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到什么结果呢？
- en: '[PRE40]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'However, these are basic functionality tests. We must make more versatile tests
    and find out how our objects may fail. Let''s add two more tests as shown below:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些都是基本功能测试。我们必须创建更多样化的测试，并找出我们的对象可能失败的方式。让我们添加两个更多的测试，如下所示：
- en: '[PRE41]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now if you run the test suite you will get the following result:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你运行测试套件，你会得到以下结果：
- en: '[PRE42]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Our DB code is looking hard to break.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据库代码看起来很难破坏。
- en: In real life unit testing, you need to think beyond how you can break your own
    code. If you can write unit tests that break your existing code, that's better.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中的单元测试中，你需要考虑如何破坏你自己的代码。如果你能编写破坏现有代码的单元测试，那就更好了。
- en: Test Driven Development
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: 'Now it''s time to go further into unit testing. You may ask when you need to
    write unit tests before coding for applications: during time of development, or
    after finishing coding? Well, developers from different corners have different
    things to say, however it is found to be more useful to write the test first and
    then go for a real application. This is called **Test Driven Development** or
    **TDD** in short. TDD helps you to design better API for your application.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候进一步学习单元测试了。你可能想知道在为应用程序编码之前何时需要编写单元测试：是在开发期间，还是编码完成后？嗯，来自不同领域的开发者有不同的看法，然而发现先编写测试然后进行实际应用更为有用。这被称为**测试驱动开发**或简称**TDD**。TDD可以帮助你为应用程序设计更好的API。
- en: You may ask how to write tests when you don't have any real code, and which
    things to test? You don't need real objects for TDD. Just imagine some mock objects,
    which have just the functions. You will use those functions with the imaginary
    result. You can also write incomplete tests, which means a test with blank body.
    At your own convenience, you can write you can write the content of the test.
    Let's see the following example to understand how unit testing before real code
    actually fits in project development.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问在没有实际代码的情况下如何编写测试，以及要测试哪些内容？你不需要真实对象进行TDD。只需想象一些模拟对象，它们只具有函数。你将使用这些函数与想象的结果。你也可以编写不完整的测试，这意味着一个空体的测试。在你方便的时候，你可以编写测试的内容。让我们看看以下示例，了解在实际代码编写之前的单元测试是如何适合项目开发的。
- en: 'PHPUnit provides you a lot of useful API for test-first programming such as
    `markTestSkipped()` and `markTestIncomplete()`. We will use these two methods
    to mark some of our tests, which are not implemented. Let us design a small feedback
    manager which can accept user''s feedback and mail them to you. So what could
    be the useful features of a feedback manager? I would suggest the following:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit为你提供了许多用于测试优先编程的有用API，例如`markTestSkipped()`和`markTestIncomplete()`。我们将使用这两个方法来标记一些尚未实现的自定义测试。让我们设计一个小型反馈管理器，它可以接受用户的反馈并将邮件发送给你。那么反馈管理器有哪些有用的功能呢？我建议以下功能：
- en: It can render a feedback form.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以生成一个反馈表单。
- en: It will handle user's input and properly filter it.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将处理用户的输入并正确过滤它。
- en: It will have a spam prevention functionality.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将具有防垃圾邮件功能。
- en: It will prevent any automated feedback submitted by bots or spammers.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将防止任何由机器人或垃圾邮件发送者提交的自动化反馈。
- en: It will render a confirmation after submission of feedback, mailing it to owner.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提交反馈后，它会生成一个确认，并将邮件发送给所有者。
- en: 'Let''s create some blank unit tests for this. Here comes our test case, before
    we have the real code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个创建一些空白单元测试。以下是我们的测试用例，在我们有实际代码之前：
- en: '[PRE43]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This is good; we have now created 11 blank tests. Now if you run this test
    case using test suite, you will get the following result:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好；我们现在已经创建了11个空白测试。现在如果你使用测试套件运行这个测试用例，你会得到以下结果：
- en: '[PRE44]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'PHPUnit successfully figured out that all our tests are marked as incomplete.
    Now let''s think again. If you generate an `InputValidator` object, which validates
    user input and filters all malicious data from it, then we may have only one test
    case, `testValidInput()` instead of all these `testValidUserName()`, `testValidSubject()`,
    `testValidContent()`. So we can skip those tests. Now let''s create the new test
    routine `testValidInput()` and mark it as incomplete:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit成功识别出我们所有的测试都被标记为不完整。现在让我们再思考一下。如果你生成一个 `InputValidator` 对象，它验证用户输入并过滤掉所有恶意数据，那么我们可能只有一个测试用例，即
    `testValidInput()`，而不是所有的这些 `testValidUserName()`、`testValidSubject()`、`testValidContent()`。因此，我们可以跳过这些测试。现在让我们创建新的测试例程
    `testValidInput()` 并将其标记为不完整：
- en: '[PRE45]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'What will we do with those three tests that we plan to skip? We will not delete
    them but mark them as skipped. Modify the line `$this->markTestIncomplete()` to
    `$this->markTestSkipped()`. For example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们计划跳过的三个测试，我们将如何处理？我们不会删除它们，但会将它们标记为跳过。将 `$this->markTestIncomplete()` 行修改为
    `$this->markTestSkipped()`。例如：
- en: '[PRE46]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now if you run your test suite again you will get the following result:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你再次运行你的测试套件，你会得到以下结果：
- en: '[PRE47]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: PHPUnit is showing that it skipped three tests.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit显示它跳过了三个测试。
- en: To keep our discussion short and focussed, we will now implement only one test
    from these nine. We will test that the feedback form renderer is actually working
    fine.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的讨论简短并集中，我们现在将只实现这九个测试中的一个。我们将测试反馈表单渲染器是否真正工作正常。
- en: Now here is our revised test routine `testFormRenderer()` in our test case.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一下我们测试用例中修改后的测试例程 `testFormRenderer()`。
- en: '[PRE48]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'It clearly states that in our feedback manager there must be a method named
    `renderFeedbackForm()` and in the generated output there must be four input fields
    namely, `email`,`subject`,`username` and `message`. Now let''s create our `FeedBackManager`
    object. Here is `FeedBackManager` with a single method to render a feedback form:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 它清楚地表明，在我们的反馈管理器中必须有一个名为 `renderFeedbackForm()` 的方法，并且在生成的输出中必须有四个输入字段，即 `email`、`subject`、`username`
    和 `message`。现在让我们创建我们的 `FeedBackManager` 对象。以下是具有单个渲染反馈表单方法的 `FeedBackManager`：
- en: '[PRE49]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now if you run the unit test suite you will get the following result:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你运行单元测试套件，你会得到以下结果：
- en: '[PRE50]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Our form renderer failed. Why? Take a look at the output that comes from PHPUnit.
    It says `Message` `field` `is` `not` `present`. Oh! We forgot to place a `textarea`
    object named `message`. Let's revise our `renderFeedbackForm()` method and correct
    it.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单渲染器失败了。为什么？看看PHPUnit输出的结果。它说 `Message` `field` `is` `not` `present`。哦！我们忘记放置一个名为
    `message` 的 `textarea` 对象了。让我们修改我们的 `renderFeedbackForm()` 方法并纠正它。
- en: '[PRE51]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We have added the message field. Now let''s run the suite again. You will get
    the following output:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了消息字段。现在让我们再次运行套件。你会得到以下输出：
- en: '[PRE52]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Great! Our test has passed. That means our rendered form is potentially error
    free.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们的测试通过了。这意味着我们的渲染表单可能没有错误。
- en: This is the style of Test Driven Development. You have to foresee your application
    code before it is actually written. Using TDD helps you to design good API and
    good code.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试驱动开发（TDD）的风格。在实际编写代码之前，你必须预见你的应用程序代码。使用TDD可以帮助你设计良好的API和良好的代码。
- en: Writing Multiple Assertions
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写多个断言
- en: Don't write multiple assertions under one test. Split it as shown in the example
    above. To clarify, the following example is a bad example of a unit test.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在一个测试下写多个断言。按照上面的示例进行拆分。为了澄清，以下示例是一个单元测试的糟糕例子。
- en: '[PRE53]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This code will run, but multiple assertions in a single routine are prohibited
    and are against good application design.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将会运行，但在单个例程中多个断言是被禁止的，并且违反了良好的应用程序设计。
- en: PHPUnit API
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHPUnit API
- en: There are several types of asserting API provided by PHPUnit. In our examples
    we used ones like `assertTrue()`, `assertEquals()`, `assertFalse()`, and `assertNotNull()`.
    However, there are dozens more. The function names are self explanatory. The following
    table is taken from the book *PHPUnit Pocket Guide* written by Sebastian Bergmann
    himself and published by O'Reilly. The book is made free by O'Reilly and Sebastian
    Bergmann under the Creative Commons License. The latest version of this book is
    currently available at [http://www.phpunit.de/pocket_guide/3.0/en/index.html](http://www.phpunit.de/pocket_guide/3.0/en/index.html).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit提供了几种断言API。在我们的示例中，我们使用了 `assertTrue()`、`assertEquals()`、`assertFalse()`
    和 `assertNotNull()` 等函数。然而，还有更多。函数名是自我解释的。以下表格取自Sebastian Bergmann本人撰写的《PHPUnit口袋指南》一书，由O'Reilly出版。这本书在Creative
    Commons许可下免费提供。这本书的最新版本目前可在[http://www.phpunit.de/pocket_guide/3.0/en/index.html](http://www.phpunit.de/pocket_guide/3.0/en/index.html)找到。
- en: 'The following table shows all the assert functions possible with PHPUnit:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了 PHPUnit 所有可能的断言函数：
- en: '| Assertion | Meaning |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 断言 | 含义 |'
- en: '| --- | --- |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `void` `assertTrue(bool` `$condition)` | Reports an error if `$condition`
    is `FALSE`. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertTrue(bool` `$condition)` | 如果 `$condition` 是 `FALSE`，则报告一个错误。
    |'
- en: '| `void` `assertTrue(bool` `$condition,` `string` `$message)` | Reports an
    error identified by `$message` if `$condition` is `FALSE`. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertTrue(bool` `$condition,` `string` `$message)` | 如果 `$condition`
    是 `FALSE`，则通过 `$message` 指定的错误信息报告一个错误。 |'
- en: '| `void` `assertFalse(bool` `$condition)` | Reports an error if `$condition`
    is `TRUE`. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertFalse(bool` `$condition)` | 如果 `$condition` 是 `TRUE`，则报告一个错误。
    |'
- en: '| `void` `assertFalse(bool` `$condition,` `string` `$message)` | Reports an
    error identified by `$message` if `$condition` is `TRUE`. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertFalse(bool` `$condition,` `string` `$message)` | 如果 `$condition`
    是 `TRUE`，则通过 `$message` 指定的错误信息报告一个错误。 |'
- en: '| `void` `assertNull(mixed` `$variable)` | Reports an error if `$variable`
    is not `NULL`. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNull(mixed` `$variable)` | 如果 `$variable` 不是 `NULL`，则报告一个错误。
    |'
- en: '| `void` `assertNull(mixed` `$variable,` `string` `$message)` | Reports an
    error identified by `$message` if `$variable` is not `NULL`. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNull(mixed` `$variable,` `string` `$message)` | 如果 `$variable`
    不是 `NULL`，则通过 `$message` 指定的错误信息报告一个错误。 |'
- en: '| `void` `assertNotNull(mixed` `$variable)` | Reports an error if `$variable`
    is `NULL`. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotNull(mixed` `$variable)` | 如果 `$variable` 是 `NULL`，则报告一个错误。
    |'
- en: '| `void` `assertNotNull(mixed` `$variable,` `string` `$message)` | Reports
    an error identified by `$message` if `$variable` is `NULL`. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotNull(mixed` `$variable,` `string` `$message)` | 如果 `$variable`
    是 `NULL`，则通过 `$message` 指定的错误信息报告一个错误。 |'
- en: '| `void` `assertSame(object` `$expected,` `object` `$actual)` | Reports an
    error if the two variables `$expected` and `$actual` do not reference the same
    object. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertSame(object` `$expected,` `object` `$actual)` | 如果两个变量 `$expected`
    和 `$actual` 不引用同一个对象，则报告一个错误。 |'
- en: '| `void` `assertSame(object` `$expected,` `object` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two variables `$expected` and
    `$actual` do not reference the same object. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertSame(object` `$expected,` `object` `$actual,` `string` `$message)`
    | 如果两个变量 `$expected` 和 `$actual` 不引用同一个对象，则通过 `$message` 指定的错误信息报告一个错误。 |'
- en: '| `void` `assertSame(mixed` `$expected,` `mixed` `$actual)` | Reports an error
    if the two variables `$expected` and `$actual` do not have the same type and value.
    |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertSame(mixed` `$expected,` `mixed` `$actual)` | 如果两个变量 `$expected`
    和 `$actual` 不具有相同的类型和值，则报告一个错误。 |'
- en: '| `void` `assertSame(mixed` `$expected,` `mixed` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two variables `$expected` and
    `$actual` do not have the same type and value. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertSame(mixed` `$expected,` `mixed` `$actual,` `string` `$message)`
    | 如果两个变量 `$expected` 和 `$actual` 不具有相同的类型和值，则通过 `$message` 指定的错误信息报告一个错误。 |'
- en: '| `void` `assertNotSame(object` `$expected,` `object` `$actual)` | Reports
    an error if the two variables `$expected` and `$actual` reference the same object.
    |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotSame(object` `$expected,` `object` `$actual)` | 如果两个变量 `$expected`
    和 `$actual` 引用了同一个对象，则报告一个错误。 |'
- en: '| `void` `assertNotSame(object` `$expected,` `object` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two variables `$expected` and
    `$actual` reference the same object. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotSame(object` `$expected,` `object` `$actual,` `string` `$message)`
    | 如果两个变量 `$expected` 和 `$actual` 引用了同一个对象，则通过 `$message` 指定的错误信息报告一个错误。 |'
- en: '| `void` `assertNotSame(mixed` `$expected,` `mixed` `$actual)` | Reports an
    error if the two variables `$expected` and `$actual` have the same type and value.
    |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotSame(mixed` `$expected,` `mixed` `$actual)` | 如果两个变量 `$expected`
    和 `$actual` 具有相同的类型和值，则报告一个错误。 |'
- en: '| `void` `assertNotSame(mixed` `$expected,` `mixed` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two variables `$expected` and
    `$actual` have the same type and value. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotSame(mixed` `$expected,` `mixed` `$actual,` `string` `$message)`
    | 报告一个错误，如果两个变量 `$expected` 和 `$actual` 具有相同的类型和值，错误信息由 `$message` 指定。 |'
- en: '| `void` `assertAttributeSame(object` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if `$actualObject->actualAttributeName`
    and `$actual` do not reference the same object. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeSame(object` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果 `$actualObject->actualAttributeName` 和 `$actual`
    不引用同一个对象，则报告一个错误。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。 |'
- en: '| `void` `assertAttributeSame(object` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if `$actualObject->actualAttributeName` and `$actual` do not reference
    the same object. The visibility of the `$actualObject->actualAttributeName` attribute
    may be public, protected, or private. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeSame(object` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 如果 `$actualObject->actualAttributeName`
    和 `$actual` 不引用相同的对象，则报告由 `$message` 标识的错误。该 `$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。 |'
- en: '| `void` `assertAttributeSame(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if `$actualObject->actualAttributeName`
    and `$actual` do not have the same type and value. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeSame(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果 `$actualObject->actualAttributeName` 和 `$actual`
    没有相同的类型和值，则报告一个错误。该 `$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。
    |'
- en: '| `void` `assertAttributeSame(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if `$actualObject->actualAttributeName` and `$actual` do not have the
    same type and value. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeSame(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 如果 `$actualObject->actualAttributeName`
    和 `$actual` 没有相同的类型和值，则报告由 `$message` 标识的错误。该 `$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。 |'
- en: '| `void` `assertAttributeNotSame(object` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if `$actualObject->actualAttributeName`
    and `$actual` reference the same object. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotSame(object` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果 `$actualObject->actualAttributeName` 和 `$actual`
    引用相同的对象，则报告一个错误。该 `$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。
    |'
- en: '| `void` `assertAttributeNotSame(object` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if `$actualObject->actualAttributeName` and `$actual` reference the
    same object. The visibility of the `$actualObject->actualAttributeName` attribute
    may be public, protected, or private. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotSame(object` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 如果 `$actualObject->actualAttributeName`
    和 `$actual` 引用相同的对象，则报告由 `$message` 标识的错误。该 `$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。 |'
- en: '| `void` `assertAttributeNotSame(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if `$actualObject->actualAttributeName`
    and `$actual` have the same type and value. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotSame(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果 `$actualObject->actualAttributeName` 和 `$actual`
    具有相同的类型和值，则报告一个错误。该 `$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。
    |'
- en: '| `void` `assertAttributeNotSame(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if `$actualObject->actualAttributeName` and `$actual` have the same
    type and value. The visibility of the `$actualObject->actualAttributeName` attribute
    may be public, protected, or private. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotSame(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 如果 `$actualObject->actualAttributeName`
    和 `$actual` 具有相同的类型和值，则报告由 `$message` 标识的错误。该 `$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。 |'
- en: '| `void` `assertEquals(array` `$expected,` `array` `$actual)` | Reports an
    error if the two arrays `$expected` and `$actual` are not equal. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertEquals(array` `$expected,` `array` `$actual)` | 如果两个数组 `$expected`
    和 `$actual` 不相等，则报告一个错误。 |'
- en: '| `void` `assertEquals(array` `$expected,` `array` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two arrays `$expected` and
    `$actual` are not equal. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertEquals(array` `$expected,` `array` `$actual,` `string` `$message)`
    | 报告一个错误，如果两个数组 `$expected` 和 `$actual` 不相等。 |'
- en: '| `void` `assertNotEquals(array` `$expected,` `array` `$actual)` | Reports
    an error if the two arrays `$expected` and `$actual` are equal. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotEquals(array` `$expected,` `array` `$actual)` | 如果两个数组 `$expected`
    和 `$actual` 相等，则报告一个错误。 |'
- en: '| `void` `assertNotEquals(array` `$expected,` `array` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two arrays `$expected` and
    `$actual` are equal. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotEquals(array` `$expected,` `array` `$actual,` `string` `$message)`
    | 报告一个错误，如果两个数组 `$expected` 和 `$actual` 相等，错误由 `$message` 标识。|'
- en: '| `void` `assertEquals(float` `$expected,` `float` `$actual,` `'''',` `float`
    `$delta` `=` `0)` | Reports an error if the two floats `$expected` and `$actual`
    are not within `$delta` of each other. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertEquals(float` `$expected,` `float` `$actual,` `'''',` `float`
    `$delta` `=` `0)` | 报告一个错误，如果两个浮点数 `$expected` 和 `$actual` 不在 `$delta` 范围内。|'
- en: '| `void` `assertEquals(float` `$expected,` `float` `$actual,` `string` `$message,`
    `float` `$delta` `=` `0)` | Reports an error identified by `$message` if the two
    floats `$expected` and `$actual` are not within `$delta` of each other. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertEquals(float` `$expected,` `float` `$actual,` `string` `$message,`
    `float` `$delta` `=` `0)` | 报告一个错误，如果两个浮点数 `$expected` 和 `$actual` 不在 `$delta`
    范围内，错误由 `$message` 标识。|'
- en: '| `void` `assertNotEquals(float` `$expected,` `float` `$actual,` `'''',` `float`
    `$delta` `=` `0)` | Reports an error if the two floats `$expected` and `$actual`
    are within `$delta` of each other. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotEquals(float` `$expected,` `float` `$actual,` `'''',` `float`
    `$delta` `=` `0)` | 报告一个错误，如果两个浮点数 `$expected` 和 `$actual` 在 `$delta` 范围内。|'
- en: '| `void` `assertNotEquals(float` `$expected,` `float` `$actual,` `string` `$message,`
    `float` `$delta` `=` `0)` | Reports an error identified by `$message` if the two
    floats `$expected` and `$actual` are within `$delta` of each other. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotEquals(float` `$expected,` `float` `$actual,` `string` `$message,`
    `float` `$delta` `=` `0)` | 报告一个错误，如果两个浮点数 `$expected` 和 `$actual` 在 `$delta`
    范围内，错误由 `$message` 标识。|'
- en: '| `void` `assertEquals(string` `$expected,` `string` `$actual)` | Reports an
    error if the two strings `$expected` and `$actual` are not equal. The error is
    reported as the delta between the two strings. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertEquals(string` `$expected,` `string` `$actual)` | 报告一个错误，如果两个字符串
    `$expected` 和 `$actual` 不相等。错误报告为两个字符串之间的差值。|'
- en: '| `void` `assertEquals(string` `$expected,` `string` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two strings `$expected` and
    `$actual` are not equal. The error is reported as the delta between the two strings.
    |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertEquals(string` `$expected,` `string` `$actual,` `string` `$message)`
    | 报告一个错误，如果两个字符串 `$expected` 和 `$actual` 不相等，错误由 `$message` 标识。错误报告为两个字符串之间的差值。|'
- en: '| `void` `assertNotEquals(string` `$expected,` `string` `$actual)` | Reports
    an error if the two strings `$expected` and `$actual` are equal. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotEquals(string` `$expected,` `string` `$actual)` | 报告一个错误，如果两个字符串
    `$expected` 和 `$actual` 相等。|'
- en: '| `void` `assertNotEquals(string` `$expected,` `string` `$actual,` `string`
    `$message)` | Reports an error identified by `$message` if the two strings `$expected`
    and `$actual` are equal. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotEquals(string` `$expected,` `string` `$actual,` `string`
    `$message)` | 报告一个错误，如果两个字符串 `$expected` 和 `$actual` 相等，错误由 `$message` 标识。|'
- en: '| `void` `assertEquals(mixed` `$expected,` `mixed` `$actual)` | Reports an
    error if the two variables `$expected` and `$actual` are not equal. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertEquals(mixed` `$expected,` `mixed` `$actual)` | 报告一个错误，如果两个变量
    `$expected` 和 `$actual` 不相等。|'
- en: '| `void` `assertEquals(mixed` `$expected,` `mixed` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two variables `$expected` and
    `$actual` are not equal. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertEquals(mixed` `$expected,` `mixed` `$actual,` `string` `$message)`
    | 报告一个错误，如果两个变量 `$expected` 和 `$actual` 不相等，错误由 `$message` 标识。|'
- en: '| `void` `assertNotEquals(mixed` `$expected,` `mixed` `$actual)` | Reports
    an error if the two variables `$expected` and `$actual` are equal. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotEquals(mixed` `$expected,` `mixed` `$actual)` | 报告一个错误，如果两个变量
    `$expected` 和 `$actual` 相等。|'
- en: '| `void` `assertNotEquals(mixed` `$expected,` `mixed` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the two variables `$expected` and
    `$actual` are equal. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotEquals(mixed` `$expected,` `mixed` `$actual,` `string` `$message)`
    | 报告一个错误，如果两个变量 `$expected` 和 `$actual` 相等，错误由 `$message` 标识。|'
- en: '| `void` `assertAttributeEquals(array` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if the two arrays `$expected` and
    `$actualObject->actualAttributeName` are not equal. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeEquals(array` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 报告一个错误，如果两个数组 `$expected` 和 `$actualObject->actualAttributeName`
    不相等。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeEquals(array` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if the two arrays `$expected` and `$actualObject->actualAttributeName`
    are not equal. The visibility of the `$actualObject->actualAttributeName` attribute
    may be public, protected, or private. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeEquals(array` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 如果两个数组 `$expected` 和 `$actualObject->actualAttributeName`
    不相等，则报告一个错误。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotEquals(array` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if the two arrays `$expected` and
    `$actualObject->actualAttributeName` are equal. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotEquals(array` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果两个数组 `$expected` 和 `$actualObject->actualAttributeName`
    相等，则报告一个错误。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotEquals(array` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if the two arrays `$expected` and `$actualObject->actualAttributeName`
    are equal. The visibility of the `$actualObject->actualAttributeName` attribute
    may be public, protected, or private. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotEquals(array` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 如果两个数组 `$expected` 和 `$actualObject->actualAttributeName`
    相等，则报告一个错误。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeEquals(float` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `'''',` `float` `$delta` `=` `0)` | Reports an error
    if the two floats `$expected` and `$actualObject->actualAttributeName` are not
    within `$delta` of each other. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeEquals(float` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `'''',` `float` `$delta` `=` `0)` | 如果两个浮点数 `$expected`
    和 `$actualObject->actualAttributeName` 不在 `$delta` 范围内，则报告一个错误。`$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeEquals(float` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message,` `float` `$delta` `=` `0)` | Reports
    an error identified by `$message` if the two floats `$expected` and `$actualObject->actualAttributeName`
    are not within `$delta` of each other. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeEquals(float` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message,` `float` `$delta` `=` `0)` | 报告一个错误，如果两个浮点数
    `$expected` 和 `$actualObject->actualAttributeName` 不在 `$delta` 范围内。`$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotEquals(float` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `'''',` `float` `$delta` `=` `0)` | Reports an error
    if the two floats `$expected` and `$actualObject->actualAttributeName` are within
    `$delta` of each other. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotEquals(float` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `'''',` `float` `$delta` `=` `0)` | 如果两个浮点数 `$expected`
    和 `$actualObject->actualAttributeName` 在 `$delta` 范围内，则报告一个错误。`$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotEquals(float` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message,` `float` `$delta` `=` `0)` | Reports
    an error identified by `$message` if the two floats `$expected` and `$actualObject->actualAttributeName`
    are within `$delta` of each other. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotEquals(float` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message,` `float` `$delta` `=` `0)` | 如果两个浮点数
    `$expected` 和 `$actualObject->actualAttributeName` 在 `$delta` 范围内，则报告一个错误。`$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeEquals(string` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if the two strings `$expected` and
    `$actualObject->actualAttributeName` are not equal. The error is reported as the
    delta between the two strings. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeEquals(string` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果两个字符串 `$expected` 和 `$actualObject->actualAttributeName`
    不相等，则报告一个错误。错误报告为两个字符串之间的差异。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeEquals(string` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if the two strings `$expected` and `$actualObject->actualAttributeName`
    are not equal. The error is reported as the delta between the two strings. The
    visibility of the `$actualObject->actualAttributeName` attribute may be public,
    protected, or private. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeEquals(string` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 报告一个错误，如果两个字符串 `$expected` 和
    `$actualObject->actualAttributeName` 不相等。错误报告为两个字符串之间的差异。`$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotEquals(string` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if the two strings `$expected` and
    `$actualObject->actualAttributeName` are equal. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotEquals(string` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果两个字符串 `$expected` 和 `$actualObject->actualAttributeName`
    相等，则报告一个错误。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotEquals(string` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if the two strings `$expected` and `$actualObject->actualAttributeName`
    are equal. The visibility of the `$actualObject->actualAttributeName` attribute
    may be public, protected, or private. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotEquals(string` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 报告一个错误，如果两个字符串 `$expected` 和
    `$actualObject->actualAttributeName` 相等。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeEquals(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if the two variables `$expected`
    and `$actualObject->actualAttributeName` are not equal. The visibility of the
    `$actualObject->actualAttributeName` attribute may be public, protected, or private.
    |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeEquals(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果两个变量 `$expected` 和 `$actualObject->actualAttributeName`
    不相等，则报告一个错误。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeEquals(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if the two variables `$expected` and `$actualObject->actualAttributeName`
    are not equal. The visibility of the `$actualObject->actualAttributeName` attribute
    may be public, protected, or private. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeEquals(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 报告一个错误，如果两个变量 `$expected` 和 `$actualObject->actualAttributeName`
    不相等。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotEquals(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if the two variables `$expected`
    and `$actualObject->actualAttributeName` are equal. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotEquals(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果两个变量 `$expected` 和 `$actualObject->actualAttributeName`
    相等，则报告一个错误。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotEquals(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if the two variables `$expected` and `$actualObject->actualAttributeName`
    are equal. The visibility of the `$actualObject->actualAttributeName` attribute
    may be public, protected, or private. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotEquals(mixed` `$expected,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 报告一个错误，如果两个变量 `$expected` 和 `$actualObject->actualAttributeName`
    相等。`$actualObject->actualAttributeName` 属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertContains(mixed` `$needle,` `array` `$expected)` | Reports an
    error if `$needle` is not an element of `$expected`. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertContains(mixed` `$needle,` `array` `$expected)` | 如果`$needle`不是`$expected`的元素，则报告一个错误。|'
- en: '| `void` `assertContains(mixed` `$needle,` `array` `$expected,` `string` `$message)`
    | Reports an error identified by `$message` if `$needle` is not an element of
    `$expected`. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertContains(mixed` `$needle,` `array` `$expected,` `string` `$message)`
    | 如果`$needle`不是`$expected`的元素，则报告一个由`$message`标识的错误。|'
- en: '| `void` `assertNotContains(mixed` `$needle,` `array` `$expected)` | Reports
    an error if `$needle` is an element of `$expected`. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotContains(mixed` `$needle,` `array` `$expected)` | 如果`$needle`是`$expected`的元素，则报告一个错误。|'
- en: '| `void` `assertNotContains(mixed` `$needle,` `array` `$expected,` `string`
    `$message)` | Reports an error identified by `$message` if `$needle` is an element
    of `$expected`. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotContains(mixed` `$needle,` `array` `$expected,` `string`
    `$message)` | 报告一个错误，如果`$needle`是`$expected`数组的一个元素。|'
- en: '| `void` `assertContains(mixed` `$needle,` `Iterator` `$expected)` | Reports
    an error if `$needle` is not an element of `$expected`. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertContains(mixed` `$needle,` `Iterator` `$expected)` | 如果`$needle`不是`$expected`的元素，则报告一个错误。|'
- en: '| `void` `assertContains(mixed` `$needle,` `Iterator` `$expected,` `string`
    `$message)` | Reports an error identified by `$message` if `$needle` is not an
    element of `$expected`. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertContains(mixed` `$needle,` `Iterator` `$expected,` `string`
    `$message)` | 如果`$needle`不是`$expected`的元素，则报告一个由`$message`标识的错误。|'
- en: '| `void` `assertNotContains(mixed` `$needle,` `Iterator` `$expected)` | Reports
    an error if `$needle` is an element of `$expected`. |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotContains(mixed` `$needle,` `Iterator` `$expected)` | 如果`$needle`是`$expected`的元素，则报告一个错误。|'
- en: '| `void` `assertNotContains(mixed` `$needle,` `Iterator` `$expected,` `string`
    `$message)` | Reports an error identified by `$message` if `$needle` is an element
    of `$expected`. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotContains(mixed` `$needle,` `Iterator` `$expected,` `string`
    `$message)` | 如果`$needle`是`$expected`的元素，则报告一个由`$message`标识的错误。|'
- en: '| `void` `assertContains(string` `$needle,` `string` `$expected)` | Reports
    an error if `$needle` is not a substring of `$expected`. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertContains(string` `$needle,` `string` `$expected)` | 如果`$needle`不是`$expected`的子串，则报告一个错误。|'
- en: '| `void` `assertContains(string` `$needle,` `string` `$expected,` `string`
    `$message)` | Reports an error identified by `$message` if `$needle` is not a
    substring of `$expected`. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertContains(string` `$needle,` `string` `$expected,` `string`
    `$message)` | 如果`$needle`不是`$expected`的子串，则报告一个由`$message`标识的错误。|'
- en: '| `void` `assertNotContains(string` `$needle,` `string` `$expected)` | Reports
    an error if `$needle` is a substring of `$expected`. |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotContains(string` `$needle,` `string` `$expected)` | 如果`$needle`是`$expected`的子串，则报告一个错误。|'
- en: '| `void` `assertNotContains(string` `$needle,` `string` `$expected,` `string`
    `$message)` | Reports an error identified by `$message` if `$needle` is a substring
    of `$expected`. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotContains(string` `$needle,` `string` `$expected,` `string`
    `$message)` | 如果`$needle`是`$expected`的子串，则报告一个由`$message`标识的错误。|'
- en: '| `void` `assertAttributeContains(mixed` `$needle,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if `$needle` is not an element of
    `$actualObject->actualAttributeName` which can be an array, a string, or an object
    that implements the Iterator interface. The visibility of the `$actualObject->actualAttributeName`
    attribute may be public, protected, or private. |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeContains(mixed` `$needle,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果`$needle`不是`$actualObject->actualAttributeName`的元素，该元素可以是数组、字符串或实现Iterator接口的对象，则报告一个错误。`$actualObject->actualAttributeName`属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeContains(mixed` `$needle,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if `$needle` is not an element of `$actualObject->actualAttributeName`
    which can be an array, a string, or an object that implements the Iterator interface.
    The visibility of the `$actualObject->actualAttributeName` attribute may be public,
    protected, or private. |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeContains(mixed` `$needle,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 报告一个由`$message`标识的错误，如果`$needle`不是`$actualObject->actualAttributeName`的元素，该元素可以是数组、字符串或实现Iterator接口的对象。`$actualObject->actualAttributeName`属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotContains(mixed` `$needle,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | Reports an error if `$needle` is an element of `$actualObject->actualAttributeName`
    which can be an array, a string, or an object that implements the Iterator interface.
    The visibility of the `$actualObject->actualAttributeName` attribute may be public,
    protected, or private. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotContains(mixed` `$needle,` `string` `$actualAttributeName,`
    `object` `$actualObject)` | 如果 `$needle` 是 `$actualObject->actualAttributeName`
    的一个元素，该元素可以是数组、字符串或实现 Iterator 接口的对象，则报告一个错误。`$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertAttributeNotContains(mixed` `$needle,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | Reports an error identified by
    `$message` if `$needle` is an element of `$actualObject->actualAttributeName`
    which can be an array, a string, or an object that implements the Iterator interface.
    The visibility of the `$actualObject->actualAttributeName` attribute may be public,
    protected, or private. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertAttributeNotContains(mixed` `$needle,` `string` `$actualAttributeName,`
    `object` `$actualObject,` `string` `$message)` | 如果 `$needle` 是 `$actualObject->actualAttributeName`
    的一个元素，该元素可以是数组、字符串或实现 Iterator 接口的对象，则报告一个错误，错误信息由 `$message` 指定。`$actualObject->actualAttributeName`
    属性的可见性可能是公共的、受保护的或私有的。|'
- en: '| `void` `assertRegExp(string` `$pattern,` `string` `$string)` | Reports an
    error if `$string` does not match the regular expression `$pattern`. |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertRegExp(string` `$pattern,` `string` `$string)` | 如果 `$string`
    不匹配正则表达式 `$pattern`，则报告一个错误。|'
- en: '| `void` `assertRegExp(string` `$pattern,` `string` `$string,` `string` `$message)`
    | Reports an error identified by `$message` if `$string` does not match the regular
    expression `$pattern`. |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertRegExp(string` `$pattern,` `string` `$string,` `string` `$message)`
    | 如果 `$string` 不匹配正则表达式 `$pattern`，则报告一个错误，错误信息由 `$message` 指定。|'
- en: '| `void` `assertNotRegExp(string` `$pattern,` `string` `$string)` | Reports
    an error if `$string` matches the regular expression `$pattern`. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotRegExp(string` `$pattern,` `string` `$string)` | 如果 `$string`
    匹配正则表达式 `$pattern`，则报告一个错误。|'
- en: '| `void` `assertNotRegExp(string` `$pattern,` `string` `$string,` `string`
    `$message)` | Reports an error identified by `$message` if `$string` matches the
    regular expression `$pattern`. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotRegExp(string` `$pattern,` `string` `$string,` `string`
    `$message)` | 如果 `$string` 匹配正则表达式 `$pattern`，则报告一个错误，错误信息由 `$message` 指定。|'
- en: '| `void` `assertType(string` `$expected,` `mixed` `$actual)` | Reports an error
    if the variable `$actual` is not of type `$expected`.. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertType(string` `$expected,` `mixed` `$actual)` | 如果变量 `$actual`
    不是类型 `$expected`，则报告一个错误。|'
- en: '| `void` `assertType(string` `$expected,` `mixed` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the variable `$actual` is not of
    type `$expected`. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertType(string` `$expected,` `mixed` `$actual,` `string` `$message)`
    | 如果变量 `$actual` 不是类型 `$expected`，则报告一个错误，错误信息由 `$message` 指定。|'
- en: '| `void` `assertNotType(string` `$expected,` `mixed` `$actual)` | Reports an
    error if the variable `$actual` is of type `$expected`. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotType(string` `$expected,` `mixed` `$actual)` | 如果变量 `$actual`
    是类型 `$expected`，则报告一个错误。|'
- en: '| `void` `assertNotType(string` `$expected,` `mixed` `$actual,` `string` `$message)`
    | Reports an error identified by `$message` if the variable `$actual` is of type
    `$expected`. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertNotType(string` `$expected,` `mixed` `$actual,` `string` `$message)`
    | 如果变量 `$actual` 是类型 `$expected`，则报告一个错误，错误信息由 `$message` 指定。|'
- en: '| `void` `assertFileExists(string` `$filename)` | Reports an error if the file
    specified by `$filename` does not exist. |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertFileExists(string` `$filename)` | 如果指定的文件 `$filename` 不存在，则报告一个错误。|'
- en: '| `void` `assertFileExists(string` `$filename,` `string` `$message)` | Reports
    an error identified by `$message` if the file specified by `$filename` does not
    exist. |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertFileExists(string` `$filename,` `string` `$message)` | 报告一个错误，如果指定的文件
    `$filename` 不存在，错误信息由 `$message` 指定。|'
- en: '| `void` `assertFileNotExists(string` `$filename)` | Reports an error if the
    file specified by `$filename` exists. |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertFileNotExists(string` `$filename)` | 如果指定的文件 `$filename` 存在，则报告一个错误。|'
- en: '| `void` `assertFileNotExists(string` `$filename,` `string` `$message)` | Reports
    an error identified by `$message` if the file specified by `$filename` exists.
    |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertFileNotExists(string` `$filename,` `string` `$message)` | 如果指定的文件
    `$filename` 存在，则报告一个错误，错误信息由 `$message` 指定。|'
- en: '| `void` `assertObjectHasAttribute(string` `$attributeName,` `object` `$object)`
    | Reports an error if `$object->attributeName` does not exist. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertObjectHasAttribute(string` `$attributeName,` `object` `$object)`
    | 如果 `$object->attributeName` 不存在，则报告一个错误。|'
- en: '| `void` `assertObjectHasAttribute(string` `$attributeName,` `object` `$object,`
    `string` `$message)` | Reports an error identified by `$message` if `$object->attributeName`
    does not exist. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertObjectHasAttribute(string` `$attributeName,` `object` `$object,`
    `string` `$message)` | 如果`$object->attributeName`不存在，则通过`$message`报告错误。|'
- en: '| `void` `assertObjectNotHasAttribute(string` `$attributeName,` `object` `$object)`
    | Reports an error if `$object->attributeName` exists. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertObjectNotHasAttribute(string` `$attributeName,` `object` `$object)`
    | 如果`$object->attributeName`存在，则报告错误。|'
- en: '| `void` `assertObjectNotHasAttribute(string` `$attributeName,` `object` `$object,`
    `string` `$message)` | Reports an error if `$object->attributeName` exists. |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `void` `assertObjectNotHasAttribute(string` `$attributeName,` `object` `$object,`
    `string` `$message)` | 如果`$object->attributeName`存在，则报告错误。|'
- en: Summary
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focuses on two very important features of object oriented programming
    in PHP. One is reflection, which is a part of all major programming languages
    like Java, Ruby, and Python. The second one is unit testing, which is an essential
    part of good, stable, and manageable application design. We focused on one very
    popular package, which is a port of JUnit in PHP, named PHPUnit. If you follow
    the guideline provided in this chapter you will be able to design your unit tests
    successfully.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍PHP面向对象编程的两个非常重要的特性。一个是反射，它是所有主要编程语言（如Java、Ruby和Python）的一部分。另一个是单元测试，它是良好、稳定和可管理应用程序设计的重要组成部分。我们关注了一个非常流行的包，它是JUnit在PHP中的移植，名为PHPUnit。如果你遵循本章提供的指南，你将能够成功设计你的单元测试。
- en: In the next chapter, we will learn about some built-in objects in PHP which
    will make your life much easier than usual. We will learn about the huge object
    repository called Standard PHP Library or SPL. Before that, enjoy the debugging
    by writing your own unit tests.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习PHP中的一些内置对象，这将使你的生活比平时更容易。我们将学习一个名为标准PHP库或SPL的庞大对象存储库。在此之前，通过编写自己的单元测试来享受调试的乐趣。
