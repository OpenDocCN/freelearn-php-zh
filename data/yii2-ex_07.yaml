- en: Chapter 7. Working on the User Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。用户界面工作
- en: In this chapter, you will discover how powerful Gii is as a tool. It provides
    support for CRUD actions, as well as creating a controller and its respective
    views.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将发现 Gii 作为工具是多么强大。它提供了对 CRUD 操作的支持，以及创建控制器及其相应的视图。
- en: 'We will cover the following topics related to the user interface in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍与用户界面相关的以下主题：
- en: 'Using Gii to generate create, read, update, and delete (CRUD) actions:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Gii 生成创建、读取、更新和删除 (CRUD) 操作：
- en: For example – using CRUD to manage rooms, reservations, and customers using
    Gii
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如 - 使用 CRUD 通过 Gii 管理房间、预订和客户
- en: 'Customizing JavaScript and CSS:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 JavaScript 和 CSS：
- en: For example – using JavaScript and CSS to display advertising columns that disappear
    if there is not enough space available
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如 - 使用 JavaScript 和 CSS 显示广告列，如果空间不足则消失
- en: 'Using AJAX:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AJAX：
- en: 'For example: reservation details loaded from customers'' drop-down lists'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：从客户下拉列表加载的预订详情
- en: 'Using the Bootstrap widget:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 小部件：
- en: For example – using datepicker
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如 - 使用日期选择器
- en: 'Viewing multiple models in the same view:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一视图中查看多个模型：
- en: For example – saving multiple customers at the same time
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如 - 同时保存多个客户
- en: 'Saving linked models in the same view:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一视图中保存链接的模型：
- en: For example – creating a customer and reservation in the same view
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如 - 在同一视图中创建客户和预订
- en: It is now time for you to learn what Yii2 supports in order to customize the
    JavaScript and CSS parts of web pages. A recurrent use of JavaScript is to handle
    AJAX calls, that is, to manage widgets and compound controls (such as a dependent
    drop-down list) from jQuery and Bootstrap.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候学习 Yii2 支持的以自定义网页的 JavaScript 和 CSS 部分了。JavaScript 的一个常见用途是处理 AJAX 调用，即从
    jQuery 和 Bootstrap 中管理小部件和复合控件（如依赖性下拉列表）。
- en: Finally, we will employ jQuery to dynamically create more models from the same
    class in the form, which will be passed to the controller in order to be validated
    and saved.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用 jQuery 动态从同一类中创建更多模型，这些模型将被传递到控制器以进行验证和保存。
- en: Using Gii to generate CRUD
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Gii 生成 CRUD
- en: We introduced Gii in [Chapter 5](ch05.html "Chapter 5. Developing a Reservation
    System"), *Developing a Reservation System*, to generate models. Now we want to
    use Gii to create CRUD actions with a controller and views.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 5 章](ch05.html "第 5 章。开发预订系统")中介绍了 Gii，*开发预订系统*，用于生成模型。现在我们想使用 Gii 来创建带有控制器和视图的
    CRUD 操作。
- en: 'Type `http://hostname/basic/web/gii` in your browser to return to the Gii welcome
    page. Click on the **Start** button of the **CRUD** section. We have to fill out
    four fields:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中输入 `http://hostname/basic/web/gii` 返回 Gii 欢迎页面。点击 **CRUD** 部分的 **开始** 按钮。我们必须填写四个字段：
- en: '**Model Class**: This is the ActiveRecord class associated with the table where
    CRUD will be built; this class should be provided using the fully qualified namespaced
    path, for example: `app\models\ModelClass`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型类**: 这是与 CRUD 将要构建的表关联的 ActiveRecord 类；这个类应该使用完全限定的命名空间路径提供，例如：`app\models\ModelClass`。'
- en: '**Search Model Class**: This is the name of the search model class to be generated
    and extended from the model class; this class will provide useful methods and
    extensions to be used when searching the record. This should be provided using
    the fully qualified namespaced path, for example: `app\models\ModelClassSearch`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索模型类**: 这是将要生成的搜索模型类的名称，并从模型类扩展；这个类将提供在搜索记录时使用的有用方法和扩展。这应该使用完全限定的命名空间路径提供，例如：`app\models\ModelClassSearch`。'
- en: '**Controller Class**: This is the name of the controller class to be generated;
    this class should be provided using the fully qualified namespaced path and the
    CamelCase format for the name, starting with an uppercase letter, for example:
    `app\controller\MyCustomController`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器类**: 这是将要生成的控制器类的名称；这个类应该使用完全限定的命名空间路径和 CamelCase 格式提供名称，名称以大写字母开头，例如：`app\controller\MyCustomController`。'
- en: '**View Path**: This is the directory where the view created from the controller
    actions will be stored. We can use path, alias `@app/views`, to indicate the base
    path for the views file, for example: `@app/views/myCustom` to indicate the base
    path of the `MyCustomController` views, that will be filled by default to `@app/views/controller-id`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图路径**: 这是控制器操作生成的视图将被存储的目录。我们可以使用路径，别名 `@app/views`，来表示视图文件的基准路径，例如：`@app/views/myCustom`
    表示 `MyCustomController` 视图的基准路径，默认填充为 `@app/views/controller-id`。'
- en: Then, we can customize `BaseControllerClass`, the widget used in the index page,
    to enable the state of I18N and the code template, but it is okay to leave them
    with the default values.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以自定义`BaseControllerClass`，这是在索引页面中使用的小部件，以启用I18N状态和代码模板，但保留默认值是完全可以的。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we check **Enable I18N**, we must then look after the translations in app
    messages for each attribute label. This will be covered in a later chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查**启用I18N**，那么我们必须注意每个属性标签的翻译，这将在后面的章节中介绍。
- en: Example – using CRUD to manage rooms, reservations, and customers using Gii
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用Gii通过CRUD管理房间、预订和客户
- en: In this example, we will create complete CRUD actions to manage rooms, reservations,
    and customers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将创建完整的CRUD操作来管理房间、预订和客户。
- en: 'In the earlier chapter, we dealt with Gii CRUD actions to create a form. We
    must now repeat these instructions for all three models: the room, reservation,
    and customer model class. To distinguish files created with Gii from files created
    manually in the previous chapters, we will append the Gii suffix to the controller''s
    class name.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们处理了Gii CRUD操作以创建表单。现在，我们必须为所有三个模型（房间、预订和客户模型类）重复这些说明。为了区分Gii创建的文件和前面章节中手动创建的文件，我们将Gii后缀添加到控制器类的名称中。
- en: 'Browse to the Gii welcome page at `http://hostname/basic/web/gii`, click on
    the **Start** button in the **CRUD** section, and fill out the fields with the
    following values to create CRUD actions for the `Room` model class:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到Gii欢迎页面`http://hostname/basic/web/gii`，在**CRUD**部分点击**开始**按钮，并使用以下值填写字段以创建`Room`模型类的CRUD操作：
- en: '**Model Class**: `app\models\Room`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型类**: `app\models\Room`'
- en: '**Search Model Class**: `app\models\RoomSearch`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索模型类**: `app\models\RoomSearch`'
- en: '**Controller Class**: `app\controllers\RoomsWithGiiController`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器类**: `app\controllers\RoomsWithGiiController`'
- en: '**View Path**: `@app/views/rooms-with-gii`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图路径**: `@app/views/rooms-with-gii`'
- en: 'Then, repeat this operation for the `Reservation` model class:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为`Reservation`模型类重复此操作：
- en: '**Model Class**: `app\models\Reservation`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型类**: `app\models\Reservation`'
- en: '**Search Model Class**: `app\models\ReservationSearch`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索模型类**: `app\models\ReservationSearch`'
- en: '**Controller Class**: `app\controllers\ReservationsWithGiiController`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器类**: `app\controllers\ReservationsWithGiiController`'
- en: '**View Path**: `@app/views/reservations-with-gii`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图路径**: `@app/views/reservations-with-gii`'
- en: 'Finally, repeat them for the `Customer` model class:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为`Customer`模型类重复它们：
- en: '**Model Class**: `app\models\Customer`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型类**: `app\models\Customer`'
- en: '**Search Model Class**: `app\models\CustomerSearch`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索模型类**: `app\models\CustomerSearch`'
- en: '**Controller Class**: `app\controllers\CustomersWithGiiController`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器类**: `app\controllers\CustomersWithGiiController`'
- en: '**View Path**: `@app/views/customers-with-gii`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图路径**: `@app/views/customers-with-gii`'
- en: Note
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that the View Path has a slash (`/`) in the path and not a backslash
    (`\`) as the namespaced path in the model class, search model class, and controller
    class.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保视图路径中有斜杠(`/`)而不是反斜杠(`\`)，因为在模型类、搜索模型类和控制器类中的命名空间路径中不应使用反斜杠。
- en: 'The following screenshot shows the fields filled out to generate CRUD actions
    for the `Room` model class:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了填写以生成`Room`模型类的CRUD操作的字段：
- en: '![Example – using CRUD to manage rooms, reservations, and customers using Gii](img/B04656_07_01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 使用Gii通过CRUD管理房间、预订和客户](img/B04656_07_01.jpg)'
- en: CRUD Generator from Gii
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Gii的CRUD生成器
- en: While navigating in the folder structure, you will see that Gii has created
    three new files in `basic/controllers`, named `RoomsWithGiiController.php`, `ReservationsWithGiiController.php`,
    and `CustomersWithGiiController.php`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航文件夹结构时，你会看到Gii在`basic/controllers`中创建了三个新的文件，分别命名为`RoomsWithGiiController.php`、`ReservationsWithGiiController.php`和`CustomersWithGiiController.php`。
- en: 'Each of these files contains five actions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这些文件都包含五个操作：
- en: '`actionCreate()`: This action is used to create a new model object'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actionCreate()`: 此操作用于创建新的模型对象'
- en: '`actionView()`: This action is used to view the details of a model object'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actionView()`: 此操作用于查看模型对象的详细信息'
- en: '`actionUpdate()`: This action is used to update an existing model object'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actionUpdate()`: 此操作用于更新现有的模型对象'
- en: '`actionDelete()`: This action is used to delete an existing model object'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actionDelete()`: 此操作用于删除现有的模型对象'
- en: '`actionIndex()`: This action is used to display, using the grid layout, a list
    of model objects'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actionIndex()`: 此操作用于使用网格布局显示模型对象的列表'
- en: 'Open the `basic/models` folder and you will find three new files: `RoomSearch.php`,
    `ReservationSearch.php` (which should already exist), and `CustomerSearch.php`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `basic/models` 文件夹，你会找到三个新的文件：`RoomSearch.php`、`ReservationSearch.php`（该文件应该已经存在）和
    `CustomerSearch.php`。
- en: Each of these files basically contains a `search()` method, which returns the
    ActiveDataProvider to be used to display data in GridView, passing some filter
    conditions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件基本上都包含一个 `search()` 方法，该方法返回 ActiveDataProvider，用于在 GridView 中显示数据，并传递一些过滤条件。
- en: 'Finally, open the `basic/views` folder and you will find three new folders:
    `roomsWithGii`, `reservationsWithGii`, and `customersWithGii`; each one containing
    six files:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，打开 `basic/views` 文件夹，你会找到三个新的文件夹：`roomsWithGii`、`reservationsWithGii` 和 `customersWithGii`；每个文件夹都包含六个文件：
- en: '`_form.php`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_form.php`'
- en: '`_search.php`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_search.php`'
- en: '`create.php`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create.php`'
- en: '`index.php`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.php`'
- en: '`update.php`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update.php`'
- en: '`view.php`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view.php`'
- en: View files that start with an underscore are considered by default in Yii2 as
    subviews, or rather views that are called by other views.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下划线开头的视图文件在 Yii2 中默认被视为子视图，或者说是由其他视图调用的视图。
- en: The first two files start with an underscore; effectively if we open `create.php`
    and `update.php`, we will notice that, at the end of these files, the `render()`
    method is called using the `_form.php` view. Both the create and update view will
    use the same `_form` view to display the form to edit fields.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个文件以下划线开头；实际上，如果我们打开 `create.php` 和 `update.php`，我们会注意到，在这些文件的末尾，使用 `_form.php`
    视图调用了 `render()` 方法。创建和更新视图将使用相同的 `_form` 视图来显示编辑字段表单。
- en: The last four files, `create.php`, `index.php`, `update.php`, and `view.php`
    are views that refer to the same actions in the controller. By default, they all
    have a breadcrumb and a title for each page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后四个文件，`create.php`、`index.php`、`update.php` 和 `view.php` 是指向控制器中相同操作的视图。默认情况下，它们每个页面都有一个面包屑和标题。
- en: Make some tests that browse, for example, to `http://hostname/basic/web/rooms-with-gii/index`
    or `http://hostname/basic/web/rooms-with-gii/index`, to see some excellent works
    made by Gii.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 进行一些测试，例如浏览到 `http://hostname/basic/web/rooms-with-gii/index` 或 `http://hostname/basic/web/rooms-with-gii/index`，以查看
    Gii 制作的出色作品。
- en: 'This is the index action result of `RoomsWithGiiController`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 RoomsWithGiiController 的索引动作结果：
- en: '![Example – using CRUD to manage rooms, reservations, and customers using Gii](img/B04656_07_02.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 使用 CRUD 通过 Gii 管理房间、预订和客户](img/B04656_07_02.jpg)'
- en: The output of the RoomsWithGiiController index action
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: RoomsWithGiiController 索引动作的输出
- en: Customize JavaScript and CSS
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 JavaScript 和 CSS
- en: As mentioned before, in this chapter, you will discover how to use frontend
    interaction. Using JavaScript and CSS is fundamental to customize frontend output.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在本章中，你将了解如何使用前端交互。使用 JavaScript 和 CSS 是自定义前端输出的基础。
- en: Differently from Yii1, where calling JavaScript and CSS scripts and files was
    done using the `Yii::app()` singleton, in the new framework version, Yii2, this
    task is part of the `yii\web\View` class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Yii1 不同，在 Yii1 中，调用 JavaScript 和 CSS 脚本和文件是通过使用 `Yii::app()` 单例完成的，在新框架版本
    Yii2 中，这项任务现在是 `yii\web\View` 类的一部分。
- en: 'There are two ways to call JavaScript or CSS: either directly passing the code
    to be executed or passing the path file.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 JavaScript 或 CSS 有两种方式：要么直接传递要执行的代码，要么传递文件路径。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: When passing the code directly to be executed, we will use the Heredoc syntax
    provided by PHP to avoid handling strings escaping.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接传递要执行的代码时，我们将使用 PHP 提供的 Heredoc 语法来避免处理字符串转义。
- en: 'The `registerJs()` function allows us to execute the JavaScript code with three
    parameters:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`registerJs()` 函数允许我们使用三个参数执行 JavaScript 代码：'
- en: The first parameter is the JavaScript code block to be registered
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是要注册的 JavaScript 代码块
- en: The second parameter is the position where the JavaScript tag should be inserted
    (the header, the beginning of the body section, the end of the body section, enclosed
    within the jQuery `load()` method, or enclosed within the jQuery `document.ready()`
    method, which is the default)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是 JavaScript 标签应插入的位置（头部、身体部分的开始、身体部分的结束、在 jQuery `load()` 方法内或 jQuery
    `document.ready()` 方法内，默认为后者）
- en: The third and last parameter is a key that identifies the JavaScript code block
    (if it is not provided, the content of the first parameter will be used as the
    key)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个和最后一个参数是一个键，用于标识 JavaScript 代码块（如果没有提供，则使用第一个参数的内容作为键）
- en: 'On the other hand, the `registerJsFile()` function allows us to execute a JavaScript
    file with three parameters:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`registerJsFile()` 函数允许我们使用三个参数执行一个 JavaScript 文件：
- en: The first parameter is the path file of the JavaScript file
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是JavaScript文件的路径文件。
- en: The second parameter is the HTML attribute for the script tag, with particular
    attention given to the depends and position values, which are not treated as tag
    attributes
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是脚本标签的HTML属性，特别关注depends和position值，它们不被视为标签属性。
- en: The third parameter is a key that identifies the JavaScript code block (if it's
    not provided, the content of the first parameter will be used as the key)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是一个标识JavaScript代码块的关键字（如果没有提供，则将使用第一个参数的内容作为关键字）。
- en: CSS, similar to JavaScript, can be executed using the code or by passing the
    path file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: CSS，类似于JavaScript，可以通过代码执行或通过传递路径文件执行。
- en: 'The `registerCss()` function allows us to execute CSS code with three parameters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`registerCss()`函数允许我们使用三个参数来执行CSS代码：'
- en: The first one is the CSS code block to be registered
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是需要注册的CSS代码块。
- en: The second one is the HTML attributes for the `style` tag
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个是`style`标签的HTML属性。
- en: The third and last parameter is a key that identifies the JavaScript code block
    (if it is not provided, the content of the first parameter will be used as the
    key)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个和最后一个参数是一个标识JavaScript代码块的关键字（如果没有提供，则将使用第一个参数的内容作为关键字）。
- en: 'The `registerCssFile()` function allows us instead to execute a CSS file with
    three parameters:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`registerCssFile()`函数允许我们使用三个参数来执行CSS文件：'
- en: The first one is the path file of the CSS file
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是CSS文件的路径文件。
- en: The second parameter is the HTML attribute for the link tag, with particular
    attention given to the depends value, which is not treated as a tag attribute
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是链接标签的HTML属性，特别关注depends值，它不被视为标签属性。
- en: The third parameter is a key that identifies the JavaScript code block (if it's
    not provided, the content of the first parameter will be used as the key)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是一个标识JavaScript代码块的关键字（如果没有提供，则将使用第一个参数的内容作为关键字）。
- en: Generally, JavaScript or CSS files are published in the `basic/web` folder,
    which is accessible without restrictions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，JavaScript或CSS文件发布在`basic/web`文件夹中，该文件夹无限制可访问。
- en: So, when we have to use custom JavaScript or CSS files, it is recommended to
    put them in a subfolder of the `basic/web` folder, which can be named as `css`
    or `js`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们必须使用自定义JavaScript或CSS文件时，建议将它们放在`basic/web`文件夹的子文件夹中，可以命名为`css`或`js`。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By default, the folder for CSS files `basic/web/css` should already exist. But
    we still need to create `basic/web/js` for JavaScript files.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CSS文件文件夹`basic/web/css`应该已经存在。但我们仍然需要为JavaScript文件创建`basic/web/js`。
- en: In some circumstances, we might be required to add a new CSS or JavaScript file
    for all web application pages. The most appropriate place to put these entries
    is `AppAsset.php`, a file located in `basic/assets/AppAsset.php`. In it we can
    add CSS and JavaScript entries required in web applications, even using dependencies
    if we need to.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能需要为所有Web应用程序页面添加新的CSS或JavaScript文件。将这些条目放在`AppAsset.php`文件中最合适，该文件位于`basic/assets/AppAsset.php`。在其中，我们可以添加Web应用程序所需的CSS和JavaScript条目，如果需要，甚至可以使用依赖项。
- en: Example – using JavaScript and CSS to display advertising columns that disappear
    if not enough space is available
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用JavaScript和CSS显示广告列，如果空间不足则消失。
- en: This sample is suitable if you need to use JavaScript and CSS customizations
    together.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要同时使用JavaScript和CSS自定义，则此示例是合适的。
- en: Think about the layout built as three vertical columns, typical of a blog system.
    One column of 200 pixels on the left (usually for advertising), one central column
    of 1000 pixels (usually for content) and one of 200 pixels on the right (usually
    again for advertising).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下构建为三个垂直列的布局，这是博客系统的典型布局。左侧一列宽200像素（通常用于广告），中间一列宽1000像素（通常用于内容），右侧一列宽200像素（通常再次用于广告）。
- en: If the browser size is at least 1,400 pixels wide, we want all three columns
    to be shown (the content and two columns for advertising).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果浏览器宽度至少为1,400像素，我们希望显示所有三列（内容和两个广告列）。
- en: If there is not enough space for all the columns and the browser's width size
    is between 1,200 and 1,400 pixels, only the left and central columns will be shown
    (only a column for advertising and one for the content. Finally, if the browser's
    width size is under 1,200 pixels, only the central column with content will be
    shown).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有足够的空间来显示所有列，并且浏览器的宽度大小在1,200到1,400像素之间，则只显示左侧和中间列（只有一个广告列和一个内容列。最后，如果浏览器的宽度大小小于1,200像素，则只显示包含内容的中间列）。
- en: Also, our goal is to ensure that these columns are always centered in the browser.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们的目标是确保这些列始终在浏览器中居中。
- en: 'Create a new controller class in `basic/controllers/ThreeColumnsController.php`,
    to handle the action to render the view file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `basic/controllers/ThreeColumnsController.php` 中创建一个新的控制器类，以处理渲染视图文件的动作：
- en: '[PRE0]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Furthermore, create a new `view` folder in `basic/views/three-columns` and insert
    `index.php` file in it to store view content.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 `basic/views/three-columns` 中创建一个新的 `view` 文件夹，并在其中插入 `index.php` 文件以存储视图内容。
- en: 'Basically, this is the content necessary to build a three column layout:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这是构建三列布局所需的内容：
- en: '[PRE1]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The CSS class column will only be used to enhance cells' visibility with a black
    border around them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 类 `column` 将仅用于通过围绕它们添加黑色边框来增强单元格的可见性。
- en: 'At this point, we will center the layout and fix the columns'' width using
    the `registerCss()` method at the top of the view file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将使用 `registerCss()` 方法在视图文件顶部居中布局并固定列的宽度：
- en: '[PRE2]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Point your browser to `http://hostname/basic/web/three-columns/index` and you
    will get the following content:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向 `http://hostname/basic/web/three-columns/index`，您将看到以下内容：
- en: '![Example – using JavaScript and CSS to display advertising columns that disappear
    if not enough space is available](img/B04656_07_03.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 使用 JavaScript 和 CSS 显示在空间不足时消失的广告列](img/B04656_07_03.jpg)'
- en: Content width split into three columns
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 内容宽度分为三列
- en: We must handle the resize browser event through JavaScript to manage the columns
    visualization using the dimension rules defined at the start of this chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须通过 JavaScript 处理浏览器调整大小事件，以使用本章开头定义的维度规则来管理列的可视化。
- en: 'We will use the `registerJs()` method, passing only the code to be executed:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `registerJs()` 方法，仅传递要执行的代码：
- en: '[PRE3]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Refresh your browser to `http://hostname/basic/web/three-columns/index` and
    resize it to the desired width, and the columns visualization should change depending
    on the available space in the specific width.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新您的浏览器到 `http://hostname/basic/web/three-columns/index` 并调整到所需的宽度，列的可视化应根据特定宽度中的可用空间而变化。
- en: Using AJAX
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AJAX
- en: Yii2 provides appropriate attributes for some widgets to make AJAX calls; sometimes,
    however, writing a JavaScript code in these attributes will make code hard to
    read, especially if we are dealing with complex codes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 为某些小部件提供了适当的属性以进行 AJAX 调用；然而，有时在这些属性中编写 JavaScript 代码会使代码难以阅读，尤其是当我们处理复杂代码时。
- en: Consequently, to make an AJAX call, we will use external JavaScript code executed
    by `registerJs()`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了进行 AJAX 调用，我们将使用由 `registerJs()` 执行的外部 JavaScript 代码。
- en: 'This is a template of the AJAX class using the `GET` or `POST` method:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 `GET` 或 `POST` 方法的 AJAX 类模板：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: An AJAX call is usually the effect of a user interface event (such as a click
    on a button, a link, and so on). So, most of the time an AJAX call is directly
    connected to the `.on()` event of jQuery on the HTML elements (anchors, buttons,
    and so on). For this reason, it is important to remember how Yii2 renders the
    `name` and `id` attributes of input fields.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX 调用通常是用户界面事件（如按钮点击、链接等）的效果。因此，大多数情况下，AJAX 调用直接与 jQuery 在 HTML 元素（锚点、按钮等）上的
    `.on()` 事件相关联。因此，记住 Yii2 如何渲染输入字段的 `name` 和 `id` 属性非常重要。
- en: When we call `Html::activeTextInput($model, $attribute)` or in the same way
    use `<?= $form->field($model, $attribute)->textInput() ?>`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用 `Html::activeTextInput($model, $attribute)` 或以相同方式使用 `<?= $form->field($model,
    $attribute)->textInput() ?>`。
- en: 'The `name` and `id` attributes of the input text field will be rendered as
    follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文本字段的 `name` 和 `id` 属性将被渲染如下：
- en: '`id` : The model class name separated with a dash by the attribute name in
    lowercase; for example, if the model class name is `Room` and the attribute is
    `floor`, the `id` attribute will be `room-floor`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` : 模型类名通过小写属性名与短横线分隔；例如，如果模型类名是 `Room` 且属性是 `floor`，则 `id` 属性将是 `room-floor`'
- en: '`name`: The model class name that encloses the attribute name, for example,
    if the model class name is `Reservation` and the attribute is `price_per_day`,
    the name attribute will be `Reservation[price_per_day]`; so every field owned
    by the `Reservation` model will be enclosed all in a single array'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：包含属性名的模型类名，例如，如果模型类名是 `Reservation` 且属性是 `price_per_day`，则 `name` 属性将是
    `Reservation[price_per_day]`；因此，`Reservation` 模型拥有的每个字段都将包含在一个单独的数组中'
- en: Example – reservation details loaded from the customers' drop-down lists
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 从客户的下拉列表中加载的预订详情
- en: In this example, there are two drop-down lists and a detail box. The two drop-down
    lists refer to customers and reservations; when user clicks on a customer list
    item, the second drop-down list of reservations will be filled out according to
    their choice.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，有两个下拉列表和一个详细框。这两个下拉列表分别对应客户和预订；当用户点击客户列表项时，根据他们的选择，预订的下拉列表将被填写。
- en: Finally, when a user clicks on a reservation list item, a details box will be
    filled out with data about the selected reservation.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当用户点击预订列表项时，一个包含所选预订数据的详细框将被填写。
- en: 'Create a new action in `basic/controllers/ReservationsController.php` named
    `actionDetailDependentDropdown()`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/controllers/ReservationsController.php`中创建一个新的操作，命名为`actionDetailDependentDropdown()`：
- en: '[PRE5]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this action, we will get the `customer_id` and `id` parameters from a form
    based on the `Reservation` model data and if it are filled out, the data will
    be used to search for the correct reservation model to be passed to the view.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个操作中，我们将根据`Reservation`模型数据从表单中获取`customer_id`和`id`参数，如果它们被填写，这些数据将被用来搜索正确的预订模型并将其传递给视图。
- en: There is a flag called `$showDetail` that displays the reservation details content
    if the `id` attribute of the model is received.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`$showDetail`的标志，如果接收到模型的`id`属性，它将显示预订详情内容。
- en: 'In `ReservationsController`, there is also an action that will be called using
    AJAX when the user changes the customer selection in the drop-down list:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ReservationsController`中，还有一个在用户更改下拉列表中的客户选择时将通过AJAX调用的操作：
- en: '[PRE6]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This action will return the `<option>` HTML tags filled out with reservations
    data filtered by the customer ID passed as a parameter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作将返回填充有按客户ID过滤的预订数据的`<option>` HTML标签。
- en: 'Now let''s look at the view in `basic/views/reservations/detailDependentDropdown.php`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`basic/views/reservations/detailDependentDropdown.php`中的视图：
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At the top of the view, there are handlers for changes in the customers and
    reservations drop-down list.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图的顶部，有处理客户和预订下拉列表变化的处理程序。
- en: If the customer drop-down list is changed, the `detail` div will be hidden,
    an AJAX call will get all the reservations filtered by `customer_id`, and the
    result will be passed as content to the reservations drop-down list. If the reservations
    drop-down list is changed, a form will be submitted.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户下拉列表发生变化，`detail` div将被隐藏，一个AJAX调用将获取所有按`customer_id`过滤的预订，并将结果作为内容传递给预订下拉列表。如果预订下拉列表发生变化，将提交一个表单。
- en: 'Next in the form declaration, we can find first of all the customer drop-down
    list and then the reservations list, which uses a closure to get the value from
    the `ArrayHelper::map()` methods. We could add a new property in the `Reservation`
    model by creating a function starting with the prefix `get`, such as `getDescription()`,
    and put in it the content of the closure, or rather:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单声明中，我们首先找到客户下拉列表，然后是预订列表，它使用闭包从`ArrayHelper::map()`方法获取值。我们可以在`Reservation`模型中添加一个新属性，通过创建一个以`get`前缀开始的函数来实现，例如`getDescription()`，并在其中放入闭包的内容，或者更确切地说：
- en: '[PRE8]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Or we could use a short syntax to get data from `ArrayHelper::map()` in this
    way:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以使用简短语法从`ArrayHelper::map()`获取数据，如下所示：
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finally, if `$showDetail` is flagged, a simple details box with only the price
    per day of the reservation will be displayed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果`$showDetail`被标记，将显示一个简单的详细框，其中只包含预订的每日价格。
- en: 'Point your browser to `http://hostname/basic/web/reservations/detail-dependent-dropdown`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向`http://hostname/basic/web/reservations/detail-dependent-dropdown`：
- en: '![Example – reservation details loaded from the customers'' drop-down lists](img/B04656_07_04.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 从客户下拉列表加载的预订详情](img/B04656_07_04.jpg)'
- en: Dynamic reservation details being loaded from the customer drop-down list
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从客户下拉列表动态加载的预订详情
- en: Using the Bootstrap widget
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bootstrap小部件
- en: Yii2 supports Bootstrap as a core feature. Bootstrap framework CSS and JavaScript
    files are injected by default in all pages and we could even use this feature
    to only apply CSS classes or call our own JavaScript function provided by Bootstrap.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2支持Bootstrap作为核心功能。Bootstrap框架的CSS和JavaScript文件默认注入到所有页面中，我们甚至可以使用这个功能来仅应用CSS类或调用Bootstrap提供的自己的JavaScript函数。
- en: However, Yii2 embeds Bootstrap as a widget, and we can access this framework's
    capabilities like any other widget.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Yii2将Bootstrap作为小部件嵌入，我们可以像访问任何其他小部件一样访问这个框架的功能。
- en: 'The most used are:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的有：
- en: '| Class name | Description |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `yii\bootstrap\Alert` | This class renders an alert Bootstrap component |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `yii\bootstrap\Alert` | 这个类用于渲染一个 Bootstrap 提示组件 |'
- en: '| `yii\bootstrap\Button` | This class renders a Bootstrap button |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `yii\bootstrap\Button` | 这个类用于渲染一个 Bootstrap 按钮 |'
- en: '| `yii\bootstrap\Dropdown` | This class renders a Bootstrap drop-down menu
    component |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `yii\bootstrap\Dropdown` | 这个类用于渲染一个 Bootstrap 下拉菜单组件 |'
- en: '| `yii\bootstrap\Nav` | This class renders a `nav` HTML component |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `yii\bootstrap\Nav` | 这个类用于渲染一个 `nav` HTML 组件 |'
- en: '| `yii\bootstrap\NavBar` | This class renders a `navbar` HTML component |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `yii\bootstrap\NavBar` | 这个类用于渲染一个 `navbar` HTML 组件 |'
- en: For example, `yii\bootstrap\Nav` and `yii\bootstrap\NavBar` are used in the
    default main template.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`yii\bootstrap\Nav` 和 `yii\bootstrap\NavBar` 被用于默认的主模板中。
- en: 'This is an extract from the main layout view (in `basic/views/layouts/main.php`):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从主布局视图（在 `basic/views/layouts/main.php`）的摘录：
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Example: using datepicker'
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：使用日期选择器
- en: Yii2 also supports, by itself, many jQuery UI widgets through the JUI extension
    for Yii2, `yii2-jui`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 通过 JUI 扩展（`yii2-jui`）本身也支持许多 jQuery UI 组件。
- en: 'If we do not have the `yii2-jui` extension in the `vendor` folder, we can get
    it from Composer using this command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 `vendor` 文件夹中没有 `yii2-jui` 扩展，我们可以使用以下命令从 Composer 获取它：
- en: '[PRE11]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this example, we will discuss the two most used widgets: `datepicker` and
    `autocomplete`. First let''s have a look at the `datepicker` widget. This widget
    can be initialized using a model attribute or by filling out a value property.
    The following is an example made using a model instance and one of its attributes:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将讨论两个最常用的组件：`datepicker` 和 `autocomplete`。首先让我们看看 `datepicker` 组件。这个组件可以使用模型属性或通过填写值属性来初始化。以下是一个使用模型实例及其属性之一制作的示例：
- en: '[PRE12]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And here is a sample of the value property''s use:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是值属性使用的一个示例：
- en: '[PRE13]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now create a new controller named `JuiWidgetsController` in `basic/controllers/JuiWidgetsController.php`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 `basic/controllers/JuiWidgetsController.php` 中创建一个名为 `JuiWidgetsController`
    的新控制器：
- en: '[PRE14]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this action, we define the `$reservation` model, picking from the reservations
    database table with `id` 1.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个操作中，我们定义了 `$reservation` 模型，从具有 `id` 1 的预订数据库表中选取。
- en: When data is sent via POST, the `date_from` and `date_to` fields will be converted
    from the d/m/y to the y-m-d format to make it possible for the database to save
    data. Then the model object is updated through the `save()` method. Using the
    Bootstrap widget, an alert box will be displayed in the view after updating the
    model.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据通过 POST 发送时，`date_from` 和 `date_to` 字段将从 d/m/y 格式转换为 y-m-d 格式，以便数据库能够保存数据。然后通过
    `save()` 方法更新模型对象。使用 Bootstrap 小部件，在更新模型后，视图中将显示一个提示框。
- en: 'Create the `datePicker` view in `basic/views/jui-widgets/datePicker.php`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `basic/views/jui-widgets/datePicker.php` 中创建 `datePicker` 视图：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The view is split into two columns, left and right. The left column simply displays
    a `DataPicker` example from the value (fixed to the current date). The right column
    displays an alert box if the `$reservation` model has been updated and the next
    two kinds of widget declaration too; the first one without using `$form` and the
    second one using `$form`, both outputting the same HTML code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 视图分为两列，左列和右列。左列简单地显示一个从值（固定为当前日期）中获取的 `DataPicker` 示例。右列显示一个提示框，如果 `$reservation`
    模型已被更新，以及接下来的两种组件声明；第一个没有使用 `$form`，第二个使用 `$form`，两者输出相同的 HTML 代码。
- en: In either case, the `DatePicker` date output format is set to dd/MM/yyyy through
    the `dateFormat` property and the language is set to Italian through the `language`
    property.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，`DatePicker` 日期输出格式都通过 `dateFormat` 属性设置为 dd/MM/yyyy，语言通过 `language`
    属性设置为意大利语。
- en: 'Point your browser to `http://hostname/basic/web/jui-widgets/date-picker` to
    see the following output:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向 `http://hostname/basic/web/jui-widgets/date-picker` 以查看以下输出：
- en: '![Example: using datepicker](img/B04656_07_05.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![示例：使用日期选择器](img/B04656_07_05.jpg)'
- en: Using datepicker
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用日期选择器
- en: Multiple models in the same view
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同一个视图中存在多个模型
- en: Often, we can find many models of same or different class in a single view.
    First of all, remember that Yii2 encapsulates all the views' form attributes in
    the same container, named the same as the model class name. Therefore, when the
    controller receives the data, these will all be organized in a key of the `$_POST`
    array named the same as the model class name.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们可以在单个视图中找到许多相同或不同类的模型。首先，请记住，Yii2 将所有视图的表单属性封装在同一个容器中，该容器的名称与模型类名相同。因此，当控制器接收数据时，这些数据都将组织在
    `$_POST` 数组的同一个键中，键名与模型类名相同。
- en: 'If the model class name is `Customer`, every form input name attribute will
    be `Customer[attributeA_of_model]` This is built with: `$form->field($model, ''attributeA_of_model'')->textInput()`.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模型类名是 `Customer`，则每个表单输入名称属性将为 `Customer[attributeA_of_model]`。这是通过以下方式构建的：`$form->field($model,
    'attributeA_of_model')->textInput()`。
- en: 'In the case of multiple models of the same class, the container will again
    be named as the model class name but every attribute of each model will be inserted
    in an array, such as:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一类多个模型的情况下，容器将再次命名为模型类名，但每个模型的每个属性都将插入到一个数组中，例如：
- en: '[PRE16]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'These are built with:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用以下方式构建的：
- en: '[PRE17]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that the array key information is inserted in the attribute name!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，数组键信息被插入到属性名中！
- en: So, when data is passed to the controller, `$_POST['Customer']` will be an array
    composed by the `Customer` models and every key of this array, for example, `$_POST['Customer'][0]`
    is a model of the `Customer` class.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当数据传递给控制器时，`$_POST['Customer']` 将是一个由 `Customer` 模型组成的数组，并且这个数组的每个键，例如，`$_POST['Customer'][0]`
    是 `Customer` 类的一个模型。
- en: Example – saving multiple customers at the same time
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 同时保存多个客户
- en: Now let's see how to save three customers at once. We will create three containers,
    one for each model class that will contain some fields of the `Customer` model.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何一次性保存三个客户。我们将创建三个容器，每个容器对应一个模型类，将包含一些 `Customer` 模型的字段。
- en: 'Create a view in `basic/views/customers/createMultipleModels.php` that contains
    a block of input fields repeated for every model passed from the controller:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `basic/views/customers/createMultipleModels.php` 中创建一个视图，其中包含一个输入字段块，该块为控制器传递的每个模型重复：
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For each model all the fields will have the same validator rules of the `Customer`
    class, and every single model object will be validated separately.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个模型，所有字段都将具有 `Customer` 类相同的验证规则，并且每个模型对象都将单独进行验证。
- en: 'Next create a new action in the customers controller in `basic/controllers/CustomersController.php`,
    named `actionCreateMultipleModels`. If the `$_POST[''Customer'']` content is set,
    and if they are all validated and finally redirected to the grid action, it will
    save them all together; otherwise it will create three models of the `Customer`
    class:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来在 `basic/controllers/CustomersController.php` 中的客户控制器中创建一个新的操作，命名为 `actionCreateMultipleModels`。如果设置了
    `$_POST['Customer']` 内容，并且它们都经过验证并最终重定向到网格操作，它们将一起保存；否则，它将创建三个 `Customer` 类的模型：
- en: '[PRE19]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It can be useful to create models in the controller because a large number of
    them and other validation checks are configured here.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中创建模型可能很有用，因为在这里配置了大量模型和其他验证检查。
- en: 'Browse to `http://hostname/basic/web/customers/create-multiple-models` to see
    the complete page:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到 `http://hostname/basic/web/customers/create-multiple-models` 以查看完整的页面：
- en: '![Example – saving multiple customers at the same time](img/B04656_07_06.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 同时保存多个客户](img/B04656_07_06.jpg)'
- en: Multiple models in the same view
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一视图中保存多个模型
- en: Saving linked models in the same view
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在同一视图中保存链接模型
- en: It could be convenient to save different kind of models in the same view. This
    approach allows us to save time and to navigate from every single detail until
    a final item that merges all data is created. Handling different kind of models
    linked to each other it is not so different from what we have seen so far. The
    only point to take care of is the link (foreign keys) between models, which we
    must ensure is valid.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一视图中保存不同类型的模型可能很方便。这种方法允许我们节省时间，并从每个单独的细节导航到最后一个合并所有数据的项。处理相互链接的不同类型的模型与之前看到的方法没有太大区别。唯一需要注意的点是在模型之间的链接（外键），我们必须确保它是有效的。
- en: Therefore, the controller action will receive the `$_POST` data encapsulated
    in the model's class name container; if we are thinking, for example, of the customer
    and reservation models, we will have two arrays in the `$_POST` variable, `$_POST['Customer']`
    and `$_POST['Reservation']`, containing all the fields about the customer and
    reservation models.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，控制器操作将接收封装在模型类名容器中的 `$_POST` 数据；如果我们考虑客户和预订模型，例如，`$_POST` 变量中将有两个数组，`$_POST['Customer']`
    和 `$_POST['Reservation']`，包含有关客户和预订模型的所有字段。
- en: Then all data must be saved together. It is advisable to use a database transaction
    while saving data because the action can be considered as ended only when all
    the data has been saved.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然后必须一起保存所有数据。在保存数据时使用数据库事务是明智的，因为只有当所有数据都已保存时，操作才能被认为是完成的。
- en: Using database transactions in Yii2 is incredibly simple! A database transaction
    starts with calling `beginTransaction()` on the database connection object and
    finishes with calling the `commit()` or `rollback()` method on the database transaction
    object created by `beginTransaction()`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii2中使用数据库事务非常简单！数据库事务从在数据库连接对象上调用`beginTransaction()`开始，并在通过`beginTransaction()`创建的数据库事务对象上调用`commit()`或`rollback()`方法时结束。
- en: 'To start a transaction:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个事务：
- en: '[PRE20]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Commit a transaction, to save all the database activities:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 提交一个事务，以保存所有数据库活动：
- en: '[PRE21]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Rollback a transaction, to clear all the database activities:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚一个事务，以清除所有数据库活动：
- en: '[PRE22]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So, if a customer was saved and the reservation was not (for any possible reason),
    our data would be partial and incomplete. Using a database transaction, we will
    avoid this danger.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果客户已保存而预订未保存（任何可能的原因），我们的数据将是部分和不完整的。使用数据库事务，我们将避免这种危险。
- en: Example – creating a customer and reservation in the same view
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 在同一视图中创建客户和预订
- en: We now want to create both the customer and reservation models in the same view
    in a single step. In this way, we will have a box containing the customer model
    fields and a box with the reservation model fields in the view.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们希望在同一个视图中一次性创建客户和预订模型。这样，我们将在视图中有一个包含客户模型字段的框和一个包含预订模型字段的框。
- en: 'Create a view in `basic/views/reservations/createCustomerAndReservation.php`,
    with the fields from the customer and reservation models:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/views/reservations/createCustomerAndReservation.php`中创建一个视图，包含客户和预订模型中的字段：
- en: '[PRE23]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We have created two blocks in the form to fill out the fields for the customer
    and the reservation.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在表单中创建了两个区块，用于填写客户和预订的字段。
- en: 'Now, create a new action named `actionCreateCustomerAndReservation` in `ReservationsController`
    in `basic/controllers/ReservationsController.php`:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`basic/controllers/ReservationsController.php`中的`ReservationsController`中创建一个名为`actionCreateCustomerAndReservation`的新操作：
- en: '[PRE24]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Ensure you pay attention to these two matters:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你注意以下两点：
- en: '`$reservation->customer_id = 0`: With this code, we avoid the validation error
    relating to the `customer_id` requirement that appears when `$reservation` is
    validated'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$reservation->customer_id = 0`：使用此代码，我们避免了当`$reservation`验证时出现的与`customer_id`要求相关的验证错误'
- en: The database transaction will be committed only if the customer model and reservation
    model's save action are completed
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当客户模型和预订模型的保存操作完成时，数据库事务才会提交
- en: 'Browse to `http://hostname/basic/web/reservations/create-customer-and-reservation`
    to see the complete page:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到`http://hostname/basic/web/reservations/create-customer-and-reservation`以查看完整页面：
- en: '![Example – creating a customer and reservation in the same view](img/B04656_07_07.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 在同一视图中创建客户和预订](img/B04656_07_07.jpg)'
- en: A customer and reservation created together
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 同时创建客户和预订
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed about the user interface and how Yii helps us
    with its core functionalities. The first important tool that Yii provides is Gii,
    which facilitates CRUD actions and views' creation, which we used in Gii to manage
    rooms, reservations, and customers, for example.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了用户界面以及Yii如何通过其核心功能帮助我们。Yii提供的第一项重要工具是Gii，它简化了CRUD操作和视图的创建，例如，我们使用Gii来管理房间、预订和客户。
- en: Next we saw how to embed JavaScript and CSS in a layout and views, with file
    content or an inline block. This was applied to an example that showed you how
    to change the number of columns displayed based on the browser's available width;
    this is typically a task for websites or web apps that display advertising columns.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看到了如何在布局和视图中嵌入JavaScript和CSS，使用文件内容或内联块。这应用于一个示例，展示了如何根据浏览器的可用宽度更改显示的列数；这通常是网站或显示广告列的Web应用的典型任务。
- en: Again on the subject of JavaScript, you learned how to implement direct AJAX
    calls, taking an example where the reservation detail was dynamically loaded from
    the customers drop-down list.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 再次谈到JavaScript，你学习了如何实现直接的AJAX调用，以一个示例为例，其中预订详情是从客户的下拉列表中动态加载的。
- en: Next we looked at Yii's core user interface library, which is built on Bootstrap
    and we illustrated how to use the main Bootstrap widgets natively, together with
    DatePicker (probably the most commonly used jQuery UI widget).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探讨了Yii的核心用户界面库，它是基于Bootstrap构建的，我们展示了如何原生地使用主要的Bootstrap小部件，以及DatePicker（可能是最常用的jQuery
    UI小部件）。
- en: 'Finally, the last topics covered were multiple models of the same and different
    classes. We looked at two examples on these topics: the first one to save multiple
    customers at the same time and the second to create a customer and reservation
    in the same view.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了同一类和不同类别的多种模型。我们探讨了这两个主题的两个示例：第一个是同时保存多个客户，第二个是在同一视图中创建客户和预订。
- en: In the next chapter, we will explain how to set up login authentication and
    authorization, and will reach these goals from scratch.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将解释如何设置登录认证和授权，并从头开始实现这些目标。
