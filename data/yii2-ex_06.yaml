- en: Chapter 6. Using a Grid for Data and Relations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：使用网格进行数据和关系
- en: 'We will cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: DataProvider for grids
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格的DataProvider
- en: Using grids
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用网格
- en: 'Custom columns in grids:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格中的自定义列：
- en: 'For example: displaying a reservations list by clicking on a customer grid
    row'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：通过点击客户网格行来显示预订列表
- en: Filters in GridView
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GridView中的过滤器
- en: Displaying and filtering ActiveRecord relational data in a grid's column
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网格列中显示和过滤ActiveRecord关系数据
- en: 'Summarizing the footer row in a grid:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结网格的底部行：
- en: 'For example: extending GridView to customize the footer row in a grid'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：扩展GridView来自定义网格的底部行
- en: 'Multiple grids on one page:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单页上的多个网格：
- en: 'For example: managing reservations and room grids in the same view'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：在同一个视图中管理预订和房间网格
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'In the previous chapter, you learned how to get data from databases. Now it
    is time to use a fundamental widget provided by framework: GridView. The first
    topic we''ll cover is data input format expected by a grid. Then we will analyze
    the default implementation of a grid and proceed to look at customizations to
    display the relationship between data. Finally, you will learn to extend the grid
    base class to display everything we need in a grid layout.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何从数据库中获取数据。现在，是时候使用框架提供的基本控件：GridView了。我们将首先介绍网格期望的数据输入格式。然后，我们将分析网格的默认实现，并继续查看自定义以显示数据之间的关系。最后，你将学习扩展网格基类以在网格布局中显示所需的所有内容。
- en: DataProvider for grids
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格的DataProvider
- en: GridView is the widget provided by Yii2 to display data in a grid layout.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GridView是Yii2提供的用于在网格布局中显示数据的控件。
- en: This widget requires that data used as an input source is an extension of the
    abstract class `yii\data\BaseDataProvider`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此控件要求用作输入源的数据是抽象类`yii\data\BaseDataProvider`的扩展。
- en: To deal with a data source, DataProvider supplies some additional actions to
    handle pagination and sorting.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理数据源，DataProvider提供了一些额外的操作来处理分页和排序。
- en: '`BaseDataProvider` has a method named `getModels()` that returns a list of
    items for the current page. This means that we could also use DataProvider to
    paginate data from a source and display it as we need to.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`BaseDataProvider`有一个名为`getModels()`的方法，它返回当前页面的项目列表。这意味着我们也可以使用DataProvider从源分页数据，并按需显示。'
- en: 'By default, the framework has three core classes that extend `yii\data\BaseDataProvider`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，框架有三个核心类扩展了`yii\data\BaseDataProvider`：
- en: '`yii\data\ActiveDataProvider`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yii\data\ActiveDataProvider`'
- en: '`yii\data\ArrayDataProvider`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yii\data\ArrayDataProvider`'
- en: '`yii\data\SqlDataProvider`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yii\data\SqlDataProvider`'
- en: 'The first one, `ActiveDataProvider`, uses a `yii\db\Query` instance from ActiveRecord
    as a data source. The parameter array is passed to the constructor and the `yii\db\Query`
    object is filled out in the `query` attribute:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个，`ActiveDataProvider`，使用ActiveRecord的`yii\db\Query`实例作为数据源。参数数组传递给构造函数，`yii\db\Query`对象在`query`属性中填充：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`ActiveDataProvider` is the most used DataProvider, since it depends directly
    on ActiveRecord, the best way to interact with databases.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActiveDataProvider`是最常用的DataProvider，因为它直接依赖于ActiveRecord，与数据库交互的最佳方式。'
- en: The second point, `ArrayDataProvider`, uses an array of items that can be sorted
    or paginated as a data source. This provider is employed when data can not be
    represented with ActiveRecord, for example, when they are taken from another data
    source, such as a JSON REST service or RSS feed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点，`ArrayDataProvider`使用一个可以排序或分页的项目数组作为数据源。当数据不能用ActiveRecord表示时，会使用这个提供者，例如，当它们来自另一个数据源时，如JSON
    REST服务或RSS源。
- en: 'The primary difference between `ActiveDataProvider` is that all data should
    be immediately passed to a construct:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActiveDataProvider`的主要区别在于所有数据应立即传递给构造函数：'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this snippet, we took data from an ActiveRecord to show the differences between
    `ActiveDataProvider` and `ArrayDataProvider`. For this last provider, all the
    modes should be passed to the constructor.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个片段中，我们从ActiveRecord中获取数据来展示`ActiveDataProvider`和`ArrayDataProvider`之间的区别。对于这个最后的提供者，所有模式都应该传递给构造函数。
- en: So, if the `Room` table has 10,000 records, with `ActiveDataProvider` 35 items
    at a time will be loaded, while through `ArrayDataProvider` they will be loaded
    all from scratch (with big performance issues).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果`Room`表有10,000条记录，使用`ActiveDataProvider`每次将加载35个项目，而通过`ArrayDataProvider`它们将全部从头开始加载（存在大的性能问题）。
- en: 'The last one, `SqlDataProvider`, uses a SQL query as a data source. If we create
    pagination with this provider, we will need to also pass the `totalCount` attribute
    to the constructor to inform DataProvider how many records the SQL query should
    return:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个，`SqlDataProvider`，使用SQL查询作为数据源。如果我们使用此提供程序创建分页，我们需要将`totalCount`属性传递给构造函数，以通知DataProvider
    SQL查询应返回多少条记录：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using a grid
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网格
- en: 'Now that we know how to get a data input source to pass to GridView, let''s
    look at how to implement it. Minimal implementation of GridView requires two attributes
    for an array passed to a constructor: `dataProvider` and `columns`. The first
    parameter, `dataProvider`, is the one we want to use in order to manipulate the
    data.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何获取要传递给GridView的数据输入源，让我们看看如何实现它。GridView的最小实现需要将两个属性传递给构造函数的数组：`dataProvider`和`columns`。第一个参数`dataProvider`是我们想要用来操作数据的。
- en: 'The second parameter, `columns`, represents the columns of the table to be
    displayed, for example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数，`columns`，表示要显示的表格列，例如：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code will display a table with data from `$dataProvider` and five columns:
    `id`, `floor`, `room_number`, `available_from`, and `price_per_day`; the last
    two columns are formatted firstly using `datetime` and secondly using `currency`.
    Colons are used to specify the formatter to be applied to the column data.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将显示一个表格，其中包含从`$dataProvider`获取的数据和五列：`id`、`floor`、`room_number`、`available_from`和`price_per_day`；最后两列首先使用`datetime`格式化，然后使用`currency`格式化。冒号用于指定应用于列数据的格式化程序。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The aspect of the table can be customized with many attributes and by default,
    the table layout is rendered using Bootstrap.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表的样式可以通过许多属性进行自定义，并且默认情况下，表格布局使用Bootstrap渲染。
- en: Columns in the grid table can be identified using strings, but in general they
    are configured in terms of `yii\grid\Column` classes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 网格表中的列可以使用字符串进行标识，但通常它们是根据`yii\grid\Column`类进行配置的。
- en: Custom columns in a grid
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格中的自定义列
- en: As mentioned in the previous paragraph, the `columns` property of the GridView
    widget is mainly filled with strings.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一段所述，GridView小部件的`columns`属性主要填充字符串。
- en: When we need to apply a specific format, such as currency or date/time, we can
    append this specification to the column name with a colon and the type used for
    formatting, as `currency` or `datetime`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要应用特定格式，如货币或日期/时间时，我们可以将此规范附加到列名后跟一个冒号和用于格式化的类型，如`currency`或`datetime`。
- en: But the most general form of a GridView column is an object of the `yii\grid\Column`
    class, derived by the `yii\grid\DataColumn` class.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但GridView列的最一般形式是`yii\grid\Column`类的一个对象，该类由`yii\grid\DataColumn`类派生。
- en: 'A GridView column extended by the `yii\grid\Column` class is rendered using
    an array with the following keys:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`yii\grid\Column`类扩展的GridView列使用具有以下键的数组进行渲染：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are also other parameters but these ones are the most used.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他参数，但这些都是最常用的。
- en: Example – displaying a reservations list by clicking on a customer grid row
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 通过单击客户网格行显示预订列表
- en: 'We are now ready to create a customer grid that contains a reference to the
    linked reservation list in every row. First of all, make sure that the structure
    and the data for the customer and reservation tables is the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备创建一个包含每行链接预订列表的客户网格。首先，确保客户和预订表的结构和数据如下：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a new controller named `CustomersController` in `basic/controllers/CustomersController.php`
    with the `actionGrid` action to display a list in the grid view:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/controllers/CustomersController.php`中创建一个名为`CustomersController`的新控制器，并带有`actionGrid`操作来在网格视图中显示列表：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This action `actionGrid` simply creates a data provider with all the data from
    the customer (unfiltered) and with a pagination that displays ten items on a page.
    Finally, render the grid view.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作`actionGrid`简单地创建一个包含所有客户（未过滤）数据的提供程序，并带有每页显示十个项目的分页。最后，渲染网格视图。
- en: 'This is the content of the grid view in `basic/views/customers/grid.php`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`basic/views/customers/grid.php`中网格视图的内容：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The last two columns require particular explanation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两列需要特别说明。
- en: The penultimate one, `Reservation`, displays a link to give you access to the
    list of all customer reservations. We have put `Reservations` as the header and
    filled the `content` property with dynamic data passed from the callback function,
    which returns an HTML link to the `reservations/index` route with a parameter
    indicating `customer_id` selected.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 倒数第二项“预订”显示一个链接，让您访问所有客户预订的列表。我们将“预订”作为标题，并在`content`属性中填充从回调函数传递的动态数据，该函数返回指向`reservations/index`路由的HTML链接，并带有指示所选`customer_id`的参数。
- en: The last column headed `Actions` displays the ActionColumn with the single action
    `delete` to remove the selected record.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个标题为“操作”的列显示了带有单个操作“删除”的ActionColumn，用于删除所选记录。
- en: 'Point your browser to `http://hostname/basic/customers/grid` and you should
    have the following output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向`http://hostname/basic/customers/grid`，您应该看到以下输出：
- en: '![Example – displaying a reservations list by clicking on a customer grid row](img/B04656_06_01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 通过单击客户网格行显示预订列表](img/B04656_06_01.jpg)'
- en: The Customers grid using the GridView widget
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GridView小部件的“客户”网格
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The language used in GridView is configured in `basic/config/web.php` with the
    `language` property. This property has a global effect on every core widget.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GridView中使用的语言在`basic/config/web.php`中通过`language`属性进行配置。此属性对每个核心小部件具有全局影响。
- en: We can complete this example by just putting a counter near the `Reservations`
    link to indicate the number of reservations for each customer.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在“预订”链接附近放置一个计数器来完成此示例，以指示每个客户的预订数量。
- en: 'For this purpose, we need to add a new relation named `getReservationsCount`
    to the Customer model in `basic/models/Customer.php`, which returns the number
    of reservations linked to the customer:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要在`basic/models/Customer.php`中的客户模型中添加一个名为`getReservationsCount`的新关系，它返回与客户关联的预订数量：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we can modify the penultimate column with:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下方式修改倒数第二列：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If we refresh our browser now, we will see near the `Reservations` anchor link,
    the correct number of reservations for that customer appears.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在刷新浏览器，我们将在“预订”锚链接附近看到该客户的正确预订数量。
- en: This example represents the complete reservations list displayed when a user
    clicks on the link `Reservations`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例表示用户点击“预订”链接时显示的完整预订列表。
- en: 'Create `ReservationsController` as a new file in `basic/controllers/ReservationsController.php`
    with an action `grid` and the following content:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/controllers/ReservationsController.php`中创建名为`ReservationsController`的新文件，包含一个名为`grid`的操作和以下内容：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this controller, we applied an `andFilterWhere` condition to query whether
    `$_GET['Reservation']` is set. The `andFilterWhere()`method will apply a filter
    passed as a parameter only if the condition is not empty. So if `$_GET['Reservation']['customer_id']`
    is not set, the `andFilterWhere()` condition parameter will have a null value
    and will not be appended to any other query condition.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在此控制器中，我们应用了一个`andFilterWhere`条件来查询`$_GET['Reservation']`是否已设置。如果条件不为空，`andFilterWhere()`方法将应用作为参数传递的筛选器。因此，如果`$_GET['Reservation']['customer_id']`未设置，`andFilterWhere()`条件参数将具有空值，并且不会附加到任何其他查询条件。
- en: Filters in GridView
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GridView中的筛选器
- en: GridView has a core feature of being able to simplify filter rows just by putting
    an additional row below the header row.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: GridView的核心特性是能够通过在标题行下方添加一个额外的行来简化筛选行。
- en: Filters are mainly text input but in general they can be any type of control
    and we can customize them as much as we want.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 筛选器主要是文本输入框，但通常可以是任何类型的控件，我们可以根据需要自定义它们。
- en: Filters can be activated by filling out the GridView widget property `filterModel`
    with an instance of the model class and automatically a new row will be created
    below the header, containing working text inputs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过填写GridView小部件属性`filterModel`为模型类的一个实例来激活筛选器，自动在标题下方创建一个新行，包含可用的文本输入框。
- en: Filter text inputs have a name attribute filled with the model class name, which
    includes the field name. In this way, we will pass data to a controller, including
    everything in a single array; a variable that can easily be used to populate a
    search model massively.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 筛选文本输入框的名称属性填充了模型类名，包括字段名。这样，我们将向控制器传递数据，包括在单个数组中的所有内容；一个可以轻松用于填充搜索模型的变量。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Automatic text input filters are created only for attributes that belong to
    at least one rule in the `rules()` method of `ActiveDataProvider`; otherwise it
    is enough that attributes belong to the `safe` validator.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 只有对于属于`ActiveDataProvider`的`rules()`方法中至少一个规则的属性，才会创建自动文本输入过滤器；否则，属性属于`safe`验证器就足够了。
- en: Let's create an example with the reservations grid.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个预订网格的例子来创建一个示例。
- en: 'We will fill out the `filterModel` property to apply filters to GridView, for
    example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将填写`filterModel`属性以应用GridView的过滤器，例如：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `$searchModel` is an instance of the `Reservation` model class that we
    will pass to the view from the grid action of `ReservationsController`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`$searchModel`是我们将从`ReservationsController`的网格操作传递到视图的`Reservation`模型类的实例。
- en: 'Now let''s create `actionGrid()` in `ReservationsController` in `basic/controllers/ReservationsController.php`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`basic/controllers/ReservationsController.php`中的`ReservationsController`创建`actionGrid()`：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `$searchModel` instance is filled with the content of `$_GET[''Reservation'']`,
    in line:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`$searchModel`实例在以下行中填充了`$_GET[''Reservation'']`的内容：'
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, `$query` is updated with the content of non-null attributes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`$query`将更新为非空属性的内容。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that the ActiveRecord's `load()` method will get values from the array
    enclosed in the model class name, applied as the key to the array passed as the
    first function parameter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 记住ActiveRecord的`load()`方法将从模型类名中包含的数组中获取值，并将其作为键应用于传递给第一个函数参数的数组。
- en: 'Browse to `http://hostname/basic/reservations/grid` and type `2` in the **Room
    ID** column filter (the second column). This should be the output:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到`http://hostname/basic/reservations/grid`并在**房间ID**列过滤器（第二列）中输入`2`。这应该是输出：
- en: '![Filters in GridView](img/B04656_06_02.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![GridView中的过滤器](img/B04656_06_02.jpg)'
- en: Using filters in the GridView widget
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在GridView小部件中使用过滤器
- en: We can also choose to customize the way we render a filter. Imagine using the
    **Room ID** column filter as a drop-down list instead of an input textbox.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择自定义渲染过滤器的方式。想象一下，将**房间ID**列过滤器作为一个下拉列表而不是输入文本框。
- en: 'We only need to fill out the `filter` property of **Room ID** with `dropDownList`.
    It is advisable to use the `Html` helper class to render `dropDownList` using
    the `activeDropDownList()` method. The `active` prefix stands for ActiveRecord.
    This method `dropDownList()` requires three parameters: the model class, the attribute
    of the model class, and finally an array key-value where `key` is the value attribute
    of the `<option>` tag and `value` is the text of the `<option>` tag.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要填写**房间ID**的`filter`属性为`dropDownList`。建议使用`Html`辅助类通过`activeDropDownList()`方法渲染`dropDownList`。`active`前缀代表ActiveRecord。此`dropDownList()`方法需要三个参数：模型类、模型类的属性，以及最后是一个键值数组，其中`key`是`<option>`标签的值属性，`value`是`<option>`标签的文本。
- en: We will use `yii\helpers\ArrayHelper` to create the array key-value, where the
    key is the `id` attribute of the model and the value is the return value of a
    callback function.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`yii\helpers\ArrayHelper`创建键值数组，其中键是模型的`id`属性，值是回调函数的返回值。
- en: 'This is how the file in `basic/views/reservations/grid.php` changes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`basic/views/reservations/grid.php`中的文件如何更改：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is the expected output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的输出：
- en: '![Filters in GridView](img/B04656_06_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![GridView中的过滤器](img/B04656_06_03.jpg)'
- en: GridView with the dropdown list filter
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 带下拉列表过滤器的GridView
- en: Displaying and filtering ActiveRecord relational data in a grid's column
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网格列中显示和过滤ActiveRecord关系数据
- en: Let's now focus on relational data in GridView, a common topic that is easily
    solved by itself.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在关注GridView中的关系数据，这是一个常见的话题，可以很容易地自行解决。
- en: 'Think about the reservations grid, which has two relational fields: `room_id`
    and `customer_id`, referring respectively to room and customer tables. What if
    we want to immediately display the customer''s surname, or room number?'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到预订网格有两个关系字段：`room_id`和`customer_id`，分别引用房间和客户表。如果我们想立即显示客户的姓氏或房间号怎么办？
- en: At this point, our goal is to display relational data, for example, the customer's
    surname instead of `customer_id` in GridView. Fields that refer to related data
    are expressed with the `relation` attribute.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的目标是显示关系数据，例如，在GridView中显示客户的姓氏而不是`customer_id`。引用相关数据的字段用`relation`属性表示。
- en: In the reservation grid view, `customer` is the relation to get a related customer
    and `surname` is the field to keep.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在预订网格视图中，`customer`是获取相关客户的关系，而`surname`是要保留的字段。
- en: 'Therefore, to display the customer''s surname, it is enough to insert this
    column (as a string) in the reservations grid view:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要显示客户的姓氏，只需在预订网格视图中插入此列（作为字符串）即可：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is equivalent to:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'A column named `surname` will be displayed. If we want to change column name
    to `Customer`, we use this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示一个名为`surname`的列。如果我们想将列名改为`Customer`，我们使用这个：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We could use custom properties to get data, for example, `getnameAndSurname`
    to get the personal details of a specific customer.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用自定义属性来获取数据，例如，使用`getnameAndSurname`来获取特定客户的个人详细信息。
- en: 'Insert a new property in the `Customer` model:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Customer`模型中插入一个新属性：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then this will be the column in the GridView:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这将是在GridView中的列：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We now want to filter the `Customer` column. Since the `customer.surname` attribute
    is not in the `rules()` method of the `Reservation` model, we need to extend this
    class to handle extra attributes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想过滤`Customer`列。由于`customer.surname`属性不在`Reservation`模型的`rules()`方法中，我们需要扩展此类来处理额外属性。
- en: 'So, create a new class named `ReservationSearch` in `basic/models/ReservationSearch.php`
    with the following content:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在`basic/models/ReservationSearch.php`中创建一个名为`ReservationSearch`的新类，内容如下：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This extension simply adds a new attribute and a new rule attached to this attribute.
    The name of the attribute is `customer.surname`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展仅添加了一个新属性和附加到该属性的新规则。该属性的名称是`customer.surname`。
- en: We now have to change the `actionGrid()` action in `ReservationsController`
    to make a connection to the `customer` table that permits us to filter based on
    the customer's surname.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在必须更改`ReservationsController`中的`actionGrid()`操作，以便与允许根据客户姓氏进行过滤的`customer`表建立连接。
- en: 'This is the content of `actionGrid()` of `ReservationsController` in `basic/controllers/ReservationsController.php`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`basic/controllers/ReservationsController.php`中`ReservationsController`的`actionGrid()`方法的内容：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be careful to ensure that `$searchModel` is instanced from the `ReservationSearch`
    class, as much as `$_GET`, parameter used to get data is instanced from `ReservationSearch`
    instead of `Reservation` (because it has changed class).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意确保`$searchModel`是从`ReservationSearch`类实例化的，以及用于获取数据的`$_GET`参数也是从`ReservationSearch`而不是`Reservation`（因为它已更改类）实例化的。
- en: 'Filtering an action on the customer''s surname in `actionGrid()` is made using
    these lines of code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`actionGrid()`中使用这些代码行来过滤客户姓氏的操作：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We make a join and if the `customer.surname` attribute is not null, then there
    will be a new filter. Browse to `http://hostname/basic/reservations/grid` and
    type `Fo` in the **Customer** column filter. You should see this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行连接，如果`customer.surname`属性不为空，则将有一个新的过滤器。浏览到`http://hostname/basic/reservations/grid`并在**Customer**列过滤器中输入`Fo`。你应该看到这个：
- en: '![Displaying and filtering ActiveRecord relational data in a grid''s column](img/B04656_06_04.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![在网格列中显示和过滤ActiveRecord关系数据](img/B04656_06_04.jpg)'
- en: Filtering using relational data
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关系数据过滤
- en: A summarized footer row in a grid
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格中的汇总页脚行
- en: One feature of GridView is that it shows summarized or statistical data, usually
    as a footer row or first row, to get the data immediately (instead of scrolling
    down the page to the bottom of the grid).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: GridView的一个特点是它显示汇总或统计数据，通常作为底部行或第一行，以便立即获取数据（而不是滚动到页面底部的网格底部）。
- en: A column of the GridView widget has an attribute named `footer` to identify
    the last row of the current pagination. A value filled in this attribute will
    be placed in the last row of the grid.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: GridView小部件的列有一个名为`footer`的属性，用于标识当前分页的最后一行。在此属性中填入的值将被放置在网格的最后一行。
- en: By default, showing the footer is disabled; to enable the footer, it is enough
    to set the attribute `showFooter` of GridView to `true`. Then, we need to insert
    data in the 'footer' attribute of the column that we want to show.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，显示页脚是禁用的；要启用页脚，只需将GridView的`showFooter`属性设置为`true`。然后，我们需要在要显示的列的`footer`属性中插入数据。
- en: For example, we want to display the average price per day of rooms.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想显示房间每天的平均价格。
- en: 'Add this code at the top of the grid view in `basic/views/reservations/grid.php`
    to calculate the average of price per day:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/views/reservations/grid.php`网格视图中顶部添加此代码以计算每天的平均价格：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Be careful! In this example, `count` is made using the models of the current
    pagination. If the grid is composed of more pages, it will only show the average
    value for the current page!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 小心！在这个例子中，`count`是使用当前分页的模型进行的。如果网格由更多页面组成，它将只显示当前页的平均值！
- en: 'This count can consider all records (also filtered ones), making the calculation
    based not only on the models of the current pagination but also on the result
    of a query. Add the average count in `actionGrid()` of `ReservationsController`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此计数可以考虑到所有记录（包括过滤后的记录），计算基于当前分页的模型以及查询的结果。在 `ReservationsController` 的 `actionGrid()`
    中添加平均计数：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The average is calculated from the `average()` method of the `$query` object
    (so the filter will be considered, if it is filled out) and passed to the view,
    so the code at the top of the view to execute calculation is no longer needed
    because we have correctly moved it to the Controller action.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 平均值是从 `$query` 对象的 `average()` 方法计算得出的（因此如果已填写，将考虑过滤器）并传递到视图中，因此视图顶部的计算代码不再需要，因为我们已经正确地将其移动到控制器操作中。
- en: 'Then change the `footer` content of the `price_per_day` column:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后更改 `price_per_day` 列的 `footer` 内容：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now the average count will be independent of pagination.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，平均计数将独立于分页。
- en: Example – extending GridView to customize the footer row in a grid
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 扩展 GridView 以自定义网格的页脚行
- en: In a highly customized GridView, it is required to show data in positions not
    handled by default by GridView, or it is required to apply specific changes (such
    as merging a column).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在高度定制的 GridView 中，需要显示默认情况下未处理的 GridView 中的数据位置，或者需要应用特定的更改（例如合并列）。
- en: In either of these cases and when it is impossible to create the desired output
    with attributes of GridView, it will be necessary to subclass the GridView widget.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，当无法使用 GridView 的属性创建所需的输出时，将需要子类化 GridView 小部件。
- en: 'The GridView widget has specific methods to render different parts of it: `renderTableBody()`,
    `renderTableFooter()`, `renderTableHeader()`, `renderTableRow()`, and so on.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: GridView 小部件有特定的方法来渲染其不同部分：`renderTableBody()`、`renderTableFooter()`、`renderTableHeader()`、`renderTableRow()`
    等等。
- en: Think about the previous example. Now, we also want to gather the first three
    columns in the footer to display the `Average` label, the unique value in the
    `price_per_day` column, and the last four columns with an empty space.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑之前的示例。现在，我们还想收集页脚中的前三个列以显示 `Average` 标签，`price_per_day` 列中的唯一值，以及最后的四个列留空。
- en: 'Create a new component that extends the `yii\grid\GridView` widget in `basic/components/GridViewReservation.php`
    with this content:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `basic/components/GridViewReservation.php` 中创建一个新的组件，该组件扩展了 `yii\grid\GridView`
    小部件，并包含以下内容：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This component just extends `yii\grid\GridView` and overrides the `renderTableFooter()`
    method to make the required customization (mainly merging cells). The only logic
    in this code is to find the `price_per_day` column, cycling the array of columns
    given by `$this->columns`, where `$this` refers to the GridView object.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件仅扩展 `yii\grid\GridView` 并重写 `renderTableFooter()` 方法以进行所需的定制（主要是合并单元格）。此代码中的唯一逻辑是找到
    `price_per_day` 列，遍历由 `$this->columns` 给出的列数组，其中 `$this` 指的是 GridView 对象。
- en: Multiple grids on one page
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页上的多个网格
- en: Every Yii2 widget has so much encapsulated in it that using multiple GridView
    widgets is a simple activity that involves making few changes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Yii2小部件都封装了如此多的内容，因此使用多个 GridView 小部件只是一个简单的活动，只需要进行少量更改。
- en: The only parameters indeed that are not customizable with the DataProvider model
    class are `pageParam` and `sortParam`, which define the current page index and
    the parameters used to order a grid.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，唯一不能通过 DataProvider 模型类自定义的参数是 `pageParam` 和 `sortParam`，它们分别定义了当前页码索引和用于排序网格的参数。
- en: Suppose, for example, that we have two GridViews filled with two different data
    providers, `$firstDataProvider` and `$secondDataProvider`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，例如，我们有两个填充了两个不同数据提供者的 GridView，`$firstDataProvider` 和 `$secondDataProvider`。
- en: 'In the controller, we will set the `pageParam` and `sortParam` parameters of
    each DataProvider:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中，我们将设置每个 DataProvider 的 `pageParam` 和 `sortParam` 参数：
- en: '[PRE27]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If we miss these definitions when changing a page or sorting a column, this
    action will also affect the other GridView in the same page because we have not
    distinguished the two grid view parameters.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在更改页面或排序列时遗漏了这些定义，此操作也将影响同一页面上的其他 GridView，因为我们没有区分两个网格视图参数。
- en: 'Example: managing the reservations and rooms grids in the same view'
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：在同一视图中管理预订和房间网格
- en: The purpose of this example is to display both the reservations and rooms grids
    in the same page completely independent from each other.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的目的是在完全独立于彼此的情况下在同一页面上显示预订和房间网格。
- en: 'In `ReservationsController` in `basic/controllers/ReservationsController.php`,
    create a new action named `actionMultipleGrid()` with the following content:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `basic/controllers/ReservationsController.php` 中的 `ReservationsController`，创建一个名为
    `actionMultipleGrid()` 的新操作，其内容如下：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We have detached the reservations declaration from the rooms declaration in
    order to clearly distinguish each from the other. Be careful to ensure that you
    defined `sortparam` and `pageparam` for either of the DataProvider.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将预订声明从房间声明中分离出来，以便清楚地区分它们。请注意，确保你为 DataProvider 的任何一个都定义了 `sortparam` 和
    `pageparam`。
- en: 'Now we create a new view in `basic/views/reservations/multipleGrid.php`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建一个新的视图在 `basic/views/reservations/multipleGrid.php`：
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The two grids are completely independent and we can now order or change a page
    without interfering with other grids.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个网格是完全独立的，我们现在可以排序或更改页面，而不会干扰其他网格。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we presented the GridView widget to display data, directly
    or relational. A fundamental topic when discussing GridView is DataProvider, which
    is a way to provide data to GridView. You learned how to get DataProvider from
    ActiveRecord, an array, or SQL, based on the available source.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了用于显示数据（直接或关联）的 GridView 小部件。在讨论 GridView 时，一个基本话题是 DataProvider，它是一种向
    GridView 提供数据的方式。你学习了如何根据可用的来源从 ActiveRecord、数组或 SQL 中获取 DataProvider。
- en: After the first simple implementation of GridView, you comprehended the customization
    in a column and displayed the relational data coming from other tables, using
    an extension of the model class to add extra features as new attributes. Next,
    we illustrated how to filter data in GridView to select only specific rows.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GridView 的第一次简单实现之后，你理解了列的定制，并使用模型类的扩展来添加新属性以添加额外功能，从而显示了来自其他表的关系数据。接下来，我们说明了如何通过筛选数据来选择特定的行。
- en: Just before the end of the chapter, you saw how to show, summarize, and customize
    a footer and more in the GridView by subclassing the core widget `yii\grid\GridView`.
    Finally, the last topic concerned the use of more than one grid in the same page,
    with a special focus on the few changes that need to occur in order to avoid them
    interfering with each other.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束之前，你看到了如何通过子类化核心小部件 `yii\grid\GridView` 来在 GridView 中显示、总结和定制页脚以及更多内容。最后，最后一个话题是使用同一页面上的多个网格，特别关注需要发生的少量更改，以避免它们相互干扰。
- en: In the next chapter, you will learn to customize the user interface with CSS,
    JavaScript, widgets, and tools such as Gii that are directly provided from the
    framework.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用 CSS、JavaScript、小部件以及框架直接提供的工具（如 Gii）来定制用户界面。
