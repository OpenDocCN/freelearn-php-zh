- en: Chapter 6. RESTful Web Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。RESTful 网络服务
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a REST server
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 REST 服务器
- en: Authentication
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: Rate limiting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 速率限制
- en: Versioning
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Error handling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter will help you to learn some handy things about the Yii URL router,
    controllers, and views. You will be able to make your controllers and views more
    flexible.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你了解一些关于 Yii URL 路由器、控制器和视图的实用技巧。你将能够使你的控制器和视图更加灵活。
- en: Creating a REST server
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 REST 服务器
- en: In the following recipe, we use an example that illustrates how you can build
    and set up RESTful APIs with minimal coding effort. This recipe will be reused
    in other recipes in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的菜谱中，我们使用一个示例来说明你可以如何以最小的编码工作量构建和设置 RESTful API。这个菜谱将在本章的其他菜谱中重复使用。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的 Composer 包管理器创建一个新的应用程序，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Create a migration for creating an article table with the following command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建创建文章表的迁移：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, update the just-created migration method, `up`, with the following code:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新刚刚创建的迁移方法 `up`，使用以下代码：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the `down` method with the following code:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下代码更新 `down` 方法：
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the created `create_film_table` migration.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行创建的 `create_film_table` 迁移。
- en: Generate the `Film` model with the Gii module.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Gii 模块生成 `Film` 模型。
- en: 'Configure your application server to use clean URLs. If you are using Apache
    with `mod_rewrite` and `AllowOverride` turned on, then you should add the following
    lines to the `.htaccess` file under your `@web` directory:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你的应用程序服务器以使用干净的 URL。如果你使用 Apache 并开启了 `mod_rewrite` 和 `AllowOverride`，那么你应该在你的
    `@web` 目录下的 `.htaccess` 文件中添加以下行：
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Create a controller, `@app/controller/FilmController.php,` with the following
    code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器，`@app/controller/FilmController.php`，使用以下代码：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update the `@app/config/web.php` configuration file. Add the following config
    of the `urlManager` component:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 `@app/config/web.php` 配置文件。添加以下 `urlManager` 组件的配置：
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Reconfigure the request component in `@app/config/web.php`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@app/config/web.php` 中重新配置请求组件：
- en: '[PRE6]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: We extend `\yii\rest\ActiveController` to create our own controller, then for
    the created controller, the `modelClass` property was set. The `\yii\rest\ActiveController`
    class implements a common set of actions for supporting RESTful access to ActiveRecord.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展 `\yii\rest\ActiveController` 来创建我们自己的控制器，然后对于创建的控制器，设置了 `modelClass` 属性。`\yii\rest\ActiveController`
    类实现了一组通用的操作，以支持对 ActiveRecord 的 RESTful 访问。
- en: With the above minimal amount of effort, you have already finished creating
    RESTful APIs for accessing film data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述最小限度的努力，你已经完成了创建用于访问电影数据的 RESTful API。
- en: 'The APIs you have created include:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建的 API 包括：
- en: '`GET /films`: This lists all films page by page'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /films`：这按页列出所有电影'
- en: '`HEAD /films`: This shows the overview information of a film listing'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD /films`：这显示了电影列表的概要信息'
- en: '`POST /films`: This creates a new film'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST /films`：这创建一个新的电影'
- en: '`GET /films/5`: This returns the details of film `5`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /films/5`：这返回电影 `5` 的详细信息'
- en: '`HEAD /films/5`: This shows the overview information of film `5`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD /films/5`：这显示了电影 `5` 的概要信息'
- en: '`PATCH /films/5 and PUT /films/5`: This updates film `5`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATCH /films/5 和 PUT /films/5`：这将更新电影 `5`'
- en: '`DELETE /films/5`: This deletes film `5`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE /films/5`：这删除电影 `5`'
- en: '`OPTIONS /films`: This shows the supported verbs regarding the `/films` endpoint'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS /films`：这显示了 `/films` 端点的支持动词'
- en: '`OPTIONS /films/5`: This shows the supported verbs regarding the `/films/5`
    endpoint'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS /films/5`：这显示了 `/films/5` 端点的支持动词'
- en: 'It works like this because `\yii\rest\ActiveController` supports the following
    actions:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它之所以可以这样工作，是因为 `\yii\rest\ActiveController` 支持以下操作：
- en: '`index`: This lists the models'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：这列出模型'
- en: '`view`: This returns the details of a model'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view`：这返回模型的详细信息'
- en: '`create`: This creates a new model'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create`：这创建一个新的模型'
- en: '`update`: This updates an existing model'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`：这更新一个现有的模型'
- en: '`delete`: This deletes an existing model'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete`：这将删除一个现有的模型'
- en: '`options`: This returns the allowed HTTP methods'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`：这返回允许的 HTTP 方法'
- en: And there's also a `verbs()` method that defines the allowed request methods
    for each action.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个 `verbs()` 方法，它定义了每个操作的允许请求方法。
- en: To check that our RESTful API is working correctly, let's send several requests.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查我们的RESTful API是否正确工作，让我们发送几个请求。
- en: 'Let''s begin with the `GET` request. Run this in the console:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`GET`请求开始。在控制台运行以下命令：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will get the following output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s send a `POST` request. Run this in the console:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们发送一个`POST`请求。在控制台运行以下命令：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will get the following output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s get the created film. Run in this the console:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们获取创建的电影。在控制台运行以下命令：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will get the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s send a `DELETE` request. Run this in the console:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们发送一个`DELETE`请求。在控制台运行以下命令：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And you will get the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's more…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'We will now look at content negotiation and customizing the Rest URL rule:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将探讨内容协商和自定义REST URL规则：
- en: Content negotiation
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容协商
- en: You can also easily format your response with content negotiation behavior.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以轻松地通过内容协商行为格式化你的响应。
- en: For example, you can put this code to your controller and all data will be returned
    in an XML format.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以将此代码放入你的控制器中，所有数据都将以XML格式返回。
- en: You should have a look at the full list of formats in the documentation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在文档中查看完整的格式列表。
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run this in the console:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台运行以下命令：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You will get the following output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Customizing the Rest URL rule
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义REST URL规则
- en: 'You have to remember a controller ID, by default, is defined in plural form.
    This is because `yii\rest\UrlRule` automatically pluralizes controller IDs. You
    can simply disable this by setting `yii\rest\UrlRule::$pluralize` to false:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须记住，默认情况下，控制器ID是以复数形式定义的。这是因为`yii\rest\UrlRule`会自动将控制器ID复数化。你可以通过将`yii\rest\UrlRule::$pluralize`设置为false来简单地禁用此功能：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you would also like to specify how a controller ID should appear in the
    patterns, you are able to add a custom name to an array as a key value pair, where
    the array key is the controller ID and the array value is the actual controller
    ID. For example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还想指定控制器ID在模式中应如何显示，你可以向数组中添加一个自定义名称作为键值对，其中数组键是控制器ID，数组值是实际的控制器ID。例如：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See also
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further information, refer to the following URL:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参考以下URL：
- en: '[http://www.yiiframework.com/doc-2.0/guide-rest-quick-start.html](http://www.yiiframework.com/doc-2.0/guide-rest-quick-start.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-rest-quick-start.html](http://www.yiiframework.com/doc-2.0/guide-rest-quick-start.html)'
- en: '[http://www.yiiframework.com/doc-2.0/yii-rest-urlrule.html](http://www.yiiframework.com/doc-2.0/yii-rest-urlrule.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-rest-urlrule.html](http://www.yiiframework.com/doc-2.0/yii-rest-urlrule.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-rest-response-formatting.html](http://www.yiiframework.com/doc-2.0/guide-rest-response-formatting.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-rest-response-formatting.html](http://www.yiiframework.com/doc-2.0/guide-rest-response-formatting.html)'
- en: '[http://budiirawan.com/setup-restful-api-yii2/](http://budiirawan.com/setup-restful-api-yii2/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://budiirawan.com/setup-restful-api-yii2/](http://budiirawan.com/setup-restful-api-yii2/)'
- en: Authentication
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: In this recipe will have the authentication model set up.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，将设置认证模型。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Repeat all steps from the *Creating a REST server* recipe in *Getting ready*
    and *How to do it* sections.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从“准备工作”和“如何操作”部分的“创建REST服务器”菜谱中重复所有步骤。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Modify `@app/controllers/FilmController` to the following:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`@app/controllers/FilmController`修改为以下内容：
- en: '[PRE20]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open `http://yii-book.app/films` in a browser and make sure that we configure
    HTTP Basic Authentication:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://yii-book.app/films`并确保我们已配置HTTP基本认证：
- en: '![How to do it...](img/image00407.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image00407.jpeg)'
- en: 'Let''s try to authenticate. Run this in the console:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试进行认证。在控制台运行以下命令：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And you will get the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下内容：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And now try `auth` with `cURL`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试使用`cURL`进行`auth`操作：
- en: '[PRE23]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should then get a response that looks like this:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该得到如下响应：
- en: '[PRE24]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We've also added the `authenticator` behavior to the `HttpBasicAuth` class,
    so we will be able to authenticate with just a login and password. You might implement
    any authentication method that is described in the official guide in the RESTful
    web services section.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还向`HttpBasicAuth`类添加了`authenticator`行为，因此我们只需使用登录名和密码即可进行认证。你可以实现官方指南中RESTful网络服务部分描述的任何认证方法。
- en: There's more…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'There are different ways to send an access token:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 发送访问令牌有不同的方法：
- en: HTTP Basic Auth
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP基本认证
- en: Query parameter
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询参数
- en: OAuth
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth
- en: Yii supports all of these authentication methods.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Yii支持所有这些认证方法。
- en: See also
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html](http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html](http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html)。
- en: Rate limiting
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 速率限制
- en: To prevent abuse, you should consider adding rate limiting to your APIs. For
    example, you may want to limit the API usage of each user to be, at most, five
    API calls within a period of one minute. If too many requests are received from
    a user within the stated period of time, a response with the status code 429 (*Too
    Many Requests*) should be returned.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止滥用，你应该考虑为你的 API 添加速率限制。例如，你可能希望将每个用户的 API 使用限制在最多一分钟内的五个 API 调用。如果在指定的时间内收到来自用户的过多请求，应返回状态码
    429（*请求过多*）的响应。
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Repeat all the steps from the *Creating a REST server* recipe's *Getting ready*
    and *How to do it...* sections.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 重复 *创建 REST 服务器* 菜单中的 *准备工作* 和 *如何操作...* 部分的所有步骤。
- en: 'Create a migration for creating a user allowance table with the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建用于创建用户允许表迁移：
- en: '[PRE25]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, update the just-created migration method, `up`, with the following code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新刚刚创建的迁移方法 `up`，使用以下代码：
- en: '[PRE26]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Update the `down` methodwith the following code:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新 `down` 方法：
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run the created `create_film_table` migration.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行创建的 `create_film_table` 迁移。
- en: Generate the `UserAllowance` model with the Gii module.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Gii 模块生成 `UserAllowance` 模型。
- en: How to do it…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First, you have to update `@app/controllers/FilmController.php` with the following
    code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须使用以下代码更新 `@app/controllers/FilmController.php`：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To enable rate limiting, the `User` model class should implement `yii\filters\RateLimitInterface`
    and requires the implementation of three methods: `getRateLimit()`, `loadAllowance(),`
    and `saveAllowance()`. You have to add them with `RATE_LIMIT_NUMBER` and `RATE_LIMIT_RESET`
    constants:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用速率限制，`User` 模型类应该实现 `yii\filters\RateLimitInterface` 并需要实现三个方法：`getRateLimit()`、`loadAllowance()`
    和 `saveAllowance()`。你必须使用 `RATE_LIMIT_NUMBER` 和 `RATE_LIMIT_RESET` 常量将它们添加进去：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once the identity class implements the required interface, Yii will automatically
    use `[[yii\filters\RateLimiter]]` configured as an action filter for `[[yii\rest\Controller]]`
    to perform a rate limiting check. We've also added the `'authenticator'` behavior
    with the `QueryParamAuth` class. So, we are now able to authenticate with just
    an access token passed through a query parameter. You can add any authentication
    method that is described in the official guide in the RESTful web services section.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦身份类实现了所需接口，Yii 将自动使用配置为 `[[yii\filters\RateLimiter]]` 的动作过滤器为 `[[yii\rest\Controller]]`
    执行速率限制检查。我们还添加了 `'authenticator'` 行为和 `QueryParamAuth` 类。因此，我们现在可以使用通过查询参数传递的访问令牌进行身份验证。你可以在官方指南的
    RESTful 网络服务部分添加任何描述的认证方法。
- en: Let's explain our methods. They are pretty easy to understand.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释我们的方法。它们很容易理解。
- en: '`getRateLimit()`: This returns the maximum number of allowed requests and the
    time period (example, `[100, 600]` means there can be at most 100 API calls within
    600 seconds)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`getRateLimit()`：这个方法返回允许的最大请求数量和时间周期（例如，`[100, 600]` 表示在 600 秒内最多可以有 100 个
    API 调用）'
- en: '`loadAllowance()`: This returns the number of remaining requests allowed and
    the corresponding UNIX timestamp when the rate limit was last checked'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadAllowance()`：这个方法返回剩余允许的请求数量和上次检查速率限制时对应的 UNIX 时间戳'
- en: '`saveAllowance()`: This saves both the number of remaining requests allowed
    and the current UNIX timestamp'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`saveAllowance()`：这个方法保存剩余允许的请求数量和当前的 UNIX 时间戳'
- en: We store our data in the MySQL database. For performance, you might use a NoSQL
    database or another storage system with a higher time to get and load data.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将数据存储在 MySQL 数据库中。为了性能，你可能使用一个 NoSQL 数据库或另一个具有更高时间获取和加载数据的存储系统。
- en: 'Now let''s try to check the rate limit feature. Run this in the console:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试检查速率限制功能。在控制台中运行以下命令：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You will get the following output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s learn about returned headers. When rate limiting is enabled, by default
    every response will be sent with the following HTTP headers containing the current
    rate limiting information:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解返回的头部信息。当启用速率限制时，默认情况下，每个响应都会发送包含当前速率限制信息的以下 HTTP 头部：
- en: '**X-Rate-Limit-Limit**: This is the maximum number of requests allowed within
    a time period'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**X-Rate-Limit-Limit**：这是在时间周期内允许的最大请求数量'
- en: '**X-Rate-Limit-Remaining**: This is the number of remaining requests in the
    current time period'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**X-Rate-Limit-Remaining**：这是当前时间周期内剩余请求数量'
- en: '**X-Rate-Limit-Reset**: This is the number of seconds to wait in order to get
    the maximum number of allowed requests'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**X-Rate-Limit-Reset**：这是等待以获取最大允许请求数量的秒数'
- en: 'So, now try to exceed the limit, request the following URL more than five times
    per minute and you will see `TooManyRequestsHttpExeption`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在尝试超过限制，每分钟请求以下URL超过五次，您将看到`TooManyRequestsHttpExeption`：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: See also
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further information, refer to the following URLs:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅以下URL：
- en: '[https://en.wikipedia.org/wiki/Leaky_bucket](https://en.wikipedia.org/wiki/Leaky_bucket)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Leaky_bucket](https://en.wikipedia.org/wiki/Leaky_bucket)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html](http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html](http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html)'
- en: '[http://www.yiiframework.com/doc-2.0/yii-filters-ratelimiter.html](http://www.yiiframework.com/doc-2.0/yii-filters-ratelimiter.html)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-filters-ratelimiter.html](http://www.yiiframework.com/doc-2.0/yii-filters-ratelimiter.html)'
- en: Versioning
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: If you build your API unversioned, it's terrifying. Let's imagine you're pushing
    out a breaking change – basically any change that runs counter to what client
    developers have planned for, such as renaming or deleting a parameter or changing
    the format of the response – you run the risk of bringing down many, if not all,
    of your customers' systems, leading to angry support calls or, worse, massive
    churn. That's why you have to keep your API versioned. In Yii2, versioning can
    be easily done through modules, so versions will be represented as isolated block
    of code.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您构建未版本化的API，那将是可怕的。让我们想象一下，您正在推出一个破坏性变更——基本上是任何与客户端开发者计划相反的变更，例如重命名或删除参数或更改响应格式——您可能会使您的许多（如果不是所有）客户的系统崩溃，导致愤怒的客户支持电话，更糟糕的是，大量流失。这就是为什么您必须保持API版本化的原因。在Yii2中，可以通过模块轻松地进行版本控制，因此版本将表示为独立的代码块。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Repeat all steps from the *Creating a REST server* recipe's *Getting ready*
    and *How to do it…* sections.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 重复从“创建REST服务器”食谱的“准备工作”和“如何操作...”部分的所有步骤。
- en: How to do it…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create the following structure in your app folder. In total, you have to create
    the `@app/modules` folder with the `v1` and `v2` folders inside it. In each module''s
    folder, you must create controllers and models folders:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的应用文件夹中创建以下结构。总共，您必须在`@app/modules`文件夹中创建包含`v1`和`v2`文件夹的文件夹。在每个模块的文件夹中，您必须创建控制器和模型文件夹：
- en: '[PRE33]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the import modules to `@app/config/web.php`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将导入模块添加到`@app/config/web.php`：
- en: '[PRE34]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create `@app/modules/v1/controllers/FilmController.php` and `@app/modules/v2/controllers/FilmController.php`
    with the following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建`@app/modules/v1/controllers/FilmController.php`和`@app/modules/v2/controllers/FilmController.php`：
- en: '[PRE35]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create `@app/modules/v1/Module.php` and `@app/modules/v2/Module.php` with the
    following code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码创建`@app/modules/v1/Module.php`和`@app/modules/v2/Module.php`：
- en: How it works…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Each module represents an independent version of our API.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块代表我们API的一个独立版本。
- en: 'Now you will be able to specify the API''s version in two ways:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过两种方式指定API的版本：
- en: By the API's URL. You can specify either v1 or v2 versions. The result is that
    `http://yii-book.app/v1/film` will return a list of films for version 1 and `http://yii-book.app/v2/film`
    will do so for version 2.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过API的URL。您可以指定v1或v2版本。结果是`http://yii-book.app/v1/film`将返回版本1的电影列表，而`http://yii-book.app/v2/film`将返回版本2的电影列表。
- en: 'You can also put a version number through HTTP request headers. As usual, it
    can be done through the `Accept` header:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以通过HTTP请求头传递版本号。像往常一样，可以通过`Accept`头完成：
- en: '[PRE37]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: So, we now have two versions of our API, and we can easily modify the v2 version
    without any headaches. Our old customers continue to work with the v1 version,
    and new customers or those who would like to upgrade will use the v2 version.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在有两个版本的API，我们可以轻松地修改v2版本而不会感到头疼。我们的老客户继续使用v1版本，而新客户或希望升级的客户将使用v2版本。
- en: There's more…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Fur further information, refer to:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅：
- en: '[http://www.yiiframework.com/doc-2.0/guide-rest-versioning.html](http://www.yiiframework.com/doc-2.0/guide-rest-versioning.html)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-rest-versioning.html](http://www.yiiframework.com/doc-2.0/guide-rest-versioning.html)'
- en: '[http://budiirawan.com/setup-restful-api-yii2/](http://budiirawan.com/setup-restful-api-yii2/)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://budiirawan.com/setup-restful-api-yii2/](http://budiirawan.com/setup-restful-api-yii2/)'
- en: Error handling
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: Sometimes you may want to customize the default error response format. For example,
    we need to know the response timestamp and whether the response is successful.
    Frameworks provide an easy way to do this.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能想要自定义默认的错误响应格式。例如，我们需要知道响应的时间戳以及响应是否成功。框架提供了一个简单的方法来实现这一点。
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Repeat all the steps from the *Creating a REST server* recipe's in the *Getting
    ready* and *How to do it…* sections.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 重复从“创建 REST 服务器”菜谱中的所有步骤，这些步骤在“准备”和“如何操作…'’部分。
- en: How to do it…
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To achieve this goal, you can respond to the `beforeSend` event of the response
    component in `@app/config/web.php,` as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个目标，你可以在`@app/config/web.php`中响应响应组件的`beforeSend`事件，如下所示：
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'To learn what happens in this code, let''s play a bit with it. First, run this
    in console:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解这段代码中发生了什么，让我们稍微玩一下。首先，在控制台中运行以下命令：
- en: '[PRE39]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You will get the following output:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE40]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Secondly, run this in your console:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，在你的控制台中运行以下命令：
- en: '[PRE41]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And you will get the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下结果：
- en: '[PRE42]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We've changed the response content before sending. That way, it is easy to define
    whether the response is successful or not.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在发送响应内容之前已经更改了它。这样，就很容易定义响应是否成功。
- en: See also
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-rest-error-handling.html](http://www.yiiframework.com/doc-2.0/guide-rest-error-handling.html).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-rest-error-handling.html](http://www.yiiframework.com/doc-2.0/guide-rest-error-handling.html)。
