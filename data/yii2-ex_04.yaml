- en: Chapter 4. Creating a Room through Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 创建房间通过表单
- en: 'This chapter explains how to write a model class to store data that will be
    sent from View to Controller using a form, with validating input, formatting data,
    and uploading files. In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何编写模型类来存储将使用表单从视图发送到控制器使用的数据，包括验证输入、格式化数据和上传文件。在本章中，我们将涵盖以下主题：
- en: Creating a Model
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Example – a model to store room data
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 存储房间数据的模型
- en: Using ActiveForm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ActiveForm
- en: Example – creating a new room from the HTML form
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 从 HTML 表单创建新房间
- en: Formatting date, time, and numbers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化日期、时间和数字
- en: Uploading files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传文件
- en: Example – uploading an image of the room
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 上传房间图片
- en: Creating a Model
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: The first step to manipulate data between View and Controller is to create a
    Model. A **Model** is a class that extends the `Model` class located under `yii\base\`,
    the base used for data models.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图和控制器之间操作数据的第一个步骤是创建一个模型。**模型**是一个类，它扩展了位于 `yii\base\` 下的 `Model` 类，这是数据模型的基础。
- en: 'This is a suitable class for providing simple solutions in order to encapsulate
    data, assign content from array (form data), and validate data using rules. The
    Model base class implements the following commonly used features:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个合适的类，用于提供简单的解决方案，以封装数据、从数组（表单数据）分配内容，并使用规则验证数据。模型基类实现了以下常用功能：
- en: '**Attribute declaration**: By default, every public class member is considered
    a model attribute; we can access all the members using the `attributes` property
    of Model.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性声明**：默认情况下，每个公共类成员都被视为模型属性；我们可以使用模型的 `attributes` 属性访问所有成员。'
- en: '**Attribute labels**: Each attribute may be associated with a label for display
    purposes; we can extend the `attributeLabels()` method to return labels related
    to public members of Model.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性标签**：每个属性都可以与一个用于显示的标签相关联；我们可以扩展 `attributeLabels()` 方法以返回与模型公共成员相关的标签。'
- en: '**Massive attribute assignment**: We can fill the member''s content of Model
    by passing an entire array of values. This is convenient when we need to fill
    a model with data from the form.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大量属性赋值**：我们可以通过传递一个包含所有值的整个数组来填充模型的成员内容。当我们需要用表单中的数据填充模型时，这很方便。'
- en: '**Scenario-based validation**: Model provides rules to validate data. We can
    choose which ones apply according to the scenario, a keyword that defines the
    rules to apply.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于场景的验证**：模型提供了验证数据的规则。我们可以根据场景选择哪些规则适用，场景是一个定义要应用规则的键词。'
- en: 'While performing data validation, Model also raises the following events:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行数据验证时，模型还会引发以下事件：
- en: '`EVENT_BEFORE_VALIDATE`: This is an event raised at the beginning of `validate()`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EVENT_BEFORE_VALIDATE`: 这是在 `validate()` 方法开始时引发的事件'
- en: '`EVENT_AFTER_VALIDATE`: This is an event raised at the end of `validate()`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EVENT_AFTER_VALIDATE`: 这是在 `validate()` 方法结束时引发的事件'
- en: You can directly use Model to store model data or extend it with customization.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接使用模型来存储模型数据或对其进行自定义扩展。
- en: Example – a Model to store room data
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 存储房间数据的模型
- en: Now, let's create Model to store room data. To create this, we choose to name
    all fields with words written in lowercase characters and separated by underscores.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个模型来存储房间数据。为了创建这个模型，我们选择将所有字段命名为小写字母，并用下划线分隔。
- en: 'We can identify these fields of Model as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样识别模型的这些字段：
- en: '`floor`: In a more generic situation, we consider this as a string member'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`floor`: 在更通用的情况下，我们将其视为字符串成员'
- en: '`room_number`: This is an integer member'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`room_number`: 这是一个整型成员'
- en: '`has_conditioner`: This is an integer member with two values 0 and 1'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_conditioner`: 这是一个整型成员，有两个值 0 和 1'
- en: '`has_tv`: This is an integer member with two values 0 and 1'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_tv`: 这是一个整型成员，有两个值 0 和 1'
- en: '`has_phone`: This is an integer member with two values 0 and 1'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_phone`: 这是一个整型成员，有两个值 0 和 1'
- en: '`available_from`: This is a date member that it is represented with a string
    in PHP'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`available_from`: 这是一个日期成员，在 PHP 中用字符串表示'
- en: '`price_per_day`: This is a float member'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price_per_day`: 这是一个浮点型成员'
- en: '`assistance_email`: This is a string member containing an e-mail address'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assistance_email`: 这是一个包含电子邮件地址的字符串成员'
- en: '`description`: This is a string member'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`: 这是一个字符串成员'
- en: 'Now, create the `Model` class, named `Room` as the base class, in the previous
    field list, creating a file under `basic/models/Room.php` with the following content:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建名为 `Room` 的 `Model` 类，作为基类，在之前的字段列表中，在 `basic/models/Room.php` 下创建一个文件，内容如下：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The second thing to do is to append the `attributeLabels()` method in order
    to give a label to every member. This is not necessary, but it is a useful method
    to get labels displayed in the end user frontend.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第二件事是附加`attributeLabels()`方法，以便为每个成员分配一个标签。这不是必需的，但这是一个有用的方法，可以在最终用户前端显示标签。
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The last thing is to create rules to validate data. Rules are based on validators,
    whose defaults are listed as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建规则以验证数据。规则基于验证器，其默认值如下：
- en: '`boolean`: `yii\validators\BooleanValidator`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean`: `yii\validators\BooleanValidator`'
- en: '`captcha`: `yii\captcha\CaptchaValidator`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`captcha`: `yii\captcha\CaptchaValidator`'
- en: '`compare`: `yii\validators\CompareValidator`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compare`: `yii\validators\CompareValidator`'
- en: '`date`: `yii\validators\DateValidator`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`: `yii\validators\DateValidator`'
- en: '`double`: `yii\validators\NumberValidator`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`double`: `yii\validators\NumberValidator`'
- en: '`email`: `yii\validators\EmailValidator`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`: `yii\validators\EmailValidator`'
- en: '`exist`: `yii\validators\ExistValidator`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exist`: `yii\validators\ExistValidator`'
- en: '`file`: `yii\validators\FileValidator`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file`: `yii\validators\FileValidator`'
- en: '`filter`: `yii\validators\FilterValidator`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter`: `yii\validators\FilterValidator`'
- en: '`image`: `yii\validators\ImageValidator`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`: `yii\validators\ImageValidator`'
- en: '`in`: `yii\validators\RangeValidator`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in`: `yii\validators\RangeValidator`'
- en: '`integer`: `yii\validators\NumberValidator`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integer`: `yii\validators\NumberValidator`'
- en: '`match`: `yii\validators\RegularExpressionValidator`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match`: `yii\validators\RegularExpressionValidator`'
- en: '`required`: `yii\validators\RequiredValidator`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required`: `yii\validators\RequiredValidator`'
- en: '`safe`: `yii\validators\SafeValidator`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`safe`: `yii\validators\SafeValidator`'
- en: '`string`: `yii\validators\StringValidator`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`: `yii\validators\StringValidator`'
- en: '`trim`: `yii\validators\FilterValidator`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trim`: `yii\validators\FilterValidator`'
- en: '`unique`: `yii\validators\UniqueValidator`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique`: `yii\validators\UniqueValidator`'
- en: '`url`: `yii\validators\UrlValidator`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`: `yii\validators\UrlValidator`'
- en: 'A Rule is an array whose values are in the following order:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 规则是一个数组，其值按以下顺序排列：
- en: A string or an array to define an attribute or list of attributes to apply the
    rule
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字符串或数组，用于定义要应用规则的属性或属性列表
- en: The type of validator
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证器的类型
- en: The `on` attribute to define which scenario to use
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`on`属性来定义要使用哪种场景
- en: The other parameters, depending on the validator that is used
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他参数取决于所使用的验证器
- en: 'Write the `rules()` method of the `Room` Model class:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 编写`Room`模型类的`rules()`方法：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code is explained as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码解释如下：
- en: The first rule establishes that `floor` is an integer, with `0` as the minimum
    value
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一条规则规定`floor`是一个整数，最小值为`0`
- en: The second rule establishes that `room_number` is an integer, with `0` as the
    minimum value; we can put together floor and room in a single rule, melting them
    into an array as the first parameter of a single rule
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二条规则规定`room_number`是一个整数，最小值为`0`；我们可以将楼层和房间合并为一个规则，将它们作为单个规则的第一个参数放入数组中
- en: The third rule establishes that `has_condition`, `has_tv`, and `has_phone` are
    integers with possible values between 0 and 1 (formally a Boolean value)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三条规则规定`has_condition`、`has_tv`和`has_phone`是介于0和1之间的整数（形式上为布尔值）
- en: The fourth rule establishes that `available_from` is a date
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四条规则规定`available_from`是一个日期
- en: The fifth rule establishes that `price_per_day` is a number and its minimum
    value is 0
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第五条规则规定`price_per_day`是一个数字，其最小值为0
- en: The last rule establishes that `description` is a string with a maximum of 500
    characters
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一条规则规定`description`是一个最多包含500个字符的字符串
- en: These rules will be applied when the `validate()` method of `Model` is called.
    This method is automatically called when we attempt to call the `save()` method.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`Model`的`validate()`方法时，将应用这些规则。当我们尝试调用`save()`方法时，此方法会自动调用。
- en: Using ActiveForm
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ActiveForm
- en: Now we will create an HTML form in view to send data from view to controller.
    We could build a form in the standard way using the form tag and input fields,
    but Yii2 provides helper classes that simplify the building of a form and its
    content.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在视图中创建一个HTML表单，以便从视图发送数据到控制器。我们可以使用标准方式通过表单标签和输入字段来构建表单，但Yii2提供了简化表单及其内容构建的辅助类。
- en: For this purpose, we will use `ActiveForm`, a widget that builds an interactive
    HTML form for one or multiple data models.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，我们将使用`ActiveForm`，这是一个用于为单个或多个数据模型构建交互式HTML表单的控件。
- en: 'As for any Yii2 widget, we will indicate with the `begin()`static method, the
    moment we start using it, and with the `end()`static method, the moment we stop
    using it, from `yii\widgets\ActiveForm`. The code between these methods will be
    placed in the form:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何Yii2控件，我们将使用`begin()`静态方法来指示开始使用它的时刻，以及使用`end()`静态方法来指示停止使用它的时刻，从`yii\widgets\ActiveForm`开始。这些方法之间的代码将被放置在表单中：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first method, `begin()`, returns an object that we can use inside the content
    to create the input fields. This method accepts an array as the parameter to indicate
    configuration attributes to be applied. The last method, `end()`, marks the end
    of the widget, so this can be rendered with its content.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法，`begin()`，返回一个对象，我们可以在内容中使用它来创建输入字段。此方法接受一个数组作为参数，以指示要应用的配置属性。最后一个方法，`end()`，标记小部件的结束，因此可以将其内容渲染出来。
- en: 'Now, we need some input fields to insert in the code, which is done using the
    `field()` method of the `ActiveForm` instance that we just created. This method
    requires two parameters: model and field name and returns an object of type `ActiveField`.
    With this method, we just demand `ActiveForm` to create a new field; however,
    in this case, we also need to specify the type of field we want.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在代码中插入一些输入字段，这是通过使用我们刚刚创建的`ActiveForm`实例的`field()`方法来完成的。此方法需要两个参数：模型和字段名，并返回一个类型为`ActiveField`的对象。使用此方法，我们只是要求`ActiveForm`创建一个新的字段；然而，在这种情况下，我们还需要指定我们想要的字段类型。
- en: 'This operation is made calling a method from `ActiveField` relative to the
    kind of input to the instance. The most common are:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作是通过调用与实例输入类型相关的`ActiveField`方法来完成的。最常见的是：
- en: '`label()`: This is used to generate a label tag'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label()`: 这用于生成一个标签标签'
- en: '`textInput()`: This is used to generate an input field with type `text`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`textInput()`: 这用于生成类型为`text`的输入字段'
- en: '`textarea()`: This is used to generate a `textarea` tag'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`textarea()`: 这用于生成`textarea`标签'
- en: '`radio()`: This is used to generate an input field with type `radio`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radio()`: 这用于生成类型为`radio`的输入字段'
- en: '`checkbox()`: This is used to generate an input field with type `checkbox`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkbox()`: 这用于生成类型为`checkbox`的输入字段'
- en: Example – creating a new room from the HTML form
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 从HTML表单创建新房间
- en: 'Firstly, create a new controller, `RoomsController`, under `basic/controllers/RoomsController.php`
    with an action named `create`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`basic/controllers/RoomsController.php`下创建一个新的控制器，名为`RoomsController`，并有一个名为`create`的操作：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At the start of the `create()` method, we create a new instance of the `Room`
    class assigned to the `$model` variable. The `load()` method fills the `$model`
    attributes with data taken from the key position named `$model->formName()` of
    an array passed as parameters. By default, `$model->formName()` returns the class
    name of the object, as shown in the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`create()`方法开始时，我们为`$model`变量创建了一个新的`Room`类实例。`load()`方法将数据填充到`$model`属性中，这些数据是从作为参数传递的数组中名为`$model->formName()`的关键位置获取的。默认情况下，`$model->formName()`返回对象的类名，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code is equivalent to:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码等同于：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Going back to the `load()&&validate()` condition, if `load()` returns true,
    `validate()` will also be executed and all rules in the `rules()` method of model
    will be evaluated.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`load()&&validate()`条件，如果`load()`返回true，则`validate()`也会被执行，并且模型`rules()`方法中的所有规则都将被评估。
- en: In this case, `Model` is ready to be saved to the data store (in the database
    in the next chapters). Now, it is important to mark this condition with a simple
    variable named `$modelCanSave`, passed to the `create` view.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`Model`已准备好保存到数据存储（在下一章中将在数据库中保存）。现在，用简单变量`$modelCanSave`标记此条件非常重要，并将其传递给`create`视图。
- en: 'Create a file for the `create` view under `basic/views/rooms/create.php`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/views/rooms/create.php`下创建`create`视图的文件：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the `$modelCanSave` variable is true, an `alert` div with the green background
    will be displayed to notify that `$model` is loaded and validate (ready to be
    saved in database).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`$modelCanSave`变量为true，将显示一个带有绿色背景的`alert` div，以通知`$model`已加载并验证（准备在数据库中保存）。
- en: 'For the test code, point to `http://hostname/basic/web/rooms/create`. The following
    screen should appear:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试代码，指向`http://hostname/basic/web/rooms/create`。以下屏幕应出现：
- en: '![Example – creating a new room from the HTML form](img/B04656_04_01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 从HTML表单创建新房间](img/B04656_04_01.jpg)'
- en: Create room HTML form
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建房间HTML表单
- en: 'The framework automatically takes care of the validation checks on input fields,
    corresponding to the rules list in the `rules()` method of Model. We can check
    this by typing characters in the **Floor** input. We should see the following
    screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 框架会自动处理输入字段的验证检查，这些检查对应于模型`rules()`方法中的规则列表。我们可以通过在**Floor**输入框中输入字符来检查这一点。我们应该看到以下截图：
- en: '![Example – creating a new room from the HTML form](img/B04656_04_02.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 从HTML表单创建新房间](img/B04656_04_02.jpg)'
- en: The validation check of the integer field
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 整数字段的验证检查
- en: The validation informs us that **Floor** must be an integer, as required in
    the rules list. Once all the fields are filled with correct values (date format,
    yyyy-mm-dd), just click on the **Create** button and we should see a box with
    green background displaying **Model ready to be saved**.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 验证通知我们 **Floor** 必须是一个整数，正如规则列表中要求的那样。一旦所有字段都填写了正确的值（日期格式，yyyy-mm-dd），只需点击 **创建**
    按钮，我们应该会看到一个绿色背景的框显示 **模型准备保存**。
- en: Format date, time, and numbers
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化日期、时间和数字
- en: Now, let's see how to format the date, time, and numeric fields. Yii2 provides
    helpers for each of these types.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何格式化日期、时间和数字字段。Yii2 为这些类型提供了辅助工具。
- en: To format a value, we will use `Yii::$app->formatter`; this object belongs to
    the `Formatter` class located under `yii\i18n\` and supports many types of formatting.
    All the methods used for this purpose start with an `as` prefix. Therefore, the
    `asDate` method will be used to format dates, and the `asCurrency` method will
    be used to format currencies.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要格式化一个值，我们将使用 `Yii::$app->formatter`；此对象属于位于 `yii\i18n\` 下的 `Formatter` 类，支持多种格式化类型。用于此目的的所有方法都以
    `as` 前缀开头。因此，`asDate` 方法将用于格式化日期，而 `asCurrency` 方法将用于格式化货币。
- en: The first parameter of each formatting method is the value to be formatted and
    other fields refer to the format to be used and other optional parameters.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每个格式化方法的第一个参数是要格式化的值，其他字段指的是要使用的格式以及其他可选参数。
- en: 'Let''s change the view content by adding content of the Model that is ready
    to be saved:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加准备保存的模型内容来更改视图内容：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If `$model` is ready to be saved, in the box with the green background, we will
    have the output of each of the fields of Model.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `$model` 准备好保存，在绿色背景的框中，我们将看到模型每个字段的输出。
- en: 'In this example, we have used:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用了：
- en: The `boolean` formatter for `has_condition`, `has_tv`, and `has_phone` members
    uses the default representation of false and true values; defaults are `No` for
    false and `Yes` for true, but we can change this behavior setting in the `$booleanFormat`
    member of `Yii::$app->formatter`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_condition`、`has_tv` 和 `has_phone` 成员的 `boolean` 格式化器使用默认的 false 和 true
    值表示；默认情况下，false 为 `No`，true 为 `Yes`，但我们可以通过 `Yii::$app->formatter` 的 `$booleanFormat`
    成员来更改此行为设置。'
- en: The `date` formatter for `available_from member` takes the date format to be
    used as the second parameter; this date format can be represented with PHP date
    function style or ICU standard
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`available_from` 成员的 `date` 格式化器将使用的日期格式作为第二个参数；此日期格式可以用 PHP 日期函数风格或 ICU 标准表示。'
- en: The `currency` formatter for the `price_per_day` member is the second parameter
    with three characters type of currency to be used
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price_per_day` 成员的 `currency` 格式化器是第二个参数，包含三个字符类型的货币要使用。'
- en: 'This is how the box with the content of Model appears:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是包含模型内容的框的显示方式：
- en: '![Format date, time, and numbers](img/B04656_04_03.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![格式化日期、时间和数字](img/B04656_04_03.jpg)'
- en: Show summary of Model content when validation is successful
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当验证成功时显示模型内容的摘要。
- en: Uploading files
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: 'The common task when data is sent from view to controller is uploading files.
    Also, in this case, Yii2 provides a convenient helper to handle this task: `yii\web\UploadedFile`.
    This class has two important methods: `getInstance()` (in plural form `getInstances()`)
    and `saveAs()`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据从视图发送到控制器时，常见的任务是上传文件。在这种情况下，Yii2 也提供了一个方便的辅助工具来处理此任务：`yii\web\UploadedFile`。此类有两个重要方法：`getInstance()`（复数形式
    `getInstances()`）和 `saveAs()`。
- en: The first method, `getInstance()`, allows us to get the file from the form's
    input field, while the second method, `saveAs()`, as its name implies, allows
    us to save file input field content to the server filesystem.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 `getInstance()` 允许我们从表单的输入字段中获取文件，而第二种方法 `saveAs()`，正如其名称所暗示的，允许我们将文件输入字段的内容保存到服务器文件系统中。
- en: Before we start with the example, it is important to create a folder that will
    contain the uploaded files. The best place to create this folder is at the root
    directory of the application. So create a folder named `uploadedfiles` under the
    `basic/` folder.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始示例之前，创建一个将包含上传文件的文件夹是很重要的。创建此文件夹的最佳位置是应用程序的根目录。因此，在 `basic/` 文件夹下创建一个名为 `uploadedfiles`
    的文件夹。
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that this folder is writable.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 确保此文件夹可写。
- en: 'Next, to centralize configuration, define an alias for this new folder, so
    that we can change this path from app configuration. Enter in `basic/config/web.php`
    and append the `aliases` property, if it does not exist, to the `$config` array
    with these lines:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了集中配置，为这个新文件夹定义一个别名，这样我们就可以从应用程序配置中更改此路径。在`basic/config/web.php`中输入，如果不存在，则将这些行追加到`$config`数组中：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`@app` is a system aliases that defines the application''s root directory.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`@app`是一个系统别名，它定义了应用程序的根目录。'
- en: Example – uploading an image of a room
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 上传一个房间的图片
- en: In this example, we will see how to upload an image of a room.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何上传一个房间的图片。
- en: We need to make changes in model, view, and controller. Let's start with model.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在模型、视图和控制器中进行更改。让我们从模型开始。
- en: In model, we need to add a new property, named `fileImage`, with its specific
    rule.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型中，我们需要添加一个新的属性，命名为`fileImage`，并为其指定特定的规则。
- en: 'This is the final version of Model:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模型的最终版本：
- en: '[PRE10]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In rules, for the `fileImage` field, we can add many types of validation; for
    example, check if required, check mime type (`.gif`, `.jpeg`, and `.png`).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在规则中，对于`fileImage`字段，我们可以添加多种类型的验证；例如，检查是否必需，检查MIME类型（`.gif`，`.jpeg`和`.png`）。
- en: 'Next, we will use the static method `getInstance()` of the `UploadedFile` class
    in controller, to get the file from the input file field and then use `saveAs`
    to save in the specific folder. This is the final version of `RoomsController`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`UploadedFile`类的静态方法`getInstance()`在控制器中获取输入文件字段中的文件，然后使用`saveAs`将其保存到特定文件夹。这是`RoomsController`的最终版本：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`UploadedFile::getInstance` gets the file from the `$_FILES` array to fill
    the `fileImage` property of Model with its data.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`UploadedFile::getInstance`从`$_FILES`数组中获取文件，以填充Model的`fileImage`属性并使用其数据。'
- en: 'The last thing to do is to update the `create` view content, by appending the
    `fileInput` field. This is the final version:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要做的事情是更新`create`视图内容，通过添加`fileInput`字段。这是最终版本：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Take care of the last row of this example, `ActiveForm::end()` that closes the
    body of the `$form` widget defined at the top of the file using the `ActiveForm::begin()`
    method.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一行此示例，`ActiveForm::end()`关闭了在文件顶部使用`ActiveForm::begin()`方法定义的`$form`小部件的主体。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this example, the `ActiveForm` widget has been created by filling the `enctype`
    property of the configuration array with the `multipart/form-data` value, which
    allows us to send the binary data other than the form text parameters. However,
    this does not deal with Yii or PHP, because this is an HTML requirement for notifying
    the browser how to send files to the server.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`ActiveForm`小部件是通过将配置数组的`enctype`属性填充为`multipart/form-data`值创建的，这允许我们发送除了表单文本参数之外的二进制数据。然而，这并不涉及Yii或PHP，因为这是一个HTML要求，用于通知浏览器如何将文件发送到服务器。
- en: In this view, if the model has been validated and the `fileImage` property is
    filled, the corresponding image will be displayed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视图中，如果模型已经经过验证并且`fileImage`属性已填充，则将显示相应的图片。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to build a Model class from scratch and send data
    from view to controller using form, created using Yii2 ActiveForm widget. We also
    looked at the common useful methods to format data and sent files from the form.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何从头开始构建Model类，并使用Yii2 ActiveForm小部件创建的表单从视图向控制器发送数据。我们还探讨了格式化数据以及从表单发送文件的常用方法。
- en: In the next chapter, you will learn how to work with databases and save model
    data from view form to database.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何与数据库交互并将视图表单中的模型数据保存到数据库中。
