- en: Chapter 3. Creating a Communication Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 创建通信应用
- en: '*In the previous chapter, we covered creating controllers and views in a new
    Zend Framework module. In this chapter we will create our first registration form,
    and set up login and authentication for registered users using Zend Framework
    components.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在前一章中，我们介绍了在新的 Zend Framework 模块中创建控制器和视图。在本章中，我们将创建我们的第一个注册表单，并使用 Zend Framework
    组件为注册用户设置登录和身份验证。*'
- en: 'Some of the key components that we will focus on in this chapter are listed
    as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中关注的一些关键组件如下列出：
- en: '`Zend\Form`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend\Form`'
- en: '`Zend\InputFilter`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend\InputFilter`'
- en: '`Zend\Validator`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend\Validator`'
- en: Models and `Zend\Db`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型和 `Zend\Db`
- en: Zend\Form
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zend\Form
- en: Forms are usually built by creating the HTML page for the form, writing separate
    validation and filtering for various form events, and finally writing the controllers
    and actions for the form actions. With Zend Framework, the `Zend\Form` component
    provides all the previously stated features in a single component.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 表单通常是通过创建表单的 HTML 页面、为各种表单事件编写单独的验证和过滤，以及最后为表单操作编写控制器和动作来构建的。使用 Zend Framework，`Zend\Form`
    组件在一个组件中提供了之前所述的所有功能。
- en: '`Zend\Form` allows developers to programmatically create and handle forms in
    your applications. `Zend\Form` supports form rendering, form handling, input filtering
    and validation, and form configurations. In our next task we will set up our first
    form in ZF2.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Zend\Form` 允许开发者在应用程序中以编程方式创建和处理表单。`Zend\Form` 支持表单渲染、表单处理、输入过滤和验证以及表单配置。在下一个任务中，我们将设置我们的第一个
    ZF2 表单。'
- en: Time for action – creating a registration form
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建注册表单
- en: 'To create our first registration form, we will create a new controller to display
    a registration form; we will also create new forms and views. We need to make
    the following changes to the `Users` module:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个注册表单，我们将创建一个新的控制器来显示注册表单；我们还将创建新的表单和视图。我们需要对 `Users` 模块进行以下更改：
- en: '**Form** – We will also need to create a registration form under `src/Users/Form/RegisterForm.php`:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**表单** – 我们还需要在 `src/Users/Form/RegisterForm.php` 下创建一个注册表单：'
- en: 'The `RegisterForm` class extends `Zend\Form\Form`; the form''s configuration
    is added to the constructor:'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RegisterForm` 类扩展了 `Zend\Form\Form`；表单的配置添加到构造函数中：'
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'All fields are added to the form using the `$this->add()` method on the form''s
    constructor:'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有字段都是通过在表单构造函数上使用 `$this->add()` 方法添加到表单中的：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Additional validators/filters can be added to the fields while declaring the
    fields in the form. In this case we are adding special validation for the `EmailAddress`
    field:'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在声明表单字段时，可以添加额外的验证器/过滤器到字段。在这种情况下，我们对 `EmailAddress` 字段添加了特殊的验证：
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Use the same method to add `password`, `confirm_password`, and `submit` fields;
    `password` and `confirm_password` will be of type `password`, whereas `submit`
    will be of type `button`.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的方法添加 `password`、`confirm_password` 和 `submit` 字段；`password` 和 `confirm_password`
    将是 `password` 类型，而 `submit` 将是 `button` 类型。
- en: '**Views** – The following views will have to be created to support the registration
    process:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**视图** – 为了支持注册过程，以下视图需要被创建：'
- en: '**Registration page**: The view for registration page is created in `src/view/users/register/index.phtml`.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**注册页面**：注册页面的视图是在 `src/view/users/register/index.phtml` 中创建的。'
- en: 'The view consists of three main sections—the section to display error messages,
    the view logic which is used to generate the form tag, and the view helpers used
    to generate the actual form elements. The following logic is used to display error
    messages:'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图由三个主要部分组成——显示错误信息的部分、用于生成表单标签的视图逻辑，以及用于生成实际表单元素的视图辅助器。以下逻辑用于显示错误信息：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following block is used to generate the `<form>` HTML tag using the `form`
    object assigned to the view in the controller:'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块用于使用分配给控制器中视图的 `form` 对象生成 `<form>` HTML 标签：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following section is used to generate individual form elements for the
    **Name**, **Email**, **Password**, **Confirm Password**, and **Submit** fields:'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下部分用于为 **姓名**、**电子邮件**、**密码**、**确认密码** 和 **提交** 字段生成单个表单元素：
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally the `form` HTML tag needs to be closed:'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后需要关闭 `form` HTML 标签：
- en: '[PRE6]'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Confirmation page**: The view for the confirmation page is pretty straightforward,
    the view is created in `src/view/users/register/confirm.phtml`.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**确认页面**：确认页面的视图相当简单，视图是在 `src/view/users/register/confirm.phtml` 中创建的。'
- en: '[PRE7]'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Controller** – Now that we have the form and views ready, our next step will
    be to have a controller in place, which will help us to access this form. We will
    create a new `RegisterController` class and load the newly created form in its
    index action. The new controller will be created in the `src/Users/Controller/RegisterController.php`
    file:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**控制器** – 现在我们已经有了表单和视图，我们的下一步将是放置一个控制器，这将帮助我们访问此表单。我们将创建一个新的`RegisterController`类，并在其index操作中加载新创建的表单。新控制器将在`src/Users/Controller/RegisterController.php`文件中创建：'
- en: '[PRE8]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Configuration** – Now we have created all the necessary components to display
    our form, we need to add our controller to the `invokables` list in the module
    config (`config/module.config.php`):'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置** – 现在我们已经创建了显示表单所需的所有组件，我们需要将我们的控制器添加到模块配置中的`invokables`列表（`config/module.config.php`）：'
- en: '[PRE9]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To test the registration form''s display, open any web browser and try accessing
    the following URL:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试注册表单的显示，请打开任何网页浏览器并尝试访问以下URL：
- en: '`http://comm-app.local/users/register`'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://comm-app.local/users/register`'
- en: 'The registration form should look like the following:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注册表单应该看起来像以下这样：
- en: '![Time for action – creating a registration form](img/1929OS_03_01.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 创建注册表单](img/1929OS_03_01.jpg)'
- en: '*What just happened?*'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么事？*'
- en: 'Until now we have created a form that can be used to display all the necessary
    fields that can be used during the registration process. Let us try to understand
    how the form is being rendered. When we invoke the `http://comm-app.local/users/register`
    page, the controller creates a new instance of the `RegisterForm` class and displays
    it on the web browser. We have added the following fields to the `RegisterForm`
    class using its constructor:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个可以用于显示在注册过程中使用的所有必要字段的表单。让我们尝试了解表单是如何被渲染的。当我们调用`http://comm-app.local/users/register`页面时，控制器会创建`RegisterForm`类的新实例，并在网页浏览器中显示它。我们使用构造函数向`RegisterForm`类添加了以下字段：
- en: '**Name**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**姓名**'
- en: '**Email**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件**'
- en: '**Password**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**'
- en: '**Confirm Password**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确认密码**'
- en: The **Submit** button
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交**按钮'
- en: These fields are added to the newly created `Form` object. The `ViewModel` pattern
    renders the form, and the `form` object gets passed over to the view for rendering,
    and each field is rendered as per the logic in the view using the `FormElement`
    view helper.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段被添加到新创建的`Form`对象中。`ViewModel`模式渲染表单，并将`form`对象传递给视图进行渲染，每个字段都按照视图中的逻辑使用`FormElement`视图助手进行渲染。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`FormElement` works as a magic helper to render any form field based on the
    type of the `Zend\Form\Element` tag that is passed on to it. There are individual
    helpers for rendering specific form fields. The complete list of form view helpers
    can be obtained from the ZF documentation on *Form View Helpers* found at[http://framework.zend.com/manual/2.0/en/modules/zend.form.view.helpers.html](http://framework.zend.com/manual/2.0/en/modules/zend.form.view.helpers.html).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormElement`作为一个魔法助手，根据传递给它的`Zend\Form\Element`标签的类型渲染任何表单字段。有用于渲染特定表单字段的单独助手。可以从ZF文档中获取完整的表单视图助手列表，该文档位于[http://framework.zend.com/manual/2.0/en/modules/zend.form.view.helpers.html](http://framework.zend.com/manual/2.0/en/modules/zend.form.view.helpers.html)。'
- en: Have a go hero
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: 'Before we move on to the next section, please create a login form in the same
    way that we used to create the registration form. The form will contain the following
    fields:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一节之前，请以我们创建注册表单相同的方式创建一个登录表单。该表单将包含以下字段：
- en: '**Email**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件**'
- en: '**Password**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**'
- en: The **Submit** button
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交**按钮'
- en: We will be using this login form to perform authentication towards the end of
    this chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的末尾使用此登录表单进行身份验证。
- en: Form validation
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单验证
- en: 'If you had taken a closer look at the form code, you would have noticed that
    we have added some validation for the **Email Address** field as shown in the
    following snippet:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看表单代码，你会注意到我们为**电子邮件地址**字段添加了一些验证，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So, we added the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们添加了以下内容：
- en: An attribute to make the field a `required` field
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个属性使字段成为`必填`字段
- en: A filter to trim the string that is passed
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于修剪传入字符串的过滤器
- en: A validator to verify if the e-mail address is in the valid format
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个验证器用于验证电子邮件地址是否为有效格式
- en: With the introduction on Zend Framework's InputFilter, we can validate entire
    forms instead of attaching validation to each and every form field. This allows
    much cleaner code and better scalability of Zend Forms. So effectively we can
    have the same form being used in multiple sections of the website, each having
    its own set of validation rules that are not dependant on the form's validation.
    In our next section we will set up a new validator for the registration form.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过介绍Zend Framework的InputFilter，我们可以验证整个表单，而不是将验证附加到每个表单字段。这使得代码更加简洁，并且提高了Zend
    Forms的可扩展性。因此，我们可以有效地在网站的多个部分使用相同的表单，每个部分都有自己的验证规则集，这些规则集不依赖于表单的验证。在我们下一节中，我们将为注册表单设置一个新的验证器。
- en: Zend\InputFilter
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zend\InputFilter
- en: Validation for forms and various other inputs can be performed by making use
    of `Zend\InputFilter`. This component allows filtering and validation of generic
    sets of input data. For specific form elements you can apply validation and filtering
    on the specific elements, but if we have to filter an input set like a `$_GET`
    request or a `$_POST` request, this can be implemented using the `InputFilter`
    class.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`Zend\InputFilter`来执行表单和各种其他输入的验证。该组件允许过滤和验证通用输入数据集。对于特定的表单元素，您可以在特定元素上应用验证和过滤，但如果我们需要过滤像`$_GET`请求或`$_POST`请求这样的输入集，可以使用`InputFilter`类来实现。
- en: In our next task, we will be adding the `InputFilter` class to our registration
    form.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个任务中，我们将向注册表单添加`InputFilter`类。
- en: Time for action – adding validation to the registration form
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行时间 – 向注册表单添加验证
- en: 'To add an `InputFilter` class to an existing form, we need to create a new
    `InputFilter` class and use it during form submission for validation, as shown
    in the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要向现有表单添加`InputFilter`类，我们需要创建一个新的`InputFilter`类，并在表单提交时使用它进行验证，如下面的步骤所示：
- en: 'Create a new `InputFilter` class in `src/Users/Form/RegisterFilter.php`. The
    `RegisterFilter` class will extend the `Zend\InputFilter\InputFilter` class and
    will add all the necessary validators in its constructor:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/Users/Form/RegisterFilter.php`中创建一个新的`InputFilter`类。`RegisterFilter`类将扩展`Zend\InputFilter\InputFilter`类，并在其构造函数中添加所有必要的验证器：
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using the `$this->add()` method, we can add various filter options to the registration
    form:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`$this->add()`方法，我们可以向注册表单添加各种过滤器选项：
- en: 'For the **Email Address** field, we will add a validator to check if the value
    entered is a valid e-mail address:'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**电子邮件地址**字段，我们将添加一个验证器以检查输入的值是否为有效的电子邮件地址：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For the **Name** field, we will add a validator to limit the size between `2`
    to `140` characters and will also add a filter to strip the HTML tags:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**名称**字段，我们将添加一个验证器以限制其大小在`2`到`140`个字符之间，并且还会添加一个过滤器以去除HTML标签：
- en: '[PRE13]'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For the **Password** and **Confirm Password** fields, we will not add any validators
    but will make them mandatory:'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**密码**和**确认密码**字段，我们不会添加任何验证器，但将它们设置为必填项：
- en: '[PRE14]'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This `InputFilter` class is not mapped to the `RegisterForm` class yet; we will
    be performing the validation during form submission. We need to modify the `RegisterController`
    class to enable the `processAction` method and validate the form upon submission.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个`InputFilter`类尚未映射到`RegisterForm`类；我们将在表单提交时执行验证。我们需要修改`RegisterController`类以启用`processAction`方法并在提交时验证表单。
- en: 'Modify the `RegisterController` class to enable the `processAction` method:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`RegisterController`类以启用`processAction`方法：
- en: '[PRE15]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now open the registration page in your web browser and test the validation:![Time
    for action – adding validation to the registration form](img/1929OS_03_02.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您的网络浏览器中打开注册页面并测试验证：![执行时间 – 向注册表单添加验证](img/1929OS_03_02.jpg)
- en: '*What just happened?*'
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have now enabled validation on the registration form. In the `processAction()`
    function of the `RegisterController` class, you will see that a new instance of
    the `RegisterFrom` class is created and `RegisterFilter` is applied to the form
    using the `$form->setInputFilter()` method. The data entered as input to the form
    is added again and validation is performed by using the `isValid()` method. Error
    messages are rendered in the form using the `FormElementErrors` view helper.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在注册表单上启用了验证。在`RegisterController`类的`processAction()`函数中，您将看到创建了一个新的`RegisterFrom`类实例，并使用`$form->setInputFilter()`方法应用了`RegisterFilter`。将数据作为输入添加到表单中，并通过使用`isValid()`方法执行验证。错误信息使用`FormElementErrors`视图助手在表单中渲染。
- en: We need to ensure that the names in the `InputFilter` class properly map to
    the names in the form while adding validation to `InputFilter`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保在向`InputFilter`类添加验证时，`InputFilter`中的名称正确映射到表单中的名称。
- en: Have a go hero
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: You've just learned about adding a custom `InputFilter` class to a Zend form
    using the previous task; before you move on to the next section, set up a validation
    `InputFilter` for the `Login` form that you have built in your previous exercise.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚学习了如何使用上一个任务添加自定义的`InputFilter`类到Zend表单；在你继续到下一节之前，为你在上一个练习中构建的`Login`表单设置一个验证`InputFilter`。
- en: Models and database access
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型和数据库访问
- en: Models provide a representation of data in the MVC application. There is no
    `Zend\Model` component that is provided by Zend Framework, so developers have
    to decide on the implementation part of models. Models by themselves cannot talk
    to databases and fetch or process data, so they are usually connected to mapper
    objects or use ORM to connect to databases. For this example, we will be using
    a `TableGateway` pattern for storing data in the database.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 模型提供了MVC应用程序中数据的表示。Zend Framework没有提供`Zend\Model`组件，因此开发人员必须决定模型的实现部分。模型本身不能与数据库通信，以检索或处理数据，因此它们通常连接到映射对象或使用ORM连接到数据库。在这个例子中，我们将使用`TableGateway`模式将数据存储在数据库中。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`TableGateway` is a built-in Zend Framework 2 DB pattern which acts as a gateway
    to a database table, having access to all table rows for performing various SQL
    operations including `select`, `insert`, `update`, and `delete`.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableGateway`是内置的Zend Framework 2 DB模式，它作为数据库表的网关，可以访问所有表行以执行各种SQL操作，包括`select`、`insert`、`update`和`delete`。'
- en: TableGateway
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TableGateway
- en: The `TableGateway` pattern is used for creating an object that represents a
    table in the database; in this example, we will need a `TableGateway` object for
    the `User` table.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableGateway`模式用于创建一个表示数据库中表的对象；在这个例子中，我们需要一个`TableGateway`对象来表示`User`表。'
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `exchangeArray()` method needs to be declared in the model if the model
    uses `TableGateway` for database storage.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模型使用`TableGateway`进行数据库存储，则需要在模型中声明`exchangeArray()`方法。
- en: Time for action – creating models and saving the form
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建模型和保存表单
- en: 'In this task, we will be creating a new user model, creating a table in MySQL
    database to save the registration data using `TableGateway` to store registration
    data to the table. We will, finally, connect our registration form to `UserTable`
    so that new registrations are stored in the database. Perform the following steps
    to do so:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将创建一个新的用户模型，在MySQL数据库中创建一个表来保存注册数据，使用`TableGateway`将注册数据存储到表中。最后，我们将我们的注册表单连接到`UserTable`，以便新的注册信息存储在数据库中。执行以下步骤来完成此操作：
- en: 'A new table needs to be created to store the registration information in the
    MySQL database:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要创建一个新的表来在MySQL数据库中存储注册信息：
- en: '[PRE16]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The application's global configuration needs to be modified to add references
    to the database connection as shown in the following snippet. This is available
    under `<Application_Home>/config/autoload/global.php`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要修改应用程序的全局配置以添加数据库连接的引用，如下面的代码片段所示。这可以在`<Application_Home>/config/autoload/global.php`中找到。
- en: '[PRE17]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a new model for the `User` class. This needs to be created under `src/Users/Model/User.php`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`User`类创建一个新的模型。这需要在`src/Users/Model/User.php`下创建。
- en: '[PRE18]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `User` model will define the `setPassword()` and the `exchangeArray()`
    methods:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`User`模型将定义`setPassword()`和`exchangeArray()`方法：'
- en: 'Implement a `setPassword()` method which will assign a MD5 version password
    to the `UserTable` entity for storage:'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`setPassword()`方法，该方法将为`UserTable`实体分配一个MD5版本的密码以进行存储：
- en: '[PRE19]'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Implement the `exchangeArray()` method; this method is used while mapping the
    `User` entity to the `UserTable` entity:'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`exchangeArray()`方法；该方法在将`User`实体映射到`UserTable`实体时使用：
- en: '[PRE20]'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a new table reference for `User`. This needs to be created under `src/Users/Model/UserTable.php`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`User`创建一个新的表引用。这需要在`src/Users/Model/UserTable.php`下创建：
- en: '[PRE21]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we can use `UserTable` to save new registrations to the database. To save
    registrations, we need to make changes to the `RegisterController` class. First,
    we will create a new function for saving user registration:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用`UserTable`将新的注册信息保存到数据库中。为了保存注册信息，我们需要对`RegisterController`类进行修改。首先，我们将创建一个用于保存用户注册的新函数：
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `TableGateway` constructor takes the following parameters and generates
    a `TableGateway` object in response:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`TableGateway`构造函数接受以下参数，并生成一个`TableGateway`对象作为响应：'
- en: '**$table**: Used to provide the table name for the `TableGateway` object.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$table**：用于提供 `TableGateway` 对象的表名。'
- en: '**Adapter $adapter**: Used to provide the database adapter name.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Adapter $adapter**：用于提供数据库适配器名称。'
- en: '**$features** (optional): TableGateway Feature API allows the extension of
    the `TableGateway` functionality without having to extend the base class. The
    features can be specified here.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$features**（可选）：TableGateway 功能 API 允许在不扩展基类的情况下扩展 `TableGateway` 功能。功能可以在此处指定。'
- en: '**ResultSet $resultSetPrototype** (optional): Used to provide the `ResultSet`
    type.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ResultSet $resultSetPrototype**（可选）：用于提供 `ResultSet` 类型。'
- en: '**Sql $sql** (optional): Used to provide any additional SQL criteria; make
    sure that the SQL object is bound to the same table as in `$table`.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sql $sql**（可选）：用于提供任何额外的 SQL 条件；确保 SQL 对象绑定到与 `$table` 相同的表。'
- en: 'For more information refer to: [http://framework.zend.com/manual/2.0/en/modules/zend.db.table-gateway.html#zend-db-tablegateway](http://framework.zend.com/manual/2.0/en/modules/zend.db.table-gateway.html#zend-db-tablegateway)'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多信息请参阅：[http://framework.zend.com/manual/2.0/en/modules/zend.db.table-gateway.html#zend-db-tablegateway](http://framework.zend.com/manual/2.0/en/modules/zend.db.table-gateway.html#zend-db-tablegateway)
- en: 'Next, we need to make sure that the `processAction()` method calls this function
    before redirecting to the confirmation page:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要确保在重定向到确认页面之前，`processAction()` 方法调用此函数：
- en: '[PRE23]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Open the registration page in your favourite browser and use the MySQL database
    to check if the registration information is properly stored in the database. The
    registration confirmation page should look like the following screenshot:![Time
    for action – creating models and saving the form](img/1929OS_03_03.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您最喜欢的浏览器中打开注册页面，并使用 MySQL 数据库检查注册信息是否已正确存储在数据库中。注册确认页面应如下截图所示：![执行动作 – 创建模型和保存表单](img/1929OS_03_03.jpg)
- en: 'You can check the MySQL database to see if the records have been inserted properly:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查 MySQL 数据库以查看记录是否已正确插入：
- en: '![Time for action – creating models and saving the form](img/1929OS_03_04.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![执行动作 – 创建模型和保存表单](img/1929OS_03_04.jpg)'
- en: '*What just happened?*'
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have now modified the form to save new user registrations to the database;
    our next step will be to set up authentication based on the information stored
    in the database.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经修改了表单以将新的用户注册保存到数据库中；我们的下一步将是根据数据库中存储的信息设置认证。
- en: Zend\Authentication
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zend\Authentication
- en: '`Zend\Authentication` is an authentication component provided by Zend Framework
    which can be used for authentication against a wide number of authentication mechanisms
    including database table, HTTP authentication, and LDAP authentication. The component
    also lets you store the session information to a wide range of storages.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`Zend\Authentication` 是由 Zend Framework 提供的一个认证组件，它可以用于多种认证机制，包括数据库表、HTTP 认证和
    LDAP 认证。该组件还允许您将会话信息存储到多种存储中。'
- en: In this example, we will be using the `Zend\Authentication` component to validate
    the user credentials submitted in the login form.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用 `Zend\Authentication` 组件来验证登录表单中提交的用户凭据。
- en: Time for action – user authentication
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 – 用户认证
- en: 'In this task we will be authenticating the login form using the `Zend\Authentication`
    component using the following steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将使用以下步骤使用 `Zend\Authentication` 组件对登录表单进行认证：
- en: 'Add a function to return the authentication service in the login controller
    `src/Users/Controller/LoginController.php`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在登录控制器 `src/Users/Controller/LoginController.php` 中添加一个函数以返回认证服务：
- en: '[PRE24]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `processAction()` method for `LoginController`, check if the form submission
    is valid, and use the `AuthService` method to validate the credentials using the
    `authenticate` method:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `LoginController` 的 `processAction()` 方法中，检查表单提交是否有效，并使用 `AuthService` 方法通过
    `authenticate` 方法验证凭据：
- en: '[PRE25]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `ConfirmAction` function will render the logged in user''s welcome screen:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ConfirmAction` 函数将渲染已登录用户的欢迎屏幕：'
- en: '[PRE26]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The view for the user''s home page created under `/view/users/login/confirm.phtml`
    will be as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/view/users/login/confirm.phtml` 下创建的用户主页视图如下：
- en: '[PRE27]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Open the login page in your browser and try to log in with the credentials that
    you used during registration. The login form should look like the following:![Time
    for action – user authentication](img/1929OS_03_05.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开登录页面，并尝试使用您在注册时使用的凭据进行登录。登录表单应如下所示：![执行动作 – 用户认证](img/1929OS_03_05.jpg)
- en: Upon successful login, you will be redirected to the login success page as shown
    below.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 登录成功后，您将被重定向到以下所示的登录成功页面。
- en: '![Time for action – user authentication](img/1929OS_03_06.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 - 用户认证](img/1929OS_03_06.jpg)'
- en: '*What just happened?*'
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We created a new database table authentication adapter for the `user` table
    to validate the `email` and `password` fields. Using the authentication adapter
    we have been able to perform authentication for registered users.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`user`表创建了一个新的数据库表认证适配器，用于验证`email`和`password`字段。通过使用认证适配器，我们已经能够为注册用户执行认证。
- en: Pop quiz – Zend Framework 2.0
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 - Zend Framework 2.0
- en: Q1\. Which file should be modified to store the database credentials application-wide?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 应该修改哪个文件来存储应用程序范围内的数据库凭证？
- en: '`<App>/module/<Module>/config.inc`'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<App>/module/<Module>/config.inc`'
- en: '`<App>/config/autoload/global.php`'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<App>/config/autoload/global.php`'
- en: '`<App>/module/<Module>/module.config.php`'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<App>/module/<Module>/module.config.php`'
- en: '`<App>/module/<Module>/config/module.config.php`'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<App>/module/<Module>/module.config.php`'
- en: Q2\. What is the correct method to assign an input filter to a form?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 将输入过滤器分配给表单的正确方法是什么？
- en: '`$form->setInputFilter($inputFilter)`'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$form->setInputFilter($inputFilter)`'
- en: '`$form->useInputFilter($inputFilter)`'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$form->useInputFilter($inputFilter)`'
- en: '`$form->assignInputFilter($inputFilter)`'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$form->assignInputFilter($inputFilter)`'
- en: '`$form->mapInputFilter($inputFilter)`'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$form->mapInputFilter($inputFilter)`'
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have learned creating forms, doing basic validations, storing
    form data to the database, using models, and authenticating with the database.
    In the next chapter we will be learning about advanced database operations, which
    will be based on the `TableGateway` pattern that we have covered in this chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了创建表单、进行基本验证、将表单数据存储到数据库、使用模型以及与数据库进行认证。在下一章中，我们将学习高级数据库操作，这些操作将基于本章所介绍的`TableGateway`模式。
