- en: Chapter 6. Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。插件
- en: In this chapter, we will take a look at a feature of Magento called **plugins**.
    Before we start with plugins, we first need to understand the term interception
    because the two terms are used somewhat interchangeably when dealing with Magento.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Magento 中的一个称为 **插件** 的功能。在我们开始使用插件之前，我们首先需要了解拦截这个术语，因为在处理 Magento
    时，这两个术语有时是互换使用的。
- en: '**Interception** is a software design pattern that is used when we want to
    insert code dynamically without necessarily changing the original class behavior.
    This works by dynamically inserting code between the calling code and the target
    object.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**拦截** 是一种软件设计模式，当我们要动态地插入代码而不必改变原始类的行为时使用。这是通过在调用代码和目标对象之间动态插入代码来实现的。'
- en: The interception pattern in Magento is implemented via plugins. They provide
    the before, after, and around listeners, which help us extend the observed method
    behavior.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 中的拦截模式是通过插件实现的。它们提供了 `before`、`after` 和 `around` 监听器，这些监听器帮助我们扩展观察方法的行为。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个插件
- en: Using the `before` listener
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `before` 监听器
- en: Using the `after` listener
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `after` 监听器
- en: Using the `around` listener
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `around` 监听器
- en: The plugin sort order
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件排序
- en: 'Before we start creating a plugin, it is worth noting their limitations. Plugins
    cannot be created for just any class or method, as they do not work for the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建插件之前，值得注意它们的限制。插件不能为任何类或方法创建，因为它们不适用于以下情况：
- en: Final classes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终类
- en: Final methods
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终方法
- en: The classes that are created without a dependency injection
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有依赖注入创建的类
- en: Let's go ahead and create a plugin using a simple module called `Foggyline_Plugged`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个名为 `Foggyline_Plugged` 的简单模块的插件。
- en: Creating a plugin
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个插件
- en: 'Start by creating the `app/code/Foggyline/Plugged/registration.php` file with
    partial content, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建包含部分内容的 `app/code/Foggyline/Plugged/registration.php` 文件，如下所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create the `app/code/Foggyline/Plugged/etc/module.xml` file with partial
    content, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建包含部分内容的 `app/code/Foggyline/Plugged/etc/module.xml` 文件，如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding file is simply a new module declaration with the dependency set
    against the `Magento_Catalog` module, as we will be observing its class. We will
    not go into the details of module declaration right now, as that will be covered
    later in the following chapters.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的文件只是一个新的模块声明，其依赖项针对 `Magento_Catalog` 模块，因为我们将会观察其类。我们现在不会深入讨论模块声明，因为这将在接下来的章节中介绍。
- en: 'Now, create the `app/code/Foggyline/Plugged/etc/di.xml` file with partial content,
    as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建包含部分内容的 `app/code/Foggyline/Plugged/etc/di.xml` 文件，如下所示：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Plugins are defined within the module `di.xml` file. To define a plugin, by
    using the `type` element and its `name` attribute, we first map the class that
    we want to observe. In this case, we are observing the `Magento\Catalog\Block\Product\AbstractProduct`
    class. Note that even though the file and class name imply an abstract type of
    class, the `AbstractProduct` class is not abstract.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 插件定义在模块 `di.xml` 文件中。要定义一个插件，我们首先使用 `type` 元素及其 `name` 属性映射我们想要观察的类。在这种情况下，我们正在观察
    `Magento\Catalog\Block\Product\AbstractProduct` 类。请注意，尽管文件和类名暗示了一个抽象类型的类，但 `AbstractProduct`
    类并不是抽象的。
- en: In the `type` element, we then define one or more plugins using the `plugin`
    element.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `type` 元素中，我们随后使用 `plugin` 元素定义一个或多个插件。
- en: 'The `plugin` element has the following four attributes assigned to it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugin` 元素分配了以下四个属性：'
- en: '`name`: Using this attribute, you can provide a unique and recognizable name
    value that is specific to the plugin'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 使用此属性，您可以提供一个独特且易于识别的名称值，该值特定于插件'
- en: '`sortOrder`: This attribute determines the order of execution when multiple
    plugins are observing the same method'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sortOrder`: 此属性确定当多个插件观察同一方法时的执行顺序'
- en: '`disabled`: The default value of this attribute is set to `false`, but if it
    is set to `true`, it will disable the plugin'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disabled`: 此属性的默认值设置为 `false`，但如果设置为 `true`，则将禁用插件'
- en: '`type`: This attribute points to the class that we will be using to implement
    the `before`, `after`, or `around` listener'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`: 此属性指向我们将要使用的类来实现 `before`、`after` 或 `around` 监听器'
- en: 'After doing this, create the `app/code/Foggyline/Plugged/Block/Catalog/Product/AbstractProductPlugin1.php`
    file with partial content, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成此操作后，创建包含部分内容的 `app/code/Foggyline/Plugged/Block/Catalog/Product/AbstractProductPlugin1.php`
    文件，如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As per the type definition in the `di.xml` file, the plugin observes the `Magento\Catalog\Block\Product\AbstractProduct`
    class, and this class has a method called `getAddToCartUrl`, which is defined
    as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`di.xml`文件中的类型定义，该插件观察`Magento\Catalog\Block\Product\AbstractProduct`类，并且这个类有一个名为`getAddToCartUrl`的方法，其定义如下：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `AbstractProductPlugin1` class does not have to be extended from another
    class for the plugin to work. We define the `before`, `after` and `around` listeners
    for the `getAddToCartUrl` method by using the naming convention, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractProductPlugin1`类不需要从另一个类扩展，我们可以通过使用命名约定定义`before`、`after`和`around`监听器来为`getAddToCartUrl`方法工作，如下所示：'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will go into the details of each listener later. Right now we need to finish
    the module by creating the `AbstractProductPlugin2.php` and `AbstractProductPlugin3.php`
    files as a copy of `AbstractProductPlugin1.php` and along with that, simply changing
    all the number values within their code from `1` to `2` or `3`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后详细说明每个监听器。现在，我们需要通过创建`AbstractProductPlugin2.php`和`AbstractProductPlugin3.php`文件来完成模块，这些文件是`AbstractProductPlugin1.php`的副本，并且简单地将其代码中的所有数字值从`1`更改为`2`或`3`。
- en: It's a good practice to organize the listeners into folders matching the structure
    of the observed class location. For example, if a module is called `Foggyline_Plugged`
    and we are observing the method in the `Magento\Catalog\Block\Product\AbstractProduct`
    class, we should consider putting the plugin class into the `Foggyline/Plugged/Block/Catalog/Product/AbstractProductPlugin.php`
    file. This is a not a requirement. Rather, it is a nice convention for other developers
    to easily manage the code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将监听器组织成与被观察类位置结构相匹配的文件夹是一个好习惯。例如，如果一个模块名为`Foggyline_Plugged`，并且我们在`Magento\Catalog\Block\Product\AbstractProduct`类中观察方法，我们应该考虑将插件类放入`Foggyline/Plugged/Block/Catalog/Product/AbstractProductPlugin.php`文件中。这并不是一个要求。相反，这是一个好的约定，以便其他开发者可以轻松地管理代码。
- en: 'Once the module is in place, we need to execute the following commands on the
    console:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模块到位，我们需要在控制台执行以下命令：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will make the module visible to Magento.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使模块对Magento可见。
- en: If we now open the storefront in a browser for a category page, we will see
    the results of all the `var_dump` function calls.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在浏览器中打开一个分类页面的店面，我们将看到所有`var_dump`函数调用的结果。
- en: Let's go ahead and take a look at each and every listener method in detail.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细查看每个监听器方法。
- en: Using the before listener
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`before`监听器
- en: The `before` listeners are used when we want to change the arguments of an original
    method or add some behavior before an original method is called.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`before`监听器用于我们想要更改原始方法的参数或在原始方法被调用之前添加一些行为时。'
- en: Looking back at the `beforeGetAddToCartUrl` listener method definition, you
    will see that it has three properties assigned in sequence—`$subject`, `$product`,
    and `$additional`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾`beforeGetAddToCartUrl`监听方法定义，你会看到它按顺序分配了三个属性——`$subject`、`$product`和`$additional`。
- en: With the `before` method listener, the first property is always the `$subject`
    property, which contains the instance of the object type being observed. Properties
    following the `$subject` property match the properties of the observed `getAddToCartUrl`
    method in a sequential order.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`before`方法监听器，第一个属性总是`$subject`属性，它包含被观察的对象类型的实例。在`$subject`属性之后的属性按照顺序匹配被观察的`getAddToCartUrl`方法的属性。
- en: 'This simple rule used for transformation is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 用于转换的简单规则如下：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `before` listener methods do not need to have a return value.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`before`监听方法不需要有返回值。'
- en: 'If we run `get_class($subject)` in the `beforeGetAddToCartUrl` listener method
    that we previously saw, we will have the following result:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在之前看到的`beforeGetAddToCartUrl`监听方法中运行`get_class($subject)`，我们将得到以下结果：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What this shows is that even though we are observing the `AbstractProduct` class,
    the `$subject` property is not directly of that type. Rather, it is of the `ListProduct\Interceptor`
    type. This is something that you should keep in mind during development.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明，尽管我们正在观察`AbstractProduct`类，但`$subject`属性并不是直接那种类型。相反，它是`ListProduct\Interceptor`类型。这是你在开发过程中应该记住的事情。
- en: Using the after listener
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`after`监听器
- en: The `after` listeners are used when we want to change the values returned by
    an original method or add some behavior after an original method is called.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`after`监听器用于我们想要更改原始方法返回的值或在原始方法被调用后添加一些行为时。'
- en: Looking back at the `afterGetAddToCartUrl` listener method definition, you will
    see that it has only one `$subject` property assigned.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下 `afterGetAddToCartUrl` 拦截器方法定义，你会看到它只分配了一个 `$subject` 属性。
- en: With the `after` method listener, the first and only property is always the
    `$subject` property, which contains the instance of the object type being observed
    and not the return value of the observed method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `after` 方法拦截器时，第一个且唯一的属性始终是 `$subject` 属性，它包含被观察的对象类型的实例，而不是被观察方法的返回值。
- en: 'This simple rule used for transformation is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 用于转换的简单规则如下：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `after` listener methods do not need to have a return value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`after` 拦截器方法不需要有返回值。'
- en: Like the `before` interceptor method, the `$subject` property in this case is
    not directly of the `AbstractProduct` type. Rather, it is of the parent `ListProduct\Interceptor`
    type.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `before` 拦截器方法类似，在这种情况下，`$subject` 属性不是直接属于 `AbstractProduct` 类型。相反，它是父类 `ListProduct\Interceptor`
    类型。
- en: Using the around listener
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `around` 拦截器
- en: The `around` listeners are used when we want to change both the arguments and
    the returned values of an original method or add some behavior before and after
    an original method is called.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要更改原始方法的参数和返回值，或者在调用原始方法前后添加一些行为时，使用 `around` 拦截器。
- en: Looking back at the `aroundGetAddToCartUrl` listener method definition, you
    will see that it has four properties assigned in sequence—`$subject`, `$proceed`,
    `$product`, and `$additional`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下 `aroundGetAddToCartUrl` 拦截器方法定义，你会看到它按顺序分配了四个属性——`$subject`、`$proceed`、`$product`
    和 `$additional`。
- en: With the `after` method listener, the first property is always the `$subject`
    property, which contains the instance of the object type being observed and not
    the return value of the observed method. The second property is always the `$proceed`
    property of `\Closure`. The properties following the `$subject` and `$proceed`
    match the properties of the observed `getAddToCartUrl` method in the sequential
    order too.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `after` 方法拦截器时，第一个属性始终是 `$subject` 属性，它包含被观察的对象类型的实例，而不是被观察方法的返回值。第二个属性始终是
    `\Closure` 的 `$proceed` 属性。在 `$subject` 和 `$proceed` 之后跟随的属性与被观察的 `getAddToCartUrl`
    方法的属性顺序相匹配。
- en: 'This simple rule used for transformation is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用于转换的简单规则如下：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `around` listener methods must have a return value. The return value is
    formed in such way that the parameters following the `$closure` parameter in the
    `around` listener method definition are passed to the `$closure` function call
    in a sequential order, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`around` 拦截器方法必须有一个返回值。返回值以这种方式形成，即 `around` 拦截器方法定义中 `$closure` 参数之后的参数按顺序传递给
    `$closure` 函数调用，如下所示：'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The plugin sort order
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件排序顺序
- en: Looking back, when we defined a plugin in the `di.xml` file, one of the attributes
    that we set for every plugin definition was `sortOrder`. It was set to `100`,
    `200` to `300` for `foggyPlugin1`, `foggyPlugin2` and `foggyPlugin3` respectively.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，当我们定义 `di.xml` 文件中的插件时，为每个插件定义设置的属性之一是 `sortOrder`。它被设置为 `100`，`200` 到
    `300` 分别为 `foggyPlugin1`、`foggyPlugin2` 和 `foggyPlugin3`。
- en: 'The flow of the code execution for the preceding plugins is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上述插件代码执行的流程如下：
- en: '`Plugin1 - beforeGetAddToCartUrl`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin1 - beforeGetAddToCartUrl`'
- en: '`Plugin1 - aroundGetAddToCartUrl`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin1 - aroundGetAddToCartUrl`'
- en: '`Plugin2 - beforeGetAddToCartUrl`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin2 - beforeGetAddToCartUrl`'
- en: '`Plugin2 - aroundGetAddToCartUrl`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin2 - aroundGetAddToCartUrl`'
- en: '`Plugin3 - beforeGetAddToCartUrl`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin3 - beforeGetAddToCartUrl`'
- en: '`Plugin3 - aroundGetAddToCartUrl`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin3 - aroundGetAddToCartUrl`'
- en: '`Plugin3 - afterGetAddToCartUrl`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin3 - afterGetAddToCartUrl`'
- en: '`Plugin2 - afterGetAddToCartUrl`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin2 - afterGetAddToCartUrl`'
- en: '`Plugin1 - afterGetAddToCartUrl`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin1 - afterGetAddToCartUrl`'
- en: 'In other words, if multiple plugins are listening to the same method, the following
    execution order is used:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果有多个插件监听同一个方法，将使用以下执行顺序：
- en: The `before` plugin functions with the lowest `sortOrder` value
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照排序顺序从低到高的 `before` 插件功能
- en: The `around` plugin functions with the lowest `sortOrder` value
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有最低 `sortOrder` 值的 `around` 插件功能
- en: The `before` plugin functions following the `sortOrder` value from the lowest
    to the highest
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照排序顺序从低到高的 `before` 插件功能
- en: The `around` plugin functions following the `sortOrder` value from the lowest
    to the highest
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`around` 插件功能遵循 `sortOrder` 值从低到高'
- en: The `after` plugin functions with the highest `sortOrder` value
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有最高 `sortOrder` 值的 `after` 插件功能
- en: The `after` plugin functions following the `sortOrder` value from the highest
    to the lowest
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`after` 插件函数按照 `sortOrder` 值从高到低执行'
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Special care needs to be taken when it comes to the `around` listener, as it
    is the only listener that needs to return a value. If we omit the return value,
    we risk breaking the execution flow in such a way that the other around plugins
    for the same method won't be executed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 `around` 监听器时需要特别注意，因为它是唯一需要返回值的监听器。如果我们省略返回值，可能会以这种方式破坏执行流程，导致同一方法的其它 `around`
    插件无法执行。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we had a look at a powerful feature of Magento called plugins.
    We created a small module with three plugins; each plugin had a different sort
    order. This enabled us to trace the execution flow of multiple plugins that observe
    the same method. We explored in detail the `before`, `after`, and `around` listener
    methods, while having a strong emphasis on the parameter order. The finalized
    module used in this chapter can be found at [https://github.com/ajzele/B05032-Foggyline_Plugged](https://github.com/ajzele/B05032-Foggyline_Plugged).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Magento 中的一个强大功能——插件。我们创建了一个包含三个插件的模块；每个插件都有不同的排序顺序。这使得我们能够追踪观察同一方法的多个插件的执行流程。我们详细探讨了
    `before`、`after` 和 `around` 监听器方法，同时特别强调了参数顺序。本章中使用的最终模块可以在[https://github.com/ajzele/B05032-Foggyline_Plugged](https://github.com/ajzele/B05032-Foggyline_Plugged)找到。
- en: In the next chapter, we are going to dive deep into backend development.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨后端开发。
