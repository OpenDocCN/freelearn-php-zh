- en: Chapter 1. Instant Yii 1.1 Application Development Starter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. Instant Yii 1.1 应用程序开发入门指南
- en: Welcome to *Instant Yii 1.1 Application Development Starter*. This book has
    been designed as a crash course in web application development with the Yii Framework.
    You will learn a step-by-step approach to building database-driven websites utilizing
    the features and extensions available in Yii.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎使用 *Instant Yii 1.1 应用程序开发入门指南*。这本书被设计为一门关于使用 Yii 框架进行网络应用程序开发的速成课程。你将学习如何一步步地利用
    Yii 中可用的功能和扩展来构建数据库驱动的网站。
- en: 'This book contains the following sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包含以下章节：
- en: '*So, what is Yii?* – In this section, we''ll start with a short review of what
    the Yii framework is, how it got started, and the overall benefits you''ll get
    when you start using it.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*那么，什么是 Yii？* - 在本节中，我们将简要回顾 Yii 框架是什么，它是如何开始的，以及当你开始使用它时你将获得的整体好处。'
- en: '*Installation* – In this section, we''ll install Yii Framework and kickstart
    your first "Hello World" application with it.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*安装* - 在本节中，我们将安装 Yii 框架，并使用它启动你的第一个 "Hello World" 应用程序。'
- en: '*Getting started* – Given the automatically-generated example application,
    we extend it to be a rudimentary blog according to the blog example from the Yii
    website, while also learning a lot of the most important concepts in Yii along
    the way.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*入门* - 在自动生成的示例应用程序的基础上，我们将其扩展为一个基本的博客，根据 Yii 网站上的博客示例，同时在这个过程中学习到许多 Yii 中最重要的概念。'
- en: '*Top 5 features you need to know about* – In this section, we continue the
    practical examples and we explore some not so obvious details and tricks of the
    framework, which can really help you in developing your application.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*你需要了解的前 5 个特性* - 在本节中，我们将继续实际示例，并探索一些不太明显但真正有助于你开发应用程序的框架细节和技巧。'
- en: '*People and places* – Lastly, we''ll see where to seek help and how to get
    to know the quite vast Yii community.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*人和地方* - 最后，我们将了解在哪里寻求帮助以及如何了解相当庞大的 Yii 社区。'
- en: So, what is Yii?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，什么是 Yii？
- en: Yii is an open source framework for web applications built with the PHP scripting
    language. It was first released late in 2008 to a world bustling with frameworks
    vying for market share. Although it entered the game somewhat late, this turned
    out to be an advantage as its creator, Qiang Xue, was able to include some of
    the best features of existing products in Yii. Also, the lessons he learned as
    a developer for the Prado framework helped him to build a superior solution. Today,
    Yii is widely heralded as one of the top PHP web frameworks. You can read more
    about it at [http://www.yiiframework.com](http://www.yiiframework.com).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 是一个用 PHP 脚本语言构建的网络应用程序开源框架。它于 2008 年晚些时候发布，当时框架市场正热闹非凡，各种框架都在争夺市场份额。尽管它进入游戏较晚，但最终这成为了一个优势，因为它的创造者
    Qiang Xue 能够在 Yii 中包含一些现有产品的最佳特性。此外，他在 Prado 框架作为开发者所学的经验帮助他构建了一个更优越的解决方案。如今，Yii
    被广泛认为是顶级 PHP 网络框架之一。你可以在 [http://www.yiiframework.com](http://www.yiiframework.com)
    上了解更多关于它的信息。
- en: As opposed to the **Content Management Systems** (**CMS**), it is not a complete
    skeleton of your website, which is configurable by some sort of graphical user
    interface. You have probably heard the names Joomla! and Drupal, which are particularly
    famous CMS examples in the PHP world.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与**内容管理系统**（**CMS**）不同，它不是一个可以通过某种图形用户界面配置的完整网站骨架。你可能听说过 Joomla! 和 Drupal，它们是
    PHP 世界中特别著名的 CMS 例子。
- en: On the contrary, Yii is called a framework because it has a set of built-in
    components. You, as a web application developer, can and definitely should freely
    use these to save your development time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Yii 被称为框架，因为它有一套内置的组件。作为网络应用程序开发者，你可以，并且确实应该自由地使用这些组件来节省你的开发时间。
- en: So, whether you just need a quick database app, some web services, or you have
    been tasked with building a whole corporate web portal, Yii will lay the groundwork
    and set you on the right path.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论你只是需要一个快速的数据库应用程序，一些网络服务，还是被分配去构建一个完整的公司网络门户，Yii 都会为你打下基础，并指引你走上正确的道路。
- en: Probably the most important parts of Yii are the complete database access layer
    and the highly intricate page rendering system. It comes with pre-built smart
    UI controls like the data grids or something simpler like datepickers, ready to
    be used on web pages. Also, for many routine coding tasks there are a set of automatic
    code generators. All of this will be explained in further sections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 最重要的一部分可能是完整的数据库访问层和高度复杂的页面渲染系统。它包含预构建的智能 UI 控件，如数据网格或更简单的日期选择器，可用于网页。此外，对于许多常规编码任务，有一套自动代码生成器。所有这些将在后续章节中解释。
- en: The Yii website also contains a huge number of user-contributed extensions to
    help you add functionality quickly. Applications built with the Yii clean organization
    style turn out highly extensible and easy to maintain.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 网站还包含大量用户贡献的扩展，以帮助您快速添加功能。使用 Yii 清晰的组织风格构建的应用程序具有高度的可扩展性和易于维护性。
- en: Yii enforces a tried and true architecture for your application, known as **Model
    View Controller** (**MVC**). This structure utilizes object-oriented principles
    to make clean separations in code organization.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 强制实施了一种经过验证的应用程序架构，称为 **模型视图控制器**（**MVC**）。这种结构利用面向对象的原则在代码组织中进行清晰的分离。
- en: Controllers receive requests, instantiate and manipulate the models that do
    the real work, and finally render the views for interaction with the end user.
    This will be discussed in later sections to a greater depth; however, it'll be
    important to know that unlike in the original MVC definition, views in Yii are
    completely passive, being just the page templates and not the full-fledged classes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器接收请求，实例化和操作执行实际工作的模型，并最终渲染视图以与最终用户交互。这将在后续章节中更深入地讨论；然而，重要的是要知道，与原始 MVC 定义不同，Yii
    中的视图是完全被动的，仅仅是页面模板，而不是完整的类。
- en: '![So, what is Yii?](img/1684OS_01_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![所以，什么是 Yii？](img/1684OS_01_01.jpg)'
- en: Yii's speed is unmatched thanks to some intelligent design choices at the core
    level. Most frameworks lose performance when they load more functionality than
    required for a given request. Loading too many classes can mean more disk reads,
    as each class is generally stored in its own file, or at least more processing
    if scripts are cached. More classes generally also result in additional database
    transactions, and all of these operations are both time and resource consuming.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在核心层面做出了一些智能的设计选择，Yii 的速度是无与伦比的。大多数框架在加载超过给定请求所需的功能时都会失去性能。加载过多的类可能导致更多的磁盘读取，因为每个类通常存储在自己的文件中，或者至少如果脚本被缓存，则意味着更多的处理。更多的类通常也会导致额外的数据库事务，所有这些操作都是时间和资源消耗的。
- en: Yii sticks to a philosophy of lazy-loading, where it strives not to load classes
    until they are actually needed. The core framework also adds no additional tables
    to your database, and makes only the minimum number of requests required to fetch
    the data for a given action. When your app is ready for production, there are
    a number of caching options to take performance to the next level. To reduce file
    I/O, Yii has built-in components that encapsulate common data caching solutions
    such as APC, Memcached, XCache, and EAccelerator. It also has a few components
    to handle caching of computed application data for an appropriate amount of time,
    such as the result of a complex database query.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 遵循一种懒惰加载的哲学，它力求不在实际需要之前加载类。核心框架也不会向您的数据库添加任何额外的表，并且只发出所需的最小请求来获取给定操作的数据。当您的应用程序准备投入生产时，有许多缓存选项可以将性能提升到下一个层次。为了减少文件
    I/O，Yii 内置了封装常见数据缓存解决方案的组件，如 APC、Memcached、XCache 和 EAccelerator。它还有一些组件可以处理计算应用程序数据的缓存，这些数据在适当的时间内保持不变，例如复杂数据库查询的结果。
- en: Nowadays, when a website allows users to post content, it runs the risk that
    some of that content might actually be malicious code. Probably the most frequent
    are **SQL Injection**, **Cross-Site Scripting** (**XSS**), and **Cross-site Request
    Forgery** (**CSRF**) attacks. Of course, you can look up these terms in Wikipedia,
    but you can also look up the detailed review of all these types of attacks in
    the *Web Application Hacker's Handbook*, by Stuttard Pinto, printed by Wiley in
    2011\. These are the common problems that website developers must address when
    accepting form data. Yii has built-in means to cope with them. All database interactions
    made properly by the Yii API sanitize user input automatically.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当一个网站允许用户发布内容时，它面临的风险是其中一些内容可能是恶意代码。最常见的是**SQL注入**、**跨站脚本攻击**（**XSS**）和**跨站请求伪造**（**CSRF**）攻击。当然，你可以在维基百科上查找这些术语，但你也可以在Stuttard
    Pinto所著的*《Web应用程序黑客手册》*中查找所有这些类型攻击的详细审查，该书由Wiley于2011年出版。这些是网站开发者在接受表单数据时必须解决的问题。Yii内置了处理这些问题的方法。所有通过Yii
    API正确执行的数据库交互都会自动清理用户输入。
- en: For dealing with user-generated content that will be rendered on the web pages,
    Yii encapsulates a project called **HTML Purifier**, which can be applied to any
    input field and will filter out any malicious code, unless specified on a white
    list. The homepage of the project is [http://htmlpurifier.org/](http://htmlpurifier.org/),
    and it is included in the component.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于将在网页上渲染的用户生成内容，Yii封装了一个名为**HTML Purifier**的项目，它可以应用于任何输入字段，并将过滤掉任何恶意代码，除非在白名单中指定。该项目的首页是[http://htmlpurifier.org/](http://htmlpurifier.org/)，并且它包含在组件中。
- en: For automatic protection from CSRF attacks of all your forms altogether, there
    is a single switch-in configuration. It will pass a random value to a user when
    they load a form. By having this value passed back, the interaction is validated.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动保护所有表单免受CSRF攻击，有一个单独的开关配置。当用户加载表单时，它将传递一个随机值给用户。通过传递这个值回来，交互被验证。
- en: All these features will be explained later in the *Top features* section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些功能将在*顶级功能*部分中稍后解释。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[http://www.PacktPub.com](http://www.PacktPub.com)上的账户下载你购买的所有Packt书籍的示例代码文件。如果你在其他地方购买了这本书，你可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册，以便直接将文件通过电子邮件发送给你。
- en: Installation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Yii is a web application framework, so the first thing you need is a web server.
    Yii is capable of running on most common HTTP servers, but the platform of choice
    for project maintainers and testers is Apache on Linux. NGINX is also a good choice,
    and you can also run Yii on Windows servers with Apache or Microsoft's IIS server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Yii是一个Web应用程序框架，因此你首先需要的是一个Web服务器。Yii能够在大多数常见的HTTP服务器上运行，但对于项目维护者和测试者来说，Linux上的Apache是首选平台。NGINX也是一个不错的选择，你还可以在Windows服务器上使用Apache或微软的IIS服务器来运行Yii。
- en: All instructions in this section assume the Linux (or Mac OS) environment with
    an Apache server.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的所有说明都假设是在具有Apache服务器的Linux（或Mac OS）环境中。
- en: Server requirements
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器要求
- en: As Yii is a PHP framework, the main dependency of Yii is PHP (version 5.1.0
    or higher). Yii also makes use of a few key PHP extensions. These include PDO
    for MySQL or PostgreSQL, the DOM extension, Mcrypt for security, SOAP, and GD
    for image processing. For data caching, it requires either Memcache, APC, XCache,
    or EAccellerator, all of which are optional. Yii supports database solutions such
    as MySQL 4.1 or greater, PostgreSQL 7.3 and above, SQLite 2 and 3, Microsoft SQL
    Server 2000 or later, and Oracle. Depending on which database is selected for
    the project, the appropriate PHP extension will be required. Please note that
    you don't need a database at all to use Yii in your application, however, you'll
    definitely lose a lot of data persistence solutions built in the framework.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Yii 是一个 PHP 框架，Yii 的主要依赖是 PHP（版本 5.1.0 或更高）。Yii 还使用了一些关键的 PHP 扩展。这些包括用于 MySQL
    或 PostgreSQL 的 PDO，DOM 扩展，Mcrypt 用于安全，SOAP，以及 GD 用于图像处理。对于数据缓存，它需要 Memcache，APC，XCache
    或 EAccellerator 之一，这些都是可选的。Yii 支持以下数据库解决方案：MySQL 4.1 或更高版本，PostgreSQL 7.3 及以上版本，SQLite
    2 和 3，Microsoft SQL Server 2000 或更高版本，以及 Oracle。根据项目选择哪种数据库，需要相应的 PHP 扩展。请注意，你不需要数据库就可以在应用程序中使用
    Yii，然而，你肯定会失去框架中内置的许多数据持久性解决方案。
- en: Step 1 – Setting up Yii
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步 – 设置 Yii
- en: 'Let''s start from the assumption that you already have the following things:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从假设你已经拥有以下东西开始：
- en: A running and configured web server such as Apache
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个运行并配置好的 Web 服务器，例如 Apache
- en: A folder published as a webroot of a website accessible from your browser
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个作为网站 webroot 发布的文件夹，可以通过浏览器访问
- en: So the only thing you need to set up right now is a real website in this webroot
    folder. Properly doing this two things is surely out of scope of this book.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你现在需要设置的唯一事情就是在这个 webroot 文件夹中设置一个真实的网站。正确完成这两件事显然超出了本书的范围。
- en: The place where you get the Yii framework bundle is the downloads section at
    the official website (direct URL is [http://www.yiiframework.com/download](http://www.yiiframework.com/download)).
    For application development, you need a stable version packaged in the archive
    file. You don't need to get the sources of Yii from a GitHub or Subversion repository
    unless you want to fiddle with the framework itself.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你获取 Yii 框架包的地方是官方网站的下载部分（直接网址是 [http://www.yiiframework.com/download](http://www.yiiframework.com/download)）。对于应用程序开发，你需要一个打包在存档文件中的稳定版本。除非你想修改框架本身，否则你不需要从
    GitHub 或 Subversion 仓库获取 Yii 的源代码。
- en: The ideology behind Yii is that the framework itself lies outside of your application
    directory, preferably in some system directory with root user access only. The
    framework's folder should be configured so only your web server will have rights
    to read the files in it. This policy is to prevent the unwanted direct access
    to framework files by the request to web server. When you create your application,
    you also configure its real path to the Yii directory.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 的理念是框架本身位于你的应用程序目录之外，最好是在只有 root 用户访问权限的系统目录中。框架的文件夹应该配置为只有你的 Web 服务器才有权读取其中的文件。这项政策是为了防止通过
    Web 服务器请求对框架文件的未授权直接访问。当你创建应用程序时，你也会配置其实际路径到 Yii 目录。
- en: 'In short, for Linux systems with a web server running as the user `apache`,
    you can install Yii Version 1.1.13\. e9e4a0 from the command line as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，对于以用户 `apache` 运行的 Web 服务器运行的 Linux 系统，你可以通过以下命令行安装 Yii 版本 1.1.13\. e9e4a0：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that for working in a system folder like `/var/local`, you need to be a
    root user. Of course, you can use any directory you like.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在像 `/var/local` 这样的系统文件夹中工作，你需要是 root 用户。当然，你可以使用你喜欢的任何目录。
- en: 'Inside the resulting `yii` directory, you''ll find three folders named as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的 `yii` 目录中，你会找到以下命名的三个文件夹：
- en: '`demos`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`demos`'
- en: '`framework`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`framework`'
- en: '`requirements`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements`'
- en: The `requirements` folder is a helper to make a self test for your server setup.
    You can copy it to your webroot folder and access `http://your.website.address/requirements/index.php`
    from the web browser to see whether your system complies to the framework's requirements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirements` 文件夹是一个辅助工具，用于对你的服务器设置进行自我测试。你可以将其复制到你的 webroot 文件夹，并通过 Web 浏览器访问
    `http://your.website.address/requirements/index.php` 来查看你的系统是否符合框架的要求。'
- en: The `framework` folder is the Yii framework itself. You essentially only need
    its contents to use Yii in your application. From now on, we'll refer to the path
    under which Yii is installed as `path-to-yii`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`framework` 文件夹是 Yii 框架本身。你实际上只需要它的内容来在你的应用程序中使用 Yii。从现在开始，我们将把 Yii 安装的路径称为
    `path-to-yii`。'
- en: Step 2 – Creating your project
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步 – 创建你的项目
- en: 'Once you have the framework installed on your machine, there is a command-line
    tool called `yiic` that is capable of building the skeleton application, among
    other quite numerous things. Open a console, navigate to your webroot, then run
    the autogenerator command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在您的机器上安装了框架，就有一个名为`yiic`的命令行工具，它可以构建骨架应用程序，以及其他许多事情。打开控制台，导航到您的webroot，然后运行自动生成命令：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `sitename` token is the path to your new application. As you are already
    in your `webroot` folder, you just need to provide a name of a subfolder and not
    a full path to it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`sitename`令牌是您新应用程序的路径。由于您已经在`webroot`文件夹中，您只需要提供一个子文件夹的名称，而不是它的完整路径。'
- en: 'This shell script is intended for use on Linux, so if you are on Windows, there
    is a `yiic.bat` file. Both scripts essentially run `framework/yiic.php` with the
    PHP command-line executable on your system, so the alternative method is to run
    it as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个shell脚本旨在在Linux上使用，所以如果您在Windows上，有一个`yiic.bat`文件。这两个脚本本质上都是在您的系统上使用PHP命令行可执行文件运行`framework/yiic.php`，所以另一种方法是按照以下方式运行：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Before you can visit your site, you must check the `index.php` file to make
    sure it points to the actual Yii installation folder.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在您访问您的网站之前，您必须检查`index.php`文件，以确保它指向实际的Yii安装文件夹。
- en: 'Make sure you have a line that looks like this in `sitename`/`index.php`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在`sitename`/`index.php`中有一行看起来像这样：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can now visit your site and see the basic hello world website with a homepage,
    about, contact, and a login page. As the application was created in a subfolder
    of your `webroot` folder, the URL should be like this: `http://your.website.address/sitename`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以访问您的网站，并看到一个包含主页、关于、联系和登录页面的基本hello world网站。由于应用程序是在您的`webroot`文件夹的子文件夹中创建的，因此URL应该是这样的：`http://your.website.address/sitename`。
- en: And that's it!!
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 就这些了!!
- en: 'Your application folder will contain the following structure under the `sitename`
    folder:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sitename`文件夹下，您的应用程序文件夹将包含以下结构：
- en: '`assets`: Contains published resource files'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets`: 包含发布的资源文件'
- en: '`css`: Contains CSS files'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css`: 包含CSS文件'
- en: '`images`: Contains image files'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images`: 包含图像文件'
- en: '`themes`: Contains application themes'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`themes`: 包含应用程序主题'
- en: '`protected`: Contains protected application files'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protected`: 包含受保护的应用程序文件'
- en: 'The protected folder contains the following directories:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的文件夹包含以下目录：
- en: '`commands`: Contains customized yiic commands'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commands`: 包含自定义yiic命令'
- en: '`components`: Contains reusable user components'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`components`: 包含可重用的用户组件'
- en: '`config`: Contains configuration files'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`: 包含配置文件'
- en: '`controllers`: Contains controller class files'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controllers`: 包含控制器类文件'
- en: '`data`: Contains the sample database'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`: 包含示例数据库'
- en: '`extensions`: Contains third-party extensions'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extensions`: 包含第三方扩展'
- en: '`messages`: Contains translated messages'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`messages`: 包含翻译后的消息'
- en: '`models`: Contains model class files'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models`: 包含模型类文件'
- en: '`runtime`: Contains temporarily generated files'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runtime`: 包含临时生成的文件'
- en: '`tests`: Contains test scripts'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests`: 包含测试脚本'
- en: '`views`: Contains controller view and layout files'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views`: 包含控制器视图和布局文件'
- en: 'The `views` folder contains the following directories:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`views`文件夹包含以下目录：'
- en: '`layouts`: Contains layout view files'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layouts`: 包含布局视图文件'
- en: '`site`: Contains view files for the site controller'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site`: 包含网站控制器的视图文件'
- en: Quick start – creating an application
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速入门 – 创建应用程序
- en: The Yii website contains, among its wonderful documentation, a tutorial on how
    to build a basic blog application, which is one of the included demos in the framework
    source. It's in **Tutorials** | **The Yii Blog Tutorial** section. The direct
    URL is [http://www.yiiframework.com/doc/blog/](http://www.yiiframework.com/doc/blog/).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Yii网站在其精彩的文档中包含了一个关于如何构建基本博客应用的教程，这是框架源代码中包含的演示之一。它在**教程** | **Yii博客教程**部分。直接链接是[http://www.yiiframework.com/doc/blog/](http://www.yiiframework.com/doc/blog/)。
- en: Let's use this example while we explain the aspects of Yii-based applications.
    We will not repeat the complete example here, of course, because you can read
    it in full on the website.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个例子来解释基于Yii的应用程序方面。当然，我们不会在这里重复完整的示例，因为您可以在网站上完整地阅读它。
- en: Step 1 – planning the workflow
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步 – 规划工作流程
- en: 'When you write a real application, you should start with the requirements regarding
    application functionality. For the blog example, this is described in the Getting
    Started: Requirements Analysis section at the very beginning of the tutorial.
    The direct URL is [http://www.yiiframework.com/doc/blog/1.1/en/start.requirements](http://www.yiiframework.com/doc/blog/1.1/en/start.requirements).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写一个真实的应用程序时，你应该从关于应用程序功能的要求开始。对于博客示例，这在教程的开始部分的“入门：需求分析”部分有描述。直接链接是[http://www.yiiframework.com/doc/blog/1.1/en/start.requirements](http://www.yiiframework.com/doc/blog/1.1/en/start.requirements)。
- en: After you have written all the desired features, you basically start implementing
    them one by one. Of course, in serious software development there's a lot of gotchas
    included, but overall it's the same.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在你编写了所有期望的功能之后，你基本上开始逐个实现它们。当然，在严肃的软件开发中有很多陷阱，但总体上是相同的。
- en: 'The blog example is a database driven application, so we need to prepare a
    database schema beforehand. Here''s what they came up with for the blog demo:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 博客示例是一个数据库驱动应用程序，因此我们需要事先准备一个数据库模式。以下是博客演示中他们提出的方案：
- en: '![Step 1 – planning the workflow](img/1684OS_03_01.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 1 – 规划工作流程](img/1684OS_03_01.jpg)'
- en: This image is a verbatim copy from the blog example demo. Note that there are
    two links missing. The posts table has a `tags` field, which is the storage area
    for tags written in raw and is not a foreign key to the `tags` table. Also, the
    `author` field in `comment` should really be the foreign key to the `user` table.
    Anyways, we'll not cover the actual database generation, but I suggest you do
    it yourself. The blog tutorial at the Yii website has all the relevant instructions
    addressed to total newbies.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图片是直接从example demo博客中复制的。请注意，这里缺少了两个链接。帖子表有一个`tags`字段，它是存储原始标签的区域，而不是`tags`表的键外键。此外，`comment`中的`author`字段实际上应该是`user`表的键外键。无论如何，我们不会涵盖实际的数据库生成，但我建议你自己动手做。Yii网站上的博客教程为完全的新手提供了所有相关说明。
- en: Next in this section, we will see how easy it is with Yii to get a working user
    interface that will be able to manipulate our database.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中接下来，我们将看到使用Yii获取一个能够操作我们数据库的工作用户界面的简单性。
- en: Step 2 – linking to the database from your app
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2 – 从你的应用程序链接到数据库
- en: 'Once you design and physically create the database in some database management
    system like MySQL or maybe SQLite, you are ready to configure your app to point
    to this database. The skeleton app generated by the `./yiic webapp` command needs
    to be configured to point to this database. To do this, you need to set a `db`
    component in the main `config` file located at `protected/config/main.php`. There
    is a section that contains an array of components. Following is the setup for
    a MySQL database located at the same server as the web application itself. You
    will find a commented-out template for this already present when you generate
    your app:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在某个数据库管理系统（如MySQL或SQLite）中设计和物理创建数据库，你就可以配置你的应用程序以指向这个数据库了。由`./yiic webapp`命令生成的骨架应用程序需要配置以指向这个数据库。为此，你需要在位于`protected/config/main.php`的根`config`文件中设置一个`db`组件。这里有一个包含组件数组的部分。以下是在同一服务器上MySQL数据库的设置。当你生成应用程序时，你将找到已经存在的注释模板：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a default component having a `CDbConnection` class and is used by all
    of our ActiveRecord objects which we will create later. As with all application
    components, all configuration parameters correspond to the public properties of
    the component's class;so, you can check the API documentation for details.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个默认组件，包含`CDbConnection`类，并且将被我们稍后创建的所有ActiveRecord对象使用。与所有应用程序组件一样，所有配置参数都对应于组件类的公共属性；因此，你可以查看API文档以获取详细信息。
- en: By the way, you really need to understand more about the main application config.
    Read about it in the *Definitive Guide to Yii* on the official website at **Fundamentals**
    | **Application** | **Application Configuration**. The direct URL is [http://www.yiiframework.com/doc/guide/1.1/en/basics.application#application-configuration](http://www.yiiframework.com/doc/guide/1.1/en/basics.application#application-configuration).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，你真的需要更多地了解主要的应用程序配置。在官方网站的*Yii definitive guide*中阅读有关内容，在**基础** | **应用程序**
    | **应用程序配置**部分。直接链接是[http://www.yiiframework.com/doc/guide/1.1/en/basics.application#application-configuration](http://www.yiiframework.com/doc/guide/1.1/en/basics.application#application-configuration)。
- en: Just remember that all configuration parameters are just properties of the `CWebApplication`
    object, which you can read about in the API documentation; the direct URL is [http://www.yiiframework.com/doc/api/1.1/CWebApplication](http://www.yiiframework.com/doc/api/1.1/CWebApplication).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住，所有配置参数都是 `CWebApplication` 对象的属性，您可以在 API 文档中了解相关信息；直接链接是 [http://www.yiiframework.com/doc/api/1.1/CWebApplication](http://www.yiiframework.com/doc/api/1.1/CWebApplication)。
- en: Step 3 – generating code automatically
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 步 – 自动生成代码
- en: 'Now that we have our app linked up to a fully built database, we can start
    using one of Yii''s greatest features: automatic code generation. To get started,
    there are two types of code generation that are necessary:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将应用链接到了一个完全构建的数据库，我们可以开始使用 Yii 的最大特点之一：自动代码生成。要开始，需要两种类型的代码生成：
- en: Generate a model class based on the tables in your database
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据您数据库中的表生成一个模型类
- en: Run the CRUD generator that takes a model and sets up a corresponding controller
    and a set of views for basic listing, creating, viewing, updating, and deleting
    from the table
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 CRUD 生成器，它接受一个模型并设置相应的控制器以及一组用于基本列表、创建、查看、更新和从表中删除的视图
- en: The console way
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制台方式
- en: There are two ways to go about automatic code generating. Originally, there
    was only the `yiic` tool used earlier to create the skeleton app. For the automatic
    code generation features, you would use the `yiic shell index.php` command, which
    would bring up a command-line interface where you could run subcommands for modeling
    and scaffolding.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 自动代码生成有两种方法。最初，只有 `yiic` 工具被用来创建骨架应用。对于自动代码生成功能，您将使用 `yiic shell index.php`
    命令，这将弹出一个命令行界面，在那里您可以运行用于建模和脚手架的子命令。
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, this is a quick and easy way to perform the `model` and `crud`
    actions. The `model` command produces just two files:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是一个快速简单的方法来执行 `model` 和 `crud` 操作。`model` 命令只生成两个文件：
- en: For your actual model class
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于您的实际模型类
- en: For unit tests
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于单元测试
- en: The `crud` command creates your controller and view files.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`crud` 命令创建您的控制器和视图文件。'
- en: Gii
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gii
- en: Console tools may be the preferred option for some, but for developers who like
    to use graphical tools, there is now a solution for this, called **Gii**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些人来说，控制台工具可能是首选选项，但对于喜欢使用图形工具的开发者，现在有一个解决方案，称为 **Gii**。
- en: 'To use Gii, it is necessary to turn it on in the main `config` file: `protected/config/main.php`.
    You will find the template for it already present, but it is commented out by
    default. Simply uncomment it, set your password, and decide from what hosts it
    may be accessed. The configuration looks like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Gii，需要在主 `config` 文件中将其开启：`protected/config/main.php`。您会找到相应的模板，但默认情况下它是被注释掉的。只需取消注释，设置您的密码，并决定允许哪些主机访问。配置看起来是这样的：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once Gii is configured, it can be accessed by navigating to the app URL with
    `?r=gii` after it, for example, `http://www.example.com/index.php?r=gii`. It will
    begin with a prompt asking for the password set in the `config` file. Once entered,
    it will display a list of generators. If the database is not set in the `config`
    file, you will see an error when you attempt to use one.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Gii 配置完成，您可以通过在应用 URL 后面加上 `?r=gii` 来访问它，例如，`http://www.example.com/index.php?r=gii`。它将开始提示输入在
    `config` 文件中设置的密码。输入后，它将显示生成器的列表。如果数据库未在 `config` 文件中设置，当您尝试使用它时，您将看到一个错误。
- en: The most basic generator in Gii is the model generator. It asks for a table
    name from the database and a name to be used for the `PHP` class.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Gii 中最基本的生成器是模型生成器。它会要求您从数据库中选择一个表名以及用于 `PHP` 类的名称。
- en: 'Note that we can specify a table name prefix, which will be ignored when generating
    the model class name. For instance, the blog demo''s user table is `tbl_user`,
    where the `tbl_` is a prefix. This feature exists to support some setups, especially
    common in shared hosting environments, where a single database holds tables for
    several distinct applications. In such an environment, it''s a common practice
    to prefix something to names of tables to avoid getting into naming conflict and
    to easily find tables relevant to some specific application. So, as these prefixes
    don''t mean anything in the application itself, Gii offers a way to automatically
    ignore them. Model class names are being constructed from the remaining table
    names by the obvious rules:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们可以指定一个表名前缀，当生成模型类名时，这个前缀将被忽略。例如，博客演示的用户表是`tbl_user`，其中`tbl_`是一个前缀。这个特性存在是为了支持某些设置，尤其是在共享主机环境中非常常见，在这种环境中，单个数据库包含几个不同应用的表。在这样的环境中，通常会在表名前加上前缀以避免命名冲突，并便于找到与特定应用相关的表。因此，这些前缀在应用程序本身中没有任何意义，Gii提供了一种自动忽略它们的方法。模型类名是通过明显的规则从剩余的表名构建的：
- en: Underscores are converted to uppercasing the next letter
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下划线被转换为大写字母
- en: The first letter of the class name is being uppercased as well
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类名首字母也被转换为大写
- en: The first step in getting your application off the ground is to generate models
    for all the entity tables in your database. Things such as bridge tables will
    not need models, as they simply relate two entities to one another rather than
    actually being a distinct thing. Bridge tables are being used for generating relations
    between models, expressed in the `relations` method in model class.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的应用程序启动的第一步是为数据库中所有实体表生成模型。像桥接表这样的东西不需要模型，因为它们只是将两个实体相互关联，而不是作为一个独立的事物。桥接表用于在模型之间生成关系，这些关系在模型类的`relations`方法中表达。
- en: For the blog demo, the basic models are User, Post, Comment, Tag, and Lookup.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于博客演示，基本模型有用户（User）、帖子（Post）、评论（Comment）、标签（Tag）和查找（Lookup）。
- en: '![Gii](img/1684OS_03_02.png.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Gii](img/1684OS_03_02.png.jpg)'
- en: The second phase of scaffolding is to generate the CRUD code for each of these
    models. This will create a controller and a series of view templates. The controller
    (for example, `PostController`) will handle routing to actions related to the
    given model. The view files represent everything needed to list and view entities,
    as well as the forms needed to create and update individual entities.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 框架搭建的第二阶段是为这些模型中的每一个生成CRUD代码。这将创建一个控制器和一系列视图模板。控制器（例如，`PostController`）将处理与给定模型相关的路由到操作。视图文件代表列出和查看实体所需的一切，以及创建和更新单个实体所需的表单。
- en: '![Gii](img/1684OS_03_03.png.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Gii](img/1684OS_03_03.png.jpg)'
- en: For all the generators, you will start with a form where you fill in either
    a **Table Name** field for the **Model Generator** page, or a **Model Class**
    field for the **Crud Generator** page. Afterward, you will have to hit the **Preview**
    button, which will show you exactly what files will be created. Finally, you must
    hit the **Generate** button for the actions to take place.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有生成器，你将从一个表单开始，为**模型生成器**页面填写**表名**字段，或者为**CRUD生成器**页面填写**模型类**字段。之后，你必须点击**预览**按钮，这将显示将要创建的文件。最后，你必须点击**生成**按钮以执行操作。
- en: '![Gii](img/1684OS_03_04.png.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Gii](img/1684OS_03_04.png.jpg)'
- en: Step 4 – looking at the components of Yii
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4步 – 查看Yii的组件
- en: So now that you've seen the basics of what is being created here, let's take
    a deeper look at these components.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经看到了这里创建的基本内容，让我们更深入地看看这些组件。
- en: Models
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型
- en: 'Yii''s models are just PHP classes that extend from the `CModel` base class.
    The framework already contains two helper subclasses of `CModel`: `CFormModel`
    and `CActiveRecord`.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Yii的模型只是扩展`CModel`基类的PHP类。框架已经包含了`CModel`的两个辅助子类：`CFormModel`和`CActiveRecord`。
- en: While `CFormModel` is just a semantic wrapper around the concept of a user-submitted
    HTML form, `CActiveRecord` is a complete implementation of an ActiveRecord design
    pattern.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`CFormModel`只是用户提交的HTML表单概念的语义包装，但`CActiveRecord`是一个ActiveRecord设计模式的完整实现。
- en: 'It is a well known and commonly used pattern for database driven applications.
    Yii got a lot of inspiration in this area from the Rails framework for Ruby, which
    has what is widely considered to be one of the best implementations of ActiveRecord.
    As with any other design pattern (even MVC), you can read about it in the definitive
    book *Design Patterns: Elements of Reusable Object-Oriented Software* by Ralph
    Johnson.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种在数据库驱动应用程序中广为人知且常用的模式。Yii 在这个领域从 Ruby 的 Rails 框架中获得了许多灵感，Rails 框架被认为是最优秀的
    ActiveRecord 实现之一。与任何其他设计模式（甚至是 MVC）一样，您可以在 Ralph Johnson 所著的《设计模式：可复用面向对象软件元素》这本书中了解它。
- en: To make things simple, ActiveRecord is an object-oriented pattern that calls
    for a one-to-one mapping of database tables to classes (for example, `tbl_post`
    to `Post` model, `tbl_comment` to `Comment model`). In its original definition,
    ActiveRecord is not really a one-to-one mapping (one class can use any number
    of tables for storing data), but ActiveRecords in Yii work this way.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，ActiveRecord 是一种面向对象的模式，它要求数据库表与类之间进行一对一映射（例如，`tbl_post` 到 `Post` 模型，`tbl_comment`
    到 `Comment` 模型）。在其原始定义中，ActiveRecord 并不是一对一映射（一个类可以使用任意数量的表来存储数据），但 Yii 中的 ActiveRecords
    以这种方式工作。
- en: 'Instances of a model class will have properties that correspond to fields in
    the table, as well as methods that correspond to database transactions, such as
    save, delete, and various lookup options:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 模型类的实例将具有与表中的字段相对应的属性，以及与数据库事务相对应的方法，例如保存、删除和不同的查找选项：
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Almost all of our models will be the ancestors of the `CActiveRecord` class.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎我们所有的模型都将继承自 `CActiveRecord` 类。
- en: In the Yii blog demo, if we look at the `Post` model, we will see that it contains
    rules for each field based on the database constraints. It knows which fields
    are integer or text-based, as well as length and null requirements. These control
    the validations Yii will perform when attempting to save records.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii 博客演示中，如果我们查看 `Post` 模型，我们会看到它包含了基于数据库约束的每个字段的规则。它知道哪些字段是整数或基于文本的，以及长度和空值要求。这些控制着
    Yii 在尝试保存记录时将执行的验证。
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Another important thing that Yii will set up based on the database table is
    any foreign key relationship it finds. For the blog demo, a post will have a single
    author that it belongs to and a number of comments that belong to the `Post`.
    As we can see in the following example, these relationships can be quite sophisticated.
    Just have a look at the official documentation for the `CActiveRecord.relations`
    method ([http://www.yiiframework.com/doc/api/1.1/CActiveRecord#relations-detail](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#relations-detail)).
    The comments have been filtered to only show approved comments and to retrieve
    comments with a particular sort order. Yii also allows statistical relationships,
    so you can get a count of related items such as the count of all the approved
    comments:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 基于数据库表，Yii 还会设置任何它发现的任何外键关系。对于博客演示，一篇文章将有一个属于它的单个作者以及属于 `Post` 的多个评论。正如我们可以在以下示例中看到的那样，这些关系可能相当复杂。只需查看
    `CActiveRecord.relations` 方法的官方文档（[http://www.yiiframework.com/doc/api/1.1/CActiveRecord#relations-detail](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#relations-detail)）。评论已经被过滤，只显示已批准的评论，并检索具有特定排序顺序的评论。Yii
    还允许统计关系，因此您可以获取相关项的计数，例如所有已批准评论的计数：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Beyond rules and relationships, the model defaults to having a section for
    user-friendly labels for attributes, which default to being only slightly cleaner
    than the actual table names, but can be changed to fit your application needs:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 除了规则和关系之外，模型默认有一个用于属性的用户友好标签部分，这些标签默认比实际表名稍微干净一些，但可以根据您的应用程序需求进行更改：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There is also a search method, which is intended for use on list pages.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个搜索方法，它旨在用于列表页面。
- en: Please note that this method is not important to the functionality of the model
    per se; it is just a helper method. It returns an instance of `CDataProvider`,
    which is used by virtually all list and table widgets in Yii; so, the authors
    of the framework decided to include this method in the model being autogenerated
    to further reduce the need to write scaffolding code. The developer can decide
    to feed hand crafted data providers to the widgets or instead use some other helpers.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此方法对模型的功能本身并不重要；它只是一个辅助方法。它返回一个 `CDataProvider` 实例，该实例被 Yii 中几乎所有的列表和表格小部件使用；因此，框架的作者决定将此方法包含在自动生成的模型中，以进一步减少编写脚手架代码的需求。开发者可以选择向小部件提供手工制作的数据提供者，或者使用其他辅助方法。
- en: 'Yii has widgets for displaying and paging through records, such as `CGridView`
    or `CListView`. These will use the search method to create a data provider object
    for this interaction. Again, you can customize the behavior of the way records
    are retrieved with this method. The `Post` model has been set to add some default
    sorting options and ignore some fields:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 提供了用于显示和分页记录的控件，例如 `CGridView` 或 `CListView`。这些控件将使用搜索方法来创建用于此交互的数据提供者对象。同样，您可以使用此方法自定义检索记录的方式的行为。`Post`
    模型已被设置为添加一些默认排序选项并忽略一些字段：
- en: '[PRE11]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Controllers
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器
- en: The job of a controller is to deal with incoming requests, identify the appropriate
    action method, and ultimately render a view to return to the user. When a request
    comes in to Yii, the URL dictates which controller and action has been called
    for. All requests are first handled by the `index.php` file in the root of your
    website. This file starts loading your application by instantiating Yii and referencing
    your configuration file. It then looks at the rest of the URL to determine which
    controller should run. There is a route parameter `r` that is checked. The appropriate
    use is `index.php?r=controller/action`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的任务是处理传入的请求，识别适当的行为方法，并最终渲染视图以返回给用户。当请求到达 Yii 时，URL 决定了哪个控制器和动作被调用。所有请求首先由您网站根目录下的
    `index.php` 文件处理。该文件通过实例化 Yii 并引用您的配置文件来启动加载您的应用程序。然后，它查看 URL 的其余部分以确定哪个控制器应该运行。有一个名为
    `r` 的路由参数被检查。适当的用法是 `index.php?r=controller/action`。
- en: By default, applications generated by the `./yiic webapp` console tool have
    a `SiteController` controller, which handles standard actions such as presenting
    a default homepage or dealing with login/logout actions. This controller will
    be called when you bring up your app without any URL parameters.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，由 `./yiic webapp` 控制台工具生成的应用程序有一个 `SiteController` 控制器，该控制器处理标准动作，例如展示默认主页或处理登录/注销动作。当您不带任何
    URL 参数启动应用程序时，将调用此控制器。
- en: If we elaborate on that, then what is really happening is that when Yii gets
    a request without a controller specified, it will forward this request to the
    controller whose name is set in the `defaultController` configuration parameter
    (see [http://www.yiiframework.com/doc/api/1.1/CWebApplication#defaultController-detail](http://www.yiiframework.com/doc/api/1.1/CWebApplication#defaultController-detail)),
    and it's default value is `site`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进一步阐述，那么实际上发生的情况是，当 Yii 收到未指定控制器的请求时，它将把这个请求转发到在 `defaultController` 配置参数中设置名称的控制器（见
    [http://www.yiiframework.com/doc/api/1.1/CWebApplication#defaultController-detail](http://www.yiiframework.com/doc/api/1.1/CWebApplication#defaultController-detail)），其默认值是
    `site`。
- en: As you probably guessed already, if the request doesn't specify the action,
    then the `defaultAction` will be called. Of course, it's defined not as the global
    configuration parameter but separately in each controller as its class property
    (see [http://www.yiiframework.com/doc/api/1.1/CController#defaultAction-detail](http://www.yiiframework.com/doc/api/1.1/CController#defaultAction-detail)).
    The default value for the `defaultAction` property is `index`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经猜到的，如果请求没有指定动作，则将调用 `defaultAction`。当然，它不是定义为全局配置参数，而是在每个控制器中作为其类属性单独定义的（见
    [http://www.yiiframework.com/doc/api/1.1/CController#defaultAction-detail](http://www.yiiframework.com/doc/api/1.1/CController#defaultAction-detail)）。`defaultAction`
    属性的默认值是 `index`。
- en: 'So, since site/index is the default behavior when no `r` parameter is given,
    going to `www.yoursite.com` is the equivalent of going to `www.yoursite.com/index.php?r=site/index`.
    By default, with a model such as `Post`, you would expect to see routes like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，由于在未提供 `r` 参数的情况下，site/index 是默认行为，所以访问 `www.yoursite.com` 等同于访问 `www.yoursite.com/index.php?r=site/index`。默认情况下，对于
    `Post` 这样的模型，您可能会看到这样的路由：
- en: '`www.yoursite.com/index.php?r=post/index`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`www.yoursite.com/index.php?r=post/index`'
- en: '`www.yoursite.com/index.php?r=post/create`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`www.yoursite.com/index.php?r=post/create`'
- en: …and so on.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: …等等。
- en: You can see that the actual blog demo does not follow this pattern though. Instead,
    its paths look like `www.yoursite.com/posts` and `www.yoursite.com/post/create`.
    Ultimately, you can make any kind of custom URLs with Yii. Later in this book,
    we will look at ways to change the way your URL looks, which are cleaner, but
    still resolve to the same thing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，实际的博客演示并不遵循这个模式。相反，它的路径看起来像 `www.yoursite.com/posts` 和 `www.yoursite.com/post/create`。最终，您可以使用
    Yii 创建任何类型的自定义 URL。在本书的后续部分，我们将探讨更改 URL 观看方式的方法，这些方法更干净，但仍然指向相同的内容。
- en: 'If you take a look at one of your controller files in `protected/controllers/`,
    you will see that it has a number of methods that look like: `actionCreate`, `actionIndex`,
    `actionUpdate`, and so on. The second half of these names correspond to the action
    that would be in the URL. For example, in `PostController`, `actionCreate` corresponds
    to the URL `index.php?r=post/create`. The view and update actions expect an additional
    parameter for the ID of the specified entity. By default, this URL would look
    like `index.php?r=post/view&id=1`, where `1` is the primary key ID of a single
    post.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看一下`protected/controllers/`中的一个控制器文件，你会看到它包含一些看起来像这样的方法：`actionCreate`、`actionIndex`、`actionUpdate`等等。这些名称的后半部分对应于URL中将要出现的操作。例如，在`PostController`中，`actionCreate`对应于URL
    `index.php?r=post/create`。视图和更新操作期望一个额外的参数，用于指定实体的ID。默认情况下，这个URL看起来像这样：`index.php?r=post/view&id=1`，其中`1`是单个帖子的主键ID。
- en: All of this means that `actionLogin`, `actionLogout`, and other actions generated
    for you by Gii in `SiteController` are just example scaffolding, and if you need
    to, you can make a completely different structure of controllers and actions.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都意味着`actionLogin`、`actionLogout`以及Gii在`SiteController`为你生成的其他操作只是示例脚手架，如果你需要的话，你可以创建一个完全不同的控制器和操作结构。
- en: To better understand how these actions work, let us examine a couple of actions
    in detail. For most entities, one of the simplest actions is to view a single
    item, because it does only one thing, which is to respond to GET requests and
    show the view template. Other actions are more complicated due to the fact they
    can respond to GET or POST actions. For example, update will simply return the
    form if the method is GET, but when you post data to this same action, it attempts
    to save the item and redirect you to the view screen.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这些操作是如何工作的，让我们详细检查几个操作。对于大多数实体来说，最简单的操作之一是查看单个项目，因为它只做一件事，即响应GET请求并显示视图模板。其他操作更复杂，因为它们可以响应GET或POST操作。例如，如果方法是GET，更新操作将简单地返回表单，但是当你向这个相同的操作提交数据时，它尝试保存项目并重定向到你到视图屏幕。
- en: '[PRE12]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'What the preceding code does is that it starts by running the `loadModel()`
    method, which is found at the bottom of the controller code. This method looks
    for a URL parameter called `id` and does a lookup using ActiveRecord methods.
    It throws the 404 exception if it fails to find a corresponding record, which
    is appropriate since 404 is generally used for Page-Not-Found situations:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码所做的首先是运行`loadModel()`方法，该方法位于控制器代码的底部。这个方法寻找一个名为`id`的URL参数，并使用ActiveRecord方法进行查找。如果找不到相应的记录，它将抛出404异常，这是合适的，因为404通常用于页面找不到的情况：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If a model is found, the action method continues and all it has left to do
    is pass that model on to the view with the render function:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到了模型，操作方法将继续，并且它剩下的唯一事情就是使用渲染函数将模型传递给视图：
- en: '[PRE14]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The Update action, unlike View, does two things. It will respond to both HTTP
    GET and POST requests. The middle section of the function pertains only to the
    condition of receiving a POST, so it will be skipped over. In the case of a regular
    GET, this looks identical to how the View behaves; it simply loads the model based
    on an expected ID parameter and renders a view file with that model. The interesting
    part is when you post the form contained on the Update view back to this action.
    In that case, the old model state is loaded, then its attributes are overwritten
    with values from the `$_POST` array, which contains the form body from the HTML.
    On the condition that this saves without violating any validation or rules set
    in the model class, the request is then forwarded to the View page, so see the
    newly-saved version of the item. If for some reason the save method fails, the
    code will fall through and render the Update form again. The only difference here
    is that since the model failed to save, it now contains information about the
    reasons why it has failed. `$model->getErrors()` will return an array of problems
    that prevented the save from succeeding. When the Update form is rendered again,
    these errors will appear at the top of the form, making it simple for the user
    to correct their mistakes.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 与查看（View）操作不同，更新（Update）操作执行两项任务。它将响应 HTTP GET 和 POST 请求。函数的中间部分仅与接收 POST 请求的条件相关，因此将被跳过。在常规
    GET 请求的情况下，这看起来与查看的行为相同；它只是根据预期的 ID 参数加载模型，并使用该模型渲染一个视图文件。有趣的部分在于当你将更新视图中的表单提交回此操作时。在这种情况下，将加载旧模型状态，然后其属性将被
    `$_POST` 数组中的值覆盖，该数组包含来自 HTML 表单的主体。在没有任何验证或模型类中设置的规则违反的情况下保存，请求随后将被转发到视图页面，以便查看新保存的项目版本。如果由于某种原因保存方法失败，代码将跳过并再次渲染更新表单。这里唯一的区别是，由于模型未能保存，它现在包含有关失败原因的信息。`$model->getErrors()`
    将返回一个数组，其中包含阻止保存成功的错误。当再次渲染更新表单时，这些错误将出现在表单的顶部，使用户能够轻松纠正错误。
- en: Views
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图
- en: 'Yii''s views are typically put together with at least two parts. There is a
    main site `layout.php` view, which is a wrapper for different views when the controller''s
    `render` method is called. The benefit of this is that your overall site design
    is contained in one place and individual views only need to consist of the relevant
    content for the body of the page. You can also have more than one standard layout
    such as a two or a three column format. You can also have a layout included in
    another layout, by means of the `beginContent` method; see [http://www.yiiframework.com/doc/api/1.1/CBaseController#beginContent-detail](http://www.yiiframework.com/doc/api/1.1/CBaseController#beginContent-detail).
    You''ll find the layout file in `views/layouts`. You can also have a different
    layout assigned to different controllers; see [http://www.yiiframework.com/doc/api/1.1/CController#layout-detail](http://www.yiiframework.com/doc/api/1.1/CController#layout-detail).
    All other views should be contained within a folder that corresponds to the controller
    they belong to. By default, there are just two folders: `layouts` and `site`.
    For each additional model, your CRUD will create another folder.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 的视图通常由至少两个部分组成。有一个主站 `layout.php` 视图，当调用控制器的 `render` 方法时，它是一个不同视图的包装器。这种做法的好处是，您的整体站点设计包含在一个地方，而单个视图只需要包含页面主体的相关内容。您还可以拥有一个或多个标准布局，例如两列或三列格式。您还可以通过
    `beginContent` 方法在另一个布局中包含布局；请参阅 [http://www.yiiframework.com/doc/api/1.1/CBaseController#beginContent-detail](http://www.yiiframework.com/doc/api/1.1/CBaseController#beginContent-detail)。您可以在
    `views/layouts` 中找到布局文件。您还可以为不同的控制器分配不同的布局；请参阅 [http://www.yiiframework.com/doc/api/1.1/CController#layout-detail](http://www.yiiframework.com/doc/api/1.1/CController#layout-detail)。所有其他视图都应该包含在与它们所属的控制器对应的文件夹中。默认情况下，只有两个文件夹：`layouts`
    和 `site`。对于每个额外的模型，您的 CRUD 将创建另一个文件夹。
- en: Recap
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 概述
- en: At this point, we have talked about our database design and how to automatically
    generate ActiveRecord models for each of our important or entity-class tables.
    Then, we created controllers and views with the CRUD generator. At this point,
    we should have a basic database interface. Unfortunately, that's not quite a full-blown
    web application, because we are not writing the user interface for database administration
    here, but instead we are building a blog. We'll cover a lot of great features
    further on in this book, but one more really important step in getting started
    is to alter the authentication process to use your actual users table/model.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了我们的数据库设计以及如何为每个重要的或实体类表自动生成ActiveRecord模型。然后，我们使用CRUD生成器创建了控制器和视图。在这个阶段，我们应该有一个基本的数据库接口。不幸的是，这还不是一个完整的Web应用程序，因为我们没有编写数据库管理的用户界面，而是在构建一个博客。在这本书的后面，我们将介绍很多很棒的功能，但开始时一个非常重要的步骤是将认证过程更改为使用实际的用户表/模型。
- en: User authentication
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户认证
- en: 'Now that the database is configured, one of the first steps you''ll want to
    take is to make the site use your users table for authentication. The control
    for this is contained within the file `protected/components/UserIdentity.php`.
    By default, this file has two hard-coded user account/password combinations. Replace
    the content of this file with the following code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据库已经配置好了，你想要采取的第一个步骤之一就是让网站使用你的用户表进行认证。这个控制功能包含在文件`protected/components/UserIdentity.php`中。默认情况下，这个文件有两个硬编码的用户账户/密码组合。用以下代码替换这个文件的内容：
- en: '[PRE15]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'What you see in here is pretty standard code to authenticate users by login/password
    pairs stored in the database. If you follow the code, which is intimidating only
    at first glance, you see that it does the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里看到的是标准的代码，用于通过存储在数据库中的登录/密码对来认证用户。如果你跟随代码，它最初看起来可能有些令人畏惧，但你很快会发现它执行以下操作：
- en: Tries to find in the DB the record about user having the username specified.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在数据库中查找具有指定用户名的用户记录。
- en: If no user with this username is recorded, it sets the error code to `ERROR_USERNAME_INVALID`
    and proceeds to the end of the procedure.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有记录具有此用户名的用户，它将错误代码设置为`ERROR_USERNAME_INVALID`并继续执行程序的末尾。
- en: If the user exists, validate password specified using whichever method is defined
    for validation in the user model.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户存在，使用用户模型中定义的验证方法验证指定的密码。
- en: If validation is unsuccessful, set error code to `ERROR_PASSWORD_INVALID` and
    proceed to the end of the procedure.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果验证失败，将错误代码设置为`ERROR_PASSWORD_INVALID`并继续执行程序的末尾。
- en: If validation is successful, set the error code to `ERROR_NONE` and proceed
    to the end of the procedure.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果验证成功，将错误代码设置为`ERROR_NONE`并继续执行程序的末尾。
- en: The user is authenticated if the error code is `ERROR_NONE`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户认证成功，如果错误代码是`ERROR_NONE`。
- en: 'Note the highlighted line in the code. It means that we need to modify the
    user model as well. Put the two following functions into it:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意代码中高亮的那一行。这意味着我们需要修改用户模型。将以下两个函数放入其中：
- en: '[PRE16]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The function named `validatePassword`, as we already saw, was used in the authentication
    process. The function named `hashPassword` should be used when the new user model
    is saved to the database.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，名为`validatePassword`的函数已在认证过程中使用。当新的用户模型保存到数据库时，应使用名为`hashPassword`的函数。
- en: 'The idea is as follows: we do not store whole passwords as plain text. We hash
    them using the built-in PHP function `crypt` and store these hashes instead. The
    implementation of `crypt` has a very important and useful property. When we pass
    it the desired password as the first argument, and the already made hash of the
    same password as the second argument (which is the *salt* of the encryption),
    it produces the same hash as provided as the second argument. This property is
    exactly what is used in the `validatePassword()` function.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '理念是这样的：我们不存储整个密码的明文。我们使用内置的PHP函数`crypt`对密码进行散列，并存储这些散列值。`crypt`的实现有一个非常重要且有用的特性。当我们传递给它作为第一个参数的期望密码，以及作为第二个参数的相同密码的已制作散列（这是加密的*盐*），它会生成与第二个参数相同的散列。这个特性正是`validatePassword()`函数所使用的。 '
- en: 'OK, now about what is the salt. For our purposes, you can just think of salt
    as a special string that tells `crypt` how exactly to encrypt the string provided.
    The exact rules are written in the official PHP documentation for `crypt`, accessible
    on the website here: [http://www.php.net/manual/en/function.crypt.php](http://www.php.net/manual/en/function.crypt.php).'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在关于盐的具体内容。对我们来说，你可以将盐视为一个特殊的字符串，它告诉`crypt`如何确切地加密提供的字符串。确切规则写在官方PHP文档的`crypt`函数中，可以在以下网站上找到：[http://www.php.net/manual/en/function.crypt.php](http://www.php.net/manual/en/function.crypt.php)。
- en: 'So, there''s still a `generateSalt` function that needs to be implemented.
    You can just use the following implementation verbatim:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，仍然需要一个需要实现的`generateSalt`函数。你可以直接使用以下实现：
- en: '[PRE17]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This way you have the complete implementation of user authentication made using
    the current best practices in this field.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你就有了使用当前该领域最佳实践完成的用户认证的完整实现。
- en: You should note, though, the precise reasons for this implementation.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你应该注意这种实现的精确原因。
- en: First of all, we don't store the passwords as the user entered them. This is
    a security precaution in case the password database will be accessed by a malicious
    user.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们不存储用户输入的密码。这是为了安全起见，以防密码数据库被恶意用户访问。
- en: Secondly, we use a pretty hardcore Blowfish algorithm, which is very, very slow
    to run. This is a second precaution in case the malicious user tries to guess
    the passwords using brute force, for example, encrypting some arbitrary strings
    the same way we did and comparing the result with the values in our database.
    If we used something fast, such as the MD5 algorithm, then it would be a lot easier
    on modern high-performance hardware.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们使用相当硬核的Blowfish算法，运行速度非常慢。这是第二个预防措施，以防恶意用户尝试使用暴力破解法猜测密码，例如，以我们相同的方式加密一些任意的字符串，并将结果与数据库中的值进行比较。如果我们使用像MD5这样的快速算法，那么在现代高性能硬件上就会容易得多。
- en: You probably want to look at the detailed description of what's going on here
    on the relevant tutorial at the Yii website. This particular authentication scheme
    is described on the blog demo at **Initial Prototyping** | **Authenticating User**.
    The direct URL is [http://www.yiiframework.com/doc/blog/1.1/en/prototype.auth](http://www.yiiframework.com/doc/blog/1.1/en/prototype.auth).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想查看Yii网站上相关教程的详细描述，了解这里正在发生的事情。这个特定的认证方案在**初始原型** | **用户认证**的博客演示中描述。直接链接是[http://www.yiiframework.com/doc/blog/1.1/en/prototype.auth](http://www.yiiframework.com/doc/blog/1.1/en/prototype.auth)。
- en: Top 5 features you need to know about
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要了解的前5个功能
- en: As we saw in the previous section, it's easy to quickly set up forms and views
    for the basic CRUD operations. However, if you look more closely, you'll find
    that every form element is either a text box or a text area. That's fine for fields
    such as `Title` and `Body`, but not for other things such as foreign key relationships,
    date fields, and values for which you might want to use a more specialized widget,
    such as a slider. These alternative input choices are vital, because you obviously
    can't expect your users to set something like the category ID for a post by knowing
    the primary key of the category they want, or the exact date format you want to
    use.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，快速设置基本CRUD操作的形式和视图很容易。然而，如果你更仔细地看，你会发现每个表单元素要么是文本框，要么是文本区域。这对于像`标题`和`正文`这样的字段来说是可以的，但不适用于其他事物，例如外键关系、日期字段，或者你可能想要使用更专业的小部件（如滑块）的值。这些替代输入选项至关重要，因为你显然不能期望你的用户通过知道他们想要的类别的主键来设置帖子的类别ID，或者你想要使用的确切日期格式。
- en: Basic security considerations
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本安全考虑
- en: 'For displaying user data, run it through the `CHtmlPurifier` filter:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对于显示用户数据，运行它通过`CHtmlPurifier`过滤器：
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When receiving user input, the easiest way to use it on a single field is illustrated
    as follows, and we will revisit this topic in the following section:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收用户输入时，在单个字段上使用它的最简单方法如下所示，我们将在下一节中重新讨论这个话题：
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The CSRF option goes into the components section of the `main.php` config file:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF选项进入`main.php`配置文件的组件部分：
- en: '[PRE20]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Form components – CHtml, CActiveForm, and Zii
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单组件 – CHtml, CActiveForm, 和 Zii
- en: '`CHtml` is the basic helper class to output HTML tags. `CActiveForm` was added
    later to make it even easier to set up forms and bind model properties to input
    elements. Additionally, `CHtml` and `CActiveForm` contain a number of useful helper
    functions. Zii is a set of widgets for things such as menus, lists, and grid elements.
    Zii also provides wrappers for jQuery UI widgets such as Accordion, DatePicker,
    ProgressBar, Slider, Tabs, and so on. Let''s take a look at how we can use these
    items to enhance CRUD forms.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHtml` 是输出 HTML 标签的基本辅助类。后来添加了 `CActiveForm` 以使其设置表单和将模型属性绑定到输入元素变得更加容易。此外，`CHtml`
    和 `CActiveForm` 包含许多有用的辅助函数。Zii 是一组用于菜单、列表和网格元素等内容的控件。Zii 还提供了 jQuery UI 控件（如
    Accordion、DatePicker、ProgressBar、Slider、Tabs 等）的包装器。让我们看看我们如何使用这些项目来增强 CRUD 表单。'
- en: The core form created by the CRUD generator (`_form.php`) will be used by both
    the Create and Update actions. In the `views/{controller}/` directory, you will
    find `create.php`, `update.php`, and `_form.php`. The Create and Update actions
    render `create.php` and `update.php` respectively, but what you will notice is
    that each of these is really just a wrapper for `_form.php`. Inside, they both
    contain a `renderPartial()` call, which pass the model to the `_form.php` view.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD 生成器创建的核心表单（`_form.php`）将被创建和更新操作使用。在 `views/{controller}/` 目录中，您将找到 `create.php`、`update.php`
    和 `_form.php`。创建和更新操作分别渲染 `create.php` 和 `update.php`，但您会注意到这些实际上都是 `_form.php`
    的包装器。在内部，它们都包含一个 `renderPartial()` 调用，该调用将模型传递给 `_form.php` 视图。
- en: Whereas `render()` incorporates the site layout, `renderPartial()` only produces
    the content of the specified template.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `render()` 包含了站点布局，`renderPartial()` 只生成指定模板的内容。
- en: This is something to keep in mind while building your forms. You can use `renderPartial`
    to separate out pieces of templates should you need to reuse them in multiple
    views, or if you wish to reduce the size of your individual view files.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建表单时，请注意这一点。如果您需要在不同视图中重复使用模板，或者希望减小单个视图文件的大小，可以使用 `renderPartial` 来分离模板的各个部分。
- en: Another useful tip when working with `_form.php` is to know whether or not you
    are on the Create or Update view. This determination can be easily made by checking
    the model property `isNewRecord`, as you will find they have done with the form
    submit button. This button will display different text based on whether you are
    adding a new item or saving changes to an existing one.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 `_form.php` 一起工作时，另一个有用的提示是了解您是否处于创建或更新视图。这个判断可以通过检查模型属性 `isNewRecord` 来轻松完成，正如您将在表单提交按钮中看到的那样。根据您是添加新项目还是保存现有项目的更改，此按钮将显示不同的文本。
- en: '[PRE21]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'So, let''s say we have a simple blog system. Our posts only have `Title` and
    `Content` objects, but then we might also want a foreign key relationship to a
    category entity. The category CRUD form is simple if we only want a category name
    (and a primary key ID for referencing). This form will be generated ready to go
    out of the box, because all we need is a single text box for a category name.
    The heart of the category form would look like this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个简单的博客系统。我们的帖子只有 `标题` 和 `内容` 对象，但我们可能还希望与分类实体有一个外键关系。如果我们只想有一个分类名称（以及一个用于引用的主键
    ID），那么这个分类 CRUD 表单很简单。这个表单将直接生成，因为我们只需要一个用于分类名称的单行文本框。分类表单的核心将看起来像这样：
- en: '[PRE22]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Yii is smart enough to know that a primary key doesn't show up as a form element,
    so there's only one field in the form. We can use this CRUD immediately to populate
    a few categories for use on the POST form.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 足够智能，知道主键不会显示为表单元素，因此表单中只有一个字段。我们可以立即使用这个 CRUD 来填充一些分类，用于 POST 表单。
- en: Moving on to the POST form, we'll probably want to use an HTML `select` element
    for this, unless there are only two or three, where radio buttons might make more
    sense.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 POST 表单，我们可能会想使用 HTML 的 `select` 元素，除非只有两个或三个选项，这时单选按钮可能更合适。
- en: 'Here''s what the POST form looks like by default:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，POST 表单看起来是这样的：
- en: '[PRE23]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Notice how the first row is only using `textField` for category ID (`category_id`).
    This is what we want to fix.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 注意第一行只使用了 `textField` 来表示分类 ID (`category_id`)。这正是我们需要修复的。
- en: You can use `CHtml` or `CActiveForm` to accomplish this, but as long as the
    option is available in `CActiveForm`, that is what we should use. The change is
    simple. In essence, all you need to do is swap `$form->textField` with `$form->dropDownList`.
    However, that's not quite enough. A drop-down list requires just a little bit
    more information. It would be safe enough for Yii to assume you want the primary
    key of the related model, but it has no way to know what field is the actual display
    field. Here's where we use one of the static `CHtml` helper methods to set up
    an associated array of keys and values to be used in the building of the select
    options.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`CHtml`或`CActiveForm`来完成此操作，但只要`CActiveForm`中提供了该选项，我们就应该使用它。更改很简单。本质上，您只需要将`$form->textField`与`$form->dropDownList`进行交换。然而，这还不够。下拉列表需要一点更多信息。对于Yii来说，假设您想要相关模型的键值是安全的，但它无法知道哪个字段是实际显示字段。这就是我们使用静态`CHtml`辅助方法来设置关联数组的键和值，用于构建选择选项的地方。
- en: 'The final product looks like the following code:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最终产品如下所示：
- en: '[PRE24]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`CHtml::listData` expects an array of models. It doesn''t matter how this is
    retrieved. If you need to filter these items, you may do so before passing the
    final result to this call. The next two parameters are the key and display values
    to be used for each option.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHtml::listData`期望一个模型数组。这无关紧要是如何检索的。如果您需要过滤这些项，您可以在将最终结果传递给此调用之前进行。接下来的两个参数是每个选项要使用的键和显示值。'
- en: 'Now, the form should show a nice, clean select box showing all the available
    categories:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，表单应该显示一个整洁的、包含所有可用分类的选框：
- en: '![Form components – CHtml, CActiveForm, and Zii](img/1684OS_04_1.png.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![表单组件 – CHtml, CActiveForm, 和 Zii](img/1684OS_04_1.png.jpg)'
- en: 'For the sake of argument, let''s assume our posts can have a publish date field
    that we might use to prevent items from showing up on the list until the desired
    date. By default, this would show up as `textField`, just like the category ID.
    Replacing it with the Zii wrapper of the jQuery UI DatePicker, aptly named `CJuiDatePicker`,
    would look like the following code:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了论证，让我们假设我们的帖子可以有一个发布日期字段，我们可以使用它来防止项目在期望日期之前显示在列表中。默认情况下，这将显示为`textField`，就像分类ID一样。将其替换为jQuery
    UI DatePicker的Zii包装器，命名为`CJuiDatePicker`，代码如下：
- en: '[PRE25]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you want to follow the ActiveForm style, you must specify the `model` and
    `attribute` options as shown in the preceding code. To simply pass a date value
    with your form, replace the model and attribute with a name value that will correspond
    to the input name.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想遵循ActiveForm样式，您必须指定如前述代码所示的`model`和`attribute`选项。为了简单地将日期值与表单一起传递，将模型和属性替换为与输入名称相对应的名称值。
- en: Unfortunately, we're not quite done with the `date` field here. Dates are always
    a tricky subject on the web. Odds are, the default format that the picker gives
    you isn't the way your database will want to store it, or maybe it's not the display
    style desired for your applications. In most cases, you will need to address this
    on the server side when receiving posted values and when pushing dates out.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们在这里还没有完成`date`字段的设置。在网络上，日期总是个棘手的话题。很可能会出现的情况是，选择器提供的默认格式不是数据库想要存储的格式，或者它可能不是您应用程序所需的显示样式。在大多数情况下，您需要在服务器端处理这个问题，即在接收已提交的值和推送日期时。
- en: As far as displaying different date formats, this can easily be handled by adding
    the `dateFormat` element to the options array. For example, the default would
    be `03/16/2013` (the day this sentence was written). The date format for this
    is `mm/dd/yy`. If you don't want two column values for single digits and just
    the last two digits for the year, use `m/d/y`. Or, if you want something that
    looks like the MySQL date format, use `yy-mm-dd`. That will take care of the value
    you see when selecting something from the picker.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 至于显示不同的日期格式，这可以通过向选项数组中添加`dateFormat`元素来轻松处理。例如，默认值将是`03/16/2013`（本句撰写时的日期）。这个日期格式是`mm/dd/yy`。如果您不希望单数字值占用两列，而只使用年份的最后两位，请使用`m/d/y`。或者，如果您想要类似MySQL日期格式的样式，请使用`yy-mm-dd`。这将处理从选择器中选择时看到的值。
- en: 'The specification that Yii uses for date formats is described here: [http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns](http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns).
    This is mentioned in the documentation for the `CDateFormatter` class.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Yii使用的日期格式规范在此处描述：[http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns](http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns)。这在`CDateFormatter`类的文档中也有提及。
- en: However, two problems remain.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然有两个问题存在。
- en: If you're not following the exact MySQL format, you'll want to reformat the
    date on the server side after a post. You would want to do this anyway, just to
    be safe, since users can still type in the field and post their own values.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有遵循确切的 MySQL 格式，你希望在帖子后端在服务器端重新格式化日期。你无论如何都应该这样做，以确保用户仍然可以输入字段并提交他们自己的值。
- en: There are two places where this will need to be addressed, because this form
    can be posted in two different ways, as discussed before—on Create and Update,
    so the date translation will have to be added to `actionCreate` and `actionUpdate`.
    In either case, the code is the same. After you get into the `if(isset($_POST)){}`
    block, you can expect this field might be filled out.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要解决两个地方，因为这种表单可以以两种不同的方式提交，如前所述——在创建和更新时，因此日期转换必须添加到 `actionCreate` 和 `actionUpdate`。在任何情况下，代码都是相同的。在你进入
    `if(isset($_POST)){}` 块之后，你可以预期这个字段可能已经被填写。
- en: 'Use the PHP `date` function along with the string-to-time function to fix whatever
    value you received:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PHP 的 `date` 函数和字符串转时间函数来修正你接收到的任何值：
- en: '[PRE26]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The second issue with dates that you will need to address is relevant on any
    views that show this field. This could be the update form, where you would want
    the field prepopulated with the display style date format, or the view and list
    screens. The easiest way to address this is to change it before you render the
    views. For example, the View action looks like this by default:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要解决的日期的第二个问题是与显示此字段的任何视图相关。这可能是一个更新表单，你希望字段以显示日期格式预先填充，或者是视图和列表屏幕。解决这个问题的最简单方法是，在渲染视图之前更改它。例如，默认的视图操作如下所示：
- en: '[PRE27]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We''ll need to change the model before calling the render method, so we have
    to rearrange this a little bit while adding our date format fix. Something like
    this should do the trick:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用渲染方法之前，我们需要更改模型，因此我们必须在添加日期格式修复的同时稍微调整一下。类似以下的内容应该可以解决问题：
- en: '[PRE28]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This is essentially the same process we did for saving the posted value, just
    in reverse.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是我们保存提交值所执行的过程，只是方向相反。
- en: 'Note that you can put this logic for reformatting the date on a deeper level
    into the model code. Each Yii model has a pair of special methods, `afterFind`
    and `beforeSave`, which are fired by Yii automatically right after the model is
    populated with data from the database or just before saving the updated data to
    the database respectively. Utilizing these methods, you will not need to modify
    the `actionView` method at all, instead you''ll need to add the following to the
    code of your post model:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可以将这个用于重新格式化日期的逻辑放在模型代码的更深层。每个 Yii 模型都有成对的特殊方法，`afterFind` 和 `beforeSave`，它们分别在模型从数据库中填充数据后或即将将更新数据保存到数据库时由
    Yii 自动触发。利用这些方法，你根本不需要修改 `actionView` 方法，相反，你需要在你的帖子模型代码中添加以下内容：
- en: '[PRE29]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Of course, this has a catch. After you set up these two handlers, you will always
    convert your dates, even if you don't want or need to. When the conversion is
    at the hands of a controller, it can decide whether or not to do it.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里有一个问题。在你设置这两个处理器之后，你将始终转换你的日期，即使你不想或不需要这样做。当转换由控制器执行时，它可以决定是否执行转换。
- en: Adding custom views
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加自定义视图
- en: Now that we've covered the basics of how the CRUD forms work, it's time to take
    a look at building more specialized interfaces. Unless you're strictly making
    a database application, odds are the basic CRUD functionality isn't going to be
    enough. There are a couple of ways to go about this. Every page needs to be an
    action within a controller, but controllers do not need to be tied specifically
    into a specific model. Whether or not you work within an existing controller or
    not depends on whether the new view really applies to an entity.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了 CRUD 表单的基本工作原理，是时候看看如何构建更专业的界面了。除非你严格地制作一个数据库应用程序，否则基本 CRUD 功能可能不足以满足需求。有几种方法可以做到这一点。每个页面都需要在控制器中作为一个操作，但控制器不需要与特定模型紧密绑定。你是否在现有控制器中工作取决于新的视图是否真正适用于一个实体。
- en: For example, if you allow users to submit posts that enter a pending state and
    must be approved by an administrator before being published, you might want a
    page that lists these pending posts and that has buttons for viewing and approving
    them. Something like this makes sense to keep within the `PostController`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你允许用户提交进入待处理状态的帖子，并且必须在发布之前由管理员批准，你可能想要一个列出这些待处理帖子并具有查看和批准按钮的页面。将这样的页面保持在
    `PostController` 中是有意义的。
- en: There are a few things to cover before we dig too far into this process. If
    we're adding an approved field to our `Post` model, it will show up on the `_form.php`
    file by default. We will want to hide it from non-administrator users, as well
    as use a checkbox input element instead of the text field it will insert by default.
    Since we haven't yet talked about using proper user access roles, we will rely
    on the standard Yii user accounts for permissions on this field. Later in this
    section, we will return to this example with proper role-based access checking.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨这个流程之前，有一些事情需要说明。如果我们向我们的`Post`模型添加一个已批准的字段，它将默认显示在`_form.php`文件中。我们希望将其从非管理员用户那里隐藏，并使用复选框输入元素来代替默认插入的文本字段。由于我们还没有讨论过使用适当的用户访问角色，我们将依靠标准的Yii用户账户来管理这个字段的权限。在本节稍后，我们将回到这个例子，并使用基于角色的访问检查。
- en: In MySQL, you can set up the approved field as `approved tinyint(1) default
    0`. That way, when not showing this field to non-administrator users, the posts
    will default to 0 (unapproved). Also, when changing the input field to a checkbox,
    it will work with values of 0 and 1.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，你可以将已批准字段设置为`approved tinyint(1) default 0`。这样，当不向非管理员用户显示此字段时，帖子将默认为0（未批准）。此外，当将输入字段更改为复选框时，它将使用0和1的值。
- en: '[PRE30]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: By default, `PostController` contains an index page, which is a general, pageable
    list. To create a page that only deals with a particular type of post, we start
    by adding a new action to the `PostController`. Assuming our `Post` model also
    contains an approved property, we can use this to generate a filtered list of
    models to pass to the a pending view template.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`PostController`包含一个索引页面，这是一个通用、可分页的列表。要创建仅处理特定类型帖子的页面，我们首先向`PostController`添加一个新操作。假设我们的`Post`模型也包含一个已批准属性，我们可以使用这个属性来生成传递给待处理视图模板的模型过滤列表。
- en: In `PostController`, if we want this list to look like the index list but with
    a filter, the easiest thing to do is to copy the index action, rename it, and
    add some filtering. We can even use the same view script, but it's best to copy
    this over as well. So, `protected/views/post/index.php` should be copied to `protected/views/post/pending.php`.
    These views have breadcrumb and menu options that you may wish to have look different,
    so it makes the most sense to keep these files different.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PostController`中，如果我们想让这个列表看起来像索引列表但带有过滤器，最简单的方法是复制索引操作，重命名它，并添加一些过滤。我们甚至可以使用相同的视图脚本，但最好也复制这个脚本。因此，`protected/views/post/index.php`应该复制到`protected/views/post/pending.php`。这些视图有面包屑和菜单选项，你可能希望它们看起来不同，所以保持这些文件不同是最有意义的。
- en: '[PRE31]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The view template, in this case, is making use of a Zii widget called `CListView`,
    which makes use of `CActiveDataProvider` to get relevant models and to handle
    things like paging automatically. On the view template, it looks like this:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，视图模板正在使用一个名为`CListView`的Zii小部件，该小部件使用`CActiveDataProvider`获取相关模型，并自动处理诸如分页等问题。在视图模板中，它看起来像这样：
- en: '[PRE32]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Each item is then rendered via the `_view.php` template, which can be altered
    or duplicated to fit the needs of each different content type. By default, Yii
    views are very plain and generally only list properties in rows or tables. Even
    the actual `view.php` template, which is used by `actionView` to show a single
    entity, merely displays each field in an HTML table.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 然后每个项目都通过`_view.php`模板进行渲染，该模板可以根据不同内容类型的需求进行修改或复制。默认情况下，Yii视图非常简单，通常只按行或表格列出属性。即使是实际用于通过`actionView`显示单个实体的`view.php`模板，也只是在HTML表中显示每个字段。
- en: For listing rows of records with action buttons, the admin interface has a much
    better display. Instead of `CListView`, it uses `CGridView`. It also provides
    the ability to search on fields (columns in the display table), as well as possessing
    a more sophisticated advanced search form.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于带有操作按钮的记录行列表，管理员界面有更好的显示效果。它使用`CGridView`而不是`CListView`，而不是`CListView`。它还提供了在字段（显示表中的列）上搜索的能力，以及一个更复杂的先进搜索表单。
- en: '[PRE33]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Let's assume you're not concerned with the advanced search for the pending posts
    view. We can copy the `admin.php` script over to `pending.php` (instead of copying
    `index.php` to `pending.php` as mentioned previously). This action uses the `$model->search()`
    method to get the DataProvider for this widget. For now, we can ignore that piece.
    We'll return to it later.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你并不关心待处理帖子视图的高级搜索。我们可以将`admin.php`脚本复制到`pending.php`（而不是像之前提到的那样将`index.php`复制到`pending.php`）。此操作使用`$model->search()`方法获取此小部件的数据提供程序。目前，我们可以忽略这部分。我们稍后会回到它。
- en: 'One thing to notice here in the `CGridView` widget is the columns list. You
    can choose which fields you want to have display. In a lot of cases, you might
    not want to show all the fields, or you may want them to show up differently.
    If the actual Post ID is not important, we can remove that item. Since category
    ID, as a number, doesn''t tell us much, we can easily make that show the name
    field for the given ID. Another thing we''re going to want to change is the last
    column. `CButtonColumn` defaults to giving us three buttons: `view`, `update`,
    and `delete`. The form we''re trying to build is intended to allow an administrator
    to approve pending posts, so we really need an action button for doing the approving.
    We might also have this as an option in other places too, such as the view and
    update screens, so it might make sense to leave those buttons there. In any case,
    we must customize both the `CGridView` column list as well as `CButtonColumn`
    itself.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `CGridView` 小部件中需要注意的一点是列列表。你可以选择你想显示的字段。在许多情况下，你可能不想显示所有字段，或者你可能希望它们以不同的方式显示。如果实际的帖子
    ID 不重要，我们可以移除该项。由于分类 ID 作为数字并不能告诉我们太多，我们可以轻松地使其显示给定 ID 的名称字段。我们还想更改的另一件事是最后一列。`CButtonColumn`
    默认为我们提供三个按钮：`查看`、`更新`和`删除`。我们试图构建的表单旨在允许管理员批准待处理的帖子，因此我们确实需要一个用于批准的动作按钮。我们可能也在其他地方有这个选项，比如查看和更新屏幕，所以保留这些按钮可能是有意义的。无论如何，我们必须自定义
    `CGridView` 列表以及 `CButtonColumn` 本身。
- en: '[PRE34]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The highlighted lines are what's most important here. The `buttons` property
    tells the widget what buttons, to generate for this grid. In here, we have the
    `approve` button defined manually. You have three buttons, `update`, `view`, and
    `delete`, for free with any `CGridView`. The `template` property tells the widget
    in what order and what buttons to render. So, if you configure some custom buttons,
    as we did with `approve`, then you have to mention it in the `template` property.
    A full description of what parameters can be defined for each button can be found
    in the documentation for the `CButtonColumn.buttons` property at [http://www.yiiframework.com/doc/api/1.1/CButtonColumn#buttons-detail](http://www.yiiframework.com/doc/api/1.1/CButtonColumn#buttons-detail).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最重要的就是高亮显示的行。`buttons` 属性告诉小部件为这个网格生成哪些按钮。在这里，我们手动定义了 `approve` 按钮。任何 `CGridView`
    都可以免费获得三个按钮：`更新`、`查看`和`删除`。`template` 属性告诉小部件以何种顺序和哪些按钮进行渲染。因此，如果你配置了一些自定义按钮，就像我们用
    `approve` 所做的那样，那么你必须在 `template` 属性中提及它。每个按钮可以定义的参数的完整描述可以在 `CButtonColumn.buttons`
    属性的文档中找到，请参阅 [http://www.yiiframework.com/doc/api/1.1/CButtonColumn#buttons-detail](http://www.yiiframework.com/doc/api/1.1/CButtonColumn#buttons-detail)。
- en: Note that we still need to properly configure the `url` property for our `approve`
    button.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们仍然需要正确配置 `approve` 按钮的 `url` 属性。
- en: 'Let''s do the AJAX update for when a user clicks on the approve button. It
    will send a request to the `/post/approve` endpoint, which we will create shortly,
    and update the grid afterwards. Here''s how we do it:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为用户点击批准按钮时执行 AJAX 更新。它将向 `/post/approve` 端点发送请求，我们将在稍后创建该端点，并在之后更新网格。以下是我们的操作步骤：
- en: '[PRE35]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After that, we write the simplest possible endpoint in our `PostController`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们在 `PostController` 中编写最简单的端点：
- en: '[PRE36]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This just changes the approved status of the Post to `true` value and saves
    it. Note the common practice of checking whether we got the correct Post ID and
    throwing an exception if not.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是将帖子的批准状态更改为 `true` 值并保存。注意，我们通常需要检查是否得到了正确的帖子 ID，如果没有，则抛出异常。
- en: 'For listing pending posts, we do the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列出待处理帖子，我们执行以下操作：
- en: '[PRE37]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This table will only show the post category by name and the title of the post.
    After you set the `approved` field to zero in this particular model instance,
    it'll be used as a filter for the grid view.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 此表将只显示帖子的分类名称和帖子的标题。在你将此特定模型实例的 `approved` 字段设置为零后，它将用作网格视图的过滤器。
- en: Extensions
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展
- en: Another great feature of Yii, and the Yii community, is the library of user-contributed
    extensions that you will find on the Yii website ([http://www.yiiframework.com/extensions/](http://www.yiiframework.com/extensions/)).
    There are currently over 1,100 extensions that make it easy to drop in specialized
    functionality. Extension categories include Authorization, Caching, Date and Time,
    File System, Mail, Security, User Interface, Validation, and a few others. In
    this section, we'll take a look at a couple of really good ones.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Yii的另一个伟大功能和Yii社区的功能是用户贡献的扩展库，你可以在Yii网站上找到这些扩展库（[http://www.yiiframework.com/extensions/](http://www.yiiframework.com/extensions/)）。目前有超过1,100个扩展，使得添加专用功能变得容易。扩展类别包括授权、缓存、日期和时间、文件系统、邮件、安全、用户界面、验证等。在本节中，我们将查看几个非常好的扩展。
- en: TinyMCE
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TinyMCE
- en: The most popular extension by far is **tinymce**. This, as you might have guessed,
    is a wrapper for the **TinyMCE** ([http://www.tinymce.com/](http://www.tinymce.com/))
    WYSIWYG editor. It attaches to a text area input and provides a toggle between
    the HTML view and a Preview mode, where styles appear as they would when published.
    Users are given controls, such as font selection/color, text alignment, bold/italic/underline,
    and so on.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止最受欢迎的扩展是 **tinymce**。正如你可能猜到的，这是一个针对 **TinyMCE** ([http://www.tinymce.com/](http://www.tinymce.com/))
    WYSIWYG 编辑器的包装器。它附加到文本区域输入，并提供在HTML视图和预览模式之间的切换，其中样式会显示为发布时的样子。用户可以获得控制，例如字体选择/颜色、文本对齐、粗体/斜体/下划线等。
- en: 'To use the TinyMCE extension, you first download and extract it into the `protected/extensions`
    directory. After that, simply replace the single line of `_form.php` that normally
    calls for `textArea` with the following, which will yield the full set of controls:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用TinyMCE扩展，你首先下载并将其解压到`protected/extensions`目录中。之后，只需替换`_form.php`中通常调用`textArea`的单行，使用以下内容，这将提供完整的控件集：
- en: '[PRE38]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![TinyMCE](img/1684OS_04_2.png.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![TinyMCE](img/1684OS_04_2.png.jpg)'
- en: MbMenu
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MbMenu
- en: Another very sought after feature on most websites today is drop-down menus.
    **MbMenu** provides an extension to the default Yii `CMenu` class, making it easy
    to plug in for existing projects. To get started, again, all you have to do is
    download and extract the extension into the `protected/extensions` folder. The
    main site menu is configured in `protected/views/layout/main.php`, so that is
    where we must go to make our changes.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 今天大多数网站上非常受欢迎的另一个功能是下拉菜单。**MbMenu**提供了一个针对默认Yii `CMenu`类的扩展，使得将其集成到现有项目中变得容易。要开始，再次，你只需要下载并提取扩展到`protected/extensions`文件夹中。主站菜单在`protected/views/layout/main.php`中配置，因此我们必须去那里进行更改。
- en: 'By default, the menu looks like this:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，菜单看起来是这样的：
- en: '[PRE39]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To use MbMenu, we must change the widget to `application.extensions.mbmenu.MbMenu`.
    Then we may nest arrays of items within individual menu items following the same
    format `CMenu` used by default. Going with our example, we might want to first
    add a menu item for posts that links to the post index list. With the old `CMenu`
    way, we would just do this:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用MbMenu，我们必须将小部件更改为`application.extensions.mbmenu.MbMenu`。然后我们可以在单个菜单项内嵌套数组，遵循默认的`CMenu`格式。以我们的例子为例，我们可能首先想要添加一个指向帖子索引列表的帖子菜单项。使用旧的`CMenu`方式，我们只需这样做：
- en: '[PRE40]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, let''s say we want to add some of the CRUD actions and the pending list
    as submenu items. That would look like the following:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想要添加一些CRUD操作和挂起列表作为子菜单项。它看起来会像以下这样：
- en: '[PRE41]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note that this widget has its own CSS, so the ID of the wrapper `div` element
    should be changed from `mainmenu` to `mainMbMenu`. Also, we don't want non-admin
    users to see the menu option for the pending list or non-authenticated users to
    see the link to create a post, so we have to specify the visible condition.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个小部件有自己的CSS，因此包装器`div`元素的ID应该从`mainmenu`更改为`mainMbMenu`。此外，我们不希望非管理员用户看到挂起列表的菜单选项，或者非认证用户看到创建帖子的链接，因此我们必须指定可见条件。
- en: Yii-User and Yii-User-Management
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Yii-User 和 Yii-User-Management
- en: These two extensions are among the most downloaded extensions. **Yii-User**
    provides mechanisms for user registrations and all the issues that arise with
    that process, such as confirming e-mail, resetting passwords, and user profiles.
    **Yii-User-Management** provides many more of the same features, but additionally
    includes groups, inter-user messaging, and user roles.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个扩展是最受欢迎的扩展之一。**Yii-User**提供了用户注册以及与此过程相关的所有问题的机制，例如确认电子邮件、重置密码和用户资料。**Yii-User-Management**提供了更多相同的功能，但还包括组、用户间消息和用户角色。
- en: Yii-Shop
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Yii-Shop
- en: Yii-Shop is a fully-featured, internationalized shopping cart extension. It
    handles different types of products with variations, tax calculations, shipping
    and payment methods, as well as invoicing and delivery slips.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Yii-Shop是一个功能齐全、国际化的购物车扩展。它处理不同类型的具有变体的产品，包括税费计算、运输和支付方式，以及发票和送货单。
- en: Cal
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cal
- en: This is a great jQuery-based calendar extension. Use it to create and schedule
    events that display on a full-sized calendar.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于jQuery的日历扩展。使用它来创建和安排将在全尺寸日历上显示的事件。
- en: Fancybox
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fancybox
- en: Who doesn't like those modal pop-up image viewers? This one is perfect for fancy
    looking image galleries. It's a wrapper around the third-party application **Fancybox**,
    located at [http://fancyapps.com/fancybox/](http://fancyapps.com/fancybox/).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 谁不喜欢那些模态弹出图像查看器呢？这个非常适合用于看起来很酷的图像画廊。它是一个位于[http://fancyapps.com/fancybox/](http://fancyapps.com/fancybox/)的第三方应用**Fancybox**的包装器。
- en: Other great extensions
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他优秀扩展
- en: There are so many great extensions available for Yii, and for the most part,
    they are as easy to drop in and use as the two examples illustrated earlier. In
    the next section, we'll be talking about another great extension that makes it
    easy to deal with one of the most important issues in web-based applications,
    namely access permissions.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Yii来说，有如此多的优秀扩展可用，并且大部分扩展与前面提到的两个示例一样容易安装和使用。在下一节中，我们将讨论另一个优秀的扩展，它使得处理基于Web的应用程序中最重要的问题之一变得容易，即访问权限。
- en: Role-based access control
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于角色的访问控制
- en: A common practice in software applications for decades has been to assign permissions
    for specific actions to generalized roles. Users can be granted one or more roles,
    through which they will be enabled to perform certain functions. Given the blog
    example, general registered users might be given a role like visitor. That role
    would be linked to a limited set of possible actions. For instance, visitors might
    only be allowed to create comments for posts, but not posts themselves. Another
    role might be given to a select number of users who are actually allowed to create
    posts. This might be called **post creator**. Roles often describe the intended
    behavior, and even if they are never publicly visible as part of the site, they
    serve to keep things simple on the administrative or programmatic side of things.
    A final, top-level role might be something like admin, which would probably handle
    things like enabling new users or approving posts. All-in-all, this process of
    granting permission for certain actions to user roles is known as **role-based
    access control** (**RBAC**), and it is very important in Yii.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年来，在软件应用中的一种常见做法是将特定操作的权限分配给通用角色。用户可以被授予一个或多个角色，通过这些角色，他们将能够执行某些功能。以博客为例，一般注册用户可能会被赋予一个如访客的角色。这个角色将关联到一组有限的可能操作。例如，访客可能只能为帖子创建评论，但不能创建帖子本身。另一个角色可能会分配给少数被允许创建帖子的用户。这可以被称为**帖子创建者**。角色通常描述了预期的行为，即使它们从未作为网站的一部分公开可见，它们也有助于简化管理或程序方面的操作。最后，一个顶级角色可能类似于管理员，它可能会处理诸如启用新用户或批准帖子之类的事情。总的来说，将特定操作的权限授予用户角色的这个过程被称为**基于角色的访问控制**（**RBAC**），在Yii中非常重要。
- en: SRBAC
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SRBAC
- en: One of the easiest ways to get going with role based access controls is this
    widely popular extension called **SRBAC** ([http://www.yiiframework.com/doc/guide/1.1/en/basics.module](http://www.yiiframework.com/doc/guide/1.1/en/basics.module)).
    This extension provides a graphical interface for configuring roles, tasks, and
    operations. Operations are assigned to tasks, tasks are assigned to roles, and
    finally, roles are assigned to users. At the lowest level, operations are a one-to-one
    mapping to an action. For example, viewing a post is `actionView` in the post
    controller. `PostView` is the operation that would be created to map to this action.
    Similarly, operations would be created for all actions in the `PostController`.
    By default, SRBAC will also set up two tasks for each controller. For Post, these
    would be `PostViewing` and `PostAdministrating`. View and Index are read-only
    operations, so they generally get lumped into `PostViewing`, whereas Create, Update,
    Delete, and Admin fit more reasonably in `PostAdministering`. You can always reserve
    administering for a few more important tasks, such as Delete or just Admin, but
    you'll probably want to create another task like `PostCreating` to fit in-between
    strictly view-only and actual creation/editing of content.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用基于角色的访问控制的最简单方法之一是这款广受欢迎的扩展，称为**SRBAC**（[http://www.yiiframework.com/doc/guide/1.1/en/basics.module](http://www.yiiframework.com/doc/guide/1.1/en/basics.module)）。这个扩展提供了一个图形界面来配置角色、任务和操作。操作被分配给任务，任务被分配给角色，最后，角色被分配给用户。在最低级别，操作与一个动作是一对一的映射。例如，查看帖子是帖子控制器中的`actionView`。`PostView`是创建来映射此动作的操作。同样，对于`PostController`中的所有动作都会创建操作。默认情况下，SRBAC还会为每个控制器设置两个任务。对于帖子，这些任务将是`PostViewing`和`PostAdministrating`。查看和索引是只读操作，因此它们通常被合并到`PostViewing`中，而创建、更新、删除和管理更适合放在`PostAdministering`中。你总是可以为一些更重要的任务保留管理权限，例如删除或只是管理，但你可能还想创建另一个任务，如`PostCreating`，以适应严格只读和实际创建/编辑内容之间的中间状态。
- en: To make use of SRBAC with a particular controller, there are a few changes that
    need to be made. First, we must configure this extension, which is a slightly
    different process from the earlier examples. This is an older extension that follows
    a less used pattern for install. Instead of finding a home in the `protected/extensions`
    folder, the documentation states to place it in `protected/modules`, which doesn't
    exist by default, but can be created ([http://www.yiiframework.com/doc/guide/1.1/en/basics.module](http://www.yiiframework.com/doc/guide/1.1/en/basics.module)).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用特定控制器与SRBAC一起使用，需要进行一些修改。首先，我们必须配置这个扩展，这与前面的示例略有不同。这是一个较旧的扩展，遵循一个较少使用的安装模式。它不是放在`protected/extensions`文件夹中，而是根据文档说明，应将其放在`protected/modules`中，该文件夹默认不存在，但可以创建（[http://www.yiiframework.com/doc/guide/1.1/en/basics.module](http://www.yiiframework.com/doc/guide/1.1/en/basics.module)）。
- en: Next, a few simple changes must be made to the main configuration file in `protected/config/main.php`.
    In the `import` section, add a line for `application.modules.srbac.controllers.SBaseController`.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，需要对`protected/config/main.php`中的主配置文件进行一些简单的修改。在`import`部分，添加一行以包含`application.modules.srbac.controllers.SBaseController`。
- en: 'In the modules section, where you''ll find the configuration for Gii, add this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块部分，你可以找到Gii的配置，添加以下内容：
- en: '[PRE42]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: These are some standard settings as expressed in the SRBAC documentation. A
    few things to note here are that you must specify exactly what your user class
    and username fields are. You'll find that at the top of the list. Also, you can
    set actions that should always be allowed in the `alwaysAllowed` item. This would
    be useful if you want anonymous users to see your `PostIndex` page. The last major
    thing to note is the `debug` option. It is very important to set this to `false`
    as soon as you have properly configured your roles. Most importantly, you will
    need to assign the Authority role to a user, as this is the only role allowed
    to administer SRBAC. If you set this to `false` before assigning that role, you
    will be locked out of further configuration of SRBAC rules. You can reset this
    to `true` if that is the case.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是SRBAC文档中表达的一些标准设置。这里需要注意的几点是，你必须确切指定你的用户类和用户名字段。你会在列表的顶部找到它们。此外，你可以在`alwaysAllowed`项中设置始终允许执行的操作。如果你想让匿名用户看到你的`PostIndex`页面，这将很有用。最后要注意的是`debug`选项。在你正确配置了角色后，将此选项设置为`false`非常重要。最重要的是，你需要将权限角色分配给一个用户，因为这是唯一允许管理SRBAC的角色。如果你在分配该角色之前将其设置为`false`，你将无法进一步配置SRBAC规则。如果情况如此，你可以将其重置为`true`。
- en: 'In the `components` section of your `main.php` config, you must set the `authManager`
    item to SRBAC:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`main.php`配置的`components`部分，你必须将`authManager`项设置为SRBAC：
- en: '[PRE43]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: SRBAC uses three database tables for rules; roles, tasks, and operations will
    go into the item table. The item child table deals with relationships between
    roles and tasks, and tasks and operations. The assignment table relates roles
    to users. These tables will be created during the install process, which will
    take place the first time you attempt to access SRBAC.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: SRBAC使用三个数据库表来存储规则；角色、任务和操作将进入项目表。项目子表处理角色和任务、任务和操作之间的关系。分配表将角色与用户关联。这些表将在安装过程中创建，这将发生在你第一次尝试访问SRBAC时。
- en: Once you have the SRBAC module in the `modules` folder and the config options
    set in `main.php`, you can visit your site `index.php?r=srbac`, and you should
    be taken to the install screen. This screen will show you a summary of the settings
    and will have an install button at the bottom. This action will create the tables
    necessary for using SRBAC in your application.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在`modules`文件夹中安装了SRBAC模块，并在`main.php`中设置了配置选项，你就可以访问你的网站`index.php?r=srbac`，你应该会被带到安装界面。这个界面会显示设置摘要，并在底部有一个安装按钮。这个操作将在你的应用程序中使用SRBAC时创建必要的表。
- en: 'To set up rules for a particular controller, you must first make a few changes
    to the controller file. Instead of extending `Controller`, it must now extend
    `SBaseController`. By relying on a higher level controller, the checking for permission
    upon action request is abstracted away from you as a coder. It becomes something
    you don''t need to think about, and it doesn''t clutter up your code:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 要为特定的控制器设置规则，你必须首先对控制器文件进行一些修改。不再扩展`Controller`，现在必须扩展`SBaseController`。通过依赖高级控制器，动作请求时的权限检查被从你作为开发者的角度抽象出来。这变成了一件你不需要思考的事情，而且不会让你的代码变得杂乱无章：
- en: '[PRE44]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'At the top of your controller, under the `public $layout` setting, you''ll
    need to set up a couple of quick variable definitions to avoid issues in your
    views:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的控制器顶部，在`public $layout`设置下，你需要设置一些快速变量定义以避免在视图中的问题：
- en: '[PRE45]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Lastly, you can remove the `filters` and `accessRules` methods:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以移除`filters`和`accessRules`方法：
- en: '[PRE46]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now you are ready to go back into SRBAC. If you go to the **Managing AuthItems**
    section, you should see a link for **Autocreate Auth Items**. This page will show
    you controllers that you are able to use to autogenerate tasks and operations.
    By clicking on the light bulb icon next to a listed controller, you should see
    on the right a list of all the operations that it can create as well as two default
    tasks that it wants to set up for you. You can selectively choose items or go
    with **Select All**. For tasks, you can go with the two standard tasks of viewing
    and administering, and either stick with these, add more, or create entirely unique
    tasks for your controller.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以回到SRBAC。如果你转到**管理AuthItems**部分，你应该看到一个**自动创建AuthItems**的链接。这个页面会显示你可以用来自动生成任务和操作的控制器。通过点击列表中控制器旁边的灯泡图标，你应该在右侧看到一个它可以创建的所有操作的列表以及两个默认任务，它想要为你设置的。你可以选择性地选择项目或选择**全选**。对于任务，你可以选择查看和管理这两个标准任务，或者坚持这些，添加更多，或者为你的控制器创建完全独特的任务。
- en: '![SRBAC](img/1684OS_04_3.png.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![SRBAC](img/1684OS_04_3.png.jpg)'
- en: After autogenerating your tasks and operations, you'll want to set up a few
    roles. Go back to the primary **Auth Items** screen and find the **Create** button.
    Here is where you can create custom tasks and operations, but you will find this
    most useful for simply creating roles. Change the drop-down to role, give it a
    name, and hit **Create** below. Note that you have to hit **Create** on the left
    side before adding another role.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动生成你的任务和操作后，你将想要设置一些角色。回到主要的**Auth Items**屏幕，找到**创建**按钮。在这里，你可以创建自定义任务和操作，但你将发现这最适用于简单地创建角色。将下拉菜单改为角色，给它起个名字，然后点击下面的**创建**。注意，在添加另一个角色之前，你必须点击左侧的**创建**。
- en: '![SRBAC](img/1684OS_04_4.png.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![SRBAC](img/1684OS_04_4.png.jpg)'
- en: At this point, we can go to the **Assign Roles to Users** section. This is a
    simple, graphical way to add and remove assignments.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们可以转到**分配角色给用户**部分。这是一个简单、图形化的方式来添加和移除分配。
- en: '![SRBAC](img/1684OS_04_5.png.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![SRBAC](img/1684OS_04_5.png.jpg)'
- en: With a few clicks, you can assign operations to tasks, tasks to roles, and roles
    to users. Make sure you add the Authority role to at least one user, as mentioned
    earlier, before you turn of SRBAC debug-mode in the `main.php` config file.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 几个点击就能将操作分配给任务，任务分配给角色，角色分配给用户。确保在您在`main.php`配置文件中关闭SRBAC调试模式之前，至少将权限角色添加给一个用户，如前所述。
- en: '![SRBAC](img/1684OS_04_6.png.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![SRBAC](img/1684OS_04_6.png.jpg)'
- en: 'SRBAC is useful in more situations than simply managing controller actions.
    When we set up the drop-down menu earlier, we restricted the pending menu option
    to be visible only to the admin user:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: SRBAC 在更多情况下都很有用，而不仅仅是管理控制器操作。当我们之前设置下拉菜单时，我们限制了待处理菜单选项只对管理员用户可见：
- en: '[PRE47]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now that we have roles, we can set up this restriction based on roles:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了角色，我们可以根据角色设置这个限制：
- en: '[PRE48]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: At any point in our code, we can check to see if the current user has a particular
    authorization assignment. This could be a role, task, or operation. This is important
    because it's not enough to simply show the user a denied access message when they
    visit part of the app they shouldn't be using. It's better that they never find
    a link to it in the first place.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中的任何位置，我们都可以检查当前用户是否有特定的授权分配。这可能是一个角色、任务或操作。这很重要，因为当用户访问他们不应该使用的应用程序部分时，仅仅显示拒绝访问的消息是不够的。更好的是，他们根本找不到链接。
- en: People and places you should get to know
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该了解的人和地方
- en: Finally, let's see where we can find more information about the Yii framework,
    as well as its community.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看我们可以在哪里找到更多关于 Yii 框架及其社区的信息。
- en: Yii website
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yii 网站
- en: The framework website is, quite simply, the number one place to read more about
    Yii. Its URL is [http://www.yiiframework.com](http://www.yiiframework.com). As
    with any software tool, the API documentation section will be invaluable as you
    work through your development. The forums provide an excellent resource for getting
    help with specific issues you run into. There are a number of tutorials, as well
    as a wiki with examples to look at. The best outside resources are listed on the
    website as well, so this should absolutely be your first stop.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 框架网站是阅读更多关于Yii的第一位地方。它的网址是[http://www.yiiframework.com](http://www.yiiframework.com)。与任何软件工具一样，API文档部分在你开发过程中将非常有价值。论坛提供了获取特定问题的帮助的极好资源。有许多教程，以及一个包含示例的wiki可以查看。网站上还列出了最好的外部资源，所以这绝对应该是你的第一站。
- en: API
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API
- en: The Yii API documentation is probably the most beautiful and easy to use documentation
    ever published on the World Wide Web. The URL is [http://www.yiiframework.com/doc/api/](http://www.yiiframework.com/doc/api/).
    If you are going to seriously use Yii, you definitely should add it to your bookmarks,
    because you'll need it a lot.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Yii API 文档可能是网络上最漂亮、最易用的文档。网址是[http://www.yiiframework.com/doc/api/](http://www.yiiframework.com/doc/api/)。如果你打算认真使用Yii，你绝对应该将其添加到书签中，因为你将需要它很多。
- en: Tutorials and guides
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程和指南
- en: The Yii website has a number of tutorials that are excellent. One of the best
    resources beyond the API itself is the *Definitive Guide* found at [http://www.yiiframework.com/doc/guide/](http://www.yiiframework.com/doc/guide/).
    This guide is very thorough, covers all the important topics, and has a lot of
    important tips and code samples packed in.
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yii 网站有许多优秀的教程。除了API本身之外，最好的资源之一是位于[http://www.yiiframework.com/doc/guide/](http://www.yiiframework.com/doc/guide/)的《
    definitive guide》。这个指南非常详尽，涵盖了所有重要主题，并包含了许多重要的提示和代码示例。
- en: The blog demo we based the book on is discussed in great length in the tutorials
    section of the Yii website. The URL is [http://www.yiiframework.com/doc/blog/](http://www.yiiframework.com/doc/blog/).
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们基于的博客演示在Yii网站教程部分有详细讨论。网址是[http://www.yiiframework.com/doc/blog/](http://www.yiiframework.com/doc/blog/)。
- en: The wiki holds a lot of independent examples and code snippets that should come
    in handy ([http://www.yiiframework.com/wiki/](http://www.yiiframework.com/wiki/)).
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wiki 上有很多独立的示例和代码片段，这些片段可能会很有用 ([http://www.yiiframework.com/wiki/](http://www.yiiframework.com/wiki/))。
- en: If you can't find an example of what you're trying to do in the wiki, the forums
    are also a great resource to search for previously solved solutions to problems.
    With Yii's popularity on the rise, the forums are increasingly active. This is
    an excellent place to get your questions answered.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在wiki中找不到你想要做的示例，论坛也是一个寻找先前解决问题的解决方案的好资源。随着Yii的日益流行，论坛越来越活跃。这是一个获取你问题答案的好地方。
- en: One of the most comprehensive tutorials for Yii was done by Larry Ullman. He
    has written an excellent book on Yii, and has chosen to release much of the content
    publicly on his website [http://www.larryullman.com/series/learning-the-yii-framework/](http://www.larryullman.com/series/learning-the-yii-framework/).
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最全面的Yii教程之一是由Larry Ullman完成的。他撰写了一本关于Yii的优秀书籍，并选择在其网站上公开发布大部分内容 [http://www.larryullman.com/series/learning-the-yii-framework/](http://www.larryullman.com/series/learning-the-yii-framework/)。
- en: There's another set of excellent screencasts produced by Jeffrey Winesett to
    help you get started at [http://www.yiiframework.com/screencasts/](http://www.yiiframework.com/screencasts/)
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jeffrey Winesett还制作了一套优秀的屏幕录像教程，以帮助您在 [http://www.yiiframework.com/screencasts/](http://www.yiiframework.com/screencasts/)
    开始学习。
- en: IRC
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IRC
- en: You can find the Yii community on Freenode in the `#Yii` channel.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Freenode的 `#Yii` 频道找到Yii社区。
- en: Twitter
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Twitter
- en: Follow updates and changes to the framework by following `@YiiFramework`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 通过关注 `@YiiFramework` 来跟踪框架的更新和变化。
- en: Facebook
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Facebook
- en: Yii has even entered the Facebook world with a group for everything Yii-related
    ([https://www.facebook.com/groups/61355672149/](https://www.facebook.com/groups/61355672149/)).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: Yii甚至进入了Facebook世界，为所有与Yii相关的主题创建了一个群组 ([https://www.facebook.com/groups/61355672149/](https://www.facebook.com/groups/61355672149/))。
- en: At the time of writing, there were several thousands of members.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，已有数千名成员。
