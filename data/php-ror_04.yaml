- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Ruby Scripting versus PHP Scripting
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby脚本与PHP脚本
- en: Just like the similarities we found when we looked at Ruby’s and PHP’s syntax,
    we are going to take things a step further and dive into the similarities between
    Ruby scripts and PHP scripts. A script is a piece of code that will run a task
    and then stop its execution. Said task may be simple or complex, but it is not
    considered an application as it stops once the task is done and only performs
    the task. Let’s take this step together and start writing simple scripts so that
    we can eventually write full-fledged applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在查看Ruby和PHP语法时发现的相似之处一样，我们将更进一步，深入研究Ruby脚本和PHP脚本之间的相似性。脚本是一段代码，它将执行一个任务然后停止执行。这个任务可能是简单的，也可能是复杂的，但它不被视为一个应用程序，因为它在任务完成后就会停止，并且只执行该任务。让我们一起迈出这一步，开始编写简单的脚本，以便我们最终能够编写完整的应用程序。
- en: 'With that in mind, in this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，在本章中，我们将涵盖以下主题：
- en: Useful scripts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的脚本
- en: Text handling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本处理
- en: File handling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件处理
- en: Command-line arguments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行参数
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with this chapter, we will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章内容，我们需要以下内容：
- en: Any IDE to view/edit code (for example, SublimeText, Visual Studio Code, Notepad++
    Vim, Emacs, and so on)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何IDE来查看/编辑代码（例如，SublimeText，Visual Studio Code，Notepad++ Vim，Emacs等）
- en: For macOS users, you will also need to have XCode Command Line Tools installed
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS用户，您还需要安装XCode命令行工具
- en: Ruby version 2.6 or later must be installed and ready to use
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须安装并准备好使用Ruby版本2.6或更高版本
- en: The code presented in this chapter is available at [https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中展示的代码可在[https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/)找到。
- en: Beyond Hello World
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越Hello World
- en: In the previous chapter, we learned how to run (or execute) Ruby code. However,
    we only focused on the syntax and not the usefulness of the code. The famous Hello
    World script we write in any language is, by itself, useless, at least from a
    practical sense. So, let’s start learning how to use some tools to give our scripts
    a little bit of usefulness.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何运行（或执行）Ruby代码。然而，我们只关注了语法，而没有关注代码的有用性。我们在任何语言中编写的著名的Hello World脚本本身是毫无用处的，至少从实用角度来看是这样。因此，让我们开始学习如何使用一些工具来使我们的脚本变得更有用。
- en: 'One useful tool in any language is having a way to verify the version of the
    programming language that we are currently using. Once we obtain the version,
    we can stop the execution if the version we are using is incorrect. So, our first
    step is to get the current Ruby version. Let’s create a file called `version_verification.rb`
    with the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 任何一种语言中，有一个验证当前使用编程语言版本的方法是非常有用的。一旦我们获取了版本信息，如果使用的版本不正确，我们可以停止执行。因此，我们的第一步是获取当前的Ruby版本。让我们创建一个名为`version_verification.rb`的文件，并包含以下代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can run this script on our shell by typing the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在shell中输入以下命令来运行此脚本：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It should output something similar to this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该输出类似以下内容：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this script, we are using the `RUBY_VERSION` constant to get the current
    version of Ruby that we are using and interpolating this constant with a string
    to view the whole message regarding the Ruby version. By itself, this constant
    is useless, but let’s give it some practical use. Let’s say we wanted to share
    our script with other teams, where it would be used in different computers and/or
    environments. To make sure our script works properly, we would have to provide
    certain requirements or conditions for our script. It would be also useful to
    verify that said requirements are being met. We have a couple of options to accomplish
    this. We could simply compare the version we obtain from the `RUBY_VERSION` constant
    to another string, such as `''2.6.8''`. That would be the most straightforward
    way to do this. However, the problem with this approach is that you would have
    to have the same Ruby version everywhere and that is rarely the case. We almost
    always have small variations of the version. If we were to take the preceding
    example of `''2.6.8''`, in other systems, we could get `''2.6.5''`, `''2.6.7''`,
    or even `''2.6.9''`. And all of these versions would not only be equivalent but
    also valid to what we are requiring. So, let’s just say our requirement is 2.6
    and above, which would be equivalent to any version above `''2.5.9''`. We could
    split the obtained version from the `RUBY_VERSION` constant, split its value by
    the dots, and start comparing away. However, this is too much work; this is where
    comes Ruby to the rescue. Ruby comes with a library called `stdlib` that comes
    with several utilities that are extremely useful when encountering these types
    of problems. Specifically, Ruby has the `Gem::Version` class, which will solve
    our problem at hand. We’ll include it in our example, but to make sure that the
    validation works, we will compare it to version `''3.0''`. Once we’ve tested the
    validation, we can add the correct version (`''2.6''`). Our code now looks like
    this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们使用`RUBY_VERSION`常量来获取我们正在使用的Ruby当前版本，并将这个常量与一个字符串进行插值，以查看有关Ruby版本的整个消息。这个常量本身是没有用的，但让我们给它一些实际用途。假设我们想要与其他团队分享我们的脚本，该脚本将在不同的计算机和/或环境中使用。为了确保我们的脚本能够正常工作，我们必须为我们的脚本提供某些要求或条件。验证这些要求是否得到满足也会很有用。我们有几种方法可以实现这一点。我们可以简单地比较从`RUBY_VERSION`常量获取的版本与另一个字符串，例如`'2.6.8'`。这将是最直接的方法。然而，这种方法的问题是你必须在每个地方都有相同的Ruby版本，这很少见。我们几乎总是有版本的小幅变化。如果我们以`'2.6.8'`为例，在其他系统中，我们可能会得到`'2.6.5'`、`'2.6.7'`，甚至`'2.6.9'`。所有这些版本不仅等效，而且对于我们所要求的是有效的。所以，让我们说我们的要求是2.6及以上，这相当于任何高于`'2.5.9'`的版本。我们可以将`RUBY_VERSION`常量获取的版本分割，通过点分割其值，然后开始比较。然而，这太费事了；这正是Ruby发挥作用的地方。Ruby附带一个名为`stdlib`的库，其中包含一些在遇到这类问题时非常有用的实用工具。具体来说，Ruby有一个`Gem::Version`类，它将解决我们手头的这个问题。我们将在示例中包含它，但为了确保验证工作正常，我们将它与版本`'3.0'`进行比较。一旦我们测试了验证，我们就可以添加正确的版本（`'2.6'`）。我们的代码现在看起来是这样的：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we were to run this script on our shell, we would get the following output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在我们的shell上运行这个脚本，我们会得到以下输出：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our validation worked, but the problem now is that we are not stopping the
    execution if we don’t have the correct Ruby version. The message showing the Ruby
    version should not be shown. If we were writing our script in PHP, we could simply
    use the `die()` function (which is equivalent to the `exit()` language construct)
    and the script would stop then and there. However, since we are writing scripts,
    certain practices can make our script even more useful. If our program was running
    on the web, we would rely on HTTP response status codes ([https://developer.mozilla.org/en-US/docs/Web/HTTP/Status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status))
    to tell the browser that our page was rendered and an error occurred. Similarly,
    in scripts, we rely on exit codes ([https://www.baeldung.com/linux/status-codes](https://www.baeldung.com/linux/status-codes))
    to tell the shell that our program failed. Taking that into account, we would
    then use the `Kernel::exit()` method to both stop the execution and send the shell
    a signal that our script failed. This method receives an argument that is then
    sent to the shell. This argument is an error code that can be used by the operating
    system. We will be using error code `1` as it refers to a general error. After
    making this adjustment, our code would now look like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的验证成功了，但现在的问题是，如果没有正确的Ruby版本，我们没有停止执行。显示Ruby版本的提示信息不应该显示。如果我们用PHP编写脚本，我们可以简单地使用`die()`函数（它等同于`exit()`语言结构）然后脚本就会立即停止。然而，由于我们正在编写脚本，某些实践可以使我们的脚本更加有用。如果我们的程序在网络上运行，我们会依赖HTTP响应状态码（[https://developer.mozilla.org/en-US/docs/Web/HTTP/Status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)）来告诉浏览器我们的页面已经渲染并且发生了错误。同样，在脚本中，我们依赖退出码（[https://www.baeldung.com/linux/status-codes](https://www.baeldung.com/linux/status-codes)）来告诉shell我们的程序失败了。考虑到这一点，我们将使用`Kernel::exit()`方法来停止执行并向shell发送一个信号，表明我们的脚本失败了。此方法接收一个参数，然后将其发送到shell。这个参数是一个错误码，操作系统可以使用它。我们将使用错误码`1`，因为它表示一个一般错误。在做出这个调整后，我们的代码现在将如下所示：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we run this script on the shell, there would be no output as the script
    stops the execution before the message. In Unix-based systems, right after our
    script stops, we can run the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在shell上运行此脚本，由于脚本在消息之前停止了执行，所以不会有输出。在基于Unix的系统上，在我们的脚本停止后，我们可以运行以下命令：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This would return `1`, which is the same as the argument we passed to the `exit()`
    method. `$?` returns the exit code of the last command that was run.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回`1`，这与我们传递给`exit()`方法的参数相同。`$?`返回最后运行的命令的退出码。
- en: Note for Windows users
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户注意事项
- en: For Windows users, the shell will have a different output, depending on what
    Windows shell you use. If you’re using Powershell, you could obtain the same output
    by executing the `echo $LastExitCode` command in PowerShell.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，shell的输出将根据您使用的Windows shell而有所不同。如果您使用的是PowerShell，您可以通过在PowerShell中执行`echo
    $LastExitCode`命令来获得相同的输出。
- en: 'Refer to the Windows documentation for more information regarding this variable:
    [https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.3](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.3).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此变量的更多信息，请参阅Windows文档：[https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.3](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.3)。
- en: 'There is still one last tweak we need for our Ruby version verification script
    to be complete. As I mentioned previously, we only added version `''3.0''` to
    make sure our code worked, but in reality, we want to verify that our installed
    version is greater than `''2.6''`. So, our final verification will look like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对Ruby版本验证脚本进行最后一次调整才能使其完整。正如我之前提到的，我们只添加了版本`'3.0'`以确保我们的代码能够工作，但实际上，我们希望验证安装的版本大于`'2.6'`。因此，我们的最终验证将如下所示：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we executed our script on the shell, we would get the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在shell上执行我们的脚本，我们会得到以下结果：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And with that, we have made sure that if our script is executed with a Ruby
    version lower than `'2.6'` (for example, `'2.5.7'` or `'2.2.1'`), then the script
    will stop and send an error signal. Congratulations! We’ve created our first useful
    piece of code. This technique is often used by seasoned Ruby developers who are
    very aware of version changes. It will be up to you to improve this snippet as
    you could add an error message and also add an upper limit (for example, greater
    than `'2.5.9'` but lower than `'3.0'`). Now that we’ve created our first truly
    useful script, let’s take a look at some other useful Ruby tools for handling
    text.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们确保如果我们的脚本在低于 `'2.6'` 版本的 Ruby（例如，`'2.5.7'` 或 `'2.2.1'`）上执行，则脚本将停止并发送错误信号。恭喜！我们已经创建了我们的第一个有用的代码片段。这种技术通常被经验丰富的
    Ruby 开发者使用，他们对版本变化非常了解。现在，您可以根据需要改进这个片段，例如添加错误消息，并添加一个上限（例如，大于 `'2.5.9'` 但小于 `'3.0'`）。现在我们已经创建了第一个真正有用的脚本，让我们看看一些其他有用的
    Ruby 工具，用于处理文本。
- en: Text handling
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本处理
- en: 'You will most likely encounter strings (texts) in your journey to becoming
    a Ruby developer, so it’s important to know how to handle and manipulate this
    type of data. Whether you need to capitalize, get a partial string, or even trim
    a string, Ruby comes with a vast arsenal of tools to manipulate text as we see
    fit. Most programming languages have this type of tool, and Ruby is not an exception.
    As an example, let’s say we wanted to grab a previously entered name and make
    sure that all the letters were in uppercase or lowercase. Ruby has two methods
    to do exactly that: `upcase()` and `downcase()`. Let’s try them out by creating
    a file called `string_cases.rb` with the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在您成为 Ruby 开发者的旅程中，您很可能会遇到字符串（文本），因此了解如何处理和操作这类数据非常重要。无论您需要将文本大写、获取部分字符串，甚至修剪字符串，Ruby
    都提供了一套丰富的工具来按需操作文本。大多数编程语言都有这类工具，Ruby 也不例外。例如，假设我们想要获取之前输入的名字并确保所有字母都是大写或小写。Ruby
    有两种方法可以做到这一点：`upcase()` 和 `downcase()`。让我们通过创建一个名为 `string_cases.rb` 的文件并使用以下代码来尝试它们：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So far, we’ve declared two variables and used interpolation to output the full
    name. Let’s say we were to run this script on the shell with the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经声明了两个变量并使用插值输出了全名。假设我们在壳中运行此脚本，如下所示：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output would be as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output is nothing unexpected, given that we declared the name with lowercase
    letters and the last name with uppercase letters. However, it doesn’t make sense
    to have a first name in one case and a last name in another. So, we can either
    make them both uppercase or both lowercase. Let’s try both solutions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们声明名字时使用了小写字母，而姓氏使用了大写字母，所以输出结果并不令人意外。然而，将名字和姓氏的大小写分开是不合理的。因此，我们可以将它们都改为大写或小写。让我们尝试这两种解决方案。
- en: The upcase method
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大写方法
- en: 'To make them both uppercase, we can use the `upcase()` method. Our code will
    look as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要将它们都转换为大写，我们可以使用 `upcase()` 方法。我们的代码将如下所示：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we tested this code by running it again on the shell, we would get the following
    output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在壳中再次运行此代码，我们会得到以下输出：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The downcase method
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小写方法
- en: 'Similarly, we could make all characters lowercase with `downcase()`. In this
    case, our code would look like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用 `downcase()` 方法将所有字符转换为小写。在这种情况下，我们的代码将如下所示：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'So, with this last change, if we ran the script, we would obtain the following
    output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过这个最后的更改，如果我们运行脚本，我们会得到以下输出：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, we can change the variable’s case with both `upcase()` and
    `downcase()`. However, we can also do the same directly to a string and not just
    a variable. To see that in action, let’s change our code to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们可以使用 `upcase()` 和 `downcase()` 方法来更改变量的大小写。然而，我们也可以直接对字符串执行相同的操作，而不仅仅是变量。为了展示这一点，让我们将代码更改为以下内容：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This time, we took the whole output string and changed it to uppercase. The
    output will be as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将整个输出字符串转换为大写。输出结果如下：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And while this is fun and all, it’s only useful for learning purposes. So, let’s
    add some usefulness to our script with an additional method. For users, reading
    the full name in either all uppercase or all lowercase will not make sense and
    certainly not look professional. So, let’s capitalize only the first letter of
    both the `first_name` and `last_name` variables.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这样做很有趣，但它仅适用于学习目的。因此，让我们通过添加一个额外的方法来增加我们脚本的实用性。对于用户来说，无论是全部大写还是全部小写地读取全名都没有意义，当然也不够专业。所以，让我们只将
    `first_name` 和 `last_name` 变量的首字母大写。
- en: The capitalize method
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大写方法
- en: 'We can do this with the `capitalize()` method. Now, our code will look like
    this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `capitalize()` 方法来实现这一点。现在，我们的代码将看起来像这样：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we run this example, the output on the shell will look like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个示例，shell 上的输出将看起来像这样：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note that Ruby “knows” what characters to make uppercase and what characters
    to make lowercase to get this “capitalized” output. Ruby has many other methods
    to handle and manipulate text. We could spend the rest of this chapter looking
    at many of these methods, but I’d like to focus more on other tools and challenge
    you to check out the text methods for yourself. The documentation for these methods
    is pretty clear, and it helps that these methods were built using the Ruby philosophy
    and best practices. I recommend that you take a look at the `strip`, `lstrip`,
    `rstrip`, `start_with?`, `end_with?`, `rindex, gsub`, `chomp`, and `chop` methods:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Ruby “知道”应该将哪些字符转换为大写，哪些字符转换为小写，以获得这个“大写”的输出。Ruby 有许多其他方法来处理和操作文本。我们本可以花掉本章的剩余时间来查看这些方法中的许多，但我更想专注于其他工具，并挑战你自己去检查这些文本方法。这些方法的文档相当清晰，而且由于这些方法是在
    Ruby 哲学和最佳实践的基础上构建的，这也很有帮助。我建议你查看 `strip`、`lstrip`、`rstrip`、`start_with?`、`end_with?`、`rindex`、`gsub`、`chomp`
    和 `chop` 方法：
- en: '[https://apidock.com/ruby/String/strip](https://apidock.com/ruby/String/strip)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/strip](https://apidock.com/ruby/String/strip)'
- en: '[https://apidock.com/ruby/String/lstrip](https://apidock.com/ruby/String/lstrip)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/lstrip](https://apidock.com/ruby/String/lstrip)'
- en: '[https://apidock.com/ruby/String/rstrip](https://apidock.com/ruby/String/rstrip)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/rstrip](https://apidock.com/ruby/String/rstrip)'
- en: '[https://apidock.com/ruby/String/start_with%3F](https://apidock.com/ruby/String/start_with%3F)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/start_with%3F](https://apidock.com/ruby/String/start_with%3F)'
- en: '[https://apidock.com/ruby/String/end_with%3F](https://apidock.com/ruby/String/end_with%3F)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/end_with%3F](https://apidock.com/ruby/String/end_with%3F)'
- en: '[https://apidock.com/ruby/String/rindex](https://apidock.com/ruby/String/rindex)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/rindex](https://apidock.com/ruby/String/rindex)'
- en: '[https://apidock.com/ruby/String/gsub](https://apidock.com/ruby/String/gsub)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/gsub](https://apidock.com/ruby/String/gsub)'
- en: '[https://apidock.com/ruby/String/chomp](https://apidock.com/ruby/String/chomp)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/chomp](https://apidock.com/ruby/String/chomp)'
- en: '[https://apidock.com/ruby/String/chop](https://apidock.com/ruby/String/chop)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://apidock.com/ruby/String/chop](https://apidock.com/ruby/String/chop)'
- en: 'You might be more familiar with the names of these methods as PHP has similar
    methods as the ones I just mentioned: `trim`, `ltrim`, `rtrim`, `str_starts_with`,
    `str_ends_with`, `strpos`, and `str_replace`. The `chomp` and `chop` methods are
    very different in PHP, so I suggest that you take a close look at them in Ruby
    as they can be extremely useful.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对这组方法的名称更为熟悉，因为 PHP 有与我刚刚提到的类似的方法：`trim`、`ltrim`、`rtrim`、`str_starts_with`、`str_ends_with`、`strpos`
    和 `str_replace`。`chomp` 和 `chop` 方法在 PHP 中非常不同，所以我建议你在 Ruby 中仔细查看它们，因为它们可以非常有用。
- en: 'The ease of use and usefulness of the aforementioned methods are proof of why
    we should rely on Ruby’s string methods to do our string manipulation. We could
    certainly write all of this functionality on our own, but that would be just reinventing
    the wheel and we would be wasting time and energy. Should you choose to do that,
    I certainly won’t stop you as you would probably learn a lot of Ruby in the process.
    However, in this guided tour that I’m giving you, we will stick to learning more
    of the tools that Ruby provides for us. Now, let’s look at how Ruby allows us
    to do another powerful action: handle files.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法的易用性和实用性证明了为什么我们应该依赖 Ruby 的字符串方法来进行字符串操作。我们当然可以自己编写所有这些功能，但这只是重新发明轮子，我们会浪费时间和精力。如果你选择这样做，我当然不会阻止你，因为你在这个过程中可能会学到很多
    Ruby。然而，在这个指导性的旅行中，我们将坚持学习 Ruby 为我们提供的更多工具。现在，让我们看看 Ruby 如何允许我们执行另一个强大的操作：处理文件。
- en: File manipulation
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件操作
- en: 'Some decades ago, one of the few options (if not the only option) for saving
    information was storing it in files. All sort of data was stored in these files:
    passwords, user data, config data, and more. Saving information in plain text
    files was, at the time, the most feasible option to save information. It all came
    to an end with the advent of **databases** (**DBs**) and DB usage. DBs became
    a more feasible and popular option, and they now came in different flavors. While
    this is still true today, using a DB comes with a quite expensive cost. I’m not
    only talking about a monetary cost – I’m talking about it in terms of memory,
    disk, and processing time. So, in certain use cases, it’s still a much better
    option to use plain text files to store information. To that purpose, most programming
    languages, including Ruby and PHP, make this task straightforward. Let’s take
    a look at how we can take advantage of the file manipulation tooling that comes
    with Ruby.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年前，保存信息的一个少数选项（如果不是唯一选项）是将信息存储在文件中。所有种类的数据都存储在这些文件中：密码、用户数据、配置数据等等。在当时，将信息保存在纯文本文件中是保存信息最可行的方法。但随着数据库（**DBs**）的出现和数据库的使用，这一切都结束了。数据库成为了一个更可行且更受欢迎的选项，并且现在有不同类型的数据库。尽管今天这仍然是事实，但使用数据库的成本相当高。我不仅是在谈论货币成本——我是在谈论内存、磁盘和处理器时间。因此，在某些用例中，使用纯文本文件来存储信息仍然是一个更好的选择。为此，大多数编程语言，包括
    Ruby 和 PHP，都使这项任务变得简单直接。让我们看看我们如何利用 Ruby 伴随的文件操作工具。
- en: 'Let’s suppose we wanted to grab a user’s first name from a file. For this,
    we must create a file. The file will be called `name.txt`. We could name it without
    the file extension (`.txt`) and it would have no impact on the functionality of
    our script, but it’s always a good practice to give hints to our fellow developers
    as to the intent of our script. It’s pretty easy to assume that a file named `name.txt`
    will most probably contain text, and that text will be a name. So, let’s create
    the text file and add some text to it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要从一个文件中获取用户的第一个名字。为此，我们必须创建一个文件。这个文件将被命名为 `name.txt`。我们也可以不使用文件扩展名（`.txt`）来命名它，但这不会对我们的脚本功能产生影响，但始终给我们的同事开发者一些提示，了解我们脚本的目的是一个好习惯。很容易假设一个名为
    `name.txt` 的文件很可能包含文本，并且这些文本将是一个名字。所以，让我们创建这个文本文件并向其中添加一些文本：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let’s focus on opening this file. There are different modes when opening
    files in Ruby, but for now, we will focus on reading data from the file. Let’s
    create a file called `reading_file.rb` and add the following code to it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于打开这个文件。在 Ruby 中打开文件有不同的模式，但就目前而言，我们将专注于从文件中读取数据。让我们创建一个名为 `reading_file.rb`
    的文件，并向其中添加以下代码：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'First, we have to get Ruby to open the file so that it can handle and manipulate
    it. The `File.open()` method does exactly that. But now, we need to fetch the
    file’s contents to be able to use it in our script. First, we will assign the
    `File.open()` result to a variable. Our code will look like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须让 Ruby 打开文件，以便它可以处理和操作它。`File.open()` 方法正是这样做的。但现在，我们需要获取文件内容以便在脚本中使用它。首先，我们将
    `File.open()` 的结果分配给一个变量。我们的代码将如下所示：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With that, we saved the result of the `File.open()` method to the `file_instance`
    variable, which, in turn, now lets us have access to the file’s contents. Ruby
    has a very intuitive method for grabbing a file’s contents: the `read()` method.
    The `read()` method grabs a file’s contents and casts it into a string. So, let’s
    grab that string and output it to make sure our script is working. Now, our script
    looks like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们将 `File.open()` 方法的输出保存到了 `file_instance` 变量中，这反过来又让我们能够访问文件的内容。Ruby
    有一个非常直观的方法来获取文件内容：`read()` 方法。`read()` 方法获取文件内容并将其转换为字符串。所以，让我们获取这个字符串并将其输出，以确保我们的脚本正在正常工作。现在，我们的脚本看起来是这样的：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we were to run our script on the shell with `ruby reading_file.rb`, the
    output would be as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 shell 中用 `ruby reading_file.rb` 运行我们的脚本，输出将如下所示：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And voilà – we have successfully read a value from a text file. In the code,
    we got Ruby to open the `name.txt` file. Then, from the instance we got as a result,
    we obtained the original file’s contents as a string. Lastly, we used the value
    in a string to output something useful to the user. We can get fancy and capitalize
    the username with our already acquainted `capitalize()` method. We can also test
    that our script is reading from the `name.txt` file. Let’s open the `name.txt`
    file and change the name contained in the file to something else:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'And voilà – we have successfully read a value from a text file. In the code,
    we got Ruby to open the `name.txt` file. Then, from the instance we got as a result,
    we obtained the original file’s contents as a string. Lastly, we used the value
    in a string to output something useful to the user. We can get fancy and capitalize
    the username with our already acquainted `capitalize()` method. We can also test
    that our script is reading from the `name.txt` file. Let’s open the `name.txt`
    file and change the name contained in the file to something else:'
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, let’s run our script in the shell again with `ruby reading_file.rb`. The
    output should be as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'Now, let’s run our script in the shell again with `ruby reading_file.rb`. The
    output should be as follows:'
- en: '[PRE26]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: paul smith
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: paul smith
- en: '[PRE27]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: full_name.rb
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: full_name.rb
- en: file_instance = File.open("full_name.txt")
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("full_name.txt")
- en: user_name = file_instance.read
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: user_name = file_instance.read
- en: 'puts "The user''s name is #{user_name}"'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "The user''s name is #{user_name}"'
- en: '[PRE28]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The user's name is paul smith
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: The user's name is paul smith
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'puts "The user''s name is #{user_name.capitalize}"'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "The user''s name is #{user_name.capitalize}"'
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The user's name is Paul smith
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: The user's name is Paul smith
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: full_name.rb
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: full_name.rb
- en: file_instance = File.open("full_name.txt")
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("full_name.txt")
- en: user_name = file_instance.read.split
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: user_name = file_instance.read.split
- en: 'puts "The user''s name is #{user_name[0]} #{user_name[1]}"'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "The user''s name is #{user_name[0]} #{user_name[1]}"'
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: full_name.rb
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: full_name.rb
- en: file_instance = File.open("full_name.txt")
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("full_name.txt")
- en: user_name = file_instance.read.split.map(&:capitalize)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: user_name = file_instance.read.split.map(&:capitalize)
- en: 'puts "The user''s name is #{user_name}"'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "The user''s name is #{user_name}"'
- en: '[PRE33]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The user's name is ["Paul", "Smith"]
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: The user's name is ["Paul", "Smith"]
- en: '[PRE34]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: full_name.rb
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: full_name.rb
- en: file_instance = File.open("full_name.txt")
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("full_name.txt")
- en: user_name = file_instance.read.split.map(&:capitalize).join(' ')
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: user_name = file_instance.read.split.map(&:capitalize).join(' ')
- en: 'puts "The user''s name is #{user_name}"'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "The user''s name is #{user_name}"'
- en: '[PRE35]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The user's name is Paul Smith
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: The user's name is Paul Smith
- en: '[PRE36]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: paul isaac smith
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: paul isaac smith
- en: '[PRE37]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The user's name is Paul Isaac Smith
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: The user's name is Paul Isaac Smith
- en: '[PRE38]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: benjamin eliseo pineda avendaño
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: benjamin eliseo pineda avendaño
- en: '[PRE39]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The user's name is Benjamin Eliseo Pineda Avendaño
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: The user's name is Benjamin Eliseo Pineda Avendaño
- en: '[PRE40]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: counter.rb
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: counter.rb
- en: file_instance = File.open("counter.txt", "w")
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("counter.txt", "w")
- en: counter = file_instance.read
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: counter = file_instance.read
- en: 'puts "Time(s) script has been run: #{counter}"'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "Time(s) script has been run: #{counter}"'
- en: '[PRE41]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'counter.rb:3:in ''read'': not opened for reading (IOError)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'counter.rb:3:in ''read'': not opened for reading (IOError)'
- en: from counter.rb:3:in '<main>'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: from counter.rb:3:in '<main>'
- en: '[PRE42]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: counter.rb
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: counter.rb
- en: file_instance = File.open("counter.txt", "a+")
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("counter.txt", "a+")
- en: counter = file_instance.read
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: counter = file_instance.read
- en: 'puts "Time(s) script has been run: #{counter}"'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "Time(s) script has been run: #{counter}"'
- en: '[PRE43]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Time(s) script has been run:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 'Time(s) script has been run:'
- en: '[PRE44]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: counter.rb
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: counter.rb
- en: file_instance = File.open("counter.txt", "a+")
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("counter.txt", "a+")
- en: counter = file_instance.read.to_i
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: counter = file_instance.read.to_i
- en: 'puts "Time(s) script has been run: #{counter}"'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "Time(s) script has been run: #{counter}"'
- en: '[PRE45]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Time(s) script has been run: 0'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'Time(s) script has been run: 0'
- en: '[PRE46]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: counter.rb
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: counter.rb
- en: file_instance = File.open("counter.txt", "a+")
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("counter.txt", "a+")
- en: counter = file_instance.read.to_i
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: counter = file_instance.read.to_i
- en: 'puts "Time(s) script has been run: #{counter}"'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "Time(s) script has been run: #{counter}"'
- en: counter += 1
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: counter += 1
- en: File.write("counter.txt", counter)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: File.write("counter.txt", counter)
- en: '[PRE47]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Time(s) script has been run: 0'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'Time(s) script has been run: 0'
- en: 'Time(s) script has been run: 1'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 'Time(s) script has been run: 1'
- en: 'Time(s) script has been run: 2'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'Time(s) script has been run: 2'
- en: 'Time(s) script has been run: 3'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'Time(s) script has been run: 3'
- en: '[PRE48]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: command_line.rb
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: command_line.rb
- en: input_arguments = ARGV
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: input_arguments = ARGV
- en: 'puts "Hello #{input_arguments[0]}"'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "Hello #{input_arguments[0]}"'
- en: '[PRE49]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: ruby command_line.rb
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ruby command_line.rb
- en: '[PRE50]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Hello
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Hello
- en: '[PRE51]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: ruby command_line.rb marco
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ruby command_line.rb marco
- en: '[PRE52]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Hello marco
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Hello marco
- en: '[PRE53]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: ruby command_line.rb ben franco
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ruby command_line.rb ben franco
- en: '[PRE54]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Hello ben
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Hello ben
- en: '[PRE55]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: command_line.rb
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: command_line.rb
- en: input_arguments = ARGV
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: input_arguments = ARGV
- en: 'puts "Hello #{input_arguments.map(&:capitalize).join('' '')}"'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "Hello #{input_arguments.map(&:capitalize).join('' '')}"'
- en: '[PRE56]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: ruby command_line.rb ben aaron jones
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: ruby command_line.rb ben aaron jones
- en: '[PRE57]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Hello Ben Aaron Jones
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Hello Ben Aaron Jones
- en: '[PRE58]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: ruby command_line.rb gaby audra luna WOODHOUSE
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: ruby command_line.rb gaby audra luna WOODHOUSE
- en: '[PRE59]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Hello Gaby Audra Luna Woodhouse
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Hello Gaby Audra Luna Woodhouse
- en: '[PRE60]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: ruby command_line.rb al
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: ruby command_line.rb al
- en: '[PRE61]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Hello Al
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Hello Al
- en: '[PRE62]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: validate_arguments.rb
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: validate_arguments.rb
- en: input_arguments = ARGV
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: input_arguments = ARGV
- en: name = input_arguments.first
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: name = input_arguments.first
- en: cycle_times = input_arguments.last.to_i
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times = input_arguments.last.to_i
- en: cycle_times.times { puts name }
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times.times { 输出 name }
- en: '[PRE63]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: ruby validate_arguments.rb gabriela 5
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: ruby validate_arguments.rb gabriela 5
- en: '[PRE64]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: gabriela
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: gabriela
- en: gabriela
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: gabriela
- en: gabriela
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: gabriela
- en: gabriela
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: gabriela
- en: gabriela
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: gabriela
- en: '[PRE65]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: ruby validate_arguments.rb 5 gabriela
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: ruby validate_arguments.rb 5 gabriela
- en: '[PRE66]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: ruby validate_arguments.rb
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: ruby validate_arguments.rb
- en: '[PRE67]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: validate_arguments.rb
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: validate_arguments.rb
- en: if ARGV.size != 2
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: if ARGV.size != 2
- en: puts "Error. The script has failed!"
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 输出错误。脚本执行失败！
- en: end
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: input_arguments = ARGV
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: input_arguments = ARGV
- en: name = input_arguments.first
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: name = input_arguments.first
- en: cycle_times = input_arguments.last.to_i
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times = input_arguments.last.to_i
- en: cycle_times.times { puts name }
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times.times { 输出 name }
- en: '[PRE68]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Error. The script has failed!
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 错误。脚本执行失败！
- en: '[PRE69]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: validate_arguments.rb
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: validate_arguments.rb
- en: if ARGV.size != 2
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: if ARGV.size != 2
- en: puts "Error. The script has failed!"
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "错误。脚本执行失败！"
- en: end
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: input_arguments = ARGV
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: input_arguments = ARGV
- en: name = input_arguments.first
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: name = input_arguments.first
- en: cycle_times = input_arguments.last.to_i
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times = input_arguments.last.to_i
- en: cycle_times.times { puts name }
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times.times { 输出 name }
- en: puts "But we are still running the script"
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "但我们仍在运行脚本"
- en: '[PRE70]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: ruby validate_arguments.rb
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: ruby validate_arguments.rb
- en: '[PRE71]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Error. The script has failed!
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 错误。脚本执行失败！
- en: But we are still running the script.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们仍在运行脚本。
- en: '[PRE72]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: validate_arguments.rb
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: validate_arguments.rb
- en: if ARGV.size != 2
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: if ARGV.size != 2
- en: puts "Error. The script has failed!"
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 输出。错误。脚本执行失败！
- en: 'puts "Usage: ruby validate_arguments.rb name times_to_repeat"'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 输出。用法：ruby validate_arguments.rb name times_to_repeat
- en: Kernel::exit(1)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Kernel::exit(1)
- en: end
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: input_arguments = ARGV
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: input_arguments = ARGV
- en: name = input_arguments.first
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: name = input_arguments.first
- en: cycle_times = input_arguments.last.to_i
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times = input_arguments.last.to_i
- en: cycle_times.times { puts name }
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times.times { 输出 name }
- en: puts "But we are still running the script"
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "但我们仍在运行脚本"
- en: '[PRE73]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: ruby validate_arguments.rb
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: ruby validate_arguments.rb
- en: '[PRE74]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Error. The script has failed!
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 错误。脚本执行失败！
- en: 'Usage: ruby validate_arguments.rb name times_to_repeat'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 用法：ruby validate_arguments.rb name times_to_repeat
- en: '[PRE75]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: ruby validate_arguments.rb 3 henry
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: ruby validate_arguments.rb 3 henry
- en: '[PRE76]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: We are still running the script.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍在运行脚本。
- en: '[PRE77]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: validate_arguments.rb
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: validate_arguments.rb
- en: if ARGV.size != 2
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: if ARGV.size != 2
- en: puts "Error. The script has failed!"
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "错误。脚本执行失败！"
- en: 'puts "Usage: ruby validate_arguments.rb name times_to_repeat"'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "用法：ruby validate_arguments.rb name times_to_repeat"
- en: Kernel::exit(1)
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Kernel::exit(1)
- en: end
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: input_arguments = ARGV
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: input_arguments = ARGV
- en: name = input_arguments.first
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: name = input_arguments.first
- en: cycle_times = input_arguments.last.to_i
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times = input_arguments.last.to_i
- en: if cycle_times < 1
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: if cycle_times < 1
- en: puts "Error. The second argument has to be an integer!"
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "错误。第二个参数必须是一个整数！"
- en: 'puts "Usage: ruby validate_arguments.rb name times_to_repeat"'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "用法：ruby validate_arguments.rb name times_to_repeat"
- en: Kernel::exit(1)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Kernel::exit(1)
- en: end
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: cycle_times.times { puts name }
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: cycle_times.times { 输出 name }
- en: puts "But we are still running the script"
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 输出。我们仍在运行脚本
- en: '[PRE78]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: ruby validate_arguments.rb 3 henry
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: ruby validate_arguments.rb 3 henry
- en: '[PRE79]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Error. The second argument has to be an integer!
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 错误。第二个参数必须是一个整数！
- en: 'Usage: ruby validate_arguments.rb name times_to_repeat'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 用法：ruby validate_arguments.rb name times_to_repeat
- en: '[PRE80]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: user_input.rb
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: user_input.rb
- en: puts "Enter your name:"
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "输入你的名字："
- en: name = gets
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: name = gets
- en: 'puts "Hello #{name}"'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '输出 "Hello #{name}"'
- en: '[PRE81]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: ruby user_input.rb
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: ruby user_input.rb
- en: '[PRE82]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Enter your name:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的名字：
- en: '[PRE83]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Enter your name:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的名字：
- en: brandon
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: brandon
- en: '[PRE84]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Enter your name:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的名字：
- en: brandon
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: brandon
- en: Hello brandon
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Hello brandon
- en: '[PRE85]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: user_input.rb
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: user_input.rb
- en: puts "Enter your name:"
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 输出。输入你的名字：
- en: name = gets
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: name = gets
- en: 'puts "Hello #{name}" if name == "brandon"'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '输出 "Hello #{name}" if name == "brandon"'
- en: '[PRE86]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: ruby user_input.rb
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: ruby user_input.rb
- en: '[PRE87]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Enter your name:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的名字：
- en: brandon
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: brandon
- en: '[PRE88]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: user_input.rb
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: user_input.rb
- en: puts "Enter your name:"
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 输出。输入你的名字：
- en: name = gets.chomp
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: name = gets.chomp
- en: 'puts "Hello #{name}" if name == "brandon"'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '输出 "Hello #{name}" if name == "brandon"'
- en: '[PRE89]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: ruby user_input.rb
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: ruby user_input.rb
- en: '[PRE90]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Enter your name:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的名字：
- en: brandon
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: brandon
- en: Hello brandon
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Hello brandon
- en: '[PRE91]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: user_input.rb
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: user_input.rb
- en: puts "Enter your name:"
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 输出。输入你的名字：
- en: name = gets.chomp
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: name = gets.chomp
- en: 'puts "Hello #{name}" if name == "brandon"'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '输出 "Hello #{name}" if name == "brandon"'
- en: puts "Enter the number of times to try the process"
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "输入尝试该过程的次数"
- en: repeat_n = gets.chomp.to_i
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: repeat_n = gets.chomp.to_i
- en: repeat_n.times do
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: repeat_n.times do
- en: puts "trying…"
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 输出。尝试中…
- en: sleep(1)
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: sleep(1)
- en: end
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '[PRE92]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: ruby user_input.rb
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: ruby user_input.rb
- en: '[PRE93]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Enter your name:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的名字：
- en: brandon
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: brandon
- en: Hello brandon
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: Hello brandon
- en: 'Enter times you would like to try the process:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你想尝试该过程的次数：
- en: '3'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: trying...
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试中…
- en: trying...
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试中…
- en: trying...
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试中…
- en: '[PRE94]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: main.rb
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: main.rb
- en: 'Section 1: Ruby version validation'
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1节：Ruby版本验证
- en: if Gem::Version.new(RUBY_VERSION) < Gem::Version.new('2.6')
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: if Gem::Version.new(RUBY_VERSION) < Gem::Version.new('2.6')
- en: puts "Please verify the Ruby version!"
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 "请验证Ruby版本！"
- en: Kernel::exit(1)
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: Kernel::exit(1)
- en: end
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: 'Section 2: Open or create user_name file'
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2节：打开或创建user_name文件
- en: file_instance = File.open("user_name.txt", "a+")
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("user_name.txt", "a+")
- en: user_name = file_instance.read
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: user_name = file_instance.read
- en: 'Section 3: Empty name validation'
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3节：空名称验证
- en: if user_name.empty?
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: if user_name.empty?
- en: puts "Enter your name:"
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: puts "输入您的名字："
- en: name = gets.chomp
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: name = gets.chomp
- en: File.write("user_name.txt", name)
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: File.write("user_name.txt", name)
- en: '# Section 4: Program main log'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '# 第4节：程序主日志'
- en: 'File.write("main.log", "Writing #{name} as the entry to user_name.txt at #{Time.now}\n",
    mode: "a")'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 'File.write("main.log", "Writing #{name} as the entry to user_name.txt at #{Time.now}\n",
    mode: "a")'
- en: user_name =  name
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: user_name =  name
- en: end
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: 'Section 5: Program title'
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5节：程序标题
- en: 'puts "Hello #{user_name.capitalize}"'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "Hello #{user_name.capitalize}"'
- en: puts "Welcome to Chapter 4"
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: puts "欢迎来到第4章"
- en: puts "Please enter how many times you would like to make a log entry"
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: puts "请输入您希望创建日志条目次数"
- en: 'Section 6: Program cycle'
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6节：程序周期
- en: repeat_n = gets.chomp.to_i
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: repeat_n = gets.chomp.to_i
- en: repeat_n.times do
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: repeat_n.times do
- en: puts "Adding log entry..."
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: puts "正在添加日志条目..."
- en: 'File.write("main.log", "Adding entry to log at #{Time.now}\n", mode: "a")'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 'File.write("main.log", "Adding entry to log at #{Time.now}\n", mode: "a")'
- en: sleep(1)
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: sleep(1)
- en: end
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '[PRE95]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: …
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: 'Section 1: Ruby version validation'
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1节：Ruby 版本验证
- en: if Gem::Version.new(RUBY_VERSION) < Gem::Version.new('2.6')
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: if Gem::Version.new(RUBY_VERSION) < Gem::Version.new('2.6')
- en: puts "Please verify the Ruby version!"
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: puts "请验证 Ruby 版本！"
- en: Kernel::exit(1)
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: Kernel::exit(1)
- en: end
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: …
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '[PRE96]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: …
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: 'Section 2: Open or create user_name file'
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2节：打开或创建 user_name 文件
- en: file_instance = File.open("user_name.txt", "a+")
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: file_instance = File.open("user_name.txt", "a+")
- en: user_name = file_instance.read
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: user_name = file_instance.read
- en: …
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '[PRE97]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: …
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: 'Section 3: Empty name validation'
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3节：空名称验证
- en: if user_name.empty?
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: if user_name.empty?
- en: puts "Enter your name:"
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: puts "输入您的名字："
- en: name = gets.chomp
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: name = gets.chomp
- en: File.write("user_name.txt", name)
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: File.write("user_name.txt", name)
- en: '# Section 4: Program main log'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '# 第4节：程序主日志'
- en: 'File.write("main.log", "Writing #{name} as the entry to user_name.txt at #{Time.now}\n",
    mode: "a")'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 'File.write("main.log", "Writing #{name} as the entry to user_name.txt at #{Time.now}\n",
    mode: "a")'
- en: user_name =  name
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: user_name =  name
- en: end
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: …
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '[PRE98]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: …
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: 'Section 5: Program title'
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5节：程序标题
- en: 'puts "Hello #{user_name.capitalize}"'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 'puts "Hello #{user_name.capitalize}"'
- en: puts "Welcome to Chapter 4"
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: puts "欢迎来到第4章"
- en: puts "Please enter how many times you would like to make a log entry"
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: puts "请输入您希望创建日志条目次数"
- en: …
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '[PRE99]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: …
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: 'Section 6: Program cycle'
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6节：程序周期
- en: repeat_n = gets.chomp.to_i
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: repeat_n = gets.chomp.to_i
- en: repeat_n.times do
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: repeat_n.times do
- en: puts "Adding log entry..."
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: puts "正在添加日志条目..."
- en: 'File.write("main.log", "Adding entry to log at #{Time.now}\n", mode: "a")'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 'File.write("main.log", "Adding entry to log at #{Time.now}\n", mode: "a")'
- en: sleep(1)
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: sleep(1)
- en: end
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: …
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '[PRE100]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: ruby main.rb
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: ruby main.rb
- en: '[PRE101]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Enter your name:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的名字：
- en: '[PRE102]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Hello Daniel
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: Hello Daniel
- en: Welcome to chapter 4
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到第4章
- en: Please enter how many times you would like to make a log entry
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 请输入您希望创建日志条目次数
- en: '[PRE103]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Adding log entry...
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 正在添加日志条目...
- en: Adding log entry...
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 正在添加日志条目...
- en: '[PRE104]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: daniel
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: daniel
- en: '[PRE105]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Writing daniel as the entry to user_name.txt at 2022-12-25 16:33:24 -0600
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 将 daniel 写入 user_name.txt 作为条目于 2022-12-25 16:33:24 -0600
- en: Adding entry to log at 2022-12-25 16:34:53 -0600
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 正在日志中添加条目于 2022-12-25 16:34:53 -0600
- en: Adding entry to log at 2022-12-25 16:34:54 -0600
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 正在日志中添加条目于 2022-12-25 16:34:54 -0600
- en: '[PRE106]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: ruby main.rb
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: ruby main.rb
- en: '[PRE107]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Hello Daniel
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: Hello Daniel
- en: Welcome to Chapter 4
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到第4章
- en: Please enter how many times you would like to make a log entry
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 请输入您希望创建日志条目次数
- en: '[PRE108]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Adding log entry...
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 正在添加日志条目...
- en: '[PRE109]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
