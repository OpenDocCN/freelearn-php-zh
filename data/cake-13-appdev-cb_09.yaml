- en: Chapter 9. Internationalizing Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。国际化应用程序
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Internationalizing controller and view texts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化控制器和视图文本
- en: Internationalizing model validation messages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化模型验证消息
- en: Translating strings with dynamic content
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译包含动态内容的字符串
- en: Extracting and translating text
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取和翻译文本
- en: Translating database records with the Translate behavior
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“翻译行为”翻译数据库记录
- en: Setting and remembering the language
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和记住语言
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter includes a set of recipes that allow the reader to internationalize
    all aspects of their CakePHP applications, including static content, such as those
    available in views, and dynamic content, such as database records.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含一系列食谱，允许读者国际化他们 CakePHP 应用程序的所有方面，包括静态内容，如视图中的内容，以及动态内容，如数据库记录。
- en: The first two recipes show how to allow text that is part of any CakePHP view
    or model validation messages to be ready for translation. The third recipe shows
    how to translate more complex expressions. The fourth recipe shows how to run
    CakePHP's built-in tools to extract all static content that needs translation,
    and then translate that content to different languages. The fifth recipe shows
    how to translate database records. Finally, the last recipe shows how to allow
    users to change the current application language.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个食谱展示了如何允许任何 CakePHP 视图或模型验证消息中的文本准备好翻译。第三个食谱展示了如何翻译更复杂的表达式。第四个食谱展示了如何运行 CakePHP
    内置工具提取所有需要翻译的静态内容，然后将该内容翻译成不同的语言。第五个食谱展示了如何翻译数据库记录。最后，最后一个食谱展示了如何允许用户更改当前应用程序的语言。
- en: Internationalizing controller and view texts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化控制器和视图文本
- en: In this recipe, we will learn how to internationalize text that is located in
    our application views, and have that content ready for translation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何国际化位于我们应用程序视图中的文本，并使该内容准备好翻译。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through this recipe, we need some data to work with. Create a table named
    `articles` with the following SQL statement:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一些数据来操作。使用以下 SQL 语句创建一个名为 `articles` 的表：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now add some sample data to this table with the following statement:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用以下语句向此表添加一些示例数据：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the controller for this table in a file named `articles_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `app/controllers` 文件夹中创建一个名为 `articles_controller.php` 的控制器文件，内容如下：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file named `article.php` and place it in your `app/models` folder,
    with the following contents:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `app/models` 文件夹中创建一个名为 `article.php` 的文件，内容如下：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a folder named `articles` in your `app/views` folder, and inside that
    folder create a file named `index.ctp` with the following contents:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `app/views` 文件夹中创建一个名为 `articles` 的文件夹，并在该文件夹内创建一个名为 `index.ctp` 的文件，内容如下：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file named `add.ctp` and place it in your `app/views/articles` folder,
    with the following contents:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `app/views/articles` 文件夹中创建一个名为 `add.ctp` 的文件，内容如下：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a file named `view.ctp` and place it in your `app/views/articles` folder,
    with the following contents:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `app/views/articles` 文件夹中创建一个名为 `view.ctp` 的文件，内容如下：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `articles_controller.php` file located in your `app/controllers` folder
    and make the following changes to the `add()` method:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑位于您的 `app/controllers` 文件夹中的 `articles_controller.php` 文件，并对 `add()` 方法做出以下更改：
- en: '[PRE7]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit the file `add.ctp` located in your `app/views/articles` folder and make
    the following changes:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑位于您的 `app/views/articles` 文件夹中的 `add.ctp` 文件，并做出以下更改：
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, edit the file `index.ctp` located in your `app/views/articles` folder
    and make the following changes:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，编辑位于您的 `app/views/articles` 文件夹中的 `index.ctp` 文件，并做出以下更改：
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you now browse to `http://localhost/articles`, you should see a paginated
    list of articles, as shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在浏览到 `http://localhost/articles`，您应该会看到一个分页的文章列表，如下面的截图所示：
- en: '![How to do it...](img/1926_9_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1926_9_01.jpg)'
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'CakePHP offers two main methods (amongst others) to allow developers to specify
    content that can be translated: `__()` and `__n()`. The naming of these methods
    may seem a bit odd, but they are largely influenced by Perl''s implementation
    of `gettext`, a tool that is part of the GNU Translation Project.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 提供了两种主要方法（以及其他方法）来允许开发者指定可翻译的内容：`__()` 和 `__n()`。这些方法的命名可能看起来有点奇怪，但它们在很大程度上受到了
    Perl 的 `gettext` 实现的影响，`gettext` 是 GNU 翻译项目的一部分。
- en: 'The `__()` method is used to translate static text, and takes up to two arguments:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`__()` 方法用于翻译静态文本，并接受最多两个参数：'
- en: '| Argument | Purpose |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 目的 |'
- en: '| --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `singular` | Text that should be translated to the current language. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `singular` | 应翻译为当前语言的文本。 |'
- en: '| `return` | If set to `true`, the translated text will be returned instead
    of echoed to the client. Defaults to `false`. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `return` | 如果设置为 `true`，则翻译的文本将被返回而不是输出到客户端。默认为 `false`。 |'
- en: 'The `__n()` method is used to translate static text that could change if a
    certain value is either singular or plural, and takes up to four arguments:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`__n()` 方法用于翻译可能因某个值是单数还是复数而改变的静态文本，并接受最多四个参数：'
- en: '| Argument | Purpose |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 目的 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `singular` | Text that should be used if the given value in `count` is `singular`,
    and that will be translated to the current language when used. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `singular` | 如果 `count` 中的给定值为单数时，应使用的文本，并且在使用时将翻译为当前语言。 |'
- en: '| `plural` | Text that should be used if the given value in `count` is `plural`,
    and that will be translated to the current language when used. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `plural` | 如果 `count` 中的给定值为复数时，应使用的文本，并且在使用时将翻译为当前语言。 |'
- en: '| `count` | A variable or numeric value that holds the value that should be
    used to determine if either the `singular` or `plural` text is to be used. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `count` | 一个变量或数值，它包含用于确定是否使用 `singular` 或 `plural` 文本的值。 |'
- en: '| `return` | If set to `true`, the translated text will be returned instead
    of echoed to the client. Defaults to `false`. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `return` | 如果设置为 `true`，则翻译的文本将被返回而不是输出到客户端。默认为 `false`。 |'
- en: We start by changing the flash messages in the `ArticlesController` class to
    use the `__()` method, specifying that the translated string should be returned
    rather than echoed to the client. We continue by modifying the `add.ctp` view
    so that all labels and the form legend can be translated.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将 `ArticlesController` 类中的闪存消息更改为使用 `__()` 方法，指定应返回翻译字符串而不是输出到客户端。然后，我们修改
    `add.ctp` 视图，以便所有标签和表单标题都可以进行翻译。
- en: Similarly, we wrap the title in the `index.ctp` view with the translator function.
    We then use the first parameter of the `counter(), next()`, and `prev()` methods
    that are part of the `PaginatorHelper` class to pass the translated version of
    the appropriate pagination text. Finally, we use the `__n()` function to choose
    the correct translated text depending on the value of the `count` variable.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们在 `index.ctp` 视图中使用翻译函数包裹标题。然后，我们使用 `PaginatorHelper` 类中 `counter()`、`next()`
    和 `prev()` 方法的第一个参数来传递适当的分页文本的翻译版本。最后，我们使用 `__n()` 函数根据 `count` 变量的值选择正确的翻译文本。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When using the `__n()` function you should only use a variable as its third
    parameter. Using expressions (including array indexes) may produce unexpected
    results when running CakePHP's extractor shell, which is covered in the recipe
    *Extracting and translating text*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `__n()` 函数时，您应仅将其第三个参数用作变量。当运行 CakePHP 的提取器外壳时，使用表达式（包括数组索引）可能会产生意外的结果，这在配方
    *提取和翻译文本* 中有介绍。
- en: Domains and categories
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域和类别
- en: The translation functions used in this recipe are actually wrappers around the
    `translate()` method of CakePHP's built-in `I18n` class. This method not only
    allows simple translations, but also allows the developer to specify the domain
    from which translated texts are obtained, and the category to which the text to
    be translated belongs to.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中使用的翻译函数实际上是 CakePHP 内置 `I18n` 类的 `translate()` 方法的包装器。此方法不仅允许简单的翻译，还允许开发者指定获取翻译文本的域，以及要翻译的文本所属的类别。
- en: 'Domains allow you to separate groups of translation text into separate files.
    By default, when no domain is specified, CakePHP assumes a domain named `default`.
    If you want to specify the domain in which a translated text should be looked
    for, use the `__d()` and `__dn()` translation functions. For example, to look
    for a translated text in the `my_plugin` domain, you would do:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 域允许您将翻译文本分组到单独的文件中。默认情况下，当未指定域时，CakePHP 假设一个名为 `default` 的域。如果您想指定翻译文本应查找的域，请使用
    `__d()` 和 `__dn()` 翻译函数。例如，要在 `my_plugin` 域中查找翻译文本，您将执行以下操作：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Categories allow for a further grouping of translated texts by grouping the
    translation files into separate directories, and provide further meaning to the
    translated text. By default, CakePHP will assume that translated texts belong
    to the `LC_MESSAGES` category. If you wish to change the category, use the `__dc()`
    and `__dcn()` translator functions, by setting its next-to-last argument, `return`,
    to the desired category, which can be any of the following defined constants with
    the respective fixed value:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 类别允许通过将翻译文件分组到单独的目录中来进一步对翻译文本进行分组，并为翻译文本提供更多的意义。默认情况下，CakePHP将假设翻译文本属于`LC_MESSAGES`类别。如果你希望更改类别，请使用`__dc()`和`__dcn()`翻译函数，通过设置其倒数第二个参数`return`为所需的类别，这可以是以下定义的任何常量，具有相应的固定值：
- en: '`LC_ALL: 0`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LC_ALL: 0`'
- en: '`LC_COLLATE: 1`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LC_COLLATE: 1`'
- en: '`LC_CTYPE: 2`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LC_CTYPE: 2`'
- en: '`LC_MONETARY: 3`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LC_MONETARY: 3`'
- en: '`LC_NUMERIC: 4`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LC_NUMERIC: 4`'
- en: '`LC_TIME: 5`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LC_TIME: 5`'
- en: '`LC_MESSAGES: 6`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LC_MESSAGES: 6`'
- en: 'For example, to look for a translated text in the `default` domain and the
    `LC_MESSAGES` category you would do:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了在`default`域和`LC_MESSAGES`类别中查找翻译文本，你会这样做：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When looking forward to using categories, always use the category value previously
    given in the list rather than the constant name, as this constant is platform-dependent.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当展望使用类别时，始终使用列表中给出的先前给定的类别值，而不是常量名称，因为这个常量是平台相关的。
- en: See also
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Internationalizing model validation messages*'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*国际化模型验证消息*'
- en: '*Extracting and translating text*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提取和翻译文本*'
- en: Internationalizing model validation messages
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化模型验证消息
- en: 'In this recipe, we will learn different approaches for the same need: translating
    model validation messages.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习不同的方法来实现相同的需求：翻译模型验证消息。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, we need a basic application skeleton to work with.
    Go through the previous recipe.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个菜谱，我们需要一个基本的应用骨架来工作。请参阅之前的菜谱。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit the file `article.php` located in your `app/models` folder and make the
    following changes to the `validate` property:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑位于你的`app/models`文件夹中的`article.php`文件，并对`validate`属性进行以下更改：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There are two ways to have validation messages translated. The first one requires
    you to override the model constructor by adding the following implementation to
    the `Article` class defined in your `app/models/article.php` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以将验证消息翻译成其他语言。第一种方式需要你通过在`app/models/article.php`文件中定义的`Article`类中添加以下实现来覆盖模型构造函数：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The alternative way to translate validation messages is to move these messages
    to the view. Instead of overriding and defining the messages in the model constructor,
    edit your `app/views/articles/add.ctp` view file and make the following changes
    to it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译验证消息的另一种方式是将这些消息移动到视图中。而不是在模型构造函数中覆盖并定义消息，编辑你的`app/views/articles/add.ctp`视图文件，并对其进行以下更改：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Both ways should produce the same result. If you now browse to `http://localhost/articles/add`
    and submit the form without entering any values, you should see the validation
    messages shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方式应该产生相同的结果。如果你现在浏览到`http://localhost/articles/add`并提交表单而不输入任何值，你应该会看到以下截图所示的验证消息：
- en: '![How to do it...](img/1926_9_02.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_9_02.jpg)'
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Before attempting to provide the error messages for each validation rule, we
    need to name each of our rules. We do so by modifying the `Article` model so that
    each rule defined is indexed by a name. In our case we choose `required` as the
    name for the validation based on CakePHP's built-in `notEmpty` rule.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试为每个验证规则提供错误消息之前，我们需要为每个规则命名。我们通过修改`Article`模型来实现这一点，使得每个定义的规则都通过名称索引。在我们的例子中，我们选择`required`作为基于CakePHP内置的`notEmpty`规则的验证名称。
- en: 'The first method we used to specify the validation messages shows a practical
    approach when we want to centralize all validation messages in the model. We override
    the model constructor so that from within this constructor we specify the error
    messages that should be translated. We needed to implement the constructor because
    class property values cannot use an expression other than a static assignment,
    so the following block of code would produce a PHP syntax error:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前用来指定验证消息的第一种方法，在我们想要在模型中集中所有验证消息时，展示了一种实用的方法。我们覆盖了模型构造函数，以便在这个构造函数内部指定应该翻译的错误消息。我们需要实现构造函数，因为类属性值不能使用除静态赋值之外的任何表达式，所以以下代码块会产生PHP语法错误：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this constructor implementation, we start by making sure that the `validate`
    property is an array of rules, indexed by field name, and that each set of rules
    is itself an array indexed by name, having as its value another array where at
    the very least the `rule` setting is defined.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在此构造函数实现中，我们首先确保`validate`属性是一个按字段名称索引的规则数组，并且每个规则集本身也是一个按名称索引的数组，其值是另一个数组，其中至少定义了`rule`设置。
- en: Once we are sure that the `validate` property has the right format, we merge
    the validation messages for each rule using the `__()` translator function to
    translate the messages. Finally, we call the parent constructor to ensure that
    the model is built properly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确认`validate`属性具有正确的格式，我们就使用`__()`翻译函数合并每个规则的验证消息。最后，我们调用父构造函数以确保模型正确构建。
- en: The second method described in this recipe moves the responsibility of declaring
    each validation error message to the view, by means of the `error` setting available
    in the `input()` method of the `FormHelper` class. This setting is set to an array,
    indexed by validation name, and the value is set to the error message shown when
    the respective validation fails.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中描述的第二种方法通过`FormHelper`类`input()`方法的`error`设置将声明每个验证错误消息的责任转移到视图。此设置设置为按验证名称索引的数组，其值设置为在相应的验证失败时显示的错误消息。
- en: See also
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Extracting and translating text*'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提取和翻译文本*'
- en: Translating strings with dynamic content
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译包含动态内容的字符串
- en: In this recipe, we will learn how to allow strings consisting of parts that
    are not static, such as variable values, to be translatable.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何允许由非静态部分组成的字符串（如变量值）可翻译。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, we need a basic application skeleton to work with.
    Go through the entire recipe *Internationalizing controller and view texts*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一个基本的应用程序骨架来工作。完成整个食谱*国际化控制器和视图文本*。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit the file `articles_controller.php` located in your `app/controllers` folder
    and make the following changes to the `add()` method:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑位于您的`app/controllers`文件夹中的文件`articles_controller.php`并对`add()`方法做出以下更改：
- en: '[PRE16]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Edit the view file `index.ctp` located in your `app/views/articles` folder
    and make the following changes:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑位于您的`app/views/articles`文件夹中的视图文件`index.ctp`并做出以下更改：
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When looking forward to including dynamic information, such as the value of
    a variable, or in this case, the value of a table field in the database, one can
    be tempted to simply append the variable to the string that is sent to the translator
    function:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当期待包含动态信息，如变量的值，或者在这种情况下，数据库中表字段的值时，人们可能会简单地诱惑将变量附加到发送给翻译函数的字符串中：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is not a valid expression, as CakePHP''s extractor, shown in the recipe
    *Extracting and translating text*, expects only static strings as arguments to
    the translator functions, and other languages may need to re-order the sentence.
    Therefore, we need to use some way of string interpolation, so we chose to use
    the most common ones offered by PHP: the `printf()` and `sprintf()` functions.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个有效的表达式，因为本食谱中显示的CakePHP提取器期望翻译函数的参数仅为静态字符串，并且其他语言可能需要重新排序句子。因此，我们需要使用某种字符串插值方法，所以我们选择了PHP提供的最常见的方法：`printf()`和`sprintf()`函数。
- en: Both functions take the same number and type of arguments. The first argument
    is mandatory and specifies the string to use for interpolation, while any subsequent
    argument is used to produce the final string. The only difference between `printf()`
    and `sprintf()` is that the former will output the resulting string, while the
    later simply returns it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数接受相同数量和类型的参数。第一个参数是必需的，用于指定用于插值的字符串，而任何后续参数都用于生成最终的字符串。`printf()`和`sprintf()`之间的唯一区别是，前者将输出结果字符串，而后者仅返回它。
- en: We start by changing the success message given by the `ArticlesController` class
    whenever an article is created. We use `sprintf()` as we need to send it through
    to the `setFlash()` method of the `Session` component. In this case, we use the
    expression `%s` to interpolate the value of the `title` field for the newly created
    article.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先更改`ArticlesController`类在创建文章时给出的成功消息。我们使用`sprintf()`，因为我们需要将其发送到`Session`组件的`setFlash()`方法。在这种情况下，我们使用表达式`%s`来插值新创建的文章的`title`字段的值。
- en: Similarly, our latest change uses `%d` to interpolate the decimal value of the
    variable `count`, and uses `printf()` to output the result string.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们最新的更改使用 `%d` 来插值变量 `count` 的十进制值，并使用 `printf()` 输出结果字符串。
- en: Reordering and reusing interpolation arguments
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重新排序和重用插值参数
- en: 'When using expressions such as `%s` or `%d` to tell `printf()` and `sprintf()`
    where to place the value of an argument, we have no flexibility in terms of value
    positioning, and no practical way to reuse a value, as each of those expressions
    needs to match a specific argument. Let us assume the following expression:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `%s` 或 `%d` 等表达式来告诉 `printf()` 和 `sprintf()` 如何放置参数的值时，我们在值定位方面没有灵活性，也没有重用值的实际方法，因为每个这样的表达式都需要匹配一个特定的参数。让我们假设以下表达式：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The first `%s` expression gets replaced with the value of the `name` variable,
    while the last `%s` expression is replaced with the value of the `country` variable.
    What if we wanted to change the order of these values in the string without altering
    the order of the arguments that are sent to `printf()?`
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 `%s` 表达式被替换为 `name` 变量的值，而最后一个 `%s` 表达式被替换为 `country` 变量的值。如果我们想在不改变传递给
    `printf()` 的参数顺序的情况下改变这些值在字符串中的顺序，怎么办？
- en: 'We can instead specify which argument is used by an interpolation expression
    by referring to an argument number (name being the argument number `1`, and `country`
    argument number `2`):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过引用参数编号（`name` 是参数编号 `1`，`country` 参数编号 `2`）来指定插值表达式使用的参数：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This also allows us to reuse an argument without having to add it as an extra
    argument to `printf()`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这也允许我们重用参数，而无需将其作为额外参数添加到 `printf()` 中：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See also
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Extracting and translating text*'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提取和翻译文本*'
- en: Extracting and translating text
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取和翻译文本
- en: In this recipe, we will learn how to extract all strings that need translation
    from our CakePHP applications and then perform the actual translations using free
    software.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何从我们的 CakePHP 应用程序中提取所有需要翻译的字符串，然后使用免费软件执行实际的翻译。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, we need a basic application skeleton to work with.
    Go through the entire recipe *Internationalizing controller and view texts*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一个基本的应用程序骨架来工作。完成整个食谱 *国际化控制器和视图文本*。
- en: We also need to have **Poedit** installed in our system. Go to [http://www.poedit.net/download.php](http://www.poedit.net/download.php)
    and download the appropriate file for your operative system.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在我们的系统中安装 **Poedit**。访问 [http://www.poedit.net/download.php](http://www.poedit.net/download.php)
    并下载适合你的操作系统的文件。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'From the command line, and while in your `app/` directory, issue the following
    command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行，并在你的 `app/` 目录中，执行以下命令：
- en: 'If you are on a GNU Linux / Mac / Unix system:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个 GNU Linux / Mac / Unix 系统上：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you are on Microsoft Windows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Microsoft Windows 上：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should accept the default options, as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该接受默认选项，如下面的截图所示：
- en: '![How to do it...](img/1926_9_03.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1926_9_03.jpg)'
- en: After answering the final question, the shell should go through your application
    files and generate a translation template in a file named `default.pot`, placing
    it in your `app/locale` folder.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在回答最后一个问题后，shell 应该遍历你的应用程序文件，并在你的 `app/locale` 文件夹中生成一个名为 `default.pot` 的翻译模板。
- en: 'Open Poedit, and then click on the menu **File**, and option **New catalog
    from POT file**. You should now see an open file dialog box. Browse to your `app/locale`
    folder, select the `default.pot` file, and click the **Open** button. A setting
    window should appear, as shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Poedit，然后点击菜单 **文件**，选择 **从 POT 文件新建目录**。你现在应该看到一个打开文件对话框。浏览到你的 `app/locale`
    文件夹，选择 `default.pot` 文件，然后点击 **打开** 按钮。应该出现一个设置窗口，如下面的截图所示：
- en: '![How to do it...](img/1926_9_04.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1926_9_04.jpg)'
- en: 'In the **Settings** window, enter the desired project name and project information.
    In the **Plural Forms** field you should enter an expression that tells Poedit
    how to recognize plural translations. For most languages, such as English, Spanish,
    German and Portuguese, you should enter the following expression:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **设置** 窗口中，输入所需的项目名称和项目信息。在 **复数形式** 字段中，你应该输入一个表达式，告诉 Poedit 如何识别复数翻译。对于大多数语言，如英语、西班牙语、德语和葡萄牙语，你应该输入以下表达式：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about plural forms and which value should be given, depending
    on the language you are translating to, is available at [http://drupal.org/node/17564](http://drupal.org/node/17564).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 关于复数形式以及根据你翻译到的语言应提供哪个值，更多信息可在[http://drupal.org/node/17564](http://drupal.org/node/17564)找到。
- en: Once you have entered all the desired details, click on the **OK** button. You
    will now be asked where to store the translated file. Create a folder named `spa`
    and place it in your `app/locale` folder. Inside the `spa` folder, create a folder
    named `LC_MESSAGES`. Then, while in Poedit's dialog box, select the folder `app/locale/spa/LC_MESSAGES`
    and click the button **Save** without changing the file name, which should be
    `default.po`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你输入了所有所需的详细信息，点击**确定**按钮。现在你将被询问要存储翻译文件的位置。创建一个名为`spa`的文件夹，并将其放置在`app/locale`文件夹中。在`spa`文件夹内，创建一个名为`LC_MESSAGES`的文件夹。然后，在Poedit的对话框中，选择文件夹`app/locale/spa/LC_MESSAGES`，点击按钮**保存**，不要更改文件名，文件名应该是`default.po`。
- en: 'Poedit will now show you all the original strings, and allow you to translate
    each by entering the desired translation in the bottom text area. After you enter
    your translations, Poedit may look like the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Poedit现在将显示所有原始字符串，并允许你通过在底部文本区域输入所需的翻译来翻译每个字符串。在你输入翻译后，Poedit可能看起来像以下截图：
- en: '![How to do it...](img/1926_9_05.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1926_9_05.jpg)'
- en: 'Click on the menu **File**, and then option **Save** to save the translated
    file. There should now be two files in your `app/locale/spa/LC_MESSAGES` folder:
    `default.po` and `default.mo`.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 点击菜单**文件**，然后选择**保存**以保存翻译后的文件。现在你的`app/locale/spa/LC_MESSAGES`文件夹中应该有两个文件：`default.po`和`default.mo`。
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: CakePHP's extractor will first ask which paths to process. When all paths have
    been specified, it will browse recursively through its directories and look for
    any use of a translator function (any of `__(), __n(), __d(), __dn(), __dc(),
    __dcn()`, and `__c()`) in PHP and view files. For each found usage, it will extract
    the strings that need translation (first argument on calls to `__()` and `__c()`;
    the second argument on calls to `__d()` and `__dc()`; the first and second arguments
    on calls to `__n()`; and the second and third arguments on calls to `__dn()` and
    `__dcn()`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP的提取器首先会询问要处理哪些路径。当所有路径都已指定后，它将递归地浏览其目录并查找PHP和视图文件中任何翻译函数（`__()`、`__n()`、`__d()`、`__dn()`、`__dc()`、`__dcn()`和`__c()`）的使用。对于每个找到的使用情况，它将提取需要翻译的字符串（在调用`__()`和`__c()`时的第一个参数；在调用`__d()`和`__dc()`时的第二个参数；在调用`__n()`时的第一个和第二个参数；以及在调用`__dn()`和`__dcn()`时的第二个和第三个参数）。
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to only use static strings, avoiding any PHP expressions, on
    the arguments the extractor looks for. If you want to learn how to interpolate
    variable values in the strings that need translation, see the recipe *Translating
    strings with dynamic content*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在提取器查找的参数上，只应使用静态字符串，避免任何PHP表达式。如果你想了解如何在需要翻译的字符串中插入变量值，请参阅食谱*使用动态内容翻译字符串*。
- en: Once CakePHP's extractor has obtained all strings that need translation, it
    will create the appropriate translation template files. If you used any translator
    function that specifies a domain (`__d()`, `__dn(), __dc()`, and `__dcn()`), you
    can optionally merge all strings into one template file, or have each domain create
    a separate template file. Template files have the `pot` extension, and use the
    domain name as its filename (default.pot being the default template file).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦CakePHP的提取器获取了所有需要翻译的字符串，它将创建适当的翻译模板文件。如果你使用了指定域的任何翻译函数（`__d()`、`__dn()`、`__dc()`和`__dcn()`），你可以选择将所有字符串合并到一个模板文件中，或者让每个域创建一个单独的模板文件。模板文件具有`pot`扩展名，并使用域名作为其文件名（`default.pot`是默认模板文件）。
- en: 'If you open `default.pot` with a text editor, you will notice that it starts
    with a header that includes several settings, and then includes two lines for
    each string that needs translation: a line that defines a `msgid` (the string
    to be translated), and a line that has an empty string for `msgstr` (the translated
    string).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用文本编辑器打开`default.pot`，你会注意到它从一个包含几个设置的标题开始，然后为每个需要翻译的字符串包含两行：一行定义`msgid`（要翻译的字符串），另一行对于`msgstr`（翻译的字符串）为空字符串。
- en: 'We then use Poedit to open this template file, translate the strings, and save
    it in the appropriate directory (`app/locale/spa/LC_MESSAGES`), where Poedit will
    create two files: `default.po` and `default.pot`. If you open `default.po` with
    a text editor, you will notice it almost looks exactly as the template file does,
    except that the header settings have changed to what we defined, and the `msgid`
    lines are filled with our translations. The `default.mo` file is a binary version
    of the `default.po` file, also generated by Poedit, and is used by CakePHP to
    speed processing of the translation file.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后使用 Poedit 打开这个模板文件，翻译字符串，并将其保存到适当的目录（`app/locale/spa/LC_MESSAGES`），在那里 Poedit
    将创建两个文件：`default.po` 和 `default.pot`。如果你用文本编辑器打开 `default.po`，你会注意到它几乎与模板文件完全相同，除了头部设置已更改为我们定义的，而
    `msgid` 行则填充了我们的翻译。`default.mo` 文件是 `default.po` 文件的二进制版本，也是由 Poedit 生成的，并由 CakePHP
    用于加速翻译文件的处理。
- en: Translating database records with the Translate behavior
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Translate 行为翻译数据库记录
- en: In this recipe, we will learn how to allow translation of database records by
    means of CakePHP's `Translate` behavior.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何通过 CakePHP 的 `Translate` 行为允许翻译数据库记录。
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, we need a basic application skeleton to work with.
    Go through the entire recipe *Internationalizing controller and view texts*.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个菜谱，我们需要一个基本的应用程序骨架来工作。完成整个菜谱 *国际化控制器和视图文本*。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'From the command line, and while in your `app/` directory, issue the following
    command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中，并在你的 `app/` 目录下，执行以下命令：
- en: 'If you are on a GNU Linux / Mac / Unix system:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 GNU Linux / Mac / Unix 系统：
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you are on Microsoft Windows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Microsoft Windows：
- en: '[PRE26]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Accept all the default answers. The shell should finish by creating a table
    named `i18n`, as shown in the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接受所有默认答案。shell 应该通过创建一个名为 `i18n` 的表来完成，如下截图所示：
- en: '![How to do it...](img/1926_9_06.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_9_06.jpg)'
- en: 'Edit your `app/models/article.php` file and add the following property:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的 `app/models/article.php` 文件，并添加以下属性：
- en: '[PRE27]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We now need to move the values for the `title` and `body` fields from the `articles`
    table to the `i18n` table, and then drop those fields from the `articles` table.
    Issue the following SQL statements:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要将 `title` 和 `body` 字段的值从 `articles` 表移动到 `i18n` 表中，然后从 `articles` 表中删除这些字段。执行以下
    SQL 语句：
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the Spanish translations for our articles by Issuing the following SQL
    statements:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下 SQL 语句添加我们文章的西班牙语翻译：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, edit your `app/config/bootstrap.php` file and add the following above
    the PHP closing tag:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编辑你的 `app/config/bootstrap.php` 文件，并在 PHP 结束标签上方添加以下内容：
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If you now browse to `http://localhost/articles`, you should see the same listing
    of articles, as shown in the first screenshot (recipe *Internationalizing controller
    and view texts*).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在浏览到 `http://localhost/articles`，你应该看到与第一个截图（菜谱 *国际化控制器和视图文本*）中显示的相同的文章列表。
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We start by using the shell to create the table required by the `Translate`
    behavior. This table is by default named `i18n`, and contains (besides its primary
    key) the following fields:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用 shell 创建 `Translate` 行为所需的表。默认情况下，此表名为 `i18n`，包含（除了其主键外）以下字段：
- en: '| Field | Purpose |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 目的 |'
- en: '| --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `locale` | The locale (language) this particular record field is being translated
    to. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `locale` | 正在翻译的特定记录字段所翻译的区域设置（语言）。 |'
- en: '| `model` | The model where the record being translated belongs. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `model` | 包含正在翻译的记录的模型。 |'
- en: '| `foreign_key` | The ID (primary key) in `model` that identifies the record
    being translated. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `foreign_key` | 在 `model` 中标识正在翻译的记录的 ID（主键）。 |'
- en: '| `field` | The field being translated. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `field` | 正在翻译的字段。 |'
- en: '| `content` | The translated value for the record field. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `content` | 记录字段的翻译值。 |'
- en: We then add the `Translate` behavior to our `Article` model, and set it to translate
    the `title` and `body` fields. This means that these fields will no longer be
    a part of the `articles` table, but instead be stored in the `i18n` table. Using
    the `model` and `foreign_key` values in the `i18n` table, the `Translate` behavior
    will fetch the appropriate values for these fields whenever an `Article` record
    is obtained matching the application language.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后将 `Translate` 行为添加到我们的 `Article` 模型中，并将其设置为翻译 `title` 和 `body` 字段。这意味着这些字段将不再是
    `articles` 表的一部分，而是存储在 `i18n` 表中。使用 `i18n` 表中的 `model` 和 `foreign_key` 值，`Translate`
    行为将在获取到匹配应用程序语言的 `Article` 记录时，为这些字段获取适当的值。
- en: We copy the values of the `title` and `body` fields into the `i18n` table, and
    we then remove these fields from the `articles` table. No change is needed in
    the `find()` call that is used in our `ArticlesController` class. Furthermore,
    the creation of articles will continue to work transparently, as the `Translate`
    behavior will use the current language when saving records through the `Article`
    model.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `title` 和 `body` 字段的值复制到 `i18n` 表中，然后从 `articles` 表中删除这些字段。在我们的 `ArticlesController`
    类中使用的 `find()` 调用不需要任何更改。此外，文章的创建将继续透明地工作，因为 `Translate` 行为将在通过 `Article` 模型保存记录时使用当前语言。
- en: The final step is telling CakePHP which is the default application language,
    by setting the `Config.language` configuration setting. If this step is omitted,
    CakePHP will obtain the current language by looking into the `HTTP_ACCEPT_LANGUAGE`
    header sent by the client browser.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是告诉 CakePHP 默认应用程序语言，通过设置 `Config.language` 配置设置。如果省略此步骤，CakePHP 将通过查看客户端浏览器发送的
    `HTTP_ACCEPT_LANGUAGE` 标头来获取当前语言。
- en: Using separate translation tables
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用单独的翻译表
- en: Any model that uses the `Translate` behavior will by default use this `i18n`
    table to store the different translations for each of its translated fields. This
    could be troublesome if we have a large number of records, or a large number of
    translated models. Fortunately, the `Translate` behavior allows us to configure
    a different translation model.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使用 `Translate` 行为的模型默认将使用此 `i18n` 表来存储其每个翻译字段的翻译。如果我们有大量记录或大量翻译模型，这可能会很麻烦。幸运的是，`Translate`
    行为允许我们配置不同的翻译模型。
- en: 'As an example, let us assume that we want to store all article translations
    in a table called `article_translations`. Create the table and then copy the translated
    records from the `i18n` table by issuing the following SQL statements:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想要将所有文章翻译存储在一个名为 `article_translations` 的表中。创建该表，然后通过以下 SQL 语句从 `i18n`
    表中复制翻译记录：
- en: '[PRE31]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a file named `article_translation.php` and place it in your `app/models`
    folder, with the following contents:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `article_translation.php` 的文件，并将其放置在您的 `app/models` 文件夹中，内容如下：
- en: '[PRE32]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `displayField` property in the translation model tells the `Translate` behavior
    which field in the table holds the name of the field being translated.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译模型中的 `displayField` 属性告诉 `Translate` 行为在表中哪个字段持有正在翻译的字段名称。
- en: 'Finally, edit your `app/models/article.php` file and make the following changes:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编辑您的 `app/models/article.php` 文件，并做出以下更改：
- en: '[PRE33]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Setting and remembering the language*'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置和记住语言*'
- en: Setting and remembering the language
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和记住语言
- en: In this recipe, we will learn how to allow users to change the current language
    and have their language selection be remembered through the use of cookies.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何允许用户更改当前语言，并通过使用 cookies 记住他们的语言选择。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe we need a fully internationalized application to work
    with. Go through the entire recipe *Translating database records with the Translate
    behavior*.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，我们需要一个完全国际化的应用程序来工作。完成整个配方 *使用 Translate 行为翻译数据库记录*。
- en: We also need an application layout that we can modify. Copy the file `default.ctp`
    from `cake/libs/view/layouts` to your `app/views/layouts` directory.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个可以修改的应用程序布局。将 `cake/libs/view/layouts` 中的 `default.ctp` 文件复制到您的 `app/views/layouts`
    目录。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit your `app/config/bootstrap.php` file and add the following right above
    the PHP closing tag:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的 `app/config/bootstrap.php` 文件，并在 PHP 结束标签上方添加以下内容：
- en: '[PRE34]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Edit the `default.ctp` layout file located in your `app/views/layouts` folder
    and add the following where you want the list of languages to be included (such
    as right above the call to the `flash()` method of the `Session` component):'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑位于您的 `app/views/layouts` 文件夹中的 `default.ctp` 布局文件，并在您希望包含语言列表的位置（例如在调用 `Session`
    组件的 `flash()` 方法之前）添加以下内容：
- en: '[PRE35]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Config.language setting used earlier was specified in the `app/config/bootstrap.php`
    file while going through the *Translating database records with the Translate
    behavior*.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前使用的 `Config.language` 设置是在通过 *使用 Translate 行为翻译数据库记录* 时在 `app/config/bootstrap.php`
    文件中指定的。
- en: 'Create a file named `app_controller.php` and place it in your `app/` folder,
    with the following contents:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `app_controller.php` 的文件，并将其放置在您的 `app/` 文件夹中，内容如下：
- en: '[PRE36]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, create a file named `language.php` and place it in your `app/controller/components`
    folder, with the following contents:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个名为 `language.php` 的文件，并将其放置在 `app/controller/components` 文件夹中，内容如下：
- en: '[PRE37]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you now browse to `http://localhost/articles` you should see the list of
    articles, and in the top-right area, a link to switch the current language to
    **Spanish**. Clicking on it should display the Spanish version of the articles,
    and change all available texts to the selected language, as shown in the following
    screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在浏览到 `http://localhost/articles`，你应该能看到文章列表，在右上角，有一个切换当前语言到**西班牙语**的链接。点击它应该显示文章的西班牙语版本，并将所有可用的文本更改为所选语言，如下面的截图所示：
- en: '![How to do it...](img/1926_9_07.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_9_07.jpg)'
- en: How it works...
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by defining all available languages so that we can easily include a
    link to switch the current language. We use this list to construct the list of
    links and place it in the `default.ctp` layout file, only allowing clicks on languages
    other than the current application language.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义所有可用的语言，这样我们就可以轻松地包含一个切换当前语言的链接。我们使用这个列表来构建链接列表，并将其放置在 `default.ctp` 布局文件中，只允许点击除当前应用程序语言之外的语言。
- en: The current language is set in CakePHP's configure variable, `Config.language`,
    which is set to a default language (`eng` in our case) in the configuration file
    `bootstrap.php`. When a language change is needed, this setting should be changed
    before the first use of a translator function.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当前语言在 CakePHP 的配置变量 `Config.language` 中设置，该变量在配置文件 `bootstrap.php` 中被设置为默认语言（在我们的例子中是
    `eng`）。当需要更改语言时，应在第一次使用翻译函数之前更改此设置。
- en: To keep a clean controller, we decided to create a component called `Language`
    to handle language changes. This component will look for a named or URL parameter
    called `lang`. If no language is specified, the component will look for the current
    language by looking into a cookie.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持控制器整洁，我们决定创建一个名为 `Language` 的组件来处理语言变更。这个组件将寻找一个名为 `lang` 的命名参数或URL参数。如果没有指定语言，组件将通过查看cookie来寻找当前语言。
- en: If no cookie is set, or if a language change is requested, the component will
    save the current language in a cookie named `language` that lasts for one year.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有设置cookie，或者请求更改语言，组件将把当前语言保存在名为 `language` 的cookie中，该cookie的有效期为一年。
