- en: Chapter 1. Pages and Page Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 页面和页面类型
- en: 'In this chapter we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting the current Page object
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前页面对象
- en: Getting a Page object by its ID
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID获取页面对象
- en: Getting a Page object by its path
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过路径获取页面对象
- en: Getting a Page type by its ID
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID获取页面类型
- en: Getting a Page type by its handle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过句柄获取页面类型
- en: Getting a page type's ID
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面类型的ID
- en: Getting a page type's name
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面类型的名称
- en: Getting a page type's handle
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面类型的句柄
- en: Getting the icon for a page type
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面类型的图标
- en: Getting a list of pages that belong to a page type
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取属于页面类型的页面列表
- en: Creating a page type
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建页面类型
- en: Updating a page type
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新页面类型
- en: Deleting a page type
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除页面类型
- en: Creating a page type
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建页面类型
- en: Updating an existing page
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新现有页面
- en: Setting page attributes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置页面属性
- en: Getting a page attribute
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面属性
- en: Getting a page's ID
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面的ID
- en: Getting a page's path
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面的路径
- en: Getting a page's handle
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面的句柄
- en: Getting a page's name
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面的名称
- en: Getting a page's description
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面的描述
- en: Getting a page's page type ID
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面页面的ID
- en: Getting a page's page type handle
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面页面的句柄
- en: Getting a page's theme object
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面的主题对象
- en: Getting the children below a page
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面下的子页面
- en: Moving a page
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动页面
- en: Deleting a page (and its children)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除页面（及其子页面）
- en: Getting a list of pages
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取页面列表
- en: Adding a page selector field to a form
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将页面选择字段添加到表单中
- en: Introduction
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: At the center of almost any content management system is the concept of pages.
    **concrete5** pages contain reusable portions of content called **blocks**. Blocks
    can contain anything from formatted text content that you enter yourself, to photo
    slideshows, to videos, to custom forms that you have developed that contain special
    functionality. concrete5 pages are extensions of the internal `Collection` object,
    which gets its name from the fact that it contains a collection of blocks that
    make up the page.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎任何内容管理系统都围绕着页面的概念。**concrete5**页面包含可重用的内容部分，称为**块**。块可以包含您自己输入的格式化文本内容，到照片幻灯片，到视频，到您开发的包含特殊功能的自定义表单。concrete5页面是内部`Collection`对象的扩展，其名称来源于它包含构成页面的块集合。
- en: Since pages on a website usually contain repeating areas of information (perhaps
    a sidebar with some persistent widgets), concrete5 includes the concept of page
    types. Page types allow you to define different templates for creating new pages
    in concrete5\. They are used to specify a default set of blocks, content, and
    special attributes that are added to new pages of that type, as well as to create
    different visual layouts through the concrete5 website.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网站上的页面通常包含重复的信息区域（可能是一个带有一些持久小部件的侧边栏），concrete5包括页面类型的概念。页面类型允许您为在concrete5中创建新页面定义不同的模板。它们用于指定添加到该类型新页面上的默认块集、内容和特殊属性，以及通过concrete5网站创建不同的视觉布局。
- en: A common page type would be **Left Sidebar**, which contains a list of links
    in the sidebar with an area to add blocks of content on the right. A normal concrete5
    installation comes with a few default page types out of the box, including Left
    Sidebar and Full Width. In code, page types are referred to either by their unique
    numerical ID in the database, or more commonly, a human readable identifier called
    a **handle**. The Left Sidebar page type, for example, would have a handle of
    `left_sidebar`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的页面类型是**左侧边栏**，它包含侧边栏中的链接列表，以及一个在右侧添加内容块的区域。标准的concrete5安装默认包含一些页面类型，包括左侧边栏和全宽。在代码中，页面类型可以通过数据库中唯一的数值ID或更常见的人类可读标识符（称为**句柄**）来引用。例如，左侧边栏页面类型将有一个句柄`left_sidebar`。
- en: '![Introduction](img/4548OS_01_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/4548OS_01_01.jpg)'
- en: When adding pages to a concrete5 website through the user interface, you will
    likely notice that the first step is choosing a page type. Page types are also
    used by the Composer feature of concrete5, which can assist in creating several
    pages of the same type (such as blog posts).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过用户界面向concrete5网站添加页面时，你可能会注意到第一步是选择页面类型。页面类型也由concrete5的Composer功能使用，这可以帮助创建同一类型的多个页面（如博客文章）。
- en: There are two types of pages in concrete5, the first being a standard page that
    gets added to the sitemap and gets assigned a page type, and the second a **single
    page**, which is handled a bit differently and does not get assigned a page type.
    This chapter will deal with pages of the first type.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5中有两种页面类型，第一种是标准页面，它会被添加到网站地图中并分配一个页面类型，第二种是**单页**，它处理方式略有不同，不会分配页面类型。本章将处理第一种类型的页面。
- en: A note about the code in this chapter
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于本章代码的说明
- en: Typically, you will write code that interacts with pages and page types in a
    block, a controller, or a model in your concrete5 application. For the purpose
    of these demonstrations, you can place the code anywhere where concrete5 lets
    you execute arbitrary PHP code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您将在concrete5应用程序的块、控制器或模型中编写与页面和页面类型交互的代码。为了演示目的，您可以将代码放置在concrete5允许您执行任意PHP代码的任何位置。
- en: A great place for this is to add a `site_process.php` or `site_post.php` file
    to your site's root `/config` directory. concrete5 will execute all of the code
    in that file once all of the core classes and libraries have been loaded (`site_post`
    gets executed before the current page has been loaded, `site_process` gets executed
    after the current page has been set). We will use classic PHP debugging techniques
    to verify that our code is working. Typically, we will dump the contents of a
    variable using PHP's `var_dump` or `print_r` functions followed by an `exit` command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的做法是将`site_process.php`或`site_post.php`文件添加到您网站的根目录`/config`中。concrete5将在所有核心类和库加载完毕后执行该文件中的所有代码（`site_post`在当前页面加载之前执行，`site_process`在当前页面设置之后执行）。我们将使用经典的PHP调试技术来验证我们的代码是否正常工作。通常，我们将使用PHP的`var_dump`或`print_r`函数来导出一个变量的内容，然后跟一个`exit`命令。
- en: Because the debugging techniques used in this book can interrupt the regular
    functionality of a concrete5 website, it is recommended that you perform these
    exercises on a development copy of concrete5.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书中使用的调试技术可能会中断concrete5网站的常规功能，建议您在concrete5的开发副本上执行这些练习。
- en: Be sure to comment out or remove the debugging code once you are finished, to
    resume the normal functionality of your concrete5 website.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，请确保注释掉或删除调试代码，以恢复您concrete5网站的正常功能。
- en: Create a custom debugging function
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个自定义调试函数
- en: To aid in the dumping of variables, we can create a simple debugging function
    that will wrap our output in `<pre>` tags and automatically `exit` for us.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助变量导出，我们可以创建一个简单的调试函数，该函数将我们的输出包裹在`<pre>`标签中，并自动为我们`exit`。
- en: 'Place the following code at the top of `/config/site_post.php` (create the
    file if it does not exist):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码放置在`/config/site_post.php`的顶部（如果不存在，则创建该文件）：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户中下载所有已购买Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Now, when we wish to inspect the contents of a variable or other object, we
    can simply call `my_debug($variable)`, and get a nicely formatted, easy to read
    response.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们希望检查一个变量或其他对象的内容时，我们可以简单地调用`my_debug($variable)`，并得到一个格式良好、易于阅读的响应。
- en: Of course, you are more than welcome to use your own techniques for debugging
    variables.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您完全可以使用自己的调试变量技术。
- en: Getting the current Page object
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取当前Page对象
- en: A very common task for concrete5 developers is to retrieve information from
    the page that is currently displayed. You will encounter this situation quite
    often, whether you need to update some information about the current page (such
    as a page title), check the current user's permissions on this page, or just display
    the page title. Fortunately, this is quite simple.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于concrete5开发者来说，从当前显示的页面中检索信息是一个非常常见的任务。您会遇到这种情况，无论是需要更新当前页面的某些信息（如页面标题），检查当前用户在此页面的权限，还是仅显示页面标题。幸运的是，这相当简单。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The steps for getting the current `Page` objects are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 获取当前`Page`对象的步骤如下：
- en: Create `/config/site_process.php` if it does not exist.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不存在，创建`/config/site_process.php`。
- en: Open `/config/site_process.php` in your preferred text editor.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你偏好的文本编辑器中打开`/config/site_process.php`。
- en: We can get the current `Page` object by calling the getCurrentPage static function
    of the Page class.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过调用`Page`类的`getCurrentPage`静态函数来获取当前的`Page`对象。
- en: '[PRE1]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we inspect the contents of the `$currentPage` variable, we can see that it
    is a `Page` object, and now we are ready to perform further operations on it.
    In this example we are using our custom debugging function that was created in
    the chapter introduction.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们检查`$currentPage`变量的内容，我们可以看到它是一个`Page`对象，现在我们可以对它执行进一步的操作。在这个例子中，我们使用在章节介绍中创建的自定义调试函数。
- en: '[PRE2]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Calling the static `getCurrentPage` function on the `Page` class will look in
    the concrete5 `Request` object to get the current page. If that is not set, concrete5
    will use the global `$c` variable. Note the use of `site_process.php` to dump
    the current page variable. We used this file because it is read after concrete5
    has set the current `Page` object. Using `site_post.php` would have resulted in
    a null object.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Page`类上调用静态的`getCurrentPage`函数将会在concrete5的`Request`对象中查找当前页面。如果未设置，concrete5将使用全局变量`$c`。注意使用`site_process.php`来输出当前页面变量。我们使用这个文件是因为它在concrete5设置当前`Page`对象之后被读取。使用`site_post.php`会导致返回一个空对象。
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You may have already noticed that sometimes developers will use the global variable,
    `$c`, within their code to get the current `Collection` or `Page` object. This
    typically works fine, but best practices would be to use the `getCurrentPage`
    function to handle this for you.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，有时开发者会在他们的代码中使用全局变量`$c`来获取当前的`Collection`或`Page`对象。这通常工作得很好，但最佳实践是使用`getCurrentPage`函数来为你处理这个问题。
- en: See also
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a Page object by its ID* recipe
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID获取页面对象的配方
- en: The *Getting a Page object by its path* recipe
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过路径获取页面对象的配方
- en: Getting a Page object by its ID
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过ID获取页面对象
- en: In many situations, you will need to load a `Page` object using its unique numerical
    ID from the database. As mentioned earlier, pages are actually extensions of the
    `Collection` object, so you will actually be loading the page by its collection
    ID.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，你需要使用数据库中页面的唯一数字ID来加载`Page`对象。如前所述，页面实际上是`Collection`对象的扩展，所以你实际上是通过集合ID来加载页面的。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need to know the numerical ID of the page that you are attempting to
    load. Often this will be stored in other objects, perhaps even a custom entity
    that you have stored in the database. For example, say you have a recipes table
    in the database, and each recipe has its own page in the concrete5 website. You
    store the page ID for each recipe, so you can load the relevant `Page` object
    whenever necessary.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道你试图加载的页面的数字ID。通常这个ID会存储在其他对象中，可能甚至是你存储在数据库中的自定义实体。例如，假设你在数据库中有一个食谱表，每个食谱在concrete5网站上都有自己的页面。你为每个食谱存储页面ID，这样你就可以在需要时加载相关的`Page`对象。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First you will have to get the page ID for the `Page` object that you are trying
    to load. For this example, we will just hard-code the ID of the page that we are
    loading. The steps are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须获取你试图加载的`Page`对象的页面ID。在这个例子中，我们将直接硬编码我们正在加载的页面ID。步骤如下：
- en: Open `/config/site_post.php` in your favorite code editor.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你喜欢的代码编辑器中打开`/config/site_post.php`。
- en: 'First, let''s store the ID of the page we are loading into a variable. In real-world
    use, you will likely have this ID stored in a database table, or available from
    some other code that you have run. The ID of the home page in concrete5 defaults
    to `1`, so we will use that for our page''s ID:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们将我们正在加载的页面ID存储到一个变量中。在实际应用中，你可能会在数据库表中存储这个ID，或者从你运行的其他代码中获取。在concrete5中，主页的ID默认为`1`，所以我们将使用这个ID作为我们页面的ID：
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that we have the ID of the page that we need to load, use the `getByID`
    function to get the `Page` object that we need:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经得到了需要加载的页面ID，使用`getByID`函数来获取所需的`Page`对象：
- en: '[PRE4]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can inspect the `$page` variable and verify that it contains a `Page` object.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以检查`$page`变量并验证它是否包含一个`Page`对象。
- en: '[PRE5]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The page ID (also known as collection ID) is unique in the database, so calling
    the `getByID` function will load the correct page data and return a `Page` object
    that you can interact with.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 页面ID（也称为集合ID）在数据库中是唯一的，所以调用`getByID`函数将加载正确的页面数据并返回一个你可以与之交互的`Page`对象。
- en: See also
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting the current Page object* recipe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前页面对象的配方
- en: The *Getting a Page object by its path* recipe
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过路径获取页面对象* 的配方'
- en: Getting a Page object by its path
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过路径获取页面对象
- en: concrete5 also supports the loading of `Page` objects by the path that is displayed
    in the web browser. This is a convenient way to load pages without knowing their
    numerical ID. In this exercise, we will load an About Us page by its path.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 也支持通过在网页浏览器中显示的路径来加载 `Page` 对象。这是一种方便的加载页面方式，而无需知道它们的数字 ID。在这个练习中，我们将通过路径加载一个关于我们的页面。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be loading a page with the path of `/about-us`. If this page does not
    exist in your concrete5 site, please add it to the sitemap before attempting this
    exercise.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载路径为 `/about-us` 的页面。如果此页面在您的 concrete5 网站中不存在，请在尝试此练习之前将其添加到网站地图中。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Using a static function called `getByPath`, we can easily get a `Page` object
    without knowing the ID. The steps are as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用静态函数 `getByPath`，我们可以轻松获取 `Page` 对象，而无需知道其 ID。步骤如下：
- en: Open the `/config/site-post.php` file in your code editor.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `/config/site-post.php` 文件。
- en: Declare the path of the page that you wish to load.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明您要加载的页面的路径。
- en: '[PRE6]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can load the page located at `http://example.com/about-us` by passing the
    path string to the `getByPath` function.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过传递路径字符串到 `getByPath` 函数来加载位于 `http://example.com/about-us` 的页面。
- en: '[PRE7]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To make sure we grabbed the correct page, dump the `$aboutPage` variable to
    verify that we have a fully loaded `Page` object. We will use the custom debug
    function that we created in the chapter introduction.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保我们获取了正确的页面，我们将输出 `$aboutPage` 变量以验证我们有一个完全加载的 `Page` 对象。我们将使用我们在章节介绍中创建的自定义调试函数。
- en: '[PRE8]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 will query the database for the page that has the specified path assigned
    to it. You will want to use good judgment when loading pages by their paths, as
    that data can change easily through the concrete5 interface. Imagine that you
    are working on a site with 15 editors, and any one of them has the ability to
    edit the path of a page. concrete5 by default will save old page paths whenever
    a new one is changed, but it is not required. Hard coding page paths in your custom
    applications should be used only when appropriate. It is a much better idea to
    load pages by their ID whenever possible, as that ID does not change.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 将查询数据库以获取分配了指定路径的页面。在通过路径加载页面时，您需要明智地判断，因为该数据可以通过 concrete5 界面轻松更改。想象一下，您正在为一个有
    15 个编辑者的网站工作，任何一位编辑者都有权编辑页面的路径。concrete5 默认会在更改新路径时保存旧页面路径，但这不是必需的。在您的自定义应用程序中硬编码页面路径仅应在适当的情况下使用。在可能的情况下，通过
    ID 加载页面是一个更好的主意，因为该 ID 不会更改。
- en: There's more...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can load any page on the site using this technique. To load a `Careers`
    page that exists below the `About` page that we just loaded, you would write the
    following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此技术加载网站上的任何页面。要加载位于我们刚刚加载的“关于”页面之下的“职业”页面，您会编写以下内容：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You should know that concrete5 will cache the page IDs related to each path,
    so if you are experiencing unexpected results while using this function, make
    sure to clear your site cache by visiting `/dashboard/system/optimization/clear_cache/`
    on your concrete5 website.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道，concrete5 会缓存与每个路径相关的页面 ID，所以如果您在使用此功能时遇到意外结果，请确保通过访问 concrete5 网站的 `/dashboard/system/optimization/clear_cache/`
    来清除您的网站缓存。
- en: See also
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting the current Page object* recipe
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取当前页面对象* 的配方'
- en: The *Getting a Page object by its ID* recipe
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过 ID 获取页面对象* 的配方'
- en: Getting a page type by its ID
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 ID 获取页面类型
- en: When creating and editing pages in concrete5 development, you will inevitably
    need to load the desired page type object that will be assigned to a page. Note
    that page types are actually instances of the `CollectionType` object in code.
    For consistency, we will continue to refer to them as page types outside of code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 concrete5 开发中创建和编辑页面时，您不可避免地需要加载将被分配给页面的所需页面类型对象。请注意，页面类型实际上是代码中 `CollectionType`
    对象的实例。为了保持一致性，我们将在代码之外继续将它们称为页面类型。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue performing these examples in the `/config/site-post.php` file,
    as that is a quick and easy place to run the arbitrary code. We will also continue
    making use of our custom `my_debug` function that was defined in the chapter introduction.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续在 `/config/site-post.php` 文件中执行这些示例，因为这是一个快速且易于运行任意代码的地方。我们还将继续使用我们在章节介绍中定义的自定义
    `my_debug` 函数。
- en: In this recipe, we will be loading a page type with the ID of `4`. Please make
    sure that this page type exists in your instance of concrete5, otherwise change
    the ID to something appropriate to your environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将加载ID为`4`的页面类型。请确保此页面类型存在于您的concrete5实例中，否则将ID更改为适合您环境的内容。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Much like loading pages, you will need to call a static function on the `CollectionType`
    class. The steps are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与加载页面类似，您需要在`CollectionType`类上调用一个静态函数。步骤如下：
- en: Open `/config/site_post.php` in your text editor.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文本编辑器中的`/config/site_post.php`。
- en: First, we will need to know the numerical ID of the page type. In this case,
    we are going to assume that a page type called "Left Sidebar" exists, and that
    it has the numerical ID of `4`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要知道页面类型的数字ID。在这种情况下，我们将假设存在一个名为“Left Sidebar”的页面类型，并且它具有数字ID `4`。
- en: '[PRE10]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we have the ID of the page type that we wish to load, we can call the
    `getByID` function of the `CollectionType` class.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们已经有了我们想要加载的页面类型的ID，我们可以调用`CollectionType`类的`getByID`函数。
- en: '[PRE11]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can verify that we loaded the correct page type by inspecting the `$leftSidebarPageType`
    variable and verifying that it is an instance of the `CollectionType` class.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过检查`$leftSidebarPageType`变量并验证它是否是`CollectionType`类的实例来验证我们是否加载了正确的页面类型。
- en: '[PRE12]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `getByID` function performs a simple database query to find the page type
    that belongs to that ID. A `CollectionType` object is returned when a successful
    lookup is made.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`getByID`函数执行一个简单的数据库查询以找到属于该ID的页面类型。在成功查找时返回一个`CollectionType`对象。'
- en: See also
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a page type by its handle* recipe
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过句柄获取页面类型的菜谱
- en: Getting a page type by its handle
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过句柄获取页面类型
- en: As mentioned in the chapter introduction, page types also have human readable
    handles, which offer a convenient way of loading page types without knowing their
    numerical IDs. Handles are always alphanumerical strings with underscores between
    words, and do not contain any file extensions such as `.php`. For example, the
    handle for a page type called "Left Sidebar" would most likely be `left_sidebar`,
    but concrete5 lets users specify any alphanumeric string for a handle, so it's
    possible that the handle for Left Sidebar would also just be `left`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如章节介绍中所述，页面类型也有人类可读的句柄，这为在不了解它们的数字ID的情况下加载页面类型提供了一个方便的方法。句柄总是由单词之间带有下划线的字母数字字符串组成，不包含任何文件扩展名，如`.php`。例如，名为“Left
    Sidebar”的页面类型的句柄很可能是`left_sidebar`，但concrete5允许用户为句柄指定任何字母数字字符串，因此Left Sidebar的句柄也可能是`left`。
- en: '![Getting a page type by its handle](img/4548OS_01_02.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![通过句柄获取页面类型](img/4548OS_01_02.jpg)'
- en: You can find the handles of page types by visiting the **Page Types** area of
    the concrete5 dashboard, located at `/dashboard/pages/types/` on your concrete5
    website.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问concrete5仪表板的**页面类型**区域来找到页面类型的句柄，该区域位于您的concrete5网站上的`/dashboard/pages/types/`。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will be loading a page type with the handle of `left_sidebar`.
    Please make sure that page type exists in your concrete5 installation, otherwise
    you can add a new page type with that handle, or adapt the recipe to work for
    your situation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将加载句柄为`left_sidebar`的页面类型。请确保该页面类型存在于您的concrete5安装中，否则您可以添加一个新的页面类型并使用该句柄，或者调整菜谱以适应您的环境。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here''s how we would load the page type with a handle of `left_sidebar`. This
    is similar to loading a page by its path. The steps are as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何通过句柄`left_sidebar`加载页面类型的方法。这与通过路径加载页面类似。步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的首选代码编辑器中打开`/config/site_post.php`。
- en: Declare the handle of the page type that you wish to load.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明您要加载的页面类型的句柄。
- en: '[PRE13]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Load the page type using the handle that we just defined.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们刚刚定义的句柄加载页面类型。
- en: '[PRE14]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can verify that you have loaded the page type by dumping the `$pageType`
    variable.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过输出`$pageType`变量来验证您是否已加载页面类型。
- en: '[PRE15]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A simple database query is performed, which will return a `CollectionType` object
    if it is successful.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一个简单的数据库查询，如果成功，将返回一个`CollectionType`对象。
- en: There's more...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Just like the warning for loading pages by their paths, you will want to exercise
    the same good judgment when loading page types by their handles. Since these handles
    are just strings that can be edited through the concrete5 interface, you will
    need to make sure that you aren't writing code that could break if one of the
    site editors changes the handle of a page type.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 就像加载页面路径时的警告一样，当通过处理器加载页面类型时，您也需要进行相同的良好判断。由于这些处理器只是可以通过concrete5界面编辑的字符串，您需要确保您编写的代码不会因为网站编辑更改页面类型的处理器而损坏。
- en: See also
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page type by its ID* recipe
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过ID获取页面类型*配方'
- en: Getting a page type's ID
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面类型的ID
- en: Once a page type has been loaded, we can get different information from it.
    Sometimes, if a page type is loaded by its handle, or if it was provided from
    another function call, developers will need to get the page type's ID from an
    existing page type object. In this exercise, we will load a page type by its handle,
    and then find out the ID of the page type.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦页面类型被加载，我们可以从中获取不同的信息。有时，如果页面类型是通过其处理器加载的，或者是从另一个函数调用中提供的，开发者将需要从现有的页面类型对象中获取页面类型的ID。在这个练习中，我们将通过处理器加载页面类型，然后找出页面类型的ID。
- en: Getting ready
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be loading a page type with a handle of `right_sidebar` in this example.
    If that page type does not exist in your concrete5 system, feel free to adapt
    this recipe to suit your specific situation.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将加载一个处理器为`right_sidebar`的页面类型。如果该页面类型在您的concrete5系统中不存在，请根据您的具体情况调整此配方。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page type''s ID are as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面类型ID的步骤如下：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`/config/site_post.php`。
- en: 'Load the page type by its path:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载页面类型：
- en: '[PRE16]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Get the ID from the page type.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从页面类型获取ID。
- en: '[PRE17]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Dump the page type ID (we are using the custom debugger explained in this chapter's
    introduction).
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出页面类型ID（我们使用本章引言中解释的自定义调试器）。
- en: '[PRE18]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Once the page type object is loaded, developers can call a number of functions
    to retrieve data from it, including the numeric ID.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦页面类型对象被加载，开发者可以调用多个函数来从其中检索数据，包括数字ID。
- en: See also
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page type by its handle* recipe
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过处理器获取页面类型*配方'
- en: Getting a page type's name
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面类型的名称
- en: Page type objects also contain methods to retrieve the name of the page type.
    In this exercise, we will load a page type by its handle, and then retrieve the
    name of the page type.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 页面类型对象还包含检索页面类型名称的方法。在这个练习中，我们将通过处理器加载页面类型，然后检索页面类型的名称。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be loading a page type with the handle of `right_sidebar`, so if that
    page type does not exist in your instance of concrete5, please adapt this recipe
    to suit your needs.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载一个具有`right_sidebar`处理器的页面类型，所以如果该页面类型在您的concrete5实例中不存在，请根据您的需求调整此配方。
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page type''s name are as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面类型名称的步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中打开`/config/site_post.php`。
- en: 'Load the page type by its handle:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过处理器加载页面类型：
- en: '[PRE19]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Get the name of the page type.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面类型的名称。
- en: '[PRE20]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Dump the name using our custom debugger.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的自定义调试器输出名称。
- en: '[PRE21]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `getCollectionTypeName` function simply returns the string value of the
    page type's name.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCollectionTypeName`函数简单地返回页面类型名称的字符串值。'
- en: See also
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page type by its handle* recipe
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过处理器获取页面类型*配方'
- en: Getting a page type's handle
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面类型的处理器
- en: If a page type has been loaded by its ID or has been provided in a different
    manner, developers may want to retrieve the handle of the page type. In this example,
    we will load a page type with an ID of `4` and use the concrete5 API to get its
    handle.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面类型已经通过其ID加载或以其他方式提供，开发者可能希望从现有的页面类型对象中检索页面类型的处理器。在这个例子中，我们将加载一个ID为`4`的页面类型，并使用concrete5
    API获取其处理器。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be loading a page type with an ID of 4, so please ensure that this exists
    in your concrete5 website. Feel free to change the ID in this recipe to something
    appropriate for your instance of concrete5.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载一个ID为4的页面类型，所以请确保它在您的concrete5网站上存在。您可以根据您的concrete5实例更改此配方中的ID为适当的值。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page type''s handle are as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面类型处理器的步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中打开`/config/site_post.php`。
- en: Load the page type by its ID.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过ID加载页面类型。
- en: '[PRE22]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Get the handle of the page type.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面类型的处理程序。
- en: '[PRE23]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Dump the handle using our custom debugger function.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的自定义调试函数输出处理程序。
- en: '[PRE24]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The function `getCollectionTypeHandle` of the page type object returns the handle
    string of the page type.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 页面类型对象的`getCollectionTypeHandle`函数返回页面类型的处理程序字符串。
- en: See also
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a page type by its ID* recipe
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID获取页面类型的配方
- en: Getting the icon for a page type
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面类型的图标
- en: In the concrete5 dashboard interface, page types have icons associated with
    them. In some advanced applications, you may want to retrieve the icon for the
    page type. In this recipe, we will load a page type by its handle and get its
    icon.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在concrete5仪表板界面中，页面类型与图标相关联。在某些高级应用中，您可能希望检索页面类型的图标。在这个配方中，我们将通过处理程序加载页面类型并获取其图标。
- en: Getting ready
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be loading a page type with a handle of `right_sidebar`. Feel free to
    change this handle to something appropriate for your concrete5 instance if `right_sidebar`
    does not exist.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载一个处理程序为`right_sidebar`的页面类型。如果`right_sidebar`不存在，请随意将其更改为适合您的concrete5实例的适当处理程序。
- en: How to do it...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting the icon for a page are as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面图标步骤如下：
- en: Open `/config/site_post.php` in your favorite code editor, as this is a good
    place to try out random code.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您最喜欢的代码编辑器中打开`/config/site_post.php`，因为这是一个尝试随机代码的好地方。
- en: Load the page type by its path.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载页面类型。
- en: '[PRE25]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Get the icon image.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取图标图像。
- en: '[PRE26]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Output the image. You should see the icon's image appear.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出图像。您应该看到图标图像出现。
- en: '[PRE27]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![How to do it...](img/4548OS_01_03.jpg)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/4548OS_01_03.jpg)'
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 returns a string containing the actual HTML image tag with the collection
    type's icon.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5返回一个包含集合类型图标的实际HTML图像标签的字符串。
- en: There's more...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If you would like to get the numeric ID of the file containing the page type
    icon, you can simply call this function:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获取包含页面类型图标的文件的数字ID，您可以简单地调用此函数：
- en: '[PRE28]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The numeric ID is useful when working with the file manager in concrete5, which
    is discussed in detail in [Chapter 3](ch03.html "Chapter 3. Files and File Sets"),
    *Files and File Sets* of this book.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 数字ID在处理concrete5文件管理器时很有用，这在本书第3章（[第3章。文件和文件集](ch03.html "第3章。文件和文件集")）中详细讨论。
- en: See also
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a page type by its ID* recipe
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID获取页面类型的配方
- en: Getting a list of pages that belong to a page type
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取属于页面类型的页面列表
- en: In many advanced concrete5 applications, developers may need to find a list
    of all of the pages that belong to a given page type. In this example, we will
    get an array of pages that have a page type with the handle of `right_sidebar`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多高级concrete5应用中，开发者可能需要找到属于给定页面类型的所有页面的列表。在这个例子中，我们将获取具有`right_sidebar`处理程序的页面类型的页面数组。
- en: Getting ready
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If your instance of concrete5 does not have a page type with the handle of `right_sidebar`,
    feel free to adapt the recipe to suit your needs. We will continue using `/config/site_post.php`
    as our sandbox to run random code snippets, as well as our custom debugging function
    that we created in this chapter's introduction.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的concrete5实例没有名为`right_sidebar`的页面类型，请随意调整配方以满足您的需求。我们将继续使用`/config/site_post.php`作为我们的沙盒来运行随机代码片段，以及我们在本章引言中创建的自定义调试函数。
- en: How to do it...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a list of pages belonging to a page type are as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 获取属于页面类型的页面列表的步骤如下：
- en: Open `/config/site_post.php` in your code editor to try out the following code.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`/config/site_post.php`以尝试以下代码。
- en: Load the page type by its handle.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过处理程序加载页面类型。
- en: '[PRE29]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Get the array of `Page` objects.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`Page`对象数组。
- en: '[PRE30]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Dump the array to see its contents.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出数组以查看其内容。
- en: '[PRE31]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 simply uses the relational MySQL database to find all of the pages
    that are related to the page type. Be aware that concrete5 ignores permissions
    settings when this function is called, so this should really only be used for
    internal purposes.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5简单地使用关系型MySQL数据库来查找与页面类型相关的所有页面。请注意，当调用此函数时，concrete5会忽略权限设置，因此这实际上仅应用于内部目的。
- en: See also
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a page type by its handle* recipe
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过处理程序获取页面类型的配方
- en: Creating a page type
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建页面类型
- en: You can easily add new page types through the concrete5 user interface, but
    there are some situations that can require you to create page types dynamically
    using PHP code.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过concrete5用户界面轻松添加新的页面类型，但有些情况可能需要您使用PHP代码动态创建页面类型。
- en: Getting ready
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, you will need to create an associative array that contains the data of
    the page type that you are creating.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个包含你正在创建的页面类型数据的关联数组。
- en: 'The array can contain the following fields:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以包含以下字段：
- en: '| Attribute | Required? | Description |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 是否必需？ | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `ctHandle` | Yes | The collection type handle: an alphanumeric string with
    underscores between words. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `ctHandle` | 是 | 集合类型处理程序：单词之间用下划线分隔的字母数字字符串。 |'
- en: '| `ctName` | Yes | The collection type name: a string that will appear in the
    concrete5 interface. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `ctName` | 是 | 集合类型名称：将在 concrete5 界面中显示的字符串。 |'
- en: '| `ctIcon` | No | If you''d like to specify an icon for this page type, pass
    in the numerical ID of the icon from the File Manager. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `ctIcon` | 否 | 如果你想要为此页面类型指定一个图标，请传递来自文件管理器的图标数值 ID。 |'
- en: '| `ctIsInternal` | No | A Boolean indicating if this page type is an internal
    page type. Internal page types do not appear in the page creation dialog in the
    concrete5 interface. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `ctIsInternal` | 否 | 一个布尔值，表示此页面类型是否为内部页面类型。内部页面类型不会在 concrete5 界面的页面创建对话框中显示。
    |'
- en: '| `akID` | No | An array of attribute key IDs to be added to the new page type.
    |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `akID` | 否 | 要添加到新页面类型中的属性键 ID 数组。 |'
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will create a page type using only the required fields: `ctHandle` and `ctName`.
    The steps are as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只使用所需的字段：`ctHandle` 和 `ctName` 来创建页面类型。步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你喜欢的代码编辑器中打开 `/config/site_post.php`。
- en: Declare the handle of the new page type to be created.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明要创建的新页面类型的处理程序。
- en: '[PRE32]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Declare the array that contains the data for the `ctHandle` and `ctName` fields.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明包含 `ctHandle` 和 `ctName` 字段数据的数组。
- en: '[PRE33]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Check to see if the page type already exists by loading it by the new handle.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过加载新的处理程序来检查页面类型是否已存在。
- en: '[PRE34]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If the page type does not exist, create it.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果页面类型不存在，则创建它。
- en: '[PRE35]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If it does exist, assign the existing page type to the new page type variable.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它存在，将现有页面类型分配给新页面类型变量。
- en: '[PRE36]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Dump the new page type variable to ensure that it worked.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出新页面类型变量以确保它已成功。
- en: '[PRE37]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works...
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 will take the data array that you pass in and use it to create a new
    `CollectionType` record in the database. concrete5 will also automatically generate
    a Master Collection page in the database. The Master Collection is a template
    page that concrete5 will use as base for all pages of that type. Any blocks, attributes,
    or other data assigned to the Master Collection will automatically be added to
    any new pages created with that page type.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 将会接收你传递的数据数组，并使用它来在数据库中创建一个新的 `CollectionType` 记录。concrete5 还会自动在数据库中生成一个主集合页面。主集合是一个模板页面，concrete5
    将将其用作该类型所有页面的基础。任何分配给主集合的块、属性或其他数据将自动添加到使用该页面类型创建的任何新页面中。
- en: There's more...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: If you are creating this page type in a custom package, you will need to pass
    in your package object to the `add()` function, so concrete5 knows that this page
    type belongs to your package. That way, when users uninstall your package, they
    will have the option of removing all of the page types that it created.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个自定义包中创建此页面类型，你需要将你的包对象传递给 `add()` 函数，这样 concrete5 就知道此页面类型属于你的包。这样，当用户卸载你的包时，他们将有选择删除它创建的所有页面类型的选项。
- en: 'Assuming that you know the handle of your package, use the following code to
    create a page type with it:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你知道你的包的处理程序，使用以下代码来创建一个带有它的页面类型：
- en: '[PRE38]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: See also
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating custom add-on package* recipe
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义插件包* 的配方'
- en: The *Updating a page type* recipe
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更新页面类型* 的配方'
- en: Updating a page type
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新页面类型
- en: Updating page types is very similar to creating a page type as discussed in
    the previous recipe.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 更新页面类型与之前配方中讨论的创建页面类型非常相似。
- en: How to do it...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First you will need to load an existing page type. You will need to pass in
    the same data array when updating page types as you would when creating them.
    The steps are as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要加载一个现有的页面类型。在更新页面类型时，你需要传递与创建时相同的数据数组。步骤如下：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `/config/site_post.php`。
- en: Declare the old handle and the new handle variables.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明旧处理程序和新处理程序变量。
- en: '[PRE39]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Define the new `$data` array with the new handle and new name.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新的处理程序和新的名称定义新的 `$data` 数组。
- en: '[PRE40]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If the page type exists, update it.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果页面类型存在，则更新它。
- en: '[PRE41]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Verify that the page type was updated by visiting `/dashboard/pages/types` in
    your concrete5 website.![How to do it...](img/4548OS_01_04.jpg)
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 concrete5 网站的 `/dashboard/pages/types` 来验证页面类型是否已更新。![如何操作...](img/4548OS_01_04.jpg)
- en: How it works...
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 will update the record in the database for the loaded page type. The
    Master Collection page is not updated when this function is called. You also cannot
    pass a packaged object to the update function, as that is only necessary when
    first creating a page type.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 将更新数据库中加载的页面类型的记录。当调用此函数时，主收藏页面不会被更新。您也不能将包装对象传递给更新函数，因为这只有在首次创建页面类型时才是必要的。
- en: See also
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关链接
- en: The *Creating a page type* recipe
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建页面类型* 的食谱'
- en: The *Deleting a page type* recipe
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除页面类型* 的食谱'
- en: Deleting a page type
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除页面类型
- en: In addition to adding and editing page types, you can also delete them.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加和编辑页面类型外，您还可以删除它们。
- en: Getting ready
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Since deleting page types is a destructive action that is irreversible, it's
    a good idea to create a dummy page type with the handle of `delete_me` for this
    exercise. We will also continue using `site_post.php` to execute arbitrary code.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 由于删除页面类型是一个破坏性的不可逆操作，因此为这次练习创建一个句柄为 `delete_me` 的虚拟页面类型是个好主意。我们还将继续使用 `site_post.php`
    来执行任意代码。
- en: How to do it...
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for deleting a page type are as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 删除页面类型的步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您偏好的代码编辑器中打开 `/config/site_post.php`。
- en: Define the handle of the page to be deleted.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要删除的页面的句柄。
- en: '[PRE42]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Load the page type by its handle.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过其句柄加载页面类型。
- en: '[PRE43]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now, delete the page type.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，删除页面类型。
- en: '[PRE44]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `delete()` function deletes the page type, the Master Collection, and all
    of the pages that use it. Use this function very cautiously, as once the data
    has been deleted, it cannot be recovered (unless you have a backup copy of the
    site's database).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete()` 函数删除页面类型、主收藏以及所有使用它的页面。请谨慎使用此函数，因为一旦数据被删除，就无法恢复（除非您有网站的数据库备份副本）。'
- en: See also
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关链接
- en: The *Getting a page type by its ID* recipe
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过ID获取页面类型* 的食谱'
- en: Creating a page type
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建页面类型
- en: Creating pages dynamically is a central concept of concrete5 development and
    can unlock a lot of powerful features in custom applications. Imagine a concrete5
    website that has a recipes database. You could make it so, that every time a recipe
    is added to the database, a new page for that recipe is added to the sitemap,
    immediately improving the depth of content on your website, its usability, and
    even search engine performance.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 动态创建页面是 concrete5 开发的一个核心概念，并且可以在自定义应用程序中解锁许多强大的功能。想象一个拥有食谱数据库的 concrete5 网站。您可以使其每次将食谱添加到数据库时，都会在网站地图中添加一个新的食谱页面，从而立即提高您网站的内容深度、可用性，甚至搜索引擎性能。
- en: In this example, we will create an "About Us" page and add it to the sitemap.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个“关于我们”页面并将其添加到网站地图中。
- en: Getting ready
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are continuing the practice of putting our code in `/config/site_post.php`
    for the purposes of demonstration and testing. In real-world use, your dynamic
    page creation would happen in controller files or in add-on packages.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续将代码放在 `/config/site_post.php` 中进行演示和测试。在实际应用中，您的动态页面创建将在控制器文件或附加包中发生。
- en: We will be assigning the new page a page type with the handle of `right_sidebar`.
    If this doesn't exist in your own concrete5 installation, please adapt the recipe
    to suit your needs.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分配一个具有句柄 `right_sidebar` 的新页面类型。如果这在您的 concrete5 安装中不存在，请根据您的需求调整此食谱。
- en: How to do it...
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for creating a page are as follows:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 创建页面的步骤如下：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `/config/site_post.php`。
- en: Load the page type that the new page will use. We will load the page type using
    its handle (`right_sidebar`, in this case).
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载新页面将使用的页面类型。我们将使用句柄（在这种情况下为 `right_sidebar`）加载页面类型。
- en: '[PRE45]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Create an associative array that contains the fields that you wish to specify
    for the new page. In this example, we will only specify the page's name and handle.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含您希望为新页面指定的字段的关联数组。在这个例子中，我们只指定页面的名称和句柄。
- en: '[PRE46]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Load the parent page that the new page will be placed under. In this case, we
    are loading the home page, since the new page will be available at the top level.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载新页面将放置其下的父页面。在这种情况下，我们正在加载主页，因为新页面将在顶级可用。
- en: '[PRE47]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Add the page by passing the `$pageType` object and `$data` array to the add
    function of the parent `Page` class.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`$pageType`对象和`$data`数组传递给父`Page`类的`add()`函数来添加页面。
- en: '[PRE48]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Output a message and exit the process.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出消息并退出进程。
- en: '[PRE49]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Visit your site's homepage to execute the code in `site_post.php`.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问你的网站主页以执行`site_post.php`中的代码。
- en: If you see the success message, comment out the code in `site_post.php` so you
    can visit the newly created page. Otherwise, concrete5 will create a new page
    every time the site is loaded into a browser.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看到成功消息，请注释掉`site_post.php`中的代码，这样你就可以访问新创建的页面。否则，每次将网站加载到浏览器中时，concrete5都会创建一个新页面。
- en: Visit the newly created page at `http://example.com/about`.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问新创建的页面`http://example.com/about`。
- en: How it works...
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `add()` function is a wrapper for the `Collection` class's `add()` function.
    Calling it will create a new `Collection` record in the database, and a new pending
    `CollectionVersion` record (which will be approved if the `cvIsApproved` variable
    is set to `true` or left blank). Then the new page will inherit the necessary
    permissions and get all of the blocks and other attributes from the Master Collection
    of the related page type.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`add()`函数是`Collection`类`add()`函数的包装器。调用它将在数据库中创建一个新的`Collection`记录，并创建一个新的待批准的`CollectionVersion`记录（如果`cvIsApproved`变量设置为`true`或留空，则将予以批准）。然后新页面将继承必要的权限，并从相关页面类型的Master
    Collection中获取所有块和其他属性。'
- en: There's more...
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You will need to provide two parameters to the `add()` function, a `CollectionType`
    object (which we worked with earlier in this chapter), and an associative array
    containing all of the data needed to create the page. The associative array can
    contain the following fields.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要向`add()`函数提供两个参数，一个`CollectionType`对象（我们在本章前面已经使用过），以及包含创建页面所需所有数据的关联数组。关联数组可以包含以下字段。
- en: '| Attribute | Required? | Description |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 是否必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `cName` | Yes | This is the name of the page. This will be how the page is
    referred to throughout the site, and will be automatically used in the page''s
    `<title>` tag (unless overridden by a meta title attribute, which you can specify
    after the page has been created.) |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| `cName` | 是 | 这是页面的名称。这将是整个网站中引用页面的方式，并且将自动用于页面的`<title>`标签（除非被元标题属性覆盖，你可以在页面创建后指定。）|'
- en: '| `cHandle` | No | This is the handle of the page, that is, how the page title
    will appear in the page URL. If you omit this field, concrete5 will generate a
    handle based off of the `cName` field. This is a little confusing, because concrete5
    allows dash characters ("-") in page handles, but does not seem to support them
    anywhere else. This is good, though, because the typical convention for page paths
    on the web is to use dashes rather than underscores. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| `cHandle` | 否 | 这是页面的处理程序，即页面标题将如何在页面URL中显示。如果你省略此字段，concrete5将根据`cName`字段生成一个处理程序。这有点令人困惑，因为concrete5允许在页面处理程序中使用破折号（"-"），但似乎在其他地方不支持它们。不过，这很好，因为网页路径的典型约定是使用破折号而不是下划线。|'
- en: '| `cDescription` | No | This is the internal description of the page. It is
    just a string that describes the purpose of a page. Some themes might use this
    data somewhere in the theme, but it is not required. Older versions of concrete5
    displayed the description of the page in the dashboard, but that has gone away
    since the update to version 5.5. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| `cDescription` | 否 | 这是页面的内部描述。它只是一个描述页面目的的字符串。一些主题可能会在主题的某个地方使用这些数据，但这不是必需的。concrete5的旧版本会在仪表板中显示页面的描述，但自更新到5.5版本后，这一功能已经取消。|'
- en: '| `uID` | No | This is an integer ID to indicate the page''s author. Pass in
    the ID of any user in the concrete5 `Users` table to set that user as the page
    author. If omitted, the currently logged in user will be registered as the page
    author. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| `uID` | 否 | 这是一个整数ID，用于表示页面的作者。将任何用户在concrete5的`Users`表中的ID传递进去，可以将该用户设置为页面作者。如果省略，则当前登录用户将被注册为页面作者。|'
- en: '| `pkgID` | No | This is an integer ID of the package that created this page.
    Make sure to include this field if you are creating pages from a package. If you
    omit this field, but the attached page type belongs to a package, the page type''s
    package ID will be attached to this page. This will help users optionally remove
    any pages that were created by your package if they choose to uninstall your package.
    |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| `pkgID` | 否 | 这是创建此页面的包的整数ID。如果你是从包中创建页面，请确保包含此字段。如果你省略了此字段，但附加的页面类型属于一个包，则页面类型的包ID将附加到该页面上。这将帮助用户在卸载你的包时可选地删除由你的包创建的任何页面。|'
- en: '| `cDatePublic` | No | This is a MySQL-formatted date string (`YYYY-MM-DD`)
    of when this page should be publicly visible on the website. If omitted, the current
    date and time from the web server is used. |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| `cDatePublic` | 否 | 这是页面应在网站上公开可见的MySQL格式日期字符串（`YYYY-MM-DD`）。如果省略，则使用来自Web服务器的当前日期和时间。|'
- en: '| `cvIsApproved` | No | This is a Boolean that indicates if the initial page
    version should be approved. Defaults to true if nothing is specified. When pages
    are approved, they are made immediately visible to all users that have permission
    to access that page on the website. Any subsequent edits to a page will require
    the new versions of the page to be approved before users can see the changes.
    |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| `cvIsApproved` | 否 | 这是一个布尔值，表示初始页面版本是否应该被批准。如果没有指定，默认为true。当页面被批准时，它们将立即对所有有权访问该页面的网站用户可见。对页面的任何后续编辑都需要在用户可以看到更改之前批准页面的新版本。|'
- en: See also
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: The *Updating an existing page* recipe
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新现有页面的配方
- en: The *Getting a page type by its ID* recipe
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID获取页面类型的配方
- en: The *Getting a page type by its handle* recipe
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过句柄获取页面类型的配方
- en: Updating an existing page
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新现有页面
- en: Updating pages is similar to creating them in that you must first pass in an
    associative array containing all of the data that you wish to update on the page.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 更新页面与创建页面类似，你必须首先传递一个包含你希望在页面上更新的所有数据的关联数组。
- en: Getting ready
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will be modifying a page with the path of `/about`. We created
    that page in the previous recipe, but if it does not exist on your system, please
    adapt the code to your needs.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将修改路径为`/about`的页面。我们在上一个配方中创建了该页面，但如果它在你系统中不存在，请根据你的需求调整代码。
- en: How to do it...
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In this example, we will update the name of the `About` page. The steps are
    as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将更新`About`页面的名称。步骤如下：
- en: First, we need to load the `Page` object by its path.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要通过其路径加载`Page`对象。
- en: '[PRE50]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Create an associative array with the data that you wish to update.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含你希望更新的数据的关联数组。
- en: '[PRE51]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Pass the data array into the `$page` object's update function.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据数组传递给`$page`对象的`update`函数。
- en: '[PRE52]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Output a success message and exit the process.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出成功消息并退出进程。
- en: '[PRE53]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How it works...
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `update` function updates the necessary tables in the database with the
    newly specified information. concrete5 will also rescan all permissions for this
    page and all of the related page paths. When the function is complete, the `on_page_update`
    event is fired, which you can write custom code to listen to and perform custom
    actions when a page is updated. Listening to system events is covered in a later
    chapter.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`函数更新数据库中必要的表以包含新指定的信息。concrete5还将重新扫描此页面及其所有相关页面路径的所有权限。当函数完成后，将触发`on_page_update`事件，你可以编写自定义代码来监听并在页面更新时执行自定义操作。监听系统事件将在后面的章节中介绍。'
- en: There's more...
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Just like creating a page, you will need to pass an associative array to the
    `update()` function in order to update an existing page. You can use all of the
    fields specified in the previous recipe for adding a page, in addition to these
    other optional fields.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 就像创建页面一样，你需要传递一个关联数组到`update()`函数以更新现有页面。你可以使用上一个配方中指定的所有字段来添加页面，以及这些其他可选字段。
- en: '| Attribute | Description |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ctID` | This is the numerical ID of a page type to change the page to. Supply
    this field to change the page type of a given page. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| `ctID` | 这是更改页面类型的页面类型的数值ID。提供此字段以更改给定页面的页面类型。|'
- en: '| `cCacheFullPageContent` | A Boolean that specifies if the page should support
    full page caching (some block types do not support full page caching, so only
    use this when the blocks on that page offer full caching support). |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `cCacheFullPageContent` | 一个布尔值，指定页面是否应支持完整页面缓存（某些块类型不支持完整页面缓存，因此仅在页面上提供的块支持完整缓存支持时使用）。|'
- en: '| `cCacheFullPageContentOverrideLifetime` | A string to tell concrete5 how
    the cache lifetime should perform. Possible values are `default`, `custom`, or
    `forever`. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `cCacheFullPageContentOverrideLifetime` | 一个字符串，告诉 concrete5 缓存寿命应该如何执行。可能的值是
    `default`、`custom` 或 `forever`。|'
- en: '| `cCacheFullPageContentLifetimeCustom` | A setting in minutes as to how long
    the cache should last when the override mode is set to `custom`. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `cCacheFullPageContentLifetimeCustom` | 当覆盖模式设置为 `custom` 时，缓存应持续多长时间的分钟设置。|'
- en: See also
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating a page type* recipe
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建页面类型* 食谱'
- en: Setting page attributes
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置页面属性
- en: Pages, like most objects in concrete5, can have any type of custom attribute
    attached to them. This allows for immense flexibility, but it can be difficult
    to read and write these attributes using raw SQL. The concrete5 API makes setting
    and reading page attributes easy.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 页面，像 concrete5 中的大多数对象一样，可以附加任何类型的自定义属性。这提供了极大的灵活性，但使用原始 SQL 读写这些属性可能很困难。concrete5
    API 使设置和读取页面属性变得简单。
- en: Getting ready
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to know at least the handle of the attribute key that you wish
    to assign to the page. A common attribute to set is the `Meta Title` attribute,
    which updates the text that appears in the HTML `<title>` tag.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 您至少需要知道要分配给页面的属性键句柄。一个常见的设置属性是 `Meta Title` 属性，它更新出现在 HTML `<title>` 标签中的文本。
- en: How to do it...
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will set the `Meta Title` attribute to the About Us page in this example.
    The steps are as follows:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将设置 `Meta Title` 属性到关于我们页面。步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中打开 `/config/site_post.php`。
- en: Load the `Page` object that you wish to set the attribute on.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载您希望设置属性的 `Page` 对象。
- en: '[PRE54]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Call the `setAttribute` function on the `$page` object, passing in two parameters:
    the attribute handle (key), and the value.'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `$page` 对象上调用 `setAttribute` 函数，传入两个参数：属性句柄（键）和值。
- en: '[PRE55]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Output a success message and exit the process.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出成功消息并退出进程。
- en: '[PRE56]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: How it works...
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `setAttribute` function is a member of the `Collection` class, which the
    `Page` class extends. It requires that you provide two parameters, an attribute
    key (which can either be a string representing the attribute key handle (which
    we provided here), or an actual `AttributeKey` object), and the value.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAttribute` 函数是 `Collection` 类的一个成员，该类由 `Page` 类扩展。它要求您提供两个参数，一个属性键（可以是表示属性键句柄的字符串（我们在这里提供），或者实际的
    `AttributeKey` 对象），以及值。'
- en: There's more...
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `setAttribute` function is very handy for setting the data of any kind of
    page attribute. One can update a page's meta information (such as description,
    keywords, and title) and also give the page various options, such as, excluding
    it from the navigation (as seen previously) or from the `sitemap.xml` file that
    search engines look for.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAttribute` 函数对于设置任何类型的页面属性数据非常方便。可以更新页面的元信息（如描述、关键词和标题），还可以为页面提供各种选项，例如，将其排除在导航之外（如之前所见）或从搜索引擎查找的
    `sitemap.xml` 文件中。'
- en: You can update any attribute that has been installed in the concrete5 system.
    To see all available page attributes, or to create new ones, visit the **Page
    Attributes** area of your site's dashboard (located at `/dashboard/pages/attributes/`).
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更新 concrete5 系统中安装的任何属性。要查看所有可用的页面属性或创建新的属性，请访问您网站仪表板的 **页面属性** 区域（位于 `/dashboard/pages/attributes/`）。
- en: See also
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page by its path* recipe
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过路径获取页面* 食谱'
- en: The *Getting a page attribute* recipe
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取页面属性* 食谱'
- en: Getting a page attribute
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面属性
- en: In addition to being able to set page attributes, developers can also retrieve
    attributes just as easily. In this exercise, we will get the `Meta Title` attribute
    for the About page.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够设置页面属性外，开发者还可以轻松检索属性。在本练习中，我们将获取关于页面的 `Meta Title` 属性。
- en: Getting ready
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are assuming the presence of a page with the path of `/about` in this recipe.
    If that page does not exist, you can create it, or adapt the code in this recipe
    to fit your circumstances.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们假设存在一个路径为 `/about` 的页面。如果该页面不存在，您可以创建它，或者修改本食谱中的代码以适应您的环境。
- en: How to do it...
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page attribute are as follows:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面属性的步骤如下：
- en: Open `/config/site_post.php` in your preferred editor. This is a good place
    to run some arbitrary code.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的编辑器中打开 `/config/site_post.php`。这是一个运行一些任意代码的好地方。
- en: Load the `Page` object.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 `Page` 对象。
- en: '[PRE57]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Get the `meta_title` attribute.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 `meta_title` 属性。
- en: '[PRE58]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Dump the variable using the custom debugging function that we created in the
    chapter's introduction.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在章节介绍中创建的自定义调试函数输出变量。
- en: '[PRE59]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works...
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '...工作原理...'
- en: concrete5 uses the attribute handle string to find the appropriate record in
    the database and return its value. concrete5 stores attributes in the EAV format
    (**entity**, **attribute**, **value**), and this makes it difficult to read these
    values directly with SQL queries. The concrete5 API simplifies this for developers.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5使用属性处理字符串来在数据库中找到相应的记录并返回其值。concrete5以EAV格式（**实体**、**属性**、**值**）存储属性，这使得直接使用SQL查询读取这些值变得困难。concrete5
    API简化了这一过程，方便开发者使用。
- en: See also
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page by its path* recipe
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过路径获取页面**的教程'
- en: The *Setting a page attribute* recipe
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置页面属性**的教程'
- en: Getting a page's ID
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面ID
- en: Developers will often need to know a page's ID, especially when relating pages
    to other database objects (such as a blog post or calendar event). In this example,
    we will load the `/about` page that we've been working with and get its ID.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者通常会需要知道页面的ID，尤其是在将页面与其他数据库对象（如博客文章或日历事件）相关联时。在本例中，我们将加载我们一直在处理的`/about`页面，并获取其ID。
- en: Getting ready
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please make sure the `/about` page exists in your instance of concrete5\. Feel
    free to modify the code in this recipe if that page does not exist.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在您的concrete5实例中存在`/about`页面。如果该页面不存在，您可以自由修改本教程中的代码。
- en: How to do it...
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page''s ID are as follows:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面ID的步骤如下：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`/config/site_post.php`。
- en: Load the `Page` object by its path.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载`Page`对象。
- en: '[PRE60]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Get the page's ID.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面的ID。
- en: '[PRE61]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Dump the contents of the `$id` variable to see what the ID is.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`$id`变量的内容输出，以查看ID是什么。
- en: '[PRE62]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: See also
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page by its path* recipe
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过路径获取页面**的教程'
- en: Getting a page's path
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面的路径
- en: In addition to being able to get a page's ID, developers can also retrieve the
    path for a page. In this recipe, we will load a page by its ID and then retrieve
    its path.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够获取页面的ID之外，开发者还可以检索页面的路径。在本教程中，我们将通过页面的ID来加载页面，然后检索其路径。
- en: How to do it...
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page''s path are as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面路径的步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中打开`/config/site_post.php`。
- en: Load the page by its ID. We will use the ID of `4` here, which should belong
    to a page on the dashboard.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过ID加载页面。这里我们将使用`4`的ID，它应该属于仪表板上的一个页面。
- en: '[PRE63]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Get the page's path.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面的路径。
- en: '[PRE64]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Use the custom debugging function to output the path.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用自定义调试函数输出路径。
- en: '[PRE65]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: See also
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page by its ID* recipe
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过ID获取页面**的教程'
- en: Getting a page's handle
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面的处理程序
- en: Pages, like page types and other objects in concrete5, have handles in addition
    to paths. The handle is similar to a slug in other content management systems.
    In this exercise, we will load a page by its ID and then retrieve its handle.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 页面，就像页面类型和其他concrete5中的对象一样，除了路径外还有处理程序。处理程序在其他内容管理系统中的slug类似。在本练习中，我们将通过ID加载页面，然后检索其处理程序。
- en: How to do it...
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page''s handle are as follows:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面处理程序的步骤如下：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`/config/site_post.php`。
- en: Load the page by its ID.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过ID加载页面。
- en: '[PRE66]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Get the page's handle.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面的处理程序。
- en: '[PRE67]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Dump the handle variable to see its contents.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出处理程序变量以查看其内容。
- en: '[PRE68]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: See also
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page by its ID* recipe
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过ID获取页面**的教程'
- en: Getting a page's name
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面的名称
- en: Page names are often used as the de facto titles in concrete5\. In this exercise,
    we will load a page by its path, and then get its name.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 页面名称通常在concrete5中用作事实上的标题。在本练习中，我们将通过路径加载页面，然后获取其名称。
- en: How to do it...
  id: totrans-456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page''s name are as follows:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面名称的步骤如下：
- en: Open `/config/site_post.php` in your editor.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`/config/site_post.php`。
- en: Load the page by its path.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载页面。
- en: '[PRE69]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Get the page's title.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面的标题。
- en: '[PRE70]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Dump the contents of the title variable.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出标题变量的内容。
- en: '[PRE71]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: See also
  id: totrans-465
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Getting a page by its path* recipe
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过路径获取页面**的教程'
- en: Getting a page's description
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面的描述
- en: Page descriptions are not used very widely used in concrete5\. Some themes will
    treat them as content excerpts, while other add-ons will use descriptions as a
    generic attribute storage area. Regardless, they are still built into concrete5,
    and in this recipe we will load a page by its path and retrieve its description.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 页面描述在concrete5中并不广泛使用。一些主题会将它们视为内容摘录，而其他插件会将描述用作通用属性存储区域。无论如何，它们仍然内置在concrete5中，在这个配方中，我们将通过路径加载页面并检索其描述。
- en: Getting ready
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Many pages in concrete5 do not have descriptions. If you wish, you can edit
    a page to add a description as shown in the following screenshot:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5中的许多页面都没有描述。如果您愿意，可以编辑页面以添加描述，如下面的截图所示：
- en: '![Getting ready](img/4548OS_01_05.jpg)'
  id: totrans-471
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/4548OS_01_05.jpg)'
- en: How to do it...
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page''s description are as follows:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面描述的步骤如下：
- en: Open the `/config/site_post.php` file in your code editor.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`/config/site_post.php`文件。
- en: Load the page by its path.
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载页面。
- en: '[PRE72]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Get the page's description.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面的描述。
- en: '[PRE73]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Dump the contents of the description variable.
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出描述变量的内容。
- en: '[PRE74]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: See also
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a page by its path* recipe
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过路径获取页面* 的配方'
- en: Getting a page's page type ID
  id: totrans-483
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面页面类型ID
- en: As we discussed earlier in the chapter, pages are assigned a page type. In this
    recipe, we will get the page type ID from a `Page` object.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在本章前面所讨论的，页面被分配了一个页面类型。在这个配方中，我们将从`Page`对象中获取页面类型ID。
- en: How to do it...
  id: totrans-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page''s page type ID are as follows:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面页面类型ID的步骤如下：
- en: Open `/config/site_post.php` in your code editor, so we can run some arbitrary
    code.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`/config/site_post.php`，以便我们可以运行一些任意代码。
- en: Load the page by its path.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载页面。
- en: '[PRE75]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Get the page type ID for this page.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取此页面的页面类型ID。
- en: '[PRE76]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Dump the page type ID using our custom debugging function.
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的自定义调试函数输出页面类型ID。
- en: '[PRE77]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: See also
  id: totrans-494
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a page by its path* recipe
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过路径获取页面* 的配方'
- en: Getting a page's page type handle
  id: totrans-496
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面页面类型句柄
- en: In addition to being able to retrieve the ID of a page's page type, developers
    can also get the handle.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够检索页面页面类型的ID之外，开发者还可以获取句柄。
- en: How to do it...
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page''s page type handle are as follows:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面页面类型句柄的步骤如下：
- en: Open `/config/site_post.php` in your code editor, since we will just be running
    some arbitrary code.
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开`/config/site_post.php`，因为我们只是要运行一些任意代码。
- en: Load the page by its path.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载页面。
- en: '[PRE78]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Get the page type handle.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面类型句柄。
- en: '[PRE79]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Dump the handle variable to see its contents.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出句柄变量以查看其内容。
- en: '[PRE80]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: See also
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a page by its path* recipe
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过路径获取页面* 的配方'
- en: Getting a page's theme object
  id: totrans-509
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面主题对象
- en: Every page can have its own individual theme in concrete5\. While it's typical
    for most sites to only use one global theme, concrete5 does allow developers to
    set individual themes for each page. In this recipe, we will get the page's theme
    object, which can be used to see what theme is active on a given page.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在concrete5中，每个页面都可以有自己的独立主题。虽然对于大多数网站来说，只使用一个全局主题是典型的，但concrete5确实允许开发者为每个页面设置独立主题。在这个配方中，我们将获取页面的主题对象，这可以用来查看给定页面上激活的主题。
- en: How to do it...
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting a page''s theme object are as follows:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面主题对象的步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中打开`/config/site_post.php`。
- en: Load the page by its path.
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载页面。
- en: '[PRE81]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Get the theme object.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取主题对象。
- en: '[PRE82]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Dump the theme object to inspect the class.
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出主题对象以检查其类。
- en: '[PRE83]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: See also
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting a page by its path* recipe
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过路径获取页面* 的配方'
- en: Getting the children below a page
  id: totrans-522
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面下方的子页面
- en: If you need to access the children of a page, you can have concrete5 return
    an array of numerical IDs. These IDs can then be used to load each of the `Page`
    objects individually.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要访问页面的子项，您可以要求concrete5返回一个数字ID数组。然后，可以使用这些ID分别加载每个`Page`对象。
- en: How to do it...
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting the children below a page are as follows:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面下方子页面的步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中打开`/config/site_post.php`。
- en: Load the parent page by its ID.
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过ID加载父页面。
- en: '[PRE84]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Get the array of child IDs.
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取子ID数组。
- en: '[PRE85]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Loop through the child ID array and output the name of each page.
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历子ID数组并输出每个页面的名称。
- en: '[PRE86]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Exit the process.
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出进程。
- en: '[PRE87]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: How it works...
  id: totrans-535
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: concrete5 will return an array of numeric IDs for each of the pages beneath
    the parent page. In this example, we loaded the home page, so the result should
    be a list of every page on the website. This function ignores permissions, and
    can be taxing on the database if there are a lot of pages to load. It is a better
    idea to use the `PageList` class to loop through pages, and that class is described
    later on in this chapter.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5将为父页面下的每个页面返回一个数字ID数组。在这个例子中，我们加载了主页，所以结果应该是网站上每个页面的列表。这个函数忽略权限，如果有很多页面要加载，可能会对数据库造成压力。使用`PageList`类遍历页面会更好，这个类在本章后面会进行描述。
- en: Moving a page
  id: totrans-537
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动页面
- en: The concrete5 sitemap is a great tool for managing the page hierarchy of your
    website. It lets you arrange the order of pages, and even drag-and-drop pages
    to different areas of the site. Thankfully, you aren't limited to using the graphical
    interface to move pages around the site. You can also rearrange pages dynamically
    in your custom concrete5 applications.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5的网站地图是一个管理网站页面层次结构的强大工具。它允许你安排页面的顺序，甚至可以将页面拖放到网站的不同区域。幸运的是，你不仅限于使用图形界面来移动页面。你还可以在你的自定义concrete5应用程序中动态地重新排列页面。
- en: Getting ready
  id: totrans-539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we are going to move a Careers page underneath the About Us
    page. Before we can move a page, we need to have the `Page` object of the new
    parent page that we are moving the current page to.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将把职业页面移动到“关于我们”页面之下。在我们能够移动页面之前，我们需要有新父页面的`Page`对象，我们将把当前页面移动到这个新父页面。
- en: This exercise assumes that pages exist at both `/about` and `/careers` in your
    concrete5 site. You can create those pages through the concrete5 interface, or
    adapt the code in this recipe to work with pages that exist on your own site.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习假设在你的concrete5网站上存在`/about`和`/careers`这两个页面。你可以通过concrete5界面创建这些页面，或者修改这个配方中的代码以适应你自己的网站。
- en: How to do it...
  id: totrans-542
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'The steps for moving a page are as follows:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 移动页面的步骤如下：
- en: Open `/config/site_post.php`, as that is a safe place to play with some random
    code.
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`/config/site_post.php`，因为那是一个安全的地方来尝试一些随机的代码。
- en: First, load the About Us page, which is where the Careers page will be moved
    to.
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载“关于我们”页面，这是职业页面将要移动到的位置。
- en: '[PRE88]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Now, we need to load the careers page that we are moving.
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要加载我们要移动的职业页面。
- en: '[PRE89]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Finally, call the `move` function on the careers page, passing it the new parent
    page and an optional Boolean which tells concrete5 if we want to save the old
    page path as well as the new one.
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在职业页面上调用`move`函数，传递新父页面和一个可选的布尔值，告诉concrete5我们是否希望同时保存旧页面路径和新页面路径。
- en: '[PRE90]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: How it works...
  id: totrans-551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The move function is very easy to use. You only need to provide one parameter,
    which is a `Page` object of the new parent that you are moving the page under.
    There is an optional second parameter to indicate if you wish to retain the old
    page path in addition to the current one. That parameter defaults to false.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 移动函数非常容易使用。你只需要提供一个参数，即你将页面移动到其下的新父页面的`Page`对象。还有一个可选的第二个参数，表示你是否希望保留旧页面路径以及当前路径。该参数默认为false。
- en: Once the page is moved, it will inherit the permissions of the new parent page
    (if the page does not have its own permissions set explicitly).
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 页面移动后，它将继承新父页面的权限（如果页面没有明确设置自己的权限）。
- en: Once the page is moved, the event `on_page_move` is fired.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 页面移动后，将触发`on_page_move`事件。
- en: See also
  id: totrans-555
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Listening to system events* in [Chapter 9](ch09.html "Chapter 9. System Events
    and Advanced Configuration"), *System Events and Advanced Configuration*'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章。系统事件和高级配置")中*监听系统事件*，*系统事件和高级配置*
- en: The *Getting a Page object by its path* recipe
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过路径获取页面对象的配方
- en: Deleting a page (and its children)
  id: totrans-558
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除页面（及其子页面）
- en: concrete5 also makes it easy to delete pages from the sitemap.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5还使得从网站地图中删除页面变得容易。
- en: Getting ready
  id: totrans-560
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Deleting pages is a permanent destructive action. When experimenting with this
    code, it would be a good idea to create a dummy page with a path of `/delete-me`.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 删除页面是一个永久性的破坏性操作。在尝试这段代码时，创建一个路径为`/delete-me`的虚拟页面会是一个好主意。
- en: How to do it...
  id: totrans-562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We will permanently delete the about us page and all of its child pages. The
    steps are as follows:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将永久删除“关于我们”页面及其所有子页面。步骤如下：
- en: First, load the page that you wish to delete. We will delete a dummy page.
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载你想要删除的页面。我们将删除一个虚拟页面。
- en: '[PRE91]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Call the `delete()` function on the `Page` object.
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Page`对象上调用`delete()`函数。
- en: '[PRE92]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: How it works...
  id: totrans-568
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 will fire the `on_page_delete` event before any actual deleting occurs.
    After the event fires, the page (and all of its children) are deleted from the
    database. This operation is permanent, so it is important to make sure that you
    only delete pages when you are certain that they are no longer needed.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 在实际删除之前将触发 `on_page_delete` 事件。事件触发后，页面（及其所有子页面）将从数据库中删除。此操作是永久的，因此确保您只在确定不再需要页面时删除页面非常重要。
- en: There's more...
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: If you don't want to permanently delete a page, you can move it to the Trash.
    As of concrete5 version 5.5, pages can be "temporarily" deleted and moved under
    a special internal page called the Trash.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想永久删除页面，可以将它移动到回收站。截至 concrete5 版本 5.5，页面可以被“临时”删除并移动到称为回收站的特殊内部页面。
- en: '[PRE93]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: See also
  id: totrans-573
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: The *Getting a page by its path* recipe
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过路径获取页面的菜谱
- en: Getting a list of pages
  id: totrans-575
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取页面列表
- en: Many applications will have a need to get a list of pages and perform various
    filter and sorting functions on the list. For this, there is the `PageList` class,
    which exposes many convenient helper functions to assist in working with large
    lists of pages.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序将需要获取页面列表并在列表上执行各种过滤和排序函数。为此，存在 `PageList` 类，它公开了许多方便的辅助函数，以帮助处理大量页面列表。
- en: Getting ready
  id: totrans-577
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we are going to find all of the pages under the `/blog` page.
    This is a common use of the page list model. The `PageList` class is not automatically
    loaded by concrete5, so we will need to use the `Loader` class to have it available
    to us.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将查找 `/blog` 页面下的所有页面。这是页面列表模型的一个常见用途。`PageList` 类不是由 concrete5 自动加载的，因此我们需要使用
    `Loader` 类来使其对我们可用。
- en: If your site does not have a page located at `/blog`, it would be helpful to
    create that page, as well as a few child pages below it. Otherwise, feel free
    to adapt the code in this recipe to suit your needs.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站没有位于 `/blog` 的页面，创建该页面以及其下的几个子页面将很有帮助。否则，请随意根据您的需求调整此菜谱中的代码。
- en: How to do it...
  id: totrans-580
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will get a list of 20 pages that exist under `/blog` in
    the sitemap. The steps are as follows:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 在此菜谱中，我们将获取 `/blog` 在网站地图下存在的 20 个页面列表。步骤如下：
- en: First, we must make the `PageList` class available for us to use.
  id: totrans-582
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须使 `PageList` 类对我们可用。
- en: '[PRE94]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Create a new instance of the `PageList` class. We will assign it to a variable
    called `$list`.
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `PageList` 类的新实例。我们将将其分配给一个名为 `$list` 的变量。
- en: '[PRE95]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Filter the list to only include pages underneath the `/blog` page.
  id: totrans-586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过滤列表，只包括 `/blog` 页面下的页面。
- en: '[PRE96]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Limit the list of pages to only include the first 20 results.
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制页面列表，只包括前 20 个结果。
- en: '[PRE97]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Run the database query and get the first "page" of results, which will return
    an array of 20 `Page` objects.
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行数据库查询并获取第一个“页面”的结果，这将返回一个包含 20 个 `Page` 对象的数组。
- en: '[PRE98]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Dump the contents of the pages variable to see the array.
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面变量的内容输出以查看数组。
- en: '[PRE99]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: How it works...
  id: totrans-594
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `PageList` class extends the core `DatabaseItemList` class, which has a
    number of useful functions itself. The `get()` function accepts two parameters,
    the number of records to retrieve, and the offset.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageList` 类扩展了核心的 `DatabaseItemList` 类，该类本身就有许多有用的函数。`get()` 函数接受两个参数，即要检索的记录数和偏移量。'
- en: There's more...
  id: totrans-596
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The page list class implements "magic methods," which allow allow us to filter
    the list by any page attribute. We simply need to create a function name based
    off of the camel cased version of the attribute handle, preceded by "filterBy".
    So to filter all pages that have the `exclude_nav` attribute, we would write the
    following function:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 页面列表类实现了“魔法方法”，这允许我们通过任何页面属性来过滤列表。我们只需创建一个基于属性处理程序驼峰式命名的函数名，并在其前加上“filterBy”。因此，要过滤所有具有
    `exclude_nav` 属性的页面，我们会编写以下函数：
- en: '[PRE100]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Alternatively, if you want to just get an array of the first 99 `Page` objects
    and ignore pagination, use the `get()` function.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您只想获取前 99 个 `Page` 对象的数组并忽略分页，请使用 `get()` 函数。
- en: '[PRE101]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Since version 5.5, concrete5 uses Twitter''s open source Bootstrap CSS framework
    for many of their internal styles. You can get the pagination controls in nicely
    formatted HTML (with relevant Bootstrap CSS classes) by printing/echoing the results
    of the following function (preferably you''d use this function in a view or template
    file of a block or single page):'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 自从5.5版本以来，concrete5使用Twitter的开源Bootstrap CSS框架来处理许多内部样式。你可以通过打印/输出以下函数的结果（最好在视图或模板文件中使用此函数）来获取格式良好的HTML（带有相关的Bootstrap
    CSS类）的分页控件：
- en: '[PRE102]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: The `DatabaseItemList` class and `PageList` class have several functions that
    make working with a collection of pages easier. You can filter by keywords, by
    collection type, parent page, and by any attribute using magic methods. We will
    cover the `DatabaseItemList` class further in [Chapter 5](ch05.html "Chapter 5. Working
    with Databases and Models"), *Working with Databases and Models*.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatabaseItemList` 类和 `PageList` 类有多个函数，使得处理页面集合变得更容易。你可以通过关键字、集合类型、父页面以及任何属性使用魔法方法进行筛选。我们将在
    [第5章](ch05.html "第5章。与数据库和模型一起工作") 中进一步介绍 `DatabaseItemList` 类，*与数据库和模型一起工作*。'
- en: Adding a page selector field to a form
  id: totrans-604
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表单中添加页面选择器字段
- en: It is easy to add a page selector field to a form. When clicked on, the sitemap
    will appear in a modal window, allowing for easy browsing and selecting of a page.
    This allows for user friendly custom applications that can allow users to attach
    pages to any type of custom object, like a blog post or cooking recipe, for example.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单中添加页面选择器字段很容易。当点击时，网站地图将在模态窗口中显示，允许轻松浏览和选择页面。这允许用户友好的自定义应用程序，可以允许用户将页面附加到任何类型的自定义对象，例如博客文章或烹饪食谱。
- en: Getting ready
  id: totrans-606
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need to use the `FormPageSelectorHelper` class, which we will need to
    load using the `Loader` library.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用 `FormPageSelectorHelper` 类，我们需要使用 `Loader` 库来加载它。
- en: This recipe will need to be written inside of an HTML form somewhere in your
    site. We have created a basic single page for this purpose, which can be downloaded
    with the code from the website for this book. To install the single page, copy
    the code for this recipe to your concrete5 site directory and visit `/dashboard/pages/single`.
    Add a new single page with a path of `/example`.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方需要写入你网站中的某个HTML表单内。我们为此创建了一个基本的单页，可以从本书的网站上下载代码。要安装单页，将此配方的代码复制到你的concrete5网站目录中，并访问
    `/dashboard/pages/single`。添加一个路径为 `/example` 的新单页。
- en: How to do it...
  id: totrans-609
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'concrete5 includes a helper to generate the necessary JavaScript and HTML text
    needed to show the sitemap selector widget. We will use the `Loader` class to
    include and return the `PageSelectorHelper` class, which will then return the
    entire HTML that we need. The steps are as follows:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 包含一个生成显示网站地图选择器小部件所需的必要JavaScript和HTML文本的辅助工具。我们将使用 `Loader` 类来包含并返回
    `PageSelectorHelper` 类，然后它将返回我们需要的整个HTML。步骤如下：
- en: Make the `pageSelector` helper class available for us to use. The `Loader` class
    will automatically instantiate and return the instantiated helper object when
    the helper gets loaded.
  id: totrans-611
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使 `pageSelector` 辅助类可供我们使用。当辅助工具被加载时，`Loader` 类将自动实例化并返回实例化的辅助对象。
- en: '[PRE103]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Output the HTML and JavaScript required allowing users to select a page.
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出所需的HTML和JavaScript，以便用户可以选择一个页面。
- en: '[PRE104]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: How it works...
  id: totrans-615
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `selectPage` function returns the HTML and JavaScript necessary to produce
    a page selector field. There is only one parameter required, and that is a string
    indicating the name of the field. concrete5 will add a hidden `<input>` element
    to the form, which will allow the selected page ID to be read from a POST request.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectPage` 函数返回生成页面选择器字段所需的HTML和JavaScript。只需要一个参数，即表示字段名称的字符串。concrete5
    将在表单中添加一个隐藏的 `<input>` 元素，允许从POST请求中读取选定的页面ID。'
- en: In this example, once the form is submitted, you could retrieve the selected
    page ID by looking in the `$_POST` super variable.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一旦表单提交，你可以通过查看 `$_POST` 超全局变量来检索选定的页面ID。
- en: '[PRE105]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: There's more...
  id: totrans-619
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can specify a page ID in the optional second parameter, which will populate
    the page selector with an existing page.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在可选的第二个参数中指定页面ID，这将用现有页面填充页面选择器。
- en: '[PRE106]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The `pageSelector` helper also has a function to display a sitemap in a modal
    window.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '`pageSelector` 辅助工具还有一个函数可以在模态窗口中显示网站地图。'
- en: '[PRE107]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Note that the `sitemap()` function loads an element, which is automatically
    printed to the screen, so there is no need to echo or print the result.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`sitemap()` 函数加载一个元素，该元素会自动打印到屏幕上，因此不需要回显或打印结果。
