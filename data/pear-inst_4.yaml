- en: Chapter 4. Clever Website Coordination Using the PEAR Installer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 使用 PEAR 安装程序进行巧妙的网站协调
- en: In the last two chapters, we learned how to use the PEAR installer's features
    to manage libraries and applications for public distribution. In this chapter,
    we'll learn how the PEAR installer can be used to make managing the contents of
    a complex and rapidly evolving website easy. In fact, the PEAR installer can be
    used to provide an extra level of insurance that a website will function as expected,
    and even make diagnosing problems easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后两章中，我们学习了如何使用 PEAR 安装程序的功能来管理公共分发用的库和应用程序。在本章中，我们将学习如何使用 PEAR 安装程序使管理复杂且快速发展的网站内容变得容易。实际上，PEAR
    安装程序可以用来提供额外的保险，确保网站按预期运行，甚至使诊断问题更容易。
- en: In this chapter, we'll begin by understanding the details of our problem at
    a high level, and seeing how PEAR installer can help us to solve it. Then we'll
    look at the first step of the solution, setting up the source control system,
    and we will finally finish off with managing the complexity of a multi-segment
    website using a live site as an example.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先从高层次了解我们问题的细节，并了解 PEAR 安装程序如何帮助我们解决问题。然后我们将查看解决方案的第一步，设置源代码控制系统，最后我们将以一个实际网站为例，完成多段网站复杂性的管理。
- en: Overview of the Problem
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题概述
- en: 'One of the most important tasks is keeping the structure of a complex and dynamic
    website coherent and up to date as the information represented evolves. In many
    cases, re-organization may result in files that are no longer in use cluttering
    the directory layout. Worse, when deleting unused files, there is a risk of accidentally
    removing an essential file without realizing it. In addition, coordinating a multi-developer
    modular website presents an obvious challenge: how does one prevent conflicts
    in updates and additions?'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的任务之一是保持复杂且动态网站的结构在信息表示演变时保持一致和最新。在许多情况下，重新组织可能会导致不再使用的文件充斥着目录布局。更糟糕的是，在删除未使用的文件时，可能会不小心删除一个重要的文件而未意识到这一点。此外，协调多开发者模块化网站显然是一个挑战：如何防止更新和添加时的冲突？
- en: In conjunction with a revision control system such as CVS (Concurrent Versions
    System), the PEAR installer provides a unique and battle-tested solution to manage
    all of these problems effectively. Revision control systems provide a combination
    of redundancy and flexibility that cannot be matched by simple file systems. The
    ability to check out a personal **sandbox** in which to do development without
    the fear of disrupting the primary code base is an essential part of any serious
    code development.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与如 CVS（并发版本系统）之类的版本控制系统结合使用时，PEAR 安装程序提供了一个独特且经过实战检验的解决方案，以有效地管理所有这些问题。版本控制系统提供了一种冗余和灵活性的组合，这是简单的文件系统无法比拟的。能够在不担心破坏主代码库的情况下检查出一个个人**沙盒**进行开发的能力是任何严肃代码开发的一个基本部分。
- en: 'Traditionally, branches (CVS and Subversion) and tags (CVS only) are used to
    document "release points", where a program is ready for usage. For instance, PEAR
    version 1.4.5 can be retrieved directly from `cvs.php.net` via these commands:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，分支（CVS 和 Subversion）和标签（仅限 CVS）用于记录“发布点”，即程序已准备好使用。例如，可以通过以下命令直接从 `cvs.php.net`
    获取 PEAR 版本 1.4.5：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This sequence checks out the source of the PEAR installer, which is located
    at `cvs.php.net` in `/repository/pear-core`, and then retrieves the tag `RELEASE_1_4_5`,
    which was set at the release time of PEAR version 1.4.5 via the convenient `cvstag`
    command (covered in depth later in the chapter):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此序列检查 PEAR 安装程序的源代码，该源代码位于 `/repository/pear-core` 中的 `cvs.php.net`，然后检索在 PEAR
    版本 1.4.5 发布时设置的标签 `RELEASE_1_4_5`，这是通过方便的 `cvstag` 命令（本章后面将详细介绍）完成的：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The above example is the most complex possible command. In most cases, a developer
    can tag a package simply with the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例是最复杂的可能命令。在大多数情况下，开发者可以使用以下命令简单地标记一个包：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Of course, the PEAR installer and a revision control system is only as effective
    as the coordinating plan behind them, and so devising a good strategy for developing
    the website in conjunction with the two tools is an essential part of the equation,
    and is covered in the last segment of this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，PEAR 安装程序和版本控制系统只与它们背后的协调计划一样有效，因此制定一个结合这两个工具开发网站的良好策略是等式中的一个基本部分，并在本章的最后一段中进行了介绍。
- en: Using a **roadmap** or a development timeline describing approximately when
    new features will be added and old ones removed is a good first step. Defining
    ways in which developers should coordinate and synchronize their efforts is another.
    Using design tools and strategies such as UML and extreme programming (test-driven
    development and its friends) may also be of use, but ultimately the clarity of
    thought present in the website architects' design goals is usually far more significant,
    and will lead to the best solution, regardless of the tools chosen to get there.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**路线图**或开发时间表，描述新功能将何时添加以及旧功能将何时移除，这是一个很好的第一步。定义开发者应该如何协调和同步他们的努力，这也是另一个方面。使用设计工具和策略，如UML和极限编程（测试驱动开发及其相关技术）也可能有用，但最终，网站架构师设计目标中的思维清晰度通常更为重要，并且将导致最佳解决方案，无论选择哪种工具来实现。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The primary problem we will address is how to coordinate a complex website,
    specifically, how to safely and systematically update the live website from a
    development machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解决的主要问题是如何协调一个复杂的网站，具体来说，如何从开发机器安全且系统地更新实时网站。
- en: Understanding the Problem
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解问题
- en: To understand the solution to a problem, it makes sense that we should understand
    the problem at a high level. In our case, it is important to understand the main
    issues that surround coordinating the development of a major website. A good website
    will draw users back to view it as often as possible, developing a community.
    This will only happen if there is both exciting content and pleasing visual and
    logical layout. Often, content can be updated without changing any code (think
    of blogs or content management systems), but changing the visual layout and logical
    structure of a site requires more extensive internal changes to a site.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解问题的解决方案，从高层次理解问题是有意义的。在我们的案例中，理解围绕协调主要网站开发的主要问题非常重要。一个好的网站将吸引用户尽可能频繁地访问，并发展成一个社区。这只有在有令人兴奋的内容和令人愉悦的视觉和逻辑布局的情况下才会发生。通常，内容可以更新而不需要更改任何代码（想想博客或内容管理系统），但更改网站的视觉布局和逻辑结构需要更广泛的网站内部更改。
- en: 'Even if you design the perfect site on the first attempt (congratulations!)
    and have a simple method for adjusting the content and even the logical structure
    of a site, this may lead to the largest challenge of transitioning from a small
    website to a hugely successful website with thousands of hits per minute: **scalability**.
    Often at this stage, a comprehensive redesign may be necessary to accommodate
    unexpected needs. Success inevitably leads to the need for bringing on new developers
    who may be unfamiliar with the website structure or design goals. The constant
    threat of re-factoring to improve things also threatens to bring unexpected chaos
    to even the best-intentioned web team.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你在第一次尝试时就设计出了完美的网站（恭喜！）并且有简单的方法来调整网站的内容甚至逻辑结构，这也可能导致从小型网站过渡到每分钟有成千上万的访问量的巨大成功网站的最大挑战：**可扩展性**。通常在这个阶段，可能需要进行全面的重设计来满足意外的需求。成功不可避免地会导致需要聘请新的开发者，他们可能不熟悉网站结构或设计目标。不断重构以改进事物的威胁也可能给甚至最善意的网络团队带来意外的混乱。
- en: All of this uncertainty will lead to greater potential for breakage of code,
    confusing and cluttered directory structure, and other problems.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些不确定性都将导致代码损坏的可能性更大，目录结构混乱，以及其他问题。
- en: 'We''ll look at four typical problem areas, and get a better picture of how
    PEAR Installer will help us:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨四个典型的问题领域，并更好地了解PEAR安装程序将如何帮助我们：
- en: Managing code breakage and reverting to a previous version
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理代码损坏和回滚到先前版本
- en: Managing missing or extraneous files
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理缺失或多余的文件
- en: Coordinating development with a team of developers
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与一组开发者协调开发
- en: 'Backing up code: redundancy as a necessary precaution'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份代码：冗余作为必要的预防措施
- en: Managing Code Breakage and Reverting to Previous Versions
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理代码损坏和回滚到先前版本
- en: Occasionally, it becomes apparent that in spite of careful design and even more
    careful testing, something in a recent update has broken a critical portion of
    a website. Even worse, a security breach may have resulted in a rogue hacker destroying
    a carefully worked out web structure.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，尽管经过精心设计和更加仔细的测试，但最近的一次更新中仍然可能破坏了网站的关键部分。更糟糕的是，安全漏洞可能导致恶意黑客破坏精心构建的网站结构。
- en: In the past, this could mean hoping that a restore from backup would do the
    trick. In some cases, a hack was not noticed for a long time, requiring restoration
    from an early backup. This can result in tremendous difficulty determining the
    correct files to transfer and delete.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，这可能意味着希望从备份中恢复能够解决问题。在某些情况下，一个漏洞可能长时间未被注意到，需要从早期的备份中恢复。这可能导致在确定要传输和删除的正确文件时遇到极大的困难。
- en: 'The PEAR installer manages these problems in a tremendously efficient manner.
    Instead of spending feverish hours going over each directory by hand, two commands
    are sufficient to completely remove and restore the most current website structure:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: PEAR 安装程序以极其高效的方式管理这些问题。无需花费狂热的时间手动检查每个目录，只需两个命令就足以完全删除并恢复最新的网站结构：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The difference in complexity between this and a frantic "*is-everything-all-right-oops-I-need-to-restore-that-file-and-delete-this-one*"
    is staggering.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与“*一切是否都正常？哦，我需要恢复那个文件并删除这个文件*”的慌乱相比，这种复杂性之间的差异是惊人的。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**PEAR Installer or rsync?**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**PEAR 安装程序或 rsync？**'
- en: Experienced web developers should also know about the `rsync` command, which
    facilitates remote synchronization of directories on machines separated by a great
    distance. In many cases, this is a very efficient way of ensuring that local and
    remote repositories are in sync. However, if you are coordinating between several
    developers, or developing some portions of a site while others are stable, it
    may cause more difficulty than ease. In this case, you will benefit more from
    the strengths of the versioning and simple reversion provided by the PEAR installer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 经验丰富的网络开发者也应该了解 `rsync` 命令，它促进了相隔甚远的机器上目录的远程同步。在许多情况下，这是一种确保本地和远程存储库同步的非常有效的方法。然而，如果您在协调几个开发者之间，或者开发网站的某些部分而其他部分稳定时，它可能比便利性造成更多困难。在这种情况下，您将更多地受益于
    PEAR 安装程序提供的版本控制和简单回滚的优势。
- en: Managing Missing or Extraneous Files
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理缺失或多余的文件
- en: Theoretically, problems of missing or extra files should never happen if you
    fully test a website on a development machine prior to upload, but there are times
    when a mistake in a `rsync` transfer occurs and files are removed that should
    not be. In the best-case scenario, this will result in the immediate breakage
    of the site, and will be easily tracked down and fixed. In the worst case, however,
    the breakage may be subtle, and in fact not apparent until a rare but crucial
    task is performed by one of your website's end users or a hacker discovers a security
    vulnerability in an unused file. This can lead to scaring off users, lost profits
    for commercial websites, or even legal problems if your site was used by a hacker
    to commit a crime and negligence on your part can be proven.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，如果你在上传之前在一个开发机器上完全测试了网站，那么缺失或额外文件的问题永远不会发生，但有时在 `rsync` 传输中发生错误，删除了不应该删除的文件。在最佳情况下，这将导致网站立即损坏，并且可以轻松追踪并修复。然而，在最坏的情况下，损坏可能很微妙，实际上可能直到你的网站的一个最终用户执行了一个罕见但关键的任务，或者黑客发现了一个未使用的文件中的安全漏洞时才变得明显。这可能导致吓跑用户，商业网站的利润损失，甚至如果您的网站被黑客用来犯罪，并且可以证明您的疏忽，还可能导致法律问题。
- en: 'How are these problems any different when managing a website using the PEAR
    installer? There are two features of the PEAR installer that set it apart from
    traditional solutions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 PEAR 安装程序管理网站时，这些问题有何不同？PEAR 安装程序有两个特性使其与传统解决方案区别开来：
- en: Versioning
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: File Transactions
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件事务
- en: 'Through the concept of versioning, it is possible to determine precisely which
    files are present by either examining the contents of `package.xml` or by running
    the `list-files` command like so:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过版本控制的概念，可以通过检查 `package.xml` 的内容或运行类似 `list-files` 的命令来确定哪些文件存在：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Missing or extraneous files are easily detectable with this system without
    the need to resort to a slow recursive check of actual directories. In addition,
    the ability to quickly revert to an earlier version, even temporarily, and then
    restore a newer fixed version is also incredibly simple, as evidenced by this
    sample command sequence:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个系统可以轻松检测到缺失或多余的文件，无需进行缓慢的递归检查实际目录。此外，能够快速回滚到早期版本，即使暂时如此，然后恢复更新的修复版本，这也非常简单，如下所示示例命令序列：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The PEAR installer takes advantage of a concept from relational databases and
    implements transaction-based file installation and removal. This means that no
    changes to the directory structure occur until all have been successfully completed.
    In addition, atomic file operations are performed whenever possible. The life
    cycle of a file is rather simple, and consists of these steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: PEAR安装程序利用关系数据库中的一个概念，并实现了基于事务的文件安装和删除。这意味着只有在所有操作都成功完成后，目录结构才会发生变化。此外，尽可能进行原子文件操作。文件的生命周期相当简单，包括以下步骤：
- en: File `path/to/foo.php` is installed as `/path/to/pear/path/to/.tmpfoo.php`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件`path/to/foo.php`被安装为`/path/to/pear/path/to/.tmpfoo.php`
- en: File `/path/to/pear/path/to/foo.php` if present, is renamed to `/path/to/pear/path/to/foo.php.bak`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果存在，文件`/path/to/pear/path/to/foo.php`将被重命名为`/path/to/pear/path/to/foo.php.bak`。
- en: File `/path/to/pear/path/to/.tmpfoo.php` is renamed to `/path/to/pear/path/to/foo.php`.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件`/path/to/pear/path/to/.tmpfoo.php`被重命名为`/path/to/pear/path/to/foo.php`。
- en: After installation, all of the `.bak` files created are removed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，所有创建的`.bak`文件都会被删除。
- en: However, if there is a problem at any step along the way, the installed files
    are removed, and the `.bak` files are renamed to the original filename. In this
    way, it is possible to very safely manage file upgrades. Additional checks are
    performed to ensure that the installer is capable of writing to the directory
    of the installation, and that the files are actually installed as expected. All
    of this extra work helps to guarantee the success of an installation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果在任何步骤中出现问题，已安装的文件将被删除，`.bak`文件将被重命名为原始文件名。这样，就可以非常安全地管理文件升级。还会执行额外的检查，以确保安装程序能够写入安装目录，并且文件确实按照预期安装。所有这些额外的工作有助于保证安装的成功。
- en: Coordinating Development with a Team of Developers
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与开发者团队协调开发
- en: 'The PEAR installer also helps coordinate a team of web developers in two ways:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: PEAR安装程序以两种方式帮助协调一组网络开发者：
- en: Discrete packaging
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离散打包
- en: File conflict resolution
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件冲突解决
- en: '**Discrete packaging** simply means that each developer or sub-team''s set
    of files can occupy its own package and be installed/upgraded independently of
    the others. In addition, they can all be managed from a central package using
    dependencies.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**离散打包**简单来说，就是每个开发者或子团队的文件集可以占用自己的包，并且可以独立于其他包进行安装/升级。此外，它们都可以通过使用依赖关系从中央包进行管理。'
- en: '**File conflict resolution** solves the potential for accidentally overwriting
    files from another team and makes it possible to share directory space safely.
    The PEAR installer does not allow different packages to conflict with any files
    from other packages. This simple technical fact will augment your team''s file
    naming conventions with an additional layer of error-checking.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件冲突解决**解决了意外覆盖其他团队文件的可能性，并使得安全共享目录空间成为可能。PEAR安装程序不允许不同包之间冲突任何其他包的文件。这个简单的事实将为你的团队文件命名约定增加一个额外的错误检查层。'
- en: Even when the `--force` option is specified, file conflict resolution is used.
    Only the dangerous `--ignore-errors` option overrides file conflict checking.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 即使指定了`--force`选项，也会使用文件冲突解决机制。只有危险的`--ignore-errors`选项可以覆盖文件冲突检查。
- en: 'Backing Up Code: Redundancy as a Necessary Precaution'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码备份：作为必要预防措施的冗余
- en: 'Managing a website using the PEAR installer provides what is perhaps a less
    obvious benefit by duplicating the code. The need to back up code from a website
    is often thought of only in terms of keeping a duplicate of the entire site. This
    is important, but may not be enough. The ability to quickly restore corrupted
    segments of a website, if only a few files are corrupted, is again quite simple
    with the PEAR installer; one only needs to run:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PEAR安装程序管理网站提供了一种可能不那么明显的利益，即通过复制代码。通常人们只从保留整个站点的副本的角度考虑从网站备份代码的需求。这很重要，但可能还不够。如果只有少数文件损坏，使用PEAR安装程序快速恢复网站损坏部分的能力仍然相当简单；只需运行：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In addition, the storage of website code as packaged archives at the channel
    server provides an additional level of redundancy above and beyond the redundancy
    provided by source control and traditional full back-up methods.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将网站代码作为打包存档存储在频道服务器上，在源控制和传统完整备份方法提供的冗余之上提供了额外的冗余级别。
- en: Now that we know the problem areas and how PEAR installer can help us deal with
    them, let's get into the solution in detail.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经知道了问题区域以及PEAR安装程序如何帮助我们处理这些问题，让我们详细探讨解决方案。
- en: 'The Solution, Part I: All-Important Source Control'
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案，第一部分：至关重要的源代码控制
- en: 'Before taking advantage of the PEAR installer, it is important to set up a
    source control system. There are many fine commercial software programs that can
    be used to perform source control, including **Perforce** and **Visual SourceSafe**,
    but we will focus on the tried and true, free open-source revision control systems:
    *CVS* and **Subversion**.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用PEAR安装程序之前，设置一个源代码控制系统非常重要。有许多优秀的商业软件程序可以用于执行源代码控制，包括**Perforce**和**Visual
    SourceSafe**，但我们将关注经过验证的、免费的开放源代码版本控制系统：*CVS*和**Subversion**。
- en: '**CVS** (**Concurrent Versioning System**) is one of the oldest source-control
    products, and is based on the even older **RCS** (**Revision Control System**)
    source control program. CVS implements its source control by using a client-server
    model. The server contains the final code, organized into directories and files.
    However, on the server, each file actually contains a full revision history of
    that file. On the client end, users check out a local **sandbox** — a copy of
    the server code, which can then be developed independently of other developers.
    When the code is ready to be committed to the server, the user sends a special
    command to the server. At that time, the server checks to see if there have been
    any changes to the repository by other users, and if so, prevents the conflict
    that may occur. Conflict resolution between users'' commits is fully supported,
    as well as merging compatible changes.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**CVS**（**并发版本控制系统**）是最早的源代码控制产品之一，基于更早的**RCS**（**版本控制系统**）源代码控制程序。CVS通过使用客户端-服务器模型来实现其源代码控制。服务器包含最终代码，组织成目录和文件。然而，在服务器上，每个文件实际上都包含该文件的完整版本历史。在客户端，用户检出本地**沙盒**——服务器代码的副本，然后可以独立于其他开发者进行开发。当代码准备好提交到服务器时，用户向服务器发送一个特殊命令。那时，服务器会检查是否有其他用户更改了仓库，如果有，将防止可能发生的冲突。用户提交之间的冲突解决完全支持，以及合并兼容的更改。'
- en: Although CVS does a very good job, there are a few limitations that prompted
    the Subversion development team to begin work on a new model. Like CVS, Subversion
    provides the same collaborative tools. The difference is in how Subversion stores
    its information. Using a Berkeley database file to document changes and revisions
    (or in the latest releases, the FSFS file-based database), Subversion has the
    capability to track changes to groups of files and directories as well as to individual
    files, something that is far more difficult to do with CVS. In addition, Subversion
    stores a complete copy of the server code in the client sandbox, allowing for
    very efficient use of bandwidth when performing actions such as checking changes
    and making patches.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然CVS做得非常好，但也有一些限制促使Subversion开发团队开始开发新的模型。与CVS一样，Subversion提供了相同的协作工具。区别在于Subversion存储信息的方式。使用伯克利数据库文件来记录更改和版本（或在最新版本中，基于文件的FSFS数据库），Subversion能够跟踪文件组和目录以及单个文件的变化，这是CVS难以做到的。此外，Subversion在客户端沙盒中存储服务器代码的完整副本，这使得在执行检查更改和制作补丁等操作时，能够非常有效地使用带宽。
- en: Providing Redundancy and Revision History
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供冗余和版本历史
- en: 'The primary benefit of a source control system is the combination of redundancy
    and revision history. Source control systems are designed around the principle
    of human fallibility: we just make mistakes sometimes, and it is important to
    be able to recover from those mistakes as easily as possible. Through the redundancy
    provided by separating a developer sandbox from the server repository, it becomes
    possible to quickly recover from a mistake on the developer''s machine. The existence
    of revision history, and CVS/Subversion''s sophisticated ability to check out
    code from a particular point in time, or a particular tag or branch, mean that
    it is also a simple matter to revert a faulty commit, or change to the server
    repository.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码控制系统的主要好处是冗余和版本历史的结合。源代码控制系统是围绕人类易犯错误的原则设计的：我们有时会犯错误，能够尽可能容易地从这些错误中恢复过来非常重要。通过将开发者的沙盒与服务器仓库分离提供的冗余，可以快速从开发者的机器上的错误中恢复过来。版本历史的存在，以及CVS/Subversion从特定时间点、特定标签或分支检查代码的复杂能力，意味着也可以简单地回滚错误的提交或更改到服务器仓库。
- en: Installing CVS or Subversion
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装CVS或Subversion
- en: In most cases, setting up a revision control system is easy. This text is not
    the best resource for installation, but does cover the basics. For extended support,
    it is best to consult the support resources of CVS or Subversion directly.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，设置版本控制系统是容易的。本文不是安装的最佳资源，但涵盖了基础知识。对于扩展支持，最好是直接咨询CVS或Subversion的支持资源。
- en: In the next few sections, you will learn how to initialize a repository in CVS
    or Subversion and to create new projects within the repository, and how to create
    a local sandbox for development. There are a few prerequisites for setting up
    a revision control system. It is important that you have access to a shell on
    the host for which you wish to set up the revision control system. If you do not
    have access to the file system, it will be exceedingly difficult to fix any problems
    with the repository.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，你将学习如何在CVS或Subversion中初始化仓库，以及如何在仓库内创建新项目，以及如何创建用于开发的本地沙盒。设置版本控制系统有一些先决条件。重要的是你能够访问你打算设置版本控制系统的主机上的shell。如果你没有文件系统访问权限，修复仓库中的任何问题将会极其困难。
- en: If you do not have shell access to your remote host, and do not have the resources
    to switch to an internet provider that does provide shell access, all is not lost.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有远程主机的shell访问权限，并且没有资源切换到提供shell访问的互联网服务提供商，事情还没有完全失去希望。
- en: On Windows-based systems, it is very easy to set up a local repository using
    the freeware TortoiseCVS or TortoiseSVN programs, and on unix-based systems like
    Mac OS X or Linux, you can compile and use the CVS and Subversion tools directly
    to initialize a repository. The only drawback to this approach is that you lose
    some of the fail-safe advantages of having a remote repository.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Windows的系统上，使用免费软件TortoiseCVS或TortoiseSVN程序设置本地仓库非常容易，而在像Mac OS X或Linux这样的基于Unix的系统上，你可以直接编译并使用CVS和Subversion工具来初始化仓库。这种方法唯一的缺点是，你失去了一些远程仓库的故障安全优势。
- en: In either case, remote or local repository, you will need to make regular backups
    of the system to avoid trouble in case of catastrophic hardware failure or other
    unpleasant truths of Murphy's Law.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，无论是远程仓库还是本地仓库，你都需要定期备份系统，以避免在硬件故障或其他墨菲定律的令人不快的事实发生时的麻烦。
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Here is Murphy''s Law:**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下是墨菲定律：**'
- en: '"If anything can go wrong, it will."'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “如果有可能出错，它就会出错。”
- en: Always plan for problems — Hardware failure, data corruption, and security breaches
    just begin the list of issues plaguing our work.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 总是计划可能出现的问题——硬件故障、数据损坏和安全漏洞只是困扰我们工作的诸多问题中的开始。
- en: Concurrent Versions System
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并发版本控制系统
- en: Concurrent Versions System (CVS) is hosted at [http://www.nongnu.org/cvs/](http://www.nongnu.org/cvs/)
    and is the oldest form of revision control. CVS is very stable, and has been stable
    for years. As such, it is the old warhorse of revision control, having stood the
    test of time. CVS is based on a very simple file-based revision control. In the
    repository, each file contains content and metadata containing differences between
    revisions. The repository should never be used for direct access or work. Instead,
    a complete copy of a directory is checked out for development. No changes are
    saved to the main repository until you check in or commit the code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 并发版本控制系统（CVS）托管在[http://www.nongnu.org/cvs/](http://www.nongnu.org/cvs/)，是版本控制的最古老形式。CVS非常稳定，已经稳定了多年。因此，它是版本控制的老将，经受了时间的考验。CVS基于一个非常简单的基于文件的版本控制。在仓库中，每个文件都包含内容和包含修订之间差异的元数据。仓库不应被用于直接访问或工作。相反，为了开发，需要检出目录的完整副本。除非你签入或提交代码，否则不会将任何更改保存到主仓库中。
- en: CVS is designed to coordinate the work of multiple developers, and as such has
    the capability to refuse a commit if there may be a conflict between the work
    of two different developers. Let's look at an example.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: CVS旨在协调多个开发者的工作，因此具有拒绝提交的能力，如果两个不同开发者的工作可能存在冲突。让我们看看一个例子。
- en: 'The PHP repository has several modules hosted by `cvs.php.net`, which are organized
    like a file system. To check out a module, you must first log into the CVS server.
    Users with accounts will use their account name, but PHP also provides anonymous
    read-only CVS access. To log into the CVS server, one types:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: PHP仓库由`cvs.php.net`托管了几个模块，它们像文件系统一样组织。要检出模块，你必须首先登录到CVS服务器。有账户的用户将使用他们的账户名，但PHP还提供了匿名只读CVS访问。要登录到CVS服务器，输入以下命令：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At this point, the `cvs` command will prompt for a password. For anonymous
    CVS access, enter your email address. Once you are logged in, check out a module.
    For instance, to view the source of the PEAR_PackageFileManager package, you would
    type:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`cvs` 命令将提示输入密码。对于匿名CVS访问，请输入您的电子邮件地址。一旦您登录，请检出模块。例如，要查看 PEAR_PackageFileManager
    包的源代码，您将输入：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command creates the directory `pear` and subdirectory `PEAR_PackageFileManager`,
    and populates them with all the files and directories contained within the project.
    In addition, it creates special directories named `CVS` that contain information
    about the state of the local copy of the repository. Each directory must contain
    files named `Entries, Root`, and `Repository`. Depending on the state of the repository,
    there may be other files as well. These files should *never* be hand-altered except
    in extreme circumstances, but it is important to know what controls your CVS checkout.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建 `pear` 目录和子目录 `PEAR_PackageFileManager`，并将项目中的所有文件和目录填充到其中。此外，它还创建了名为
    `CVS` 的特殊目录，其中包含有关仓库本地副本状态的详细信息。每个目录必须包含名为 `Entries, Root` 和 `Repository` 的文件。根据仓库的状态，还可能有其他文件。这些文件在极端情况下不应手动修改，但了解控制您的CVS检出的是什么非常重要。
- en: For more information and help on using CVS, it is probably good to start by
    reading the *manpage on unix* via `man cvs`, and to read the CVS book published
    by O'Reilly and distributed online under the GNU General Public Licence at [http://cvsbook.red-bean.com/](http://cvsbook.red-bean.com/).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用CVS的更多信息和技术支持，最好从阅读 `man cvs` 的 *Unix手册页* 开始，并阅读由O'Reilly出版的CVS书籍，该书籍在 [http://cvsbook.red-bean.com/](http://cvsbook.red-bean.com/)
    上以GNU通用公共许可证在线分发。
- en: On Windows, it is probably easiest to use a tool like **TortoiseCVS**, which
    is available from [http://www.tortoisecvs.org](http://www.tortoisecvs.org). This
    free tool adds an extension to Windows Explorer that allows direct manipulation
    of CVS checkouts and repository simply by right-clicking on files or directories
    with the mouse. It is very intuitive and powerful.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，使用像 **TortoiseCVS** 这样的工具可能最简单，它可以从 [http://www.tortoisecvs.org](http://www.tortoisecvs.org)
    获取。这个免费工具为Windows资源管理器添加了一个扩展，允许通过鼠标右键单击文件或目录来直接操作CVS检出和仓库。它非常直观且功能强大。
- en: Setting Up a CVS Repository
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置CVS仓库
- en: 'The first step in setting up a CVS repository is to determine where you are
    going to put the repository. CVS has several methods of connecting to the repository
    remotely. In most cases, it is best to require access through secure shell (**SSH**),
    via the `ext` method, as in:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 设置CVS仓库的第一步是确定您打算将仓库放在哪里。CVS有几种远程连接到仓库的方法。在大多数情况下，最好要求通过安全外壳（**SSH**）通过 `ext`
    方法访问，如下所示：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Parsing this command line further, the `-d` option tells CVS where to locate
    the root of CVS, or `CVSROOT`. In this case, it tells CVS to connect to the remote
    CVSROOT at `cvs.phpdoc.org` via the `pserver` protocol, using the `cellog` username.
    In addition, it informs the remote CVS daemon that the CVSROOT is located at `/opt/cvsroot`.
    On `cvs.php.net`, the CVSROOT is located at `/repository`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步解析此命令行，`-d` 选项告诉CVS在哪里定位CVS的根目录，或 `CVSROOT`。在这种情况下，它告诉CVS通过 `pserver` 协议连接到远程CVSROOT
    `cvs.phpdoc.org`，使用 `cellog` 用户名。此外，它通知远程CVS守护进程CVSROOT位于 `/opt/cvsroot`。在 `cvs.php.net`
    上，CVSROOT 位于 `/repository`。
- en: If you're on a shared host, assuming your remote username is `youruser`, it
    is probably best to put the `cvsroot` in `/home/youruser/cvs` or something of
    that nature. Otherwise, you are not likely to have write access to the directory
    in which you initialize your CVS repository. Obviously, write access is very important;
    otherwise there is no way to commit code from a development sandbox.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在共享主机上，假设您的远程用户名为 `youruser`，最好将 `cvsroot` 放在 `/home/youruser/cvs` 或类似的位置。否则，您可能无法访问初始化CVS仓库的目录。显然，写入访问非常重要；否则，从开发沙盒中提交代码是没有办法的。
- en: 'Once you have decided where to put the CVS repository, the next step is to
    initialize it. This is straightforward:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您决定将CVS仓库放在哪里，下一步就是初始化它。这是直截了当的：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This creates the `/home/youruser/cvs/CVSROOT` directory.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建 `/home/youruser/cvs/CVSROOT` 目录。
- en: The next step is to create the module you will use for the website. Before importing
    the website, first create the module for the website.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建您将用于网站的模块。在导入网站之前，首先创建网站的模块。
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will create a module named `website` that can be checked out. To ensure
    success, check out a copy of the `website` module:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`website`的模块，可以检出。为了确保成功，检出`website`模块的一个副本：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If all goes well, this will result in the creation of directory `/home/youruser/website`
    and the file `/home/youruser/website/README`. To test that CVS is accessible remotely,
    check out a copy of the `website` module via something like:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，这将导致在`/home/youruser/website`目录和`/home/youruser/website/README`文件中创建目录。为了测试CVS是否可以从远程访问，可以通过类似以下方式检出`website`模块的副本：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The next step is adding the contents of the website into the CVS repository.
    Simply copy all of the website files with the directory hierarchy you desire into
    your local checkout of the `website` module. The next step is the most complicated.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将网站内容添加到CVS仓库中。只需将所需目录层次结构的所有网站文件复制到本地`website`模块的检出中即可。下一步是最复杂的。
- en: Most websites contain both text files (like our PHP scripts) and binary files,
    like images or sound clips. CVS treats binary and text files differently. Text
    files are processed, and special CVS in-file tags like `$Id$` or `$Revision$`
    are replaced with special values based on the state of the file in the repository.
    Tags like "$Id$" must be manually added to the files by the developer, CVS does
    not create them automatically. Binary files are treated as a single entity, and
    their contents are not touched.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站都包含文本文件（如我们的PHP脚本）和二进制文件，如图像或声音剪辑。CVS将二进制文件和文本文件处理方式不同。文本文件会被处理，并且像`$Id$`或`$Revision$`这样的特殊CVS内文件标签会被根据文件在仓库中的状态替换为特殊值。像"$Id$"这样的标签必须由开发者手动添加到文件中，CVS不会自动创建它们。二进制文件被视为一个单一实体，其内容不会被修改。
- en: 'When adding files to a CVS module, they must first be added via the `cvs add`
    command, and then committed via the `cvs commit` command. Text files and directories
    are simply added like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当向CVS模块添加文件时，它们必须首先通过`cvs add`命令添加，然后通过`cvs commit`命令提交。文本文件和目录只需这样添加：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Binary files are added with the `-kb` switch:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-kb`开关添加二进制文件：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Files can be added with wildcards, but be very careful to ensure that you do
    not add image files as text files or text files as binary! In the worst case,
    you can remove files prior to committing with:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用通配符添加文件，但务必非常小心，确保不要将图像文件作为文本文件添加，或将文本文件作为二进制文件添加！在最坏的情况下，可以在提交之前使用以下命令删除文件：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that files that have been committed to the repository must be deleted
    prior to removal:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在删除之前必须先删除已提交到仓库的文件：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you are using Windows, TortoiseCVS makes adding files far easier, as it does
    so recursively and hides the implementation details.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Windows，TortoiseCVS可以使添加文件变得容易得多，因为它会递归地这样做，并隐藏实现细节。
- en: Subversion
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Subversion
- en: Subversion was developed a few years ago to address some of the shortcomings
    of CVS. Specifically, Subversion stores the repository information using a database,
    and so supports grouping changes together by commit rather than by file. Subversion
    is newer and as such has not been battle-tested as long as CVS, but both have
    been used in production for years.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Subversion是在几年前开发的，用以解决CVS的一些不足。具体来说，Subversion使用数据库存储仓库信息，因此支持按提交而不是按文件分组更改。Subversion较新，因此没有像CVS那样经过长时间的实战检验，但两者都已经用于生产多年。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '[http://svnbook.red-bean.com](http://svnbook.red-bean.com) contains several
    different formats of the same book as published by O''Reilly. The Subversion book
    contains everything needed to set up, configure, and administer a Subversion repository.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://svnbook.red-bean.com](http://svnbook.red-bean.com) 包含了由O''Reilly出版的同一本书的几种不同格式。Subversion书籍包含了设置、配置和管理Subversion仓库所需的一切。'
- en: 'Subversion differs from CVS in a few important ways:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Subversion在几个重要方面与CVS不同：
- en: A complete copy of the remote repository is stored locally, simplifying diffs
    and making it possible to do this offline.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程仓库的完整副本存储在本地，简化了差异比较，并使得离线操作成为可能。
- en: Tags are stored as branches, unlike CVS. In CVS, tags are read-only and it is
    difficult to accidentally modify a tag. Modifying a branch is quite simple, and
    because tags are branches in Subversion, this makes it more difficult to implement
    a read-only tag.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签存储为分支，与CVS不同。在CVS中，标签是只读的，很难意外修改标签。修改分支相当简单，由于在Subversion中标签是分支，这使得实现只读标签更加困难。
- en: Large files are easier to manage. Because the sandbox contains a complete copy
    of the current state of the repository module, this means that committing large
    text files only requires sending a diff. Ultimately, this saves both bandwidth
    and processor cycles on the server, which can be very important. (I once locked
    up the entire live server requiring a reboot just by committing a minor change
    to a 133MB database dump in a CVS repository. This was bad.)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大文件更容易管理。因为沙盒包含仓库模块当前状态的完整副本，这意味着提交大文本文件只需发送diff。最终，这可以在服务器上节省带宽和处理器周期，这非常重要。（我曾经通过在CVS仓库中提交一个133MB数据库转储的微小更改而锁定整个实时服务器，需要重启。这很糟糕。）
- en: 'Keywords (`$Id$, $Revision$`, and so on) are not substituted by default; all
    files in subversion are treated as binary files. To set a keyword substitution
    for a file, you need to set a property with something like:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字（`$Id$`、`$Revision$`等）默认不替换；所有Subversion中的文件都被视为二进制文件。要为文件设置关键字替换，您需要设置一个属性，例如：
- en: '[PRE18]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: More information is available at [http://svnbook.red-bean.com/nightly/en/svn.advanced.props.html#svn.advanced.props.special.keywords](http://svnbook.red-bean.com/nightly/en/svn.advanced.props.html#svn.advanced.props.special.keywords)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅[http://svnbook.red-bean.com/nightly/en/svn.advanced.props.html#svn.advanced.props.special.keywords](http://svnbook.red-bean.com/nightly/en/svn.advanced.props.html#svn.advanced.props.special.keywords)
- en: Setting Up a Subversion Repository
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置Subversion仓库
- en: 'Like CVS, setting up a repository is relatively painless. Simply run:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与CVS一样，设置仓库相对简单。只需运行：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will create a Subversion repository as a subdirectory of the current directory.
    To import your website code into the repository, first set up the standard Subversion
    directories:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前目录下创建一个Subversion仓库作为子目录。要将您的网站代码导入到仓库中，首先设置标准的Subversion目录：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, copy the complete contents of your current website into the `website/trunk`
    directory. Finally execute:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将您当前网站的完整内容复制到`website/trunk`目录中。最后执行：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once you have successfully imported, test by checking out the module:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 成功导入后，通过检出模块进行测试：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**WARNING: check out website/trunk, not website.**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告：检出website/trunk，而不是website。**'
- en: If you check out the entire module, you will get all branches and tags as well.
    This will eventually eat up all available disk space.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检出整个模块，您将获得所有分支和标签。这最终会消耗所有可用的磁盘空间。
- en: Accessing the `website` module remotely requires that either the `svnserve`
    daemon is running or that `mod_svn` is running as an Apache web-server module.
    Consult the Subversion book at [http://svnbook.red-bean.com](http://svnbook.red-bean.com)
    for extended details on setting this up if one is not set up for you.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 远程访问`website`模块需要`svnserve`守护进程正在运行，或者`mod_svn`作为Apache web服务器模块正在运行。如果您没有设置，请参考[http://svnbook.red-bean.com](http://svnbook.red-bean.com)中的Subversion书籍以获取设置此环境的详细信息。
- en: 'If you are running `svnserve`, either check out via:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行`svnserve`，可以通过以下方式检出：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Or, if you support the highly recommended secure shell (SSH) tunneling:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您支持高度推荐的SSH隧道：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Instead, if you have `mod_svn` running, checking out is far simpler:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果您有`mod_svn`运行，检出操作就简单多了：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Or, if you have a secure server:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您有一个安全的服务器：
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: These commands will create a directory named `website` that contains the code
    for your website.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将创建一个名为`website`的目录，其中包含您网站的代码。
- en: 'Adding and removing files in a Subversion repository is very straightforward,
    and similar to CVS. Simply use this format to add a file or directory from within
    the `website` directory:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在Subversion仓库中添加和删除文件非常直接，类似于CVS。只需使用此格式从`website`目录中添加文件或目录：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Use this format to remove a file or directory:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此格式来删除文件或目录：
- en: '[PRE28]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Unlike with CVS, it is possible to move files around or copy them, retaining
    their revision history, with the `move` and `copy` commands:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 与CVS不同，使用`move`和`copy`命令可以移动文件或复制它们，同时保留它们的修订历史：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you wish to have keywords like `$Id$` or `$Revision$` replaced, you need
    to manually tell Subversion to perform this substitution:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望替换像`$Id$`或`$Revision$`这样的关键字，您需要手动告诉Subversion执行此替换：
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This should be enough information to get started with using the repository that
    you choose to use.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足以让您开始使用您选择的仓库。
- en: Intelligent Source Control
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能源代码控制
- en: OK, now you have a version control repository set up and configured. Great!
    What next? Using a version control system intelligently is a very important step.
    Basic principles should be followed to ensure this is happening. Although many
    are common sense, it is not easy to remain vigilant and adhere to them.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在你已经设置并配置了版本控制仓库。太好了！接下来是什么？智能地使用版本控制系统是一个非常重要的步骤。应该遵循基本原理以确保这一点发生。尽管许多是常识，但保持警惕并坚持它们并不容易。
- en: Make regular backups of your repository and store them on independent media
    from the machine hosting the repository. If you remember nothing else, remember
    this!
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期备份你的仓库，并将它们存储在独立于托管仓库的机器上的媒体上。如果你记得其他任何事情，请记住这一点！
- en: Only commit working code to the repository — test before committing to avoid
    obvious errors like syntax errors.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只将可工作的代码提交到仓库——在提交前进行测试，以避免像语法错误这样的明显错误。
- en: Use tags to mark point releases of working code that will be deployed to a live
    server.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签标记将要部署到实时服务器的可工作代码的点发布。
- en: Use branches to support innovation and stable code bases simultaneously.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分支来同时支持创新和稳定的代码库。
- en: If you have multiple developers, define some basic coding standards (like PEAR's
    coding standards) so that diffs between revisions do not contain spurious changes
    to whitespace and other noise.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有多名开发者，定义一些基本的编码标准（如 PEAR 的编码标准），以便修订之间的差异不包含对空白和其他噪声的虚假更改。
- en: If you have multiple developers, set up a mailing list that is explicitly for
    commits to the repository. There are many excellent programs available for use
    in post-commit scripts that will mail diffs to a mailing list. Ensure that every
    developer is subscribed to the mailing list.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有多名开发者，设置一个专门用于提交到仓库的邮件列表。有许多优秀的程序可用于在提交后脚本中使用，将差异发送到邮件列表。确保每个开发者都订阅了该邮件列表。
- en: Maintaining Branches for Complex Versioning Support
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维护分支以支持复杂版本控制
- en: '**Branches** allow development of more than one version of the same software
    at the same time. For instance, when software has reached stability, and major
    new features will be added, branch off a copy of the software so that small bugs
    can be fixed in the stable version at the same time as development continues.
    Best practice has the stable version branched off and development continuing on
    HEAD.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**分支**允许同时开发同一软件的多个版本。例如，当软件达到稳定性，并将添加主要新功能时，从软件中分出一个副本，以便在开发继续的同时，在稳定版本中修复小错误。最佳实践是将稳定版本分支出来，并在
    HEAD 上继续开发。'
- en: 'To develop the stable version 1.2.X in a branch using CVS:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要在分支中使用 CVS 开发稳定的版本 1.2.X：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `update` command is an unintuitive requirement, but is very important; without
    updating your sources, you will not be editing the branch code, and any changes
    will end up on HEAD.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`update` 命令是一个不直观的要求，但非常重要；如果不更新你的源代码，你将不会编辑分支代码，任何更改最终都会出现在 HEAD 上。'
- en: 'It is a good idea to have two separate directories. For instance, when developing
    PEAR version 1.5.0 I have two directories that I use, which are created like so:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个独立的目录是个好主意。例如，当开发 PEAR 版本 1.5.0 时，我使用了两个目录，它们创建的方式如下：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Because I specified the `-d pear1.4` option to the `checkout` command (abbreviated
    as `co`), the files will be checked out to the `pear1.4` directory. The `-r PEAR_1_4`
    option retrieves the PEAR_1_4 branch for fixing bugs in PEAR version 1.4.X. In
    the second case, files from the default HEAD branch are checked out to the `pear-core`
    directory.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我在 `checkout` 命令（缩写为 `co`）中指定了 `-d pear1.4` 选项，所以文件将被检出到 `pear1.4` 目录。`-r
    PEAR_1_4` 选项检索 PEAR_1_4 分支以修复 PEAR 版本 1.4.X 中的错误。在第二种情况下，默认 HEAD 分支的文件被检出到 `pear-core`
    目录。
- en: 'The same task using Subversion is performed by something like:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Subversion 执行相同任务的命令类似于：
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Using Tags to Mark Point Releases
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用标签标记点发布
- en: 'Tags are important for several reasons, not the least of which is the ability
    to reconstruct older releases in the event of a disastrous loss of data. There
    are two ways to create a tag using CVS. The recommended way is very simple:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 标签之所以重要，原因很多，其中最重要的是在数据灾难性丢失的情况下能够重建旧版本。使用 CVS 创建标签有两种方法。推荐的方法非常简单：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This command parses `package.xml`, and for each file found, that file is tagged
    with `RELEASE_X_Y_Z` where X_Y_Z is the version number. Version 1.2.3 will be
    tagged with `RELEASE_1_2_3`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令解析 `package.xml`，并为每个找到的文件添加 `RELEASE_X_Y_Z` 标签，其中 X_Y_Z 是版本号。版本 1.2.3 将被标记为
    `RELEASE_1_2_3`。
- en: 'Tagging manually from within the module checkout can be accomplished with:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 从模块检出中手动标记可以通过以下方式完成：
- en: '[PRE35]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Subversion does not differentiate between tags and branches, so the only difference
    between creating a tag and a branch is where you copy it with the `svn` copy command.
    By default, tags should be copied to the trunk/tags branch using `svn` copy:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Subversion不区分标签和分支，因此创建标签和分支之间的唯一区别在于你使用`svn`复制命令将其复制到何处。默认情况下，标签应该使用`svn`复制命令复制到trunk/tags分支：
- en: '[PRE36]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The Solution, Part II: Using the PEAR Installer to Update the Website'
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案，第二部分：使用PEAR安装程序更新网站
- en: At this point, you should be familiar with the basic usage of both the PEAR
    installer and a source control system. Now we will take that knowledge to the
    next level and discover how to use the strengths of both tools to manage the complexity
    of a multi-segment website with inter-dependencies. First, it is important to
    think of the website code in terms of discrete packages and dependencies. To do
    this, it is often helpful to use a diagram. For complex systems, it makes a great
    deal of sense to use the **Uniform Modelling Language** (**UML**) to describe
    the system, as this is the universal standard of description.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该熟悉PEAR安装程序和源代码控制系统的基本用法。现在我们将把这种知识提升到下一个层次，并了解如何利用这两个工具的优势来管理具有相互依赖关系的多段网站复杂性。首先，重要的是要从离散包和依赖关系的角度考虑网站代码。为此，使用图表通常很有帮助。对于复杂的系统，使用**统一建模语言**（**UML**）来描述系统是非常有意义的，因为这是描述的通用标准。
- en: 'Let''s examine a real-world example: the Chiara String Quartet website, [http://www.chiaraquartet.net](http://www.chiaraquartet.net).
    As of early 2006, this is a mid-size website designed by a single developer, but
    the principles would scale well to a multi-developer situation. The website consists
    of a number of sub-sites as well as the main site.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考察一个现实世界的例子：Chiara弦乐四重奏网站，[http://www.chiaraquartet.net](http://www.chiaraquartet.net)。截至2006年初，这是一个由单个开发者设计的中型网站，但原则可以很好地扩展到多开发者的情况。该网站由多个子站点以及主站点组成。
- en: Tip
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As of a few days prior to publication, the Chiara Quartet's website is now managed
    by an independent developer, and is no longer maintained directly by the author
    as described. For an example of a website that is being manged using `package.xml`,
    at the time of publication, `pear.php.net` was migrating to this approach. Check
    out the pearweb module from `cvs.php.net`, and the `package.php` script and corresponding
    `package.xml` and post-installation script which can be used to set up a MySQL
    database and configure `http.conf` file for a development copy of `pear.php.net's`
    code.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在出版前几天，Chiara弦乐四重奏的网站现在由一个独立开发者管理，不再由作者直接维护，如前所述。作为一个使用`package.xml`管理的网站的例子，在出版时，`pear.php.net`正在迁移到这种方法。查看`cvs.php.net`中的pearweb模块，以及`package.php`脚本和相应的`package.xml`以及安装后脚本，这些可以用来设置MySQL数据库并配置`http.conf`文件，以开发`pear.php.net`代码的副本。
- en: 'The public sites are:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 公共站点包括：
- en: '[http://www.chiaraquartet.net](http://www.chiaraquartet.net) (main site)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.chiaraquartet.net](http://www.chiaraquartet.net)（主站）'
- en: '[http://music.chiaraquartet.net](http://music.chiaraquartet.net) (MP3s/audio
    samples)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://music.chiaraquartet.net](http://music.chiaraquartet.net)（MP3s/音频样本）'
- en: '[http://calendar.chiaraquartet.net](http://calendar.chiaraquartet.net) (schedule
    information)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://calendar.chiaraquartet.net](http://calendar.chiaraquartet.net)（日程信息）'
- en: 'The private back-end sites include:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 私人后端站点包括：
- en: '[http://addressbook.chiaraquartet.net](http://addressbook.chiaraquartet.net)
    (data entry for contact database)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://addressbook.chiaraquartet.net](http://addressbook.chiaraquartet.net)（联系数据库的数据录入）'
- en: '[http://database.chiaraquartet.net](http://database.chiaraquartet.net) (management
    of general back end data)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://database.chiaraquartet.net](http://database.chiaraquartet.net)（管理通用后端数据）'
- en: Each of these sites has an independent code base, but there are interlinked
    dependencies on elements such as images and templates used to unify the look of
    different sites. In addition, as the quartet's career grows, the needs of the
    website change dramatically, and the ability to add new sub-sites and remove obsolete
    ones is very important.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些站点各自拥有独立的代码库，但它们在图像和模板等元素上存在相互链接的依赖关系，这些元素用于统一不同站点的外观。此外，随着四重奏事业的成长，网站的需求发生了巨大变化，能够添加新的子站点和删除过时的站点非常重要。
- en: Also important is to note that very large files are needed, such as high resolution
    press pictures and MP3 audio clips that will not change as regularly as the PHP
    code.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，需要非常大的文件，例如高分辨率的新闻图片和MP3音频剪辑，这些文件不会像PHP代码那样频繁更改。
- en: 'As such, the website can be grouped into several simple packages:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，网站可以被分组为几个简单的包：
- en: website
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站
- en: website database back end
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站数据库后端
- en: website contact data entry back end
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站联系数据输入后端
- en: website images
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站图片
- en: website MP3s
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站MP3文件
- en: website photos
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站图片
- en: website press PDFs
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站PDF文件
- en: The primary website package itself can be broken up at a later date into separate
    packages such as a primary website and a website blog package without penalty
    through a couple of methods that we will examine later on in the chapter.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 主要网站包本身可以在稍后日期拆分为单独的包，例如主要网站和网站博客包，而不会受到任何惩罚，这可以通过我们将在本章稍后考察的一些方法实现。
- en: Once we have determined the logical partitioning of the website into packages,
    all that is needed is to create a private channel, generate proper `package.xml`
    files for each package, and install the website. Each component can be upgraded
    — and downgraded — independently, making maintenance and tracking changes far
    less of a magical ritual.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定了网站逻辑分区为包，所需做的就是创建一个私有通道，为每个包生成适当的 `package.xml` 文件，并安装网站。每个组件都可以独立升级——和降级——这使得维护和跟踪更改远不如一个神奇的仪式。
- en: A wonderful technique for backing up a database is not only to save full dumps,
    but to commit these to a Subversion repository. This way, you are storing smaller
    versions and have the capability to check out the database dump on a remote machine
    for development and testing purposes.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 备份数据库的一个美妙技巧不仅是要保存完整的转储，还要将这些转储提交到Subversion仓库。这样，你存储的是更小的版本，并且有在远程机器上为开发和测试目的检出数据库转储的能力。
- en: Subversion is greatly preferred to CVS because it handles extremely large files
    far more gracefully. CVS can easily bring down an entire machine when calculating
    the difference between two 150 MB database dumps. I learned this the hard way.
    Subversion is far superior in this regard simply because it calculates differences
    using the local copy, and so only differences are sent back and forth, reducing
    net traffic exponentially.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 相比CVS，Subversion更受欢迎，因为它处理极大文件的方式更为优雅。CVS在计算两个150MB数据库转储之间的差异时，很容易使整个机器崩溃。我是通过艰难的方式学到这一点的。Subversion在这方面远胜一筹，因为它使用本地副本来计算差异，因此只有差异会被来回发送，从而指数级地减少网络流量。
- en: Tip
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is important to note that if there is any private data in the database, access
    should be restricted to `svn+ssh` in order to reduce the possibility of accidentally
    giving the sensitive data to the wrong people.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的一点是，如果数据库中存在任何私有数据，应限制访问为 `svn+ssh`，以减少意外将敏感数据提供给错误人员的可能性。
- en: Needless to say, if there are any crucially sensitive data such as credit-card
    numbers or data that identity thieves would love to get their hands on, do not
    allow any remote access to the data whatsoever; instead resort to a tool like
    rdiff-backup ( [http://www.nongnu.org/rdiff-backup/](http://www.nongnu.org/rdiff-backup/)).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 无需多言，如果存在任何至关重要的敏感数据，例如信用卡号码或身份盗贼渴望获取的数据，绝对不允许对数据进行任何远程访问；相反，应使用像 rdiff-backup（[http://www.nongnu.org/rdiff-backup/](http://www.nongnu.org/rdiff-backup/)）这样的工具。
- en: When porting an existing website, it is best to add it to CVS/Subversion in
    exactly the source layout of the existing website.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当移植现有网站时，最好将其添加到CVS/Subversion中，保持现有网站的源布局。
- en: 'One difficulty in developing a remote website is the need for code that understands
    it will run on a different IP and possibly a different hostname. There are three
    ways of handling this problem:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 开发远程网站的一个困难是需要代码理解它将在不同的IP地址上运行，可能还有不同的主机名。有三种处理这个问题的方法：
- en: Add the live host name to the `/etc/hosts` file as an alias to localhost, so
    all requests go to localhost.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将实时主机名添加到 `/etc/hosts` 文件中，作为本地主机的别名，这样所有请求都会发送到本地主机。
- en: Use host-neutral code, for example depending on the `$_SERVER['HTTP_HOST']`
    variable used by the Apache web server, or `$_SERVER['PHP_SELF']`.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主机中立的代码，例如依赖于 Apache 网络服务器使用的 `$_SERVER['HTTP_HOST']` 变量，或 `$_SERVER['PHP_SELF']`。
- en: Use PEAR's replacements facility and custom file roles to define per-machine
    host information.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PEAR的替换设施和自定义文件角色来定义每台机器的主机信息。
- en: Adding the live host name to the `/etc/hosts` file (usually `C:\WINDOWS\system32\drivers\etc\hosts`
    on Microsoft Windows systems) will make it impossible to actually access the live
    web server — or FTP server — from the development machine, and so is no solution
    at all.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 将实时主机名添加到 `/etc/hosts` 文件中（在Microsoft Windows系统上通常是 `C:\WINDOWS\system32\drivers\etc\hosts`），将使得从开发机器实际上无法访问实时网络服务器——或FTP服务器——成为不可能，因此这根本不是解决方案。
- en: Using host-neutral code appears to be a good idea at first, but as recent security
    concerns have shown, cross-site scripting (XSS) attacks thrive on vulnerabilities
    created through the use of these tools. Although it is not difficult to avoid
    the security issues, it does add considerable complexity, and makes the chance
    of introducing another bug or security issue higher than is comfortable.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用主机中立的代码看起来是个好主意，但正如最近的安全担忧所显示的，跨站脚本（XSS）攻击利用了通过使用这些工具创建的漏洞。虽然避免安全问题是容易的，但它确实增加了相当大的复杂性，使得引入另一个错误或安全问题的可能性高于舒适水平。
- en: The third option involves creating custom PEAR installer file roles that define
    special configuration variables, and then coupling these with PEAR's replacement
    task to customize files automatically per-machine.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个选项涉及创建自定义 PEAR 安装器文件角色，定义特殊的配置变量，然后与 PEAR 的替换任务耦合，以自动为每台机器定制文件。
- en: 'Specifically, our example website, [http://www.chiaraquartet.net](http://www.chiaraquartet.net),
    would require setting up virtual hosts `www.chiaraquartet.net, database.chiaraquartet.net,
    music.chiaraquartet.net`, and `calendar.chiaraquartet.net` on the development
    machine. What a pain! Instead, I created two custom packages that define five
    configuration variables:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们的示例网站 [http://www.chiaraquartet.net](http://www.chiaraquartet.net)，需要在开发机上设置虚拟主机
    `www.chiaraquartet.net, database.chiaraquartet.net, music.chiaraquartet.net` 和
    `calendar.chiaraquartet.net`。真麻烦！相反，我创建了两个自定义包，定义了五个配置变量：
- en: '`root_url:` This defines the base URL of the website.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root_url:` 这定义了网站的基础 URL。'
- en: '`music_url` :This defines the base URL of the music-audio portion of the website.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`music_url` : 这定义了网站音乐音频部分的基础 URL。'
- en: '`calendar_url:` This defines the base URL of the concert and event schedule.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`calendar_url:` 这定义了音乐会和活动日程的基础 URL。'
- en: '`addressbook_url:` This defines the base URL of the back-end contact list.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addressbook_url:` 这定义了后端联系列表的基础 URL。'
- en: '`database_url:` This defines the base URL of the back-end database.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database_url:` 这定义了后端数据库的基础 URL。'
- en: 'On the *development* server, I set these configuration variables to their needed
    values with:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *开发* 服务器上，我使用以下方式设置这些配置变量的所需值：
- en: '[PRE37]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'On the *live* server, I set the configuration variables to their needed values
    with:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *实时* 服务器上，我使用以下方式设置配置变量的所需值：
- en: '[PRE38]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, to set this information directly in the source, I use something like
    this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了直接在源代码中设置这些信息，我使用如下方式：
- en: '[PRE39]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `@DATABASE-URL@` value will be replaced with the value of the `database_url`
    configuration variable if this tag is specified in `package.xml:`
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 `package.xml` 中指定了这个标签，`@DATABASE-URL@` 的值将被替换为 `database_url` 配置变量的值：
- en: '[PRE40]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After this work, when installed on the local *development* machine, the code
    will be:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项工作完成后，当安装在本地 *开发* 机器上时，代码将是：
- en: '[PRE41]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And on the *live* server, the code will be:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在 *实时* 服务器上，代码将是：
- en: '[PRE42]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The best thing about this is that the URL is guaranteed to be correct on both
    machines without any extra work. This basic principle can also be applied for
    any important difference between development and live servers.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的是，URL 在两台机器上都能保证正确无误，无需额外工作。这个基本原理也可以应用于开发服务器和实时服务器之间任何重要的差异。
- en: 'Another specific difference between standard library packages and websites
    is that websites should be installed into publicly accessible directories, but
    standard library package files should be installed into non-accessible locations.
    For this purpose, we have default configuration variables like `php_dir, data_dir`,
    and `test_dir`. There is no default role for web files. Fortunately, a custom
    file role package does exist on the `pearified.com` channel. To acquire this package,
    follow these steps:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库包和网站之间的另一个具体区别是，网站应该安装到公开可访问的目录中，而标准库包文件应该安装到不可访问的位置。为此，我们有默认配置变量，如 `php_dir,
    data_dir` 和 `test_dir`。对于网页文件没有默认角色。幸运的是，`pearified.com` 通道上确实存在一个自定义文件角色包。要获取此包，请按照以下步骤操作：
- en: '[PRE43]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, to use it in `package.xml`, simply write:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要在 `package.xml` 中使用它，只需简单地写下：
- en: '[PRE44]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In addition, you should specify a required dependency on `pearified.com/Role_Web`
    and a`<usesrole>` tag as described in [Chapter 2](ch02.html "Chapter 2. Mastering
    PHP Software Management with the PEAR Installer").
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该指定对 `pearified.com/Role_Web` 的必需依赖关系，以及如 [第 2 章](ch02.html "第 2 章。使用 PEAR
    安装器精通 PHP 软件管理") 中所述的 `<usesrole>` 标签。
- en: After these details are worked out, it is time to generate the `package.xml`
    files that are needed by the PEAR installer in order to manage installation of
    the website.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些细节确定之后，是时候生成 PEAR 安装程序所需的 `package.xml` 文件，以便管理网站的安装。
- en: Generating package.xml from the Source Control Checkout
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码检出生成 package.xml
- en: To generate `package.xml`, there are a number of options available. The oldest
    and simplest for a complex website is to use the PEAR_PackageFileManager package
    to create a `package.xml` generation script. The script should generate each `package.xml`
    file that is needed, making it simple to update. In addition, it should correctly
    ignore irrelevant files and sub-packages.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成 `package.xml`，有几种选项可用。对于复杂的网站，最古老和最简单的方法是使用 PEAR_PackageFileManager 包创建一个
    `package.xml` 生成脚本。该脚本应生成所需的每个 `package.xml` 文件，使其更新变得简单。此外，它应正确忽略无关的文件和子包。
- en: 'The generation script for our real website, [http://www.chiaraquartet.net](http://www.chiaraquartet.net),
    was maintained using this method:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真实网站的生成脚本 [http://www.chiaraquartet.net](http://www.chiaraquartet.net) 是使用这种方法维护的：
- en: '[PRE45]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The next section simply sets release notes and versions for each sub-package's
    `package.xml` in a centralized location near the top of the file, making it easier
    to edit the file.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分简单地设置每个子包的 `package.xml` 的发布说明和版本，位于文件顶部的集中位置，这使得编辑文件更容易。
- en: '[PRE46]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, we create each of the `package.xml` files by importing from the existing
    `package.xml` for each sub-package. We''ll cut out a few of the sub-packages,
    just for brevity. Here is a typical one (website images):'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过从每个子包现有的 `package.xml` 中导入来创建每个 `package.xml` 文件。为了简洁起见，我们将省略一些子包。以下是一个典型的例子（网站图片）：
- en: '[PRE47]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Here, we will add replacement tasks to all files, demonstrating the customization
    we need for development versus production machine:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将向所有文件添加替换任务，展示我们针对开发与生产机器所需的定制：
- en: '[PRE48]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This next line is crucial; we need to ignore the contents of all the sub-packages,
    or they will be duplicated and will conflict with the parent package!
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这下一行至关重要；我们需要忽略所有子包的内容，否则它们将被重复，并与父包冲突！
- en: '[PRE49]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here, we add dependencies on each of the sub-packages:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为每个子包添加依赖项：
- en: '[PRE50]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finally, we create each of the `package.xml` files or display them for error-checking:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建每个 `package.xml` 文件或显示它们以进行错误检查：
- en: '[PRE51]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Each sub-package has its own PEAR_PackageFileManager2 object, and imports options
    from an existing `package.xml`, only modifying what is necessary. To create the
    `package.xml`, I copied an existing one from a PEAR package (in this case, PEAR's
    own `package2.xml`), and modified the sections`<summary>, <description>, <license>`,
    and the list of maintainers to suit the website package.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 每个子包都有自己的 PEAR_PackageFileManager2 对象，并从现有的 `package.xml` 中导入选项，仅修改必要的部分。为了创建
    `package.xml`，我从 PEAR 包（在这种情况下，是 PEAR 的 `package2.xml`）中复制了一个现有的文件，并修改了 `summary`、`description`、`license`
    部分以及维护者列表，以适应网站包。
- en: 'To use the script, I saved it as `package.php` and now run it with PHP 5.1.0
    or newer, like this:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此脚本，我将其保存为 `package.php`，现在使用 PHP 5.1.0 或更高版本运行它，如下所示：
- en: '[PRE52]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This allows me to view the `package.xml` files and check them for errors. To
    save changes to `package.xml`, I run:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我查看 `package.xml` 文件并检查错误。要保存对 `package.xml` 的更改，我运行：
- en: '[PRE53]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Voilà! `package.xml` is created in `website/, website/database, website/calendar,
    website/press`, and `website/music`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！`package.xml` 已在 `website/`、`website/database`、`website/calendar`、`website/press`
    和 `website/music` 中创建。
- en: At this stage, we are ready to start making releases of the code and deploying
    it to a test server.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们准备开始发布代码并将其部署到测试服务器。
- en: 'Packaging: Coordinating Release Versions with Tags and Branches'
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包：协调标签和分支的发布版本
- en: Arriving at this stage means we are ready to start packaging our website up
    into PEAR packages for installation. At this point, the process begins to merge
    with the packaging we learned to do in the previous chapter. Ultimately, this
    is the reason that packaging a website using the PEAR installer is a good idea.
    The process of installing, upgrading, and even reverting the website is no different
    from installing, upgrading, and reverting any PEAR package. This process makes
    it incredibly simple to manage.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 达到这个阶段意味着我们准备开始将我们的网站打包成 PEAR 包以进行安装。在这个时候，过程开始与我们在上一章中学到的打包过程合并。最终，这就是为什么使用
    PEAR 安装程序打包网站是一个好主意。安装、升级，甚至回滚网站的过程与安装、升级和回滚任何 PEAR 包没有区别。这个过程使得管理变得极其简单。
- en: 'When converting from the old way of managing a website to the PEAR way, there
    are several important steps that must be undertaken:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当从管理网站的老方法转换为 PEAR 方法时，必须采取几个重要的步骤：
- en: Test the release on a local development server.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地开发服务器上测试发布版本。
- en: Back up the live server immediately prior to deployment if possible.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果可能，在部署前立即备份 Live 服务器。
- en: Deploy the PEAR package on the remote server.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在远程服务器上部署 PEAR 包。
- en: Once the website has been successfully deployed, then it is a simple process
    of upgrading the respective package on the remote server.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦网站成功部署，升级远程服务器上的相应包就是一个简单的过程。
- en: 'When a release is made, it is very important to mark that release in the source
    control system using a tag. If you chose to use CVS, tagging is straightforward:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 当发布一个版本时，在源代码控制系统中使用标签标记该版本非常重要。如果你选择使用 CVS，标记过程很简单：
- en: '[PRE54]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This will automatically scan `package.xml` for the files contained within the
    release, and using the release version will create a tag named `RELEASE_X_Y_Z`
    and apply it to all of the files. If the release version is 0.10.0, the tag will
    be `RELEASE_0_10_0`, if the release version is 1.2.3, the tag will be `RELEASE_1_2_3`,
    and so on.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动扫描 `package.xml` 以查找发布中包含的文件，并使用发布版本创建一个名为 `RELEASE_X_Y_Z` 的标签，并将其应用于所有文件。如果发布版本是
    0.10.0，则标签将是 `RELEASE_0_10_0`；如果发布版本是 1.2.3，则标签将是 `RELEASE_1_2_3`，依此类推。
- en: 'Tagging with Subversion is not quite as automatic, but is accomplished simply
    via:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Subversion 标记并不是完全自动的，但可以通过以下方式简单完成：
- en: '[PRE55]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: With these steps, release version X.Y.Z is tagged.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤，版本 X.Y.Z 将被标记。
- en: Testing the Release before Uploading
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在上传前测试发布版本
- en: 'When you are ready to deploy the website, it is important to create a test
    package and install it locally to ensure that all is OK. Output from packaging
    will be something along these lines:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备部署网站时，创建一个测试包并在本地安装它以确保一切正常非常重要。打包的输出将类似于以下内容：
- en: '[PRE56]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Tip
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**What about all those "Warning: in index.php..." Things?**'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于所有那些 "Warning: in index.php..." 的事情怎么办？**'
- en: 'This warning is intended for those folks who are actively developing for the
    official PEAR repository at [http://pear.php.net](http://pear.php.net) to help
    catch cases where classes are misnamed. We could easily eliminate these warnings
    by creating a custom channel validator as discussed in [Chapter 5](ch05.html "Chapter 5. Releasing
    to the World: PEAR Channels"), but this is unnecessary since we know that they
    are superfluous warnings (one of the advantages of having written the software
    or of having read this book!)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '这条警告是针对那些正在为官方 PEAR 仓库 [http://pear.php.net](http://pear.php.net) 开发的开发者，旨在帮助捕捉到类命名错误的情况。我们可以通过创建一个自定义通道验证器来轻松消除这些警告，正如在第
    5 章（[Chapter 5. 发布到世界：PEAR 通道](ch05.html "Chapter 5. Releasing to the World: PEAR
    Channels")）中讨论的那样，但这并不是必需的，因为我们知道这些警告是多余的（编写软件或阅读这本书的一个优点！）'
- en: Next, browse to every page and click links (or run your test suite if you have
    one) to be sure that it is working properly. Once you are convinced it is ready
    and working, it is time to upgrade the live server.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，浏览每个页面并点击链接（或者如果你有一个测试套件，运行它）以确保其正常工作。一旦你确信它已经准备好并且可以正常工作，那么就是时候升级 Live
    服务器了。
- en: Upgrading the Live Server
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级 Live 服务器
- en: 'Although it is actually possible to upgrade the live server without taking
    steps to shut it down, this is generally a bad idea. It is in fact best to create
    a test directory with an `index.html` and a `404.html` file; something like the
    following:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然实际上可以在不关闭服务器的情况下升级 Live 服务器，但这通常不是一个好主意。实际上，最好创建一个包含 `index.html` 和 `404.html`
    文件的测试目录；如下所示：
- en: '[PRE57]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then, save an `.htaccess` file (assuming you are using Apache) that looks something
    like this:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，保存一个类似以下的 `.htaccess` 文件（假设你正在使用 Apache）：
- en: '[PRE58]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This is assuming your web host has `mod_rewrite` enabled in Apache (not all
    hosts do). Better yet, if you have access to `httpd.conf`, simply change the directory
    for `DocumentRoot` to the test directory, and add the `ErrorDocument` reference.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设你的网络主机在 Apache 中启用了 `mod_rewrite`（并非所有主机都这样做）。更好的是，如果你可以访问 `httpd.conf`，只需将
    `DocumentRoot` 的目录更改为测试目录，并添加 `ErrorDocument` 引用。
- en: Tip
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Because the PEAR installer uses atomic file transactions, there is very little
    chance of ending up with a half-done install. The purpose of the temporary site
    is to avoid users having to see the site should there be any major problems. You
    can test the site by adding a RewriteCond rule that specifies your computer's
    IP will ignore the rule, which allows you to see the full site and detect any
    problems that need to be fixed.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PEAR安装器使用原子文件事务，因此几乎不可能出现半完成的安装。临时网站的目的在于避免用户在出现任何重大问题时看到网站。你可以通过添加一个RewriteCond规则来测试网站，该规则指定你的计算机IP将忽略该规则，这样你就可以看到完整的网站并检测需要修复的任何问题。
- en: 'Once you have the site properly hidden behind a RewriteRule, it is time to
    actually upgrade the site. First, check out a copy of the website from source
    control using `cvs checkout` or `svn checkout` as we learned at the beginning
    of this chapter. Next, we need to create the package and install it. Before we
    can do this, we need to install all of the necessary custom file roles we created:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你正确地将网站隐藏在RewriteRule之后，就是时候真正升级网站了。首先，使用我们在本章开头学到的`cvs checkout`或`svn checkout`从源代码控制中检出网站的副本。接下来，我们需要创建包并安装它。在我们能够这样做之前，我们需要安装我们创建的所有必要的自定义文件角色：
- en: '[PRE59]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, we need to initialize the custom file roles:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要初始化自定义文件角色：
- en: '[PRE60]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Once this is complete, we are ready to begin installation:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成这些，我们就可以开始安装了：
- en: '[PRE61]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: That's it! Now that we have finished the initial installation, upgrading to
    the next version when it is time is as easy as it gets.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在我们已经完成了初始安装，当需要时升级到下一个版本变得非常简单。
- en: Using the pear upgrade Command
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用pear upgrade命令
- en: For this section, we will use CVS as our source-control example, but substitute
    what we've learned about Subversion if you are using a Subversion repository.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将使用CVS作为我们的源代码控制示例，但如果你使用的是Subversion仓库，请替换我们学到的关于Subversion的内容。
- en: 'When you need to fix a bug or add a new feature, simply modify the release
    notes from the `package.php package.xml` generation file:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要修复一个错误或添加一个新功能时，只需修改`package.php package.xml`生成文件中的发布说明：
- en: '[PRE62]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Then, create the `package.xml` files:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建`package.xml`文件：
- en: '[PRE63]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, commit your work:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，提交你的工作：
- en: '[PRE64]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Again, test on the local server via:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，通过以下方式在本地服务器上进行测试：
- en: '[PRE65]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'And when you are certain it works on the remote server, simply run these commands:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在远程服务器上确定它工作正常后，只需运行这些命令：
- en: '[PRE66]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: At this stage, you have successfully upgraded to version 0.11.0.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一阶段，你已经成功升级到版本0.11.0。
- en: 'What happens if you discover a critical error in version 0.11.0 that didn''t
    exist in version 0.10.0? Fortunately, the sequence to fix the problem is straightforward
    and elegant:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现版本0.11.0中存在版本0.10.0中不存在的关键错误，会发生什么？幸运的是，修复问题的顺序简单而优雅：
- en: '[PRE67]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Two lines of typing is all that you need. This is assuming you kept the 0.10.0
    release tarball sitting around. Even if you didn''t, the process is still very
    simple:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 只需两行输入即可。这是假设你保留了0.10.0版本的tarball。即使你没有，这个过程仍然非常简单：
- en: '[PRE68]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Technically, the last line returning to `HEAD` of CVS is not really necessary
    for the recovery of the website, but it will save later headaches when you have
    forgotten that you have checked out the `RELEASE_0_10_0` tag. The same process
    is also simple in Subversion:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，返回CVS的`HEAD`的最后一条命令对于恢复网站来说并不是真正必要的，但它会在你忘记已经检出`RELEASE_0_10_0`标签时节省未来的麻烦。在Subversion中，这个过程同样简单：
- en: '[PRE69]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now for the $10 million question: how can you perform these tasks if you have
    no shell access on the remote server, as many folks on shared hosts have experienced?
    (Hint: read the section on *PEAR_RemoteInstaller* in [Chapter 1](ch01.html "Chapter 1. Acquiring
    PEAR: What is it and How do I Get It?"), and you''ll have the answer).'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候回答那个价值1000万美元的问题了：如果你在远程服务器上没有shell访问权限，你该如何执行这些任务？（提示：阅读[第1章](ch01.html
    "第1章。获取PEAR：它是什么？我如何获取它？")中关于*PEAR_RemoteInstaller*的部分，你将找到答案）。
- en: The Real Beauty of Using Pear to Fix Problems
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用梨来解决问题的关键之美
- en: 'The worst moment in a web developer''s life is when a serious flaw is discovered
    in a website. It is often difficult to quickly revert to an older version. The
    PEAR installer makes this process simple. If testing determines that the problem
    was introduced in version 1.2.3 and does not exist in version 1.2.2, reverting
    to version 1.2.2 is as simple as:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 对于网页开发者来说，最糟糕的时刻是在网站上发现严重缺陷。通常很难快速回滚到旧版本。PEAR安装器使这个过程变得简单。如果测试确定问题是在版本1.2.3中引入的，而在版本1.2.2中不存在，那么回滚到版本1.2.2就像这样：
- en: '[PRE70]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Or if you have set up a channel (we'll assume you have aliased it as `private):`
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果你已经设置了一个频道（我们假设你已经将其别名为`private`）：
- en: '[PRE71]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Abbreviated:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 简称：
- en: '[PRE72]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In addition, any required dependencies will also be downgraded if you pass in
    the `-o` command-line option.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你传递了`-o`命令行选项，任何所需的依赖项也将被降级。
- en: Summary
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have seen how to use PEAR installer to manage a complicated
    and rapidly evolving website. We saw a number of issues involved in the development
    of a website, such as code breakage, missing or extra files, and how the PEAR
    Installer can help us with them.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用PEAR安装程序来管理一个复杂且快速发展的网站。我们看到了在网站开发中涉及的一些问题，例如代码冲突、文件缺失或多余，以及PEAR安装程序如何帮助我们解决这些问题。
- en: We also saw how to set up a revision control system, either CVS or Subversion.
    Finally, we saw how to use PEAR installer and source control systems to update
    a website.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了如何设置版本控制系统，无论是CVS还是Subversion。最后，我们看到了如何使用PEAR安装程序和源代码控制系统来更新一个网站。
- en: In the next chapter you will learn about ways of publicly distributing your
    libraries and applications over the Internet.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何在互联网上公开分发你的库和应用程序的方法。
