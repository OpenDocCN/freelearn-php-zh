- en: '*Chapter 5*: Exploring Objects and Classes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：探索对象和类'
- en: 'In this chapter, we are going to see one of the main functionalities that Pimcore
    offers to us: the possibility of defining a personal and completely custom dataset
    for each project by creating classes and objects.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到Pimcore为我们提供的主要功能之一：通过创建类和对象定义每个项目的个人和完全定制的数据集的可能性。
- en: The big advantage of using Pimcore is that you can do everything through the
    user interface, without the need of writing a single line of code or to define
    complex database structures, changing or adding new attributes whenever you want.
    Pimcore will do all the magic, and you can update your dataset with no worries
    of running risky migrations on the database. Besides, you can export and import
    all class definitions to share them between different projects without the need
    for reinventing the wheel every time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Pimcore的一个主要优势是您可以通过用户界面完成所有操作，无需编写任何代码或定义复杂的数据库结构，您可以在任何时候更改或添加新属性。Pimcore将完成所有魔法，您无需担心在数据库上运行风险性迁移。此外，您还可以导出和导入所有类定义，以便在不同项目之间共享，无需每次都重新发明轮子。
- en: 'In the following sections, we will present class configuration, focusing on
    various field types that could be added to them, and how to concretely see these
    classes in action through data entry. If we''ve caught your curiosity, just go
    through this chapter to discover how simple it is to create and update your classes
    with Pimcore. The chapter structure is organized as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将介绍类配置，重点关注可以添加到其中的各种字段类型，以及如何通过数据输入具体查看这些类的操作。如果我们激发了您的兴趣，只需通读本章，了解使用Pimcore创建和更新类是多么简单。章节结构组织如下：
- en: What is a Class?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是类？
- en: Creating and Editing a class definition
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和编辑类定义
- en: Discovering Relevant Field Types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现相关字段类型
- en: Understanding and Establishing relations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和建立关系
- en: Performing Data Entry
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行数据输入
- en: By the end of this chapter, you will know how to create Pimcore classes and
    how to properly configure them to make the most of their potential.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解如何创建Pimcore类以及如何正确配置它们以充分利用其潜力。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As you previously have done in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083),
    *Creating Documents in Pimcore*, all you need to run the demo connected with this
    chapter is to navigate to the `5\. Object and Classes` folder on the official
    book repository and start a Docker environment.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[*第4章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)中做的那样，*在Pimcore中创建文档*，运行与本章相关的演示所需要做的只是导航到官方书库中的`5\.
    对象和类`文件夹并启动Docker环境。
- en: 'To do so, just follow these instructions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，只需遵循以下说明：
- en: 'Run Docker with the following command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行Docker：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, to restore all the settings on your local machine, just open a new shell
    and type the following:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为了恢复您本地机器上的所有设置，只需打开一个新的shell并输入以下命令：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Navigate to [http://localhost/admin](http://localhost/admin) and log in with
    your admin/pimcore credentials.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[http://localhost/admin](http://localhost/admin)并使用您的admin/pimcore凭据登录。
- en: 'You can access the official book repository to get the source code through
    the following link:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下链接访问官方书库以获取源代码：
- en: '[https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/5.%20Object%20and%20Classes](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/5.%20Object%20and%20Classes)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/5.%20Object%20and%20Classes](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/5.%20Object%20and%20Classes)'
- en: Now you are ready to navigate the demo to discover all the aspects related to
    this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已准备好导航演示以发现与本章相关的所有方面。
- en: What is a Class?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是类？
- en: In this section, you will learn what a class is in Pimcore and how it is useful
    for managing any kind of data. In the context of Object-Oriented-Programming,
    a **class** consists of a set of variables (or properties) suitable to represent
    a concept, methods to affect values, and the behavior of objects that instantiate
    the class itself.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解在Pimcore中类是什么以及它如何有助于管理任何类型的数据。在面向对象编程的背景下，一个**类**由一组适合表示概念的数据（或属性）、影响值的方法以及实例化该类的对象的行为组成。
- en: Pimcore classes reflect this definition, but there is more. In the following
    sections, we will better understand how those classes work, and how they simplify
    our work on dataset development. In particular, we will see that despite the name,
    Pimcore is not limited to product information management; moreover, you will discover
    that no coding at all is needed to define classes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore 类反映了这个定义，但不仅如此。在接下来的章节中，我们将更好地了解这些类是如何工作的，以及它们如何简化我们在数据集开发上的工作。特别是，我们将看到尽管名称如此，Pimcore
    并不仅限于产品信息管理；此外，你将发现定义类根本不需要编写任何代码。
- en: Designing different concepts
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计不同的概念
- en: As we already know, one of Pimcore's main features is product information management,
    so we are led to believe that everything revolves around the definition of a `Product`
    class. This is often true, of course, but it must not be seen as a limitation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，Pimcore 的主要功能之一是产品信息管理，因此我们倾向于认为一切围绕 `Product` 类的定义展开。当然，这通常是正确的，但不应将其视为限制。
- en: 'Think about a basic e-commerce structure: there will be the `Product` class,
    as we would expect, but maybe we want to categorize our products; we can think
    about creating a `Category` class to link to the product, instead of repeating
    the category''s attributes in each one. We can apply the same reasoning on product
    materials or other attributes, gradually increasing the complexity of our structure
    as needed. And what if we need to implement a store locator for our e-commerce
    site? All we would need to do is create a `Store` class!'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个基本的电子商务结构：将会有一个 `Product` 类，正如我们所期望的，但也许我们想要对产品进行分类；我们可以考虑创建一个 `Category`
    类来链接到产品，而不是在每个产品中重复分类的属性。我们可以在产品材料或其他属性上应用相同的推理，根据需要逐步增加结构的复杂性。那么，如果我们需要为我们的电子商务网站实现商店定位器呢？我们只需要创建一个
    `Store` 类！
- en: To be more generic, we can design every different kind of concept creating the
    respective class. That said, you can easily understand how simple it could be
    to design the dataset for your CMS. You just need to define classes for articles,
    authors, and so on and start to insert your data. Even better is the fact that
    you can do it without writing a single line of code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更通用，我们可以通过创建相应的类来设计每种不同类型的概念。也就是说，你可以很容易地理解如何简单地设计CMS的数据集。你只需要定义文章、作者等类的类，并开始插入你的数据。更好的是，你可以做到这一点而不需要编写任何一行代码。
- en: No code required
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无需编写代码
- en: You may think that defining these classes will require a lot of code development
    or database engineering, but you would be wrong. You just need to define your
    classes and their attributes, and Pimcore will do all the magic. To be more specific,
    we may say that every operation that we make on each of our classes affects a
    couple of PHP files that are needed to define the classes themselves.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为定义这些类需要大量的代码开发或数据库工程，但你错了。你只需要定义你的类及其属性，Pimcore 将完成所有魔法。更具体地说，我们可以说我们对每个类进行的每个操作都会影响定义这些类本身所需的几个PHP文件。
- en: The `definition` file contains a complex structure of arrays that represent
    class fields, all information regarding visual aspects, such as width, height,
    or CSS rules, and the spatial organization of these fields. This file contains
    all class attribute definitions, so it can be used to restore the class itself.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`definition` 文件包含表示类字段的复杂数组结构，所有关于视觉方面的信息，如宽度、高度或CSS规则，以及这些字段的空間组织。这个文件包含所有类属性定义，因此可以用来恢复类本身。'
- en: The `class` file, named after the class itself, contains all getters, setters,
    and other common methods that allow us to manipulate objects that will instantiate
    the class. This class can be referenced within the project and used to access
    class properties and create or update class instances.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`class` 文件以类本身命名，包含所有获取器、设置器和其他常见方法，这些方法使我们能够操作将要实例化类的对象。这个类可以在项目中引用，并用于访问类属性以及创建或更新类实例。'
- en: Those come with flexible and dedicated database tables for each class and the
    relations between them. Once more, all this happens behind the scenes and so you
    will never have to worry about that; all you need to do is define the structure
    that reflects your needs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类都带有灵活且针对每个类的专用数据库表以及它们之间的关系。再次强调，所有这些都在幕后发生，所以你永远不必担心这一点；你所需要做的就是定义反映你需求的结构。
- en: In this section, we discovered what a class is and how anybody can configure
    it without any knowledge of code development. In the next section, we'll see how
    to create and edit a class definition.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们发现了类是什么以及任何人都可以配置它，而无需任何代码开发知识。在下一节中，我们将看到如何创建和编辑类定义。
- en: Creating and Editing a Class Definition
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和编辑类定义
- en: 'Now that we know the basic definitions, in this section, we are ready to create
    our first class. To open up the class definition panel, go through **Settings**
    | **Data Objects** | **Classes**. Now, we can click on the **Add** button on the
    left side. In the following screenshot, we can see the class creation pop-up modal
    that appears:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了基本定义，在本节中，我们准备创建我们的第一个类。要打开类定义面板，请通过**设置** | **数据对象** | **类**。现在，我们可以点击左侧的**添加**按钮。在下面的屏幕截图中，我们可以看到出现的类创建弹出模态框：
- en: '![Figure 5.1: Creating a new class'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.1：创建新类'
- en: '](img/Figure_5.01_B17073.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.01_B17073.jpg)'
- en: 'Figure 5.1: Creating a new class'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1：创建新类
- en: 'In the popup that appears, we must define the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在出现的弹出窗口中，我们必须定义以下内容：
- en: '**Class name**: The name of our class. Pay attention to avoid whitespaces.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类名**：我们类的名称。请注意避免空格。'
- en: '**Unique identifier**: A short string to identify the class uniquely. If we
    omit the identifier, the first available integer ID will be applied to the class.
    This identifier cannot be updated again.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唯一标识符**：一个用于唯一标识类的短字符串。如果我们省略标识符，则将应用第一个可用的整数 ID。此标识符不能再次更新。'
- en: Click on **OK** and the class will be created.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**，类将被创建。
- en: Now we need to define the general settings for the class. We will list all these
    settings, explaining their meanings and how to properly configure them. Remember
    that all settings are optional, and some may not be useful for your project.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要定义类的常规设置。我们将列出所有这些设置，解释它们的含义以及如何正确配置它们。请记住，所有设置都是可选的，并且某些设置可能对您的项目没有用。
- en: 'In the following screenshot, we can see these settings with plausible values:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到这些设置与合理的值：
- en: '![Figure 5.2: General settings'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.2：常规设置'
- en: '](img/Figure_5.02_B17073.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.02_B17073.jpg)'
- en: 'Figure 5.2: General settings'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2：常规设置
- en: 'Let''s now describe each property that we see in the preceding screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在描述我们在前面的屏幕截图中看到的每个属性：
- en: '**Description**: Just a description of your class. It has no other implications.
    It may be useful to transmit the purpose of the class in the case of remote collaboration.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：这只是对你类的描述。它没有其他含义。在远程协作的情况下，这可能有助于传达类的目的。'
- en: '`Pimcore\Model\DataObject\Concrete` class, which contains common methods for
    all classes.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pimcore\Model\DataObject\Concrete` 类，它包含所有类的通用方法。'
- en: '**Implements interface(s)**: A comma-separated list of interfaces that you
    want your class to implement.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现接口**：您希望类实现的接口的逗号分隔列表。'
- en: '**Use (traits)**: In PHP, traits are mechanisms for code reuse, which allows
    reducing some limitations given by single inheritance. In Pimcore, we could use
    traits to implement methods of the previous interface(s).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用（特性）**：在 PHP 中，特性是代码重用的机制，它允许减少单继承带来的某些限制。在 Pimcore 中，我们可以使用特性来实现先前接口的方法。'
- en: '`Pimcore\Model\DataObject\Listing\Concrete` class.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pimcore\Model\DataObject\Listing\Concrete` 类。'
- en: '**Listing Use (traits)**: As we just mentioned, traits are a PHP paradigm of
    code development used to implement interface methods. The same concept is valid
    for class listing.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列出使用（特性）**：正如我们刚才提到的，特性是用于实现接口方法的 PHP 编程范式。同样的概念也适用于类列表。'
- en: '`AbstractProductLinkGenerator` class and implements the `LinkGeneratorInterface`
    interface. The link generator will receive the referenced object and additional
    data depending on the context.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AbstractProductLinkGenerator` 类实现了 `LinkGeneratorInterface` 接口。链接生成器将接收引用的对象以及根据上下文提供的附加数据。'
- en: '**Preview URL**: The preview URL is useful to generate a dynamic URL for the
    object directly on the class definition. You can use placeholders for each defined
    attribute of your class, in addition to common properties such as object ID or
    key. This feature became deprecated in the last version, and it is suggested to
    use **Link Provider Class**.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预览 URL**：预览 URL 对于直接在类定义上生成对象的动态 URL 很有用。您可以使用占位符来表示您类中定义的每个属性，以及常见的属性，如对象
    ID 或键。此功能在最新版本中已弃用，建议使用**链接提供器类**。'
- en: '**Icon**: You can choose a custom icon for your class from the icon list. If
    you prefer, there is the possibility to link your icons, providing the path to
    the icon itself. It is recommended to use SVG files.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图标**：您可以从图标列表中选择您类的自定义图标。如果您愿意，还有链接图标的可能性，提供图标本身的路径。建议使用SVG文件。'
- en: '**Group**: This property is necessary to group your classes into folders in
    the class definitions tree. Classes with the same prefix word are automatically
    grouped even if no group is explicitly provided.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分组**：此属性对于将类分组到类定义树中的文件夹中是必要的。具有相同前缀词的类会自动分组，即使没有明确提供分组也是如此。'
- en: '**Allow Inheritance**: If checked, this property enables the inheritance among
    objects in a tree-structured way. Child objects could be instances of the same
    class or objects of a different class. If child objects belong to the same class
    as the parent object, they automatically inherit all data values from the parent
    object and can override them.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许继承**：如果勾选此属性，将以树状结构方式启用对象之间的继承。子对象可以是同一类的实例或不同类的对象。如果子对象属于与父对象相同的类，它们将自动继承父对象的所有数据值，并可以覆盖它们。'
- en: '**Allow Variants**: Object variants are a particular kind of inheritance. A
    variant''s class cannot be chosen; it''s forced to be the same as the parent object.
    We must note that, by default, variants are excluded from listing queries.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许变体**：对象变体是一种特殊的继承。变体的类不能选择；它必须与父对象相同。我们必须注意，默认情况下，变体被排除在列表查询之外。'
- en: '**Show variants in tree**: This property allows you to see the variants in
    the object tree. If not enabled, variants are only shown in the appropriate tab
    inside the object edit modal.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在树中显示变体**：此属性允许您在对象树中看到变体。如果未启用，变体仅在对象编辑模态中的适当标签中显示。'
- en: '**Show App Logger Tab**: If enabled, the **Application Logger** tab is shown
    inside the object edit modal. In that tab, it''s possible to read eventually created
    log events related to the object.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示应用程序日志标签**：如果启用，**应用程序日志**标签将显示在对象编辑模态中。在该标签中，可以读取与对象相关的最终创建的日志事件。'
- en: '**Enable grid locking**: This allows you to block some columns in the object
    grid views.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用网格锁定**：这允许您在对象网格视图中锁定某些列。'
- en: '**Encrypt Data**: This property enables the possibility to encrypt the object''s
    data in the tables created to store information for the class.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密数据**：此属性启用了对存储类信息表中的对象数据的加密的可能性。'
- en: '**Visibility of system properties**: This allows you to choose which attributes
    are shown by default in the grid view and the search view. These attributes are
    **Id**, **Key**, **Path**, **Published**, **Creation Date**, and **Modification
    date**. These properties are useful for grid filtering.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统属性可见性**：这允许您选择在网格视图和搜索视图中默认显示哪些属性。这些属性是**Id**、**Key**、**Path**、**Published**、**Creation
    Date**和**Modification date**。这些属性对于网格筛选很有用。'
- en: '**Composite Indices**: Pimcore allows you to create custom indices in tables
    that store the information of your class objects. You can choose the index name
    and the class attributes involved in it.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复合索引**：Pimcore允许您在存储类对象信息的表中创建自定义索引。您可以选择索引名称和参与其中的类属性。'
- en: Once you have filled in these class properties, you must click on the **Save**
    button to apply them.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在填写了这些类属性后，您必须点击**保存**按钮以应用它们。
- en: In this section, you learned how to create Pimcore classes. Then, you discovered
    what the main settings for a class are, and how to properly fill in these properties
    concerning your specific needs. Moreover, you have seen how to enable class inheritance.
    In the next section, we will present all the different kinds of components that
    can be attached to the class.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何创建Pimcore类。然后，您发现了类的设置，以及如何根据您的特定需求正确填写这些属性。此外，您还看到了如何启用类继承。在下一节中，我们将介绍可以附加到类上的所有不同类型的组件。
- en: Discovering Relevant Field Types
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现相关字段类型
- en: 'In the previous section, we created our first class. The created class is just
    like an empty box of which, let''s say, we have just established the shape and
    the dimensions. In this section, we will see how we can model our class, defining
    layout components and all different kinds of attributes. These concepts are crucial
    to properly configure your classes according to your needs. In particular, we
    will describe the two different kinds of attributes:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们创建了我们的第一个类。创建的类就像一个空盒子，比如说，我们刚刚确定了形状和尺寸。在本节中，我们将看到如何对我们的类进行建模，定义布局组件和所有不同种类的属性。这些概念对于根据您的需求正确配置类至关重要。特别是，我们将描述两种不同类型的属性：
- en: The Layout Components
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局组件
- en: The Data Components
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据组件
- en: Let's see both of these kinds of components in the following sections.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看这两种类型的组件。
- en: Layout Components
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局组件
- en: The layout components allow us to organize the class attributes through space.
    To better understand the usefulness of these components, let's think about a website
    structure. There are no rules that prevent putting all site information vertically
    on the page. All text, input fields, images, and related links, just listed one
    below the previous one. Sure, it's easy to create, but the reading experience
    for the user is quite a mess, don't you think?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 布局组件使我们能够通过空间来组织类属性。为了更好地理解这些组件的实用性，让我们思考一下网站结构。没有任何规则禁止将所有网站信息垂直放置在页面上。所有文本、输入字段、图片和相关链接，只是依次列出。当然，创建起来很容易，但用户的阅读体验相当混乱，不是吗？
- en: Maybe it'd be better to group common information in different tabs or create
    a box with input fields that the user must fill in with the required information.
    Images can be grouped into a gallery, on the right-hand side, or we may want to
    expand or collapse certain information.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最好将常见信息分组在不同的标签页中，或者创建一个带有输入字段的框，用户必须填写所需信息。图片可以分组到右侧的画廊中，或者我们可能想要展开或折叠某些信息。
- en: Well, class layout components are designed for just that purpose. You must add
    at least one layout component to the class to be allowed to add the class attributes;
    to add a layout component, just right-click on **General Settings** in your class
    definition.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，类布局组件就是为了这个目的而设计的。您必须至少添加一个布局组件到类中，才能允许添加类属性；要添加布局组件，只需在您的类定义中的**常规设置**上右键单击。
- en: 'Let''s see the common characteristic of all kinds of components and the specific
    properties for each of them:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看所有组件的共同特征以及每个组件的具体属性：
- en: '**Name**: The component name will only be shown inside the class definition
    panel.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：组件名称仅会在类定义面板中显示。'
- en: '**Region**: Combined with a parent layout component, this can be used to locate
    the component in different positions, using **North**, **West**, **Center**, **East**,
    and **South**.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域**：与父布局组件结合使用，可以用于在不同位置定位组件，使用**北**、**西**、**中心**、**东**和**南**。'
- en: '**Title**: The component title will be shown in object instances of the class.
    The position and style of the title depend on the specific component.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**：组件标题将在类的对象实例中显示。标题的位置和样式取决于特定的组件。'
- en: '**Width**: The width of the component in the object edit modal.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽度**：组件在对象编辑模式中的宽度。'
- en: '**Height**: The height of the component in the object edit modal.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度**：组件在对象编辑模式中的高度。'
- en: '**Collapsible**: If enabled, this makes the component collapsible by the user.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可折叠**：如果启用，这将使组件可由用户折叠。'
- en: '**Collapsed**: If enabled, the component is collapsed by default on object
    opening.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**折叠**：如果启用，则在对象打开时默认折叠组件。'
- en: '**CSS Style**: Consent to write custom CSS style rules for the component, such
    as a margin or floating position.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSS样式**：同意为组件编写自定义CSS样式规则，例如边距或浮动位置。'
- en: '**Border**: Adds a border to the element.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边框**：为元素添加边框。'
- en: 'We can now have a specific look at each kind of layout component. In the following
    screenshot, we can see all the different types of layout components:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以具体看看每种布局组件。在下面的截图中，我们可以看到所有不同类型的布局组件：
- en: '![Figure 5.3: Add Layout Component'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3：添加布局组件](img/Figure_5.3_Add_Layout_Component.jpg)'
- en: '](img/Figure_5.03_B17073.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.03_B17073.jpg](img/Figure_5.03_B17073.jpg)'
- en: 'Figure 5.3: Add Layout Component'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：添加布局组件
- en: Let's describe the properties of each component in the following sections as
    shown in the screenshot.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中描述每个组件的属性，如图表所示。
- en: Tabpanel
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Tabpanel
- en: This component allows you to group different panels inside. Each panel will
    act as a tab in the object edit modal. Besides the common properties, for Tabpanel,
    you can specify the **Tab Position** property. This lets you choose in which position
    you want to put your tabs; possible values are **top** (default), **left**, **right**,
    and **bottom**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件允许您在内部分组不同的面板。每个面板将作为对象编辑模态中的标签。除了常见属性外，对于 Tabpanel，您可以指定 **Tab Position**
    属性。这允许您选择将标签放置在哪个位置；可能的值是 **top**（默认）、**left**、**right** 和 **bottom**。
- en: Panel
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面板
- en: A simple component that lets you add attributes inside. This component can be
    nested inside other components, such as Tabpanel and Region, and located in different
    positions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的组件，允许您在其中添加属性。此组件可以嵌套在其他组件内部，如 Tabpanel 和 Region，并位于不同的位置。
- en: 'For this component, we can specify these additional properties:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此组件，我们可以指定以下附加属性：
- en: '**Layout**: If the **Fit** option is selected, all fields inside the panel
    will fit the screen dimension.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：如果选择 **Fit** 选项，面板内的所有字段将适应屏幕尺寸。'
- en: '**Label Width**: Sets the width of the panel label.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签宽度**：设置面板标签的宽度。'
- en: '**Icon**: Allows choosing a custom icon that will be shown at the left of the
    label.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图标**：允许选择一个自定义图标，该图标将显示在标签的左侧。'
- en: Accordion
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 折叠面板
- en: Similar to the Panel component, this component is designed to be collapsed and
    expanded as needed. This concept is often used for site development to let the
    user hide or show some extra information that may or may not be useful. For this
    component, there are no extra properties to add.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与面板组件类似，此组件旨在根据需要折叠和展开。这个概念通常用于网站开发，以便用户隐藏或显示一些可能有用或无用的额外信息。对于此组件，没有额外的属性可以添加。
- en: 'In the following screenshot, you will see the difference between panels and
    accordions:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，您将看到面板和折叠面板之间的区别：
- en: '![Figure 5.4: Panels and accordions'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.4：面板和折叠面板'
- en: '](img/Figure_5.04_B17073.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.04_B17073.jpg)'
- en: 'Figure 5.4: Panels and accordions'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4：面板和折叠面板
- en: As you can see in the preceding screenshots, the panels are placed on top inside
    the **Tab Panel Component**. The accordion component contains other layout and
    data components and can be collapsed or expanded.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几张截图所示，面板在 **Tab Panel Component** 内部上方放置。折叠面板包含其他布局和数据组件，并且可以折叠或展开。
- en: Region
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区域
- en: This component is designed to contain only other layout components. If you add
    panels inside a region, you can organize them in the five fixed positions mentioned
    previously. Note that you must specify a fixed region height, or your region will
    not be shown. As for the panel, you can choose a custom icon.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件旨在仅包含其他布局组件。如果您在某个区域内部添加面板，您可以按照之前提到的五个固定位置来组织它们。请注意，您必须指定一个固定区域高度，否则您的区域将不会显示。至于面板，您可以选择一个自定义图标。
- en: Fieldset
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fieldset
- en: This component just lets you add some data components inside of it, grouping
    them with a small border with a label on top. You can use it to group a list of
    similar fields that make sense if shown together. The only specific property that
    can be set is the label width.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件仅允许您在其中添加一些数据组件，并通过顶部标签将它们分组，并用一个小边框包围。您可以使用它来分组一系列相似的字段，如果一起显示则更有意义。唯一可以设置的特定属性是标签宽度。
- en: Field Container
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field Container
- en: The behavior of a Field Container is similar to a Fieldset. The main difference
    is just that you can choose whether you want to group your fields vertically or
    horizontally, by properly selecting the **Layout** property.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Field Container 的行为类似于 Fieldset。主要区别在于您可以通过正确选择 **Layout** 属性来选择是否垂直或水平分组字段。
- en: 'In the following screenshot, you can see the difference between **Fieldset**
    and **Field Container**:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，您可以看到 **Fieldset** 和 **Field Container** 之间的区别：
- en: '![Figure 5.5: Fieldset and Field Container'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.5：Fieldset 和 Field Container'
- en: '](img/Figure_5.05_B17073.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.05_B17073.jpg)'
- en: 'Figure 5.5: Fieldset and Field Container'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5：Fieldset 和 Field Container
- en: As you can see in the preceding screenshot, the data components inside **Fieldset**
    are grouped inside a box vertically. **Field Container** does not have a designed
    border, and the inner components can be grouped horizontally.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一张截图所示，**Fieldset** 内的数据组件是垂直分组在一个框内的。**Field Container** 没有设计边框，内部组件可以水平分组。
- en: Button
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按钮
- en: Allows you to add a custom button inside the object edit modal. The handler
    of the button must be defined in the component definition.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 允许您在对象编辑模态中添加自定义按钮。按钮的处理程序必须在组件定义中定义。
- en: Text
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本
- en: This component is just a static text box that can be shown in the object edit
    modal. The HTML text inside the box can be directly defined in the class definition,
    or you can generate dynamic text specifying the class namespace in the **Custom
    Renderer Class** attribute.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件只是一个静态文本框，可以在对象编辑模态中显示。框内的HTML文本可以直接在类定义中定义，或者你可以在**自定义渲染类**属性中指定类命名空间来生成动态文本。
- en: Preview/Iframe
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预览/Iframe
- en: This component simply lets us render a custom Iframe inside our object edit
    modal. The Iframe URL must be a relative URL of action inside a controller that
    extends the `Pimcore\Controller\FrontendController` class.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件仅允许我们在对象编辑模态中渲染自定义Iframe。Iframe的URL必须是扩展了`Pimcore\Controller\FrontendController`类的控制器中的相对URL。
- en: Now that we have discovered all the options for the layout components, let's
    have a look at the data components.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经发现了布局组件的所有选项，让我们来看看数据组件。
- en: Data Components
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据组件
- en: 'Data components are the concrete attributes of classes. There are tons of available
    attributes,grouped into different main types, that allow you to model your class
    according to your needs. In the following screenshot, you can see a panoramic
    of all types of data components:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 数据组件是类的具体属性。有大量的可用属性，分为不同的主要类型，允许你根据需要建模你的类。在下面的截图中，你可以看到所有类型的数据组件的全景：
- en: '![Figure 5.6: Add Data Component'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6：添加数据组件'
- en: '](img/Figure_5.06_B17073.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.06_B17073.jpg)'
- en: 'Figure 5.6: Add Data Component'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：添加数据组件
- en: 'As you can see in the preceding screenshot, there are 10 main data component
    types, which contain a different number of components. Each component type and
    every attribute have their specific properties, but all data components have a
    set of common properties that we explain here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，有10种主要的数据组件类型，它们包含不同数量的组件。每种组件类型和每个属性都有其特定的属性，但所有数据组件都有一组共同的属性，我们在这里进行解释：
- en: '**Name**: The name of the attribute. It cannot have spaces or special characters,
    because this is the name that will be used in the database table column and the
    PHP class.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**: 属性的名称。它不能包含空格或特殊字符，因为这是将在数据库表列和PHP类中使用的名称。'
- en: '**Title**: The label of the attribute that will be shown in the object edit
    modal.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**: 将在对象编辑模态中显示的属性的标签。'
- en: '**Tooltip**: Suggested text to explain the meaning of the attribute used to
    help the user.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具提示**: 用于解释属性含义的建议文本，以帮助用户。'
- en: '**Mandatory Field**: If checked, makes the attribute mandatory. An object cannot
    be published if all mandatory fields are not filled in.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必填字段**: 如果勾选，则使属性成为必填项。如果所有必填字段均未填写，则对象无法发布。'
- en: '**Indexed**: If checked, creates an index for the field in the database tables.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引**: 如果勾选，将在数据库表中为字段创建索引。'
- en: '**Unique**: If checked, creates the unique constraint in the database tables.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唯一**: 如果勾选，则在数据库表中创建唯一约束。'
- en: '**Not Editable**: If checked, the attribute becomes read-only.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可编辑**: 如果勾选，则属性变为只读。'
- en: '**Invisible**: If checked, the attribute is not visible in the object edit
    modal.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可见**: 如果勾选，则该属性在对象编辑模态中不可见。'
- en: '**Visible in Grid View**: If checked, the attribute is shown in the class''
    predefined grid.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在网格视图中可见**: 如果勾选，则该属性在类的预定义网格中显示。'
- en: '**Visible in Search Result**: If checked, the attribute is visible and searchable
    in the dedicated search modal for the class.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在搜索结果中可见**: 如果勾选，则该属性在类的专用搜索模态中可见并可搜索。'
- en: '**CSS Style**: As for layout components, consent to write custom CSS style
    rules for the component, such as margin or floating position.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSS样式**: 就像布局组件一样，同意为组件编写自定义CSS样式规则，例如边距或浮动位置。'
- en: '**Width**: The width of the component in pixels.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽度**: 组件的像素宽度。'
- en: '**Height**: The height of the component in pixels.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度**: 组件的像素高度。'
- en: '**Default value**: A lot of field types give the possibility to define a default
    value. If any value is typed for the field, the default value is saved. If inheritance
    is enabled for the class, this value is persisted in the database for its children.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认值**: 许多字段类型都提供了定义默认值的可能性。如果为字段键入了任何值，则默认值将被保存。如果启用了类的继承，则此值将持久保存在数据库中，以供其子类使用。'
- en: '`\Pimcore\Model\DataObject\ClassDefinition\DefaultValueGeneratorInterface`
    class, and it is invoked once you open the object to perform the default value
    calculation.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Pimcore\Model\DataObject\ClassDefinition\DefaultValueGeneratorInterface`
    类，并且当你打开对象以执行默认值计算时，它会被调用一次。'
- en: Now that you have learned about the common properties of all kinds of data components,
    we will focus on each specific group of components to describe their peculiarities.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了各种数据组件的常见属性，我们将专注于每个特定的组件组，以描述它们的特性。
- en: Text Components
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本组件
- en: 'This kind of component contains basic text input fields. All these components
    are quite similar and share all the common properties we mentioned before, but
    there are some differences:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组件包含基本的文本输入字段。所有这些组件都非常相似，并且共享我们之前提到的所有常见属性，但也有一些区别：
- en: The **Input** component is the simplest text field. It's not possible to set
    the input height because it is meant to contain only one line. We can indeed show
    the character count and add a regular expression validation.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**组件是最简单的文本字段。由于它旨在只包含一行，因此无法设置输入高度。我们确实可以显示字符计数并添加正则表达式验证。'
- en: The **Textarea** component is quite similar to the previous one but allows you
    to specify the height for your text. As the input component, it's possible to
    show the character count, bet we cannot add regular expressions.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Textarea** 组件与上一个组件相当相似，但允许您指定文本的高度。作为输入组件，它可以显示字符计数，但我们不能添加正则表达式。'
- en: The **WYSIWYG** component, as the famous acronym suggests, allows you to insert
    and edit HTML-formatted text. It's possible to customize the editor configuration
    by providing a CKEditor configuration in the component definition.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WYSIWYG** 组件，正如著名的缩写所暗示的，允许您插入和编辑HTML格式的文本。您可以通过在组件定义中提供CKEditor配置来自定义编辑器配置。'
- en: The **Password** component is an input text with hidden input characters. The
    column length cannot be chosen because contents are always hashed using the selected
    algorithm.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**组件是一个隐藏输入字符的输入文本。列长度不能选择，因为内容总是使用所选算法进行散列。'
- en: The **Input Quantity Value** field is composed of value and measure units. We
    will look in depth into this concept in the following section regarding numeric
    fields.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入数量值**字段由值和度量单位组成。我们将在以下关于数值字段的章节中深入探讨这一概念。'
- en: Number Components
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字组件
- en: This section contains some simple numeric attributes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含一些简单的数值属性。
- en: The **Number** component is the simplest numeric field. It's possible to define
    the decimal size for the database column and the decimal precision for input values.
    Values can be restricted to be only integers or only unsigned. We can also specify
    minimum and maximum values.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字**组件是最简单的数值字段。可以定义数据库列的小数位数和输入值的小数精度。值可以限制为仅整数或仅无符号。我们还可以指定最小和最大值。'
- en: The **Slider** component stores a numeric value but it renders a sliding cursor
    to select the value. By specifying min-max values and incremental steps, it's
    possible to define this slider component.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**Slider** 组件存储一个数值，但它通过滑动光标来选择值。通过指定最小-最大值和增量步长，可以定义此滑动组件。'
- en: 'As mentioned before, the **Quantity Value** component consents to attach measure
    units to numeric fields, giving the possibility to define concepts such as prices,
    weights, and so on. To define your units, just go through **Settings** | **Data
    Object** | **Quantity Value** and simply add the units that you need. Units can
    be added and deleted at any moment, and every operation is auto-saved in the database.
    In the following screenshot, you will see the **QuantityValue** definition panel:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，**数量值**组件允许将度量单位附加到数值字段，从而可以定义诸如价格、重量等概念。要定义您的单位，只需通过**设置** | **数据对象**
    | **数量值**，然后简单地添加您需要的单位。单位可以随时添加和删除，并且每个操作都会自动保存在数据库中。在下面的屏幕截图中，您将看到**数量值**定义面板：
- en: '![Figure 5.7: Quantity value units'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.7：数量值单位]'
- en: '](img/Figure_5.07_B17073.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_5.07_B17073.jpg)'
- en: 'Figure 5.7: Quantity value units'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7：数量值单位
- en: As you can see in the screenshot, different units can be related using a static
    conversion factor or by defining a converter service class; the second option
    could be useful for conversions that need a formula, such as temperature conversions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在屏幕截图中所见，可以使用静态转换因子或通过定义转换服务类将不同的单位相关联；第二种选项对于需要公式的转换可能很有用，例如温度转换。
- en: Date Components
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期组件
- en: These components are designed to contain date and time values. Dates in the
    database can be stored as a timestamp or a date string.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件旨在包含日期和时间值。数据库中的日期可以存储为时间戳或日期字符串。
- en: Select Components
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择组件
- en: 'This kind of component lets you define different types of picklists. Some of
    them come with predefined options, such as **Country**, **Language**, and **User**.
    Instead, there are three types of custom picklists that we can define. For **Boolean
    Select**, we cannot define picklist values, but we can customize labels for the
    two states. **Select** is the most common component of this group. Picklist values
    can be added, removed, and ordered at any time. Values can be numbers or strings
    likewise. In the next screenshot, you will see how **Select** options are defined:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组件允许您定义不同类型的下拉列表。其中一些带有预定义选项，例如**国家**、**语言**和**用户**。相反，我们有三种自定义下拉列表类型可以定义。对于**布尔选择**，我们无法定义下拉列表值，但可以自定义两个状态标签。**选择**是这个组中最常见的组件。下拉列表值可以随时添加、删除和排序。值可以是数字或字符串。在下一张屏幕截图中，您将看到**选择**选项是如何定义的：
- en: '![Figure 5.8: Select values'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8：选择值'
- en: '](img/Figure_5.08_B17073.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.08_B17073.jpg)'
- en: 'Figure 5.8: Select values'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：选择值
- en: As you can see, we can define both the value and display name. Alternatively,
    you may also define a custom class to provide dynamic options for your field.
    The behavior of the **Multiselection** component is the same as the previous one,
    with the difference that we can select multiple values in objects.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们可以定义值和显示名称。或者，您也可以定义一个自定义类，为您的字段提供动态选项。**多选**组件的行为与上一个组件相同，不同之处在于我们可以在对象中选择多个值。
- en: Media Components
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 媒体组件
- en: This set of components permits us to show media files in our class objects.
    We can link internal assets or external images, create galleries, and show video
    previews.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这套组件使我们能够在我们的类对象中显示媒体文件。我们可以链接内部资产或外部图像，创建相册，并显示视频预览。
- en: We will look into this part in depth in [*Chapter 6*](B17073_06_ePub_RK.xhtml#_idTextAnchor112),
    *Using Digital Asset Management*.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第6章*](B17073_06_ePub_RK.xhtml#_idTextAnchor112)中深入探讨这部分内容，*使用数字资产管理*。
- en: Relation components
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系组件
- en: These components are used to establish relations between different classes or
    to link class objects to documents or assets. Note that for assets relations,
    the asset preview will not be shown in the object like the previously mentioned
    group of components. All kinds of relations may be many-to-one or many-to-many.
    For many-to-many object relations, we can choose which fields we want to show
    in the relation box. We may also use **Advanced relation components** to add custom
    metadata fields to the relationship.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件用于在不同类之间建立关系，或将类对象链接到文档或资产。请注意，对于资产关系，资产预览不会像之前提到的组件组那样在对象中显示。所有类型的关联可以是多对一或多对多。对于多对多对象关系，我们可以选择在关系框中显示哪些字段。我们还可以使用**高级关系组件**来向关系添加自定义元数据字段。
- en: We will have a look at relation details in the next section of this chapter.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章下一节中查看关系细节。
- en: Geographic Components
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地理组件
- en: These particular kinds of fields allow us to search and put marks on a rendered
    map. You can add a simple geographic point or draw lines and polygons on the map.
    All points' latitude and longitude are stored in the database.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特定类型的字段使我们能够在渲染的地图上搜索和标记。您可以在地图上添加简单的地理点或绘制线条和多边形。所有点的纬度和经度都存储在数据库中。
- en: CRM Components
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CRM组件
- en: These components are designed to register customer information in Pimcore. We
    must pay attention that almost all these components, such as email, for example,
    have a fixed field name, so it's not possible to add this kind of component multiple
    times in the same class.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件旨在在Pimcore中注册客户信息。我们必须注意，几乎所有这些组件，例如电子邮件，都有一个固定的字段名，因此不可能在同一个类中多次添加此类组件。
- en: Other Components
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他组件
- en: This section contains a batch of mixed components.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含了一组混合组件。
- en: There are simple components such as **Checkbox** and **Color**, or **Link**
    to external websites. We can then cite the **Encrypted Field** component, which
    allows storing encrypted values in the database as long as a secret key has been
    generated and properly configured.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些简单的组件，如**复选框**和**颜色**，或者**链接**到外部网站。然后我们可以引用**加密字段**组件，该组件允许在生成并正确配置了密钥的情况下，在数据库中存储加密值。
- en: We have mentioned all components apart from `Pimcore\Model\DataObject\ClassDefinition\CalculatorClassInterface`
    interface, it's possible to dynamically calculate the value for the field, based
    on other object values. The calculated value is not stored in the database, but
    the calculation is made every time you open the object and every time the specific
    getter is invoked.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到了除了`Pimcore\Model\DataObject\ClassDefinition\CalculatorClassInterface`接口之外的所有组件，它可以根据其他对象的值动态计算字段的值。计算出的值不会存储在数据库中，但每次打开对象和每次调用特定的getter时都会进行计算。
- en: To summarize, throughout this section we described all different kinds of components.
    Firstly, we introduced all the common properties of all data components. We then
    listed different kinds of components, specifying eventual additional properties
    for each of them. In the next section, we describe a particular type of data component
    named structured components.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 总结本节，我们描述了所有不同类型的组件。首先，我们介绍了所有数据组件的常见属性。然后，我们列出了不同类型的组件，并为每个组件指定了可能的附加属性。在下一节中，我们将描述一种特定类型的数据组件，即结构化组件。
- en: Structured Components
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Structured Components
- en: These particular kinds of components are designed to extend the class definition,
    defining structures or patterns with groups of attributes that can be attached
    to class objects.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特定的组件是为了扩展类定义而设计的，通过定义可以附加到类对象上的属性组来定义结构或模式。
- en: We will see some of these components in action in future chapters regarding
    Product Information Management and Master Data Management features. Throughout
    this section, we will describe these components and when they are designed to
    be used.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的章节中，我们将看到一些这些组件在实际的产品信息管理和主数据管理功能中的应用。在本节中，我们将描述这些组件及其设计用于何时使用。
- en: Field-Collection
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field-Collection
- en: The most used component is **Field-Collection**. You can define your field collection
    in the same way that we explained for classes. Just go through **Settings** |
    **Data Objects** | **Field-Collection** and simply create a new one by adding
    layout and data components.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的组件是**Field-Collection**。你可以像我们为类解释的那样定义你的字段集合。只需通过**设置** | **数据对象** | **Field-Collection**，通过添加布局和数据组件简单地创建一个新的字段集合。
- en: 'On your class definition, a **Field-Collection** component can allow one or
    more different **Field-Collection** types. In the class object instances, you
    can dynamically add multiple instances of the defined field collection to add
    the same group of attributes multiple times. This kind of component is useful
    when you have certain properties that can appear with different cardinality in
    various objects. In the following figure, you can see a schema that outlines how
    the **Field-Collection** works:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的类定义中，**Field-Collection**组件可以允许一个或多个不同的**Field-Collection**类型。在类对象实例中，你可以动态添加多个定义的字段集合实例，以多次添加相同的属性组。这种组件在具有可以在不同对象中出现不同基数（cardinality）的特定属性时非常有用。在下图中，你可以看到一个概述**Field-Collection**如何工作的模式：
- en: '![Figure 5.9: Field-Collection'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.9：Field-Collection'
- en: '](img/Figure_5.09_B17073.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.09_B17073.jpg](img/Figure_5.09_B17073.jpg)'
- en: 'Figure 5.9: Field-Collection'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9：Field-Collection
- en: As you can see in the preceding figure, we can add a **Field-Collection** component
    to the class definition. As we can do for the class definition, in the **Field-Collection**
    definition, we can add a set of layout and data components. In the class objects,
    you can add one or more instances of the same **Field-Collection**.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前图所示，我们可以在类定义中添加一个**Field-Collection**组件。正如我们为类定义所做的那样，在**Field-Collection**定义中，我们可以添加一组布局和数据组件。在类对象中，你可以添加一个或多个相同的**Field-Collection**实例。
- en: Objectbricks
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Objectbricks
- en: With **Objectbricks**, unlike **Field-Collection**, objects can be extended
    without changing the class definition.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 与**Field-Collection**不同，**Objectbricks**可以在不更改类定义的情况下扩展对象。
- en: Think about a fashion company that wants to store information about their products.
    We can easily imagine that shirts and shoes will have different attributes. Sure,
    we could create two different classes for shirts and shoes, but you would need
    to define redundant fields for properties that are not shared between the two
    classes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一家想要存储其产品信息的时尚公司。我们可以很容易地想象衬衫和鞋子会有不同的属性。当然，我们可以为衬衫和鞋子创建两个不同的类，但你需要为两个类之间不共享的属性定义冗余字段。
- en: With **Objectbricks**, we just need to create little sets of attributes to describe
    specific fields and allow our class to dynamically add these bricks. As the name
    suggests, class objects can be composed of one or more bricks added to the common
    attributes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Objectbricks**，我们只需创建一组小的属性集来描述特定字段，并允许我们的类动态添加这些砖块。正如其名所示，类对象可以由添加到公共属性中的一个或多个砖块组成。
- en: Similar to classes and **Field-Collection**, just go through **Settings** |
    **Data Objects** | **Objectbricks** to define them. **Objectbricks** is inheritable
    between parent and child objects.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与类和**字段集合**类似，只需通过**设置** | **数据对象** | **Objectbricks**来定义它们。**Objectbricks**在父对象和子对象之间是可继承的。
- en: 'In the following figure, you can see a schema that illustrates how **Objectbricks**
    works:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，您可以看到一个模式，说明**Objectbricks**是如何工作的：
- en: '![Figure 5.10: Objectbricks'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.10：Objectbricks'
- en: '](img/Figure_5.10_B17073.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.10_B17073.jpg)'
- en: 'Figure 5.10: Objectbricks'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10：Objectbricks
- en: As you can see in the preceding figure, we can add an **Objectbricks** component
    to the class definition. In the class instances, we can attach one or more bricks
    to add specific sets of components to the object itself, to give a categorization
    to the object.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，我们可以在类定义中添加**Objectbricks**组件。在类实例中，我们可以附加一个或多个砖块，以向对象本身添加特定的组件集，为对象提供分类。
- en: Localized fields
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地化字段
- en: 'We may also need to define attributes that should be translated into multiple
    languages within an object, such as titles and descriptions for a multilanguage
    site. Using the **Localized Fields** component, we just have to insert child components
    inside and configure languages in **System Settings**. In the following screenshot,
    we can see how the component is rendered on objects:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还需要定义应在对象内翻译成多种语言的属性，例如多语言网站的标题和描述。使用**本地化字段**组件，我们只需在内部插入子组件并配置**系统设置**中的语言。在以下屏幕截图中，我们可以看到组件在对象上的渲染方式：
- en: '![Figure 5.11: Localized Fields'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.11：本地化字段'
- en: '](img/Figure_5.11_B17073.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.11_B17073.jpg)'
- en: 'Figure 5.11: Localized Fields'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11：本地化字段
- en: As you can see, a specific tab is added in the component for each defined language.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，为每个定义的语言在组件中添加了一个特定的标签页。
- en: Block
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块
- en: The **Block** component acts as a simple container for other data components.
    Similar to **Field-Collection**, an unlimited number of block elements can be
    created. The block data just gets serialized into a single database column. As
    a consequence, this container type is not suitable if you are planning to query
    the data.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**块**组件充当其他数据组件的简单容器。类似于**字段集合**，可以创建无限数量的块元素。块数据被序列化到一个单独的数据库列中。因此，如果计划查询数据，则此容器类型不合适。'
- en: Tables
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表格
- en: Two other quite simple components are `TEXT` field, with column values separated
    by the pipe character. Structured tables respect the same principle, but rows
    and columns are always fixed and named.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个相当简单的组件是`TEXT`字段，列值由管道字符分隔。结构化表格遵循相同的原则，但行和列始终是固定的并且有名称。
- en: Classification store
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分类存储
- en: 'The final and most complex component is **Classification Store**. This component
    allows you to define a hierarchical key-value pairs structure to dynamically add
    groups of attributes to class object instances. To define a **Classification Store**
    component, go through **Settings** | **Data Objects** | **Classification Store**.
    To properly create a classification store, we must define the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最最终和最复杂的组件是**分类存储**。该组件允许您定义一个分层键值对结构，以便动态地向类对象实例添加属性组。要定义**分类存储**组件，请通过**设置**
    | **数据对象** | **分类存储**。为了正确创建分类存储，我们必须定义以下内容：
- en: '**Key Definitions**: Define keys for your classification store. All basic data
    components are available for that purpose. For each key, we can choose whether
    it should be mandatory or editable, and other standard properties.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键定义**：为您的分类存储定义键。所有基本数据组件都可用于此目的。对于每个键，我们可以选择它是否应该是必填的或可编辑的，以及其他标准属性。'
- en: '**Groups**: Select one or more keys to define groups. Within the group, you
    can define which keys are mandatory and define the order.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组**：选择一个或多个键来定义组。在组内，您可以定义哪些键是必填的，并定义顺序。'
- en: '**Group Collections**: Different groups can be grouped into collections. In
    the object edit modal, we can add one or more of the defined collections.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组集合**：不同的组可以被组合成集合。在对象编辑模式中，我们可以添加一个或多个定义好的集合。'
- en: Now that you have discovered all kinds of data components, in the next section,
    we will focus on relations, looking in depth into component definitions and providing
    a concrete example of relations.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经发现了各种数据组件，在下一节中，我们将重点关注关系，深入探讨组件定义并提供关系的一个具体示例。
- en: Understanding and Establishing Relations
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和建立关系
- en: 'In this section, we will look in depth into how to relate objects with other
    entities in Pimcore. As we have seen in the previous section, the first step is
    to add the appropriate fields onto our class to configure relations between two
    classes, or relations between classes and other entities (such as documents or
    assets). Here, you will see all the different kinds of relation components:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨如何在Pimcore中将对象与其他实体相关联。正如我们在上一节中看到的，第一步是在我们的类中添加适当的字段来配置两个类之间的关系，或者类与其他实体（如文档或资产）之间的关系。在这里，您将看到所有不同类型的关联组件：
- en: '![Figure 5.12: Relation components'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12：关系组件'
- en: '](img/Figure_5.12_B17073.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.12_B17073.jpg)'
- en: 'Figure 5.12: Relation components'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12：关系组件
- en: As you may see, there are two main different types of relation fields, the generic
    relation fields that allow relating objects, documents, or assets, and specific
    relation fields for object classes. For each type, we can establish a many-to-one
    relation, many-to-many relation, or advanced many-to-many relation. The last one
    lets you define some additional metadata fields that can be attached to the relation
    instances.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，存在两种主要的不同类型的关联字段，允许关联对象、文档或资产的通用关系字段，以及针对对象类的特定关系字段。对于每种类型，我们可以建立多对一关系、多对多关系或高级多对多关系。最后一种关系允许您定义可以附加到关系实例的一些附加元数据字段。
- en: 'In the following sections, we will focus on the two main types of relation
    components, which are as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将重点关注两种主要的关联组件类型，如下所示：
- en: '**Generic Relations**: Relations between an object instance and other entities
    (this could include another object or instances of assets or documents).'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用关系**：对象实例与其他实体之间的关系（这可能包括另一个对象或资产或文档的实例）。'
- en: '**Object Relations**: Specific relations between object instances.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系**：对象实例之间的特定关系。'
- en: Let's see the details of these different types of relations.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些不同类型关系的详细信息。
- en: Generic Relations
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用关系
- en: The **Generic Relations** field allows relations between object instances and
    other previously created entities, which could be either other objects, documents,
    or assets. It's not possible to decide which properties of related entities we
    want to show on the object. For many-to-one relations, only the entity path is
    shown; for many-to-many relations, the ID and entity type are shown as additional
    information.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用关系**字段允许对象实例与其他先前创建的实体之间的关系，这些实体可以是其他对象、文档或资产。我们无法决定我们想在对象上显示相关实体的哪些属性。对于多对一关系，仅显示实体路径；对于多对多关系，显示ID和实体类型作为附加信息。'
- en: 'Besides, we can provide some limitations to the relation attribute, in particular,
    the following:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以对关系属性提供一些限制，特别是以下内容：
- en: For documents, we can specify which types are allowed in the relation. If none
    are selected, all types are allowed.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于文档，我们可以指定哪些类型可以在关系中。如果没有选择，则允许所有类型。
- en: For assets, we can specify which types are allowed in the relation. If no specific
    one is selected, all types are allowed. There is also the possibility to define
    an upload path for assets that could be directly uploaded through the object.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于资产，我们可以指定哪些类型可以在关系中。如果没有选择特定的类型，则允许所有类型。还有为可以通过对象直接上传的资产定义上传路径的可能性。
- en: For objects, we can specify which classes are allowed in the relation. If no
    specific one is selected, all classes are allowed.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于对象，我们可以指定哪些类可以在关系中。如果没有选择特定的类，则允许所有类。
- en: In the next section, we will focus on the other kind of relation components,
    the ones specifically used to relate objects.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将重点关注另一种类型的关联组件，即专门用于关联对象的组件。
- en: Object Relations
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象关系
- en: This kind of relationship is strictly limited to relations between objects.
    As for the previous group, there is the possibility to limit the relations to
    one or more classes. The main difference is that we can select which fields we
    want to show in the relationship within the object element. But if more than one
    class is selected, only common fields between the involved classes can be selected.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这种关系严格限于对象之间的关系。至于之前的一组，有可能将关系限制在一或多个类中。主要区别在于我们可以在对象元素的关系中选出我们想要显示的字段。但如果选择了多个类，则只能选择涉及类之间的公共字段。
- en: For advanced relations, we can define specific metadata fields for each relation.
    These fields could be created as one of the basic data types (**Text**, **Number**,
    **Boolean**, or **Select**) and will be added after the original object fields.
    Another particular component is **Reverse Many-To-Many Object Relation**. This
    component could only work if **Many-To-Many Object Relation** was previously configured.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高级关系，我们可以为每个关系定义特定的元数据字段。这些字段可以是基本数据类型之一（**文本**、**数字**、**布尔值**或**选择**），并将添加在原始对象字段之后。另一个特定的组件是**反向多对多对象关系**。此组件只能在之前配置了**多对多对象关系**的情况下工作。
- en: In the following section, through a concrete example, we will see how to practically
    use relation components to connect objects of different classes.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过一个具体示例来了解如何实际使用关系组件来连接不同类别的对象。
- en: A Concrete Example of Relations
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系的实例化示例
- en: 'To provide a concrete example, think about products and categories. We can
    specify a direct relation between a `Product` class and a `Category` class, and
    specify a reverse relation in the `Category` class that is related to the direct
    one. Let''s first create a `Product` class. Follow the steps given here:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一个具体的例子，考虑产品和类别。我们可以在`Product`类和`Category`类之间指定一个直接关系，并在`Category`类中指定一个与直接关系相关的反向关系。让我们首先创建一个`Product`类。遵循这里给出的步骤：
- en: For the first component, add a tabpanel called `Product Data`.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第一个组件，添加一个名为`Product Data`的tabpanel。
- en: Create a panel named `General Information` as a child of the previously created
    tabpanel component.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`General Information`的面板，作为之前创建的tabpanel组件的子组件。
- en: Add an input field for the product title and then save your class.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个产品标题的输入字段，然后保存你的类。
- en: Create the `Category` class.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Category`类。
- en: Then create the `Product` class. Here, create a new panel and add the **code**
    and **name** fields, and then save the class.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建`Product`类。在这里，创建一个新的面板并添加`code`和`name`字段，然后保存该类。
- en: Now, come back to the product class and add a many-to-many relation component
    to relate the `Product` and `Category` classes.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到产品类，并添加一个多对多关系组件来关联`Product`和`Category`类。
- en: On the relation, specify that you want to show **code** and **name** properties,
    and save the class again.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关系上，指定你想显示**code**和**name**属性，然后再次保存该类。
- en: Now, we can add a reverse relation component to the `Category` class. To add
    this component, we just need to define the class and field for the original relation.
    Set this component as not editable, to make the reverse relation completely automatic.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以向`Category`类添加一个反向关系组件。要添加此组件，我们只需定义原始关系的类和字段。将此组件设置为不可编辑，以使反向关系完全自动。
- en: 'In the following screenshot, we can see the final result:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到最终结果：
- en: '![Figure 5.13: Reverse Many-To-Many Object Relation'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.13：反向多对多对象关系'
- en: '](img/Figure_5.13_B17073.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.13_B17073.jpg)'
- en: 'Figure 5.13: Reverse Many-To-Many Object Relation'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13：反向多对多对象关系
- en: In the preceding screenshot, you can see how the configured components appear.
    On the left side, we can see the components that appear in the class configuration
    tree. On the right side, there are some specific settings of the defined components.
    On top of that, we can see the many-to-many relation component that relates the
    `Product` class with the `Category` class. On the bottom, the reverse relation
    is shown.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以看到配置的组件是如何出现的。在左侧，我们可以看到在类配置树中出现的组件。在右侧，有一些定义组件的特定设置。在最上面，我们可以看到将`Product`类与`Category`类关联的多对多关系组件。在底部，显示了反向关系。
- en: In this section, you learned how to relate classes with other entities. In the
    next section, we will see how these defined relations are reflected in object
    data entry.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何将类与其他实体关联起来。在下一节中，我们将看到这些定义的关系如何在对象数据录入中体现。
- en: Performing Data Entry
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行数据录入
- en: In this section, we will check how class definitions are reflected in concrete
    object instances, discovering how to create Pimcore objects and perform data entry
    to fill their information. We will see how to easily create folders and objects,
    how to relate them, and how to create object variants. Then we will discover how
    easy and fast it is to add new attributes or edit some existing ones, paying attention
    to this last point to avoid the loss of data.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查类定义如何在具体对象实例中体现，发现如何创建Pimcore对象并执行数据录入以填写它们的信息。我们将看到如何轻松创建文件夹和对象，如何将它们关联起来，以及如何创建对象变体。然后我们将发现添加新属性或编辑一些现有属性是多么容易和快速，同时注意最后一点以避免数据丢失。
- en: Creating Folders and Objects
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文件夹和对象
- en: 'In Pimcore, unlike what you might think, folders are just instances of a common
    base class for which we are not able to add custom attributes. It''s not mandatory
    to create folders; think of it just as a helping feature to organize your objects
    semantically as you do on your PC desktop. Different folders can be nested in
    a tree structure. To create your first folder, follow the steps given here:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pimcore中，与你的想象不同，文件夹只是我们无法添加自定义属性的一个通用基类的实例。创建文件夹不是强制性的；把它看作是帮助你在PC桌面语义上组织对象的一个辅助功能。不同的文件夹可以嵌套在树结构中。要创建你的第一个文件夹，请遵循这里给出的步骤：
- en: Open the **Data Objects** section on the main left panel, and right-click the
    **Home** element.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主左面板上打开**数据对象**部分，然后右键点击**首页**元素。
- en: Select `Home` is a special folder object with `1`. This component cannot be
    deleted, and it will be the root element for the whole tree structure.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`首页`是一个具有`1`的特殊文件夹对象。这个组件不能被删除，它将是整个树结构的根元素。
- en: Having said that, let's create a `Products` folder and a `Categories` folder.
    Once again, this naming is just needed to separate concepts, but it's not mandatory.
    You can create all objects within a unique folder, or as direct children of the
    `Home` component itself.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 话虽如此，让我们创建一个`Products`文件夹和一个`Categories`文件夹。再次强调，这种命名只是为了区分概念，但不是强制性的。你可以在一个唯一的文件夹内创建所有对象，或者作为`首页`组件的直接子元素。
- en: Right-click on the created folders to add objects inside them, choosing the
    class and adding the object name. Note that these names are just keys that appear
    in the tree structure and must be unique within the same folder, but they are
    completely unrelated to any class data property.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击创建的文件夹以在其中添加对象，选择类并添加对象名称。请注意，这些名称只是出现在树结构中的键，必须在同一文件夹内是唯一的，但它们与任何类数据属性完全无关。
- en: With this information, let's create a `Product` object. As previously defined
    in the class definition, an input field for the product title can be filled. The
    relation with categories cannot be done yet, because we need to create categories
    first.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于这些信息，让我们创建一个`Product`对象。如之前在类定义中定义的，可以填写产品标题的输入字段。由于我们需要先创建分类，因此目前还不能进行分类的关系。
- en: Replicate the previous actions to add a couple of category objects in the dedicated
    folder, and fill in the information for them. You will see that it will not be
    possible to select a related product since we have a reverse relation.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制之前的操作，在专用文件夹中添加几个分类对象，并填写它们的信息。你会看到由于我们有一个反向关系，将无法选择相关产品。
- en: Switch back to the product and click on the search button in the relation component
    to select the created categories, and save the product.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回产品，在关系组件中点击搜索按钮以选择创建的分类，并保存产品。
- en: 'Refresh the category objects, and see how the relation with the product appears.
    The result is shown in the following figure:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新分类对象，看看产品关系如何显示。结果如下图所示：
- en: '![Figure 5.14: Object relations'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.14：对象关系'
- en: '](img/Figure_5.14_B17073.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.14_B17073.jpg)'
- en: 'Figure 5.14: Object relations'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14：对象关系
- en: In the preceding figure, we see clearly how objects are mutually related. As
    you may see in the direct relation component, the categories attribute that we
    required in the component configuration is shown in the relation.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以清楚地看到对象是如何相互关联的。正如你在直接关系组件中看到的那样，我们在组件配置中要求的分类属性在关系中显示。
- en: In the next section, you will learn how inheritance work and how to add object
    variants.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习继承是如何工作的以及如何添加对象变体。
- en: Adding Object Variants
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加对象变体
- en: If enabled in the class definition, it's possible to add variants for the created
    objects. To create a variant, just right-click on the previously created object,
    select **Add Variant**, and type the variant name.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在类定义中启用，可以为创建的对象添加变体。要创建一个变体，只需右键单击之前创建的对象，选择**添加变体**，并输入变体名称。
- en: 'The variants inherit all values from parent properties. As you will see in
    the following screenshot, inherited values appear as read-only, but it''s possible
    to override the value on variants:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 变体继承所有父属性的所有值。正如您将在以下屏幕截图中看到的那样，继承的值以只读形式出现，但可以在变体上覆盖值：
- en: '![Figure 5.15: Object variants'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.15：对象变体](img/Figure_5.15_B17073.jpg)'
- en: '](img/Figure_5.15_B17073.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.15：对象变体](img/Figure_5.15_B17073.jpg)'
- en: 'Figure 5.15: Object variants'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15：对象变体
- en: Variants appear in the object tree structure like other objects, but for each
    object, it is possible to easily access variants by clicking on the opposite button
    in the object toolbar.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 变体在对象树结构中像其他对象一样出现，但对于每个对象，可以通过点击对象工具栏中的相反按钮轻松访问变体。
- en: Editing Classes and Objects
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑类和对象
- en: In the *Creating and Editing a Class Definition* section, we saw how easy it
    is to create a class and add some data components. One big advantage of using
    Pimcore is that this can be done incrementally since we can add new components
    or edit existing ones at any time.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在**创建和编辑类定义**部分，我们看到了创建类并添加一些数据组件是多么容易。使用Pimcore的一个主要优点是，这可以增量完成，因为我们可以在任何时候添加新组件或编辑现有组件。
- en: Every operation on a class is reflected in the corresponding PHP class and,
    above all, in the database tables. For these reasons, editing data components
    could be dangerous and lead, in the worst scenario, to the loss of data. Obviously,
    if an input component is converted into a relation component, or if a checkbox
    becomes an image component, loss of data is expected. This is not our focus, but
    we will point our attention to apparently safe operations that are not safe at
    all because they could lead to irreversible loss of data. These are covered in
    the following sections.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在类上的每一个操作都会反映在相应的PHP类中，尤其是在数据库表中。因此，编辑数据组件可能会很危险，在最坏的情况下，可能会导致数据丢失。显然，如果一个输入组件被转换成关系组件，或者一个复选框变成了图像组件，数据丢失是预期的。这并不是我们的重点，但我们将关注那些表面上看似安全但实际上并不安全的操作，因为它们可能导致数据不可逆的丢失。这些内容将在以下章节中介绍。
- en: Text To Number
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本转数字
- en: 'Converting a numeric component into a text one will never lead to loss of data
    because it just alters the database column from decimal to text, and decimal values
    are valid input for a text column. The opposite flow is not valid at the same.
    In this scenario, we have three possible cases:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 将数字组件转换为文本组件永远不会导致数据丢失，因为这仅仅是将数据库列从十进制转换为文本，而十进制值是文本列的有效输入。相反的流程则不适用。在这种情况下，我们有三种可能的情况：
- en: If the field value is a valid number, the data will be safe.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果字段值是一个有效的数字，数据将是安全的。
- en: If the field value is a mixed number with text, only the "numeric" part is left,
    removing all content after the first encountered letter or whitespace.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果字段值是一个包含文本的混合数字，则只保留“数字”部分，删除遇到的首个字母或空白符之后的所有内容。
- en: If the field value is text, the converted value becomes `0`.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果字段值是文本，转换后的值变为`0`。
- en: Let's now see what the risks of changing data types between different kinds
    of numeric fields are.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看在不同类型的数字字段之间更改数据类型的风险。
- en: Number to QuantityValue
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字到数量值
- en: We may think that this operation has no risks because we are just attaching
    a unit of measure to our numeric value, but this is quite false.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会认为这个操作没有风险，因为我们只是在我们的数值上附加一个度量单位，但这完全错误。
- en: 'Indeed, in object tables, the original numeric column is dropped with the inevitable
    loss of data, and two new columns are created. In particular, given a certain
    "fieldname," we have the following columns:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，在对象表中，原始的数字列会被删除，不可避免地导致数据丢失，并且会创建两个新的列。特别是，给定一个“字段名”，我们有以下列：
- en: '`fieldname__value`'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fieldname__value`'
- en: '`fieldname__unit`'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fieldname__unit`'
- en: For this reason, modifying numeric components to `QuantityValue` is discouraged.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不建议将数字组件修改为`QuantityValue`。
- en: Moving a Component to LocalizedFields
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将组件移动到本地化字段
- en: If we move a component into LocalizedFields, data of the component is lost.
    This happens because the database column is dropped from the main object table
    and created in the specific localized table for each defined language.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将组件移动到本地化字段，组件的数据将会丢失。这是因为数据库列从主对象表中删除，并在为每个定义的语言创建的特定本地化表中创建。
- en: In this section, we described different aspects of data entry. Firstly, you
    learned how to create folders and objects on the object tree, and how to create
    object variants. Then, you discovered how to prevent data loss during class definition
    editing, avoiding risky operations on changing component types.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们描述了数据输入的不同方面。首先，你学习了如何在对象树中创建文件夹和对象，以及如何创建对象变体。然后，你发现了如何在类定义编辑过程中防止数据丢失，避免在更改组件类型时进行风险操作。
- en: Summary
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the concept of classes. In Pimcore, a class
    represents the definition of a concept, such as a product or a category. We can
    add both layout and data components to model our classes and integrate them at
    any time, along with adding or editing their properties.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了类的概念。在 Pimcore 中，一个类代表了一个概念的定义，例如产品或类别。我们可以添加布局和数据组件来建模我们的类，并在任何时间将其集成，同时添加或编辑它们的属性。
- en: We learned that to define a class, it's not necessary to write any code or to
    create database tables, because Pimcore does all the magic updating the code and
    database every time you make a change on the class.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到定义一个类，不需要编写任何代码或创建数据库表，因为每次你在类上做出更改时，Pimcore 都会自动更新代码和数据库。
- en: We know it's possible to create a custom PHP class that can be extended by one
    or more classes; this could be useful to add class methods to be used in development.
    With the same principle, it's possible to define rules to provide default values
    for class fields or calculate values for particular kinds of components.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道可以创建一个自定义的 PHP 类，该类可以被一个或多个类扩展；这可以用于在开发中添加类方法。按照同样的原则，可以定义规则为类字段提供默认值或计算特定类型组件的值。
- en: We also learned how we can relate different classes, or link assets and documents
    to class objects using a particular kind of component, and how to define inheritance
    rules for classes. Then we learned about data entry and how it is made simple
    by the easy-to-use Pimcore interface; every change in the class definition is
    immediately reflected on the objects; you just need to refresh.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何通过特定类型的组件将不同的类关联起来，或链接资产和文档到类对象，以及如何定义类的继承规则。然后我们学习了数据输入以及它如何通过易于使用的
    Pimcore 界面变得简单；类定义的任何更改都会立即反映在对象上；你只需要刷新即可。
- en: In the next chapter, we will discover the DAM Pimcore feature, and how it helps
    us to manage multimedia contents and prepare them for distribution.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将发现 DAM Pimcore 功能，以及它是如何帮助我们管理多媒体内容并为分发做准备。
