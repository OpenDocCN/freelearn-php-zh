- en: Appendix A. Blueprint – Creating an Image Gallery Add-on
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 蓝图 – 创建图像库插件
- en: Now that we have learned dozens of concrete5 recipes, it is time to put them
    to practical use. Think of this chapter as one giant recipe, with the sole purpose
    of creating an image gallery add-on, which you can install on your concrete5 website
    and begin using right away. If you visit the website for this book, there is a
    complete download of the source code to help you out if you get stuck.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了数十个 concrete5 的食谱，是时候将它们付诸实践了。将本章视为一个巨大的食谱，其唯一目的是创建一个图像库插件，你可以在 concrete5
    网站上安装并立即开始使用。如果你访问本书的网站，有一个完整的源代码下载，以帮助你解决问题。
- en: Before we begin...
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们开始之前...
- en: This entire chapter was developed with a fresh installation of concrete5 Version
    5.6.1.2, though the code will technically work for any concrete5 after Version
    5.6\. If you'd like to follow along exactly, get a new version of concrete5 running
    on your development server and install the sample content with it. That will give
    us some pages and images to work with.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 整个章节是在 concrete5 版本 5.6.1.2 的全新安装下开发的，尽管代码在技术上可以在 5.6 版本之后的任何 concrete5 上工作。如果你想完全跟随，在你的开发服务器上运行一个新的
    concrete5 版本，并使用它安装示例内容。这将给我们一些页面和图像来工作。
- en: Creating the package controller
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建包控制器
- en: The first step in creating our add-on is to create the directories and files.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的插件的第一步是创建目录和文件。
- en: Create a new directory in `/packages` called `cookbook_gallery`. The first file
    we will need is `controller.php`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/packages` 中创建一个名为 `cookbook_gallery` 的新目录。我们需要的第一个文件是 `controller.php`。
- en: 'Enter the following code in `controller.php` to define the add-on:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `controller.php` 文件中输入以下代码以定义插件：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You may recall from [Chapter 8](ch08.html "Chapter 8. Working with Themes and
    Add-ons"), *Working with Themes and Add-Ons*, that packages only require one file,
    the `controller`. The `controller` file contains methods that tell concrete5 what
    the package's name is, and a text description of the package.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得来自[第8章](ch08.html "第8章. 与主题和插件一起工作")，*与主题和插件一起工作*，的内容，即插件只需要一个文件，即 `controller`
    文件。`controller` 文件包含告诉 concrete5 插件名称的方法，以及插件的文本描述。
- en: There are a few things we need to make note of here. First, notice the class
    name of the controller. Since our package handle is `cookbook_gallery`, we need
    to camel case that handle and append the package to the end, to create the class
    name that concrete5 can predict and load correctly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们需要注意几件事情。首先，注意控制器的类名。由于我们的包处理程序是 `cookbook_gallery`，我们需要将处理程序驼峰化并将其附加到末尾，以创建
    concrete5 可以预测和正确加载的类名。
- en: The next thing we need is the `defined` or `die` statement at the top of the
    file. This is a special security requirement of concrete5 to ensure that scripts
    cannot be executed arbitrarily. Everything has to get run through the concrete5
    dispatcher. This statement is required at the top of every `.php` (excluding third-party
    libraries that exist in `libraries/3rd_party`) file in your package if you plan
    on submitting the package to the concrete5 marketplace.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要的是文件顶部的 `defined` 或 `die` 语句。这是 concrete5 的一个特殊安全要求，以确保脚本不能任意执行。所有内容都必须通过
    concrete5 分发器运行。如果你打算将包提交到 concrete5 市场的话，这个语句在每个 `.php` 文件（不包括存在于 `libraries/3rd_party`
    中的第三方库）的顶部都是必需的。
- en: Another thing that we need to pay attention to is that all public facing strings
    are encased in the `t()` function (see the package name and description). The
    `t()` function, as discussed in [Chapter 9](ch09.html "Chapter 9. System Events
    and Advanced Configuration"), *System Events and Advanced Configuration* allows
    translators to supply alternate translations for the given string. This is another
    requirement for add-ons to be submitted into the concrete5 marketplace.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要注意的另一件事是，所有面向公众的字符串都被包含在 `t()` 函数中（参见包名称和描述）。正如在第9章[系统事件和高级配置](ch09.html
    "第9章. 系统事件和高级配置")中讨论的，`t()` 函数允许翻译者提供给定字符串的替代翻译。这是插件提交到 concrete5 市场的要求之一。
- en: We aren't done with the controller yet; we will need to come back and add the
    installation function once our block is created.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成控制器；一旦我们的块创建完成，我们还需要回来添加安装功能。
- en: Creating the block type
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建块类型
- en: Our image gallery is going to be a custom block type. This block type can be
    added to any page in the concrete5 site, and will show an image gallery wherever
    it is placed. The first thing we will need to do is create the block's directory.
    Add a new directory in `/packages/cookbook_gallery/blocks`. Inside the new block's
    directory, add a directory called `cookbook_gallery`. This will contain our block's
    files.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的形象画廊将是一个自定义块类型。这种块类型可以被添加到concrete5网站的任何页面，并在放置的地方显示图像画廊。我们首先需要做的是创建块的目录。在`/packages/cookbook_gallery/blocks`中添加一个新的目录。在新的块目录内，添加一个名为`cookbook_gallery`的目录。这将包含我们的块文件。
- en: The block's controller
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块的控制器
- en: First up for our block type is the `controller` file. Create `controller.php`
    in `/packages/cookbook_gallery_blocks/cookbook_gallery`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们块类型的首要任务是`controller`文件。在`/packages/cookbook_gallery_blocks/cookbook_gallery`中创建`controller.php`。
- en: 'Declare the block `controller` class and add the following methods:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 声明块的`controller`类并添加以下方法：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Again, notice the `defined` or `die` statement at the top of the file and the
    use of `t()` functions to wrap our public facing strings. We have also defined
    the name of the block's database table, using the member variable `$btTable`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意文件顶部的`defined`或`die`语句以及使用`t()`函数包装我们的公共字符串。我们还定义了块的数据库表名称，使用成员变量`$btTable`。
- en: Save the `controller` file, we will be coming back to it later to add our block's
    functionality.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 保存`controller`文件，我们稍后会回来添加我们块的函数。
- en: The database XML file
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库XML文件
- en: The next file that our block type needs is the database XML file. Create it
    at `/packages/cookbook_gallery/blocks/cookbook_gallery/db.xml`. This file defines
    all of the tables and fields that the block type will need. concrete5 will automatically
    create the defined tables when the block type is installed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们块类型需要的下一个文件是数据库XML文件。在`/packages/cookbook_gallery/blocks/cookbook_gallery/db.xml`中创建它。此文件定义了块类型将需要的所有表和字段。当块类型安装时，concrete5将自动创建定义的表。
- en: You may recall from [Chapter 2](ch02.html "Chapter 2. Working with Blocks"),
    *Working with Blocks* that this file makes use of ADOdb's XML schema (or AXMLS).
    You can learn more about AXMLS on the ADOdb website, located at [http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得[第2章](ch02.html "第2章。与块一起工作") *与块一起工作*，这个文件使用了ADOdb的XML模式（或AXMLS）。你可以在ADOdb网站上了解更多关于AXMLS的信息，网址为[http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema)。
- en: 'Enter the following XML code in `db.xml`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在`db.xml`中输入以下XML代码：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We created a database table with the same name that we specified in the block
    type's controller. The table has two fields, a unique integer ID called `bID`
    (which is required for the block to be installed), and an integer file set ID
    field. Save this `db.xml` file, and you can close it if you'd like, as we won't
    be needing it again.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个与块类型控制器中指定的同名数据库表。该表有两个字段，一个唯一的整数ID称为`bID`（这是块安装所必需的），以及一个整数文件集ID字段。保存此`db.xml`文件，如果你愿意的话，可以关闭它，因为我们不会再需要它了。
- en: The block type's view files
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块类型的视图文件
- en: Finally, we will need to create files for the various views for the block. The
    block has three views—add, edit, and view. Create `add.php`, `edit.php`, and `view.php`
    in the block's directory. Since add and edit share the same HTML, we will create
    a shared template that both views will include, called `form.php`. Oh, why not
    create `view.css` as well, since our view file will need to use some styles.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为块的各个视图创建文件。块有三个视图——添加、编辑和查看。在块的目录中创建`add.php`、`edit.php`和`view.php`。由于添加和编辑共享相同的HTML，我们将创建一个共享模板，这两个视图都将包含它，称为`form.php`。哦，为什么不创建`view.css`呢，因为我们的视图文件将需要使用一些样式。
- en: 'The resulting contents of our new package are in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新包的结果内容如下截图所示：
- en: '![The block type''s view files](img/4548OS_A_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![块的类型视图文件](img/4548OS_A_01.jpg)'
- en: Let's leave these view files empty for now, because we want to install our block
    type and its package to the website!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时留空这些视图文件，因为我们想将我们的块类型及其包安装到网站上！
- en: Installing the block type with the package
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用包安装块类型
- en: Right now, if we were to install the package, the block type would not come
    with it, and users of your add-on would be confused and disappointed. We can tell
    the package to install the block type during the package's installation, though.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们安装这个包，块类型将不会随它一起安装，你的插件用户会感到困惑和失望。不过，我们可以告诉包在包安装期间安装块类型。
- en: Open the package `controller` (`/packages/cookbook_gallery/controller.php`)
    in your code editor.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开包的`controller`（`/packages/cookbook_gallery/controller.php`）。
- en: 'Add a new method to the `controller` class called `install`, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller`类中添加一个名为`install`的新方法，如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What's going on here? Well, the `Package` class has a function called `install`,
    which, you guessed it, installs the package to the concrete5 database. Since our
    package controller extends the `Package` class, the `install` function is automatically
    available to us.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？嗯，`Package`类有一个名为`install`的函数，正如你所猜到的，它将包安装到 concrete5 数据库中。由于我们的包控制器扩展了`Package`类，所以`install`函数自动对我们可用。
- en: The first step is to call the `Package` class's `install` function and get the
    object that it returns. This will allow us to install the block type and have
    it assigned to our package.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是调用`Package`类的`install`函数，并获取它返回的对象。这将使我们能够安装块类型，并将其分配给我们的包。
- en: It's important to pass the `$pkg` object to the block type installer, because
    if users uninstall or reinstall your add-on, the block type will come and go with
    it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将`$pkg`对象传递给块类型安装程序很重要，因为如果用户卸载或重新安装你的附加组件，块类型将随之来去。
- en: Save the controller file. It's time to install our add-on!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 保存控制器文件。现在是时候安装我们的附加组件了！
- en: Installing the package in concrete5
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 concrete5 中安装包
- en: Visit `/dashboard/extend/install/` on your concrete5 site (you'll have to log
    in if your haven't already). You will see your add-on awaiting installation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 访问你的 concrete5 网站的`/dashboard/extend/install/`（如果你还没有登录，你需要先登录）。你会看到你的附加组件等待安装。
- en: 'The gallery add-on awaiting installation is as shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 等待安装的画廊附加组件如下截图所示：
- en: '![Installing the package in concrete5](img/4548OS_A_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![在 concrete5 中安装包](img/4548OS_A_02.jpg)'
- en: Click on the **Install** button. concrete5 will add your package and its block
    controller to the site. If it succeeds, you will see a message at the top of the
    screen.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**安装**按钮。concrete5 将添加你的包及其块控制器到网站中。如果成功，你将在屏幕顶部看到一个消息。
- en: 'After successful installation of the add-on, we see the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 附加组件安装成功后，我们看到以下截图：
- en: '![Installing the package in concrete5](img/4548OS_A_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![在 concrete5 中安装包](img/4548OS_A_03.jpg)'
- en: Creating a page for the gallery
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建画廊页面
- en: Visit your concrete5 homepage and hover over the **Edit** button to add a sub-page
    underneath the home page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 访问你的 concrete5 首页，并将鼠标悬停在**编辑**按钮上，在主页下添加一个子页面。
- en: '![Creating a page for the gallery](img/4548OS_A_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![为画廊创建页面](img/4548OS_A_04.jpg)'
- en: Let's use the **Full** layout for this gallery page.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个画廊页面使用**全**布局。
- en: '![Creating a page for the gallery](img/4548OS_A_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![为画廊创建页面](img/4548OS_A_05.jpg)'
- en: Give the page a title and path. How about `Image Gallery`?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 给页面一个标题和路径。比如叫`图片画廊`？
- en: '![Creating a page for the gallery](img/4548OS_A_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![为画廊创建页面](img/4548OS_A_06.jpg)'
- en: Add the page to the site. Now that we have a nice place to put our block, let's
    actually make our block do something!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将页面添加到网站中。现在我们已经有一个合适的地方放置我们的块了，让我们实际让我们的块做一些事情吧！
- en: Giving life to the block
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使块活跃起来
- en: Open your block's controller (located at `/packages/cookbook_gallery/blocks/cookbook_gallery/controller.php`)
    in your code editor. We need to add some functions to this class to make it work.
    First, let's bring the block's add and edit forms to life. Add the following functions
    to the `controller` class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开你的块的控制器（位于`/packages/cookbook_gallery/blocks/cookbook_gallery/controller.php`）。我们需要添加一些函数来使这个类工作。首先，让我们让块的添加和编辑表单活跃起来。将以下函数添加到`controller`类中。
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Whoa, what are we doing here? You may recall from earlier chapters that concrete5
    controllers employ the use of callbacks, which are functions in the class that
    get automatically executed when certain things happen. Whenever a block is added
    to a page for the first time, concrete5 will call the `add` function when the
    `add.php` view is displayed. The same goes for the `edit` function and the `edit.php`
    view.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，我们在做什么呢？你可能还记得前面的章节，concrete5 控制器使用回调函数，这些函数在类中自动执行，当某些事情发生时。每当一个块首次添加到页面时，concrete5
    将在`add.php`视图显示时调用`add`函数。对于`edit`函数和`edit.php`视图也是同样的道理。
- en: Since we want the same code to run when both add and edit forms are used, why
    not create a function that they each can use? The `addEdit` function contains
    the real code for our backend work.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望添加和编辑表单都运行相同的代码，为什么不创建一个它们各自都可以使用的函数呢？`addEdit`函数包含了我们后端工作的实际代码。
- en: First, we load a list of all of the file sets in the concrete5 database. Next,
    we transform this list of file sets into a simple key/value array that we can
    feed into a select box in the HTML form. Lastly, we send the array of `<select>`
    options to the view as the variable `$sets`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们加载concrete5数据库中所有文件集的列表。然后，我们将文件集列表转换为简单的键/值数组，我们可以将其输入到HTML表单中的选择框中。最后，我们将`<select>`选项的数组发送到视图作为变量`$sets`。
- en: Awesome. Now, what about when the gallery block is actually viewed on the website?
    There's a callback for that, too.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。现在，当画廊块实际上在网站上查看时，也有一个回调函数。
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `view` function will be automatically run by concrete5 whenever the block
    is displayed on the website. It is here that we load the images from the chosen
    file set and send them to the view.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当块在网站上显示时，`view`函数将由concrete5自动运行。正是在这里，我们从所选的文件集中加载图片并发送到视图。
- en: First, we need to create a new instance of the `FileList` class. This class
    allows us to filter the files in the file manager, to only show the ones that
    belong in our image gallery.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建`FileList`类的新实例。这个类允许我们在文件管理器中过滤文件，只显示属于我们图片画廊的文件。
- en: Next, we load the file set object, based on the file set ID that we will set
    in the add/edit form. Using the file set object, we are able to filter the set
    to only show us files that are in that set. We don't want all types of files appearing
    though (imagine a PDF in the image gallery—that's no fun!), so we add another
    filter to only show us images.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们根据在添加/编辑表单中设置的文件集ID加载文件集对象。使用文件集对象，我们能够过滤集合，只显示属于该集合的文件。我们不想显示所有类型的文件（想象一下图片画廊中的PDF文件——那可不好玩！），所以我们添加另一个过滤器，只显示图片。
- en: Next, we write a ternary expression to fall back on the default gallery limit,
    if one was not chosen when the block was added to the page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们编写一个三元表达式，如果添加块到页面时没有选择画廊限制，则回退到默认的画廊限制。
- en: Finally, let's send the images array to the view, so we can show our gallery!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们将图片数组发送到视图，这样我们就可以显示我们的画廊了！
- en: Filling out the add and edit view files
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填写添加和编辑视图文件
- en: Alright, so we have some great code in our controller, but there's still no
    HTML in our views. Let's fix that right now.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们控制器中有一些很棒的代码，但我们的视图中还没有HTML。让我们现在就解决这个问题。
- en: Open `form.php` in your code editor. We are going to create the HTML form that
    site editors will see when the block is added or edited on a page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开`form.php`。我们将创建一个HTML表单，当块在页面上添加或编辑时，网站编辑将看到这个表单。
- en: 'Enter the following HTML and PHP code in `form.php`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`form.php`中输入以下HTML和PHP代码：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Hey, that wasn't so bad! This form will contain two fields—a select box containing
    a list of the file sets in concrete5, and a text input to limit the image gallery.
    Don't worry about wrapping it in a form element or adding save controls, concrete5
    will take care of all of that.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，这并不难！这个表单将包含两个字段——一个包含concrete5中文件集列表的选择框，以及一个文本输入来限制图片画廊。不用担心将其包裹在表单元素中或添加保存控件，concrete5会处理所有这些。
- en: 'Now, let''s include this form in `add.php` and `edit.php`. Add the following
    code to both files:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将此表单包含在`add.php`和`edit.php`中。向这两个文件添加以下代码：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That's it! Now when our block gets added to the website, editors will see our
    nice new form.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在当我们的块添加到网站上时，编辑将看到我们漂亮的新表单。
- en: Creating the gallery view file
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建画廊视图文件
- en: 'Of course, our gallery is still missing the most important component, the gallery
    itself. Let''s add some HTML and PHP to `view.php` to show the various images
    in the chosen file set as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们的画廊还缺少最重要的组件，即画廊本身。让我们在`view.php`中添加一些HTML和PHP代码，以显示所选文件集中的各种图片，如下所示：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Great. Now let's see what we did. At the very top of the file, of course, we
    included the `defined` or `die` statement that is required on all the PHP files.
    Following that, we load up the Image helper, which we will be using later to generate
    thumbnails.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了。现在让我们看看我们做了什么。当然，在文件的顶部，我们包含了所有PHP文件所需的`defined`或`die`语句。随后，我们加载Image辅助工具，我们将在后面使用它来生成缩略图。
- en: Next, we output a title for the gallery, using the `t()` wrapper to remain translation
    friendly, of course.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`t()`包装器输出画廊的标题，当然是为了保持翻译友好性。
- en: Shortly after that, we begin looping through the array of images. These are
    `File` objects, so we have access to all of the related properties. Let's use
    the Image helper to generate a 100 x 100 pixel crop of the image (passing `true`
    as the second parameter tells the Image helper to crop the image, not just resize
    it). That will give our gallery a clean and consistent look.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后不久，我们开始遍历图片数组。这些是 `File` 对象，因此我们可以访问所有相关属性。让我们使用 Image 辅助工具生成一个 100 x 100
    像素的图片裁剪（传递 `true` 作为第二个参数告诉 Image 辅助工具裁剪图片，而不仅仅是调整大小）。这将使我们的画廊看起来整洁且一致。
- en: Next, let's wrap the image in an `<a>` tag, so we can link to the full size
    image. Output the image tag, using the thumbnail's source.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将图片包裹在一个 `<a>` 标签中，这样我们就可以链接到全尺寸图片。使用缩略图的源输出图片标签。
- en: Don't forget to wrap the whole thing in an `if` statement to handle file sets
    with no images.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将整个内容包裹在一个 `if` 语句中，以处理没有图片的文件集。
- en: 'Lastly, let''s add some basic styles to `view.css` so our gallery looks pretty
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们向 `view.css` 添加一些基本样式，以便我们的画廊看起来如下：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Trying out the block
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试使用块
- en: Alright, let's see how we did! Before we can use the block, let's add a file
    set to concrete5\. Visit `/dashboard/files/sets/` in your browser and click on
    the big blue button to add a file set. We need to add at least one file set before
    we can use the gallery.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们看看我们做得怎么样！在我们可以使用块之前，让我们在 concrete5 中添加一个文件集。在浏览器中访问 `/dashboard/files/sets/`
    并点击大蓝色按钮来添加文件集。在使用画廊之前，我们需要至少添加一个文件集。
- en: '![Trying out the block](img/4548OS_A_07.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_07.jpg)'
- en: Create a new file set called `Gallery Images`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Gallery Images` 的新文件集。
- en: '![Trying out the block](img/4548OS_A_08.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_08.jpg)'
- en: Now we have a file set, but still it is empty. Let's add some images to this
    file set by visiting the file manager at `/dashboard/files/search/`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个文件集，但仍然为空。让我们通过访问文件管理器 `/dashboard/files/search/` 来添加一些图片到这个文件集中。
- en: Select a few images to add to the set.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一些图片添加到集合中。
- en: '![Trying out the block](img/4548OS_A_09.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_09.jpg)'
- en: 'Click on the dropdown menu in the upper-left hand corner. Select **Sets**,
    as in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左上角的下拉菜单。选择 **Sets**，如以下截图所示：
- en: '![Trying out the block](img/4548OS_A_10.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_10.jpg)'
- en: Select the file set that we just created to assign these images to that set.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 选择我们刚刚创建的文件集，将这些图片分配到该集合中。
- en: '![Trying out the block](img/4548OS_A_11.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_11.jpg)'
- en: Fantastic! Now we are ready to try out our block. Visit the image gallery page
    that we created earlier and enter edit mode. Click on the main content area to
    add a new block.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们准备好尝试我们的块了。访问我们之前创建的图片画廊页面并进入编辑模式。点击主要内容区域以添加新块。
- en: '![Trying out the block](img/4548OS_A_12.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_12.jpg)'
- en: Scroll to the bottom of the block list to find the photo gallery block that
    we created.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到块列表的底部，找到我们创建的相册块。
- en: '![Trying out the block](img/4548OS_A_13.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_13.jpg)'
- en: Now, fill out the form to add the block. Select the file set and set a limit
    to how many images can appear (or leave it blank to use the default of 20).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，填写表格以添加块。选择文件集并设置可以出现的图片数量限制（或留空以使用默认的20张）。
- en: '![Trying out the block](img/4548OS_A_14.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_14.jpg)'
- en: Add the block to the page and publish the changes. You will see a great-looking
    image gallery!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将块添加到页面并发布更改。您将看到一个看起来很棒的照片画廊！
- en: '![Trying out the block](img/4548OS_A_15.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_15.jpg)'
- en: Click on one of the images to see it in its original size.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 点击其中一张图片，查看其原始大小。
- en: '![Trying out the block](img/4548OS_A_16.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![尝试使用块](img/4548OS_A_16.jpg)'
- en: Well, that looks like our code worked! Congratulations, you have created an
    add-on that can be installed on any concrete5 website and work automatically.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看起来我们的代码是有效的！恭喜，您已经创建了一个可以安装在任何 concrete5 网站上并自动工作的插件。
- en: Wrap-up
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We accomplished a lot in this chapter. We started with nothing, and ended up
    with a fully functioning image gallery. There's still a lot of room for expansion
    and improvements, though. What if we would have added a jQuery lightbox plugin,
    such as fancyBox (available at [http://fancyapps.com/fancybox/](http://fancyapps.com/fancybox/))?
    Or if the gallery had multiple pages? This block type is a great starting point
    for many different possibilities. These tasks are all possible with the concrete5
    API, so have fun exploring and learning new things.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中取得了许多成就。我们从无到有，最终完成了一个功能齐全的图片库。尽管如此，仍有很大的扩展和改进空间。如果我们当时添加了一个jQuery灯箱插件，比如fancyBox（可在[http://fancyapps.com/fancybox/](http://fancyapps.com/fancybox/)找到）会怎样？或者如果画廊有多个页面呢？这种块类型是许多不同可能性的绝佳起点。所有这些任务都可以使用concrete5
    API实现，所以尽情探索和学习新事物吧。
