- en: Chapter 4. Creating a Photo-sharing Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。创建照片共享应用程序
- en: 'There are quite a few image-sharing websites around at the moment. They all
    share roughly the same structure: the user uploads an image and that image can
    be shared, allowing others to view that image. Perhaps limits or constraints are
    placed on the viewing of an image, perhaps the image only remains viewable for
    a set period of time, or within set dates, but the general structure is the same.
    And I''m happy to announce that this project is exactly the same.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有很多图像共享网站。它们都具有大致相同的结构：用户上传图像，该图像可以被共享，允许其他人查看该图像。可能对图像的查看设置了限制或约束，可能图像仅在特定时间段内或特定日期内可见，但总体结构是相同的。我很高兴地宣布，这个项目与此完全相同。
- en: 'We''ll create an application allowing users to share pictures; these pictures
    are accessible from a unique URL. To make this app, we will create two controllers:
    one to process image uploading and one to process the viewing and displaying of
    images stored.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个应用程序，允许用户分享图片；这些图片可以通过一个唯一的URL访问。为了制作这个应用程序，我们将创建两个控制器：一个用于处理图像上传，另一个用于处理存储图像的查看和显示。
- en: We'll create a language file to store the text, allowing you to have support
    for multiple languages should it be needed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个语言文件来存储文本，以便在需要时支持多种语言。
- en: We'll create all the necessary view files and a model to interface with the
    database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建所有必要的视图文件和一个与数据库交互的模型。
- en: However, this project along with all the others in this book relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*, although you can take
    large sections of the code and drop it into pretty much any project you may already
    have. Keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个项目以及本书中的所有其他项目都依赖于我们在[第1章](ch01.html "第1章。简介和共享项目资源")中完成的基本设置，*简介和共享项目资源*，尽管你可以将代码的大段内容复制并粘贴到几乎任何你已有的项目中。请记住，第一章中完成的设置是这个章节的基础。
- en: 'In this chapter, we will cover:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Design and wireframes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和线框图
- en: Creating the database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Creating the models
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Creating the views
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: Creating the controllers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Putting it all together
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合所有内容
- en: So without further ado, let's get on with it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，无需多言，让我们开始吧。
- en: Design and wireframes
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计和线框图
- en: As always, before we start building, we should take a look at what we plan to
    build.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，在我们开始构建之前，我们应该看看我们打算构建什么。
- en: 'First, a brief description of our intent: we plan to build an app to allow
    the user to upload an image. That image will be stored in a folder with a unique
    name. A URL will also be generated containing a unique code, and the URL and code
    will be assigned to that image. The image can be accessed via that URL.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，简要描述我们的意图：我们计划构建一个应用程序，允许用户上传图像。该图像将被存储在一个具有唯一名称的文件夹中。还会生成一个包含唯一代码的URL，该URL和代码将被分配给该图像。可以通过该URL访问图像。
- en: The idea of using a unique URL to access that image is so that we can control
    access to that image, such as allowing an image to be viewed only a set number
    of times, or for a certain period of time only.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用唯一的URL来访问该图像的想法是为了我们可以控制对该图像的访问，例如允许图像仅被查看一定次数，或者仅在特定时间段内。
- en: 'Anyway, to get a better idea of what''s happening, let''s take a look at the
    following site map:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，为了更好地了解正在发生的事情，让我们看一下以下网站地图：
- en: '![Design and wireframes](img/7093OS_04_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![设计和线框图](img/7093OS_04_04.jpg)'
- en: 'So that''s the site map. The first thing to notice is how simple the site is.
    There are only three main areas to this project. Let''s go over each item and
    get a brief idea of what they do:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是网站地图。首先要注意的是这个网站有多简单。这个项目只有三个主要区域。让我们逐一了解每个项目，并简要了解它们的功能：
- en: '**create**: Imagine this as the start point. The user will be shown a simple
    form allowing them to upload an image. Once the user presses the Upload button,
    they are directed to `do_upload`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**：想象一下这是一个起点。用户将看到一个简单的表单，允许他们上传图像。一旦用户按下上传按钮，他们就会被引导到`do_upload`。'
- en: '**do_upload**: The uploaded image is validated for size and file type. If it
    passes, then a unique eight-character string is generated. This string is then
    used as the name of a folder we will make. This folder is present in the main
    `upload` folder and the uploaded image is saved in it. The image details (image
    name, folder name, and so on) are then passed to the database model, where another
    unique code is generated for the image URL. This unique code, image name, and
    folder name are then saved to the database.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**do_upload**：上传的图像会进行大小和文件类型的验证。如果通过验证，则生成一个唯一的八位字符字符串。然后，这个字符串被用作我们将创建的文件夹的名称。这个文件夹位于主
    `upload` 文件夹中，上传的图像被保存在其中。然后，图像的详细信息（图像名称、文件夹名称等）传递到数据库模型，为图像 URL 生成另一个唯一的代码。然后，这个唯一的代码、图像名称和文件夹名称被保存到数据库中。'
- en: The user is then presented with a message informing them that their image has
    been uploaded and that a URL has been created. The user is also presented with
    the image they have uploaded.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后用户会看到一个消息，告知他们图像已上传，并创建了一个 URL。用户还会看到他们上传的图像。
- en: '**go**: This will take a URL provided by someone typing into a browser''s address
    bar, or an `img src` tag, or some other method. The `go` item will look at the
    unique code in the URL, query the database to see if that code exists, and if
    so, fetch the folder name and image name and deliver the image back to the method
    that called it.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**go**：这将接受某人输入浏览器地址栏的 URL、`img src` 标签或其他方法提供的 URL。`go` 项目将查看 URL 中的唯一代码，查询数据库以查看该代码是否存在，如果存在，则获取文件夹名称和图像名称，并将图像返回给调用它的方法。'
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at the wireframes of each page.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对网站的结构和形式有了相当好的了解，让我们来看看每个页面的线框图。
- en: The create item
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: The following screenshot shows a wireframe for the `create` item discussed in
    the previous section. The user is shown a simple form allowing them to upload
    an image.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上一节中讨论的 `create` 项目的线框图。用户会看到一个简单的表单，允许他们上传图像。
- en: '![The create item](img/7093OS_04_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![创建项目](img/7093OS_04_01.jpg)'
- en: The do_upload item
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: do_upload 项目
- en: The following screenshot shows a wireframe from the `do_upload` item discussed
    in the previous section. The user is shown the image they have uploaded and the
    URL that will direct other users to that image.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上一节中讨论的 `do_upload` 项目的线框图。用户会看到他们上传的图像和将其他用户引导到该图像的 URL。
- en: '![The do_upload item](img/7093OS_04_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![创建项目](img/7093OS_04_02.jpg)'
- en: The go item
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: go 项目
- en: The following screenshot shows a wireframe from the go item described in the
    previous section. The `go` controller takes the unique code in a URL, attempts
    to find it in the database table images, and if found, supplies the image associated
    with it. Only the image is supplied, not the actual HTML markup.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上一节中描述的 go 项目的线框图。`go` 控制器会从 URL 中获取唯一的代码，尝试在数据库表 images 中找到它，如果找到，则提供与之关联的图像。只提供图像，而不是实际的
    HTML 标记。
- en: '![The go item](img/7093OS_04_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![go 项目](img/7093OS_04_03.jpg)'
- en: File overview
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件概述
- en: 'This is a relatively small project, and all in all we''re only going to create
    seven files, which are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对较小的项目，总的来说，我们只需要创建七个文件，如下所示：
- en: '`/path/to/codeigniter/application/models/image_model.php`: This provides read/write
    access to the `images` database table. This model also takes the upload information
    and unique folder name (which we store the uploaded image in) from the `create`
    controller and stores this to the database.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/image_model.php`：这为我们提供了对 `images`
    数据库表的读写访问。此模型还会从 `create` 控制器获取上传信息和唯一的文件夹名称（我们将在其中存储上传的图像），并将其存储到数据库中。'
- en: '`/path/to/codeigniter/application/views/create/create.php`: This provides us
    with an interface to display a form allowing the user to upload a file. This also
    displays any error messages to the user, such as wrong file type, file size too
    big, and so on.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/create/create.php`：这为我们提供了一个界面，允许用户上传文件。它还会向用户显示任何错误消息，例如文件类型错误、文件大小过大等。'
- en: '`/path/to/codeigniter/application/views/create/result.php`: This displays the
    image to the user after it has been successfully uploaded, as well as the URL
    required to view that image.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/create/result.php`：在图像成功上传后，此页面会向用户显示图像以及查看该图像所需的
    URL。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`：在页面顶部提供了一个导航栏。'
- en: '`/path/to/codeigniter/application/controllers/create.php`: This performs validation
    checks on the image uploaded by the user, creates a uniquely named folder to store
    the uploaded image, and passes this information to the model.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/create.php`：这个文件对用户上传的图像进行验证检查，创建一个唯一命名的文件夹来存储上传的图像，并将这些信息传递给模型。'
- en: '`/path/to/codeigniter/application/controllers/go.php`: This performs validation
    checks on the URL input by the user, looks for the unique code in the URL and
    attempts to find this record in the database. If it is found, then it will display
    the image stored on disk.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/go.php`：这个文件对用户输入的 URL 进行验证检查，查找
    URL 中的唯一代码并尝试在数据库中找到这个记录。如果找到了，它将显示存储在磁盘上的图像。'
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`：这个文件为应用程序提供语言支持。'
- en: 'The file structure of the preceding seven files is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前七个文件的文件结构如下：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating the database
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*; if you have not, then you should
    know that the code in this chapter is specifically built with the setup from [Chapter
    1](ch01.html "Chapter 1. Introduction and Shared Project Resources"), *Introduction
    and Shared Project Resources,* in mind. However, it's not the end of the world
    if you haven't. The code can easily be applied to other projects and applications
    you may have developed independently.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你应该已经按照[第1章](ch01.html "第1章。简介和共享项目资源")，*简介和共享项目资源*中描述的步骤设置了 CodeIgniter
    和 Bootstrap；如果没有，那么你应该知道，本章中的代码是专门针对[第1章](ch01.html "第1章。简介和共享项目资源")，*简介和共享项目资源*中的设置编写的。然而，如果你没有这样做，也并非世界末日。代码可以轻松地应用于你独立开发的其它项目和应用程序。
- en: 'First, we''ll build the database. Copy the following MySQL code into your database:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将构建数据库。将以下 MySQL 代码复制到你的数据库中：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Right, let''s take a look at each item in every table and see what they mean:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们来看看每个表中的每一项，看看它们代表什么：
- en: '| Table: images |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 表：images |'
- en: '| --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Element** | **Description** |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| `img_id` | This is the primary key. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `img_id` | 这是主键。 |'
- en: '| `img_url_code` | This stores the unique code that we use to identify the
    image in the database. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `img_url_code` | 这存储了我们用来在数据库中识别图像的唯一代码。 |'
- en: '| `img_url_created_at` | This is the MySQL timestamp for the record. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `img_url_created_at` | 这是记录的 MySQL 时间戳。 |'
- en: '| `img_image_name` | This is the filename provided by the CodeIgniter upload
    functionality. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `img_image_name` | 这是 CodeIgniter 上传功能提供的文件名。 |'
- en: '| `img_dir_name` | This is the name of the directory we store the image in.
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `img_dir_name` | 这是存储图像的目录名称。 |'
- en: We'll also need to make amends to the `config/database.php` file, namely setting
    the database access details, username, password, and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对 `config/database.php` 文件进行修改，即设置数据库访问详情，用户名，密码等。
- en: 'Open the `config/database.php` file and find the following lines:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `config/database.php` 文件，找到以下行：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Edit the values in the preceding code ensuring you substitute those values for
    the ones more specific to your setup and situation—so enter your username, password,
    and so on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 修改上述代码中的值，确保用你设置和情况更具体的值替换它们——所以输入你的用户名、密码等。
- en: Adjusting the config.php and autoload.php files
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整 config.php 和 autoload.php 文件
- en: We don't actually need to adjust the `config.php` file in this project as we're
    not really using sessions or anything like that. So we don't need an encryption
    key or database information.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们实际上不需要调整 `config.php` 文件，因为我们并没有真正使用会话或类似的东西。所以，我们不需要加密密钥或数据库信息。
- en: So just ensure that you are not autoloading the session in the `config/autoload.php`
    file or you will get an error, as we've not set any session variables in the `config/config.php`
    file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请确保你不在 `config/autoload.php` 文件中自动加载会话，否则你会得到错误，因为我们没有在 `config/config.php`
    文件中设置任何会话变量。
- en: Adjusting the routes.php file
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整 routes.php 文件
- en: 'We want to redirect the user to the `create` controller rather than the default
    CodeIgniter `welcome` controller. To do this, we will need to amend the default
    controller settings in the `routes.php` file to reflect this. The steps are as
    follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将用户重定向到 `create` 控制器而不是默认的 CodeIgniter `welcome` 控制器。为此，我们需要修改 `routes.php`
    文件中的默认控制器设置以反映这一点。步骤如下：
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config/routes.php`文件进行编辑，并找到以下行（在文件底部附近）：
- en: '[PRE3]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'First, we need to change the default controller. Initially, in a CodeIgniter
    application, the default controller is set to `welcome`. However, we don''t need
    that, instead we want the default controller to be `create`, so find the following
    line:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更改默认控制器。最初，在CodeIgniter应用程序中，默认控制器设置为`welcome`。然而，我们不需要这个，我们希望默认控制器是`create`，所以找到以下行：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Replace it with the following lines:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用以下行替换它：
- en: '[PRE5]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then we need to add some rules to govern how we handle URLs coming in and form
    submissions.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要添加一些规则来规范我们如何处理传入的URL和表单提交。
- en: 'Leave a few blank lines underneath the preceding two lines of code (default
    controller and 404 override) and add the following three lines of code:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前两行代码（默认控制器和404覆盖）下方留出几行空白，然后添加以下三行代码：
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating the model
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: There is only one model in this project, `image_model.php`. It contains functions
    specific to creating and resetting passwords.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中只有一个模型，`image_model.php`。它包含创建和重置密码的特定函数。
- en: 'Create the `/path/to/codeigniter/application/models/image_model.php` file and
    add the following code to it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/models/image_model.php`文件，并将以下代码添加到其中：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are two main functions in this model, which are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中有两个主要函数，如下所示：
- en: '`save_image()`: This generates a unique code that is associated with the uploaded
    image and saves it, with the image name and folder name, to the database.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save_image()`：这生成一个与上传图像关联的唯一代码，并将图像名称和文件夹名称保存到数据库中。'
- en: '`fetch_image()`: This fetches an image''s details from the database according
    to the unique code provided.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetch_image()`: 这根据提供的唯一代码从数据库中获取图像的详细信息。'
- en: Okay, let's take `save_image()` first. The `save_image()` function accepts an
    array from the `create` controller containing `image_name` (from the upload process)
    and `img_dir_name` (this is the folder that the image is stored in).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们先来看`save_image()`。`save_image()`函数接受来自`create`控制器的一个数组，包含`image_name`（来自上传过程）和`img_dir_name`（这是图像存储的文件夹）。
- en: 'A unique code is generated using a `do…while` loop as shown here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用如下所示的`do…while`循环生成一个唯一的代码：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'First a string is created, eight characters in length, containing alpha-numeric
    characters. The `do…while` loop checks to see if this code already exists in the
    database, generating a new code if it is already present. If it does not already
    exist, this code is used:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个包含字母数字字符的八字符长字符串。`do…while`循环检查此代码是否已在数据库中存在，如果已存在，则生成新的代码。如果它不存在，则使用此代码：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This code and the contents of the `$data` array are then saved to the database
    using the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下代码将此代码和`$data`数组的内容保存到数据库中：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `$img_url_code` is returned if the `INSERT` operation was successful, and
    `false` if it failed. The code to achieve this is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`INSERT`操作成功，则返回`$img_url_code`，如果失败，则返回`false`。实现此目的的代码如下：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating the views
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'There are only three views in this project, which are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中只有三个视图，如下所示：
- en: '`/path/to/codeigniter/application/views/create/create.php`: This displays a
    form to the user allowing them to upload an image.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/create/create.php`: 这向用户显示一个表单，允许他们上传图像。'
- en: '`/path/to/codeigniter/application/views/create/result.php`: This displays a
    link that the user can use to forward other people to the image, as well as the
    image itself.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/create/result.php`: 这显示一个用户可以使用它将其他人转发到图像的链接，以及图像本身。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This displays the
    top-level menu. In this project it''s very simple, containing a project name and
    a link to go to the `create` controller.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`: 这显示顶层菜单。在这个项目中，它非常简单，包含项目名称和一个链接，可以跳转到`create`控制器。'
- en: So those are our views, as I said, there are only three of them as it's a simple
    project. Now, let's create each view file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是我们的视图，正如我所说的，由于这是一个简单的项目，所以只有三个视图。现在，让我们创建每个视图文件。
- en: 'Create the `/path/to/codeigniter/application/views/create/create.php` file
    and add the following code to it:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/create/create.php`文件，并将以下代码添加到其中：
- en: '[PRE12]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This view file can be thought of as the main view file; it is here that the
    user can upload their image. Error messages are displayed here too.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个视图文件可以被认为是主视图文件；在这里，用户可以上传他们的图像。错误信息也在这里显示。
- en: 'Create the `/path/to/codeigniter/application/views/create/result.php` file
    and add the following code to it:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/create/result.php` 文件，并将以下代码添加到其中：
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This view will display the encoded image resource URL to the user (so they can
    copy and share it) and the actual image itself.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此视图将向用户显示编码后的图片资源 URL（以便他们可以复制和分享），以及实际的图片本身。
- en: 'Create the `/path/to/codeigniter/application/views/nav/top_nav.php` file and
    add the following code to it:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/nav/top_nav.php` 文件，并将以下代码添加到其中：
- en: '[PRE14]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This view is quite basic but still serves an important role. It displays an
    option to return to the `index()` function of the `create` controller.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此视图相当基础，但仍然发挥着重要作用。它显示了一个返回到 `create` 控制器的 `index()` 函数的选项。
- en: Creating the controllers
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: 'We''re going to create two controllers in this project, which are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将创建两个控制器，如下所示：
- en: '`/path/to/codeigniter/application/controllers/create.php`: This handles the
    creation of unique folders to store images and performs the upload of a file.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/create.php`：此文件处理创建用于存储图片的唯一文件夹，并执行文件的上传。'
- en: '`/path/to/codeigniter/application/controllers/go.php`: This fetches the unique
    code from the database, and returns any image associated with that code.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/go.php`：此文件从数据库中检索唯一代码，并返回与该代码关联的任何图片。'
- en: These are two of our controllers for this project, let's now go ahead and create
    them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们为该项目创建的两个控制器，现在让我们继续创建它们。
- en: 'Create the `/path/to/codeigniter/application/controllers/create.php` file and
    add the following code to it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/controllers/create.php` 文件，并将以下代码添加到其中：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let's start with the `index()` function. The `index()` function sets the `fail`
    and `success` elements of the `$page_data` array to `false`. This will suppress
    any initial messages from being displayed to the user. The views are loaded, specifically
    the `create/create.php` view, which contains the image upload form's HTML markup.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `index()` 函数开始。`index()` 函数将 `$page_data` 数组的 `fail` 和 `success` 元素设置为
    `false`。这将阻止任何初始消息显示给用户。加载视图，特别是 `create/create.php` 视图，其中包含图片上传表单的 HTML 标记。
- en: Once the user submits the form in `create/create.php`, the form will be submitted
    to the `do_upload()` function of the `create` controller. It is this function
    that will perform the task of uploading the image to the server.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在 `create/create.php` 中提交表单后，表单将被提交到 `create` 控制器的 `do_upload()` 函数。正是这个函数负责将图片上传到服务器。
- en: First off, `do_upload()` defines an initial location for the `upload` folder.
    This is stored in the `$upload_dir` variable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`do_upload()` 定义了 `upload` 文件夹的初始位置。这存储在 `$upload_dir` 变量中。
- en: 'Next, we move into a `do…while` structure. It looks something like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们进入一个 `do…while` 结构。它看起来像这样：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So that means *do something while a condition is not being met*. Now with that
    in mind, think about our problem—we have to save the image being uploaded in a
    folder. That folder must have a unique name. So what we will do is generate a
    random string of eight alpha-numeric characters and then look to see if a folder
    exists with that name. Keeping that in mind, let''s look at the code in detail:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 *在条件不满足的情况下执行某些操作*。现在考虑到这一点，思考我们的问题——我们必须将上传的图片保存到一个文件夹中。这个文件夹必须有一个唯一的名称。所以我们将生成一个包含八个字母数字字符的随机字符串，然后查看是否存在具有该名称的文件夹。考虑到这一点，让我们详细查看代码：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'So we make a string of eight characters, containing only alphanumeric characters,
    using the following line of code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们使用以下代码行创建一个只包含字母数字字符的八个字符的字符串：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We then use the PHP function `scandir()` to look in `$upload_dir`. This will
    store all directory names in the `$dirs` variable, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 PHP 函数 `scandir()` 在 `$upload_dir` 中查找。这将存储所有目录名称在 `$dirs` 变量中，如下所示：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We then use the PHP function `in_array()` to look for the value in `$code` in
    the list of directors from `scandir()`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后使用 PHP 函数 `in_array()` 在 `scandir()` 的目录列表中查找 `$code` 中的值。
- en: 'If we don''t find a match, then the value in `$code` must not be taken, so
    we''ll go with that. If the value is found, then we set `$img_dir_name` to `false`,
    which is picked up by the final line of the `do…while` loop:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有找到匹配项，那么 `$code` 中的值不应被采用，因此我们将采用那个值。如果找到了值，那么我们将 `$img_dir_name` 设置为
    `false`，这将由 `do…while` 循环的最后一行捕获：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Anyway, now that we have our unique folder name, we''ll attempt to create it.
    We use the PHP function `mkdir()`, passing to it `$upload_dir` concatenated with
    `$img_dir_name`. If `mkdir()` returns `false`, the form is displayed again along
    with the `encode_upload_mkdir_error` message set in the language file, as shown
    here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，现在我们已经有了我们的唯一文件夹名称，我们将尝试创建它。我们使用 PHP 函数 `mkdir()`，将其传递给 `$upload_dir` 与
    `$img_dir_name` 连接的结果。如果 `mkdir()` 返回 `false`，则表单将再次显示，并显示语言文件中设置的 `encode_upload_mkdir_error`
    消息，如下所示：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once the folder has been made, we then set the configuration variables for
    the upload process, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了文件夹，我们就设置上传过程的配置变量，如下所示：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here we are specifying that we only want to upload `.gif`, `.jpg`, `.jpeg`,
    and `.png` files. We also specify that an image cannot be above 10,000 KB in size
    (although you can set this to any value you wish—remember to adjust the `upload_max_filesize`
    and `post_max_size` PHP settings in your `php.ini` file if you want to have a
    really big file).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定我们只想上传 `.gif`、`.jpg`、`.jpeg` 和 `.png` 文件。我们还指定图片大小不能超过 10,000 KB（尽管你可以将其设置为任何你想要的值——记得调整你的
    `php.ini` 文件中的 `upload_max_filesize` 和 `post_max_size` PHP 设置，如果你想上传非常大的文件）。
- en: We also set the minimum dimensions that an image must be. As with the file size,
    you can adjust this as you wish.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了图像必须的最小尺寸。与文件大小一样，你可以根据需要调整它。
- en: 'We then load the `upload` library, passing to it the configuration settings,
    as shown here:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们加载 `upload` 库，并传递给它的配置设置，如下所示：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next we will attempt to do the upload. If unsuccessful, the CodeIgniter function
    `$this->upload->do_upload()` will return `false`. We will look for this and reload
    the upload page if it does return `false`. We will also pass the specific error
    as a reason why it failed. This error is stored in the `fail` item of the `$page_data`
    array. This can be done as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试上传。如果上传失败，CodeIgniter 函数 `$this->upload->do_upload()` 将返回 `false`。我们将寻找这个返回值，并在它返回
    `false` 时重新加载上传页面。我们还将传递具体的错误原因，为什么它失败了。这个错误存储在 `$page_data` 数组的 `fail` 项中。可以按照以下方式完成：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If, however, it did not fail, we grab the information generated by CodeIgniter
    from the upload. We''ll store this in the `$image_data` array, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果没有失败，我们将从上传中获取 CodeIgniter 生成的信息。我们将按照以下方式将其存储在 `$image_data` 数组中：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then we try to store a record of the upload in the database. We call the `save_image`
    function of `Image_model`, passing to it `file_name` from the `$image_data` array,
    as well as `$img_dir_name`, as shown here:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们尝试在数据库中存储上传记录。我们调用 `Image_model` 的 `save_image` 函数，将其 `file_name` 从 `$image_data`
    数组中传递给它，以及 `$img_dir_name`，如下所示：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We then test for the return value of the `save_image()` function; if it is successful,
    then `Image_model` will return the unique URL code generated in the model. If
    it is unsuccessful, then `Image_model` will return the Boolean `false`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们测试 `save_image()` 函数的返回值；如果成功，则 `Image_model` 将返回模型中生成的唯一 URL 代码。如果失败，则
    `Image_model` 将返回布尔值 `false`。
- en: If `false` is returned, then the form is loaded with a general error. If successful,
    then the `create/result.php` view file is loaded. We pass to it the unique URL
    code (for the link the user needs), and the folder name and image name, necessary
    to display the image correctly.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回 `false`，则表单将加载一个通用错误。如果成功，则加载 `create/result.php` 视图文件。我们向其中传递唯一的 URL 代码（用户需要的链接），以及文件夹名称和图像名称，这是正确显示图像所必需的。
- en: 'Create the `/path/to/codeigniter/application/controllers/go.php` file and add
    the following code to it:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/controllers/go.php` 文件，并向其中添加以下代码：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `go` controller has only one main function, `index()`. It is called when
    a user clicks on a URL or a URL is called (perhaps as the `src` value of an HTML
    `img` tag). Here we grab the unique code generated and assigned to an image when
    it was uploaded in the `create` controller.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`go` 控制器只有一个主函数，`index()`。当用户点击 URL 或调用 URL（可能是 HTML `img` 标签的 `src` 值）时，它会调用。在这里，我们获取在
    `create` 控制器上传图片时生成的并分配给图片的唯一代码。'
- en: This code is in the first value of the URI. Usually it would occupy the third
    parameter—with the first and second parameters normally being used to specify
    the controller and controller function respectively. However, we have changed
    this behavior using CodeIgniter routing. This is explained fully in the *Adjusting
    the routes.php file* section of this chapter.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码位于 URI 的第一个值中。通常它将占用第三个参数——第一个和第二个参数通常用于分别指定控制器和控制器函数。然而，我们使用 CodeIgniter
    路由改变了这种行为。这在本章的 *调整 routes.php 文件* 部分有详细解释。
- en: 'Once we have the unique code, we pass it to the `fetch_image()` function of
    `Image_model`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了唯一的代码，我们就将其传递给 `Image_model` 的 `fetch_image()` 函数：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We test for what is returned. We ask if the number of rows returned equals exactly
    `1`. If not, we will then redirect to the `create` controller.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查返回的内容。我们询问返回的行数是否正好等于 `1`。如果不是，我们将重定向到 `create` 控制器。
- en: 'Perhaps you may not want to do this. Perhaps you may want to do nothing if
    the number of rows returned does not equal `1`. For example, if the image requested
    is in an HTML `img` tag, then if an image is not found a redirect may send someone
    away from the site they''re viewing to the upload page of this project—something
    you might not want to happen. If you want to remove this functionality, remove
    the following lines in bold from the code excerpt:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可能你不想这样做。如果返回的行数不等于 `1`，可能你什么也不做。例如，如果请求的图片在 HTML `img` 标签中，那么如果找不到图片，重定向可能会将某人从他们正在查看的网站发送到本项目的上传页面——这可能是你不希望发生的事情。如果你想移除此功能，请从代码摘录中删除以下加粗行：
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Anyway, if the returned value is exactly `1`, then we''ll loop over the returned
    database object and find `img_image_name` and `img_dir_name`, which we''ll need
    to locate the image in the `upload` folder on the disk. This can be done as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，如果返回的值正好是 `1`，那么我们将遍历返回的数据库对象，找到 `img_image_name` 和 `img_dir_name`，这些是我们需要在磁盘上的
    `upload` 文件夹中定位图片所需的。这可以按以下方式完成：
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We then build the address of the image file and redirect the browser to it,
    as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建图片文件的地址，并将浏览器重定向到该地址，如下所示：
- en: '[PRE31]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Creating the language file
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建语言文件
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. In this way, you can enable multiple region/multiple language
    support.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中的所有项目一样，我们正在使用语言文件向用户提供文本。这样，您可以启用多区域/多语言支持。
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/language/english/en_admin_lang.php` 文件，并向其中添加以下代码：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Putting it all together
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: 'Let''s look at how the user uploads an image. The following is the sequence
    of events:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看用户是如何上传图片的。以下是事件发生的顺序：
- en: 'CodeIgniter looks in the `routes.php` config file and finds the following line:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CodeIgniter 在 `routes.php` 配置文件中查找，并找到以下行：
- en: '[PRE33]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: It directs the request to the `create` controller's `index()` function.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将请求重定向到 `create` 控制器的 `index()` 函数。
- en: The `index()` function loads the `create/create.php` view file that displays
    the upload form to the user.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index()` 函数加载 `create/create.php` 视图文件，向用户显示上传表单。'
- en: The user clicks on the Choose file button, navigates to the image file they
    wish to upload, and selects it.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户点击选择文件按钮，导航到他们想要上传的图片文件，并选择它。
- en: The user presses the Upload button and the form is submitted to the `create`
    controller's `index()` function.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户点击上传按钮，表单提交到 `create` 控制器的 `index()` 函数。
- en: The `index()` function creates a folder in the main `upload` directory to store
    the image in, then does the actual upload.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index()` 函数在主 `upload` 目录中创建一个文件夹以存储图片，然后执行实际的上传。'
- en: On a successful upload, `index()` sends the details of the upload (the new folder
    name and image name) to the `save_image()` model function.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上传成功后，`index()` 将上传的详细信息（新的文件夹名称和图像名称）发送到 `save_image()` 模型函数。
- en: The `save_model()` function also creates a unique code and saves it in the `images`
    table along with the folder name and image name passed to it by the `create` controller.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`save_model()` 函数还创建一个唯一的代码，并将其与通过 `create` 控制器传递给它的文件夹名称和图像名称一起保存在 `images`
    表中。'
- en: The unique code generated during the database insert is then returned to the
    controller and passed to the result view, where it will form part of a success
    message to the user.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库插入期间生成的唯一代码随后返回到控制器，并传递给结果视图，它将形成用户成功消息的一部分。
- en: 'Now, let''s see how an image is viewed (or fetched). The following is the sequence
    of events:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何查看（或检索）图片。以下是事件发生的顺序：
- en: A URL with the syntax `www.domain.com/226KgfYH` comes into the application—either
    when someone clicks on a link or some other call (`<img src="img/li>`
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个具有 `www.domain.com/226KgfYH` 语法格式的 URL 进入应用程序——无论是有人点击链接还是其他调用（`<img src="img/li>`）
- en: '[PRE34] $route[''(:any)''] = "go/index"; [PRE35]`'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[PRE34] `$route[''(:any)''] = "go/index"; [PRE35]`'
- en: '`As the incoming request does not match the other two routes, the preceding
    route is the one CodeIgniter applies to this request.`'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于传入的请求不匹配其他两个路由，因此前面的路由是 CodeIgniter 应用到此请求的路由。
- en: '``The `go` controller is called and the code of `226KgfYH` is passed to it
    as the 1st segment of `uri`.``'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '``调用`go`控制器，并将`226KgfYH`代码作为`uri`的第一个段传递给它。```'
- en: '``The `go` controller passes this to the `fetch_image()` function of the `Image_model.php`
    file. The `fetch_image()` function will attempt to find a matching record in the
    database. If found, it returns the folder name marking the saved location of the
    image, and its filename.``'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '```go`控制器将此传递给`Image_model.php`文件中的`fetch_image()`函数。`fetch_image()`函数将尝试在数据库中找到匹配的记录。如果找到，它将返回文件夹名称，标记图像的保存位置及其文件名。```'
- en: '`This is returned and the path to that image is built. CodeIgniter then redirects
    the user to that image, that is, supplies that image resource to the user that
    requested it.`'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '``返回此信息，并构建该图像的路径。CodeIgniter随后将用户重定向到该图像，即向请求该图像的用户提供该图像资源。```'
- en: '``# Summary    So here we have a basic image sharing application. It is capable
    of accepting a variety of images and assigning them to records in a database and
    unique folders in the filesystem. This is interesting as it leaves things open
    to you to improve on. For example, you can do the following:    *   You can add
    limits on views. As the image record is stored in the database, you could adapt
    the database. Adding two columns called `img_count` and `img_count_limit`, you
    could allow a user to set a limit for the number of views per image and stop providing
    that image when that limit is met. *   You can limit views by date. Similar to
    the preceding point, but you could limit image views to set dates. *   You can
    have different URLs for different dimensions. You could add functionality to make
    several dimensions of image based on the initial upload, offering several different
    URLs for different image dimensions. *   You can report abuse. You could add an
    option allowing viewers of images to report unsavory images that might be uploaded.
    *   You can have terms of service. If you are planning on offering this type of
    application as an actual web service that members of the public could use, then
    I strongly recommend you add a terms of service document, perhaps even require
    that people agree to terms before they upload an image.          In those terms,
    you''ll want to mention that in order for someone to use the service, they first
    have to agree that they do not upload and share any images that could be considered
    illegal. You should also mention that you''ll cooperate with any court if information
    is requested of you.                    You really don''t want to get into trouble
    for owning or running a web service that stores unpleasant images; as much as
    possible you want to make your limits of liability clear and emphasize that it
    is the uploader who has provided the images.              In the next chapter,
    we will create a newsletter signup system. You''ll be able to get people to sign
    up and have their details in a database. People will be allowed to unsubscribe
    and opt-in and opt-out of various settings.``'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '``# 摘要    因此，我们有一个基本的图像共享应用程序。它能够接受各种图像，并将它们分配到数据库中的记录和文件系统中的唯一文件夹中。这很有趣，因为它为你留下了改进的空间。例如，你可以做以下事情：    *   你可以添加查看限制。由于图像记录存储在数据库中，你可以调整数据库。添加名为`img_count`和`img_count_limit`的两列，你可以允许用户为每张图像设置查看次数的限制，并在达到该限制时停止提供该图像。
    *   你可以根据日期限制查看次数。类似于前面的点，但你可以将图像查看次数限制在特定日期。 *   你可以为不同尺寸提供不同的URL。你可以添加功能，根据初始上传创建多个尺寸的图像，为不同的图像尺寸提供多个不同的URL。
    *   你可以报告滥用。你可以添加一个选项，允许图像查看者报告可能被上传的不当图像。 *   你可以设置服务条款。如果你计划提供此类应用程序作为公众可以使用的实际网络服务，那么我强烈建议你添加一份服务条款文档，甚至可能要求人们在上传图像之前同意条款。在那些条款中，你将想要提到，为了使用该服务，人们首先必须同意他们不会上传和分享任何可能被视为非法的图像。你还应提到，如果需要，你将配合任何法院。你真的不希望因为拥有或运营一个存储令人不快的图像的网络服务而陷入麻烦；尽可能明确地说明你的责任限制，并强调是上传者提供了图像。在下一章中，我们将创建一个新闻通讯注册系统。你将能够让人们注册，并将他们的详细信息存储在数据库中。人们将被允许取消订阅和选择不同的设置。```'
