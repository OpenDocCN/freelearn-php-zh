- en: Chapter 5. Using the Dependency Injection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 使用依赖注入
- en: '**Dependency injection** is a software design pattern via which one or more
    dependencies are injected or passed by reference into an object. What this exactly
    means on a practical level is shown in the following two simple examples:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖注入**是一种软件设计模式，通过该模式，一个或多个依赖项被注入或通过引用传递到对象中。这在实际层面上究竟意味着什么，以下两个简单的示例将展示：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, you will see a simplified PHP example, where the `$database` object is
    created in the `getTotalCustomers` method. This means that the dependency on the
    database object is being locked in an object instance method. This makes for tight
    coupling, which has several disadvantages such as reduced reusability and a possible
    system-wide effect caused by changes made to some parts of the code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将看到一个简化的PHP示例，其中`$database`对象是在`getTotalCustomers`方法中创建的。这意味着对数据库对象的依赖被锁定在对象实例方法中。这导致了紧密耦合，具有诸如可重用性降低和由于对代码某些部分的更改可能引起的系统级影响等几个缺点。
- en: 'A solution to this problem is to avoid methods with these sorts of dependencies
    by injecting a dependency into a method, as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是通过将依赖注入到方法中来避免具有这些依赖关系的方法，如下所示：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, a `$database` object is passed (injected) into a method. That's all that
    dependency injection is—a simple concept that makes code loosely coupled. While
    the concept is simple, it may not be easy to implement it across large platforms
    such as Magento.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，一个`$database`对象被传递（注入）到方法中。这就是依赖注入的全部内容——一个简单的概念，它使得代码松散耦合。虽然这个概念很简单，但在像Magento这样的大型平台上实现它可能并不容易。
- en: 'Magento has its own object manager and dependency injection mechanism that
    we will soon look at in detail in the following sections:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Magento有其自己的对象管理器和依赖注入机制，我们将在以下部分详细探讨：
- en: The object manager
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象管理器
- en: Dependency injection
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Configuring class preferences
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置类偏好
- en: Using virtual types
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟类型
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To follow and test the code examples given in the following sections, we can
    use the code available at [https://github.com/ajzele/B05032-Foggyline_Di](https://github.com/ajzele/B05032-Foggyline_Di).
    To install it, we simply need to download it and put it in the `app/code/Foggyline/Di`
    directory. Then, run the following set of commands on the console within Magento''s
    root directory:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟踪和测试以下部分给出的代码示例，我们可以使用在[https://github.com/ajzele/B05032-Foggyline_Di](https://github.com/ajzele/B05032-Foggyline_Di)可用的代码。要安装它，我们只需下载并将其放入`app/code/Foggyline/Di`目录。然后，在Magento根目录的命令行中运行以下命令集：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The last command can be used repeatedly when testing the snippets presented
    in the following section. When `php bin/magento foggy:di` is run, it will run
    the code within the `execute` method in the `DiTestCommand` class. Therefore,
    we can use the `__construct` and `execute` methods from within the `DiTestCommand`
    class and the `di.xml` file itself as a playground for **DI**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分提供的代码片段测试时，最后一个命令可以重复使用。当运行`php bin/magento foggy:di`时，它将在`DiTestCommand`类的`execute`方法中运行代码。因此，我们可以从`DiTestCommand`类内部以及`di.xml`文件本身作为**DI**的游乐场使用`__construct`和`execute`方法。
- en: The object manager
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象管理器
- en: 'The initializing of objects in Magento is done via what is called the **object
    manager**. The object manager itself is an instance of the `Magento\Framework\ObjectManager\ObjectManager`
    class that implements the `Magento\Framework\ObjectManagerInterface` class. The
    `ObjectManager` class defines the following three methods:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Magento中，对象的初始化是通过所谓的**对象管理器**来完成的。对象管理器本身是`Magento\Framework\ObjectManager\ObjectManager`类的实例，该类实现了`Magento\Framework\ObjectManagerInterface`接口。`ObjectManager`类定义了以下三个方法：
- en: '`create($type, array $arguments = [])`: This creates a new object instance'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create($type, array $arguments = [])`: 这将创建一个新的对象实例'
- en: '`get($type)`: This retrieves a cached object instance'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get($type)`: 这将检索一个缓存的实例对象'
- en: '`configure(array $configuration)`: This configures the `di` instance'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configure(array $configuration)`: 这将配置`di`实例'
- en: 'The object manager can instantiate a PHP class, which can be a model, helper,
    or block object. Unless the class that we are working with has already received
    an instance of the object manager, we can receive it by passing `ObjectManagerInterface`
    into the class constructor, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对象管理器可以实例化一个PHP类，这可能是一个模型、助手或块对象。除非我们正在工作的类已经接收到了对象管理器的实例，否则我们可以通过将`ObjectManagerInterface`传递到类构造函数中来接收它，如下所示：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Usually, we don''t have to take care of the constructor parameter''s order
    in Magento. The following example will also enable us to fetch an instance of
    the object manager:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在Magento中我们不需要关心构造函数参数的顺序。以下示例也将使我们能够获取对象管理器的一个实例：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Though we can still use plain old PHP to instantiate an object such as `$object
    = new \Foggyline\Di\Model\Object()`, by using the object manager, we can take
    advantage of Magento's advanced object features such as automatic constructor
    dependency injection and object proxying.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们仍然可以使用普通的PHP来实例化一个对象，例如`$object = new \Foggyline\Di\Model\Object()`，但通过使用对象管理器，我们可以利用Magento的高级对象特性，如自动构造函数依赖注入和对象代理。
- en: 'Here are a few examples of using object manager''s `create` method to create
    new objects:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些使用对象管理器的`create`方法创建新对象的示例：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following are a few examples of using object manager''s `get` method to
    create new objects:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些使用对象管理器的`get`方法创建新对象的示例：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The object manager's `create` method always returns a new object instance, while
    the `get` method returns a singleton.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对象管理器的`create`方法总是返回一个新的对象实例，而`get`方法返回一个单例。
- en: Note how some of the string parameters passed to `create` and `get` are actually
    interface names and not strictly class names. We will soon see why this works
    with both class names and interface names. For now, it suffices to say that it
    works because of Magento's dependency injection implementation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意传递给`create`和`get`的一些字符串参数实际上是接口名称，而不是严格的类名称。我们很快就会看到为什么它既适用于类名称也适用于接口名称。现在，只需说它之所以有效，是因为Magento的依赖注入实现。
- en: Dependency injection
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Until now, we have seen how the object manager has control over the instantiation
    of dependencies. However, by convention, the object manager isn't supposed to
    be used directly in Magento. Rather, it should be used for system-level things
    that bootstrap Magento. We are encouraged to use the module's `etc/di.xml` file
    to instantiate objects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了对象管理器如何控制依赖项的实例化。然而，按照惯例，对象管理器不应该在Magento中直接使用。相反，它应该用于系统级别的初始化工作。我们被鼓励使用模块的`etc/di.xml`文件来实例化对象。
- en: 'Let''s dissect one of the existing `di.xml` entries, such as the one found
    under the `vendor/magento/module-admin-notification/etc/adminhtml/di.xml` file
    for the `Magento\Framework\Notification\MessageList` type:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析现有的`di.xml`条目之一，例如在`vendor/magento/module-admin-notification/etc/adminhtml/di.xml`文件下为`Magento\Framework\Notification\MessageList`类型找到的条目：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Basically, what this means is that whenever an instance of `Magento\Framework\Notification\MessageList`
    is being created, the `messages` parameter is passed on to the constructor. The
    `messages` parameter is being defined as an array, which further consists of other
    string type items. In this case, values of these string type attributes are class
    names, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这意味着每当创建`Magento\Framework\Notification\MessageList`的实例时，`messages`参数都会传递给构造函数。`messages`参数被定义为数组，该数组进一步由其他字符串类型项组成。在这种情况下，这些字符串类型属性的值是类名称，如下所示：
- en: '`Magento\Framework\ObjectManager\ObjectManager`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento\Framework\ObjectManager\ObjectManager`'
- en: '`Magento\AdminNotification\Model\System\Message\Baseurl`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento\AdminNotification\Model\System\Message\Baseurl`'
- en: '`Magento\AdminNotification\Model\System\Message\Security`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento\AdminNotification\Model\System\Message\Security`'
- en: '`Magento\AdminNotification\Model\System\Message\CacheOutdated`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento\AdminNotification\Model\System\Message\CacheOutdated`'
- en: '`Magento\AdminNotification\Model\System\Message\Media\Synchronization\Error`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento\AdminNotification\Model\System\Message\Media\Synchronization\Error`'
- en: '`Magento\AdminNotification\Model\System\Message\Media\Synchronization\Success`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento\AdminNotification\Model\System\Message\Media\Synchronization\Success`'
- en: 'If you now take a look at the constructor of `MessageList`, you will see that
    it is defined in the following way:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在查看`MessageList`的构造函数，你会看到它是以下方式定义的：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we modify the `MessageList` constructor as follows, the code will work:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们按照以下方式修改`MessageList`的构造函数，代码将能够正常工作：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After modification:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However, if we change the `MessageList` constructor to one of the following
    variations, the code will fail to work:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们将`MessageList`的构造函数更改为以下变体之一，代码将无法正常工作：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Another variation is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种变体如下：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The name of the `$messages` parameter in the constructor of the PHP class has
    to exactly match the name of the argument within the arguments' list of `di.xml`.
    The order of parameters in the constructor does not really matter as much as their
    naming.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP类的构造函数中，`$messages`参数的名称必须与`di.xml`中参数列表中的参数名称完全匹配。构造函数中参数的顺序并不像它们的命名那样重要。
- en: Looking further in the `MessageList` constructor, if we execute `func_get_args`
    somewhere within it, the list of items within the $messages parameter will match
    and exceed the one shown in `vendor/magento/module-admin-notification/etc/adminhtml/di.xml`.
    This is so because the list is not final, as Magento collects the DI definitions
    from across entire the platform and merges them. So, if another module is modifying
    the `MessageList` type, the modifications will be reflected.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步查看`MessageList`构造函数时，如果我们在其内部某处执行`func_get_args`，则`$messages`参数中的项目列表将与`vendor/magento/module-admin-notification/etc/adminhtml/di.xml`中显示的列表相匹配并超过它。这是因为列表不是最终的，因为Magento从整个平台收集DI定义并将它们合并。因此，如果另一个模块正在修改`MessageList`类型，修改将反映出来。
- en: 'If we perform a string search within all the `di.xml` files across the entire
    Magento code base for `<type name="Magento\Framework\Notification\MessageList">`,
    this will yield some additional `di.xml` files that have their own additions to
    the `MessageList` type, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在整个Magento代码库的所有`di.xml`文件中进行字符串搜索，搜索`<type name="Magento\Framework\Notification\MessageList">`，这将产生一些额外的`di.xml`文件，它们对`MessageList`类型有自己的添加，如下所示：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What this means is that the `Magento\Indexer\Model\Message\Invalid` and `Magento\Tax\Model\System\Message\Notifications`
    string items are being added to the `messages` argument and are being made available
    within the `MessageList` constructor.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`Magento\Indexer\Model\Message\Invalid`和`Magento\Tax\Model\System\Message\Notifications`字符串项被添加到`messages`参数中，并在`MessageList`构造函数中可用。
- en: In the preceding DI example, we only had the `$messages` parameter defined as
    one argument of the `array` type, and the rest were its array items.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的DI示例中，我们只定义了`$messages`参数作为`array`类型的一个参数，其余的都是其数组项。
- en: 'Let''s take a look at a DI example for another type definition. This time,
    it is the one found under the `vendor/magento/module-backend/etc/di.xml` file
    and which is defined as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个类型定义的DI示例。这次是在`vendor/magento/module-backend/etc/di.xml`文件下找到的，定义如下：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, you will see a type with several different arguments passed to the constructor
    of the `Magento\Backend\Model\Url` class. If you now take a look at the constructor
    of the `Url` class, you will see that it is defined in the following way:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将看到传递给`Magento\Backend\Model\Url`类构造函数的几个不同参数的类型。如果您现在查看`Url`类的构造函数，您将看到它是以以下方式定义的：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `__construct` method here clearly has more parameters than what's defined
    in the `di.xml` file. What this means is that the type argument entries in `di.xml`
    do not necessarily cover all the class `__construct` parameters. The arguments
    that are defined in `di.xml` simply impose the types of individual parameters
    defined in the PHP class itself. This works as long as the `di.xml` parameters
    are of the same type or descendants of the same type.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`__construct`方法显然比`di.xml`文件中定义的参数要多。这意味着`di.xml`中的类型参数条目并不一定涵盖所有类的`__construct`参数。在`di.xml`中定义的参数只是简单地强加了PHP类本身中定义的各个参数的类型。只要`di.xml`中的参数类型相同或为同一类型的子类型，这种方法就可以工作。
- en: Ideally, we would not pass the class type but interface into the PHP constructor
    and then set the type in `di.xml`. This is where the `type`, `preference`, and
    `virtualType` play a major role in `di.xml`. We have seen the role of `type`.
    Now, let's go ahead and see what `preference` does.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们不会将类类型而是接口传递给PHP构造函数，然后在`di.xml`中设置类型。这就是`type`、`preference`和`virtualType`在`di.xml`中发挥重要作用的地方。我们已经看到了`type`的作用。现在，让我们继续看看`preference`是如何工作的。
- en: Configuring class preferences
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置类偏好
- en: A great number of Magento's core classes pass interfaces around constructors.
    The benefit of this is that the object manager, with the help of `di.xml`, can
    decide which class to actually instantiate for a given interface.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Magento的核心类在构造函数中传递接口。这种做法的好处是，对象管理器在`di.xml`的帮助下可以决定为给定的接口实际实例化哪个类。
- en: 'Let''s imagine the `Foggyline\Di\Console\Command\DiTestCommand` class with
    a constructor, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一个具有构造函数的`Foggyline\Di\Console\Command\DiTestCommand`类，如下所示：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note how `$myArg1` is type hinted as the `\Foggyline\Di\Model\TestInterface`
    interface. The object manager knows that it needs to look into the entire `di.xml`
    for possible `preference` definitions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`$myArg1`是如何被指定为`\Foggyline\Di\Model\TestInterface`接口的。对象管理器知道它需要在整个`di.xml`中查找可能的`preference`定义。
- en: 'We can define `preference` within the module''s `di.xml` file, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在模块的`di.xml`文件中定义`preference`，如下所示：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we are basically saying that when someone asks for an instance of `Foggyline\Di\Model\TestInterface`,
    give it an instance of the `Foggyline\Di\Model\Cart` object. For this to work,
    the `Cart` class has to implement `TestInterface` itself. Once the preference
    definition is in place, `$myArg1` shown in the preceding example becomes an object
    of the `Cart` class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们基本上是在说，当有人请求 `Foggyline\Di\Model\TestInterface` 的实例时，给它一个 `Foggyline\Di\Model\Cart`
    对象的实例。为了使这可行，`Cart` 类必须自己实现 `TestInterface`。一旦 `preference` 定义到位，先前的例子中显示的 `$myArg1`
    就变成了 `Cart` 类的对象。
- en: Additionally, the `preference` element is not reserved only to point out the
    preferred classes for some interfaces. We can use it to set the preferred class
    for some other class.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`preference` 元素不仅限于指出某些接口的首选类。我们可以用它来设置某些其他类的首选类。
- en: 'Now, let''s have a look at the `Foggyline\Di\Console\Command\DiTestCommand`
    class with a constructor:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看带有构造函数的 `Foggyline\Di\Console\Command\DiTestCommand` 类：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note how `$myArg1` is now type hinted as the `\Foggyline\Di\Model\User` class.
    Like in the previous example, the object manager will look into `di.xml` for possible
    `preference` definitions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `$myArg1` 现在已作为 `\Foggyline\Di\Model\User` 类进行了类型提示。就像在先前的例子中一样，对象管理器会在 `di.xml`
    中查找可能的 `preference` 定义。
- en: 'Let''s define the `preference` element within the module''s `di.xml` file,
    as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在模块的 `di.xml` 文件中定义 `preference` 元素，如下所示：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What this `preference` definition is saying is that whenever an instance of
    the `User` class is requested, pass an instance of the `Cart` object. This will
    work only if the `Cart` class extends from `User`. This is a convenient way of
    rewriting a class, where the class is being passed directly into another class
    constructor in place of the interface.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `preference` 定义的意思是，每当请求 `User` 类的实例时，传递一个 `Cart` 对象的实例。这只有在 `Cart` 类继承自
    `User` 类的情况下才会工作。这是一种重写类的便捷方式，其中类直接传递到另一个类的构造函数中，而不是接口。
- en: Since the class `__construct` parameters can be type hinted as either classes
    or interfaces and further manipulated via the `di.xml` preference definition,
    a question rises as to what is better. Is it better to use interfaces or specific
    classes? While the answer might not be fully clear, it is always preferable to
    use interfaces to specify the dependencies we are injecting into the system.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `__construct` 参数可以类型提示为类或接口，并且可以通过 `di.xml` 的 `preference` 定义进一步操作，因此会引发一个问题：使用接口还是具体类更好？虽然答案可能并不完全明确，但始终更倾向于使用接口来指定我们注入到系统中的依赖项。
- en: Using virtual types
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚拟类型
- en: Along with `type` and `preference`, there is another powerful feature of `di.xml`
    that we can use. The `virtualType` element enables us to define virtual types.
    Creating a virtual type is like creating a subclass of an existing class except
    for the fact that it's done in `di.xml` and not in code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `type` 和 `preference`，`di.xml` 还有一个我们可用的强大功能。`virtualType` 元素使我们能够定义虚拟类型。创建虚拟类型就像创建现有类的子类一样，只是它是在
    `di.xml` 中而不是在代码中完成的。
- en: '**Virtual types** are a way of injecting dependencies into some of the existing
    classes without affecting other classes. To explain this via a practical example,
    let''s take a look at the following virtual type defined in the `app/etc/di.xml`
    file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟类型** 是一种在不影响其他类的情况下将依赖项注入到一些现有类中的方法。为了通过实际例子解释这一点，让我们看看在 `app/etc/di.xml`
    文件中定义的以下虚拟类型：'
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `virtualType` definition in the preceding example is `Magento\Framework\Message\Session\Storage`,
    which extends from `Magento\Framework\Session\Storage` and overwrites the `namespace`
    parameter to the `message` string value. In `virtualType,` the `name` attribute
    defines the globally unique name of the virtual type, while the `type` attribute
    matches the real PHP class that the virtual type is based on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的例子中的 `virtualType` 定义是 `Magento\Framework\Message\Session\Storage`，它继承自 `Magento\Framework\Session\Storage`
    并覆盖了 `namespace` 参数到 `message` 字符串值。在 `virtualType` 中，`name` 属性定义了虚拟类型的全局唯一名称，而
    `type` 属性与虚拟类型基于的实际 PHP 类相匹配。
- en: Now, if you look at the `type` definition, you will see that its `storage` argument
    is set to the object of `Magento\Framework\Message\Session\Storage`. The `Session\Storage`
    file is actually a virtual type. This allows `Message\Session` to be customized
    without affecting other classes that also declare a dependency on `Session\Storage`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你查看 `type` 定义，你会看到其 `storage` 参数被设置为 `Magento\Framework\Message\Session\Storage`
    对象。`Session\Storage` 文件实际上是一个虚拟类型。这允许 `Message\Session` 被定制，而不会影响也声明了对 `Session\Storage`
    依赖的其他类。
- en: Virtual types allow us to effectively change the behavior of a dependency when
    it is used in a specific class.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟类型允许我们在特定类中使用依赖项时有效地改变其行为。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we had a look at the object manager and dependency injection,
    which are the foundations of Magento object management. We learned the meaning
    of the `type` and `preference` elements of dependency injection and how to use
    them to manipulate class construct parameters. Though there is much more to be
    said about dependency injection in Magento, the presented information should suffice
    and help us with other aspects of Magento.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了对象管理器和依赖注入，它们是Magento对象管理的基础。我们学习了依赖注入中`type`和`preference`元素的含义以及如何使用它们来操作类构造参数。尽管关于Magento中的依赖注入还有很多可以说的，但所提供的信息应该足够，并帮助我们了解Magento的其他方面。
- en: In the next chapter, we will extend our journey into `di.xml` via the concept
    of plugins.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过插件的概念扩展我们的旅程到`di.xml`。
