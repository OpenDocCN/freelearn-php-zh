- en: Chapter 8. Creating a Simple Store
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 创建简单商店
- en: '*Over the last few years e-commerce has evolved from just online advertisements
    to providing fully functional shopping experiences online. More and more products
    and services are being made available online everyday through the use of various
    online payment systems. The role of e-commerce applications and payment gateways
    has become crucial in this environment.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在过去的几年里，电子商务已经从仅仅在线广告发展到提供完整的在线购物体验。每天通过使用各种在线支付系统，越来越多的产品和服务在网上提供。电子商务应用和支付网关的作用在这个环境中变得至关重要。*'
- en: 'In this chapter we will be building a simple online store to demonstrate the
    process involved in setting up a simple shopping cart. We will be using PayPal
    Express Checkout as our payment processer during this example. Some of the key
    topics that will be covered in this chapter include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个简单的在线商店来展示设置简单购物车所涉及的过程。在本示例中，我们将使用PayPal Express Checkout作为我们的支付处理器。本章将涵盖的一些关键主题包括：
- en: Setting up a shopping cart
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置购物车
- en: Creating a online store administration interface
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建在线商店管理界面
- en: Configuring Zend Framework 2.0 for PayPal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为PayPal配置Zend Framework 2.0
- en: An introduction to PayPal Express Checkout
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PayPal Express Checkout简介
- en: The implementation of PayPal Express Checkout
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PayPal Express Checkout的实现
- en: Shopping cart
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车
- en: One of the first things that have to be designed while setting up an online
    store is the shopping cart. The shopping cart should ideally allow the end user
    to choose and add multiple products to the cart and be able to check out from
    the website.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置在线商店时，必须设计的第一件事之一就是购物车。购物车理想情况下应允许最终用户选择并添加多个产品到购物车，并能够从网站上结账。
- en: 'The checkout process is outlined as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 结账过程概述如下：
- en: Customer visits the product listing page.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户访问产品列表页面。
- en: Customer selects a product; he/she is taken to the product detail page.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户选择一个产品；他/她将被带到产品详情页面。
- en: Customer then chooses to purchase the product; customer is expected to add the
    desired quantity to the cart.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，客户选择购买该产品；客户预计将所需数量添加到购物车。
- en: Customer is redirected to the shopping cart page; here the customer may make
    any changes to the order if necessary.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户将被重定向到购物车页面；在这里，如果需要，客户可以对订单进行任何更改。
- en: Customer chooses the mode of payment and enters the payment information.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户选择支付方式并输入支付信息。
- en: If successful, the customer is presented with an option to update the shipping
    details.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果成功，客户将看到一个选项来更新运输详情。
- en: Customer then confirms the order.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，客户确认订单。
- en: The order is received at the retailer; the retailer then goes ahead and processes
    the order.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订单被零售商接收；然后零售商继续处理订单。
- en: 'So let''s get started and create our store front; our next step will be to
    design a table structure which will support this store. For this we create the
    following two tables:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们开始创建我们的商店前台；我们的下一步将是设计一个支持此商店的表结构。为此，我们创建了以下两个表：
- en: '`store_products`: This table will store all product related information'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`store_products`：这个表将存储所有与产品相关的信息'
- en: '`store_orders`: This table will store all order-related information'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`store_orders`：这个表将存储所有与订单相关的信息'
- en: Time for action – creating a store front
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建商店前台
- en: 'For simplicity, we will shorten the `Checkout` process by skipping some steps.
    We have modified the process so that we can only have one product per order; we
    will also skip the updating of shipping details and the customer order confirmation
    steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们将通过跳过一些步骤来缩短`Checkout`过程。我们已修改过程，以便每个订单只能有一个产品；我们还将跳过更新运输详情和客户订单确认步骤：
- en: 'Create tables to hold the products and orders data:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建存储产品和订单数据的表：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create entities for `StoreOrder` and `StoreProduct`, and also create necessary
    table gateway objects for data access.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`StoreOrder`和`StoreProduct`创建实体，并创建必要的数据访问表网关对象。
- en: Create a `StoreController` controller, which will be used as our shopping cart.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`StoreController`控制器，它将被用作我们的购物车。
- en: '`StoreController` will support the following actions:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`StoreController`将支持以下操作：'
- en: '`indexAction()`: This action will list all products in the website'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexAction()`：这个操作将列出网站上的所有产品'
- en: '`productDetailAction()`: This will display the details of a specific product;
    this will also allow the customer to add a product to the cart'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`productDetailAction()`：这将显示特定产品的详细信息；这还将允许客户将产品添加到购物车'
- en: '`shoppingCartAction()`: This action is used to render the shopping cart before
    leaving for the payment processing page'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shoppingCartAction()`: 此操作用于在离开支付处理页面之前渲染购物车'
- en: '`paypalExpressCheckoutAction()`: This action will redirect the user to the
    PayPal Express Checkout page'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paypalExpressCheckoutAction()`: 此操作将用户重定向到 PayPal Express Checkout 页面'
- en: '`paymentConfirmAction()`: This action will handle the redirection from PayPal
    Express Checkout back to the shopping cart upon successful payment'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paymentConfirmAction()`: 此操作将在支付成功时处理从 PayPal Express Checkout 重定向回购物车的操作'
- en: '`paymentCancelAction()`: This action will handle the redirection from PayPal
    Express Checkout back to the shopping cart upon failed payment'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paymentCancelAction()`: 此操作将在支付失败时处理从 PayPal Express Checkout 重定向回购物车的操作'
- en: Create the necessary views to display the content of the shopping cart.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建必要的视图以显示购物车的内容。
- en: Add the necessary methods to `StoreOrder` to calculate the order total upon
    adding items to the orders.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `StoreOrder` 添加必要的函数以在向订单添加项目时计算订单总额。
- en: 'The final user interface should look like the following screenshot. The product
    listing page lists all products in the website/category; in this case, the two
    test products are listed in the following screenshot:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终用户界面应如下截图所示。产品列表页面列出了网站/类别的所有产品；在这种情况下，两个测试产品如下截图所示：
- en: '![Time for action – creating a store front](img/1929OS_08_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间 – 创建商店前台](img/1929OS_08_01.jpg)'
- en: 'The product detail page allows users to view details of a product, and also
    add the specified quantity to the shopping cart:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 产品详情页面允许用户查看产品的详细信息，并将指定数量的产品添加到购物车中：
- en: '![Time for action – creating a store front](img/1929OS_08_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间 – 创建商店前台](img/1929OS_08_02.jpg)'
- en: 'The **Shopping Cart** page lists all products that are added to the cart along
    with their unit price, quantity, and subtotal:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**购物车**页面列出了添加到购物车中的所有产品，包括它们的单价、数量和总计：'
- en: '![Time for action – creating a store front](img/1929OS_08_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间 – 创建商店前台](img/1929OS_08_03.jpg)'
- en: '*What just happened?*'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have created a shopping cart interface for our new store; we will be modifying
    this interface further in order to add support for the payment processor. But
    before we get to that stage, let's create a simple store administration interface
    to enable us to manage the store and orders.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的新商店创建了一个购物车界面；我们将进一步修改此界面以添加对支付处理器的支持。但在达到这一阶段之前，让我们创建一个简单的商店管理界面，以便我们能够管理商店和订单。
- en: The store administration
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店管理
- en: 'The store administration user interface is used to check the status of orders
    once they are created and also to manage the list of products that are available
    for sale in the store. There are two key aspects for the store administration
    user interface:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 商店管理用户界面用于在创建订单后检查订单状态，以及管理商店中可供销售的产品列表。商店管理用户界面的两个关键方面是：
- en: The administrator should be able to add, remove, and manage products
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员应该能够添加、删除和管理产品
- en: The administrator should be able manage order and change statuses using this
    interface
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员应该能够使用此界面管理订单并更改状态
- en: Time for action – creating the Store Admin interface
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 创建 Store Admin 界面
- en: 'Perform the following steps for creating the `Store Admin` interface:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建 `Store Admin` 界面：
- en: Create a new controller for store administration, and name it `StoreAdminController`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为商店管理创建一个新的控制器，并将其命名为 `StoreAdminController`。
- en: 'This controller will have the following basic actions:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此控制器将具有以下基本操作：
- en: '`indexAction()`: Used for listing all products'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexAction()`: 用于列出所有产品'
- en: '`addProductAction()`: Used for adding a new product'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addProductAction()`: 用于添加新产品'
- en: '`deleteProductAction()`: Used for deleting an existing product'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleteProductAction()`: 用于删除现有产品'
- en: '`listOrdersAction()`: Used for listing all orders'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listOrdersAction()`: 用于列出所有订单'
- en: '`viewOrderAction()`: Used for viewing a specific order'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`viewOrderAction()`: 用于查看特定订单'
- en: '`updateOrderStatusAction()`: Used for updating order status'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateOrderStatusAction()`: 用于更新订单状态'
- en: Create the necessary views, and map the actions accordingly.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建必要的视图，并相应地映射操作。
- en: Open phpMyadmin and create test records in both the `store_products` and `store_orders`
    tables to test the functionality for the administration UI.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 phpMyadmin 并在 `store_products` 和 `store_orders` 表中创建测试记录以测试管理 UI 的功能。
- en: Open your favorite browser, log in to the application, and open the **eStore
    Admin** interface. The interface should look like the following one.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的浏览器，登录到应用程序，并打开 **eStore 管理界面**。界面应如下所示。
- en: 'The **Manage Products** page lets you add, remove, and edit products from the
    administration interface:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**管理产品** 页面允许您从管理界面添加、删除和编辑产品：'
- en: '![Time for action – creating the Store Admin interface](img/1929OS_08_04.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 创建 Store 管理界面](img/1929OS_08_04.jpg)'
- en: 'The orders listing page lists all orders placed in the store and allows you
    to view orders and modify their statuses:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 订单列表页面列出了店铺中放置的所有订单，并允许您查看订单和修改其状态：
- en: '![Time for action – creating the Store Admin interface](img/1929OS_08_05.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 创建 Store 管理界面](img/1929OS_08_05.jpg)'
- en: 'A screenshot of the **Order Information** page listing the order information
    and providing options to change their status is shown as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示是显示订单信息和提供更改其状态选项的 **订单信息** 页面的截图：
- en: '![Time for action – creating the Store Admin interface](img/1929OS_08_06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 创建 Store 管理界面](img/1929OS_08_06.jpg)'
- en: '*What just happened?*'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: The store administration UI is now ready, and our next step is to set up PayPal
    Express checkout and to integrate it with our store, which will enable our user
    to make payments using PayPal. Before we move on to the next section, the following
    section gives you a simple task to try out.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 店铺管理用户界面现在已准备就绪，我们的下一步是设置 PayPal Express 结账并集成到我们的店铺中，这将使用户能够使用 PayPal 进行支付。在我们继续下一节之前，下面的部分将提供一个简单的任务供您尝试。
- en: Have a go hero
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: Now that you know how to integrate search into a Zend Framework 2.0 application,
    try to add free text search functionality for the **Manage Products** section
    of our store application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何将搜索集成到 Zend Framework 2.0 应用程序中，尝试为我们店铺应用程序的 **管理产品** 部分添加免费文本搜索功能。
- en: Payments with PayPal
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PayPal 进行支付
- en: 'PayPal is the most commonly used payment processor across the world; one of
    the key contributors to PayPal''s success is its easy-to-use API and exhaustive
    documentation that supports this payment gateway. For any new merchant, PayPal
    offers a wide range of options for setting up their payment processor, the most
    important being the types of integrations that are offered. PayPal offers various
    products under Payment Processing; some of them include:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: PayPal 是全球最常用的支付处理器；PayPal 成功的关键贡献者之一是其易于使用的 API 和详尽的文档，这些文档支持此支付网关。对于任何新商家，PayPal
    提供了一系列设置支付处理器的选项，其中最重要的是提供的集成类型。PayPal 在支付处理下提供各种产品；其中一些包括：
- en: Express Checkout
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速结账
- en: PayPal Payments Standards (Website Payments Standards)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PayPal Payments Standards（网站支付标准）
- en: PayPal Payments Pro (Website Payments Pro)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PayPal Payments Pro（网站支付 Pro）
- en: We will be working with Express Checkout in this chapter, since it is the most
    basic implementation method of PayPal.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中处理快速结账，因为它是最基本的 PayPal 实现方法。
- en: PayPal and Zend Framework 2.0
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PayPal 和 Zend Framework 2.0
- en: At the time of writing this book, there were no native packages that were offered
    by Zend Framework which supported PayPal integration. There are always third-party
    options that support this integration. In this example, we have made use of one
    such third party package called `SpeckPaypal`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，没有由 Zend Framework 提供的原生包支持 PayPal 集成。始终有支持此集成的第三方选项。在这个例子中，我们使用了这样一个第三方包，名为
    `SpeckPaypal`。
- en: Time for action – setting up PayPal
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 设置 PayPal
- en: 'Perform the following steps for setting up PayPal:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以设置 PayPal：
- en: Open [https://packagist.org/](https://packagist.org/), search for `speckpaypal`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 [https://packagist.org/](https://packagist.org/)，搜索 `speckpaypal`。
- en: Get the repository details.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取仓库详细信息。
- en: 'Modify the application''s Composer configuration file to include the `speckpaypal`
    repository:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改应用程序的 Composer 配置文件以包含 `speckpaypal` 仓库：
- en: '[PRE1]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the project dependencies using the Composer update:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Composer 更新来更新项目依赖项：
- en: '[PRE2]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we will need API credentials for accessing PayPal Express Checkout. This
    can be accessed by logging into [https://developer.paypal.com](https://developer.paypal.com)
    with your PayPal credentials.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要 API 凭证来访问 PayPal Express Checkout。这可以通过使用您的 PayPal 凭证登录到 [https://developer.paypal.com](https://developer.paypal.com)
    来访问。
- en: Open **Sandbox Accounts** from **Applications**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **应用程序** 中打开 **沙盒账户**。
- en: Choose the appropriate merchant account and select **API Credentials** in **Profile**.![Time
    for action – setting up PayPal](img/1929OS_08_07.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择合适的商家账户，并在 **配置文件** 中选择 **API 凭证**。[![行动时间 – 设置 PayPal](img/1929OS_08_07.jpg)]
- en: Make a note of the API credentials.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录 API 凭证。
- en: 'Now create a new configuration in the `config` file (`CommunicationApp/module/Users/config/module.config.php`)
    in the module''s configuration file and name the array index `speck-paypal-api`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在模块的配置文件 `config` 文件（`CommunicationApp/module/Users/config/module.config.php`）中创建一个新的配置，并将数组索引命名为
    `speck-paypal-api`：
- en: '[PRE3]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Different PayPal services have different end points. For Express Checkout in
    Sandbox this is `https://api-3t.sandbox.paypal.com/nvp`; if you are switching
    live/production environment, this needs to be changed to `https://api-3t.paypal.com/nvp`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不同的 PayPal 服务有不同的端点。对于沙盒中的 Express Checkout，这是 `https://api-3t.sandbox.paypal.com/nvp`；如果你正在切换到实时/生产环境，则需要将其更改为
    `https://api-3t.paypal.com/nvp`。
- en: '*What just happened?*'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: Now we have configured PayPal and SpeckPaypal in our application, our next step
    is to test receiving payments using PayPal Express Checkout.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们的应用程序中配置了 PayPal 和 SpeckPaypal，我们的下一步是测试使用 PayPal Express Checkout
    接收支付。
- en: PayPal Express Checkout
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PayPal Express Checkout
- en: PayPal Express Checkout allows sellers to receive credit card / PayPal payments
    on their websites by redirecting them to PayPal Express Checkout for secure web
    payment and returning them back to the merchant's website once the transaction
    is completed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: PayPal Express Checkout 允许卖家通过将他们重定向到 PayPal Express Checkout 以进行安全的网络支付，并在交易完成后将他们返回到商家的网站，从而在其网站上接收信用卡/
    PayPal 支付。
- en: 'The workflow is explained as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程解释如下：
- en: Customer on the **Shopping Cart** page chooses to pay by **PayPal Express Checkout**;
    the merchant calls the `SetExpressCheckout` API call and gets the payment token.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **购物车** 页面上，客户选择通过 **PayPal Express Checkout** 进行支付；商家调用 `SetExpressCheckout`
    API 调用并获取支付令牌。
- en: Using the Payment token, the customer is redirected to the PayPal Express Checkout
    login page; here the customer can enter his/her PayPal login information or get
    a new PayPal account.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用支付令牌，客户将被重定向到 PayPal Express Checkout 登录页面；在这里，客户可以输入他的/她的 PayPal 登录信息或获取一个新的
    PayPal 账户。
- en: On the next page, the customer is presented with a **Review** option to review
    the payment information before proceeding to continue the checkout with the merchant.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，客户将看到一个 **审查** 选项，以便在继续与商家结账之前审查支付信息。
- en: Now the customer is redirected back to the merchant page; the merchant then
    calls the `GetExpressCheckoutDetails` API call and gets the customer information.
    The customer reviews the order and confirms the order. The merchant then completes
    the payment request using the `DoExpressCheckoutPayment` API call.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，客户将被重定向回商家页面；商家随后调用 `GetExpressCheckoutDetails` API 调用并获取客户信息。客户查看订单并确认订单。然后商家使用
    `DoExpressCheckoutPayment` API 调用完成支付请求。
- en: The customer is shown the transaction results along with the order summary.![PayPal
    Express Checkout](img/1929OS_08_08.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户将看到交易结果以及订单摘要。[![PayPal Express Checkout](img/1929OS_08_08.jpg)]
- en: PayPal Express Checkout—overview
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PayPal Express Checkout—概述
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**More about PayPal Express Checkout**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多关于 PayPal Express Checkout**'
- en: You can read more about PayPal Express Checkout at the PayPal website [https://www.paypal.com/webapps/mpp/express-checkout](https://www.paypal.com/webapps/mpp/express-checkout).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 PayPal 网站上了解更多关于 PayPal Express Checkout 的信息 [https://www.paypal.com/webapps/mpp/express-checkout](https://www.paypal.com/webapps/mpp/express-checkout).
- en: 'Developer documentation on PayPal Express Checkout is available at:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: PayPal Express Checkout 的开发者文档可在以下位置找到：
- en: '[https://developer.paypal.com/webapps/developer/docs/classic/express-checkout/integration-guide/ECGettingStarted/](https://developer.paypal.com/webapps/developer/docs/classic/express-checkout/integration-guide/ECGettingStarted/).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.paypal.com/webapps/developer/docs/classic/express-checkout/integration-guide/ECGettingStarted/](https://developer.paypal.com/webapps/developer/docs/classic/express-checkout/integration-guide/ECGettingStarted/).'
- en: Time for action – accepting payments using PayPal
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 使用 PayPal 接受支付
- en: 'Preform the following steps for accepting payments using PayPal:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PayPal 接受支付的操作步骤如下：
- en: Now add a button on the **Shopping Cart** page (optionally with Checkout by
    PayPal Image). This button should link to the `paypalExpressCheckoutAction()`
    function.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在 **购物车** 页面上添加一个按钮（可选地带有 PayPal 结账图片）。此按钮应链接到 `paypalExpressCheckoutAction()`
    函数。
- en: 'Add a method in the store controller which will be used to generate the PayPal
    request:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在商店控制器中添加一个方法，该方法将用于生成 PayPal 请求：
- en: '[PRE4]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Modify the `paypalExpressCheckoutAction()` function to send the order information
    to PayPal and redirect the user to PayPal Express Checkout:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `paypalExpressCheckoutAction()` 函数以将订单信息发送到 PayPal 并将用户重定向到 PayPal Express
    Checkout：
- en: '[PRE5]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a method to handle successful payment from Express Checkout—`paymentConfirmAction()`;
    this method will capture the payment information from PayPal, confirm the payment,
    and then update the order status in our system using the code as shown in the
    following list:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个处理 Express Checkout 中成功支付的方法——`paymentConfirmAction()`；此方法将从 PayPal 捕获支付信息，确认支付，然后使用以下代码在我们的系统中更新订单状态：
- en: 'Capture payment information from PayPal:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 PayPal 捕获支付信息：
- en: '[PRE6]'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Confirm order with PayPal:'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PayPal 确认订单：
- en: '[PRE7]'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save order with updated shipping/billing information:'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存带有更新后的发货/账单信息的订单：
- en: '[PRE8]'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally add a method to handle failed payment from Express Checkout—`paymentCancelAction()`:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后添加一个处理 Express Checkout 中失败支付的方法——`paymentCancelAction()`：
- en: '[PRE9]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now log in to [https://developer.paypal.com](https://developer.paypal.com) again.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次登录到 [https://developer.paypal.com](https://developer.paypal.com)。
- en: Generate a new sandbox account of type `PERSONAL`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个新的个人类型沙箱账户：`PERSONAL`。
- en: Now access the store and try to purchase using the newly created Sandbox account.
    The final store should look like the following screenshot:![Time for action –
    accepting payments using PayPal](img/1929OS_08_09.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在访问商店并尝试使用新创建的沙箱账户进行购买。最终的商店应如下截图所示：![行动时间 – 使用 PayPal 接受支付](img/1929OS_08_09.jpg)
- en: 'After choosing the checkout from the **Shopping Cart** page, you will be redirected
    to the **Pay with my** **PayPal account** login page as shown in the following
    screenshot:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在从**购物车**页面选择结账后，您将被重定向到以下截图所示的**使用我的 PayPal 账户**登录页面：
- en: '![Time for action – accepting payments using PayPal](img/1929OS_08_10.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 使用 PayPal 接受支付](img/1929OS_08_10.jpg)'
- en: 'A screenshot of the PayPal Express Checkout''s order reviewing page is shown
    in the following screenshot; this page is used to review the payment that is being
    made to the merchant from the customer''s PayPal account:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PayPal Express Checkout 的订单查看页面截图如下；此页面用于查看从客户的 PayPal 账户向商户进行的支付：
- en: '![Time for action – accepting payments using PayPal](img/1929OS_08_11.jpg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 使用 PayPal 接受支付](img/1929OS_08_11.jpg)'
- en: 'Once the order is successfully placed, the user is redirected to the order
    confirmation page as shown in the following screenshot:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦订单成功提交，用户将被重定向到以下截图所示的订单确认页面：
- en: '![Time for action – accepting payments using PayPal](img/1929OS_08_12.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 使用 PayPal 接受支付](img/1929OS_08_12.jpg)'
- en: Now log in to the Sandbox site for the merchant account to see if the payments
    are credited:![Time for action – accepting payments using PayPal](img/1929OS_08_13.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在登录到沙箱网站以查看商户账户的支付是否已入账：![行动时间 – 使用 PayPal 接受支付](img/1929OS_08_13.jpg)
- en: '*What just happened?*'
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We just used PayPal Express Checkout to receive payments in our web application
    and complete the simple store application. As you can see, the PayPal API makes
    it relatively easy to set up the payment gateway.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用 PayPal Express Checkout 在我们的网络应用程序中接收支付并完成简单的商店应用程序。如您所见，PayPal API 使得设置支付网关相对容易。
- en: Have a go hero
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: In your next task, make use of the `DoDirectPayment` API call to directly make
    a payment on the website without having to redirect the user to the PayPal website
    and back again.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的下一个任务中，使用 `DoDirectPayment` API 调用来直接在网站上支付，而无需将用户重定向到 PayPal 网站，然后再返回：
- en: Pop quiz – creating a simple store
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答 – 创建一个简单的商店
- en: Q1\. Which of the following methods is used to send the initial payment information
    for PayPal redirection?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 以下哪种方法用于发送 PayPal 重定向的初始支付信息？
- en: '`RedirectExpressCheckout`'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RedirectExpressCheckout`'
- en: '`SetExpressCheckout`'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SetExpressCheckout`'
- en: '`GetExpressCheckoutDetails`'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GetExpressCheckoutDetails`'
- en: '`DoExpressCheckoutPayment`'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DoExpressCheckoutPayment`'
- en: Q2\. Which of the following fields is needed for requesting payment information
    from PayPal?
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 以下哪个字段是请求 PayPal 支付信息所必需的？
- en: '`token`'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`token`'
- en: '`payerId`'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`payerId`'
- en: '`paymentDetails`'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`paymentDetails`'
- en: '`orderID`'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`orderID`'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have learned the basics of setting up a simple store online
    and trying to receive payments using PayPal. As you can see from the previous
    example, Zend Framework's use of modules simplifies application development by
    giving developers the ability to download and install external third-party modules
    based on their integration needs. In the next chapter, we will be working on HTML5
    development with Zend Framework 2.0.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了在线设置简单商店和尝试使用PayPal接收付款的基础知识。正如您从前面的示例中可以看到，Zend框架通过允许开发者根据他们的集成需求下载和安装外部第三方模块，简化了应用程序的开发。在下一章中，我们将使用Zend
    Framework 2.0进行HTML5开发。
