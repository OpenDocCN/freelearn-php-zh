- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Setting Up Our Development Environment Using Docker Containers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker容器设置我们的开发环境
- en: “*It works on my machine*” is a phrase you’ve probably heard as a software developer;
    you might even have said it yourself as well. I’m sure I did! And to be fair,
    my colleague Ben Hansen, who was our test automation engineer at that time, also
    pointed out that he’s also allowed to say, “*It doesn’t work on my machine*” in
    response to us developers. As a developer myself, I’ve had my fair share of frustrating
    experiences caused by running the same PHP application across different environments
    with inconsistent server setups. There were times in my career when I struggled
    to replicate some production environment bugs from my local development machine.
    We would find out that the PHP application we were developing would be deployed
    in staging or production on a different operating system with various libraries
    installed, which were out of sync with the developers’ development environment
    setups. It was a nightmare!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “*在我的机器上它运行正常*”这句话你可能作为软件开发者已经听过了；你可能甚至自己也说过。我确信我也有过！公平地说，我的同事本·汉森，当时是我们的测试自动化工程师，也指出他也可以对我们开发者说，“*在我的机器上它不运行正常*”。作为一名开发者，我自己也经历过由于在不同环境中运行相同的PHP应用程序，服务器设置不一致而导致的许多令人沮丧的经历。在我的职业生涯中，我有时很难在我的本地开发机器上复制一些生产环境中的错误。我们会发现，我们正在开发的PHP应用程序将被部署在不同的操作系统上，安装了各种库，这些库与开发者的开发环境设置不同步。这是一场噩梦！
- en: When we develop PHP applications, we need to ensure that the applications we
    develop behave consistently across different deployment environments such as staging
    or production. Also, when a new developer joins your team, it’s great if they
    can set up their local development environments on their development machines
    easily and quickly. **Containers** can help solve these challenges.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开发PHP应用程序时，我们需要确保我们开发的程序在不同部署环境（如预发布或生产环境）中表现一致。此外，当一位新开发者加入您的团队时，如果他们能够轻松快速地在他们的开发机器上设置本地开发环境，那就太好了。**容器**可以帮助解决这些挑战。
- en: In our example project, we will need a development environment to run our PHP
    application consistently wherever we deploy it. If our PHP tests and applications
    pass and run properly from our local machines, they should also pass and run correctly
    when we deploy them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例项目中，我们需要一个开发环境来一致地运行我们的PHP应用程序，无论我们在哪里部署它。如果我们的PHP测试和应用程序在我们的本地机器上通过并正确运行，那么当我们部署它们时，它们也应该通过并正确运行。
- en: We will go through the concept of containers and define what they are. We will
    learn how to create a Docker image and run Docker containers. Docker containers
    will help us easily package our application, making it easy to run our application
    in other server environments more consistently.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍容器概念，并定义它们是什么。我们将学习如何创建Docker镜像并运行Docker容器。Docker容器将帮助我们轻松打包我们的应用程序，使其在其他服务器环境中更一致地运行。
- en: 'In this chapter, we will define and cover the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将定义并涵盖以下内容：
- en: What is a container?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: Setting up our PHP development container
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置我们的PHP开发容器
- en: Running Docker containers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Docker容器
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to have access to *Bash*. If you are using a Mac or
    Linux OS, you can just use *terminal*. If you’re on a Windows OS, you will need
    to install a third-party Bash program.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您能够访问*Bash*。如果您使用的是Mac或Linux操作系统，您可以直接使用*终端*。如果您使用的是Windows操作系统，您将需要安装第三方Bash程序。
- en: For the instructions defined in this chapter, you can experiment with the complete
    Docker setup found in [*Chapter 3*](B18318_03.xhtml#_idTextAnchor039) Git repository
    at [https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%203](https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%203).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中定义的说明，您可以在[*第3章*](B18318_03.xhtml#_idTextAnchor039) Git仓库中找到的完整Docker设置进行实验，该仓库位于[https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%203](https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%203)。
- en: Quick Setup
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速设置
- en: 'To run the complete development setup with Docker containers for this chapter,
    in a macOS development machine, follow the instructions in this chapter to install
    Docker Desktop, and then simply run the following command from your terminal:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Docker容器运行本章的完整开发设置，在macOS开发机器上，请遵循本章中的说明安装Docker Desktop，然后只需从您的终端运行以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is a container?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: A container is a packaging solution that will contain all the software dependencies
    that your application needs to run correctly. Different container platforms are
    available, but we will be using Docker in this book. We will be using Docker to
    build and run our containers for our example project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一种打包解决方案，它将包含应用程序运行正确所需的全部软件依赖项。不同的容器平台可供选择，但在这本书中我们将使用 Docker。我们将使用 Docker
    为我们的示例项目构建和运行容器。
- en: Docker is an open source containerization solution that will enable us to package
    our PHP solution and run it on different development machines and deployment environments,
    including our **continuous integration (CI) solution**, which will be discussed
    more in [*Chapter 9*](B18318_09.xhtml#_idTextAnchor138), *Continuous Integration*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一种开源的容器化解决方案，它将使我们能够打包我们的 PHP 解决方案，并在不同的开发机器和部署环境中运行，包括我们的 **持续集成 (CI)
    解决方案**，这将在 [*第 9 章*](B18318_09.xhtml#_idTextAnchor138) *持续集成* 中进一步讨论。
- en: Now that we have defined what containers are and the containerization solution
    we will be using for our project, let’s start setting up our development containers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了容器是什么以及我们将为我们的项目使用的容器化解决方案，让我们开始设置我们的开发容器。
- en: Setting up our PHP development container
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的 PHP 开发容器
- en: 'We will need a development environment for our PHP application. We will be
    separating our development environment structure into two main parts: the Docker
    container (server) and the PHP application.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个 PHP 应用程序的开发环境。我们将把我们的开发环境结构分为两个主要部分：Docker 容器（服务器）和 PHP 应用程序。
- en: 'The `docker` directory will contain the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker` 目录将包含以下内容：'
- en: '`Dockerfile`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dockerfile`'
- en: '`docker-compose.yml`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose.yml`'
- en: Server configurations
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器配置
- en: 'The `codebase` directory will serve as the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`codebase` 目录将作为以下用途：'
- en: The root directory for our PHP application
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 应用程序的根目录
- en: Vendor directory for composer packages
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: composer 包的供应商目录
- en: 'Now, let us set up our PHP development container:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置我们的 PHP 开发容器：
- en: 'Create the following directory structure in your machine:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的机器上创建以下目录结构：
- en: '![Figure 3.1 – Base tree](img/Figure_3.2_B18318.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 基础树](img/Figure_3.2_B18318.jpg)'
- en: Figure 3.1 – Base tree
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 基础树
- en: 'Run the following commands:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Install **Docker Desktop**. Before we create the required Docker files, we will
    need to download and install Docker Desktop.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 **Docker Desktop**。在我们创建所需的 Docker 文件之前，我们需要下载并安装 Docker Desktop。
- en: For **macOS** users, Docker can be downloaded from [https://docs.docker.com/desktop/mac/install/](https://docs.docker.com/desktop/mac/install/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **macOS** 用户，可以从 [https://docs.docker.com/desktop/mac/install/](https://docs.docker.com/desktop/mac/install/)
    下载 Docker。
- en: For **Windows** users, the download link is https://docs.docker.com/desktop/windows/install/.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **Windows** 用户，下载链接是 https://docs.docker.com/desktop/windows/install/。
- en: Once Docker Desktop has been installed on your macOS machine, we can now organize
    our development directories.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Docker Desktop 已安装在您的 macOS 机器上，我们现在可以组织我们的开发目录。
- en: 'We will need to create a `Dockerfile` within the `phptdd/docker/` directory.
    Create a `phptdd/docker/Dockerfile` file, like so:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在 `phptdd/docker/` 目录内创建一个 `Dockerfile`。创建一个 `phptdd/docker/Dockerfile`
    文件，如下所示：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We declare the base Docker image in the first line using the `FROM` keyword.
    Every `Dockerfile` must start with this keyword. The second line is an instruction
    to run a command on top of the current image. Since we will also need a database
    for our project, we can install the **MySQL** extensions we need.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `FROM` 关键字在第一行声明基本 Docker 镜像。每个 `Dockerfile` 都必须以这个关键字开始。第二行是运行在当前镜像之上的指令。由于我们还需要为我们的项目安装数据库，我们可以安装所需的
    **MySQL** 扩展。
- en: 'We will need more than just PHP for our example project: we will need a database,
    a web server, and other tools. Therefore, we need a way to run and organize multiple
    containers. Let’s see how to do that next.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例项目，我们需要的不仅仅是 PHP：我们还需要数据库、Web 服务器和其他工具。因此，我们需要一种方式来运行和组织多个容器。让我们看看如何做到这一点。
- en: Creating multiple containers
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建多个容器
- en: To run multiple containers, let’s use the Compose tool that is pre-installed
    when you install Docker Desktop.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行多个容器，我们可以使用在安装 Docker Desktop 时预先安装的 Compose 工具。
- en: 'Create a `phptdd/docker/docker-compose.yml` file, like so:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `phptdd/docker/docker-compose.yml` 文件，如下所示：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our `docker-compose.yml` file, we have declared and configured three main
    containers, which are all accessible through different ports:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `docker-compose.yml` 文件中，我们声明并配置了三个主要容器，它们都可以通过不同的端口访问：
- en: '`server-web`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server-web`'
- en: '`server-mysql`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server-mysql`'
- en: '`app-phpmyadmin`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app-phpmyadmin`'
- en: We were able to install Docker Desktop and create the required `Dockerfile`
    and `docker-compose.yml` files that contain the template to build our containers.
    Let’s try running all the containers and make sure that they are configured correctly
    and can communicate with each other.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够安装 Docker Desktop 并创建所需的 `Dockerfile` 和 `docker-compose.yml` 文件，其中包含构建我们容器的模板。让我们尝试运行所有容器，并确保它们配置正确且可以相互通信。
- en: Running Docker containers
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Docker 容器
- en: Now that we have the two base Docker files that we need, let’s create an example
    PHP program that we can use to make sure that our containers are working as expected.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了所需的两个基础 Docker 文件，让我们创建一个示例 PHP 程序，以确保我们的容器按预期工作。
- en: 'Create a `phptdd/codebase/index.php` PHP file, like so:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `phptdd/codebase/index.php` PHP 文件，如下所示：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At this stage, we have created three files and have the following directory
    structure:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经创建了三个文件，并具有以下目录结构：
- en: '![Figure 3.2 – Base files](img/Figure_3.3_B18318.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 基础文件](img/Figure_3.3_B18318.jpg)'
- en: Figure 3.2 – Base files
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 基础文件
- en: 'Let’s go through this directory structure:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐层查看这个目录结构：
- en: '`Dockerfile`: The file where we declared which base Docker image to use and
    added instructions to install MySQL extensions'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dockerfile`：声明我们使用哪个基础 Docker 镜像的文件，并添加了安装 MySQL 扩展的指令'
- en: '`docker-compose.yml`: The file where we added configurations for the three
    base containers we want to run to serve as our **Linux Apache MySQL PHP** (**LAMP**)
    stack'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose.yml`：添加了配置的文件，我们希望运行的三个基础容器将作为我们的 **Linux Apache MySQL PHP**
    （**LAMP**）堆栈'
- en: '`index.php`: The test PHP file we created to test if the PHP application was
    able to connect to the MySQL container and show some details about the PHP server'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.php`：我们创建的测试 PHP 文件，用于测试 PHP 应用程序是否能够连接到 MySQL 容器并显示一些关于 PHP 服务器的详细信息'
- en: Before being able to run our containers, we need to build the main image that
    we need to run the containers first.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在能够运行我们的容器之前，我们需要首先构建运行容器所需的主要镜像。
- en: Building a Docker image and running containers
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Docker 镜像和运行容器
- en: 'Run the following command to download the base image and build our Docker image:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以下载基础镜像并构建我们的 Docker 镜像：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It will take a few minutes to run on the first try. The command will pull the
    base image that we have declared inside the `Dockerfile` from the Docker repository,
    and it will also execute the `RUN` command we added in the second line of the
    `Dockerfile`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行可能需要几分钟。该命令将从 Docker 仓库中拉取我们在 `Dockerfile` 内声明的基镜像，并执行我们在 `Dockerfile`
    第二行添加的 `RUN` 命令。
- en: 'Once the build is done, we can run the three containers we have configured
    by using the `docker-compose.yml` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，我们可以使用 `docker-compose.yml` 文件运行我们配置的三个容器：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After running the command, you should see all three containers being created:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，你应该会看到所有三个容器被创建：
- en: '![Figure 3.3 – Containers created](img/Figure_3.4_B18318.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 创建的容器](img/Figure_3.4_B18318.jpg)'
- en: Figure 3.3 – Containers created
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 创建的容器
- en: 'Now, let’s see if the containers are running properly; run the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看容器是否正常运行；运行以下命令：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see the three containers we have created, and the status should
    indicate that they are running:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到我们创建的三个容器，状态应指示它们正在运行：
- en: '![Figure 3.4 – Containers are running](img/Figure_3.5_B18318.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 容器正在运行](img/Figure_3.5_B18318.jpg)'
- en: Figure 3.4 – Containers are running
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 容器正在运行
- en: We can see from the list in *Figure 3**.4* that the containers are running.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从图 3.4 的列表中我们可以看到容器正在运行。
- en: 'Now, let’s try to run the PHP test program we wrote: open a web browser and
    try to access [http://127.0.0.1:8081](http://127.0.0.1:8081). If you check the
    `docker-compose.yml` file, you will see we have declared that we want to route
    port `8081` from your host machine to port `80` of the container. You will also
    be able to see the port routing for running containers using the `docker ps -``a`
    command.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试运行我们编写的 PHP 测试程序：打开一个网页浏览器并尝试访问 [http://127.0.0.1:8081](http://127.0.0.1:8081)。如果你检查
    `docker-compose.yml` 文件，你会看到我们已声明希望将主机机的端口 `8081` 路由到容器的端口 `80`。你还可以使用 `docker
    ps -a` 命令查看运行容器的端口路由。
- en: 'You should see a `server-web` container is connected to the `server-mysql`
    container:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个 `server-web` 容器连接到 `server-mysql` 容器：
- en: '![Figure 3.5 – Test script: successful PHP to MySQL connection and PHP info](img/Figure_3.6_B18318.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – 测试脚本：成功的 PHP 到 MySQL 连接和 PHP 信息](img/Figure_3.6_B18318.jpg)'
- en: 'Figure 3.5 – Test script: successful PHP to MySQL connection and PHP info'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 测试脚本：成功的 PHP 到 MySQL 连接和 PHP 信息
- en: 'We have also configured the third container to serve our `phpMyAdmin` application;
    this is entirely optional. Using your web browser, go to `http://127.0.0.1:3333`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还配置了第三个容器来为我们提供 `phpMyAdmin` 应用程序；这完全是可选的。使用您的网络浏览器，访问 `http://127.0.0.1:3333`：
- en: '![Figure 3.6 – phpMyAdmin screen](img/Figure_3.7_B18318.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – phpMyAdmin 屏幕](img/Figure_3.7_B18318.jpg)'
- en: Figure 3.6 – phpMyAdmin screen
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – phpMyAdmin 屏幕
- en: You should now see the **phpMyAdmin** main dashboard, with the default databases
    listed in the left column.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能看到 **phpMyAdmin** 的主仪表板，默认数据库列在左侧列中。
- en: This is all looking good. The three containers we have configured are running
    correctly and are able to communicate and link to each other. We now have a basic
    development environment for our PHP application. Next, let’s try to stop the containers.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 目前看起来一切都很顺利。我们配置的三个容器正在正确运行，并且能够相互通信和链接。我们现在已经拥有了一个基本的 PHP 应用程序的开发环境。接下来，让我们尝试停止这些容器。
- en: Stopping containers
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止容器
- en: There are times when you need to stop containers, such as when you want to reload
    new configurations, or if you just want to stop containers that you no longer
    need.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你需要停止容器，比如当你想要重新加载新的配置，或者只是想要停止不再需要的容器。
- en: 'To stop running containers, as well as remove their configurations, run the
    following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止正在运行的容器以及删除它们的配置，请运行以下命令：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, if you try to check the status of the containers by running `docker ps`,
    you will see that our three containers are gone from the list. You can also use
    `docker kill <container_name>` to stop a specific container.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你尝试通过运行 `docker ps` 来检查容器的状态，你会发现我们的三个容器已经从列表中消失了。你也可以使用 `docker kill <container_name>`
    来停止特定的容器。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced Docker and used it to create and run containers.
    Containers are instances of packaged applications. Although we have seen that
    containers are packages and isolated, they can also communicate with each other.
    For instance, our example PHP program is running inside the `server-web` container
    and then connects to the `server-mysql` container that runs our MySQL server.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Docker 并使用它来创建和运行容器。容器是打包应用程序的实例。虽然我们已经看到容器是打包和隔离的，但它们也可以相互通信。例如，我们的示例
    PHP 程序正在 `server-web` 容器中运行，然后连接到运行我们的 MySQL 服务器的 `server-mysql` 容器。
- en: We’ve seen how simple it is to launch containers. We have two PHP containers
    running (`server-web` and `app-phpmyadmin`) and one database container (`server-mysql`),
    and we can run more containers if we need to. We will be using the base containers
    we have created to build our PHP project; we will continue modifying our containers
    and will install more libraries and tools as we go along.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了启动容器是多么简单。我们有两个正在运行的 PHP 容器（`server-web` 和 `app-phpmyadmin`）和一个数据库容器（`server-mysql`），如果需要的话，我们还可以运行更多的容器。我们将使用我们创建的基础容器来构建我们的
    PHP 项目；我们将继续修改我们的容器，并在过程中安装更多的库和工具。
- en: In the next chapter, we will start building our base PHP application. We will
    try to go through the features and reasons why we decided to use PHP in the first
    place. We will be installing the **Laravel framework** to simplify the process
    of writing our solution so that we can focus more on **test-driven development**
    (**TDD**) itself and not on writing tons of bootstrap code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始构建我们的基础 PHP 应用程序。我们将尝试解释为什么我们最初选择使用 PHP 的功能和原因。我们将安装 **Laravel 框架**来简化编写解决方案的过程，这样我们就可以更多地关注
    **测试驱动开发**（**TDD**）本身，而不是编写大量的引导代码。
