- en: Chapter 11. Internationalization and Localization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。国际化与本地化
- en: When developing modern web applications, we often find the need to ensure that
    our language is readable to users who speak and read languages different from
    our own. To help facilitate this, Yii2 provides built-in support for both internationalization
    (i18n) and localization (l10n). **Internationalization** is the process of planning
    and implementing messages and views such that they can be easily adapted into
    other languages. On the other hand, **localization** is the process of adapting
    our applications to a particular language or culture, and including things such
    as the look and feel of our application to match the accepted presentation of
    information to speakers of a given language or users in a given region or market.
    In this chapter, we'll discover how we can use Yii2's built-in features to translate
    and localize our applications into multiple languages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发现代网络应用程序时，我们经常发现需要确保我们的语言对说和读写与我们不同的用户来说是可读的。为了帮助实现这一点，Yii2 提供了对国际化（i18n）和本地化（l10n）的内置支持。**国际化**是指规划和实施消息和视图的过程，以便它们可以轻松地适应其他语言。另一方面，**本地化**是指将我们的应用程序适应特定的语言或文化，包括我们的应用程序的外观和感觉，以符合特定语言或地区或市场的信息接受展示。在本章中，我们将了解如何使用
    Yii2 的内置功能将我们的应用程序翻译和本地化为多种语言。
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: i18n and l10n are numeronyms, not acronyms. Internationalization is abbreviated
    to i18n because it begins with the letter "I", is followed by 18 more characters,
    and ends with the letter "N". Similarly, localization shortens to l10n because
    it starts with the letter "L", has 10 more letters, and then ends with the letter
    "N". These abbreviations simply exist to shorten the word and have no other meaning.
    In this chapter, we'll use both the full and abbreviated versions to refer to
    both words.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: i18n 和 l10n 是数字缩写词，而不是首字母缩略词。国际化简写为 i18n，因为它以字母 "I" 开头，后面跟着 18 个字符，并以字母 "N"
    结尾。同样，本地化简写为 l10n，因为它以字母 "L" 开头，有 10 个额外的字母，然后以字母 "N" 结尾。这些缩写词仅仅是为了缩短单词，没有其他含义。在本章中，我们将使用全称和缩写形式来指代这两个词。
- en: Configuring Yii2 and PHP
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Yii2 和 PHP
- en: Before we can start using Yii2's localization features, we first need to make
    sure the `intl` PHP extension is installed. This extension is used to provide
    Yii2 with the majority of the i18n features, including Yii2's message and date
    formatters. While Yii2 has some built-in fallbacks in case this extension is not
    installed, it is highly recommended that you install it beforehand.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 Yii2 的本地化功能之前，我们首先需要确保 `intl` PHP 扩展已安装。此扩展用于为 Yii2 提供大多数 i18n 功能，包括
    Yii2 的消息和日期格式化器。虽然 Yii2 在此扩展未安装的情况下有一些内置的回退机制，但强烈建议您事先安装它。
- en: The intl extension
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Intl 扩展
- en: 'Many default PHP installations come with the `intl` extension built into the
    PHP package, but many do not. Fortunately, there are several ways to check whether
    the `intl` extension is installed. For those who prefer viewing this information
    in a web browser, simply create a blank PHP file in your webroot containing the
    following and scan the output to check whether the `intl` extension exists and
    is enabled:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多默认的 PHP 安装都包含在 PHP 包中构建的 `intl` 扩展，但许多没有。幸运的是，有几种方法可以检查 `intl` 扩展是否已安装。对于那些更喜欢在网页浏览器中查看这些信息的人来说，只需在您的
    webroot 中创建一个包含以下内容的空白 PHP 文件，并扫描输出以检查 `intl` 扩展是否存在并已启用：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you prefer using the command line, you can run the following command to
    check whether intl is installed with your PHP instance:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用命令行，你可以运行以下命令来检查你的 PHP 实例是否已安装 intl 扩展：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the `intl` extension does not appear in any output, you can either install
    it through your systems package manager (`apt` or `yum` depending upon your OS),
    or you can install it manually. Generally speaking, the extension can be compiled
    and installed manually through the `pecl` command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `intl` 扩展在任何输出中都没有出现，您可以通过您的系统包管理器（根据您的操作系统使用 `apt` 或 `yum`）安装它，或者您可以手动安装它。一般来说，可以通过
    `pecl` 命令手动编译和安装扩展：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you're installing the `intl` extension from the source, you'll need to make
    sure that you have the `intl` library installed, preferably version 49 or higher.
    If your system has an outdated version of the `intl` library, you can download
    and compile a newer version from [http://site.icu-project.org/download](http://site.icu-project.org/download).
    Additionally, the time zone data shipped with your `intl` library may be outdated.
    Ensure that you refer to the `intl` documentation for information on how to update
    your `intl` time zone data at [http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data](http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从源代码安装`intl`扩展，你需要确保你已经安装了`intl`库，最好是49或更高版本。如果你的系统有一个过时的`intl`库版本，你可以从[http://site.icu-project.org/download](http://site.icu-project.org/download)下载并编译一个新版本。此外，随`intl`库提供的时区数据可能已过时。确保你参考`intl`文档以获取有关如何更新你的`intl`时区数据的详细信息，链接为[http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data](http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data)。
- en: 'After the compilation finishes, you can then add the following to your `php.ini`
    configuration file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，你可以在你的`php.ini`配置文件中添加以下内容：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After restarting your web server and PHP process, you should see the `intl`
    extension appear using one of the previously listed commands.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在重启你的Web服务器和PHP进程后，你应该会看到`intl`扩展通过之前列出的其中一个命令出现。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: More information on how to install the `intl` extension can be found on the
    PHP manual page at [https://secure.php.net/manual/en/intl.installation.php](https://secure.php.net/manual/en/intl.installation.php).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何安装`intl`扩展的更多信息可以在PHP手册页面上找到，链接为[https://secure.php.net/manual/en/intl.installation.php](https://secure.php.net/manual/en/intl.installation.php)。
- en: The application language
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序语言
- en: Before we can start using Yii2's translation features, we need to define the
    application our language is written in. Application languages in Yii2 are defined
    by a unique ID consisting of a language ID as defined by the ISO-639 format and
    a region ID defined by the ISO-3166 format. As an example, `en-US` represents
    English as the spoken language in the United States of America.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Yii2的翻译功能之前，我们需要定义应用程序所使用的语言。Yii2中的应用程序语言由一个唯一的ID定义，该ID由ISO-639格式定义的语言ID和一个由ISO-3166格式定义的区域ID组成。例如，`en-US`代表在美国使用的英语。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Details on ISO-639 can be found at [http://www.loc.gov/standards/iso639-2/](http://www.loc.gov/standards/iso639-2/),
    and details on IISO-3166 can be found at [https://www.iso.org/obp/ui/#search](https://www.iso.org/obp/ui/#search).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于ISO-639的详细信息可以在[http://www.loc.gov/standards/iso639-2/](http://www.loc.gov/standards/iso639-2/)找到，关于ISO-3166的详细信息可以在[https://www.iso.org/obp/ui/#search](https://www.iso.org/obp/ui/#search)找到。
- en: 'Yii2 defines two language properties within our configuration file that we
    can define. The first `sourceLanguage` property represents the language or locale
    our application is written in and generally does not change during the request
    life cycle of our application. The second, `language`, represents the language
    or locale that our user is using, and it can be changed by the end user at any
    point in time (typically through the use of a `language` selector widget placed
    somewhere on the page). Combined, these two configuration options allow us to
    inform Yii2 about how it should treat messages we wish to be translated. Within
    our `config/web.php` or `config/console.php` configuration files, these two options
    can be set as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2在我们的配置文件中定义了两个语言属性，我们可以进行定义。第一个`sourceLanguage`属性代表我们的应用程序所使用的语言或区域，通常在应用程序请求生命周期内不会改变。第二个`language`属性代表用户正在使用的语言或区域，用户可以在任何时间点更改它（通常通过在页面上某个位置放置一个`language`选择小部件）。这两个配置选项结合使用，使我们能够通知Yii2如何处理我们希望被翻译的消息。在我们的`config/web.php`或`config/console.php`配置文件中，这两个选项可以设置如下：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: By default, Yii2 will set the `sourceLanguage` property to `en-US`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Yii2会将`sourceLanguage`属性设置为`en-US`。
- en: Programmatically setting the application language
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以编程方式设置应用程序语言
- en: If you're developing a multilingual site, rather than specifying a single default
    language, you may want to allow the user to select their language from a drop-down
    list and change your language programmatically. To do this, simply define the
    `Yii::$app->language` property within your code with the language code of your
    choice.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发一个多语言网站，而不是指定一个默认语言，你可能希望允许用户从下拉列表中选择他们的语言，并通过编程方式更改语言。为此，只需在你的代码中定义`Yii::$app->language`属性，并使用你选择的语言代码即可。
- en: When setting the language property programmatically, you'll typically want to
    store the user's language setting either with their user information or as a session
    variable. Additionally, you'll want to ensure that you apply the language setting
    before Yii2 begins processing your messages. A good place to set this would be
    early in your controller flow, such as in the `init()` method of our controller.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当以编程方式设置语言属性时，你通常会希望将用户的语言设置与其用户信息一起存储，或者作为一个会话变量。此外，你还需要确保在Yii2开始处理你的消息之前应用语言设置。设置此设置的好地方是在你的控制器流程的早期，例如在我们的控制器的`init()`方法中。
- en: Dynamically setting the application language
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态设置应用程序语言
- en: 'In addition to manually setting the application language within our controller,
    we can also use the content negotiator filter (`yii\filters\ContentNegotiator`)
    to determine the user''s language from their `Accept-Language` headers sent by
    their browser. To use the content negotiator filter, we simply need to add `yii\filters\ContentNegotiator`
    to the `bootstrap` section of your `config/web.php` configuration file and specify
    the languages that we want to support automatically:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在控制器中手动设置应用程序语言之外，我们还可以使用内容协商器过滤器（`yii\filters\ContentNegotiator`）从用户浏览器发送的`Accept-Language`头中确定用户的语言。要使用内容协商器过滤器，我们只需将`yii\filters\ContentNegotiator`添加到`config/web.php`配置文件的`bootstrap`部分，并指定我们想要自动支持的语言：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The languages property specifies which languages Yii2 will automatically set
    `Yii::$app->language` to if they are present in the `Accept-Language` headers.
    In the previous example, we only set the language to `en` or `de`. If a language
    other than the ones listed in our application configuration is present in our
    `Accept-Language` headers, we'll default to the language specified in our `sourceLanguage`
    property.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 语言属性指定了当它们出现在`Accept-Language`头中时，Yii2将自动将`Yii::$app->language`设置为哪些语言。在先前的例子中，我们只设置了语言为`en`或`de`。如果我们的`Accept-Language`头中出现的是我们应用程序配置中未列出的语言，我们将默认使用`sourceLanguage`属性中指定的语言。
- en: 'Rather than being set globally, we can also set a content negotiator within
    our controller''s `behaviors()` methods and specify the languages we want to support
    within that controller. This is beneficial when you have a module that may support
    more or different languages than your base application. Within our controllers,
    we can configure `yii\filters\ContentNegotiator` as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了全局设置之外，我们还可以在我们的控制器的`behaviors()`方法中设置内容协商器，并指定我们想要在该控制器中支持的语言。当你有一个可能支持比你的基础应用程序更多或不同语言的模块时，这很有益。在我们的控制器中，我们可以按照以下方式配置`yii\filters\ContentNegotiator`：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This `yii\filters\ContentNegotiator` path can provide more features than just
    setting the application language. For more information on the content negotiation
    filter, ensure that you check out the Yii2 documentation at [http://www.yiiframework.com/doc-2.0/yii-filters-contentnegotiator.html](http://www.yiiframework.com/doc-2.0/yii-filters-contentnegotiator.html).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`yii\filters\ContentNegotiator`路径可以提供比仅设置应用程序语言更多的功能。有关内容协商过滤器的更多信息，请确保查看Yii2文档在[http://www.yiiframework.com/doc-2.0/yii-filters-contentnegotiator.html](http://www.yiiframework.com/doc-2.0/yii-filters-contentnegotiator.html)。
- en: Message translations
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息翻译
- en: Yii2's message translation service translates a given text message from the
    source language to another by looking up the message to be translated in a message
    source file. If a message is found in a source for the target language, that string
    is returned instead of the original message. If the translated text is not found,
    Yii2 will return the original message.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2的消息翻译服务通过在消息源文件中查找要翻译的消息，将给定的文本消息从源语言翻译到另一种语言。如果在目标语言的源中找到了消息，则返回该字符串而不是原始消息。如果找不到翻译文本，Yii2将返回原始消息。
- en: 'The use of Yii2''s message translation service is extremely straightforward.
    The first step toward translating messages in Yii2 is to wrap any and all messages
    you want translated in the `Yii::t()` static method, which can be called as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Yii2的消息翻译服务非常简单。在Yii2中翻译消息的第一步是将任何想要翻译的消息用`Yii::t()`静态方法包装，该方法的调用方式如下：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first parameter indicates the category we want to store our messages in,
    and the second parameter indicates the message we wanted to be translated.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数表示我们想要存储消息的类别，第二个参数表示我们想要翻译的消息。
- en: Message sources
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息源
- en: 'Before Yii2 can translate our messages, however, we first need to define a
    message source that will store our base messages and our translated message files.
    Yii2 provides three distinct message source options:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Yii2可以翻译我们的消息之前，我们首先需要定义一个消息源，该消息源将存储我们的基础消息和翻译后的消息文件。Yii2提供了三种不同的消息源选项：
- en: '`yii\i18n\PhpMessageSource` stores message files in a key value array format'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yii\i18n\PhpMessageSource`以键值数组格式存储消息文件'
- en: '`yii\i18n/DbMessageSource` stores messages in a database table'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yii\i18n\DbMessageSource`将消息存储在数据库表中'
- en: '`yii\i18n\GettextMessageSource` uses GNU Gettext MO or PO files to store translated
    messages'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yii\i18n\GettextMessageSource`使用GNU Gettext MO或PO文件来存储翻译后的消息'
- en: 'The message source we wish to use can be declared in your application configuration
    file within the components section, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望使用的消息源可以在应用程序配置文件中的组件部分声明，如下所示：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the previous code block, the message source is provided by `yii\i18n\PhpMessageSource`.
    The `app*` pattern indicates that all messages that begin with `app` should be
    handled by the specified message source. By default, Yii2 will store messages
    within the `@app/messages` folder and will default the source language to `en-US`;
    however, this behavior can be changed by specifying the `basePath` and `sourceLanguage`
    properties within the category block, respectively, as shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，消息源由`yii\i18n\PhpMessageSource`提供。`app*`模式表示所有以`app`开头的消息都应该由指定的消息源处理。默认情况下，Yii2将在`@app/messages`文件夹中存储消息，并将源语言默认设置为`en-US`；但是，可以通过在类别块中指定`basePath`和`sourceLanguage`属性来更改此行为，如下所示：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Furthermore, Yii2 will create message files with the same name as the category.
    This behavior can be altered by specifying the `fileMap` property within the category
    configuration. Unless otherwise specified with the `fileMap` property, all messages
    will be stored in `@app/messages/<language>/<category>.php`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Yii2将为类别创建与类别同名的消息文件。此行为可以通过在类别配置中指定`fileMap`属性来更改。除非使用`fileMap`属性另行指定，否则所有消息都将存储在`@app/messages/<language>/<category>.php`中。
- en: Default translations
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认翻译
- en: 'Yii2 also allows us to create fallback messages for categories that don''t
    match other translations. This can be set by declaring a `*` category within our
    configuration file, as shown in the following example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2还允许我们为不匹配其他翻译的类别创建回退消息。这可以通过在配置文件中声明一个`*`类别来实现，如下面的示例所示：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Framework messages
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 框架消息
- en: 'In addition to specifying default messages, we can also modify the built-in
    messages that Yii2 provides natively. By default, Yii2 comes with several translations
    for things such as validation errors and other basic strings, all of which are
    stored within the `yii` category. As there may be times where the default Yii
    messages may not be appropriate or accurate, you can redefine the default message
    by setting the `yii` category within your configuration file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了指定默认消息外，我们还可以修改Yii2原生提供的内置消息。默认情况下，Yii2自带了诸如验证错误和其他基本字符串的几种翻译，所有这些都存储在`yii`类别中。由于默认的Yii消息可能不合适或不准确，您可以通过在配置文件中设置`yii`类别来重新定义默认消息：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Handling missing translations
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理缺失的翻译
- en: 'If a message translation is missing from the source file, Yii2 will display
    the original message content by default. While it''s convenient to ensure that
    our site displays at least something, this behavior can be troublesome to debug
    and identify. Moreover, we may want to perform additional processing in the event
    of missing translations. Fortunately, we can accomplish this by creating an event
    handler for the `missingTranslation` event triggered by `yii\i18n\MessageSource`,
    as shown in the following example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果源文件中缺少消息翻译，Yii2将默认显示原始消息内容。虽然确保我们的网站至少显示一些内容是方便的，但这种行为可能会在调试和识别时造成麻烦。此外，我们可能希望在缺少翻译的情况下执行额外的处理。幸运的是，我们可以通过为`yii\i18n\MessageSource`触发的`missingTranslation`事件创建事件处理器来实现这一点，如下面的示例所示：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As an example, we can write an event handler to output something notable:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以编写一个事件处理器来输出一些值得注意的内容：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The event handler is only processed for messages in that category. If you wish
    to handle the same event for multiple categories, you must assign the event handler
    to each category or, alternatively, assign it to the `*` category.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理器仅处理该类别中的消息。如果您希望处理多个类别的相同事件，必须将事件处理器分配给每个类别，或者，作为替代，将其分配给`*`类别。
- en: Generating message files
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成消息文件
- en: 'After configuring our message sources, we need to generate our message files.
    To do this, we will use the `message` command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置我们的消息源之后，我们需要生成我们的消息文件。为此，我们将使用 `message` 命令：
- en: 'The first step toward generating our messages files is to create a configuration
    file that will define what languages we want to support as well as specific paths
    for where the messages should be stored. This can be done by running the following
    command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成我们的消息文件的第一步是创建一个配置文件，该文件将定义我们想要支持的语言以及消息应存储的特定路径。这可以通过运行以下命令来完成：
- en: '[PRE14]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Depending upon the languages we previously specified in our web or console
    configuration file, this will generate something similar to the following:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据我们在 Web 或控制台配置文件中先前指定的语言，这将生成类似以下的内容：
- en: '[PRE15]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For the most part, the default values provided by Yii2 in this file should be
    sufficient. The only values you should consider changing are the `languages` option
    and the `format` option. Ensure that you set these values appropriately before
    proceeding.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大多数情况下，Yii2 在此文件中提供的默认值应该足够。您应该考虑更改的唯一值是 `languages` 选项和 `format` 选项。在继续之前，请确保您已适当地设置了这些值。
- en: 'After making the required changes to our `messagesconfig.php` file, we can
    generate our message files by running the message command directly, as shown in
    the following example:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对 `messagesconfig.php` 文件进行必要的更改后，我们可以通过直接运行消息命令来生成消息文件，如下例所示：
- en: '[PRE16]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `message` command is an extremely powerful tool that allows us to quickly
    generate messages files that can be handed off to translators. Several options
    exist within the configuration file to make message translation easier. For example,
    the `removedUnused` parameter can be set to `true` to automatically remove strings
    from our message file if they are no longer listed in our source code. Additionally,
    by setting the `overwrite` parameter to `true`, we can run the `message` command
    over and over again to regenerate our translation files.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`message` 命令是一个非常强大的工具，它允许我们快速生成可以交给翻译者的消息文件。配置文件中有几个选项可以使消息翻译更容易。例如，可以将 `removedUnused`
    参数设置为 `true`，以自动从我们的消息文件中删除不再列在我们的源代码中的字符串。此外，通过将 `overwrite` 参数设置为 `true`，我们可以多次运行
    `message` 命令来重新生成我们的翻译文件。'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that the `message` command doesn't support all path aliases. When working
    with a messages file, it's recommended that you use absolute paths. Additionally,
    it's recommended that you store your `messagesconfig.php` file within the `messages/`
    directory of your application.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`message` 命令不支持所有路径别名。当处理消息文件时，建议您使用绝对路径。此外，建议您将 `messagesconfig.php` 文件存储在应用程序的
    `messages/` 目录中。
- en: Message formatting
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息格式化
- en: 'When translating messages, you may want to inject variables or data from your
    models into the message. To do this, we simply need to embed a `placeholder` within
    our message and then define what the `placeholder` is as a parameter within the
    third property of our `Yii::t()` method. For example, if we want to greet our
    user using their name, we can do that as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在翻译消息时，您可能希望将变量或数据从您的模型注入到消息中。为此，我们只需在我们的消息中嵌入一个 `placeholder`，然后在 `Yii::t()`
    方法的第三个属性中定义 `placeholder` 的参数。例如，如果我们想使用用户的名字来问候用户，我们可以这样做：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As an alternative to named parameters, we can also use positional parameters,
    as shown in the following example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为命名参数的替代，我们还可以使用位置参数，如下例所示：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Yii2 also supports parameter formatting for numbers, currency, dates, times,
    original, and plural data. More information can be found on the Yii2 API at [http://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html](http://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html)
    and under the parameter formatting section of the Yii2 guide at [http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#parameter-formatting](http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#parameter-formatting).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 还支持数字、货币、日期、时间、原始和复数数据的参数格式化。更多信息可以在 Yii2 API 的 [http://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html](http://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html)
    以及 Yii2 指南的参数格式化部分 [http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#parameter-formatting](http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#parameter-formatting)
    中找到。
- en: Viewing file translations
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看文件翻译
- en: As an alternative to translating individual messages, we can also translate
    entire view files by saving a translated view file within the subdirectory of
    our `views` folder. As an example, supposing that we had a view script located
    at `views/site/login.php`, we could create a Spanish view file for `es-MX` by
    placing a translated message file in `views/site/es-MX/login.php`. Assuming that
    our target and source language is appropriately set, Yii2 will automatically render
    the translated file instead of the base file when our target language is set to
    `es-MX`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作为翻译单个消息的替代方案，我们还可以通过在`views`文件夹的子目录中保存翻译的视图文件来翻译整个视图文件。例如，假设我们有一个位于`views/site/login.php`的视图脚本，我们可以通过在`views/site/es-MX/login.php`中放置一个翻译的消息文件来创建一个针对`es-MX`的西班牙语视图文件。假设我们的目标语言和源语言设置适当，当目标语言设置为`es-MX`时，Yii2将自动渲染翻译的文件而不是基本文件。
- en: Tip
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that if the source and target language are the same, the original view
    will be rendered regardless of the existence of a translated view file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果源语言和目标语言相同，则无论是否存在翻译视图文件，都将渲染原始视图。
- en: Additionally, the use of view file translations doesn't follow the DRY pattern
    we've emphasized throughout this book. Also, handing off complete HTML files with
    PHP code to your translators may make the translation of these files difficult,
    as the translation industry is based upon string translations rather than strings
    within code translations. To keep your application DRY and avoid any issues that
    may arise during the translation process, it is highly recommended that you use
    the previously mentioned message translation method rather than view file translations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，视图文件翻译的使用并不遵循我们在整本书中强调的DRY模式。此外，将包含PHP代码的完整HTML文件交给翻译者可能会使这些文件的翻译变得困难，因为翻译行业基于字符串翻译，而不是代码中的字符串翻译。为了保持您的应用程序DRY并避免在翻译过程中可能出现的任何问题，强烈建议您使用之前提到的消息翻译方法，而不是视图文件翻译。
- en: Module translations
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块翻译
- en: 'As separate entities, modules should contain their own message files separate
    from your application message files. The recommended way to use messages within
    modules is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作为独立的实体，模块应包含它们自己的消息文件，而不是您的应用程序消息文件。在模块中使用消息的推荐方式如下：
- en: 'Within the `init()` method of your module, define a new translation section
    for your module:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的`init()`方法中，为模块定义一个新的翻译部分：
- en: '[PRE19]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a static method wrapper for `Yii::t()`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Yii::t()`创建一个静态方法包装器：
- en: '[PRE20]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, create a separate message configuration file within the `messages/`
    directory of your module that specifies the translator to be `<ModuleName>::t`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在模块的`messages/`目录中创建一个单独的消息配置文件，指定翻译器为`<ModuleName>::t`：
- en: '[PRE21]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Messages within our module can then be translated by calling `MyModule::t()`.
    Additionally, translated message files can be generated by running the following
    command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模块中的消息可以通过调用`MyModule::t()`进行翻译。此外，可以通过运行以下命令生成翻译的消息文件：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Widget translations
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件翻译
- en: 'In a similar vein, widgets can also have their own message translation files
    by following the same process outlined for modules. Using our `GreetingWidget`
    class we created in [Chapter 5](part0035_split_000.html#11C3M2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 5. Modules, Widgets, and Helpers"), *Modules, Widgets, and Helpers* would
    look as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，小部件也可以通过遵循为模块概述的过程来拥有它们自己的消息翻译文件。使用我们在[第5章](part0035_split_000.html#11C3M2-ad3e09b384df46aea690d9c8897d5fe7
    "第5章。模块、小部件和助手")中创建的`GreetingWidget`类，*模块、小部件和助手*将如下所示：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Consequently, a call to `GreetingWidget::t()` will render a translated message
    that's specific to our widget. Additionally, because widgets support view rendering,
    they can also support completely translated view files by following the same process
    outlined previously.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，调用`GreetingWidget::t()`将渲染针对我们小部件的特定翻译消息。此外，由于小部件支持视图渲染，它们还可以通过遵循之前概述的过程来支持完全翻译的视图文件。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Yii2 provides powerful tools to support internationalization and localization
    within our application. In this chapter, we covered how to generate and store
    message source files, how to generate message and view translations, and how to
    support translations within modules and widgets. In the next chapter, we'll cover
    Yii2's performance feature, as well as explore several built-in security features
    that Yii2 offers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2为我们应用提供了强大的工具来支持国际化与本地化。在本章中，我们介绍了如何生成和存储消息源文件，如何生成消息和视图翻译，以及如何在模块和小部件中支持翻译。在下一章中，我们将介绍Yii2的性能特性，以及探索Yii2提供的几个内置安全特性。
