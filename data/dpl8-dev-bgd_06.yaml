- en: Chapter 6. Enhancing the Content Author's User Experience
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章. 增强内容作者的用户体验
- en: '*In this chapter, we are going to explore the built-in WYSIWYG editor that
    is in the Drupal 8 core, and explore the concepts of CKEditor plugins, Drupal
    Plugin API, and Block API.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们将探讨 Drupal 8 核心中内置的 WYSIWYG 编辑器，并探讨 CKEditor 插件、Drupal 插件 API 和块 API
    的概念。*'
- en: 'In this chapter, we will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习：
- en: How to use the built-in WYSIWYG editor for Drupal
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Drupal 内置的 WYSIWYG 编辑器
- en: How inline editing works and how to get the best out of it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何进行内联编辑以及如何充分利用它
- en: How to make changes and save them through configuration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过配置进行更改并保存它们
- en: How to create a custom block via the new Block API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过新的块 API 创建自定义块
- en: How to include default configuration in our custom block
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在我们的自定义块中包含默认配置
- en: A quick introduction to CKEditor in Drupal 8
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal 8 中 CKEditor 的快速介绍
- en: 'Drupal 8 is finally shipping with a default WYSIWYG editor: CKEditor. CKEditor
    is an open source text editor that aims to bring word processing features to web
    pages. In previous versions of Drupal, several modules tried to fill this gap,
    but their configuration at most times was a bit tricky as they were relying on
    external JavaScript libraries.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 终于发布了默认的 WYSIWYG 编辑器：CKEditor。CKEditor 是一个开源的文本编辑器，旨在将文字处理功能带到网页上。在
    Drupal 的早期版本中，几个模块试图填补这一空白，但它们的配置大多数时候有点棘手，因为它们依赖于外部 JavaScript 库。
- en: 'Bringing CKEditor''s capabilities directly in core, Drupal 8 can provide a
    richer authoring experience to content editors. Users are given a drag-and-drop
    interface to customize available functionality and export configurations to share
    with other systems. Developers are given a unified way of accessing properties,
    adding plugins, and extending the editor''s functionality:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将 CKEditor 的功能直接集成到核心中，Drupal 8 可以为内容编辑器提供更丰富的创作体验。用户可以获得一个拖放界面来自定义可用功能并将配置导出以与其他系统共享。开发者可以获得一种统一的方式来访问属性、添加插件和扩展编辑器的功能：
- en: '![A quick introduction to CKEditor in Drupal 8](img/4659_06_00.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Drupal 8 中 CKEditor 的快速介绍](img/4659_06_00.jpg)'
- en: Configuring CKEditor profiles
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 CKEditor 配置文件
- en: CKEditor profiles would not be much without the ability of being customized
    to the editor's liking. Now we are going to customize the basic HTML profile.
    Log in to your Drupal 8 website and you should see the new admin toolbar.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有根据编辑器的喜好进行自定义的能力，CKEditor 配置文件将不会太多。现在我们将自定义基本 HTML 配置文件。登录到您的 Drupal 8
    网站，您应该会看到新的管理工具栏。
- en: Time for action - adding some buttons to the basic HTML profile
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行时间 - 向基本 HTML 配置添加一些按钮
- en: Click on **Configuration** and then on **Text formats and editors**:![Time for
    action - adding some buttons to the basic HTML profile](img/4659_06_01.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **配置** 然后点击 **文本格式和编辑器**：![执行时间 - 向基本 HTML 配置添加一些按钮](img/4659_06_01.jpg)
- en: On the **Text formats and editor** screen, click on the **Configure** button
    next to the **Basic HTML** profile:![Time for action - adding some buttons to
    the basic HTML profile](img/4659_06_02.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **文本格式和编辑器** 页面上，点击 **基本 HTML** 配置旁边的 **配置** 按钮：![执行时间 - 向基本 HTML 配置添加一些按钮](img/4659_06_02.jpg)
- en: Scroll down to **TOOLBAR CONFIGURATION**, and drag the image icon out of the
    toolbar into the pool of other elements to remove it from the configuration. Note
    that the image and the configuration are no longer part of the page:![Time for
    action - adding some buttons to the basic HTML profile](img/4659_06_03.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到 **工具栏配置**，将图像图标从工具栏拖到其他元素池中，以从配置中移除它。注意，图像和配置不再是页面的一部分：![执行时间 - 向基本 HTML
    配置添加一些按钮](img/4659_06_03.jpg)
- en: Click on **Save configuration** at the very bottom of the page:![Time for action
    - adding some buttons to the basic HTML profile](img/4659_06_04.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部最下方点击 **保存配置**：![执行时间 - 向基本 HTML 配置添加一些按钮](img/4659_06_04.jpg)
- en: That's it! If you visit a content page form and choose the **Basic HTML** profile,
    then the image button will not be there anymore:![Time for action - adding some
    buttons to the basic HTML profile](img/4659_06_05.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！如果你访问内容页面表单并选择 **基本 HTML** 配置，那么图像按钮将不再出现：![执行时间 - 向基本 HTML 配置添加一些按钮](img/4659_06_05.jpg)
- en: '*What just happened?*'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么事？*'
- en: Following this procedure, we customized the existing profiles by removing the
    upload image button from the CKEditor profile.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按照此程序，我们通过从 CKEditor 配置文件中移除上传图像按钮来自定义现有配置文件。
- en: Configurations are exportable in D8 and can be imported to other environments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 配置在 D8 中可导出，并可导入到其他环境中。
- en: Time for action - exporting CKEditor configuration
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 导出CKEditor配置
- en: Click on **Configuration**. Then click on **Configuration** synchronization
    and select the **Export** tab. Click on **Single item**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **配置**。然后点击 **配置同步** 并选择 **导出** 选项卡。点击 **单个项目**。
- en: On the **Configuration type**, choose **Text Editor**, and on **Configuration
    name**, choose **Basic HTML**:![Time for action - exporting CKEditor configuration](img/4659_06_06.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **配置类型** 中选择 **文本编辑器**，在 **配置名称** 中选择 **基本HTML**：![行动时间 - 导出CKEditor配置](img/4659_06_06.jpg)
- en: Copy the configuration and import it into another environment by clicking on
    **Configuration**. Then click on **Configuration synchronization** and select
    the **Import** tab. Click on **Single item**:![Time for action - exporting CKEditor
    configuration](img/4659_06_07.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **配置**。然后点击 **配置同步** 并选择 **导入** 选项卡。点击 **单个项目**：![行动时间 - 导出CKEditor配置](img/4659_06_07.jpg)
- en: '*What just happened?*'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: You have configured an existing profile, removed some fields, and learned how
    to export that configuration and import it into another environment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您已配置了一个现有配置文件，删除了一些字段，并学习了如何导出该配置并将其导入到另一个环境中。
- en: Adding a new CKEditor profile
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的CKEditor配置文件
- en: Most often, built-in profiles cover a website's needs. The defaults, however,
    do not provide a way for anonymous users to have a smooth editing experience when
    inputting text (for example, comments). To provide that functionality, we need
    to create a new profile and assign it to the anonymous user.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，内置配置文件可以满足网站的需求。然而，默认配置文件不提供匿名用户在输入文本（例如，评论）时获得流畅编辑体验的方法。为了提供该功能，我们需要创建一个新的配置文件并将其分配给匿名用户。
- en: Time for action - creating a text-only control profile for anonymous users
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 为匿名用户创建仅文本的控制配置文件
- en: From the admin toolbar, go to **Configuration** | **Text formats and editors**
    and choose **Add text format**:![Time for action - creating a text-only control
    profile for anonymous users](img/4659_06_08.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从管理员工具栏进入 **配置** | **文本格式和编辑器** 并选择 **添加文本格式**：![行动时间 - 为匿名用户创建仅文本的控制配置文件](img/4659_06_08.jpg)
- en: For the name, enter `Text only controls`. Tick on **Anonymous user** and choose
    **CKEditor** in the **Text editor** drop-down box.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称中输入 `Text only controls`。勾选 **匿名用户** 并在 **文本编辑器** 下拉框中选择 **CKEditor**。
- en: Add the **Underline** button and keep **Bold, Italic and Ordered/Unordered**
    lists.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 **下划线** 按钮，并保留 **粗体、斜体和有序/无序列表**。
- en: 'Enable the following filters:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用以下过滤器：
- en: '**Limit allowed HTML tags and correct faulty HTML**'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制允许的HTML标签并纠正错误的HTML**'
- en: '**Convert line breaks into HTML (i.e. <br> and <p>)**'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将换行符转换为HTML（即<br>和<p>）**'
- en: '**Correct faulty and chopped off HTML**'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纠正错误的和截断的HTML**'
- en: Save the configuration:![Time for action - creating a text-only control profile
    for anonymous users](img/4659_06_09.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存配置：![行动时间 - 为匿名用户创建仅文本的控制配置文件](img/4659_06_09.jpg)
- en: The **Text formats and editors** configuration page should contain the newly
    created format. Move the new format above the **Restricted HTML** format, which
    is an alternative provided by Drupal for anonymous users skipping the editor altogether:![Time
    for action - creating a text-only control profile for anonymous users](img/4659_06_10.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文本格式和编辑器** 配置页面应包含新创建的格式。将新格式移动到 **受限HTML** 格式之上，这是Drupal为匿名用户提供的一个替代方案，即完全跳过编辑器：![行动时间
    - 为匿名用户创建仅文本的控制配置文件](img/4659_06_10.jpg)'
- en: That's it! If you visit a page that allows comments from anonymous users, the
    newly created format will be used to capture those comments:![Time for action
    - creating a text-only control profile for anonymous users](img/4659_06_11.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！如果您访问允许匿名用户发表评论的页面，新创建的格式将用于捕获这些评论：![行动时间 - 为匿名用户创建仅文本的控制配置文件](img/4659_06_11.jpg)
- en: '*What just happened?*'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: You just added a new CKEditor profile that targets anonymous users on your website,
    giving them the ability to input rich text and lists.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚添加了一个新的CKEditor配置文件，针对您网站上的匿名用户，使他们能够输入富文本和列表。
- en: Classic editor and inline editing
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经典编辑器和内联编辑
- en: 'The examples we have seen so far used CKEditor at the backend. This is based
    on an iframe being added to the page, and they do not share the CSS styles as
    they appear on the frontend. You can, however, customize the CSS of the editor
    by including the following in your `.info.yml` theme file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止看到的示例使用了CKEditor作为后端。这是基于在页面中添加iframe，并且它们不共享前端上显示的CSS样式。然而，您可以通过在您的 `.info.yml`
    主题文件中包含以下内容来自定义编辑器的CSS：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: An exciting new possibility in Drupal 8 is the use of inline editing. This is
    used for quick in-place edits and is used without an iframe. Inline editing gives
    editors the ability to quickly edit a piece of content without the need to edit
    the full node. CSS styles are inherited from the theme, leading to a real WYSISYG
    experience.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 中的一个令人兴奋的新功能是使用内联编辑。这用于快速就地编辑，并且不使用 iframe。内联编辑使编辑器能够快速编辑内容的一部分，而无需编辑整个节点。CSS
    样式从主题继承，从而提供真正的 WYSIWYG 体验。
- en: Time for action – using inline editing
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 使用内联编辑
- en: Ensure that the **Quick edit** module is enabled.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已启用 **快速编辑** 模块。
- en: Click on the pencil icon in the top left of the page and select **Quick edit**:![Time
    for action – using inline editing](img/4659_06_12.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面左上角的铅笔图标，并选择 **快速编辑**：![操作时间 – 使用内联编辑](img/4659_06_12.jpg)
- en: The new editor instance opens at the top of the content area, and you can start
    editing text straightaway:![Time for action – using inline editing](img/4659_06_13.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的编辑器实例在内容区域的顶部打开，您可以直接开始编辑文本：![操作时间 – 使用内联编辑](img/4659_06_13.jpg)
- en: That's it! You can now use this instead of visiting the edit form to quickly
    edit things on the fly.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些了！现在您可以使用这个功能，而不是访问编辑表单来快速编辑内容。
- en: Adding widgets to CKEditor
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 CKEditor 添加小部件
- en: CKEditor comes preconfigured with a series of buttons that can be added to a
    profile. As a programmer, you can extend CKEditor and add your own buttons. This
    can happen by adding plugins or widgets. The difference between the two is that
    widgets are plugins that group the behavior of more than one component. An example
    of a widget is an image where the image itself, alternative text, and a caption
    form an item and they can be moved around the WYSIWYG area as one item.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CKEditor 默认配置了一系列可以添加到配置文件中的按钮。作为程序员，您可以扩展 CKEditor 并添加自己的按钮。这可以通过添加插件或小部件来实现。两者之间的区别在于，小部件是将多个组件的行为组合在一起的插件。一个小部件的例子是一个图像，其中图像本身、替代文本和标题组成一个项目，并且它们可以作为单个项目在
    WYSIWYG 区域中移动。
- en: 'To use additional widgets, you will need to do two things:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用额外的小部件，您需要做两件事：
- en: Download or create a plugin for CKEditor.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载或创建一个 CKEditor 插件。
- en: Tell the Drupal core that a new CKEditor plugin should be loaded.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉 Drupal 核心应该加载一个新的 CKEditor 插件。
- en: To learn more about the CKEditor side of things, read the documentation on adding
    CKEditor plugins or CKEditor widgets. Plugins and widgets for CKEditor can be
    downloaded from [http://ckeditor.com/addons/plugins/all](http://ckeditor.com/addons/plugins/all).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 CKEditor 方面的信息，请阅读有关添加 CKEditor 插件或 CKEditor 小部件的文档。CKEditor 的插件和小部件可以从
    [http://ckeditor.com/addons/plugins/all](http://ckeditor.com/addons/plugins/all)
    下载。
- en: Once you have a CKEditor plugin, you need to tell Drupal core that a new CKEditor
    plugin needs to be loaded via `\Drupal\ckeditor\CKEditorPluginInterface`. This
    will create a 1:1 relationship between the CKEditor JavaScript plugin and the
    Drupal CKEditor Plugin plugin (a confusing name, nonetheless). A default implementation
    is provided via `Drupal\ckeditor\CKEditorPluginBase`, so not every method needs
    to be implemented by CKEditor plugins.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了 CKEditor 插件，您需要通过 `\Drupal\ckeditor\CKEditorPluginInterface` 告诉 Drupal
    核心需要加载一个新的 CKEditor 插件。这将创建 CKEditor JavaScript 插件和 Drupal CKEditor 插件插件（尽管名称有些令人困惑）之间的
    1:1 关系。通过 `Drupal\ckeditor\CKEditorPluginBase` 提供了一个默认实现，因此并非每个方法都需要由 CKEditor
    插件实现。
- en: 'Additionally, the following interfaces can be implemented on the Drupal side
    to extend the plugin functionality:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以在 Drupal 端实现以下接口以扩展插件功能：
- en: '`\Drupal\ckeditor\CKEditorPluginButtonsInterface` allows a CKEditor plugin
    to define which buttons it provides so that users can configure a CKEditor toolbar
    instance via the drag-and-drop-based UI'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Drupal\ckeditor\CKEditorPluginButtonsInterface` 允许 CKEditor 插件定义它提供的按钮，以便用户可以通过基于拖放的用户界面配置
    CKEditor 工具栏实例。'
- en: '`\Drupal\ckeditor\CKEditorPluginContextualInterface` allows a CKEditor plugin
    to enable itself automatically based on the context: if some other CKEditor plugin''s
    button is enabled, if some filter is enabled, if some CKEditor plugin''s setting
    has a certain value, or a combination of all of these'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Drupal\ckeditor\CKEditorPluginContextualInterface` 允许 CKEditor 插件根据上下文自动启用自己：如果某个其他
    CKEditor 插件的按钮被启用，如果某个过滤器被启用，如果某个 CKEditor 插件的设置具有某个值，或者这些条件的组合。'
- en: '`\Drupal\ckeditor\CKEditorPluginConfigurableInterface` allows a CKEditor plugin
    to define a settings form to configure any settings that this CKEditor plugin
    may have'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Drupal\ckeditor\CKEditorPluginConfigurableInterface` 允许 CKEditor 插件定义一个设置表单来配置此
    CKEditor 插件可能具有的任何设置。'
- en: '`\Drupal\ckeditor\CKEditorPluginCssInterface` allows a CKEditor plugin to define
    additional CSS to be loaded in iframe instances of CKEditor'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Drupal\ckeditor\CKEditorPluginCssInterface`允许CKEditor插件定义要加载到iframe实例中的CKEditor的额外CSS。'
- en: To do that, you will need to create a new module utilizing the Drupal Plugin
    API. Even though CKEditor and Drupal share the notation of plugins, note that
    these are very different things. As per the Drupal Plugin API, plugin implementations
    must be annotated with the `@CKEditorPlugin` annotation so that they can be discovered.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您需要创建一个新的模块，利用Drupal Plugin API。尽管CKEditor和Drupal共享插件的符号，但请注意，这些是非常不同的东西。根据Drupal
    Plugin API，插件实现必须使用`@CKEditorPlugin`注解进行注解，以便它们可以被发现。
- en: When creating CKEditor plugins, keep in mind that you are creating functionality
    intended for content editors, so the user interface and user experience should
    be excellent. Have a look at `ckeditor.drupalimage.admin.js` and `ckeditor.stylescombo.admin.js`
    for examples of good implementations (see also [https://www.drupal.org/node/2567801](https://www.drupal.org/node/2567801)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建CKEditor插件时，请记住，您正在创建旨在为内容编辑器提供功能，因此用户界面和用户体验应该非常出色。查看`ckeditor.drupalimage.admin.js`和`ckeditor.stylescombo.admin.js`以获取良好实现的示例（另请参阅[https://www.drupal.org/node/2567801](https://www.drupal.org/node/2567801)）。
- en: We will extensively make use of the Drupal Plugin API in the next section of
    this chapter when adding a new block, but Drupal plugins are essentially swappable
    pieces of functionality.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下一节中，我们将广泛使用Drupal Plugin API来添加一个新块，但Drupal插件本质上是可以互换的功能组件。
- en: Have a go hero - create a CKEditor plugin and allow Drupal to discover it
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄 - 创建CKEditor插件并允许Drupal发现它
- en: 'To declare a Drupal instance of a CKEditor plugin, you need to follow these
    steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个CKEditor插件的Drupal实例，您需要遵循以下步骤：
- en: Create your module structure as follows. Within `js`, the CKEditor plugin is
    placed, and the Drupal plugin is placed within `lib`:![Have a go hero - create
    a CKEditor plugin and allow Drupal to discover it](img/4659_06_14.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下结构创建您的模块结构。在`js`目录中放置CKEditor插件，而Drupal插件则放置在`lib`目录中：![尝试英雄 - 创建CKEditor插件并允许Drupal发现它](img/4659_06_14.jpg)
- en: 'Ensure that the CKEditor plugin (named `plugin.js` within the `js` directory)
    is namespaced as Drupal expects it:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保CKEditor插件（在`js`目录中命名为`plugin.js`）按照Drupal的预期进行命名空间：
- en: '[PRE1]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the file that will contain the class:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含类的文件：
- en: '[PRE2]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Extend the `CKEditorPluginBase` class within that file:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件中扩展`CKEditorPluginBase`类：
- en: '[PRE3]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For further information, you can visit the documentation for the `Drupal\ckeditor`
    namespace at [https://api.drupal.org/api/drupal/namespace/Drupal%21ckeditor/8.2.x](https://api.drupal.org/api/drupal/namespace/Drupal%21ckeditor/8.2.x).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，您可以访问`Drupal\ckeditor`命名空间的文档，网址为[https://api.drupal.org/api/drupal/namespace/Drupal%21ckeditor/8.2.x](https://api.drupal.org/api/drupal/namespace/Drupal%21ckeditor/8.2.x)。
- en: Introduction to the Block API for Drupal 8
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal 8的Block API简介
- en: In Drupal 7, adding a block was just a matter of implementing a hook such as
    `hook_block_info()` and a few more in a custom module. The block then was available
    in the user interface for you to place wherever you wanted.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 7中，添加一个块只是实现一个钩子，如`hook_block_info()`，以及更多在自定义模块中的钩子。然后，该块就可以在用户界面中供您放置在任何您想要的位置。
- en: In Drupal 8, custom blocks provided by a module implement the Block Plugin API,
    which is a subset of the more generic Plugin API. What used to be info hooks that
    returned arrays for block discovery is now composed of Annotations and the use
    of PSR-0, so Drupal can both find and understand your blocks. Callback functions
    that returned the content of your block are now methods on `Drupal\block\BlockPluginInterface`
    that we can override as needed in our custom block code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 8中，由模块提供的自定义块实现了Block Plugin API，它是更通用的Plugin API的一个子集。过去用于返回数组以进行块发现的info钩子现在由注解和PSR-0的使用组成，因此Drupal可以找到并理解您的块。返回您块内容的回调函数现在是我们可以在自定义块代码中按需覆盖的`Drupal\block\BlockPluginInterface`上的方法。
- en: Creating a block in Drupal 8 requires creating a plugin according to the Plugin
    API and annotation-based plugin discovery. Throughout the book, we have seen both
    of these at play when creating field widgets or CKEditor profiles.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 8中创建一个块需要根据Plugin API和基于注解的插件发现来创建一个插件。在整个书中，我们在创建字段小部件或CKEditor配置文件时都看到了这两个方面的应用。
- en: 'A workflow of creating a block can be visualized as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 创建块的流程可以可视化如下：
- en: Create a block plugin using annotations.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用注解创建一个块插件。
- en: Implement the `Drupal\Core\Block\BlockBase` class.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`Drupal\Core\Block\BlockBase`类。
- en: Implement the `Drupal\Core\Block\BlockPluginInterface` class methods according
    to the use case.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据用例实现`Drupal\Core\Block\BlockPluginInterface`类方法。
- en: 'For a custom block named `author_tool`, a PSR-4-compliant structure is `author_tool/src/Plugin/Block`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于名为`author_tool`的自定义块，PSR-4兼容的结构是`author_tool/src/Plugin/Block`：
- en: '![Introduction to the Block API for Drupal 8](img/4659_06_15.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Drupal 8的块API简介](img/4659_06_15.jpg)'
- en: Time for action – creating a block to aid the authoring experience
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 创建一个辅助作者体验的块
- en: 'Let''s create a custom block that will be available to authenticated users
    to create new recipes when visiting a recipe page. Our module will be called `author_tool`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个自定义块，该块将可供认证用户在访问食谱页面时创建新食谱。我们的模块将命名为`author_tool`：
- en: Create a structure similar to what we saw in the last screenshot.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类似于我们上次看到的截图的结构。
- en: 'Create a `author_tool.info.yml` file and create a dependency of your module
    with the block system:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`author_tool.info.yml`文件，并使用块系统创建您模块的依赖项：
- en: '[PRE4]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Extend the `BlockBase` class with your own implementation, `AuthorToolBlock`,
    and place the following code in it:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您自己的实现`AuthorToolBlock`扩展`BlockBase`类，并将以下代码放入其中：
- en: '[PRE5]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Within your class, implement the `BlockPluginInterface::build` method like
    this:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的类中，像这样实现`BlockPluginInterface::build`方法：
- en: '[PRE6]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The build method is returning a renderable array or content like `hook_block_view`
    did for Drupal 7\. Render arrays are the preferred way in Drupal 8\. The complete
    implementation is shown as follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建方法返回一个可渲染的数组或内容，就像Drupal 7中的`hook_block_view`所做的那样。渲染数组是Drupal 8中首选的方式。完整的实现如下所示：
- en: '[PRE7]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Your module is ready. Go to **Extend**, locate it, and enable it.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的模块已准备就绪。转到**扩展**，定位它，并启用它。
- en: Now it's time to place your block on the recipe pages for authenticated users
    to see. From the main menu, select **Structure** | **Block Layout**, scroll down
    to **Sidebar first**, and click on the **Place block** button:![Time for action
    – creating a block to aid the authoring experience](img/4659_06_16.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候将您的块放置在食谱页面上，以便认证用户可以看到。从主菜单中选择**结构** | **块布局**，滚动到**侧边栏第一**，然后点击**放置块**按钮：![操作时间
    – 创建一个辅助作者体验的块](img/4659_06_16.jpg)
- en: Locate your block and click on **Place block**:![Time for action – creating
    a block to aid the authoring experience](img/4659_06_17.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位您的块并点击**放置块**：![操作时间 – 创建一个辅助作者体验的块](img/4659_06_17.jpg)
- en: Configure your block to display only recipe content types:![Time for action
    – creating a block to aid the authoring experience](img/4659_06_18.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置您的块以仅显示食谱内容类型：![操作时间 – 创建一个辅助作者体验的块](img/4659_06_18.jpg)
- en: Configure your block to display for authenticated users only:![Time for action
    – creating a block to aid the authoring experience](img/4659_06_19.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置您的块以仅对认证用户显示：![操作时间 – 创建一个辅助作者体验的块](img/4659_06_19.jpg)
- en: Save the image, and that's it! Now visit a recipe page to verify that it is
    there:![Time for action – creating a block to aid the authoring experience](img/4659_06_20.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存图片，就这样！现在访问一个食谱页面以验证它是否在那里：![操作时间 – 创建一个辅助作者体验的块](img/4659_06_20.jpg)
- en: '*What just happened?*'
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: Although this is a very simple example of creating a block through code, the
    simplicity of creating a block through the newly arrived Block API in Drupal 8
    is clear. You created a block to aid with the author UI and learned the basics
    of extending the Plugin API to add custom functionality to the system.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个通过代码创建块的非常简单的示例，但通过Drupal 8新出现的Block API创建块简单性是显而易见的。您创建了一个块来辅助作者UI，并学习了扩展Plugin
    API以向系统添加自定义功能的基础知识。
- en: To explore further, have a look at [https://api.drupal.org/api/drupal](https://api.drupal.org/api/drupal)
    for the BlockBase class to get a sense of all the methods there that can be added.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步探索，请查看[https://api.drupal.org/api/drupal](https://api.drupal.org/api/drupal)中的BlockBase类，以了解所有可以添加的方法。
- en: Time for action – including default configuration in your module
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 在您的模块中包含默认配置
- en: 'Once you have placed your block in your theme, you may wish to include that
    configuration when the module installs. By including a default configuration at
    installation time, you are able to provide a sensible default for placing that
    block. Also, within your deployment mechanism, all you have to worry about is
    installing the module, and the rest of the configuration will be applied at that
    step:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在主题中放置了你的块，你可能希望在模块安装时包含该配置。通过在安装时包含默认配置，你可以提供一个合理的默认值来放置该块。此外，在你的部署机制中，你只需担心安装模块，其余的配置将在该步骤中应用：
- en: Export the configuration by going to **Structure** | **Configuration** | **Configuration
    synchronization** | **Export** | **Single item**, and choose **Block** and **Author
    tool block**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问**结构** | **配置** | **配置同步** | **导出** | **单个项目**来导出配置，并选择**块**和**作者工具块**。
- en: Make sure you copy and paste everything but the `uuid` line (shown in the following
    screenshot):![Time for action – including default configuration in your module](img/4659_06_21.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保复制粘贴所有内容，除了`uuid`行（如下截图所示）：![执行时间 – 在你的模块中包含默认配置](img/4659_06_21.jpg)
- en: Within your module, create the following structure and place the contents in
    a file named `block.block.authortoolblock.yml`:![Time for action – including default
    configuration in your module](img/4659_06_22.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块中创建以下结构，并将内容放置在名为`block.block.authortoolblock.yml`的文件中：![执行时间 – 在你的模块中包含默认配置](img/4659_06_22.jpg)
- en: That's it again! Try uninstalling and installing the module again. The block
    should be placed automatically at exactly the same position with the same visibility
    rules.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 又是这样做！尝试再次卸载并安装模块。块应该会自动放置在完全相同的位置，并遵循相同的可见性规则。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to enhance the author UI by installing, configuring,
    and reusing that configuration of the built-in WYSIWYG editor, which is a part
    of Drupal 8 core now. You explored both the backend editor instance as well as
    the inline editing capabilities, and had a go of adding your own CKEditor plugin.
    You also learned how to use the new Block API, add a new block to the system through
    a custom module, extend default methods, and provide default configuration when
    installing modules.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过安装、配置和重用内置WYSIWYG编辑器的配置来增强作者UI，现在它是Drupal 8核心的一部分。你探索了后端编辑实例以及内联编辑功能，并尝试添加自己的CKEditor插件。你还学习了如何使用新的块API，通过自定义模块向系统中添加新块，扩展默认方法，并在安装模块时提供默认配置。
- en: In the next chapter, we are going to see how to work with media and integrate
    them into our new Drupal 8 site.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何处理媒体并将它们集成到我们的新Drupal 8站点中。
