- en: 1\. Introducing PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 介绍 PHP
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: By the end of this chapter, you will be able to work with PHP's built-in templating
    engine; write simple HTML files; run a PHP script from the command line; create
    and assign variables to print simple messages on the web browser; and run PHP's
    built-in web server on your machine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用 PHP 的内置模板引擎；编写简单的 HTML 文件；从命令行运行 PHP 脚本；创建变量并分配给它们，以便在网页浏览器上打印简单的消息；并在你的机器上运行
    PHP 的内置 Web 服务器。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Welcome to the world of **Hypertext Preprocessor** (**PHP**). PHP is a popular
    programming language that's used all over the internet to create web pages/websites
    and applications. A web page is a single page, while multiple web pages together
    are commonly referred to as a website or web application. PHP powers sites such
    as Facebook, Wikipedia, and WordPress.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 **超文本预处理器**（**PHP**）的世界。PHP 是一种流行的编程语言，它被广泛应用于互联网上创建网页/网站和应用程序。一个网页是一个单独的页面，而多个网页组合在一起通常被称为网站或网络应用程序。PHP
    为 Facebook、Wikipedia 和 WordPress 等网站提供动力。
- en: PHP was created as a scripting language to allow rich dynamic content (content
    can come from other PHP pages or can be dynamic in nature and come from external
    sources such as a database). PHP is an interpreted language, which means you do
    not have to compile it and create an executable file. Instead, PHP files are interpreted
    line by line by the web server running PHP.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 是作为一种脚本语言被创建的，以允许丰富的动态内容（内容可以来自其他 PHP 页面，或者本质上是动态的，并来自外部来源，如数据库）。PHP 是一种解释型语言，这意味着你不需要编译它并创建一个可执行文件。相反，PHP
    文件是由运行 PHP 的 Web 服务器逐行解释的。
- en: Compiled languages cannot run directly after each change. Instead, they require
    an interpreter to compile the code into a program that can be executed. Interpreted
    languages, on the other hand, can be reloaded as soon as there is a change in
    the code, allowing for changes to be seen quickly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编译型语言在每次更改后不能直接运行。相反，它们需要一个解释器将代码编译成一个可执行程序。而另一方面，解释型语言在代码有变化时可以立即重新加载，这使得变化可以快速看到。
- en: PHP is used along with HTML, JavaScript, and CSS to create dynamic web applications.
    Since PHP is easy to learn, it has a huge developer community around the world.
    This has led to more and more developers releasing open source projects, frameworks,
    and resources. For instance, PHP Framework Interop Group, otherwise known as PHP-FIG,
    ([https://packt.live/2oJ0FvY](https://packt.live/2oJ0FvY)) has created a series
    of standard recommendations that most developers use to write their code. GitHub
    houses many open source projects for others to use, and sites such as [https://packt.live/2oaK3gt](https://packt.live/2oaK3gt)
    have many videos on web development.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 与 HTML、JavaScript 和 CSS 一起使用来创建动态网络应用程序。由于 PHP 容易学习，因此在全球范围内拥有庞大的开发者社区。这导致越来越多的开发者发布开源项目、框架和资源。例如，PHP
    框架互操作性小组（PHP Framework Interop Group），也称为 PHP-FIG，([https://packt.live/2oJ0FvY](https://packt.live/2oJ0FvY))
    制定了一系列标准建议，大多数开发者都使用这些建议来编写他们的代码。GitHub 存储了许多开源项目，供他人使用，并且像 [https://packt.live/2oaK3gt](https://packt.live/2oaK3gt)
    这样的网站上有许多关于网络开发的视频。
- en: Getting Started with PHP Web Development
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始学习 PHP 网络开发
- en: PHP is a server-side scripting language. Server-side scripting is a way that
    web servers can respond to client requests via HTTP. The way this works is that
    a client (a browser) requests a URL. This request is then sent by a web server
    to a script. The script then reads this request and, depending on the code in
    the script, returns the contents of a page.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 是一种服务器端脚本语言。服务器端脚本是一种网络服务器可以通过 HTTP 响应客户端请求的方式。其工作方式是，客户端（浏览器）请求一个 URL。然后，这个请求由
    Web 服务器发送到脚本。脚本随后读取这个请求，并根据脚本中的代码返回页面的内容。
- en: This process happens every time a web page is visited. When working with forms,
    data is sent from the client to the server. The data is processed and a response
    is returned. A common example is that on Facebook, you enter a status update and
    press *Enter*. The text is sent via a `POST` request to the server, checked by
    the scripts on the server, and then saved to a database. The web page is then
    updated with the new post. PHP sites can also be API services, which may be called
    either from JavaScript scripts (as AJAX calls, for instance) or from other services.
    In those and similar cases, there is no browser request involved.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每次访问网页时都会发生这个过程。当处理表单时，数据从客户端发送到服务器。数据被处理并返回响应。一个常见的例子是在Facebook上，你输入状态更新并按下*Enter*键。文本将通过`POST`请求发送到服务器，由服务器上的脚本进行检查，然后保存到数据库中。然后网页会更新为新帖子。PHP网站也可以是API服务，这些服务可能由JavaScript脚本（例如AJAX调用）或其他服务调用。在这些和类似的情况下，没有浏览器请求的参与。
- en: 'The following tools are needed for web development:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具是Web开发所需的：
- en: A browser such as Google Chrome, Firefox, or Microsoft Edge.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器，如Google Chrome、Firefox或Microsoft Edge。
- en: A text editor such as Microsoft Visual Studio Code, or an **Integrated Development
    Environment** (**IDE**) such as PHP Storm.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要使用像Microsoft Visual Studio Code这样的文本编辑器，或者像PHP Storm这样的**集成开发环境**（**IDE**）。
- en: A server to run PHP Apache or NGINX can be used, as well as PHP's built-in server.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用运行PHP的Apache或NGINX服务器，以及PHP的内置服务器。
- en: Built-in Templating Engine
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置模板引擎
- en: PHP was created to write applications for the web. It can be written alongside
    HTML to create dynamic pages. We will see examples of this in a moment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: PHP是为了编写Web应用程序而创建的。它可以与HTML一起编写以创建动态页面。我们将在稍后看到这方面的例子。
- en: A PHP templating engine is a way to allow PHP code to output its content alongside
    HTML content. This gives flexibility to pages. Any page intended to use PHP code
    has a .php extension instead of an .html extension. This informs the web server
    to expect PHP content.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PHP模板引擎是一种允许PHP代码与HTML内容一起输出的方式。这为页面提供了灵活性。任何打算使用PHP代码的页面都有一个.php扩展名而不是.html扩展名。这通知Web服务器预期PHP内容。
- en: 'A PHP file has a .php extension, and it can contain HTML, JavaScript, and CSS,
    along with PHP. Since the PHP interpreter needs to know where the code is placed
    in a PHP file, PHP code is written between two special tags (`<?php`...`?>`).
    These tags are called opening and closing tags. A typical PHP file looks like
    this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PHP文件有一个.php扩展名，它可以包含HTML、JavaScript和CSS，以及PHP。由于PHP解释器需要知道代码在PHP文件中的位置，因此PHP代码被写入两个特殊标签之间（`<?php`...`?>`）。这些标签被称为开标签和闭标签。一个典型的PHP文件看起来像这样：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This page starts off with HTML declaring the doctype, which tells the browser
    to expect HTML content, followed by meta tags that inform the browser to expect
    UTF-8 content and a meta tag to use the latest rendering engine and zooming levels.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面以HTML声明文档类型开始，告诉浏览器预期HTML内容，然后是meta标签，告诉浏览器预期UTF-8内容，以及一个meta标签来使用最新的渲染引擎和缩放级别。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: HTML is covered in detail later in the chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: HTML将在本章的后面详细讲解。
- en: 'Alternatively, short open tags are also available in PHP, but they are turned
    off by default. This can be changed by editing a `.phpini` configuration file
    when using Apache (this goes beyond the scope of this introduction). Short codes
    look like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，PHP中也有可用的短开标签，但默认情况下是关闭的。这可以通过在Apache中使用时编辑`.phpini`配置文件来更改（这超出了本介绍的范畴）。短代码看起来像这样：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In short, opening and closing tags inform the PHP interpreter when to start
    and stop interpreting the PHP code line by line.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，开标签和闭标签通知PHP解释器何时开始和停止逐行解释PHP代码。
- en: Since PHP is a useful web development tool, you will often be working in the
    browser. However, you will also need to be familiar with the interactive shell.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PHP是一个有用的Web开发工具，你将经常在浏览器中工作。然而，你还需要熟悉交互式shell。
- en: PHP in the Interactive Shell
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式Shell中的PHP
- en: Interactive shells are known by a few different names. On Windows, they are
    referred to as Command Prompt. On Linux/Mac, Terminal is the name given to the
    computer application that allows commands to be issued and understood by the shell
    and picked up by PHP.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式shell有几个不同的名称。在Windows上，它们被称为命令提示符。在Linux/Mac上，Terminal是允许向shell发出命令并由shell理解和由PHP拾取的计算机应用程序的名称。
- en: The interactive shell allows a PHP script to run without a browser. This is
    how scripts are commonly executed on a server.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式shell允许PHP脚本在没有浏览器的情况下运行。这是在服务器上通常执行脚本的方式。
- en: 'Exercise 1.1: Printing Hello World to the Standard Output'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.1：将 Hello World 打印到标准输出
- en: 'In this exercise, we will print a simple statement using the interactive shell.
    The interactive shell can be used to execute PHP code and/or scripts. Before we
    begin, ensure that you have followed the installation steps in the preface. Follow
    these steps to complete the exercise:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用交互式 shell 打印一个简单的语句。交互式 shell 可以用来执行 PHP 代码和/或脚本。在我们开始之前，请确保你已经遵循了前言中的安装步骤。按照以下步骤完成练习：
- en: Open a Terminal/Command Prompt on your machine.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的机器上打开一个 Terminal/命令提示符。
- en: 'Write the following command to start PHP''s interactive shell and hit *Enter*:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以启动 PHP 的交互式 shell 并按 *Enter* 键：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will obtain the following output:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将获得以下输出：
- en: '![Figure 1.1: Getting started with the interactive shell'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure 1.1：开始使用交互式 shell'
- en: '](img/C14196_01_01.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C14196_01_01.jpg]'
- en: 'Figure 1.1: Getting started with the interactive shell'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.1：开始使用交互式 shell
- en: '`Interactive shell` will appear on the prompt, and it changes to `php >`. Now,
    you''ve entered in PHP''s interactive shell and can run PHP code and execute scripts.
    We will explore more interactive shells in upcoming exercises.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`交互式 shell` 将出现在提示符上，并变为 `php >`。现在，你已经进入了 PHP 的交互式 shell，可以运行 PHP 代码和执行脚本。我们将在接下来的练习中探索更多的交互式
    shell。'
- en: 'Write the following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will shortly explain what `echo` means. Once you hit *Enter*, you will see
    `Hello World!` printed on the shell, as shown in the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们很快就会解释 `echo` 的含义。一旦你按下 *Enter* 键，你将在 shell 上看到打印出的 `Hello World!`，如下面的屏幕截图所示：
- en: '![Figure 1.2: Printing output to the console'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.2：将输出打印到控制台'
- en: '](img/C14196_01_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/C14196_01_02.jpg]'
- en: 'Figure 1.2: Printing output to the console'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：将输出打印到控制台
- en: Congratulations! You have executed your first PHP code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经执行了你的第一个 PHP 代码。
- en: '`echo` is a PHP construct that prints anything passed to it. In the exercise,
    we passed `Hello World!`. Since `Hello World!` is a string, we have double quotes
    wrapped around it. You can use `echo` to print strings, variables, and other things.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 是一个 PHP 构造，可以打印传递给它的任何内容。在练习中，我们传递了 `Hello World!`。由于 `Hello World!`
    是一个字符串，所以我们用双引号将其包围。你可以使用 `echo` 来打印字符串、变量和其他内容。'
- en: The `echo` construct is one way to print to the screen. Another way is to use
    `print('Hello world!')`. While this will display the string passed to it, the
    main difference between `echo` and `print` is that `print` only accepts a single
    argument.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 构造是打印到屏幕的一种方式。另一种方式是使用 `print(''Hello world!'')`。虽然这会显示传递给它的字符串，但 `echo`
    和 `print` 之间的主要区别在于 `print` 只接受单个参数。'
- en: There are also functions that look inside a variable, such as `print_r($item)`.
    This will output the value of any variable passed to the function. This should
    not be used to display a message to the screen, but instead it should be used
    when you need to know the contents of a variable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些函数可以查看变量内部的内容，例如 `print_r($item)`。这将输出传递给函数的任何变量的值。这不应该用来在屏幕上显示消息，而应该在你需要知道变量内容时使用。
- en: One important thing to note here is the semicolon at the end of the line. In
    PHP, the semicolon is mandatory at the end of each statement. PHP will throw an
    error if a statement does not end with a semicolon.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个重要事项是行尾的分号。在 PHP 中，每个语句的末尾都必须有分号。如果语句不以分号结束，PHP 将抛出错误。
- en: By now, you should have got the idea that we can execute basic statements in
    the interactive shell. We will try some more of these later in this chapter. All
    the functions that we can execute in PHP scripts can be executed from the interactive
    shell.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经明白了我们可以在交互式 shell 中执行基本语句。我们将在本章后面尝试更多此类操作。我们可以在 PHP 脚本中执行的所有函数都可以在交互式
    shell 中执行。
- en: Now, we will run a PHP file to output `Hello World` rather than coding directly
    using the shell.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将运行一个 PHP 文件来输出 `Hello World`，而不是直接使用 shell 编码。
- en: 'Exercise 1.2: Printing Hello World by Executing a PHP File'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.2：通过执行 PHP 文件打印 Hello World
- en: 'By now, you have learned how to use the `echo` statement. Let''s now go ahead
    and create your first PHP script. We will print the same statement as before,
    but we will use a PHP file this time. Follow these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何使用 `echo` 语句。现在，让我们继续创建你的第一个 PHP 脚本。我们将打印与之前相同的语句，但这次我们将使用一个 PHP
    文件。按照以下步骤操作：
- en: Create a folder named `book` on your machine. Create another folder inside it
    named `chapter1`. It is recommended that you follow this approach for further
    chapters as well.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的机器上创建一个名为 `book` 的文件夹。在其内部创建另一个名为 `chapter1` 的文件夹。建议你在后续章节中也遵循这种方法。
- en: Create a file named `hello.php` inside the `chapter1` folder.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `chapter1` 文件夹内创建一个名为 `hello.php` 的文件。
- en: Open the `hello.php` file using a code editor such as Visual Studio Code or
    Sublime Text.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用代码编辑器（如 Visual Studio Code 或 Sublime Text）打开 `hello.php` 文件。
- en: 'Write the following code in `hello.php` and save it:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `hello.php` 中编写以下代码并保存：
- en: '[PRE4]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, open the Terminal and move to the `chapter1` folder. Use `cd` followed
    by the folder name to move into the folder. To go up a folder, use `../`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开终端并切换到 `chapter1` 文件夹。使用 `cd` 命令后跟文件夹名称来进入该文件夹。要返回上一级文件夹，使用 `../`。
- en: 'Run the following command in Command Prompt:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中运行以下命令：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will see `Hello World!` printed on the screen, just like in the following
    screenshot:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将在屏幕上看到打印出 `Hello World!`，就像以下截图所示：
- en: '![Figure 1.3: Printing output to the Terminal'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3：将输出打印到终端](img/C14196_01_03.jpg)'
- en: '](img/C14196_01_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3：将输出打印到终端](img/C14196_01_03.jpg)'
- en: 'Figure 1.3: Printing output to the Terminal'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：将输出打印到终端
- en: First, we have PHP's opening tag. The PHP interpreter will start processing
    lines one by one after it. The only line of code we have here is the `echo` statement
    to which we are passing the `Hello World!` string. The PHP interpreter processes
    it and then this string is printed on the Terminal.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有 PHP 的开标签。PHP 解释器将在其后逐行处理代码。这里我们只有一条代码，即 `echo` 语句，我们将 `Hello World!`
    字符串传递给它。PHP 解释器处理它，然后这个字符串被打印在终端上。
- en: All PHP files will be written like this. Some will have HTML and other code,
    while some may not. Also, remember that there can be multiple opening and closing
    tags in a single file. These can be placed anywhere in the file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 PHP 文件都将这样编写。一些可能包含 HTML 和其他代码，而一些可能不包含。还要记住，一个文件中可以有多个开标签和闭标签。这些可以放在文件的任何位置。
- en: So, you've learned how to use the interactive shell and how to print simple
    strings using the `echo` statement. We will now learn about creating and using
    variables in PHP.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你已经学会了如何使用交互式外壳以及如何使用 `echo` 语句打印简单的字符串。现在我们将学习如何在 PHP 中创建和使用变量。
- en: Assigning and Using Variables
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋值和使用变量
- en: Just as with any other programming language, variables in PHP are used to store
    data. A key point of difference is that all variable names in PHP must start with
    the dollar sign, `$`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他编程语言一样，PHP 中的变量用于存储数据。一个关键的区别是 PHP 中所有的变量名都必须以美元符号 `$` 开头。
- en: Variables must start with a letter. They cannot start with a number or symbol,
    but they can contain numbers and symbols.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 变量必须以字母开头。它们不能以数字或符号开头，但可以包含数字和符号。
- en: 'Data stored in variables can be of the following types:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在变量中的数据可以是以下类型：
- en: Integer – whole numbers
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数 - 整数
- en: Boolean – true or false
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值 - 真或假
- en: Float – floating-point number
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数 - 浮点数
- en: String – letters and numbers
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串 - 字母和数字
- en: The data that is stored in a variable is called the value of the variable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在变量中的数据称为变量的值。
- en: Creating and Assigning Variables to Print Simple Messages on the Web Browser
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在网页浏览器中创建和分配变量以打印简单消息
- en: 'Consider the following example, in which we are assigning a value to a variable:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例，我们在其中将值赋给变量：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, a variable named `$movieName` has been created, and its value is the
    string "`Avengers: Endgame`". Since the value is a string, double or single quotes
    are required around it. `=` is called the assignment operator. The code basically
    translates to the following: *Assign the value on the right-hand side of the assignment
    operator to the variable on the left-hand side*.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，创建了一个名为 `$movieName` 的变量，其值为字符串 "`Avengers: Endgame`"。由于值是字符串，因此需要用双引号或单引号包围它。`=`
    被称为赋值运算符。代码基本上可以翻译为以下内容：*将赋值运算符右侧的值赋给左侧的变量*。'
- en: 'Here are some more examples of creating variables:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些创建变量的更多示例：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you run the preceding script, you will see `PHP7.3` printed. Earlier, we
    were directly printing values using the echo statement, but now we have assigned
    the values to a variable. The value is now stored in the variable. One other thing
    to note is that since 7.3 is a number, it does not need quotation marks.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行前面的脚本，你将看到打印出 `PHP7.3`。之前，我们直接使用 `echo` 语句打印值，但现在我们将值赋给变量。值现在存储在变量中。另一件需要注意的事情是，由于
    7.3 是一个数字，因此不需要引号。
- en: Suppose you have "PHP" written 50 times on a page. If you had to change it to
    "JavaScript," you would have to replace it in all 50 places. But if the same text,
    "PHP", is assigned to a variable, you only need to change it once and the change
    will be reflected everywhere.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在一页上写下了50次“PHP”。如果您必须将其更改为“JavaScript”，您必须替换所有50个地方。但如果相同的文本“PHP”被分配给一个变量，您只需更改一次，更改将在所有地方反映出来。
- en: 'There are some rules that must be followed while creating variables:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建变量时必须遵循一些规则：
- en: All variable names in PHP `$`).
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP中的所有变量名都应以`$`开头。
- en: A variable name cannot start with a number. It must be either a letter or an
    underscore. For example, `$1name` and `$@name` are not valid variable names.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名不能以数字开头。它必须是一个字母或下划线。例如，`$1name`和`$@name`不是有效的变量名。
- en: Only A-z, 0-9, and _ are allowed in variable names.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名中只允许使用A-z、0-9和_。
- en: Variable names are case sensitive; for example, `$name` and `$NAME` are different.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名是区分大小写的；例如，`$name`和`$NAME`是不同的。
- en: Variable names must be chosen thoughtfully. They should make sense to someone
    else reading the code. For example, in an application, if you have to create a
    variable that stores a user's bank balance, a variable name such as `$customerBalance`
    is far more obvious than `$xyz`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名必须经过深思熟虑的选择。它们应该对阅读代码的他人有意义。例如，在一个应用程序中，如果您必须创建一个存储用户银行余额的变量，变量名如`$customerBalance`比`$xyz`更明显。
- en: Unlike languages such as Java and .NET, PHP does not need to declare variables
    before using them. This means you can just create a variable whenever it's needed,
    although it's considered a best practice where possible to define your variables
    at the top of your scripts to make it clear their intent.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与Java和.NET等语言不同，PHP在使用变量之前不需要声明。这意味着您可以在需要时创建变量，尽管在可能的情况下在脚本顶部定义变量被认为是最佳实践，以便清楚地表明其意图。
- en: PHP also has what are called predefined variables. These are provided by PHP
    and are available to use by anyone.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: PHP还有被称为预定义变量的东西。这些是由PHP提供的，任何人都可以使用。
- en: One such variable is `$argv`. This is a list of arguments passed through the
    Terminal by a script. Rather than executing the script on its own, you can pass
    values to a script that will be available to use in the `$argv` variable.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个变量是`$argv`。这是一个通过终端传递给脚本的参数列表。您不必单独执行脚本，而是可以向脚本传递值，这些值将可用于`$argv`变量。
- en: 'Exercise 1.3: Using Input Variables to Print Simple Strings'
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.3：使用输入变量打印简单字符串
- en: 'In this exercise, we will alter the script from the previous exercise and use
    the input variables to print strings. Follow these steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将修改上一个练习中的脚本并使用输入变量来打印字符串。按照以下步骤操作：
- en: Reopen the `hello.php` file using your favorite code editor.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器重新打开`hello.php`文件。
- en: 'Replace the code with the following code and save the file:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码替换为以下代码并保存文件：
- en: '[PRE8]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Don't worry about the syntax at the moment.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前不必担心语法。
- en: Now, go to the Terminal inside the `chapter1` folder.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到`chapter1`文件夹内的终端。
- en: 'Run the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE9]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will see the following output on the Terminal:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将在终端看到以下输出：
- en: '![Figure 1.4: Printing output to the console'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4：将输出打印到控制台'
- en: '](img/C14196_01_04.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_04.jpg)'
- en: 'Figure 1.4: Printing output to the console'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：将输出打印到控制台
- en: What just happened? The `hello.php` script printed the value you passed to it.
    Let's examine how it worked.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？`hello.php`脚本打印了传递给它的值。让我们看看它是如何工作的。
- en: You passed the value `packt` through the command line. This is called passing
    arguments. You can send multiple arguments shared by a space and these will all
    be available to the PHP script. But how?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过命令行传递了值`packt`。这被称为传递参数。您可以通过空格分隔多个参数并将它们发送，这些参数都将对PHP脚本可用。但如何做到这一点？
- en: 'Here comes `$argv`. `$argv` is a predefined variable, and once you execute
    a script, it gets filled with the values passed by the use. It is a list of values
    after the `php` keyword on the Terminal. If no arguments are passed, the list
    only contains the filename. In our case, the list will have two values: `hello.php`
    and `packt`.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是`$argv`的时候了。`$argv`是一个预定义变量，一旦执行脚本，它就会被填充使用传递的值。它是在终端上`php`关键字之后的值列表。如果没有传递参数，列表中只包含文件名。在我们的例子中，列表将有两个值：`hello.php`和`packt`。
- en: Coming back to the script, in the first line of code, we are assigning a value
    to the `$name` variable. What is this value? `$argv` is an array (more about that
    in later chapters, but basically, an array is a list of things) containing two
    values. With arrays, the counting begins from 0 instead of 1\. So, the first value
    in `$argv` is `hello.php`, which can be taken out using `$argv[0]`. We need the
    second value (must be character variables), hence we used `$argv[1]`. Now, the
    `packt` argument passed to the file is stored in the `$name` variable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 回到脚本，在代码的第一行，我们正在给 `$name` 变量赋值。这个值是什么？`$argv` 是一个包含两个值的数组（关于这一点将在后面的章节中详细介绍，但基本上，数组是一系列的项）。对于数组，计数从
    0 开始而不是 1。因此，`$argv` 中的第一个值是 `hello.php`，可以使用 `$argv[0]` 取出。我们需要第二个值（必须是字符变量），因此我们使用了
    `$argv[1]`。现在，传递给文件的 `packt` 参数被存储在 `$name` 变量中。
- en: In the second line, we are concatenating the text `Hello` and the `$name` variable.
    The dot operator (`.`) is used to concatenate multiple values. After concatenation,
    the string becomes `Hello packt`, which is then printed by the `echo` statement.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，我们正在将文本 `Hello` 和 `$name` 变量连接起来。点操作符 (`.`) 用于连接多个值。连接后，字符串变为 `Hello packt`，然后通过
    `echo` 语句打印出来。
- en: Note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can read about more predefined variables and their usage at [https://packt.live/2nYJCWN](https://packt.live/2nYJCWN).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://packt.live/2nYJCWN](https://packt.live/2nYJCWN) 上了解更多预定义变量及其用法。
- en: You can use either single or double quotes for strings. However, there is a
    difference between them. You can use variables inside double-quoted strings, and
    they will be parsed. By this I mean that the value of the variable will be executed
    rather than simply displaying the name of the variable. On the other hand, single
    quotes do not do any additional parsing and display the content between the quotes
    as it is. For this reason, single quotes are slightly faster, and it is recommended
    to use them.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用单引号或双引号来表示字符串。然而，它们之间有区别。您可以在双引号字符串中使用变量，并且它们将被解析。我的意思是变量的值将被执行，而不仅仅是显示变量的名称。另一方面，单引号不会进行任何额外的解析，并将引号之间的内容按原样显示。因此，单引号稍微快一些，建议使用它们。
- en: In the last exercise, we saw how to use the predefined `$argv` variable. We
    will use one more predefined variable in this exercise called `$_GET`. This allows
    information to be passed to the address bar, and PHP can read it. They are known
    as query strings
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个练习中，我们看到了如何使用预定义的 `$argv` 变量。在这个练习中，我们将使用另一个预定义变量 `$_GET`。这允许信息传递到地址栏，PHP
    可以读取它。它们被称为查询字符串
- en: Query strings are key-value pairs that are separated by an `?a=1&b=2` is also
    a valid query string.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 查询字符串是由 `?` 分隔的键值对。例如，`?a=1&b=2` 也是一个有效的查询字符串。
- en: 'Exercise 1.4: Using the Built-in Server to Print a String'
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.4：使用内置服务器打印字符串
- en: 'In this exercise, we will use the built-in server to print `Hello Packt` using
    the `companyName=Packt` query string. This will allow you to start using the browser
    to view the output of your code, rather than just using the interactive shell.
    Follow these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用内置服务器通过 `companyName=Packt` 查询字符串打印 `Hello Packt`。这将允许您开始使用浏览器查看代码的输出，而不仅仅是使用交互式
    shell。按照以下步骤操作：
- en: Reopen the `hello.php` file using your favorite code editor.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器重新打开 `hello.php` 文件。
- en: 'Replace the code with the following code and save the file:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码替换为以下代码并保存文件：
- en: '[PRE10]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Go to the Terminal and go inside the `chapter1` folder.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往终端并进入 `chapter1` 文件夹。
- en: 'Run the following command to run PHP''s built-in web server:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以运行 PHP 的内置 web 服务器：
- en: '[PRE11]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, open the browser and enter the following in the address bar and hit *Enter*:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开浏览器并在地址栏中输入以下内容并按 *Enter*：
- en: '[PRE12]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will see the following output on your screen:'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将在屏幕上看到以下输出：
- en: '![Figure 1.5: Printing output to the browser'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5：将输出打印到浏览器'
- en: '](img/C14196_01_05.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_05.jpg)'
- en: 'Figure 1.5: Printing output to the browser'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：将输出打印到浏览器
- en: This is somewhat like the previous exercise, but rather than using the Terminal,
    we used the browser.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前的练习有些类似，但不是使用终端，而是使用了浏览器。
- en: Notice the URL in the browser. After the filename, we have appended `?companyName=Packt`.
    The `?` denotes that what follows is a query string. In our code, a variable named
    `companyName` with a value of `Packt` is being passed to the PHP file.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意浏览器中的 URL。在文件名之后，我们附加了 `?companyName=Packt`。`?` 表示其后的内容是查询字符串。在我们的代码中，有一个名为
    `companyName` 的变量，其值为 `Packt`，正被传递到 PHP 文件中。
- en: Coming to the code now, in the first line, we have `$_GET['companyName']`. `$_GET`
    is also a predefined variable that is populated when any PHP string with a query
    string is executed. So, by using `$_GET['companyName']`, we will get the value
    `Packt`, which will be stored in the `$name` variable. Remember that you can extract
    any value from the query string using the respective key.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看代码，在第一行，我们有`$_GET['companyName']`。`$_GET`也是一个预定义变量，当执行任何带有查询字符串的PHP字符串时，它会被填充。所以，通过使用`$_GET['companyName']`，我们将得到`Packt`这个值，它将被存储在`$name`变量中。记住，你可以使用相应的键从查询字符串中提取任何值。
- en: The next line then combines them and displays the result on the browser.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行将它们组合并在浏览器上显示结果。
- en: Now that we have started to use the browser to view the output of our work,
    let's take a quick look at HTML. As discussed earlier, PHP and HTML are often
    used hand-in-hand, so an understanding of HTML will prove useful as you become
    more familiar with PHP.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开始使用浏览器来查看我们工作的输出，让我们快速看一下HTML。如前所述，PHP和HTML经常一起使用，因此当你对PHP更加熟悉时，理解HTML将非常有用。
- en: HyperText Markup Language
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超文本标记语言
- en: '**HyperText Markup Language** (**HTML**) is a language whose meaning is defined
    via tags and attributes in a hierarchical way. It is used for creating documents
    such as web pages on the World Wide Web, which are usually displayed in a web
    browser. They can include texts, links, pictures, and even sound and video.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**超文本标记语言**（**HTML**）是一种通过标签和属性以分层方式定义其含义的语言。它用于创建诸如万维网上的网页之类的文档，这些文档通常在网页浏览器中显示。它们可以包括文本、链接、图片，甚至声音和视频。'
- en: HTML uses different tags and attributes to define the layout of a web document
    such as forms.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: HTML使用不同的标签和属性来定义网页文档的布局，如表单。
- en: 'A tag is an HTML element enclosed by `<` and `>`, such as `<body>`, `<p>`,
    and `<br>`. It consists of an opening tag and an ending tag, with content in-between.
    For example, consider the following line of HTML:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是一个由`<`和`>`包围的HTML元素，例如`<body>`、`<p>`和`<br>`。它由一个开标签和一个结束标签组成，中间是内容。例如，考虑以下HTML行：
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The opening tag is `<p>` and the closing tag is `</p>`, while the content is
    `A paragraph`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 开标签是`<p>`，闭标签是`</p>`，内容是“一个段落”。
- en: 'An attribute of the HTML element provides additional information about the
    element and is described by its name and value and has the following syntax: `name[="value"]`.
    Specifying the value is optional. For example, the following hyperlink has an
    attribute with the name `href`, and the value `/home`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: HTML元素的属性提供了有关该元素的其他信息，并由其名称和值描述，具有以下语法：`name[="value"]`。指定值是可选的。例如，以下超链接有一个名为`href`的属性，其值为`/home`：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Any HTML document requires the document type declaration, `<!DOCTYPE html>`,
    and the `<title>` tag, like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 任何HTML文档都需要文档类型声明`<!DOCTYPE html>`和`<title>`标签，如下所示：
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There is a list of optional tags that many developers use to create the structure
    of an HTML document, which are `<html>`, `<head>`, and `<body>`. The `<html>`
    tag is the root tag of the HTML document, which is placed immediately after the
    document type declaration. It will contain the other two optional tags: `<head>`
    and `<body>`. The `<head>` tag is used for the *page metadata* and includes `<meta>`
    tags to describe the encoding character set used in document for example, it includes
    the `<title>` tag, and external resources, such as styles, fonts, and scripts.
    The `<body>` block is used to render its contents in a browser window and includes
    the largest variety of HTML tags.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多开发者用来创建HTML文档结构的可选标签列表，包括`<html>`、`<head>`和`<body>`。`<html>`标签是HTML文档的根标签，它紧接在文档类型声明之后放置。它将包含其他两个可选标签：`<head>`和`<body>`。`<head>`标签用于页面元数据，包括描述文档中使用的编码字符集的`<meta>`标签，例如，它包括`<title>`标签和外部资源，如样式、字体和脚本。`<body>`块用于在浏览器窗口中渲染其内容，并包括最多种类的HTML标签。
- en: The aforementioned HTML tags can be seen in any HTML document.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上述HTML标签可以在任何HTML文档中看到。
- en: 'Here''s a list of the most frequently used tags:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个最常用标签的列表：
- en: '`<div>`: This tag defines a section in an HTML document. It is usually used
    as a wrapper element for other HTML elements.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<div>`：这个标签定义了HTML文档中的一个部分。它通常用作其他HTML元素的包装元素。'
- en: '`<h1>` to `<h6>`: The heading tags are used to define the heading of the HTML
    document. `<h1>` defines the most important headings (they also use the biggest
    font size), while `<h6>` defines the least important headings. They can be used
    anywhere in an HTML document.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<h1>`到`<h6>`：标题标签用于定义HTML文档的标题。`<h1>`定义最重要的标题（它们也使用最大的字体大小），而`<h6>`定义最不重要的标题。它们可以在HTML文档的任何位置使用。'
- en: '`<p>`: The paragraph tag is used to define paragraph content in an HTML document.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p>`：段落标签用于在HTML文档中定义段落内容。'
- en: '`<em>`: The emphasis tag is used to emphasize text.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<em>`：强调标签用于强调文本。'
- en: '`<b>` and/or `<strong>`: The bold tag is used to specify bold content.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<b>`和/或`<strong>`：粗体标签用于指定粗体内容。'
- en: '`<a href="..."> Link name </a>`: The anchor tag is used to link one page to
    another page.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<a href="...">链接名称</a>`：锚标签用于将一个页面链接到另一个页面。'
- en: '`<ul>` and `<li>`: The unordered list and list item tags are used to list the
    content without order (like a bulleted list).'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ul>`和`<li>`：无序列表和列表项标签用于无序列出内容（如项目符号列表）。'
- en: '`<ol>`: This tag is used to represent a numbered list'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ol>`：此标签用于表示编号列表'
- en: '`<br>`: The line break tag is used to break the line.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<br>`：换行标签用于换行。'
- en: '`<img>`: The image tag is used to add an image element to an HTML document.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<img>`：图像标签用于向HTML文档添加图像元素。'
- en: '`<hr>`: The horizontal rule tag is used to display the horizontal line in an
    HTML document.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<hr>`：水平线标签用于在HTML文档中显示水平线。'
- en: '`<table>`: The table tag is used to create a table in an HTML document.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<table>`：表格标签用于在HTML文档中创建表格。'
- en: '`<tr>`: The table row tag is used to define a row in an HTML table.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<tr>`：表格行标签用于在HTML表格中定义行。'
- en: '`<th>`: The table heading cell tag defines the header cell in a table.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<th>`：表格标题单元格标签定义了表格中的标题单元格。'
- en: '`<td>`: The table data cell tag defines the standard cell in a table.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<td>`：表格数据单元格标签定义了表格中的标准单元格。'
- en: '`<form>`: The form tag is used to create an HTML form.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<form>`：表单标签用于创建HTML表单。'
- en: '`<input>`: The input tag is used to collect and submit user data (such as forms
    from a browser).'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input>`：输入标签用于收集和提交用户数据（例如浏览器中的表单）。'
- en: '`<select>` and `<option>`: The select input tag is used to select an option
    value from a drop-down list.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<select>`和`<option>`：选择输入标签用于从下拉列表中选择选项值。'
- en: '`<label>`: The label tag prints the label for a form input.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<label>`：标签标签打印表单输入的标签。'
- en: 'Consider the following HTML block:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下HTML块：
- en: '[PRE16]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s have a look at the HTML elements in this block:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个块中的HTML元素：
- en: '`<!DOCTYPE html>` declares the document type to HTML5.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE html>` 声明文档类型为HTML5。'
- en: '`<html lang="en">` is the opening tag for the root element of the HTML document.
    The `lang` attribute is pointing to the document content language.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<html lang="en">` 是HTML文档根元素的打开标签。`lang`属性指向文档内容语言。'
- en: '`<head>` opens the metadata block.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<head>` 打开元数据块。'
- en: '`<meta charset="utf-8">` declares the character set used in the HTML document.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<meta charset="utf-8">` 声明HTML文档中使用的字符集。'
- en: '`<title>HTML Document Title</title>` sets the title to `HTML Document Title`.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<title>HTML Document Title</title>` 设置标题为`HTML Document Title`。'
- en: '`<body>` opens the HTML document content block.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<body>` 打开HTML文档内容块。'
- en: '`<h1>Heading Text</h1>` adds a `Heading Text` heading.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<h1>标题文本</h1>` 添加一个`标题文本`标题。'
- en: '`<p>A paragraph</p>` adds a paragraph containing the text `A paragraph`.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p>一个段落</p>` 添加一个包含文本`一个段落`的段落。'
- en: '`<form method="post">` opens the form block, declaring the method that will
    be used to send its data (more about this in *Chapter 6*, *Using HTTP*).'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<form method="post">` 打开表单块，声明将用于发送其数据的提交方法（关于这一点，请参阅*第6章*，*使用HTTP*）。'
- en: '`<input type="text" name="domain">` adds a text input field called `domain`.
    The "domain" value is the name of the input type.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input type="text" name="domain">` 添加一个名为`domain`的文本输入字段。`domain`值是输入类型的名称。'
- en: '`<input type="submit" value="Send">` adds a submit button with `Send` on it.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input type="submit" value="Send">` 添加一个带有`Send`的提交按钮。'
- en: '`</form>`, `</head>`, `</body>`, and `</html>` are the closing tags for the
    `<form>`, `<head>`, `<body>`, and `<html>` tags.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`</form>`、`</head>`、`</body>`和`</html>`是`<form>`、`<head>`、`<body>`和`<html>`标签的关闭标签。'
- en: 'The preceding code will render the following web page:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将渲染以下网页：
- en: '![Figure 1.6: Layout of the web page'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6：网页布局'
- en: '](img/C14196_01_06.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_06.jpg)'
- en: 'Figure 1.6: Layout of the web page'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：网页布局
- en: 'We can access the file with a `GET` request. Submitting the form will result
    in a `POST` request:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`GET`请求访问文件。提交表单将导致`POST`请求：
- en: '![Figure 1.7: Methods used'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7：使用的方法'
- en: '](img/C14196_01_07.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_07.jpg)'
- en: 'Figure 1.7: Methods used'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：使用的方法
- en: Request types and form data submission will be covered in *Chapter 6*, *Using
    HTTP*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 请求类型和表单数据提交将在 *第 6 章*，*使用 HTTP* 中介绍。
- en: Cascading Style Sheets
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层叠样式表
- en: '**Cascading Style Sheets** (**CSS**) is the language for defining the styles
    of web pages. It is possible to change color, font, and so on using CSS. While
    the HTML describes the structure of a web page, CSS describes what the page will
    look like on various devices and screen types.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**层叠样式表**（**CSS**）是定义网页样式的语言。可以使用 CSS 改变颜色、字体等。虽然 HTML 描述了网页的结构，但 CSS 描述了网页在各种设备和屏幕类型上的外观。'
- en: Nowadays, it is very common to use a CSS framework because it contains some
    presets to make the web pages compatible across browsers, and offers a number
    of tools, such as a grid system, to make the creation of page layout easier and
    to implement responsiveness.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 CSS 框架非常普遍，因为它包含一些预设，使网页在不同浏览器之间兼容，并提供了一系列工具，如网格系统，使页面布局的创建更容易，并实现响应式。
- en: 'One such framework is Bootstrap, and using it is as simple as including the
    generated and minified CSS file in the HTML document:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的框架之一是 Bootstrap，使用它就像在 HTML 文档中包含生成的和压缩的 CSS 文件一样简单：
- en: '[PRE17]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Including the CSS file in the original HTML document will make the browser
    render the page a bit differently:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始 HTML 文档中包含 CSS 文件将使浏览器以略微不同的方式渲染页面：
- en: '![Figure 1.8: Rendering the web page'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.8：渲染网页'
- en: '](img/C14196_01_08.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_08.jpg)'
- en: 'Figure 1.8: Rendering the web page'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：渲染网页
- en: 'As you can see, the font is different, but no other major changes are visible.
    This is because the CSS rules from the linked file do not match any of the elements
    to decorate. The Bootstrap documentation ([https://packt.live/2N1LHJU](https://packt.live/2N1LHJU))
    shows what it is capable of. Usually, the class attributes are used to match the
    target HTML elements. Therefore, by simply adding `class="btn btn-primary"` to
    the submit input, we will get the button formatted according to the defined style:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，字体不同，但没有其他重大变化可见。这是因为链接文件的 CSS 规则没有匹配任何要装饰的元素。Bootstrap 文档（[https://packt.live/2N1LHJU](https://packt.live/2N1LHJU)）展示了它的能力。通常，类属性用于匹配目标
    HTML 元素。因此，通过简单地将 `class="btn btn-primary"` 添加到提交输入，我们将得到根据定义的样式格式化的按钮：
- en: '![Figure 1.9: Adding CSS to a button'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.9：向按钮添加 CSS'
- en: '](img/C14196_01_09.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_09.jpg)'
- en: 'Figure 1.9: Adding CSS to a button'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：向按钮添加 CSS
- en: 'We didn''t need to define a single CSS rule. The button was rendered according
    to the already-defined rules from the Bootstrap framework. If we inspect the submitted
    input styles in Developer Tools (Chrome), we will see the following cascade that
    is applied to the HTML element:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要定义单个 CSS 规则。按钮是根据 Bootstrap 框架中已定义的规则渲染的。如果我们通过开发者工具（Chrome）检查提交的输入样式，我们将看到以下应用于
    HTML 元素的级联：
- en: '![Figure 1.10: Inspecting the submit input styles in Developer Tools'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.10：在开发者工具中检查提交输入样式'
- en: '](img/C14196_01_10.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_10.jpg)'
- en: 'Figure 1.10: Inspecting the submit input styles in Developer Tools'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：在开发者工具中检查提交输入样式
- en: Of course, we can create an additional CSS file and link it to the HTML document,
    overwriting some of the Bootstrap declarations.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以创建一个额外的 CSS 文件并将其链接到 HTML 文档，覆盖一些 Bootstrap 声明。
- en: 'Exercise 1.5: Creating a Login Form Page Using Bootstrap'
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.5：使用 Bootstrap 创建登录表单页面
- en: 'You are required to create a simple login page using the Bootstrap framework.
    Follow these steps:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用 Bootstrap 框架创建一个简单的登录页面。按照以下步骤操作：
- en: Create a file called `login-form.html`.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `login-form.html` 的文件。
- en: 'Declare the document type as HTML5 and open the root HTML element:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明文档类型为 HTML5 并打开根 HTML 元素：
- en: '[PRE18]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the head block containing the page title, the link to the Bootstrap CSS
    framework, and the meta tag required by the CSS framework:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加包含页面标题、Bootstrap CSS 框架链接和 CSS 框架所需的 meta 标签的 head 块：
- en: '[PRE19]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the `body` element and add the container `div`, aligning the contents
    to the `center`:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `body` 元素并添加容器 `div`，使内容居中对齐：
- en: '[PRE20]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the form element and add the form title – an H1 centered text heading:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开表单元素并添加表单标题 - 一个居中的 H1 文本标题：
- en: '[PRE21]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the first form label and input group for the username:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加第一个表单标签和用户名输入组：
- en: '[PRE22]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the password-related label and input tags:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加与密码相关的标签和输入标签：
- en: '[PRE23]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the button that will submit the form:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加将提交表单的按钮：
- en: '[PRE24]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Close all opened tags.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭所有打开的标签。
- en: Note
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The final file can be referred at [https://packt.live/2MBLNZx](https://packt.live/2MBLNZx).
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终文件可以参考[https://packt.live/2MBLNZx](https://packt.live/2MBLNZx)。
- en: 'Open the file in the browser. The expected output is as follows:'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在浏览器中打开文件。预期的输出如下：
- en: '![Figure 1.11: The login page'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.11：登录页面'
- en: '](img/C14196_01_11.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_11.jpg)'
- en: 'Figure 1.11: The login page'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：登录页面
- en: The form is rendered using the default styles of Bootstrap, which are far richer
    than the browser's defaults.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 表单使用Bootstrap的默认样式渲染，这些样式比浏览器的默认样式丰富得多。
- en: 'In this exercise, you rendered an HTML page, including some of the most widely
    used HTML elements, such as the form element, and you used the Bootstrap CSS file:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您渲染了一个HTML页面，包括一些最广泛使用的HTML元素，例如表单元素，并且您使用了Bootstrap CSS文件：
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this case, the `Packt` string is stored in the $name variable, and the output
    `Hello Packt` will be printed in heading 1 (in the biggest font size).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`Packt`字符串存储在`$name`变量中，输出`Hello Packt`将以标题1（最大字体大小）的形式打印。
- en: Note
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The file extension will be `.php`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 文件扩展名将是`.php`。
- en: This is possible because PHP scans the script file and will only run the code
    between the opening tag `(<?php` or `<?=`) and the closing tag (`?>`) when the
    closing tag is present, replacing it with the code output, if any.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为PHP会扫描脚本文件，并且只有在存在关闭标签（`?>`）时，才会运行从开标签（`<?php` 或 `<?=`）到关闭标签之间的代码，如果存在代码输出，则会将其替换。
- en: 'Exercise 1.6: Printing PHP Code Output between HTML Tags'
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.6：在HTML标签之间打印PHP代码输出
- en: 'In this exercise, we will use the built-in server to print `Hello Packt` using
    the `companyName=Packt` query string. Follow these steps:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用内置服务器通过`companyName=Packt`查询字符串打印`Hello Packt`。按照以下步骤操作：
- en: Reopen the `hello.php` file using your favorite code editor.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您最喜欢的代码编辑器重新打开`hello.php`文件。
- en: 'Replace the code with the following code and save the file:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码替换为以下代码并保存文件：
- en: '[PRE26]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, open the browser and enter the following in the address bar and hit *Enter*:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开浏览器并在地址栏中输入以下内容并按*Enter*键：
- en: '[PRE27]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You will see the following output on your screen:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将在屏幕上看到以下输出：
- en: '![Figure 1.12: Printing output to the browser'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.12：将输出打印到浏览器'
- en: '](img/C14196_01_12.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_12.jpg)'
- en: 'Figure 1.12: Printing output to the browser'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12：将输出打印到浏览器
- en: As we can see, PHP has such a degree of flexibility that it allows us to use
    parts of PHP code *inside* other types of content.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，PHP具有如此高的灵活性，它允许我们在其他类型的内容中使用PHP代码的某些部分。
- en: Let's now have a look at other predefined variables available in PHP.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看PHP中可用的其他预定义变量。
- en: Using the Server Variable
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用服务器变量
- en: '`$_SERVER` is an already populated predefined array made available by PHP.
    It contains information about the server and the environment. The information
    available in `$_SERVER` differs from server to server, so the fields may vary
    depending on the environment.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`$_SERVER`是由PHP提供的一个已填充的预定义数组。它包含有关服务器和环境的详细信息。`$_SERVER`中可用的信息因服务器而异，因此字段可能根据环境而有所不同。'
- en: 'Exercise 1.7: Displaying Server Information'
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.7：显示服务器信息
- en: 'In this exercise, we will use `$_SERVER` to print the server information to
    the browser. Follow these steps:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用`$_SERVER`将服务器信息打印到浏览器。按照以下步骤操作：
- en: Go to the `chapter1` folder.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`chapter1`文件夹。
- en: Create a new file named `server.php` in the folder.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件夹中创建一个名为`server.php`的新文件。
- en: 'Write the following PHP code in the file and save it:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下PHP代码写入文件并保存：
- en: '[PRE28]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Open your browser and type the following URL in the address bar:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器并在地址栏中输入以下URL：
- en: '[PRE29]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You will see a screen like the following:'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到以下屏幕：
- en: '![Figure 1.13: Printing details to the browser'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.13：将详细信息打印到浏览器'
- en: '](img/C14196_01_13.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_13.jpg)'
- en: 'Figure 1.13: Printing details to the browser'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13：将详细信息打印到浏览器
- en: In the preceding code, we used the `print_r` statement to print the contents
    of `$_SERVER`. Since it is an array containing multiple entries, we used PHP's
    `print_r` function instead of `echo` to display its contents. The `pre` tags above
    and below it separates each item out on to a new line, making it easier to read.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了`print_r`语句来打印`$_SERVER`的内容。由于它是一个包含多个条目的数组，我们使用了PHP的`print_r`函数而不是`echo`来显示其内容。上面的`pre`标签和下面的`pre`标签将每个项目分开到新的一行，使其更容易阅读。
- en: In the browser, we can see that it has printed a lot of information. We have
    port information, file locations, and many other fields. As mentioned earlier,
    the information on your system may vary.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，我们可以看到它打印了大量的信息。我们有端口信息、文件位置以及许多其他字段。如前所述，系统信息可能因环境而异。
- en: Other Predefined Variables
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他预定义变量
- en: 'Here are some often-used predefined variables and their usage:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些常用预定义变量及其用法：
- en: '`$_POST`: We used `$_GET` earlier in this chapter. `$_POST` is similar, but
    with one difference. `$_GET` fetches you the values from a query string, whereas
    `$_POST` contains the data from a form on any PHP page. You will use it more in
    later chapters.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$_POST`: 我们在本章前面使用了`$_GET`。`$_POST`与此类似，但有一个区别。`$_GET`从查询字符串中获取值，而`$_POST`包含任何
    PHP 页面上的表单数据。你将在后面的章节中更多地使用它。'
- en: '`$_FILES`: If a file is uploaded from a form on a page, its information is
    available in the `$_FILES` array.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$_FILES`: 如果从页面上的表单上传文件，其信息将可在`$_FILES`数组中找到。'
- en: '`$_COOKIE`: This allows basic text information to be stored as a cookie on
    the client''s browser to be saved for later. A common example of this is if you
    log in to a website and tick `Remember me`, a cookie will be saved on the browser,
    which will be read on the next visit.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$_COOKIE`: 这允许将基本文本信息作为 cookie 存储在客户端的浏览器上以供以后使用。一个常见的例子是，如果你登录到一个网站并勾选“记住我”，浏览器上会保存一个
    cookie，下次访问时会读取它。'
- en: '`$_REQUEST`: This contains the combined information of `$_GET`, `$_POST`, and
    `$_COOKIE`.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$_REQUEST`: 它包含`$_GET`、`$_POST`和`$_COOKIE`的合并信息。'
- en: '`$_SESSION`: These are session variables that are used to maintain state in
    the application. They allow values to be saved in memory for the duration of a
    session. This could be a username that is saved and displayed on the page while
    the session exists.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$_SESSION`: 这些是用于在应用程序中维护状态的会话变量。它们允许在会话期间将值保存在内存中。这可以是会话存在期间保存并显示在页面上的用户名。'
- en: '`$GLOBALS`: This contains all variables that are available to a script. It
    includes variables, data from `$_GET`, `$_POST`, any file upload data, session
    info, and cookie information.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$GLOBALS`: 它包含所有对脚本可用的变量。它包括变量、`$_GET`、`$_POST`中的数据、任何文件上传数据、会话信息和 cookie
    信息。'
- en: Assignment by Value and by Reference
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按值赋值和按引用赋值
- en: 'It is very important to be aware of different ways in which values can be assigned
    to a variable. In PHP, there are two ways to do it: assignment by value and assignment
    by reference. Let''s look at each of these one by one.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要意识到将值赋给变量的不同方式。在 PHP 中，有两种方法：按值赋值和按引用赋值。让我们逐一查看这些方法。
- en: 'Assignment by reference means assigning a reference of a variable using an
    ampersand with a variable like this: `$var = &$othervar;`. Assignment by reference
    means that both variables end up pointing at the same data, and nothing is copied
    anywhere.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 按引用赋值意味着使用一个变量（如`$var = &$othervar;`）的 ampersand 来赋值。按引用赋值意味着两个变量最终都指向相同的数据，并且任何地方都没有复制任何内容。
- en: Assignment by value means a value will be assigned to a new variable but has
    no reference back to any other variables. It's a standalone variable with a value.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 按值赋值意味着将值赋给一个新变量，但没有引用回任何其他变量。它是一个具有值的独立变量。
- en: 'Exercise 1.8: Assigning a Variable by Reference and Changing its Value'
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.8：按引用赋值并更改其值
- en: 'In this exercise, we will assign a variable by reference. Then, we will change
    the other variable''s value and ensure that the original variable''s value has
    also changed. Follow these steps:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将按引用赋值一个变量。然后，我们将更改另一个变量的值，并确保原始变量的值也发生了变化。请按照以下步骤操作：
- en: Move inside the `chapter1` folder on your system.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的系统中的`chapter1`文件夹移动到内部。
- en: Create a new file named `assignment.php` in this folder.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件夹中创建一个名为`assignment.php`的新文件。
- en: 'First, we will declare a `$animal1` variable and assign the value `Cat` to
    it. Then, we declare another variable, `$animal2`, and assign the `$animal1` variable
    to it. This means that the value of `$animal1` is copied to the `$animal2` variable.
    We then confirm this by echoing both variables in line 10, where we see that both
    variables have the value `Cat`:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将声明一个`$animal1`变量并将值`Cat`赋给它。然后，我们声明另一个变量`$animal2`并将`$animal1`变量赋给它。这意味着`$animal1`的值被复制到`$animal2`变量中。我们通过在第
    10 行回显这两个变量来确认这一点，我们看到两个变量都有值`Cat`：
- en: '[PRE30]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, when we write `$animal2 = ''Dog''`, we change the value of the `$animal2`
    variable to `Dog` and then again print both the variables. Now, we can see that
    although the value of `$animal2` has changed, it did not have any effect on `$animal1`.
    This is what we call assignment by value. The value is just copied from one variable
    to the other, and both variables remain independent:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当我们写下 `$animal2 = 'Dog'` 时，我们更改了 `$animal2` 变量的值为 `Dog`，然后再次打印这两个变量。现在，我们可以看到尽管
    `$animal2` 的值已更改，但它对 `$animal1` 没有任何影响。这就是我们所说的按值赋值。值只是从一个变量复制到另一个变量，两个变量保持独立：
- en: '[PRE31]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now, let's look at assignment by reference. "By reference" means that the new
    variable becomes an alias of the older variable. Hence, changing the value of
    the new variable changes the value of the older variable.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们看看按引用赋值。按引用意味着新变量成为旧变量的别名。因此，更改新变量的值会更改旧变量的值。
- en: 'Now, we will declare another variable, `$animal3`, with the value set to `Elephant`.
    Next, we create a new variable, `$animal4`, and assign the value of the `$animal3`
    variable to it. While doing the assignment, note the ampersand (`&`) before the
    variable name. This ampersand tells PHP to assign the `$animal4` variable to the
    `$animal3` variable by reference. In the code, we will verify the value of both
    the variables by printing values of both variables, and they are the same:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将声明另一个变量 `$animal3`，并将其值设置为 `Elephant`。接下来，我们创建一个新的变量 `$animal4`，并将 `$animal3`
    变量的值赋给它。在赋值过程中，注意变量名前的 ampersand (`&`)。这个 ampersand 告诉 PHP 通过引用将 `$animal4` 变量赋给
    `$animal3` 变量。在代码中，我们将通过打印两个变量的值来验证这两个变量的值，它们是相同的：
- en: '[PRE32]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To see assignment by reference in action, we change the value of `$animal4`
    to `Giraffe`. After this, we print both variables again and can see clearly that
    changing the value of `$animal4` has changed the value of `$animal3` as well:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看按引用赋值的实际效果，我们将 `$animal4` 的值更改为 `Giraffe`。之后，我们再次打印这两个变量，可以清楚地看到更改 `$animal4`
    的值也改变了 `$animal3` 的值：
- en: '[PRE33]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, open the browser and point to our file by opening this URL:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开浏览器并通过打开此 URL 定位到我们的文件：
- en: '[PRE34]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You should see a screen like this:'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到一个像这样的屏幕：
- en: '![Figure 1.14: Printing output to the browser'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.14：打印输出到浏览器]'
- en: '](img/C14196_01_14.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 C14196_01_14.jpg](img/C14196_01_14.jpg)'
- en: 'Figure 1.14: Printing output to the browser'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：打印输出到浏览器
- en: Unless specified, variables are always assigned by value in PHP.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 中，除非指定，否则变量总是按值赋值。
- en: Using isset to Check for Variable Declaration
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 isset 检查变量声明
- en: At times, we need to check whether a variable has been set, especially in cases
    where there is some user input from a form, and we need to verify it before saving
    it to the database. `isset` is a built-in PHP function that returns `true` for
    declared variables with values other than `null`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要检查变量是否已设置，尤其是在有来自表单的用户输入的情况下，我们需要在将其保存到数据库之前进行验证。`isset` 是一个内置的 PHP 函数，对于声明且值不为
    `null` 的变量返回 `true`。
- en: Null data types are used when a variable has no value.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个变量没有值时，使用空数据类型。
- en: Let's do an exercise.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个练习。
- en: 'Exercise 1.9: Using isset to Check whether a Variable Has Been Set'
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.9：使用 isset 检查变量是否已设置
- en: 'In this exercise, we will use PHP''s `isset` function to check whether a variable
    has been set. Follow these steps:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用 PHP 的 `isset` 函数来检查变量是否已设置。按照以下步骤操作：
- en: Go to the `chapter1` folder on your system.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的系统上的 `chapter1` 文件夹。
- en: Create a new file named `isset.php`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `isset.php` 的新文件。
- en: 'Write the following code in `isset.php` and save the file:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `isset.php` 文件中写下以下代码并保存文件：
- en: '[PRE35]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now, run the built-in PHP web server using the `php -S localhost:8085` command.
    Make sure that you are in the `chapter1` folder.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `php -S localhost:8085` 命令运行内置的 PHP 网络服务器。确保你位于 `chapter1` 文件夹中。
- en: 'Open the following URL in your browser:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开以下 URL：
- en: '[PRE36]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should see a screen like this:'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到一个像这样的屏幕：
- en: '![Figure 1.15: Printing the output'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.15：打印输出]'
- en: '](img/C14196_01_15.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 C14196_01_15.jpg](img/C14196_01_15.jpg)'
- en: 'Figure 1.15: Printing the output'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：打印输出
- en: '`var_dump` is a built-in PHP function that is used to print a variable''s value
    and type. It''s useful to see the contents of a variable and also what data type
    it contains. You can then make decisions about how to work with the variable based
    on this information.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`var_dump` 是一个内置的 PHP 函数，用于打印变量的值和类型。它有助于查看变量的内容以及它包含的数据类型。然后，你可以根据这些信息做出如何处理变量的决定。'
- en: '`isset` is a built-in PHP function that determines whether a variable is declared
    and is different to `NULL`.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`isset` 是一个内置的 PHP 函数，用于确定一个变量是否已声明且与 `NULL` 不同。'
- en: In the preceding code, we have declared two variables, `$name1` and `$name2`.
    `$name1` is an empty string and `$name2` is set to `null`. `$name3` is not declared.
    Then, we use PHP's `var_dump` function to print `$name1`, `$name2`, and `$name3`.
    Since PHP does not require declaring variables, we can use `$name3`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们声明了两个变量，`$name1` 和 `$name2`。`$name1` 是一个空字符串，`$name2` 被设置为 `null`。`$name3`
    没有被声明。然后，我们使用 PHP 的 `var_dump` 函数来打印 `$name1`、`$name2` 和 `$name3`。由于 PHP 不需要声明变量，我们可以使用
    `$name3`。
- en: On printing the values, we can see that the `isset` function returned true for
    `$name1`, which means a valid value is set for `$name1`. This is because `$name1`
    has a valid value – an empty string. But it is returning `false` for `$name2`
    because it is set to `null`, meaning that `$name2` is not set.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印值时，我们可以看到 `isset` 函数对 `$name1` 返回了 `true`，这意味着为 `$name1` 设置了一个有效的值。这是因为 `$name1`
    有一个有效的值——一个空字符串。但它对 `$name2` 返回 `false`，因为它被设置为 `null`，这意味着 `$name2` 没有被设置。
- en: Lastly, we dumped info about an undeclared variable, `$name3`. Since this is
    not declared at all, the `isset` function returned `false`, meaning this variable
    is also not set.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们输出了关于未声明的变量 `$name3` 的信息。由于这个变量根本未声明，`isset` 函数返回 `false`，这意味着这个变量也没有被设置。
- en: '`isset` is a handy function, and you will be using it a lot when working with
    data.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`isset` 是一个很有用的函数，当您处理数据时将会大量使用它。'
- en: A related function to `isset` is `unset`, which clears the value of a variable.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `isset` 相关的函数是 `unset`，它清除变量的值。
- en: 'Activity 1.1: Displaying Query Strings in the Browser'
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 1.1：在浏览器中显示查询字符串
- en: In this activity, we will apply the knowledge gained from the earlier exercises
    and use variables to retrieve query strings from a URL and print the relevant
    information to the browser.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将应用从早期练习中获得的知识，并使用变量从 URL 中检索查询字符串并将相关信息打印到浏览器中。
- en: 'You will create a simple application that allows users to view movie information
    in the browser. Once you complete the activity, you should have an output similar
    to the following:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建一个简单的应用程序，允许用户在浏览器中查看电影信息。一旦完成活动，您应该得到以下类似的输出：
- en: '![Figure 1.16: Expected outcome'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.16：预期结果'
- en: '](img/C14196_01_16.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_16.jpg)'
- en: 'Figure 1.16: Expected outcome'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：预期结果
- en: 'These steps will help you complete the activity:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将帮助您完成活动：
- en: Create a file named `movies.php`.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `movies.php` 的文件。
- en: Capture query string data in the file to store the details of the movies, such
    as movie names, actor/actress names, and release year.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中捕获查询字符串数据以存储电影的详细信息，例如电影名称、演员/女演员名称和发行年份。
- en: Create a basic HTML structure and then display the captured query strings.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个基本的 HTML 结构，然后显示捕获的查询字符串。
- en: Go to the Terminal and execute the command to start the built-in web server.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往终端并执行命令以启动内置的 web 服务器。
- en: After the web server is up and running, open the PHP page and append your query
    strings to the URL in your browser.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 web 服务器启动并运行后，打开 PHP 页面，并在浏览器中的 URL 后附加您的查询字符串。
- en: Note
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 502.
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以在第 502 页找到。
- en: Summary
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what PHP is and where it stands in the market today.
    We also explored PHP's built-in templating engine and the interactive shell. The
    templating engine allows us to mix PHP and HTML in the same file. Then, using
    Terminal, we learned that we can run a PHP script using its built-in web server,
    which allows the output of a script to be viewed in a browser by going to the
    server's IP address (localhost in this case) and filename.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 PHP 是什么以及它在当今市场的地位。我们还探讨了 PHP 的内置模板引擎和交互式外壳。模板引擎允许我们在同一文件中混合 PHP
    和 HTML。然后，使用终端，我们了解到我们可以通过内置的 web 服务器运行 PHP 脚本，这样我们就可以通过访问服务器的 IP 地址（在本例中为 localhost）和文件名来在浏览器中查看脚本的输出。
- en: We learned how to create and assign variables – by value and by reference. We
    also saw how to use PHP's predefined variables and how they are used.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何创建和分配变量——通过值和通过引用。我们还看到了如何使用 PHP 的预定义变量以及它们是如何被使用的。
- en: Finally, we learned how to run PHP's built-in web server and use query strings
    in our code. Appending data to the query string allowed us to pass extra data
    to the PHP script, where it could be displayed or modified by the script.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何运行 PHP 的内置 web 服务器并使用查询字符串在我们的代码中。将数据附加到查询字符串允许我们向 PHP 脚本传递额外的数据，脚本可以在其中显示或修改这些数据。
- en: In the next chapter, we will take a look at different types used in PHP programming.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 PHP 编程中使用的不同类型。
