- en: Chapter 10. Working with Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 处理图片
- en: 'In this chapter, you will learn:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Installing ImageMagick on MAC with Cactuslab
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MAC上使用Cactuslab安装ImageMagick
- en: Uploading images with CodeIgniter
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CodeIgniter上传图片
- en: Generating thumbnails – resizing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成缩略图 – 调整大小
- en: Rotating images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转图片
- en: Cropping images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 裁剪图片
- en: Adding watermarks with text
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文字添加水印
- en: Adding watermarks with image overlays
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图像叠加添加水印
- en: Submitting a form with CodeIgniter CAPTCHA
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CodeIgniter CAPTCHA提交表单
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: CodeIgniter has a useful array of tools to help you manipulate and amend images
    in the form of the image manipulation class; it's not Photoshop, but it's good
    enough for most of what you'll need to do in your day-to-day web development.
    It has functionalities to help you upload images, resize them, create thumbnails,
    add watermarks, crop, and rotate—all very useful things and exactly what you'll
    be after in a development environment. Here's how to do it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter提供了一系列有用的工具来帮助你以图像处理类的方式操作和修改图片；它不是Photoshop，但对于日常Web开发中的大多数需求来说已经足够好了。它具有帮助您上传图片、调整大小、创建缩略图、添加水印、裁剪和旋转的功能——这些都是非常有用的事情，正是你在开发环境中所追求的。以下是操作方法。
- en: Installing ImageMagick on MAC with Cactuslab
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MAC上使用Cactuslab安装ImageMagick
- en: Some of the features of the CodeIgniter image manipulation class require GD2,
    however, other features require ImageMagick. If you're using MAMP on MAC, then
    the chances are that you won't have it installed by default. Cactuslab have produced
    an installer that does the job for you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter图像处理类的某些功能需要GD2，然而，其他功能需要ImageMagick。如果你在MAC上使用MAMP，那么默认情况下你很可能没有安装它。Cactuslab已经制作了一个安装程序，它会为你完成这项工作。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Go to the URL [http://www.cactuslab.com/imagemagick](http://www.cactuslab.com/imagemagick).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问URL [http://www.cactuslab.com/imagemagick](http://www.cactuslab.com/imagemagick)。
- en: Download the installer. At the time of writing this, the latest version is ImageMagick
    6.8.6-3 for Mac OS X 10.5 - 10.8.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载安装程序。在撰写本文时，最新版本是适用于Mac OS X 10.5 - 10.8的ImageMagick 6.8.6-3。
- en: 'Run the installer, and if all goes well, you should now have ImageMagick installed.
    You''ll need to set the `$config[''library_path'']` value to `/opt/ImageMagick/bin`,
    as follows:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序，如果一切顺利，你现在应该已经安装了ImageMagick。你需要将`$config['library_path']`的值设置为`/opt/ImageMagick/bin`，如下所示：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The installer takes care of everything for you: it''s voodoo!'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序会为你处理所有事情：这是巫术！
- en: Uploading images with CodeIgniter
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CodeIgniter上传图片
- en: This is similar to the file upload recipe mentioned earlier in the book; however,
    it differs from it, as we're making CodeIgniter upload images (rather than upload
    any file type) and perform specific tasks on images, which wouldn't be relevant
    to the other upload example in the book. Hence, consider this as a separate upload
    script. This script is the base script for the other recipes (apart from the CAPTCHA
    recipe) in this chapter—that is to say that the rotating, watermarking, resizing
    recipes and so on require this base recipe to function.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这与书中前面提到的文件上传配方类似；然而，它与它不同，因为我们正在使CodeIgniter上传图片（而不是上传任何文件类型）并在图片上执行特定任务，这些任务与书中其他上传示例不相关。因此，请将其视为一个单独的上传脚本。此脚本是该章中其他配方的基础脚本（除了CAPTCHA配方之外），也就是说，旋转、水印、调整大小等配方需要此基础脚本才能运行。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following two files:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下两个文件：
- en: '`/path/to/codeigniter/application/controllers/upload.php`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/upload.php`'
- en: '`/path/to/codeigniter/application/views/upload/upload.php`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/upload/upload.php`'
- en: 'Create the controller file, `upload.php`, and add the following code to it:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制器文件，`upload.php`，并将以下代码添加到其中：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the `/path/to/codeigniter/application/views/upload/upload.php` file
    and add the following code to it:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/views/upload/upload.php`文件，并将以下代码添加到其中：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the `upload` controller is run in the browser the user is presented with
    the form (which is in the view file `views/ipload/upload.php`). The user selects
    an image and presses the **Submit** button public function `do_upload()` is then
    called. We immediately define some settings which the image being uploaded is
    checked against, such as allowed image types, maximum size and dimensions, these
    are:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中运行`upload`控制器时，用户会看到表单（该表单位于视图文件`views/ipload/upload.php`中）。用户选择一个图片并按下**提交**按钮，然后调用公共函数`do_upload()`。我们立即定义一些设置，上传的图片将根据这些设置进行检查，例如允许的图片类型、最大大小和尺寸，这些是：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the image being uploaded meets these requirements, the image can be moved
    to the location specified in `$config['upload_path']` where it is stored, ready
    should you need it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上传的图片符合这些要求，图片可以被移动到由 `$config['upload_path']` 指定的地方进行存储，以便在需要时使用。
- en: Generating thumbnails – resizing
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成缩略图 – 调整大小
- en: Obviously having the functionality to generate thumbnails is a useful thing
    to do. Most web developers have had the requirement to create thumbnails of images
    they are currently uploading, or images previously uploaded, from time to time.
    Usually that processing would have been done directly with PHP or whichever programming
    language you may have been using; but CodeIgniter gives you the ability to create
    thumbnails easily, and this is how you do it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，拥有生成缩略图的功能是非常有用的。大多数网络开发者都曾有过在当前上传的图片或之前上传的图片中生成缩略图的需求。通常，这种处理会直接使用 PHP 或你可能使用的任何编程语言来完成；但
    CodeIgniter 给你提供了轻松创建缩略图的能力，这就是你如何做到的。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用自己的库来完成这项工作。如果你还没有这样做（在本章的其他菜谱中），创建以下文件：
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Ensure that the `Image_manip` library class is defined as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保按照以下方式定义 `Image_manip` 库类：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Also ensure that you have the image library, GD2, installed and that you have
    this chapter's "base" recipe—that is *Uploading images with CodeIgniter*—already
    copied and ready to go, as this recipe uses the code from *Uploading images with
    CodeIgniter* as a base recipe.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要确保你已经安装了图像库 GD2，并且已经复制并准备好了本章的“基础”菜谱——即 *使用 CodeIgniter 上传图片*——因为本菜谱使用 *使用
    CodeIgniter 上传图片* 的代码作为基础菜谱。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We’re going to amend the following files from the previous recipe, *Uploading
    images with CodeIgniter*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改之前菜谱中的以下文件，*使用 CodeIgniter 上传图片*：
- en: '`/path/to/codeigniter/application/controllers/upload.php`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/upload.php`'
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this code snippet:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行（粗体）添加到构造函数中，使整个构造函数看起来像以下代码片段：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alter the `do_upload()` function, changing it to reflect the following:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `do_upload()` 函数，将其更改为以下内容：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Amend the `image_manip` library to add the following function:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `image_manip` 库，添加以下函数：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the `upload` controller is run in the browser the user is presented with
    the form (which is in the view file `views/ipload/upload.php`). The user selects
    an image and presses the **Submit** button after which `public function do_upload()`
    is called. We immediately define some settings against which the image being uploaded
    is checked, such as allowed image types, maximum size and dimensions - just as
    we would in the *Uploading images with CodeIgniter* recipe. Assuming that the
    upload was successful and there were no errors we call the `resize_image()`function
    in the `image_manip` library:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中运行 `upload` 控制器时，用户会看到一个表单（该表单位于视图文件 `views/ipload/upload.php` 中）。用户选择一张图片，然后按下
    **提交** 按钮，之后调用 `public function do_upload()`。我们立即定义一些设置，用于检查上传的图片，例如允许的图片类型、最大尺寸和维度——就像我们在
    *使用 CodeIgniter 上传图片* 菜谱中所做的那样。假设上传成功且没有错误，我们调用 `image_manip` 库中的 `resize_image()`
    函数：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `resize_image()` function grabs the main CodeIgniter object in `$CI` and
    loads its own `image_lib` library, as shown in the following code snippet:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`resize_image()` 函数获取主 CodeIgniter 对象 `$CI` 并加载其自己的 `image_lib` 库，如下面的代码片段所示：'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `image_lib` library will be used by CodeIgniter to perform the changes on
    the image using the parameters we provided in the `$data` array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`image_lib` 库将由 CodeIgniter 使用，通过我们在 `$data` 数组中提供的参数对图片进行更改。'
- en: 'We call `$CI->image_lib->resize()`, testing for a returned `TRUE` value. If
    it returns `FALSE`, we then return any error messages from the operation. Otherwise,
    a thumbnail has been created, as shown in the following code snippet:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用 `$CI->image_lib->resize()`，检查返回的 `TRUE` 值。如果返回 `FALSE`，我们则返回操作中的任何错误消息。否则，将创建一个缩略图，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Rotating images
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转图片
- en: CodeIgniter allows for the rotation of images; this is useful if you need to
    flip something vertically or in any other direction. Here's how it's done.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter允许旋转图片；如果你需要垂直或任何其他方向的翻转，这很有用。以下是操作方法。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用我们自己的库来完成这个任务。如果你还没有这样做（在本章的其他菜谱中），创建以下文件：
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Ensure that the `image_manip` library class is defined as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将`image_manip`库类定义为以下形式：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Also ensure that you have the image library, ImageMagik, installed that you
    have this chapter's "base" recipe—that is *Uploading images with CodeIgniter*—already
    copied and ready to go, as this recipe uses the code from *Uploading images with
    CodeIgniter* as a base recipe.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要确保你已经安装了图像库ImageMagik，并且已经将本章的“基础”菜谱——即*使用CodeIgniter上传图片*——复制并准备好，因为这个菜谱使用*使用CodeIgniter上传图片*的代码作为基础菜谱。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to amend the following two files:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要修改以下两个文件：
- en: '`/path/to/codeigniter/application/controllers/upload.php`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/upload.php`'
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Add the following function to the `image_manip.php` library file:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下函数添加到`image_manip.php`库文件中：
- en: '[PRE12]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行（加粗）添加到构造函数中，使整个构造函数看起来如下：
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Alter the `do_upload()` function, changing it to reflect the following:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`do_upload()`函数，将其修改为以下内容：
- en: '[PRE14]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the upload controller is run in the browser the user is presented with
    the form (which is in the view `views/ipload/upload.php` file) . The user selects
    an image and presses the **Submit** button, `public function do_uplaod()` is then
    called. We immediately define some settings against which the image being uploaded
    is checked, such as allowed image types, maximum size, and dimensions—just as
    we would in the *Uploading images with CodeIgniter* recipe. Assuming that the
    upload was successful and there were no errors, we fetch `full_path` from the
    upload data:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中运行上传控制器时，用户会看到一个表单（该表单位于视图`views/ipload/upload.php`文件中）。用户选择一个图片并点击**提交**按钮，然后调用`public
    function do_uplaod()`。我们立即定义一些设置，用于检查上传的图片，例如允许的图片类型、最大大小和尺寸——就像我们在*使用CodeIgniter上传图片*菜谱中所做的那样。假设上传成功且没有错误，我们从上传数据中获取`full_path`：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Assign it as a local variable `$original_image`. We then define an array (`$data`)
    with all the configuration settings which CodeIgniter requires to crop the image
    (be sure to get the `library_path` correct). We pass this `$data` array to the
    library function, `rotate`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将其分配为局部变量`$original_image`。然后我们定义一个数组（`$data`），包含所有CodeIgniter需要裁剪图片的配置设置（确保获取`library_path`正确）。我们将这个`$data`数组传递给库函数`rotate`：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This performs the rotate operation on the image.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在图片上执行旋转操作。
- en: Cropping images
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 裁剪图片
- en: This is going to be most useful and relevant when coupled with a frontend mechanic,
    allowing the user to select an area of an image; however, I'm including the code
    here as you may need it. You never know!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将最有用且相关，当与前端机制结合使用时，允许用户选择图片的一个区域；然而，我包括这段代码在这里，因为你可能需要它。你永远不知道！
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用我们自己的库来完成这个任务。如果你还没有这样做（在本章的其他菜谱中），创建以下文件：
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Ensure that the `image_manip` library class is defined as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将`image_manip`库类定义为以下形式：
- en: '[PRE17]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Also ensure that you have the image library, ImageMagik, installed.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要确保你已经安装了图像库ImageMagik。
- en: Note
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you're using MAMP on a MAC, chances are that you don't have ImageMagick installed
    by default. There is a process to installing ImageMagick on MAMP; however, there's
    a quicker way. There's an installer available from Cactuslab at [http://www.cactuslab.com/imagemagick](http://www.cactuslab.com/imagemagick),
    and it works like a charm. The *Installing ImageMagick on MAC with Cactuslab*
    recipe is also available in this chapter explaining the installation process.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您在MAC上使用MAMP，那么您默认可能没有安装ImageMagick。有一个过程可以在MAMP上安装ImageMagick；然而，有一个更快的方法。Cactuslab提供了一个安装程序，网址为[http://www.cactuslab.com/imagemagick](http://www.cactuslab.com/imagemagick)，它工作得很好。本章中也有一个*使用Cactuslab在MAC上安装ImageMagick*的食谱，它解释了安装过程。
- en: Ensure that you have this chapters 'base' recipe that is *Uploading images with
    CodeIgniter* already copied and ready to go as this recipe uses the code from
    *Uploading images with CodeIgniter* as a base recipe.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经复制并准备好这个章节的“基础”食谱，即*使用CodeIgniter上传图片*，因为这个食谱使用*使用CodeIgniter上传图片*作为基础食谱。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''re going to amend the following two files:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改以下两个文件：
- en: '`/path/to/codeigniter/application/controllers/upload.php`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/upload.php`'
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行（加粗）添加到构造函数中，使整个构造函数看起来如下：
- en: '[PRE18]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Alter the do_upload() function, changing it to reflect the following:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`do_upload()`函数，改为以下内容：
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Amend the following function in the `image_manip` library:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`image_manip`库中的以下函数：
- en: '[PRE20]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the `upload` controller is run in the browser the user is presented with
    the form (which is in the view `views/ipload/upload.php` file). The user selects
    an image and presses the **Submit** button, `public function do_uplaod()` is then
    called. We immediately define some settings against which the image being uploaded
    is checked, such as allowed image types, maximum size, and dimensions—just as
    we would in the *Uploading images with CodeIgniter* recipe. Assuming that the
    upload was successful and there were no errors we fetch the `full_path` from the
    upload data:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中运行`upload`控制器时，用户会看到一个表单（位于视图`views/ipload/upload.php`文件中）。用户选择一个图片并点击**提交**按钮，然后调用`public
    function do_uplaod()`。我们立即定义一些设置，用于检查上传的图片，例如允许的图片类型、最大大小和尺寸——就像我们在*使用CodeIgniter上传图片*食谱中所做的那样。假设上传成功且没有错误，我们从上传数据中获取`full_path`：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We assign it as a local variable, `$original_image`. We then define an array
    (`$data`) with all the configuration settings which CodeIgniter requires to crop
    the image (be sure to get the `library_path` variable correct). We pass this `$data`
    array to the library function, `crop_image`, as shown in the following code snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其分配为一个局部变量`$original_image`。然后我们定义一个数组`$data`，包含所有CodeIgniter要求裁剪图片的配置设置（确保获取`library_path`变量正确）。我们将这个`$data`数组传递给库函数`crop_image`，如下面的代码片段所示：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This performs the cropping operation on the image.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在图片上执行裁剪操作。
- en: Potential errors
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可能的错误
- en: 'You may see some or all (or perhaps entirely different) error messages while
    coding this recipe. The following are some of those errors and possible solutions
    (if all else fails, Google it):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写这个食谱的过程中，您可能会看到一些或所有（或者可能是完全不同的）错误信息。以下是一些错误及其可能的解决方案（如果其他方法都失败了，请尝试Google搜索）：
- en: '**Error**: Image processing failed. Please verify that your server supports
    the chosen protocol and that the path to your image library is correct.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误**：图片处理失败。请验证您的服务器支持所选协议，并且您的图片库路径正确。'
- en: '**Possible Solution**: It may be that the path to your image library is incorrect
    or that the configuration settings for the image library are wrong. Verify that
    you have the correct library installed and that the path is correct. To do this,
    perform the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**可能的解决方案**：可能是您的图片库路径不正确或图片库的配置设置错误。请验证您是否安装了正确的库并且路径正确。为此，请执行以下步骤：'
- en: Type `cd /usr/X11R6/bin` in your terminal.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中输入`cd /usr/X11R6/bin`。
- en: Then type `ls` (or `dir` on Windows).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后输入`ls`（或者在Windows上输入`dir`）。
- en: Look for the ImageMagick library there. If you cannot see it, then it's probably
    not installed, and you'll need to install it to be able to perform the cropping
    operation.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那里寻找ImageMagick库。如果您看不到它，那么它可能尚未安装，您需要安装它才能执行裁剪操作。
- en: How do you install ImageMagick? Well, there are many instructions and tutorials
    on the Internet which can help. However, if you're using MAMP, go to the *Installing
    ImageMagick on MAC with Cactuslab* recipe in this chapter and use the installer
    to help that can install ImageMagick and do the leg work of the configuration.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何安装ImageMagick？嗯，互联网上有许多说明和教程可以帮助你。然而，如果你使用MAMP，请访问本章中的*在MAC上使用Cactuslab安装ImageMagick*配方，并使用安装程序来帮助安装ImageMagick并完成配置工作。
- en: However be aware that the library path won't be `/use/X11R6/bin/` (with the
    trailing slash) like it is in the CodeIgniter documentation; it will be `/opt/ImageMagick/bin`
    (without the trailing slash).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，库路径不会像CodeIgniter文档中那样是`/use/X11R6/bin/`（带有尾随斜杠），而是`/opt/ImageMagick/bin`（不带尾随斜杠）。
- en: Adding watermarks with text
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用文本添加水印
- en: Adding a watermark can be a useful way to tag images with your copyright (just
    make sure you're the copyright owner). CodeIgniter comes with an easy method to
    apply a watermark to an image. Watermarks can be either text or an image overlay
    and can be positioned on an original image at any position you wish. The following
    is a description of how to add text watermarks.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 添加水印可以是一个有用的方式来标记图片上的版权（只是确保你是版权所有者）。CodeIgniter提供了一个简单的方法来给图片添加水印。水印可以是文本或图像叠加，并且可以放置在原始图片的任何位置。以下是如何添加文本水印的描述。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们自己的库来完成这项工作。如果您还没有这样做（在本章的其他配方中），请创建以下文件：
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Ensure that the `image_manip` library class is defined as follows:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将`image_manip`库类定义为以下形式：
- en: '[PRE23]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Also ensure that you have the image library, GD2, installed.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要确保您已经安装了图像库，GD2。
- en: Ensure that you have this chapters base recipe that is *Uploading images with
    CodeIgniter* already copied and ready to go as this recipe uses the code from
    *Uploading images with CodeIgniter* as a base recipe.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已经复制并准备好了本章的基础配方*使用CodeIgniter上传图片*，因为这个配方使用*使用CodeIgniter上传图片*作为基础配方。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We''re going to amend the following two files:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改以下两个文件：
- en: '`/path/to/codeigniter/application/controllers/uplod.php`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/uplod.php`'
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Add the following function to the `image_manip.php` library file:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下函数添加到`image_manip.php`库文件中：
- en: '[PRE24]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行（加粗）添加到构造函数中，使整个构造函数看起来如下：
- en: '[PRE25]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Alter the `do_upload()` function, changing it to reflect the following:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`do_upload()`函数，将其更改为以下内容：
- en: '[PRE26]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'When the `upload` controller is run in the browser the user is presented with
    the form (which is in the view file `views/ipload/upload.php`). The user selects
    an image and presses the **Submit** button, `public function do_uplaod()` is then
    called. We immediately define some settings against which the image being uploaded
    is checked, such as allowed image types, maximum size and dimensions just as we
    would in the *Uploading images with CodeIgniter* recipe. Assuming that the upload
    was successful and there were no errors we fetch the `full_path` from the upload
    data:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中运行`upload`控制器时，用户会看到一个表单（该表单位于视图文件`views/ipload/upload.php`中）。用户选择一张图片并点击**提交**按钮，随后调用`public
    function do_uplaod()`。我们立即定义一些设置，用于检查上传的图片，例如允许的图片类型、最大尺寸和维度，就像我们在*使用CodeIgniter上传图片*配方中所做的那样。假设上传成功且没有错误，我们从上传数据中获取`full_path`：
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Assign it as a local variable, `$original_image`. Next, we''ll define an array
    (`$data`) with all the necessary settings to allow CodeIgniter to perform a watermark
    overlay on our uploaded image. There are a couple of interesting settings I''ll
    go through in the following table:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将其分配为局部变量，`$original_image`。接下来，我们将定义一个数组（`$data`），包含所有必要的设置，以允许CodeIgniter在我们的上传图片上执行水印叠加。以下表格中我将介绍一些有趣的设置：
- en: '| Setting | Options | How we''re applying it |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 选项 | 我们如何应用它 |'
- en: '| --- | --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `wm_type` | `text`, `overlay` | In this recipe, it''s set to text, which
    tells CodeIgniter that it has to write text over the image, rather than call an
    image as the overlay. In the next recipe, we''ll look at overlay watermarking.
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `wm_type` | `text`, `overlay` | 在这个菜谱中，它设置为text，这告诉CodeIgniter它必须在图像上写文本，而不是调用图像作为叠加。在下一个菜谱中，我们将查看叠加水印。|'
- en: '| `wn_vrt_alignment` | `top`, `middle`, `bottom` | We''re telling CodeIgniter
    that it should place the text towards the middle of the uploaded image. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `wn_vrt_alignment` | `top`, `middle`, `bottom` | 我们告诉CodeIgniter它应该将文本放置在上传图像的中间。|'
- en: '| `wn_hor_alignment` | `left`, `center`, `right` | We''re telling CodeIgniter
    that it should place the text towards the left of the uploaded image. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `wn_hor_alignment` | `left`, `center`, `right` | 我们告诉CodeIgniter它应该将文本放置在上传图像的左侧。|'
- en: '| `wm_font_color` | Any hexadecimal value (see the following tip for a useful
    URL) | We''re writing the text as white for no other reason than the image I used
    to test this code on was quite dark—a romantic sunset (ahh)—but you can of course
    change it to any hexadecimal value you wish. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `wm_font_color` | 任何十六进制值（有关有用URL的提示，请参阅以下内容） | 我们将文本写成白色，没有其他原因，只是因为我用来测试这段代码的图像相当暗——一个浪漫的日落（啊）——但您当然可以将其更改为您想要的任何十六进制值。|'
- en: '| `wm_font_path` | `./system/fonts/texb.ttf` | This is the font which comes
    with CodeIgniter; it''s a bit industrial and you may want to change it for another,
    either copy a different true type font into the `./system/fonts/` directory, or
    link to one outside that directory. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `wm_font_path` | `./system/fonts/texb.ttf` | 这是CodeIgniter附带的自带字体；它有点工业风格，您可能想更换另一个，要么将不同的真型字体复制到`./system/fonts/`目录中，要么链接到该目录之外的字体。|'
- en: 'The following URL has a list of hexadecimal color values: [http://www.w3schools.com/html/html_colors.asp](http://www.w3schools.com/html/html_colors.asp).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下URL有一个十六进制颜色值的列表：[http://www.w3schools.com/html/html_colors.asp](http://www.w3schools.com/html/html_colors.asp)。
- en: Adding watermarks with image overlays
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加图像叠加水印
- en: CodeIgniter can add watermarks with text as detailed in the preceding recipe,
    but CodeIgniter can also by overlaying a watermark image on top of a base image.
    Here's how it's done…
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter可以根据前面的菜谱以文本形式添加水印，但CodeIgniter还可以通过在基础图像上叠加水印图像来实现。以下是操作方法...
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用自己的库来完成这个任务。如果您还没有这样做（在本章的其他菜谱中），请创建以下文件：
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Ensure that the `image_manip` library class is defined as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将`image_manip`库类定义为以下内容：
- en: '[PRE28]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This recipe is based on the *Adding watermarks with text* recipe. Make sure
    you have followed that recipe first. We're going to make a few code changes to
    it to help us with watermark overlays.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个菜谱基于*添加文本水印*菜谱。请确保您已经遵循了那个菜谱。我们将对其进行一些代码更改，以帮助我们实现水印叠加。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''re going to amend the following files:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要修改以下文件：
- en: '`/path/to/codeigniter/application/controllers/uplod.php`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/uplod.php`'
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/image_manip.php`'
- en: 'Add the following function to the library file `image_manip.php`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下函数添加到库文件`image_manip.php`中：
- en: '[PRE29]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行（加粗）添加到构造函数中，以便整个构造函数看起来像这样：
- en: '[PRE30]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Alter the `do_upload()` function, changing it to reflect the following:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`do_upload()`函数，将其更改为以下内容：
- en: '[PRE31]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is the same basic functionality as the *Adding watermarks with text* recipe.
    However, instead of the `wm_type` being `text`, we have set it to `overlay`. We
    have added the config array item, `wm_overlay_path`, and set it to where we have
    the overlay image stored (in this case, we have placed the overlay image in the
    same folder as the uploads; of course, you can move it anywhere on your system,
    but it's here to keep it simple). We have also removed the array item, `wm_text`,
    which is now not needed (however, you can keep it if you wish, it'll not interfere
    with the image overlay).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这与*添加文本水印*菜谱的基本功能相同。然而，与`wm_type`设置为`text`不同，我们将其设置为`overlay`。我们添加了配置数组项`wm_overlay_path`，并将其设置为存储叠加图像的位置（在这种情况下，我们将叠加图像放置在上传文件夹中；当然，您可以在系统上的任何位置移动它，但这里是为了保持简单）。我们还删除了数组项`wm_text`，现在它不再需要（然而，如果您愿意，可以保留它，它不会干扰图像叠加）。
- en: Submitting a form with CodeIgniter CAPTCHA
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CodeIgniter CAPTCHA提交表单
- en: It is sometimes necessary to add a little more security to a form other than
    escaping and validating user input; sometimes you may wish to ensure that a human
    and not some script or bot is entering data and submitting your form.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，除了转义和验证用户输入之外，还需要在表单中添加更多的安全性；有时你可能希望确保输入数据并提交表单的是人类而不是某些脚本或机器人。
- en: A tried and tested way of doing this is **CAPTCHA**. There are alternatives
    to CAPTCHA; for example, a mathematic question (what's 10 + 7, for example) is
    fairly easy to construct in your application. A new method is getting your users
    to play a short game. Based on how they do, they are assessed as being either
    a human or a bot; [areyouahuman.com](http://areyouahuman.com) is a good resource
    for this. But for now, we'll concentrate on CodeIgniter's CAPTCHA functionality
    to make a CAPTCHA protected form for us.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一种经过验证和测试的方法是**CAPTCHA**。CAPTCHA有其他替代方案；例如，一个数学问题（比如10 + 7是什么）在你的应用程序中相当容易构建。一种新方法是让用户玩一个简短的游戏。根据他们的表现，他们会被评估为人类或机器人；[areyouahuman.com](http://areyouahuman.com)
    是一个很好的资源。但到目前为止，我们将专注于CodeIgniter的CAPTCHA功能，为我们创建一个受CAPTCHA保护的表单。
- en: Getting ready
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to store the CAPTCHA information CodeIgniter generates for us
    in a table in the database. To do that, we first need to create that table. The
    following is the MySQL code to do that. Copy the following into your database:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把CodeIgniter为我们生成的CAPTCHA信息存储在数据库中的一个表中。为了做到这一点，我们首先需要创建这个表。以下是在数据库中执行此操作的MySQL代码。将以下内容复制到您的数据库中：
- en: '[PRE32]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We''re going to make the following four files:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下四个文件：
- en: '`/path/to/codeigniter/application/controllers/comments.php`: This is a controller
    which helps in processing a name, e-mail address, and comment from the user, and
    it also calls a helper to process the CAPTCHA data'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/comments.php`: 这是一个控制器，它帮助处理用户提交的姓名、电子邮件地址和评论，并且还会调用一个助手来处理CAPTCHA数据'
- en: '`/path/to/codeigniter/application/helpers/make_captcha_helper.php`: This helper
    contains the code necessary for generating a CAPTCHA image'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/helpers/make_captcha_helper.php`: 这个助手包含了生成CAPTCHA图像所需的代码'
- en: '`/path/to/codeigniter/application/models/captcha_model.php`: This model is
    used to check the CAPTCHA value from the user against that stored in the database'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/captcha_model.php`: 这个模型用于检查用户提交的CAPTCHA值与数据库中存储的值是否匹配'
- en: '`/path/to/codeigniter/application/views/comments/post_form.php`: This view
    file will display the form (name, e-mail, comments, and so on) and the CAPTCHA
    image'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/comments/post_form.php`: 这个视图文件将显示表单（姓名、电子邮件、评论等）和CAPTCHA图像'
- en: 'Create the `controllers/comments.php` controller file and add the following
    code to it:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `controllers/comments.php` 控制器文件，并将以下代码添加到其中：
- en: '[PRE33]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next create the `helpers/make_captcha_helper.php` helper file and add the following
    code to it:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建 `helpers/make_captcha_helper.php` 助手文件，并将以下代码添加到其中：
- en: '[PRE34]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`img_path` and `img_url` are two interesting settings here. `img_path` should
    be the path to the image folder on the file system, and `img_url` should be the
    path of your image as it would be displayed in a web browser. CodeIgniter uses
    `img_url` to build a HTML `img` tag, and it is this that is sent to the `post_form`
    as `$data[''img'']`.'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`img_path` 和 `img_url` 是这里两个有趣的设置。`img_path` 应该是文件系统上图片文件夹的路径，而 `img_url` 应该是图片在网页浏览器中显示的路径。CodeIgniter
    使用 `img_url` 来构建一个HTML `img` 标签，并且这个标签会被发送到 `post_form` 作为 `$data[''img'']`。'
- en: 'Create the `models/captcha_model.php` model file and add the following code
    to it:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `models/captcha_model.php` 模型文件，并将以下代码添加到其中：
- en: '[PRE35]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then create the `comments/post_form.php` view file and add the following code
    to it:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建 `comments/post_form.php` 视图文件，并将以下代码添加到其中：
- en: '[PRE36]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The comments controller loads `public function index()`, which sets the validation
    environment for when or if the user submits the form. As `$this->form_validation->run()`
    will equal `FALSE` (as the form hasn''t been submitted yet), the `make_captcha_helper`
    function, `make_captcha()`, is called, sending it''s returned values to the `comments/post_form`
    view, as shown in the following code snippet:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 评论控制器加载 `public function index()`，它设置了当用户提交表单时的验证环境。由于 `$this->form_validation->run()`
    将等于 `FALSE`（因为表单尚未提交），所以会调用 `make_captcha_helper` 函数，即 `make_captcha()`，并将它的返回值发送到
    `comments/post_form` 视图，如下面的代码片段所示：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `make_captcha_helper` function, `make_captcha()`, will grab the main CodeIgniter
    object, as shown in the following code snippet:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_captcha_helper` 函数，`make_captcha()`，将获取主要的 CodeIgniter 对象，如下面的代码片段所示：'
- en: '[PRE38]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It defines the values necessary to build the CAPTCHA image, as shown in the
    following code snippet:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 它定义了构建 CAPTCHA 图像所需的价值，如下面的代码片段所示：
- en: '[PRE39]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'These values are stored in the `$data` array, which is passed to the CodeIgniter
    helper, `captcha`, which returns to us the `$cap` array. `$cap` is passed to the
    database function, `insert_string()`, so the CAPTCHA information can be saved
    to the database, as shown in the following code snippet:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值存储在 `$data` 数组中，该数组传递给 CodeIgniter 辅助程序 `captcha`，它返回给我们 `$cap` 数组。`$cap`
    传递给数据库函数 `insert_string()`，以便将 CAPTCHA 信息保存到数据库中，如下面的代码片段所示：
- en: '[PRE40]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We'll use this row in the database for comparison with the data entered by the
    user when they submit the form.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用数据库中的这一行与用户提交表单时输入的数据进行比较。
- en: Finally, the `make_captcha` helper returns an HTML `img` tag string to our comments
    controller. This is saved in the `$data` array and passed to the `post_form` view
    file.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`make_captcha` 辅助程序返回一个 HTML `img` 标签字符串到我们的评论控制器。这被保存在 `$data` 数组中，并传递到
    `post_form` 视图文件。
- en: The user is then shown the HTML form, with name, e-mail, comments inputs, as
    well as an image of the CAPTCHA and a textbox in which to type the CAPTCHA string
    they see. The user then completes the form, carefully entering their data along
    with the string from the CAPTCHA image, and clicks on the **Submit** button.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后用户会看到一个 HTML 表单，其中包含姓名、电子邮件、评论输入，以及一个 CAPTCHA 图像和一个用于输入看到的 CAPTCHA 字符串的文本框。用户完成表单，仔细输入他们的数据以及
    CAPTCHA 图像中的字符串，然后点击 **提交** 按钮。
- en: Assuming validation is passed (there were no form errors), the comments controller
    will then begin to compare the CAPTCHA string inputted by the user to the one
    in the database created by the `make_captcha` helper.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 假设验证通过（没有表单错误），则评论控制器将开始将用户输入的 CAPTCHA 字符串与由 `make_captcha` 辅助程序在数据库中创建的字符串进行比较。
- en: 'It starts this process by first cleaning the database of old CAPTCHA rows (in
    this example, old is anything older than two hours); it does this by defining
    the current time (as a unix time stamp) minus two hours (or `7200` seconds), this
    is set as the `$expiration` time, as shown in the following code snippet:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过首先清理数据库中的旧 CAPTCHA 行（在这个例子中，旧的是任何超过两小时的数据）来启动这个过程；它是通过定义当前时间（作为一个 Unix 时间戳）减去两小时（或
    `7200` 秒）来做到这一点的，这被设置为 `$expiration` 时间，如下面的代码片段所示：
- en: '[PRE41]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `Captcha_model` function, `delete_expired()`, is called, passing the expiration
    to it. This model function will delete rows in the database whose `captcha_time`
    is less than the expiration time, as shown in the following code snippet:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `Captcha_model` 函数 `delete_expired()`，并将过期时间传递给它。这个模型函数将删除数据库中 `captcha_time`
    小于过期时间的行，如下面的代码片段所示：
- en: '[PRE42]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Once old CAPTCHAS are removed from the database, a `$data` array is created
    and populated with the user's CAPTCHA input, their IP address, and again, the
    `$expiration` time (the one we made to remove old rows). This `$data` array is
    passed to the `Captcha_model` function, `does_exist()`. This model function will
    check whether the CAPTCHA string entered by the user exists in the database, and
    if so, is valid (that is, less than two hours old and matching the provided IP
    address). The model function returns the number of rows found, as shown in the
    following code snippet
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从数据库中删除了旧的 CAPTCHA，就创建并填充了包含用户的 CAPTCHA 输入、他们的 IP 地址以及再次的 `$expiration` 时间（我们用来删除旧行的那个）的
    `$data` 数组。这个 `$data` 数组传递给 `Captcha_model` 函数 `does_exist()`。这个模型函数将检查用户输入的 CAPTCHA
    字符串是否存在于数据库中，如果是，则有效（即小于两小时且与提供的 IP 地址匹配）。模型函数返回找到的行数，如下面的代码片段所示
- en: '[PRE43]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If zero rows exist, then `$data['errors']` is given an error message. `make_captcha()`
    is called again, a new CAPTCHA image is generated and sent to the `post_form`
    view, and the error message is displayed to the user above the new CAPTCHA image.
    The system then waits for the user to fill in the form again and have another
    go.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有行存在，则 `$data['errors']` 被赋予一个错误消息。再次调用 `make_captcha()`，生成一个新的 CAPTCHA 图像并发送到
    `post_form` 视图，错误消息显示在新的 CAPTCHA 图像上方。然后系统等待用户再次填写表格并再次尝试。
- en: However, if the result wasn't zero, then the CAPTCHA string entered by the user
    was correct, so we display a quick message to them and echo out their input. In
    reality, you can do what you like here, such as process their message and save
    it to a blog feed, or redirect them to another area on the site, whatever you
    wish.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果结果不是零，那么用户输入的 CAPTCHA 字符串就是正确的，因此我们会向他们显示一条快速消息并回显他们的输入。实际上，你可以在这里做你喜欢的事情，比如处理他们的消息并将其保存到博客订阅源，或者将他们重定向到网站上的另一个区域，无论你想要什么。
