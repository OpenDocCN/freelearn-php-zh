- en: Chapter 9. Building REST APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：构建REST API
- en: Most non-developers probably think that creating applications means building
    either software for your PC or Mac, games, or web pages, because that is what
    they can see and use. But once you join the developers' community, either by your
    own or professionally, you will eventually realize how much work is done for applications
    and tools that do not have a user interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数非开发者可能认为创建应用程序意味着为PC或Mac构建软件、游戏或网页，因为这是他们能看到并使用的。但一旦你加入开发者社区，无论是自己还是专业上，你最终会意识到为没有用户界面的应用程序和工具所做的多少工作。
- en: Have you ever wondered how someone's website can access your Facebook profile,
    and later on, post an automatic message on your wall? Or how websites manage to
    send/receive information in order to update the content of the page, without refreshing
    or submitting any form? All of these features, and many more interesting ones,
    are possible thanks to the integration of applications working "behind the scenes".
    Knowing how to use them will open the doors for creating more interesting and
    useful web applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经想过某个人的网站是如何访问你的Facebook个人资料的，后来又如何在你的墙上自动发布消息？或者网站是如何在不需要刷新或提交任何表单的情况下发送/接收信息以更新页面内容的？所有这些功能，以及许多其他有趣的功能，都是由于“幕后”工作的应用程序的集成才成为可能的。了解如何使用它们将为创建更有趣和有用的网络应用程序打开大门。
- en: 'In this chapter, you will learn the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Introduction to APIs and REST APIs, and their use
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API和REST API的介绍及其应用
- en: The foundation of REST APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API的基础
- en: Using third-party APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方API
- en: Tools for REST API developers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API开发者的工具
- en: Designing and writing REST APIs with Laravel
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Laravel设计和编写REST API
- en: Different ways of testing your REST APIs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试你的REST API的不同方法
- en: Introducing APIs
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍API
- en: '**API** stands for **Application Program Interface**. Its goal is to provide
    an interface so that other programs can send commands that will trigger some process
    inside the application, possibly returning some output. The concept might seem
    a bit abstract, but in fact, there are APIs virtually in everything which is somehow
    related to computers. Let''s see some real life examples:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**API**代表**应用程序程序接口**。其目标是提供一个接口，以便其他程序可以发送命令来触发应用程序内部的某些过程，可能返回一些输出。这个概念可能看起来有点抽象，但实际上，几乎与计算机有关的一切都有API。让我们看看一些现实生活中的例子：'
- en: Operating systems or OS, like Windows or Linux, are the programs that allow
    you to use computers. When you use any application from your computer, it most
    probably needs to talk to the OS in one way or another, for example by requesting
    a certain file, sending some audio to the speakers, and so on. All these interactions
    between the application and the OS are possible thanks to the APIs that the OS
    provides. In this way, the application need not interact with the hardware straight
    away, which is a very tiring task.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统或OS，如Windows或Linux，是允许你使用计算机的程序。当你使用计算机上的任何应用程序时，它很可能会以某种方式与操作系统进行通信，例如请求某个文件，向扬声器发送一些音频等。所有这些应用程序与操作系统之间的交互都是由于操作系统提供的API才成为可能。这样，应用程序无需直接与硬件交互，这是一个非常繁琐的任务。
- en: To interact with the user, a mobile application provides a GUI. The interface
    captures all the events that the user triggers, like clicking or typing, in order
    to send them to the server. The GUI communicates with the server using an API
    in the same way the program communicates with the OS as explained earlier.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了与用户交互，移动应用程序提供了一个GUI。该界面捕获用户触发的事件，如点击或输入，以便将它们发送到服务器。GUI使用API与服务器通信，就像程序之前解释的那样与操作系统通信。
- en: When you create a website that needs to display tweets from the user's Twitter
    account, you need to communicate with Twitter. They provide an API that can be
    accessed via HTTP. Once authenticated, by sending the correct HTTP requests, you
    can update and/or retrieve data from their application.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你创建一个需要显示用户Twitter账户推文的网站时，你需要与Twitter进行通信。他们提供了一个可以通过HTTP访问的API。一旦认证通过，通过发送正确的HTTP请求，你可以更新和/或从他们的应用程序中检索数据。
- en: As you can see, there are different places where APIs are useful. In general,
    when you have a system that should be accessed externally, you need to provide
    potential users an API. When we say externally, we mean from another application
    or library, but it can very well be inside the same machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，APIs 在不同的地方都有用。一般来说，当您有一个需要外部访问的系统时，您需要为潜在用户提供一个API。当我们说外部时，我们指的是来自另一个应用程序或库，但也可以是在同一台机器内部。
- en: Introducing REST APIs
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍REST API
- en: REST APIs are a specific type of APIs. They use HTTP as the protocol to communicate
    with them, so you can imagine that they will be the most used ones by web applications.
    In fact, they are not very different from the websites that you've already built,
    since the client sends an HTTP request, and the server replies with an HTTP response.
    The difference here is that REST APIs make heavy use of HTTP status codes to understand
    what the response is, and instead of returning HTML resources with CSS and JS,
    the response uses JSON, XML, or any other document format with just information,
    and not a graphic user interface.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: REST API是API的一种特定类型。它们使用HTTP作为与它们通信的协议，所以您可以想象它们将是Web应用程序中最常用的。事实上，它们与您已经构建的网站并没有太大的不同，因为客户端发送HTTP请求，服务器以HTTP响应回复。这里的区别在于REST
    API大量使用HTTP状态码来理解响应的内容，并且不是返回带有CSS和JS的HTML资源，而是使用仅包含信息的JSON、XML或其他文档格式，而不是图形用户界面。
- en: Let's take an example. The Twitter API, once authenticated, allows developers
    to get the tweets of a given user by sending an HTTP GET request to `https://api.twitter.com/1.1/statuses/user_timeline.json`.
    The response to this request is an HTTP message with a JSON map of tweets as the
    body and the status code 200\. We've already mentioned status code in [Chapter
    2](part0019_split_000.html#I3QM2-edcc22b134104d5db0bf3aa086c86851 "Chapter 2. Web
    Applications with PHP"), *Web Applications with PHP*, but we will review them
    shortly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个例子。一旦认证，Twitter API 允许开发者通过向 `https://api.twitter.com/1.1/statuses/user_timeline.json`
    发送HTTP GET请求来获取特定用户的推文。对这个请求的响应是一个包含推文JSON映射的HTTP消息，状态码为200。我们已经在[第二章](part0019_split_000.html#I3QM2-edcc22b134104d5db0bf3aa086c86851
    "第二章. 使用PHP的Web应用程序")中提到了状态码，*使用PHP的Web应用程序*，但我们很快会回顾它们。
- en: The REST API also allows developers to post tweets on behalf of the user. If
    you were already authenticated, as in the previous example, you just need to send
    a POST request to `https://api.twitter.com/1.1/statuses/update.json` with the
    appropriate POST parameters in the body, like the text that you want to tweet.
    Even though this request is not a GET, and thus, you are not requesting data but
    rather sending it, the response of this request is quite important too. The server
    will use the status codes of the response to let the requester know if the tweet
    was posted successfully, or if they could not understand the request, there was
    an internal server error, the authentication was not valid, and so on. Each of
    these scenarios has a different status code, which is the same across all applications.
    This makes it very easy to communicate with different APIs, since you will not
    need to learn a new list of status code each time. The server can also add some
    extra information to the body in order to throw some light on why the error happened,
    but that will depend on the application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: REST API还允许开发者代表用户发布推文。如果您已经在之前的例子中进行了认证，那么您只需要向 `https://api.twitter.com/1.1/statuses/update.json`
    发送一个POST请求，并在正文中包含适当的POST参数，比如您想要推文的文本。尽管这个请求不是GET请求，因此您不是请求数据而是发送数据，但这个请求的响应同样很重要。服务器将使用响应的状态码来通知请求者推文是否成功发布，或者如果请求无法理解，发生了内部服务器错误，认证无效，等等。每种情况都有不同的状态码，这在所有应用程序中都是相同的。这使得与不同的API通信变得非常容易，因为您不需要每次都学习新的状态码列表。服务器还可以在正文中添加一些额外信息，以便阐明错误发生的原因，但这将取决于应用程序。
- en: You can imagine that these REST APIs are provided to developers so they can
    integrate them with their applications. They are not user-friendly, but HTTP-friendly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以想象这些REST API是为开发者提供的，以便他们可以将它们集成到他们的应用程序中。它们对用户不友好，但对HTTP友好。
- en: The foundations of REST APIs
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST API的基础
- en: Even though REST APIs do not have an official standard, most developers agree
    on the same foundation. It helps that HTTP, which is the protocol that this technology
    uses to communicate, does have a standard. In this section, we will try to describe
    how REST APIs should work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管REST API没有官方标准，但大多数开发者都同意相同的基础。这得益于HTTP，这是该技术用于通信的协议，确实有一个标准。在本节中，我们将尝试描述REST
    API应该如何工作。
- en: HTTP request methods
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP请求方法
- en: 'We''ve already introduced the idea of HTTP methods in [Chapter 2](part0019_split_000.html#I3QM2-edcc22b134104d5db0bf3aa086c86851
    "Chapter 2. Web Applications with PHP"), *Web Applications with PHP*. We explained
    that an HTTP method is just the verb of the request, which defines what kind of
    action it is trying to perform. We''ve already defined this method when working
    with HTML forms: the `form` tag can get an optional attribute, `method`, which
    will make the form submit with that specific HTTP method.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第2章](part0019_split_000.html#I3QM2-edcc22b134104d5db0bf3aa086c86851 "第2章。使用PHP的Web应用")中介绍了HTTP方法的概念，即“使用PHP的Web应用”。我们解释说，HTTP方法只是请求的动词，它定义了请求试图执行的动作。当我们使用HTML表单时，我们已经定义了这种方法：`form`标签可以有一个可选的属性`method`，这将使表单使用该特定的HTTP方法提交。
- en: You will not use forms when working with REST APIs, but you can still specify
    the method of the request. In fact, two requests can go to the same endpoint with
    the same parameters, headers, and so on, and yet have completely different behaviors
    due to their methods, which makes them a very important part of the request.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用REST API时，您不会使用表单，但您仍然可以指定请求的方法。实际上，两个请求可以针对同一个端点，使用相同的参数、头部信息等，但由于它们的方法不同，因此表现出完全不同的行为，这使得方法成为请求中非常重要的部分。
- en: 'As we are giving so much importance to HTTP methods in order to identify what
    a request is trying to do, it is natural that we will need a handful of them.
    So far, we have introduced GET and POST, but there are actually eight different
    methods: GET, POST, PUT, DELETE, OPTIONS, HEAD, TRACE, and CONNECT. You will usually
    work with just four of them. Let''s look at them in detail.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们非常重视HTTP方法来识别请求试图做什么，因此自然需要一系列的方法。到目前为止，我们已经介绍了GET和POST，但实际上有八种不同的方法：GET、POST、PUT、DELETE、OPTIONS、HEAD、TRACE和CONNECT。您通常只需要使用其中的四种。让我们详细看看它们。
- en: GET
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GET
- en: When a request uses the GET method, it means that it is requesting for information
    about a given entity. The endpoint should contain information of what that entity
    is, like the ID of a book. GET can also be used to query for a list of objects,
    either all of them, filtered, or paginated.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求使用GET方法时，这意味着它正在请求有关某个实体的信息。端点应该包含有关该实体的信息，例如一本书的ID。GET也可以用来查询对象列表，可以是全部、过滤或分页的。
- en: GET requests can add extra information to the request when needed. For example,
    if we are try to retrieve all the books that contain the string "rings", or if
    we want the page number 2 of the full list of books. As you already know, this
    extra information is added to the query string as GET parameters, which is a list
    of key-value pairs concatenated by an ampersand (`&`). So, that means that the
    request for `http://bookstore.com/books?year=2001&page3` is probably used for
    getting the second page of the list of books published during 2001.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要时，GET请求可以添加额外的信息到请求中。例如，如果我们试图检索包含字符串“rings”的所有书籍，或者如果我们想要获取书籍完整列表的第2页。如您所知，这些额外信息作为GET参数添加到查询字符串中，这是一个由和号(`&`)连接的键值对列表。因此，这意味着请求`http://bookstore.com/books?year=2001&page3`可能是用来获取2001年出版书籍列表的第2页。
- en: REST APIs have extensive documentation on the available endpoints and parameters,
    so it should be easy for you to learn to query properly. Still, even though it
    will be documented, you should expect parameters with intuitive names, like the
    ones in the example.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: REST API提供了关于可用端点和参数的详细文档，因此您应该能够轻松地学习如何正确地进行查询。尽管如此，即使这些参数会被记录下来，您也应该期待看到具有直观名称的参数，就像示例中展示的那样。
- en: POST and PUT
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: POST和PUT
- en: POST is the second type of HTTP method that you already know about. You used
    it in forms with the intention of "posting" data, that is, trying to update a
    resource on the server side. When you wanted to add or update a new book, you
    sent a POST request with the data of the book as the POST parameters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: POST是您已经了解的HTTP方法的第二种类型。您在表单中使用它，目的是“发布”数据，即尝试更新服务器端的一个资源。当您想要添加或更新一本新书时，您会发送一个包含书籍数据的POST请求。
- en: POST parameters are sent in a format similar to the GET parameters, but instead
    of being part of the query string, they are included as part of the request's
    body. Forms in HTML are already doing that for you, but when you need to talk
    to a REST API, you should know how to do this by yourself. In the next section,
    we will show you how to perform POST using tools other than forms. Also note that
    you can add any data to the body of the request; it is quite common to send JSON
    in the body instead of POST parameters.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: POST 参数的发送格式与 GET 参数类似，但它们不是作为查询字符串的一部分，而是作为请求体的一部分。HTML 表单已经为你做了这件事，但当你需要与
    REST API 通信时，你应该知道如何自己完成这个操作。在下一节中，我们将向您展示如何使用除表单之外的工具执行 POST 操作。此外，请注意，您可以将任何数据添加到请求体中；在请求体中发送
    JSON 而不是 POST 参数是很常见的。
- en: 'The PUT method is quite similar to the POST method. This too tries to add or
    update data on the server side, and for this purpose, it also adds extra information
    on the body of the request. Why should we have two different methods that do the
    same thing? There are actually two main differences between these methods:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PUT 方法与 POST 方法非常相似。这也试图在服务器端添加或更新数据，为此，它也在请求体上添加了额外的信息。为什么我们要有两个执行相同操作的不同方法呢？实际上，这两种方法之间有两个主要区别：
- en: PUT requests either create a resource or update it, but the affected resource
    is the one defined by the endpoint and nothing else. That means that if we want
    to update a book, the endpoint should state that the resource is a book, and specify
    it, for example, `http://bookstore.com/books/8734`. On the other hand, if you
    do not identify the resource to be created or updated in the endpoint, or you
    affect other resources at the same time, you should use POST requests.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PUT 请求要么创建一个资源，要么更新它，但受影响的是由端点定义的资源，没有其他。这意味着，如果我们想更新一本书，端点应该声明资源是一本书，并指定它，例如，`http://bookstore.com/books/8734`。另一方面，如果您没有在端点中标识要创建或更新的资源，或者同时影响了其他资源，您应该使用
    POST 请求。
- en: 'Idempotent is a complicated word for a simple concept. An idempotent HTTP method
    is one that can be called many times, and the result will always be the same.
    For example, if you are trying to update the title of a book to "Don Quixote",
    it does not matter how many times you call it, the result will always be the same:
    the resource will have the title "Don Quixote". On the other hand, non-idempotent
    methods might return different results when executing the same request. An example
    could be an endpoint that increases the stock of some book. Each time you call
    it, you will increase the stock more and more, and thus, the result is not the
    same. PUT requests are idempotent, whereas POST requests are not.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Idempotent 是一个复杂的词，用来描述一个简单的概念。一个幂等的 HTTP 方法是可以多次调用的，并且结果总是相同的。例如，如果您试图将一本书的标题更新为
    "Don Quixote"，您调用它的次数并不重要，结果总是相同的：资源将具有标题 "Don Quixote"。另一方面，非幂等的方法在执行相同的请求时可能会返回不同的结果。一个例子可能是一个增加某些书籍库存的端点。每次您调用它时，库存都会增加更多，因此，结果并不相同。PUT
    请求是幂等的，而 POST 请求则不是。
- en: Even with this explanation in mind, misusing POST and PUT is quite a common
    mistake among developers, especially when they lack enough experience in developing
    REST APIs. Since forms in HTML only send data with POST and not PUT, the first
    one is more popular. You might find REST APIs where all the endpoints that update
    data are POST, even though some of them should be PUT.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 即使考虑到这个解释，滥用 POST 和 PUT 在开发者中仍然是一个相当常见的错误，尤其是在他们缺乏足够的 REST API 开发经验时。由于 HTML
    表单只发送 POST 而不是 PUT 的数据，因此第一个更受欢迎。您可能会发现 REST API 中所有更新数据的端点都是 POST，尽管其中一些应该是 PUT。
- en: DELETE
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DELETE
- en: The DELETE HTTP method is quite self-explanatory. It is used when you want to
    delete a resource on the server. As with PUT requests, DELETE endpoints should
    identify the specific resource to be deleted. An example would be when we want
    to remove one book from our database. We could send a DELETE request to an endpoint
    similar to `http://bookstore.com/books/23942`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: DELETE HTTP 方法相当直观。当您想要在服务器上删除一个资源时使用它。与 PUT 请求一样，DELETE 端点应该标识要删除的特定资源。一个例子是我们想要从数据库中删除一本书。我们可以向一个类似于
    `http://bookstore.com/books/23942` 的端点发送 DELETE 请求。
- en: DELETE requests just delete resources, and they are already determined by the
    URL. Still, if you need to send extra information to the server, you could use
    the body of the request as you do with POST or PUT. In fact, you can always send
    information within the body of the request, including GET requests, but that does
    not mean it is a good practice to do so.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: DELETE 请求仅用于删除资源，并且它们已经由 URL 确定。尽管如此，如果你需要向服务器发送额外的信息，你可以像使用 POST 或 PUT 一样使用请求体。实际上，你始终可以在请求体中发送信息，包括
    GET 请求，但这并不意味着这样做是一种好的实践。
