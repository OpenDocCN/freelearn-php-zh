- en: Chapter 8. Creating a To-do List
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。创建待办事项列表
- en: 'This is a good little project; it''s something nearly everyone might need in
    their day-to-day work: a to-do list. This project will give you a small application
    to create tasks and set them as complete. There''s also a good level of scope
    for you to expand on the project and really make it your own.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的小项目；这是每个人在日常工作中可能都需要的东西：待办事项列表。这个项目将为你提供一个创建任务并将它们标记为完成的小应用程序。你还可以在项目中扩展范围，真正使其成为你自己的。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Design and wireframes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和线框图
- en: Creating the database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Creating the model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Creating views
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: Creating the controller
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Putting it all together
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合所有内容
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Right; in this project, we will create an application that allows users to create
    tasks and view these tasks as a list. Tasks can also have a due date; late tasks
    will appear in red so that you know it's important to execute that task as soon
    as possible.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对了；在这个项目中，我们将创建一个允许用户创建任务并以列表形式查看这些任务的应用程序。任务也可以有截止日期；晚于截止日期的任务将以红色显示，这样你知道需要尽快执行该任务。
- en: To create this app, we will create one controller; this will handle the displaying
    of tasks, creating these tasks, setting these tasks as done or still to do, and
    handling the deletion of these tasks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这个应用程序，我们将创建一个控制器；这将处理任务的显示、创建这些任务、将这些任务标记为完成或未完成，以及处理这些任务的删除。
- en: We'll create a language file to store the text, allowing you to have multiple
    language support should that be required.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个语言文件来存储文本，以便在需要时提供多语言支持。
- en: We'll create all the necessary view files and a model to interface with the
    database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建所有必要的视图文件和一个模型来与数据库接口。
- en: However, this app along with all the others in this book, relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you might already
    have, please keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个应用以及本书中的其他应用，都依赖于我们在[第1章](ch01.html "第1章。简介和共享项目资源")中完成的基本设置，*简介和共享项目资源*；尽管你可以将大量代码片段放入你几乎已经拥有的任何应用中，但请记住，第1章中完成的设置是这个章节的基础。
- en: So without further ado, let's get on with it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们不再拖延，让我们开始吧。
- en: Design and wireframes
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计和线框图
- en: As always, before we start building, we should take a look at what we plan to
    build.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，在我们开始构建之前，我们应该看看我们计划构建什么。
- en: 'Firstly, a brief description of our intent: we plan to build an app that will
    allow people to add tasks that they need to do. It will also allow users to view
    these tasks as a list and set them as done. They can also delete old or unneeded
    tasks should they wish.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，简要描述我们的意图：我们计划构建一个应用程序，让人们能够添加他们需要完成的任务。它还将允许用户以列表形式查看这些任务并将它们标记为完成。如果他们愿意，他们还可以删除旧的或不再需要的任务。
- en: 'Anyway, to get a better idea of what''s happening, let''s take a look at the
    following site map:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，为了更好地了解正在发生的事情，让我们看一下以下网站地图：
- en: '![Design and wireframes](img/7093OS_08_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![设计和线框图](img/7093OS_08_01.jpg)'
- en: 'So that''s the site map; the first thing to notice is how simple the site is.
    There are only four main areas to this project. Let''s go over each item and get
    a brief idea of what it does:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是网站地图；首先要注意的是网站是多么简单。这个项目只有四个主要区域。让我们逐一了解每个项目，并简要了解它们的功能：
- en: '**View All**: This displays a form to create a task and also displays all tasks
    in a list'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看全部**：这显示了一个创建任务的表单，并显示列表中的所有任务'
- en: '**Create**: This processes the creation of tasks saved to the database'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**：这处理将任务保存到数据库中的创建过程'
- en: '**Done/Not Done**: This sets a task to either done or to-do'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成/未完成**：这将为任务设置完成或未完成的标记'
- en: '**Delete**: This removes the task from the database'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除**：这将从数据库中删除任务'
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对网站的结构和形式有了相当好的了解，让我们看一下每个页面的线框图。
- en: View All/Create
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看全部/创建
- en: The following screenshot shows you a wireframe from point **1** (the View All
    item) and point **2** (the Create item) of the preceding site map. Initially,
    the user is shown a list of tasks. They are able to click on the **It's Done**
    or **Still Todo** button to go to point **3** (the Done/Not Done item) shown in
    the site map.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了网站地图中前述的 **1** 点（查看所有项）和 **2** 点（创建项）的线框。最初，用户会看到一个任务列表。他们能够点击 **已完成**
    或 **待办** 按钮进入网站地图中的第 **3** 点（已完成/未完成项）。
- en: '![View All/Create](img/7093OS_08_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![查看所有/创建](img/7093OS_08_02.jpg)'
- en: Delete
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除
- en: The following screenshot shows you a wireframe from point **4** (the Delete
    item) in the site map. The user views the task description (`tasks.task_desc`)
    and is given the option to delete (to process the deletion of the task from the
    database) or cancel to return to point **1** (the View All item) of the site map.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了网站地图中第 **4** 点（删除项）的线框。用户查看任务描述（`tasks.task_desc`）并被提供删除（从数据库中处理删除任务）或取消以返回网站地图中的第
    **1** 点（查看所有项）的选项。
- en: '![Delete](img/7093OS_08_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![删除](img/7093OS_08_03.jpg)'
- en: File overview
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件概览
- en: 'This is a relatively small project, and all in all, we''re only going to create
    six files; these are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对较小的项目，总的来说，我们只需要创建六个文件；这些文件如下：
- en: '`/path/to/codeigniter/application/models/tasks_model.php`: This provides read/write
    access to the `tasks` database table.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/tasks_model.php`: 这提供了对 `tasks` 数据库表的读写访问。'
- en: '`/path/to/codeigniter/application/views/tasks/delete.php`: This displays a
    form to the user, asking them to confirm the deletion of a task.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/tasks/delete.php`: 这向用户显示一个表单，要求他们确认删除任务。'
- en: '`/path/to/codeigniter/application/views/tasks/view.php`: This is the view for
    the `tasks` controller''s `index()` function. It displays a list of tasks to the
    user.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/tasks/view.php`: 这是 `tasks` 控制器的 `index()`
    函数的视图。它向用户显示任务列表。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`: 这在页面顶部提供了一个导航栏。'
- en: '`/path/to/codeigniter/application/controllers/tasks.php`: This contains three
    main functions: `index()`, `apply()` and `create()`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/tasks.php`: 这包含三个主要函数：`index()`、`apply()`
    和 `create()`。'
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: 这为应用程序提供语言支持。'
- en: 'The file structure of the preceding six files is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前六个文件的文件结构如下：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating the database
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Okay, you should have already setup CodeIgniter and Bootstrap, as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources*, in mind. However, it's not the end of the world if you haven't—the
    code can easily be applied to other situations.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你应该已经按照[第1章](ch01.html "第1章。简介和共享项目资源")中所述设置了 CodeIgniter 和 Bootstrap，*简介和共享项目资源*。如果没有，那么你应该知道，本章中的代码是专门针对[第1章](ch01.html
    "第1章。简介和共享项目资源")中的设置编写的。然而，如果你还没有这样做，也不是世界末日——代码可以轻松地应用于其他情况。
- en: 'Firstly, we''ll build the database. Copy the following MySQL code to your database:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将构建数据库。将以下 MySQL 代码复制到你的数据库中：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Now, take a look at that last bit of SQL code, it's quite big and fiddly. Don't
    panic; all SQL code is available online from this book's support page on the Packt
    website.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看最后那段 SQL 代码，它相当大且复杂。不要慌张；所有 SQL 代码都可以从 Packt 网站上这本书的支持页面在线获取。
- en: You'll see that the first table we create is `ci_sessions`, which we need to
    allow CodeIgniter to manage sessions, specifically logged-in users. However, this
    is just the standard session table available from the *CodeIgniter User Guide*,
    so I'll not include a description of that table as it's not technically specific
    to this application. However, if you're interested, there's a description at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到我们创建的第一个表是`ci_sessions`，我们需要允许CodeIgniter管理会话，特别是已登录的用户。然而，这只是从*CodeIgniter用户指南*中可用的标准会话表，所以我不包括对该表的描述，因为它不是技术特定于这个应用程序的。但是，如果你感兴趣，可以在[http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html)找到描述。
- en: 'Right, let''s take a look at each item in each table, and see what it means:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对，让我们逐个查看每个表中的每个条目，看看它们代表什么：
- en: '| Table: tasks |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 表：tasks |'
- en: '| --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Element** | **Description** |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **元素** | **描述** |'
- en: '| `task_id` | This is the primary key. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `task_id` | 这是主键。|'
- en: '| `task_desc` | There is no title field or body to our tasks as such—only a
    brief description of what needs to be done; this is that description. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `task_desc` | 我们的任务没有标题字段或正文，只有需要完成的简要描述；这就是那个描述。|'
- en: '| `task_due_date` | This is the date by which the task needs to be done. If
    a task is late, we will color the background of the table row red to indicate
    that a particular task remains to be done and is late. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `task_due_date` | 这是任务需要完成的日期。如果任务延迟，我们将用红色突出显示表格行的背景，以表示有特定的任务尚未完成且已延迟。|'
- en: '| `task_created_at` | as such MySQL timestamp of the date on which the row
    was created in the database. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `task_created_at` | 如此MySQL时间戳，表示行在数据库中创建的日期。|'
- en: '| `task_status` | This indicates whether the task still remains to be done
    or not. This is an `enum` field with the two values: `done` and `todo`. If a task
    is set to `done`, then we will use the `<strike>` HTML markup to strike through
    the text; if, however, is it set to `todo` (as it is by default), then the task
    isn''t struck through and remains to be done. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `task_status` | 这表示任务是否仍然需要完成。这是一个`enum`字段，有两个值：`done`和`todo`。如果任务设置为`done`，则我们将使用`<strike>`HTML标记划掉文本；如果设置为`todo`（默认情况下就是这样），则任务不会被划掉，仍然需要完成。|'
- en: We'll also need to make amends to the `config/database.php` file, namely setting
    the database access details, username password, and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对`config/database.php`文件进行修改，具体是设置数据库访问详情，用户名、密码等。
- en: 'Open the `config/database.php` file and find the following lines:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`config/database.php`文件并找到以下行：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Edit the values in the preceding lines, ensuring you substitute these values
    with ones more specific to your setup and situation; so, enter your username,
    password, and so on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑上一行的值，确保用更具体于你的设置和情况的值替换这些值；因此，输入你的用户名、密码等。
- en: Adjusting the config.php file
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整config.php文件
- en: 'There are a few things in this file that we''ll need to configure to support
    sessions and encryption. So, open the `config/config.php` file and make the following
    changes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们需要配置一些内容以支持会话和加密。因此，打开`config/config.php`文件并做出以下更改：
- en: 'We will need to set an encryption key—both sessions and CodeIgniter''s encryption
    functionality require an encryption key to be set in the `$config` array, so find
    the following line:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要设置一个加密密钥——会话和CodeIgniter的加密功能都需要在`$config`数组中设置加密密钥，所以找到以下行：
- en: '[PRE3]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Replace the preceding line with the following:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将上一行替换为以下内容：
- en: '[PRE4]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Now obviously, don't actually change the preceding value to literally a-random-string-of-alphanum-characters
    but change it to, er, a random string of alphanum characters instead—if that makes
    sense? Yeah, you know what I mean.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，显然，实际上不要将上一值直接更改为一个随机的字母数字字符序列，而是更改为，嗯，一个随机的字母数字字符序列——如果这说得通？是的，你知道我的意思。
- en: 'Find the following lines:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到以下行：
- en: '[PRE5]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Replace the preceding line with the following:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将上一行替换为以下内容：
- en: '[PRE6]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adjusting the routes.php file
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整routes.php文件
- en: 'We want to redirect the user to the `tasks` controller rather than the default
    CodeIgniter `welcome` controller. To do this, we will need to amend the default
    controller settings in the `routes.php` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将用户重定向到`tasks`控制器而不是默认的CodeIgniter`welcome`控制器。为此，我们需要修改`routes.php`文件中的默认控制器设置：
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config/routes.php`文件进行编辑，找到以下行（文件底部附近）：
- en: '[PRE7]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'First, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    this—instead, we want the default controller to be `tasks`. So find the following
    line:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更改默认控制器。在 CodeIgniter 应用程序中，默认控制器最初设置为 `welcome`；然而，我们不需要这个——相反，我们希望默认控制器是
    `tasks`。所以找到以下行：
- en: '[PRE8]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change it to the following:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改为以下内容：
- en: '[PRE9]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creating the model
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: There is only one model in this project, `tasks_model.php`, that contains functions
    that are specific to searching and writing tasks to the database.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中只有一个模型，即 `tasks_model.php`，它包含特定于搜索和将任务写入数据库的函数。
- en: This is our one and only model for this project. Let's briefly go over each
    function in it to give us a general idea of what it does, and then we will go
    into more detail in the code.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本项目唯一的模型。让我们简要地回顾其中的每个函数，以了解其一般功能，然后我们将更详细地讨论代码。
- en: 'There are five main functions in this model, which are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中有五个主要函数，如下所示：
- en: '`get_tasks()`: This serves two functions: firstly, to display all tasks—for
    example, when a user first visits the site and when a user enters a new task in
    the form.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_tasks()`：这个函数有两个作用：首先，显示所有任务——例如，当用户首次访问网站或用户在表单中输入新任务时。'
- en: '`change_task_status()`: This changes the `tasks.task_status` value in the database
    from either `todo` or `done`. A task that is set to `done` appears struck through
    in the list, whereas tasks that are set to `todo` are not struck through and are
    displayed normally; this way, a user can easily work out what is done and not
    done.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`change_task_status()`：这个函数将数据库中的 `tasks.task_status` 值从 `todo` 或 `done` 中更改。设置为
    `done` 的任务在列表中会被划掉，而设置为 `todo` 的任务则不会被划掉，并正常显示；这样，用户可以轻松地判断出哪些已完成，哪些尚未完成。'
- en: '`save_task()`: This saves a task to the database when a user submits the form
    from point **3** (the Create item) of the site map.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save_task()`：当用户从网站地图的 **3**（创建项目）点提交表单时，这个函数将任务保存到数据库中。'
- en: '`get_task()`: This fetches an individual task from the `tasks` table.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_task()`：这个函数从 `tasks` 表中检索一个单独的任务。'
- en: '`delete()`: This deletes a task from the `tasks` table.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete()`：这个函数从 `tasks` 表中删除一个任务。'
- en: That was a quick overview, so let's create the model and discuss how it functions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简要概述，所以让我们创建模型并讨论其功能。
- en: 'Create the `/path/to/codeigniter/application/models/tasks_model.php` file and
    add the following code to it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/models/tasks_model.php` 文件，并向其中添加以下代码：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `get_tasks()` function takes no argument. It returns all tasks from the
    database and returns it to the `tasks` controller''s `index()` function. The `tasks/view.php`
    view file will loop over the database result object and display tasks in an HTML
    table:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_tasks()` 函数不接受任何参数。它从数据库返回所有任务，并将其返回给 `tasks` 控制器的 `index()` 函数。`tasks/view.php`
    视图文件将遍历数据库结果对象，并在 HTML 表格中显示任务：'
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `change_task_status()` function changes the status of a task from either
    `todo` or `done`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`change_task_status()` 函数将任务的状态从 `todo` 或 `done` 中更改。'
- en: 'It takes two arguments: `$task_id` and `$save_data`. The `$task_id` and `$save_data`
    values are passed from the `tasks` controller''s `status()` function.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受两个参数：`$task_id` 和 `$save_data`。`$task_id` 和 `$save_data` 的值由 `tasks` 控制器的
    `status()` 函数传递。
- en: The value of `$task_id` is set when the user clicks on either **It's Done**
    or **Still Todo** in the `views/tasks/view.php` view file; the fourth parameter
    of the `uri` segment of either option is the primary key (`tasks.task_id`) of
    the task in the `tasks` table and by using the CodeIgniter function `$this->uri->segment(4)`,
    we grab the value and store in a `$task_id` local variable.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`$task_id` 的值在用户点击 `views/tasks/view.php` 视图文件中的 **It''s Done** 或 **Still Todo**
    时设置；任一选项的 `uri` 段落的第四个参数是 `tasks` 表中任务的键（`tasks.task_id`），通过使用 CodeIgniter 函数
    `$this->uri->segment(4)`，我们获取该值并将其存储在 `$task_id` 本地变量中。'
- en: 'The `$save_data` value is populated in the `tasks` controller. It contains
    only one item, `task_status`, that is populated in the `status()` function with
    the third parameter of the `uri` segment:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`$save_data` 值在 `tasks` 控制器中填充。它只包含一个项目，即 `task_status`，该值在 `status()` 函数中使用
    `uri` 段落的第三个参数填充：'
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `save_task()` function accepts one argument—an array of data. This data
    is supplied by the `tasks` controller''s `index()` function. The function will
    save a task to the `tasks` table, returning `true` if successful and `false` if
    an error occurs:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_task()` 函数接受一个参数——一个数据数组。这些数据由 `tasks` 控制器的 `index()` 函数提供。该函数会将一个任务保存到
    `tasks` 表中，如果成功则返回 `true`，如果发生错误则返回 `false`：'
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `get_task()` function takes one argument—`$task_id` (that is, the primary
    key of the task in the database). It is supplied by the `tasks` controller's `delete()`
    function, which uses it to supply information about the task in the delete confirmation
    form.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_task()` 函数接受一个参数——`$task_id`（即数据库中任务的唯一键）。它由 `tasks` 控制器的 `delete()` 函数提供，该函数使用它来提供删除确认表单中关于任务的信息。'
- en: 'The user clicks on **Delete** in the `views/tasks/view.php` file, the third
    parameter of which is the task''s primary key. The `tasks` controller''s `delete()`
    function will then grab that ID from the URI with the `$this->uri->segment(3)`
    CodeIgniter function. This ID is passed to the `get_task()`model function, which
    will return the details of the task in the database or `false` if no ID was found:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在 `views/tasks/view.php` 文件中点击 **删除** 按钮，该文件的第三个参数是任务的唯一键。然后 `tasks` 控制器的
    `delete()` 函数将使用 `$this->uri->segment(3)` CodeIgniter 函数从 URI 中获取该 ID。这个 ID 被传递给
    `get_task()` 模型函数，该函数将返回数据库中任务的详细信息或 `false` 如果没有找到 ID：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `delete()` function performs an operation on the database to remove a task.
    It accepts one argument—the ID of the task, which is the primary key of that task:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete()` 函数在数据库上执行操作以删除任务。它接受一个参数——任务的 ID，即该任务的唯一键：'
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating views
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'There are three views in this project, which are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，有三个视图，具体如下：
- en: '`/path/to/codeigniter/application/views/tasks/view.php`: This displays a list
    of current tasks to the user as well as a form that allows the user to create
    new tasks.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/tasks/view.php`: 这段代码向用户显示当前任务列表以及一个允许用户创建新任务的表单。'
- en: '`/path/to/codeigniter/application/views/tasks/delete.php`: This displays a
    confirmation message to the users, asking them to confirm whether they really
    want to delete the task.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/tasks/delete.php`: 这段代码向用户显示一个确认消息，询问他们是否真的想要删除任务。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This displays the
    top-level menu. In this project, this is very simple; it contains a project name
    and link to go to the `tasks` controller.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`: 这段代码显示顶层菜单。在这个项目中，这非常简单；它包含一个项目名称和一个链接，可以跳转到
    `tasks` 控制器。'
- en: These are our three view files. Now let's go over each one, build the code,
    and discuss how they function.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们的三个视图文件。现在让我们逐一查看它们，构建代码，并讨论它们的功能。
- en: 'Create the `/path/to/codeigniter/application/views/tasks/view.php` file and
    add the following code to it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/tasks/view.php` 文件，并向其中添加以下代码：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding block of code is the form that the user can use to create a new
    task. Also in this block is the validation error code (`validation_errors()`)
    where we will display any errors with the data submitted form the form:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块是用户可以用来创建新任务的表单。同时在这个代码块中还有验证错误代码（`validation_errors()`），我们将在这里显示从表单提交的数据中出现的任何错误：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding table echoes out any tasks in the database. The actions are also
    in this block, that is, the PHP ternary operator that switches the status from
    **It's Done** to **Still Todo** and the **Delete** link.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表格输出了数据库中的任何任务。操作也在此代码块中，即 PHP 的三元运算符，它将状态从 **已完成** 切换到 **待办**，以及 **删除** 链接。
- en: 'Create the `/path/to/codeigniter/application/views/tasks/delete.php` file and
    add the following code to it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/tasks/delete.php` 文件，并向其中添加以下代码：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding block of code contains the form that asks the user to confirm
    whether they really wish to delete the task.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块包含一个询问用户是否真的希望删除任务的表单。
- en: 'Create the `/path/to/codeigniter/application/views/nav/top_nav.php` file and
    add the following code to it:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/views/nav/top_nav.php` 文件，并向其中添加以下代码：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This view is quite basic but still serves an important role. It displays an
    option to return to the `tasks` controller's `index()` function.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图非常基础，但仍然发挥着重要作用。它显示了一个返回到 `tasks` 控制器的 `index()` 函数的选项。
- en: Creating the controller
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: We're going to create only one controller in this project, which is `/path/to/codeigniter/application/controllers/tasks.php`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们只创建一个控制器，即 `/path/to/codeigniter/application/controllers/tasks.php`。
- en: Let's go over that controller now, look at the code, and discuss how it functions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看那个控制器，查看代码，并讨论其功能。
- en: 'Create the `/path/to/codeigniter/application/controllers/tasks.php` file and
    add the following code to it:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `/path/to/codeigniter/application/controllers/tasks.php` 文件，并向其中添加以下代码：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `index()` function performs a couple of tasks: displaying a list of tasks
    and handling the form submission (validation, error checking, and so on).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`index()`函数执行两项任务：显示任务列表和处理表单提交（验证、错误检查等）。'
- en: 'Initially, we set the validation rules for the form, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，我们为表单设置验证规则，如下所示：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If there were errors in the form or if it is the first time the page is accessed,
    then we''ll build the form elements, defining their settings and be ready to draw
    them in the view:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单中存在错误或这是第一次访问页面，那么我们将构建表单元素，定义它们的设置并准备好在视图中绘制它们：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we''ll fetch all tasks in the database and store them in the `$page_data[''query'']`
    array. We will send this array to the `tasks/view.php` file where it will be looped
    over using `foreach($query->result as $row)`—where each task will be written out
    in a table along with the **It''s Done**, **Still Todo**, and **Delete** options:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将从数据库中检索所有任务并将它们存储在`$page_data['query']`数组中。我们将此数组发送到`tasks/view.php`文件，在那里将使用`foreach($query->result
    as $row)`进行循环——每个任务将连同**已完成**、**待办**和**删除**选项一起以表格形式输出：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If there were no errors with the form, then we try to create the task in the
    database. First, we look to see whether the user has tried to set a due date for
    the task. We do this by looking for the date fields in the `post` array.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单没有错误，那么我们尝试在数据库中创建任务。首先，我们查看用户是否尝试为任务设置截止日期。我们通过在`post`数组中查找日期字段来完成此操作。
- en: 'We require all three (day, month, and year) items to create a due date, so
    we check to see whether all three have been set. If all three are set, then we
    build a string that will be the date. This is saved in the `$task_due_date` variable.
    If all three date items haven''t been set (perhaps only two were), then we just
    set the `$task_due_date` value to `null`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要所有三个（日、月、年）项来创建截止日期，因此我们检查是否所有三项都已设置。如果所有三项都已设置，那么我们将构建一个字符串，该字符串将是日期。这被保存在`$task_due_date`变量中。如果所有三个日期项尚未设置（可能只有两个），那么我们只需将`$task_due_date`的值设置为`null`：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We then create an array to pass to the `save_task()` function of `Tasks_model`.
    The `$save_data` array contains the task description, any date that might have
    been applied (or `null` value), and a default value for `task_status`; this is
    initially set to `todo`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个数组并将其传递给`Tasks_model`的`save_task()`函数。`$save_data`数组包含任务描述、可能已应用（或`null`值）的任何日期以及`task_status`的默认值；这最初设置为`todo`：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `$save_data` array is then sent to the `save_task()` function of `Tasks_model`.
    This function will return `true` if the save operation was successful or `false`
    if there was an error. Whatever the outcome, we''ll set a message using the `$this->session->set_flashdata()`CodeIgniter
    function with a success message or an error message (the content for these messages
    is in the language file) and redirect to the `tasks` controller''s `index()` function,
    which will display all tasks (and hopefully, the one just created) to the user:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将`$save_data`数组发送到`Tasks_model`的`save_task()`函数。如果保存操作成功，该函数将返回`true`；如果发生错误，则返回`false`。无论结果如何，我们都会使用CodeIgniter的`$this->session->set_flashdata()`函数设置一条消息（成功消息或错误消息，这些消息的内容在语言文件中），并重定向到`tasks`控制器的`index()`函数，该函数将向用户显示所有任务（并希望显示刚刚创建的任务）：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `status()` function is used to change a task status from `done` to `todo`.
    If you hover over either the **It's Done** or **Still Todo** links, you'll see
    the URI. The format will look something like `http://www.domain.com/tasks/status/todo/1`
    (if the task is set to `done` in the database) or `http://www.domain.com/tasks/status/done/1`
    (if the task is set to `todo` in the database). The third parameter is always
    the opposite to whatever is the current status of the task, so if a task is set
    to `done`, the URI will display `todo`, and if it is set to `todo`, the URI will
    display `done`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`status()`函数用于将任务状态从`done`更改为`todo`。如果您将鼠标悬停在**已完成**或**待办**链接上，您将看到URI。其格式看起来像`http://www.domain.com/tasks/status/todo/1`（如果任务在数据库中设置为`done`）或`http://www.domain.com/tasks/status/done/1`（如果任务在数据库中设置为`todo`）。第三个参数始终是任务当前状态的相反，因此如果任务设置为`done`，URI将显示`todo`，如果设置为`todo`，URI将显示`done`。'
- en: The fourth parameter is the primary key (in the preceding example, this is `1`).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个参数是主键（在前面的示例中，这是`1`）。
- en: 'When the user clicks on either **It''s Done** or **Still Todo**, the `status()`
    function grabs the third and fourth parameters and sends them to the `status()`
    function of `Tasks_model`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**已完成**或**待办**时，`status()`函数获取第三个和第四个参数并将它们发送到`Tasks_model`的`status()`函数：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We take the third and fourth parameters and send them to the `change_task_status()`
    function of `Tasks_model`. The `change_task_status()` function will return `true`
    if the update was successful or `false` if there was an error. We set a message
    to the user using the `$this->session->set_flashdata()`CodeIgniter function and
    redirect to the `tasks` controller''s `index()` function:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取第三个和第四个参数并发送给`Tasks_model`的`change_task_status()`函数。如果更新成功，`change_task_status()`函数将返回`true`，如果有错误，则返回`false`。我们使用CodeIgniter的`$this->session->set_flashdata()`函数设置用户消息，并重定向到`tasks`控制器的`index()`函数：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `delete()` function does two things. It displays information about the
    task to the user so that they are able to decide whether they really want to delete
    the task, and it also processes the deletion of that task should it be confirmed
    by the user. First off, we set the validation rules for the form. This is the
    form that the user uses to confirm the deletion:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete()`函数做两件事。它向用户显示有关任务的详细信息，以便他们能够决定是否真的想删除任务，并且如果用户确认，它还会处理该任务的删除。首先，我们设置表单的验证规则。这是用户用来确认删除的表单：'
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Because the function can be accessed by the user by clicking on **Delete**
    or submitting the form, the task ID can be supplied either from the URI (in the
    case of **Delete**) or in a hidden form element in the form. So, we check whether
    the form is being posted or accessed for the first time and grab the ID from either
    `post` or `get`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该函数可以通过点击**删除**或提交表单被用户访问，因此任务ID可以来自URI（在**删除**的情况下）或表单中的隐藏表单元素。因此，我们检查表单是否正在提交或首次访问，并从`post`或`get`中获取ID：
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We then send the ID to the `get_task()` function of `Tasks_model`, which will
    return the details of the task as a database object. This is saved in `$data[''query'']`
    and sent to the `tasks/delete.php` view file, where the user is asked to confirm
    whether they wish to really delete the task:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将ID发送到`Tasks_model`的`get_task()`函数，该函数将返回作为数据库对象的任务详情。这被保存在`$data['query']`中，并发送到`tasks/delete.php`视图文件，其中用户被要求确认他们是否真的想删除该任务：
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If there were no errors with the form submission, then we call the `delete()`
    function of `Tasks_model` so that the task is deleted:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单提交没有错误，那么我们调用`Tasks_model`的`delete()`函数，以便删除任务：
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Creating the language file
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建语言文件
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support. Let's create the language file.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中的所有项目一样，我们正在使用语言文件为用户提供文本。这样，您可以启用多区域/多语言支持。让我们创建语言文件。
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/language/english/en_admin_lang.php`文件，并向其中添加以下代码：
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Putting it all together
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容组合在一起
- en: Okay, here are a few examples that will help put everything together.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里有一些示例，将有助于将所有内容组合在一起。
- en: User adds a task
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户添加任务
- en: 'The sequence of events in order to add a task is as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 添加任务的顺序如下：
- en: The user visits the site and CodeIgniter routes them to the `tasks` controller.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户访问网站，CodeIgniter将其路由到`tasks`控制器。
- en: 'The `tasks` controller loads (by default) the `index()` function. The `index()`
    function checks whether the form validation is false:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tasks`控制器默认加载`index()`函数。`index()`函数检查表单验证是否为假：'
- en: '[PRE34]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As this is the first load and the form has not been submitted, it will equal
    `false`. The `index()` function then defines the settings for the `task_desc`
    text field, calls the `get_tasks()` function of `Tasks_model` (which returns all
    tasks from the database), and then loads the view files, passing the database
    object to the `views/tasks/view.php` file.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是第一次加载，表单尚未提交，因此它将等于`false`。然后`index()`函数定义`task_desc`文本字段的设置，调用`Tasks_model`的`get_tasks()`函数（该函数从数据库返回所有任务），然后加载视图文件，将数据库对象传递给`views/tasks/view.php`文件。
- en: The user enters the `Chase meeting room booking` string, selects a date three
    days into the future, and clicks on **Add** to submit the form.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入`Chase meeting room booking`字符串，选择未来三天的日期，然后点击**添加**提交表单。
- en: The form is submitted and `index()` validates the `task_desc` form elements
    and the three date dropdowns' values. The validation is now passed.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表单已提交，`index()`验证了`task_desc`表单元素和三个日期下拉框的值。验证现在已通过。
- en: 'The three date fields are strung together to form a date string to be entered
    into the database and saved as `$task_due_date`:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 三个日期字段被连接起来形成一个日期字符串，将其输入到数据库并保存为`$task_due_date`：
- en: '[PRE35]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: These `$task_due_date` and `task_desc` values are saved to an array called `$save_data`.
    Also saved is a default value for the `task_status` field in the `tasks` table.
    This value is set to `todo`.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些`$task_due_date`和`task_desc`值被保存到一个名为`$save_data`的数组中。同时保存的是`tasks`表中`task_status`字段的默认值。此值设置为`todo`。
- en: After a successful save operation to the database. the user is redirected to
    `index()`, where their new task is displayed.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库成功保存操作后，用户被重定向到`index()`，在那里显示他们的新任务。
- en: User changes the task status
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户更改任务状态
- en: 'The events performed while a user changes the task status are as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 用户更改任务状态时执行的事件如下：
- en: The user visits the site and CodeIgniter routes them to the `tasks` controller.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户访问网站，CodeIgniter将他们路由到`tasks`控制器。
- en: 'The `tasks` controller loads (by default) the `index()` function. The `index()`
    function checks whether the form validation is false:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tasks`控制器默认加载`index()`函数。`index()`函数检查表单验证是否为false：'
- en: '[PRE36]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As this is the first load and the form has not been submitted, it will equal
    false. The `index()` function then defines the settings for the `task_desc` text
    field, calls the `get_tasks()` function of `Tasks_model` (which returns all tasks
    from the database), and then loads the view files, passing the database object
    to the `views/tasks/view.php` file.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是第一次加载且表单尚未提交，它将等于false。然后`index()`函数定义`task_desc`文本字段的设置，调用`Tasks_model`的`get_tasks()`函数（该函数从数据库返回所有任务），然后加载视图文件，将数据库对象传递给`views/tasks/view.php`文件。
- en: The user sees the task "Chase meeting room booking" and (knowing that this task
    is done) clicks on **It's Done**.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户看到任务“追逐会议室预订”并且（知道这个任务已完成）点击了**已完成**。
- en: CodeIgniter loads the `status()` task function.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CodeIgniter加载`status()`任务函数。
- en: The `status()` function takes the third (`todo` or `done`) and fourth (the task's
    primary key) parameters of the URI and sets them to the `$page_data[' task_status']`
    and `$task_id` local variables.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status()`函数获取URI的第三个参数（`todo`或`done`）和第四个参数（任务的唯一键）并将它们设置为`$page_data[''task_status'']`和`$task_id`局部变量。'
- en: These two variables are sent to the `change_task_status()` function of `Tasks_model`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这两个变量被发送到`Tasks_model`的`change_task_status()`函数。
- en: The `change_task_status()` function takes the `$task_id` value and the new status
    and performs an Active Record update on this task, returning true or false values
    if successful or if an error occurred.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`change_task_status()`函数接受`$task_id`值和新状态，并对该任务执行Active Record更新，如果成功或发生错误则返回true或false值。'
- en: 'The `status()` function looks at the return value and sets a session flash
    message accordingly: a success message if successful and an error if not.'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status()`函数查看返回值并根据情况设置会话闪存消息：如果成功则显示成功消息，如果不成功则显示错误消息。'
- en: The user is then redirected to `index()`, where they can see the updated task
    status.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，用户被重定向到`index()`，在那里他们可以看到更新的任务状态。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'So. this is a fairly small application—perhaps one of the smallest in the book—but
    it''s by no means not useful. You can use this to-do list as a really easy way
    to manage any tasks you might have on your plate; however, there''s always room
    for improvement. There are a few things that you can do to add greater functionalities
    to the project, and these might include the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这是一个相当小的应用程序——可能是在书中最小的一个——但它绝对不是没有用。您可以用这个待办事项列表作为管理您可能有的任何任务的简单方式；然而，总有改进的空间。您可以通过以下方式添加更多功能到项目中，包括以下内容：
- en: '**Adding a sorting feature**: You could add sorting functions to only display
    late (overdue), done, or still-to-do tasks.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加排序功能**：您可以添加排序函数，仅显示逾期（超期）、已完成或待办的任务。'
- en: '**Adding a category**: You could add a dropdown to the form that creates the
    tasks. This dropdown could (for example) have the colors Red, Green, Blue, Yellow,
    Orange, and so on. A task can be assigned a color and this color could be displayed
    in the table that displays each task. You could use the Bootstrap label markup;
    for example, the `span` warning label (`<span class="label label-warning">Warning</span>`)
    would give you a great block of color—change the word `Warning`, though!'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加分类**：你可以在创建任务的表单中添加一个下拉菜单。这个下拉菜单可以（例如）包含红色、绿色、蓝色、黄色、橙色等颜色选项。一个任务可以被分配一个颜色，并且这个颜色可以在显示每个任务的表格中显示出来。你可以使用Bootstrap标签标记；例如，警告标签的`span`（`<span
    class="label label-warning">警告</span>`）会给你一个很大的颜色块——不过，请改变一下“警告”这个词！'
- en: '**Adding progress and progress bar**: You could add an HTML dropdown with set
    percentage values: 25 percent, 50 percent 75 percent, 100 percent, and so on,
    which allow you to define how much of the task has been completed.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加进度和进度条**：你可以在HTML下拉菜单中添加预设的百分比值：25%，50%，75%，100%等，这样你可以定义任务完成了多少。'
