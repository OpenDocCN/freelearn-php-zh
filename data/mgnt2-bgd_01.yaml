- en: Chapter 1. Understanding the Platform Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 理解平台架构
- en: '**Magento** is a powerful, highly scalable, and highly customizable e-commerce
    platform that can be used to build web shops and, if needed, some non-e-commerce
    sites. It provides a large number of e-commerce features out of the box.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Magento**是一个强大、高度可扩展和高度可定制的电子商务平台，可用于构建网店，如果需要，还可以用于一些非电子商务网站。它提供了大量开箱即用的电子商务功能。'
- en: Features such as product inventory, shopping cart, support for numerous payment
    and shipment methods, promotion rules, content management, multiple currencies,
    multiple languages, multiple websites, and so on make it a great choice for merchants.
    On the other hand, developers enjoy the full set of merchant-relevant features
    plus all the things related to actual development. This chapter will touch upon
    the topic of robust Web API support, extensible administration interface, modules,
    theming, embedded testing frameworks, and much more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 产品库存、购物车、支持多种支付和运输方式、促销规则、内容管理、多种货币、多种语言、多个网站等功能使其成为商家的绝佳选择。另一方面，开发者享受与商人相关的完整功能集以及与实际开发相关的所有事物。本章将涉及强大的Web
    API支持、可扩展的管理界面、模块、主题、嵌入式测试框架等内容。
- en: 'In this chapter, a high-level overview of Magento is provided in the following
    sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，以下部分提供了对Magento的高级概述：
- en: The technology stack
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术栈
- en: The architectural layers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构层
- en: The top-level filesystem structure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最高级别的文件系统结构
- en: The module filesystem structure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块文件系统结构
- en: The technology stack
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术栈
- en: 'Magento''s highly modular structure is a result of several open source technologies
    embedded into a stack. These open source technologies are composed of the following
    components:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Magento高度模块化的结构是几个开源技术嵌入到堆栈中的结果。这些开源技术由以下组件组成：
- en: '**PHP**: PHP is a server-side scripting language. This book assumes that you
    have advanced knowledge of the object-oriented aspects of PHP, which is often
    referred to as **PHP OOP**.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PHP**：PHP是一种服务器端脚本语言。本书假设您对PHP的面向对象方面有深入的了解，这通常被称为**PHP OOP**。'
- en: '**Coding standards**: Magento puts a lot of emphasis on coding standards. These
    include **PSR-0** (the autoloading standard), **PSR-1** (the basic coding standards),
    **PSR-2** (the coding style guide), **PSR-3**, and **PSR-4**.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码规范**：Magento非常重视编码规范。这包括**PSR-0**（自动加载标准）、**PSR-1**（基本编码规范）、**PSR-2**（编码风格指南）、**PSR-3**和**PSR-4**。'
- en: '**Composer**: Composer is a dependency management package for PHP. It is used
    to pull in all the vendor library requirements.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Composer**：Composer是一个PHP的依赖管理包。它用于拉取所有供应商库的要求。'
- en: '**HTML**: HTML5 is supported out of the box.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML**：HTML5是开箱即支持的。'
- en: '**CSS**: Magento supports CSS3 via its in-built **LESS CSS** preprocessor.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSS**：Magento通过其内置的**LESS CSS**预处理器支持CSS3。'
- en: '**jQuery**: jQuery is a mature cross-platform JavaScript library that was designed
    to simplify the DOM manipulation. It is one of the most popular JavaScript frameworks
    today.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery**：jQuery是一个成熟的跨平台JavaScript库，旨在简化DOM操作。它是当今最受欢迎的JavaScript框架之一。'
- en: '**RequireJS**: RequireJS is a JavaScript file and module loader. Using a modular
    script loader such as RequireJS helps improve the speed and quality of code.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RequireJS**：RequireJS是一个JavaScript文件和模块加载器。使用如RequireJS这样的模块化脚本加载器有助于提高代码的速度和质量。'
- en: '**Third-party libraries**: Magento comes packed with lot of third-party libraries,
    with the most notable ones being **Zend Framework** and **Symfony**. It is worth
    noting that Zend Framework comes in two different major versions, namely version
    1.x and version 2.x. Magento uses both of these versions internally.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三方库**：Magento内置了许多第三方库，其中最显著的是**Zend Framework**和**Symfony**。值得注意的是，Zend
    Framework有两个不同的主要版本，即1.x版本和2.x版本。Magento内部使用这两个版本。'
- en: '**Apache or Nginx**: Both Apache and Nginx are HTTP servers. Each has its distinct
    advantages and disadvantages. It would be unfair to say one is better than another,
    as their performance widely depends on the entire system''s setup and usage. Magento
    works with Apache 2.2 and 2.4 and Nginx 1.7.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache或Nginx**：Apache和Nginx都是HTTP服务器。每个都有自己的优缺点。说一个比另一个好是不公平的，因为它们的性能广泛取决于整个系统的设置和使用。Magento与Apache
    2.2和2.4以及Nginx 1.7兼容。'
- en: '**MySQL**: MySQL is a mature and widely used **relational database management
    system** (**RDBMS**) that uses **structured query language** (**SQL**). There
    are both free community versions and commercial versions of MySQL. Magento requires
    at least the of **MySQL Community Edition** version 5.6.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL**：MySQL是一个成熟且广泛使用的**关系数据库管理系统**（**RDBMS**），它使用**结构化查询语言**（**SQL**）。MySQL既有免费社区版本，也有商业版本。Magento至少需要**MySQL社区版**5.6版本。'
- en: '**MTF**: **Magento Testing Framework** (**MTF**) delivers an automated testing
    suite. It covers various types of tests, such as performance, functional, and
    unit testing. The entire MTF is available on GitHub, which can be viewed by visiting
    [https://github.com/magento/mtf](https://github.com/magento/mtf) as an isolated
    project.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MTF**：**Magento测试框架**（**MTF**）提供了一套自动化测试套件。它涵盖了各种类型的测试，如性能测试、功能测试和单元测试。整个MTF都可在GitHub上找到，可以通过访问[https://github.com/magento/mtf](https://github.com/magento/mtf)作为一个独立的项目进行查看。'
- en: Different pieces of technology can be glued into various architectures. There
    are different ways to look at the Magento architecture—from the perspective of
    a module developer, system integrator, or a merchant, or from some other angle.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的技术可以粘合到各种架构中。从模块开发者、系统集成商或商家，或者从其他角度看待Magento架构的方式有很多。
- en: The architectural layers
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构层
- en: From top to bottom, Magento can be divided into four architectural layers, namely
    *presentation*, *service*, *domain*, and *persistence*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从上到下，Magento可以分为四个架构层，即**表示层**、**服务层**、**领域层**和**持久层**。
- en: The *presentation* layer is the one that we directly interact with through the
    browser. It contains layouts, blocks, templates, and even controllers, which process
    commands to and from the user interface. Client-side technologies such as jQuery,
    RequireJS, CSS, and LESS are also a part of this layer. Usually, three types of
    users interact with this layer, namely web users, system administrators, and those
    making the Web API calls. Since the Web API calls can be made via HTTP in a manner
    that is the same as how a user uses a browser, there's a thin line between the
    two. While web users and Web API calls consume the presentation layer as it is,
    the system administrators have the power to change it. This change manifests in
    the form of setting the active theme and changing the content of the **CMS** (short
    for **content management system**) pages, blocks, and the products themselves.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**表示层**是我们通过浏览器直接与之交互的那一层。它包含布局、块、模板，甚至控制器，这些控制器处理用户界面的命令。jQuery、RequireJS、CSS和LESS等客户端技术也是这一层的一部分。通常，三种类型的用户与这一层交互，即网络用户、系统管理员和进行Web
    API调用的用户。由于Web API调用可以通过与用户使用浏览器相同的方式进行HTTP调用，因此两者之间有一条很细的界限。虽然网络用户和Web API调用按原样消耗表示层，但系统管理员有权对其进行更改。这种更改以设置活动主题和更改**CMS**（即**内容管理系统**）页面、块和产品本身的内容的形式体现。'
- en: When the components of a presentation layer are being interacted with, they
    usually make calls to the underlying service layer.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当与表示层的组件进行交互时，它们通常会调用底层的服务层。
- en: The *service* layer is the bridge between the presentation and domain layer.
    It contains the service contracts, which define the implementation behavior. A
    **service contract** is basically a fancy name for a PHP interface. This layer
    is where we can find the REST/SOAP APIs. Most user interaction on the storefront
    is routed through the service layer. Similarly, the external applications that
    make the REST/SOAP API calls also interact with this layer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务层**是表示层和领域层之间的桥梁。它包含服务合约，这些合约定义了实现行为。**服务合约**基本上是一个PHP接口的别称。这一层是我们可以找到REST/SOAP
    API的地方。大多数用户在店面上的交互都是通过服务层路由的。同样，进行REST/SOAP API调用的外部应用程序也与这一层进行交互。'
- en: When the components of a service layer are being interacted with, they usually
    make calls to the underlying domain layer.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当与服务层的组件进行交互时，它们通常会调用底层的领域层。
- en: The *domain* layer is really the business logic of Magento. This layer is all
    about generic data objects and models that compose the business logic. The domain
    layer models themselves do not contribute to data persistence, but they do contain
    a reference to a resource model that is used to retrieve and persist the data
    to a MySQL database. A domain layer code from one module can interact with a domain
    module code from another module via the use of *event observers*, *plugins*, and
    the *di.xml* definitions. We will look into the details of these later on in other
    chapters. Given the power of plugins and di.xml, its important to note that this
    interaction is best established using service contracts (the PHP interface).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*域名*层实际上是 Magento 的业务逻辑。这一层完全是关于组成业务逻辑的通用数据对象和模型。域名层模型本身不参与数据持久化，但它们包含一个指向资源模型的引用，该模型用于从
    MySQL 数据库检索和持久化数据。一个模块的域名层代码可以通过使用*事件观察者*、*插件*和*di.xml*定义与另一个模块的域名模块代码进行交互。我们将在后面的章节中探讨这些细节。鉴于插件和
    di.xml 的强大功能，重要的是要注意，这种交互最好通过服务合同（PHP 接口）来建立。'
- en: When the components of the domain layer are being interacted with, they usually
    make calls to the underlying persistence layer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当与域名层的组件进行交互时，它们通常会调用底层的持久化层。
- en: The *persistence* layer is where the data gets persisted. This layer is in charge
    of all the **CRUD** (short for **create, read, update, and delete**) requests.
    Magento uses an active record pattern strategy for the persistence layer. The
    model object contains a resource model that maps an object to one or more database
    rows. Here, it is important to differentiate the cases of simple resource model
    and the **Entity-Attribute-Value** (**EAV**) resource models. A simple resource
    model maps to a single table, while the EAV resource models have their attributes
    spread out over a number of MySQL tables. As an example, the `Customer` and `Catalog`
    resource models use EAV resource models, while the newsletter's `Subscriber` resource
    model uses a simple resource model.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*持久化*层是数据被持久化的地方。这一层负责所有的**CRUD**（即**创建、读取、更新和删除**）请求。Magento 使用持久化层的活动记录模式策略。模型对象包含一个资源模型，它将一个对象映射到一个或多个数据库行。在这里，区分简单资源模型和**实体-属性-值**（**EAV**）资源模型的情况很重要。简单资源模型映射到单个表，而
    EAV 资源模型将它们的属性分散在多个 MySQL 表中。例如，`Customer` 和 `Catalog` 资源模型使用 EAV 资源模型，而新闻通讯的
    `Subscriber` 资源模型使用简单资源模型。'
- en: The top-level filesystem structure
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 顶级文件系统结构
- en: 'The following list depicts the root Magento filesystem structure:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了根 Magento 文件系统结构：
- en: '`.htaccess`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.htaccess`'
- en: '`.htaccess.sample`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.htaccess.sample`'
- en: '`.php_cs`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.php_cs`'
- en: '`.travis.yml`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.travis.yml`'
- en: '`CHANGELOG.md`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHANGELOG.md`'
- en: '`CONTRIBUTING.md`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTRIBUTING.md`'
- en: '`CONTRIBUTOR_LICENSE_AGREEMENT.html`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTRIBUTOR_LICENSE_AGREEMENT.html`'
- en: '`COPYING.txt`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPYING.txt`'
- en: '`Gruntfile.js`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gruntfile.js`'
- en: '`LICENSE.txt`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE.txt`'
- en: '`LICENSE_AFL.txt`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE_AFL.txt`'
- en: '`app`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`'
- en: '`bin`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`'
- en: '`composer.json`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`composer.json`'
- en: '`composer.lock`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`composer.lock`'
- en: '`dev`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev`'
- en: '`index.php`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.php`'
- en: '`lib`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`'
- en: '`nginx.conf.sample`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nginx.conf.sample`'
- en: '`package.json`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`'
- en: '`php.ini.sample`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`php.ini.sample`'
- en: '`phpserver`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phpserver`'
- en: '`pub`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pub`'
- en: '`setup`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setup`'
- en: '`update`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`'
- en: '`var`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`'
- en: '`vendor`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor`'
- en: The `app/etc/di.xml` file is one of the most important files that we might often
    look into during development. It contains various class mappings or preferences
    for individual interfaces.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/etc/di.xml` 文件是我们可能在开发过程中经常查看的最重要文件之一。它包含各种类映射或单个接口的偏好设置。'
- en: The `var/magento/language-*` directories is where the registered languages reside.
    Though each module can declare its own translations under `app/code/{VendorName}/{ModuleName}/i18n/`,
    Magento will eventually fall back to its own individual module named `i18n` in
    case translations are not found in the custom module or within the theme directory.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`var/magento/language-*` 目录是注册语言所在的位置。尽管每个模块都可以在 `app/code/{VendorName}/{ModuleName}/i18n/`
    下声明自己的翻译，但如果在自定义模块或主题目录中找不到翻译，Magento 最终会回退到其自己的名为 `i18n` 的单独模块。'
- en: The `bin` directory is where we can find the `magento` file. The `magento` file
    is a script that is intended to be run from a console. Once triggered via the
    `php bin/magento` command, it runs an instance of the `Magento\Framework\Console\Cli`
    application, presenting us with quite a number of console options. We can use
    the `magento` script to enable/disable cache, enable/disable modules, run an indexer,
    and do many other things.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`bin`目录是我们可以找到`magento`文件的地方。`magento`文件是一个旨在从控制台运行的脚本。一旦通过`php bin/magento`命令触发，它将运行`Magento\Framework\Console\Cli`应用程序的一个实例，向我们提供相当多的控制台选项。我们可以使用`magento`脚本来启用/禁用缓存，启用/禁用模块，运行索引器，以及执行许多其他操作。'
- en: The `dev` directory is where we can find the Magento test scripts. We will have
    a look at more of those in later chapters.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`dev`目录是我们可以找到Magento测试脚本的地方。我们将在后面的章节中了解更多关于这些脚本的内容。'
- en: The `lib` directory comprises two major subdirectories, namely the server-side
    PHP library code and fonts found under `lib/internal` and the client-side JavaScript
    libraries found in `lib/web`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`目录包含两个主要子目录，即位于`lib/internal`下的服务器端PHP库代码和位于`lib/web`中的客户端JavaScript库。'
- en: The `pub` directory is where the publicly exposed files are located. This is
    the directory that we should set as root when setting up Apache or Nginx. The
    `pub/index.php` file is what gets triggered when the storefront is opened in a
    browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`pub`目录是公开文件所在的位置。这是我们在设置Apache或Nginx时应将其设置为根目录的目录。当在浏览器中打开店面时，会触发`pub/index.php`文件。'
- en: The `var` directory is where the dynamically generated group type of files such
    as cache, log, and a few others get created in. We should be able to delete the
    content of this folder at any time and have Magento automatically recreate it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`var`目录是动态生成的文件类型，如缓存、日志等文件创建的地方。我们应该能够随时删除此文件夹的内容，并且让Magento自动重新创建它。'
- en: 'The `vendor` directory is where most of the code is located. This is where
    we can find various third-party vendor code, Magento modules, themes, and language
    packs. Looking further into the `vendor` directory, you will see the following
    structure:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`vendor`目录是大多数代码所在的地方。这是我们可以找到各种第三方供应商代码、Magento模块、主题和语言包的地方。进一步查看`vendor`目录，你会看到以下结构：'
- en: '`.htaccess`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.htaccess`'
- en: '`autoload.php`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload.php`'
- en: '`bin`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`'
- en: '`braintree`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`braintree`'
- en: '`composer`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`composer`'
- en: '`doctrine`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doctrine`'
- en: '`fabpot`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fabpot`'
- en: '`justinrainbow`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`justinrainbow`'
- en: '`league`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`league`'
- en: '`lusitanian`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lusitanian`'
- en: '`magento`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`magento`'
- en: '`monolog`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`monolog`'
- en: '`oyejorge`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`oyejorge`'
- en: '`pdepend`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pdepend`'
- en: '`pelago`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pelago`'
- en: '`phpmd`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phpmd`'
- en: '`phpseclib`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phpseclib`'
- en: '`phpunit`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phpunit`'
- en: '`psr`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`psr`'
- en: '`sebastian`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sebastian`'
- en: '`seld`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seld`'
- en: '`sjparkinson`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sjparkinson`'
- en: '`squizlabs`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`squizlabs`'
- en: '`symfony`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symfony`'
- en: '`tedivm`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tedivm`'
- en: '`tubalmartin`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tubalmartin`'
- en: '`zendframework`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zendframework`'
- en: 'Within the vendor directory, we can find code from various vendors, such as
    `phpunit`, `phpseclib`, `monolog`, `symfony`, and so on. Magento itself can be
    found here. The Magento code is located under `vendor/magento` directory, listed
    (partially) as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在供应商目录中，我们可以找到来自各种供应商的代码，例如`phpunit`、`phpseclib`、`monolog`、`symfony`等。Magento本身也可以在这里找到。Magento代码位于`vendor/magento`目录下，部分列表如下：
- en: '`composer`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`composer`'
- en: '`framework`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`framework`'
- en: '`language-en_us`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`language-en_us`'
- en: '`magento-composer-installer`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`magento-composer-installer`'
- en: '`magento2-base`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`magento2-base`'
- en: '`module-authorization`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-authorization`'
- en: '`module-backend`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-backend`'
- en: '`module-catalog`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-catalog`'
- en: '`module-customer`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-customer`'
- en: '`module-theme`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-theme`'
- en: '`module-translation`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-translation`'
- en: '`module-ui`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-ui`'
- en: '`module-url-rewrite`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-url-rewrite`'
- en: '`module-user`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-user`'
- en: '`module-version`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-version`'
- en: '`module-webapi`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-webapi`'
- en: '`module-widget`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-widget`'
- en: '`theme-adminhtml-backend`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme-adminhtml-backend`'
- en: '`theme-frontend-blank`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme-frontend-blank`'
- en: '`theme-frontend-luma`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme-frontend-luma`'
- en: You will see that the further structuring of directories follows a certain naming
    schema, whereas the `theme-*` directory stores themes, the `module-*` directory
    stores modules, and the `language-*` directory stores registered languages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现目录的进一步结构遵循某种命名模式，其中`theme-*`目录存储主题，`module-*`目录存储模块，而`language-*`目录存储已注册的语言。
- en: The module filesystem structure
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块文件系统结构
- en: 'Magento identifies itself as a highly modular platform. What this means is
    that there is literally a directory location where modules are placed. Let''s
    take a peak at the individual module structure now. The following structure belongs
    to one of the simpler core Magento modules—the `Contact` module that can be found
    in `vendor/magento/module-contact`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Magento将自己定位为一个高度模块化的平台。这意味着模块被放置的目录位置是实际存在的。现在让我们看一下单个模块的结构。以下结构属于一个较简单的核心Magento模块——可以在`vendor/magento/module-contact`中找到的`Contact`模块：
- en: '`Block`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Block`'
- en: '`composer.json`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`composer.json`'
- en: '`Controller`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controller`'
- en: '`etc`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etc`'
- en: '`acl.xml`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`acl.xml`'
- en: '`adminhtml`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adminhtml`'
- en: '`system.xml`'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system.xml`'
- en: '`config.xml`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.xml`'
- en: '`email_templates.xml`'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email_templates.xml`'
- en: '`frontend`'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frontend`'
- en: '`di.xml`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`di.xml`'
- en: '`page_types.xml`'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page_types.xml`'
- en: '`routes.xml`'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routes.xml`'
- en: '`module.xml`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module.xml`'
- en: '`Helper`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Helper`'
- en: '`i18n`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i18n`'
- en: '`LICENSE_AFL.txt`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE_AFL.txt`'
- en: '`LICENSE.txt`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE.txt`'
- en: '`Model`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Model`'
- en: '`README.md`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`'
- en: '`registration.php`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registration.php`'
- en: '`Test`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Test`'
- en: '`Unit`'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Unit`'
- en: '`Block`'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Block`'
- en: '`Controller`'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controller`'
- en: '`Helper`'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Helper`'
- en: '`Model`'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Model`'
- en: '`view`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view`'
- en: '`adminhtml`'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adminhtml`'
- en: '`frontend`'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frontend`'
- en: '`layout`'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layout`'
- en: '`contact_index_index.xml`'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contact_index_index.xml`'
- en: '`default.xml`'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default.xml`'
- en: '`templates`'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`'
- en: '`form.phtml`'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form.phtml`'
- en: Even though the preceding structure is for one of the simpler modules, you can
    see that it is still quite extensive.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的结构是针对一个较简单的模块，但你可以看到它仍然相当广泛。
- en: The `Block` directory is where the view-related block PHP classes are located.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`Block`目录是存储与视图相关的PHP类的地方。'
- en: The `Controller` directory is where the controller-related PHP classes are stored.
    This is the code that responds to the storefront `POST` and `GET HTTP` actions.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`Controller`目录是存储与控制器相关的PHP类的地方。这是响应店面`POST`和`GET HTTP`操作的代码。'
- en: The `etc` directory is where the module configuration files are present. Here,
    we can see files such as `module.xml`, `di.xml`, `acl.xml`, `system.xml`, `config.xml`,
    `email_templates.xml`, `page_types.xml`, `routes.xml`, and so on. The `module.xml`
    file is an actual module declaration file. We will look into the contents of some
    of these files in the later chapters.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`etc`目录是模块配置文件所在之处。在这里，我们可以看到诸如`module.xml`、`di.xml`、`acl.xml`、`system.xml`、`config.xml`、`email_templates.xml`、`page_types.xml`、`routes.xml`等文件。`module.xml`文件是一个实际的模块声明文件。我们将在后面的章节中查看这些文件的内容。'
- en: The `Helper` directory is where various helper classes are located. These classes
    are usually used to abstract various store configuration values into the getter
    methods.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`Helper`目录是各种辅助类所在之处。这些类通常用于将各种商店配置值抽象到获取方法中。'
- en: The `i18n` directory is where the module translation package CSV files are stored.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`i18n`目录是存储模块翻译包CSV文件的地方。'
- en: The `Module` directory is where the entities, resource entities, collections,
    and various other business classes can be found.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`Module`目录是实体、资源实体、集合和各种其他业务类可以找到的地方。'
- en: The `Test` directory stores the module unit tests.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 测试目录存储模块单元测试。
- en: The `view` directory contains all the module administrator and storefront template
    files (`.phtml` and `.html`) and static files (`.js` and `.css`).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`view`目录包含所有模块管理员和店面模板文件（`.phtml`和`.html`）和静态文件（`.js`和`.css`）。'
- en: Finally, the `registration.php` is a module registration file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`registration.php`是一个模块注册文件。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a quick look at the technology stack used in Magento.
    We discussed how Magento, being an open source product, takes extensive use of
    other open source projects and libraries such as MySQL, Apache, Nginx, Zend Framework,
    Symfony, jQuery, and so on. We then learned how these libraries are arranged into
    directories. Finally, we explored one of the existing core modules and briefly
    took a look at an example of a module's structure.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速浏览了在Magento中使用的技术栈。我们讨论了作为一个开源产品的Magento如何广泛使用其他开源项目和服务，如MySQL、Apache、Nginx、Zend
    Framework、Symfony、jQuery等。然后我们学习了这些库是如何组织到目录中的。最后，我们探索了一个现有的核心模块，并简要地查看了一个模块结构的示例。
- en: In the next chapter, we are going to tackle the environment setup so that we
    can get Magento installed and ready for development.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将处理环境设置，以便我们可以安装并准备开发Magento。
