- en: Chapter 6. A Command-line Companion Called Artisan
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：名为 Artisan 的命令行伴侣
- en: 'In the last few chapters, we have used Artisan for various tasks, such as running
    database migrations. However, as we will see in this chapter, Laravel''s command-line
    utility has far more capabilities and can be used to run and automate all sorts
    of tasks. In the next pages, you will learn how Artisan can help you:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后几章中，我们使用了 Artisan 来执行各种任务，例如运行数据库迁移。然而，正如我们将在本章中看到的，Laravel 的命令行工具具有更强大的功能，可以用来运行和自动化各种任务。在接下来的页面中，你将学习
    Artisan 如何帮助你：
- en: Inspect and interact with your application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查和交互你的应用程序
- en: Enhance the overall performance of your application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高应用程序的整体性能
- en: Write your own commands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写你自己的命令
- en: By the end of this tour of Artisan's capabilities, you will understand how it
    can become an indispensable companion in your projects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次 Artisan 功能之旅结束时，你将了解它如何成为你项目中的不可或缺的伴侣。
- en: Keeping up with the latest changes
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪最新变化
- en: 'New features are constantly being added to Laravel. If a few days have passed
    since you first installed it, try running a `composer update` command from your
    terminal. You should see the latest versions of Laravel and its dependencies being
    downloaded. Since you are already in the terminal, finding out about the latest
    features is just one command away:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 不断添加新功能。如果你首次安装它已经过去几天了，尝试从你的终端运行一个 `composer update` 命令。你应该能看到 Laravel
    及其依赖的最新版本正在下载。既然你已经在终端里了，了解最新功能只需一个命令：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This saves you from going online to find a change log or reading through a
    long history of commits on GitHub. It can also help you learn about features that
    you were not aware of. You can also find out which version of Laravel you are
    running by entering the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以让你免于上网查找变更日志或阅读 GitHub 上漫长的提交历史。它还可以帮助你了解你之前不知道的功能。你还可以通过输入以下命令来找出你正在运行的
    Laravel 版本：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All Artisan commands have to be run from your project's root directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Artisan 命令都必须从你的项目根目录运行。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: With the help of a short script such as Artisan Anywhere, available at [https://github.com/antonioribeiro/artisan-anywhere](https://github.com/antonioribeiro/artisan-anywhere),
    it is also possible to run Artisan from any subfolder in your project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 Artisan Anywhere 这样的简短脚本，它可以在 [https://github.com/antonioribeiro/artisan-anywhere](https://github.com/antonioribeiro/artisan-anywhere)
    找到，你也可以从项目的任何子目录中运行 Artisan。
- en: Inspecting and interacting with your application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查和交互你的应用程序
- en: With the `route:list` command, you can see at a glance which URLs your application
    will respond to, what their names are, and if any middleware has been registered
    to handle requests. This is probably the quickest way to get acquainted with a
    Laravel application that someone else has built.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `route:list` 命令，你可以一目了然地看到你的应用程序将响应哪些 URL，它们的名称是什么，以及是否有任何中间件被注册来处理请求。这可能是熟悉别人构建的
    Laravel 应用程序的最快方式。
- en: 'To display a table with all the routes, all you have to do is enter the following
    command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示包含所有路由的表格，你只需输入以下命令：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For example, the following is what the application we built in [Chapter 3](ch03.html
    "Chapter 3. Your First Application"), *Your First Application*, looks like:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是我们构建在 [第三章](ch03.html "第三章：你的第一个应用程序")，*你的第一个应用程序* 中应用程序的样子：
- en: '![Inspecting and interacting with your application](img/B04308_06_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![检查和交互你的应用程序](img/B04308_06_01.jpg)'
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In some applications, you might see `/{v1}/{v2}/{v3}/{v4}/{v5}` appended to
    particular routes. This is because the developer has registered a controller with
    implicit routing, and Laravel will try to match and pass up to five parameters
    to the controller.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些应用程序中，你可能会看到 `/{v1}/{v2}/{v3}/{v4}/{v5}` 被附加到特定的路由上。这是因为开发者已经注册了一个具有隐式路由的控制器，Laravel
    将尝试匹配并将最多五个参数传递给控制器。
- en: Fiddling with the internals
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 玩转内部结构
- en: When developing your application, you will sometimes need to run short, one-off
    commands to inspect the contents of your database, insert some data into it, or
    check the syntax and results of an Eloquent query. One way you could do this is
    by creating a temporary route with a closure that is going to trigger these actions.
    However, this is less than practical since it requires you to switch back and
    forth between your code editor and your web browser.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序时，你有时需要运行短期的、一次性的命令来检查数据库的内容，向其中插入一些数据，或检查 Eloquent 查询的语法和结果。你可以这样做的一种方法是通过创建一个临时路由，该路由使用闭包来触发这些操作。然而，这不太实用，因为它要求你在代码编辑器和你的网络浏览器之间来回切换。
- en: 'To make these small changes easier, Artisan provides a command called `tinker`,
    which boots up the application and lets you interact with it. Just enter the following
    command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些小更改更容易，Artisan 提供了一个名为 `tinker` 的命令，该命令启动应用程序并允许你与之交互。只需输入以下命令：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will start a **Read-Eval-Print Loop** (**REPL**) similar to what you get
    when running the `php -a` command, which starts an interactive shell. In this
    REPL, you can enter PHP commands in the context of the application and immediately
    see their output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个类似于运行 `php -a` 命令时获得的 **Read-Eval-Print Loop** (**REPL**)，该命令启动一个交互式 shell。在这个
    REPL 中，你可以在应用程序的上下文中输入 PHP 命令并立即看到它们的输出：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Version 5 of Laravel leverages PsySH, a PHP-specific REPL that provides a more
    robust shell with support for keyboard shortcuts and history.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5 版本利用了 PsySH，这是一个针对 PHP 的 REPL，它提供了一个更强大的 shell，支持键盘快捷键和历史记录。
- en: Turning the engine off
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭引擎
- en: 'Whether it is because you are upgrading a database or waiting to push a fix
    for a critical bug to production, you may want to manually put your application
    on hold to avoid serving a broken page to your visitors. You can do this by entering
    the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是因为你正在升级数据库还是等待将关键错误的修复推送到生产环境，你可能希望手动暂停你的应用程序以避免向访客提供损坏的页面。你可以通过输入以下命令来完成此操作：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will put your application into **maintenance** mode. You can determine
    what to display to users when they visit your application in this mode by editing
    the template file at `resources/views/errors/503.blade.php` (since maintenance
    mode sends an HTTP status code of `503 Service Unavailable` to the client). To
    exit maintenance mode, simply run the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使你的应用程序进入 **维护** 模式。你可以通过编辑位于 `resources/views/errors/503.blade.php` 的模板文件来确定当用户以这种方式访问你的应用程序时显示什么内容（因为维护模式向客户端发送
    `503 Service Unavailable` 的 HTTP 状态码）。要退出维护模式，只需运行以下命令：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Fine-tuning your application
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微调你的应用程序
- en: 'For every incoming request, Laravel has to load many different classes and
    this can slow down your application, particularly if you are not using a PHP accelerator
    such as **APC**, **eAccelerator**, or **XCache**. In order to reduce disk I/O
    and shave off precious milliseconds from each request, you can run the following
    command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个传入的请求，Laravel 都必须加载许多不同的类，这可能会减慢你的应用程序，尤其是如果你没有使用 PHP 加速器，如 **APC**、**eAccelerator**
    或 **XCache**。为了减少磁盘 I/O 并从每个请求中节省宝贵的时间，你可以运行以下命令：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will trim and merge many common classes into one file located inside `storage/framework/compiled.php`.
    The `optimize` command is something you could, for example, include in a deployment
    script.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将修剪并合并许多常见的类到一个位于 `storage/framework/compiled.php` 内的文件中。`optimize` 命令是你可以，例如，包含在部署脚本中的内容。
- en: By default, Laravel will not compile your classes if `app.debug` is set to `true`.
    You can override this by adding the `--force` flag to the command but bear in
    mind that this will make your error messages less readable.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果 `app.debug` 设置为 `true`，Laravel 不会编译你的类。你可以通过在命令中添加 `--force` 标志来覆盖此设置，但请注意，这将使错误信息更难以阅读。
- en: Caching routes
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存路由
- en: 'Apart from caching class maps to improve the response time of your application,
    you can also cache the routes of your application. This is something else you
    can include in your deployment process. The command? Simply enter the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了缓存类映射以改善应用程序的响应时间外，你还可以缓存应用程序的路由。这是你可以包含在你的部署过程中的另一项内容。命令？只需输入以下内容：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The advantage of caching routes is that your application will get a little faster
    as its routes will have been pre-compiled, instead of evaluating the URL and any
    matches routes on each request. However, as the routing process now refers to
    a cache file, any new routes added will not be parsed. You will need to re-cache
    them by running the `route:cache` command again. Therefore, this is not suitable
    during development, where routes might be changing frequently.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存路由的优势是，由于路由已经被预编译，你的应用程序会稍微快一点。然而，由于路由过程现在引用一个缓存文件，任何新添加的路由都不会被解析。你需要通过再次运行
    `route:cache` 命令来重新缓存它们。因此，这不适合开发阶段，因为路由可能会频繁更改。
- en: Generators
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器
- en: 'Laravel 5 ships with various commands to generate new files of different types.
    Throughout the book, we''ve already used a couple (that is, for generating new
    migration files), but there are others too. If you run `$ php artisan list` under
    the `make` namespace, you will find the following entries:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5 随带各种命令来生成不同类型的文件。在整个书中，我们已经使用了一些（即用于生成新的迁移文件），但还有其他一些。如果你在 `make`
    命名空间下运行 `$ php artisan list`，你将找到以下条目：
- en: '`make:command`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:command`'
- en: '`make:console`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:console`'
- en: '`make:controller`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:controller`'
- en: '`make:event`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:event`'
- en: '`make:middleware`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:middleware`'
- en: '`make:migration`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:migration`'
- en: '`make:model`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:model`'
- en: '`make:provider`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:provider`'
- en: '`make:request`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make:request`'
- en: 'These commands create a stub file in the appropriate location in your Laravel
    application containing boilerplate code ready for you to get started with. This
    saves keystrokes, creating these files from scratch. All of these commands require
    a name to be specified, as shown in the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令在你的 Laravel 应用程序适当的位置创建一个存根文件，其中包含你开始使用的样板代码。这节省了键位，从头开始创建这些文件。所有这些命令都需要指定一个名称，如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will create an Eloquent model class called `Cat` at `app/Cat.php`, as
    well as a corresponding migration to create a `cats` table. If you do not need
    to create a migration when making a model (for example, if the table already exists),
    then you can pass the `--no-migration` option as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `app/Cat.php` 创建一个名为 `Cat` 的 Eloquent 模型类，以及一个相应的迁移来创建 `cats` 表。如果你在创建模型时不需要创建迁移（例如，如果表已经存在），则可以按照以下方式传递
    `--no-migration` 选项：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A new model class will look like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的模型类看起来像这样：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: From here, you can define your own properties and methods.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以定义自己的属性和方法。
- en: 'The other commands may have options. The best way to check is to append `--help`
    after the command name, as shown in the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其他命令可能有选项。最好的检查方法是命令名称后附加 `--help`，如下所示：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You will see that this command has `--handler` and `--queued` options to modify
    the class stub that is created.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这个命令有 `--handler` 和 `--queued` 选项来修改创建的类存根。
- en: Rolling out your own Artisan commands
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滚出你自己的 Artisan 命令
- en: At this stage you might be thinking about writing your own bespoke commands.
    As you will see, this is surprisingly easy to do with Artisan. If you have used
    Symfony's Console component, you will be pleased to know that an Artisan command
    is simply an extension of it with a slightly more expressive syntax. This means
    the various helpers will prompt for input, show a progress bar, or format a table,
    are all available from within Artisan.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能正在考虑编写自己的定制命令。正如你将看到的，使用 Artisan 做这件事出奇地简单。如果你使用过 Symfony 的 Console
    组件，你会很高兴地知道 Artisan 命令只是它的一个扩展，语法稍微更丰富一些。这意味着各种助手将提示输入，显示进度条，或格式化表格，所有这些都可以在 Artisan
    中使用。
- en: The command that we are going to write depends on the application we built in
    [Chapter 3](ch03.html "Chapter 3. Your First Application"), *Your First Application*.
    It will allow you to export all cat records present in the database as a CSV with
    or without a header line. If no output file is specified, the command will simply
    dump all records onto the screen in a formatted table.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要编写的命令取决于我们在 [第 3 章](ch03.html "第 3 章。你的第一个应用程序") 中构建的应用程序，*你的第一个应用程序*。它将允许你将数据库中现有的所有猫记录导出为带或不带标题行的
    CSV 文件。如果没有指定输出文件，命令将简单地以格式化的表格形式将所有记录输出到屏幕上。
- en: Creating the command
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建命令
- en: There are only two required steps to create a command. Firstly, you need to
    create the command itself, and then you need to register it manually.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 创建命令只需要两个步骤。首先，你需要创建命令本身，然后你需要手动注册它。
- en: 'We can make use of the following command to create a console command we have
    seen previously:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令来创建我们之前看到的控制台命令：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will generate a class inside `app/Console/Commands`. We will then need
    to register this command with the console kernel, located at `app/Console/Kernel.php`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `app/Console/Commands` 内部生成一个类。然后我们需要将此命令注册到控制台内核，位于 `app/Console/Kernel.php`：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you now run `php artisan`, you should see a new command called `command:name`.
    This command does not do anything yet. However, before we start writing the functionality,
    let's briefly look at how it works internally.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行 `php artisan`，你应该看到一个名为 `command:name` 的新命令。这个命令目前还没有做任何事情。然而，在我们开始编写功能之前，让我们简要地看看它是如何内部工作的。
- en: The anatomy of a command
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令的结构
- en: Inside the newly created command class, you will find some code that has been
    generated for you. We will walk through the different properties and methods and
    see what their purpose is.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在新创建的命令类内部，你会找到为你生成的某些代码。我们将遍历不同的属性和方法，看看它们的目的。
- en: 'The first two properties are the name and description of the command. Nothing
    exciting here, this is only the information that will be shown in the command
    line when you run Artisan. The colon is used to namespace the commands, as shown
    here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个属性是命令的名称和描述。这里没有什么激动人心的，这只是当你运行 Artisan 时将在命令行中显示的信息。冒号用于命名空间命令，如下所示：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then you will find the `fire` method. This is the method that gets called when
    you run a particular command. From there, you can retrieve the arguments and options
    passed to the command, or run other methods.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会找到 `fire` 方法。这是当你运行特定命令时被调用的方法。从那里，你可以检索传递给命令的参数和选项，或者运行其他方法。
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Lastly, there are two methods that are responsible for defining the list of
    arguments or options that are passed to the command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有两个方法负责定义传递给命令的参数或选项列表：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Each argument or option can have a name, a description, and a default value
    that can be mandatory or optional. Additionally, options can have a shortcut.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数或选项都可以有一个名称、一个描述和一个默认值，这个默认值可以是强制性的或可选的。此外，选项可以有快捷方式。
- en: 'To understand the difference between arguments and options, consider the following
    command, where options are prefixed with two dashes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解参数和选项之间的区别，考虑以下命令，其中选项以两个连字符为前缀：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, `option_two` does not have a value; it is only used as a flag.
    The `-v` flag only has one dash since it is a shortcut. In your console commands,
    you'll need to verify any option and argument values the user provides (for example,
    if you're expecting a number, to ensure the value passed is actually a numerical
    value).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`option_two` 没有值；它仅用作标志。`-v` 标志只有一个连字符，因为它是一个快捷方式。在你的控制台命令中，你需要验证用户提供的任何选项和参数值（例如，如果你期望一个数字，以确保传递的值实际上是一个数值）。
- en: Arguments can be retrieved with `$this->argument($arg)`, and options—you guessed
    it—with `$this->option($opt)`. If these methods do not receive any parameters,
    they simply return the full list of parameters. You refer to arguments and options
    via their names, that is, `$this->argument('argument_name');`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `$this->argument($arg)` 获取参数，而选项——没错——使用 `$this->option($opt)`。如果这些方法没有接收任何参数，它们将简单地返回完整的参数列表。你通过它们的名称来引用参数和选项，即
    `$this->argument('argument_name');`。
- en: Writing the command
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写命令
- en: 'We are going to start by writing a method that retrieves all cats from the
    database and returns them as an array:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编写一个方法，从数据库中检索所有猫并将它们作为数组返回：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There should not be anything new here. We could have used the `toArray()` method,
    which turns an Eloquent collection into an array, but we would have had to flatten
    the array and exclude certain fields.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里不应该有任何新内容。我们本可以使用 `toArray()` 方法，它将 Eloquent 集合转换为数组，但我们必须扁平化数组并排除某些字段。
- en: 'Then we need to define what arguments and options our command expects:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要定义我们的命令期望的参数和选项：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To specify additional arguments, just add an additional element to the array
    with the same parameters:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定额外的参数，只需向数组中添加一个具有相同参数的额外元素：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The options are defined in a similar way:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 选项的定义方式类似：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The last parameter is the default value that the argument and option should
    have if it is not specified. In both the cases, we want it to be `null`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数是如果未指定，参数和选项应该具有的默认值。在这两种情况下，我们希望它是 `null`。
- en: 'Lastly, we write the logic for the `fire` method:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们编写 `fire` 方法的逻辑：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: While the bulk of this method is relatively straightforward, there are a few
    novelties. The first one is the use of the `$this->info()` method, which writes
    an informative message to the output. If you need to show an error message in
    a different color, you can use the `$this->error()` method.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个方法的大部分内容相对简单，但也有一些新特性。第一个是使用`$this->info()`方法，它将一条信息性消息写入输出。如果您需要以不同颜色显示错误消息，可以使用`$this->error()`方法。
- en: Further down in the code, you will see some functions that are used to generate
    a table. As we mentioned previously, an Artisan command extends the Symfony console
    component and, therefore, inherits all of its helpers. These can be accessed with
    `$this->getHelperSet()`. Then it is only a matter of passing arrays for the header
    and rows of the table, and calling the `render` method.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的下方，您将看到一些用于生成表格的函数。正如我们之前提到的，Artisan命令扩展了Symfony控制台组件，因此继承了所有其辅助函数。这些可以通过`$this->getHelperSet()`访问。然后只需传递表格的标题和行数组，并调用`render`方法即可。
- en: 'To see the output of our command, we will run the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们命令的输出，我们将运行以下命令：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Scheduling commands
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安排命令
- en: Traditionally, if you wanted a command to run periodically (hourly, daily, weekly,
    and so on), then you would have to set up a Cron job in Linux-based environments,
    or a scheduled task in Windows environments. However, this comes with drawbacks.
    It requires the user to have server access and familiarity with creating such
    schedules. Also, in cloud-based environments, the application may not be hosted
    on a single machine, or the user might not have the privileges to create Cron
    jobs. The creators of Laravel saw this as something that could be improved, and
    have come up with an expressive way of scheduling Artisan tasks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，如果您想要一个命令定期运行（每小时、每天、每周等），那么您必须在基于Linux的环境中设置Cron作业，或者在Windows环境中设置计划任务。然而，这也有一些缺点。它要求用户具有服务器访问权限并熟悉创建此类计划。此外，在基于云的环境中，应用程序可能不在单个机器上托管，或者用户可能没有创建Cron作业的权限。Laravel的创建者认为这可以改进，并想出了一个表达性良好的安排Artisan任务的方法。
- en: Your schedule is defined in `app/Console/Kernel.php`, and with your schedule
    being defined in this file, it has the added advantage of being present in source
    control.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您的计划定义在`app/Console/Kernel.php`中，并且由于您的计划定义在这个文件中，它具有额外的优势，即存在于源控制中。
- en: 'If you open the Kernel class file, you will see a method named `schedule`.
    Laravel ships with one by default that serves as an example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开Kernel类文件，您将看到一个名为`schedule`的方法。Laravel默认提供这个方法作为示例：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you''ve set up a Cron job in the past, you will see that this is instantly
    more readable than the crontab equivalent:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前设置过Cron作业，您会看到这比crontab等价物更容易阅读：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Specifying the task in code also means we can easily change the console command
    to be run without having to update the crontab entry.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中指定任务也意味着我们可以轻松地更改要运行的控制台命令，而无需更新crontab条目。
- en: 'By default, scheduled commands will not run. To do so, you need a single Cron
    job that runs the scheduler each and every minute:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，计划命令不会运行。要这样做，您需要一个单独的Cron作业，每分钟运行一次调度程序：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When the scheduler is run, it will check for any jobs whose schedules match
    and then runs them. If no schedules match, then no commands are run in that pass.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当调度程序运行时，它将检查任何与计划匹配的作业，然后运行它们。如果没有匹配的计划，则在该次运行中不运行任何命令。
- en: 'You are free to schedule as many commands as you wish, and there are various
    methods to schedule them that are expressive and descriptive:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自由地安排您想要的任何数量的命令，并且有各种表达性和描述性的方法来安排它们：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can also specify a time for a scheduled command to run:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指定一个时间来运行计划中的命令：
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Alternatively, you can create less frequent scheduled commands:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您还可以创建更频繁的计划命令：
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The first parameter in the second example is the day, with `0` representing
    Sunday, and `1` through `6` representing Monday through Saturday, and the second
    parameter is the time, again specified in 24-hour format. You can also explicitly
    specify the day on which to run a scheduled command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例中的第一个参数是日期，其中`0`代表星期日，`1`到`6`代表星期一到星期六，第二个参数是时间，同样以24小时制指定。您还可以明确指定运行计划命令的日期：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you have a potentially long-running command, then you can prevent it from
    overlapping:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个可能运行时间较长的命令，那么您可以防止它重叠：
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Along with the schedule, you can also specify the environment under which a
    scheduled command should run, as shown in the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除了计划，你还可以指定计划命令应在哪个环境下运行，如下面的命令所示：
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You could use this to run commands in a production environment, for example,
    archiving data or running a report periodically.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个功能在生产环境中运行命令，例如，定期存档数据或运行报告。
- en: 'By default, scheduled commands won''t execute if the maintenance mode is enabled.
    This behavior can be easily overridden:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果启用维护模式，计划命令不会执行。这种行为可以很容易地覆盖：
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Viewing the output of scheduled commands
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看计划命令的输出
- en: For some scheduled commands, you probably want to view the output somehow, whether
    that is via e-mail, logged to a file on disk, or sending a callback to a pre-defined
    URL. All of these scenarios are possible in Laravel.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些计划命令，你可能希望以某种方式查看输出，无论是通过电子邮件、记录到磁盘上的文件，还是发送回调到预定义的URL。在Laravel中，所有这些场景都是可能的。
- en: 'To send the output of a job via e-mail by using the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过以下命令通过电子邮件发送作业的输出：
- en: '[PRE35]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you wish to write the output of a job to a file on disk, that is easy enough
    too:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望将作业的输出写入磁盘上的文件，这也很简单：
- en: '[PRE36]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can also ping a URL after a job is run:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在作业运行后ping一个URL：
- en: '[PRE37]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This will execute a `GET` request to the specified URL, at which point you could
    send a message to your favorite chat client to notify you that the command has
    run.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向指定的URL发送一个`GET`请求，此时你可以向你的聊天客户端发送消息，通知你命令已运行。
- en: 'Finally, you can chain the preceding command to send multiple notifications:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以将前面的命令链式调用以发送多个通知：
- en: '[PRE38]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: However, note that you have to send the output to a file before it can be e-mailed
    if you wish to do both.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，如果你希望同时发送电子邮件，你必须先将输出发送到文件。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned the different ways in which Artisan can assist
    you in the development, debugging, and deployment process. We have also seen how
    easy it is to build a custom Artisan command and adapt it to your own needs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了Artisan如何以不同的方式协助你在开发、调试和部署过程中的工作。我们还看到了如何轻松构建自定义Artisan命令并适应你的需求。
- en: If you are relatively new to the command line, you will have had a glimpse into
    the power of command-line utilities. If, on the other hand, you are a seasoned
    user of the command line and you have written scripts with other programming languages,
    you can surely appreciate the simplicity and expressiveness of Artisan.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你相对较新于命令行，你将一瞥命令行工具的力量。另一方面，如果你是命令行的资深用户，并且使用其他编程语言编写过脚本，你一定能欣赏Artisan的简洁性和表达性。
- en: In the next chapter, we will take a look at the features Laravel offers us to
    secure our application, as well as authenticating and authorizing users.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Laravel为我们提供的安全应用程序的功能，以及用户认证和授权。
