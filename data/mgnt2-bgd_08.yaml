- en: Indexer(s)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引器
- en: Indexing is the process of transforming data by reducing it to flattened data
    with less database tables. This process is run for products, categories, and so
    on in order to improve the performance of a web store. Since data constantly changes,
    this is not a one-time process. Rather, it is a periodic one. The `Magento_Indexer`
    module is a base of the `Magento` Indexing functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是通过对数据进行简化以减少数据库表数来转换数据的过程。这个过程用于产品、类别等，以提高网店性能。由于数据不断变化，这不仅仅是一个一次性过程，而是一个周期性的过程。`Magento_Indexer`模块是`Magento`索引功能的基础。
- en: The `Magento` console tool supports the following indexer commands.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`Magento`控制台工具支持以下索引器命令。'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On running `php bin/magento indexer:info`, you will get a list of all the Magento
    indexers; the default ones are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行`php bin/magento indexer:info`时，你会得到所有Magento索引器的列表；默认的索引器如下：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will see all the indexers listed in the Magento admin in the **System**
    | **Tools** | **Index** **Management** menu.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在`系统` | `工具` | `索引管理`菜单中的`Magento`管理后台看到所有索引器。
- en: 'From within the admin area, we can only change the indexer mode. There are
    two modes of indexers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理区域内部，我们只能更改索引器模式。索引器有两种模式：
- en: '**Update on Save**: Index tables are updated right after the dictionary data
    is changed'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存时更新**：索引表在字典数据更改后立即更新'
- en: '**Update by Schedule**: Index tables are updated by `cron` jobs according to
    the configured schedule'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按计划更新**：索引表根据配置的计划由`cron`作业更新'
- en: Since indexers cannot be run manually from admin, we have to rely either on
    their manual execution or the `cron` execution.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于无法从管理后台手动运行索引器，我们只能依赖它们的手动执行或`cron`执行。
- en: 'Manual execution is done via the following console command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 手动执行是通过以下控制台命令完成的：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding command will run all the indexers at once. We can fine-tune it
    further to execute individual indexes by running a console command that is similar
    to the following line of code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令会一次性运行所有索引器。我们可以进一步微调，通过运行一个类似于以下代码的命令来执行单个索引器：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Cron-executed indexers are defined via the `Magento_Indexer` module, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Magento_Indexer`模块定义了Cron执行的索引器，如下所示：
- en: '`indexer_reindex_all_invalid`: This will execute every minute of every hour
    every day. It runs the `reindexAllInvalid` method on an instance of the `Magento\Indexer\Model\Processor`
    class.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexer_reindex_all_invalid`：这将每天每小时每分钟执行一次。它会在`Magento\Indexer\Model\Processor`类的一个实例上运行`reindexAllInvalid`方法。'
- en: '`indexer_update_all_views`: This will execute every minute of every hour every
    day. It runs the `updateMview` method on an instance of the `Magento\Indexer\Model\Processor`
    class.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexer_update_all_views`：这将每天每小时每分钟执行一次。它会在`Magento\Indexer\Model\Processor`类的一个实例上运行`updateMview`方法。'
- en: '`indexer_clean_all_changelogs`: This will execute the 0th minute of every hour
    every day. It runs the `clearChangelog` method on an instance of the `Magento\Indexer\Model\Processor`
    class.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexer_clean_all_changelogs`：这将每天每小时的第0分钟执行一次。它会在`Magento\Indexer\Model\Processor`类的一个实例上运行`clearChangelog`方法。'
- en: These `cron` jobs use an operating system `cron` job setup in such a way that
    the `Magento` `cron` job is triggered every minute.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`cron`作业使用操作系统`cron`作业设置，使得`Magento`的`cron`作业每分钟被触发一次。
- en: 'The following three statuses is what an indexer can have:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个状态是索引器可能具有的状态：
- en: '`valid`: The data is synchronized and no re-indexing is required'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`valid`：数据已同步，无需重新索引'
- en: '`invalid`: The original data was changed and the index should be updated'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`invalid`：原始数据已更改，索引应更新'
- en: '`working`: The index process is running'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`working`：索引过程正在运行'
- en: While we won't go into the details of actually creating a custom indexer within
    this chapter, it is worth noting that `Magento` defines its indexers in the `vendor/magento/module-*/etc/indexer.xml`
    file. This might come in handy for cases where we want a deeper understanding
    of the inner workings of an individual indexer. For example, the `catalog_product_flat`
    indexer is implemented via the `Magento\Catalog\Model\Indexer\Product\Flat` class,
    as defined within the `vendor/magento/module-catalog/etc/indexer.xml` file. By
    studying the `Flat` class implementation in depth, you can learn how data is taken
    from `EAV` tables and flattened into a simplified structure.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不会在本章中详细介绍创建自定义索引器的细节，但值得注意的是，`Magento` 在 `vendor/magento/module-*/etc/indexer.xml`
    文件中定义了其索引器。这可能在我们需要深入了解单个索引器内部工作原理的情况下派上用场。例如，`catalog_product_flat` 索引器是通过 `Magento\Catalog\Model\Indexer\Product\Flat`
    类实现的，该类在 `vendor/magento/module-catalog/etc/indexer.xml` 文件中定义。通过深入研究 `Flat` 类的实现，你可以了解数据是如何从
    `EAV` 表中提取并扁平化成简化结构的。
- en: Summary
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered some of the most relevant aspects of Magento, which
    was beyond models and classes, regarding backend development. We had a look at
    `crontab.xml`, which helps us schedule `jobs` (commands) so that they can be run
    periodically. Then, we tackled notification messages, which enable us to push
    styled messages to users via a browser. The *Session and cookies* section gave
    us an understanding of how `Magento` tracks user information from a browser to
    a session. Logging and profiling showed us a simple yet effective mechanism to
    keep track of performance and possible issues across code. The *Events and observers*
    section introduced us to a powerful pattern that `Magento` implements across the
    code, where we can trigger custom code execution when a certain event is fired.
    The section on caching guided us through the available cache types, and we studied
    how to create and use our own cache type. Through the section on frontend apps
    (widgets), we learned how to create our own miniature apps that can be called
    into CMS pages and blocks. Custom variables gave us an insight into a simple yet
    interesting feature, where we can define a variable via the admin interface and
    then use it within CMS page, block, or e-mail template. The section on i18n showed
    us how to use the Magento translation feature to translate any string on three
    different levels, namely the module CSV file, the theme CSV file, and inline translation.
    Finally, we had a look at indexers and their mode and status; we learned how to
    control their execution.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了 Magento 的许多最相关方面，这些方面超出了模型和类，涉及后端开发。我们查看了一下 `crontab.xml`，它帮助我们安排
    `jobs`（命令），以便它们可以定期运行。然后，我们处理了通知消息，这使得我们可以通过浏览器向用户推送样式化的消息。*会话和cookies* 部分让我们了解了
    `Magento` 如何从浏览器跟踪用户信息到会话。日志和性能分析展示了跟踪性能和潜在问题的简单而有效的方法。*事件和观察者* 部分介绍了一种强大的模式，`Magento`
    在代码中实现，我们可以触发自定义代码执行，当某个事件被触发时。缓存部分引导我们了解可用的缓存类型，并研究了如何创建和使用我们自己的缓存类型。通过前端应用（小工具）部分，我们学习了如何创建自己的小型应用，这些应用可以被调用到
    CMS 页面和块中。自定义变量让我们了解了一个简单而有趣的功能，我们可以通过管理界面定义一个变量，然后在 CMS 页面、块或电子邮件模板中使用它。*国际化*
    部分展示了如何使用 Magento 翻译功能在三个不同级别上翻译任何字符串，即模块 CSV 文件、主题 CSV 文件和内联翻译。最后，我们查看了一下索引器和它们的模式和状态；我们学习了如何控制它们的执行。
- en: The next chapter will tackle frontend development. We will learn how create
    our own theme and use blocks and layouts to affect the output.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将探讨前端开发。我们将学习如何创建自己的主题，并使用块和布局来影响输出。
