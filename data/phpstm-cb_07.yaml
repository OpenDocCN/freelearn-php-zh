- en: Chapter 7. PhpStorm and Phing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. PhpStorm和Phing
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Connecting Phing and PhpStorm
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接Phing和PhpStorm
- en: Catching Phing build file syntax problems
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获Phing构建文件语法问题
- en: Building a PhpStorm application using Phing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Phing构建PhpStorm应用程序
- en: Using a different build file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的构建文件
- en: Doing wonders with Phing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用Phing创造奇迹
- en: Using the Phing build view
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Phing构建视图
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Grandma used to say, "Don't copy, be original". Software engineering says, "Don't
    reinvent the wheel".
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 奶奶曾经说过：“不要复制，要原创”。软件工程则说：“不要重新发明轮子”。
- en: Whom do you trust? Trust software engineering if Grandma was not a software
    engineer!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你信任谁？如果奶奶不是软件工程师，那么就信任软件工程吧！
- en: They have copied and they have built great things that way. Saying "copying"
    could be controversial, so based on what is a more politically correct term to
    describe copying, let's go with *inspiration*. Thus, to state in diplomatic terms,
    they have got inspired from an existing software and created a new software altogether.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 他们通过这种方式复制并构建了伟大的事物。说“复制”可能会引起争议，所以基于一个更符合政治正确的术语来描述复制，我们用*灵感*。因此，用外交术语来说，他们是受到了现有软件的启发，并完全创建了一个新的软件。
- en: But, is this evil? What if that software did not exist? What if that software
    is quite useful?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这是邪恶的吗？如果那个软件不存在呢？如果那个软件非常有用呢？
- en: 'Putting colors in this black-and-white picture, there was software: a build
    tool available for another language, Java, with the name Ant. People (the programmers)
    who were PHP enthusiasts thought of having a similar build tool, so some good
    people toiled hard and created **Phing** for the task. Thus, Phing has become
    a build tool for PHP, and it is said that Phing is Ant-based.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张黑白图片中添加颜色，这里就有软件：一个为另一种语言Java提供的构建工具，名为Ant。PHP爱好者（程序员）们想到了拥有一个类似的构建工具，于是有好事者辛勤劳作，为这项任务创造了**Phing**。因此，Phing成为了PHP的构建工具，据说Phing是基于Ant的。
- en: 'Some PHP programmers will say that when PHP gets interpreted, what is the need
    to have a separate tool for it? What is the use of creating a bundle when the
    PHP source code has to be given to the client? A simple directory containing the
    PHP scripts could suffice. The simplest and the most apt answer to this is that
    when you are a software engineer; you should always have everything automated—even
    the simplest of tasks as this one. Phing automates a number of processes: anything
    that you can imagine (in the PHP context). You can create an archive, check out
    code, deploy code, clean up logs, back up code—just think and there will be Phing
    (intentional rhyme).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一些PHP程序员可能会说，当PHP被解释时，为什么还需要一个单独的工具呢？当PHP源代码必须提供给客户时，创建一个捆绑包有什么用？一个简单的包含PHP脚本的目录就足够了。对这个问题的最简单、最恰当的回答是，当你是一名软件工程师时，你应该总是让一切自动化——即使是这个最简单的任务。Phing自动化了许多过程：在PHP环境中你能想象到的一切。你可以创建归档、检出代码、部署代码、清理日志、备份代码——只需思考，就会有Phing（有意为之的押韵）。
- en: When you work with Phing, you also need to understand what goes on under the
    hood. So, you write down instructions in the XML format based on some rules. These
    XML-based instructions are known as tasks for Phing. These tasks can be many,
    and the files that contain these tasks, again, can be many. It is worth noting
    here that you need to use proper (and documented) wisdom while separating tasks
    (or grouping tasks) because the more you stick to the principles of software engineering,
    the easier you will handle the compartmentalization better. Phing, in itself,
    is a code written in PHP (as already stated). This code, when executed, reads
    from the XML file you have written and obediently follows what has been written
    (provided the XML document itself is well formatted and adheres to the Phing XML
    rule). You can call this XML file the build file because that is its common name.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与Phing一起工作时，你还需要了解底层发生了什么。所以，你根据一些规则写下XML格式的指令。这些基于XML的指令被称为Phing的任务。这些任务可以有很多，包含这些任务的文件也可以有很多。在这里值得注意的是，在分离任务（或分组任务）时，你需要使用适当的（并且有文档记录的）智慧，因为越坚持软件工程的原则，你将越容易更好地处理模块化。正如已经提到的，Phing本身是用PHP编写的代码。当执行时，它会读取你编写的XML文件，并忠诚地遵循其中的内容（前提是XML文档本身格式良好，并遵循Phing的XML规则）。你可以把这个XML文件称为构建文件，因为这是它的常见名称。
- en: Did you notice that Phing has a strange name? It sounds more like an indicative
    sound of a commercial advertisement in between radio relay. Jokes apart, Phing
    is a recursive acronym—do you remember the first time you heard this word? Just
    remember that when you cannot remember anything, better start from the beginning
    (pun intended). Phing stands for **PH**ing **I**s **N**ot **G**nu's make. God
    bless those who run so short on names.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到Phing有一个奇怪的名字吗？它听起来更像是无线电中继之间的商业广告的指示性声音。开玩笑的，Phing是一个递归缩写词——你还记得第一次听到这个词的时候吗？只需记住，当你什么都想不起来的时候，最好从开始的地方（双关语）开始。Phing代表**PH**ing
    **I**s **N**ot **G**nu's make。愿上帝保佑那些名字很短的人。
- en: Connecting Phing and PhpStorm
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接Phing和PhpStorm
- en: Having obtained some very basic information about Phing, now is the time for
    you to have some real-world action! Without PhpStorm, the action would have been
    centered on Phing, but since you are cooking with PhpStorm, you need to have a
    view from added angles. Thus, a probable roadmap for you would be to get Phing,
    install it locally on your development machine, and tell PhpStorm that Phing has
    been installed and that it needs to work in synchronization with Phing. Actually,
    PhpStorm makes use of the functionality that Phing provides.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取了一些关于Phing的非常基本的信息之后，现在是你进行实际操作的时候了！如果没有PhpStorm，操作将集中在Phing上，但既然你在使用PhpStorm，你需要从多个角度来考虑。因此，对你来说，一个可能的路线图可能是获取Phing，在你的开发机器上本地安装它，并告诉PhpStorm
    Phing已经安装，并且需要与Phing同步工作。实际上，PhpStorm正是利用了Phing提供的功能。
- en: 'Before we delve into the depths of building a build file, it is worth noting
    a few of the major features of Phing, which are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨构建文件的深度之前，值得注意Phing的一些主要特性，如下所示：
- en: Simple XML build files
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的XML构建文件
- en: Rich set of provided tasks
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了丰富的任务集
- en: Easily extendable via PHP classes
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过PHP类轻松扩展
- en: Platform-independent
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台无关性
- en: No required external dependencies
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需外部依赖
- en: Tip
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you want to read more about Phing tasks, I recommend that you visit the official
    website of Phing ([http://www.phing.info/](http://www.phing.info/)).
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于Phing任务的信息，我建议你访问Phing的官方网站（[http://www.phing.info/](http://www.phing.info/))。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: To get Phing is everyone's cup of tea indeed. It can be downloaded as a phar
    using the command `wget -c http://www.phing.info/get/phing-latest.phar`. You can
    run this command in the terminal (which is accessible through *Alt* + *F12*).
    Once you do that, with a working Internet connection, you can have this phar downloaded.
    You need to note the path where the file has been loaded. It is recommended that
    you move the executables under a common folder that is not modified (doesn't have
    write permissions associated with it). It is not that there would be errors in
    it—doing that is good practice and keeps the operating system files and directories
    organized.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 获取Phing确实是每个人的最爱。你可以使用命令`wget -c http://www.phing.info/get/phing-latest.phar`将其作为phar下载。你可以在终端（通过*Alt*
    + *F12*访问）中运行此命令。一旦这样做，在有工作的互联网连接的情况下，你可以下载这个phar。你需要注意文件被加载的路径。建议你将可执行文件移动到一个不修改的公共文件夹下（没有与之关联的写权限）。这样做并不是因为它会有错误——这样做是良好的实践，并且使操作系统文件和目录保持组织。
- en: 'Having obtained the phar, it is time to tell PhpStorm about Phing. You need
    to perform the following steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 获取phar后，是时候告诉PhpStorm关于Phing的信息了。你需要执行以下步骤：
- en: Go to the **Project** view. Locate **External Libraries**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**项目**视图。定位到**外部库**。
- en: Access the right-click context menu, and select the **Configure PHP include
    paths** option.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问右键点击上下文菜单，并选择**配置PHP包含路径**选项。
- en: Provide the full path to the location where you downloaded (or moved) the package.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供你下载（或移动）包的完整路径。
- en: Bingo! You successfully told PhpStorm that you added a new library for the open
    project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Bingo！你成功告诉PhpStorm你为开源项目添加了一个新的库。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To make Phing available for all applications running PHP, you can add it to
    the PHP master include path—something like `/usr/share/php5`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使Phing对所有运行PHP的应用程序可用，你可以将其添加到PHP主包含路径中——类似于`/usr/share/php5`。
- en: At this time, if you wish to check what changes were applied when you installed
    Phing, you won't be successful. You won't be able to see any Phing-related menu
    item anywhere in PhpStorm. You won't be able to see any extra icons, nor any extra
    views related to Phing. It would be natural for you to start considering that
    something was left out during the installation of Phing. Not to worry mate, stay
    tuned!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时候，如果你希望检查安装 Phing 时应用了哪些更改，你将不会成功。你将无法在任何地方看到任何与 Phing 相关的菜单项。你将无法看到任何额外的图标，也无法看到任何与
    Phing 相关的额外视图。你可能会开始考虑在 Phing 安装过程中遗漏了某些东西。不用担心，请继续关注！
- en: How it works…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'To unleash the power of Phing, you need to execute it. To execute it, you need
    to have it installed. But you have already installed Phing, and you are not sure
    whether it got installed properly or not. This seems like a vicious circle. Phing
    needs an input file to understand what it has to do. This is known as the **build
    file**. So, you need to create a new build file inside your project. A build file
    is an XML document and is based on some rules. The default name is `build.xml`.
    So, a very basic build file looks somewhat like the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要释放 Phing 的力量，你需要执行它。要执行它，你需要安装它。但你已经安装了 Phing，你不确定它是否被正确安装。这似乎是一个恶性循环。Phing
    需要一个输入文件来理解它需要做什么。这被称为**构建文件**。因此，你需要在你的项目内部创建一个新的构建文件。构建文件是一个 XML 文档，并基于一些规则。默认名称是
    `build.xml`。所以，一个非常基本的构建文件看起来可能像以下代码：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Having done this, you need to do the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，你需要做以下事情：
- en: Open the Project view and select the build file.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目视图并选择构建文件。
- en: Access the right-click context menu.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问右键单击上下文菜单。
- en: There will be a new option (magic!) available with the name **Add as Phing build
    file**. Select that option.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会有一个名为**添加为 Phing 构建文件**的新选项（神奇！）。选择该选项。
- en: In order to check for successful integration, you can select **View** | **Tool
    windows**, and you will be able to see a new option available, **Phing Build**.
    If you can see this new option, congratulations, you have successfully connected
    Phing to PhpStorm.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查集成是否成功，你可以选择**视图** | **工具窗口**，你将能够看到一个新选项可用，**Phing 构建**。如果你能看到这个新选项，恭喜你，你已经成功将
    Phing 连接到 PhpStorm。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While creating a build file, PhpStorm needs to have at least one target specified.
    If you leave a build file empty, PhpStorm will be your friend in need.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建构建文件时，PhpStorm 需要至少指定一个目标。如果你留一个构建文件为空，PhpStorm 将成为你的好朋友。
- en: There's more…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Since Phing is a software written in PHP, PhpStorm wants to have this software
    well within its reach. So, you add the include path to the project to achieve
    this target. When PhpStorm has Phing within reach, it attempts to create some
    options for Phing. For this purpose, it looks up to find out the build file and
    hence the targets. Once it finds the targets, it understands the targets and then
    creates the necessary options.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Phing 是用 PHP 编写的软件，PhpStorm 希望让这个软件在其范围内。所以，你添加包含路径到项目中以实现这个目标。当 PhpStorm
    拥有 Phing 在其范围内时，它会尝试为 Phing 创建一些选项。为此，它会查找以找到构建文件和目标。一旦找到目标，它就会理解目标并创建必要的选项。
- en: Catching Phing build file syntax problems
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获 Phing 构建文件语法问题
- en: Now that you have worked hard to connect PhpStorm and Phing, you must know what
    drives Phing. What is it that allows you to do wonders with Phing? What is it
    that makes your life easier and makes adherence to the principles of software
    engineering easier? The name you had to think of was build file. Yes, it is the
    build file that controls the behavior of Phing. Yes, using build file, you can
    do wonders with Phing. Yes, using build file, you can perform tasks in a clean
    way—thus adhering to the principles of software engineering.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经努力将 PhpStorm 和 Phing 连接起来，你一定知道是什么驱动着 Phing。是什么让你能够用 Phing 做出奇迹？是什么让你的生活变得更轻松，让遵循软件工程原则变得更简单？你必须想到的名字是构建文件。是的，正是构建文件控制着
    Phing 的行为。是的，使用构建文件，你可以用 Phing 做出奇迹。是的，使用构建文件，你可以以干净的方式执行任务——从而遵循软件工程的原则。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: It's perfectly okay that you can write a new build file to perform tasks with
    Phing. But this question looms large—How do you check whether the build file you
    wrote is syntactically OK. Come on, if you say that you do not create mistakes
    while writing, you must be JARVIS and no human being. To err is human, to check
    and remove that error is *PhpStorm-ine*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 写一个新的构建文件来使用Phing执行任务是完全正常的。但这个问题很突出——你如何检查你写的构建文件在语法上是否正确。来吧，如果你说你写的时候没有犯错误，那你一定是JARVIS，而不是人类。犯错是人类的本性，检查和移除错误是*PhpStorm-ine*。
- en: How to do it…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Before starting off writing build files, you need to know some very basic rules
    so that you can at least test a demonstration or Hello World actions in Phing.
    (Yes, you heard it right: it is possible to create a `Hello World` message using
    Phing.) A build file is valid to be used by Phing only when:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写构建文件之前，你需要了解一些非常基本的规则，这样你至少可以测试Phing中的演示或Hello World操作。（是的，你听得很对：使用Phing创建一个`Hello
    World`消息是可能的。）只有当构建文件：
- en: 'The file contains an opening and closing project tag. There should be only
    one, and it should be the root node of the XML tree. Inside the project tag, the
    file should contain at least one target tag: tags such as `property`, `tstamp`,
    and `propertyprompt`.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件包含一个开始和结束项目标签。应该只有一个，并且它应该是XML树的根节点。在项目标签内部，文件应该至少包含一个目标标签：例如`property`、`tstamp`和`propertyprompt`这样的标签。
- en: 'Now, revisiting the same build file, you will be able to understand the build
    file better—a second attempt makes you more mature as compared to the first attempt.
    Here, take a look at the following code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重新查看相同的构建文件，你将能够更好地理解构建文件——第二次尝试比第一次尝试让你更加成熟。在这里，看看以下代码：
- en: '[PRE1]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In order to check the syntax, the inspection has to be taken care of. There
    is an icon provided in the bottom status bar. You need to click on it and set
    the **Power Save Mode** to off and the highlighting level to **Inspections**,
    as shown in the following screenshot:![How to do it…](img/3878OT_07_01.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检查语法，必须注意检查。底部状态栏提供了一个图标。你需要点击它，将**省电模式**设置为关闭，并将高亮级别设置为**检查**，如下面的截图所示：![如何操作…](img/3878OT_07_01.jpg)
- en: 'It is time for you to play around with the build file. Not to worry, there
    is the local history to save you—you can revert to some changes at will. So, whenever
    you make mistakes in the syntax, PhpStorm shows you errors:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候让你在构建文件上玩一玩了。不用担心，有本地历史记录来帮助你——你可以随意回滚一些更改。所以，无论何时你在语法上犯错误，PhpStorm都会显示错误：
- en: If you specify an incorrect start tag, a red underline will be shown in the
    nearest matching tags and the status bar shows a message **Start tag has wrong
    closing tag**.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你指定了一个错误的开始标签，最近的匹配标签将显示红色下划线，并且状态栏显示信息**开始标签有错误的结束标签**。
- en: The wrong closing tag name will show a red underline in the incorrect tag and
    the nearest matching tag and the status bar at the bottom shows a message **Wrong
    closing tag name**.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误的结束标签名称将在错误的标签和最近的匹配标签以及底部状态栏中显示红色下划线，并且状态栏显示信息**错误的结束标签名称**。
- en: If you specify a tag that is not defined in the rule list of Phing, there are
    a number of ways in which the problem will be shown, such as the following screenshot:![How
    to do it…](img/3878OT_07_02.jpg)
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你指定了一个在Phing的规则列表中未定义的标签，问题将以多种方式显示，如下面的截图所示：![如何操作…](img/3878OT_07_02.jpg)
- en: If you specify an attribute that is not defined or allowed for a tag, the incorrect
    attribute changes color to red, and the status bar shows the message **Attribute
    <incorrect-attribute> is not allowed here**.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你指定了一个对于该标签未定义或不允许的属性，错误的属性会变成红色，并且状态栏会显示信息**属性 <incorrect-attribute> 在此处不允许**。
- en: If you forget to specify the end tag for a tag, the status bar will show the
    message **Element <element-without-closing-tag> is not closed**.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你忘记指定一个标签的结束标签，状态栏将显示信息**元素 <element-without-closing-tag> 未关闭**。
- en: '*PhpStorm* at your disposal again, proves PhpStorm.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次使用*PhpStorm*，证明了PhpStorm。
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since you will often write tasks for Phing, you can also create a new template
    for the build file. To do that, you need to select the **File** | **New** option
    and select the **Edit file templates** option. In the window that appears, you
    need to add the name of this template (which will appear whenever you select **File**
    | **New**) and the extension of this template (you need to specify `.xml`) and
    put in the content of the most basic build file that you will always require.
    Clicking on **OK** will save this template.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你将经常为Phing编写任务，你也可以为构建文件创建一个新的模板。为此，你需要选择**文件** | **新建**选项，并选择**编辑文件模板**选项。在出现的窗口中，你需要添加此模板的名称（它将在你选择**文件**
    | **新建**时出现）和此模板的扩展名（你需要指定`.xml`），并放入你将始终需要的最基本构建文件的内容。点击**确定**将保存此模板。
- en: 'The following screenshot shows a Phing file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Phing文件：
- en: '![How to do it…](img/3878OT_07_03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3878OT_07_03.jpg)'
- en: How it works…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: PhpStorm inspects code on the fly. Thus, the general rules of inspection are
    applicable on the build file as well. This setting can be turned on or off by
    selecting **File** | **Settings** | **Inspection** | **Phing** | **Phing inspections**.
    So, as you keep on typing, the inspector keeps on checking what you write and
    continues showing you warnings visually.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: PhpStorm会实时检查代码。因此，检查的一般规则也适用于构建文件。此设置可以通过选择**文件** | **设置** | **检查** | **Phing**
    | **Phing检查**来打开或关闭。所以，随着你继续输入，检查器会继续检查你输入的内容，并继续以视觉方式显示警告。
- en: There's more…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: If you want to disable the inspections, you can do it in such a way that all
    inspections are turned off. Though not recommended, it can be handy in the case
    of large files.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要禁用检查，你可以这样做，以至于所有检查都被关闭。虽然不推荐，但在处理大文件时可能会很有用。
- en: Building a PhpStorm application using Phing
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Phing构建PhpStorm应用程序
- en: So, it is time for you to have some real-world action using Phing. It is time
    to give the problem of using Phing a shot (and get hurt by its shots as well).
    It is time for you to do something useful for the business of which you are the
    backbone. Fasten your helmet and set out to work in the sun.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在是时候使用Phing进行一些实际操作了。现在是时候尝试使用Phing的问题（并受到其射击的伤害）了。现在是时候为你的事业做些有用的事情了，你是这个事业的支柱。系好头盔，在阳光下开始工作。
- en: 'The general meaning of build in other languages that require compilation is
    to compile the code, link the objects together, and create an executable. In PHP,
    though, you cannot compile the code; it is interpreted, dear: you can emulate
    the build process. How? Stay tuned.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要编译的其他语言中，构建的一般含义是编译代码，链接对象，并创建可执行文件。然而，在PHP中，你不能编译代码；它是被解释的，亲爱的：你可以模拟构建过程。如何？请耐心等待。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start with, you need to recall that you were hungry once! You must not forget
    certain things in life—one of them being your hunger. It makes you aware that
    you still need to work hard to earn bread to appease this hunger. So, when you
    were hungry, you just entered your kitchen and attempted to cook some pizza for
    yourself. Right? If you wish to pass on this same system that cooked pizza for
    you, what will your action be? You need to create a build file for Phing and write
    some targets and actions in it so that you are able to group together the necessary
    components and pass it on in one single unit.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要回忆一下你曾经饿过！你一定不要忘记生活中的某些事情——其中之一就是你的饥饿。它让你意识到你仍然需要努力工作来赚取面包以平息这种饥饿。所以，当你饿的时候，你只是进入你的厨房，试图为自己做些披萨。对吗？如果你希望传递给你做披萨的相同系统，你的行动会是什么？你需要为Phing创建一个构建文件，并在其中编写一些目标和操作，以便你能够将必要的组件组合在一起，并以一个单一单元传递出去。
- en: How to do it…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create a new build file, you need to perform the following steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的构建文件，你需要执行以下步骤：
- en: Go to the **Project** view.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**项目**视图。
- en: Select the appropriate directory, and select the build file type from the right-click
    context menu.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适当的目录，并在右键菜单中选择构建文件类型。
- en: 'You will create a build file that will look something like the following code;
    don''t worry about this code—you will get to know it in detail:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将创建一个看起来像以下代码的构建文件；不用担心这个代码——你将会详细了解它：
- en: '[PRE2]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Finally, the time is ripe for you to understand the nuts and bolts that drive
    Phing. Thus, `<project name="pizzaCookingSystem" default="compressComponents">`
    creates a project element and binds it to a namespace with the `name` attribute.
    The `default` attribute defines the default target that Phing will select to execute.
    If you visualize the Phing build file in the form of a tree, a project is the
    root node of the tree. `<target name="bundleComponents">` creates a new target
    element that is a container for the actions that you want to perform. Thus, all
    the tasks that you wish to execute are written inside the target component. The
    target is selected by the `name` attribute. If you visualize the Phing build file
    in the form of a tree containing nodes and leaves, the target element is a node
    of the tree.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你理解Phing驱动原理的时候到了。因此，`<project name="pizzaCookingSystem" default="compressComponents">`
    创建一个项目元素，并将其绑定到具有`name`属性的命名空间。`default`属性定义了Phing将选择执行的目标。如果你将Phing构建文件视为树形结构，项目是树的根节点。《target
    name="bundleComponents">` 创建一个新的目标元素，它是你想要执行的操作的容器。因此，你希望执行的所有任务都写在目标组件内部。目标是通过`name`属性选择的。如果你将Phing构建文件视为包含节点和叶子的树形结构，目标元素是树的一个节点。
- en: '`<target name="compressComponents" depends="bundleComponents">` is another
    way of writing the target element with an added attribute `depends`. So when you
    specify the `depends` attribute, you specify to the Phing engine that this target
    element depends on some other target element. It is important here for you to
    be informed that when you specify the `depends` attribute, that target element
    is executed first as compared to the current element.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`<target name="compressComponents" depends="bundleComponents">` 是另一种带有附加属性`depends`的目标元素写法。因此，当你指定`depends`属性时，你告诉Phing引擎这个目标元素依赖于其他目标元素。重要的是你要知道，当你指定`depends`属性时，该目标元素将先于当前元素执行。'
- en: '`<echo message="Creating a package directory." />` creates an element to echo
    a message to the console. What message will be displayed that depends on the contents
    of the message attribute. (Remember displaying `Hello World`? Your big smile is
    lovely!)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`<echo message="Creating a package directory." />` 创建一个元素，用于向控制台输出消息。显示的消息将取决于消息属性的内容。（还记得显示“Hello
    World”吗？你的笑容真迷人！）'
- en: '`<mkdir dir="./package" />` creates an element that creates a new directory
    in the current directory. This is synonymous to the `mkdir` command under `*nix`
    systems, which accepts the relative path as well as the absolute path as the target
    location.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`<mkdir dir="./package" />` 创建一个元素，在当前目录中创建一个新的目录。这与`*nix`系统下的`mkdir`命令同义，它接受相对路径和绝对路径作为目标位置。'
- en: '`<copy file="../Controllers/Dish.php" tofile="package/Dish.php" />` performs
    the file copy operation from the file location specified in the file attribute
    to the file location specified in the `tofile` attribute. This is synonymous to
    the `cp` command under `*nix` systems and accepts relative or absolute file pathnames.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`<copy file="../Controllers/Dish.php" tofile="package/Dish.php" />` 执行从文件属性指定的文件位置到`tofile`属性指定的文件位置的文件复制操作。这与`*nix`系统下的`cp`命令同义，并接受相对或绝对文件路径名。'
- en: '`<zip destfile="package.zip">` creates an element to handle the compressing
    of files in the ZIP format. The `destfile` attribute specifies the name of the
    compressed file that will be the output. The output path can again be relative
    or absolute.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`<zip destfile="package.zip">` 创建一个元素，用于处理ZIP格式的文件压缩。`destfile`属性指定了压缩文件的名称，该文件将是输出。输出路径可以是相对路径或绝对路径。'
- en: '`<fileset dir="package" >` creates an element to set the files to be selected
    in the compressed output file. In other words, this picks up files from a directory
    specified by the `dir` attribute.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`<fileset dir="package" />` 创建一个元素，用于设置要选入压缩输出文件的文件。换句话说，这将从由`dir`属性指定的目录中获取文件。'
- en: If you want to include selected files in the package, you can create an `include`
    element and specify the names of files you want to add to the output compressed
    file (`<include name="*" />`). Wildcard characters are acceptable here. Thus,
    a star (`*`) means that all the files specified inside the fileset element's `dir`
    attribute will be selected.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将选定的文件包含在包中，你可以创建一个`include`元素，并指定你想要添加到输出压缩文件中的文件名（`<include name="*"
    />`）。通配符字符在这里是可以接受的。因此，星号（`*`）意味着将选择文件集元素`dir`属性内部指定的所有文件。
- en: Now you can proudly say that you have the power to exploit Phing. Another feather
    in your cap, right? Excellent performance, keep it up!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以自豪地说，你拥有了利用Phing的能力。这是你帽子上的另一根羽毛，对吧？表现优秀，继续保持！
- en: Using a different build file
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的构建文件
- en: 'It happens frequently that you have mutually independent and exclusive tasks
    at hand. The principle of software engineering always advocates against grouping
    tasks together—modularity is the correct name of the phenomenon advocated. So
    is the case with you and Phing. What if you have a number of tasks to be undertaken?
    There are two routes to choose from: shorter and longer. The shorter way leads
    you to quick results but your friend, software engineering, will be offended.
    The longer way can irritate you at first, but dear friend, it would let you get
    more close to software engineering.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 经常发生的情况是你手头上有相互独立且互斥的任务。软件工程的原理总是反对将任务组合在一起——模块化是所倡导现象的正确名称。你和Phing的情况也是如此。如果你有一系列任务要执行，你有两条路可以选择：较短的和较长的。较短的路会迅速带来结果，但你的朋友，软件工程，会感到不悦。较长的路一开始可能会让你感到烦恼，但亲爱的朋友，这将让你更接近软件工程。
- en: A wise decision is to befriend software engineering and take the longer route.
    Thus, you will create individual build files for individual tasks. Beware, though.
    Deciding the grouping of tasks in itself is a double-edged sword—it cuts both
    ways.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一个明智的决定是与软件工程为友，走更长的路线。因此，你将为每个任务创建单独的构建文件。但要注意，决定任务的分组本身是一把双刃剑——它两面都锋利。
- en: How to do it…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Having grouped the tasks according to their nature, you now need to concentrate
    on how Phing can come to your rescue in your overloaded daily life. You just need
    to follow the rules in order:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据任务的性质分组后，你现在需要专注于Phing如何在你繁忙的日常生活中帮助你。你只需要遵循规则：
- en: '**Group**: Grouping the tasks is an important step to begin with. You need
    to create a directory expected to contain the tasks (build files). It is not that
    there would be errors: this is good practice to follow. A person looking at your
    code hierarchy will be able to grasp your intent with ease in that case.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组别**：将任务分组是开始的重要步骤。你需要创建一个预期包含任务的目录（构建文件）。这并不是说会有错误：这是遵循的良好实践。一个查看你的代码层次结构的人将能够轻松地理解你的意图。'
- en: '**Create**: Creating the actual build file is the next step you not only need
    to do but also take extreme care of. Since this is the workhorse, you need to
    ensure that the program structure is minimal—redundant lines will confuse you.
    You need to write tasks according to the individual activities that you have grouped.
    Ensure that you don''t leave the business team behind! So, to create the build
    file, select **File** | **New** | **Phing build file** option and write the tasks
    inside it. If you have not set any template for your build file, you need to select
    **File** | **New** | **File** and specify the name of the file with the extension
    `.xml`.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**：创建实际的构建文件是下一步，你不仅需要做，而且要非常小心。由于这是工作马，你需要确保程序结构是最小的——冗余的行会让你困惑。你需要根据你分组的单个活动来编写任务。确保你不要把业务团队落下！因此，要创建构建文件，选择**文件**
    | **新建** | **Phing构建文件**选项，并在其中编写任务。如果你没有为构建文件设置任何模板，你需要选择**文件** | **新建** | **文件**，并指定具有`.xml`扩展名的文件名。'
- en: '**Setup**: Like always, your friend PhpStorm needs to be taken into account
    for your engineering needs. It is PhpStorm that makes your life easier—always
    remember. You therefore need to add the individual build files by selecting the
    **Add as Phing build file** option. This can be done by accessing the right-click
    context menu on the appropriate build file from the Project view.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**：像往常一样，你的朋友PhpStorm需要考虑到你的工程需求。是PhpStorm让你的生活变得更轻松——始终记住。因此，你需要通过选择**添加为Phing构建文件**选项来添加单个构建文件。这可以通过从项目视图中右键单击适当的构建文件来实现。'
- en: '**Execute**: All is set now. When the need is felt, select the appropriate
    file and right-click to select **Run build file** option.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行**：一切准备就绪。当需要时，选择适当的文件，右键单击并选择**运行构建文件**选项。'
- en: 'The following screenshot shows the build file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了构建文件：
- en: '![How to do it…](img/3878OT_07_04.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/3878OT_07_04.jpg)'
- en: Thus, PhpStorm did not let anything come between two friends—you and software
    engineering.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，PhpStorm没有让你和软件工程这两个朋友之间有任何隔阂。
- en: 'A sample build looks like the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例构建文件看起来像以下代码：
- en: '[PRE3]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: A build file is the only source to provide guidance to Phing. In other words,
    Phing only considers a build file fit enough to accept the execution requests.
    So, the different tasks are just a plural form of single tasks (no pun intended).
    So, the different tasks are written down in different build files, to ensure that
    the structural modularity is maintained. The individual tasks are executed depending
    on which task is required at any given time.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 构建文件是唯一提供指导给Phing的来源。换句话说，Phing只认为构建文件足够适合接受执行请求。因此，不同的任务只是单个任务的复数形式（没有开玩笑的意思）。所以，不同的任务被记录在不同的构建文件中，以确保结构模块化得到保持。单个任务根据任何给定时间所需的任务执行。
- en: Doing wonders with Phing
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Phing创造奇迹
- en: What is art without practical usage? Practical usage means the utility of the
    art. The utility of the art clearly denotes the ability to solve a problem. So
    considering Phing as an art, it has got practical usage. Since it has practical
    usage, it has got utility. Since it has utility, it clearly denotes that it can
    solve problems for you.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 没有实际用途的艺术是什么？实际用途意味着艺术的实用性。艺术的实用性清楚地表明了解决问题的能力。所以，将Phing视为一种艺术，它具有实际用途。由于它具有实际用途，它具有实用性。由于它具有实用性，它清楚地表明它可以为您解决问题。
- en: What are you waiting for?
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您还在等什么？
- en: Think build problems, common or uncommon, think Phing. The most common problems
    are the most commonly known headache-causing agents—some of the developers in
    your team might not know the database specific language, some might not know the
    commands specific to the operating system, and some might not be trustworthy to
    be allowed to handle the system permissions; hence, the logfiles or temporary
    file cleaning tasks.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑构建问题，无论是常见的还是不常见的，考虑Phing。最常见的问题是最常见的头痛原因——您团队中的某些开发者可能不知道特定的数据库语言，有些人可能不知道特定于操作系统的命令，有些人可能不值得信任以允许他们处理系统权限；因此，日志文件或临时文件清理任务。
- en: You can write Phing tasks to tackle them all.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以编写Phing任务来处理所有这些问题。
- en: Can you write a Phing task to check out files from the SVN server and deploy
    them on a target server? Yes, you can.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您能写一个Phing任务来从SVN服务器检出文件并在目标服务器上部署它们吗？是的，您可以。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: You need to have the **PHP SSH2** extension loaded. In `*nix` (Debian-based)
    environments, the PHP SSH2 extension is available with the name `libssh2-php`.
    It can be very easily downloaded with the command `apt-get install libssh2-php`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要加载**PHP SSH2**扩展。在`*nix`（基于Debian）环境中，PHP SSH2扩展以`libssh2-php`的名称提供。它可以非常容易地通过命令`apt-get
    install libssh2-php`下载。
- en: You also need to have your SSH public key (most commonly a file with a `.pub`
    extension) added on the server on which you wish to deploy your code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在您希望部署代码的服务器上添加您的SSH公钥（通常是一个以`.pub`扩展名结尾的文件）。
- en: How to do it…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'When you think Phing, you must be mentally prepared to handle the strict syntax
    of XML. So, you need to write some XML code based on the rules of Phing to:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想到Phing时，您必须心理上准备好处理XML的严格语法。因此，您需要根据Phing的规则编写一些XML代码来：
- en: Create a list of changes based on the Subversion revision number and save it
    in a file.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据Subversion修订号创建一个更改列表，并将其保存到文件中。
- en: Export the changed files to your local server by reading from the file created
    in step 1.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过读取步骤1中创建的文件，将更改的文件导出到您的本地服务器。
- en: Deploy the exported files to the server.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将导出的文件部署到服务器上。
- en: 'This is as simple as it seems. So, you would probably do something like the
    following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像看起来那么简单。所以，您可能会做以下类似的事情：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Heavy-duty XML code! You are encouraged to be brave enough to open the hood
    and see what goes on inside.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 重型XML代码！您被鼓励勇敢地打开引擎盖，看看里面发生了什么。
- en: How it works…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '**Property Prompt** is the Phing way to ask for user input during execution.
    The message that you want to show is to be written in the `promptText` attribute.
    The input value can later be accessed with the name specified in the `propertyName`
    attribute. If you want to set a default value to act as a fallback value just
    in case the user does not enter a value, you need to set the value of the default
    value attribute.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性提示**是Phing在执行期间请求用户输入的方式。您想要显示的消息应写入`promptText`属性。稍后可以通过在`propertyName`属性中指定的名称访问输入值。如果您想设置一个默认值作为后备值，以防用户没有输入值，您需要设置默认值属性的值。'
- en: '**Exec** is the Phing way to execute a command. If the command generates output
    that you want to use in another place in your code, you need to specify a name
    that will be the reference point to this output.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Exec** 是 Phing 执行命令的方式。如果命令生成了您想在代码的另一个地方使用的输出，您需要指定一个名称，该名称将成为此输出的参考点。'
- en: 'Phing enables you to load the contents of a file using this `loadfile` tag.
    You need to specify the path of the file (absolute or relative) in the file attribute.
    The reference name for this file is written inside the `property` attribute:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Phing 允许您使用此 `loadfile` 标签加载文件的 内容。您需要在文件属性中指定文件的路径（绝对路径或相对路径）。此文件的引用名称写在 `property`
    属性内：
- en: '[PRE5]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can iterate a certain condition using the `foreach` tag. The `delimiter`
    attribute separates the values of the input specified using the `list` attribute.
    The individual element in the loop is accessible using the value specified in
    the `param` attribute. The `target` attribute denotes which target is to be repeatedly
    performed inside the loop. Take a look at the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `foreach` 标签迭代某个条件。`delimiter` 属性分隔使用 `list` 属性指定的输入值。循环中的单个元素可以通过 `param`
    属性中指定的值访问。`target` 属性表示在循环内要重复执行的目标。请看以下代码：
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's more…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Phing can create a new directory if you write the `mkdir` tag and specify the
    name of the directory to be created in the `dir` attribute. If the directory already
    exists, Phing remains silent and produces no message about the directory—you need
    to be careful yourself. You can call an arbitrary target in your build file using
    the `phingcall` tag and specifying the name of the target in the `target` attribute.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您编写了 `mkdir` 标签并指定要创建的目录的名称在 `dir` 属性中，Phing 可以创建一个新的目录。如果目录已存在，Phing 将保持沉默，不会产生关于目录的消息——您需要自己小心。您可以使用
    `phingcall` 标签调用构建文件中的任意目标，并在 `target` 属性中指定目标名称。
- en: So, again Grandma was right. You created a larger and complicated object using
    small and simple objects. Always remember her values.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，奶奶又对了。您使用小而简单的对象创建了一个更大、更复杂的目标。始终记住她的价值观。
- en: Using the Phing build view
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Phing 构建视图
- en: PhpStorm is just. PhpStorm is good. PhpStorm does not discriminate. There are
    tool windows provided for every important tool provided to you. The same is true
    for Phing as well. So, you can have an overview of what Phing can do.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: PhpStorm 就是如此。PhpStorm 很好。PhpStorm 不歧视。为每个提供的重要工具都提供了工具窗口。Phing 也是如此。因此，您可以了解
    Phing 可以做什么。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The Phing build view is accessible at **View** | **Tool windows** | **Phing
    build window**. The Phing view provides functions that are useful for Phing-related
    actions. So, you can:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 **视图** | **工具窗口** | **Phing 构建窗口** 中访问 Phing 构建视图。Phing 视图提供了对 Phing 相关操作有用的功能。因此，您可以：
- en: '**Add a new build file to execute**: There might be Phing build files you have
    written in some other editor or obtained from another person. You can add those
    files as build files in PhpStorm. To add files, click on the **+** button.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加新的构建文件以执行**：您可能已经在其他编辑器中编写了 Phing 构建文件或从另一个人那里获得了这些文件。您可以将这些文件作为构建文件添加到
    PhpStorm 中。要添加文件，请点击 **+** 按钮。'
- en: '**Remove an existing build file**: If you feel that you have added an incorrect
    version of the build file, you can always recover from your mistake. You can remove
    a build file from the project by clicking on the **–** button. You can also use
    the *Delete* key on your keyboard.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除现有的构建文件**：如果您觉得您已添加了错误的构建文件版本，您总是可以从错误中恢复。您可以通过点击 **–** 按钮从项目中删除构建文件。您也可以使用键盘上的
    *Delete* 键。'
- en: '**Run a build file**: If you feel that all the targets have been written correctly,
    you can perform that action by executing a build file. To do that, you need to
    select a build file and click on the green **Run** button.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行构建文件**：如果您觉得所有目标都已正确编写，您可以通过执行构建文件来执行此操作。要这样做，您需要选择一个构建文件并点击绿色的 **运行**
    按钮。'
- en: '**Apply target-hiding settings**: In the Phing view, you get a consolidated
    view of the individual build files and the targets you have written inside it.
    So, you can hide a target by selecting it, accessing the right-click context menu
    and clicking on **Mark to hide**. The hide settings are applied when you select
    this option available next to the **Run** button.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用目标隐藏设置**：在 Phing 视图中，您可以获得对单个构建文件及其内部编写的目标的综合视图。因此，您可以通过选择目标、访问右键单击上下文菜单并点击
    **标记为隐藏** 来隐藏一个目标。当您选择位于 **运行** 按钮旁边的此选项时，将应用隐藏设置。'
- en: '**Expand all**: You can expand all the build files to show all the (unhidden)
    targets for individual build files. The keyboard shortcut to be used is *Ctrl*
    + (Numpad) *+*.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全部展开**：您可以将所有构建文件展开以显示每个构建文件的（未隐藏的）所有目标。要使用的快捷键是*Ctrl* + (数字键盘) *+*。'
- en: '**Collapse all**: You can collapse the build files to show only the build files
    and not the targets. The keyboard shortcut for the same is *Ctrl* + (Numpad) *-*.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全部折叠**：您可以将构建文件折叠以仅显示构建文件而不是目标。相同的快捷键是*Ctrl* + (数字键盘) *-*。'
- en: '**Settings**: You can make settings for the execution of tasks by Phing. The
    settings window is accessible from inside the Phing view by the keyboard shortcut
    *Alt* + *Enter*. Inside the **Settings** window, you have the power to make a
    difference. Here''s how you can do that:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**：您可以通过Phing为任务的执行进行设置。设置窗口可以通过Phing视图内的快捷键*Alt* + *Enter*访问。在**设置**窗口中，您有权力做出改变。以下是您如何做到这一点的方法：'
- en: You get a path to the Phing executable option wherein you can set the read or
    update the path to the Phing executable for the project.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以获得一个指向Phing可执行选项的路径，在那里您可以设置读取或更新项目Phing可执行路径。
- en: Then, there are command-line options that allow you to pass on certain options,
    such as `-l` (listing the targets) and `-debug` (setting the debug mode on).
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，还有命令行选项允许您传递某些选项，例如`-l`（列出目标）和`-debug`（设置调试模式）。
- en: You can set **Properties** in the form of key-value pairs. PhpStorm gives you
    the option to select from a list of available macros or precooked placeholders.
    You can select which target(s) to hide or unhide by selecting or deselecting the
    **Hiding targets** checkbox.
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以以键值对的形式设置**属性**。PhpStorm为您提供从可用宏或预制的占位符列表中进行选择的选择。您可以通过选择或取消选择**隐藏目标**复选框来选择要隐藏或取消隐藏的目标。
- en: 'Besides this, all other settings that are available to a view in PhpStorm are
    provided here. The options are: you can set the display mode for the view in one
    of the pinned, docked, floating, and split ways. You can move the window to one
    of the four regions (top, left, bottom, and right) on the screen; resize the window
    to a required size, hide the view altogether, and so on.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有在PhpStorm中可用的视图设置都提供在这里。选项包括：您可以为视图设置显示模式，选择固定、停靠、浮动和分割中的一种方式。您可以将窗口移动到屏幕上的四个区域之一（顶部、左侧、底部和右侧）；调整窗口到所需大小，完全隐藏视图，等等。
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Phing application-specific settings that you create have to be created individually
    for each of the build files that have been added to PhpStorm.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您创建的Phing应用程序特定设置必须为添加到PhpStorm的每个构建文件单独创建。
- en: How it works…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Here, it is important to understand how the Phing settings work. PhpStorm acts
    as a proxy for whatever tool it executes—it always creates wrapper (class) for
    the target tool. Thus, when you attempt to set the command-line options or add
    properties, you are telling this proxy application to remember that whenever the
    Phing command is issued, the arguments from the command-line options textbox are
    to be executed. In other words, you pass on the arguments to the PhpStorm proxy
    application, which in turn, executes the same old Phing command. The properties
    you set are used in the build file as is. So, when you set the properties, you
    are indeed making the properties persist till you yourself do not delete it.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，理解Phing设置的工作方式非常重要。PhpStorm充当它所执行的任何工具的代理——它始终为目标工具创建包装器（类）。因此，当您尝试设置命令行选项或添加属性时，您是在告诉这个代理应用程序记住，每当发出Phing命令时，命令行选项文本框中的参数都应该被执行。换句话说，您将参数传递给PhpStorm代理应用程序，该应用程序反过来执行相同的旧Phing命令。您设置的属性将按原样用于构建文件。因此，当您设置属性时，您确实是在使属性持续到您自己不删除它为止。
