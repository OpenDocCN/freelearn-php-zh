- en: Plugin Framework Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件框架基础
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a plugin file and header
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建插件文件和头文件
- en: Adding output content to page headers using plugin actions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件操作将输出内容添加到页面头文件
- en: Using WordPress path utility functions to load external files and images
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WordPress路径实用函数加载外部文件和图片
- en: Modifying the site generator meta tag using plugin filters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件过滤器修改网站生成器元标签
- en: Adding text after each item's content using plugin filters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件过滤器在每个项目内容后添加文本
- en: Inserting link statistics tracking code in page body using plugin filters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件过滤器在页面主体中插入链接统计跟踪代码
- en: Troubleshooting coding errors and printing variable content
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除编码错误和打印变量内容
- en: Creating a new simple shortcode
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的简单简短代码
- en: Creating a new shortcode with parameters
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有参数的新简短代码
- en: Creating a new enclosing shortcode
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的封装简短代码
- en: Loading a style sheet to format plugin output
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载样式表以格式化插件输出
- en: Writing plugins using object-oriented PHP
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用面向对象的PHP编写插件
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: From its very first versions, WordPress has always been designed as a very open
    platform. This openness has been exemplified not only through its open source
    licensing and distribution model, but also its open plugin architecture, providing
    developers with the ability to deliver an even richer experience to its users.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从其最初的版本开始，WordPress就始终被设计为一个非常开放的平台。这种开放性不仅体现在其开源许可和分发模式上，还体现在其开放的插件架构上，为开发者提供了向用户提供更丰富体验的能力。
- en: While a basic WordPress installation provides a great amount of functionality
    that continues to expand from one release to the next, users often have the need
    to add one more feature to make it the perfect website management system. This
    is where the plugins come into play. They can fill this gap by augmenting or manipulating
    virtually any aspect of a WordPress website's display and administrative tasks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基本的WordPress安装提供了大量的功能，这些功能从一次发布到下一次发布都在不断扩展，但用户往往需要添加一个功能，使其成为完美的网站管理系统。这就是插件发挥作用的地方。它们可以通过增强或操作WordPress网站显示和行政任务的几乎任何方面来填补这一空白。
- en: Just like WordPress, plugins are written in the PHP programming language, which
    is structurally similar to more traditional languages such as C and C++. This
    code is stored in plain ASCII text files that are read and executed on the web
    server when pages are requested to be displayed. The secret ingredient that enables
    plugins to have such great power in WordPress is the inclusion of callback mechanisms,
    called **hooks**, throughout the platform's source code. These hooks come in two
    flavors, called action and filter hooks, which allow plugins to add content to
    a site and modify data before it is displayed, respectively. Whether it's rendering
    a site's front page, a single article, or its administration pages, WordPress
    has hundreds of entry points where custom functions can be executed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 就像WordPress一样，插件是用PHP编程语言编写的，其结构类似于更传统的语言，如C和C++。此代码存储在纯ASCII文本文件中，当请求显示页面时，在Web服务器上读取和执行。使插件在WordPress中具有如此强大功能的秘密成分是在平台源代码中包含回调机制，称为**钩子**。这些钩子有两种类型，称为动作钩子和过滤器钩子，分别允许插件向网站添加内容并在显示之前修改数据。无论是渲染网站的首页、单个文章还是管理页面，WordPress都有数百个入口点，可以在其中执行自定义函数。
- en: Beyond their ability to augment WordPress functionality, a side benefit of plugins
    is that most functionalities they add to a site are independent of the active
    theme. Therefore, users who like to change their theme frequently don't have to
    worry about manually adding back custom elements to their new themes when they
    make a switch.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了增强WordPress功能的能力之外，插件的一个附带好处是它们添加到网站上的大多数功能都与活动主题无关。因此，喜欢频繁更换主题的用户在切换时不必担心手动将自定义元素添加到新主题中。
- en: This chapter explains the difference between action and filter hooks and shows
    how to use them to write a first set of plugins that will range in functionality
    from adding information to the page header to defining new custom shortcodes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了动作钩子和过滤器钩子之间的区别，并展示了如何使用它们编写一组插件，这些插件的功能将从添加信息到页面头文件到定义新的自定义简短代码。
- en: Creating a plugin file and header
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建插件文件和头文件
- en: The first step of creating a WordPress plugin is to create a PHP file inside
    of the plugins directory and add the necessary information to have it recognized
    by the system. This first recipe shows you how to create a basic plugin file for
    WordPress and how to see and activate this new extension from the administration
    interface.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建WordPress插件的第一步是在插件目录中创建一个PHP文件，并添加必要的信息以便系统识别。本配方向您展示了如何创建一个基本的WordPress插件文件，以及如何从管理界面中查看和激活这个新的扩展。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够访问一个WordPress开发环境，无论是在您的本地计算机上还是在远程服务器上，您将能够加载您的新插件文件。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory (`wp-content/plugins`) of your development
    installation.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录（`wp-content/plugins`）。
- en: Create a new subdirectory called `ch2-plugin-header` within the plugin directory.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件目录中创建一个名为`ch2-plugin-header`的新子目录。
- en: Navigate to this directory and create a new text file called `ch2-plugin-header.php`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录，并创建一个名为`ch2-plugin-header.php`的新文本文件。
- en: 'Open the new file in a text editor and add the following text:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开新文件，并添加以下文本：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While the Description text is shown on two separate lines in the code example,
    it should all be entered on a single line in your code to be completely displayed
    in the WordPress Installed Plugins list.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在代码示例中描述文本显示在两行中，但在您的代码中应全部输入一行，以便在WordPress已安装插件列表中完全显示。
- en: Downloading the example codeYou can download the example code files for all
    Packt books you have purchased from your account at [https://www.packtpub.com](https://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [https://www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下载示例代码您可以从[https://www.packtpub.com](https://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[https://www.packtpub.com/support](https://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Save and close the new file.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭新文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您开发WordPress安装的管理页面。
- en: 'Click on Plugins in the left-hand navigation menu to show a list of all the
    installed plugins. You should see your new plugin listed next to the two default
    ones that come pre-packaged with WordPress:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中单击“插件”以显示所有已安装插件的列表。您应该看到您的新插件列在WordPress预装的默认插件旁边：
- en: '![](img/772d9de8-2174-415b-9539-ef708d23c100.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/772d9de8-2174-415b-9539-ef708d23c100.png)'
- en: Enable the plugin by clicking on the Activate link under its name. You will
    see that the background color of your new plugin changes to indicate that it has
    been activated, along with a message specifying that the activation was successful.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击其名称下的“激活”链接来启用插件。您会看到您的新插件背景颜色改变，以指示它已被激活，同时会显示一条消息，指定激活成功。
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Plugin files can either be located directly in the `wp-content/plugins` directory
    or in a subdirectory under this location. When you access the installed plugins
    list in the administration interface, WordPress scans all potential plugin locations,
    looking for PHP files that contain comments following the format specified in
    this recipe. There can actually be one or more PHP files containing plugin header
    data in any of these directories, and each of them will show up as an entry in
    the plugin list.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 插件文件可以直接位于`wp-content/plugins`目录中，或者位于此位置下的子目录中。当您在管理界面中访问已安装的插件列表时，WordPress会扫描所有潜在的插件位置，寻找包含符合此配方中指定格式的注释的PHP文件。实际上，在这些目录中的任何一个目录中都可以有一个或多个包含插件头数据的PHP文件，并且它们中的每一个都会在插件列表中显示出来。
- en: Taking a closer look at the code that we entered in the file, the first line
    of the plugin file is a tag that identifies the beginning of the PHP code that
    will be analyzed and executed by the PHP interpreter. Optionally, we could include
    a closing PHP tag (?>) at the end of the file. However, most PHP developers omit
    the closing tag, since having any spaces after that tag will cause warnings to
    be displayed by the interpreter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看我们输入到文件中的代码，插件文件的第一行是一个标记，用于标识将被PHP解释器分析和执行的PHP代码的开始。可选地，我们可以在文件末尾包含一个关闭PHP标记（?>）。然而，大多数PHP开发者省略了关闭标记，因为在此标记之后有任何空格都会导致解释器显示警告。
- en: To ensure compatibility with most WordPress installations, it is important to
    use the complete `<?php` open tag syntax in your plugin code instead of the `<?`
    short-hand version, since not all PHP installations are configured to support
    the short version and many users don't have access to change this type of configuration
    on their server.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保与大多数WordPress安装的兼容性，在您的插件代码中使用完整的`<?php`开标签语法而不是`<?`简写版本非常重要，因为并非所有PHP安装都配置为支持简写版本，许多用户也没有权限更改服务器上的此类配置。
- en: The second and last lines indicate that the enclosed text should be considered
    as text comments. Finally, each line within the comment contains a specific label,
    indicating the type of information that follows it. When this information is found,
    WordPress retrieves data about the plugin and adds it to the list.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行和最后一行指示，括号内的文本应被视为文本注释。最后，注释中的每一行都包含一个特定的标签，指示其后跟的信息类型。当找到此信息时，WordPress将检索有关插件的数据并将其添加到列表中。
- en: When a plugin is activated, WordPress validates the file's content to be sure
    that it is valid PHP code. It will then execute this content every time any page
    is rendered on the site, whether that page is front-facing or a backend administration
    section. For this reason, it is preferable to activate plugins only when they
    are in use, to avoid site slowdowns.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当插件被激活时，WordPress会验证文件内容以确保其为有效的PHP代码。然后，它将在网站上渲染任何页面时执行此内容，无论该页面是面向前端的还是后端管理部分。因此，最好只在插件使用时激活它们，以避免网站速度减慢。
- en: Of course, at this point, our new plugin does not add or modify any functionality
    in our WordPress installation, since it does not contain real code, but this is
    still an important first step.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，到目前为止，我们的新插件并没有在我们的WordPress安装中添加或修改任何功能，因为它不包含真正的代码，但这仍然是一个重要的第一步。
- en: See also
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Installing a web server on your computer* recipe in [Chapter 1](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml),
    *Preparing a Local Development Environment*
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml)，*准备本地开发环境*中的*在您的计算机上安装Web服务器*食谱
- en: The *Downloading and configuring a local WordPress installation* recipe in [Chapter
    1](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml), *Preparing a Local Development
    Environment*
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml)，*准备本地开发环境*中的*下载和配置本地WordPress安装*食谱
- en: Adding output content to page headers using plugin actions
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件动作向页面头部添加输出内容
- en: A common action performed by plugins is to add extra content to the header of
    visitor-facing pages generated by WordPress. This recipe shows you how to register
    an action hook function to be able to add such additional content. To make this
    example more concrete, we will use the Google Analytics page header JavaScript
    code that so many people use to get good page view statistics for their site.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 插件通常执行的一个常见操作是为WordPress生成的面向访客的页面头部添加额外内容。本食谱将向您展示如何注册一个动作钩子函数以便能够添加此类附加内容。为了使这个例子更加具体，我们将使用许多人都用来获取良好页面浏览统计数据的Google
    Analytics页面头部JavaScript代码。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch2-page-header-output`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch2-page-header-output`的新目录。
- en: Navigate to this directory and create a new text file called `ch2-page-header-output.php`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为`ch2-page-header-output.php`的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Page Header Output`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的头部，将插件命名为“第2章 - 页面头部输出”。
- en: 'Add the following line of code to register a function that will be called when
    WordPress renders the page header:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在WordPress渲染页面头部时将被调用的函数：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code section to provide an implementation for the `ch2pho_page_header_output`
    function:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch2pho_page_header_output`函数的实现：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save and close the plugin file.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的开发WordPress安装的管理页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧导航菜单中的“插件”。
- en: Activate your new plugin.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: 'Navigate to your website''s front page and use your browser''s View Page Source
    function to see the HTML source code for the site. The exact name of this function
    will be slightly different based on which browser you are using. Reading through
    the page source code, all of the code contained between the two curled brackets
    of our new function will be visible on your website''s header:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您网站的首页，并使用浏览器中的“查看页面源代码”功能查看网站的HTML源代码。此函数的确切名称将根据您使用的浏览器略有不同。阅读页面源代码，我们新函数之间的双括号内包含的所有代码将在您网站的头文件中可见：
- en: '![](img/17db98ce-321f-4119-9e83-e35c55547b1b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/17db98ce-321f-4119-9e83-e35c55547b1b.png)'
- en: If you are copying and pasting code from a digital version of this book, you
    will lose the original code indentation and should correct it in your code editor.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是从本书的数字版本中复制粘贴代码，您将丢失原始代码缩进，应在您的代码编辑器中更正。
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `add_action` function is used to associate custom plugin code to one of
    the two types of WordPress hooks, the action hook. As mentioned briefly in this
    chapter's introduction, hooks are the enabling functionality that make plugins
    possible in WordPress. Action hooks enable the execution of additional code at
    specific points when either public-facing or administration pages are prepared
    to be displayed. This code usually adds content to a site or changes the way a
    given action is performed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_action`函数用于将自定义插件代码关联到WordPress钩子中的两种类型之一，即动作钩子。正如本章引言中简要提到的，钩子是使插件在WordPress中成为可能的功能。动作钩子允许在公共页面或管理页面准备显示时执行额外的代码。此代码通常向网站添加内容或更改特定动作的执行方式。'
- en: In this recipe, the first line of code that we wrote registered a function named
    `ch2pho_page_header_output` with an action hook called `wp_head`. This action
    is one among more than 2,400 action hooks that are available in current versions
    of WordPress and it allows any registered function to output additional content
    to the page header. Since all echoed content will be displayed, we can write our
    callback function very simply by placing `?>` and `<?php` tags around the Google
    Analytics code. This will tell PHP to display all the content that is within that
    function's body, as opposed to interpreting it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们编写的第一行代码注册了一个名为`ch2pho_page_header_output`的函数，与名为`wp_head`的动作钩子相关联。这个动作是WordPress当前版本中超过2,400个动作钩子之一，它允许任何已注册的函数向页面头部输出额外的内容。由于所有回声的内容都将显示，我们可以通过在Google
    Analytics代码周围放置`?>`和`<?php`标签来非常简单地编写我们的回调函数。这将告诉PHP显示该函数体内所有内容，而不是将其解释。
- en: As you may have noticed, the current code is not very flexible, since you would
    need to hardcode your Google Analytics account number in the output for it to
    function properly. The creation of a configuration panel in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*, will provide a way to configure such
    information to make our plugins more flexible.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已注意到，当前代码并不十分灵活，因为您需要将Google Analytics账户号硬编码到输出中才能使其正常工作。在[第3章](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)，“用户设置和管理页面”的创建，将提供一种配置此类信息的方法，使我们的插件更加灵活。
- en: 'Now, to fully understand its syntax, let''s take a closer look at the complete
    `add_action` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了完全理解其语法，让我们更仔细地查看完整的`add_action`函数：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first parameter, the hook name, indicates the name of the WordPress hook
    that we want our custom function to be associated with. This name must be accurately
    spelled; otherwise, our function will not be called and no error message will
    be displayed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数，钩子名称，表示我们想要将自定义函数与之关联的WordPress钩子名称。此名称必须拼写准确；否则，我们的函数将不会被调用，也不会显示错误消息。
- en: The second parameter is the name of the plugin function that will be called
    to perform an action. This function can have any name, with the only condition
    being that this name must be unique enough to avoid conflicts with function names
    from other plugins or from the core WordPress code. In this recipe, the function
    name starts with an acronym representing the name of the plugin, making it much
    more unique.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是要调用的插件函数的名称，用于执行动作。此函数可以具有任何名称，唯一条件是这个名称必须足够独特，以避免与其他插件或WordPress核心代码中的函数名冲突。在这个示例中，函数名以代表插件名称的缩写开头，这使得它更加独特。
- en: The priority parameter is optional, as indicated by the square brackets, and
    has a default value of 10\. It indicates the execution priority of this plugin
    relative to other plugin functions that hook into the same action, with a lower
    number indicating a higher priority.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 优先级参数是可选的，如方括号所示，默认值为 10。它表示此插件相对于其他钩入同一动作的插件函数的执行优先级，数字越小表示优先级越高。
- en: Any plugin can register one or more functions with an action hook using the
    `add_action` function. As it is rendering web pages, WordPress keeps a queue of
    all entries and calls them at the appropriate moment. It is interesting to note
    that the hook mechanism is also used by WordPress itself, as it regularly calls
    the `add_action` function in its own code to register functions to be called at
    the right time. If you realize that you need your function to be called before
    or after other plugins that are registering with the same hook, change the value
    of the priority parameter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 任何插件都可以使用 `add_action` 函数注册一个或多个与动作钩子关联的函数。由于 WordPress 正在渲染网页，它会保留所有条目的队列并在适当的时候调用它们。值得注意的是，钩子机制也被
    WordPress 本身使用，因为它会定期在其代码中调用 `add_action` 函数来注册在正确时间被调用的函数。如果你意识到你需要你的函数在注册相同钩子的其他插件之前或之后被调用，请更改优先级参数的值。
- en: The last parameter of the `add_action` function, `accepted_args`, has a default
    value of `1` and should be assigned a number. It should also only be set to a
    different value for some particular hooks where more than one parameter should
    be passed to the registered function. Some of these hooks will be covered in later
    recipes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_action` 函数的最后一个参数 `accepted_args` 具有默认值 `1`，应该分配一个数字。它也应该只为一些特定的钩子设置不同的值，在这些钩子中应该向注册的函数传递多个参数。其中一些钩子将在后面的菜谱中介绍。'
- en: There's more...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Finding the right hooks to register plugin functions is a large part of WordPress
    plugin development. Fortunately, there are a number of ways to get information
    on existing hooks and learn when they get called during the WordPress page generation
    process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找合适的钩子来注册插件函数是 WordPress 插件开发的一个重要部分。幸运的是，有几种方法可以获取现有钩子的信息，并了解它们在 WordPress
    页面生成过程中的调用时间。
- en: Action hooks online listings
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作钩子在线列表
- en: 'The WordPress Codex ([https://codex.wordpress.org/](https://codex.wordpress.org/))
    and WordPress Code Reference ([https://developer.wordpress.org/reference/](https://developer.wordpress.org/reference/))
    are documentation sites that contain a multitude of information that is useful
    to users and developers alike. When it comes to action hooks, the Codex contains
    information on the most commonly used hooks, with basic descriptions indicating
    how they can be used, and can be found here: [https://codex.wordpress.org/Plugin_API/Action_Reference](https://codex.wordpress.org/Plugin_API/Action_Reference).
    That being said, this is not a complete listing.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress Codex ([https://codex.wordpress.org/](https://codex.wordpress.org/))
    和 WordPress 代码参考 ([https://developer.wordpress.org/reference/](https://developer.wordpress.org/reference/))
    是包含大量对用户和开发者都有用的信息的文档网站。当涉及到动作钩子时，Codex 包含有关最常用钩子的信息，有基本的描述说明它们如何使用，并可以在以下位置找到：[https://codex.wordpress.org/Plugin_API/Action_Reference](https://codex.wordpress.org/Plugin_API/Action_Reference)。话虽如此，这并不是一个完整的列表。
- en: There are many third-party sites that parse the WordPress source code and provide
    their own hook listings (for example, [http://hookr.io](http://hookr.io)). While
    hooks are not as eloquently documented in these types of raw listings, they do
    provide basic information on their names and where they are called as WordPress
    generates pages for visitors and administrators. These details can be enough to
    find a hook based on the functionality that you are trying to implement.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多第三方网站解析 WordPress 源代码并提供他们自己的钩子列表（例如，[http://hookr.io](http://hookr.io)）。虽然这些类型的原始列表中钩子没有如此优雅的文档，但它们确实提供了它们名称和它们在
    WordPress 为访客和管理员生成页面时被调用的基本信息。这些细节足以根据你试图实现的功能找到钩子。
- en: Searching for hooks in the WordPress source code
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 WordPress 源代码中搜索钩子
- en: 'Since WordPress is open source, another way to find information about hooks
    is to search directly within its code. For every action hook that accepts user
    functions, you will see a call to the `do_action` function to execute all the
    registered items. As can be seen, the function takes two or more arguments, with
    the second one(s) being optional:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 WordPress 是开源的，另一种查找有关钩子信息的方法是直接在其代码中进行搜索。对于每个接受用户函数的动作钩子，您将看到对 `do_action`
    函数的调用以执行所有已注册的项目。如所见，该函数接受两个或更多参数，其中第二个（或多个）参数是可选的：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For the example shown in this recipe, a search for `do_action( ''wp_head''
    )` reveals that it is the only function that is called when a theme makes a call
    to the `wp_head()` function in its header file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本菜谱中所示的示例，搜索 `do_action( 'wp_head' )` 可以发现，它是当主题在其头部文件中调用 `wp_head()` 函数时唯一被调用的函数：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a plugin file and header* recipe
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建插件文件和头部* 菜谱'
- en: Using WordPress path utility functions to load external files and images
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 WordPress 路径实用函数加载外部文件和图片
- en: On occasion, plugins need to refer to external files (for example, images, JavaScript,
    or jQuery script files) that are stored in the plugin directory. Since users are
    free to rename a plugin's folder or even install plugin files straight into the
    WordPress plugin directory, paths to any external files must be built dynamically
    based on the actual plugin location. Thankfully, a number of utility functions
    are present to simplify this task. In this recipe, we will write a simple plugin
    that will add a favicon meta tag to a website's header, pointing to an image file
    located in the plugin directory.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，插件需要引用存储在插件目录中的外部文件（例如，图片、JavaScript 或 jQuery 脚本文件）。由于用户可以自由重命名插件的文件夹，甚至可以将插件文件直接安装到
    WordPress 插件目录中，因此任何外部文件的路径都必须根据实际的插件位置动态构建。幸运的是，存在许多实用函数来简化这项任务。在本菜谱中，我们将编写一个简单的插件，该插件将为网站头部添加一个指向插件目录中图像文件的
    favicon 元标签。
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的 WordPress 插件目录。
- en: Create a new directory called `ch2-favicon`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch2-favicon` 的新目录。
- en: Use a web service, such as [http://getfavicon.org](http://getfavicon.org), to
    retrieve a website's favicon (for example, `http://www.packtpub.com`) and store
    it in the plugin directory with its default name (`favicon.ico`).
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用像 [http://getfavicon.org](http://getfavicon.org) 这样的网络服务检索网站 favicon（例如，`http://www.packtpub.com`），并将其以其默认名称（`favicon.ico`）存储在插件目录中。
- en: Navigate to the plugin directory and create a new text file called `ch2-favicon.php`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件目录并创建一个名为 `ch2-favicon.php` 的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Favicon`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的头部，将插件命名为“第 2 章 - Favicon”。
- en: 'Add the following line of code to register a function that will be called when
    WordPress renders the page header:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在 WordPress 渲染页面头部时将被调用的函数：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code section to provide an implementation for the `ch2fi_page_header_output`
    function:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码部分以提供 `ch2fi_page_header_output` 函数的实现：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save and close the plugin file.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您开发 WordPress 安装的行政页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中单击“插件”。
- en: Activate your new plugin.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: 'Navigate to your website''s front page and refresh it to see that the icon
    file that you assigned through your plugin code now appears in your browser''s
    address bar, title bar, or navigation tab, depending on your preferred browser.
    The following screenshot shows how the favicon file is rendered in Internet Explorer,
    Mozilla Firefox, and Google Chrome, from top to bottom:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您网站的前页并刷新它，以查看您通过插件代码指定的图标文件现在出现在您浏览器地址栏、标题栏或导航标签中，具体取决于您首选的浏览器。以下截图显示了 favicon
    文件在 Internet Explorer、Mozilla Firefox 和 Google Chrome 中的渲染方式，从上到下：
- en: '![](img/e54ae508-665a-42e1-ac94-64e7d15174e3.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e54ae508-665a-42e1-ac94-64e7d15174e3.png)'
- en: Navigate to your development site's dashboard and select the Customize submenu
    under the Appearance menu.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发站点的仪表板，并在外观菜单下选择自定义子菜单。
- en: Under Site Identity, assign a square image that is at least 512 x 512 pixels
    in dimension as Site Icon; then, press the Save & Publish button at the top of
    the customizer.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“网站标识”下，指定一个至少为 512 x 512 像素的正方形图像作为网站图标；然后，在自定义化器的顶部按下保存并发布按钮。
- en: Refresh your website to see that the newly assigned site icon is now displayed
    instead of the `favicon.ico` file.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新你的网站以查看新分配的网站图标现在已显示而不是`favicon.ico`文件。
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `plugins_url` utility function, used in conjunction with the `__FILE__`
    PHP constant and the name of our favicon file, enables us to quickly get the URL
    of the directory where our plugin files are located and print out the appropriate
    HTML command to notify browsers of the location of this file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugins_url`实用函数，与`__FILE__`PHP常量和我们的favicon文件名一起使用，使我们能够快速获取插件文件所在目录的URL，并打印出适当的HTML命令以通知浏览器此文件的位置：'
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `plugins_url` function can be called with or without parameters. In the
    first case, it builds a URL by appending the path found in the first parameter
    to the location of the file specified in the second argument. In the second situation,
    it simply returns the location of the plugin directory.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugins_url`函数可以带参数或不带参数调用。在第一种情况下，它通过将第一个参数中找到的路径附加到第二个参数中指定的文件位置来构建一个URL。在第二种情况下，它仅返回插件目录的位置。'
- en: Before we display our plugin's favicon file, we also check to see whether the
    user has already assigned a site icon using the WordPress customizer. If that
    is the case, we give priority to that icon and display it using the built-in `wp_site_icon`
    function.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们显示插件的自定义favicon文件之前，我们还检查用户是否已经使用WordPress自定义器分配了一个网站图标。如果是这样，我们优先考虑该图标，并使用内置的`wp_site_icon`函数显示它。
- en: There's more...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `plugins_url` function is one of the many functions that can be used in
    plugins to help find the location of files in a WordPress installation. Other
    useful functions include:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugins_url`函数是许多可以在插件中使用以帮助找到WordPress安装中文件位置的函数之一。其他有用的函数包括：'
- en: '`get_theme_root()`: Returns the address of the theme installation directory'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_theme_root()`: 返回主题安装目录的地址'
- en: '`get_template_directory_uri()`: Retrieves the URI to the current theme''s files'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_template_directory_uri()`: 获取当前主题文件的URI'
- en: '`admin_url()`: Provides the address of the WordPress administrative pages'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin_url()`: 提供WordPress管理页面的地址'
- en: '`content_url()`: Indicates where the `wp-content` directory can be found'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content_url()`: 指示`wp-content`目录的位置'
- en: '`site_url()` and `home_url()`: Returns the site address'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site_url()`和`home_url()`: 返回网站地址'
- en: '`includes_url()`: Provides the location of WordPress `include` files'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`includes_url()`: 提供WordPress `include`文件的位置'
- en: '`wp_upload_dir()`: Indicates the directory where user-uploaded files are stored'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_upload_dir()`: 指示用户上传文件存储的目录'
- en: See also
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a plugin file and header* recipe
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建插件文件和标题*菜谱'
- en: The *Adding output content to page headers using plugin actions* recipe
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用插件动作向页面标题添加输出内容*菜谱'
- en: Modifying the site generator meta tag using plugin filters
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件过滤器修改网站生成器元标签
- en: Beyond adding functionality or content to a site, the other major task commonly
    performed by plugins is to augment, modify, or reduce information before it is
    displayed on the screen. This is done by using WordPress filter hooks, which allow
    plugins to register a custom function through the WordPress API to be called,
    since content is prepared before it is sent to the browser. In this recipe, you
    will learn how to implement your first filter callback function to modify the
    contents of the generator meta tag that is output as part of the site header.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 除了向网站添加功能或内容之外，插件通常执行的其他主要任务是增强、修改或减少在屏幕上显示之前的信息。这是通过使用WordPress过滤器钩子来完成的，它允许插件通过WordPress
    API注册一个自定义函数，因为内容是在发送到浏览器之前准备的。在这个菜谱中，你将学习如何实现你的第一个过滤器回调函数来修改作为网站标题一部分输出的生成器元标签的内容。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录。
- en: Create a new directory called `ch2-generator-filter`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch2-generator-filter`的新目录。
- en: Navigate to this directory and create a new text file called `ch2-generator-filter.php`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为`ch2-generator-filter.php`的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Generator Filter`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为“第2章 - 生成器过滤器”。
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to output the generator meta tag as part of the page
    header:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个函数，该函数将在WordPress准备输出作为页面标题一部分的生成器元标签的数据时被调用：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following code section to provide an implementation for the `ch2gf_generator_filter`
    function:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码部分添加到为 `ch2gf_generator_filter` 函数提供实现：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save and close the plugin file.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您开发WordPress安装的管理页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中单击“插件”。
- en: Activate your new plugin.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: 'Use a web browser to visit your website and display the page source. Searching
    for the keyword `generator` will reveal that the content generator meta tag has
    been modified and now reads:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器访问您的网站并显示页面源代码。搜索关键字 `generator` 将揭示内容生成器元标签已被修改，现在读取为：
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `add_filter` function is used to associate a custom plugin function to the
    second type of WordPress hooks, the filter hook. Filter hooks give plugins the
    chance to augment, modify, delete, or completely replace information while WordPress
    is executed. To enable this, filter functions are sent data that can be modified
    as a function parameter. They must return the resulting set of data back to WordPress
    once they have finished making the changes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_filter` 函数用于将自定义插件函数关联到第二种WordPress钩子，即过滤器钩子。过滤器钩子给插件提供了在WordPress执行过程中增加、修改、删除或完全替换信息的机会。为了启用此功能，过滤器函数会接收到可以作为函数参数修改的数据。一旦完成更改，它们必须将修改后的数据集返回给WordPress。'
- en: Unlike action hooks, filter functions must not output any text or HTML code,
    since they are executed while output is being prepared and that would likely result
    in the output showing up in unexpected places in the site layout. Instead, they
    should return the filtered data.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 与动作钩子不同，过滤器函数不得输出任何文本或HTML代码，因为它们是在输出准备过程中执行的，这可能会导致输出在网站布局中出现意外的位置。相反，它们应该返回过滤后的数据。
- en: 'Taking a closer look at the parameters of the `add_filter` function, we can
    see that it is very similar to the `add_action` function that we saw in the previous
    recipes:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看 `add_filter` 函数的参数，我们可以看到它与我们在前面的菜谱中看到的 `add_action` 函数非常相似：
- en: '[PRE12]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first parameter, the hook name, indicates the name of the WordPress hook
    that we want our custom function to be associated with. This name must be accurately
    spelled; otherwise, our function will not be called and no error message will
    be displayed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数，钩子名称，表示我们希望我们的自定义函数与之关联的WordPress钩子名称。这个名字必须拼写准确；否则，我们的函数将不会被调用，也不会显示任何错误信息。
- en: The second parameter is the name of the plugin function that will be called
    to filter data. This function can have any name, with the only condition being
    that this name must be unique enough to avoid conflicting with functions from
    other plugins or from the WordPress code.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是调用以过滤数据的插件函数的名称。这个函数可以有任何名称，唯一条件是这个名称必须足够独特，以避免与其他插件或WordPress代码中的函数冲突。
- en: The `priority` parameter is optional, as indicated by the square brackets, and
    has a default value of `10`. It indicates the execution priority of this plugin
    relative to other plugins that are loaded by WordPress, with a lower number indicating
    a higher priority.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`priority` 参数是可选的，如方括号所示，默认值为 `10`。它表示此插件相对于由WordPress加载的其他插件的执行优先级，数字越小表示优先级越高。'
- en: The last parameter of the function, `accepted_args`, has a default value of
    `1` and indicates how many parameters will be sent to your custom filter function.
    It should only be set to higher values when you are using filters that will send
    multiple parameters, as shown in this recipe with the `$html` and `$type` arguments.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的最后一个参数 `accepted_args` 具有默认值 `1`，表示将发送到您的自定义过滤器函数的参数数量。只有在您使用将发送多个参数的过滤器时，才应将其设置为更高的值，如本菜谱中的
    `$html` 和 `$type` 参数所示。
- en: There's more...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Beyond demonstrating how to change the site generator name, this plugin also
    shows how to use an advanced PHP function to perform the actual text replacement.
    We also take a look at resources to learn more about filter hooks.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 除了演示如何更改网站生成器名称之外，此插件还展示了如何使用高级PHP函数执行实际的文本替换。我们还探讨了更多关于过滤器钩子的学习资源。
- en: preg_replace function
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: preg_replace 函数
- en: The `preg_replace` function is a PHP function that can be used to perform a
    search and replace operation within a string based on a search pattern. We use
    this function rather than the simpler `str_replace`, since we want to find and
    replace both the WordPress keyword and its associated version number, which changes
    with every version.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`preg_replace` 函数是一个 PHP 函数，可以用于根据搜索模式在字符串内执行搜索和替换操作。我们使用此函数而不是更简单的 `str_replace`，因为我们想要找到并替换
    WordPress 关键字及其相关的版本号，该版本号会随着每个版本而变化。'
- en: Filter hooks online listings and the apply_filters function
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网上列表和 `apply_filters` 函数的过滤器钩子
- en: Similar to action hooks, information about commonly used filter hooks can be
    found on the WordPress Codex ([https://codex.wordpress.org/Plugin_API/Action_Reference](https://codex.wordpress.org/Plugin_API/Action_Reference))
    or on sites that provide raw function lists (for example, [http://hookr.io](http://hookr.io)).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于动作钩子，常用过滤器钩子的信息可以在 WordPress Codex ([https://codex.wordpress.org/Plugin_API/Action_Reference](https://codex.wordpress.org/Plugin_API/Action_Reference))
    或提供原始函数列表的网站上找到（例如，[http://hookr.io](http://hookr.io))。
- en: 'It is also possible to learn about filter hooks by searching for occurrences
    of the `apply_filters` function in the WordPress code. As can be seen in the following
    code, this function has a variable number of arguments, with the first one being
    the name of the filter hook, the second representing the value that the registered
    function will be able to modify, and the remaining optional parameters containing
    additional data that may be useful in the implementation of the filter function:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 WordPress 代码中搜索 `apply_filters` 函数的出现，也可以了解过滤器钩子。如下代码所示，此函数具有可变数量的参数，第一个参数是过滤器钩子的名称，第二个参数表示注册的函数将能够修改的值，其余的可选参数包含在过滤器函数实现中可能有用的附加数据：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For the example shown in this recipe, a search for `apply_filters( ''the_generator''`
    in the WordPress code reveals that it is called within the `the_generator` template
    function:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本配方中显示的示例，在 WordPress 代码中搜索 `apply_filters( 'the_generator'` 可以发现它是在 `the_generator`
    模板函数中被调用的：
- en: '[PRE14]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See also
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a plugin file and header* recipe
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建插件文件和头文件* 的配方'
- en: Adding text after each item's content using plugin filters
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件过滤器在每个项目内容后添加文本
- en: After making a number of changes to the page header, the generator meta tag,
    and the site favicon, this recipe takes a more active role by adding a link to
    each post or page, allowing visitors to email a link to the item that they are
    currently viewing. This functionality is implemented using a filter hook attached
    to the page and post content, allowing our custom function to append custom output
    code to all entries that get displayed on the screen.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在对页面标题、生成器元标签和网站图标进行多次更改后，此配方通过在每个帖子或页面中添加链接来发挥更积极的作用，允许访客发送当前查看项目的链接。此功能是通过附加到页面和帖子内容的过滤器钩子实现的，允许我们的自定义函数将自定义输出代码附加到所有在屏幕上显示的条目。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的 WordPress 插件目录。
- en: Create a new directory called `ch2-email-page-link`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch2-email-page-link` 的新目录。
- en: Navigate to this directory and create a new text file called `ch2-email-page-link.php`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为 `ch2-email-page-link.php` 的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Email Page Link`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的头文件，将插件命名为 `第 2 章 - 邮件页面链接`。
- en: Visit an icon download website, such as [http://iconarchive.com](http://iconarchive.com),
    and download an email icon in a small size (32 x 32 pixels) in PNG format to the
    new plugin's directory, giving it the name `mailicon.png`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问一个图标下载网站，例如 [http://iconarchive.com](http://iconarchive.com)，并将一个大小为（32 x
    32 像素）的 PNG 格式电子邮件图标下载到新插件目录中，命名为 `mailicon.png`。
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the content of a post or page:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在 WordPress 准备显示帖子或页面内容时将被调用的函数：
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code section to provide an implementation for the `ch2epl_email_page_filter`
    function:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供 `ch2epl_email_page_filter` 函数实现的代码部分：
- en: '[PRE16]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save and close the plugin file.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您开发 WordPress 安装的行政页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中单击“插件”。
- en: Activate your new plugin.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: Visit your website to see the new mail icon at the end of each post and page.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问您的网站，查看每个帖子末尾和页面末尾的新邮件图标。
- en: 'Click on one of the mail links. Your default mail client will come up with
    information about the item you were reading. The only information that needs to
    be updated is the recipient address, and visitors can quickly send an email:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击其中一个邮件链接。您的默认邮件客户端将显示您正在阅读的项目信息。唯一需要更新的信息是收件人地址，访客可以快速发送电子邮件：
- en: '![](img/f3b35d84-eed4-4a68-9f23-9d70d276574f.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3b35d84-eed4-4a68-9f23-9d70d276574f.png)'
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Similar to the previous recipe, this plugin uses the `add_filter` function to
    register a custom function to be called by WordPress as it prepares an item's
    content to be displayed on the screen. When the filter function is called, the
    first action that it performs is to create a URL to the email icon that was downloaded
    in the recipe. It then goes on to modify the original content by appending the
    HTML code to display a `mailto` link. The same technique could be used to create
    links to popular social media and link sharing sites, with simple changes to the
    syntax of the link. Once the new content is ready, it is returned back to WordPress
    to be sent to any other registered filters and subsequently be displayed on the
    site.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个菜谱类似，这个插件使用 `add_filter` 函数注册一个自定义函数，以便在 WordPress 准备在屏幕上显示的项目内容时调用。当过滤器函数被调用时，它执行的第一项操作是创建一个指向在菜谱中下载的电子邮件图标的
    URL。然后，它继续通过附加显示 `mailto` 链接的 HTML 代码来修改原始内容。同样的技术可以用来创建指向流行的社交媒体和链接分享网站的链接，只需简单更改链接的语法。一旦新内容准备就绪，它就会被返回到
    WordPress，以便发送给任何其他已注册的过滤器，并随后在网站上显示。
- en: There's more...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe also introduces a pair of useful WordPress utility functions to
    get access to the current item's content.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱还介绍了一对有用的 WordPress 实用函数，用于获取当前项目的内联内容。
- en: get_the_title and get_permalink functions
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: get_the_title 和 get_permalink 函数
- en: While these two functions are mainly seen within theme template files, they
    can also be used by plugins to get easy access to the content of items that are
    currently being processed.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两个函数主要在主题模板文件中看到，但它们也可以由插件使用，以便轻松访问正在处理的项目的内容。
- en: 'More specifically, the two utility functions that are used in this recipe are
    as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，这个菜谱中使用的两个实用函数如下：
- en: '`get_the_title()`: This function gives us quick access to the item''s title'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_the_title()`: 这个函数让我们可以快速访问项目的标题'
- en: '`get_permalink()`: A function that returns the item''s permalink (a URL that
    is always associated with this post or page, even after it is no longer featured
    on a website''s front page)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_permalink()`: 一个返回项目永久链接（一个始终与该帖子或页面关联的 URL，即使它不再在网站首页上显示）的函数'
- en: See also
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a plugin file and header* recipe
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建插件文件和头文件* 的菜谱'
- en: The *Using WordPress path utility functions to load external files and images*
    recipe
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 WordPress 路径实用函数加载外部文件和图像* 的菜谱'
- en: The *Modifying the site generator meta tag using plugin filters* recipe
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用插件过滤器修改网站生成器元标签* 的菜谱'
- en: Inserting link statistics tracking code in page body using plugin filters
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件过滤器在页面主体中插入链接统计跟踪代码
- en: After creating two filter functions that append text to the existing content,
    this recipe shows you how to modify the page content before it is displayed on
    the screen. More specifically, the following plugin will expand on the Google
    Analytics header plugin created earlier and add a JavaScript function to all the
    links that are included in posts and pages to track when they are clicked by visitors.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建两个附加文本到现有内容的过滤器函数之后，这个菜谱展示了如何在屏幕上显示之前修改页面内容。更具体地说，以下插件将扩展之前创建的 Google Analytics
    标头插件，并为所有包含在帖子或页面中的链接添加一个 JavaScript 函数，以跟踪它们被访客点击的时间。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Adding output content to page headers
    using plugin actions* recipe to have a starting point for this recipe and the
    resulting plugin should be active in your development site. Alternatively, you
    can download the resulting code (`Chapter 2/ch2-page-header-output/ch2-page-header-output.php`)
    for that recipe from the Packt Publishing website ([https://www.packtpub.com/support](https://www.packtpub.com/support)).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了 *使用插件动作向页面标题添加输出内容* 的菜谱，以便为本菜谱和生成的插件提供一个起点，并且生成的插件应该已经在您的开发网站上激活。或者，您可以从
    Packt Publishing 网站下载该菜谱的结果代码（`Chapter 2/ch2-page-header-output/ch2-page-header-output.php`）([https://www.packtpub.com/support](https://www.packtpub.com/support))。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch2-page-header-output` folder in the WordPress plugin directory
    of your development installation.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Open the `ch2-page-header-output.php` file in a text editor.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-page-header-output.php`文件。
- en: 'Add the following line of code after the existing functions to register a function
    that will be called when WordPress is preparing data to display a page or post''s
    content:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有函数之后添加以下代码行，以注册一个在WordPress准备显示页面或帖子内容时将被调用的函数：
- en: '[PRE17]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following code section to provide an implementation for the `ch2lfa_link_filter_analytics`
    function:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到为`ch2lfa_link_filter_analytics`函数提供实现的区域：
- en: '[PRE18]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following line of code to register a function that will be called when
    WordPress renders the page footer:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册当WordPress渲染页面页脚时将被调用的函数后添加以下代码行：
- en: '[PRE19]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following code section to provide an implementation for the `ch2lfa_footer_analytics_code`
    function:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到为`ch2lfa_footer_analytics_code`函数提供实现的区域：
- en: '[PRE20]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Save and close the plugin file.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Go to the Pages section of the Dashboard and edit the home page (or any other
    page). Add a link to the content, pointing to a location of your choice.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往仪表板的“页面”部分并编辑主页（或任何其他页面）。将链接添加到内容中，指向你选择的任何位置。
- en: In your web browser, refresh your website and navigate to the page modified
    in the previous step.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中刷新你的网站并导航到之前修改的页面。
- en: 'Open the source view for the page and find the link you added. You will see
    that the link tag has additional `onClick` JavaScript code that will be called
    when visitors follow it:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开页面的源视图并找到你添加的链接。你会看到链接标签有额外的`onClick` JavaScript代码，当访客跟随它时将被调用：
- en: '![](img/eca034ca-af98-452a-8483-a79ec4559870.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eca034ca-af98-452a-8483-a79ec4559870.png)'
- en: Scroll to the bottom of the page to see the implementation of the `recordOutboundLink`
    JavaScript function that was added to the page footer.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到页面底部，查看添加到页面页脚的`recordOutboundLink` JavaScript函数的实现。
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The content filter function that is put in place by calling `add_filter` receives
    the entire content of all the posts and pages before they are rendered to the
    browser and is allowed to make any number of changes to this information. In this
    case, we are using the PHP `str_replace` function to search for any occurrence
    of the string `href`, which indicates a link. When the string is found, it is
    replaced with a call to a JavaScript function as well as the original `href` tag.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`add_filter`设置的 内容过滤器函数在所有帖子或页面渲染到浏览器之前接收整个内容，并允许对这一信息进行任何数量的更改。在这种情况下，我们使用PHP
    `str_replace`函数来搜索字符串`href`的任何出现，这表示一个链接。当找到字符串时，它被替换为对JavaScript函数的调用以及原始的`href`标签。
- en: To make this plugin complete, it also needs to provide an implementation for
    the JavaScript `recordOutboundLink` function. This is done by registering a custom
    function with the `wp_footer` hook that will output extra content with the function
    code in the website's footer.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个插件完整，它还需要提供一个JavaScript `recordOutboundLink`函数的实现。这是通过使用`wp_footer`钩子注册一个自定义函数来完成的，该函数将在网站页脚输出额外的内容，包括函数代码。
- en: The resulting plugin automates many of the tasks related to tracking usage data
    on a website using Google Analytics.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件自动化了许多与使用Google Analytics跟踪网站使用数据相关的任务。
- en: See also
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding output content to page headers using plugin actions* recipe
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件动作向页面标题添加输出内容的配方
- en: The *Adding text after each item's content using plugin filters* recipe
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件过滤器在每个项目内容后添加文本的配方
- en: Troubleshooting coding errors and printing variable content
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试编码错误和打印变量内容
- en: As you transcribe code segments from the pages of this book or start writing
    your own plugins, there is a strong chance that you will have to troubleshoot
    problems with your code or have trouble working with data that your plugin is
    meant to manipulate. This recipe shows the basic techniques to identify and quickly
    resolve these errors while creating a plugin that will hide an item from the navigation
    menu for users who are not logged in to your site.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从本书的页面转录代码段或开始编写自己的插件时，你很可能需要调试你的代码或处理你的插件旨在操作的数据。这个配方展示了在创建一个将隐藏未登录用户导航菜单中的项目的插件时，识别和快速解决这些错误的基本技术。
- en: How to do it...
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录。
- en: Create a new directory called `ch2-nav-menu-filter`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch2-nav-menu-filter` 的新目录。
- en: Navigate to this directory and create a new text file called `ch2-nav-menu-filter.php`.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为 `ch2-nav-menu-filter.php` 的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Nav Menu Filter`.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为 `第2章 - 导航菜单过滤器`。
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the site''s navigation menu:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个函数，当WordPress准备显示网站导航菜单的数据时将被调用：
- en: '[PRE21]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following code section to provide an implementation for the `ch2nmf_new_nav_menu_items`
    function. Notice that the word `functio` is mistyped on purpose at the beginning
    of the first line:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码部分以提供 `ch2nmf_new_nav_menu_items` 函数的实现。注意，在第一行的开头故意将单词 `functio` 错拼：
- en: '[PRE22]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you are using a dedicated code editor, you should be able to tell that the
    text font is not a recognized keyword since it will not be colored as a PHP keyword.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是专用代码编辑器，您应该能够判断文本字体不是一个已识别的关键字，因为它不会被着色为PHP关键字。
- en: Save the plugin file and leave your code editor open.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存插件文件并保持代码编辑器打开。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您开发WordPress安装的管理页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中点击“插件”。
- en: Activate your new plugin.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: 'WordPress will display a fatal error message indicating that the plugin could
    not be activated, since a syntax error was found. It also indicates the exact
    filename and line where the error occurred, helping to narrow down where the problem
    occurred:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WordPress将显示一个致命错误消息，表明插件无法激活，因为发现了一个语法错误。它还指出了错误发生的确切文件名和行号，有助于缩小问题发生的位置：
- en: '![](img/9716665d-3376-493c-9c07-a8a2e97e94e1.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9716665d-3376-493c-9c07-a8a2e97e94e1.png)'
- en: Go back to your code editor, correct the spelling of the word `function`, and
    save the file.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回代码编辑器，更正单词 `function` 的拼写，并保存文件。
- en: Activate the plugin a second time. It should now activate correctly.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次激活插件。现在它应该可以正确激活。
- en: Back in the code editor, remove the last letter of the word kbd>function to
    reintroduce a syntax error.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中，删除单词 kbd>function 的最后一个字母以重新引入一个语法错误。
- en: Visit your website. You will now see that the entire site has disappeared and
    your browser only displays a blank page with an error message similar to the one
    we just saw. You may also only get a blank page, depending on your web server
    configuration.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问您的网站。您现在会看到整个网站已经消失，您的浏览器只显示一个空白页，并带有类似于我们刚才看到的错误消息。根据您的Web服务器配置，您也可能只得到一个空白页。
- en: Correct the spelling error once again and your website will go back to normal.
    You will also see a lot of information printed before the navigation menu. This
    output is generated by the `print_r` function and is meant to help us understand
    how the data received by our filter function is organized. Once we have a good
    understanding of that data, we will be able to properly make changes to this information
    in a further step.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次更正拼写错误，您的网站将恢复正常。您还会看到在导航菜单之前打印出大量信息。这些输出是由 `print_r` 函数生成的，旨在帮助我们了解我们的过滤器函数接收到的数据是如何组织的。一旦我们对这些数据有了良好的理解，我们将在下一步中能够正确地更改这些信息。
- en: 'In the WordPress dashboard, navigate to the Appearance | Menus item and create
    an additional item in your menu as Custom Link, setting the URL to `/privatearea`
    and the Link Text to `Private Area`:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WordPress仪表板中，导航到外观 | 菜单项，并在您的菜单中创建一个额外的自定义链接项，设置URL为 `/privatearea`，链接文本为
    `Private Area`：
- en: '![](img/e870d724-ea54-42cf-8568-8cdc483593af.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e870d724-ea54-42cf-8568-8cdc483593af.png)'
- en: Click on the Save Menu button to store all of your updates.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存菜单”按钮以存储所有更新。
- en: 'Back in the code editor, replace the `print_r` function call inside of the
    filter function with the following code:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中，将过滤器函数内的 `print_r` 函数调用替换为以下代码：
- en: '[PRE23]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Refresh your website and you will see that the large array printout has disappeared.
    If you are logged in as the administrator, you will also notice the Private Area
    link in your menu. Log out or use another browser where you are not logged in
    to your development site to hide the menu item.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新您的网站，您将看到大型数组打印输出已消失。如果您以管理员身份登录，您还会在菜单中注意到私有区域链接。注销或使用另一个浏览器（您未登录到开发站点）以隐藏菜单项。
- en: How it works...
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As WordPress assembles a list of all available plugins to display them in the
    administration interface, it does not check to see if each plugin's PHP code is
    valid. This check is actually done when a plugin is activated. At that time, any
    syntax error will be caught immediately and the newly-activated plugin will remain
    inactive, preventing a failure of the entire website.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当WordPress组装一个所有可用插件的列表以在管理界面中显示时，它并不会检查每个插件的PHP代码是否有效。实际上，这个检查是在插件激活时进行的。那时，任何语法错误都会立即被发现，新激活的插件将保持未激活状态，从而防止整个网站出现故障。
- en: That being said, once a plugin is activated, its code is evaluated every time
    WordPress renders a web page, and any subsequent code error that gets saved to
    the plugin file will cause the site to stop working correctly. For this reason,
    it is highly recommended to set up a local development environment, as shown in
    Chapter 1, *Preparing a Local Development Environment*, to avoid affecting a live
    site when an inevitable error creeps up in your plugin code. On a live website,
    to avoid potential outages, a safer method is to deactivate plugins before making
    changes to them, then reactivating them once changes have been made so that they
    are revalidated before their functionality is enabled. It should be noted that,
    with this method, the plugin's functionality won't be available on your site while
    you make changes, so it is not an optimal way to modify deployed code.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，一旦插件被激活，其代码在WordPress渲染网页时每次都会被评估，并且任何随后保存到插件文件中的代码错误都会导致网站无法正确工作。因此，强烈建议设置一个本地开发环境，如第1章中所述的*准备本地开发环境*，以避免在插件代码中不可避免地出现错误时影响实时网站。在实时网站上，为了避免潜在的故障，一个更安全的方法是在修改插件之前将其停用，一旦修改完成，再重新激活它们，以确保在启用功能之前它们被重新验证。需要注意的是，使用这种方法，在您进行更改时，插件的功能将不可用，因此这不是修改已部署代码的最佳方式。
- en: Once the code is working correctly, the second part of this recipe shows us
    how to visualize the information that is received by a custom filter function.
    While the WordPress Codex website provides great documentation about the purpose
    of most filters available, it does not go into details about the structure of
    the information that is sent to each filter function. Thankfully, the PHP `print_r`
    function comes in very handy, since it can display the content of any variable
    on the screen, no matter what information is stored in the variable it receives
    as an argument.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码运行正确，本食谱的第二部分将展示如何可视化自定义过滤器函数接收到的信息。虽然WordPress Codex网站提供了关于大多数过滤器目的的出色文档，但它并没有详细介绍发送到每个过滤器函数的信息结构。幸运的是，PHP的`print_r`函数非常有用，因为它可以显示任何变量的内容，无论变量接收到的参数中存储了什么信息。
- en: Last, but not least, the implementation of the custom filter function uses the
    WordPress API function `is_user_logged_in()` to see whether the person viewing
    the site has provided login credentials, and then goes on to parse all the menu
    items and remove the Private Area menu item if the visitor is not logged in.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是，自定义过滤器功能的实现使用WordPress API函数`is_user_logged_in()`来查看查看网站的人是否提供了登录凭据，然后继续解析所有菜单项，如果访客未登录，则删除“私有区域”菜单项。
- en: There's more...
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In addition to the debugging techniques used in this recipe, WordPress offers
    a number of built-in tools to facilitate plugin troubleshooting.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本食谱中使用的调试技术外，WordPress还提供了一些内置工具来帮助插件故障排除。
- en: Built-in WordPress debugging features
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置的WordPress调试功能
- en: 'While the `wp-config.php` file, located at the top of the WordPress file structure,
    is primarily used to store basic site configuration data, it can also be used
    to trigger a number of debugging features. The first of these is the debug mode,
    which will display all PHP errors, warnings, and notices at the top of site pages.
    For example, having this option active will show all the undefined variables that
    you try to access in your code along with any deprecated WordPress function. To
    activate this tool, change the second parameter of the line defining the `WP_DEBUG`
    constant from `false` to `true` in `wp_config.php`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`wp-config.php`文件位于WordPress文件结构的顶部，主要用于存储基本网站配置数据，但它也可以用来触发一系列调试功能。这些功能中的第一个是调试模式，它将在网站页面的顶部显示所有PHP错误、警告和通知。例如，激活此选项将显示您在代码中尝试访问的所有未定义变量，以及任何已弃用的WordPress函数。要激活此工具，请将定义`WP_DEBUG`常量的行的第二个参数从`false`更改为`true`在`wp_config.php`中：
- en: '[PRE24]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To prevent debug messages from affecting the site''s layout, you can download
    a useful plugin called Debug Bar ([https://wordpress.org/plugins/debug-bar/](https://wordpress.org/plugins/debug-bar/))
    to collect messages and display them in the admin bar:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止调试消息影响网站的布局，您可以下载一个有用的插件，称为 Debug Bar ([https://wordpress.org/plugins/debug-bar/](https://wordpress.org/plugins/debug-bar/))，以收集消息并在管理栏中显示：
- en: '![](img/c86f7a7e-95ec-4e14-9390-1e419731c473.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c86f7a7e-95ec-4e14-9390-1e419731c473.png)'
- en: 'Other debugging features that can be activated from the `wp-config.php` file
    are as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从 `wp-config.php` 文件激活的其他调试功能如下：
- en: '`WP_DEBUG_LOG`: Stores all debug messages in a file named `debug.log` in the
    site''s `wp-content` directory for later analysis'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WP_DEBUG_LOG`: 将所有调试消息存储在站点 `wp-content` 目录下名为 `debug.log` 的文件中，以供以后分析'
- en: '`WP_DEBUG_DISPLAY`: Indicates whether or not error messages should be displayed
    on the screen'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WP_DEBUG_DISPLAY`: 表示是否应在屏幕上显示错误消息'
- en: '`SAVEQUERIES`: Stores database queries in a variable that can be displayed
    in the page footer (see [https://codex.wordpress.org/Editing_wp-config.php#Save_queries_for_analysis](https://codex.wordpress.org/Editing_wp-config.php#Save_queries_for_analysis)
    for more information)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SAVEQUERIES`: 将数据库查询存储在变量中，可以在页面页脚中显示（有关更多信息，请参阅 [https://codex.wordpress.org/Editing_wp-config.php#Save_queries_for_analysis](https://codex.wordpress.org/Editing_wp-config.php#Save_queries_for_analysis)）'
- en: See also
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Modifying the site generator meta tag using plugin filters* recipe
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用插件过滤器修改网站生成器元标签的食谱*'
- en: Creating a new simple shortcode
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的简单短代码
- en: Shortcodes are a very popular tool in WordPress that allow users to easily add
    content generated by plugins or themes to any page or post without needing to
    be familiar with PHP code and editing theme template files. As they are very simple
    to create, shortcodes can also be used to easily automate the output of content
    that repeatedly needs to be included in your site's content.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 短代码是 WordPress 中一个非常流行的工具，允许用户轻松地将插件或主题生成的内容添加到任何页面或帖子中，而无需熟悉 PHP 代码和编辑主题模板文件。由于它们非常简单易创建，短代码还可以用于轻松自动化重复包含在您网站内容中的内容的输出。
- en: This recipe explains how to create a new custom shortcode that will be used
    to quickly add a link to a Twitter page in any post or page, automating a repetitive
    task.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱解释了如何创建一个新自定义短代码，该短代码将用于在任意帖子或页面中快速添加指向 Twitter 页面的链接，自动化重复性任务。
- en: How to do it...
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的 WordPress 插件目录。
- en: Create a new directory called `ch2-twitter-shortcode`.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch2-twitter-shortcode` 的新目录。
- en: Navigate to this directory and create a new text file called `ch2-twitter-shortcode.php`.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为 `ch2-twitter-shortcode.php` 的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Twitter Shortcode`.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为 `第 2 章 - Twitter 短语`。
- en: 'Add the following line of code to declare a new shortcode, simply using the
    two characters `tl`, and specify the name of the function that should be called
    when the code is encountered in posts or pages:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到声明新短语的声明中，只需使用两个字符 `tl`，并指定当代码在帖子或页面中遇到时应调用的函数名称：
- en: '[PRE25]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following code section to provide an implementation for the `ch2ts_twitter_link_shortcode`
    function:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到为 `ch2ts_twitter_link_shortcode` 函数提供实现的代码中：
- en: '[PRE26]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save and close the plugin file.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的开发 WordPress 安装的行政页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中单击插件。
- en: Activate your new plugin.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: 'Edit an existing post on your site and use the shortcode [tl] in the code editor:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您网站上现有的帖子，并在代码编辑器中使用短代码 [tl]：
- en: '![](img/fb47c2b2-1b3a-4b95-8f5c-2714a920a959.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb47c2b2-1b3a-4b95-8f5c-2714a920a959.png)'
- en: Save and view the post to see that the shortcode was replaced by a link to a
    Twitter page attached to the words Twitter Feed.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并查看帖子，以查看短代码是否被替换为附加在“Twitter Feed”一词上的 Twitter 页面链接。
- en: How it works...
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Shortcodes have similarities with both action hooks and filter hooks, since
    their associated custom function is called when it is time to perform a task,
    just like an action hook, but they must return their output through a return value,
    just like a filter hook. In terms of external data, the function associated with
    a shortcode will receive data in the case of some types of codes, while it will
    only produce output in other cases.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 短代码与动作钩子和过滤器钩子都有相似之处，因为当需要执行任务时，它们关联的自定义函数会被调用，就像动作钩子一样，但它们必须通过返回值返回输出，就像过滤器钩子一样。在外部数据方面，与某些类型的代码相关联的短代码函数将接收数据，而在其他情况下，它只会产生输出。
- en: When used in the text of a post or page, any shortcode surrounded by a pair
    of square brackets is identified by the WordPress engine, which then searches
    for functions registered for that specific code. If found, the associated function
    is called and the expected result is used to replace the original shortcode text
    in the item's content. Just like filter functions, shortcode functions must not
    output any text directly, since it would likely appear in an unexpected place
    in the page layout, as WordPress calls all shortcode-processing functions before
    displaying the body of an item.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 当在帖子或页面的文本中使用时，任何被一对方括号包围的短代码都会被WordPress引擎识别，然后它会搜索为该特定代码注册的函数。如果找到，则调用关联的函数，并使用预期的结果替换项目内容中的原始短代码文本。就像过滤器函数一样，短代码函数不得直接输出任何文本，因为这可能会在页面布局中出现意外的位置，因为WordPress在显示项目正文之前会调用所有短代码处理函数。
- en: For simple shortcodes, such as those in this recipe, the plugin functions associated
    with them must return information, but they do not receive any additional data
    through function parameters. That being said, they can rely on utility functions,
    such as `get_the_ID`, `get_the_title`, and other WordPress utility functions,
    to be able to produce the appropriate output. Other types of shortcodes seen in
    later recipes will have more context and configuration options. It is also possible
    for shortcodes to access stored options data, which will be covered in [Chapter
    3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and Administration
    Pages*.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的短代码，例如本食谱中的那些，与它们关联的插件函数必须返回信息，但它们不会通过函数参数接收任何额外的数据。换句话说，它们可以依赖实用函数，如`get_the_ID`、`get_the_title`和其他WordPress实用函数，以便能够生成适当的输出。在后面的食谱中看到的其他类型的短代码将具有更多的上下文和配置选项。短代码还可以访问存储的选项数据，这将在[第3章](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)，*用户设置和管理页面*中介绍。
- en: See also
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a plugin file and header* recipe
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建插件文件和头部*食谱'
- en: Creating a new shortcode with parameters
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建带参数的新短代码
- en: While simple shortcodes already provide a lot of potential to output complex
    content to a page by entering a few characters in the post editor, shortcodes
    become even more useful when they are coupled with parameters that will be passed
    to their associated processing function. Using this technique, it becomes very
    easy to create a shortcode that accelerates the insertion of external content
    in WordPress posts or pages by only needing to specify the shortcode and the unique
    identifier of the source element to be displayed.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然简单的短代码已经通过在帖子编辑器中输入几个字符提供了将复杂内容输出到页面的潜力，但当它们与传递给其关联处理函数的参数结合使用时，短代码变得更加有用。使用这种技术，创建一个短代码来加速在WordPress帖子或页面中插入外部内容变得非常容易，只需指定短代码和要显示的源元素的唯一标识符即可。
- en: We will illustrate this concept in this recipe by creating a shortcode that
    will be used to quickly add Twitter feeds to posts or pages.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个短代码来展示这个概念，这个短代码将被用来快速将Twitter动态添加到帖子或页面中。
- en: How to do it...
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录。
- en: Create a new directory called `ch2-twitter-embed`.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch2-twitter-embed`的新目录。
- en: Navigate to this directory and create a new text file called `ch2-twitter-embed.php`.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录并创建一个名为`ch2-twitter-embed.php`的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Twitter Embed`.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的头部，将插件命名为`Chapter 2 - Twitter Embed`。
- en: 'Add the following line of code to declare a new shortcode and specify the name
    of the function that should be called when the shortcode is found in posts or
    pages:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以声明一个新的短代码并指定当短代码在帖子或页面中找到时应调用的函数名称：
- en: '[PRE27]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following code section to provide an implementation for the `ch2te_twitter_embed_shortcode`
    function:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码部分添加到为`ch2te_twitter_embed_shortcode`函数提供实现：
- en: '[PRE28]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save and close the plugin file.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您开发WordPress安装的管理页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中单击“插件”。
- en: Activate your new plugin.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: 'Create a new page and use the shortcode `[twitterfeed user_name=''WordPress'']`
    in the page editor, where `WordPress` is the Twitter username of the feed to display:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新页面，并在页面编辑器中使用短代码`[twitterfeed user_name='WordPress']`，其中`WordPress`是要显示的源Twitter用户名：
- en: '![](img/8dff22ef-cadd-402b-a39d-f877bcea83d6.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8dff22ef-cadd-402b-a39d-f877bcea83d6.png)'
- en: Publish and view the page to see that the shortcode has been replaced by an
    embedded Twitter feed on your site.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布并查看页面，以查看短代码已被嵌入到您网站上的Twitter源所取代。
- en: Edit the page and remove the `user_name` parameter and its associated value,
    only leaving the core `[twitterfeed]` shortcode in the post, then Update to save
    changes.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑页面，删除`user_name`参数及其相关值，只留下核心的`[twitterfeed]`短代码在帖子中，然后更新以保存更改。
- en: Refresh the page and see that the feed is still being displayed, but now shows
    tweets from another account.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新页面，查看是否仍然显示该源，但现在显示的是来自另一个账户的推文。
- en: How it works...
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When shortcodes are used with parameters, these extra pieces of data are sent
    to the associated processing function in the `$atts` parameter variable. By using
    a combination of the standard PHP `extract` and WordPress-specific `shortcode_atts`
    functions, our plugin is able to parse the data sent to the shortcode and create
    an array of identifiers and values that are subsequently transformed into PHP
    variables that we can use in the rest of our shortcode implementation function.
    In this specific example, we expect a single variable to be used, called `user_name`,
    which will be stored in a PHP variable called `$user_name`. If the user enters
    the shortcode without any parameter, a default value of `ylefebvre` will be assigned
    to the username variable to ensure that the plugin still works. Since we are going
    to accept user input in this code, we also verify that the user did not provide
    an empty string and we use the `esc_html` and `esc_url` functions to remove any
    potentially harmful HTML characters from the input string and make sure that the
    link destination URL is valid.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当短代码与参数一起使用时，这些额外的数据会被发送到`$atts`参数变量中关联的处理函数。通过使用标准的PHP `extract`和WordPress特定的`shortcode_atts`函数的组合，我们的插件能够解析发送到短代码的数据，并创建一个标识符和值的数组，这些标识符和值随后被转换成PHP变量，我们可以在短代码实现函数的其余部分中使用。在这个特定的例子中，我们期望使用一个名为`user_name`的单个变量，它将被存储在名为`$user_name`的PHP变量中。如果用户没有提供任何参数就输入了短代码，将默认将`ylefebvre`分配给用户名变量，以确保插件仍然可以工作。由于我们将在代码中接受用户输入，我们还验证用户没有提供空字符串，并使用`esc_html`和`esc_url`函数从输入字符串中删除任何可能有害的HTML字符，并确保链接目标URL是有效的。
- en: Once we have access to the Twitter username, we can put together the required
    HTML code that will embed a Twitter feed in our page and display the selected
    user's tweets.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得了Twitter用户名，我们就可以组合所需的HTML代码，将Twitter源嵌入我们的页面并显示所选用户的推文。
- en: While this example only has one argument, it is possible to define multiple
    parameters for a shortcode.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个例子只有一个参数，但可以为短代码定义多个参数。
- en: See also
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a new simple shortcode* recipe
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个新的简单短代码*配方'
- en: Creating a new enclosing shortcode
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的封装短代码
- en: A different type of shortcode is available in WordPress that encloses content
    in posts and pages. Using a syntax similar to HTML tags, enclosing shortcodes
    can be used to identify parts of an item's content that need to be treated in
    a special way. For example, it is possible to use this type of shortcode to style
    a part of the post.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress中还有另一种类型的短代码，它将内容封装在帖子或页面中。使用类似于HTML标签的语法，封装短代码可以用来标识需要以特殊方式处理的项的内容部分。例如，可以使用这种类型的短代码来设置帖子的部分样式。
- en: As an example of how to create enclosing shortcodes, this recipe shows you how
    to create a set of tags that will identify part of a post or page that should
    only be shown to visitors that are logged in to a site. In this way, the shortcode
    acts similarly to a filter hook, with the added bonus that you do not need to
    parse for instances of these tags, as would normally be done in a filter.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 作为创建包围短代码的示例，本食谱展示了如何创建一组标签，这些标签将标识帖子或页面中仅应向登录网站的访问者显示的部分。以这种方式，短代码的行为类似于过滤器钩子，额外的好处是您不需要解析这些标签的实例，这在过滤器中通常是必须做的。
- en: How to do it...
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch2-private-item-text`.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch2-private-item-text` 的新目录。
- en: Navigate to this directory and create a new text file called `ch2-private-item-text.php`.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为 `ch2-private-item-text.php` 的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Private Item Text`.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，命名为“第2章 - 私有项目文本”。
- en: 'Add the following line of code to declare a new shortcode and specify the name
    of the function that should be called when the shortcode is found in posts or
    pages:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向声明新短代码并指定当短代码在帖子或页面中找到时应调用的函数的代码行添加以下代码：
- en: '[PRE29]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following code section to provide an implementation for the `ch2pit_private_shortcode`
    function:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向提供 `ch2pit_private_shortcode` 函数实现的代码部分添加以下代码：
- en: '[PRE30]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save and close the plugin file.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的开发WordPress安装的管理页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中点击“插件”。
- en: Activate your new plugin.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: 'Create a new post and wrap some of the content with the [private] and [/private]
    tags:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新帖子，并用 [private] 和 [/private] 标签包裹一些内容：
- en: '![](img/dfa02604-2b29-4099-a5c6-a5f79a83e9ac.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfa02604-2b29-4099-a5c6-a5f79a83e9ac.png)'
- en: Save and view the post to see that the text is visible while you are logged
    in to your site.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并查看帖子，以查看您登录到您的网站时文本是可见的。
- en: Log out and refresh the page to see that the enclosed text has been replaced
    by a general message.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登出并刷新页面，以查看包围的文本已被通用消息替换。
- en: How it works...
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Similar to a filter function, enclosing shortcodes receive a copy of the text
    that has been wrapped with the new tags. It is then possible to return this text
    with additional HTML code, or completely replace it with new content. In this
    specific case, we used the `is_user_logged_in` WordPress function to determine
    whether the current visitor is logged in to the site. Based on the result of that
    query, the code determines whether the original content should be displayed with
    some additional styling code, or if the visitor should see a message encouraging
    them to join the website.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于过滤器函数，包围的短代码会接收到用新标签包裹的文本的副本。然后可以返回带有附加HTML代码的此文本，或者完全用新内容替换它。在这个特定的情况下，我们使用了WordPress的`is_user_logged_in`函数来确定当前访问者是否登录到网站。根据查询结果，代码确定原始内容是否应该显示一些额外的样式代码，或者访问者应该看到一条鼓励他们加入网站的消息。
- en: See also
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating a new simple shortcode* recipe
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个新的简单短代码* 食谱'
- en: Loading a style sheet to format plugin output
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载样式表以格式化插件输出
- en: When a plugin adds custom content or inserts styling tags to a post or page's
    existing content, as was done in the previous recipe showing how to create an
    enclosing shortcode, it usually needs to load a custom style sheet to style these
    new elements. This recipe shows how to add a style sheet in the WordPress style
    queue to format the private output created in the previous recipe. This queue
    is processed when the page header is rendered, listing all the style sheets that
    need to be loaded to display the site correctly.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 当插件向帖子或页面的现有内容添加自定义内容或插入样式标签时，就像在之前展示如何创建包围短代码的食谱中所做的那样，它通常需要加载一个自定义样式表来格式化这些新元素。本食谱展示了如何在WordPress样式队列中添加样式表以格式化之前食谱中创建的私有输出。此队列在页面头部渲染时进行处理，列出所有需要加载以正确显示网站的样式表。
- en: Getting ready
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Creating a new enclosing shortcode* recipe
    to have a starting point for this recipe and the resulting plugin should still
    be active in your development site. Alternatively, you can download the resulting
    code (`Chapter 2/ch2-private-item-text/ch2-private-item-text.php`) of that recipe
    from the Packt website ([https://www.packtpub.com/support](https://www.packtpub.com/support)).
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了 *创建一个新的封装短代码* 菜单，以便为本菜谱提供一个起点，并且生成的插件应该仍然在您的开发站点中处于活动状态。或者，您可以从Packt网站（[https://www.packtpub.com/support](https://www.packtpub.com/support)）下载该菜谱的结果代码（`Chapter
    2/ch2-private-item-text/ch2-private-item-text.php`）。
- en: How to do it...
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch2-private-item-text` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的 `ch2-private-item-text` 文件夹。
- en: Open the `ch2-private-item-text.php` file in a text editor.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开 `ch2-private-item-text.php` 文件。
- en: 'Add the following line of code after the existing functions to register a function
    that will be called at the beginning of the WordPress page display process:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有函数之后添加以下代码行，以注册一个将在WordPress页面显示过程开始时被调用的函数：
- en: '[PRE31]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following code section to provide an implementation for the `ch2pit_queue_stylesheet`
    function:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码部分添加到提供 `ch2pit_queue_stylesheet` 函数实现的代码段：
- en: '[PRE32]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Save and close the plugin file.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Create a new text file in the plugin's directory called `stylesheet.css` and
    open it in a code editor.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件的目录中创建一个新的文本文件，命名为 `stylesheet.css`，并在代码编辑器中打开它。
- en: 'Add the following content to the file:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到文件中：
- en: '[PRE33]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Save and close the text file.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文本文件。
- en: Navigate to your website, making sure you are logged in, and refresh the page
    containing the private text content. You should notice that the text is now displayed
    in gray.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的网站，确保您已登录，并刷新包含私有文本内容的页面。您应该注意到文本现在以灰色显示。
- en: Log out of the site and refresh the page to see that the registration message
    styling has also changed.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从网站上注销并刷新页面，以查看注册消息样式也已更改。
- en: How it works...
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: While it would have been possible to write straight HTML code to load the CSS
    file by registering a function with the `wp_head` action hook, as we have done
    previously, WordPress has utility functions designed to help avoid loading duplicate
    style sheets or scripts on a site. In this specific example, `wp_enqueue_script`
    is used to place the plugin's style sheet file in a queue that will be processed
    when the plugin header is rendered, with the associated name `privateshortcodestyle`.
    Once WordPress has processed all the plugins and boiled down all the style sheet
    requests to single instances, it will output the necessary HTML code to load all
    of them.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通过使用 `wp_head` 动作钩子注册函数直接编写HTML代码来加载CSS文件是可能的，就像我们之前做的那样，但WordPress有设计用来帮助避免在网站上加载重复样式表或脚本的实用函数。在这个特定示例中，使用
    `wp_enqueue_script` 将插件样式表文件放入队列中，该队列将在插件头部渲染时处理，关联名称为 `privateshortcodestyle`。一旦WordPress处理完所有插件并将所有样式表请求缩减为单个实例，它将输出必要的HTML代码来加载所有这些样式表。
- en: The content of the `stylesheet.css` file is normal CSS code that specifies that
    any text that is assigned the `private` class should be displayed in gray, while
    the text displayed to non-registered users should be displayed in white on a red
    background.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`stylesheet.css` 文件的内容是正常的CSS代码，指定将 `private` 类分配给任何文本应显示为灰色，而显示给未注册用户的文本应在红色背景上显示为白色。'
- en: See also
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a new enclosing shortcode* recipe
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个新的封装短代码* 菜单'
- en: Writing plugins using object-oriented PHP
  id: totrans-370
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用面向对象的PHP编写插件
- en: So far, all plugin examples that have been covered in this chapter have been
    written using the procedural PHP programming style, with all the functions declared
    directly in the main body of the plugin and the hook registration functions having
    direct access to these functions.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章中涵盖的所有插件示例都是使用过程式PHP编程风格编写的，所有函数都直接声明在插件的主体中，钩子注册函数可以直接访问这些函数。
- en: WordPress can also be written using an object-oriented PHP approach. This recipe
    explains how to convert the code from the previous recipe into a class-based version
    of the same functionality.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress也可以使用面向对象的PHP方法编写。本菜谱解释了如何将前一个菜谱中的代码转换为具有相同功能的基于类的版本。
- en: Getting ready
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Loading a style sheet to format plugin
    output* recipe to have a starting point for this recipe. Alternatively, you can
    download the resulting code (`Chapter 2/ch2-private-item-text/ch2-private-item-text-v2.php`)
    for that recipe from the Packt Publishing website ([https://www.packtpub.com/support](https://www.packtpub.com/support)).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*加载样式表以格式化插件输出*的配方，以便为本配方提供一个起点。或者，您可以从Packt Publishing网站([https://www.packtpub.com/support](https://www.packtpub.com/support))下载该配方生成的代码(`Chapter
    2/ch2-private-item-text/ch2-private-item-text-v2.php`)。
- en: How to do it...
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Log in to the administration page of your WordPress installation.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的WordPress安装的管理页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧导航菜单中的插件。
- en: Check whether the `Chapter 2 - Private Item Text` plugin is currently active
    and deactivate it if it is.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`Chapter 2 - Private Item Text`插件是否当前处于激活状态，如果是，请将其停用。
- en: Copy the entire contents of the `ch2-private-item-text` directory and rename
    the copy `ch2-oo-private-item-text`.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`ch2-private-item-text`目录的全部内容，并将副本重命名为`ch2-oo-private-item-text`。
- en: Navigate to the newly renamed folder and rename the main PHP code file `ch2-oo-private-item-text.php`.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到新命名的文件夹，并将主PHP代码文件重命名为`ch2-oo-private-item-text.php`。
- en: Open the newly renamed plugin file in a code editor.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新命名的插件文件。
- en: Update the plugin header to change the name of the plugin to `Chapter 2 - Object-Oriented
    - Private Item Text`.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新插件头部，将插件名称更改为`Chapter 2 - Object-Oriented - Private Item Text`。
- en: 'Right after the plugin header, add the following text to declare a new class
    for our plugin and specify a constructor method for this class:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件头部之后立即添加以下文本以声明一个新的类，并指定该类的构造方法：
- en: '[PRE34]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Move the calls to the `add_shortcode` and `add_action` functions to be placed
    inside of the class constructor.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对`add_shortcode`和`add_action`函数的调用移动到类构造函数内部。
- en: 'Modify the second argument of the `add_shortcode` and `add_action` functions
    as follows:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`add_shortcode`和`add_action`函数的第二个参数如下：
- en: '[PRE35]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Move the complete `ch2pit_private_shortcode` and `ch2pit_queue_stylesheet` functions
    inside of the class body (after the constructor method and before the class closing
    bracket).
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将完整的`ch2pit_private_shortcode`和`ch2pit_queue_stylesheet`函数移动到类体内部（在构造方法之后和类结束括号之前）。
- en: Save and close the modified file.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭修改后的文件。
- en: Log in to the administration page of your development WordPress installation.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的开发WordPress安装的管理页面。
- en: Click on Plugins in the left-hand navigation menu.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧导航菜单中的插件。
- en: Activate the new plugin.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活新插件。
- en: Visit your site to see that the private item content functionality is still
    in place and works as it did before.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问您的网站，以查看私有项目内容功能仍然存在并且像以前一样工作。
- en: How it works...
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The code changes that we applied to the plugin first declare a class for all
    of our plugin's functionality and also contain a constructor method for that class.
    The constructor method is called once, as soon as the class is instantiated by
    the last line in the plugin's code, and can be used to associate custom functions
    with all action hooks, filter hooks, and shortcodes.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对插件应用的所有代码更改首先声明了一个用于我们插件所有功能的类，并包含了一个该类的构造方法。构造方法在类被实例化后立即调用，即插件代码中的最后一行，并且可以用来将自定义函数与所有动作钩子、过滤器钩子和短代码相关联。
- en: The main benefit of using an object-oriented approach is that you don't have
    to be as careful when naming your hook callbacks and all other functions, since
    these names are local to the class and can be the same as function names declared
    in any other classes or in procedural PHP code.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面向对象方法的主要好处是，您在命名钩子回调和所有其他函数时不必那么小心，因为这些名称是局部于类的，并且可以与任何其他类或过程式PHP代码中声明的函数名称相同。
- en: See also
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a new enclosing shortcode* recipe
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个新的封装短代码*配方'
