- en: Chapter 10. Localize the App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。本地化应用
- en: This chapter explains how to write a multilingual app. Localization, also known
    as Internationalization (I18N), takes care that a software application can be
    adapted and rendered in different languages without changes in the source code.
    This is particularly important in a web application where users speak different
    languages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何编写多语言应用。本地化，也称为国际化（I18N），负责确保软件应用可以在不同的语言中适应和渲染，而无需更改源代码。这在用户说不同语言的Web应用中尤为重要。
- en: 'Yii provides powerful tools to handle this task, choosing from the file or
    database approach (according to the application''s complexity). We will cover
    the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Yii提供了强大的工具来处理这项任务，可以选择文件或数据库方法（根据应用的复杂性）。我们将涵盖以下主题：
- en: Setting the default language
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置默认语言
- en: File-based translations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于文件的翻译
- en: Example – using file-based translation for the entire website
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 使用基于文件的翻译为整个网站
- en: Placeholders formatting
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 占位符格式化
- en: DB-based translations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于数据库的翻译
- en: Example – translating the room's description using DB
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 使用数据库翻译房间描述
- en: Setting the default language
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置默认语言
- en: 'A Yii application uses two kinds of languages: source language and target language.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Yii应用使用两种语言：源语言和目标语言。
- en: Source language specifies the language employed to write the source code; the
    default setting is `en-US`, and it is advisable not to change this value since
    English is the most used and known language in software development. On the other
    hand, there is a target language used to display content to end users, and we
    are going to work specifically on this aspect.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 源语言指定编写源代码所使用的语言；默认设置是 `en-US`，建议不要更改此值，因为英语是软件开发中最常用和最知名的语言。另一方面，目标语言用于向最终用户显示内容，我们将专门讨论这个方面。
- en: 'This language can be set in the configuration file using the `language` property:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用配置文件中的 `language` 属性设置此语言：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, you can use the following code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用以下代码：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, let's see how to handle app localization in practice.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在实践中处理应用本地化。
- en: File-based translations
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于文件的翻译
- en: This is the most simple way to translate text messages from one language to
    another. Basically, there are one or more files for each language containing keywords
    with text representations; we will put these keywords in the source code where
    the framework will replace them with text.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将文本消息从一种语言翻译到另一种语言的最简单方法。基本上，每个语言都有一个或多个包含关键词文本表示的文件；我们将把这些关键词放入源代码中，框架将用文本替换它们。
- en: The pairs of keyword-text translations are grouped by categories representing
    the filenames where they are stored. These pairs are array keys-values, where
    key indicates keywords, and value indicates text translations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词-文本翻译的成对组合按类别分组，这些类别代表存储它们的文件名。这些成对组合是数组键值对，其中键表示关键词，值表示文本翻译。
- en: By default, the path folder containing translations for a specific language
    is in `@app/messages/<language>/<category>.php`. Therefore, if we are writing
    translations for the `app` category and the `en-US` language, for example, the
    complete path for the translation file will be in `@app/messages/en-US/app.php`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，包含特定语言翻译的路径文件夹位于 `@app/messages/<language>/<category>.php`。因此，如果我们正在为
    `app` 类别和 `en-US` 语言编写翻译，例如，翻译文件的完整路径将在 `@app/messages/en-US/app.php`。
- en: Going to the source code, translations are activated using the `Yii::t()` static
    method that accepts four parameters, but only the first two are required; the
    first one is the category, and the second one is the message to translate.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码中，使用接受四个参数的 `Yii::t()` 静态方法激活翻译，但只需要前两个参数；第一个是类别，第二个是要翻译的消息。
- en: 'Now, we want to make an example where we will write a classic `Hello World!`
    in two languages: English and Italian. However, it will be just as easy to translate
    it in any other language.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要举一个例子，在这个例子中我们将用两种语言：英语和意大利语来编写一个经典的 `Hello World!`。然而，将其翻译成任何其他语言也同样简单。
- en: 'Working on the previous basic templated project, write a new controller named
    `FileTranslatorController` in `basic/controllers/FileTranslatorController.php`
    with the following content:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的基本模板项目上，在 `basic/controllers/FileTranslatorController.php` 中编写一个新的控制器 `FileTranslatorController`，内容如下：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first two source code rows in `actionIndex()` will set the app language
    to `en-US`, and then they will store the content of `Hello World!` key of the
    `basic/messages/en-US/app.php` file in the `$englishText` variable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`actionIndex()`中的前两行源代码将设置应用程序语言为`en-US`，然后它们将`basic/messages/en-US/app.php`文件中`Hello
    World!`键的内容存储在`$englishText`变量中。'
- en: In the same way, the last two source code rows in `actionIndex()` will set the
    app language to `it-IT`, and then they will store the content of `Hello World!`
    key of the `basic/messages/it-IT/app.php` file in the `$italianText` variable.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`actionIndex()`中的最后两行源代码将设置应用程序语言为`it-IT`，然后它们将`basic/messages/it-IT/app.php`文件中`Hello
    World!`键的内容存储在`$italianText`变量中。
- en: 'The view content in `basic/views/file-translator/index.php` is simply as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`basic/views/file-translator/index.php`中的视图内容如下所示：'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, we need to define file languages for English and Italian translations.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要定义英语和意大利语翻译的文件语言。
- en: If the `messages` folder does not exist in `basic/messages`, we will just create
    it; then, create two new folders named `en-US` and `it-IT`. In each folder, add
    a new file named `app.php`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`basic/messages`中不存在`messages`文件夹，我们将创建它；然后，创建两个新的文件夹，分别命名为`en-US`和`it-IT`。在每个文件夹中，添加一个名为`app.php`的新文件。
- en: 'For the file with the English translations in `basic/messages/en-US/app.php`,
    let''s write:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含英文翻译的文件`basic/messages/en-US/app.php`，让我们写下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'While for Italian translations in `basic/messages/it-IT/app.php`, let''s write:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 而对于`basic/messages/it-IT/app.php`中的意大利语翻译，让我们写下：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can browse to `http://hostname/basic/file-translator/index` to view the
    output.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以浏览到`http://hostname/basic/file-translator/index`来查看输出。
- en: Example – using file-based translation for the entire website
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用基于文件的翻译为整个网站
- en: Applying translations to the entire website is tedious, and, above all, there
    is a high possibility that you will miss some translations. Yii provides a powerful
    tool to automatically produce the message's PHP files for all the languages we
    want.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将翻译应用到整个网站是繁琐的，而且最重要的是，你可能会错过一些翻译。Yii提供了一个强大的工具，可以自动为所有我们想要的语种生成消息的PHP文件。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This powerful tool is a console command named `message`; therefore, we require
    a console access.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个强大的工具是一个名为`message`的控制台命令；因此，我们需要控制台访问权限。
- en: 'This command requires two steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令需要两个步骤：
- en: Creating a configuration file where we will indicate the `languages` property,
    or which languages we want to support in the project and the `messagePath` property,
    or rather, where to store translated messages.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个配置文件，我们将在这里指定`languages`属性，即我们想要在项目中支持的语言，以及`messagePath`属性，或者说，翻译消息的存储位置。
- en: Launching the `message` command.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`message`命令。
- en: For step 1, go to the console, in the project's root folder, where the `yii`
    file is located.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一步，前往控制台，在项目的根目录下，即`yii`文件所在的位置。
- en: 'If we are working on a basic template, we will launch the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在处理基本模板，我们将启动以下命令：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first parameter, `message/config`, is the action `config` invoked on the
    controller `message`, and the second parameter is the file path where we want
    to save the configuration (in this case, `config/i18n.php`, but we can write anything).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数`message/config`是在`message`控制器上调用的`config`动作，第二个参数是我们想要保存配置的文件路径（在这种情况下，`config/i18n.php`，但我们可以写任何内容）。
- en: 'If we are working on an advanced template, we will launch the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在处理高级模板，我们将启动以下命令：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The only difference is that, in the last command, we specified that the configuration
    file for message command translations is in `common/config` instead of the `config`
    folder.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是，在最后一个命令中，我们指定了消息命令翻译的配置文件位于`common/config`而不是`config`文件夹中。
- en: 'Now, if we open `config/i18n.php`, we should see the default configuration
    file for the `message` command that should look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们打开`config/i18n.php`，我们应该看到`message`命令的默认配置文件，其外观应如下所示：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The configuration is very clear to read, so we will only explain its main properties:
    `languages`, `messagePath`, and `except`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 配置非常易于阅读，因此我们只需解释其主要属性：`languages`、`messagePath`和`except`。
- en: 'The `languages` property defines which languages are supported in the web project.
    For example, we could write:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`languages`属性定义了在Web项目中支持哪些语言。例如，我们可以写：'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding command supports and autogenerates messages for the English, Italian,
    and French languages.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令支持并自动生成英语、意大利语和法语的消息。
- en: 'The `messagePath` property defines where autogenerated messages should be saved.
    It is advisable to point to the `messages` folder (that must be created if it
    does not exist); in this way, we can write the following in the basic template:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`messagePath` 属性定义了自动生成的消息应该保存的位置。建议指向 `messages` 文件夹（如果不存在，必须创建）；这样我们可以在基本模板中写入以下内容：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `__DIR__` refers to the `config` file folder, while in the basic template,
    it is the `basic/config` folder.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`__DIR__` 指的是 `config` 文件夹，而在基本模板中，它是 `basic/config` 文件夹。
- en: Once we have launched the `message` command, it will look for all folders and
    subfolders containing `.php` files, as indicated in the `only` property (only
    `.php` files will be processed).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们启动了 `message` 命令，它将查找所有包含 `.php` 文件的文件夹和子文件夹，如 `only` 属性中所示（只有 `.php` 文件将被处理）。
- en: Therefore, in the project's root folder, there are some folders, such as `vendor`,
    not relevant for our purpose.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在项目的根文件夹中，有一些文件夹，如 `vendor`，与我们无关。
- en: 'So, we will add the `/vendor` value to the `except` property, in order to indicate
    that the `message` command will not look inside this folder, in this way:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将 `/vendor` 值添加到 `except` 属性中，以指示 `message` 命令不会查看此文件夹，这样：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For step 2, we will now try to launch the command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于步骤 2，我们现在将尝试启动以下命令：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It will find the `Yii::t` marker, defined in the `translator` property, in all
    the files in the folders and subfolders specified in the `sourcePath` property,
    considering the `except` property to exclude files and folders where we do not
    want to look.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在 `sourcePath` 属性指定的文件夹和子文件夹中的所有文件中找到 `Yii::t` 标记，考虑 `except` 属性以排除我们不想查找的文件和文件夹。
- en: The translated messages will be created (if they do not exist) in the `messagePath`
    folder, in our case, in the `messages` folder starting from the project's root
    folder.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译后的消息将（如果不存在）创建在 `messagePath` 文件夹中，在我们的例子中，是从项目的根文件夹开始的 `messages` 文件夹。
- en: If there are no `Yii::t` markers in all the searched files, the relative language's
    subfolder will be empty.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有搜索的文件中都没有 `Yii::t` 标记，则相对语言子文件夹将为空。
- en: 'For example, open `SiteController` in `basic/controller/SiteController.php`
    and change the `actionIndex` content as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，打开 `basic/controller/SiteController.php` 中的 `SiteController` 并按以下方式更改 `actionIndex`
    内容：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, relaunch the `message` command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新启动 `message` 命令：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then, check the `basic/messages/en` folder. We will find an `app.php` file that
    contains the `this message must be translated` key to which we must fill the value
    to specify the translation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，检查 `basic/messages/en` 文件夹。我们将找到一个包含 `this message must be translated` 键的
    `app.php` 文件，我们必须填写值以指定翻译。
- en: Placeholders formatting
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 占位符格式
- en: The `Yii:t` method is not only limited to replace strings with their translation
    in other languages, but it handles the specific formatting of source strings to
    support many kinds of generalization.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`Yii:t` 方法不仅限于用其他语言的翻译替换字符串，它还处理源字符串的特定格式化以支持许多类型的泛化。'
- en: 'Firstly, `Yii:t()` supports placeholders in the following two formats:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`Yii:t()` 支持以下两种格式的占位符：
- en: String in the `{nameOfPlaceholder}` format
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{nameOfPlaceholder}` 格式的字符串'
- en: Integer in the `{0}` format, and this type of placeholder is zero-based
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数在 `{0}` 格式，这种类型的占位符是从零开始的
- en: Value arrays to replace the placeholder are passed as the third parameter to
    the `Yii:t()` method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要替换占位符的值数组作为 `Yii:t()` 方法的第三个参数传递。
- en: For example, we want to display a page with only `Hello World, I'm ...` by appending
    the custom name to the text.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想要通过添加自定义名字到文本来显示一个只包含 `Hello World, I'm ...` 的页面。
- en: 'Create `basic/controllers/FileTranslatorController.php`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `basic/controllers/FileTranslatorController.php`：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, create the view in `basic/views/file-translator/helloWorldWithName.php`
    simply with the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `basic/views/file-translator/helloWorldWithName.php` 中创建视图，只需使用以下命令：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It will display the `$text` value passed from the controller.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它将显示从控制器传递的 `$text` 值。
- en: Test it by pointing the browser to `http://hostname/basic/web/file-translator/hello-world-with-name`,
    also passing the `?name=` parameter, otherwise there will be no name at the end
    of the text.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将浏览器指向 `http://hostname/basic/web/file-translator/hello-world-with-name` 并传递
    `?name=` 参数来测试它，否则文本末尾将没有名字。
- en: 'Translations can be prepared using the `message` command that we have just
    seen:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用我们刚刚看到的 `message` 命令来准备翻译：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will automatically create a new marker `Hello World! I\'m {name}` in the
    `basic/messages` subfolders.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动在 `basic/messages` 子文件夹中创建一个新的标记 `Hello World! I\'m {name}`。
- en: 'The placeholders can be specialized with two other attributes: `ParameterType`
    and `ParameterStyle`, adding a comma after `PlaceholderName`. So, the full form
    to specify a placeholder will be as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用两个其他属性`ParameterType`和`ParameterStyle`来专门化占位符，在`PlaceholderName`后添加逗号。因此，指定占位符的完整形式如下：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, `ParameterType` can be:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`ParameterType`可以是：
- en: '`number` : The ParameterStyle can be an integer, currency, percent, or custom
    pattern (for example, 000)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number`：参数样式可以是整数、货币、百分比或自定义模式（例如，000）'
- en: '`date`: The ParameterStyle can be short, medium, long, full, or custom pattern
    (for example, dd/mm/yyyy)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`：参数样式可以是短格式、中格式、长格式、完整格式或自定义模式（例如，dd/mm/yyyy）'
- en: '`time`: The ParameterStyle can be short, medium, long, full or custom pattern
    (for example, hh:mm)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time`：参数样式可以是短格式、中格式、长格式、完整格式或自定义模式（例如，hh:mm）'
- en: '`spellout`: There is no ParameterStyle'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spellout`：没有参数样式'
- en: '`ordinal`: There is no ParameterStyle'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ordinal`：没有参数样式'
- en: '`duration`: There is no ParameterStyle'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration`：没有参数样式'
- en: The most used message formatting is probably `plural`, and that allows us to
    specify different key strings based on the number passed as a parameter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的消息格式可能是`plural`，这允许我们根据传递的参数数量指定不同的键字符串。
- en: 'Consider the following code as an example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码作为示例：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, `=0` stands for the message to be displayed when `$n` is `0`, `=1` stands
    for the message to be displayed when `$n` is `1`, and `other` stands for the message
    to be displayed when `$n` is other than `0` and `1`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`=0`代表当`$n`为`0`时显示的消息，`=1`代表当`$n`为`1`时显示的消息，而`other`代表当`$n`不是`0`和`1`时显示的消息。
- en: DB-based translations
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于数据库的翻译
- en: Yii also supports database as a storage option for message translations.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Yii还支持将数据库作为消息翻译的存储选项。
- en: It has to be explicitly configured in the `config/web.php` file if we are working
    in the basic template, or in `common/config/main.php`, if we are working in the
    advanced template.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在基本模板中工作，必须在`config/web.php`文件中显式配置，如果我们在高级模板中工作，则必须在`common/config/main.php`中配置。
- en: Next, we need to add two more database tables to manage message sources and
    message translations.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加两个额外的数据库表来管理消息源和消息翻译。
- en: 'Start by creating database tables, as suggested in Yii''s official documentation
    at [http://www.yiiframework.com/doc-2.0/yii-i18n-dbmessagesource.html](http://www.yiiframework.com/doc-2.0/yii-i18n-dbmessagesource.html):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先根据Yii官方文档中的建议创建数据库表，文档地址为[http://www.yiiframework.com/doc-2.0/yii-i18n-dbmessagesource.html](http://www.yiiframework.com/doc-2.0/yii-i18n-dbmessagesource.html)：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Table names can be customized in the configuration file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在配置文件中自定义表名。
- en: Table `source_message` will store all messages written with the source language;
    table `message` will store all translations; both tables are joined together by
    the `id` field.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`source_message`表将存储所有用源语言编写的消息；`message`表将存储所有翻译；这两个表通过`id`字段连接在一起。'
- en: 'In the next example, let''s insert one record for each table:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，让我们为每个表插入一条记录：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, it is time to apply some changes to the configuration. We need to insert
    the `i18n` property in the `components` section of the configuration in `config/web.php`
    (based on the basic template):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候对配置进行一些更改了。我们需要在`config/web.php`配置文件的`components`部分插入`i18n`属性（基于基本模板）：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This component, i18n, uses `yii\i18n\PhpMessageSource` as a class by default,
    and has employed itself for file-based translation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件，i18n，默认使用`yii\i18n\PhpMessageSource`类，并已用于基于文件的翻译。
- en: 'Now, we want to display the message in Italian. Create a new action in `basic/controllers/FileTranslatorController.php`
    named `actionHelloWorldFromDatabase()`, with the following content:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想显示意大利语的消息。在`basic/controllers/FileTranslatorController.php`中创建一个新的操作`actionHelloWorldFromDatabase()`，内容如下：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The view in `basic/views/file-translator/helloWorldFromDatabase` will show
    the `$text` content:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`basic/views/file-translator/helloWorldFromDatabase`视图将显示`$text`内容：'
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Test it by pointing the browser to `http://hostname/basic/web/file-translator/hello-world-from-database`.
    If all is correct, we should see `Ciao Mondo dal Database!`, which is the Italian
    version of `Hello World from Database!`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将浏览器指向`http://hostname/basic/web/file-translator/hello-world-from-database`来测试它。如果一切正常，我们应该看到`Ciao
    Mondo dal Database!`，这是`Hello World from Database!`的意大利语版本。
- en: Example – translating room descriptions using DB
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用数据库翻译房间描述
- en: This example will show you how to translate the room's description using the
    database as the storage option. We will create models for `message` and `source_message`
    database tables, since we are going to use ActiveRecord to manage records in all
    the tables that control translations.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本例将向您展示如何使用数据库作为存储选项来翻译房间的描述。我们将为`message`和`source_message`数据库表创建模型，因为我们打算使用ActiveRecord来管理所有控制翻译的表的记录。
- en: Firstly, we are going to create models for `message` and `source_message` database
    tables using Gii. In the basic template, point the browser to `http://hostname/basic/web/gii`,
    and then go to the model generator. Gii will create `Message` and `SourceMessage`
    models in the `basic/models` folder.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用Gii创建`message`和`source_message`数据库表的模型。在基本模板中，将浏览器指向`http://hostname/basic/web/gii`，然后转到模型生成器。Gii将在`basic/models`文件夹中创建`Message`和`SourceMessage`模型。
- en: Next, we want to create a form that contains descriptions both in the original
    language and in all other translations.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要创建一个包含原始语言和所有其他翻译的描述的表单。
- en: 'For this purpose, we will create a view in `basic/views/rooms/indexWithTranslatedDescriptions.php`,
    as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为此目的，我们将在`basic/views/rooms/indexWithTranslatedDescriptions.php`中创建一个视图，如下所示：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will check for other language translations using the `Yii::$app->i18n->translate`
    method that accepts:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Yii::$app->i18n->translate`方法检查其他语言的翻译，该方法接受：
- en: Category
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分类
- en: Message to be translated
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 待翻译的消息
- en: Parameters of messages
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息参数
- en: Language
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言
- en: 'It is now time to add `actionIndexWithTranslatedDescriptions()` in `basic/controllers/RoomsController.php`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在`basic/controllers/RoomsController.php`中添加`actionIndexWithTranslatedDescriptions()`了：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we have trouble accessing the URL, check the `access` property returned by
    the `behaviors()` method of this controller to ensure that this action is allowed.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们无法访问URL，请检查此控制器`behaviors()`方法返回的`access`属性，以确保此操作被允许。
- en: On top of this code, we will check whether the `$_POST` array is filled; in
    this case, we will get the `$sourceMessage` object from descriptions passed from
    the view. Next, we can create or update the message model for whatever language
    we want. In the end, we will also save the room object, eventually with its description
    field changed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码之上，我们将检查`$_POST`数组是否已填充；在这种情况下，我们将从视图中传递的描述中获取`$sourceMessage`对象。接下来，我们可以为任何我们想要的语种创建或更新消息模型。最后，我们还将保存房间对象，最终更改其描述字段。
- en: With this solution, anytime we want to change a description, a new record will
    be created since the text has been changed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此解决方案，每次我们想要更改描述时，由于文本已更改，都会创建一个新的记录。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have seen how to configure multiple languages in our app.
    We have found out that there are two storage options to handle internationalization:
    file and database. File is suggested for small projects and database for bigger
    ones.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何在我们的应用程序中配置多种语言。我们发现处理国际化有两种存储选项：文件和数据库。对于小型项目建议使用文件，对于大型项目建议使用数据库。
- en: We have discovered how to grab placeholders from the entire website through
    the 'message' command from the console and how to create placeholders that contain
    formatting information.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经发现如何通过控制台中的'message'命令从整个网站中抓取占位符，以及如何创建包含格式化信息的占位符。
- en: Finally, we have configured the database as a storage target for translations,
    and we have created a complete example to handle room description in different
    languages.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经将数据库配置为翻译的存储目标，并创建了一个完整的示例来处理不同语言的房间描述。
- en: In the next chapter, we will learn how to create RESTful web services using
    the new integrated management of Yii 2.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Yii 2的新集成管理创建RESTful网络服务。
