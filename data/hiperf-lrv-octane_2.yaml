- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Configuring the RoadRunner Application Server
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 RoadRunner 应用服务器
- en: When developing a web application in Laravel, we are used to using a web server
    for the delivery of our web application over the network.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Laravel 中开发一个 Web 应用程序时，我们习惯于使用 Web 服务器通过网络交付我们的 Web 应用程序。
- en: A web server exposes the application via the **HTTP** or **HTTPS** protocol
    and implements functionality that is typically closely related to the delivery
    of resources via the HTTP protocol.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器通过 **HTTP** 或 **HTTPS** 协议公开应用程序，并实现与通过 HTTP 协议交付资源紧密相关的功能。
- en: An application server is a somewhat more structured and complex piece of software
    in that it can handle different protocols; it can handle HTTP, as well as lower-level
    protocols such as **TCP**, or other protocols, such as **WebSocket**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 应用服务器在处理不同协议方面是一个结构化和更复杂的软件组件；它可以处理 HTTP，以及更底层的协议，如 **TCP**，或其他协议，如 **WebSocket**。
- en: In addition, an application server can implement an articulated worker structure.
    This means that the application server for the execution of the application logic
    delegates its execution to a worker. A worker is an isolated thread that is tasked
    with executing a given task.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，应用服务器可以实现一个结构化的工作员结构。这意味着执行应用程序逻辑的应用服务器将执行委托给工作员。工作员是一个负责执行给定任务的隔离线程。
- en: Worker management allows applications running via the application server to
    have access to features such as concurrency and parallel task execution.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 工作员管理允许通过应用服务器运行的应用程序访问并发性和并行任务执行等功能。
- en: The application server to be able to manage the various workers must also be
    able to implement load distribution features across workers and must also be able
    to implement proper balancing (using a load balancer).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够管理各种工作员，应用服务器还必须能够实现跨工作员的负载分配功能，并且还必须能够实现适当的平衡（使用负载均衡器）。
- en: There are many application servers in the PHP ecosystem, two of which are **RoadRunner**
    and **Swoole**. They are relevant to the Laravel ecosystem because they are directly
    supported by Laravel Octane.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 生态系统中有很多应用服务器，其中两个是 **RoadRunner** 和 **Swoole**。它们与 Laravel 生态系统相关，因为它们直接由
    Laravel Octane 支持。
- en: These two solutions have different features; however, both allow Laravel Octane
    to start different workers that will take over the resolution of HTTP requests.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种解决方案具有不同的功能；然而，它们都允许 Laravel Octane 启动不同的工作员，这些工作员将接管 HTTP 请求的解析。
- en: Additional features accessible through Laravel Octane and available only in
    Swoole (and not in RoadRunner) are the ability to execute multiple concurrent
    functions, manage shared data in an optimized manner through special tables, and
    start functions in a scheduled and repetitive mode. We will walk through the additional
    features provided by Swoole in [*Chapter 3*](B17728_03.xhtml#_idTextAnchor048),
    *Configuring the Swoole* *Application Server*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Laravel Octane 可访问的附加功能，仅在 Swoole（而不是 RoadRunner）中可用，包括执行多个并发函数的能力，通过特殊表以优化的方式管理共享数据，以及以计划重复的模式启动函数。我们将在
    [*第 3 章*](B17728_03.xhtml#_idTextAnchor048) 中介绍 Swoole 提供的附加功能，*配置 Swoole 应用服务器*。
- en: RoadRunner is perhaps the simplest application server in terms of available
    features, and it is also the easiest to install.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在可用的功能方面，RoadRunner 可能是应用服务器中最简单的一个，它也是最容易安装的。
- en: Therefore, in order to become familiar with the Laravel Octane configuration,
    we will start with using RoadRunner.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了熟悉 Laravel Octane 的配置，我们将从使用 RoadRunner 开始。
- en: The goal of this chapter is to show you how to set up a basic Laravel application,
    add Laravel Octane, start using Octane with RoadRunner, and configure it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是向您展示如何设置基本的 Laravel 应用程序，添加 Laravel Octane，使用 RoadRunner 启动 Octane，并对其进行配置。
- en: Understanding the setup and the configurations are the first steps that allow
    you to control the behavior of your application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 理解设置和配置是允许您控制应用程序行为的第一个步骤。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up a basic Laravel application
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本的 Laravel 应用程序
- en: Installing RoadRunner
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 RoadRunner
- en: Installing Laravel Octane
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Laravel Octane
- en: Launching Laravel Octane
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动 Laravel Octane
- en: Laravel Octane and RoadRunner advanced configuration
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Laravel Octane 和 RoadRunner 高级配置
- en: Technical requirements
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will cover the framework and the application server setup (installation
    and configuration).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖框架和应用服务器设置（安装和配置）。
- en: The assumption is that you have already installed PHP and Composer. We recommend
    you have PHP (at least version 8.0) and Composer updated to the latest version.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经安装了 PHP 和 Composer。我们建议您使用 PHP（至少版本 8.0）并将 Composer 更新到最新版本。
- en: Typically, we have two main approaches for installing languages and development
    tools. The first one is to install the tools directly in the operating system
    of your machine. The second one is to install the tools in an isolated environment
    such as a virtual machine or Docker.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们有两种主要方法来安装语言和开发工具。第一种是在您的机器操作系统中直接安装工具。第二种是在隔离环境中安装工具，例如虚拟机或 Docker。
- en: If you want to follow the instructions and the examples in the book with Docker,
    the assumption is that you have Docker Desktop already installed on your machine.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用 Docker 跟随书中的说明和示例，假设您已经在您的机器上安装了 Docker Desktop。
- en: For Docker, we will provide you instructions in order to have an image up and
    running with PHP and Composer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Docker，我们将提供您必要的说明，以便使用 PHP 和 Composer 运行一个镜像。
- en: With this approach, you will be able to run commands and follow examples the
    same way, regardless of whether you have Docker or want to run PHP and Composer
    natively.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法，您将能够以相同的方式运行命令和遵循示例，无论您是否有 Docker 或想原生运行 PHP 和 Composer。
- en: We will launch commands from the console application (or Terminal Emulator)
    so the expectation is that you are quite familiar with this type of application
    (Terminal, iTerm2, Warp for MacOS, Windows Terminal for Windows, Terminator, xterm,
    GNOME Terminal, Konsole for GNU/Linux, or Alacritty, which is available for all
    operating systems).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从控制台应用程序（或终端模拟器）启动命令，因此预期您非常熟悉此类应用程序（终端、iTerm2、MacOS 的 Warp、Windows 的 Windows
    Terminal、Terminator、xterm、GNOME 终端、GNU/Linux 的 Konsole，或者适用于所有操作系统的 Alacritty）。
- en: Within the terminal emulator, you will need a shell environment, typically Bash
    or ZSH (Z shell). We will use the shell configuration to set some environment
    variables, such as the `PATH` variable. The `PATH` variable specifies the directories
    to be searched to find a command.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端模拟器中，您需要一个 shell 环境，通常是 Bash 或 ZSH（Z shell）。我们将使用 shell 配置来设置一些环境变量，例如 `PATH`
    变量。`PATH` 变量指定了搜索命令的目录。
- en: Source code
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码
- en: 'You can find the source code of the examples used in this chapter in the official
    GitHub repository of this book: [https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch02](https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch02).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的官方 GitHub 仓库中找到本章使用的示例源代码：[https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch02](https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch02)。
- en: Setting up a basic Laravel application
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本的 Laravel 应用程序
- en: 'Our aim in this chapter is to configure Laravel Octane with the RoadRunner
    application server. To do that, we have to install the RoadRunner application
    server. However, before that, we must first create a new Laravel application and
    then add and install the Laravel Octane package. In short, to demonstrate how
    to install RoadRunner, we will do the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是配置 Laravel Octane 与 RoadRunner 应用程序服务器。为此，我们必须安装 RoadRunner 应用程序服务器。然而，在安装之前，我们必须首先创建一个新的
    Laravel 应用程序，然后添加并安装 Laravel Octane 包。简而言之，为了演示如何安装 RoadRunner，我们将执行以下操作：
- en: Create a new Laravel application from scratch.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从头创建一个新的 Laravel 应用程序。
- en: Add the Laravel Octane package to the new Laravel application.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Laravel Octane 包添加到新的 Laravel 应用程序中。
- en: Install Laravel Octane, executing a specific command provided by the Laravel
    Octane package. The command execution will create a basic configuration, which
    is useful when we start with Laravel Octane. We will show how to install Laravel
    Octane in the *Installing Laravel Octane* section later.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Laravel Octane，执行 Laravel Octane 包提供的特定命令。命令执行将创建一个基本配置，这对于我们开始使用 Laravel
    Octane 非常有用。我们将在后面的 *安装 Laravel Octane* 部分展示如何安装 Laravel Octane。
- en: Getting the Laravel installer
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 Laravel 安装程序
- en: 'To install Laravel from scratch, you could use the Laravel installer. To globally
    install the Laravel installer, in your terminal emulator, enter the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要从头开始安装 Laravel，您可以使用 Laravel 安装程序。要全局安装 Laravel 安装程序，在您的终端模拟器中输入以下命令：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once Laravel is installed, be sure that your `PATH` variable includes the directory
    where the global composer packages are stored, typically `.composer/vendor/bin/`
    in your home directory.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Laravel，请确保您的 `PATH` 环境变量包括存储全局 composer 包的目录，通常是在您的主目录中的 `.composer/vendor/bin/`。
- en: 'To make the `PATH` variable persistent and to ensure that it is loaded correctly
    after rebooting your operating system, you can add it to your shell configuration
    file. For example, if you are using Zshell, add this line in your `.``zshrc` file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`PATH`变量持久化并确保在操作系统重启后正确加载，您可以将其添加到您的shell配置文件中。例如，如果您正在使用Zshell，请在您的`.zshrc`文件中添加此行：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To make sure that your shell configuration is reloaded correctly and you are
    using Zshell, enter the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的shell配置正确重新加载并且您正在使用Zshell，请输入以下命令：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you have some doubts, restart the console application (the application you
    are using to launch commands).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有疑问，请重新启动控制台应用程序（您用于启动命令的应用程序）。
- en: 'To check if everything is fine, try to execute the Laravel installer tool with
    the `-V` option via command line:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一切是否正常，请尝试通过命令行使用`-V`选项执行Laravel安装器工具：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you receive an output such as `Laravel Installer 4.2.11`, everything is
    fine; otherwise, you could see an error such as `command not found`. In this case,
    my suggestion is to check the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您收到类似`Laravel Installer 4.2.11`的输出，那么一切正常；否则，您可能会看到类似`command not found`的错误。在这种情况下，我的建议是检查以下内容：
- en: The `laravel` command is present in `~/.composer/vendor/bin/`
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`laravel`命令存在于`~/.composer/vendor/bin/`'
- en: The `laravel` command is executable
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`laravel`命令是可执行的'
- en: The `PATH` variable includes the `~/.``composer/vendor/bin/` directory
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATH`变量包括`~/.composer/vendor/bin/`目录'
- en: 'To check whether the Laravel installer command is present and executable, you
    can check it with the classic `ls` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查Laravel安装器命令是否存在并可执行，您可以使用经典的`ls`命令进行检查：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And to see if the permissions include the `x` char, you will see something like
    `-rwxr-xr-x`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看权限是否包含`x`字符，您将看到类似`-rwxr-xr-x`的输出。
- en: 'If the command exists in the right place without executable permission, you
    can fix it with the `chmod` command, adding executable (`+x`) permission to the
    owner (`u`):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令存在于正确的位置但没有可执行权限，您可以使用`chmod`命令修复它，为所有者（`u`）添加可执行（`+x`）权限：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the command exists and has the right permissions, check if the `PATH` variable
    is correct and includes the `~/.``composer/vendor/bin/` path.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令存在并且具有正确的权限，请检查`PATH`变量是否正确并且包括`~/.composer/vendor/bin/`路径。
- en: If the `PATH` variable doesn’t include the right path, check that you added
    it to the `PATH` variable and if the `PATH` variable includes the right path,
    be sure to have reloaded the shell environment or, at least, restart your terminal
    emulator.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`PATH`变量不包括正确的路径，请检查您是否已将其添加到`PATH`变量中，如果`PATH`变量包括正确的路径，请确保已重新加载shell环境或至少重启您的终端模拟器。
- en: I wanted to spend a few additional words on this type of check. This type of
    check is useful and will continue to be useful as we add new commands. The existence
    of the command, its permissions, and its reachability are checks that can save
    time if we run into problems running a newly installed command.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我想对这种检查多说几句。这种检查很有用，并且随着我们添加新的命令，它将继续有用。命令的存在、其权限和其可达性是可以在遇到运行新安装的命令时节省时间的检查。
- en: Now, let me show you how to install a Laravel application before adding Laravel
    Octane.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我向您展示如何在添加Laravel Octane之前安装Laravel应用程序。
- en: Installing a new Laravel web application from scratch
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从头开始安装新的Laravel Web应用程序
- en: 'To create a new basic Laravel application, we can use the Laravel installer:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的基本Laravel应用程序，我们可以使用Laravel安装器：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you don’t have a Laravel installer, you can use the `composer` command to
    install the Laravel application:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Laravel安装器，您可以使用`composer`命令安装Laravel应用程序：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this basic usage, these commands (`laravel new` and `composer create-project`)
    are pretty similar. They do the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本使用中，这些命令（`laravel new` 和 `composer create-project`）相当相似。它们执行以下操作：
- en: Clone the `laravel/laravel` repository
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆`laravel/laravel`仓库
- en: Create a `.env` file from `.env.example`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`.env.example`创建`.env`文件
- en: Install all dependencies found in `composer.json`
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`composer.json`中找到的所有依赖项
- en: Generate optimized autoload files
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成优化的自动加载文件
- en: Register or discover any new supported packages via the execution of the `php
    artisan` `package:discover` command
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过执行`php artisan package:discover`命令注册或发现任何新的支持包
- en: Publish `laravel-assets` files
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布`laravel-assets`文件
- en: Generate the application key in the `.``env` file
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`.env`文件中生成应用程序密钥
- en: I suggest you use the Laravel command because it has some additional options
    and arguments that allow you to enable some nice features, such as adding Jetstream
    scaffolding, choosing the Livewire stack or Inertia for Jetstream, and enabling
    teams management for Jetstream. All these options, for the goal we currently have,
    are not needed, so for this reason using the first or second command has the same
    result.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你使用 Laravel 命令，因为它有一些额外的选项和参数，允许你启用一些很酷的功能，例如添加 Jetstream 框架，选择 Livewire
    栈或 Inertia 作为 Jetstream，以及启用 Jetstream 的团队管理。所有这些选项，对于我们目前的目标来说都不是必需的，因此出于这个原因，使用第一个或第二个命令的结果是相同的。
- en: So, now you can enter the new `octane-ch2` directory to check your new Laravel
    application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在你可以进入新的 `octane-ch2` 目录来检查你的新 Laravel 应用程序。
- en: 'To launch the internal web server, you can use the `artisan` command provided
    by Laravel:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动内部 Web 服务器，你可以使用 Laravel 提供的 `artisan` 命令：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you open the browser at http://127`.0.0.1:8000` you can see the default home
    page of Laravel.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开浏览器访问 http://127.0.0.1:8000，你可以看到 Laravel 的默认主页。
- en: Now that we have our Laravel application up and running, it’s time to set up
    the RoadRunner application server.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将 Laravel 应用程序启动并运行，是时候设置 RoadRunner 应用服务器了。
- en: Installing RoadRunner
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 RoadRunner
- en: RoadRunner is a PHP application server that is mature and stable, so you can
    use it in your production environment. It is written in the **Go** programming
    language, which means that under the hood, RoadRunner uses goroutines and the
    multi-threading capabilities provided by Go. Thanks to its Go implementation,
    RoadRunner runs on the most common operating systems, such as macOS, Windows,
    Linux, FreeBSD, and ARM.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: RoadRunner 是一个成熟且稳定的 PHP 应用服务器，因此你可以在生产环境中使用它。它是用 **Go** 编程语言编写的，这意味着在底层，RoadRunner
    使用 Go 提供的 goroutines 和多线程功能。由于其 Go 实现，RoadRunner 在最常用的操作系统上运行，如 macOS、Windows、Linux、FreeBSD
    和 ARM。
- en: Thanks again to its Go implementation, RoadRunner is released as a binary, so
    the installation process is very simple.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 再次感谢其 Go 实现版本，RoadRunner 以二进制文件的形式发布，因此安装过程非常简单。
- en: 'RoadRunner is an open source project, so you have access to the source code,
    binaries, and documentation:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: RoadRunner 是一个开源项目，因此你可以访问源代码、二进制文件和文档：
- en: 'The source code: [https://github.com/roadrunner-server/roadrunner](https://github.com/roadrunner-server/roadrunner)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码：[https://github.com/roadrunner-server/roadrunner](https://github.com/roadrunner-server/roadrunner)
- en: 'The binary releases: [https://github.com/roadrunner-server/roadrunner/releases](https://github.com/roadrunner-server/roadrunner/releases)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制发布：[https://github.com/roadrunner-server/roadrunner/releases](https://github.com/roadrunner-server/roadrunner/releases)
- en: 'The main documentation: [https://roadrunner.dev/docs/readme/2.x/en](https://roadrunner.dev/docs/readme/2.x/en)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要文档：[https://roadrunner.dev/docs/readme/2.x/en](https://roadrunner.dev/docs/readme/2.x/en)
- en: We can obtain RoadRunner in more than one way.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过多种方式获取 RoadRunner。
- en: 'Just for starting quickly, I’m going to use the Composer method. The Composer
    approach requires two steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速开始，我将使用 Composer 方法。Composer 方法需要两个步骤：
- en: Install the RoadRunner CLI.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 RoadRunner CLI。
- en: Get RoadRunner binaries via the RoadRunner CLI.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 RoadRunner CLI 获取 RoadRunner 二进制文件。
- en: 'So, as a first step, let me install the RoadRunner CLI, according to the official
    documentation available at [https://roadrunner.dev/docs/intro-install](https://roadrunner.dev/docs/intro-install):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为第一步，让我根据官方文档安装 RoadRunner CLI，官方文档可在 [https://roadrunner.dev/docs/intro-install](https://roadrunner.dev/docs/intro-install)
    找到：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, we are going to add two packages:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们打算添加两个包：
- en: RoadRunner CLI version 2
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RoadRunner CLI 版本 2
- en: The Nyholm implementation of **PSR7**
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nyholm 对 **PSR7** 的实现
- en: Nyholm
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Nyholm
- en: 'Nyholm is an open source PHP package that implements the PSR7 standard. The
    source code is here: [https://github.com/Nyholm/psr7](https://github.com/Nyholm/psr7).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Nyholm 是一个实现 PSR7 标准的开源 PHP 包。源代码在这里：[https://github.com/Nyholm/psr7](https://github.com/Nyholm/psr7)。
- en: 'At the end, the `composer` command adds two lines into the `require` section
    of your `composer.json` file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`composer` 命令将两行添加到你的 `composer.json` 文件的 `require` 部分：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The mentioned, PSR7 is a standard that defines the PHP interfaces for representing
    HTTP messages and URIs. In this way, if you are going to use a library to manage
    HTTP messages and URIs, and the library implements a PSR7 standard, you know that
    you have some methods with a standardized signature to manage the request. For
    example, you know that you have `getMethod()` to retrieve the HTTP method, and
    the value is a string (because is defined by the standard).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 提到的 PSR7 是一个定义 PHP 接口以表示 HTTP 消息和 URI 的标准。这样，如果你打算使用一个库来管理 HTTP 消息和 URI，并且该库实现了
    PSR7 标准，你就知道你有一些具有标准化签名的标准方法来管理请求。例如，你知道你有 `getMethod()` 来获取 HTTP 方法，其值是一个字符串（因为它是根据标准定义的）。
- en: After installing the RoadRunner CLI via Composer, you will find the `rr` executable
    in the `vendor/bin/` directory.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Composer 安装 RoadRunner CLI 后，你将在 `vendor/bin/` 目录中找到 `rr` 可执行文件。
- en: 'To check that it’s there, use this command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查它是否存在，请使用此命令：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You will see a file, more or less 3 KB, with executable permissions (denoted
    by the `x` symbol).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个文件，大约 3 KB，具有可执行权限（由 `x` 符号表示）。
- en: 'This executable is the RoadRunner CLI, which allows you to install the RoadRunner
    application server executable. To obtain the executable, you can execute the RoadRunner
    CLI with the `get-binary` option:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可执行文件是 RoadRunner CLI，它允许你安装 RoadRunner 应用程序服务器可执行文件。要获取可执行文件，你可以使用 `get-binary`
    选项执行 RoadRunner CLI：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output generated by the command execution will show the version of the
    package, the operating system, and the architecture as shown in the figure below:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行生成的输出将显示软件包版本、操作系统和架构，如图下所示：
- en: '![Figure 2.1: Getting the RoadRunner executable](img/Figure_2.1_B17728.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1：获取 RoadRunner 可执行文件](img/Figure_2.1_B17728.jpg)'
- en: 'Figure 2.1: Getting the RoadRunner executable'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：获取 RoadRunner 可执行文件
- en: You might have some confusion in that the RoadRunner CLI executable is called
    `rr`, like the RoadRunner executable. What you should know is that the RoadRunner
    CLI is stored in the `vendor/bin` directory, while the RoadRunner application
    server executable is stored in the project root directory. Also, the CLI is about
    3 KB, while the application server is about 50 MB.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对此有些混淆，因为 RoadRunner CLI 可执行文件被命名为 `rr`，就像 RoadRunner 可执行文件一样。你应该知道的是，RoadRunner
    CLI 存储在 `vendor/bin` 目录中，而 RoadRunner 应用程序服务器可执行文件存储在项目根目录中。此外，CLI 大约 3 KB，而应用程序服务器大约
    50 MB。
- en: '![Figure 2.2: The two rr executables, the CLI and the application server](img/Figure_2.2_B17728.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2：两个 rr 可执行文件，CLI 和应用程序服务器](img/Figure_2.2_B17728.jpg)'
- en: 'Figure 2.2: The two rr executables, the CLI and the application server'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：两个 rr 可执行文件，CLI 和应用程序服务器
- en: 'In addition, you can run the two executables with the option to show the version:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以使用显示版本选项运行两个可执行文件：
- en: '![Figure 2.3: The rr versions](img/Figure_2.3_B17728.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3：rr 版本](img/Figure_2.3_B17728.jpg)'
- en: 'Figure 2.3: The rr versions'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：rr 版本
- en: Now that we have installed the `rr` executables (RoadRunner), we can start to
    use it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 `rr` 可执行文件（RoadRunner），我们可以开始使用它了。
- en: Executing the RoadRunner application server (without Octane)
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行 RoadRunner 应用程序服务器（不使用 Octane）
- en: 'To execute the RoadRunner application server with a basic example, we need
    to do the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用基本示例执行 RoadRunner 应用程序服务器，我们需要做以下事情：
- en: Create a configuration file
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个配置文件
- en: Create a PHP script called by the application server once an HTTP request hits
    the application server
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个应用程序服务器在 HTTP 请求击中应用程序服务器时调用的 PHP 脚本
- en: Launch the application server
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动应用程序服务器
- en: The configuration file for RoadRunner by default is `.rr.yaml`. It has a lot
    of configuration directives and parameters.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，RoadRunner 的配置文件是 `.rr.yaml`。它包含许多配置指令和参数。
- en: 'A minimal configuration file requires a few things:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最小配置文件需要一些东西：
- en: The command to launch for each worker instance (`server.command`)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个工作实例启动的命令 (`server.command`)
- en: The address and port to bind and listen for new HTTP connections (`http.address`)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定和监听新 HTTP 连接的地址和端口 (`http.address`)
- en: The number of workers to launch (`http.pool.num_workers`)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要启动的工作进程数量 (`http.pool.num_workers`)
- en: The level of the log (`logs.level`)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志级别 (`logs.level`)
- en: 'An example of a configuration file with the preceding considerations is shown
    here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了考虑上述因素的一个配置文件示例：
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With this configuration file, `test-rr.php` is the script to launch for workers,
    `8080` is the port to listen to connections, with `2` workers and `info` for the
    log levels.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置文件，`test-rr.php` 是为工作进程启动的脚本，`8080` 是监听连接的端口，使用 `2` 个工作进程和 `info` 作为日志级别。
- en: 'The script file for implementing the logic of the workers is `test-rr.php`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 实现工作者逻辑的脚本文件是`test-rr.php`：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The script does the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行以下操作：
- en: Includes `vendor/autoload.php`
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含`vendor/autoload.php`
- en: Instances the `worker` object with classes provided by RoadRunner (`RoadRunner\Http\PSR7Worker`)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RoadRunner提供的类实例化`worker`对象（`RoadRunner\Http\PSR7Worker`）
- en: Generates a unique ID for showing how the traffic is balanced and delegated
    to the two workers (`$id =` `uniqid('', true)`)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为显示流量如何平衡和委派给两个工作者生成一个唯一的ID（`$id = uniqid('', true)`）
- en: Waits for a new connection (`$worker->waitRequest()`)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待新的连接（`$worker->waitRequest()`）
- en: Generates a new response (`$worker->respond()`) when a new connection request
    arrives
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新的连接请求到达时，生成新的响应（`$worker->respond()`）
- en: 'With the configuration file and the preceding worker script, you can launch
    the application server with the `serve` option:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置文件和前面的工作者脚本，您可以使用`serve`选项启动应用程序服务器：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With this configuration, you will see one server started and two workers started
    by the server.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置，您将看到由服务器启动的一个服务器和两个工作者。
- en: Now you can hit the serve via the `curl` command. The `curl` command is a command
    that sends an HTTP request to a specific URL.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过`curl`命令来启动服务。`curl`命令是一种向特定URL发送HTTP请求的命令。
- en: 'In another instance for the terminal emulator (or another tab), launch the
    following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端模拟器（或另一个标签页）的实例中，启动以下命令：
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By executing `curl` four times, we will send four different requests to the
    application server to port `8080`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行`curl`四次，我们将向端口`8080`的应用程序服务器发送四个不同的请求。
- en: 'On the terminal emulator, if you launch the application server, you will see
    the log of the application server:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端模拟器中，如果您启动应用程序服务器，您将看到应用程序服务器的日志：
- en: '![Figure 2.4: The INFO log of the application server](img/Figure_2.4_B17728.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4：应用程序服务器的INFO日志](img/Figure_2.4_B17728.jpg)'
- en: 'Figure 2.4: The INFO log of the application server'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：应用程序服务器的INFO日志
- en: The most relevant thing is that after the first two requests, the elapsed time
    is reduced by at least an order of magnitude.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，在第一次请求后的前两次请求中，经过的时间至少减少了十倍。
- en: If you look at the `elapsed` value, you will see that the first request takes
    20 milliseconds to be executed, while subsequent requests take approximately some
    hundred microseconds (1 millisecond is equivalent to 1,000 microseconds).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看`elapsed`值，您将看到第一次请求需要20毫秒来执行，而后续请求大约需要几百微秒（1毫秒等于1,000微秒）。
- en: The response time in milliseconds (the absolute value) probably depends on multiple
    factors (load, resources, memory, CPU). Take a look at the relative value and
    how much the response time decreases in the next requests. The response times
    are dramatically reduced from a few milliseconds to a few microseconds.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 响应时间（以毫秒计的绝对值）可能取决于多个因素（负载、资源、内存、CPU）。请查看相对值以及响应时间在后续请求中的减少程度。响应时间从几毫秒显著减少到几微秒。
- en: So, we are saying that thanks to the architecture based on workers implemented
    with RoadRunner, we can improve the performance, especially for requests after
    the first request.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们说，得益于基于RoadRunner实现的工作者架构，我们可以提高性能，尤其是在第一次请求之后的请求中。
- en: But how do we include and use RoadRunner in our Laravel application?
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何在Laravel应用程序中包含和使用RoadRunner呢？
- en: The preceding example uses objects and methods shipped by RoadRunner in a pure
    PHP environment. Now we have to figure out how all of these features/improvements
    could be included in Laravel, especially for all things related to the bootstrap
    of the framework.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例在纯PHP环境中使用了RoadRunner提供的对象和方法。现在我们必须弄清楚如何将这些功能/改进包括在Laravel中，特别是与框架启动相关的一切。
- en: This is the goal of Octane. It allows us to use the RoadRunner features while
    hiding the complexity of the integration, the bootstrap process, and the configuration.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Octane的目标。它允许我们在隐藏集成复杂性、启动过程和配置的同时使用RoadRunner的功能。
- en: Installing Laravel Octane
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Laravel Octane
- en: 'The script file (`test-rr.php`) and the configuration file (`.rr.yaml`) were
    created so that the dynamics of the operation of RoadRunner can be understood.
    Now, let’s focus on the installation of Laravel Octane. Let’s pick up the discussion
    from the installation of the Laravel application via the `laravel new` command
    and the installation of the RoadRunner executable by running `composer require`
    and then running the `rr get-binaries`. Let me recap quickly:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了脚本文件（`test-rr.php`）和配置文件（`.rr.yaml`），以便理解RoadRunner的操作动态。现在，让我们专注于Laravel
    Octane的安装。让我们从通过`laravel new`命令安装Laravel应用程序和通过运行`composer require`然后运行`rr get-binaries`来安装RoadRunner可执行文件继续讨论。让我简要回顾一下：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now you can install Laravel Octane:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以安装Laravel Octane：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then you can correctly configure Laravel Octane with the `octane:install` command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用`octane:install`命令正确配置Laravel Octane：
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With the latest command, you have to decide whether to use RoadRunner or Swoole.
    For the purpose of this chapter, select RoadRunner. We will cover Swoole in the
    next chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最新命令，您必须决定是使用RoadRunner还是Swoole。为了本章的目的，选择RoadRunner。我们将在下一章介绍Swoole。
- en: 'The tasks performed by `octane:install` are as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`octane:install`执行的任务如下：'
- en: 'Avoiding commit/push on Git repository RoadRunner files: check and eventually
    fix the `gitignore` file that includes `rr` (the RoadRunner executables) and `.rr.yaml`
    (the RoadRunner configuration file).'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在Git仓库中提交/push RoadRunner文件：检查并最终修复包含`rr`（RoadRunner可执行文件）和`.rr.yaml`（RoadRunner配置文件）的`gitignore`文件。
- en: Ensuring the RoadRunner package is installed in the project. If not, it executes
    the `composer` `require` command.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保项目中已安装RoadRunner包。如果没有，它将执行`composer require`命令。
- en: Ensuring the RoadRunner binary is installed into the project. If not, it executes
    `./vendor/bin/rr get-binary` to download the RoadRunner application server.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保RoadRunner二进制文件已安装到项目中。如果没有，它将执行`./vendor/bin/rr get-binary`以下载RoadRunner应用程序服务器。
- en: Ensuring the RoadRunner binary is executable (`chmod 755`).
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保RoadRunner二进制文件可执行（`chmod 755`）。
- en: Checking some requirements, such as version 2.x, if the RoadRunner application
    server has already been installed.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查一些要求，例如版本2.x，如果RoadRunner应用程序服务器已经安装。
- en: Setting the `OCTANE_SERVER` environment variable in the `.env` file (if it’s
    not already present).
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`.env`文件中设置`OCTANE_SERVER`环境变量（如果尚未存在）。
- en: The last `octane:install` command will create a `config/octane.php` file and
    will also add a new configuration key to the `.env` file. The new key is named
    `OCTANE_SERVER` and the value is set to `roadrunner`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`octane:install`命令将创建一个`config/octane.php`文件，并将一个新的配置键添加到`.env`文件中。新的键名为`OCTANE_SERVER`，其值设置为`roadrunner`。
- en: 'This value is used in the `config/octane.php` file:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此值在`config/octane.php`文件中使用：
- en: '[PRE20]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So, with the environment variable, you can control which application server
    you want to use.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过环境变量，您可以控制您想要使用哪个应用程序服务器。
- en: Now that we have installed Laravel Octane, it’s time to launch it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Laravel Octane，是时候启动它了。
- en: Launching Laravel Octane
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Laravel Octane
- en: 'To launch Laravel Octane, run the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Laravel Octane，请运行以下命令：
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Once Laravel Octane is started you can visit `http://127.0.0.1:8000` in your
    browser.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Laravel Octane启动，您可以在浏览器中访问`http://127.0.0.1:8000`。
- en: Your browser will be shown the classic Laravel welcome page. There are no visual
    differences in the welcome pages of Laravel and Laravel Octane. The big difference
    is the way your application is served via HTTP.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器将显示经典的Laravel欢迎页面。Laravel和Laravel Octane的欢迎页面在视觉上没有差异。最大的区别是您的应用程序通过HTTP服务的方式。
- en: 'You can control the execution of Octane with some parameters:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用一些参数来控制Octane的执行：
- en: '`--host`: Default `127.0.0.1`, the IP address the server should bind to'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--host`：默认`127.0.0.1`，服务器应绑定的IP地址'
- en: '`--port`: Default `8000`, the port the server should be available on'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--port`：默认`8000`，服务器应可用的端口'
- en: '`--workers`: Default auto, the number of workers that should be available to
    handle requests'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--workers`：默认自动，应可用于处理请求的工作进程数量'
- en: '`--max-requests`: Default `500`, the number of requests to process before reloading
    the server'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--max-requests`：默认`500`，在重新加载服务器之前要处理的请求数量'
- en: 'For example, you can launch Octane with just two workers:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用两个工作进程启动Octane：
- en: '[PRE22]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So now, open the page at `http://localhost:8000` more than twice (two is the
    number of workers). You can open the page via your browser or by launching `curl`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在，在`http://localhost:8000`上打开页面超过两次（两个是工作进程的数量）。您可以通过浏览器打开页面或通过启动`curl`：
- en: '[PRE23]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can see something that we already know because of the previous tests with
    RoadRunner installed without Laravel. The first two requests (two is the number
    of workers) are slower than the next requests.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到一些我们已知的内容，因为之前已经测试了安装了 Laravel 的 RoadRunner。前两次请求（工作进程的数量为两个）比后续请求慢。
- en: 'The following output is related to the log shown by the Laravel Octane server:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出与 Laravel Octane 服务器显示的日志相关：
- en: '[PRE24]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you launch the server, define the maximum number of requests to process
    (for each worker) before starting the server with the `max-requests` parameter:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要启动服务器，请定义在启动服务器之前要处理的请求的最大数量（对于每个工作进程）：
- en: '[PRE25]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can see a similar output but after six requests (a maximum of three requests
    for two workers), you will see that the message worker has stopped and the response
    after the stopped worker takes the same amount of time as the first two requests:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到类似的输出，但经过六次请求（两个工作进程的最大请求次数为三次），您将看到消息工作进程已停止，并且停止工作进程后的响应时间与第一次和第二次请求相同：
- en: '[PRE26]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Why is restarting the server important? To ensure we prevent any memory leak
    issues due to the long life cycle of the objects (the server and the workers),
    it is a common practice to reset the status. If you are not going to define the
    `max-requests` parameter in the command line, the default is set automatically
    by Laravel Octane to `500`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么重启服务器很重要？为了确保我们防止由于对象（服务器和工作进程）的长期生命周期导致的任何内存泄漏问题，重置状态是一种常见的做法。如果您不打算在命令行中定义
    `max-requests` 参数，Laravel Octane 会自动将其设置为 `500`。
- en: In the classic web server scenario (without Laravel Octane), the life cycles
    of all objects related to your application, but especially to the objects automatically
    instantiated and managed by the framework, are confined to each individual request.
    In every single request, all the objects necessary for the framework to work are
    instantiated, and the objects are destroyed when the response is sent back to
    the client. This also explains and helps you understand why the response times
    in a classic framework with a web server are longer than the response times of
    an already initialized worker.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典的 Web 服务器场景（没有 Laravel Octane）中，与您的应用程序相关的所有对象的生命周期，尤其是框架自动实例化和管理的对象的生命周期，都被限制在每个单独的请求中。在每次请求中，框架工作所需的所有对象都会被实例化，并在将响应发送回客户端时销毁对象。这也解释了为什么在具有
    Web 服务器的经典框架中，响应时间比已初始化的工作者的响应时间长。
- en: Now that Laravel Octane is launched, we can look at its configuration.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Laravel Octane 已启动，我们可以查看其配置。
- en: Laravel Octane and RoadRunner advanced configuration
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel Octane 和 RoadRunner 高级配置
- en: As mentioned in the previous section, we can control some parameters during
    the launch of Laravel Octane. This is because you want to change some options,
    such as the number of workers or the port and, like in the next examples, if you
    want to activate the HTTPS protocol.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以在启动 Laravel Octane 期间控制一些参数。这是因为您想更改一些选项，例如工作进程的数量或端口，以及，如以下示例所示，如果您想激活
    HTTPS 协议。
- en: Under the hood, Octane collects parameters from the command line and some Octane
    configuration and starts the RoadRunner process (it starts the `rr` command).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，Octane 从命令行收集参数和一些 Octane 配置，并启动 RoadRunner 进程（它启动了 `rr` 命令）。
- en: 'In the Octane source code, there is a file called `StartRoadRunnerCommand.php`
    that implements a Laravel artisan command with the following code:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Octane 源代码中，有一个名为 `StartRoadRunnerCommand.php` 的文件，该文件实现了一个 Laravel artisan
    命令，其代码如下：
- en: '[PRE27]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Looking at this source code helps you understand which parameters are used to
    launch the RoadRunner executable.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 查看此源代码有助于您了解用于启动 RoadRunner 可执行文件的参数。
- en: With the `-c` option (`$this->configPath()`), an additional configuration file
    is loaded. This means that if there are no basic options managed by Octane that
    match your expectations, you can define them in the `.rr.yaml` configuration file.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-c` 选项（`$this->configPath()`），将加载一个额外的配置文件。这意味着如果 Octane 管理的基本选项与您的期望不匹配，您可以在
    `.rr.yaml` 配置文件中定义它们。
- en: The basic parameters managed by Octane (shown in the previous section) are hostname,
    port, worker count, max requests, max execution time for supervisor, the HTTP
    middleware, and the log level.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Octane 管理的基本参数（如前所述）包括主机名、端口、工作进程数量、最大请求次数、管理器的最大执行时间、HTTP 中间件和日志级别。
- en: The RoadRunner configuration file allows you to load special and advanced configurations.
    A classic example is the option to allow local RoadRunner instances to listen
    to and receive HTTPS requests.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: RoadRunner配置文件允许你加载特殊和高级配置。一个经典的例子是允许本地RoadRunner实例监听并接收HTTPS请求。
- en: Why do you need to serve HTTPS locally in the development environment? You might
    need to activate the HTTPS protocol because some browser features are available
    only when the page is served via HTTPS or localhost. These features are geolocation,
    device motion, device orientation, audio recording, notifications, and so on.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么需要在开发环境中本地提供HTTPS？你可能需要激活HTTPS协议，因为一些浏览器功能仅在页面通过HTTPS或localhost提供服务时才可用。这些功能包括地理位置、设备运动、设备方向、音频录制、通知等。
- en: Typically, during local development, we are used to serving pages via localhost.
    In this context, there is no need to serve the traffic via HTTPS. However, if
    we wanted to expose pages to the local network so that we could test our web application
    via a mobile device connected to the local network, we would have to make sure
    that the service is reachable via a valid local network address and thus localhost
    is not sufficient. In this case (for those special browser features), HTTPS is
    needed.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在本地开发过程中，我们习惯于通过localhost提供服务页面。在这种情况下，没有必要通过HTTPS提供服务。然而，如果我们想将页面暴露给本地网络，以便通过连接到本地网络的移动设备测试我们的Web应用程序，我们必须确保服务可以通过有效的本地网络地址访问，因此localhost是不够的。在这种情况下（对于那些特殊的浏览器功能），需要HTTPS。
- en: Or another scenario, wherein your page served locally is included in a web page
    (via iFrame or as assets) and the host page is served via HTTPS. In this case,
    including assets or including a page delivered by HTTP in an HTTPS context raises
    a security exception in the browser.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 或者另一种场景，即你本地提供的页面包含在网页中（通过iFrame或作为资产），而主页面是通过HTTPS提供的。在这种情况下，在HTTPS环境中包含资产或包含通过HTTP提供的页面会在浏览器中引发安全异常。
- en: 'If you want to configure Octane to serve HTTPS requests, you have to do the
    following:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要配置Octane以服务HTTPS请求，你必须执行以下操作：
- en: Install a tool such as **mkcert** that allows you to create and manage certificates.
    Because of the design and implementation of HTTPS, the protocol requires public/private
    certificates to work.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个允许你创建和管理证书的工具，例如**mkcert**。由于HTTPS的设计和实现，该协议需要公钥/私钥证书才能工作。
- en: Create certificates for localhost or addresses you want.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为localhost或你想要的地址创建证书。
- en: See the location of the CA certificate and key storage location.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看CA证书和密钥存储位置。
- en: 'To better understand what is needed, let’s look at RoadRunner’s configuration
    for HTTPS:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解需要什么，让我们看看RoadRunner的HTTPS配置：
- en: '[PRE28]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The two mandatory fiels and one optional file are as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 两个必填字段和一个可选文件如下：
- en: '`Cert`: The cert file'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cert`：证书文件'
- en: '`Key`: The cert key file'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Key`：证书密钥文件'
- en: '`Root_ca`: The root certificate authority file'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Root_ca`：根证书颁发机构文件'
- en: With the first two files, HTTPS works but a warning is raised by your browser
    (there’s not a valid certificate, because the certificate is self-signed). Filling
    only the two first parameters, the certificate is evaluated as self-signed and,
    typically, browsers tend not to consider such certificates trustable.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前两个文件时，HTTPS可以工作，但你的浏览器会发出警告（因为没有有效的证书，因为证书是自签名的）。只填写前两个参数，证书会被评估为自签名的，通常情况下，浏览器不会认为这样的证书是可信的。
- en: With the third file, the browser allows you to browse via HTTPS without any
    warnings (the certificate is valid).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第三个文件时，浏览器允许你通过HTTPS浏览而没有任何警告（证书是有效的）。
- en: So, first, you have to install **mkcert**. The Git repository of mkcert is [https://github.com/FiloSottile/mkcert](https://github.com/FiloSottile/mkcert).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，你必须安装**mkcert**。mkcert的Git仓库是[https://github.com/FiloSottile/mkcert](https://github.com/FiloSottile/mkcert)。
- en: mkcert is an open source tool available for all platforms.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: mkcert是一个适用于所有平台的开源工具。
- en: 'The instructions to install mkcert and create certificates for macOS are as
    follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 安装mkcert并为macOS创建证书的说明如下：
- en: '[PRE29]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you are using Windows, you could use the Chocolatey package manager ([https://chocolatey.org/](https://chocolatey.org/)
    ) and use the following command:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Windows，可以使用Chocolatey软件包管理器（[https://chocolatey.org/](https://chocolatey.org/)）并使用以下命令：
- en: '[PRE30]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For GNU/Linux, you can use the package manager provided by your distribution.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对于GNU/Linux，你可以使用你发行版提供的软件包管理器。
- en: 'Now you have two new files in the project directory: `localhost-key.pem` and
    `localhost.pem`.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，项目目录中有两个新文件：`localhost-key.pem`和`localhost.pem`。
- en: Note
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: I strongly recommend listing these two files in the `.gitignore` file prevent
    them from being pushed into your Git repository (if it is used).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议将这些两个文件列入 `.gitignore` 文件中，以防止它们被推送到你的 Git 仓库（如果使用的话）。
- en: You can use the first one in your `.rr.yaml` file for the `key` parameter and
    the second one for the `cert` parameter.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的 `.rr.yaml` 文件中使用第一个作为 `key` 参数，第二个作为 `cert` 参数。
- en: 'To fill the `root_ca` parameter, you have to see where CA files are stored
    via the `mkcert` command (with the `CAROOT` option):'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要填充 `root_ca` 参数，你必须通过 `mkcert` 命令（使用 `CAROOT` 选项）查看 CA 文件存储的位置：
- en: '[PRE31]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This command will show you the directory where the CA files are stored.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将显示存储 CA 文件的位置。
- en: 'To see the name of CA files, run the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 CA 文件名，请运行以下命令：
- en: '[PRE32]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can fill the `root_ca` parameter with the full path of the `rootCA.pem`
    file.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用 `rootCA.pem` 文件的完整路径填充 `root_ca` 参数。
- en: Note
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Firefox and you are still getting the self-signed certificate
    warning, install `certutil` (with Homebrew, `certutil` is included in the `nss`
    package, so execute `brew install nss`) and then execute `mkcert -install` again
    (and restart the Firefox browser).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Firefox，并且仍然收到自签名证书警告，请安装 `certutil`（使用 Homebrew，`certutil` 包含在 `nss`
    包中，因此执行 `brew install nss`），然后再次执行 `mkcert -install`（并重新启动 Firefox 浏览器）。
- en: 'Now you can start Octane with the following:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用以下命令启动 Octane：
- en: '[PRE33]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Open your browser at the URL defined in the `address` parameter. According
    to the parameters used in the last example (the RoadRunner configuration in the
    `.rr.yaml` file), you should open your browser and open the page at this URL:
    `https://127.0.0.1:8893`. (note that `https://` is the protocol instead of `http://`)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `address` 参数定义的 URL 上打开你的浏览器。根据最后一个示例中使用的参数（`.rr.yaml` 文件中的 RoadRunner 配置），你应该打开浏览器并打开此
    URL：`https://127.0.0.1:8893`。（注意 `https://` 是协议而不是 `http://`）
- en: So, now you are familiar with installing RoadRunner with Laravel Octane, starting
    the Octane server, and accessing the advanced configuration.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在你已经熟悉了如何使用 Laravel Octane 安装 RoadRunner，启动 Octane 服务器，以及访问高级配置。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the installation and configuration of Laravel Octane
    with the RoadRunner application server. We took a look at the benefit we get from
    the usage of RoadRunner and how to enable advanced features such as the HTTPS
    protocol.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用 RoadRunner 应用程序服务器安装和配置 Laravel Octane。我们查看了我们从使用 RoadRunner 获得的好处以及如何启用高级功能，如
    HTTPS 协议。
- en: In the next chapter, we will see how to do the same things with Swoole. We will
    see the additional features Swoole has, compared with RoadRunner, and in [*Chapter
    4*](B17728_04.xhtml#_idTextAnchor065), *Building a Laravel Octane Application*,
    we will start to look at the code for the web application using the Octane service,
    which is now up and running.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用 Swoole 做同样的事情。我们将看到 Swoole 相比 RoadRunner 的额外功能，并在 [*第 4 章*](B17728_04.xhtml#_idTextAnchor065)，*构建
    Laravel Octane 应用程序* 中，我们将开始查看使用 Octane 服务运行的 Web 应用程序的代码，该服务现在正在运行。
