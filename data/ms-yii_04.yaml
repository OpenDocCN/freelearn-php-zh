- en: Chapter 4. Active Record, Models, and Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：Active Record、模型和表单
- en: Like many modern web frameworks, Yii2 comes with several powerful classes to
    represent data both in and out of our database. These classes enable us to abstract
    our data management code away from DAO and Query Builder and into an easy-to-use
    programmatic interface. In this chapter, we'll cover the use and implementation
    of Active Record and learn how to create data models and custom forms. We'll also
    cover how to configure a powerful code generation tool called **Gii** to automate
    the creation of Active Record models and forms.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多现代Web框架一样，Yii2自带了一些强大的类来表示数据库内外部的数据。这些类使我们能够将数据管理代码从DAO和查询构建器中抽象出来，进入一个易于使用的程序接口。在本章中，我们将介绍Active
    Record的使用和实现，学习如何创建数据模型和自定义表单。我们还将介绍如何配置一个名为**Gii**的强大代码生成工具，以自动化Active Record模型和表单的创建。
- en: Configuring Gii
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Gii
- en: While Active Record models and forms can be generated by hand, in most cases,
    we'll want to automate the creation of this code. To achieve this, Yii2 provides
    a code generation tool called Gii, which can be executed both from the command
    line and from a web interface in order to create Active Record models that work
    with our database structure and forms that work with both our base models and
    Active Record models.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Active Record模型和表单可以手动生成，但在大多数情况下，我们希望自动化这一代码的创建。为了实现这一点，Yii2提供了一个名为Gii的代码生成工具，它可以从命令行和Web界面执行，以创建与我们的数据库结构兼容的Active
    Record模型以及与我们的基础模型和Active Record模型兼容的表单。
- en: 'Unlike Yii1, Gii does not come prebundled with Yii2\. In Yii2, nearly every
    module is available as a separate Composer package, which can be installed from
    the command-line interface. Consequently, we must use Composer to include Gii
    in our application. Since Gii is available as a composer package, we can include
    it in our application by running the following command from our command line:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与Yii1不同，Gii在Yii2中不是预打包的。在Yii2中，几乎每个模块都可以作为一个独立的Composer包提供，可以从命令行界面进行安装。因此，我们必须使用Composer将Gii包含到我们的应用程序中。由于Gii作为一个Composer包提供，我们可以通过在命令行中运行以下命令来将其包含到我们的应用程序中：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Configuring Gii](img/00021.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![配置Gii](img/00021.jpeg)'
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since Gii is a development tool and has the ability to write new code to our
    application, we should use the `--dev` flag so that Composer adds it to the `require-dev`
    section of our `composer.json` file. Typically, during our deployment process,
    we'll use the `--no-dev` flag to ensure that development packages are not deployed
    to our production environment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Gii是一个开发工具，并且具有向我们的应用程序写入新代码的能力，因此我们应该使用`--dev`标志，以便Composer将其添加到`composer.json`文件的`require-dev`部分。通常，在我们的部署过程中，我们将使用`--no-dev`标志，以确保开发包不会被部署到我们的生产环境中。
- en: With Gii installed, we now need to configure it to work with both the Yii2 console
    and within our web browser.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Gii后，我们现在需要配置它，使其既能与Yii2控制台协同工作，也能在我们的Web浏览器中运行。
- en: Gii for web applications
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gii用于Web应用程序
- en: 'To enable the web interface for Gii, we''ll need to specify a `module` section
    within our `config/web.php` configuration file and bootstrap the Gii module so
    that it loads properly:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用Gii的Web界面，我们需要在`config/web.php`配置文件中的`module`部分指定，并引导Gii模块，以确保它正确加载：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: By default, Gii is only available on the loopback interface of your machine.
    If you're using a remote development server or a virtual machine, you'll need
    to either whitelist your host IP within the `allowedIPs` block or set the `allowedIPs`
    block to the wildcard character `*` in order to grant your computer access to
    Gii.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Gii仅在您的机器的loopback接口上可用。如果您正在使用远程开发服务器或虚拟机，您需要将您的宿主IP地址添加到`allowedIPs`块中，或者将`allowedIPs`块设置为通配符字符`*`，以便授予您的计算机访问Gii的权限。
- en: While this basic configuration will properly load the Gii module, it doesn't
    follow our convention of being aware of our environment. For instance, if we went
    to production with this configuration and deployed it with `composer install --no-dev`,
    as described earlier, our application would crash because Composer would not have
    installed the Gii module in our vendor folder.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个基本配置可以正确加载Gii模块，但它并不遵循我们关于环境感知的约定。例如，如果我们带着这个配置进入生产环境，并使用前面描述的`composer
    install --no-dev`进行部署，那么我们的应用程序将会崩溃，因为Composer没有在我们的vendor文件夹中安装Gii模块。
- en: 'Fortunately, since we previously defined our `APPLICATION_ENV` constant in
    our bootstrap file rather than returning a static array containing our configuration
    file, we can store our configuration as a variable and conditionally modify it
    to include the Gii module depending upon which environment we are working in:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，因为我们之前在我们的引导文件中定义了 `APPLICATION_ENV` 常量而不是返回包含我们的配置文件的静态数组，我们可以将配置存储为变量，并根据我们正在工作的环境有条件地修改它以包含
    Gii 模块：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'As an alternative to `APPLICATION_ENV`, you can conditionally load Gii using
    the `YII_ENV_DEV` constant, which is typically defined in your bootstrap file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 `APPLICATION_ENV` 的替代方案，您可以使用通常在您的引导文件中定义的 `YII_ENV_DEV` 常量有条件地加载 Gii：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For our configuration files, the use of either constant is appropriate. However,
    most developers find that allowing their web server or command line to define
    the `APPLICATION_ENV` constant requires less maintenance than manually managing
    the `YII_ENV_DEV` constant.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的配置文件，使用任一常量都是合适的。然而，大多数开发者发现，允许他们的 Web 服务器或命令行定义 `APPLICATION_ENV` 常量比手动管理
    `YII_ENV_DEV` 常量需要更少的维护。
- en: Gii can now be accessed by navigating our web browser to our application path
    and changing the URI to `/index.php?r=gii`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过在 Web 浏览器中导航到我们的应用程序路径并将 URI 更改为 `/index.php?r=gii` 来访问 Gii。
- en: '![Gii for web applications](img/00022.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Web 应用的 Gii](img/00022.jpeg)'
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you have already enabled pretty URLs for your application, Gii can be accessed
    by navigating to the `/gii` endpoint.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经为您的应用程序启用了美观的 URL，可以通过导航到 `/gii` 端点来访问 Gii。
- en: Gii for console applications
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制台应用的 Gii
- en: Unlike Yii1, Gii for Yii2 provides a new interface to work with Gii on the command
    line. With Yii2, we can now generate the source code for Active Record models,
    forms, and even extensions all from our command-line interface.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Yii1 不同，Yii2 的 Gii 提供了一个新的命令行界面来与 Gii 一起工作。在 Yii2 中，我们现在可以从命令行界面生成活动记录模型、表单甚至扩展的源代码。
- en: 'The simplest way to enable Gii for our console applications is to modify our
    `config/console.php` file to include the Gii module within the `module` section
    of our configuration file and then bootstrap the Gii module itself, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Gii 的最简单方法是将我们的 `config/console.php` 文件修改为在配置文件的 `module` 部分包含 Gii 模块，然后启动
    Gii 模块本身，如下所示：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Like our web application, this basic configuration doesn''t enable our application
    function properly in every environment. We can reconfigure our `config/console.php`
    file in the same manner as our web configuration file in order to ensure that
    the Gii module is only loaded in our development environment:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的 Web 应用程序一样，这种基本配置并不能确保我们的应用程序在所有环境中都能正常工作。我们可以以与我们的 Web 配置文件相同的方式重新配置我们的
    `config/console.php` 文件，以确保 Gii 模块仅在开发环境中加载：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As shown in the previous code block, the `module` section of our configuration
    file can be loaded using a shorter syntax if we don''t need to register additional
    options with our module, which is generally the preferred way to load modules:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个代码块所示，如果不需要在我们的模块中注册其他选项，我们可以使用更短的语法来加载配置文件的 `module` 部分，这通常是加载模块的首选方式：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With our console environment configured, we can now run Gii from the command
    line by invoking the help command within the `./yii` command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置我们的控制台环境后，现在我们可以通过在 `./yii` 命令中调用帮助命令来从命令行运行 Gii：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Gii for console applications](img/00023.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![控制台应用的 Gii](img/00023.jpeg)'
- en: With our console application configured to use Gii, we can now start using the
    Gii tool to create code. As we move through the rest of the chapter, we'll cover
    how to use Gii from the web interface as well as the console interface.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置我们的控制台应用程序使用 Gii 后，我们现在可以使用 Gii 工具来创建代码。在我们继续本章的其余部分时，我们将介绍如何从 Web 界面以及控制台界面使用
    Gii。
- en: Active Record
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动记录
- en: One of the most important tasks when building rich web applications is ensuring
    that we properly model and represent our data in code. From a simple blog site
    to an application as big as Twitter, data modeling and representation are vital
    to ensuring that our application is easy to work with and can grow as required.
    To help us model our data, Yii2 implements the Active Record pattern, also known
    as Active Record within the `yii/db/ActiveRecord` class.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建丰富的 Web 应用程序时，最重要的任务之一是确保我们在代码中正确地建模和表示我们的数据。从简单的博客网站到像 Twitter 这样的大型应用程序，数据建模和表示对于确保我们的应用程序易于使用并且可以按需扩展至关重要。为了帮助我们建模数据，Yii2
    实现了活动记录模式，也称为 `yii/db/ActiveRecord` 类中的活动记录。
- en: The Active Record pattern
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动记录模式
- en: Named by Martin Fowler in his 2003 book *Patterns of Enterprise Application
    Architecture*, the Active Record pattern is an **object-relational mapping** (**ORM**)
    pattern that's used to represent database rows and columns within an object. In
    the Active Record pattern, each database column is represented by a single Active
    Record class. Upon instantiation, that object then provides a simple interface
    to manage individual rows or a collection of rows within our code. New rows can
    be created, old ones can be deleted, and existing rows can be updated—all within
    a simple and consistent API. Active Record also enables us to programmatically
    reference and interact with related data, which is usually represented in our
    database by foreign key relations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由马丁·福勒在他的 2003 年出版的《企业应用架构模式》一书中命名，Active Record 模式是一种 **对象关系映射**（ORM）模式，用于在对象中表示数据库行和列。在
    Active Record 模式中，每个数据库列都由一个单独的 Active Record 类表示。实例化后，该对象提供了一个简单的接口来管理我们代码中的单个行或行集合。可以创建新行，删除旧行，以及更新现有行——所有这些都在一个简单且一致的
    API 中完成。Active Record 还使我们能够以编程方式引用和交互相关数据，这些数据通常由外键关系在我们的数据库中表示。
- en: In Yii2, Active Record is implemented by the `yii/db/ActiveRecord` class and
    is often considered the go-to class to represent and work with the data within
    our database. While many frameworks and ORMs implement Active Record for relational
    databases only, Yii2 implements Active Record for search tools such as Sphinx
    and ElasticSearch as well as for NoSQL databases such as Redis and MongoDB. In
    this section, we'll cover how to create new Active Record classes, how to implement
    them within our code, and some common pitfalls of working with Active Record.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 中，Active Record 由 `yii/db/ActiveRecord` 类实现，通常被认为是表示和操作数据库中数据的首选类。虽然许多框架和
    ORM 只为关系数据库实现 Active Record，但 Yii2 还为搜索工具（如 Sphinx 和 ElasticSearch）以及 NoSQL 数据库（如
    Redis 和 MongoDB）实现了 Active Record。在本节中，我们将介绍如何创建新的 Active Record 类，如何在我们的代码中实现它们，以及一些与
    Active Record 一起工作的常见陷阱。
- en: 'Before we start working with Active Record, we first need to create a couple
    of tables that we can work with. Included with the project resources for this
    chapter is a base migration that will create several new tables and populate them
    with some sample data:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 Active Record 之前，我们首先需要创建一些我们可以工作的表。本章的项目资源中包含一个基础迁移，它将创建几个新表并将一些示例数据填充到它们中：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![The Active Record pattern](img/00024.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Active Record 模式](img/00024.jpeg)'
- en: After running the migration, you can verify that the following schema exists
    within our database by running the `.schema` command from the sqlite3 tool.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行迁移后，您可以通过从 sqlite3 工具运行 `.schema` 命令来验证以下模式是否存在于我们的数据库中。
- en: Creating Active Record classes
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Active Record 类
- en: To get started with Active Record in Yii2, we first need to declare an instance
    of `yii/db/ActiveRecord` within our application. Since Active Record instances
    in Yii2 extend from the `yii/base/Model` class and are considered models, we will
    generally store them within the `models/` directory of our application and under
    the `app/models` namespace.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Yii2 中开始使用 Active Record，我们首先需要在我们的应用程序中声明一个 `yii/db/ActiveRecord` 的实例。由于
    Yii2 中的 Active Record 实例是从 `yii/base/Model` 类扩展出来的，并且被视为模型，因此我们通常将它们存储在我们的应用程序的
    `models/` 目录下，并在 `app/models` 命名空间下。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Yii2, `@app` is a predefined alias that points to our application base path.
    Consequently, any namespace declared in our application will typically take the
    form of `app\<folder>`, which enables Yii2's built-in autoloader to automatically
    reference that namespace to our class found in `/<folder>/ClassName.php`. If we
    want to, we can declare additional aliases, such as `@frontend` and `@backend`,
    to divide our application into different sections, which would enable us to create
    multiple Active Record instances in different namespaces.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 中，`@app` 是一个预定义的别名，它指向我们的应用程序基本路径。因此，我们应用程序中声明的任何命名空间通常采用 `app<文件夹>`
    的形式，这使得 Yii2 的内置自动加载器能够自动引用在 `/文件夹/ClassName.php` 中找到的类。如果我们想的话，我们可以声明额外的别名，例如
    `@frontend` 和 `@backend`，将我们的应用程序划分为不同的部分，这将使我们能够在不同的命名空间中创建多个 Active Record 实例。
- en: To keep things simple in this chapter, we'll declare only those Active Record
    classes that are within the `app\models` namespace.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，为了保持简单，我们只声明位于 `app\models` 命名空间内的那些 Active Record 类。
- en: 'To illustrate an example, let''s create an Active Record class for the `user`
    table we created in [Chapter 3](part0023_split_000.html#LTSU1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 3. Migrations, DAO, and Query Building"), *Migrations, DAO, and Query
    Building*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明一个例子，让我们为我们在 [第 3 章](part0023_split_000.html#LTSU1-ad3e09b384df46aea690d9c8897d5fe7
    "第 3 章。迁移、DAO 和查询构建") 中创建的 `user` 表创建一个 Active Record 类，*迁移、DAO 和查询构建*：
- en: 'First, we need to create a new file in the `models/` directory of our application,
    called `User.php`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在我们的应用程序的 `models/` 目录中创建一个新文件，命名为 `User.php`：
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we need to declare the namespace our Active Record instance will live
    in and extend the `yii/db/ActiveRecord` class:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要声明 Active Record 实例将存在的命名空间，并扩展 `yii/db/ActiveRecord` 类：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we need to implement the static method `tableName()` within our class,
    which defines the table name our Active Record model will use. Since our Active
    Record model will use the `user` table, we will define this method as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要在我们的类中实现静态方法 `tableName()`，它定义了我们的 Active Record 模型将使用的表名。由于我们的 Active
    Record 模型将使用 `user` 表，我们将定义此方法如下：
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating active record classes with Gii
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Gii 创建活动记录类
- en: 'While it''s possible to create Active Record instances by hand, generally,
    we''ll want to use Gii to create these classes for us. Using Gii to create our
    Active Record classes has several advantages: in addition to creating the class,
    it will also create attribute labels for our fields, create validation rules based
    upon our database schema, and generate model relationships to another Active Record
    classes based upon our databases'' foreign key structure.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以手动创建 Active Record 实例，但通常我们希望使用 Gii 来为我们创建这些类。使用 Gii 创建我们的 Active Record
    类有几个优点：除了创建类之外，它还会为我们的字段创建属性标签，根据我们的数据库模式创建验证规则，并根据我们数据库的外键结构生成与另一个 Active Record
    类的模型关系。
- en: Using Gii's web interface
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 Gii 的网页界面
- en: Like Yii1, Gii provides a friendly and easy-to-use web interface to create our
    Active Record instances. To get started with Gii, navigate to the `/gii` endpoint
    of our application and click on the **Start** button underneath the **Model Generator**
    section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Yii1 类似，Gii 提供了一个友好且易于使用的网页界面来创建我们的 Active Record 实例。要开始使用 Gii，请导航到我们应用程序的
    `/gii` 端点，并在 **模型生成器** 部分下点击 **开始** 按钮。
- en: '![Using Gii''s web interface](img/00022.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Gii 的网页界面](img/00022.jpeg)'
- en: 'From this page, we can generate Active Record classes based upon our database
    schema. As an example, let''s create an active record instance for our `user`
    table:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个页面，我们可以根据我们的数据库模式生成 Active Record 类。例如，让我们为我们的 `user` 表创建一个 active record
    实例：
- en: First, we need to populate the `Table name` field with `user`, the name of the
    `user` table in our database. As you type, Gii will try to show you possible database
    tables that match our text entry, which can be extremely beneficial when working
    with large databases.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在数据库中的 `user` 表的名称字段中填写 `user`，这是我们的数据库中 `user` 表的名称。随着你输入，Gii 将尝试显示与我们的文本输入匹配的可能数据库表，这在处理大型数据库时非常有用。
- en: Next, we need to either press the *Tab* key on our keyboard, or focus our mouse
    onto the `Model name` field, which should autopopulate the field with `User`,
    which will be the name of the class that Gii will generate.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要按键盘上的 *Tab* 键，或者将鼠标焦点放在 `模型名称` 字段上，该字段应自动填充为 `User`，这将是我们将生成的类的名称。
- en: Then, we need to ensure that the **Generate Relations** checkbox is selected.
    This will automatically add the required code to our class in order to generate
    our model relations for the `Post` and `Role` classes, which we'll create in the
    next section. After checking this box, our form should be filled as follows:![Using
    Gii's web interface](img/00025.jpeg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要确保选中 **生成关系** 复选框。这将自动将所需的代码添加到我们的类中，以便为我们在下一节中创建的 `Post` 和 `Role` 类生成模型关系。在选中此框后，我们的表单应填写如下：![使用
    Gii 的网页界面](img/00025.jpeg)
- en: Then, we can click on the **Preview** button at the bottom of the page, which
    will enable us to preview the code that Gii will generate for us before we confirm
    the creation of our class.![Using Gii's web interface](img/00026.jpeg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以在页面底部的 **预览** 按钮上点击，这将允许我们在确认创建我们的类之前预览 Gii 将为我们生成的代码。![使用 Gii 的网页界面](img/00026.jpeg)
- en: After we preview the class, we can click on the **Generate** button to generate
    our `User` class, which will be located at `models/User.php`.![Using Gii's web
    interface](img/00027.jpeg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在预览了类之后，我们可以点击 **生成** 按钮来生成我们的 `User` 类，该类将位于 `models/User.php`。![使用 Gii 的网页界面](img/00027.jpeg)
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'In order to create new classes for us, the web user that our server is running
    under needs write access to our `models/` directory. If Gii returns an error indicating
    it cannot write to the `models/` directory, you''ll need to adjust the permissions
    on the directory. In our Linux environment, this can be done by adding the `www-data`
    group to the folder and adjusting the permissions so that the user can write to
    it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为我们创建新的类，运行我们服务器的网络用户需要对我们`models/`目录有写权限。如果Gii返回错误，表明它无法写入`models/`目录，您需要调整目录的权限。在我们的Linux环境中，这可以通过将`www-data`组添加到文件夹并调整权限，使用户能够写入它来完成：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As an alternative, you can use the `chmod` tool to adjust the permissions in
    the `models/` directory to `777`. Just ensure that you readjust the permissions
    to something more reasonable after using Gii to create the model.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种替代方案，您可以使用`chmod`工具调整`models/`目录的权限为`777`。只需确保在使用Gii创建模型后，将权限重新调整到一个更合理的值。
- en: By default, Gii is configured to add new models to the `models/` folder in our
    application and create the models under the `app/models` namespace. Additionally,
    the `yii/db/ActiveRecord` class is configured to automatically use the `db` component
    of our application. All of these fields are configurable within the Gii web interface
    for us to change.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Gii被配置为将新模型添加到我们应用程序的`models/`文件夹中，并在`app/models`命名空间下创建模型。此外，`yii/db/ActiveRecord`类被配置为自动使用我们应用程序的`db`组件。所有这些字段都可以在Gii网页界面中配置，以便我们进行更改。
- en: Using Gii's console interface
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Gii的命令行界面
- en: 'As an alternative to Gii''s web interface, Gii can generate Active Record classes
    from the command line. When running Gii from the command line, we simply need
    to provide two attributes: the table name that we are working with and the name
    of the model. This takes the following form:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Gii网页界面的替代方案，Gii可以从命令行生成Active Record类。当从命令行运行Gii时，我们只需提供两个属性：我们正在处理的表名和模型名。这具有以下形式：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As an example, we can create a class for our post table by running the following
    command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以通过运行以下命令创建我们的帖子表类：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Using Gii''s console interface](img/00028.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii的命令行界面](img/00028.jpeg)'
- en: 'While we''re here, let''s also create a class for our `role` table:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在这里时，让我们也为我们`role`表创建一个类：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Working with Active Record
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Active Record一起工作
- en: 'Now that our models have been generated, let''s take a look at what Gii actually
    wrote to the disk. We''ll start by opening up `models/User.php`, which should
    be identical to the following code block:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了模型，让我们看看Gii实际上写入磁盘的内容。我们将首先打开`models/User.php`，它应该与以下代码块相同：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Model validation rules
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型验证规则
- en: 'The first section we should notice in our generated active record class is
    the `rules()` method, which Gii generated for us. Since `yii/db/ActiveRecord`
    extends `yii/base/Model`, it inherits all the validation logic and tools that
    `yii/base/Model` has:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们生成的Active Record类中，我们应该注意的第一个部分是`rules()`方法，这是Gii为我们生成的。由于`yii/db/ActiveRecord`扩展了`yii/base/Model`，它继承了`yii/base/Model`所有的验证逻辑和工具：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When Gii created our model, it scanned our database schema to determine any
    necessary validation rules it thought we would need to have by default. As shown
    in the previous code block, it has marked both the `email` and `password` attributes
    as `required` and the `email` field as `unique`, and it has correctly identified
    the appropriate data types for our name fields as well as timestamps.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当Gii创建我们的模型时，它扫描我们的数据库模式以确定任何我们认为默认需要的验证规则。如前一个代码块所示，它已将`email`和`password`属性标记为`required`，将`email`字段标记为`unique`，并且正确地识别了我们的名称字段以及时间戳的适当数据类型。
- en: 'The `rules()` method in Yii consists of an array of validation rules that take
    the following format:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Yii中的`rules()`方法包含一个验证规则数组，其格式如下：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A complete list of built-in validators can be found in the Yii2 guide at [http://www.yiiframework.com/doc-2.0/guide-tutorial-core-validators.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-core-validators.html).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 内置验证器的完整列表可以在Yii2指南中找到，网址为[http://www.yiiframework.com/doc-2.0/guide-tutorial-core-validators.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-core-validators.html)。
- en: Adding custom validators
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加自定义验证器
- en: In addition to the many built-in core validators Yii2 has, we may need to write
    our own custom validators for our classes. Custom validators can either be written
    inline using anonymous functions, or they can be written as a separate method
    within our class.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Yii2 内置的许多核心验证器外，我们可能还需要为我们自己的类编写自定义验证器。自定义验证器可以是使用匿名函数编写的内联代码，也可以是在我们的类中作为单独的方法编写的。
- en: 'For instance, suppose we only want to permit changes to our user information
    between certain core hours of our business. As an anonymous function, this can
    be written as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们只想在业务的核心时段允许更改我们的用户信息。作为一个匿名函数，这可以写成如下：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Alternatively, we can write this as a separate method by providing a name for
    our validator and then use that name as a method within our class:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过提供一个验证器的名称来将其作为单独的方法编写，然后在我们的类中使用该名称作为方法：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Additionally, custom validators can be written by creating and extending the
    `yii\validators\Validator` class and implementing the `validateAttribute($model,
    $attribute)` method within that class:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以通过创建和扩展 `yii\validators\Validator` 类，并在该类中实现 `validateAttribute($model,
    $attribute)` 方法来编写自定义验证器：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Customizing validator error messages
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义验证器错误消息
- en: 'Nearly all validators in Yii2 come with built-in error messages. However, if
    we want to alter the error message for a certain property, we can do that by specifying
    the message parameter for a specific validator. For instance, we can adjust the
    error message for our unique validator by changing the last line of our validator
    to the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的 Yii2 验证器都自带内置的错误消息。然而，如果我们想更改特定属性的错误消息，我们可以通过为特定验证器指定消息参数来实现。例如，我们可以通过更改验证器的最后一行来调整我们唯一验证器的错误消息，如下所示：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Working with validation errors
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与验证错误一起工作
- en: 'Yii2 provides several ways to interact with and customize errors as and when
    they happen. As you may have noticed in the previous example, we can use the `yii/base/Model`
    method and `addError()` to add new errors to our model attributes during our workflow.
    As shown in the previous example, this takes the following form:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 提供了多种方式来交互和自定义错误，这些错误会在发生时出现。正如你可能在前面的示例中注意到的，我们可以使用 `yii/base/Model` 方法以及
    `addError()` 在我们的工作流程中为模型属性添加新的错误。正如前一个示例所示，这通常采取以下形式：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Additionally, we can use the `getError()` method to retrieve either all the
    errors for our model or just the errors for a particular attribute. This method
    will return an array of errors containing an array of error messages applicable
    for each attribute:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用 `getError()` 方法来检索我们模型的全部错误或特定属性的错误。此方法将返回一个包含适用于每个属性的错误消息数组的错误数组：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Manually executing validation rules
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动执行验证规则
- en: In Yii2, validation rules are executed when the `validate()` method on `yii/db/ActiveRecord`
    is called. While this can be done manually in our controller, it is typically
    executed before the `save()` method is executed. The validator method will return
    either `true` or `false`, indicating whether the validation was successful or
    not.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 中，验证规则是在调用 `yii/db/ActiveRecord` 上的 `validate()` 方法时执行的。虽然这可以在我们的控制器中手动完成，但通常是在
    `save()` 方法执行之前执行的。验证器方法将返回 `true` 或 `false`，指示验证是否成功。
- en: The `validate()` method can also be extended by either overriding the `beforeValidate()`
    and `afterValidate()` methods or by listening to the `yii\base\Model::EVENT_BEFORE_VALIDATE`
    or `yii\base\Model::EVENT_AFTER_VALIDATE` events.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate()` 方法可以通过覆盖 `beforeValidate()` 和 `afterValidate()` 方法或监听 `yii\base\Model::EVENT_BEFORE_VALIDATE`
    或 `yii\base\Model::EVENT_AFTER_VALIDATE` 事件来扩展。'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We'll cover events in more detail in [Chapter 8](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 8. Routing, Responses, and Events"), *Routing, Responses, and Events*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第 8 章[路由、响应和事件](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7
    "第 8 章。路由、响应和事件")中更详细地介绍事件。
- en: Model attribute labels
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型属性标签
- en: 'The next method that Gii automatically implements for us is the `attributeLabels()`
    method. The `attributesLabels()` method enables us to name our model attributes
    with more descriptive names that we can use as form labels. By default, Gii will
    automatically generate labels for us based upon our column names. Furthermore,
    by following the convention of using underscores in our column names in our `user`
    table, Gii has automatically created titleized and readable attribute labels for
    us:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Gii为我们自动实现的下一个方法是`attributeLabels()`方法。`attributesLabels()`方法使我们能够用更描述性的名称命名我们的模型属性，这些名称可以用作表单标签。默认情况下，Gii会根据我们的列名自动为我们生成标签。此外，通过遵循在我们的`user`表中使用下划线的约定，Gii已经自动为我们创建了标题化和可读的属性标签：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Since our `attributeLabels()` method just returns an array of key-value pairs,
    we can enhance our application by translating our attribute labels into multiple
    languages using the `\Yii::t()` method:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的`attributeLabels()`方法仅仅返回一个键值对数组，我们可以通过使用`\Yii::t()`方法将我们的属性标签翻译成多种语言来增强我们的应用程序：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Assuming that our application was properly configured to use translations,
    we can fetch the translated text for our attribute labels using the `getAttributeLabel()`
    method for our `email` attribute:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的应用程序已经正确配置以使用翻译，我们可以使用`getAttributeLabel()`方法为我们的`email`属性获取翻译后的文本：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If our application was configured for the English locale, it would simply return
    the string `"Email"`; however, if our application was running in a different language,
    say Spanish, this method would return the string `"Correo"` instead of `"Email"`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序配置为英语区域设置，它将简单地返回字符串`"Email"`；然而，如果我们的应用程序在不同的语言中运行，比如说西班牙语，这个方法将返回字符串`"Correo"`而不是`"Email"`。
- en: Tip
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We'll cover the `Yii::t()` method as well as general internationalization and
    localization in [Chapter 11](part0068_split_000.html#20R681-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 11. Internationalization and Localization"), *Internationalization and
    Localization*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第11章[国际化与本地化](part0068_split_000.html#20R681-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 11. Internationalization and Localization")中介绍`Yii::t()`方法以及一般化的国际化与本地化。
- en: Active Record relationships
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Active Record关系
- en: 'Assuming that we configured our database schema properly with primary and foreign
    keys, Yii2 will also generate model relationships for us. Unlike Yii1, Yii2 has
    done away with the `relations()` methods and replaced them with magic `__getter()`
    methods. Our `User` model illustrates this for the `Post` and `Role` relationships:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经正确配置了数据库模式，包括主键和外键，Yii2也会为我们生成模型关系。与Yii1不同，Yii2已经废弃了`relations()`方法，并用魔法`__getter()`方法取代了它们。我们的`User`模型展示了`Post`和`Role`关系：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Yii2 also simplified the relationships method, and now, it only supports two
    types of relationships: has-one, as used by the `hasOne()` method, and has-many,
    as defined by the `hasMany()` method. Like Yii1, though, related data can be accessed
    simply by calling the `__getter()` method. For instance, if we want to retrieve
    the name of the role for a user we are working with, we can simply execute the
    following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2也简化了关系方法，现在它只支持两种类型的关系：由`hasOne()`方法使用的单对一关系，以及由`hasMany()`方法定义的多对一关系。尽管如此，与Yii1一样，可以通过简单地调用`__getter()`方法来访问相关数据。例如，如果我们想获取我们正在处理的一个用户的角色名称，我们可以简单地执行以下操作：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Gii makes several inferences based upon your database schema to create model
    relationships. Check whether your relationships map to the correct classes and
    have the correct relationship types before executing your code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Gii根据你的数据库模式做出几个推断来创建模型关系。在执行代码之前，请检查你的关系是否映射到正确的类，并且具有正确的关联类型。
- en: Using multiple database connections with Active Record
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Active Record的多数据库连接
- en: 'By default, all active record instances will use the `db` component to connect
    to our database. In the instance where we have multiple databases connected to
    our application, we can configure active record to work with an alternate database
    by defining the static method `getDb()` within our Active Record class:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有活动记录实例都将使用`db`组件连接到我们的数据库。在我们有多个数据库连接到我们的应用程序的情况下，我们可以通过在Active Record类中定义静态方法`getDb()`来配置活动记录以使用备用数据库：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Behaviors in Active Record
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Active Record中的行为
- en: Yii2 supports several behaviors, which can be used to automatically handle some
    of the more tedious tasks of model management, such as managing the created and
    updated times, automatically creating URL slugs for our application, and logging
    which user created and modified a specific record.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 支持多种行为，这些行为可以用来自动处理模型管理中的一些更繁琐的任务，例如管理创建和更新时间、自动为我们的应用程序创建 URL 拼接，以及记录哪个用户创建了特定记录。
- en: 'To use a behavior with an Active Record class in Yii2, we simply need to specify
    that we want to use the behavior class at the top of our PHP file and then add
    the behavior to the `behaviors()` method of our model. For instance, since both
    our `User` and `Post` classes have the `created_at` and `updated_at` attributes,
    we can add the following to let Yii2 manage these attributes for us:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Yii2 中使用行为，我们只需在 PHP 文件顶部指定我们想要使用的行为类，然后将行为添加到模型的 `behaviors()` 方法中。例如，由于我们的
    `User` 和 `Post` 类都有 `created_at` 和 `updated_at` 属性，我们可以添加以下内容，让 Yii2 为我们管理这些属性：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'By default, the `yii\behaviors\TimestampBehavior` class will populate the `created_at`
    and `updated_at` attributes with the current time, as extracted from the native
    PHP `time()` function. Like most things in Yii2, this is completely configurable.
    For instance, if our database has created and updated fields that use the MySQL
    `TIMESTAMP` column type, we can adjust the behavior as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`yii\behaviors\TimestampBehavior` 类将使用从原生 PHP `time()` 函数提取的当前时间填充 `created_at`
    和 `updated_at` 属性。像 Yii2 中的大多数事情一样，这是完全可配置的。例如，如果我们的数据库中创建了使用 MySQL `TIMESTAMP`
    列类型的创建和更新字段，我们可以按以下方式调整行为：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Tip
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: More information on behaviors can be found from the Yii2 guide located at [http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于行为的信息可以在位于 [http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html)
    的 Yii2 指南中找到。
- en: Working with Active Record
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Active Record
- en: Now that we have learned what Gii automatically provides for us when creating
    new Active Record classes and what additional options we can add to our classes
    to enhance them, let's take a look at how we can use active record instances to
    perform basic create, read, update, and delete (CRUD) actions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Gii 在创建新的 Active Record 类时为我们自动提供了什么，以及我们可以向我们的类添加哪些附加选项来增强它们，让我们看看我们如何可以使用
    Active Record 实例来执行基本的创建、读取、更新和删除（CRUD）操作。
- en: Querying data
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询数据
- en: To query data with Active Record, we can query for data using the `yii/db/ActiveRecord::find()`
    method, which will return an instance of `yii/db/ActiveQuery`. Since `yii/db/ActiveQuery`
    extends `yii/db/Query`, we can take advantage of nearly all the methods and query
    objects we learned in [Chapter 3](part0023_split_000.html#LTSU1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 3. Migrations, DAO, and Query Building"), *Migrations, DAO, and Query
    Building*. Let's take a look at several different examples of using the `yii/db/ActiveRecord::find()`
    method.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Active Record 查询数据，我们可以使用 `yii/db/ActiveRecord::find()` 方法来查询数据，这将返回一个 `yii/db/ActiveQuery`
    实例。由于 `yii/db/ActiveQuery` 扩展了 `yii/db/Query`，我们可以利用我们在 [第 3 章](part0023_split_000.html#LTSU1-ad3e09b384df46aea690d9c8897d5fe7
    "第 3 章。迁移、DAO 和查询构建") 中学习到的几乎所有方法和查询对象，即 *迁移、DAO 和查询构建*。让我们看看使用 `yii/db/ActiveRecord::find()`
    方法的几个不同示例。
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'As an alternative to `yii/db/ActiveQuery`, `yii/db/ActiveRecord` also provides
    two additional methods to query for data, `findOne()`, which will return the first
    Active Record instance from a query, and `findAll()`, which will return an array
    of Active Record instances. Both methods accept a scalar argument, an array of
    scalar arguments, or an array of associative pairs to query data:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 `yii/db/ActiveQuery` 的替代方案，`yii/db/ActiveRecord` 还提供了两个额外的查询数据方法，`findOne()`，它将返回查询的第一个
    Active Record 实例，以及 `findAll()`，它将返回 Active Record 实例的数组。这两个方法都接受一个标量参数、一个标量参数数组或一个关联对数组来查询数据：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `yii/db/ActiveRecord::findOne()` method will not add `LIMIT 1` to the generated
    SQL query, which may result in longer running queries as `yii/db/ActiveRecord::findOne()`
    will simply fetch the first row from the query result. If you encounter performance
    issues using `yii/db/ActiveRecord::findOne()`, try to use the `yii/db/Activequery::find()`
    method paired with the `limit()` and `one()` methods instead, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`yii/db/ActiveRecord::findOne()` 方法不会将 `LIMIT 1` 添加到生成的 SQL 查询中，这可能会导致查询运行时间更长，因为
    `yii/db/ActiveRecord::findOne()` 将简单地从查询结果中获取第一行。如果您在使用 `yii/db/ActiveRecord::findOne()`
    时遇到性能问题，请尝试使用 `yii/db/Activequery::find()` 方法，并配合 `limit()` 和 `one()` 方法，如下所示：'
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Using `yii/db/ActiveQuery` can be extremely memory-intensive at times, depending
    upon how many records are being accessed. One way to get around this limitation
    is to convert our resulting data into an array format using the `asArray()` method:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有时使用`yii/db/ActiveQuery`可能会非常消耗内存，这取决于正在访问的记录数量。绕过这种限制的一种方法是将我们的结果数据转换为数组格式，使用`asArray()`方法：
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Rather than returning an array of Active Record instances, the `asArray()` method
    will return an array of arrays containing Active Record data attributes.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与返回Active Record实例的数组相比，`asArray()`方法将返回包含Active Record数据属性的数组数组。
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: While the `asArray()` method can be used to increase the performance of large
    queries, it has several downsides. The data returned will not be an instance of
    Active Record, and thus, it will not have any of the methods or helpful attributes
    associated with it. Moreover, since data is being returned directly from PDO,
    the data will not be typecast automatically and will be returned as a string instead.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`asArray()`方法可以用来提高大型查询的性能，但它有几个缺点。返回的数据将不是Active Record的实例，因此它将没有与之相关的任何方法或有用的属性。此外，由于数据是直接从PDO返回的，数据将不会自动类型转换，而是以字符串的形式返回。
- en: Data access
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数据访问
- en: 'When using Active Record, each row from our database query will generate a
    single Active Record instance. The column values from our Active Record instance
    can be accessed via the model attributes for that Active Record instance:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Active Record时，数据库查询的每一行都会生成一个Active Record实例。Active Record实例的列值可以通过该Active
    Record实例的模型属性来访问：
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Moreover, relational information can be accessed through the related object''s
    attributes. For instance, to retrieve the author''s name from a given post, we
    can run the following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以通过相关对象的属性访问关系信息。例如，要从给定的帖子中检索作者的姓名，我们可以运行以下代码：
- en: '[PRE38]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Active Record attributes are named after the column names. If having Active
    Record attributes with underscores doesn't match your coding style, you should
    rename your column names.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Active Record属性以列名命名。如果您不希望Active Record属性包含下划线，不符合您的编码风格，您应该重命名您的列名。
- en: 'Our data can also be manipulated by creating a custom getter and setter method
    within our Active Record class. For instance, if we want to display the user''s
    complete name without changing our database schema, we can add the following method
    to our User Active Record class:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据也可以通过在Active Record类中创建自定义获取器和设置器方法来操作。例如，如果我们想显示用户的完整姓名而不更改我们的数据库模式，我们可以在我们的User
    Active Record类中添加以下方法：
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This data can then be accessed directly either through the `getFullName()`
    method or as a pseudo attribute:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以直接通过`getFullName()`方法或作为伪属性直接访问这些数据：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Along the same vein, we can also create custom setters. For instance, the following
    method takes the user''s complete name as input and populates the `first_name`
    and `last_name` attributes for us:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们也可以创建自定义设置器。例如，以下方法接受用户的完整姓名作为输入，并为我们填充`first_name`和`last_name`属性：
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Our setter then enables us to treat the user''s complete name as a settable
    attribute:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的设置器使我们能够将用户的完整姓名视为可设置的属性：
- en: '[PRE42]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Saving data
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存数据
- en: Once we've made changes to our Active Record instance, we can save these changes
    to our database by calling the `save()` method on our instance, which will return
    `true` if the model was successfully saved to the database, or it'll return `false`
    if there was an error.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对Active Record实例进行了更改，我们可以通过在实例上调用`save()`方法来将这些更改保存到数据库中，如果模型成功保存到数据库中，它将返回`true`，如果发生错误，它将返回`false`。
- en: '[PRE43]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tip
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If an error occurred during either the save or validation process, you can retrieve
    the errors through the `yii/db/ActiveRecord::getErrors()` method.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在保存或验证过程中发生错误，您可以通过`yii/db/ActiveRecord::getErrors()`方法检索错误。
- en: 'If we retrieved our user information from the database again, we would see
    that the results were stored:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次从数据库中检索用户信息，我们会看到结果被存储：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Data can also be assigned in bulk through the `yii/db/ActiveRecord::load()`
    method. Typically when using the `load()` method, we'll provide data from a form
    submission, which we'll cover later in this chapter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 数据也可以通过`yii/db/ActiveRecord::load()`方法批量分配。通常当使用`load()`方法时，我们会提供来自表单提交的数据，我们将在本章后面介绍。
- en: '[PRE45]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`\Yii::$app->request` represents the request object and is configured in our
    `config/web.php` file. The `post()` method represents any data submitted via a
    `POST` request.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Yii::$app->request` 表示请求对象，并在我们的 `config/web.php` 文件中进行配置。`post()` 方法表示通过
    `POST` 请求提交的任何数据。'
- en: Creating new records
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建新记录
- en: Creating new records in our database can be done by instantiating a new instance
    of an active record class using the `new` keyword, populating the model with data,
    and then calling the `save()` method on the model.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据库中创建新记录可以通过使用 `new` 关键字实例化一个活动记录类的实例，用数据填充模型，然后在模型上调用 `save()` 方法来完成。
- en: '[PRE46]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Deleting data
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除数据
- en: Data can also be deleted from our database via Active Record by calling the
    `delete()` method on our model. The `delete()` method will permanently delete
    data from the database and will return `true` if the deletion was successful or
    `false` if an error occurred.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过在模型上调用 `delete()` 方法从我们的数据库中删除数据。`delete()` 方法将从数据库中永久删除数据，并在删除成功时返回 `true`，如果发生错误则返回
    `false`。
- en: '[PRE47]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Multiple data rows can be deleted by calling the `yii/db/ActiveRecord::deleteAll()`
    static method:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过调用 `yii/db/ActiveRecord::deleteAll()` 静态方法来删除多行数据：
- en: '[PRE48]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Tip
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be careful when using the `deleteAll()` method as it will permanently delete
    any data that the condition statement specifies. A mistake in the conditional
    can result in an entire table being truncated.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `deleteAll()` 方法时要小心，因为它将永久删除任何由条件语句指定的数据。条件语句中的错误可能导致整个表被截断。
- en: Active Record events
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Active Record 事件
- en: 'As an alternative to creating before and after method handlers such as `beforeSave()`
    and `afterDelete()`, Yii2 supports several different events that our application
    can listen to. The events that Active Record supports are outlined in the following
    table:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 作为创建 `beforeSave()` 和 `afterDelete()` 等前后方法处理程序的替代方案，Yii2 支持我们的应用程序可以监听的不同事件。Active
    Record 支持的事件在以下表中概述：
- en: '| Event | Description |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 描述 |'
- en: '| --- | --- |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `EVENT_INIT` | An event that is triggered when an Active Record instance
    is initialized via the `init()` method |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `EVENT_INIT` | 当通过 `init()` 方法初始化 Active Record 实例时触发的事件 |'
- en: '| `EVENT_BEFORE_UPDATE` | An event that is triggered before a record is updated
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `EVENT_BEFORE_UPDATE` | 在记录被更新之前触发的事件 |'
- en: '| `EVENT_BEFORE_INSERT` | An event that is triggered before a record is inserted
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `EVENT_BEFORE_INSERT` | 在记录被插入之前触发的事件 |'
- en: '| `EVENT_BEFORE_DELETE` | An event that is triggered before a record is deleted
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `EVENT_BEFORE_DELETE` | 在记录被删除之前触发的事件 |'
- en: '| `EVENT_AFTER_UPDATE` | An event that is triggered after a record is modified
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `EVENT_AFTER_UPDATE` | 在记录被修改后触发的事件 |'
- en: '| `EVENT_AFTER_INSERT` | An event that is triggered after a record is inserted
    |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `EVENT_AFTER_INSERT` | 在记录被插入后触发的事件 |'
- en: '| `EVENT_AFTER_DELETE` | An event that is triggered after a record is deleted
    |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `EVENT_AFTER_DELETE` | 在记录被删除后触发的事件 |'
- en: '| `EVENT_AFTER_FIND` | An event that is triggered after a record is created
    and populated with a query result |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `EVENT_AFTER_FIND` | 在记录被创建并用查询结果填充后触发的事件 |'
- en: Tip
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We'll cover what exactly events are and how to use them in [Chapter 8](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 8. Routing, Responses, and Events"), *Routing, Responses, and Events*.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第 8 章（[Chapter 8](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7
    "第 8 章。路由、响应和事件")）中介绍事件的确切含义以及如何使用它们，*路由、响应和事件*。
- en: Models
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型
- en: In Yii1, base models and form models were two separated classes (`CModel` and
    `CFormModel`). In Yii2, these two classes have been consolidated into a single
    class, `yii/base/Model`. This class is used throughout Yii2 for data representation
    and should be our go-to class when representing data we can't represent with `yii/db/ActiveRecord`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii1 中，基础模型和表单模型是两个分离的类（`CModel` 和 `CFormModel`）。在 Yii2 中，这两个类已经被合并为一个单一的类，`yii/base/Model`。这个类在
    Yii2 中用于数据表示，并且当我们无法使用 `yii/db/ActiveRecord` 表示数据时，它应该是我们的首选类。
- en: Tip
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since `yii/db/ActiveRecord` extends `yii/base/Model`, we're already familiar
    with the majority of methods and properties that `yii/base/Model` offers, such
    as `getAttributes()`, `rules()`, `attributeLabels()`, and `getErrors()`. Refer
    to the Yii2 API documentation for a complete list of all the methods supported
    by `yii/base/Model` at [http://www.yiiframework.com/doc-2.0/yii-base-model.html](http://www.yiiframework.com/doc-2.0/yii-base-model.html).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `yii/db/ActiveRecord` 扩展了 `yii/base/Model`，我们已经熟悉了 `yii/base/Model` 提供的大多数方法和属性，例如
    `getAttributes()`、`rules()`、`attributeLabels()` 和 `getErrors()`。有关 `yii/base/Model`
    支持的所有方法的完整列表，请参阅 Yii2 API 文档，链接为 [http://www.yiiframework.com/doc-2.0/yii-base-model.html](http://www.yiiframework.com/doc-2.0/yii-base-model.html)。
- en: Model attributes
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型属性
- en: 'In `yii/db/ActiveRecord`, data attributes and attribute names are pulled directly
    from our database column names. In `yii/base/Model`, data attributes and attribute
    names are defined as public properties within our model class. For instance, if
    we want to create a model called `UserForm` to collect user information, we can
    write the following class:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `yii/db/ActiveRecord` 中，数据属性和属性名称直接从我们的数据库列名称中获取。在 `yii/base/Model` 中，数据属性和属性名称被定义为模型类中的公共属性。例如，如果我们想创建一个名为
    `UserForm` 的模型来收集用户信息，我们可以编写以下类：
- en: '[PRE49]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Unlike Active Record instances, information stored in base models is not persisted.
    Calling `unset()` on the class or creating a new instance of the class will not
    grant user the access to the data stored in other instance of the model. Since
    our model attributes are public properties of our PHP class, we can access them
    like any public property.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 与活动记录实例不同，存储在基本模型中的信息不会被持久化。在类上调用 `unset()` 或创建该类的新实例不会授予用户访问其他模型实例中存储的数据的权限。由于我们的模型属性是
    PHP 类的公共属性，我们可以像访问任何公共属性一样访问它们。
- en: Scenarios
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 场景
- en: 'When working with models or active record classes, we may want to reuse the
    same model for different situations, such as logging in a user or registering
    a user. To help us write less code, Yii2 provides the `scenarios()` method to
    define what business logic and validation rules should be executed for each scenario.
    By default, scenarios are determined by our validation rules using the `on` property
    in our validation rules:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当与模型或活动记录类一起工作时，我们可能希望在不同情况下重用相同的模型，例如登录用户或注册用户。为了帮助我们编写更少的代码，Yii2 提供了 `scenarios()`
    方法来定义每个场景应执行哪些业务逻辑和验证规则。默认情况下，场景由我们的验证规则使用 `on` 属性确定：
- en: '[PRE50]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This behavior can be customized by overriding the `scenarios()` method with
    our custom logic:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为可以通过覆盖 `scenarios()` 方法并使用我们的自定义逻辑来定制：
- en: '[PRE51]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Alternatively, if we want to add new scenarios to our model without altering
    the current scenarios defined in our model validation rules, we can simply add
    them by fetching the classes'' parent scenarios, adding the new scenarios we want
    to add, and then returning our updated scenarios'' array:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们想在模型中添加新的场景而不更改模型验证规则中定义的当前场景，我们可以通过获取类的父场景，添加我们想要添加的新场景，然后返回更新后的场景数组来简单地添加它们：
- en: '[PRE52]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We can then control which scenario is active when we instantiate our model
    or when we define the scenario property of our model at runtime:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在实例化我们的模型或定义模型在运行时的场景属性时控制哪个场景是活动的：
- en: '[PRE53]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Tip
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When a scenario is not specified either at runtime or during model instantiation,
    the default scenario is used. The default scenario marks all model attributes
    as active for both mass assignment and model validation.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当在运行时或模型实例化期间未指定场景时，将使用默认场景。默认场景将所有模型属性标记为对大量赋值和模型验证都处于活动状态。
- en: Forms
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单
- en: In Yii2, we can dynamically generate rich HTML5 forms based upon our model using
    the `yii/widgets/ActiveForm` class. The `yii/widgets/ActiveForm` class has several
    advantages over managing forms manually. In addition to providing several useful
    helper methods and pairing well with the HTML helper `yii/helpers/Html`, forms
    can be generated from the Gii tool using our model data. When working with models
    and active record instances, this is the preferred way to generate forms.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 中，我们可以使用 `yii/widgets/ActiveForm` 类根据我们的模型动态生成丰富的 HTML5 表单。与手动管理表单相比，`yii/widgets/ActiveForm`
    类具有多个优势。除了提供几个有用的辅助方法并与 HTML 辅助类 `yii/helpers/Html` 配合良好外，我们还可以使用 Gii 工具通过我们的模型数据生成表单。当与模型和活动记录实例一起工作时，这是生成表单的首选方式。
- en: Generating forms with Gii
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Gii 生成表单
- en: Like Active Record classes, forms can be generated automatically for us from
    both the web Gii tool and the console Gii tool. Let's take a look at generating
    a form for authentication, which we'll call `LoginForm`, and a form to handle
    registration, which we'll call `RegisterForm`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Active Record 类一样，表单可以从网络 Gii 工具和控制台 Gii 工具自动为我们生成。让我们看看如何生成一个用于身份验证的表单，我们将它称为
    `LoginForm`，以及一个用于处理注册的表单，我们将它称为 `RegisterForm`。
- en: Generating forms with Gii's web interface
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Gii 网络界面生成表单
- en: For our `LoginForm` form, let's start by opening up the Gii web tool by navigating
    to the `/gii` endpoint of our application and then clicking on the **Start** button
    underneath the **Form Generator** section.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的 `LoginForm` 表单，让我们首先通过导航到应用程序的 `/gii` 端点并点击 **表单生成器** 部分下方的 **开始** 按钮来打开
    Gii 网络工具。
- en: '![Generating forms with Gii''s web interface](img/00029.jpeg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Gii 网络界面生成表单](img/00029.jpeg)'
- en: Like our model generator, to generate a form, we only need to provide a few
    fields. For forms, we only need to know the view name (which will translate to
    the filename) and the model class. For our view name, let's use `site/forms/LoginForm`,
    and for our model class, we may want to use the `UserForm` class that we generated
    previously. Since we want to use our form just to log in, we should also specify
    that we want to use the *login* scenario.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的模型生成器一样，要生成表单，我们只需要提供一些字段。对于表单，我们只需要知道视图名称（它将转换为文件名）和模型类。对于我们的视图名称，让我们使用
    `site/forms/LoginForm`，对于我们的模型类，我们可能想要使用我们之前生成的 `UserForm` 类。由于我们只想使用表单进行登录，我们还应该指定我们想要使用
    *登录* 场景。
- en: Tip
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When specifying the model class, we need to specify both the namespace and the
    class so that Yii can find our class. For our `UserForm` class, we will need to
    provide `app\models\UserForm`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定模型类时，我们需要指定命名空间和类名，以便 Yii 能够找到我们的类。对于我们的 `UserForm` 类，我们需要提供 `app\models\UserForm`。
- en: '![Generating forms with Gii''s web interface](img/00030.jpeg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Gii 网络界面生成表单](img/00030.jpeg)'
- en: Once we have specified all the necessary attributes, we can click on the **Preview**
    button to preview our form, and then we can click on the **Generate** button to
    generate the source code.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们指定了所有必要的属性，我们就可以点击 **预览** 按钮来预览我们的表单，然后我们可以点击 **生成** 按钮来生成源代码。
- en: '![Generating forms with Gii''s web interface](img/00031.jpeg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Gii 网络界面生成表单](img/00031.jpeg)'
- en: 'Unlike our model generator, after the generation, our form generator will also
    provide us with a template action that we can put into our controller:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的模型生成器不同，在生成后，我们的表单生成器还将为我们提供一个模板操作，我们可以将其放入我们的控制器中：
- en: '[PRE54]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Generating forms with Gii's console interface
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Gii 控制台界面生成表单
- en: 'As an alternative to generating forms with Gii''s web interface, we can also
    use Gii''s console interface to generate basic forms for our model class. To generate
    forms with our console interface, we can run the `gii/form` tool, as shown in
    the following example:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用 Gii 网络界面生成表单的替代方案，我们还可以使用 Gii 的控制台界面为我们的模型类生成基本表单。要使用控制台界面生成表单，我们可以运行 `gii/form`
    工具，如下例所示：
- en: '[PRE55]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Tip
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Most console shells treat the backslash character as an escape character. To
    pass a backslash character to Gii, we need to escape the backslash character with
    a second backslash.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数控制台外壳将反斜杠字符视为转义字符。为了将反斜杠字符传递给 Gii，我们需要用第二个反斜杠转义反斜杠字符。
- en: 'Here''s the output:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Generating forms with Gii''s console interface](img/00032.jpeg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Gii 控制台界面生成表单](img/00032.jpeg)'
- en: 'Our resulting `RegisterForm` view will look as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成的 `RegisterForm` 视图将如下所示：
- en: '[PRE56]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Tip
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember, Gii's console interface only prompts you for the most basic information
    it needs in order to generate the class. Remember to use the `help` tool to discover
    other command-line arguments for additional customization.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Gii 的控制台界面只提示你提供生成类所需的最基本信息。请记住使用 `help` 工具来发现其他命令行参数以进行额外定制。
- en: Using forms
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用表单
- en: 'Now that we''ve created our forms, let''s take a brief look at how exactly
    they work. As shown earlier, our `yii/widgets/ActiveForm` class expects a model
    to work with. In most cases, this is going to be defined in our controller and
    then passed down to our view:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了表单，让我们简要地看看它们是如何工作的。如前所述，我们的 `yii\widgets\ActiveForm` 类期望有一个模型来与之一起工作。在大多数情况下，这将定义在我们的控制器中，然后传递到我们的视图中：
- en: '[PRE57]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'One thing you may notice about our generated forms is that they only contain
    core form logic and don''t contain extra HTML, such as the `html`, `head`, and
    `body` tags. In Yii2, generated forms are intended to be rendered as a partial
    view rather than a complete view. Rather than specifying our form, `LoginForm`,
    directly in our controller, we will pass our model down to a parent view, which
    will then render our form. As an example, our login action within our controller
    will change to the following:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到我们生成的表单只包含核心表单逻辑，不包含额外的 HTML，例如 `html`、`head` 和 `body` 标签。在 Yii2 中，生成的表单旨在作为部分视图渲染，而不是完整视图。我们不是直接在我们的控制器中指定我们的表单
    `LoginForm`，而是将我们的模型传递给父视图，然后该视图将渲染我们的表单。例如，我们控制器中的登录操作将更改为以下内容：
- en: '[PRE58]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We will then create a new view file at `views/site/login.php`, which will render
    our `LoginForm`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在 `views/site/login.php` 创建一个新的视图文件，该文件将渲染我们的 `LoginForm`：
- en: '[PRE59]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Tip
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Unlike Yii1, Yii2 doesn''t have a `renderPartial()` method to render partial
    views. Instead, it has two separate `render()` methods: one in `yii/base/Controller`
    and another in `yii/base/View`. The `render()` method called in our previous example
    is called from `yii/base/View` and is used to render any view file whether we
    consider it a partial view or a complete view.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Yii1 不同，Yii2 没有用于渲染部分视图的 `renderPartial()` 方法。相反，它有两个独立的 `render()` 方法：一个在
    `yii/base/Controller` 中，另一个在 `yii/base/View` 中。我们之前示例中调用的 `render()` 方法是从 `yii/base/View`
    调用的，用于渲染任何视图文件，无论我们是否将其视为部分视图或完整视图。
- en: 'The resulting view from our render chain would then look as follows if we navigate
    to the `site/login` endpoint of our application:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导航到应用程序的 `site/login` 端点，我们的渲染链产生的视图将如下所示：
- en: '![Using forms](img/00033.jpeg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![使用表单](img/00033.jpeg)'
- en: Tip
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '[Chapter 8](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 8. Routing, Responses, and Events"), *Routing, Responses, and Events*,
    will help us gain a better understanding of how routing works in Yii2 and how
    we can easily figure out which controller actions match to which view actions.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 8 章](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7 "第
    8 章。路由、响应和事件")，*路由、响应和事件*，将帮助我们更好地理解 Yii2 中的路由工作原理以及我们如何轻松地找出哪些控制器操作与哪些视图操作匹配。'
- en: ActiveForm and input types
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ActiveForm 和输入类型
- en: 'Now that we know how to render our form, let''s break down our form view. Since
    view files and controllers are separated in Yii2, we need to first make sure that
    we use our active form class in our view file:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何渲染我们的表单，让我们分解我们的表单视图。由于在 Yii2 中视图文件和控制器是分开的，我们首先需要确保我们在视图文件中使用我们的活动表单类：
- en: '[PRE60]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Our active form elements are then contained within a static call in the `ActiveForm`
    class to the `begin()` and `end()` methods.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的活动表单元素随后被包含在 `ActiveForm` 类的静态调用 `begin()` 和 `end()` 方法中。
- en: '[PRE61]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'By default, our `begin()` method will provide us with several built-in HTML
    defaults, such as an ID and class attribute. To customize these, we can provide
    an array of arguments to our `begin()` method to manually specify these attributes:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们的 `begin()` 方法会为我们提供一些内置的 HTML 默认值，例如 ID 和类属性。要自定义这些，我们可以向 `begin()`
    方法提供一个参数数组以手动指定这些属性：
- en: '[PRE62]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The next item to notice about our form is that model attributes are wrapped
    within a call to `$form->field()`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要注意的下一个关于我们的表单的事项是，模型属性被包裹在 `$form->field()` 的调用中：
- en: '[PRE63]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The `field()` method is a chainable method that specifies the `<input>` tag
    for our model attribute, adding some basic client-side validation (such as the
    `required` attribute) and populating the `form` field with data in the instance
    of a model validation error in our `POST` submission. Since the method is chainable,
    we can chain additional attributes onto our form. For instance, if we want to
    add client-side validation for our `email` field so that our browsers can verify
    our text field was an email address, we can chain the following:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`field()` 方法是一个可链式方法，用于指定模型属性的 `<input>` 标签，添加一些基本的客户端验证（例如 `required` 属性），并在模型验证错误实例的
    `POST` 提交中填充 `form` 字段。由于该方法可链式，我们可以将其他属性附加到我们的表单上。例如，如果我们想为我们的 `email` 字段添加客户端验证，以便我们的浏览器可以验证我们的文本字段是否为电子邮件地址，我们可以链式以下内容：'
- en: '[PRE64]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In addition to our required validator, our view now verifies that our email
    is a valid email address.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们的必需验证器外，我们的视图现在还会验证我们的电子邮件是否为有效的电子邮件地址。
- en: '![ActiveForm and input types](img/00034.jpeg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![ActiveForm 和输入类型](img/00034.jpeg)'
- en: 'Likewise, we can customize our `password` field to obstruct our password by
    specifying that the field should be a password input:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以自定义我们的 `password` 字段，通过指定该字段应为密码输入来遮挡我们的密码：
- en: '[PRE65]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'With `ActiveForm`, we can also add an inline hint or modify the label for any
    attribute using the `hint()` method and the `label()` method:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ActiveForm`，我们还可以使用 `hint()` 方法和 `label()` 方法为任何属性添加内联提示或修改标签：
- en: '[PRE66]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '![ActiveForm and input types](img/00035.jpeg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![ActiveForm 和输入类型](img/00035.jpeg)'
- en: Tip
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: While the `$form` property is an instance of `yii/widgets/ActiveForm`, the `field()`
    method returns an instance of `yii/widgets/ActiveField`. For a list of all the
    available methods and options for `yii/widgets/ActiveField`, refer to the Yii2
    documentation at [http://www.yiiframework.com/doc-2.0/yii-widgets-activefield.html](http://www.yiiframework.com/doc-2.0/yii-widgets-activefield.html).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `$form` 属性是 `yii/widgets/ActiveForm` 的一个实例，但 `field()` 方法返回的是 `yii/widgets/ActiveField`
    的一个实例。有关 `yii/widgets/ActiveField` 所有的可用方法和选项的列表，请参阅 Yii2 文档中的[http://www.yiiframework.com/doc-2.0/yii-widgets-activefield.html](http://www.yiiframework.com/doc-2.0/yii-widgets-activefield.html)。
- en: Summary
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered a lot of information in this chapter! We covered how to properly
    set up and configure Gii, the code generation tool for Yii2\. We then covered
    how we can automatically create Active Record classes based upon our database
    schema using both the web and console interface for Gii in addition to many of
    the common methods and properties we can bind to our Active Record classes, such
    as validation rules, attribute labels, and behaviors. Next, we covered how to
    create basic models that do not depend upon our database and how to add scenarios
    to our models and Active Record classes. We finally covered how we can use the
    Gii tool to create HTML forms based upon our models and explored some of the functionality
    that comes with the `ActiveForm` class.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了大量的信息！我们介绍了如何正确设置和配置 Gii，这是 Yii2 的代码生成工具。然后，我们介绍了如何使用 Gii 的网络和命令行界面自动创建基于我们数据库模式的
    Active Record 类，以及我们可以绑定到我们的 Active Record 类的许多常见方法和属性，例如验证规则、属性标签和行为。接下来，我们介绍了如何创建不依赖于我们数据库的基本模型，以及如何向我们的模型和
    Active Record 类添加场景。最后，我们介绍了如何使用 Gii 工具根据我们的模型创建 HTML 表单，并探讨了 `ActiveForm` 类附带的一些功能。
- en: In the next chapter, we are going to expand our knowledge of the available helpers
    and widgets that come with Yii2\. We will also dive into modules in Yii2 and explore
    how we can use them to create reusable self-contained applications that we will
    keep building upon throughout the book.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展我们对 Yii2 所提供的可用帮助器和组件的了解。我们还将深入研究 Yii2 的模块，并探讨我们如何使用它们来创建可重用的自包含应用程序，这些应用程序将在整本书中不断构建。
- en: As we move forward, we are going to build upon much of the knowledge we have
    gained thus far. Before moving forward, ensure that you review the classes and
    information we have learned about.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，我们将基于我们迄今为止所获得的大部分知识进行构建。在继续前进之前，请确保您已经回顾了我们所学的类和信息。
