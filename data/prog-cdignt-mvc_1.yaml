- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 入门
- en: This chapter covers the basics of the CI development framework and its usage
    by reviewing some fundamental web application examples. We will start with a basic
    hello world example and move to an interactive contact-form integration with a
    database. We will construct the CI applications by following a step-by-step method.
    Throughout this chapter, we need to remember that the CI development framework
    is an MVC-based development architecture (for more information, refer to the Wikipedia
    definition at [http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过审查一些基本的Web应用程序示例，涵盖了CI开发框架的基本知识和其使用。我们将从一个基本的“你好，世界”示例开始，然后过渡到一个与数据库集成的交互式联系表单。我们将通过逐步方法构建CI应用程序。在整个章节中，我们需要记住CI开发框架是一个基于MVC的开发架构（更多信息，请参阅维基百科定义[http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller)）。
- en: 'This chapter will primarily focus on the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将主要关注以下主题：
- en: The CI project directory tree framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI项目目录树框架
- en: Configurations (routing and autoloading are covered in this chapter, while the
    other issues are covered in [Chapter 2](ch02.html "Chapter 2. Configurations and
    Naming Conventions"), *Configurations and Naming Conventions*)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置（路由和自动加载在本章中介绍，其他问题在[第2章](ch02.html "第2章。配置和命名约定")*配置和命名约定*中介绍）
- en: 'Example 1: hello world'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例1：hello world
- en: 'Example 2: passing parameters to a view'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例2：向视图传递参数
- en: 'Example 3: the database query by a model rendering results to a view'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例3：模型通过渲染结果到视图进行数据库查询
- en: 'Example 4: interactive contact forms'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例4：交互式联系表单
- en: By reviewing these examples, we will get the basics of using CI resources. We
    will begin by briefly reviewing the CI resources used. Then we will review a web
    application code that loads a static view page. Next we will use the model to
    retrieve data from a database and show it in a view. Finally, we'll add a view
    with a contact form to enter input and save it by calling a controller method
    into the database.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过审查这些示例，我们将了解使用CI资源的基本知识。我们将首先简要回顾所使用的CI资源。然后，我们将审查一个加载静态视图页面的Web应用程序代码。接下来，我们将使用模型从数据库检索数据并在视图中显示它。最后，我们将添加一个带有联系表单的视图，通过调用控制器方法将输入保存到数据库中。
- en: Installing CodeIgniter
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装CodeIgniter
- en: First of all, we need to have a hosted PHP server (Version 5.3 or later) and
    a MySQL (one of the latest versions) server, where we know the database credentials.
    Local database access from the PHP is recommended for simplicity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要有一个托管PHP服务器（版本5.3或更高版本）和一个MySQL服务器（最新版本之一），我们知道数据库凭据。建议从PHP进行本地数据库访问以简化操作。
- en: Note that the server will operate in a **CGI** (**Common Gateway Interface**)
    fashion in order to let CI operate. We can have a local web development environment
    on our PC or a remote server hosted and dedicated.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，服务器将以**CGI**（**通用网关接口**）的方式运行，以便让持续集成（CI）操作。我们可以在我们的PC上有一个本地Web开发环境，或者一个托管和专用的远程服务器。
- en: 'Once we''ve set up a local web development environment, we''ll need to download
    the latest version of CI, which is Version 2.1.2 at the time of writing this book.
    The link to download the latest version is [http://codeigniter.com/downloads/](http://codeigniter.com/downloads/).
    Now, if we look inside the CI folder, we should see the following directory tree:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了一个本地Web开发环境，我们需要下载CI的最新版本，本书撰写时为2.1.2版本。下载最新版本的链接是[http://codeigniter.com/downloads/](http://codeigniter.com/downloads/)。现在，如果我们查看CI文件夹，我们应该看到以下目录树：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Folders overview
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹概述
- en: The root folder contains the `index.php` file, which handles all the URI requests.
    The `index.php` file will process them with the CI core, and apply our application
    controllers using the models, libraries, and helpers loaded by the controllers
    and rendered views, `license.txt`, which is the CI's license file. `.htaccess`
    is used for configuring the CI routing and removing `index.php` from the URL.
    JavaScript, CSS, and HTML is incorporated into the rendered PHP output and their
    usage is elaborated in [Chapter 7](ch07.html "Chapter 7. Views"), *Views*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根目录包含`index.php`文件，该文件处理所有URI请求。`index.php`文件将使用CI核心处理它们，并使用控制器加载的模型、库和助手以及渲染的视图应用我们的应用程序控制器，`license.txt`是CI的许可文件。`.htaccess`用于配置CI路由并从URL中删除`index.php`。JavaScript、CSS和HTML被纳入渲染的PHP输出中，它们的使用在[第7章](ch07.html
    "第7章。视图")*视图*中详细说明。
- en: Let's review the folders and their content application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾文件夹及其内容应用。
- en: The application directory folder is the root directory of our main activity
    project coding zone. This is the heart of the CI-developed application project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序目录文件夹是我们主要活动项目编码区域的根目录。这是 CI 开发应用程序项目的核心。
- en: Mandatory components
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 必选组件
- en: Let's take a look at the mandatory components.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看必选组件。
- en: '`application/config`: This folder contains all the CI application configuration
    files, which are covered in [Chapter 2](ch02.html "Chapter 2. Configurations and
    Naming Conventions"), *Configurations and Naming Conventions*.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/config`：此文件夹包含所有 CI 应用程序配置文件，这些配置文件在[第 2 章](ch02.html "第 2 章。配置和命名约定")*配置和命名约定*中有所介绍。'
- en: '`application/controllers`: This folder contains all the application controllers
    in the CI application project. A controller, as mentioned in the *Preface*, is
    a component in the MVC-design architecture that handles the request by the user
    and presents the data shown to the user. A controller in CI is a class extending
    a base class of the CI controller. The class methods can be executed or called
    with a proper URI. The naming conventions related to the controller definition
    and usage will be covered in [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/controllers`：此文件夹包含 CI 应用程序项目中所有的应用程序控制器。正如在*前言*中提到的，控制器是 MVC
    设计架构中的一个组件，它处理用户的请求并向用户展示数据。CI 中的控制器是一个扩展 CI 控制器基类的类。类方法可以通过适当的 URI 执行或调用。与控制器定义和使用相关的命名约定将在[第
    2 章](ch02.html "第 2 章。配置和命名约定")*配置和命名约定*中介绍。'
- en: '`application/views`: This folder contains all the view files. A view is the
    HTML content executed by the user browser that presents and interacts with the
    user. A view can be a webpage or an RSS page.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views`：此文件夹包含所有视图文件。视图是由用户浏览器执行的 HTML 内容，用于展示和与用户交互。视图可以是网页或 RSS
    页面。'
- en: 'The following components are not mandatory but are highly recommended:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下组件不是必选的，但强烈推荐：
- en: '`application/models`: This folder contains all the project model files. A model
    is the component of the MVC design architecture, which handles the data stored
    in the database. A model in CI is a PHP class that is designed to work with the
    information in the database. [Chapter 6](ch06.html "Chapter 6. Models"), *Models*,
    will elaborate on the CI models concept, definition, and usage with several usage
    examples.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/models`：此文件夹包含所有项目模型文件。模型是 MVC 设计架构中的组件，负责处理存储在数据库中的数据。CI 中的模型是一个设计用来与数据库中的信息一起工作的
    PHP 类。[第 6 章](ch06.html "第 6 章。模型")*模型*将详细阐述 CI 模型的概念、定义和用法，并附上几个使用示例。'
- en: '`application/helpers`: This folder contains all the additional helper files
    to the CI helpers. They can be third-party or created by the developer. A helper
    file is a collection of independent procedural functions in a particular category.
    Each helper function performs one specific task, with no dependence on other functions.
    [Chapter 5](ch05.html "Chapter 5. Helpers"), *Helpers*, will elaborate on the
    CI helpers concept, definition, and usage with several usage examples.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/helpers`：此文件夹包含 CI 辅助文件的附加文件。它们可以是第三方文件或由开发者创建。辅助文件是特定类别中独立过程函数的集合。每个辅助函数执行一个特定的任务，不依赖于其他函数。[第
    5 章](ch05.html "第 5 章。辅助函数")*辅助函数*将详细阐述 CI 辅助函数的概念、定义和用法，并附上几个使用示例。'
- en: '`application/libraries`: This folder contains all the libraries of the CI application
    project created by the developer. A CI library is technically a PHP class. The
    scope of the library can be any project resource, such as helpers, models, controllers,
    and views. For example, a library can provide Facebook library API services to
    simplify the application code for Facebook integration. [Chapter 4](ch04.html
    "Chapter 4. Libraries"), *Libraries*, will elaborate on the CI libraries concept,
    definition, and usage with several usage examples.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/libraries`：此文件夹包含由开发者创建的 CI 应用程序项目中的所有库。从技术上讲，CI 库是一个 PHP 类。库的范围可以是任何项目资源，例如辅助函数、模型、控制器和视图。例如，库可以提供
    Facebook 库 API 服务，以简化 Facebook 集成应用程序的代码。[第 4 章](ch04.html "第 4 章。库")*库*将详细阐述
    CI 库的概念、定义和用法，并附上几个使用示例。'
- en: '`system`: This is the root of the CodeIgniter core directory. The system folder
    contains important system components in the subfolders, such as core, database,
    helpers (built-in system helpers), and libraries (built-in system libraries).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system`：这是CodeIgniter核心目录的根目录。system文件夹包含在子文件夹中的重要系统组件，例如核心、数据库、辅助程序（内置系统辅助程序）和库（内置系统库）。'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Do not edit any of these files! Upgrading is much easier if we don't.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要编辑这些文件！如果我们不这样做，升级会更容易。
- en: Example 1 – hello world
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例1 – Hello World
- en: Initially, we will start with a simple example that displays **Hello World**
    on the rendered web page. This is an example that doesn't use a database.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从一个简单的例子开始，该例子在渲染的网页上显示**Hello World**。这是一个不使用数据库的例子。
- en: The URI will be `http://ourdomain.com/index.php/hello`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: URI将是`http://ourdomain.com/index.php/hello`。
- en: We can eliminate the `index.php` file from the path to enable a shorter URI;
    that is, `http://ourdomain.com/index.php/hello`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从路径中删除`index.php`文件以启用更短的URI；也就是说，`http://ourdomain.com/index.php/hello`。
- en: In order to enable these shorter URIs, we will make configuration changes as
    described in [Chapter 2](ch02.html "Chapter 2. Configurations and Naming Conventions"),
    *Configurations and Naming Conventions*, regarding the `config.php` index_page
    setting in `config.php`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用这些更短的URI，我们将按照[第2章](ch02.html "第2章。配置和命名约定")中描述的配置更改，在`config.php`中的`index_page`设置进行配置。
- en: 'We will build the following two scripts:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建以下两个脚本：
- en: 'Controller class: `application/controllers/hello.php`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器类：`application/controllers/hello.php`
- en: 'View script: `application/views/helloview.php`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图脚本：`application/views/helloview.php`
- en: In this example, we use the default configuration. For more information about
    configurations, refer to [Chapter 2](ch02.html "Chapter 2. Configurations and
    Naming Conventions"), *Configurations and Naming Conventions*. The controller
    in this example passes the parameters that are displayed in the view.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用默认配置。有关配置的更多信息，请参阅[第2章](ch02.html "第2章。配置和命名约定")，*配置和命名约定*。在这个例子中，控制器传递了在视图中显示的参数。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Passing the parameters from the controller to the view is optional.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从控制器传递参数到视图是可选的。
- en: The controller file
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: Here's the code sample of the controller. The controller is responsible for
    rendering the view with the parameters, such as mega title and message. For naming
    the controller classes, refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是控制器的代码示例。控制器负责使用如巨标题和消息之类的参数渲染视图。关于控制器类的命名，请参阅[第2章](ch02.html "第2章。配置和命名约定")，*配置和命名约定*。
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户中下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接将文件通过电子邮件发送给您。
- en: The view file
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图文件
- en: 'The following is the corresponding rendered view that uses the parameters provided
    by the controller to render the view to the web page and return it to the user:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的渲染视图，它使用控制器提供的参数将视图渲染到网页上，并将其返回给用户：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Example 2 – passing the complex parameters to a view
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2 – 将复杂参数传递给视图
- en: In this example, we will show you how to pass and use complex parameters, such
    as arrays and object arrays, from the CI controller to the rendered CI view to
    be used in the view. You can pass any number of arrays as parameters to a view;
    you can also pass objects, such as rows of a query result.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将向您展示如何从CI控制器传递和使用复杂参数，例如数组和对象数组，以便在CI视图中使用。您可以将任意数量的数组作为参数传递给视图；您还可以传递对象，例如查询结果的行。
- en: 'A standard GET parameters URI looks like this: `http://ourdomain.com/index.php/example2/more/?a=1&b=2&c=3`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 标准GET参数URI看起来像这样：`http://ourdomain.com/index.php/example2/more/?a=1&b=2&c=3`。
- en: 'However, let''s remember that in CI the URI is passed in this manner: `http://ourdomain.com/index.php/example2/more/1/2/3`.
    For more information, see [Chapter 2](ch02.html "Chapter 2. Configurations and
    Naming Conventions"), *Configurations and Naming Conventions*.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，让我们记住在 CI 中，URI 以这种方式传递：`http://ourdomain.com/index.php/example2/more/1/2/3`。有关更多信息，请参阅[第2章](ch02.html
    "第2章。配置和命名约定")，*配置和命名约定*。
- en: Looking at the URI, we will build the controller `example2.php` with the function
    named `more` with the three parameters passed to it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 观察URI，我们将构建名为 `more` 的控制器 `example2.php`，并传递三个参数给它。
- en: 'We will build the following two scripts:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建以下两个脚本：
- en: 'The controller class: `application/controllers/example2.php`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器类：`application/controllers/example2.php`
- en: 'The view script : `application/views/ example2more.php`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图脚本：`application/views/example2more.php`
- en: The controller file
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: The controller is responsible for rendering the view with parameters such as
    mega title and message.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器负责使用如大标题和信息等参数渲染视图。
- en: 'The following is the code sample of the controller:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的控制器代码示例：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The view file
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图文件
- en: 'The following is the corresponding rendered view:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的渲染视图：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Example 3 – the database query by a model rendering results to a view
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 3 – 模型通过渲染结果到视图执行数据库查询
- en: In this example, we will show you how the CI controller uses the CI model to
    retrieve data from the database and render it to a CI view.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将向您展示 CI 控制器如何使用 CI 模型从数据库检索数据并将其渲染到 CI 视图中。
- en: The URL will be `http://ourdomain.com/index.php/user`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: URL将是`http://ourdomain.com/index.php/user`。
- en: First, we will have to configure the database settings in the configuration
    file `application/config/database.php`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须在配置文件 `application/config/database.php` 中配置数据库设置。
- en: 'We should keep the default database settings unchanged, and only change the
    following configuration parameters:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应保持默认数据库设置不变，只需更改以下配置参数：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The model class will retrieve all the user details from the table `users`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 模型类将从 `users` 表中检索所有用户详细信息。
- en: For more information on configurations, refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configuration and Naming Conventions*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置的更多信息，请参阅[第2章](ch02.html "第2章。配置和命名约定")，*配置和命名约定*。
- en: 'We will build the following three scripts:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建以下三个脚本：
- en: 'The controller class: `application/controllers/user.php`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器类：`application/controllers/user.php`
- en: 'The model file: `application/model/usermodel.php`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型文件：`application/model/usermodel.php`
- en: 'The view script: `application/views/userview.php`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图脚本：`application/views/userview.php`
- en: The controller file
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: The controller retrieves the `users` list from the database via the model and
    renders the view with it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器通过模型从数据库检索 `users` 列表，并与其一起渲染视图。
- en: 'The following is the code sample of the controller:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的控制器代码示例：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The model file
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型文件
- en: The following is the code sample of the model.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的模型代码示例。
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, the CI object database's method is called for generating and
    executing the SQL query.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，CI 对象数据库的方法被调用以生成和执行 SQL 查询。
- en: Please refer to the CI database's library at [http://ellislab.com/codeigniter/user-guide/database/index.html](http://ellislab.com/codeigniter/user-guide/database/index.html).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 CI 数据库库[http://ellislab.com/codeigniter/user-guide/database/index.html](http://ellislab.com/codeigniter/user-guide/database/index.html)。
- en: For more information about models, refer to [Chapter 6](ch06.html "Chapter 6. Models"),
    *Models*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关模型的信息，请参阅[第6章](ch06.html "第6章。模型")，*模型*。
- en: The view file
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图文件
- en: The view in this example shows the table content received from the controller
    containing the `users` list as defined in the database.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中的视图显示了从控制器接收的表格内容，其中包含数据库中定义的 `users` 列表。
- en: 'The following is the corresponding rendered view:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的渲染视图：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Example 4 – interactive contact forms
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 4 – 交互式联系表单
- en: This example shows how to write a contact form using the CI form helper and
    the `form_validation` library.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例展示了如何使用 CI 表单辅助器和 `form_validation` 库编写联系表单。
- en: For more information about libraries, refer to [Chapter 4](ch04.html "Chapter 4. Libraries"),
    *Libraries*, and for information about helpers, refer to [Chapter 5](ch05.html
    "Chapter 5. Helpers"), *Helpers*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 关于库的更多信息，请参阅[第4章](ch04.html "第4章。库")，*库*，以及关于辅助器的信息，请参阅[第5章](ch05.html "第5章。辅助器")，*辅助器*。
- en: The CI controller defines a form validation setup using the `form_validation`
    library and renders a form view that uses the `form_validation` library setup
    to apply a desired validation on the submitted data by the user. If it's a success,
    the CI controller will render a view page displaying a success message, otherwise
    it will render the view page with the form and the error messages will be displayed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: CI 控制器使用 `form_validation` 库定义表单验证设置，并渲染一个表单视图，该视图使用 `form_validation` 库设置来对用户提交的数据应用所需的验证。如果成功，CI
    控制器将渲染显示成功消息的视图页面；否则，它将渲染包含表单的视图页面，并显示错误消息。
- en: The URI for this example is `http://ourdomain.com/index.php/contact`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的 URI 为 `http://ourdomain.com/index.php/contact`。
- en: 'In order to perform this example, we shall build the following three scripts:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行此示例，我们需要构建以下三个脚本：
- en: 'The contact form controller class: `application/controllers/contact.php`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系表单控制器类：`application/controllers/contact.php`
- en: 'The view form script: `application/views/contactview.php`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图表单脚本：`application/views/contactview.php`
- en: 'The view success page script: `application/views/contactsuccess.php`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看成功页面脚本：`application/views/contactsuccess.php`
- en: The controller file
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: The controller creates a form for adding and editing a product.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器创建了一个用于添加和编辑产品的表单。
- en: For more information, refer to [Chapter 7](ch07.html "Chapter 7. Views"), *Views*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅[第 7 章](ch07.html "第 7 章。视图")，*视图*。
- en: 'The following is the code sample of the controller:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的控制器代码示例：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The view file
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图文件
- en: The view file displays the contact form for receiving data from the user.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 视图文件显示用于从用户接收数据的联系表单。
- en: 'The following is the corresponding rendered form view:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的渲染表单视图：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have reviewed the CI directory tree, especially the application
    folder, which is the heart and soul of any CI project. In the next chapter, we
    will review the configurations, such as database and naming conventions that are
    essential for the CI project.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 CI 目录树，特别是应用程序文件夹，它是任何 CI 项目的核心和灵魂。在下一章中，我们将回顾配置，例如数据库和命名约定，这些对于
    CI 项目至关重要。
