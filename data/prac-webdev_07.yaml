- en: Chapter 7. jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 jQuery
- en: I find **jQuery** to be one of the coolest things in web development. I was
    doing some self study, following the hours of the class I mentioned, at the wonderful
    university town of Leuven, which had an equally wonderful computer book store.
    This is where I discovered jQuery.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为**jQuery**是网络开发中最酷的事情之一。我正在做一些自学，按照我提到的课程时间，在美丽的卢汶大学城，那里有一个同样美丽的计算机书店。正是在这里我发现了jQuery。
- en: Every chapter that follows relies/depends on, and uses, jQuery so it is very
    important to know jQuery well from the get go. So, what exactly is jQuery? It
    is a popular JavaScript library, and the overall benefit of using it is that you
    can write cleaner, more compact code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章都依赖于并使用jQuery，因此从一开始就非常重要的是要很好地了解jQuery。那么，jQuery究竟是什么呢？它是一个流行的JavaScript库，使用它的总体好处是你可以编写更干净、更紧凑的代码。
- en: So, what is a library? Well, it can be a place with a lot of books in it. I,
    myself, like the one of the Plantijn-Moretus Museum in Antwerp, where they all
    printed their books themselves centuries ago. Rubens was the illustrator and house
    portraitist. UNIX and Java folks think of libraries as already compiled code,
    typically containing predefined functions, which are placed in a file of a special
    format and can be loaded with the program itself. JavaScript libraries also can
    contain predefined functions, but, other than that, they just contain readable
    JavaScript code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是库呢？嗯，它可能是一个有很多书的场所。我自己喜欢安特卫普的Plantijn-Moretus博物馆的那个，他们在几个世纪前都自己印刷书籍。鲁本斯是插图画家和宅邸肖像画家。UNIX和Java人士认为库是已经编译好的代码，通常包含预定义的函数，这些函数放置在特殊格式的文件中，并且可以与程序本身一起加载。JavaScript库也可以包含预定义的函数，但除此之外，它们只包含可读的JavaScript代码。
- en: Most JavaScript libraries come in two formats, regular or minimized, typically
    called `name.js` and `name.min.js`. Those minimized versions have all spaces,
    new lines, and so on, stripped out to make them smaller, and thus reduce download
    time. To use them, you can simply include them with your program.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数JavaScript库有两种格式，常规或最小化，通常称为`name.js`和`name.min.js`。这些最小化版本去除了所有空格、换行符等，以减小文件大小，从而减少下载时间。要使用它们，你可以简单地将它们包含在你的程序中。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: jQuery uses CSS style selectors, which we already know from [Chapter 3](ch03.html
    "Chapter 3. CSS"), *CSS*, to access DOM elements. Besides allowing you to write
    JavaScript code faster and cleaner, jQuery will take care of certain things, such
    as workarounds for browser incompatibilities, so you no longer have to write these
    yourself.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery使用CSS样式选择器，这是我们已经在[第3章](ch03.html "第3章。CSS")中了解到的，*CSS*，来访问DOM元素。除了让你能更快、更干净地编写JavaScript代码外，jQuery还会处理某些事情，例如解决浏览器兼容性问题，因此你不再需要自己编写这些代码。
- en: Obtaining the jQuery library
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取jQuery库
- en: You can always download jQuery from [jquery.com](http://jquery.com). You may
    want to use the minimized version once you go to production. During development,
    I would stay with the easier to read version so that you can, from time to time,
    add code for debugging purposes, as long as you do not forget to remove it later
    on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[jquery.com](http://jquery.com)下载jQuery。一旦进入生产阶段，你可能想使用最小化版本。在开发过程中，我会坚持使用更容易阅读的版本，这样你就可以不时地添加代码进行调试，只要你别忘了稍后将其删除。
- en: Where to place the jQuery library on your page?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的页面上如何放置jQuery库？
- en: 'Not everyone agrees on what the right thing to do here is. There is always
    a concern about the amount of time it takes to load a file. There is going to
    be a difference if you put the statement in the `<head>` section of your document
    or right before the closing `</body>` tag to load the jQuery library - for example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是每个人都同意在这里应该做什么。总是会有关于加载文件所需时间的担忧。如果你在文档的`<head>`部分或紧接在关闭`</body>`标签之前加载jQuery库，将会产生差异——例如：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The concern is the time it takes to load the library. I sometimes place everything
    that is a library, in other words, something that delivers functionality without
    actually doing anything, in the head section of the file. This means that the
    functionality will be loaded before the HTML.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 担忧的是加载库所需的时间。我有时会将所有是库的东西，换句话说，即那些不实际做任何事情但提供功能的东西，放在文件的头部部分。这意味着功能将在HTML之前加载。
- en: 'You will always use jQuery in conjunction with your own JavaScript file, for
    example, `mycode.js`. This file will contain your jQuery lines of code inside
    the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你将始终与自己的JavaScript文件一起使用jQuery，例如，`mycode.js`。此文件将包含以下内容中的jQuery代码行：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'All the code you put there will be executed after your page is loaded. As a
    consequence, this file needs to be placed in your file after all the HTML that
    makes up your page, preferably right before the closing `</body>` tag:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您放入那里的所有代码将在页面加载后执行。因此，此文件需要放在您的文件中，在构成您页面的所有HTML之后，最好是在关闭`</body>`标签之前：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: jQuery UI and jQuery Mobile
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery UI和jQuery Mobile
- en: '**jQuery UI** and **jQuery Mobile** are two additional libraries of the jQuery
    family. jQuery **User Interface** (**UI**) offers you a number of widgets that
    you can use in the user interface part of your site. My favorite ones are `accordion`
    and `datepicker`. Unlike jQuery itself, which is JavaScript only, jQuery UI also
    comes with a whole bunch of CSS files. This means that as soon as you use one
    of those widgets, they will have their own look and feel.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery UI**和**jQuery Mobile**是jQuery家族的两个附加库。jQuery **用户界面**（**UI**）为您提供了许多小部件，您可以在网站的用户界面部分使用。我最喜欢的有`accordion`和`datepicker`。与仅使用JavaScript的jQuery本身不同，jQuery
    UI还附带了一整套CSS文件。这意味着，一旦您使用这些小部件之一，它们将具有自己的外观和感觉。'
- en: Not to worry, jQuery provides a cool tool called **Themeroller**. With this
    tool, you can generate a customized set of CSS files so that the colors and other
    look and feel features of the jQuery UI elements match those of your own stylesheets.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不必担心，jQuery提供了一个名为**Themeroller**的酷工具。使用这个工具，您可以生成一组定制的CSS文件，以便jQuery UI元素的色彩和其他外观感觉功能与您的样式表相匹配。
- en: jQuery mobile is another jQuery based CSS/JavaScript extension that offers you
    user interface elements to create **mobile first** sites and applications. You
    can create web pages that will work on phones, tablets, and desktops. We will
    dedicate an entire chapter to mobile first, and then responsive design later in
    this book. For now, take away that jQuery Mobile is a framework that allows you
    to take advantage of the hardware and gadgets of your phone in your web app, such
    as having a datepicker that behaves in the same way you set your alarm on your
    phone, automatically dialing the phone number that is on a web page by clicking
    on it, and so on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery mobile是另一个基于jQuery的CSS/JavaScript扩展，它为您提供了用户界面元素来创建**移动优先**的网站和应用。您可以创建将在手机、平板电脑和桌面上工作的网页。我们将在这本书中专门用一章来介绍移动优先，然后在后面介绍响应式设计。现在，请记住jQuery
    Mobile是一个框架，它允许您在您的Web应用中利用手机的硬件和设备，例如拥有一个与您在手机上设置闹钟相同行为的日期选择器，通过点击网页上的电话号码自动拨打电话等。
- en: We are not going to use jQuery Mobile in this book. Instead, we will present
    a different CSS/JavaScript framework called **Foundation**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书中不会使用jQuery Mobile。相反，我们将介绍一个名为**Foundation**的不同的CSS/JavaScript框架。
- en: Using jQuery selectors and methods
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery选择器和方法
- en: 'One of the things that make jQuery so easy to use is that you can use CSS style
    selectors to look for elements in your page. So rather than having to learn more
    JavaScript methods, you just use what you already know. In real code, this means
    instead of using the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使jQuery如此易于使用的原因之一是，您可以使用CSS样式选择器在您的页面上查找元素。因此，您不必学习更多的JavaScript方法，只需使用您已经知道的方法。在实际代码中，这意味着您不必使用以下：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can use:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`$ ()` is a shorthand notation for `jQuery()`. If you use jQuery together with
    a similar library, such as `Dojo`, check the documentation on how to keep the
    two apart.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ ()`是`jQuery()`的缩写表示法。如果您同时使用jQuery和类似库，如`Dojo`，请查看文档了解如何将两者区分开来。'
- en: 'The above statement will create a jQuery object, which will contain zero or
    one DOM elements (because there can only be one element with the `id` content).
    The next statement can potentially contain a lot more elements, as many as there
    are with the class `green`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将创建一个jQuery对象，该对象将包含零个或一个DOM元素（因为只能有一个具有`id`内容的元素）。下一个语句可能包含很多元素，多达具有`green`类的元素数量：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can tell, this is the same as in CSS, `#` for an `id`, `.` for a class.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这与CSS中的用法相同，`#`用于`id`，`.`用于`class`。
- en: 'Now we can start using methods. What if we wanted to change all elements of
    the class `green` to be of the class `yellow`? For this purpose, we can use the
    `addClass` method:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始使用方法了。如果我们想将所有具有`green`类的元素更改为`yellow`类，怎么办？为此，我们可以使用`addClass`方法：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Of course, you probably want to replace green with yellow, so the class `green`
    has to be removed as well, for which you can use the `removeClass` method. One
    of the great features of jQuery methods is that you can nest them, so we can do
    all of these things in a single line of code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能想将绿色替换为黄色，所以类`green`也必须被移除，你可以使用`removeClass`方法。jQuery方法的伟大特性之一是你可以将它们嵌套，所以我们可以用一行代码完成所有这些事情：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will now walk you through a number of very useful methods that you can use
    to change your web page on the fly, or to figure out what is on the page right
    now. Most of these are *getters* as well as *setters*. What this means is that
    you can `get` the value of an element, or, if you specify an argument, this will
    be used to set the value. Here we go.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向您介绍一些非常有用的方法，您可以使用它们即时更改您的网页，或者找出页面上现在有什么。这些大多数都是*获取器*以及*设置器*。这意味着你可以获取元素的值，或者，如果你指定了一个参数，这将用于设置值。我们开始吧。
- en: html()
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`html()`'
- en: 'With this method, you can either get or set the HTML contents of an element:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，你可以获取或设置一个元素的HTML内容：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The second set of instructions will replace the contents of `#content` with
    the preceding HTML code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二组指令将用前面的HTML代码替换`#content`的内容。
- en: text()
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`text()`'
- en: 'Similar, but different to the previous method, this gets/sets the text inside
    an HTML tag:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于前一种方法，但有所不同，这个方法获取/设置HTML标签内的文本：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: attr()
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`attr()`'
- en: 'This method lets us manipulate the value of an attribute:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法让我们可以操作属性的值：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: .val()
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.val()`'
- en: 'This method gets or sets the value of an element:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法获取或设置元素的值：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: show() and hide()
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`show()` 和 `hide()`'
- en: 'These are extremely useful methods to use in dynamic web pages. Very often,
    you want to generate HTML code for a part of the screen, and then display that
    code, and also do the opposite: make part of the screen disappear. The simple
    technique to achieve this is to prepare the content of a `<div>` element, insert
    it into the `<div>` element, and then make it visible. You would do this by having
    the following statement in your custom JavaScript file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在动态网页中非常有用的方法。非常经常，你想要为屏幕的一部分生成HTML代码，然后显示该代码，同时也做相反的事情：让屏幕的一部分消失。实现这一点的简单技术是准备一个`<div>`元素的内容，将其插入到`<div>`元素中，然后使其可见。你会在自定义JavaScript文件中这样做：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'These methods are also very useful to prevent a phenomenon known as **Flickering
    Of Unprocessed Content** (**FOUC**). What do we mean by this? Remember the discussion
    about where to place your jQuery library and custom JavaScript files inside the
    page? Let''s assume you use a JavaScript plugin that creates a slideshow by manipulating
    an unordered list (`<ul>`) of images (`<img>`). So, your original HTML may look
    like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法也非常有用，可以防止一种称为**未处理内容闪烁**（**FOUC**）的现象。我们这是什么意思？还记得关于在哪里放置你的jQuery库和自定义JavaScript文件的讨论吗？让我们假设你使用一个通过操作图像的无序列表（`<ul>`）来创建幻灯片的JavaScript插件（`<img>`）。所以，你的原始HTML可能看起来像这样：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The jQuery plugin you are using, for instance, the **OWL Carousel** ([owlgraphic.com](http://owlgraphic.com))
    will take this HTML code and turn it into a fancy slideshow. However, if the connection
    is rather slow, you may end up seeing all your images stacked on top of each other
    first, with a silly bullet in front of them, and only seconds later your slideshow
    appears. You can work your way around this by placing the following in your stylesheet:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在使用的jQuery插件，例如，**OWL Carousel** ([owlgraphic.com](http://owlgraphic.com))
    将将这段HTML代码转换成一个华丽的幻灯片。然而，如果连接相当慢，你可能会首先看到所有图片堆叠在一起，前面有一个愚蠢的子弹，然后几秒钟后幻灯片才出现。你可以通过在你的样式表中放置以下内容来解决这个问题：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, in your custom JavaScript file, after the code that builds the slideshow
    animation, you include:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在你的自定义JavaScript文件中，在构建幻灯片动画的代码之后，你包含以下内容：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will cause nothing to be rendered on that part of the screen until the
    slideshow is ready.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致屏幕的这一部分在幻灯片准备好之前不渲染任何内容。
- en: .find()
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.find()`'
- en: 'The `.find` method is extremely powerful. You can find almost anything in your
    page and then do things with the result. Here is an example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`.find`方法非常强大。你可以在你的页面上找到几乎所有东西，然后对结果进行操作。以下是一个例子：'
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will look for and find all `<p>` elements with the class `address` in
    the element with the ID `record`. Once again, you can nest or chain it with other
    methods. The next example looks for an element with the attribute name set to
    `id` and then looks up its value:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将查找并找到具有 `address` 类的所有 `<p>` 元素，在具有 ID `record` 的元素中。再一次，你可以嵌套或链式调用它与其他方法。下一个例子查找具有
    `id` 属性的元素，然后查找它的值：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: .parent()
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .parent()
- en: 'Using `.parent()` can be even more powerful. The first example looks up the
    `<tr>` element(s) of the specified `<td>`, and the next example goes up three
    levels:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.parent()` 可以更加强大。第一个例子查找指定的 `<td>` 的 `<tr>` 元素，下一个例子向上查找三个级别：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: .next()
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .next()
- en: 'The `.next()` method looks sideways. It returns the sibling of the element
    to the right of the DOM structure, or not, if the optional selector does not have
    a match .`next()` only looks for the very next, so you will need to chain it if
    you want more:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`.next()` 方法是向右查看的。它返回 DOM 结构右侧元素的兄弟元素，如果没有可选选择器匹配，则不返回。`.next()` 只查找紧挨着的元素，所以如果你想查找更多，你需要链式调用它：'
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: .css()
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .css()
- en: 'Using jQuery, you can also get or set the CSS values of any given element.
    In the first example, we retrieve the `background-color`; in the second example,
    we set the `color`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery，你也可以获取或设置任何给定元素的 CSS 值。在第一个例子中，我们检索 `background-color`；在第二个例子中，我们设置
    `color`：
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: jQuery documentation
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 文档
- en: The complete jQuery documentation and description of many more cool methods
    and features can be found at [jquery.com](http://jquery.com).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 jQuery 文档以及更多酷方法的描述可以在 [jquery.com](http://jquery.com) 找到。
- en: There are many jQuery books on the market, maybe too many to determine which
    is the one for you; this book is not one of them. We will only walk you through
    all the technologies you need to do web development - jQuery being an important
    one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有很多 jQuery 书籍，可能太多以至于难以确定哪一本适合你；这本书不是其中之一。我们将只带你了解所有你需要进行 Web 开发的技术——jQuery
    是其中之一。
- en: If you need to choose your first book on jQuery, I recommend the latest edition
    of *Learning jQuery* by Packt Publishing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要选择你的第一本 jQuery 书籍，我推荐 Packt Publishing 的最新版 *Learning jQuery*。
- en: Event handlers and jQuery
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理程序和 jQuery
- en: 'Congratulations, you have reached a major milestone in the book. This page
    introduces a few new concepts all at once and you are going to use a lot of them
    daily. Let''s assume that you are building a website with a menu. The menu is
    built using an ordered list, and here is the code for one menu item:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你已经达到了本书的一个重大里程碑。这一页一次性介绍了几个新概念，你将每天都会用到很多。假设你正在构建一个带有菜单的网站。菜单是用有序列表构建的，下面是一个菜单项的代码：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In your custom JavaScript file, you have:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的自定义 JavaScript 文件中，你有：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let's first discuss the `.on()` part. This is the jQuery way of performing **event
    handling**. An event occurs when the visitor of your site performs a certain action.
    A typical action is the click of a mouse on a button or a link. We can then catch
    that event and perform certain tasks inside the function that is our event handler.
    In the previous example, we perform them all in a function that we called `updateNewsContent()`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先讨论 `.on()` 部分。这是 jQuery 执行 **事件处理** 的方式。当网站访客执行某些操作时，就会发生事件。一个典型的操作是在按钮或链接上点击鼠标。然后我们可以捕获该事件，并在我们的事件处理函数中执行某些任务。在上一个例子中，我们在名为
    `updateNewsContent()` 的函数中执行了所有这些操作。
- en: It is important to repeat that your jQuery code can only access and manipulate
    DOM elements after they have been loaded. So, if you dynamically create HTML after
    your JavaScript has been executed, they will be not manipulated by your JavaScript
    code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要重复一点，你的 jQuery 代码只能在 DOM 元素加载后访问和操作。所以，如果你在 JavaScript 执行后动态创建 HTML，它们将不会被你的
    JavaScript 代码操作。
- en: The way the `.on()` method is used can only help. In the example, we attach
    the `.on()` method to the `#mainmenu` element; in all likelihood a `<div>` that
    is always there from the initial page loading.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`.on()` 方法的用法只能帮助。在例子中，我们将 `.on()` 方法附加到 `#mainmenu` 元素上；很可能是一个 `<div>`，它从页面初始加载就一直在那里。'
- en: 'The first argument of the `.on()` method is the event itself; in our example,
    the `click` event. The second argument is optional, but I use all the time, and
    it describes the selector that we want to trigger an event. This makes this event
    a so-called **delegated** event. We could have also written it in this way:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`.on()` 方法的第一个参数是事件本身；在我们的例子中，是 `click` 事件。第二个参数是可选的，但我经常使用，它描述了我们想要触发事件的选择器。这使得这个事件成为所谓的
    **委托** 事件。我们也可以这样写：'
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This makes it a so-called **direct event**. What is the difference? If an `<a>`
    tag with class news is dynamically added inside the `#mainmenu` div after the
    initial page load and it is clicked on, the delegated event will catch that, whereas
    the direct event will not.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这使其成为所谓的**直接事件**。有什么区别呢？如果一个带有class news的`<a>`标签在页面初始加载后动态地添加到`#mainmenu` div内部，并且被点击，那么委托事件会捕获它，而直接事件则不会。
- en: This is a common surprise during the development process, noticing that what
    worked before, suddenly, does not appear to be doing anything. Often the remedy
    is to start a new event handler inside your event handler. We will provide an
    example in a later chapter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在开发过程中常见的惊喜之一，注意到之前工作正常的东西突然似乎没有做任何事情。通常的补救措施是在你的事件处理程序内部启动一个新的事件处理程序。我们将在后面的章节中提供一个示例。
- en: Finally, there is the function itself. Notice that it can have an argument.
    Inside the function, you can access that event object and apply methods and access
    properties. You will see some examples in the next chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是函数本身。请注意，它可以有一个参数。在函数内部，你可以访问那个事件对象并应用方法以及访问属性。你将在下一章中看到一些示例。
- en: preventDefault()
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: preventDefault()
- en: The sample HTML code contains an anchor tag (`<a>`) with a `href` attribute,
    basically creating a link to a PHP file `intnews.php`. Let's assume that we use
    an ancient browser, or a browser with JavaScript turned off. The user clicking
    on the `<a>` tag would cause the `intnews.php` to be opened.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 样本HTML代码包含一个带有`href`属性的锚标签（`<a>`），基本上创建了一个链接到PHP文件`intnews.php`。让我们假设我们使用一个古老的浏览器，或者一个JavaScript被关闭的浏览器。用户点击`<a>`标签会导致`intnews.php`被打开。
- en: With JavaScript, we have determined what we want to happen in our event handler
    code, so we do not want the link to occur, we just want to stay on the same page.
    The `preventDefault()` method will, indeed, do what its name suggests. This technique
    is part of what is referred to as **Progressive Enhancement**, which will be discussed
    in a later chapter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript，我们在事件处理程序代码中确定了我们想要发生的事情，所以我们不希望链接发生，我们只想停留在同一页面上。`preventDefault()`方法确实会做它名字所暗示的事情。这种技术是所谓的**渐进增强**的一部分，这将在后面的章节中讨论。
- en: $(this)
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $(this)
- en: Whereas you may find from time to time **this** in sample JavaScript code, in
    jQuery we use `$(this)`. Inside the function, it represents the jQuery object
    of the matching element(s).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 而在样本JavaScript代码中，你可能时不时地会看到**this**，但在jQuery中我们使用`$(this)`。在函数内部，它代表匹配元素（s）的jQuery对象。
- en: updateNewsContent()
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: updateNewsContent()
- en: We deliberately did not describe what happens inside this sample function. In
    this section of the program, what typically goes on is that data is retrieved
    from the web server using PHP and possibly a database. You have seen just a few
    examples using classical web development techniques, such as specifying a PHP
    file as the action argument in a form, which will force us to go to another page.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意没有描述这个样本函数内部的操作。在这个程序的部分，通常会发生的是使用PHP和可能是一个数据库从网络服务器检索数据。你已经看到了一些使用经典Web开发技术的示例，例如在表单中将PHP文件指定为操作参数，这将迫使我们转到另一个页面。
- en: We will, however, use jQuery methods that will allow us to execute PHP code
    on the server while remaining on the same page. The underlying technique used
    by these methods is called **AJAX**, and that is the subject of the next chapter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将使用允许我们在同一页面上执行PHP代码的jQuery方法。这些方法所使用的底层技术被称为**AJAX**，这是下一章的主题。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started moving away from classical web development for the
    first time. We introduced jQuery, a powerful JavaScript library that allows us
    to write cleaner and more compact JavaScript code. Moreover, it is going to be
    easier for us to do so, as it uses CSS style selectors to specify DOM elements,
    rather than JavaScript methods that we would have to learn.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们第一次开始远离传统的Web开发。我们介绍了jQuery，这是一个强大的JavaScript库，它允许我们编写更干净、更紧凑的JavaScript代码。此外，我们将更容易做到这一点，因为它使用CSS样式选择器来指定DOM元素，而不是我们不得不学习的JavaScript方法。
- en: How to download and where to place the jQuery library was explained. We illustrated
    the remainder of the chapter with examples using jQuery's most useful and powerful
    methods. To conclude the chapter, we introduced the jQuery way of creating event
    handlers, possibly the most important concept to grasp at this stage of the book.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如何下载jQuery库以及将其放置在哪里已经解释过了。我们使用jQuery最有用和最强大的方法来举例说明本章的其余部分。为了总结本章，我们介绍了jQuery创建事件处理程序的方式，这可能是本书这一阶段最重要的概念之一。
- en: In the next chapter, we will continue to use jQuery, not to traverse the DOM
    and change a little bit of content here and there, but to generate entire chunks
    of our page on the Web server by executing PHP code that is called using jQuery
    methods. Then we can use the data to update parts of our page, without ever leaving
    it. All of this is using a technique called AJAX.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续使用 jQuery，不是用来遍历 DOM 和随意更改一些内容，而是通过执行使用 jQuery 方法调用的 PHP 代码，在 Web
    服务器上生成我们页面的整个块。然后我们可以使用这些数据来更新我们页面的部分，而无需离开它。所有这些操作都是通过一种称为 AJAX 的技术实现的。
