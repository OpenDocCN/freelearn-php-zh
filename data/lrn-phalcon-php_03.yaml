- en: Chapter 3. Learning Phalcon's ORM and ODM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 学习Phalcon的ORM和ODM
- en: 'Now that you have learned a little bit about Phalcon''s internals and we have
    our project structure, we can move forward to a more serious thing—databases.
    In this chapter, we will cover these topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对Phalcon的内部结构有了一些了解，我们也拥有了我们的项目结构，我们可以继续进行更严肃的事情——数据库。在本章中，我们将涵盖以下主题：
- en: The main differences between SQL and NoSQL databases
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL和NoSQL数据库之间的主要区别
- en: Learning how to connect to a database
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何连接到数据库
- en: ORM/ODM CRUD operations (create, read, update, and delete) and transactions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ORM/ODM CRUD操作（创建、读取、更新和删除）和事务
- en: Understanding the drawbacks of an ORM in general, and how we can improve performance
    using caching methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解ORM的一般缺点，以及我们如何通过缓存方法来提高性能
- en: The main differences between SQL and NoSQL databases
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL和NoSQL数据库之间的主要区别
- en: MySQL is good! It is a powerful RDBMS with a big market share, supported by
    a large community. It is open source (though enterprise flavors exist), and almost
    every PHP application uses it as the main database system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL很棒！它是一个功能强大的关系型数据库管理系统（RDBMS），拥有很大的市场份额，并得到了一个庞大社区的支持。它是开源的（尽管存在企业版），而且几乎每个PHP应用程序都将它作为主要的数据库系统。
- en: But once in a while, you will notice that MySQL isn't good enough for your needs.
    Maybe you have heard people talk about MongoDB, CouchDB, Cassandra, and so on.
    We will use MongoDB in our project, so I am going to talk about it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但有时候，你会注意到MySQL并不足以满足你的需求。也许你听说过人们谈论MongoDB、CouchDB、Cassandra等等。在我们的项目中，我们将使用MongoDB，所以我将谈谈它。
- en: In general, you will use a NoSQL system, such as MongoDB, when you want to develop
    real-time analytics, cache, and logs; store big data, such as comments or likes;
    and handle many other situations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你想要开发实时分析、缓存和日志；存储大数据，如评论或点赞；以及处理许多其他情况时，你会使用NoSQL系统，如MongoDB。
- en: 'A few of the differences between a SQL and NoSQL database are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SQL数据库和NoSQL数据库之间的一些区别如下：
- en: NoSQL is *not* relational
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NoSQL不是关系型的
- en: NoSQL is not reliable; or better said, it is not safe to use in a complex system,
    because it does not support transactions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NoSQL不可靠；或者说，在复杂系统中使用它并不安全，因为它不支持事务
- en: A relational database requires a structure with defined attributes to hold the
    data, but a NoSQL database usually allows free-flow operations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系型数据库需要一个具有定义属性的架构来存储数据，但NoSQL数据库通常允许自由流动的操作
- en: Later in our project, we will use MongoDB mainly for logging and comments. We
    have already installed MongoDB in the first chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目后期，我们将主要使用MongoDB进行日志和评论。我们已经在第一章中安装了MongoDB。
- en: 'Let''s look at a few usage examples:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些使用示例：
- en: '| SQL | MongoDB |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| SQL | MongoDB |'
- en: '| --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `SELECT a,b FROM users` | `$db->users->find([], ["a" => 1, "b" => 1]);` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT a,b FROM users` | `$db->users->find([], ["a" => 1, "b" => 1]);` |'
- en: '| `SELECT * FROM users WHERE age=33` | `$db->users->find(["age" => 33]);` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT * FROM users WHERE age=33` | `$db->users->find(["age" => 33]);` |'
- en: On the official PHP website, you can check out the full SQL-to-MongoDB mapping
    chart ([http://php.net/manual/ro/mongo.sqltomongo.php](http://php.net/manual/ro/mongo.sqltomongo.php)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方PHP网站上，你可以查看完整的SQL到MongoDB映射图表（[http://php.net/manual/ro/mongo.sqltomongo.php](http://php.net/manual/ro/mongo.sqltomongo.php)）。
- en: Connecting to the database
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: In the previous chapter, we added a global configuration file and configuration
    files per module. In order to be able to connect to a database, we need to add
    some lines to our configuration file first.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们添加了全局配置文件和每个模块的配置文件。为了能够连接到数据库，我们首先需要在配置文件中添加一些行。
- en: 'Let''s recall our directory structure:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的目录结构：
- en: '![Connecting to the database](img/B03522_03_06.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![连接到数据库](img/B03522_03_06.jpg)'
- en: 'In order to connect to a database, we need to create it. Create a database
    named `learning_phalcon`. You can do this quickly with the help of the following
    command line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接到数据库，我们需要创建它。创建一个名为`learning_phalcon`的数据库。你可以使用以下命令行快速完成此操作：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the global configuration file (`config/config.php`), and add these lines:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 打开全局配置文件（`config/config.php`），并添加以下行：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have the configuration parameters for our database, we must create
    a service. Open the global services file (`config`/`service.php`) and add the
    following lines:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了数据库的配置参数，我们必须创建一个服务。打开全局服务文件（`config/service.php`），并添加以下行：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can now save and close this file. Next, we are going to create a table named
    `article` in our database, and we''ll insert one sample record into this table:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以保存并关闭此文件。接下来，我们将在数据库中创建一个名为`article`的表，并将一条样本记录插入到这个表中：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To test the database connection, we will use our `Frontend` and `Core` modules.
    In the `Core` module, we are going to create a model for the article table. Based
    on the previous chapter, the directory structure of the `Frontend` module should
    look like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试数据库连接，我们将使用我们的`Frontend`和`Core`模块。在`Core`模块中，我们将为文章表创建一个模型。根据上一章，`Frontend`模块的目录结构应该如下所示：
- en: '![Connecting to the database](img/B03522_03_07.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![连接到数据库](img/B03522_03_07.jpg)'
- en: 'For the `Core` module, the structure should look like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Core`模块，结构应该如下所示：
- en: '![Connecting to the database](img/B03522_03_08.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![连接到数据库](img/B03522_03_08.jpg)'
- en: 'We will create the model for the `article` table in a new folder, named `Models`.
    Create the `Models` directory in `modules`/`Core`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一个名为`Models`的新文件夹中创建`article`表的模型。在`modules`/`Core`下创建`Models`目录：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `Models` directory, create two new files: `Base.php` and `Article.php`.
    We''ll now look at these files:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Models`目录下，创建两个新的文件：`Base.php`和`Article.php`。我们现在将查看这些文件：
- en: 'The content of `Base.php` is as follows:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Base.php`的内容如下：'
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The content of `Article.php` is this:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Article.php`的内容如下：'
- en: '[PRE6]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Personally, I like to work in the cleanest manner possible. We are going to
    use an intermediate file—a manager—to handle all of the heavy logic. This means
    that you are not going to use the models in the controller, and you are not going
    to alter the models by adding queries or other kind of data. The models should
    be as clean as possible. On the other hand, some people prefer to move the heavy
    logic to models. It''s your choice, but in this book we are going to use managers.
    This being said, let''s create the manager for the article:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人喜欢尽可能干净地工作。我们将使用一个中间文件——管理器——来处理所有复杂的逻辑。这意味着你不会在控制器中使用模型，也不会通过添加查询或其他类型的数据来修改模型。模型应该尽可能干净。另一方面，有些人喜欢将复杂的逻辑移动到模型中。这是你的选择，但在这本书中，我们将使用管理器。话虽如此，让我们为文章创建管理器：
- en: 'Go to modules/Core/ and create a folder named Managers:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`modules/Core/`并创建一个名为`Managers`的文件夹：
- en: '[PRE7]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create two new files named `BaseManager.php` and `ArticleManager.php`, and
    add the following content:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个名为`BaseManager.php`和`ArticleManager.php`的新文件，并添加以下内容：
- en: 'The `BaseManager.php` file will be placed under `modules/Core/Managers/`:'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BaseManager.php`文件将被放置在`modules/Core/Managers/`下：'
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `ArticleManager.php` file will be placed under `modules/Core/Managers/`:'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ArticleManager.php`文件将被放置在`modules/Core/Managers/`下：'
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The new directory structure of the `Core` module should now look like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`Core`模块的新目录结构现在应该如下所示：'
- en: '![Connecting to the database](img/B03522_03_09.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![连接到数据库](img/B03522_03_09.jpg)'
- en: 'All good so far! Let''s try to make use of this manager to list the records
    from our `Article` table. For that, we need to declare it as a service first.
    To do so, perform the following steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利！让我们尝试使用这个管理器来列出`Article`表中的记录。为此，我们首先需要将其声明为一个服务。为此，请执行以下步骤：
- en: 'Open the global services file (`config/service.php`), and add the following
    content:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开全局服务文件（`config/service.php`），并添加以下内容：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We will use the `frontend` module to carry out this test.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用`frontend`模块来完成这个测试。
- en: 'Navigate to the `Frontend` directory, edit the `modules/Frontend/Config/routing.php`
    file, and add this content:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Frontend`目录，编辑`modules/Frontend/Config/routing.php`文件，并添加以下内容：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first routing pattern will point any request made at `http://www.learning-phalcon.localhost/articles`
    to the `frontend` module, the `article` controller, and the `listAction` action.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个路由模式将把对`http://www.learning-phalcon.localhost/articles`的任何请求指向`frontend`模块、`article`控制器和`listAction`操作。
- en: The second pattern will point to a different action within the article controller,
    named `readAction` and will pass the slug parameter to this action.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二种模式将指向文章控制器中的不同操作，命名为`readAction`，并将slug参数传递给此操作。
- en: 'Next, we will create the `article` controller and the template. Navigate to
    `modules/Frontend/Controllers`, and create a file named `ArticleController.php`
    with the following content:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建`article`控制器和模板。导航到`modules/Frontend/Controllers`，并创建一个名为`ArticleController.php`的文件，内容如下：
- en: '[PRE12]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In `listAction`, we get the `article` manager from DI, and assign the result
    of the `find()` method to a view variable named `articles`.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`listAction`中，我们从DI获取`article`管理器，并将`find()`方法的结果分配给名为`articles`的视图变量。
- en: 'Now let''s create a template for this action. Navigate to `modules/Frontend/Views/Default`,
    and create a new directory named `article`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为这个操作创建一个模板。导航到 `modules/Frontend/Views/Default`，并创建一个名为 `article` 的新目录：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `article` folder, create a file named `list.volt` and add the following
    content to it:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `article` 文件夹中，创建一个名为 `list.volt` 的文件，并将其内容添加如下：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `Frontend` directory structure should look like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Frontend` 目录结构应如下所示：'
- en: '![Connecting to the database](img/B03522_03_10.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![连接到数据库](img/B03522_03_10.jpg)'
- en: 'If you did everything by the book, you''re all set. You can now go to `http://www.learning-phalcon.localhost/articles`,
    and you should be able to see our test article as shown here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一切都按照书中的步骤来做，那么你已经准备好了。现在你可以访问 `http://www.learning-phalcon.localhost/articles`，你应该能看到如这里所示的文章测试内容：
- en: '![Connecting to the database](img/B03522_03_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![连接到数据库](img/B03522_03_01.jpg)'
- en: Great job! You are now connected to the database, and you have the first model
    and manager. We will continue this chapter with data manipulation, validations,
    and simple queries over MySQL and MongoDB.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！你现在已连接到数据库，并拥有了第一个模型和管理器。我们将继续本章，进行数据操作、验证以及简单的 MySQL 和 MongoDB 查询。
- en: ORM/ODM operations (create, update, delete, transactions, and validations)
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM/ODM 操作（创建、更新、删除、事务和验证）
- en: 'Before we continue, let''s make our article table a little more complex, by
    adding a few columns. We will add three more columns: `is_published`, `created_at`,
    and `updated_at`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们通过添加一些列来使我们的文章表变得更加复杂。我们将添加三个额外的列：`is_published`、`created_at` 和 `updated_at`。
- en: 'The `is_published` field will be a Boolean type (in MySQL, it will have a value
    of 0 or 1), and the `created_at` and `updated_at` fields will have the `datetime`
    type. They will hold information about when our article was created and when it
    was updated. You can alter the `article` table and add these fields using the
    following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`is_published` 字段将是一个布尔类型（在 MySQL 中，它将具有 0 或 1 的值），而 `created_at` 和 `updated_at`
    字段将具有 `datetime` 类型。它们将保存有关我们的文章何时创建以及何时更新的信息。你可以使用以下代码修改 `article` 表并添加这些字段：'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We also need to make modifications to our `Article` model and add the getters
    and setters for these new fields. Open the `modules/Core/Models/Article.php` file
    and add the following content:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对我们的 `Article` 模型进行修改，并添加这些新字段的获取器和设置器。打开 `modules/Core/Models/Article.php`
    文件，并添加以下内容：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Since most of the CRUD actions that we will use will be handled by the `Backoffice`
    module, we are going to set up this module as we did with the Frontend. The actual
    development of this module will be done later in the book. For now, we will enable
    a quick and simple CRUD operation for the `Article` table.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将会使用的大部分 CRUD 操作将由 `Backoffice` 模块处理，因此我们将按照前端模块的方式设置此模块。此模块的实际开发将在本书的后续章节中进行。目前，我们将为
    `Article` 表启用快速简单的 CRUD 操作。
- en: 'Let''s review our `Backoffice` directory structure. At this point, you should
    have the following structure:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下 `Backoffice` 目录结构。到目前为止，你应该有以下结构：
- en: '![ORM/ODM operations (create, update, delete, transactions, and validations)](img/B03522_03_11.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![ORM/ODM 操作（创建、更新、删除、事务和验证）](img/B03522_03_11.jpg)'
- en: 'For this to be functional, we will need to:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其功能正常，我们需要做以下事情：
- en: Add routing information
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加路由信息
- en: Create the controller and the actions
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器和操作
- en: Create the views
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: Adding the routing information
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加路由信息
- en: 'Edit the `config/routing.php` global routing file by adding the following content:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑全局路由文件 `config/routing.php`，并添加以下内容：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Delete (or overwrite) the routing file from the `Backoffice` module `modules/Backoffice`/`Config/routing.php`,
    and add a new one with the following content:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `Backoffice` 模块的 `modules/Backoffice/Config/routing.php` 中删除（或覆盖）路由文件，并添加一个包含以下内容的新文件：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Creating the controller and the actions
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建控制器和操作
- en: 'Navigate to `modules/Backoffice/Controllers/`, and create a new file named
    `ArticleController.php` with the following content:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `modules/Backoffice/Controllers/`，创建一个名为 `ArticleController.php` 的新文件，并包含以下内容：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Creating the views
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'Copy the views from `Frontend`. We will adapt them for our Backoffice module
    in [Chapter 7](ch07.html "Chapter 7. The Backoffice Module (Part 1)"), *The Backoffice
    Module (Part 1)*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `Frontend` 复制视图。我们将在第 7 章 [The Backoffice Module (Part 1)](ch07.html "第 7
    章。后端模块（第一部分）") 中对其进行适配，*后端模块（第一部分）*：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now let's modify the views a bit so that we can have a nice `Backoffice` module.
    Go to `modules/Backoffice/Views/`, open the `layout.volt` file, and make the following
    change.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改一下视图，以便我们可以有一个漂亮的`Backoffice`模块。转到`modules/Backoffice/Views/`，打开`layout.volt`文件，并做出以下更改。
- en: 'Look for this line:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 查找以下行：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Replace it with the following line:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将其替换为以下行：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a new file named `lp.backoffice.css` in `public/assets/default/css/`,
    and add the following content to it:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在`public/assets/default/css/`中创建一个名为`lp.backoffice.css`的新文件，并将以下内容添加到其中：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then we include the preceding file in our `layout.volt` file. We do this by
    looking for this line:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在`layout.volt`文件中包含前面的文件。我们通过查找以下行来完成此操作：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We replace it with the following line:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其替换为以下行：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the same `layout.volt` file, remove the following code snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的`layout.volt`文件中，删除以下代码片段：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following content between the `<body>` and `</body>` tags:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<body>`和`</body>`标签之间添加以下内容：
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We are done editing our layout.volt file, but we need to make one more change.
    Open `modules/Backoffice/Views/Default/article/list.volt`, and replace its content
    with the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经编辑完`layout.volt`文件，但我们需要进行一个额外的更改。打开`modules/Backoffice/Views/Default/article/list.volt`，并用以下代码替换其内容：
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After all of these changes, the new directory structure should look like what
    is shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些更改之后，新的目录结构应该看起来如下所示：
- en: '![Creating the views](img/B03522_03_12.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![创建视图](img/B03522_03_12.jpg)'
- en: 'Let''s open `http://www.learning-phalcon.localhost/backoffice/article/list`
    in a browser. If everything goes well, you should be able to see the new `Backoffice`
    layout and our test article in a list exactly like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中打开`http://www.learning-phalcon.localhost/backoffice/article/list`。如果一切顺利，您应该能够看到新的`Backoffice`布局和我们的测试文章，列表如下所示：
- en: '![Creating the views](img/B03522_03_02.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![创建视图](img/B03522_03_02.jpg)'
- en: 'Now that we have a UI, you can start learning about Phalcon''s ORM. You need
    to know that Phalcon provides three ways of working with databases:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了UI，您可以开始学习Phalcon的ORM。您需要知道Phalcon提供了三种与数据库交互的方式：
- en: Using ORM
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ORM
- en: Using PHQL
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHQL
- en: Using raw SQL
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原始SQL
- en: We will learn about all of these in this chapter. Let's start with ORM.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中学习所有这些。让我们从ORM开始。
- en: CRUD operations using ORM
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ORM进行CRUD操作
- en: 'By using the ORM, there is virtually no need to write any SQL in your code.
    Everything is OOP, and it is using the models to perform operations. The first,
    and the most basic, operation is retrieving data. In the old days, you would do
    this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用ORM，实际上您在代码中几乎不需要编写任何SQL。一切都是面向对象的，并且使用模型来执行操作。第一个，也是最基本，的操作是检索数据。在以前的日子里，您会这样做：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The class that our models are extending is \`Phalcon\Mvc\Mode`l. This class
    has some very useful methods built in, such as `find()`, `findFirst()`, `count()`,
    `sum()`, `maximum()`, `minimum()`, `average()`, `save()`, `create()`, `update()`,
    and `delete()`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模型所扩展的类是`Phalcon\Mvc\Model`。这个类内置了一些非常有用的方法，例如`find()`、`findFirst()`、`count()`、`sum()`、`maximum()`、`minimum()`、`average()`、`save()`、`create()`、`update()`和`delete()`。
- en: CRUD – reading data
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRUD – 读取数据
- en: 'We have already used the `find()` method in our `article` manager when calling
    `Article::find()`. By default, this method will return all the records from the
    `article` table, sorting them in a natural order. It also accepts an array with
    parameters. The following code examples will explain this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`article`管理器中调用`Article::find()`时使用了`find()`方法。默认情况下，此方法将返回`article`表中的所有记录，并按自然顺序排序。它还接受一个带有参数的数组。以下代码示例将解释这一点：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding example, we are searching for records that contain the `test-article-short-title`
    article slug. We bind the data order by the `created_at` field in a descending
    order, and limit the number of rows returned to one. The first key of the parameters
    array should always be the condition. Binding parameters is good practice in order
    to avoid SQL injections. I recommend that you always use it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们正在搜索包含`test-article-short-title`文章短标题的记录。我们按`created_at`字段降序绑定数据，并限制返回的行数为一条。参数数组的第一个键始终应该是条件。绑定参数是避免SQL注入的好做法。我建议您始终使用它。
- en: 'The result of `Article::find()` is an array of objects. This means that if
    we need to iterate between the results, we can do it like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`Article::find()`的结果是一个对象数组。这意味着如果我们需要遍历结果，我们可以这样做：'
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s add two new records to our `article` table, so that you can see live
    what it is happening:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`article`表中添加两条新记录，这样您就可以亲眼看到正在发生的事情：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you access `http://www.learning-phalcon.localhost/backoffice/article/list`
    now, you should be able to see the new records, as shown in this screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在访问`http://www.learning-phalcon.localhost/backoffice/article/list`，你应该能够看到新记录，如本截图所示：
- en: '![CRUD – reading data](img/B03522_03_03.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![CRUD – 读取数据](img/B03522_03_03.jpg)'
- en: Next, we are going to make some sorting tests. For reference, the default order
    shown in the preceding screenshot is a natural one, and the IDs are 1, 2, and
    3\. Keep this in mind, because we will refer to these IDs in the next few lines.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进行一些排序测试。为了参考，前一个截图显示的默认顺序是自然顺序，ID为1、2和3。请记住这一点，因为我们将在接下来的几行中引用这些ID。
- en: 'Open the `article` controller `modules/Backoffice/Controllers/ArticleController.php`,
    and then remove the following line:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`article`控制器`modules/Backoffice/Controllers/ArticleController.php`，然后删除以下行：
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now add the following line, which will order the articles by creation date
    in descending order:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加以下行，这将按创建日期降序排列文章：
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you refresh the page at `http://www.learning-phalcon.localhost/backoffice/article/list`,
    you will see that the records are ordered differently. The order that you should
    see is this: 3, 2, and 1.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刷新`http://www.learning-phalcon.localhost/backoffice/article/list`页面，你会看到记录的顺序不同。你应该看到的顺序是：3、2和1。
- en: Feel free to practice and try to order by different columns and by adding limits.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 随意练习并尝试按不同的列排序，并添加限制。
- en: 'Another useful method is `findFirst()`. This method accepts the same parameters
    as `find()`, except that the result will be an instance of the `Article` model;
    this means that you don''t need to iterate between records:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的方法是`findFirst()`。此方法接受与`find()`相同的参数，但结果将是一个`Article`模型的实例；这意味着你不需要在记录之间迭代：
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Some of the helpful methods are the magic methods, `findBy*()` and `findFirstBy*()`.
    For example, if you need to search articles by slug, you can do it like this with
    these magic methods:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用的方法是魔术方法，`findBy*()`和`findFirstBy*()`。例如，如果你需要通过slug搜索文章，你可以使用这些魔术方法这样做：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: CRUD – creating data
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRUD – 创建数据
- en: 'Creating data with the help of ORM is easier than it sounds. We are going to
    make use of the model. Remember what I told you—that I like to keep the models
    as clean as possible. This is why most of the time, we will create and make use
    of managers. Open the `article` manager in `modules/Core/Managers/ArticleManager.php`,
    and add the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ORM创建数据比听起来容易。我们将利用模型。记住我告诉你的——我喜欢尽可能保持模型干净。这就是为什么我们大多数时候都会创建并使用管理器。在`modules/Core/Managers/ArticleManager.php`中打开`article`管理器，并添加以下代码：
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, we will add a dummy `createAction` method to our controller. Open `modules/Backoffice/Controllers/ArticleController.php`,
    and add the following content:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在控制器中添加一个虚拟的`createAction`方法。打开`modules/Backoffice/Controllers/ArticleController.php`，并添加以下内容：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Upon accessing `http://www.learning-phalcon.localhost/backoffice/article/create`,
    you will see some errors, similar to the ones shown in this screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当你访问`http://www.learning-phalcon.localhost/backoffice/article/create`时，你会看到一些错误，类似于本截图所示：
- en: '![CRUD – creating data](img/B03522_03_04.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![CRUD – 创建数据](img/B03522_03_04.jpg)'
- en: 'This is perfectly normal, since we didn''t pass any parameters to our `create()`
    method. Modify the `createAction` method by adding these parameters to the create
    method:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这很正常，因为我们没有向我们的`create()`方法传递任何参数。通过向创建方法添加这些参数来修改`createAction`方法：
- en: '[PRE39]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If we refresh the page at `http://www.learning-phalcon.localhost/backoffice/article/create`,
    we should see a success message similar to what is shown here:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们刷新`http://www.learning-phalcon.localhost/backoffice/article/create`页面，我们应该会看到一个类似于以下所示的成功消息：
- en: '![CRUD – creating data](img/B03522_03_05.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![CRUD – 创建数据](img/B03522_03_05.jpg)'
- en: Tip
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Each time you refresh this page, a new record will be inserted into the database.
    You can access `http://www.learning-phalcon.localhost/backoffice/article/list`
    to see the new records.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你刷新这个页面，数据库中都会插入一条新记录。你可以访问`http://www.learning-phalcon.localhost/backoffice/article/list`来查看新记录。
- en: 'Let''s quickly analyze the `create()` method:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速分析一下`create()`方法：
- en: We instantiate the `Article` model and assign values to it using the setters
    that we wrote for it. Then, we call the built-in `create()` method to create the
    data. If there are any errors, we read them and throw an exception with those
    errors (JSON-encoded), otherwise we return the newly created object.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实例化`Article`模型，并使用为其编写的setter分配值。然后，我们调用内置的`create()`方法来创建数据。如果有任何错误，我们读取它们，并使用这些错误抛出异常（JSON编码），否则我们返回新创建的对象。
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also use the `save()` method instead of `create()`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`save()`方法代替`create()`。
- en: 'If you have a big table (tens of columns), you might want to use the built-in
    `assign()` method when you create the object, instead of assigning it via setters
    for each column. You can do this using a key-value array, where the keys are the
    names of the columns, like this for example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个大表（有数十个列），当你创建对象时，你可能想使用内置的`assign()`方法，而不是通过每个列的设置器来分配。你可以使用键值数组来做这件事，其中键是列的名称，例如：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You might wonder what's with `\Phalcon\Db\RawValue('NOW()')` assigned to `created_at`.
    Well, whenever you need to assign database-driver-specific / driver built-in data,
    you will need to use `\Phalcon\Db\RawValue()`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么`created_at`被分配了`\Phalcon\Db\RawValue('NOW()')`。好吧，无论何时你需要分配数据库驱动程序特定的/内置数据，你都需要使用`\Phalcon\Db\RawValue()`。
- en: In our example, we are using it to call the `NOW()` MySQL function, which returns
    the current date and time. If you are working with date-sensitive data, I recommend
    that you use the PHP date and not rely on any database timestamp.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们使用它来调用`NOW()` MySQL函数，该函数返回当前日期和时间。如果你正在处理日期敏感数据，我建议你使用PHP日期而不是依赖于任何数据库时间戳。
- en: CRUD – updating data
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRUD – 更新数据
- en: 'Updating data is as easy as creating it. The only thing that we need to do
    is find the record that we want to update. Open the `article` manager and add
    the following code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 更新数据就像创建数据一样简单。我们唯一需要做的是找到我们想要更新的记录。打开`文章`管理器，并添加以下代码：
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As you can see, we are passing a new variable, `$id`, to the `update` method
    and searching for an article that has its ID equal to the value of the `$id` variable.
    For the sake of an example, this method will update only the article title and
    the `updated_at` field for now.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在将一个新的变量`$id`传递给`update`方法，并搜索ID等于`$id`变量值的文章。为了举例，这个方法现在只会更新文章标题和`updated_at`字段。
- en: 'Next, we will create a new dummy method as we did for the article, `create`.
    Open `modules/Backoffice/Controllers/ArticleController.php` and add the following
    code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个新的虚拟方法，就像我们为文章创建的那样，名为`create`。打开`modules/Backoffice/Controllers/ArticleController.php`，并添加以下代码：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If you access `http://www.learning-phalcon.localhost/backoffice/article/update/1`
    now, you should be able to see the **1 was updated.** response. Going back to
    the article list, you will see the new title, and the **Updated** column will
    have a new value.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在访问`http://www.learning-phalcon.localhost/backoffice/article/update/1`，你应该能看到**1
    已更新**的响应。返回到文章列表，你会看到新的标题，并且**更新**列将有一个新的值。
- en: CRUD – deleting data
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRUD – 删除数据
- en: 'Deleting data is easier, since we don''t need to do more than calling the built-in
    `delete()` method. Open the `article` manager, and add the following code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 删除数据更容易，因为我们不需要做更多的事情，只需调用内置的`delete()`方法。打开`文章`管理器，并添加以下代码：
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We will once again create a dummy method to delete records. Open `modules/Backoffice/Controllers/ArticleControllers.php`,
    and add the following code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次创建一个虚拟方法来删除记录。打开`modules/Backoffice/Controllers/ArticleControllers.php`，并添加以下代码：
- en: '[PRE44]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: To test this, simply access `http://www.learning-phalcon.localhost/backoffice/article/delete/1`.
    If everything went well, you should see the **Article was deleted.** message.
    Going back to, article list, you won't be able to see the article with ID `1`
    anymore.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这个，只需访问`http://www.learning-phalcon.localhost/backoffice/article/delete/1`。如果一切顺利，你应该会看到**文章已被删除**的消息。返回到文章列表，你将看不到ID为`1`的文章了。
- en: 'These are the four basic methods: create, read, update, and delete. Later in
    this book, we will use these methods a lot.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个基本方法是：创建、读取、更新和删除。在本书的后面部分，我们将大量使用这些方法。
- en: Tip
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you need/want to, you can use the Phalcon Developer Tools to generate CRUD
    automatically. Check out [https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools)
    for more information.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要/想要，可以使用Phalcon开发者工具自动生成CRUD。更多信息请查看[https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools)。
- en: Using PHQL
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHQL
- en: 'Personally, I am not a fan of PHQL. I prefer using ORM or Raw queries. But
    if you are going to feel comfortable with it, feel free to use it. PHQL is quite
    similar to writing raw SQL queries. The main difference is that you will need
    to pass a model instead of a table name, and use a models manager service or directly
    call the `\Phalcon\Mvc\Model\Query` class. Here is a method similar to the built-in
    `find()` method:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 个人而言，我不是 PHQL 的粉丝。我更喜欢使用 ORM 或原始查询。但如果你觉得用它很舒服，请随意使用。PHQL 与编写原始 SQL 查询非常相似。主要区别在于您需要传递一个模型而不是表名，并使用模型管理器服务或直接调用
    `\Phalcon\Mvc\Model\Query` 类。以下是一个类似于内置 `find()` 方法的示例：
- en: '[PRE45]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To use the models manager, we need to inject this new service. Open the global
    services file, `config/service.php`, and add the following code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用模型管理器，我们需要注入这个新服务。打开全局服务文件，`config/service.php`，并添加以下代码：
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now let''s rewrite the `find()` method by making use of the `modelsManager`
    service:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用 `modelsManager` 服务重写 `find()` 方法：
- en: '[PRE47]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If we need to bind parameters, the method can look like this one:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要绑定参数，方法可以像这样：
- en: '[PRE48]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are not going to use PHQL at all in our project. If you are interested in
    it, you can find more information in the official documentation at [http://docs.phalconphp.com/en/latest/reference/phql.html](http://docs.phalconphp.com/en/latest/reference/phql.html).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们不会使用 PHQL。如果您对此感兴趣，您可以在官方文档中找到更多信息，请参阅[http://docs.phalconphp.com/en/latest/reference/phql.html](http://docs.phalconphp.com/en/latest/reference/phql.html)。
- en: Using raw SQL
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原始 SQL
- en: 'Sometimes, using raw SQL is the only way of performing complex queries. Let''s
    see what a raw SQL will look like for a custom `find()` method and a custom `update()`
    method :'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，使用原始 SQL 是执行复杂查询的唯一方法。让我们看看自定义 `find()` 方法和自定义 `update()` 方法将如何看起来：
- en: '[PRE49]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'As you can see, the `rawFind()` method returns an instance of `\Phalcon\Mvc\Model\Resultset\Simple`.
    The `rawUpdate()` method just executes the query (in this example, we will mark
    all the articles as published). You might have noticed the `getReadConnection()`
    method. This method is very useful when you need to iterate over a large amount
    of data or if, for example, you use a master-slave connection. As an example,
    consider the following code snippet:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`rawFind()` 方法返回一个 `\Phalcon\Mvc\Model\Resultset\Simple` 实例。`rawUpdate()`
    方法仅执行查询（在本例中，我们将标记所有文章为已发布）。您可能已经注意到了 `getReadConnection()` 方法。当您需要遍历大量数据或，例如，使用主从连接时，此方法非常有用。以下是一个示例代码片段：
- en: '[PRE50]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Working with models might be a complex thing. We cannot cover everything in
    this book, but we will work with many common techniques to achieve this part of
    our project. Please spare a little time and read more about working with models
    at [http://docs.phalconphp.com/en/latest/reference/models.html](http://docs.phalconphp.com/en/latest/reference/models.html).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 与模型一起工作可能是一件复杂的事情。我们无法在这本书中涵盖所有内容，但我们将使用许多常见技术来实现我们项目的这部分。请抽出一点时间，了解更多关于与模型一起工作的信息，请参阅[http://docs.phalconphp.com/en/latest/reference/models.html](http://docs.phalconphp.com/en/latest/reference/models.html)。
- en: Database transactions
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库事务
- en: If you need to perform multiple database operations, then in most cases you
    need to ensure that every operation is successful, for the sake of data integrity.
    A good database architecture in not always enough to solve potential integrity
    issues. This is the case where you should use transactions. Let's take as an example
    a virtual wallet that can be represented as shown in the next few tables.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要执行多个数据库操作，那么在大多数情况下，您需要确保每个操作都成功，以保持数据完整性。良好的数据库架构并不总是足以解决潜在的一致性问题。这就是您应该使用事务的情况。以下是一个虚拟钱包的例子，它可以表示为以下几个表所示。
- en: 'The `User` table looks like the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`User` 表看起来如下：'
- en: '| ID | NAME |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| ID | NAME |'
- en: '| --- | --- |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | John Doe |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 约翰·多伊 |'
- en: 'The `Wallet` table looks like this:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wallet` 表看起来如下：'
- en: '| ID | USER_ID | BALANCE |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| ID | USER_ID | BALANCE |'
- en: '| --- | --- | --- |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | 1 | 5000 |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 5000 |'
- en: 'The `Wallet transactions` table looks like the following:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wallet transactions` 表看起来如下：'
- en: '| ID | WALLET_ID | AMOUNT | DESCRIPTION |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| ID | WALLET_ID | AMOUNT | DESCRIPTION |'
- en: '| --- | --- | --- | --- |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | 1 | 5000 | Bonus credit |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 5000 | 奖励信用 |'
- en: '| 2 | 1 | -1800 | Apple store |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1 | -1800 | 苹果商店 |'
- en: 'How can we create a new user, credit their wallet, and then debit it as the
    result of a purchase action? This can be achieved in three ways using transactions:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何创建一个新用户，向其钱包充值，然后作为购买行为的后果扣除金额？这可以通过使用事务的三种方式实现：
- en: Manual transactions
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动事务
- en: Implicit transactions
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐式事务
- en: Isolated transactions
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立事务
- en: A manual transactions example
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动事务示例
- en: 'Manual transactions are useful when we are using only one connection and the
    transactions are not very complex. For example, if any error occurs during an
    update operation, we can roll back the changes without affecting the data integrity:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们只使用一个连接且事务不是很复杂时，手动事务是有用的。例如，如果在更新操作期间发生任何错误，我们可以回滚更改而不影响数据完整性：
- en: '[PRE51]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: An implicit transactions example
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐式事务示例
- en: 'Implicit transactions are very useful when we need to perform operations on
    related tables / exiting relationships:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要在相关表/现有关系上执行操作时，隐式事务非常有用：
- en: '[PRE52]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: An isolated transactions example
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独立事务示例
- en: 'Isolated transactions are always executed in a separate connection, and they
    require a transaction manager:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 独立事务总是在单独的连接中执行，并且需要一个事务管理器：
- en: '[PRE53]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: ODM/MongoDB
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ODM/MongoDB
- en: We will not discuss ODM too much. It mostly supports the same actions as ORM.
    CRUD operations can be done in the same way as we did with ORM. Of course, we
    can't use transactions here, since MongoDB is not a transactional database.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会过多地讨论ODM。它主要支持与ORM相同的行为。CRUD操作可以像我们使用ORM时一样进行。当然，在这里我们不能使用事务，因为MongoDB不是一个事务型数据库。
- en: Another important thing is that we need to declare the variables as public,
    not protected, as we did with the article model. This is the case in Phalcon version
    1.3.4, but maybe in version 2.0, things will change.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事情是我们需要将变量声明为公共的，而不是受保护的，就像我们在文章模型中做的那样。这是在Phalcon版本1.3.4中的情况，但在版本2.0中，事情可能会有所变化。
- en: 'A big difference is in the parameters that we pass to a `find()` method. Suppose
    we used something like the following code for ORM:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很大的不同点在于我们传递给`find()`方法的参数。假设我们为ORM使用了以下类似代码：
- en: '[PRE54]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'For the ODM, we need to do it like this:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 对于ODM，我们需要这样做：
- en: '[PRE55]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please read more about these differences at [http://docs.phalconphp.com/en/latest/reference/odm.html](http://docs.phalconphp.com/en/latest/reference/odm.html)
    and [http://php.net/manual/ro/mongo.sqltomongo.php](http://php.net/manual/ro/mongo.sqltomongo.php).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 请阅读更多关于这些差异的信息，请参阅[http://docs.phalconphp.com/en/latest/reference/odm.html](http://docs.phalconphp.com/en/latest/reference/odm.html)
    和 [http://php.net/manual/ro/mongo.sqltomongo.php](http://php.net/manual/ro/mongo.sqltomongo.php)。
- en: 'Because we will be using MongoDB later, for now, we will just set up the connection.
    Open the `config/services.php` global services file, and add the following code:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们稍后将会使用MongoDB，因此现在我们只需设置连接。打开`config/services.php`全局服务文件，并添加以下代码：
- en: '[PRE56]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: ORM – drawbacks and caching
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM – 缺点和缓存
- en: If you are developing a small-to-medium project, or if you are working with
    a big team of developers (more than three), using an ORM—in general—is a good
    idea. This is because firstly, it forces you to follow some rules, and secondly,
    the development will be much faster.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发小型到中型项目，或者如果你与一个由超过三个开发者组成的大团队一起工作，那么使用ORM——通常来说——是一个好主意。这是因为首先，它迫使你遵循一些规则，其次，开发将会更快。
- en: 'Let''s take as an example the `SELECT * FROM article` query . Using a raw query,
    the MySQL log will return you this:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以`SELECT * FROM article`查询为例。使用原始查询，MySQL日志将返回以下内容：
- en: '[PRE57]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'By using the ORM and the `find()` method, your MySQL log will look like the
    following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用ORM和`find()`方法，你的MySQL日志将看起来像以下这样：
- en: '[PRE58]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The ORM first checks whether the table exists. Then it executes the `describe`
    operation of the table, and after that, it executes the query we need. I am not
    saying that the ORM's logic is not right. I am just trying to point out the number
    of operations needed to finish a job. Things are quite messy when you have relations
    across multiple tables, and you can end up with hundreds of queries returning
    data for just 10 records.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: ORM首先检查表是否存在。然后执行表的`describe`操作，之后执行我们需要的查询。我并不是说ORM的逻辑是错误的。我只是试图指出完成一项工作所需的操作数量。当你有多个表之间的关系时，事情会变得相当混乱，你可能会得到数百个查询来返回仅10条记录的数据。
- en: 'To avoid querying the database server every time, we can use the automatic
    caching method. Phalcon accepts a parameter named `cache`, which can be passed
    in the `find()` method. To enable the cache, we need a `modelsCache` service.
    Open the `config/services.php` global services file and add the following code:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免每次查询数据库服务器，我们可以使用自动缓存方法。Phalcon接受一个名为`cache`的参数，该参数可以通过`find()`方法传递。要启用缓存，我们需要一个`modelsCache`服务。打开`config/services.php`全局服务文件并添加以下代码：
- en: '[PRE59]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now let''s modify the `listAction` function from `modules/Backoffice/Controllers/ArticleController.php`
    by adding a cache key. The final function is as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过添加缓存键来修改 `modules/Backoffice/Controllers/ArticleController.php` 中的 `listAction`
    函数。最终的函数如下：
- en: '[PRE60]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The cache key contains two parts: `key` is the key name, and `lifetime` represents
    the time in seconds. That''s it! For the next hour, your database will not be
    queried again. This is a simple example, and I recommend that you pay attention
    to what kind of data are you caching and for how long. Also, invalidating the
    cache can become a complex and very hard job. We will work on caching in the upcoming
    chapters, where you will be able to see more interesting things.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存键包含两部分：`key` 是键名，而 `lifetime` 代表以秒为单位的时间。就是这样！在接下来的一个小时里，你的数据库将不再被查询。这是一个简单的例子，我建议你注意你正在缓存什么类型的数据以及缓存多长时间。此外，使缓存失效可能变得复杂且非常困难。我们将在接下来的章节中探讨缓存，你将能够看到更多有趣的内容。
- en: Tip
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As always, please take some time to read the official documentation at [http://docs.phalconphp.com/en/latest/reference/models-cache.html](http://docs.phalconphp.com/en/latest/reference/models-cache.html),
    so that you can learn more about caching data.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，请花些时间阅读官方文档[http://docs.phalconphp.com/en/latest/reference/models-cache.html](http://docs.phalconphp.com/en/latest/reference/models-cache.html)，这样你可以了解更多关于缓存数据的信息。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about ORM and ODM in general and how to use the
    main built-in methods to perform CRUD operations. You also learned about database
    transactions and ORM caching, and how to use PHQL or raw SQL queries.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了ORM和ODM的一般知识以及如何使用内置的主要方法执行CRUD操作。你还了解了数据库事务和ORM缓存，以及如何使用PHQL或原始SQL查询。
- en: In the next chapter, we will start developing our database architecture, and
    you will learn more about ORM. We will create forms and implement validations.
    We will also develop a CLI application to help us test our code faster.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始开发我们的数据库架构，你将了解更多关于ORM的内容。我们将创建表单并实现验证。我们还将开发一个CLI应用程序来帮助我们更快地测试代码。
