- en: Chapter 4. Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：库
- en: This chapter covers the CI libraries topic, and the different types of libraries
    and their different usage categories, with several code examples of web applications.
    The CI development platform provides us with the built-in libraries, enables us
    with an easy procedure to integrate third-party libraries, and also allows us
    to develop our new libraries and share them with the community, if we wish to.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了CI库的主题，以及不同类型的库及其不同的使用类别，并提供了几个Web应用程序的代码示例。CI开发平台为我们提供了内置库，使我们能够通过简单的程序集成第三方库，还允许我们开发自己的库并与社区共享，如果我们愿意的话。
- en: 'The CI libraries are powering efficiency, code reusability, separation, and
    simplicity. The benefits achieved are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CI库正在推动效率、代码重用性、分离和简单性。所获得的好处如下：
- en: '**Efficiency**: In means of minimal loaded resources. This feature achieved
    by the fact that the CI library, may be loaded only by the specific CI project
    controller(s), or even only in specific method(s), where the library''s services
    are required. Hence, the overhead (memory) of the library resources during execution
    time is minimized in each controller operation state.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：意味着以最少的资源负载。这一特性是通过以下事实实现的，即CI库可能只由特定的CI项目控制器（或甚至只由特定的方法）加载，在这些方法中需要库的服务。因此，在执行时间中，库资源（内存）的负载在每个控制器操作状态下都最小化了。'
- en: '**Reusability**: Reusability means writing once a function code and reusing
    it across the project resources. The libraries can be loaded by any project controller,
    model, or helper (in a helper, we shall use the `&get_instance()` method discussed
    several times before) to reuse their code anywhere in the CI project. More than
    that, the controller-rendered views can call those loaded library methods. Hence,
    great code reusability is achieved.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重用性**：重用性意味着编写一次函数代码并在项目资源中重复使用它。任何项目控制器、模型或辅助程序（在辅助程序中，我们将使用之前讨论多次的`&get_instance()`方法）都可以加载库以在CI项目的任何地方重复使用其代码。不仅如此，控制器渲染的视图还可以调用这些已加载的库方法。因此，实现了极高的代码重用性。'
- en: '**Separation**: Separation prevents, accidental overlapping with same name
    to the parameters or functions elsewhere in the project. The Library class methods
    and parameters have their own name space so that they can''t be overridden by
    a mistake outside the library in case the developer is using the same parameters
    in the served module such as controllers/views.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分离**：分离防止了与项目其他地方相同名称的参数或函数的意外重叠。库类方法和参数有自己的命名空间，这样它们就不会在库外部被错误地覆盖，如果开发者在服务模块（如控制器/视图）中使用相同的参数。'
- en: '**Simplicity**: This make the code text as minimal as possible and easy to
    understand and maintain. The libraries'' methods called from the served resources,
    such as controllers, models, and helpers, make the code look much simpler, and
    make it easy to maintain and navigate. Hence, this simplifies extending the code
    and maintaining it.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单性**：这使得代码文本尽可能简单，易于理解和维护。从服务资源（如控制器、模型和辅助程序）调用的库方法使代码看起来更加简单，并使其易于维护和导航。因此，这简化了代码的扩展和维护。'
- en: The libraries give us development power and efficiency with rich-focused functionality
    on certain project aspects, and also enable us to have simple and concise fashion
    code in the served controllers by calling the library method, instead of having
    the service code locally in the controller. The libraries should be initially
    instantiated by the code using them, such as the controller, model, or helper,
    or if used by almost all controllers, models can be loaded using the autoload
    mechanism. [Chapter 2](ch02.html "Chapter 2. Configurations and Naming Conventions"),
    *Configurations and Naming Conventions*, discusses how to autoload the libraries.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些库为我们提供了开发力量和效率，在特定项目方面具有丰富的功能，还使我们能够通过调用库方法而不是在控制器中本地放置服务代码，以简单和简洁的方式在服务控制器中编写代码。库应该由使用它们的代码（如控制器、模型或辅助程序）初始化，或者如果几乎所有的控制器都使用它，可以使用自动加载机制来加载模型。第2章[配置和命名约定](ch02.html
    "Chapter 2. Configurations and Naming Conventions")讨论了如何自动加载库。
- en: Once instantiated by the autoload or controller constructor, the libraries can
    be used by the controller methods or by rendered views. In addition, any model,
    helper, or another library may use our project installed libraries using `&get_instance()`,
    as described in the previous chapters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通过自动加载或控制器构造函数实例化，库就可以通过控制器方法或渲染的视图使用。此外，任何模型、辅助程序或其他库都可以使用 `&get_instance()`，如前几章所述，来使用我们项目安装的库。
- en: The libraries power the code of the CI model-view-controller instantiated components
    (for more information, visit the website [http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller)),
    regarding the functionality expansion and reusability across the project controllers,
    models, helpers, and views.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些库为 CI 模型-视图-控制器实例化组件的代码提供支持（有关功能扩展和项目控制器、模型、辅助程序和视图的可重用性更多信息，请访问网站 [http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller))。
- en: 'This chapter will primarily focus on the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将主要关注以下主题：
- en: 'The CI libraries'' scope and usage:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI 库的作用域和用法：
- en: Usage categories
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类别
- en: Using a library
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用库
- en: Adding a library to the project
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将库添加到项目中
- en: Instantiating a library
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化一个库
- en: Using library method(s)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用库方法
- en: Available CI libraries
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的 CI 库
- en: 'Examples:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例：
- en: 'Example 1: using the built-in libraries'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 1：使用内置库
- en: 'Example 2: using third-party libraries such as the Google Maps CI library wrapper'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 2：使用第三方库，例如 Google Maps CI 库包装器
- en: 'Example 3: building our own library such as the Flickr API wrapper'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 3：构建自己的库，例如 Flickr API 包装器
- en: 'Example 4: building our own library such as the LinkedIn API wrapper'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 4：构建自己的库，例如 LinkedIn API 包装器
- en: We will begin by briefly reviewing what a library in a CI framework is, and
    how we can use it for our needs across the project code resources.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先简要回顾 CI 框架中的库是什么，以及我们如何在我们项目的代码资源中用它来满足我们的需求。
- en: The CI libraries' scope and usage
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI 库的作用域和用法
- en: The CI library does not have access to the controller resources by default unless
    the CI `$ci = &get_instance()` is called and `$ci` is used instead of `$this`
    to access the CI resources, for example, instead of `$this->db->query ($sql)`,
    we shall use `$ci->db->query ($sql)`, and so on. We can extend the CI library
    using the third-party libraries from where CI echo system (the CI community of
    developers worldwide share knowledge, sources, and solutions for code and open
    issues), or develop our own libraries from scratch or extending other libraries.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: CI 库默认情况下无法访问控制器资源，除非调用 CI `$ci = &get_instance()` 并使用 `$ci` 而不是 `$this` 来访问
    CI 资源，例如，而不是 `$this->db->query ($sql)`，我们应该使用 `$ci->db->query ($sql)`，依此类推。我们可以通过
    CI echo 系统（全球 CI 开发者社区分享代码和开放问题的知识、资源和解决方案）使用第三方库来扩展 CI 库，或者从头开始开发自己的库或扩展其他库。
- en: Any application library will be located under `application/libraries/` in the
    project's directory. In addition, optional resources such as the library configuration
    file that is required for library configurations can be placed under the project
    root or elsewhere. A good practice is to place them under the project root for
    enhanced security provided by CI. For example, `<PROJECT_ROOT>application/config/<LIB_NAME>_config.php`,
    or even additional resources such as the `images/CSS/HTML/additional` class libraries
    may be required under another `application/<LIB_ADDITIONAL_RESOURCES>`, such as
    `application/assets`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 任何应用程序库都将位于项目目录下的 `application/libraries/` 目录中。此外，可选资源，如库配置文件，这些文件对于库配置是必需的，可以放置在项目根目录或其他位置。一个良好的做法是将它们放置在项目根目录下，以增强
    CI 提供的安全性。例如，`<PROJECT_ROOT>application/config/<LIB_NAME>_config.php`，或者甚至可能还需要在另一个
    `application/<LIB_ADDITIONAL_RESOURCES>` 目录下添加额外的资源，例如 `application/assets` 下的
    `images/CSS/HTML/additional` 类库。
- en: 'The library integration and the usage within the CI project are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 库集成和 CI 项目中的使用方法如下：
- en: Adding the library code resources to `application/libraries/my_lib.php`, optionally
    adding related resources, if any, such as a library configuration file, and/or
    other library assets to their locations as mentioned before.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将库代码资源添加到 `application/libraries/my_lib.php`，如果有的话，还可以添加相关的资源，例如库配置文件，以及/或其他库资产到之前提到的位置。
- en: Instantiating the library class via config autoload, or instantiating it via
    the controller.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过配置自动加载或控制器实例化库类。
- en: 'Automatically load a library `my_lib` for the entire CI project:'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动加载整个 CI 项目的库 `my_lib`：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Specifically in certain controller(s), constructor(s), or method(s):'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特别是在某些控制器（s）、构造函数（s）或方法（s）中：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using the library methods:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用库方法：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can see the library scope as the ultimate OOP reusability enabler for the
    entire project code resources' models, views, helpers, and libraries, which govern
    all to address the execution requests from the user, or a scheduled request.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将库范围视为整个项目代码资源模型、视图、辅助工具和库的终极面向对象重用启用器，它们共同处理所有执行请求，或计划请求。
- en: 'As mentioned, the CI libraries enables us with great Separation and Simplicity.
    For example, the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，CI 库为我们提供了极大的分离和简单性。例如，以下代码：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Available CI libraries
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的 CI 库
- en: CI and the CI echo system of developers provide many libraries covering a rich
    set of topics. We will review the CI libraries as well as known resources for
    the third-party CI libraries.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: CI 和 CI 开发者回声系统提供了许多涵盖丰富主题的库。我们将回顾 CI 库以及已知的第三方 CI 库资源。
- en: 'We are also encouraged to build our own libraries that can be used by others,
    and share them with the community, such as:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还鼓励构建自己的库，供他人使用，并与社区分享，例如：
- en: The Git community at [https://github.com](https://github.com)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 社区在 [https://github.com](https://github.com)
- en: CI Sparks at [http://getsparks.org](http://getsparks.org)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI Sparks 在 [http://getsparks.org](http://getsparks.org)
- en: CI Forums at [http://codeigniter.com/forums](http://codeigniter.com/forums)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI 论坛在 [http://codeigniter.com/forums](http://codeigniter.com/forums)
- en: Packagist at [https://packagist.org](https://packagist.org)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Packagist 在 [https://packagist.org](https://packagist.org)
- en: 'To call a built-in library, we shall call for example, the built-in library
    named `CI_Xxxx` as follows: `$this->load->library (xxxx)`;. So that CI_ prefix
    is not used and instead of the capitalized library name `Xxxx`, we use the lowercase
    library name `xxxx`. For calling a library function `yyyy` within the library
    **CI_Xxxx**, we shall write `$this->xxxx->yyyy()`;.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用内置库，例如，调用名为 `CI_Xxxx` 的内置库，如下所示：`$this->load->library (xxxx)`；这样，就不使用 CI_
    前缀，而是使用大写库名称 `Xxxx` 的小写库名称 `xxxx`。在库 `CI_Xxxx` 内调用库函数 `yyyy` 时，应编写 `$this->xxxx->yyyy()`;。
- en: 'The following is a list of built-in and commonly useful CI libraries (As of
    version 2.1.4):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个内置和常用 CI 库的列表（截至版本 2.1.4）：
- en: '| `CI_Benchmark` | `CI_Encrypt` | `CI_Migration` | `CI_Unit_test` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Benchmark` | `CI_Encrypt` | `CI_Migration` | `CI_Unit_test` |'
- en: '| `CI_Cache` | `CI_Exceptions` | `CI_Model` | `CI_Upload` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Cache` | `CI_Exceptions` | `CI_Model` | `CI_Upload` |'
- en: '| `CI_Cache_apc` | `CI_Form_validation` | `CI_Output` | `CI_URI` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Cache_apc` | `CI_Form_validation` | `CI_Output` | `CI_URI` |'
- en: '| `CI_Cache_dummy` | `CI_FTP` | `CI_Pagination` | `CI_User_agent` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Cache_dummy` | `CI_FTP` | `CI_Pagination` | `CI_User_agent` |'
- en: '| `CI_Cache_file` | `CI_Hooks` | `CI_Parser` | `CI_Utf8` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Cache_file` | `CI_Hooks` | `CI_Parser` | `CI_Utf8` |'
- en: '| `CI_Cache_memcached` | `CI_Image_lib` | `CI_Profiler` | `CI_Xmlrpc` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Cache_memcached` | `CI_Image_lib` | `CI_Profiler` | `CI_Xmlrpc` |'
- en: '| `CI_Calendar` | `CI_Input` | `CI_Router` | `CI_Xmlrpcs` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Calendar` | `CI_Input` | `CI_Router` | `CI_Xmlrpcs` |'
- en: '| `CI_Cart` | `CI_Javascript` | `CI_Security` | `CI_Zip` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Cart` | `CI_Javascript` | `CI_Security` | `CI_Zip` |'
- en: '| `CI_Config` | `CI_Jquery` | `CI_Session` |   |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Config` | `CI_Jquery` | `CI_Session` |   |'
- en: '| `CI_Controller` | `CI_Lang` | `CI_SHA1` |   |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Controller` | `CI_Lang` | `CI_SHA1` |   |'
- en: '| `CI_Driver` | `CI_Loader` | `CI_Table` |   |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Driver` | `CI_Loader` | `CI_Table` |   |'
- en: '| `CI_Driver_Library` | `CI_Log` | `CI_Trackback` |   |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `CI_Driver_Library` | `CI_Log` | `CI_Trackback` |   |'
- en: In this chapter, we will provide a usage example for Google Maps' third-party
    library wrapper, available at [https://github.com/ianckc/CodeIgniter-Google-Maps-Library](https://github.com/ianckc/CodeIgniter-Google-Maps-Library).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将提供一个 Google Maps 第三方库包装器的使用示例，可在 [https://github.com/ianckc/CodeIgniter-Google-Maps-Library](https://github.com/ianckc/CodeIgniter-Google-Maps-Library)
    找到。
- en: Many more third-party libraries can be found following the CI forums at [http://codeigniter.com/forums](http://codeigniter.com/forums).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CI 论坛 [http://codeigniter.com/forums](http://codeigniter.com/forums) 可以找到更多第三方库。
- en: Example 1 – using the built-in libraries
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 1 – 使用内置库
- en: In this initial example, we will see how to use the CI built-in library. Here
    we will use the CI library `CI_Table` as well as the `CI_db` library, which, for
    a given database table/view and some optional CSS settings, will enable us to
    render the table nicely with all the HTML table tags and CSS settings in just
    a single line of code. In this example, we will use the same user's table that
    we used for the controller example in [Chapter 3](ch03.html "Chapter 3. Controller
    Usage and Scope"), *Usage and Scope of Controllers*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个初始示例中，我们将看到如何使用CI内置库。在这里，我们将使用CI库`CI_Table`以及`CI_db`库，对于给定的数据库表/视图和一些可选的CSS设置，它将使我们能够在单行代码中渲染出所有HTML表格标签和CSS设置。在本例中，我们将使用与[第3章](ch03.html
    "第3章。控制器使用和范围")中控制器示例相同的用户表，*控制器使用和范围*。
- en: 'This example will be constructed from the following controller and view:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将由以下控制器和视图构建：
- en: '`application/controllers/builtins.php`: This controller loads the built-in
    CI library `table` as well as the `db` library, which is autoloaded (for more
    information, refer to [Chapter 2](ch02.html "Chapter 2. Configurations and Naming
    Conventions"), *Configurations and Naming Conventions*) to get the user''s table
    content, and set up the table to render using the `table` library.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/controllers/builtins.php`：此控制器加载内置CI库`table`以及`db`库，它是自动加载的（更多信息，请参阅[第2章](ch02.html
    "第2章。配置和命名约定")，*配置和命名约定*），以获取用户的表内容，并设置表格以使用`table`库渲染。'
- en: '[PRE4]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The controllers prepare vectors of map settings and the list of places and possible
    controllers to zoom into each of the places, and render a view named `google_map_view`.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 控制器准备地图设置的向量以及每个地点和可能的控制器列表，以缩放进入每个地点，并渲染一个名为`google_map_view`的视图。
- en: '`application/views/users_view.php`: This view will use the `table` library
    service to render a nicely formatted table as loaded from `db`, and configured
    by the controller.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/users_view.php`：此视图将使用`table`库服务渲染从`db`加载的格式良好的表格，并由控制器配置。'
- en: Note
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Let us assume that the URL to the project root is `http://mydomain.com/myproject`,
    `http://mydomain.com/myproject/builtins`.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们假设项目根URL为`http://mydomain.com/myproject`，`http://mydomain.com/myproject/builtins`。
- en: (The source code is provided with this book via URLs.)
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （源代码通过URL提供。）
- en: The controller file
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: 'The following is a step-by-step example of the controller code for each operation:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对每个操作控制器代码的逐步示例：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The view file
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图文件
- en: To complete the operation, we will finish working on the view file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成操作，我们将完成视图文件的工作。
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Example 2 – using third-party libraries such as the Google Maps CI library wrapper
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2 – 使用第三方库，如Google Maps CI库包装器
- en: In this example, we will see how to install and use the Google Maps CI library
    with some cool services. First, we need to download the library files from [http://biostall.com/codeigniter-google-maps-v3-api-library](http://biostall.com/codeigniter-google-maps-v3-api-library).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将看到如何安装和使用Google Maps CI库以及一些酷炫的服务。首先，我们需要从[http://biostall.com/codeigniter-google-maps-v3-api-library](http://biostall.com/codeigniter-google-maps-v3-api-library)下载库文件。
- en: 'In the downloaded TAR file, we shall find the following libraries:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载的TAR文件中，我们将找到以下库：
- en: '`Googlemaps.php`: This is the Google Maps API library for CI. We shall place
    it at `application/libraries/`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Googlemaps.php`：这是CI的Google Maps API库。我们将将其放置在`application/libraries/`。'
- en: '`Jsmin.php`: This is an auxiliary code for the library to generate the JavaScript
    generated code for enabling the smart Google Maps UI interaction. We shall also
    place it at `application/libraries/`.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Jsmin.php`：这是库的辅助代码，用于生成启用智能Google Maps UI交互的JavaScript生成代码。我们也将将其放置在`application/libraries/`。'
- en: 'Google Maps V3 API: This is a PDF file for in-depth, possible library settings
    and usage.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Maps V3 API：这是一个PDF文件，用于深入了解可能的库设置和使用。
- en: In this example, we will provide an initial page showing several marked places
    together on the Google Map window that we will create in our application. In that
    visualized view, we will enable the user to zoom into predefined selected places
    we have marked on the map using the CI anchor URL helper.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将提供一个初始页面，在创建的应用程序中，我们将在这个Google地图窗口上一起显示几个标记的地点。在那个可视视图中，我们将启用用户使用CI锚点URL助手缩放进入我们在地图上标记的预定义选定地点。
- en: 'This example will be constructed from the following library, controller, and
    view:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将由以下库、控制器和视图构建：
- en: '`application/libraries/`: This is the CI wrapper library for Google Maps that
    we downloaded. Refer to the CI library contributor website at [http://biostall.com](http://biostall.com).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/libraries/`：这是我们下载的Google Maps CI包装器库。请参阅CI库贡献者网站[http://biostall.com](http://biostall.com)。'
- en: '`application/controllers/gmaps.php`: This controller loads the `googlemaps`
    library and builds up several views for several places shown together on the Google
    Map, and zooms in to each of the places.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/controllers/gmaps.php`：此控制器加载`googlemaps`库，并为Google地图上显示的几个地点构建几个视图，并放大到每个地点。'
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The controllers prepare vectors of map settings and the list of places and possible
    controllers to zoom into each of the places, and render a view named `google_map_view`.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 控制器准备地图设置向量、地点列表以及可能的控制器，以便放大到每个地点，并渲染名为`google_map_view`的视图。
- en: '`application/views/google_map_view.php`: This is the rendered view that initially
    shows all the places on the Google Map, and lets the user zoom in using a menu
    option to a listed zoom-in location, or go back to the view of all the places
    together on a zoom-out map.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/google_map_view.php`：这是最初显示Google地图上所有地点的渲染视图，并允许用户通过菜单选项放大到列出的放大位置，或者回到放大地图上所有地点的视图。'
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
    `http://mydomain.com/myproject/gmaps`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 假设项目根URI为`http://mydomain.com/myproject`。`http://mydomain.com/myproject/gmaps`。
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The source code is provided with this book via URLs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本书通过URL提供源代码。
- en: The controller file
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: The controller file `controllers/gmaps.php` will initially load the CI Google
    Maps library, then set up the maps' settings and the places to be marked and shown
    in different views (the same view file is rendered with different `$data` settings
    each time). The controller will have the `__construct()` and `index()` methods,
    in addition to set the zoom in on the defined places.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器文件`controllers/gmaps.php`最初将加载CI Google Maps库，然后设置地图设置和要标记并显示在不同视图中的地点，控制器将具有`__construct()`和`index()`方法，并设置在定义的地点上放大。
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The class `Gmaps` continues with several more functions as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Gmaps`继续添加以下几个函数：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The class `Gmaps` continues with several more functions as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Gmaps`继续添加以下几个函数：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The view file
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图文件
- en: The view file will render the provided Google Maps JavaScript and HTML portions
    as well as render the list of places. It also provides zoom-in and zoom-out navigation
    options to the places supported by the controller.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 视图文件将渲染提供的Google Maps JavaScript和HTML部分，以及渲染地点列表。它还提供控制器支持的地点的放大和缩小导航选项。
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Example 3 – building a library such as the Flickr API wrapper
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例3 – 构建如Flickr API包装器之类的库
- en: The [flickr.com](http://flickr.com) website by Yahoo! provides API access to
    the Flickr repository of public photos uploaded to the community. The API is extremely
    rich, and its documentation is available at [http://www.flickr.com/services/api/](http://www.flickr.com/services/api/),
    and is called **App Garden**.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Yahoo!提供的[flickr.com](http://flickr.com)网站为社区上传的公共照片库提供API访问。该API非常丰富，其文档可在[http://www.flickr.com/services/api/](http://www.flickr.com/services/api/)找到，被称为**应用花园**。
- en: The API is enabled for various programming languages and access methods. We
    will build a solution of a wrapper that can be expanded to get any Flickr API
    service, using the PHP REST access method.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该API支持多种编程语言和访问方法。我们将构建一个包装器解决方案，使其能够扩展以获取任何Flickr API服务，使用PHP REST访问方法。
- en: 'This example will be constructed from the following library, controller, and
    view:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将由以下库、控制器和视图构建：
- en: '`application/libraries/flickr_wrapper.php`: The is the CI wrapper library that
    enables smooth Flickr API access via CI. This basic services library can be expanded
    to support the entire Flickr App Garden.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/libraries/flickr_wrapper.php`：这是一个CI包装器库，它通过CI实现流畅的Flickr API访问。这个基本服务库可以扩展以支持整个Flickr应用花园。'
- en: '`application/controllers/flickr_recent.php`: This is the controller that uses
    the `flickr_wrapper` library that we wrote and pulls the recent public photos
    uploaded with the EXIF photo info and the photographer-related information.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/controllers/flickr_recent.php`：这是使用我们编写的`flickr_wrapper`库的控制器，它抓取了带有EXIF照片信息和摄影师相关信息的最近上传的公共照片。'
- en: '`application/views/flickr_recent_view.php`: This is the view that shows the
    collected information of recent photos and photographers.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/flickr_recent_view.php`：这是显示最近照片和摄影师收集信息的视图。'
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
    Hence, the URI to execute the auto controller for logging in will be `http://mydomain.com/myproject/flickr_recent`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 假设项目根 URI 为 `http://mydomain.com/myproject`，因此执行自动登录控制器的 URI 将是 `http://mydomain.com/myproject/flickr_recent`。
- en: The flickr_wrapper.php library file
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flickr_wrapper.php 库文件
- en: The `application/libraries/flickr_wrapper.php` library file contains the library
    `flickr_wrapper` class library that we are building and using to access the Flickr
    App Garden API. It is mandatory to load this library with a valid Flickr `api_key`
    that you can get by following the Flickr App Garden documentation. The library
    will use the PHP REST API access, so that we can later expand any of the Flickr
    API services to be supported with our library. Each of the library methods returns
    a multidimensional keyed array of the resultant data.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`application/libraries/flickr_wrapper.php` 库文件包含我们正在构建并用于访问 Flickr App Garden
    API 的 `flickr_wrapper` 类库。必须使用有效的 Flickr `api_key` 加载此库，您可以通过遵循 Flickr App Garden
    文档来获取该 `api_key`。库将使用 PHP REST API 访问，这样我们就可以在以后将任何 Flickr API 服务扩展到我们的库中。库的每个方法都返回一个多维键数组的结果数据。'
- en: 'The following is the code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的代码：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the `Flickr_wrapper` class that we are building:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们正在构建的 `Flickr_wrapper` 类：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The class code continues while shifting our focus on accessing the recent public
    photos.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 类代码继续，同时将我们的重点转向访问最新的公开照片。
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The class code continues, where we will see how to access additional information
    related to the image.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 类代码继续，我们将看到如何访问与图像相关的附加信息。
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s see how we can apply photo filtering with the following code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用以下代码应用照片过滤：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The class code continues as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 类代码继续如下：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The class code continues as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 类代码继续如下：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The flickr_recent.php controller file
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flickr_recent.php 控制器文件
- en: The `application/controllers/flickr_recent.php` controller file will load the
    `flickr_wrapper` API, call its services for newly uploaded public photos and photographers,
    and render a view to show the results.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`application/controllers/flickr_recent.php` 控制器文件将加载 `flickr_wrapper` API，调用其服务以获取新上传的公开照片和摄影师，并渲染一个视图来显示结果。'
- en: 'In order to execute the controller, you should point your browser to the following
    URI: `http://mydomain.com/myproject/flickr_recent`.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行控制器，您应该将浏览器指向以下 URI：`http://mydomain.com/myproject/flickr_recent`。
- en: 'The following is the controller code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的控制器代码：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The class code continues as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 类代码继续如下：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The flickr_recent_view.php view file
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flickr_recent_view.php 视图文件
- en: The `flickr_recent_view.php` view file is rendered by our controller named `Flickr_recent`
    defined previously. This controller uses our developed `flickr_wrapper` library
    in order to get the recent Flickr uploaded photos with their associated information.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`flickr_recent_view.php` 视图文件由我们之前定义的 `Flickr_recent` 控制器渲染。此控制器使用我们开发的 `flickr_wrapper`
    库来获取带有相关信息的最新 Flickr 上传照片。'
- en: The view file is located at `application/views/flickr_recent_view.php`. This
    view uses the CI parser for the PHP inserted parameters using the `<?=$param ?>`
    notation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 视图文件位于 `application/views/flickr_recent_view.php`。此视图使用 CI 解析器通过 `<?=$param
    ?>` 符号插入 PHP 参数。
- en: 'The following is the code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的代码：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The class code continues as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 类代码继续如下：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Example 4 – the LinkedIn API wrapper
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 4 – LinkedIn API 包装器
- en: In this example, we will build the CI Library wrapper to integrate with the
    LinkedIn API in order to query the LinkedIn information from it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将构建 CI 库包装器以与 LinkedIn API 集成，以便从其中查询 LinkedIn 信息。
- en: 'There are several challenges in doing so, one of which is to get the token
    to access the LinkedIn resources and access the data objects such as the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做时存在几个挑战，其中之一是获取访问 LinkedIn 资源的令牌并访问如下数据对象：
- en: The LinkedIn user's details
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LinkedIn 用户的详细信息
- en: The LinkedIn user's connections
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LinkedIn 用户的连接
- en: The LinkedIn company's details
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LinkedIn 公司的详细信息
- en: The LinkedIn company's updates
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LinkedIn 公司的更新
- en: Requirements
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求
- en: The PHP extension `oauth` library must be installed from [http://il1.php.net/manual/en/book.oauth.php](http://il1.php.net/manual/en/book.oauth.php).
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 扩展 `oauth` 库必须从 [http://il1.php.net/manual/en/book.oauth.php](http://il1.php.net/manual/en/book.oauth.php)
    安装。
- en: We shall register the application at LinkedIn Developers Network Homepage to
    receive the API key from [http://developer.linkedin.com](http://developer.linkedin.com).
    This unique API key is required to identify our application in order to grant
    access from LinkedIn for responding to our API calls to their API. Once we've
    registered our LinkedIn app, we will be provided with an API key and a secret
    key. For the safety of our application, we do not share our secret key. For more
    information, please refer to [http://developer.linkedin.com/](http://developer.linkedin.com/).
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应在LinkedIn开发者网络主页注册应用程序以接收API密钥，[http://developer.linkedin.com](http://developer.linkedin.com)。此唯一的API密钥用于识别我们的应用程序，以便从LinkedIn授权对我们的API调用进行访问。一旦我们注册了LinkedIn应用程序，我们将获得一个API密钥和一个密钥。为了我们应用程序的安全，我们不共享我们的密钥。有关更多信息，请参阅[http://developer.linkedin.com/](http://developer.linkedin.com/)。
- en: Authentication flowchart
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证流程图
- en: The following steps are required to authenticate our LinkedIn application to
    grant access. We will refer to this project as LinkedIn app.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了认证我们的LinkedIn应用程序以授予访问权限，需要以下步骤。我们将把这个项目称为LinkedIn应用程序。
- en: The LinkedIn API client sends a request to LinkedIn. The client sends the request
    to the LinkedIn request token URL at [https://api.linkedin.com/uas/oauth/requestToken](https://api.linkedin.com/uas/oauth/requestToken)
    via the `oauth` object with a `callback URL` as a parameter to the LinkedIn API.
    The `callback URL` parameter is the URL to return to from the LinkedIn Authorization
    URL, where the LinkedIn user shall confirm the LinkedIn app's required permission.
    The LinkedIn server responds and returns the `oauth` token (public key) and the
    `ouath` token secret key.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LinkedIn API客户端向LinkedIn发送请求。客户端通过`oauth`对象将请求发送到LinkedIn请求令牌URL [https://api.linkedin.com/uas/oauth/requestToken](https://api.linkedin.com/uas/oauth/requestToken)，其中`callback
    URL`作为LinkedIn API的参数。`callback URL`参数是从LinkedIn授权URL返回的URL，LinkedIn用户应在其中确认LinkedIn应用程序所需的权限。LinkedIn服务器响应并返回`oauth`令牌（公钥）和`oauth`令牌密钥。
- en: '[PRE23]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The client sends the request to the LinkedIn server auth URL using the `oauth_token`
    token received from [https://api.linkedin.com/uas/oauth/authorize ?oauth_token
    = oauth_token](https://api.linkedin.com/uas/oauth/authorize%20?oauth_token%20=%20oauth_token),
    where `oauth_token` is the oauth token returned from the server at phase 1.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端使用从[https://api.linkedin.com/uas/oauth/authorize ?oauth_token = oauth_token](https://api.linkedin.com/uas/oauth/authorize%20?oauth_token%20=%20oauth_token)服务器在第一阶段返回的`oauth_token`令牌，向LinkedIn服务器身份验证URL发送请求。
- en: '[PRE24]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The LinkedIn server returns the oauth token, the oauth token secret, and the
    `oauth_verifier` to the client.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LinkedIn服务器将oauth令牌、oauth令牌密钥和`oauth_verifier`返回给客户端。
- en: '[PRE25]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The client sends the request to the LinkedIn Server access token path at [https://api.linkedin.com/uas/oauth/accessToken](https://api.linkedin.com/uas/oauth/accessToken).
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端向LinkedIn服务器访问令牌路径[https://api.linkedin.com/uas/oauth/accessToken](https://api.linkedin.com/uas/oauth/accessToken)发送请求。
- en: '[PRE26]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This example will be constructed from the following controller, library, and
    view:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将由以下控制器、库和视图构建：
- en: '`application/controllers/linkedinfo.php`: The controller that uses the LinkedIn
    library for authentication and displaying the output returned by the library'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/controllers/linkedinfo.php`: 使用LinkedIn库进行身份验证并显示库返回输出的控制器'
- en: '`application/libraries/linkedin_handeler.php`: The `linkedin_handler` library,
    which enables access to the LinkedIn resources, such as the LinkedIn user''s details
    and connections, and the companies'' details'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/libraries/linkedin_handeler.php`: `linkedin_handler`库，它使访问LinkedIn资源成为可能，例如LinkedIn用户的详情和连接，以及公司的详情'
- en: '`application/views/linkedin-me.php`: The view, which displays the LinkedIn
    user''s details'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/linkedin-me.php`: 显示LinkedIn用户详情的视图'
- en: '`application/views/linked-connections.php`: The view, which displays the LinkedIn
    user''s connections'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/linked-connections.php`: 显示LinkedIn用户的连接的视图'
- en: '`application/views/linked-company.php`: The view, which displays the company''s
    details'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/linked-company.php`: 显示公司详情的视图'
- en: '`application/views/linked-company-updates.php`: The view, which displays a
    company''s updates'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/linked-company-updates.php`: 显示公司更新的视图'
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 假设项目根的URI是`http://mydomain.com/myproject`。
- en: Hence, the URI to execute the auth controller for login will be `http://mydomain.com/myproject/linkedinfo`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，执行登录身份验证控制器的URI将是`http://mydomain.com/myproject/linkedinfo`。
- en: The linkedin_handler.php library file
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: linkedin_handler.php库文件
- en: The library file `application/libraries/linkedin_handler.php` contains the class
    library `linkedin_handler`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 库文件`application/libraries/linkedin_handler.php`包含类库`linkedin_handler`。
- en: The library contains the function for authenticating the app and accessing the
    LinkedIn resources.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 该库包含用于验证应用程序和访问LinkedIn资源的函数。
- en: 'The following is the code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的代码：
- en: '[PRE27]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The linkedinfo.php controller file
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接info.php控制器文件
- en: The controller file `application/controllers/linkedinfo.php` will load the LinkedIn
    API, call its services, and render a view to show the results.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器文件`application/controllers/linkedinfo.php`将加载LinkedIn API，调用其服务，并渲染视图以显示结果。
- en: 'The following is the controller code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的控制器代码：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The linkedin-me.php view file
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接linkedin-me.php视图文件
- en: This view file displays the LinkedIn user's details.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图文件显示LinkedIn用户的详细信息。
- en: 'The following is the view code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的视图代码：
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The view file linked-connections.php
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 视图文件linked-connections.php
- en: This view file displays the LinkedIn user's connections.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图文件显示LinkedIn用户的联系。
- en: 'The following is the view code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的视图代码：
- en: '[PRE30]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The view file linked-company.php
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 视图文件linked-company.php
- en: This view file displays the LinkedIn company's details.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图文件显示LinkedIn公司的详细信息。
- en: 'The following is the view code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的视图代码：
- en: '[PRE31]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The view file linked-company-updates.php
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 视图文件linked-company-updates.php
- en: This view file displays the three updates of the LinkedIn company.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图文件显示LinkedIn公司的三个更新。
- en: 'The following is the view code:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的视图代码：
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have reviewed the CI libraries' scope, the different types
    of built-in CI echo system third-party libraries, and how to build our own libraries.
    We also reviewed the steps to load and use the library resources in our project.
    Eventually, we created several usage examples.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了CI库的作用域、不同类型的内置CI输出系统第三方库，以及如何在我们的项目中构建自己的库。我们还回顾了在项目中加载和使用库资源的方法。最终，我们创建了几个使用示例。
