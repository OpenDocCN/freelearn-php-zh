- en: Chapter 2. A URL Shortener
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. URL缩短器
- en: There are quite a few URL shorteners out there on the Internet; however, there's
    always room for a little fun and sometimes people or companies require their own
    solutions rather than just using an external provider. The project in this chapter
    covers just that—developing a URL shortener in CodeIgniter that can be used by
    anyone.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上有很多URL缩短工具；然而，总有一些空间可以加入一些乐趣，有时个人或公司需要自己的解决方案，而不是仅仅使用外部提供商。本章的项目正是如此——开发一个任何人都可以使用的基于CodeIgniter的URL缩短器。
- en: 'To make this app, we''ll need to do a few things: we''ll create two controllers,
    one to create a shortened URL and one to redirect a shortened URL to its actual
    location on the Web.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作这个应用程序，我们需要做一些事情：我们将创建两个控制器，一个用于创建缩短的URL，另一个用于将缩短的URL重定向到其实际的网络位置。
- en: We'll create language files to store text, creating a foundation for multiple
    language support should you wish to implement it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建语言文件来存储文本，为将来可能实现的多语言支持打下基础。
- en: We will also make amends to the `config/routes.php` file—this is to ensure that
    the shortened URL is as short as it can be.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将修改`config/routes.php`文件——这是为了确保缩短后的URL尽可能短。
- en: However, this app, along with all the others in this book, relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you may already
    have, bear in mind that the setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction
    and Shared Project Resources"), *Introduction and Shared Project Resources,* acts
    as a foundation for this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个应用程序，以及本书中的其他所有应用程序，都依赖于我们在[第一章](ch01.html "第一章. 引言和共享项目资源")中做的基本设置，*引言和共享项目资源*；虽然你可以将大量代码块放入你几乎已经拥有的任何应用程序中，但请记住，我们在[第一章](ch01.html
    "第一章. 引言和共享项目资源")中做的设置是这个章节的基础。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Design and wireframes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和线框图
- en: Creating the database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Adjusting the `routes.php` file
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整`routes.php`文件
- en: Creating the model
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Creating the views
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: Creating the controllers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Putting it all together
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合所有内容
- en: So without further ado, let's get on with it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，无需多言，让我们开始吧。
- en: Design and wireframes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计和线框图
- en: Before we start building, we should always take a look at what we plan to build.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建之前，我们应该始终看看我们计划构建什么。
- en: 'Firstly, a brief description of our intent: we plan to build an app that will
    display a simple form to the user. The user will be encouraged to enter a URL
    into the form and submit that form.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，简要描述我们的意图：我们计划构建一个应用程序，将显示一个简单的表单给用户。我们将鼓励用户在表单中输入URL并提交该表单。
- en: A unique code will be generated and associated with the URL entered by the user.
    This URL and unique code will be saved to a database.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成一个唯一代码并将其与用户输入的URL关联起来。这个URL和唯一代码将被保存到数据库中。
- en: A new URL will be shown to the user containing the unique code we just generated.
    That unique code will be appended to the URL of the app we're building. Should
    the user (or anyone else) click on that link, the app will look up the unique
    code in the database. If the unique code exists, it will redirect the user to
    the original URL associated with that unique code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将看到一个包含我们刚刚生成的唯一代码的新URL。这个唯一代码将被附加到我们正在构建的应用程序的URL上。如果用户（或任何人）点击这个链接，应用程序将在数据库中查找这个唯一代码。如果唯一代码存在，它将把用户重定向到与该唯一代码关联的原始URL。
- en: 'So, let''s take a look at some wireframes to help us understand what this might
    look like on screen:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看一些线框图，以帮助我们理解这可能在屏幕上看起来是什么样子：
- en: '![Design and wireframes](img/7093OS_02_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![设计和线框图](img/7093OS_02_01.jpg)'
- en: This is the first page that the user will see. The user is invited to enter
    a URL into the textbox and hit the **Go** button.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户将看到的第一个页面。用户被邀请在文本框中输入URL并点击**Go**按钮。
- en: 'The page will be submitted and code will be generated. Both this code and the
    original URL will be saved to the database. The user will then see the new URL
    we''ve just created for them. They can copy that URL to their clipboard (for pasting
    into an e-mail and so on) or click on it there and then if they wish. This is
    shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 页面将被提交，并将生成代码。这两段代码和原始 URL 都将保存到数据库中。然后，用户将看到我们为他们创建的新 URL。他们可以将该 URL 复制到剪贴板（用于粘贴到电子邮件等）或立即点击它。以下截图显示了这一过程：
- en: '![Design and wireframes](img/7093OS_02_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![设计和线框图](img/7093OS_02_02.jpg)'
- en: File overview
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件概览
- en: 'We''re going to create six files for this application, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这个应用程序创建六个文件，如下所示：
- en: '`/path/to/codeigniter/application/models/urls_model.php`: This file provides
    access to the database and allows us to create the `url_code`, save the record
    to the database, and also retrieve the original URL from the database.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/urls_model.php`：此文件提供对数据库的访问，并允许我们创建
    `url_code`，将记录保存到数据库中，并从数据库中检索原始 URL。'
- en: '`/path/to/codeigniter/application/views/create/create.php`: This file provides
    us with our interface, the user facing form, and any messages needed to inform
    the user of their actions or the system''s actions.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/create/create.php`：此文件为我们提供界面，用户界面表单以及任何需要通知用户其操作或系统操作的提示信息。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This file provides
    a navigation bar at the top of the page.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`：此文件在页面顶部提供导航栏。'
- en: '`/path/to/codeigniter/application/controllers/create.php`: This file performs
    validation checks on the URL inputted by the user, calls any helpers, and so on.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/create.php`：此文件对用户输入的 URL 进行验证检查，调用任何助手等。'
- en: '`/path/to/codeigniter/application/controllers/go.php`: This file provides support
    for shortened URLs. It gets the unique code parameter from the URI (first segment),
    sends it to the `Urls_model,` and redirects the user to the associated `url_address`
    if it exists.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/go.php`：此文件为缩短 URL 提供支持。它从 URI（第一部分）获取唯一的代码参数，将其发送到
    `Urls_model`，如果存在，则将用户重定向到相关的 `url_address`。'
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    file provides language support for the application.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`：此文件为应用程序提供语言支持。'
- en: 'The file structure of the preceding six files is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前六个文件的文件结构如下：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)下载您购买的所有 Packt 出版物的示例代码文件。如果您在其他地方购买了此书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Creating the database
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources,* in mind. However, it's not the end of the world—the code can
    easily be applied to other situations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，您应该已经按照[第1章](ch01.html "第1章。简介和共享项目资源")中所述设置了 CodeIgniter 和 Bootstrap，*简介和共享项目资源*。如果没有，那么您应该知道本章中的代码是专门针对[第1章](ch01.html
    "第1章。简介和共享项目资源")中的设置编写的。然而，这并不是世界末日——代码可以轻松应用于其他情况。
- en: 'Firstly, we''ll build the database. Copy out the following MySQL code into
    your database:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将构建数据库。将以下 MySQL 代码复制到您的数据库中：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You don't have to call the database `urls` if you don't want to. Feel free to
    rename to something else if you wish; just be sure to update the `config/database.php`
    file accordingly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想将数据库命名为 `urls`，也可以不这样做。如果您愿意，可以将其重命名为其他名称；只需确保相应地更新 `config/database.php`
    文件。
- en: 'Let''s take a look at what each item in the database means:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看数据库中的每个项目代表什么：
- en: '| Elements | Description |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 元素 | 描述 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `url_id` | This is the primary key. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `url_id` | 这是主键。 |'
- en: '| `url_code` | This contains the unique code generated by the `save_url()`
    function of `urls_model.php`. This is the code that is appended to the shortened
    URL. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `url_code` | 这包含由 `urls_model.php` 的 `save_url()` 函数生成的唯一代码。这是附加到缩短URL上的代码。|'
- en: '| `url_address` | This is the actual URL the user entered in the form in the
    `create.php` view file. It will be the URL that the user is redirected to. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `url_address` | 这是在 `create.php` 视图文件中用户实际输入的URL。它将是用户将被重定向到的URL。|'
- en: '| `url_created_at` | This is the MySQL timestamp created when the record was
    added. It is necessary so that we have an idea of when a record was created; also,
    it gives us a method of clearing old records from the database using a cron script
    should you wish. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `url_created_at` | 这是记录添加时创建的 MySQL 时间戳。这是必要的，这样我们就有了一个关于记录创建时间的概念；此外，它还给我们提供了一个方法，如果您愿意，可以使用
    cron 脚本来清除数据库中的旧记录。|'
- en: We'll also need to make amends to the `config/database.php` file—namely setting
    the database access details, username password, and so on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对 `config/database.php` 文件进行修改——即设置数据库访问详情、用户名、密码等。
- en: 'Open the `config/database.php` file and find the following lines:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `config/database.php` 文件并找到以下行：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Edit the values in the preceding lines. Ensure you substitute those values with
    the ones that are more specific to your setup and situation—so enter your username,
    password, and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑前几行的值。确保用更适合您设置和情况的值替换这些值——因此输入您的用户名、密码等。
- en: Adjusting the routes.php file
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整 routes.php 文件
- en: 'We want short URLs—in fact the shorter the better. The user clicking on a URL
    would be better served if the URL were as short as possible; for that reason,
    it would be a good idea if we removed certain things from the URL to make it shorter—for
    example, the controller name and function name. We will use CodeIgniter''s routing
    functionality to achieve this. This can be done as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望有短URL——实际上越短越好。用户点击的URL如果尽可能短会更好；因此，如果我们从URL中移除某些内容以使其更短，那将是一个好主意——例如，控制器名称和函数名称。我们将使用
    CodeIgniter 的路由功能来实现这一点。这可以按以下方式完成：
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `config/routes.php` 文件进行编辑并找到以下行（文件底部附近）：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Firstly, we need to change the default controller. Initially, in a CodeIgniter
    application, the default controller is set to `welcome`. However, we don''t need
    that; instead we want the default controller to be `create`. So, consider the
    following line:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更改默认控制器。最初，在 CodeIgniter 应用程序中，默认控制器设置为 `welcome`。然而，我们不需要那个；相反，我们希望默认控制器是
    `create`。所以，考虑以下行：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Replace it with the following code:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用以下代码替换它：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will also need to set up a route rule for the `go` controller. We will need
    to remove the controller and function names (usually the first and second parameters
    in the URI). The following are two lines of code (highlighted in bold); add these
    two lines below the `404_override` route, so that the file now looks like the
    following:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要为 `go` 控制器设置路由规则。我们需要移除控制器和函数名称（通常在URI中的前两个参数）。以下有两行代码（以粗体突出显示）；将这些两行代码添加到
    `404_override` 路由下面，这样文件现在看起来如下所示：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, the eagle-eyed among you will have looked at that last line and seen the
    `(:any)` type; some of you may have wondered what all that was about.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，那些细心的读者中的一些人可能已经看到了最后一行的 `(:any)` 类型；有些人可能想知道那是什么意思。
- en: CodeIgniter supports a simple type of regex that makes routing for unknown URLs
    much easier. The `(:any)` type says to CodeIgniter that any URI pattern not otherwise
    defined (we're also defining `create`) is to be routed to `go/index`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter 支持一种简单的正则表达式类型，这使得对未知URL的路由变得容易得多。`(:any)` 类型告诉 CodeIgniter，任何未定义的URI模式（我们也在定义
    `create`）都应该路由到 `go/index`。
- en: Creating the model
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: The `Urls_model` contains three functions; obviously it contains our `__construct()`
    function but we're not focusing on that at the moment as it's not doing anything
    except referencing its parent.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Urls_model` 包含三个函数；显然它包含我们的 `__construct()` 函数，但我们目前不关注它，因为它没有做任何事情，只是引用了其父类。'
- en: 'Instead, let''s look at the two functions `save_url()` and `fetch_url()`. As
    their names suggest, one saves information to the database and the other fetches
    information from it. For now, let''s go and create the code and we''ll discuss
    in detail what each function does later:     Create the `urls_model.php` model file and add the following code to it:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们看看两个函数 `save_url()` 和 `fetch_url()`。正如它们的名称所暗示的，一个将信息保存到数据库中，另一个从数据库中获取信息。现在，让我们去创建代码，稍后我们将详细讨论每个函数的功能：创建
    `urls_model.php` 模型文件，并向其中添加以下代码：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s take a look at `save_url()`. Notice the PHP construct `do...while`;
    it looks something like the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `save_url()`。注意 PHP 构造 `do...while`；它看起来像以下这样：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So that means *do something while a condition is not met*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 *在条件不满足的情况下执行某些操作*。
- en: Now, with that in mind, think about our problem. We have to associate the URL
    that the user has entered in the form with a unique value. We will use this unique
    value to represent the real URL.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑到这一点，思考我们的问题。我们必须将用户在表单中输入的 URL 与一个唯一值关联起来。我们将使用这个唯一值来表示真实的 URL。
- en: Now there's no point using a sequential number (1, 2, 3, … 1000) as our unique
    value as someone can come along and iterate up through the numbers and get access
    to everyone's URLs. This may not be such a dreadful security risk as presumably
    all pages are accessible from the Internet anyway, but it's still not a good idea.
    So the unique value must not only be unique, it must be random and not easily
    guessed by passersby. Also, this unique value must only exist once in the database.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用连续的数字（1，2，3，… 1000）作为我们的唯一值是没有意义的，因为有人可以遍历这些数字并获取到每个人的 URL。这可能不是如此可怕的安全风险，因为据推测，所有页面都可以从互联网上访问，但这仍然不是一个好主意。因此，唯一值不仅必须是唯一的，还必须是随机的，并且不容易被过路人猜测。此外，这个唯一值必须在数据库中只存在一次。
- en: To ensure this, we will have to check if the unique value already exists and,
    if it does exist, make a new unique code and check in the database again.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保这一点，我们必须检查唯一值是否已经存在，如果存在，就生成一个新的唯一代码，并在数据库中再次检查。
- en: 'So, let''s look at the `do while` construct in the `save_url()` function in
    a bit more detail. The following is the code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们更详细地看看 `save_url()` 函数中的 `do while` 构造。以下是代码：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We use CodeIgniter's `String` helper and its `random_string()` function (make
    sure you include the `String` helper using `$this->load->helper('string');` in
    your controllers' constructor). The `random_string()` function will create (as
    the name suggests) a random string of characters that we will use for our unique
    code.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 CodeIgniter 的 `String` 辅助函数及其 `random_string()` 函数（确保你在控制器构造函数中使用 `$this->load->helper('string');`
    包含 `String` 辅助函数）。`random_string()` 函数将创建（正如其名称所暗示的）一个随机字符串，我们将使用它作为唯一代码。
- en: In this case, we're asking `random_string()` to give us a string of characters
    made up of numbers and uppercase and lowercase letters; that string should be
    no more that 8 digits in length.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们要求 `random_string()` 给我们一个由数字和大小写字母组成的字符串；这个字符串的长度不应超过 8 位数字。
- en: We then look into the database to see if the code `random_string()` has made
    for us already exists. We'll use the `$this->db->count_all_results();` CodeIgniter
    function to count up the number of matching results.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们查看数据库以查看我们是否已经为 `random_string()` 生成了一个代码。我们将使用 `$this->db->count_all_results();`
    CodeIgniter 函数来计算匹配结果的数量。
- en: If the unique string already exists, then the number returned by `$this->db->count_all_results();`
    will be equal to `1` (as it already exists). If this happens, we will loop back
    to the beginning of the `do while` construct and start again by generating a new
    code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果唯一字符串已经存在，那么 `$this->db->count_all_results();` 返回的数字将等于 `1`（因为它已经存在）。如果发生这种情况，我们将回到
    `do while` 构造的开始，并重新生成一个新代码。
- en: We keep doing this until we find a code that does not exist in the database.
    When we do, we break out of the `do while` loop and save that unique code, along
    with the original URL to the database.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会一直这样做，直到找到一个在数据库中不存在的代码。当我们找到时，我们就跳出 `do while` 循环，并将这个唯一代码以及原始 URL 保存到数据库中。
- en: Now let's look at `fetch_url()`. We want to see if there is a record in the
    database that corresponds to the `$url_code` entered by the user (in this case,
    they have clicked on a URL). The `fetch_url()` function accepts `$url_code` as
    a function argument passed to it by the controller and looks for it in the database.
    If it is found, the entire record (table row) is returned to the controller; if
    not, it returns false. The controller handles the false result accordingly (it
    displays an error).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`fetch_url()`函数。我们想查看数据库中是否有与用户输入的`$url_code`（在这种情况下，他们点击了一个URL）相对应的记录。`fetch_url()`函数接受由控制器传递给它的函数参数`$url_code`，并在数据库中查找它。如果找到，则将整个记录（表行）返回给控制器；如果没有找到，则返回false。控制器相应地处理这个false结果（显示错误）。
- en: Creating views
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'We''re going to create two view files in this section, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建两个视图文件，如下所示：
- en: '`/path/to/codeigniter/application/models/views/create/create.php`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/views/create/create.php`'
- en: '`/path/to/codeigniter/application/models/views/nav/top_nav.php`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/views/nav/top_nav.php`'
- en: Don't forget that the navigation file (`views/nav/top_nav.php`) is unique to
    each chapter in this book.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记导航文件（`views/nav/top_nav.php`）是本书每个章节独有的。
- en: Creating the view file–views/create/create.php
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图文件–`views/create/create.php`
- en: The `create.php` file is the view file that the user creating the shortened
    URL will see; it contains the HTML form the user will enter the original URL into
    and any interactive elements such as error or success messages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`create.php`文件是用户创建短网址时看到的视图文件；它包含用户将输入原始URL的HTML表单以及任何交互元素，如错误或成功消息。'
- en: 'Create the `create/create.php` view file and add the following code to it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`create/create.php`视图文件，并将以下代码添加到其中：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating the view file–views/nav/top_nav.php
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图文件–`views/nav/top_nav.php`
- en: 'Each project in this book has its own navigation bar at the top of the page.
    This chapter is no exception although the actual navigation options for this project
    are limited—mostly because the app we''re building only really does one thing.
    So create the `nav/top_nav.php` view file and add the following code to it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的每个项目都在页面顶部有自己的导航栏。这一章也不例外，尽管这个项目的实际导航选项有限——主要是因为我们正在构建的应用程序实际上只做了一件事。因此，创建`nav/top_nav.php`视图文件，并将以下代码添加到其中：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating controllers
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: There are two controllers in this project. The first one `create` is responsible
    for displaying the initial form to the user and validating the input. The second
    one `go` will redirect the user to the original URL.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，有两个控制器。第一个`create`控制器负责向用户显示初始表单并验证输入。第二个`go`控制器将用户重定向到原始URL。
- en: Don't forget that the controllers extend the `core/MY_Controller.php` file and
    inherit the helpers loaded there.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记控制器扩展了`core/MY_Controller.php`文件，并继承了那里加载的辅助函数。
- en: Creating the controller file–controllers/create.php
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建控制器文件–`controllers/create.php`
- en: 'The `create` controller in this project is responsible for the initial contact
    with the user; that is to say, it loads the view file `views/create.php` (that
    displays the form to the user) and processes the input—validation and more. We''ll
    look at it in a second, but first let''s create the controller:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中的`create`控制器负责与用户的初始接触；也就是说，它加载视图文件`views/create.php`（向用户显示表单）并处理输入——验证等。我们将在下一部分查看它，但首先让我们创建控制器：
- en: 'Create the controller file `create.php` and add the following code to it:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建控制器文件`create.php`，并将以下代码添加到其中：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, the `create` controller does the following things for us:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`create`控制器为我们做了以下事情：
- en: Form validation, where it checks to see if the input is what we expect
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单验证，检查输入是否符合预期
- en: Packaging up the `url_address` ready for the `Urls_model`
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`url_address`打包好，以便传递给`Urls_model`
- en: Handling any error and success messages
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理任何错误和成功消息
- en: 'Let''s go through the controller by taking a look at what happens when the
    controller is loaded. As we''re using CodeIgniter''s form validation processes,
    you''ll be aware that `($this->form_validation->run() == FALSE)` will trigger
    the view files to be displayed, as shown here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看控制器加载时发生的情况来遍历控制器。由于我们使用CodeIgniter的表单验证过程，您会知道`($this->form_validation->run()
    == FALSE)`将触发显示视图文件，如下所示：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Before we display the view files, we set some variable values for the view file
    `create/create.php`. These values govern how the success and error messages are
    displayed. These are stored in the `$page_data` array (see the bold text in the
    preceding code).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们显示视图文件之前，我们为视图文件`create/create.php`设置了一些变量值。这些值决定了成功和错误消息的显示方式。这些值存储在`$page_data`数组中（参见前面代码中的粗体文本）。
- en: 'Assuming there were no errors from the form validation, we grab the `url_address`
    from the post array and package it into an array, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 假设表单验证没有错误，我们从POST数组中获取`url_address`并将其打包成一个数组，如下所示：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We then load the `Urls_model` and send the `$data` array to the `save_url()`function
    of `Urls_model`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后加载`Urls_model`并将`$data`数组发送到`Urls_model`的`save_url()`函数：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I have removed the comments to make it more legible for this explanation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经移除了注释，以便于解释。
- en: When successful, the model will return the `url_code` that we store in `$page_data['encoded_url']`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当操作成功时，模型将返回我们存储在`$page_data['encoded_url']`中的`url_code`。
- en: This is then passed the `create/create.php` view file, which will display a
    success message to the user and their now shortened URL.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将`create/create.php`视图文件传递给它，该文件将向用户显示成功消息和他们的缩短后的URL。
- en: Creating the controller file–controllers/go.php
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建控制器文件–控制器/go.php
- en: The `go` controller is the other end of the process. That is to say, the `create.php`
    controller creates the shortened URL and saves it to the database, and the `go.php`
    controller is responsible for taking a URL, finding the `$url_code` in the `uri`
    segments, looking in the database to see if it exists, and, if so, redirecting
    the user to the actual web address associated with it. Sounds simple, and in truth
    it is.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`go`控制器是流程的另一端。也就是说，`create.php`控制器创建缩短的URL并将其保存到数据库中，而`go.php`控制器负责获取一个URL，在`uri`段中查找`$url_code`，在数据库中查看它是否存在，如果存在，则将用户重定向到与之关联的实际网络地址。听起来很简单，事实上也是如此。'
- en: 'Create the `go.php` controller file and add the following code to it:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`go.php`控制器文件并向其中添加以下代码：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `go` controller really only gets going *after* the following lines:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`go`控制器实际上只有在以下行之后才开始工作：'
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding lines check to see if there is a 1st segment in the URL. Normally,
    the first and second segments are taken up by the controller and function name
    (as the order in the URL usually goes controller/function/parameter). However,
    as we want the URL to be short (or at least that's the idea), we're taking our
    unique code from the first parameter. Think of it as shifting what would normally
    be in the third parameter to the left. So, two levels higher up means that what
    was in the third segment is now at the first.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行检查URL中是否存在第一个段。通常，第一个和第二个段由控制器和函数名称占用（因为URL中的顺序通常是控制器/函数/参数）。然而，因为我们希望URL尽可能短（或者至少这是我们的想法），所以我们从第一个参数中获取我们的唯一代码。把它想象成将通常位于第三个参数中的内容向左移动。所以，向上两级意味着原来在第三个段中的内容现在位于第一个段。
- en: How do we do this? How do we have a parameter (our unique code) as the 1st parameter
    instead of the controller name? Where did the controller and function names go
    and why does it still work when they're removed?
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们该如何做呢？我们如何将一个参数（我们的唯一代码）作为第一个参数而不是控制器名称？控制器和函数名称去哪里了，为什么它们被移除后仍然可以正常工作？
- en: We alter the `routes.php` file, of course; this is explained earlier in this
    chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然会修改`routes.php`文件；这一点在本章的早期已经解释过了。
- en: Anyway, let's return to our code. If there is no item in the URL, then there
    isn't really anything for this controller to do. Thus, we'll redirect the user
    to the `base_url()` function, which will load the default controller (set as `autoload.php`);
    in this case, the default controller is the `create.php` file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，让我们回到我们的代码。如果URL中没有项目，那么这个控制器实际上没有什么可做的。因此，我们将用户重定向到`base_url()`函数，该函数将加载默认控制器（设置为`autoload.php`）；在这种情况下，默认控制器是`create.php`文件。
- en: 'Now, assuming that there *was* a 1st parameter, we''ll move on to the next
    part of the controller, the bit that works out the `$url_code`, as shown in the
    following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设存在一个第一个参数，我们将继续到控制器的下一部分，即计算`$url_code`的部分，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Take a look at the preceding code. We grab the 1st `uri` segment and assign
    it to the `$url_code` variable. We need to check if this code exists in the database,
    so we load the `Urls_model` and call the `fetch_url()` function of `Urls_model`,
    passing to it `$url_code`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下前面的代码。我们获取第1个`uri`段，并将其分配给`$url_code`变量。我们需要检查这个代码是否存在于数据库中，因此我们加载`Urls_model`并调用`Urls_model`的`fetch_url()`函数，将`$url_code`传递给它。
- en: The `fetch_url()` method will look in the database for a record corresponding
    to the value in `$url_code`. If nothing is found, it'll return `false,` causing
    the controller to load the `create/create.php` view.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetch_url()`方法将在数据库中查找与`$url_code`中的值相对应的记录。如果没有找到任何内容，它将返回`false`，导致控制器加载`create/create.php`视图。'
- en: 'However, if a record is found, `fetch_url()` returns the Active Record object.
    We now loop over the object, picking out the `url_address`, and storing it as
    the local variable `$url_address`, as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果找到了记录，`fetch_url()`将返回Active Record对象。我们现在遍历对象，挑选出`url_address`，并将其存储为本地变量`$url_address`，如下所示：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, we have the original URL in the `$url_address` variable. We simply pass
    this directly to the `redirect()`CodeIgniter function, which will, as the name
    suggests, redirect the user to the original URL.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在`$url_address`变量中有了原始URL。我们只需直接将其传递给`redirect()`CodeIgniter函数，正如其名称所暗示的，这将把用户重定向到原始URL。
- en: 'Notice the use of the `prep_url()` CodeIgniter function from within the `redirect()`
    function. This can be done as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在`redirect()`函数内部使用`prep_url()`CodeIgniter函数。可以这样做：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `prep_url()` function will ensure that there is `http://` at the beginning
    of the URL, if it does not already have it
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`prep_url()`函数将确保URL开头有`http://`，如果它还没有的话'
- en: Creating the language file
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建语言文件
- en: Taking text out of the HTML or storing text in other files such as controllers
    can make maintaining applications or adding multiple languages a nightmare. Keeping
    languages in a separate dedicated file is always a good idea. With that in mind,
    we will create a language file for this app.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 从HTML中提取文本或将文本存储在其他文件中，如控制器，会使维护应用程序或添加多种语言变得噩梦。始终将语言保存在单独的专用文件中是个好主意。考虑到这一点，我们将为这个应用程序创建一个语言文件。
- en: 'Create the language file `en_admin_lang.php` and add the following code to
    it:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 创建语言文件`en_admin_lang.php`并将其中的以下代码添加到其中：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Putting it all together
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有这些放在一起
- en: Now that we have made all the amendments to configuration files, created the
    database, and created all the files necessary for the app to work (controllers,
    models, views, and so on) let's run through a few scenarios briefly, just to make
    sure we know how the app functions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对配置文件进行了所有修改，创建了数据库，并创建了应用程序运行所需的所有文件（控制器、模型、视图等），让我们简要地浏览几个场景，以确保我们知道应用程序的功能。
- en: Creating a shortened URL
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建缩短URL
- en: 'Let''s consider an example where Lucy visits the URL Shortener app and the
    `create` controller is called by CodeIgniter, displaying the `create/create.php`
    view file. The following is the sequence of events:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子，其中Lucy访问URL缩短器应用程序，CodeIgniter调用`create`控制器，显示`create/create.php`视图文件。以下是一系列事件：
- en: Lucy enters a URL in the text input and clicks on **Shorten Now**.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lucy在文本输入中输入一个URL并点击**立即缩短**。
- en: Upon submitting the form, the controller validates the URL. The URL is successfully
    validated and the validation returns no errors.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提交表单后，控制器验证URL。URL验证成功，验证没有返回错误。
- en: The URL entered by Lucy is then sent to the `save_url()`function of `Urls_model`
    that creates a unique code. The `save_url()` function uses the PHP construct `do
    while` and an Active Record database query to create a unique code that doesn't
    already exist in the database.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lucy输入的URL随后被发送到`Urls_model`的`save_url()`函数，该函数创建一个唯一的代码。`save_url()`函数使用PHP构造`do
    while`和Active Record数据库查询来创建一个在数据库中不存在的唯一代码。
- en: Once a code has been created that doesn't already exist, it is saved to the
    database along with a MySQL timestamp.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了一个不存在的代码，它就会与MySQL时间戳一起保存到数据库中。
- en: The app then displays a success message to Lucy, informing her that the URL
    was saved correctly. It also displays the URL for her to either click on or (more
    likely) copy-and-paste elsewhere.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序随后向Lucy显示一条成功消息，通知她URL已正确保存。它还显示URL，供她点击或（更可能的是）复制粘贴到其他地方。
- en: Retrieving a URL
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取URL
- en: 'Let''s consider an example where Jessica receives an e-mail from Lucy containing
    the shortened URL. The following is the sequence of events:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子，其中Jessica收到来自Lucy的电子邮件，其中包含缩短后的URL。以下是一系列事件：
- en: Jessica opens the e-mail and clicks on the URL in that e-mail.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 杰西卡打开电子邮件并点击了其中的网址。
- en: Her computer opens a browser and takes her to our app. As the `create` controller
    is not the 1st `uri` segment, the `go` controller is run (we set this in the `routes.php`
    file).
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 她的电脑打开浏览器并带她来到我们的应用。由于 `create` 控制器不是第一个 `uri` 段，因此运行 `go` 控制器（我们在 `routes.php`
    文件中设置了这一点）。
- en: The `go` controller loads the `Urls_model,` passing it the `url_code` (that
    was in the first segment of `uri`). The `fetch_url()` function of `Urls_model`
    looks in the database for the code and, if found, it returns the actual web address
    associated with that code to the `go` controller.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go` 控制器加载 `Urls_model`，传递 `url_code`（位于 `uri` 的第一个段中）。`Urls_model` 的 `fetch_url()`
    函数在数据库中查找代码，如果找到，它将实际与该代码关联的网址返回给 `go` 控制器。'
- en: The `go` controller redirects the browser to the URL supplied by the model.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go` 控制器将浏览器重定向到模型提供的 URL。'
- en: Jessica is happy as she can look at the cute cat video Lucy sent her! Awww!
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 杰西卡很高兴，因为她可以看露西给她发的可爱猫咪视频！哎呀！
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So there you are! We've got ourselves a fairly good URL shortener application.
    It's certainly not feature-rich or the most advanced, but it works and is ready
    to be expanded upon should you wish. Perhaps you could add user accounts or payment
    for advanced features?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是我们了！我们有一个相当不错的 URL 短链应用。它当然不是功能丰富或最先进的，但它能工作，如果你愿意，可以进一步扩展。也许你可以添加用户账户或为高级功能收费？
- en: It currently uses Twitter Bootstrap for the frontend so it probably could do
    with an individual face-lift, a different style, look and feel, but it's currently
    user-friendly and responsive to mobile devices.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 目前它使用 Twitter Bootstrap 作为前端，所以可能需要个性化的外观提升，不同的风格、外观和感觉，但目前的界面友好且对移动设备响应良好。
- en: In the next chapter, we will create a discussion forum, allowing someone to
    create a discussion and then letting people comment and reply.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个论坛，允许某人创建讨论，然后让人们评论和回复。
- en: A simple admin moderation system will be provided to help prevent any untoward
    shenanigans such as naked pictures of celebrities or signals intelligence being
    posted up, or something like that—unless of course you're into that sort of thing,
    in which case I hear that the Ecuadorian embassy in London do a terribly good
    lunch; you might get fed up of it after a few months, though!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将提供一个简单的管理员审核系统，以帮助防止任何不适当的恶作剧，例如名人裸照或信号情报被发布，或者类似的事情——除非你对此类事情感兴趣，在这种情况下，我听说伦敦的厄瓜多尔大使馆午餐做得非常好；不过，几个月后你可能就会厌倦了！
