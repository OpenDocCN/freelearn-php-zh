- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Plug and Play with Plugins
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件即插即用
- en: Plugins power many items in **Drupal**, such as blocks, field types, and field
    formatters. Plugins and plugin types are provided by modules. They provide a swappable
    and specific functionality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 插件为 **Drupal** 中的许多项目提供动力，例如块、字段类型和字段格式化器。插件和插件类型由模块提供。它们提供可交换的特定功能。
- en: In this chapter, we will implement a **block plugin**. We will use the Plugin
    API to provide a custom field type along with a widget and formatter for the field.
    The last recipe will show you how to create and use a custom plugin type.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实现一个 **块插件**。我们将使用插件 API 来提供自定义字段类型以及字段的组件和格式化器。最后一个菜谱将向您展示如何创建和使用自定义插件类型。
- en: Upcoming changes to the plugin system in Drupal minor versions
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 小版本中插件系统的即将到来的变化
- en: '**PHP 8** provides a feature called **PHP attributes** ([https://www.php.net/manual/en/language.attributes.overview.php](https://www.php.net/manual/en/language.attributes.overview.php)).
    With **Drupal 10**’s adoption of **PHP 8.1**, there is consideration to adopt
    PHP attributes over code document annotations, which are used in this chapter.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**PHP 8** 提供了一个名为 **PHP 属性** 的功能 ([https://www.php.net/manual/en/language.attributes.overview.php](https://www.php.net/manual/en/language.attributes.overview.php))。随着
    **Drupal 10** 对 **PHP 8.1** 的采用，考虑采用 PHP 属性来替代本章中使用的代码文档注解。'
- en: 'Support for PHP attributes instead of annotations may be available in **Drupal
    10.1**, the first minor release of Drupal 10\. Annotations will be supported throughout
    Drupal 10 but may become deprecated. Deprecating annotations in favor of PHP attributes
    is discussed in the following issue: [https://www.drupal.org/project/drupal/issues/3252386](https://www.drupal.org/project/drupal/issues/3252386).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Drupal 10.1** 中，可能支持使用 PHP 属性而不是注解。这是 Drupal 10 的第一个小版本。注解将在 Drupal 10 中得到支持，但可能会被弃用。关于弃用注解以使用
    PHP 属性的讨论可以在以下问题中找到：[https://www.drupal.org/project/drupal/issues/3252386](https://www.drupal.org/project/drupal/issues/3252386)。
- en: 'In this chapter, we will dive into the Plugin API provided in Drupal with the
    following recipes:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下菜谱深入了解 Drupal 提供的插件 API：
- en: Creating blocks using plugins
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件创建块
- en: Creating a custom field type
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义字段类型
- en: Creating a custom field widget
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义字段组件
- en: Creating a custom field formatter
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义字段格式化器
- en: Creating a custom plugin type
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义插件类型
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will require a custom module to be installed. In the following
    recipes, the module name is `mymodule`. Replace as appropriate. You can find the
    full code used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp08](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp08)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将需要一个自定义模块的安装。在以下菜谱中，模块名称为 `mymodule`。请适当替换。您可以在 GitHub 上找到本章使用的完整代码：[https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp08](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp08)
- en: Creating blocks using plugins
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件创建块
- en: In Drupal, a **block** is a piece of content that can be placed in a region
    provided by a theme. Blocks are used to present specific kinds of content, such
    as a user login form, a snippet of text, and many more.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Drupal 中，**块**是可以在主题提供的区域中放置的内容。块用于展示特定类型的内容，例如用户登录表单、一段文本，以及更多。
- en: Blocks are annotated plugins. Annotated plugins use documentation blocks to
    provide details of the plugin. They are discovered in the module’s `Plugin` class
    namespace. Each class in the `Plugin/Block` namespace will be discovered by the
    `Block` module’s plugin manager.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 块是注解插件。注解插件使用文档块来提供插件详情。它们在模块的 `Plugin` 类命名空间中被发现。`Plugin/Block` 命名空间中的每个类都将由
    `Block` 模块的插件管理器发现。
- en: In this recipe, we will define a block that will display a copyright snippet
    and the current year and place it in the footer region.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将定义一个块，它将显示版权片段和当前年份，并将其放置在页脚区域。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'First, we need to create the `src/Plugin/Block` directory in the module’s directory.
    This will translate the `\Drupal\mymodule\Plugin\Block` namespace and allow block
    plugin discovery:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建 `src/Plugin/Block` 目录。这将转换 `\Drupal\mymodule\Plugin\Block` 命名空间并允许块插件发现：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a file named `Copyright.php` in the newly created directory so that we
    can define the `Copyright` class for our block.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中创建一个名为 `Copyright.php` 的文件，以便我们可以为我们的块定义 `Copyright` 类。
- en: 'The `Copyright` class will extend the `\``Drupal\Core\Block\BlockBase` class:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Copyright` 类将扩展 `\Drupal\Core\Block\BlockBase` 类：'
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will extend the `BlockBase` class, which implements `\Drupal\Core\Block\BlockPluginInterface`
    and provides us with an implementation of nearly all of the interface’s methods.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展 `BlockBase` 类，该类实现了 `\Drupal\Core\Block\BlockPluginInterface` 并为我们提供了接口几乎所有方法的实现。
- en: 'Next, we will write the plugin annotation in a class document block. We will
    provide the block’s identifier, administrative label, and category as annotation
    tags:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在类文档块中编写插件注释。我们将提供块的标识符、管理标签和类别作为注释标签：
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Annotations are provided in code comments and are prefixed with `@`. The `@`
    symbol in `@Block` specifies that this is a `Block` annotation. Drupal will parse
    this and create a plugin definition based on the provided properties. `id` is
    the internal machine name, `admin_label` is displayed on the block listing page,
    and `category` shows up in the block select list.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注释提供在代码注释中，并以 `@` 为前缀。`@Block` 中的 `@` 符号指定这是一个 `Block` 注释。Drupal 将解析此并基于提供的属性创建一个插件定义。`id`
    是内部机器名，`admin_label` 在块列表页上显示，而 `category` 则出现在块选择列表中。
- en: 'We will need to implement the `build` method to satisfy the `\Drupal\Core\Block\BlockPluginInterface`
    interface. This returns the output to be displayed:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要实现 `build` 方法以满足 `\Drupal\Core\Block\BlockPluginInterface` 接口。这返回要显示的输出：
- en: '[PRE18]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `build` method returns a render array that uses Drupal’s `t` function to
    substitute `@year` for the `\DateTime` object’s output that is formatted as a
    full year.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`build` 方法返回一个渲染数组，使用 Drupal 的 `t` 函数将 `@year` 替换为格式化为完整年份的 `\DateTime` 对象的输出。'
- en: 'Rebuild your Drupal site’s cache to rebuild the block plugin definitions cache,
    causing a rediscovery of plugin definitions:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建你的 Drupal 网站缓存以重建块插件定义缓存，这将导致插件定义的重新发现：
- en: '[PRE42]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Go to the **Block layout** page from **Structure** in the administrative menu.
    In the Footer fourth region, click on **Place block**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从管理菜单中的 **结构** 转到 **块布局** 页面。在页脚第四个区域中，点击 **放置块**。
- en: 'Review the block list and add the custom block to your regions, for instance,
    the footer region. Find the **Copyright** block and click on **Place block** in
    the dialog form:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看块列表并将自定义块添加到你的区域中，例如页脚区域。找到 **版权** 块并点击对话框表单中的 **放置块**：
- en: '![Figure 8.1 – Place block dialog for the Copyright block](img/Figure_8.01_B18548.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 版权块放置对话框](img/Figure_8.01_B18548.jpg)'
- en: Figure 8.1 – Place block dialog for the Copyright block
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 版权块放置对话框
- en: Uncheck the **Display title** checkbox so that only our block’s content will
    be rendered. Click on **Save blocks** and accept all other defaults.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择 **显示标题** 复选框，以便只渲染我们的块内容。点击 **保存块** 并接受所有其他默认设置。
- en: 'Visit your Drupal site and verify that the copyright statement displays the
    current year:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问你的 Drupal 网站，并验证版权声明是否显示了当前年份：
- en: '![Figure 8.2 – Copyright block in the footer of a Drupal site](img/Figure_8.02_B18548.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – Drupal 网站页脚中的版权块](img/Figure_8.02_B18548.jpg)'
- en: Figure 8.2 – Copyright block in the footer of a Drupal site
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – Drupal 网站页脚中的版权块
- en: How it works…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The plugin system is comprised of multiple instantiable classes that share a
    similar interface. Using annotations and plugin managers, Drupal makes these classes
    discoverable. This allows for interacting with plugins and executing their functionality.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 插件系统由多个可实例化的类组成，这些类具有类似接口。使用注释和插件管理器，Drupal 使这些类可被发现。这允许与插件交互并执行其功能。
- en: The `\Drupal\Core\Block\BlockManager` class specifies that the block plugins
    must be located in the `Plugin\Block` namespace. It also defines the base interface
    that needs to be implemented, along with the `Annotation` class, which is to be
    used when parsing the class’s document block.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Block\BlockManager` 类指定了块插件必须位于 `Plugin\Block` 命名空间中。它还定义了需要实现的基接口，以及用于解析类文档块的
    `Annotation` 类。'
- en: When retrieving plugin definitions, the plugin manager first checks whether
    definitions have been previously discovered and cached. If there are no cached
    plugin definitions, the available namespaces registered in Drupal are scanned
    for plugins in the `\Drupal\{extension}\Plugin\Block` namespace. The discovered
    classes are then processed with the class documentation, which contains annotation
    data, and are then cached as the available plugin definitions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在检索插件定义时，插件管理器首先检查是否已经发现并缓存了定义。如果没有缓存的插件定义，插件管理器将扫描Drupal中注册的可用的命名空间中的`\Drupal\{extension}\Plugin\Block`命名空间下的插件。然后，发现的类将与包含注释数据的类文档一起处理，并将其作为可用的插件定义缓存。
- en: When viewing the `label` method on `\Drupal\Core\Block\BlockBase` is invoked
    to display the human-readable name defined in the plugin’s annotation. When a
    block is displayed on a rendered page, the `build` method is invoked and passed
    to the theming layer to be output.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`\Drupal\Core\Block\BlockBase`中调用`label`方法时，会显示插件注释中定义的可读名称。当一个块在渲染的页面上显示时，会调用`build`方法，并将其传递给主题层以输出。
- en: There’s more…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are more in-depth items that can be used when creating a block plugin.
    We will cover those in the following sections.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建块插件时，可以使用更多深入的项目。我们将在接下来的章节中介绍这些内容。
- en: Altering blocks
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改块
- en: 'Blocks can be altered in three different ways: the **plugin definition**, the
    **build array**, or the **view array output** can be altered.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 块可以通过三种不同的方式修改：可以修改**插件定义**、**构建数组**或**视图数组输出**。
- en: 'A module can implement `hook_block_alter` in its `.module` file and modify
    the annotation definitions of all the discovered blocks. This will allow a module
    to change the default `user_login_block` from **User Login** to **Login**:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模块可以在其`.module`文件中实现`hook_block_alter`，从而修改所有发现块的注释定义。这将允许模块将默认的`user_login_block`从**用户登录**更改为**登录**：
- en: '[PRE43]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'A module can implement `hook_block_build_alter` and modify the build information
    of a block. The hook is passed through the build array and the instance for the
    current block. Module developers can use this to add cache contexts or alter the
    cacheability of the cache metadata:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模块可以实现`hook_block_build_alter`并修改块的构建信息。钩子通过构建数组和当前块的实例传递。模块开发者可以使用此功能添加缓存上下文或更改缓存元数据的缓存性：
- en: '[PRE44]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: You can test the modification of the cache metadata by altering the block created
    in this recipe to output a timestamp instead of a year format. With caching enabled,
    you will see that the value persists on the same URL, but it will be different
    across each page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过更改此配方中创建的块以输出时间戳而不是年格式来测试缓存元数据的修改。启用缓存后，您将看到值在相同的URL上保持不变，但每个页面的值将不同。
- en: 'Finally, a module can implement `hook_block_view_alter` in order to modify
    the output of the block to be rendered. A module can add content to be rendered
    or removed. This can be used to remove the `contextual_links` item, which allows
    inline editing on the front page of a site:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一个模块可以实现`hook_block_view_alter`以修改要渲染的块的输出。模块可以添加要渲染的内容或删除内容。这可以用来删除`contextual_links`项，允许在网站的首页上进行内联编辑：
- en: '[PRE45]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Block settings form
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块设置表单
- en: Blocks can provide a settings form. This recipe provides the text *My Company*
    for the copyright text. Instead of being set in code, this can be defined through
    a text field in the block’s setting form.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 块可以提供设置表单。此配方为版权文本提供了文本*我的公司*。而不是在代码中设置，这可以通过块设置表单中的文本字段来定义。
- en: Let’s readdress the `Copyright.php` file that holds our block’s class. We will
    override methods provided by our base class. The following methods will be added
    to the class written in this recipe.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视包含我们块类的`Copyright.php`文件。我们将覆盖基类提供的方法。以下方法将添加到本配方中编写的类中。
- en: 'A block can override the default `defaultConfiguration` method, which returns
    an array of setting keys and their default values. The `blockForm` method can
    then be overridden to return a `Form` API array to represent the settings form:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个块可以覆盖默认的`defaultConfiguration`方法，该方法返回设置键及其默认值的数组。然后可以覆盖`blockForm`方法以返回表示设置表单的`Form`
    API数组：
- en: '[PRE46]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `blockSubmit` method must then be implemented, which updates the block’s
    configuration. The following code retrieves the `company_name` value from the
    form’s state, which contains submitted values, and sets it to the `configuration`
    property in its `company_name` key:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，必须实现`blockSubmit`方法，该方法更新块的配置。以下代码从表单的状态中检索`company_name`值，该状态包含提交的值，并将其设置为`configuration`属性中的`company_name`键：
- en: '[PRE47]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Finally, the `build` method can be updated to use the new configuration item:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以将`build`方法更新为使用新的配置项：
- en: '[PRE48]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You can now return to the `Copyright` block. The new setting will be available
    in the block instance’s configuration form.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以返回到`版权`块。新的设置将在块实例的配置表单中可用。
- en: Defining access to a block
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义块的访问权限
- en: 'Blocks, by default, are rendered for all users. The default access method can
    be overridden. This allows a block to only be displayed to authenticated users
    or based on specific permissions:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，块为所有用户渲染。默认访问方法可以被覆盖。这允许块仅对认证用户或基于特定权限显示：
- en: '[PRE49]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The preceding code is taken from `user_login_block`. It allows access to the
    block if the user is logged out and is not on the login or logout page. The access
    is cached based on the current route name and the user’s current role being anonymous.
    If these are not passed, the access returned is forbidden and the block is not
    built.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码来自`user_login_block`。它允许在用户未登录且不在登录或注销页面时访问该块。访问权限基于当前路由名称和用户当前的角色为匿名者进行缓存。如果没有传递这些值，则返回的访问权限被禁止，并且块不会被构建。
- en: 'Other modules can implement `hook_block_access` to override the access of a
    block:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 其他模块可以实现`hook_block_access`来覆盖块的访问权限：
- en: '[PRE50]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: A module implementing the preceding hook will deny access to our `Copyright`
    block if it is not placed in the footer region. If the block operation is not
    `view` and the block is not our `Copyright` block, a `neutral` access result is
    passed. A `neutral` result allows the system to process other access results.
    Otherwise, `AccessResult::forbiddenIf` will return `neutral` or `forbidden` based
    on the Boolean value passed to it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 实现上述钩子的模块将拒绝访问我们的`版权`块，如果它没有被放置在页脚区域。如果块操作不是`view`，并且块不是我们的`版权`块，则传递一个`neutral`访问结果。`neutral`结果允许系统处理其他访问结果。否则，`AccessResult::forbiddenIf`将根据传递给它的布尔值返回`neutral`或`forbidden`。
- en: See also
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the *Creating a custom plugin type* recipe of this chapter
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考本章的*创建自定义插件类型*配方
- en: 'Annotation-based plugin documentation: [https://www.drupal.org/docs/drupal-apis/plugin-api/annotations-based-plugins](https://www.drupal.org/docs/drupal-apis/plugin-api/annotations-based-plugins
    )'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于注解的插件文档：[https://www.drupal.org/docs/drupal-apis/plugin-api/annotations-based-plugins](https://www.drupal.org/docs/drupal-apis/plugin-api/annotations-based-plugins)
- en: 'Information about hooks provided by the `Block` module: [https://api.drupal.org/api/drupal/core%21modules%21block%21block.api.php/10](https://api.drupal.org/api/drupal/core%21modules%21block%21block.api.php/10)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`Block`模块提供的钩子信息：[https://api.drupal.org/api/drupal/core%21modules%21block%21block.api.php/10](https://api.drupal.org/api/drupal/core%21modules%21block%21block.api.php/10)
- en: Creating a custom field type
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义字段类型
- en: '**Field types** are defined using the plugin system. Each field type has its
    own class and definition. A new field type can be defined through a custom class
    that will provide schema and property information.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**字段类型**是通过插件系统定义的。每种字段类型都有自己的类和定义。可以通过一个自定义类来定义新的字段类型，该类将提供模式和信息属性。'
- en: Field types define ways in which data can be stored and handled through the
    **Field** API on entities. Field widgets provide means for editing a field type
    in the user interface. Field formatters provide means for displaying the field
    data to users. Both are plugins and will be covered in later recipes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类型定义了通过**字段**API在实体上存储和处理数据的方式。字段小部件提供在用户界面中编辑字段类型的方法。字段格式化程序提供向用户显示字段数据的方法。两者都是插件，将在后面的配方中介绍。
- en: In this example, we will create a simple field type called `realname` to store
    the first and last names and add it to a `comment` type.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将创建一个简单的字段类型，称为`realname`，用于存储姓名和姓氏，并将其添加到`评论`类型中。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe adds a field to a `comment` type, which requires the `Comment` module
    to be installed. The `Comment` module is installed by default with a standard
    Drupal installation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方向`评论`类型添加一个字段，这需要安装`评论`模块。`评论`模块默认与标准Drupal安装一起安装。
- en: How to do it…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'First, we need to create the `src/Plugin/Field/FieldType` directory in the
    module’s directory. The `Field` module discovers field types in the `Plugin\Field\FieldType`
    namespace:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建 `src/Plugin/Field/FieldType` 目录。`Field` 模块在 `Plugin\Field\FieldType`
    命名空间中查找字段类型：
- en: '[PRE51]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Create a file named `RealName.php` in the newly created directory so that we
    can define the `RealName` class. This will provide our `realname` field type for
    the first and last names.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中创建一个名为 `RealName.php` 的文件，以便我们可以定义 `RealName` 类。这将为我们提供用于姓氏和名字的 `realname`
    字段类型。
- en: 'The `RealName` class will extend the `\``Drupal\Core\Field\FieldItemBase` class:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RealName` 类将扩展 `\Drupal\Core\Field\FieldItemBase` 类：'
- en: '[PRE52]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We will extend the `FieldItemBase` class, which satisfies methods defined by
    inherited interfaces for the `FieldType` plugin type, except for the `schema`
    and `propertyDefinitions` methods.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展 `FieldItemBase` 类，它满足 `FieldType` 插件类型继承接口定义的方法，除了 `schema` 和 `propertyDefinitions`
    方法。
- en: 'Next, we will write the plugin annotation in a class document block. We will
    provide the field type’s identifier, label, description, category, default widget,
    and formatter:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在类文档块中编写插件注释。我们将提供字段类型的标识符、标签、描述、类别、默认小部件和格式化器：
- en: '[PRE59]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The `@FieldType` annotation tells Drupal that this is a `FieldType` plugin.
    The following properties are defined:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`@FieldType` 注释告诉 Drupal 这是一个 `FieldType` 插件。以下属性被定义：'
- en: '`id`: This is the plugin’s machine name'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`: 这是插件的机器名称'
- en: '`label`: This is the human-readable name for the field'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`: 这是字段的可读名称'
- en: '`description`: This is the human-readable description of the field'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`: 这是字段的可读描述'
- en: '`category`: This is the category where the field shows up in the user interface'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`category`: 这是字段在用户界面中显示的类别'
- en: '`default_widget`: This is the default form widget to be used for editing'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_widget`: 这是用于编辑的默认表单小部件'
- en: '`default_formatter`: This is the default formatter with which you can display
    the field'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_formatter`: 这是默认的格式化器，您可以使用它来显示字段'
- en: 'The `RealName` class needs to implement the `schema` method defined in `\Drupal\Core\Field\FieldItemInterface`.
    This returns an array of the database API schema information. Add the following
    method to your class:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RealName` 类需要实现 `\Drupal\Core\Field\FieldItemInterface` 中定义的 `schema` 方法。这个方法返回一个数据库
    API 架构信息的数组。请将以下方法添加到您的类中：'
- en: '[PRE79]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The `schema` method defines the database columns in the field’s data table.
    We define a column to hold the `first_name` and `last_name` values.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`schema` 方法定义了字段数据表中的数据库列。我们定义一个列来存储 `first_name` 和 `last_name` 的值。'
- en: 'We will also need to implement the `propertyDefinitions` method. This returns
    a data definition of the values defined in the `schema` method. Add the following
    method to your class:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要实现 `propertyDefinitions` 方法。这个方法返回在 `schema` 方法中定义的值的定义。请将以下方法添加到您的类中：
- en: '[PRE107]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: This method returns an array that is keyed with the same column names provided
    in the schema. It returns data definitions to represent the properties in the
    field type.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个数组，其键与在架构中提供的相同列名。它返回数据定义来表示字段类型中的属性。
- en: 'We will override one more method, the `mainPropertyName` method, to specify
    that `first_name` is the main property:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将覆盖另一个方法，即 `mainPropertyName` 方法，以指定 `first_name` 是主要属性：
- en: '[PRE121]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: This method allows specifying the main property to be used for retrieving the
    field value automatically when there are multiple values.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许在存在多个值时指定用于自动检索字段值的主要属性。
- en: 'Rebuild your Drupal site’s cache to build the field type plugin definitions
    cache, causing a rediscovery of plugin definitions:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的 Drupal 网站的缓存以构建字段类型插件定义缓存，这将导致插件定义的重新发现：
- en: '[PRE127]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The field will now appear on the field type management screen. To use it, go
    to **Structure** and then to **Comment types**. You can now go to **Manage fields**
    and click on **Add field** to add a real name entry for your comments:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字段现在将出现在字段类型管理屏幕上。要使用它，请转到 **结构**，然后转到 **评论类型**。现在您可以转到 **管理字段** 并点击 **添加字段**，为您的评论添加一个真实姓名条目：
- en: '![Figure 8.3 – The field appearing in the Add a new field list](img/Figure_8.03_B18548.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 在“添加新字段”列表中出现的字段](img/Figure_8.03_B18548.jpg)'
- en: Figure 8.3 – The field appearing in the Add a new field list
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 在“添加新字段”列表中出现的字段
- en: How it works…
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The plugin manager for field types is the `plugin.manager.field.field_type`
    service. This plugin manager defines that field type plugins must be in the `Plugin\Field\FieldType`
    namespace and implement `\Drupal\Core\Field\FieldItemInterface`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类型的插件管理器是`plugin.manager.field.field_type`服务。此插件管理器定义字段类型插件必须在`Plugin\Field\FieldType`命名空间中，并实现`\Drupal\Core\Field\FieldItemInterface`。
- en: When adding a new field to an entity type, the definitions are retrieved from
    the field type manager to populate the list of field types. When a field is added
    to an entity type, that entity type’s database storage is updated based on the
    properties provided by the field in `propertyDefinitions` with the schema from
    the `schema` method.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当向实体类型添加新字段时，定义从字段类型管理器检索以填充字段类型列表。当向实体类型添加字段时，该实体类型的数据库存储将根据字段在`propertyDefinitions`中提供的属性以及`schema`方法中的模式进行更新。
- en: There’s more…
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Field types can implement a method to define whether the value is empty or not.
    We will cover this in the next section.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类型可以实现一个方法来定义值是否为空。我们将在下一节中介绍这一点。
- en: Defining whether a field is empty
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义字段是否为空
- en: Field type classes have an `isEmpty` method that is used to determine whether
    the field has no values.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类型类有一个`isEmpty`方法，用于确定字段是否没有值。
- en: Field types extend `Drupal\Core\TypedData\Plugin\DataType\Map`, which is a class
    representation of an associative array in Drupal’s `\Drupal\Core\TypedDate\ComplexDataInterface`
    interface, which provides the `isEmpty` method.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类型扩展了`Drupal\Core\TypedData\Plugin\DataType\Map`，这是Drupal的`\Drupal\Core\TypedDate\ComplexDataInterface`接口中关联数组的类表示，它提供了`isEmpty`方法。
- en: The default functionality is that a field is not considered empty as long as
    one property has values. For instance, our real name field would not be considered
    empty if the first name or last name had values.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 默认功能是，只要有一个属性有值，字段就不会被视为为空。例如，如果我们的真实姓名字段中第一个或最后一个名称有值，则不会被视为为空。
- en: Field types can provide their own implementations to provide a more robust verification.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类型可以提供它们自己的实现以提供更健壮的验证。
- en: Creating a custom field widget
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义字段小部件
- en: '**Field widgets** provide the form component to a field in an entity form.
    These integrate with the Form API to define how a field can be edited and the
    way in which the data can be formatted before it is saved. Field widgets are chosen
    and customized through the form display interface.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**字段小部件**为实体表单中的字段提供表单组件。这些与表单API集成，以定义字段如何被编辑以及数据在保存之前如何格式化。字段小部件通过表单显示界面进行选择和定制。'
- en: In this recipe, we will create a widget for the field created in the *Creating
    a custom field type* recipe in this chapter. The field widget will provide two
    text fields for entering the first and last name items.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将创建一个用于本章中*创建自定义字段类型*食谱中创建的字段的控件。该字段小部件将为输入第一个和最后一个名称项提供两个文本字段。
- en: Getting ready
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe provides a field widget for the field type created in the previous
    recipe, *Creating a custom* *field type*.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱提供了一个字段小部件，用于上一节中创建的字段类型，*创建自定义* *字段类型*。
- en: How to do it…
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'First, we need to create the `src/Plugin/Field/FieldWidget` directory in the
    module’s directory. The `Field` module discovers field widgets in the `Plugin\Field\FieldWidget`
    namespace:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建`src/Plugin/Field/FieldWidget`目录。`Field`模块在`Plugin\Field\FieldWidget`命名空间中查找字段小部件：
- en: '[PRE128]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Create a `RealNameDefaultWidget.php` file in the newly created directory so
    that we can define the `RealNameDefaultWidget` class. This will provide a custom
    form element to edit the first and last name values of our field.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中创建一个`RealNameDefaultWidget.php`文件，以便我们可以定义`RealNameDefaultWidget`类。这将提供一个自定义表单元素来编辑字段的第一个和最后一个名称值。
- en: 'The `RealNameDefaultWidget` class will extend the `\``Drupal\Core\Field\WidgetBase`
    class:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RealNameDefaultWidget`类将扩展`\Drupal\Core\Field\WidgetBase`类：'
- en: '[PRE129]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: We will extend the `WidgetBase` class, which satisfies methods defined by inherited
    interfaces for the `FieldWidget` plugin type, except the `formElement` method.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将扩展`WidgetBase`类，它满足继承接口为`FieldWidget`插件类型定义的方法，除了`formElement`方法。
- en: 'We will provide the field widget’s identifier, label, and supported field types
    in the plugin’s annotation:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在插件的注释中提供字段小部件的标识符、标签和支持的字段类型：
- en: '[PRE136]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '`@FieldWidget` tells Drupal that this is a field widget plugin. It defines
    `id` to represent the machine name, the human-readable name as `label`, and the
    field types that the widget interacts with as the `field_types` property.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`@FieldWidget`告诉Drupal这是一个字段小部件插件。它定义`id`来表示机器名，可读名称为`label`，以及小部件交互的字段类型作为`field_types`属性。'
- en: 'We need to implement the `formElement` method to satisfy the remaining interface
    methods after extending `\Drupal\Core\Field\WidgetBase`. Add the following method
    to your class:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要实现`formElement`方法，以满足在扩展`\Drupal\Core\Field\WidgetBase`后的剩余接口方法。将以下方法添加到您的类中：
- en: '[PRE155]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: The `formElement` method returns the Form API array structure, which should
    be added to an entity form for each field item. The names of the element items
    – `first_name` and `last_name` – map to the field property names so that they
    are saved correctly.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`formElement`方法返回表单API数组结构，该结构应添加到每个字段项的实体表单中。元素项的名称 - `first_name`和`last_name`
    - 映射到字段属性名称，以便正确保存。'
- en: 'Next, we will need to modify our original `RealName` field type plugin class
    to use the default widget that we created. Modify the `src/Plugin/FieldType/RealName.php`
    file, and update the `default_widget` annotation property as `realname_default`:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改我们的原始`RealName`字段类型插件类，以使用我们创建的默认小部件。修改`src/Plugin/FieldType/RealName.php`文件，并更新`default_widget`注解属性为`realname_default`：
- en: '[PRE181]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'Rebuild your Drupal site’s cache to update the field type definition and discovery
    of the new field widget plugin:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的Drupal站点的缓存以更新字段类型定义和新字段小部件插件发现：
- en: '[PRE195]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'The field added to **Comment type** will now use the field widget:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加到**评论类型**的字段现在将使用字段小部件：
- en: '![Figure 8.4 – Real name widget on a comment form](img/Figure_8.04_B18548.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 评论表单上的真实姓名小部件](img/Figure_8.04_B18548.jpg)'
- en: Figure 8.4 – Real name widget on a comment form
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 评论表单上的真实姓名小部件
- en: How it works…
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The plugin manager for field types is the `plugin.manager.field.widget` service.
    This plugin manager defines that field type plugins must be in the `Plugin\Field\FieldWidget`
    namespace and implement `\Drupal\Core\Field\WidgetInterface`.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类型的插件管理器是`plugin.manager.field.widget`服务。此插件管理器定义字段类型插件必须在`Plugin\Field\FieldWidget`命名空间中，并实现`\Drupal\Core\Field\WidgetInterface`。
- en: The entity form display system uses the plugin manager to load field definitions
    as options on the form display configuration form. When the entity form is built
    using the form display configuration, the form-building process adds the element
    returned from the `formElement` method to the entity form.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 实体表单显示系统使用插件管理器将字段定义作为选项加载到表单显示配置表单上。当使用表单显示配置构建实体表单时，表单构建过程将`formElement`方法返回的元素添加到实体表单中。
- en: There’s more…
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Field widgets have additional methods to provide more information; they are
    covered in the next section.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 字段小部件有额外的提供更多信息的方法；它们将在下一节中介绍。
- en: Field widget settings and summary
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字段小部件设置和摘要
- en: 'The `\Drupal\Core\Field\WidgetInterface` interface defines three methods that
    can be overridden to provide a settings form and a summary of the current settings:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Field\WidgetInterface`接口定义了三个可覆盖的方法，以提供设置表单和当前设置的摘要：'
- en: '`defaultSettings`: This returns an array of the setting keys and default values'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaultSettings`: 这返回一个设置键和默认值的数组'
- en: '`settingsForm`: This returns a Form API array that is used for the settings
    form'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settingsForm`: 这返回一个用于设置表单的表单API数组'
- en: '`settingsSummary`: This allows an array of strings to be returned and displayed
    on the manage display form for the field'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settingsSummary`: 这允许返回并显示在字段管理显示表单上的字符串数组'
- en: Widget settings can be used to alter the form presented to the user. A setting
    can be created that allows the field element to be limited to only entering the
    first or last name with one text field.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用小部件设置来更改用户看到的表单。可以创建一个设置，允许字段元素仅通过一个文本字段输入第一个或最后一个名字。
- en: Creating a custom field formatter
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义字段格式化器
- en: '**Field formatters** define the way in which a field type will be presented.
    These formatters return the render array information to be processed by the theming
    layer. Field formatters are configured on the display mode interfaces.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**字段格式化器**定义了字段类型将被呈现的方式。这些格式化器返回要由主题层处理的渲染数组信息。字段格式化器在显示模式接口上进行配置。'
- en: In this recipe, we will create a formatter for the field created in the *Creating
    a custom field type* recipe in this chapter. The field formatter will display
    the first and last name values inline, as a full name.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将创建一个格式化器，用于在本章的 *创建自定义字段类型* 配方中创建的字段。字段格式化器将显示姓氏和名字的值，作为全名。
- en: Getting ready
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe provides a field formatter for the field type created in the previous
    recipe, *Creating a custom* *field type*.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方提供了一个字段格式化器，用于在先前的配方中创建的字段类型，*创建自定义* *字段类型*。
- en: How to do it…
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First, we need to create the `src/Plugin/Field/FieldFormatter` directory in
    the module’s directory. The `Field` module discovers field formatters in the `Plugin\Field\FieldFormatter`
    namespace:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建 `src/Plugin/Field/FieldFormatter` 目录。`Field` 模块在 `Plugin\Field\FieldFormatter`
    命名空间中查找字段格式化器：
- en: '[PRE196]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Create a `RealNameFormatter.php` file in the newly created directory so that
    we can define the `RealNameFormatter` class. This will provide a custom formatter
    to display the field’s values.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中创建一个 `RealNameFormatter.php` 文件，以便我们可以定义 `RealNameFormatter` 类。这将提供一个自定义格式化器来显示字段的值。
- en: 'The `RealNameFormatter` class will extend the `\``Drupal\Core\Field\FormatterBase`
    class:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RealNameFormatter` 类将扩展 `\Drupal\Core\Field\FormatterBase` 类：'
- en: '[PRE197]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: We extend the `FormatterBase` class, which satisfies methods defined by inherited
    interfaces for the `FieldFormatter` plugin type, except the `viewElements` method.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了 `FormatterBase` 类，这满足了 `FieldFormatter` 插件类型继承接口定义的方法，除了 `viewElements`
    方法。
- en: 'We will provide the field widget’s identifier, label, and supported field types
    in the plugin’s annotation:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在插件的注解中提供字段小部件的标识符、标签和支持的字段类型：
- en: '[PRE203]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '`@FieldFormatter` tells Drupal that this is a field formatter plugin. It defines
    `id` to represent the machine name, the human-readable name as `label`, and the
    field types that the formatter interacts with as the `field_types` property.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`@FieldFormatter` 告诉 Drupal 这是一个字段格式化插件。它定义了 `id` 来表示机器名，可读名称为 `label`，以及格式化器交互的字段类型作为
    `field_types` 属性。'
- en: 'We will need to implement the `viewElements` method to satisfy the `\Drupal\Core\Field\FormatterInferface`
    interface. This is used to render the field data. Add the following method to
    your class:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要实现 `viewElements` 方法以满足 `\Drupal\Core\Field\FormatterInterface` 接口。这用于渲染字段数据。将以下方法添加到您的类中：
- en: '[PRE221]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: The field values are provided to the `viewElements` method as a `FieldItemListInterface`
    iterable that contains each field item. Fields in Drupal can contain a single
    value, or an unlimited number of values. We iterate over each value and create
    a templated string that displays the first name and last name values in one line
    as a full name.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 字段值作为 `FieldItemListInterface` 可迭代对象提供给 `viewElements` 方法，其中包含每个字段项。Drupal 中的字段可以包含单个值，也可以包含无限数量的值。我们遍历每个值，创建一个模板字符串，将姓氏和名字的值在一行中显示为全名。
- en: 'Next, we will need to modify our original `RealName` field type’s plugin class
    to use the default formatter that we created. Open the `src/Plugin/FieldType/RealName.php`
    file, and update the `default_formatter` annotation property as `realname_one_line`:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改我们原始的 `RealName` 字段类型插件类，以使用我们创建的默认格式化器。打开 `src/Plugin/FieldType/RealName.php`
    文件，并将 `default_formatter` 注解属性更新为 `realname_one_line`：
- en: '[PRE239]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'Rebuild your Drupal site’s cache to update the field type definition and discovery
    of the new field formatter plugin:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的 Drupal 网站的缓存以更新字段类型定义和新字段格式化插件发现：
- en: '[PRE253]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'The field added to **Comment type** will now use the field formatter:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加到 **评论类型** 的字段现在将使用字段格式化器：
- en: '![Figure 8.5 – Output of the real name formatter](img/Figure_8.05_B18548.jpg)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 实名格式化器的输出](img/Figure_8.05_B18548.jpg)'
- en: Figure 8.5 – Output of the real name formatter
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 实名格式化器的输出
- en: How it works…
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The plugin manager for field types is the `plugin.manager.field.formatter` service.
    This plugin manager defines that field type plugins must be in the `Plugin\Field\FieldFormatter`
    namespace and implement `\Drupal\Core\Field\FormatterInterface`.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类型插件管理器是 `plugin.manager.field.formatter` 服务。此插件管理器定义字段类型插件必须在 `Plugin\Field\FieldFormatter`
    命名空间中，并实现 `\Drupal\Core\Field\FormatterInterface`。
- en: The entity view display system uses the plugin manager to load field definitions
    as options on the view display configuration form. When the entity is built using
    the view display configuration, the process iterates through each field on the
    entity and invokes the configured formatter’s `viewElements` method. The final
    result is used to render the display of the entity.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 实体视图显示系统使用插件管理器来加载字段定义作为视图显示配置表单上的选项。当使用视图显示配置构建实体时，该过程遍历实体上的每个字段并调用配置的格式化器的
    `viewElements` 方法。最终结果用于渲染实体的显示。
- en: There’s more...
  id: totrans-411
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Field formatters have additional methods to provide more information; they are
    covered in the next section.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 字段格式化器有额外的提供更多信息的方法；它们将在下一节中介绍。
- en: Formatter settings and summary
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式化器设置和摘要
- en: 'The `\Drupal\Core\Field\FormatterInterface` interface defines three methods
    that can be overridden to provide a settings form and a summary of the current
    settings:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Field\FormatterInterface` 接口定义了三个可以重写的方法，以提供设置表单和当前设置的摘要：'
- en: '`defaultSettings`: This returns an array of the setting keys and default values'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaultSettings`：这返回一个设置键和默认值的数组'
- en: '`settingsForm`: This returns a Form API array that is used for the settings
    form'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settingsForm`：这返回一个用于设置表单的 Form API 数组'
- en: '`settingsSummary`: This allows an array of strings to be returned and displayed
    on the manage display form for the field'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settingsSummary`：这允许返回并显示在字段的 manage 显示表单上的字符串数组'
- en: Settings can be used to alter how the formatter displays information. For example,
    these methods can be implemented to provide settings to hide or display the first
    or last name.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 设置可以用来改变格式化器显示信息的方式。例如，可以实现这些方法来提供设置以隐藏或显示姓名的首字母或最后一个字母。
- en: Creating a custom plugin type
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义插件类型
- en: The **plugin system** provides a means to create specialized objects in Drupal
    that do not require the data storage features of the entity system. As we have
    seen with the block and field plugins, each plugin type serves a specific purpose
    and allows for extensibility.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '**插件系统**提供了一种在 Drupal 中创建不需要实体系统数据存储功能的专业对象的方法。正如我们通过块和字段插件所看到的，每种插件类型都服务于特定的目的，并允许扩展性。'
- en: In this recipe, we will create a new plugin type called `GeoLocator`, which
    will return the country code for a given IP address. We will create a plugin manager,
    a default plugin interface, a plugin annotation definition, and plugin implementations.
    A **Content Delivery Network** (**CDN**) commonly provides HTTP headers with the
    visitor’s country code. We will provide plugins for **Cloudflare** and **AWS CloudFront**.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将创建一个名为 `GeoLocator` 的新插件类型，该类型将返回给定 IP 地址的国家代码。我们将创建一个插件管理器、默认插件接口、插件注释定义和插件实现。**内容分发网络**（**CDN**）通常提供带有访问者国家代码的
    HTTP 头。我们将提供针对 **Cloudflare** 和 **AWS CloudFront** 的插件。
- en: How to do it…
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: All plugins need to have a service that acts as a plugin manager. Create a file
    in the `src` directory of your module called `GeoLocatorManager.php`. This will
    hold the `GeoLocatorManager` class.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有插件都需要一个充当插件管理器的服务。在您的模块的 `src` 目录中创建一个名为 `GeoLocatorManager.php` 的文件。这将包含
    `GeoLocatorManager` 类。
- en: 'Create the `GeoLocatorManager` class by extending the `\Drupal\Core\Plugin\DefaultPluginManager`
    class provided by Drupal core:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过扩展 Drupal 核心提供的 `\Drupal\Core\Plugin\DefaultPluginManager` 类来创建 `GeoLocatorManager`
    类：
- en: '[PRE254]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '`DefaultPluginManager` provides the essential functionality for a plugin manager,
    requiring implementors to only override its constructor.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultPluginManager` 提供了插件管理器的基本功能，要求实现者只需重写其构造函数。'
- en: 'Next, we will need to override the `__construct` method from the `DefaultPluginManager`
    class to define information about our plugin type. Note, it will reference code
    created in the following steps:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要重写 `DefaultPluginManager` 类中的 `__construct` 方法来定义有关我们的插件类型的信息。注意，它将引用以下步骤中创建的代码：
- en: '[PRE261]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: The first argument to the parent construct call of `Plugin/GeoLocator` specifies
    that the namespace `GeoLocator` plugins must reside in a module. The fourth argument,
    `Drupal\mymodule\Plugin\GeoLocator\GeoLocatorInterface`, identifies the interface
    that `GeoLocator` plugins must implement. The fifth argument, `Drupal\mymodule\Annotation\GeoLocator`,
    specifies the annotation class, so that plugins may register themselves with `@``GeoLocator`
    annotations.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`Plugin/GeoLocator`的父构造函数的第一个参数指定`GeoLocator`插件必须位于一个模块中。第四个参数`Drupal\mymodule\Plugin\GeoLocator\GeoLocatorInterface`标识了`GeoLocator`插件必须实现的接口。第五个参数`Drupal\mymodule\Annotation\GeoLocator`指定了注释类，以便插件可以通过`@GeoLocator`注释进行注册。'
- en: 'Before we create the `GeoLocator` plugin interface and annotation, we will
    create the service definition to register our plugin manager. Create a `mymodule.services.yml`
    file and add the following:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们创建`GeoLocator`插件接口和注释之前，我们将创建服务定义以注册我们的插件管理器。创建一个`mymodule.services.yml`文件并添加以下内容：
- en: '[PRE283]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: While not required, it is a pattern to name plugin manager services with `plugin.manager.`
    and then the plugin type name. We can use the parent definition to tell the service
    container to use the same arguments as the `default_plugin_manager` definition
    when constructing our class.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是必需的，但命名插件管理器服务时使用`plugin.manager.`然后是插件类型名称是一种模式。我们可以使用父定义来告诉服务容器在构建我们的类时使用与`default_plugin_manager`定义相同的参数。
- en: 'All annotation-based plugins must provide an annotation class. Create `GeoLocator.php`
    in `src/Annotation` to provide the `GeoLocator` annotation class, as we specified
    in our plugin manager:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有基于注释的插件都必须提供一个注释类。在`src/Annotation`中创建`GeoLocator.php`以提供`GeoLocator`注释类，正如我们在插件管理器中指定的那样：
- en: '[PRE287]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Each property is an item that can be defined in the plugin’s annotation. The
    annotated definition will be `@GeoLocator` for our plugins, as the annotation’s
    class name is `GeoLocator`.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 每个属性都是可以在插件注释中定义的项目。对于我们的插件，注释定义将是`@GeoLocator`，因为注释的类名是`GeoLocator`。
- en: 'Next, we will define the plugin interface that we defined in the plugin manager.
    The discovery process for plugins validates that `GeoLocator` plugins implement
    this interface. Create a `GeoLocatorInterface.php` file in our module’s `src/Plugin/GeoLocator`
    directory to hold the interface:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义在插件管理器中定义的插件接口。插件发现过程验证`GeoLocator`插件实现了此接口。在我们的模块的`src/Plugin/GeoLocator`目录中创建一个`GeoLocatorInterface.php`文件以保存接口：
- en: '[PRE304]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: We provide an interface so that we can guarantee that we have these expected
    methods when working with a `GeoLocator` plugin. The `geolocate` method receives
    a request object and returns a country code, or `null` if one could not be found.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一个接口，以确保在处理`GeoLocator`插件时，我们可以保证有这些预期的方法。`geolocate`方法接收一个请求对象并返回一个国家代码，如果找不到则返回`null`。
- en: 'Now that we have our plugin type set up, we will create our first plugin to
    support the Cloudflare country code header. Create the `src/Plugin/GeoLocator/Cloudflare.php`
    file for the `Cloudflare` plugin class:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了插件类型，我们将创建第一个插件以支持Cloudflare国家代码头。为`Cloudflare`插件类创建`src/Plugin/GeoLocator/Cloudflare.php`文件：
- en: '[PRE328]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: Cloudflare provides the visitor’s country code in an HTTP header named `CF-IPCountry`.
    This plugin returns the value from that header, or `null` if it is missing.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudflare通过一个名为`CF-IPCountry`的HTTP头提供访问者的国家代码。此插件返回该头的值，如果不存在则返回`null`。
- en: 'Next, we create a plugin for AWS CloudFront’s country code header. Create the
    `src/Plugin/GeoLocator/CloudFront.php` file for the `CloudFront` plugin class:'
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个插件以支持AWS CloudFront的国家代码头。为`CloudFront`插件类创建`src/Plugin/GeoLocator/CloudFront.php`文件：
- en: '[PRE347]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: AWS CloudFront provides the visitor’s country code in an HTTP header named `CloudFront-Viewer-Country`.
    This plugin returns the value from that header, or `null` if it is missing.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFront通过一个名为`CloudFront-Viewer-Country`的HTTP头提供访问者的国家代码。此插件返回该头的值，如果不存在则返回`null`。
- en: 'Finally, we will create a demonstration plugin that reads the country code
    from a query parameter. Create the `src/Plugin/GeoLocator/RequestQuery.php` file
    for the `RequestQuery` plugin class:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将创建一个演示插件，该插件从查询参数中读取国家代码。为`RequestQuery`插件类创建`src/Plugin/GeoLocator/RequestQuery.php`文件：
- en: '[PRE367]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: Unlike the other plugins, this plugin returns the value of the `countryCode`
    query parameter in a URL.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他插件不同，此插件返回URL中`countryCode`查询参数的值。
- en: 'The following is an example that will set a message of the country code, if
    one can be detected by a plugin, on each page:'
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一个示例，它将在每个页面上设置国家代码消息，如果插件可以检测到国家代码：
- en: '[PRE386]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: We fetch the definitions from the plugin manager and create an instance of each
    plugin. We then check whether the plugin returns a result. If the plugin returns
    a country code, the country code is added as a message and then the loop is stopped.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从插件管理器获取定义，并为每个插件创建一个实例。然后我们检查插件是否返回结果。如果插件返回国家代码，国家代码将被添加为消息，然后循环停止。
- en: How it works…
  id: totrans-597
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Plugins and plugin types are a way of grouping classes that operate with specific
    functionality. The plugin manager provides a way of discovering these classes
    and instantiating them. In the last step of this recipe, we used the plugin manager
    to find each definition, create an instance of the plugin, and then call the `geolocate`
    method to find a country code from the request object.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 插件和插件类型是将具有特定功能操作的类分组的一种方式。插件管理器提供了一种发现这些类和实例化的方法。在这个食谱的最后一步中，我们使用了插件管理器来查找每个定义，创建插件的实例，然后调用`geolocate`方法从请求对象中找到一个国家代码。
- en: Plugin managers utilize discovery methods to find plugin classes. By default,
    the `\Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery` discovery method is
    used. The subdirectory is used to look for plugins, which we specified as `Plugin/GeoLocator`
    in our plugin manager’s `__construct` method. The annotated class discovery then
    iterates through the mapping of namespaces to their directories. It discovers
    PHP files in the desired directory. These classes are then inspected for the proper
    `@GeoLocator` annotation and to make sure that they implement the `GeoLocatorInterface`
    interface. Discovered classes are then registered as plugin definitions.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 插件管理器使用发现方法来查找插件类。默认情况下，使用`\Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery`发现方法。子目录用于查找插件，我们在插件管理器的`__construct`方法中指定为`Plugin/GeoLocator`。注释类发现随后遍历命名空间到其目录的映射。它发现所需目录中的PHP文件。然后检查这些类是否具有正确的`@GeoLocator`注释并确保它们实现了`GeoLocatorInterface`接口。发现的类随后被注册为插件定义。
- en: There’s more…
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There are many additional items for creating a custom plugin type; we will discuss
    some of them in the following sections.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义插件类型有许多附加项；我们将在以下章节中讨论其中的一些。
- en: Specifying an alter hook
  id: totrans-602
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定一个修改钩子
- en: 'Plugin managers have the ability to define an alter hook. The following line
    of code will be added to the `GeoLocatorManager` class’s constructor to provide
    the `hook_geolocator_plugins_alter` alter hook. This is passed to the module handler
    service for invocations:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 插件管理器能够定义一个修改钩子。以下代码行将被添加到`GeoLocatorManager`类的构造函数中，以提供`hook_geolocator_plugins_alter`修改钩子。这被传递给模块处理服务以进行调用：
- en: '[PRE409]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: Modules implementing `hook_geolocator_plugins_alter` in their `.module` file
    have the ability to modify all the discovered plugin definitions. They also have
    the ability to remove defined plugin entries or alter any information provided
    for the annotation definition.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 在`.module`文件中实现`hook_geolocator_plugins_alter`的模块具有修改所有发现的插件定义的能力。它们还具有删除定义的插件条目或修改为注释定义提供的任何信息的能力。
- en: Using a cache backend
  id: totrans-606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用缓存后端
- en: 'Plugins can use a cache backend to improve performance. This can be done by
    specifying a cache backend with the `setCacheBackend` method in the plugin manager’s
    constructor. The following line of code will allow the `GeoLocator` plugin definitions
    to be cached and only discovered on a cache rebuild:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以使用缓存后端来提高性能。这可以通过在插件管理器的构造函数中指定缓存后端通过`setCacheBackend`方法来完成。以下代码行将允许`GeoLocator`插件定义被缓存，并且仅在缓存重建时被发现：
- en: '[PRE410]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: Without specifying a cache backend, Drupal will scan the filesystem for any
    annotated `GeoLocator` plugins provided by modules. The `$cache_backend` variable
    is passed to the constructor. The second parameter provides the cache key. The
    cache key will have the current language code added as a suffix.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 没有指定缓存后端，Drupal将扫描文件系统以查找由模块提供的任何注释过的`GeoLocator`插件。`$cache_backend`变量传递给构造函数。第二个参数提供缓存键。缓存键将添加当前语言代码作为后缀。
- en: There is an optional third parameter that takes an array of strings to represent
    cache tags that will cause the plugin definitions to be cleared. This is an advanced
    feature, and plugin definitions should normally be cleared through the manager’s
    `clearCachedDefinitions` method. The cache tags allow the plugin definitions to
    be cleared when a relevant cache is cleared as well.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个可选的第三个参数，它接受一个字符串数组，表示将导致插件定义被清除的缓存标签。这是一个高级功能，插件定义通常应通过管理器的`clearCachedDefinitions`方法清除。缓存标签允许在相关缓存被清除时同时清除插件定义。
- en: Accessing plugins through the manager
  id: totrans-611
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过管理器访问插件
- en: 'Plugins are loaded through the manager service. Plugin managers have various
    methods for retrieving plugin definitions, which are as follows:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 插件通过管理器服务加载。插件管理器有各种用于检索插件定义的方法，如下所示：
- en: '`getDefinitions`: This method will return an array of plugin definitions. It
    first makes an attempt to retrieve cached definitions, if any, and sets the cache
    of discovered definitions before returning them.'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDefinitions`: 此方法将返回一个插件定义数组。它首先尝试检索缓存的定义（如果有），然后在返回之前设置已发现的定义的缓存。'
- en: '`getDefinition`: This takes an expected plugin ID and returns its definition.'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDefinition`: 这个方法接受一个预期的插件ID，并返回其定义。'
- en: '`createInstance`: This takes an expected plugin ID and returns an initiated
    class for the plugin.'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createInstance`: 这个方法接受一个预期的插件ID，并返回该插件的初始化类。'
- en: '`getInstance`: This takes an array that acts as a plugin definition and returns
    an initiated class from the definition.'
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getInstance`: 这个方法接受一个充当插件定义的数组，并从定义中返回一个初始化的类。'
