- en: Drupal 8 Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal 8 安全性
- en: Writing secure code is an important aspect of any web application. Preventing
    ever-so-creative hacking techniques can be really daunting, and this is partly
    the reason why we, as developers, sometimes choose a well-established framework
    with solid and up-to-date security measures baked right in.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编写安全的代码是任何网络应用的重要方面。预防各种创意十足的黑客技术可能非常令人畏惧，这也是我们作为开发者有时选择一个具有稳固且最新的安全措施框架的原因之一。
- en: Drupal is a CMS that takes security very seriously. The community has a dedicated
    security team that is always on the lookout for vulnerabilities and advises core
    contributors and module developers on ways to fix potential vectors of attack.
    It is also responsible for the fast mitigation of any such issue and disseminating
    the correct information to the affected parties.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 是一个非常重视安全的 CMS。社区有一个专门的安全团队，他们始终在寻找漏洞，并就修复潜在攻击向量向核心贡献者和模块开发者提供建议。他们还负责快速缓解任何此类问题，并向受影响的各方传播正确的信息。
- en: When it comes to out-of-the-box installation, Drupal 8 has come a long way in
    addressing many security concerns present in previous versions, to the point where
    much of what Drupal 7 developers had to worry about can now be taken for granted.
    For this reason, in this annex, we will talk about some of the most prominent
    security features that Drupal 8 comes with out of the box and that are directly
    related to our work as module developers. Moreover, we will take a look at some
    tips for ensuring that the modules we write respect the security standards Drupal
    prides itself on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到创新安装时，Drupal 8 在解决先前版本中存在的许多安全问题上已经取得了长足的进步，以至于 Drupal 7 开发者曾经需要担心的大部分问题现在都可以视为理所当然。因此，在本附录中，我们将讨论一些
    Drupal 8 默认提供的最突出的安全特性，这些特性与我们作为模块开发者的工作直接相关。此外，我们还将探讨一些确保我们编写的模块遵守 Drupal 自豪的安全标准的技巧。
- en: Cross-Site Scripting (XSS)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站脚本（XSS）
- en: Drupal 7 was not inherently vulnerable to XSS attacks but made it easy for novice
    developers to open such vulnerabilities. The PHP-based templating system, in particular,
    made it easy for developers to forget to properly sanitize user input and any
    other kind of data before outputting it. Moreover, it allowed novice developers
    to perform all kinds of business logic directly in the template. Apart from not
    keeping a separation of concerns (business logic versus presentation), this also
    meant that third-party themes were much more difficult to validate and could easily
    include security holes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 7 本身并不容易受到 XSS 攻击，但它使新手开发者容易打开此类漏洞。特别是基于 PHP 的模板系统，使得开发者容易忘记在输出之前对用户输入和其他类型的数据进行适当的清理。此外，它允许新手开发者直接在模板中执行所有类型的业务逻辑。除了没有保持关注点的分离（业务逻辑与表示）之外，这也意味着第三方主题的验证更加困难，并且很容易包含安全漏洞。
- en: Most of these concerns have been addressed in Drupal 8, in principal with the
    adoption of Twig as the templating system. There are two main consequences of
    this adoption. The first one addresses the need for separating presentation from
    business logic. In other words, themers and developers can no longer directly
    access Drupal's APIs, nor can they run SQL queries from templates. To expose any
    such functionality, Twig extensions and filters can be used, but they require
    the logic to be encapsulated inside a module.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些担忧中的大部分在 Drupal 8 中都已得到解决，主要是通过采用 Twig 作为模板系统。这一采用的两个主要后果是：第一个解决了将表示与业务逻辑分离的需求。换句话说，主题和开发者不能再直接访问
    Drupal 的 API，也不能从模板中运行 SQL 查询。为了公开任何此类功能，可以使用 Twig 扩展和过滤器，但它们要求逻辑封装在模块内部。
- en: The second consequence is in the form of Twig auto-escaping. This means that
    any string not specifically marked as safe will be escaped by Twig using the native
    PHP `htmlspecialchars()` function. This provides a level of safety that previously
    had to be actively sought manually by themers and developers using functions such
    as `check_plain()`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个后果是以 Twig 自动转义的形式出现。这意味着任何未特别标记为安全的字符串都将由 Twig 使用原生的 PHP `htmlspecialchars()`
    函数进行转义。这提供了一种安全性，以前需要主题和开发者通过如 `check_plain()` 函数等手动积极寻求。
- en: Sanitization methods in Drupal 8
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal 8 中的清理方法
- en: 'Twig auto-escapes any string that is output using the normal notation, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Twig 会自动转义使用常规表示法输出的任何字符串，如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: However, there are cases in which the variable has already been marked safe,
    and Twig no longer escapes it. This is usually in the case of `MarkupInterface`
    objects, such as `FilteredMarkup` or `FormattableMarkup`. In these cases, Twig
    assumes that the strings they wrap have already been sanitized and that they can
    be output as they are. Of course, it is then up to us, as module developers, to
    ensure that we don't use any such objects with strings that contain unsanitized
    user input.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些情况下变量已经被标记为安全，Twig不再对其进行转义。这通常是在`MarkupInterface`对象的情况下，例如`FilteredMarkup`或`FormattableMarkup`。在这些情况下，Twig假设它们包裹的字符串已经过清理，并且可以原样输出。当然，作为模块开发者，我们必须确保我们不会使用包含未清理用户输入的字符串的此类对象。
- en: Let's look at a popular example of such an object we use all the time, and then
    we will talk about the different ways we can sanitize our user input.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们经常使用的此类对象的流行示例，然后我们将讨论我们可以用来清理用户输入的不同方法。
- en: 'If you remember, throughout this book we used the `t()` function (and the `StringTranslationTrait`
    method) which returns a `TranslatableMarkup` object used for translating strings.
    Printing such an object inside Twig will prevent auto-escaping because Twig already
    considers it safe. Moreover, if you remember, this applies to the main string
    only, as any placeholders we use do get escaped:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，在这本书的整个过程中，我们使用了`t()`函数（以及`StringTranslationTrait`方法），它返回一个用于翻译字符串的`TranslatableMarkup`对象。在Twig中打印此类对象将防止自动转义，因为Twig已经认为它是安全的。此外，如果你还记得，这仅适用于主字符串，因为我们使用的任何占位符都会被转义：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Even if there were no security implications, we should not be passing user
    input or variables to `TranslatableMarkup`, as that hinders the actual purpose
    of these objects—to translate the string. However, for other `MarkupInterface`
    objects, there are a few ways we can treat user input or strings of a dubious
    origin in order to prepare them for Twig:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有安全影响，我们也不应该将用户输入或变量传递给`TranslatableMarkup`，因为这阻碍了这些对象的实际目的——即翻译字符串。然而，对于其他`MarkupInterface`对象，我们有几种方法可以处理用户输入或可疑来源的字符串，以便为Twig做准备：
- en: '`Drupal\Component\Utility\Html::escape()`: This is the strictest sanitization
    function used to print plain text. It uses PHP''s `htmlspecialchars()` to convert
    special characters to HTML entities.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Drupal\Component\Utility\Html::escape()`：这是用于打印纯文本的最严格的清理函数。它使用PHP的`htmlspecialchars()`将特殊字符转换为HTML实体。'
- en: '`Drupal\Component\Utility\Xss::filter()`: This filters HTML to prevent XSS
    attacks. It allows a few basic HTML elements.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Drupal\Component\Utility\Xss::filter()`：这个函数过滤HTML以防止XSS攻击。它允许一些基本的HTML元素。'
- en: '`Drupal\Component\Utility\Xss::filterAdmin()`: This is a very permissive XSS
    filter that allows through most HTML elements apart from things like `<script>`
    or `<style>`. It should be used only for known and safe sources of input.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Drupal\Component\Utility\Xss::filterAdmin()`：这是一个非常宽容的XSS过滤器，除了像`<script>`或`<style>`这样的元素之外，它允许通过大多数HTML元素。它应该仅用于已知和安全的输入来源。'
- en: '`Drupal\Component\Utility\UrlHelper::filterBadProtocol()`: This strips dangerous
    protocols from URLs. It should be used before printing the HTML attribute value
    when the URLs are obtained from user input or unsafe sources.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Drupal\Component\Utility\UrlHelper::filterBadProtocol()`：这个函数从URL中移除危险的协议。在从用户输入或不受信任的来源获取URL并打印HTML属性值之前应该使用它。'
- en: So, depending on the case, using one of the previous sanitization methods will
    prevent XSS attacks when dealing with markup that Twig doesn't escape.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据情况，使用上述清理方法之一可以防止处理Twig不转义的标记时的XSS攻击。
- en: Double escaping
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双重转义
- en: 'Since Twig already does much of the work for us, it''s also important not to
    go overboard with escaping. Veteran Drupal 7 developers may have a tendency to
    escape things like there is no tomorrow, but this can have unintended consequences.
    For example, imagine the following scenario:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Twig已经为我们做了很多工作，因此我们也不应该过度转义。经验丰富的Drupal 7开发者可能会倾向于过度转义，但这可能会有意想不到的后果。例如，想象以下场景：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since Twig is auto-escaping, the following string will be printed:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Twig是自动转义的，以下字符串将被打印：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So there is no visible change as the string was safe. However, imagine that
    we were overzealous with our sanitization and did this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，字符串是安全的，没有可见的变化。然而，想象一下，如果我们过于热衷于清理并做了以下操作：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we would get the following title:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们会得到以下标题：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That is because the first time it is escaped, Drupal turns the apostrophe into
    an HTML entity (`'`). However, the browser renders it correctly, so we don't actually
    see it. The second escaping turns the individual characters from that HTML entity
    into *their* respective HTML entities. In this case, the `&` character gets turned
    into `&amp;`. So, the entire string is no longer properly readable by the browser.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为第一次转义时，Drupal将撇号转换为HTML实体（`'`）。然而，浏览器正确地渲染它，所以我们实际上看不到它。第二次转义将那个HTML实体中的个别字符转换为*它们*各自的HTML实体。在这种情况下，`&`字符被转换为`&amp;`。因此，整个字符串不再被浏览器正确读取。
- en: I now draw your attention for a moment to [Chapter 4](feada4d1-f255-4dd6-83b5-8d66bab5f852.xhtml),
    *Theming*. In that chapter, we saw that the `#markup` and `#plain_text` properties
    already serve to sanitize the user input passed through them. The first uses the
    `Xss::filterAdmin()` method, whereas the latter uses the `Html::escape()` method.
    So, keep in mind that if you use those as part of your render arrays, you may
    not need further sanitization.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在将您的注意力暂时引向[第4章](feada4d1-f255-4dd6-83b5-8d66bab5f852.xhtml)，*主题化*。在那章中，我们了解到`#markup`和`#plain_text`属性已经足以对通过它们传递的用户输入进行清理。前者使用`Xss::filterAdmin()`方法，而后者使用`Html::escape()`方法。因此，请记住，如果您将它们作为渲染数组的一部分使用，可能不需要进一步的清理。
- en: SQL Injection
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入
- en: SQL Injection still remains a very popular vector attack on vulnerable applications
    that incorrectly make use of database drivers. Luckily, by using the Drupal 8
    database abstraction layer, we go a long way toward ensuring protection against
    such vulnerabilities. All we have to do is use it correctly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入仍然是对使用数据库驱动程序不当的易受攻击应用程序的一种非常流行的向量攻击。幸运的是，通过使用Drupal 8数据库抽象层，我们大大提高了确保对这些漏洞的保护。我们只需正确使用它即可。
- en: When it comes to Entity queries, there isn't much we can do wrong. However,
    when using the Database API directly, as we did in [Chapter 8](c20b297a-3a37-46ff-a80c-bf83a21bbd5d.xhtml),
    *The Database API*, we have to pay attention.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到实体查询时，我们很难出错。然而，当我们直接使用数据库API，就像我们在[第8章](c20b297a-3a37-46ff-a80c-bf83a21bbd5d.xhtml)，*数据库API*中所做的那样时，我们必须注意。
- en: 'Most of the time, vulnerabilities have to do with improper placeholder management.
    For example, we should never do things like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，漏洞与不正确的占位符管理有关。例如，我们永远不应该这样做：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is regardless of what `$variable` is—direct user input or otherwise. Because
    by using that direct concatenation, malicious users may inject their own instructions
    and complete the statement in a different way than intended. Instead, we should
    use code like we did in [Chapter 8](c20b297a-3a37-46ff-a80c-bf83a21bbd5d.xhtml),
    *The Database API*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`$variable`是什么无关——直接用户输入或其他。因为通过使用那种直接连接，恶意用户可能会注入他们自己的指令，并以不同于预期的不同方式完成语句。相反，我们应该使用我们在[第8章](c20b297a-3a37-46ff-a80c-bf83a21bbd5d.xhtml)，*数据库API*中所使用的代码：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In other words, use placeholders that will then be sanitized by the API to ensure
    that no characters are allowed to form malicious statements.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，使用占位符，然后由API进行清理，以确保不允许任何字符形成恶意语句。
- en: Drupal 8 comes with an additional security improvement when it comes to SQL
    injection vulnerabilities—single statement executions. Up until recently, the
    PHP PDO driver (which Drupal extended since Drupal 7) did not have a flag in place
    to inform MySQL to execute only a single statement at a time. Theoretically, vulnerabilities
    caused by appending multiple statements were possible (with one painful example
    of an attack that marked the Drupal community forever—SA-CORE-2014-005). However,
    this has been changed, and Drupal now sends this flag via PDO to the database
    engine to prevent multiple statements from being executed at once. So, we get
    this extra bit of protection.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL注入漏洞方面，Drupal 8带来了额外的安全改进——单条语句执行。直到最近，PHP PDO驱动程序（自Drupal 7以来Drupal进行了扩展）没有设置标志来通知MySQL一次只执行一条语句。理论上，由附加多条语句引起的漏洞是可能的（有一个痛苦的攻击例子，它永远标记了Drupal社区——SA-CORE-2014-005）。但是，这已经改变了，Drupal现在通过PDO将此标志发送到数据库引擎，以防止一次执行多条语句。因此，我们得到了额外的保护。
- en: Cross-Site Request Forgery (CSRF)
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站请求伪造（CSRF）
- en: 'CSRF attacks are another popular way that applications can be overtaken, by
    forcing a user with elevated privileges to execute unwanted actions on their own
    site. Usually this happens when certain URLs on the application trigger a process
    simply by being accessed through the browser (and by being authenticated): for
    example, deleting a resource.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击是应用程序被接管的一种流行方式，通过强制具有提升权限的用户在自己的网站上执行不受欢迎的操作。通常这发生在应用程序的某些URL通过浏览器访问（并通过认证）触发一个过程时：例如，删除资源。
- en: The most important thing to consider in this respect is to never have such actions
    happening simply by accessing a URL. To help with this, we have the powerful Form
    API, which already had token-based CSRF protection embedded from previous versions
    of Drupal. So basically you can create forms whose submit handlers perform the
    potentially damaging actions (as we learned in [Chapter 2](601b4dd0-c521-459e-9342-2645a109642c.xhtml),
    *Creating Your First Module*) or even add a second layer using a confirmation
    form (as we saw in [Chapter 6](77cab458-5612-468c-8010-12385708eb81.xhtml), *Data
    Modeling and Storage*, and [Chapter 7](392cdb70-e52a-42d1-b782-28d6eb726810.xhtml),
    *Your Own Custom Entity and Plugin Types*, when talking about entities). The latter
    is actually recommended for when the action is irreversible or has greater implications.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面最重要的考虑因素是，绝不能仅仅通过访问URL就执行此类操作。为了帮助解决这个问题，我们拥有强大的表单API，它已经从Drupal的早期版本中嵌入了基于令牌的CSRF保护。因此，基本上您可以创建提交处理程序执行潜在有害操作的表单（正如我们在第2章中学习的，*创建您的第一个模块*）或者甚至添加一个第二层使用确认表单（正如我们在第6章中看到的，*数据建模和存储*和第7章中看到的，*您的自定义实体和插件类型*，当时我们讨论实体）。后者实际上在操作不可逆或具有更大影响时是推荐的。
- en: Although the Form API should account for most use cases, we may also encounter
    the need to declare a callback URL that directly handles the process. And, to
    protect ourselves from CSRF attacks, we can use the CSRF token system as we saw
    in [Chapter 10](bb49e98d-7db0-4969-95fc-a2bad6d4f1db.xhtml), *Access Control*,
    when we talked about the various types of access control. I recommend that you
    check out that chapter for more information on this topic.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管表单API应该涵盖大多数用例，但我们可能也会遇到需要声明一个直接处理过程的回调URL的需求。此外，为了保护我们免受CSRF攻击，我们可以使用我们在第10章中看到的CSRF令牌系统，*访问控制*，当时我们讨论了各种访问控制类型。我建议您查看该章节以获取更多关于此主题的信息。
- en: Summary
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Drupal 8 has come a long way with locking down its APIs to attack vulnerabilities.
    Of course, this does not mean it's perfect, nor that a bad developer cannot create
    security holes. For this reason, it's extremely important to pay attention to
    the security implications of all the code you write, follow the standards (including
    the OWASP checklist), and be aware of what contributed modules you use (to at
    least be covered by the Drupal security team). Moreover, it's also very important
    to keep up to date with security announcements from the Drupal security team as
    new vulnerabilities may be discovered and updates required to remedy them. These
    are more time-sensitive in some cases than others, but it's always good to stay
    up to date as quickly as possible (by following the communication from the Drupal
    security team). Luckily, though, historically speaking, Drupal has not had many
    security crises—at least not compared to other open source frameworks out there.
    So from a security standpoint, it has a good reputation. However, do not take
    this to mean that you, as a module developer, are unburdened by the heavy responsibility
    for keeping your application safe.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8在锁定其API以防止攻击漏洞方面已经取得了长足的进步。当然，这并不意味着它是完美的，也不意味着一个糟糕的开发者不能创建安全漏洞。因此，密切关注您所编写代码的安全影响，遵循标准（包括OWASP清单），并了解您使用的贡献模块（至少要由Drupal安全团队覆盖）非常重要。此外，保持与Drupal安全团队的安全公告同步也非常重要，因为可能会发现新的漏洞并需要更新来修复它们。在某些情况下，这些更新比其他更新更具有时间敏感性，但尽快保持最新状态总是好的（通过关注Drupal安全团队的信息）。幸运的是，从历史的角度来看，Drupal并没有经历很多安全危机——至少与其他开源框架相比是这样。因此，从安全角度来看，它享有良好的声誉。然而，不要认为您作为模块开发者，不需要承担保持应用程序安全的重任。
- en: 'In this chapter, we discussed three transitional vulnerabilities web applications
    usually face, how Drupal 8 stands against these, and what we as module developers
    can, and should, do to protect ourselves from them: XSS, SQL Injection, and CSRF.
    Of course, there are many more things that we can do from an application and server
    maintenance point of view. However, these fall outside the scope of what this
    book focuses on. I strongly encourage you, though, to read all the available documentation
    on security in Drupal 8 and keep yourself informed.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了网络应用程序通常面临的三种过渡性漏洞，Drupal 8 如何应对这些漏洞，以及作为模块开发者，我们可以和应该做些什么来保护自己免受其影响：跨站脚本（XSS）、SQL
    注入和跨站请求伪造（CSRF）。当然，从应用程序和服务器维护的角度来看，我们还可以做很多事情。然而，这些内容超出了本书关注的范围。尽管如此，我强烈建议你阅读所有关于
    Drupal 8 安全性的可用文档，并保持信息更新。
- en: Wow. Can you believe you just finished the last chapter of this book and you
    can finally go play ping pong? Yes, do take that needed break as it was not an
    easy journey, although I hope a productive one. Once you are done, and back in
    front of the keyboard, I strongly encourage you to revisit the sections that seemed
    more complicated to you. Do this while checking and navigating the Drupal core
    code to understand and see for yourself the concepts in action. No resource will
    ever be better than the code itself, and the main goal of this book was to point
    you in the right directions. There are so many more cool things to learn and this
    process never stops. If you are interested, you will learn every day. I do.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 哇。你能相信你刚刚完成了这本书的最后一章，终于可以去打乒乓球了吗？是的，确实需要休息一下，因为这是一段不容易的旅程，尽管我希望它是有成效的。一旦完成，回到键盘前，我强烈建议你重新审视那些对你来说更复杂的部分。在做这件事的同时，检查并导航
    Drupal 核心代码，以理解和亲自看到这些概念在实际中的应用。没有任何资源会比代码本身更好，这本书的主要目标就是为你指明正确的方向。还有许多更多有趣的事情要学习，这个过程永远不会停止。如果你感兴趣，你将每天都会学到新东西。我也是。
