- en: Creating Custom MySQL Database Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义 MySQL 数据库表
- en: 'In this chapter, we will cover the following topics around the creation of
    custom database tables:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将围绕创建自定义数据库表涵盖以下主题：
- en: Creating new database tables
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的数据库表
- en: Deleting custom tables on plugin removal
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在插件移除时删除自定义表
- en: Updating custom table structure on plugin upgrade
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在插件升级时更新自定义表结构
- en: Displaying custom table data on an admin page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在管理页面上显示自定义表数据
- en: Inserting and updating records in custom tables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自定义表中插入和更新记录
- en: Deleting records from custom tables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从自定义表中删除记录
- en: Displaying custom database table data in shortcodes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在短代码中显示自定义数据库表数据
- en: Implementing a search function to retrieve custom table data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个搜索功能以检索自定义表数据
- en: Importing data from a user file into custom tables
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户文件导入数据到自定义表中
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: As seen in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power
    of Custom Post Types*, custom post types provide a very powerful and easy way
    to create and manage custom content in a WordPress installation. That being said,
    if the new items that you wish to create do not benefit from having access to
    the built-in text editor and have a large amount of data fields that need to be
    stored in the system, storing them using custom post types can actually become
    cumbersome. More specifically, each custom field requires a separate function
    call to be associated with a custom post. Also, custom fields have limited functionality,
    since they store all their information in simple text fields, making it difficult
    to perform ordered queries based on special data types, such as dates.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如第 4 章[《自定义文章类型的威力》](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml)中所述，自定义文章类型提供了一种非常强大且简单的方法来在
    WordPress 安装中创建和管理自定义内容。话虽如此，如果您希望创建的新项目不受益于内置文本编辑器的访问，并且有大量需要存储在系统中的数据字段，那么使用自定义文章类型来存储它们实际上可能会变得繁琐。更具体地说，每个自定义字段都需要一个单独的函数调用与自定义文章相关联。此外，自定义字段的功能有限，因为它们将所有信息存储在简单的文本字段中，这使得根据特殊数据类型（如日期）执行有序查询变得困难。
- en: An alternative solution to manage custom content is to create new tables in
    the website's database and offer a custom interface to manage these new items.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 管理自定义内容的一个替代方案是在网站的数据库中创建新表，并提供一个自定义界面来管理这些新项目。
- en: While working directly with the website database might sound like a tall order,
    and should really only be done if custom post types don't work as desired, WordPress
    actually offers a utility class that makes it very easy to create new database
    tables, store information in these new structures, and perform data retrieval
    queries. While having a basic level of **Structured Query Language** (**SQL**)
    knowledge will help understand all of the recipes in this chapter while we create
    a bug tracking system, each recipe thoroughly explains how each command works
    to produce the end result.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然直接与网站数据库打交道听起来可能是一项艰巨的任务，并且实际上只有在自定义文章类型无法按预期工作的情况下才应该这样做，但 WordPress 实际上提供了一个实用工具类，它使得创建新数据库表、在这些新结构中存储信息以及执行数据检索查询变得非常容易。虽然具备基本的**结构化查询语言**（**SQL**）知识将有助于我们创建错误跟踪系统时理解本章中的所有食谱，但每个食谱都详细解释了每个命令如何工作以产生最终结果。
- en: Creating new database tables
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的数据库表
- en: The first step in the creation of custom data elements to be stored in a custom
    database table is to create the table itself. This is done by preparing a standard
    SQL command that specifies the name of the table and its desired structure and
    then getting WordPress to execute it on the website's database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将要存储在自定义数据库表中的自定义数据元素的创建的第一步是创建该表本身。这是通过准备一个标准的 SQL 命令来完成的，该命令指定了表名及其所需的结构，然后让
    WordPress 在网站数据库上执行它。
- en: This recipe shows how to prepare and execute a query that creates a table to
    hold bug reports.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何准备和执行一个查询，创建一个用于存储错误报告的表。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment, either on your
    local computer or on a remote server, where you will be able to load your new
    plugin files.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够访问 WordPress 开发环境，无论是在您的本地计算机上还是在远程服务器上，您将能够加载您的新插件文件。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的 WordPress 插件目录。
- en: Create a new directory called `ch8-bug-tracker`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch8-bug-tracker` 的新目录。
- en: Navigate to the directory and create a text file called `ch8-bug-tracker.php`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录并创建一个名为 `ch8-bug-tracker.php` 的文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 8 - Bug Tracker`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个合适的标题，将插件命名为“第8章 - Bug Tracker”。
- en: 'Add the following line of code to register a function to be called on plugin
    activation:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在插件激活时被调用的函数：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code segment to provide an implementation for the `ch8bt_activation`
    function:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch8bt_activation`函数的实现：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Insert the following code to provide an implementation for the `ch8bt_create_table`
    function responsible for the actual table creation:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码以提供`ch8bt_create_table`函数的实现，该函数负责实际创建表：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save and close the plugin file.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins management page and Activate the `Chapter 8 - Bug Tracker`
    plugin.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面，并激活“第8章 - Bug Tracker”插件。
- en: 'Using `phpMyAdmin`, connect to your MySQL database to see that a new table
    was created when the plugin was activated:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`phpMyAdmin`连接到您的MySQL数据库，以查看在插件激活时是否创建了一个新表：
- en: '![](img/d3f91e48-7f30-472a-8994-50ac88cf7c4c.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d3f91e48-7f30-472a-8994-50ac88cf7c4c.png)'
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Similar to the creation of configuration options that we covered back in the
    *Creating default user settings on plugin initialization* recipe from [Chapter
    3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and Administration
    Pages*, custom database tables are typically created when a plugin is activated
    in a WordPress installation. By using the activation hook, we register code to
    be executed when the plugin is first activated and when upgrades are performed.
    When the callback is executed, we will have our first encounter with the global
    `wpdb` class. This utility class is instantiated by WordPress and gives us access
    to a number of methods that can be used to interact with the underlying MySQL
    website database, as well as to help prevent data-related security risks. These
    methods vary in complexity, ranging from simple calls that will quickly insert
    or update records to more complex member functions that require knowledge of SQL
    commands to produce the expected results.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在第三章“创建默认用户设置”菜谱中提到的创建配置选项类似，当在WordPress安装中激活插件时，通常会创建自定义数据库表。通过使用激活钩子，我们注册代码以便在插件首次激活和升级时执行。当回调函数执行时，我们将首次接触到全局的`wpdb`类。这个实用类由WordPress实例化，并为我们提供了访问一系列方法，这些方法可以用来与底层的MySQL网站数据库进行交互，同时也有助于防止数据相关的安全风险。这些方法在复杂度上有所不同，从快速插入或更新记录的简单调用到需要了解SQL命令以产生预期结果的更复杂成员函数。
- en: Before making the call to create the actual table, the activation function makes
    a call to the `get_blog_prefix` method of the `wpdb` class to retrieve the table
    prefix associated with the website (set to `wp_` in a default installation). On
    retrieval, this prefix is immediately sent to the `ch8bt_create_table` function
    to build an SQL command designed to create a new table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用创建实际表之前，激活函数调用`wpdb`类的`get_blog_prefix`方法来检索与网站关联的表前缀（在默认安装中设置为`wp_`）。在检索后，这个前缀立即发送到`ch8bt_create_table`函数，以构建一个用于创建新表的SQL命令。
- en: While the SQL command has multiple lines, we can see that it is actually quite
    simple if we break it down into small sections. The first line of the command
    specifies that a new table named `<prefix>ch8_bug_data` should be created if it
    does not exist already on the server. If the creation takes place, the following
    five lines specify the name and data type for each field, along with information
    indicating whether the field can contain a `NULL` value and what the default value
    should be in some cases. There is also a special command associated with the `bug_id`
    field, called the `AUTO_INCREMENT` command, which tells the system to automatically
    populate this field with auto-incrementing values when new records are added to
    the table. Last, but not least, the last line of the code indicates that the primary
    key for the table is the `bug_id` field.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SQL命令有多个行，但如果我们将其分解成小部分，我们会发现它实际上相当简单。命令的第一行指定如果服务器上尚未存在，则应创建一个名为`<prefix>ch8_bug_data`的新表。如果创建发生，接下来的五行指定每个字段的名称和数据类型，以及指示字段是否可以包含`NULL`值以及在某些情况下默认值应该是什么的信息。还有一个与`bug_id`字段相关的特殊命令，称为`AUTO_INCREMENT`命令，它告诉系统在向表中添加新记录时自动用自增值填充此字段。最后，但同样重要的是，代码的最后一行指示表的键是`bug_id`字段。
- en: Once the query is ready, it is stored in a variable and executed by calling
    the `query` method of the `wpdb` object. This method executes any SQL command
    on the website database and returns a numeric value indicating how many rows were
    affected by the query.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦查询准备就绪，它就会被存储在一个变量中，并通过调用`wpdb`对象的`query`方法来执行。此方法在网站数据库上执行任何SQL命令，并返回一个数值，表示查询影响了多少行。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While the previous code is relatively manageable, things might get a bit more
    complicated when dealing with a larger number of fields or with network WordPress
    installation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然之前的代码相对容易管理，但在处理大量字段或网络WordPress安装时，事情可能会变得稍微复杂一些。
- en: Using phpMyAdmin to simplify code creation
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用phpMyAdmin简化代码创建
- en: 'Instead of writing the table creation code from scratch, the `phpMyAdmin` database
    management tool can come in handy to prepare this code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是从头开始编写表创建代码，`phpMyAdmin`数据库管理工具可以派上用场来准备此代码：
- en: '![](img/88164da6-fbd1-4306-a578-df51fbdae148.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/88164da6-fbd1-4306-a578-df51fbdae148.png)'
- en: 'For example, to create the table that was used in this recipe, follow these
    steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建本食谱中使用的表，请按照以下步骤操作：
- en: Select the `wordpressdev` database in `phpMyAdmin`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`phpMyAdmin`中选择`wordpressdev`数据库。
- en: Under the Create table section, enter `wpdev_ch8_bug_data` in the Name field
    and the number `5` as Number of fields.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“创建表”部分，在名称字段中输入`wpdev_ch8_bug_data`，在字段数量中输入数字`5`。
- en: Click on the Go button.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Go”按钮。
- en: In the table creation grid that is displayed, set the name of each Field based
    on the Column names listed in the previous screenshot.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在显示的表创建网格中，根据上一张截图中的列名设置每个字段的名称。
- en: Set the Type of each Field based on the Type column in the previous screenshot.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据上一张截图中的类型列设置每个字段的类型。
- en: For items that have a value in parentheses next to their Type, use the numeric
    value to indicate the Length/Values of these items.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于在其类型旁边有括号的值，使用数值来表示这些项的长度/值。
- en: 'Set the Default value for each field based on the previous screenshot. You
    can select NULL from the drop-down list for the items that have a NULL default.
    For items that have a specific value, select As defined: in the drop-down and
    indicate the value in the adjacent field.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据上一张截图设置每个字段的默认值。对于具有`NULL`默认值的项，可以从下拉列表中选择NULL。对于具有特定值的项，在下拉列表中选择“按定义：”，并在相邻字段中指示该值。
- en: For items that are allowed to have a NULL value (shown with a Yes in the previous
    screenshot), make sure that the Null box is checked.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于允许有`NULL`值的项（在上一张截图中以“是”显示），请确保已勾选“Null”框。
- en: Select PRIMARY under the Index drop-down list for the `bug_id` field to indicate
    that it will be the primary key for the table. Then, click on Go in the index
    creation pop-up dialog that appears.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“索引”下拉列表中选择`bug_id`字段下的“PRIMARY”，以表示它将是表的键。然后，点击出现的索引创建弹出对话框中的“Go”。
- en: Check the A_I box for the bug_id field to indicate that it should auto-increment
    when new values are inserted in the table.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于bug_id字段，勾选A_I框以指示在表中插入新值时应自动递增。
- en: Click on the Save button to complete the table creation process.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”按钮以完成表创建过程。
- en: At this time, phpMyAdmin will create the table on the server. To access the
    SQL command used to create the table, click on the Export tab and click on Go
    to download a text file containing the SQL code. While the export file will contain
    some extra information, the important section is the actual CREATE TABLE segment
    that, as you will see, looks very similar to the code written in this recipe.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时刻，phpMyAdmin将在服务器上创建表。要访问创建表的SQL命令，请点击导出标签，然后点击转到下载包含SQL代码的文本文件。虽然导出文件将包含一些额外信息，但重要部分是实际的CREATE
    TABLE部分，正如你将看到的，它看起来与这个配方中编写的代码非常相似。
- en: Create tables in network installation
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络安装中创建表
- en: One of WordPress's many strengths is the ability to create and manage multiple
    websites from a single installation. In these situations, each site has its own
    set of tables in the MySQL database. Therefore, when preparing a plugin that creates
    custom tables and may be used in network installations, extra code must be put
    in place to create the new tables under each site's structure.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress的许多优点之一是能够从单个安装中创建和管理多个网站。在这些情况下，每个网站在MySQL数据库中都有自己的表集。因此，当准备一个可能用于网络安装的创建自定义表的插件时，必须在每个网站的架构下放置额外的代码来创建新表。
- en: 'The first changes are done in the `ch8bt_activation` function, where we check
    whether we are dealing with a multisite installation. If that is the case, we
    will cycle through each existing site and make a call to create the new table,
    as we saw in the main recipe code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在`ch8bt_activation`函数中进行更改，检查我们是否正在处理多站点安装。如果是这种情况，我们将遍历每个现有网站，并调用创建新表，就像我们在主要配方代码中所看到的那样：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'While this will handle creating custom tables in all the existing network sites
    when the plugin is activated, additional code needs to be put in place to create
    the additional table when new sites are created:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这将处理在插件激活时在所有现有网络网站上创建自定义表，但还需要放置额外的代码来在创建新网站时创建额外的表：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `ch8bt_create_table` function itself does not require any modifications,
    since it was already designed to receive a table prefix from other functions and
    use it to build a query.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`ch8bt_create_table`函数本身不需要任何修改，因为它已经被设计为从其他函数接收表前缀并使用它来构建查询。'
- en: Deleting custom tables on plugin removal
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在插件移除时删除自定义表
- en: It is always a good practice for plugins to provide an uninstallation procedure
    to remove content that they added to a website's database or filesystem. When
    dealing with custom database tables, all records should be dropped along with
    the table itself when a website administrator decides to delete a plugin.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于插件来说，提供一个卸载程序以删除它们添加到网站数据库或文件系统中的内容，始终是一个好的做法。当处理自定义数据库表时，当网站管理员决定删除插件时，所有记录都应该与表本身一起删除。
- en: This recipe shows how to implement a data removal script to delete the bug storage
    table that was created in the previous recipe.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何实现一个数据删除脚本，以删除在先前的配方中创建的错误存储表。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Creating new database tables* recipe to
    have an existing table to remove. Alternatively, you can get the resulting code
    (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v1-1.php`) from the code bundle and
    rename the file as `ch8-bug-tracker.php`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*创建新的数据库表*的步骤，以便有一个现有的表可以删除。或者，你可以从代码包中获取结果代码（`第8章/ch8-bug-tracker/ch8-bug-tracker-v1-1.php`），并将文件重命名为`ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录。
- en: Create a text file called `uninstall.php` in the `ch8-bug-tracker` directory
    and open it in a code editor.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch8-bug-tracker`目录中创建一个名为`uninstall.php`的文本文件，并在代码编辑器中打开它。
- en: Start the new script with the standard `<?php` opening tags.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以标准的`<?php`打开标签开始新的脚本。
- en: 'Implement a new function called `ch8bt_drop_table` by adding this code to the
    file:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向文件中添加以下代码来实现一个名为`ch8bt_drop_table`的新函数：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following code to perform the deletion of tables created to store bugs
    from a single or network WordPress installation:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以执行从单个或网络WordPress安装中存储错误创建的表的删除：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save and close the code file.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭代码文件。
- en: Navigate to the Plugins management page and Deactivate the Chapter 8 - Bug Tracker
    plugin.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并停用第8章 - Bug Tracker插件。
- en: Make a copy of the entire plugin directory before performing the next step,
    to avoid deleting all of your work.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行下一步之前，请复制整个插件目录，以避免删除所有工作。
- en: Click on the plugin's Delete link and then click OK in the dialog that asks
    for confirmation before deleting the plugin and its data.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击插件上的删除链接，然后在确认删除插件及其数据的对话框中点击确定。
- en: Using `phpMyAdmin`, connect to your MySQL database to verify that the bug data
    table has been deleted.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`phpMyAdmin`连接到你的MySQL数据库以验证错误数据表已被删除。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we saw in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin
    Framework Basics*, all of the code contained in a file called `uninstall.php`
    gets executed when a plugin is deleted. In this case, our code's main purpose
    is to run a query against the website database to remove the bug table.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)中看到的，*插件框架基础*，一个名为`uninstall.php`的文件中包含的所有代码在删除插件时都会被执行。在这种情况下，我们代码的主要目的是对网站数据库运行查询以删除错误表。
- en: Before doing so, the first few lines of the file check for the presence of a
    variable (`WP_UNINSTALL_PLUGIN`) to confirm that the code has been called as part
    of the plugin deletion process and not by an external user.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做之前，文件的最初几行会检查一个变量（`WP_UNINSTALL_PLUGIN`）的存在，以确认代码是作为插件删除过程的一部分被调用的，而不是由外部用户调用的。
- en: Once the legitimacy of the execution has been confirmed, the code that runs
    is similar to the table creation code, where we first get access to the WordPress
    database management class, followed by a check to see whether the WordPress installation
    is a single site or a network installation. In the first case, we make a single
    call to the `ch8bt_drop_table` function to drop the bug table, while we make multiple
    calls to that function for every existing site under a network environment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确认了执行的合法性，运行的代码类似于表创建代码，我们首先获取对WordPress数据库管理类的访问权限，然后检查WordPress安装是单个站点还是网络安装。在前一种情况下，我们调用一次`ch8bt_drop_table`函数来删除错误表，而在网络环境下，我们对每个现有站点多次调用该函数。
- en: The query to remove the table is actually quite simple, making a call to the
    `query` method of the `wpdb` class to execute a `DROP TABLE` SQL command.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 删除表的查询实际上非常简单，通过调用`wpdb`类的`query`方法来执行`DROP TABLE` SQL命令。
- en: See also
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考以下
- en: The *Creating new database tables* recipe
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建新的数据库表*配方'
- en: Updating custom table structure on plugin upgrade
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在插件升级时更新自定义表结构
- en: Over the lifetime of a plugin, as it gets expanded to provide additional functionality,
    there may be a need to store more data than was originally intended in custom
    database tables. As you may know, WordPress itself makes regular changes to its
    own database structure during the upgrade process to store new information. To
    do this, it uses a simple function called `dbDelta`, which we can also access
    from our plugin's code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件的生命周期中，随着它扩展以提供额外的功能，可能需要在自定义数据库表中存储比最初打算存储更多的数据。正如你所知，WordPress本身在升级过程中会对其数据库结构进行定期更改以存储新信息。为此，它使用一个简单的函数`dbDelta`，我们也可以从我们的插件代码中访问它。
- en: This recipe shows how to alter the previous table creation code to load the
    WordPress upgrade API and use the database upgrade function to add an extra field
    to the existing bug storage table.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何修改之前的表创建代码，以加载WordPress升级API并使用数据库升级功能向现有的错误存储表添加额外字段。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Creating new database tables* recipe to
    have the creation code to modify. Alternatively, you can get the resulting code
    (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v1-1.php`) from the code bundle and
    rename the file `ch8-bug-tracker.php`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*创建新的数据库表*的配方，以便修改创建代码。或者，你也可以从代码包中获取结果代码（`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v1-1.php`），并将文件重命名为`ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录。
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch8-bug-tracker`目录并编辑`ch8-bug-tracker.php`。
- en: Locate the `ch8bt_create_table` function.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`ch8bt_create_table`函数。
- en: Remove the `IF NOT EXISTS` text on the first line of the table creation query.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表创建查询的第一行删除`IF NOT EXISTS`文本。
- en: 'Add an extra line to the table creation code to add a field to hold the bug
    title, shown as follows in bold:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表创建代码中添加一行额外的代码以添加一个字段来存储错误标题，如下所示（粗体）：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Locate the following lines of code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位以下代码行：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'They should be replaced with the following lines of code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 应将其替换为以下代码行：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save and close the plugin file.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins management page.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面。
- en: Deactivate and re-Activate the Chapter 8 - Bug Tracker plugin.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用并重新激活第 8 章 - Bug Tracker 插件。
- en: 'Using phpMyAdmin, connect to your MySQL database to see that the new `bug_title`
    field has been added to the bug storage table:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 phpMyAdmin 连接到您的 MySQL 数据库，查看新添加的 `bug_title` 字段是否已添加到错误存储表中：
- en: '![](img/b836d06e-3b12-4a3c-b790-99d7c992bc8c.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b836d06e-3b12-4a3c-b790-99d7c992bc8c.png)'
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `dbDelta` function is part of the utility functions that WordPress calls
    when performing version upgrades. When called, it parses the table creation SQL
    command that it receives and figures out the difference between the table structure
    that it describes and the current table, if the table exists. Once that difference
    has been established, it performs the necessary changes to align the two structures.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`dbDelta` 函数是 WordPress 在执行版本升级时调用的实用函数之一。当被调用时，它会解析它接收到的表创建 SQL 命令，并确定它所描述的表结构与当前表之间的差异（如果表存在的话）。一旦确定了这种差异，它就会执行必要的更改以使两个结构对齐。'
- en: If both the structures are identical, it leaves the table as it is. With this
    approach in place, any changes to the structure can simply be implemented by altering
    the table creation query. As such, the `dbDelta` function can actually be used
    from the first version of a plugin to ensure an easy upgrade path.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个结构完全相同，它将保持表不变。采用这种方法，任何对结构的变化都可以通过更改表创建查询简单地实现。因此，`dbDelta` 函数实际上可以从插件的第一版本开始使用，以确保升级路径简单易行。
- en: See also
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating new database tables* recipe
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建新的数据库表* 菜谱'
- en: Displaying custom table data on an admin page
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在管理页面上显示自定义表数据
- en: After creating one or more custom database tables to store data, the next step
    in the creation of a custom item management system is to build an interface to
    populate them. While custom post types have a very organized structure to edit
    entries, creating an interface for custom tables is much more similar to creating
    plugin configuration panels, as we saw in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建一个或多个自定义数据库表以存储数据后，创建自定义项目管理系统下一步是构建一个界面来填充它们。虽然自定义帖子类型有一个非常有序的结构来编辑条目，但创建自定义表界面与创建插件配置面板非常相似，正如我们在第
    3 章[用户设置和管理页面](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)中看到的。
- en: This recipe shows how to create an interface that will display a list of bugs
    stored in the system, provide a link to create new entries, and offer a way to
    edit existing entries.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱展示了如何创建一个界面，该界面将显示系统中存储的错误列表，提供一个创建新条目的链接，并提供编辑现有条目的方法。
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: You should have already followed the *Updating custom table structure on plugin
    upgrade* recipe to have a custom table in place with the required structure. Alternatively,
    you can get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v2.php`)
    from the code bundle and rename the file `ch8-bug-tracker.php`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了 *在插件升级时更新自定义表结构* 的菜谱，以便有一个具有所需结构的自定义表。或者，您可以从代码包中获取结果代码（`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v2.php`），并将文件重命名为
    `ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的 WordPress 插件目录。
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `ch8-bug-tracker` 目录并编辑 `ch8-bug-tracker.php`。
- en: 'Insert the following line of code to register a function to be called when
    the administration menu is being built:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建管理菜单时注册要调用的函数，请插入以下代码行：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following code to provide an implementation for the `ch8bt_settings_menu`
    function:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以提供 `ch8bt_settings_menu` 函数的实现：
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Append the following block of code to provide an implementation for the `ch8bt_config_page`
    function responsible to render the configuration page:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块附加到为负责渲染配置页面的 `ch8bt_config_page` 函数提供实现的代码：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save and close the plugin file.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Navigate to the new Bug Tracker item under the administration page''s Settings
    menu to see the newly created page, showing that there are currently no bugs stored
    in the system:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到管理页面设置菜单下的新 Bug Tracker 项目，以查看新创建的页面，显示系统中目前没有存储任何错误：
- en: '![](img/09494f30-ba92-4fb9-9e7c-a6ddb17b5012.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/09494f30-ba92-4fb9-9e7c-a6ddb17b5012.png)'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first few steps of the recipe use functions that were previously covered
    in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*, to register a callback that will add a menu to the Settings
    section of the admin menu. When the new menu page is visited, the `ch8bt_config_page`
    function is called to render the page contents, using a mix of HTML and PHP code.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 菜谱的前几个步骤使用了在第3章（0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml），*用户设置和管理页面*中之前介绍过的函数，来注册一个回调函数，该回调函数将添加到管理菜单的设置部分。当访问新的菜单页面时，`ch8bt_config_page`
    函数会被调用以渲染页面内容，使用 HTML 和 PHP 代码的混合。
- en: After rendering the page title, along with a link that will be used to create
    new bugs, the page display code checks to see whether the page address contains
    a variable called `id`. This ID will be used in subsequent recipes to indicate
    whether the user wants to create or edit bugs. It will not be set when a visitor
    clicks on the Bug Tracker menu item, resulting in the current recipe code getting
    called.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染页面标题以及用于创建新错误的链接之后，页面显示代码会检查页面地址是否包含一个名为 `id` 的变量。这个 ID 将在后续的菜谱中用来指示用户是想创建还是编辑错误。当访客点击错误跟踪器菜单项时，不会设置此
    ID，从而导致当前菜谱代码被调用。
- en: The next section uses the `get_results` method of the `wpdb` database management
    class to retrieve information from the database. In this call, the first parameter
    is an SQL query, whereas the second argument indicates the desired format to be
    used to return data. While we specified that we want an associative array in this
    case, other options are to return a numerically indexed array (`ARRAY_N`), an
    object (`OBJECT`), or an array of objects (`OBJECT_K`).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分使用 `wpdb` 数据库管理类的 `get_results` 方法从数据库中检索信息。在这个调用中，第一个参数是一个 SQL 查询，而第二个参数指示返回数据所使用的期望格式。虽然我们指定了在这种情况下我们想要一个关联数组，但其他选项包括返回一个数字索引数组（`ARRAY_N`）、一个对象（`OBJECT`）或一个对象数组（`OBJECT_K`）。
- en: The `SELECT *` command in the query indicates that we want all the fields in
    the table to be returned, while the `ORDER` command specifies the field that should
    be used to order results and the order direction (`ASC` or `DESC`).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 查询中的 `SELECT *` 命令表示我们想要返回表中的所有字段，而 `ORDER` 命令指定了用于排序结果的字段以及排序方向（`ASC` 或 `DESC`）。
- en: Once the `get_results` method has been executed, we will check to see whether
    any data was retrieved from the database, and proceed to perform a `foreach` loop
    through all the records to display them in a standard HTML table if data is found.
    If no records are returned by the query, we will display a short message indicating
    that no bugs were found.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了 `get_results` 方法，我们将检查是否从数据库中检索到了任何数据，如果找到数据，我们将通过一个 `foreach` 循环遍历所有记录，并在标准
    HTML 表格中显示它们。如果查询没有返回任何记录，我们将显示一条简短的消息，表明没有找到错误。
- en: See also
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating an administration page menu item in the Settings menu* recipe
    in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)，*用户设置和管理页面*中的*在设置菜单中创建管理页面菜单项*菜谱
- en: The *Rendering the admin page contents using HTML* recipe in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)，*用户设置和管理页面*中的*使用 HTML 渲染管理页面内容*菜谱
- en: Inserting and updating records in custom tables
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自定义表中插入和更新记录
- en: Now that we have a basic infrastructure in place to display existing bugs, the
    next logical step is to create a form that will be used to insert and update records
    in a custom table.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了一个基本的基础设施来显示现有的错误，下一步的逻辑步骤是创建一个表单，该表单将被用来在自定义表中插入和更新记录。
- en: This recipe shows how to add a form to manage bugs when users select an entry
    in the bug tracking list or indicate that they want to create a new entry by using
    the appropriate link.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱展示了当用户在错误跟踪列表中选择一个条目或通过适当的链接表示他们想要创建一个新条目时，如何添加一个表单来管理错误。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Displaying custom table data in an admin
    page* recipe to have an existing framework in place. Alternatively, you can get
    the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v3.php`) from the
    code bundle and rename the file `ch8-bug-tracker.php`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*在管理页面中显示自定义表数据*菜谱，以建立一个现有的框架。或者，你也可以从代码包中获取结果代码（`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v3.php`）并将文件重命名为
    `ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录。
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch8-bug-tracker`目录并编辑`ch8-bug-tracker.php`。
- en: Find the `ch8bt_config_page` function and locate the bracket that closes out
    the `if` statement (`<?php } ?>`) situated toward the end of its body.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch8bt_config_page`函数并定位其主体末尾关闭`if`语句的括号（`<?php } ?>`）。
- en: 'Insert the following code block right before the closing bracket from the `if`
    statement identified in the previous step:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步中识别出的`if`语句的关闭括号之前插入以下代码块：
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following line of code to register a function that will be called on
    the initialization of the administration page:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在初始化管理页面时被调用的函数：
- en: '[PRE14]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following block of code at the end of the plugin file to register a
    function to be called when bugs are created or updated:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件文件末尾添加以下代码块以注册一个在创建或更新错误时被调用的函数：
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Append the following block of code to process user-submitted data and store
    it in the website database:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块附加以处理用户提交的数据并将其存储在网站数据库中：
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save and close the plugin file.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Navigate to the new Bug Tracker item under the administration page''s Settings
    menu and click on the Add New Bug link to create an entry:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到管理页面设置菜单下的新错误跟踪器项目，并点击“添加新错误”链接以创建条目：
- en: '![](img/144e94fb-dba1-496b-9d16-79da36051edd.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/144e94fb-dba1-496b-9d16-79da36051edd.png)'
- en: Click on Submit to store the new bug in the website database. The newly created
    bug will appear in the bug listing created in the previous recipe.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击提交以将新错误存储在网站数据库中。新创建的错误将出现在上一步中创建的错误列表中。
- en: Click on the new entry's name to review its information and update it.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新条目的名称以查看其信息和更新它。
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you tried clicking on the Add New Bug link created in the previous recipe,
    you would have been presented with a page that only contained the panel's title.
    This is due to the fact that we had not implemented the code to display a bug
    creation and editing form when the `id` variable is present in the website address.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试点击上一步中创建的“添加新错误”链接，你会看到一个只包含面板标题的页面。这是由于我们没有实现当网站地址中存在`id`变量时显示错误创建和编辑表单的代码。
- en: The first few steps of this recipe aim to rectify this by checking for the presence
    of a variable called `id` in the page URL with a value set to the text `new` or
    a numeric value.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的前几个步骤旨在通过检查页面URL中是否存在名为`id`的变量，其值设置为文本`new`或数值，来纠正这个问题。
- en: While both of these situations will result in displaying a bug edition form,
    the second condition first performs a database query using the `wpdb` object's
    `get_row` method to try to retrieve a bug with the designated ID. The `get_row`
    method is similar to the `get_results` method used in the previous recipe, but
    will only return a single row, even if more than one result is found by the query.
    As part of our `get_row` call, we also use the `$wpdb` class's prepare method.
    This method will parse the second argument it receives for security and then use
    it to replace the placeholder placed in our query. If the query is successful,
    the values that were retrieved are used to customize the form title and set initial
    field values.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两种情况都会显示错误编辑表单，但第二种情况首先使用`wpdb`对象的`get_row`方法执行数据库查询，尝试检索具有指定ID的错误。`get_row`方法类似于之前食谱中使用的`get_results`方法，但即使查询找到多个结果，也只会返回单行。作为我们的`get_row`调用的一部分，我们还使用了`$wpdb`类的prepare方法。此方法将解析它接收的第二个参数以进行安全性检查，然后使用它来替换查询中的占位符。如果查询成功，检索到的值将用于自定义表单标题并设置初始字段值。
- en: The form itself is a standard HTML form that includes many of the elements that
    we have seen in previous recipes, such as a call to `wp_nonce_field` to provide
    security from external attacks. We have also added a hidden field containing the
    bug ID that was found in the page URL to facilitate data processing when a bug
    is submitted.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 表单本身是一个标准的HTML表单，包括我们在之前的食谱中看到的一些元素，例如调用`wp_nonce_field`以提供外部攻击的安全性。我们还添加了一个包含在页面URL中找到的错误ID的隐藏字段，以便在提交错误时方便数据处理。
- en: Once the form is in place, we make a call to `add_action` to register a callback
    that will be executed when the newly created form is submitted.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦表单就位，我们调用`add_action`来注册一个回调，该回调将在新创建的表单提交时执行。
- en: The callback, named `process_ch8bt_bug`, starts off by doing a bit of validation.
    Namely, it checks to see whether the current user has administrative rights and
    if the nonce field that should be part of the form data is present. If both of
    these conditions are met, a data array is created from user post data, the current
    system date, and a hardcoded status value.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数名为`process_ch8bt_bug`，首先进行一些验证。具体来说，它检查当前用户是否有管理权限，以及是否在表单数据中存在应该包含的nonce字段。如果这两个条件都满足，则从用户帖子数据、当前系统日期和硬编码的状态值创建一个数据数组。
- en: The resulting array is stored in the website database using one of two `wpdb`
    object methods, `insert` or `update`, based on the value found in the hidden `bug_id`
    field. Both methods expect to receive the name of the target table, along with
    an associative array containing the names and values of each table field to be
    stored. Additionally, the `update` method requires a third parameter that indicates
    the field name and value to be used to locate the field to be updated. In both
    cases, you will notice that the `bug_id` field is not specified in the array of
    new values, since it gets automatically set to an incremental value by the database
    server.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数组使用两种`wpdb`对象方法之一存储在网站数据库中，即`insert`或`update`，这取决于隐藏的`bug_id`字段中找到的值。这两种方法都期望接收目标表名，以及包含每个要存储的表字段名称和值的关联数组。此外，`update`方法需要一个第三个参数，该参数指示用于定位要更新的字段的字段名称和值。在两种情况下，您都会注意到`bug_id`字段没有指定在新值数组中，因为它由数据库服务器自动设置为增量值。
- en: The last step in this function is to build a clean URL to the plugin configuration
    page and use the resulting address in a call to `wp_redirect`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的最后一个步骤是构建一个指向插件配置页面的干净URL，并在`wp_redirect`调用中使用该地址。
- en: See also
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Displaying custom table data in an admin page* recipe
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在管理页面中显示自定义表数据*的配方'
- en: Deleting records from custom tables
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从自定义表中删除记录
- en: After adding data to custom tables, website administrators are likely to delete
    some of these entries down the road. Since we have been building an interface
    to view, create, and modify database entries, the task of selecting items to be
    deleted also falls under our responsibility. Thankfully, we can easily expand
    the existing bug display list to add checkboxes for selection and a button to
    trigger the actual deletion.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在向自定义表中添加数据后，网站管理员可能会在将来删除这些条目中的一些。由于我们一直在构建一个用于查看、创建和修改数据库条目的界面，因此选择要删除的项目的工作也落在了我们的责任之下。幸运的是，我们可以轻松地扩展现有的错误显示列表，添加用于选择的复选框和用于触发实际删除的按钮。
- en: This recipe shows how to add deletion capabilities to our bug tracking system.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何为我们的错误跟踪系统添加删除功能。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Inserting and updating records in custom
    tables* recipe to have an existing framework to augment. Alternatively, you can
    get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v4.php`) from
    the code bundle and rename the file `ch8-bug-tracker.php`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*在自定义表中插入和更新记录*的配方，以有一个现有的框架来增强。或者，您可以从代码包中获取结果代码（`第8章/ch8-bug-tracker/ch8-bug-tracker-v4.php`），并将文件重命名为`ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch8-bug-tracker`目录并编辑`ch8-bug-tracker.php`。
- en: Find the `ch8bt_config_page` function and locate the `Manage Bug Entries h3`
    header in its content.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch8bt_config_page`函数，并定位其内容中的`管理错误条目 h3`标题。
- en: 'Insert the following highlighted lines of code right after the header to create
    a form:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题之后立即插入以下突出显示的代码行以创建一个表单：
- en: '[PRE17]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A few lines down, add an empty column in the table header, before the `ID`
    field, as highlighted in the following line of code:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面几行中，在`ID`字段之前，在表头中添加一个空列，如以下代码行所示：
- en: '[PRE18]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Within the main bug list display loop, insert the following highlighted code
    segments to add a checkbox in front of each item:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主错误列表显示循环中，插入以下突出显示的代码段，在每个项目前添加一个复选框：
- en: '[PRE19]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A few lines down, change the value of the `colspan` table row parameter from
    `3` to `4`:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面几行中，将`colspan`表格行参数的值从`3`更改为`4`：
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Append the following highlighted lines of code after the `table` close tag
    to display a deletion button and terminate the form section:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`table`关闭标签之后附加以下突出显示的代码行，以显示删除按钮并结束表单部分：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Find the `ch8bt_admin_init` function and add the following function call at
    the end of its body:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch8bt_admin_init`函数，并在其体末尾添加以下函数调用：
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Navigate to the bottom of the file and add the following code block to provide
    an implementation for the `delete_ch8bt_bug` function responsible for processing
    deletion requests generated by the new form:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到文件底部，并添加以下代码块，以提供处理由新表单生成的删除请求的`delete_ch8bt_bug`函数的实现：
- en: '[PRE23]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save and close the plugin file.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the new Bug Tracker item under the administration page's Settings
    menu to see the new interface elements that were added to the bug listing.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到管理页面设置菜单下的新Bug Tracker项，以查看添加到bug列表中的新界面元素。
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: While the actual deletion of data from our custom table can be done with a single
    call to run the `DELETE` SQL command, we first need the user to indicate which
    entries need to be removed. This selection interface can be easily added to the
    existing bug listing created in an earlier recipe.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然从我们的自定义表中实际删除数据可以通过运行`DELETE` SQL命令的单个调用完成，但我们首先需要用户指出哪些条目需要被删除。这个选择界面可以很容易地添加到之前菜谱中创建的现有bug列表。
- en: This recipe starts in familiar territory with the creation of a standard HTML
    form to surround the original bug listing. In addition to the bug list, the form
    also includes a hidden field to indicate the name of the action to be called when
    the user submits the form, along with a nonce field to ensure that access to the
    deletion process is secure.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱从创建一个标准的HTML表单开始，用于包围原始的bug列表。除了bug列表外，表单还包括一个隐藏字段，用于指示当用户提交表单时要调用的操作名称，以及一个nonce字段以确保删除过程的访问安全。
- en: With this initial code in place, the next section of the recipe modifies the
    original table listing to add a checkbox at the front of every row. As can be
    seen in the code, the `name` property of the checkbox is a bit different than
    regular HTML syntax, ending with two square parentheses. This syntax, used in
    conjunction with each item's `bug_id`, results in the creation of an array of
    checked items and ID numbers that are sent to the form processing function on
    submission.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在此初始代码的基础上，菜谱的下一部分修改了原始表列表，为每一行前面添加一个复选框。从代码中可以看出，复选框的`name`属性与常规HTML语法略有不同，以两个方括号结尾。这种语法与每个项目的`bug_id`结合使用，结果是在提交时创建一个已选项目数组和ID数字数组，这些数组被发送到表单处理函数。
- en: The last change that is done in the bug listing display code is to add a deletion
    button and to close the form.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在bug列表显示代码中进行的最后一个更改是添加一个删除按钮并关闭表单。
- en: To associate a callback with the newly created form, the next addition made
    by the recipe is a call to `add_action` to associate the `admin_post_<actionname>`
    variable action name with the `delete_ch8bt_bug` function.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将回调与新建的表单关联，菜谱接下来的添加是一个对`add_action`的调用，将`admin_post_<actionname>`变量操作名称与`delete_ch8bt_bug`函数关联。
- en: When called, the bug deletion function, like most other submission processing
    code that we have created before, first starts with a few verifications to make
    sure that the user has appropriate permissions and that the hidden security fields
    that were placed in the form are present. When both of these formalities are confirmed,
    the code goes on to check for the presence of a bug array and proceeds to cycle
    through all the entries if one was found. In that loop, we get access to the global
    `wpdb` class and we can use it to build and execute SQL queries that delete a
    single database row at a time using the `bug_id` numbers that were submitted.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当被调用时，bug删除函数，就像我们之前创建的大多数其他提交处理代码一样，首先进行一些验证，以确保用户具有适当的权限，并且表单中放置的隐藏安全字段存在。当这两项正式程序都得到确认后，代码将继续检查bug数组的存在，并在找到的情况下遍历所有条目。在那个循环中，我们获得对全局`wpdb`类的访问权限，并可以使用它构建和执行SQL查询，每次使用提交的`bug_id`数字删除单个数据库行。
- en: As an added security measure, notice the use of the `intval` function in front
    of the `$bug_to_delete` variable to make sure that no one is trying to get external
    commands to be processed in an attempt to corrupt or hijack the database.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的安全措施，请注意在`$bug_to_delete`变量前面使用`intval`函数，以确保没有人试图处理外部命令，试图破坏或劫持数据库。
- en: See also
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Inserting and updating records in custom tables* recipe
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在自定义表中插入和更新记录*的菜谱'
- en: Displaying custom database table data in shortcodes
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在短代码中显示自定义数据库表数据
- en: The purpose of creating custom tables is often to store information to be shared
    with website visitors. As such, it is important to give users the ability to easily
    display their new content stored in custom tables on their website. The most straightforward
    method to achieve this goal is to create one or more shortcodes that can be inserted
    on any post or page to render the desired information.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义表的目的通常是存储与网站访客共享的信息。因此，为用户提供在他们的网站上轻松显示存储在自定义表中的新内容的能力是很重要的。实现这一目标的最直接方法是创建一个或多个短代码，可以在任何帖子或页面上插入以呈现所需的信息。
- en: This recipe shows how to implement a new shortcode that will be used to display
    a bug listing on a page.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何实现一个新的短代码，该短代码将用于在页面上显示虫子列表。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Deleting records from custom tables* recipe
    to have an existing framework to augment. Alternatively, you can get the resulting
    code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v5.php`) from the code bundle
    and rename the file `ch8-bug-tracker.php`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了 *从自定义表中删除记录* 的食谱，以便有一个现有的框架来增强。或者，您可以从代码包中获取结果代码（`第8章/ch8-bug-tracker/ch8-bug-tracker-v5.php`）并将文件重命名为
    `ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `ch8-bug-tracker` 目录并编辑 `ch8-bug-tracker.php`。
- en: 'Add the following line of code at the bottom of the file to declare a new shortcode
    and its associated display function:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件底部添加以下代码行以声明一个新的短代码及其关联的显示函数：
- en: '[PRE24]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Insert the following code block right after the section header to implement
    the `ch8bt_shortcode_list` function that is responsible for displaying a bug listing:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部分标题之后立即插入以下代码块以实现负责显示虫子列表的`ch8bt_shortcode_list`函数：
- en: '[PRE25]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Save and close the plugin file.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Create a new page and insert the newly created shortcode `[bug-tracker-list]`
    in the page body.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新页面，并在页面正文中插入新创建的短代码 `[bug-tracker-list]`。
- en: 'View the page to see a list of bugs stored in the system:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看页面以查看存储在系统中的虫子列表：
- en: '![](img/2650036b-5f68-4c0b-ada9-a1417b3821f4.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2650036b-5f68-4c0b-ada9-a1417b3821f4.png)'
- en: How it works...
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Creating a new shortcode to display custom table data is done in a very similar
    way as in previous recipes. First, we declare the new code, along with the name
    of the function that will be called to generate text to replace it when found
    in posts or pages. Then, we create a display function to prepare all the output
    and return it to WordPress.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以与之前食谱非常相似的方式创建用于显示自定义表数据的新的短代码。首先，我们声明新的代码，以及当在帖子或页面中找到时将被调用的函数名称来生成文本替换它。然后，我们创建一个显示函数来准备所有输出并将其返回给WordPress。
- en: The only distinction here is in the way we query the information. The recipe
    uses the `get_results` method of the `wpdb` class to query all the bugs that exist
    in the custom database table using the `SELECT` SQL command. After this call is
    executed, all the items found are returned in an associative array that can easily
    be displayed in table form using a `foreach` loop.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的唯一区别在于我们查询信息的方式。本食谱使用 `wpdb` 类的 `get_results` 方法，通过 `SELECT` SQL 命令查询存在于自定义数据库表中的所有虫子。在此调用执行后，所有找到的项目都返回一个关联数组，可以很容易地使用
    `foreach` 循环以表格形式显示。
- en: If no entries were found, the recipe displays a simple message to inform the
    visitor.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有找到条目，本食谱将显示一条简单消息通知访客。
- en: See also
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Deleting records from custom tables* recipe
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从自定义表中删除记录* 的食谱'
- en: Implementing a search function to retrieve custom table data
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现搜索功能以检索自定义表数据
- en: While content created using custom post types can be automatically searched
    by the built-in WordPress search engine, custom database tables don't benefit
    from the same treatment. Instead, plugin developers choosing this mechanism to
    store information must build their own search functionality.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用自定义帖子类型创建的内容可以自动由内置的WordPress搜索引擎搜索，但自定义数据库表则没有同样的待遇。相反，选择此机制来存储信息的插件开发者必须构建自己的搜索功能。
- en: This recipe shows how to add a search box to the bug listing created in the
    previous section and how to use the resulting query data to narrow down the list
    of bugs that are displayed by the shortcode.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何在上一节创建的虫子列表中添加搜索框，以及如何使用生成的查询数据来缩小显示的虫子列表。
- en: Getting ready
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the recipe titled *Displaying custom database
    table data in shortcodes* to have an existing framework to augment. Alternatively,
    you can get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v6.php`)
    from the code bundle and rename the file `ch8-bug-tracker.php`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了名为*在短代码中显示自定义数据库表数据*的配方，以便有一个现有的框架进行增强。或者，您可以从代码包中获取结果代码（`第8章/ch8-bug-tracker/ch8-bug-tracker-v6.php`），并将文件重命名为`ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch8-bug-tracker`目录并编辑`ch8-bug-tracker.php`。
- en: 'Find the `ch8bt_shortcode_list` function and add the following highlighted
    code after the initial `global $wpdb` call to check whether a search string was
    entered by a visitor:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch8bt_shortcode_list`函数，并在初始`global $wpdb`调用之后添加以下突出显示的代码，以检查是否有访客输入了搜索字符串：
- en: '[PRE26]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Insert the following highlighted lines of code in the middle of the existing
    query string to add the `where` parameters using the user search text, if present:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有用户搜索文本，在现有查询字符串的中间插入以下突出显示的代码行以添加`where`参数：
- en: '[PRE27]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Locate the following line of code:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位以下代码行：
- en: '[PRE28]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Replace it to the following code:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 将其替换为以下代码：
- en: '[PRE29]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following code block, before the table starts rendering, to display
    a simple search form:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表格开始渲染之前添加以下代码块，以显示简单的搜索表单：
- en: '[PRE30]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save and close the plugin file.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Visit the bug display page that was previously created to see the new search
    form. Enter a search string and click on the Search button to see a list of results:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问之前创建的bug显示页面，查看新的搜索表单。输入搜索字符串并点击搜索按钮，查看结果列表：
- en: '![](img/56d31f5c-4553-43c5-940a-704ad8d9398b.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/56d31f5c-4553-43c5-940a-704ad8d9398b.png)'
- en: How it works...
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe implements a simple search engine by displaying a short form and
    capturing a user search string using the standard HTML `GET` method. If a search
    string is found in the page address, we will modify the bug retrieval query that
    was in place by adding a `where` clause that looks for the search string anywhere
    in the `bug_title` or `bug_description` fields.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方通过显示简短表单并使用标准的HTML `GET`方法捕获用户搜索字符串来实现一个简单的搜索引擎。如果页面地址中找到搜索字符串，我们将修改现有的bug检索查询，通过添加一个`where`子句来查找搜索字符串在`bug_title`或`bug_description`字段中的任何位置。
- en: While it might seem natural to insert the search string directly in the query
    and execute it, we use the `wpdb` class' `prepare` method to assemble the query
    and validate the search string to avoid malicious intent. This method works in
    a very similar way to the standard PHP `sprintf` function, with placeholders to
    represent the places where variables should be substituted.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然直接在查询中插入搜索字符串并执行它可能看起来很自然，但我们使用`wpdb`类的`prepare`方法来组装查询并验证搜索字符串以避免恶意意图。这种方法与标准的PHP
    `sprintf`函数非常相似，使用占位符来表示变量应该被替换的位置。
- en: The remainder of the shortcode display function remains identical, displaying
    a list of varying length depending on the presence of a search string and the
    number of entries that match the query.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 短代码显示函数的其余部分保持不变，显示的列表长度根据搜索字符串的存在和匹配查询的条目数量而变化。
- en: See also
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Displaying custom database table data in shortcodes* recipe
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在短代码中显示自定义数据库表数据*配方'
- en: Importing data from a user file into custom tables
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从用户文件导入自定义表中的数据
- en: To avoid long data entry sessions, a nice addition to a system, such as the
    Bug Tracker that we have been putting in place in this chapter, would be to provide
    users with the ability to import large amounts of entries from an external file
    in a single operation. To accomplish this task, the **Comma-Separated Values**
    (**CSV**) file format is very convenient, since it can be edited by most spreadsheet
    editors and can be read using standard PHP function calls.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免长时间的数据输入会话，对系统的一个很好的补充，例如我们在本章中设置的Bug Tracker，就是提供用户一次性从外部文件导入大量条目的能力。为了完成这个任务，逗号分隔值（**CSV**）文件格式非常方便，因为它可以被大多数电子表格编辑器编辑，并且可以使用标准的PHP函数调用读取。
- en: This recipe implements a CSV-based import function in our bug tracking system.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方在我们的bug跟踪系统中实现了基于CSV的导入功能。
- en: Getting ready
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Implementing a search function to retrieve
    custom table data* recipe to have an existing framework to augment. Alternatively,
    you can get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v7.php`)
    from the code bundle and rename the file `ch8-bug-tracker.php`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*实现一个搜索函数以检索自定义表数据*配方，以有一个现有的框架进行增强。或者，您可以从代码包中获取结果代码（`第8章/ch8-bug-tracker/ch8-bug-tracker-v7.php`）并将文件重命名为`ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch8-bug-tracker`目录并编辑`ch8-bug-tracker.php`。
- en: 'Find the `ch8bt_config_page` function and add the following highlighted code
    block at the end of the bug listings section after the end of the existing deletion
    form:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch8bt_config_page`函数，并在现有删除表单之后，在错误列表部分的末尾添加以下高亮代码块：
- en: '[PRE31]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Locate the `ch8bt_admin_init` function and add the following line of code at
    the end of its body to register a function to process submissions of the bug import
    form:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`ch8bt_admin_init`函数，并在其主体末尾添加以下代码行以注册处理错误导入表单提交的函数：
- en: '[PRE32]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Insert the following block of code to provide an implementation for the `import_ch8bt_bug`
    function:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码块以提供`import_ch8bt_bug`函数的实现：
- en: '[PRE33]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Save and close the plugin file.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Create a new text file in the plugin directory called `importtemplate.csv` and
    open it in a text editor.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件目录中创建一个名为`importtemplate.csv`的新文本文件，并在文本编辑器中打开它。
- en: 'Insert the following text in the newly created file to provide an example bug
    to import:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的文件中插入以下文本，以提供一个示例错误导入：
- en: '[PRE34]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Save and close the CSV text file.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭CSV文本文件。
- en: Navigate to the new Bug Tracker item under the administration page's Settings
    menu to see the new Import Bugs section.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到管理页面设置菜单下的新错误跟踪器项目，以查看新的导入错误部分。
- en: Use the file import dialog to locate the `importtemplate.csv`.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文件导入对话框定位到`importtemplate.csv`。
- en: 'Import the list of bugs in the system to see its content added to the database:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入系统中的错误列表，以查看其内容添加到数据库中：
- en: '![](img/0961800c-9225-40f3-97e6-9464a77da1ef.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0961800c-9225-40f3-97e6-9464a77da1ef.png)'
- en: How it works...
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe creates a small form on the Bug Tracker management page that is
    solely responsible for uploading one or more bugs to the database. By editing
    the content of the `importtemplate.csv` file and selecting it in the import dialog,
    users can quickly populate the system by loading data straight to the custom database
    table that was created by the plugin when it was first installed.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方在错误跟踪器管理页面上创建了一个小型表单，该表单仅负责将一个或多个错误上传到数据库。通过编辑`importtemplate.csv`文件内容并在导入对话框中选择它，用户可以通过直接将数据加载到插件首次安装时创建的自定义数据库表来快速填充系统。
- en: In addition to the file upload field, the form contains the usual hidden nonce
    and action name fields. It also features an `enctype` property to allow files
    to be uploaded.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文件上传字段外，表单还包含通常的隐藏nonce和动作名称字段。它还具备`enctype`属性，允许上传文件。
- en: When the user submits a file to be uploaded, the registered callback function
    first checks to see whether the user who made the submission has appropriate rights
    and whether the nonce security fields were present as part of the post data. If
    both of these conditions are met, the recipe goes on to check whether a file has
    been correctly uploaded to the web server using the `array_key_exists` function
    to search through the standard PHP `$_FILES` global variable. As you can see,
    the text that it searches for is the name of the file upload field from the form.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交要上传的文件时，注册的回调函数首先检查提交的用户是否有适当的权限，以及nonce安全字段是否作为帖子数据的一部分存在。如果这两个条件都满足，则继续检查是否已正确上传文件到网络服务器，使用`array_key_exists`函数通过标准PHP`$_FILES`全局变量进行搜索。如您所见，它搜索的文本是表单中文件上传字段的名称。
- en: If a file has been uploaded, the `fopen` function opens it and stores a pointer
    to it in a local variable. After a quick verification of the pointer's existence,
    the code moves to a `while` loop to process each line of the incoming file with
    the `fgetcsv` function. This function reads one line of the file at a time, analyzes
    its content to find all of the comma-separated fields that are present, and stores
    the resulting data in a numeric array.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已上传文件，`fopen` 函数会打开它，并将指向该文件的指针存储在一个局部变量中。在快速验证指针存在之后，代码将移动到一个 `while` 循环中，使用
    `fgetcsv` 函数处理传入文件的每一行。此函数一次读取文件的一行，分析其内容以找到所有存在的逗号分隔字段，并将结果数据存储在一个数字数组中。
- en: The rest of the `import` function creates an array with the imported data and
    stores it in the database using the `wpdb` class' `insert` method, as we have
    seen in a previous recipe.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 函数的其余部分创建一个包含导入数据的数组，并使用 `wpdb` 类的 `insert` 方法将其存储在数据库中，正如我们在之前的菜谱中看到的。'
- en: See also
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Inserting and updating records in custom tables* recipe
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在自定义表中插入和更新记录* 的菜谱'
