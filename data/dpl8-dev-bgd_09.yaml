- en: Chapter 9. Advanced Views Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。高级 Views 开发
- en: '*This chapter will give you an in-depth introduction to the Views module and
    introduce some of the Views plugin architecture. We will dive into some of the
    advanced features of Views available in the Views UI, including an introduction
    to taxonomy-based Views. We will be developing a Views style plugin to display
    our new Recipes view as semantic tabs. We will also contribute Views semantic
    tabs module to Drupal as a sandbox project.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章将深入介绍 Views 模块，并介绍一些 Views 插件架构。我们将深入了解 Views UI 中的一些高级功能，包括基于分类的 Views
    介绍。我们将开发一个 Views 风格插件，以显示我们的新 Recipes 视图作为语义标签。我们还将把 Views 语义标签模块作为沙盒项目贡献给 Drupal。*'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Advanced Views configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级 Views 配置
- en: Views plugin development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Views 插件开发
- en: Creating a Drupal sandbox project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Drupal 沙盒项目
- en: Views revisited – advanced configuration
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重访 Views – 高级配置
- en: In the last few chapters, Custom Content Types and an Introduction to Module
    Development, we had a quick introduction to Views, and saw how easy it is to create
    a view with the new Views wizard's user interface. The new wizard-based creation
    for new views makes it easy to get started with Views, but does not include many
    of the more advanced Views configuration options. Even on the standard Views edit
    page, advanced configuration options are hidden away, so as not to overwhelm those
    who are new to Views. The beginning of this chapter will explore many of these
    advanced configuration options available with Views. Views configuration can get
    complex pretty quickly. So, in a way, advanced Views configuration is not any
    less complex than some of the PHP code we have written.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后几章，自定义内容类型和模块开发简介中，我们快速介绍了 Views，并看到了使用新的 Views 向导的用户界面创建视图是多么简单。基于向导的新视图创建使得开始使用
    Views 变得容易，但它不包括许多更高级的 Views 配置选项。即使在标准的 Views 编辑页面上，高级配置选项也被隐藏起来，以免让初学者感到不知所措。本章的开始将探讨许多
    Views 提供的高级配置选项。Views 配置可能会很快变得复杂。所以，从某种意义上说，高级 Views 配置并不比我们编写的某些 PHP 代码简单。
- en: Random top rated recipe block
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机高评价食谱块
- en: The home page is still a bit plain and boring. We are going to use Views to
    create a block that will randomly showcase one of the top-rated recipes on the
    site. This will involve using Views filters and sort settings.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首页仍然有点单调乏味。我们将使用 Views 创建一个块，随机展示网站上的一篇高评价食谱。这将涉及使用 Views 过滤器和排序设置。
- en: Time for action – building a random top rated recipe block with Views
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践时间 – 使用 Views 构建随机高评价食谱块
- en: We are going to go beyond the basic Views wizard view creation user interface
    and learn a few more advanced features and configuration of Views.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将超越基本的 Views 向导视图创建用户界面，并学习一些更多高级功能和 Views 的配置。
- en: Open our d8dev site in your browser, click on the **Structure** link in the
    **Admin** toolbar, and click on the **Views** link.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开我们的 d8dev 网站，点击 **管理** 工具栏中的 **结构** 链接，然后点击 **Views** 链接。
- en: Click on the **Add new view** link at the top of the **Views** page.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Views** 页面顶部的 **添加新视图** 链接。
- en: Enter `Random Top Rated Recipe` as the **View name**.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Random Top Rated Recipe` 作为 **视图名称** 输入。
- en: Select **Recipe** for the **of type** options.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 **类型** 选项选择 **Recipe**。
- en: Check the **Create a block** checkbox.![Time for action – building a random
    top rated recipe block with Views](img/4659_09_01.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打勾 **创建一个块** 复选框。![动手实践时间 – 使用 Views 构建随机高评价食谱块](img/4659_09_01.jpg)
- en: Next, click on the **Save and edit** button, as we want to configure some more
    advanced options that are not available as part of the basic block creation wizard.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **保存并编辑** 按钮，因为我们想配置一些基本块创建向导中不可用的更多高级选项。
- en: Now we are going to add the Recipe content fields that we want to display in
    this block. Remember, this block is going to be displayed on our d8dev site's
    front page, so we want to make it visually appealing. Note that the **Title**
    field is already included by default.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将添加我们想要在此块中显示的 Recipe 内容字段。记住，这个块将显示在我们的 d8dev 网站的前页面上，所以我们要让它看起来视觉上吸引人。注意，**标题**
    字段默认已经包含在内。
- en: 'Click on the **Add** button for **FIELDS**, search for `image`, and select
    the checkbox for **Content: image** and click on the **Apply (all displays)**
    button. Note that Views shows you what node or content types the fields are associated
    with.![Time for action – building a random top rated recipe block with Views](img/4659_09_02.jpg)'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**字段**的**添加**按钮，搜索`image`，并选择**内容：图像**的复选框，然后点击**应用（所有显示）**按钮。注意，视图会显示字段关联的节点或内容类型。![使用视图构建随机高评分菜谱块的时机](img/4659_09_02.jpg)
- en: For the **Configure field** settings for the image field, select **Medium (220*220)**
    as the **Image style** and click on the **Apply (all displays)** button.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于图像字段的**配置字段**设置，选择**中等（220*220）**作为**图像样式**，然后点击**应用（所有显示）**按钮。
- en: 'Click on the **Add** button for **FIELDS**, search for `Comment count`, and
    select the checkbox for **Comment Statistics: Comment count**. Then click on the
    **Apply(all displays)** button.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**字段**的**添加**按钮，搜索`Comment count`，并选择**评论统计：评论计数**的复选框。然后点击**应用（所有显示）**按钮。
- en: For the **Configure field** settings for **Comment count**, select **Total:**
    as the **Prefix** and **Reviews** as the **Suffix** value. In the **STYLE SETTINGS**
    section, check the **Customize field HTML** checkbox, select **STRONG** as the
    **HTML element** field, and click on the **Apply(all displays)** button.![Time
    for action – building a random top rated recipe block with Views](img/4659_09_03.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**评论计数**的**配置字段**设置，选择**总计数**作为**前缀**，**评论**作为**后缀**值。在**样式设置**部分，勾选**自定义字段HTML**复选框，选择**STRONG**作为**HTML元素**字段，然后点击**应用（所有显示）**按钮。![使用视图构建随机高评分菜谱块的时机](img/4659_09_03.jpg)
- en: 'Next, in the **SORT CRITERIA** section, click on the **Add** button, search
    for `Comment count`, and select the checkbox for **Comment Statistics: Comment
    count**. Then click on the **Apply(all displays)** button.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**排序标准**部分，点击**添加**按钮，搜索`Comment count`，并选择**评论统计：评论计数**的复选框。然后点击**应用（所有显示）**按钮。
- en: For the **Configure sort criteria** settings for **Comment count**, select **Sort
    descending** for the **Order** field and click on the **Apply(all displays)**
    button.![Time for action – building a random top rated recipe block with Views](img/4659_09_04.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**评论计数**的**配置排序标准**设置，选择**降序**作为**顺序**字段，然后点击**应用（所有显示）**按钮。![使用视图构建随机高评分菜谱块的时机](img/4659_09_04.jpg)
- en: Next, in the **SORT CRITERIA** section, click on the **Add** button, search
    for `Random`, and select the checkbox for **Random**. Then click on the **Apply(all
    displays)** button.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**排序标准**部分，点击**添加**按钮，搜索`Random`，并选择**随机**的复选框。然后点击**应用（所有显示）**按钮。
- en: In the next screen, click on the **Apply(all displays)** button. Then save the
    view and we can see a preview of this block as the following screenshot:![Time
    for action – building a random top rated recipe block with Views](img/4659_09_05.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，点击**应用（所有显示）**按钮。然后保存视图，我们可以看到此块的预览如下截图所示：![使用视图构建随机高评分菜谱块的时机](img/4659_09_05.jpg)
- en: Now your Views configuration should look similar to the following screenshot:![Time
    for action – building a random top rated recipe block with Views](img/4659_09_06.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的视图配置应该类似于以下截图所示：![使用视图构建随机高评分菜谱块的时机](img/4659_09_06.jpg)
- en: Now we need to configure this new Views-based block to show up on the front
    page. Click on **Structure** in the **Admin** toolbar and click on the **Block
    Layout** link.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要配置这个基于视图的新块，使其显示在首页上。点击**管理**工具栏中的**结构**，然后点击**块布局**链接。
- en: Scroll down towards **Sidebar first region** and click on the **Place block**
    link. In the popup, search for `Random top` and click on the **Place block** button
    for the **Random Top Rated Recipe** block.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到**侧边栏第一个区域**，点击**放置块**链接。在弹出窗口中，搜索`Random top`，然后点击**放置块**按钮，为**随机高评分菜谱**块放置。
- en: In the next screen, check the **Override title** checkbox, enter `Top Recipe`
    as **Title**, and click on the **Save block** button.![Time for action – building
    a random top rated recipe block with Views](img/4659_09_07.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，勾选**覆盖标题**复选框，输入`Top Recipe`作为**标题**，然后点击**保存块**按钮。![使用视图构建随机高评分菜谱块的时机](img/4659_09_07.jpg)
- en: '*What just happened?*'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We used Views and leveraged some advanced configuration options to display the
    image and title of the top most recent recipes and also learned how easy it can
    be to make our d8dev site more interesting by adding a dynamic Views-based block.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了视图并利用了一些高级配置选项来显示最新食谱的图片和标题，并学习了如何通过添加基于视图的动态块使我们的d8dev网站更加有趣。
- en: Taxonomy-based View with tabs
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于分类的视图带标签
- en: In this section, we are going to add another Views-based block to our front
    page. However, this will be a Taxonomy-based View instead of the Content-based
    Views that we have created so far. Taxonomy refers to the organization of information.
    As we learned in the previous chapter, taxonomy is a field-able entity. The Taxonomy
    module is a core module and it allows you to create vocabularies of terms to associate
    to other entity types so that they can be organized. So before that, we need to
    create a view with Taxonomy vocabulary with terms and associate those terms to
    our recipe content. We are going to add a vocabulary for organizing recipes by
    type of cuisine.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向我们的首页添加另一个基于视图的块。然而，这将是一个基于分类的视图，而不是我们迄今为止创建的内容视图。分类是指信息的组织。正如我们在上一章中学到的，分类是一个可字段的实体。分类模块是一个核心模块，它允许您创建术语词汇，以关联到其他实体类型，以便它们可以组织。因此，在此之前，我们需要创建一个包含分类词汇和术语的视图，并将这些术语关联到我们的食谱内容。我们将添加一个用于按菜系类型组织食谱的词汇。
- en: Time for action – creating a cuisine vocabulary to organize recipes
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 创建用于组织食谱的菜系词汇
- en: 'Before we can create a Taxonomy-based view, we need to create a Drupal Taxonomy
    vocabulary:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够创建基于分类的视图之前，我们需要创建一个Drupal分类词汇：
- en: Open our d8dev site in your browser, click on the **Structure** link in the
    **Admin** toolbar, and click on the **Taxonomy** link.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开我们的d8dev网站，点击**管理工具栏**中的**结构**链接，然后点击**分类**链接。
- en: On the **Taxonomy configuration** page, click on the **Add vocabulary** link.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**分类配置**页面，点击**添加词汇**链接。
- en: Enter `Type of Cuisine` as the **Name** input and click on the **Save** button.
    Now we will add some terms for our new vocabulary.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`菜系类型`作为**名称**输入并点击**保存**按钮。现在我们将为我们新的词汇添加一些术语。
- en: Click on the **Add term** link for our new **Type of Cuisine** vocabulary (make
    sure you are in the `admin/structure/taxonomy/manage/type_of_cuisine/overview
    page`):![Time for action – creating a cuisine vocabulary to organize recipes](img/4659_09_08.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们新的**菜系类型**词汇的**添加术语**链接（确保您在`admin/structure/taxonomy/manage/type_of_cuisine/overview`页面）：![操作时间
    – 创建用于组织食谱的菜系词汇](img/4659_09_08.jpg)
- en: Enter `American` as **Name** of our first term and click on the **Save** button.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`美国`作为我们第一个术语的**名称**并点击**保存**按钮。
- en: Repeat the process and add the terms `Asian` and `Thai`. Now we are going to
    add a taxonomy field to our Recipe content type.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程并添加术语`亚洲`和`泰国`。现在我们将为我们的食谱内容类型添加一个分类字段。
- en: Click on the **Structure** link in the **Admin** toolbar, click on the link
    for **Content types**, and click on the **Manage fields** link for our Recipe
    content type.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**管理工具栏**中的**结构**链接，点击**内容类型**链接，然后点击我们食谱内容类型的**管理字段**链接。
- en: Click on the **Add field** link. In the next screen, select **Taxonomy term**
    as **Add a new field** and enter `recipeCuisine` as **Label**. Click on the **Save
    and continue** button.![Time for action – creating a cuisine vocabulary to organize
    recipes](img/4659_09_09.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加字段**链接。在下一屏幕中，选择**分类术语**作为**添加新字段**，并将`recipeCuisine`作为**标签**。点击**保存并继续**按钮。![操作时间
    – 创建用于组织食谱的菜系词汇](img/4659_09_09.jpg)
- en: In the next screen, select **Unlimited** as **Allowed number of values** and
    click on the **Save field settings** button. In the next screen, check **Type
    of Cuisine** under **REFERENCE TYPE** | **Vocabularies** and click on the **Save
    settings** button.![Time for action – creating a cuisine vocabulary to organize
    recipes](img/4659_09_10.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕中，选择**无限制**作为**允许的值数**，并点击**保存字段设置**按钮。在下一屏幕中，检查**参考类型**下的**词汇**中的**菜系类型**，并点击**保存设置**按钮。![操作时间
    – 创建用于组织食谱的菜系词汇](img/4659_09_10.jpg)
- en: Click on the **Content** link in the **Admin** bar, then click on the edit link
    for one of the recipes, scroll down to our new **recipeCuisine** field, select
    American, and click on the **Save** button. Repeat the process for selecting Asian
    for the Cashew Chicken with Edamame, and Thai and Asian for the other recipes.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **管理** 栏中的 **内容** 链接，然后点击其中一个菜谱的编辑链接，向下滚动到我们新的 **recipeCuisine** 字段，选择美国，然后点击
    **保存** 按钮。为腰果青豆鸡和泰式及亚洲菜谱重复此过程。
- en: '*What just happened?*'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We got a quick introduction to Drupal Taxonomies and created a vocabulary to
    organize the d8dev recipes by the types of cuisine.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快速了解了 Drupal 分类法，并创建了一个词汇表来组织 d8dev 菜谱按菜系类型。
- en: Now that we have added a new vocabulary for associating Recipe content to the
    types of cuisine, we are ready to use this in a new Views-based block. We are
    going to create a Views-based block that displays our d8dev site's newest recipe
    entries by cuisine type. In addition to that, we are going to sort the list of
    recipes by the cuisine type with the least number of associated recipes. This
    will help us to promote cuisine types with fewer recipes. Finally, we want a tab-based
    user interface with a tab for each cuisine type, and the contents of that tab
    to be the five most recent recipes for that cuisine type. Let's go through step
    by step.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了一个新的词汇表来关联菜谱内容到菜系类型，我们准备在一个基于视图的块中使用它。我们将创建一个基于视图的块，显示 d8dev 网站按菜系类型的新菜谱条目。除此之外，我们还将按关联菜谱数量最少的菜系类型对菜谱列表进行排序。这将帮助我们推广菜谱数量较少的菜系类型。最后，我们希望有一个基于标签的用户界面，每个菜系类型都有一个标签，该标签的内容是该菜系类型最新的五个菜谱。让我们一步一步来。
- en: Time for action – creating a Recipes by cuisine type Views block
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 创建按菜系类型查看的菜谱块
- en: We have created a new vocabulary and associated it to our Recipe content type.
    Now we will learn how to use a custom vocabulary with a view.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的词汇表并将其关联到我们的菜谱内容类型。现在我们将学习如何使用自定义词汇与视图一起使用。
- en: Click on the **Structure** link in the **Admin** toolbar, click on the **Views**
    link, and click on the **Add new view** button.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **管理** 工具栏中的 **结构** 链接，点击 **视图** 链接，然后点击 **添加新视图** 按钮。
- en: On the next page, enter `Recipes by Cuisine` as the **View** name, select **Taxonomy
    terms** for the **Show** select list, and select **Type of Cuisine** for the of
    **Type** select list.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页上，将 **视图** 名称输入为 `按菜系菜谱`，从 **显示** 选择列表中选择 **分类术语**，从 **类型** 选择列表中选择 **菜系类型**。
- en: Check the **Create a block** checkbox under the **Block settings** section.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **块设置** 部分下勾选 **创建一个块** 复选框。
- en: Leave the remaining default settings as they are and click on the **Save and
    edit** button.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留剩余的默认设置，然后点击 **保存并编辑** 按钮。
- en: Views automatically adds the Taxonomy term **Name** field, but we also want
    to display the most recent recipes associated to each of those cuisine terms.
    However, if you click on the **Add** button for **FIELDS**, you will note that
    there is no **Content** field available. We will use the Views **RELATIONSHIPS**
    configuration to add a relationship between the Recipe content and the taxonomy
    terms we are showing.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图自动添加了分类术语 **名称** 字段，但我们还希望显示与每个菜系术语关联的最新菜谱。然而，如果您点击 **字段** 的 **添加** 按钮，您会注意到没有可用的
    **内容** 字段。我们将使用视图 **关系** 配置来在菜谱内容和我们要显示的分类术语之间添加一个关系。
- en: Click on the **Add** button for **RELATIONSHIPS**, check the **Content using
    field_recipecuisine** relationship, and then click on the **Apply(all displays)**
    button.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮选择 **关系**，勾选 **使用 field_recipecuisine 字段的菜谱内容** 关系，然后点击 **应用(所有显示)**
    按钮。
- en: On the next screen, leave the remaining default settings as they are and click
    on the **Apply(all displays)** button.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，保留剩余的默认设置，然后点击 **应用(所有显示)** 按钮。
- en: Now click on the **FIELDS add** button; there are content fields available.
    Type `title` into the **Search** input, select it, and click on the **Apply(all
    displays)** button.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 **字段添加** 按钮；有可用的内容字段。在 **搜索** 输入框中输入 `title`，选择它，然后点击 **应用(所有显示)** 按钮。
- en: Note that there is a **Relationship** select list for the field configuration.
    All the content fields on a taxonomy terms-based view require a relationship.
    So this will default to the first relationship listed.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，字段配置中有一个 **关系** 选择列表。基于分类术语视图的所有内容字段都需要一个关系。因此，这将是默认列出的第一个关系。
- en: '![Time for action – creating a Recipes by cuisine type Views block](img/4659_09_11.jpg)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 创建按菜系类型查看的菜谱块](img/4659_09_11.jpg)'
- en: Leave the **Create a label** checkbox unchecked, as we only want to display
    the title itself. We will leave the **Link to this Content…** checkbox checked,
    so that the users have the ability to navigate to the full recipe. Click on the
    **Apply (all displays)** button.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持**创建标签**复选框未勾选，因为我们只想显示标题本身。我们将保持**链接到此内容…**复选框勾选，以便用户能够导航到完整的食谱。点击**应用（所有显示）**按钮。
- en: Now if you scroll down to the bottom of the Views configuration page, you will
    see a preview of this Views output and you will see that we are displaying cuisine
    type term names and recipe titles, but we want to group the recipe titles by term
    names.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在如果您滚动到视图配置页面的底部，您将看到此视图输出的预览，您会看到我们正在显示菜系类型术语名称和食谱标题，但我们希望按术语名称分组食谱标题。
- en: 'Next, under the **FORMAT** section, click on the **Settings** link for Format
    and then select **Taxonomy term: Name** for the **Grouping field Nr.1** field
    and click on the **Apply** button![Time for action – creating a Recipes by cuisine
    type Views block](img/4659_09_12.jpg)'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来，在**格式**部分下，点击格式**设置**链接，然后为**分组字段编号1**选择**Taxonomy term: Name**，并点击**应用**按钮![执行时间
    – 创建按菜系类型显示的食谱视图块](img/4659_09_12.jpg)'
- en: You will see a preview of this View's output and you will see that we are displaying
    cuisine type term names and recipe titles, as we grouped the recipe titles by
    term names and term names were displaying twice. So we will hide them in the **FIELDS**
    settings.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到此视图输出的预览，您会看到我们正在显示菜系类型术语名称和食谱标题，因为我们按术语名称分组了食谱标题，并且术语名称显示了两遍。因此，我们将在**字段**设置中隐藏它们。
- en: 'Now click on the **Taxonomy term: Name** link and check the **Exclude from
    display** checkbox, as we only want to display the content titles. Then click
    on the **Apply (all displays)** button.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**分类术语：名称**链接，并勾选**排除显示**复选框，因为我们只想显示内容标题。然后点击**应用（所有显示）**按钮。
- en: Now we will add a sort criterion to display the grouped terms with the most
    recent recipes first. Click on the **Add** button for **SORT CRITERIA**, type
    `Authored on` in the **Search** field, select the **Authored on** field, and then
    click on the **Apply (all displays)** button.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将添加一个排序标准，以便首先显示按最新食谱分组的术语。点击**添加**按钮为**排序标准**，在**搜索**字段中输入`Authored on`，选择**Authored
    on**字段，然后点击**应用（所有显示）**按钮。
- en: 'On the next screen, select **Sort descending** for the **Order** field and
    click on the **Apply (all displays)** button. The preview for this View should
    now look similar to the following screenshot. Note: the following content is Devel
    module generated content.![Time for action – creating a Recipes by cuisine type
    Views block](img/4659_09_13.jpg)'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，选择**降序**为**顺序**字段，并点击**应用（所有显示）**按钮。此视图的预览现在应该类似于以下截图。注意：以下内容是Devel模块生成的内容。![执行时间
    – 创建按菜系类型显示的食谱视图块](img/4659_09_13.jpg)
- en: Next, click on the **Save** button for this View.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击此视图的**保存**按钮。
- en: '*What just happened?*'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么事？*'
- en: We created a Views-based block of recipes displayed by the cuisine type name.
    Although everything appears fine on the surface, there is a problem with the groupings
    and the limits for our new view. We wanted to display three different cuisines
    and five recipes per cuisine type, but the view we created is only limiting the
    total number of rows being returned. If we were to add one more recipe, then that
    recipe would be displayed. However, the sixth-oldest recipe would drop off, and
    if the newly added recipe happened to be of type Thai or Asian, then the American
    grouping would disappear. So, we would only be left with two groups of cuisine
    types. It turns out that this is a rather complex problem to solve with SQL, but
    there is a contrib module that will allow us to get the exact results that we
    want.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个基于视图的食谱块，通过菜系名称显示食谱。尽管表面上看起来一切正常，但我们的新视图在分组和限制方面存在问题。我们希望显示三种不同的菜系和每种菜系类型的五道食谱，但我们创建的视图只限制了返回的总行数。如果我们再添加一道食谱，那么这道食谱就会显示出来。然而，第六古老的食谱将会被移除，如果新添加的食谱恰好是泰国或亚洲菜系，那么美国分组将会消失。因此，我们只剩下两种菜系类型的分组。实际上，这是一个相当复杂的SQL问题，但有一个贡献模块可以让我们得到我们想要的确切结果。
- en: The Views Field View module ([http://drupal.org/project/views_field_view](http://drupal.org/project/views_field_view))
    enables a Global Views field that allows you to embed another View as a field
    of a parent view, sort of like a set of Russian dolls. For actual production use,
    however, do note that there are some pretty serious performance implications for
    using this approach, as there will be a total of four SQL queries instead of one.
    So you definitely want to make sure you understand Views caching and Drupal caching
    in general before you use an approach like this on a production site.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 视图字段视图模块([http://drupal.org/project/views_field_view](http://drupal.org/project/views_field_view))启用了一个全局视图字段，允许你将另一个视图嵌入为父视图的字段，有点像一套俄罗斯套娃。然而，对于实际生产使用，请注意，使用这种方法会有一些相当严重的性能影响，因为将会有四个SQL查询而不是一个。所以你绝对需要在使用类似这种方法的生产站点之前确保你理解视图缓存和Drupal缓存。
- en: Time for action – installing and using the Views Field View module for our Recipe
    by Cuisine Type View
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 为我们的“按菜系类型查看食谱”安装和使用视图字段视图模块
- en: By installing and using the Views Field View module, we are going to learn how
    there are a number of Views related contrib modules that extend the features and
    capabilities of the Views module.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过安装和使用视图字段视图模块，我们将学习到有许多与视图相关的扩展模块，它们扩展了视图模块的功能和能力。
- en: First, we need to install the View Field View module. Open the Terminal (Mac
    OS X) or Command Prompt (Windows) application and go to the root directory of
    our d8dev site.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装视图字段视图模块。打开终端（Mac OS X）或命令提示符（Windows）应用程序，并转到我们的d8dev站点根目录。
- en: 'Use Drush to download and enable the Views Field View module:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Drush下载并启用视图字段视图模块：
- en: '[PRE0]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, before we modify our Recipes by Cuisine view, you need to understand how
    the Views Field View functionality works. We will remove the recipe title field
    and add a **Global: View** field. The **Global: View** field allows us to specify
    another view to use as the contents of the field, instead of a field on our Recipe
    content type. It allows us to pass any other field available for our view as an
    argument to pass as a contextual filter to the other view being used as the contents
    of the field. I know it sounds pretty complicated, and that is why we are going
    to walk through it together, nice and slow. To start with, we need to create a
    view to use as the Views Field View, where it will list out the recipes ordered
    by post date in descending order, so we will use the Views Field View field to
    display the contents of our Recipe List view inside the rows of our Recipes by
    Cuisine view.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们修改我们的“按菜系查看食谱”视图之前，你需要了解视图字段视图功能是如何工作的。我们将移除食谱标题字段并添加一个**全局：视图**字段。**全局：视图**字段允许我们指定另一个视图作为字段的内联内容，而不是我们的食谱内容类型中的字段。它允许我们将任何其他可用的视图字段作为参数传递给其他视图，作为上下文过滤器传递给用作字段内容的视图。我知道这听起来相当复杂，这就是为什么我们将一起慢慢走过这个过程。首先，我们需要创建一个视图，用作视图字段视图，其中将按发布日期降序列出食谱，因此我们将使用视图字段视图字段来显示我们的食谱列表视图中的内容。
- en: Click on the **Structure** link in the **Admin** toolbar, then click on the
    **Views** link, and click on the **Edit** button for our random top rated recipe
    View.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**管理**工具栏中点击**结构**链接，然后点击**视图**链接，并点击我们随机最高评分食谱视图的**编辑**按钮。
- en: At the top of the next page, click on the **Add** button and then click on the
    **Block** link.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页的顶部，点击**添加**按钮，然后点击**块**链接。
- en: Click on the **Add Field** link and search for node id in the input search box.
    Check the **Exclude from display** checkbox and click on the **Apply (this displays)**
    button.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加字段**链接，在输入搜索框中搜索node id。勾选**排除显示**复选框，然后点击**应用（此显示）**按钮。
- en: Again click on the **Add Field** link and search for view in the input search
    box. On the next screen, in the **VIEW SETTINGS** section, select **Recipe likes
    count** as **View**, **Block** as **Display**, and `{{ fields.nid }}` as **Contextual
    filters**. Click on the **Apply (this displays)** button.![Time for action – installing
    and using the Views Field View module for our Recipe by Cuisine Type View](img/4659_09_14.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**添加字段**链接，在输入搜索框中搜索“视图”。在下一屏幕上，在**视图设置**部分，选择**食谱点赞数**作为**视图**，**块**作为**显示**，以及`{{
    fields.nid }}`作为**上下文过滤器**。点击**应用（此显示）**按钮。![操作时间 – 为我们的“按菜系类型查看食谱”安装和使用视图字段视图模块](img/4659_09_14.jpg)
- en: 'Now, in the **ADVANCED** section, click on the **Add** link for **Contextual
    filters**. In the popup, search for the node ID keywords. Now check the **Node
    ID** checkbox and click on the **Apply (this displays)** button. In the next screen,
    leave the settings as default and click on the **Apply and continue** button.
    Note: make sure you selected **This block (override)** at the top.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 **ADVANCED**（高级）部分，点击 **Contextual filters**（上下文过滤器）的 **Add**（添加）链接。在弹出的窗口中，搜索节点
    ID 关键词。现在勾选 **Node ID**（节点 ID）复选框，然后点击 **Apply (this displays)**（应用（显示））按钮。在下一屏幕上，保持设置默认，然后点击
    **Apply and continue**（应用并继续）按钮。注意：确保在顶部选择了 **This block (override)**（此块（覆盖））。
- en: On the next screen, under **WHEN THE FILTER VALUE IS NOT AVAILABLE** section,
    select the **Provide default value** radio button. Select **Type** as **Content
    ID from URL** and click on the **Apply(this displays)** button at the bottom.![Time
    for action – installing and using the Views Field View module for our Recipe by
    Cuisine Type View](img/4659_09_15.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，在 **WHEN THE FILTER VALUE IS NOT AVAILABLE**（当过滤器值不可用）部分，选择 **Provide
    default value**（提供默认值）单选按钮。选择 **Type** 为 **Content ID from URL**，然后点击底部的 **Apply(this
    displays)**（应用（显示））按钮。![执行时间 – 为我们的“按菜系类型查看食谱”安装和使用 Views Field View 模块](img/4659_09_15.jpg)
- en: Then save the view and we can see a preview of this block as per the following
    screenshot:![Time for action – installing and using the Views Field View module
    for our Recipe by Cuisine Type View](img/4659_09_16.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后保存视图，我们可以看到如下截图所示的预览：![执行时间 – 为我们的“按菜系类型查看食谱”安装和使用 Views Field View 模块](img/4659_09_16.jpg)
- en: Next, click on the **Structure** link in the **Admin** toolbar, then click on
    the **Views** link, and click on the Edit button for our Recipes by Cuisine View.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **Admin** 工具栏中的 **Structure**（结构）链接，然后点击 **Views**（视图）链接，并点击我们食谱按菜系视图的编辑按钮。
- en: At the top of the next page, click on the **Add** button and then click on the
    **Block** link.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页的顶部，点击 **Add**（添加）按钮，然后点击 **Block**（块）链接。
- en: Click on the **Add Field** link and search for node ID in the input search box.
    Check the **Exclude from display** checkbox and click on the **Apply (this displays)**
    button.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Add Field**（添加字段）链接，并在输入搜索框中搜索节点 ID。勾选 **Exclude from display**（从显示中排除）复选框，然后点击
    **Apply (this displays)**（应用（显示））按钮。
- en: Again click on the **Add Field** link and search for view in the input search
    box. On the next screen, in the **VIEW SETTINGS** section, select **Random Top
    Rated Recipe** as **View**, **Block 2** as **Display**, and `{{ raw_fields.nid
    }}` as **Contextual filters**. Click on the **Apply (this displays)** button.![Time
    for action – installing and using the Views Field View module for our Recipe by
    Cuisine Type View](img/4659_09_17.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击 **Add Field**（添加字段）链接，并在输入搜索框中搜索视图。在下一屏幕上，在 **VIEW SETTINGS**（视图设置）部分，选择
    **Random Top Rated Recipe**（随机最高评分食谱）作为 **View**（视图），**Block 2**（块 2）作为 **Display**（显示），以及
    `{{ raw_fields.nid }}`（原始字段.nid）作为 **Contextual filters**（上下文过滤器）。点击 **Apply (this
    displays)**（应用（显示））按钮。![执行时间 – 为我们的“按菜系类型查看食谱”安装和使用 Views Field View 模块](img/4659_09_17.jpg)
- en: Then save the view and we can see preview of this block as per the following
    screenshot:![Time for action – installing and using the Views Field View module
    for our Recipe by Cuisine Type View](img/4659_09_18.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后保存视图，我们可以看到如下截图所示的预览：![执行时间 – 为我们的“按菜系类型查看食谱”安装和使用 Views Field View 模块](img/4659_09_18.jpg)
- en: Now we need to configure this new Views-based block to show up on the front
    page. Click on **Structure** in the **Admin** toolbar and click on the **Block
    Layout** link.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要配置这个基于 Views 的新块，使其显示在首页上。点击 **Admin** 工具栏中的 **Structure**（结构），然后点击 **Block
    Layout**（块布局）链接。
- en: Scroll down towards **Sidebar first Region** and click on the **Place block**
    link. In the popup, search for `Recipes by` and click on the **Place block** button
    for the Recipes by Cuisine block.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到 **Sidebar first Region**（侧边栏第一个区域），然后点击 **Place block**（放置块）链接。在弹出的窗口中，搜索
    `Recipes by`，然后点击 Recipes by Cuisine 块的 **Place block**（放置块）按钮。
- en: '*What just happened?*'
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: With the help of the Views Field View module, we created a view that displays
    our recipe content.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Views Field View 模块的协助下，我们创建了一个显示我们食谱内容的视图。
- en: Tabbed Views display
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签视图显示
- en: In order to make the Recipes by Cuisine and to make the block more visually
    appealing, and appear more organized in the viewable area of our d8dev front page,
    we are going to display each cuisine type as a tab, and have recipes for the active
    tab. We are going to use a JavaScript-based approach for displaying our groups
    of recipes by cuisine in a tabbed interface. Take a look at the jQuery UI tabs
    page ([http://jqueryui.com/tabs/](http://jqueryui.com/tabs/)) and you will see
    an example of how we can display Recipe by Cuisine in a tab.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使“按菜系查看食谱”更加视觉上吸引人，并在我们 d8dev 前页的可视区域内看起来更有组织，我们将显示每个菜系类型作为一个选项卡，并为活动选项卡提供食谱。我们将使用基于
    JavaScript 的方法在我们的选项卡界面中显示按菜系分组的食谱。请查看 jQuery UI 选项卡页面（[http://jqueryui.com/tabs/](http://jqueryui.com/tabs/)），你将看到我们如何显示“按菜系查看食谱”的示例。
- en: '![Tabbed Views display](img/4659_09_19.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![选项卡视图显示](img/4659_09_19.jpg)'
- en: The reason I am pointing out jQuery based UI tabs is because Drupal 8 includes
    the JavaScript library. So, it makes a lot of sense to use a JavaScript widget
    for the tab that is already available to us as part of the core Drupal 8 install.
    However, the markup that is currently being generated for our Recipe by Cuisine
    View will be fairly difficult to integrate with the jQuery UI tabs, because jQuery
    UI tabs are intended to handle the tabs and the tab content in separate HTML containers.
    Take a look at the example markup from the jQuery UI tabs page in the previous
    screenshot to see what I mean.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以指出基于 jQuery 的 UI 选项卡，是因为 Drupal 8 包含了 JavaScript 库。因此，使用一个作为 Drupal 8 核心安装的一部分已经可用的
    JavaScript 小部件来处理选项卡是非常有意义的。然而，目前为我们的“按菜系查看食谱”生成的标记将很难与 jQuery UI 选项卡集成，因为 jQuery
    UI 选项卡旨在在单独的 HTML 容器中处理选项卡及其内容。请查看上一张截图中的 jQuery UI 选项卡页面上的示例标记，以了解我的意思。
- en: '[PRE1]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The markup that Views is generating for our Recipes by Cuisine is more semantic.
    It keeps the group titles with the associated content (Views actually generates
    a lot more markup than this, so take a look at the source output for our Recipes
    by Cuisine View in your browser). Basically, a simplified version of what Views
    generates for the default format of HTML list is closer to the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Views 为我们的“按菜系查看食谱”生成的标记更加语义化。它保留了与相关内容关联的组标题（实际上，Views 生成的标记比这要多得多，所以请查看浏览器中“按菜系查看食谱”视图的源输出）。基本上，一个简化版本的
    Views 为默认 HTML 列表格式生成的标记更接近以下内容：
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Therefore, if we want to use jQuery UI tabs then we have to modify the markup
    that Views is generating for our Recipes by Cuisine View. A Views style plugin
    would allow us to generate exactly the type of markup that is typically used with
    jQuery UI tabs. However, since we are going to write a custom plugin for Views
    anyways, why write one for creating tabs that isn't very semantic and is limited
    in regards to progressive enhancement?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想使用 jQuery UI 选项卡，那么我们必须修改 Views 为我们的“按菜系查看食谱”视图生成的标记。一个 Views 风格插件将允许我们生成与
    jQuery UI 选项卡通常使用的标记类型。然而，由于我们无论如何都要为 Views 编写一个自定义插件，为什么还要编写一个创建非语义且在渐进增强方面有限的选项卡插件呢？
- en: Time for action – developing a Views style plugin for semantic tabs
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 开发一个用于语义选项卡的 Views 风格插件
- en: We are going to create a new module for our introduction to plugins for Views.
    And we will contribute it to Drupal in the next topic.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的模块来介绍 Views 插件。我们将在下一主题中将它贡献给 Drupal。
- en: Open PhpStorm and navigate to the `/modules/custom` folder in our d8dev project.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 PhpStorm 并导航到我们 d8dev 项目的 `/modules/custom` 文件夹。
- en: Create a new folder named `views_semantic_tabs`—the name of our new module.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `views_semantic_tabs` 的新文件夹——这是我们新模块的名称。
- en: 'Create a new file named `views_semantic_tabs.info.yml` and enter the following
    information:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `views_semantic_tabs.info.yml` 的新文件，并输入以下信息：
- en: '[PRE3]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Drupal 7, we use the `hook_views_plugins()` hook function to register new
    plugins. Drupal 8, on the other hand, depends on annotations and auto-loading
    to discover any plugins such as blocks and views styles. The auto-loading concept
    allows us to put a plugin file in a predefined directory, and Views/Blocks find
    it as needed. The metadata of any plugin specified inside the plugin's file using
    comment block, is called as annotations.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Drupal 7 中，我们使用 `hook_views_plugins()` 钩子函数来注册新插件。另一方面，Drupal 8 依赖于注解和自动加载来发现任何插件，如块和视图样式。自动加载的概念允许我们将插件文件放在预定义的目录中，Views/Blocks
    在需要时找到它。在插件文件内部使用注释块指定的任何插件元数据称为注解。
- en: To find our style plugin by views, we have to place it in the `src/Plugin/views/style`
    folder which is inside our custom module `modules/views_semantic_tabs` directory.
    So here we wish to build semantic tabs style plugin that displays jQuery UI tabs
    based style.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过视图找到我们的样式插件，我们必须将其放置在我们自定义模块`modules/views_semantic_tabs`目录内的`src/Plugin/views/style`文件夹中。因此，我们希望构建一个语义标签样式插件，该插件显示基于jQuery
    UI标签的样式。
- en: 'Create a new file `ViewsSemanticTabs.php` inside the `/views_semantic_tabs/src/Plugin/views/style`
    directory. The skeleton of the semantic tabs style plugin looks like the following:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/views_semantic_tabs/src/Plugin/views/style`目录内创建一个新的文件`ViewsSemanticTabs.php`。语义标签样式插件的骨架如下所示：
- en: '[PRE4]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Our class `ViewsSemanticTabs` needs to inherit from the `StylePluginBase` class,
    and therefore we are using a keyword. Also, we are using `FormStateInterface`
    to user forms inside our class. This file is in the correct location and we have
    an annotation above the class definition. This annotation was giving the ID of
    the style, theme, and display types. So views will find this plugin and it will
    be available for selection in the views format style settings. The protected `$usesRowPlugin`
    property is necessary to this plugin which lets us select whether we would like
    to display fields or rendered content in the view display. The protected `$usesRowClass`
    property also required for our case which does the style plugin support custom
    CSS class for the rows. The protected `defineOptions()` method is used to define
    default options which will show in the settings form. And the protected `buildOptionsForm()`
    method is used to define any custom form values which will show in the settings
    form. `parent::buildOptionsForm($form, $form_state);` allows us to access the
    output of the class we are extending and manipulate that output. We are making
    the `$form['group']` field required since the views HTML render output requires
    a grouping field name.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的`ViewsSemanticTabs`类需要继承自`StylePluginBase`类，因此我们使用了一个关键字。此外，我们使用`FormStateInterface`在我们的类中使用表单。此文件位于正确的位置，并在类定义上方有一个注解。这个注解提供了样式、主题和显示类型的ID。因此，视图将找到这个插件，它将在视图格式样式设置中可用。受保护的`$usesRowPlugin`属性对这个插件是必要的，它让我们选择是否希望在视图显示中显示字段或渲染的内容。受保护的`$usesRowClass`属性也是我们案例中必需的，它决定了样式插件是否支持为行提供自定义CSS类。受保护的`defineOptions()`方法用于定义默认选项，这些选项将在设置表单中显示。受保护的`buildOptionsForm()`方法用于定义任何将在设置表单中显示的任何自定义表单值。`parent::buildOptionsForm($form,
    $form_state);`允许我们访问我们扩展的类的输出并操作该输出。我们使`$form['group']`字段成为必填项，因为视图HTML渲染输出需要分组字段名称。
- en: The output of views will live in the template file and the template file will
    need to be placed inside the `templates` directory with `views-semantic-tabs-format.html.twig`
    as the filename inside our module. We don't need to implement the `hook_theme()`
    hook function because it will be automatically registered based on the specified
    theme name in the annotation `views_semantic_tabs_format`. The template filename
    is derived from the theme name by replacing the underscores with hyphens and followed
    by the `html.twig` extension.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图的输出将保存在模板文件中，并且模板文件需要放置在我们模块的`templates`目录内，文件名为`views-semantic-tabs-format.html.twig`。我们不需要实现`hook_theme()`钩子函数，因为它将根据在`views_semantic_tabs_format`注解中指定的主题名称自动注册。模板文件名是通过将主题名称中的下划线替换为连字符，并添加`html.twig`扩展名来生成的。
- en: '[PRE5]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, we need to understand that this template will be used for each tab. We
    had to wrap the group field values as a separate set which are part of `<li>`
    tags in `<ul>`. We are wrapping rows data which is the content for the tab and
    wrapped with the `div` tag with unique `tabs- id` attributes.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们需要理解这个模板将用于每个标签页。我们不得不将分组字段值作为一组单独的集合，这些集合是`<ul>`中的`<li>`标签的一部分。我们正在包装行数据，这是标签页的内容，并用带有唯一`tabs-id`属性的`div`标签包装。
- en: 'The variables in the template is provided by views. Preparing variables for
    a `twig` file can be done with the `template_preprocess_views_semantic_tabs_format()`
    function in the `.module` file. This function name is defined based on the specified
    name in the annotation `views_semantic_tabs_format`. Create a new file `views_semantic_tabs.module`
    inside the `/modules/views_semantic_tabs` directory. The skeleton of the semantic
    tabs style plugin looks like the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板中的变量由视图提供。为`twig`文件准备变量可以通过`.module`文件中的`template_preprocess_views_semantic_tabs_format()`函数来完成。这个函数名称是基于注释`views_semantic_tabs_format`中指定的名称定义的。在`/modules/views_semantic_tabs`目录内创建一个名为`views_semantic_tabs.module`的新文件。语义标签样式插件的骨架如下所示：
- en: '[PRE6]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There are two functions, `template_preprocess_views_semantic_tabs_format()`
    and `hook_help`. At the very top of our `template_preprocess_views_semantic_tabs_format()`
    function, we are getting the required handler, rows, fields, and style properties
    from the `$variables` variable. Then we are attaching `jquery.ui.tabs`, jQuery
    core jQuery libraries to the `$variable`, because it requires both jQuery libraries.
    And also we attaching the custom `views-semantic-tabs` library which has custom
    JS file where we will define jQuery code to work tabs. In the next lines, we are
    building rows data which is a part of tab content. And we declared the help function
    to define simple documentation about this module. For more information about the
    `hook_help()` function, go to [https://api.drupal.org/api/drupal/core!modules!help!help.api.php/function/hook_help/8](https://api.drupal.org/api/drupal/core!modules!help!help.api.php/function/hook_help/8).
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有两个函数，`template_preprocess_views_semantic_tabs_format()`和`hook_help`。在我们的`template_preprocess_views_semantic_tabs_format()`函数的顶部，我们正在从`$variables`变量中获取所需的处理器、行、字段和样式属性。然后我们将`jquery.ui.tabs`和jQuery核心jQuery库附加到`$variable`上，因为它需要这两个jQuery库。我们还附加了自定义的`views-semantic-tabs`库，它有一个自定义JS文件，我们将定义jQuery代码来工作标签。在接下来的几行中，我们正在构建行数据，它是标签内容的一部分。我们还声明了帮助函数来定义关于此模块的简单文档。有关`hook_help()`函数的更多信息，请访问[https://api.drupal.org/api/drupal/core!modules!help!help.api.php/function/hook_help/8](https://api.drupal.org/api/drupal/core!modules!help!help.api.php/function/hook_help/8)。
- en: 'Next, right-click on the new theme folder, create a new file named `views_semantic_tabs.libraries.yml`,
    and add the following code to that file:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在新的主题文件夹上右键点击，创建一个名为`views_semantic_tabs.libraries.yml`的新文件，并将以下代码添加到该文件中：
- en: '[PRE7]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is the library file which we attached in the `template_preprocess_views_semantic_tabs_format()`
    function in the last step. This defines the `views-semantic-tabs.js` file which
    has tabs jQuery code to work jQuery tabs as per the rendered HTML structure defined
    in the twig file.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们在上一步的`template_preprocess_views_semantic_tabs_format()`函数中附加的库文件。它定义了`views-semantic-tabs.js`文件，该文件包含使jQuery标签按twig文件中定义的渲染HTML结构工作的jQuery代码。
- en: 'Next, right-click on the module folder and create a new folder named `js`.
    Again, right click on the `js` folder and create a file named `views-semantic-tabs.js`.
    Add the following code to that file:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在模块文件夹上右键点击，创建一个名为`js`的新文件夹。再次右键点击`js`文件夹，创建一个名为`views-semantic-tabs.js`的文件。将以下代码添加到该文件中：
- en: '[PRE8]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note how the entire block of JavaScript code is wrapped with `(function ($)
    { ... })(jQuery);`. This is a new JavaScript namespacing feature of Drupal 7 and
    Drupal 8, and allows other JavaScript libraries to be used with Drupal with less
    likelihood of conflicts. `$( ".views-semantic-tabs" ).tabs();` is the code which
    makes our twig rendered HTML code work as tabs.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意整个JavaScript代码块是如何被`(function ($) { ... })(jQuery);`包裹的。这是Drupal 7和Drupal
    8的新JavaScript命名空间特性，它允许其他JavaScript库与Drupal一起使用，减少了冲突的可能性。`$( ".views-semantic-tabs"
    ).tabs();`是使我们的twig渲染的HTML代码作为标签工作的代码。
- en: Now that we have completed all the code, our `views_semantic_tabs` folder should
    look similar to the following screenshot:![Time for action – developing a Views
    style plugin for semantic tabs](img/4659_09_20.jpg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有代码，我们的`views_semantic_tabs`文件夹应该看起来类似于以下截图：![Time for action – developing
    a Views style plugin for semantic tabs](img/4659_09_20.jpg)
- en: Now we are ready to test our new Views style plugin by applying it to our Recipes
    by Cuisine view, but first we need to enable our new module. We could use Drush
    for this, but I would like to enable custom modules in the browser so that I can
    see my new module.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好通过将其应用于我们的“按菜系查看食谱”视图来测试我们新的视图样式插件，但首先我们需要启用我们的新模块。我们可以使用Drush来做这件事，但我希望能在浏览器中启用自定义模块，这样我就能看到我的新模块。
- en: Open our d8dev site in your browser, click on the **Extend** link in the **Admin**
    toolbar, and scroll down to the **Views** section of the modules or search for
    `views semantic` in the search input box.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开我们的d8dev网站，点击**管理**工具栏中的**扩展**链接，然后滚动到模块的**视图**部分或搜索输入框中搜索`views semantic`。
- en: You should see our new Views Semantic Tabs module listed along with the other
    Views modules that we had installed.![Time for action – developing a Views style
    plugin for semantic tabs](img/4659_09_21.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到我们的新视图语义标签模块与其他已安装的视图模块一起列出。![进行操作 - 开发用于语义标签的视图样式插件](img/4659_09_21.jpg)
- en: Check the checkbox to enable our new module and click on the **Install** button.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打勾以启用我们的新模块，然后点击**安装**按钮。
- en: Next, click on the **Home** link in the **Admin** toolbar, then click on the
    **Contextual links** button for our Recipes by Cuisine view, and click on the
    **Edit view** link.![Time for action – developing a Views style plugin for semantic
    tabs](img/4659_09_22.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**管理**工具栏中的**主页**链接，然后点击我们的食谱按菜系视图的**上下文链接**按钮，并点击**编辑视图**链接。![进行操作 -
    开发用于语义标签的视图样式插件](img/4659_09_22.jpg)
- en: 'Under **FORMAT**, click on the **Unformatted list** link. The view style settings
    form now includes our new Views style plugin: **Semantic tabs**.![Time for action
    – developing a Views style plugin for semantic tabs](img/4659_09_23.jpg)'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**格式**下，点击**未格式化列表**链接。现在，视图样式设置表单包括我们新的视图样式插件：**语义标签**。![进行操作 - 开发用于语义标签的视图样式插件](img/4659_09_23.jpg)
- en: Select our **Semantic tabs** style and click on the **Apply (this display)**
    button.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**语义标签**样式，然后点击**应用（此显示）**按钮。
- en: 'Next, on the **Style options** screen, select **Taxonomy term: Name** as **Grouping
    field** and click on the **Apply** button. Note that **Grouping field** is required
    as we specified in our plugin class.![Time for action – developing a Views style
    plugin for semantic tabs](img/4659_09_24.jpg)'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**样式选项**屏幕上，选择**分类术语：名称**作为**分组字段**，然后点击**应用**按钮。请注意，**分组字段**是必需的，因为我们已在我们的插件类中指定。![进行操作
    - 开发用于语义标签的视图样式插件](img/4659_09_24.jpg)
- en: Now, click on the **Save** button to save our changes to the view. You should
    now have a Recipe by Cuisine view block that looks similar to the following screenshot:![Time
    for action – developing a Views style plugin for semantic tabs](img/4659_09_25.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**保存**按钮以保存我们对视图的更改。您现在应该有一个类似于以下截图的食谱按菜系视图块：![进行操作 - 开发用于语义标签的视图样式插件](img/4659_09_25.jpg)
- en: '*What just happened?*'
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Although this example was fairly complex, the actual code is pretty straightforward
    once you get your head wrapped around some of the development concepts for Views
    plugins. We were able to create a custom Views style plugin that will enhance
    the display of content on our d8dev site.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个例子相当复杂，但一旦你掌握了视图插件的一些开发概念，实际的代码就相当简单了。我们能够创建一个定制的视图样式插件，这将增强我们d8dev网站上内容的显示。
- en: Time for another Recipe
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 又是时候准备另一道菜谱
- en: Here is a little bit of spicy Americana for you—Kurt's Classic Chili. Add it
    to the d8dev site and checkout the Recipes by Cuisine view from the previous section
    (the secret ingredient is the bay leaves).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一点点辣味美式风情——库尔特的经典辣椒。将它添加到d8dev网站上，并查看上一节中的食谱按菜系视图（秘密成分是香叶）。
- en: '![Time for another Recipe](img/4659_09_25_01.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![又是时候准备另一道菜谱](img/4659_09_25_01.jpg)'
- en: '**name**: Kurt''s Classic Chili'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**: 库尔特的经典辣椒'
- en: '**description**: There is nothing like a warm bowl of chili on a cold winter
    day.The homemade chili powder really gives this dish a distinct and delicious
    flavor.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**: 在寒冷的冬日里，没有什么比一碗热腾腾的辣椒更让人感到舒适了。自制的辣椒粉真的给这道菜增添了独特的美味风味。'
- en: '**recipeYield**: Eight servings'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**食谱份量**: 八份'
- en: '**prepTime**: 30 minutes'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备时间**: 30分钟'
- en: '**cookTime**: 60 minutes'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**烹饪时间**: 60分钟'
- en: '**ingredients**:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配料**:'
- en: One pound of ground beef
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一磅碎牛肉
- en: Two tablespoons of olive oil
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两汤匙橄榄油
- en: One large sweet onion, chopped
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大型的甜洋葱，切碎
- en: Six cloves garlic, crushed
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六瓣大蒜，压碎
- en: Eight ancho peppers, dried
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个安乔辣椒，干燥
- en: Eight guajillo peppers, dried
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个瓜希洛辣椒，干燥
- en: Two tablespoons of molasses
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两汤匙糖浆
- en: One tablespoon of cocoa powder
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一汤匙可可粉
- en: Six oz lager beer
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六盎司拉格啤酒
- en: Three tablespoon of cumin
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三汤匙孜然
- en: Half cup beef broth
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 半杯牛肉汤
- en: Two cups tomato sauce
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两杯番茄酱
- en: One large yellow bell pepper, diced
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大型的黄甜椒，切丁
- en: One large jalapeno pepper, diced
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大型的哈瓦那辣椒，切丁
- en: One cup light kidney beans
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一杯淡色肾豆
- en: One cup dark kidney beans
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一杯深色肾豆
- en: Three Bay leaves
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三片香叶
- en: '**instructions**:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤**:'
- en: Combine the dried peppers in a food processor and process for two minutes.
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将干辣椒放入食品加工机中，搅拌两分钟。
- en: Add crushed garlic, molasses, and cocoa powder, and process for two minutes.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入捣碎的大蒜、糖浆和可可粉，搅拌两分钟。
- en: Add oil to a large Dutch oven over medium low heat and heat up for three to
    four minutes.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在中等低温下向一个大荷兰炖锅中加入油，加热三到四分钟。
- en: Turn the heat to medium, add onions and cook, stirring frequently, until it
    just starts to caramelize for about four to eight minutes.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将火力调至中等，加入洋葱并烹饪，频繁搅拌，直到开始焦糖化，大约四到八分钟。
- en: Add ground beef to onions, stirring frequently until meat is browned, for about
    eight minutes.
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将牛肉末加入洋葱中，频繁搅拌，直到肉变棕色，大约八分钟。
- en: Combine the dried chilies mixture with ground beef and onions, and sauté for
    three to four minutes.
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将干辣椒混合物与牛肉末和洋葱混合，炒三到四分钟。
- en: Add beer and stir to loosen any browned bits from the bottom of the Dutch oven,
    and simmer over medium heat for five minutes.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向荷兰炖锅中加入啤酒并搅拌，以松动底部烧焦的碎片，然后在中等火候下煮沸五分钟。
- en: Add tomato sauce and cumin, and stir until combined. Simmer for five minutes.
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入番茄酱和孜然，搅拌至混合均匀。煮沸五分钟。
- en: Add diced pepper, kidney beans, and bay leaves. Reduce heat to low and simmer,
    stirring occasionally, for 30 minutes.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入切碎的辣椒、红肾豆和月桂叶。将火力调至低，偶尔搅拌，煮沸30分钟。
- en: Contributing the Views semantic tabs module to Drupal
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Views 语义标签模块贡献给 Drupal
- en: In this chapter, we have put a lot of effort in the semantic tabs module. It
    seems that it would make a lot of sense to make these enhancements available to
    the Drupal community as a whole. But, before we do that, there are a few things
    we need to do to ensure that the module is as useful as possible for the Drupal
    community.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在语义标签模块上投入了大量精力。似乎让这些增强功能对整个 Drupal 社区都很有意义。但在我们这样做之前，我们需要做一些事情来确保该模块对
    Drupal 社区尽可能有用。
- en: Drupal has coding standards that are strictly enforced when promoting any code
    for the first time. A good overview of coding standards for Drupal is available
    at [http://drupal.org/coding-standards](http://drupal.org/coding-standards). Before
    any code is contributed to Drupal, it should be checked to make sure that it conforms
    to Drupal's coding standards. Thankfully, this is pretty easy, because as pointed
    out on the page mentioned previously, there is a Coder module that provides an
    automated process for checking standards compliance of your code.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 有严格的编码标准，在首次推广任何代码时必须严格执行。有关 Drupal 编码标准的良好概述可在 [http://drupal.org/coding-standards](http://drupal.org/coding-standards)
    找到。在将任何代码贡献给 Drupal 之前，应检查以确保其符合 Drupal 的编码标准。幸运的是，这相当简单，因为正如之前提到的页面所指出的，有一个 Coder
    模块可以提供检查代码标准合规性的自动化流程。
- en: However, we don't need to install this module as we have online tools available
    to do this job. [http://pareview.sh](http://pareview.sh) is a service which performs
    automated reviews of Drupal projects using PHP CodeSniffer. This online service
    provides the recent pareview script without installing a local testing environment.
    Now it's time to create a sandbox module project in Drupal and push our views
    semantic tabs module code.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不需要安装此模块，因为我们有在线工具可以完成这项工作。[http://pareview.sh](http://pareview.sh) 是一个服务，它使用
    PHP CodeSniffer 对 Drupal 项目进行自动审查。此在线服务提供了最新的 pareview 脚本，无需安装本地测试环境。现在，是时候在 Drupal
    中创建一个沙盒模块项目并推送我们的 views 语义标签模块代码了。
- en: Time for action – creating a sandbox for the views semantic tabs module
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 views 语义标签模块的沙盒 - 行动时间
- en: Drupal allows us to create a new project type such as a module, theme, or distribution.
    In our case, we want to contribute a module.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 允许我们创建新的项目类型，如模块、主题或发行版。在我们的案例中，我们想要贡献一个模块。
- en: Go to [https://www.drupal.org/node/add](https://www.drupal.org/node/add) and
    click on the **Module project** link.![Time for action – creating a sandbox for
    the views semantic tabs module](img/4659_09_27_02.jpg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://www.drupal.org/node/add](https://www.drupal.org/node/add) 并点击 **模块项目**
    链接。![创建 views 语义标签模块的沙盒 - 行动时间](img/4659_09_27_02.jpg)
- en: I'm filling out the form. Our new project will initially be a Sandbox project.
    And I already have permission to promote projects from Sandbox to Full projects.
    I can see a checkbox allowing you to choose **Full project**, but normally it
    is best to start with a Sandbox anyway.![Time for action – creating a sandbox
    for the views semantic tabs module](img/4659_09_27.jpg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我正在填写表格。我们的新项目最初将是一个沙盒项目。我已经有权限将项目从沙盒提升到完整项目。我可以看到一个复选框，允许您选择**完整项目**，但通常最好是先从沙盒开始。![创建用于视图语义标签模块的沙盒操作时间
    – 创建沙盒](img/4659_09_27.jpg)
- en: 'By clicking on the **Save** button, Drupal creates and loads a page for your
    new project: [https://www.drupal.org/sandbox/krishnakanth17/2665888](https://www.drupal.org/sandbox/krishnakanth17/2665888).![Time
    for action – creating a sandbox for the views semantic tabs module](img/4659_09_28.jpg)'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮，Drupal将为您的全新项目创建和加载一个页面：[https://www.drupal.org/sandbox/krishnakanth17/2665888](https://www.drupal.org/sandbox/krishnakanth17/2665888)。![创建用于视图语义标签模块的沙盒操作时间
    – 创建沙盒](img/4659_09_28.jpg)
- en: Click the **Version control** tab near the top of the new project page for instructions
    on how to start committing code to your sandbox repository.![Time for action –
    creating a sandbox for the views semantic tabs module](img/4659_09_29.jpg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新项目页面顶部附近**版本控制**标签，以获取如何开始向沙盒仓库提交代码的说明。![创建用于视图语义标签模块的沙盒操作时间 – 创建沙盒](img/4659_09_29.jpg)
- en: 'Setting up this repository for the first time, there are a few steps we need
    to follow with Git to push our module code. Note: you will be prompted to enter
    your Drupal password after the last step.'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首次设置此仓库时，我们需要遵循一些Git步骤来推送我们的模块代码。注意：在最后一步后，您将被提示输入您的Drupal密码。
- en: '[PRE9]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next, all our module files need to be pushed to the sandbox. So copy and paste
    all the files inside this directory and follow these `git` commands as per the
    [https://www.drupal.org/project/2665888/git-instructions](https://www.drupal.org/project/2665888/git-instructions)
    page.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将所有模块文件推送到沙盒中。因此，复制并粘贴此目录内的所有文件，并按照[https://www.drupal.org/project/2665888/git-instructions](https://www.drupal.org/project/2665888/git-instructions)页面上的这些`git`命令进行操作。
- en: '[PRE10]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are done with creating the sandbox project and pushing our module code to
    it. Next, we need to promote this module to the full project. I have permission
    to promote projects from Sandbox to Full projects, once our sandbox is in a state
    where we think it is ready to be promoted to a full project, can apply for that
    permission. If we don't have this permission then we must go through a one-time
    approval process. Check [https://www.drupal.org/node/1011698](https://www.drupal.org/node/1011698)
    for more information.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经完成了创建沙盒项目和将我们的模块代码推送到它的操作。接下来，我们需要将这个模块提升为完整项目。我有权限将项目从沙盒提升到完整项目，一旦我们的沙盒处于我们认为可以提升为完整项目状态时，可以申请这个权限。如果我们没有这个权限，那么我们必须通过一次性的审批流程。查看[https://www.drupal.org/node/1011698](https://www.drupal.org/node/1011698)获取更多信息。
- en: But we are proceeding to promoting to the full project, our code is contributed
    to drupal.org, and it should be checked to make sure that it conforms to Drupal's
    coding standards. So we will be using online tools to check Drupal standards.
    As we discussed earlier, we will be using [http://pareview.sh](http://pareview.sh).
    In the URL input box, enter the URL `http://git.drupal.org/sandbox/krishnakanth17/2665888.git`
    and click on the **Submit branch** button.![Time for action – creating a sandbox
    for the views semantic tabs module](img/4659_09_30.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但我们正在继续提升到完整项目，我们的代码已贡献给drupal.org，应该检查它是否符合Drupal的编码标准。因此，我们将使用在线工具来检查Drupal标准。正如我们之前讨论的，我们将使用[http://pareview.sh](http://pareview.sh)。在URL输入框中，输入URL
    `http://git.drupal.org/sandbox/krishnakanth17/2665888.git`，然后点击**提交分支**按钮。![创建用于视图语义标签模块的沙盒操作时间
    – 创建沙盒](img/4659_09_30.jpg)
- en: After submitting, it takes me to the [http://pareview.sh/pareview/httpgitdrupalorgsandboxkrishnakanth172665888.git](http://pareview.sh/pareview/httpgitdrupalorgsandboxkrishnakanth172665888.git)
    page and it listed the things that need to be fixed.![Time for action – creating
    a sandbox for the views semantic tabs module](img/4659_09_32.jpg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交后，它会把我带到[http://pareview.sh/pareview/httpgitdrupalorgsandboxkrishnakanth172665888.git](http://pareview.sh/pareview/httpgitdrupalorgsandboxkrishnakanth172665888.git)页面，并列出需要修复的事项。![创建用于视图语义标签模块的沙盒操作时间
    – 创建沙盒](img/4659_09_32.jpg)
- en: It will take some time to fix all those errors.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复所有这些错误需要一些时间。
- en: In the next chapter, we will promote this sandbox module to a full project.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把这个沙盒模块提升为一个完整的项目。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned a lot about Views and saw how Views allows you to
    add interesting components to your site through a web-based user interface. We
    also learned that Views offers a powerful development platform for custom extensions.
    We created a sandbox project for the views semantic tabs module. We also looked
    into some online tools to review our module to check Drupal coding standards.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了很多关于视图的知识，并看到了视图如何通过基于网络的用户界面让你向网站添加有趣的功能组件。我们还了解到，视图提供了一个强大的开发平台，用于自定义扩展。我们为视图语义标签模块创建了一个沙盒项目。我们还调查了一些在线工具，以审查我们的模块并检查Drupal编码标准。
- en: In the next chapter, we are going to add some visually-striking banner components
    that will leverage the Views development from this chapter, and show off all the
    beautiful photos of the recipes on the d8dev site. Finally, we will promote the
    views semantic tabs module as the full project.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将添加一些视觉上引人注目的横幅组件，这些组件将利用本章中提到的视图开发，并展示d8dev网站上所有美丽的食谱照片。最后，我们将推广视图语义标签模块作为完整项目。
