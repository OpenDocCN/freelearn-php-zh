- en: Chapter 9. Code Quality Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。代码质量分析
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Mess detector and PhpStorm
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杂乱检测器和PhpStorm
- en: Code sniffer and PhpStorm
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码嗅探器和PhpStorm
- en: Locating code duplicates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定位代码重复
- en: Code formatting and arrangement
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码格式化和排列
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Engineering is beautiful. The beauty of engineering lies in the fact that it
    leaves no stone unturned and no path uncovered while carrying out even the simplest
    of tasks. Tasks that might appear too trivial for the lay person—even they are
    taken care of by engineering; software engineering, contextual.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 工程之美。工程之美在于它在执行甚至最简单的任务时，不留任何石头，不遗漏任何路径。对于普通人来说可能显得过于微不足道——但它们也被工程所关注；软件工程，具体而言。
- en: You will agree that time matures you. Do you remember what your attitude used
    to be when you were a novice software engineer and when you were presented with
    a (programming) problem to solve? You started making plans using your infant knowledge
    about what the actual *code* would be like. So childish, right? As time progressed
    and you started gaining experience, you started using a scratchpad-like thing
    to first plan using primitive sketching techniques to visualize the flow of the
    algorithm. This was where you started feeling the need for engineering diagrams.
    You started learning UML—the mother of all modeling languages and the very basis
    of software engineering.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你会同意时间会使人成熟。你还记得当你作为一个新手软件工程师，面对一个需要解决的问题时，你的态度是怎样的吗？你开始使用你对实际*代码*的幼稚认识来制定计划。多么幼稚啊？随着时间的推移，你开始积累经验，你开始使用类似草稿纸的东西，首先使用原始的草图技术来规划，以可视化算法的流程。这就是你开始感觉到需要工程图的时候。你开始学习UML——所有建模语言的母亲，也是软件工程的基础。
- en: Time kept on taking you through the tough lessons of life. In due course, you
    realized that without following engineering principles, it was easy to start moving
    forward, but the way was one-sided and one-directional. Once you are required
    to go back and fix mistakes that you, as a human, have committed, the action can
    take you into a state of limbo where no one obeys the law of gravity. So, you
    and software engineering became friends, and life became much easier.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 时间一直在带你经历生活的艰难课程。在适当的时候，你意识到如果不遵循工程原则，前进起来很容易，但道路是单方面的，单向的。一旦你需要回头纠正你作为人类所犯的错误，这个行动可能会让你陷入一种无人遵守重力法则的状态。所以，你和软件工程成为了朋友，生活变得容易多了。
- en: So far, so good.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利。
- en: If it is said that you can know a lot more about your close friend—software
    engineering—it is not incorrect or inappropriate. Software engineering not only
    helps you in maintaining ethics while designing a system but also keeps a track
    of the code you write. The number of lines of code you write, for example, can
    be one metric to determine the cost of software (considering that a line of code
    costs a fixed amount of money). The variable names in your code need to follow
    a strict standard. Why? It has to be a human being only who will be required to
    go through the code once some modification becomes the need of the hour. Since
    change is inevitable, the odds in favor of this event happening are high.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果说你可以更多地了解你的亲密朋友——软件工程——这并不错误或不恰当。软件工程不仅帮助你设计系统时保持道德，还跟踪你编写的代码。例如，你编写的代码行数可以作为一个衡量软件成本的指标（考虑到每行代码都花费一定数量的金钱）。你代码中的变量名需要遵循严格的标准。为什么？一旦需要修改，只有人类才需要逐行检查代码。由于变化是不可避免的，这个事件发生的概率很高。
- en: To sum it up, software engineering provides you with systems to perform analysis
    on this aspect of your software application as well. This process is known as
    **code quality assurance** since you are able to create code that is readable
    and hence maintainable. The systems available for you to achieve this milestone
    are known as **PHP Mess Detector** (**PHPMD**) and **PHP Code Sniffer** (**PHPCS**).
    PHPMD literally identifies and inspects the mess that a team member has done in
    the code base and provides warnings, error messages, and indications to not only
    clean up the messy code but also attempts to keep the code base clean. Code Sniffer
    acts as a sniffer dog and barks whenever it detects potential bugs in the code
    base. It is not that the combination of your eye and brain would be unable to
    detect simple errors in the code, but there are plural incidents in the development
    phase where you, as a tired software engineer, might commit very simple mistakes.
    With the passage of time, such mistakes grow to become a mysterious bug probably
    extremely hard to crack. PHPCS proves helpful in curbing such mistakes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，软件工程为你提供了系统来分析你的软件应用的这一方面。这个过程被称为**代码质量保证**，因为你可以创建出可读且易于维护的代码。帮助你实现这一里程碑的系统被称为**PHP
    Mess Detector**（**PHPMD**）和**PHP Code Sniffer**（**PHPCS**）。PHPMD实际上会识别和检查团队成员在代码库中造成的混乱，并提供警告、错误信息和指示，不仅可以帮助清理混乱的代码，还试图保持代码库的整洁。Code
    Sniffer充当嗅探犬，每当它检测到代码库中的潜在错误时就会发出警报。并不是说你的眼睛和大脑无法检测代码中的简单错误，但在开发阶段，作为一位疲惫的软件工程师，你可能会犯下非常简单的错误。随着时间的推移，这些错误会逐渐演变成一个神秘的bug，可能非常难以破解。PHPCS在遏制此类错误方面非常有帮助。
- en: 'A question that is very obvious to ask: where is PhpStorm in the scene? The
    answer to this is that PhpStorm is always at your disposal. How? The two systems
    mentioned are used in conjunction with PhpStorm to wreak havoc on the bugs that
    attempt to creep into the development phase and keep on bugging you for long and
    sometimes extended periods of time. A waste of your bandwidth and thus decrease
    in morale—your manager will not let you go that easily till you are able to debug
    your application.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个显而易见的问题：PhpStorm在这个场景中在哪里？答案是PhpStorm始终可供你使用。它是如何做到的呢？提到的两个系统与PhpStorm结合使用，以破坏试图潜入开发阶段的bug，并长时间甚至长时间地困扰你。这是对你带宽的浪费，从而降低了士气——你的经理不会轻易让你离开，直到你能够调试你的应用程序。
- en: Mess detector and PhpStorm
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混乱探测器和PhpStorm
- en: PhpStorm is an obedient and diligent slave of yours. It ensures that none of
    your efforts get classified as scratchy or unengineered. How? It provides you
    with facilities to integrate systems, which in turn help you in letting your efforts
    achieve engineering maturity. You must be getting anxious as to which system is
    being talked about here. So, you can put your hands together for the mess detector
    known as PHPMD. A simple acronym, indeed. It is not that PhpStorm takes away all
    the due credit of removing the mess from your code, but yes, PhpStorm makes a
    provision for you to find out the appropriate version, download, integrate, and
    then start planning what to do. And then? Then what? Just sit back and let PhpStorm
    and mess detector collaborate and perform the tasks for you.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PhpStorm是你的忠实勤奋的奴隶。它确保你的任何努力都不会被归类为粗糙或不经过工程化。它是如何做到的呢？它为你提供了集成系统的设施，这些设施反过来帮助你让努力达到工程化的成熟度。你一定很想知道这里所说的系统是哪一个。所以，你可以伸出双手，为被称为PHPMD的混乱探测器鼓掌。确实是一个简单的缩写。并不是说PhpStorm剥夺了你从代码中清除混乱的应有赞誉，但是的，PhpStorm为你提供了查找适当版本、下载、集成，然后开始规划要做什么的便利。然后呢？然后呢？只需坐下来，让PhpStorm和混乱探测器协作，为你完成任务。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have information about the latest (and stable) release of PHPMD.
    You can simply search it on the Internet via any popular search engine. The official
    website ([http://phpmd.org/](http://phpmd.org/)) provides you with information
    about the downloading methods available. Since you have a good taste for PHP archives,
    you can get phar from the URL [http://static.phpmd.org/php/1.4.1/phpmd.phar](http://static.phpmd.org/php/1.4.1/phpmd.phar)
    (this was the latest phar available at the time of writing). Just like other archives,
    you need not take any other action—only this download will suffice with the executable.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要了解PHPMD的最新（且稳定）版本信息。您可以通过任何流行的搜索引擎在互联网上简单地搜索它。官方网站([http://phpmd.org/](http://phpmd.org/))提供了有关可用下载方法的信息。由于您对PHP存档有很好的品味，您可以从URL
    [http://static.phpmd.org/php/1.4.1/phpmd.phar](http://static.phpmd.org/php/1.4.1/phpmd.phar)（这是撰写本文时可用的最新phar）获取phar（这将是可执行文件）。就像其他存档一样，您不需要采取任何其他行动——只有这个下载就足够了。
- en: When you talk about executables, since `*nix` systems treat all files that have
    been downloaded from external sources as read-only, it is your duty to check the
    access permissions on phar. In most cases, a downloaded file reads permissions
    only for the sake of security. You need to be wise enough to downgrade the permissions
    to allow appropriate access to this archive. On `*nix` systems, there is this
    command available, `chmod`, using which you can play around with the access permissions
    on a specified file or a folder. Thus (using `chmod`), you can probably set `766`
    as the permission string for this archive.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当您谈论可执行文件时，由于`*nix`系统将所有从外部来源下载的文件视为只读，检查phar的访问权限就是您的责任。在大多数情况下，下载的文件只读权限只是为了安全起见。您需要足够聪明，将权限降级以允许适当的存档访问。在`*nix`系统中，有一个可用的命令`chmod`，您可以使用它来在指定的文件或文件夹上玩转访问权限。因此（使用`chmod`），您可能可以将此存档的权限字符串设置为`766`。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now comes the important part—you need to tell PhpStorm about PHPMD. This is
    one configuration that you really need to ensure is in place. The reason for this
    being the beginning of PhpStorm is for PhpStorm to know that it has got a new
    member and thus needs to take the appropriate action accordingly. Perform the
    following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是重要的部分——您需要告诉PhpStorm关于PHPMD的信息。这是一项您确实需要确保已设置的配置。原因在于PhpStorm的开始是为了让PhpStorm知道它有一个新成员，因此需要相应地采取适当的行动。执行以下步骤：
- en: You need to select **File** | **Settings** | **PHP** | **Mess Detector** and
    set the path of phar you just downloaded (or maybe borrowed from a friend), as
    shown in the following screenshot:![How to do it…](img/3878OT_09_01.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要选择**文件** | **设置** | **PHP** | **Mess Detector**并设置您刚刚下载的phar路径（或者可能从朋友那里借来的），如下面的截图所示：![如何操作…](img/3878OT_09_01.jpg)
- en: Validate the work you did. Don't worry. PhpStorm will help you as there is a
    provision to check for the configuration to be proper via the **Validate** button.
    If you have done everything correctly, you will get a green signal from PhpStorm,
    indicating the name of the software (**PHPMD**), its author, and the version number,
    as shown in the following screenshot:![How to do it…](img/3878OT_09_02.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您所做的工作。不用担心，PhpStorm会帮助您，因为有一个通过**验证**按钮检查配置是否正确的功能。如果您一切都做得正确，您将收到来自PhpStorm的绿色信号，指示软件的名称（**PHPMD**）、作者和版本号，如下面的截图所示：![如何操作…](img/3878OT_09_02.jpg)
- en: You need to configure the options available for PHPMD in PhpStorm. The settings
    are available at **File** | **Settings** | **Inspections**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要在PhpStorm中配置PHPMD可用的选项。设置可在**文件** | **设置** | **检查**中找到。
- en: Turn on inspections.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开检查功能。
- en: Configure inspections by opening the settings wizards at **File** | **Settings**
    | **Inspections** and selecting the checkbox next to the **PHP Mess Detector**
    validation.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**文件** | **设置** | **检查**中打开设置向导并选择**PHP Mess Detector**验证旁边的复选框来配置检查。
- en: There is a certain predefined set of rules; you need to select some or all of
    them depending on your requirement. So, you can select one or all of the code-validation
    rules and proceed with writing the code. That is it. The following screenshot
    shows the **Inspections** page:![How to do it…](img/3878OT_09_03.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存在一系列预定义的规则；您需要根据您的需求选择其中一些或全部。因此，您可以选择一个或所有代码验证规则，然后继续编写代码。就是这样。下面的截图显示了**检查**页面：![如何操作…](img/3878OT_09_03.jpg)
- en: PHPMD will continue doing its work in the background and will keep on showing
    you errors and warnings as you keep on writing code. The notifications are classified
    according to the way you configured it.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PHPMD将在后台继续工作，并在你编写代码时继续显示错误和警告。通知是根据你配置的方式进行分类的。
- en: To configure the notifications, you need to select the individual rule and make
    changes in the color, font, and so on, as required. The following screenshot shows
    how the Edit Settings\Colors & Fonts tab looks on the Severities Editor page:![How
    to do it…](img/3878OT_09_04.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置通知，你需要选择单个规则，并根据需要更改颜色、字体等。以下截图显示了在严重性编辑器页面上的“编辑设置\颜色和字体”标签页的外观：![如何操作…](img/3878OT_09_04.jpg)
- en: How it works…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Getting PHPMD to work is no difficult task. All you need to do is make a few
    settings and resume doing your favorite work—writing code. However, since you
    are an engineer, you should be keen to know exactly what goes on under the hood
    that keeps you going.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让PHPMD运行起来并不困难。你只需要做一些设置，然后继续做你最喜欢的工作——编写代码。然而，由于你是一名工程师，你应该渴望了解在引擎盖下究竟发生了什么，让你能够继续前进。
- en: 'By default, PHPMD follows some rules. These rules were made while keeping in
    mind the principles of software engineering. There are rules to keep a check on:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PHPMD遵循一些规则。这些规则是在考虑到软件工程原则的同时制定的。有一些规则需要检查：
- en: '**Code size rules**: From time to time events occur which need you to keep
    a check on the size of the code. It is important to say that you write not only
    to write, but also to read it later and maintain it. One very important factor
    is the size of the code and the complexity associated with it.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码大小规则**：时不时会有事件发生，需要你检查代码的大小。重要的是要说明，你不仅是为了写代码而写，而且是为了以后阅读和维护它。一个非常重要的因素是代码的大小及其相关的复杂性。'
- en: '**Cyclomatic complexity**: Theoretically, a flow graph needs to be drawn to
    denote the algorithm in question, then the edges, the nodes, and the exit points
    are counted, and then the resulting number is obtained by edge count—node count
    plus the exit point count in the flow graph.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**圈复杂度**：理论上，需要绘制一个流程图来表示所讨论的算法，然后计算边、节点和出口点，最后通过边数减去节点数再加上流程图中的出口点数得到结果。'
- en: PHPMD abstracts these details in its implementation. It takes into account the
    number of decision points, such as the loop constructs—if, for, while, case—and
    calculates the complexity as the number of decision points in the code plus 1
    (one) for the entry point of the method.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PHPMD在其实现中抽象了这些细节。它考虑了决策点的数量，例如循环结构——if、for、while、case等，并计算复杂度为代码中的决策点数加1（一个）作为方法的入口点。
- en: '**Npath complexity**: Then, there is Npath complexity, which PHPMD takes care
    of. Npath is the number of possible outcomes in your code. It can be the cases
    under which the code produces output. So, PHPMD decides that a limit of 200 is
    OK for a code to be healthy. This means that your code (method) can have a maximum
    of 200 outcomes if your method is quality code.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**N路径复杂度**：然后，还有N路径复杂度，这是PHPMD负责的。N路径是代码中可能的结果数量。它可以是在代码产生输出的情况下。因此，PHPMD决定，对于健康的代码，200是一个合理的限制。这意味着如果你的方法是高质量的代码，你的代码（方法）可以有最多200个结果。'
- en: '**Excessive method length rule**: PHPMD puts a restriction on the length of
    the method by counting the number of lines of code in it. This one is known as
    the excessive method length rule. So, if a method''s lines of code count exceeds
    100, that method violates this restriction, and PHPMD indicates to you in the
    form of a warning or whatever you configured it to be:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过度方法长度规则**：PHPMD通过计算方法中的代码行数来限制方法的长度。这被称为过度方法长度规则。因此，如果一个方法的代码行数超过100行，那么这个方法违反了这一限制，PHPMD会以警告或你配置的方式向你指示：'
- en: If the number of lines of code in your class exceeds 1,000, you need to refactor
    the class you have written. Who said this? The PHPMD excessive class length restriction.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你类中的代码行数超过1,000行，你需要重构你编写的类。谁说的？这是PHPMD过度类长度限制。
- en: If the number of parameters declared exceed 10, PHPMD will notify you to reduce
    the number of arguments to less than 10\. You can then try passing an object containing
    the like arguments in one single object. This rule is known as the excessive parameter
    list restriction.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果声明的参数数量超过10个，PHPMD会通知你将参数数量减少到10个以下。然后你可以尝试传递一个包含类似参数的单个对象。这个规则被称为过度参数列表限制。
- en: If there are too many public members inside a class, PHPMD treats it as bad
    quality and reports it to you via PhpStorm. The too-many factor is set to a default
    value of 45, exceeding which PHPMD starts treating your code as bad code.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个类中有太多的公共成员，PHPMD将其视为低质量代码，并通过PhpStorm向你报告。过多的因素设置为默认值45，超过这个值，PHPMD开始将你的代码视为不良代码。
- en: Having too many private or protected members is not treated as good, either.
    If there are more than 15 such members, or fields, to be more technical, PHPMD
    notifies you. You need to restructure your class to have fewer fields. Why not
    try using composition? The *has-a* relationship... Remember?
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有太多的私有或受保护的成员也不被视为良好。如果有超过15个这样的成员或字段（更技术性的说法），PHPMD会通知你。你需要重构你的类以减少字段数量。为什么不尝试使用组合？这是“*有*”关系...还记得吗？
- en: If you have a little too many methods in a class that you wrote, beware. PHPMD
    will treat it as bad-quality code and will indicate that you need to refactor
    the class to have fewer methods in the class. The threshold is 10.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在一个类中写了太多的方法，要小心。PHPMD将将其视为低质量代码，并指出你需要重构类以减少类中的方法数量。阈值是10。
- en: '**Controversial rules**: PHPMD treats code as bad-quality code when:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有争议的规则**：当以下情况发生时，PHPMD将代码视为低质量代码：'
- en: You have access to a *super global array* directly without encapsulating in
    some object.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以直接访问一个*超级全局数组*，而不将其封装在某个对象中。
- en: You do not use the camel case to name classes, class members, and whatever variables
    you use in your code.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你没有使用驼峰式命名法来命名类、类成员以及你在代码中使用的任何变量。
- en: '**Design rules**: Code written in PHP will be a candidate for bad code when:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计规则**：当用PHP编写的代码满足以下条件时，将被视为不良代码：'
- en: You have exit points in your code within regular code, such as exit points without
    exception / error handling lines.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的代码中在常规代码中有退出点，例如没有异常/错误处理行的退出点。
- en: You love using `eval` in your code.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你喜欢在代码中使用`eval`。
- en: You find using `goto` in your code enjoyable.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你觉得在代码中使用`goto`很有趣。
- en: You have created a few too many children of a class. Fifteen is the threshold
    for PHPMD.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你创建了一个类过多的子类。对于PHPMD来说，15是阈值。
- en: You have created a class hierarchy in which a class inherits more than six parent
    classes.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你创建了一个类层次结构，其中一个类继承了超过六个父类。
- en: '**Naming rules**: PHPMD will also frown and thus indicate that the code is
    bad when:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名规则**：当PHPMD发现以下情况时，也会皱眉并指出代码不良：'
- en: A variable name is too long or too short. A name is too long when it is greater
    than 20 characters in length and too short when it is less than three characters
    in length. Really short!
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名过长或过短。当长度超过20个字符时，名称过长；当长度小于三个字符时，名称过短。真的非常短！
- en: A method name is too short to be understood. A name is too short when it is
    less than three characters in length.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法名过短，难以理解。当长度小于三个字符时，名称过短。
- en: The constructor uses the name of the enclosing class.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数使用了封装类的名称。
- en: The constants in the class are written in lower case with words separated by
    an underscore (`_`).
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类中的常量以小写字母书写，单词之间用下划线（`_`）分隔。
- en: '**Unused code rules**: Leaving the code unused is not looked upon by PHPMD
    with high regard. According to PHPMD, code is bad when:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未使用代码规则**：PHPMD并不重视代码的未使用状态。根据PHPMD，代码不良的情况包括：'
- en: You have declared, and/or assigned a value to a local variable or a private
    field.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你声明了，并/或为局部变量或私有字段赋值。
- en: You have declared and/or defined a method but have not used it.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你声明并/或定义了一个方法，但没有使用它。
- en: You have declared a formal parameter to a method but haven't used it.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你声明了一个方法的形式参数，但没有使用它。
- en: 'Here is PHPMD in action. You can see how PHPMD provides errors and warnings
    as you keep on writing the code:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是PHPMD在行动中的样子。你可以看到当你继续编写代码时，PHPMD如何提供错误和警告：
- en: '![How it works…](img/3878OT_09_05.jpg)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_05.jpg)'
- en: There's more...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you are convinced that the predefined rulesets are not sufficient to support
    your cause, you can have your own version of the ruleset file added to PhpStorm.
    All you need to do is create a new XML file, name it reasonably, and ask PhpStorm
    to incorporate the file, as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为预定义的规则集不足以支持你的需求，你可以将你自己版本的规则集文件添加到PhpStorm中。你需要做的就是创建一个新的XML文件，给它一个合理的名字，并让PhpStorm将其合并，如下面的截图所示：
- en: '![There''s more...](img/3878OT_09_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/3878OT_09_06.jpg)'
- en: 'Your ruleset file looks somewhat like the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你的规则集文件看起来有点像以下代码：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The actual detection is done when you write `<rule ref="rulesets/codesize.xml/TooManyFields"/>`
    because it is this line that selects which option should be turned on for PHPMD.
    The other lines written at the beginning—you need not boggle your mind—just comprise
    the basic skeleton part. The best part of the story is that you need not remember
    the lines: you can just copy the lines from here and paste it to any `ruleset.xml`
    that you wish. The only thing you need to remember is the exact name of the rule
    that you wish to apply.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的检测是在你编写`<rule ref="rulesets/codesize.xml/TooManyFields"/>`时进行的，因为正是这一行选择了为PHPMD开启哪个选项。其他在开头编写的行——你不需要费脑筋——只是构成了基本框架部分。故事最好的部分是，你不需要记住这些行：你只需从这里复制这些行并将其粘贴到任何你想要的`ruleset.xml`中。你需要记住的唯一事情是你希望应用的规则的准确名称。
- en: Code sniffer and PhpStorm
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码嗅探器和PhpStorm
- en: 'Have you noticed why defense personnel keep sniffer dogs? No? The purpose of
    the sniffer dogs is to sniff items around and detect for any illegal items present
    in those items. You might wonder how a dog decides which one is illegal and which
    one is legal, and even if it does that, how can it inform the humans about the
    validity of the item. A dog just knows how to bark: it barks at both times, happy
    or sad. Everything said and done, the question still remains. How does a dog know
    about an illegal object?'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到为什么防御人员会使用嗅探犬吗？没有？嗅探犬的目的是嗅探周围物品并检测这些物品中是否存在任何非法物品。你可能想知道狗是如何决定哪个是非法的，哪个是合法的，即使它做到了，它又是如何通知人类关于物品有效性的。狗只知道如何吠叫：它会在两种情况下吠叫，无论是高兴还是悲伤。不管怎样，问题仍然存在。狗是如何知道非法物品的？
- en: 'The answer is straight, abrupt, and terse: a dog is *configured* or trained
    to do that.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是直接、简短和简洁的：狗是被*配置*或训练来做这件事的。
- en: You have PhpStorm, right? You have been using it for all your programming needs,
    right? You can similarly use PhpStorm to sniff your code and inform you if the
    code contains some coding standard violation. The system that provides this functionality
    to PhpStorm is PHPCS or PHP Code Sniffer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你有PhpStorm吗？你一直在用它来满足你的编程需求，对吧？你可以用类似的方式使用PhpStorm来嗅探你的代码，并在代码包含一些编码标准违规时通知你。为PhpStorm提供此功能的是PHPCS或PHP
    Code Sniffer。
- en: PHP Code Sniffer is a PHP5 script that tokenizes PHP, JavaScript, and CSS files
    to detect violations of a defined coding standard. It is an essential development
    tool that ensures that your code remains clean and consistent. It can also help
    prevent common semantic errors made by developers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: PHP Code Sniffer是一个PHP5脚本，它将PHP、JavaScript和CSS文件进行标记化，以检测违反定义的编码标准。它是一个确保你的代码保持清洁和一致性的基本开发工具。它还可以帮助防止开发者犯下的常见语义错误。
- en: PHPCS is an application written in PHP that can be configured with a predefined
    or custom set of coding rules. It detects possible inconsistency and unclean code
    and thus does not allow common semantic errors to pass through in the production
    code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: PHPCS是一个用PHP编写的应用程序，可以用预定义或自定义的编码规则集进行配置。它检测可能的不一致和不整洁的代码，因此不允许常见的语义错误在生产代码中通过。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Before you even plan to start code-sniffing, you need to download PHPCS as
    `.tgz` so that you have the installation file ready in your local system. The
    file can be downloaded from [http://download.pear.php.net/package/PHP_CodeSniffer-2.0.0a2.tgz](http://download.pear.php.net/package/PHP_CodeSniffer-2.0.0a2.tgz).
    After this, comes the installation. The PHPCS installation is quite simple in
    PhpStorm (just as easy as the other actions are). You need to perform the following
    steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在你甚至计划开始代码嗅探之前，你需要下载PHPCS为`.tgz`格式，这样你就可以在你的本地系统中准备好安装文件。该文件可以从[http://download.pear.php.net/package/PHP_CodeSniffer-2.0.0a2.tgz](http://download.pear.php.net/package/PHP_CodeSniffer-2.0.0a2.tgz)下载。之后，就是安装过程。在PhpStorm中安装PHPCS相当简单（和其他操作一样简单）。你需要执行以下步骤：
- en: Extract the contents of the tgz file you downloaded to a convenient location
    on your development machine—usually the computer where you play around with PhpStorm.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你下载的tgz文件内容提取到你的开发机器上的一个方便位置——通常是你用PhpStorm进行实验的电脑。
- en: Inside the extracted directory, locate the `phpcs` file, which is a script written
    in PHP. This would most probably be inside the scripts directory.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提取的目录中，找到`phpcs`文件，这是一个用PHP编写的脚本。这很可能是脚本目录中。
- en: Check whether the permissions set on the executable are sufficient to allow
    PhpStorm to use it. If you find something doubtful, set the permission to `755`
    on this PHPCS file.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查设置在可执行文件上的权限是否足够允许PhpStorm使用它。如果你发现可疑之处，请将此PHPCS文件的权限设置为`755`。
- en: Carry out the most important step. You need to tell PhpStorm that there is PHPCS
    available. For that, you need to select **File** | **Settings** | **Code Sniffer**
    and set the path to this PHPCS, as shown in the following screenshot:![Getting
    ready](img/3878OT_09_07.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行最重要的步骤。你需要告诉 PhpStorm 有 PHPCS 可用。为此，你需要选择**文件** | **设置** | **代码检查器**，并设置此
    PHPCS 的路径，如以下截图所示：![准备就绪](img/3878OT_09_07.jpg)
- en: Validate that the settings have been made properly and that everything is OK
    in there, as shown in the following screenshot:![Getting ready](img/3878OT_09_08.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证设置是否已正确设置，并且一切如截图所示正常：![准备就绪](img/3878OT_09_08.jpg)
- en: How to do it…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Having configured the code sniffer system with PhpStorm, you don''t have to
    bother about how to make PHPCS work. It just works in the background with the
    default inspection system provided. However, you need to turn it on. The code
    sniffing process can be started by selecting the inspection option available for
    PHPCS:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 PhpStorm 配置了代码检查器系统后，你不必担心 PHPCS 如何工作。它只是默认的检查系统在后台工作。然而，你需要将其打开。可以通过选择
    PHPCS 可用的检查选项来启动代码检查过程：
- en: In the bottom-right corner, there is this inspection icon available. You need
    to click on it and click on the **Configure inspection** option available, or
    the same option can be availed of by selecting **File** | **Settings** | **Inspections**.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右下角，有一个可用的检查图标。你需要点击它，然后点击可用的**配置检查**选项，或者可以通过选择**文件** | **设置** | **检查**来获取相同的选项。
- en: You need to select the PHP inspection tree, and inside it, the **PHP Code Sniffer
    Validation** option has to be selected.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要选择 PHP 检查树，并在其中选择**PHP 代码检查器验证**选项。
- en: Next to the coding standard, there is a dropdown. You need to select one of
    the available values.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编码标准旁边有一个下拉菜单。你需要选择其中一个可用的值。
- en: If you add more values to PHPCS, you need to refresh the list of available standards.
    The refresh is confirmed by a message, as shown in the following screenshot:![How
    to do it…](img/3878OT_09_09.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你向 PHPCS 添加更多值，你需要刷新可用的标准列表。刷新操作会通过一个消息得到确认，如以下截图所示：![如何操作…](img/3878OT_09_09.jpg)
- en: Having done that, you can now focus on writing business logic for the organization
    you work for. PHPCS will continue in the background and will keep on showing errors
    as you proceed. One of the errors is shown in the following screenshot:![How to
    do it…](img/3878OT_09_10.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成这些后，你现在可以专注于为你的组织编写业务逻辑。PHPCS 将在后台继续运行，并在你进行时持续显示错误。以下是一个显示错误的截图：![如何操作…](img/3878OT_09_10.jpg)
- en: How it works…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The working of PHPCS is not very difficult to understand—especially for people
    such as you, who are (already) familiar with systems like PHPMD (it's another
    code quality assurance tool, just in case you were not familiar with it. Pun intended!).
    PHPCS also understands XML, and PHPCS also has inbuilt or precooked rules. This
    is clearly visible when you integrate PHPCS with PhpStorm. There are coding standards
    available to you via a dropdown containing these default values. This dropdown
    is available with the label **Coding Standard:** The PHPCS system obeys the standards
    and checks your code as you open it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: PHPCS 的工作原理并不难理解——尤其是对于像你这样的人，你已经熟悉 PHPMD 等系统（以防你不熟悉它。这是个双关语！）。PHPCS 还能理解 XML，并且
    PHPCS 还内置或预定义了规则。当你将 PHPCS 与 PhpStorm 集成时，这一点尤为明显。你可以通过下拉菜单中的这些默认值访问可用的编码标准。这个下拉菜单的标签是**编码标准**：PHPCS
    系统遵循这些标准，并在你打开代码时进行检查。
- en: 'So far, so good. The actual nuts and bolts are located in the `ruleset.xml`
    file. No, no, it is not a typographical error as a result of engineered copy-pasting!
    The `ruleset.xml` file follows certain standards during creation. The rules that
    drive PHPCS are:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利。实际的“关键部分”位于 `ruleset.xml` 文件中。不，这不是由于工程复制粘贴导致的印刷错误！`ruleset.xml`
    文件在创建过程中遵循某些标准。驱动 PHPCS 的规则是：
- en: 'Due to its being an XML, the most important line to be added is the XML version:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于它是 XML 格式，最重要的行是添加 XML 版本：
- en: '[PRE1]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The parent node of all the nodes in the ruleset is the `ruleset` node. The
    name attribute makes the node known by a name to PhpStorm:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则集中所有节点的父节点是 `ruleset` 节点。名称属性使节点在 PhpStorm 中通过名称识别：
- en: '[PRE2]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There can be a description node that contains the description of the standard
    under construction:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能有一个描述节点，其中包含正在构建的标准描述：
- en: '[PRE3]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then comes the actual rule. PHPCS can accept external references to a rule
    that someone else might have created:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后是实际的规则。PHPCS可以接受对他人可能创建的规则的外部引用：
- en: '[PRE4]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There can be a directory that contains code standards in the form of the PHP
    class hierarchy:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能有一个包含以PHP类层次结构形式存在的代码标准的目录：
- en: '[PRE5]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or, there might be a reference to a well-known coding standard, such as PEAR
    or Zend:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，可能有一个对知名编码标准的引用，例如PEAR或Zend：
- en: '[PRE6]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Some of the default standards are included as shown in the following code:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些默认标准被包含在以下代码中：
- en: '[PRE7]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Alternatively, it can have the following code too:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，它还可以有以下的代码：
- en: '[PRE8]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There's more...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Since the standards are defined in the form of the PHP class hierarchy, the
    inclusion also respects the hierarchical pattern in the `ref` attribute. So, the
    actual class that is referenced is the `Generic_Sniffs_Files_LineEndingsSniff`
    class defined inside the directory `/path/to/PHP_CodeSniffer/CodeSniffer/Standards/Generic/Sniffs/FilesLineEndingsSniff.php`
    under Version 2.0.0a2\. The property being tried to be set in the class is the
    `eolChar`, which happens to be a public and string type member of the class.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于标准是以PHP类层次结构的形式定义的，因此包含也尊重了`ref`属性中的层次模式。所以，实际引用的类是位于`/path/to/PHP_CodeSniffer/CodeSniffer/Standards/Generic/Sniffs/FilesLineEndingsSniff.php`目录下的`Generic_Sniffs_Files_LineEndingsSniff`类，该类是在2.0.0a2版本中定义的。正在尝试设置的类属性是`eolChar`，它恰好是类的一个公共字符串类型成员。
- en: You can find a sample ruleset file at [http://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php](http://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php](http://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php)找到示例规则集文件。
- en: Locating code duplicates
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位代码重复项
- en: Business needs money, money needs engineering, engineering needs a plan, and
    the plan needs time. Since business needs money, and time is money, business does
    not want to waste time. Spending time means spending money, and all (software)
    businesses assume that money spent is money lost. Since business spends money
    sparingly, engineering resorts to code reuse. But then, the customer needs quality—after
    all, the customer has paid a (huge) sum of money to get the work done. This is
    a vicious circle.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 商业需要资金，资金需要工程，工程需要计划，而计划需要时间。由于商业需要资金，而时间就是金钱，因此商业不希望浪费时间。浪费时间就是浪费金钱，所有（软件）商业都认为花出去的钱就是损失。由于商业节省开支，工程就转向代码复用。然而，客户需要质量——毕竟，客户已经支付了一大笔钱来完成这项工作。这是一个恶性循环。
- en: When the engineering team is short of time, the challenge ahead is always to
    ensure that the copy-paste tasks are under control without side effects. Under
    control means that the software is able to do the expected work. The side effects
    are duplicate sections in the software, which can potentially lead to increases
    in the lines of code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当工程团队时间紧迫时，面临的挑战始终是确保复制粘贴的任务在控制之下，没有副作用。控制意味着软件能够完成预期的任务。副作用是软件中的重复部分，这可能导致代码行数的增加。
- en: The situation seems grim!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 情况似乎很严峻！
- en: You must remember PhpStorm at all times in your coding lifespan—whether you
    are having leisure or trouble. PhpStorm always has something or other for you.
    This time, PhpStorm will take you out of this vicious circle. There is a feature
    available that allows you to scan through your code and locate the duplicate code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的编码生涯中，你必须始终记住PhpStorm——无论你是休闲还是遇到麻烦。PhpStorm总是为你提供一些东西。这次，PhpStorm将帮助你摆脱这个恶性循环。有一个功能允许你扫描代码并定位重复代码。
- en: How to do it…
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To effectively locate duplicates in the code, perform the following steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地在代码中定位重复项，请执行以下步骤：
- en: You need to select **Code** | **Locate Duplicates** from the main menu. You
    will get a pop up that is the selection-making point for you, as shown in the
    following screenshot:![How to do it…](img/3878OT_09_11.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要从主菜单中选择**代码** | **查找重复**。你将得到一个弹出窗口，这是你的选择点，如下面的截图所示：![如何做到这一点…](img/3878OT_09_11.jpg)
- en: The default selection is **Whole project**. You have the option to find code
    duplicates in the whole project.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认选择是**整个项目**。你有选择在整个项目中查找代码重复项的选项。
- en: You can also set the criteria to work on the type or category of files according
    to the development cycle phase. You can choose **Uncommitted files** to locate
    duplicates in the code that you have not committed yet. This can be a good idea
    to improve code quality.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以根据开发周期阶段设置标准来处理文件类型或类别。你可以选择**未提交的文件**来定位你尚未提交的代码中的重复项。这可以是一个提高代码质量的好主意。
- en: 'You can select the currently open file in the editor to work on locating the
    duplicate. PhpStorm also provides you with the option to set a custom scope of
    locating duplicates:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在编辑器中选择当前打开的文件来定位重复项。PhpStorm还为你提供了设置自定义重复查找范围的选择：
- en: '**Project test files**: This is used when you want to locate the duplicate
    code fragments in the test files that you created for the project. This can be
    handy when you have a large number of test cases (PHPUnit test cases, to be precise).'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目测试文件**：当你想要定位为项目创建的测试文件中的重复代码片段时，可以使用此功能。当你有大量的测试用例（具体来说是PHPUnit测试用例）时，这会很有用。'
- en: '**Open files**: When you need to select the open files in the editor, PhpStorm
    will set the scope of duplicate search as the open files only.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开的文件**：当你需要选择编辑器中的打开文件时，PhpStorm会将重复搜索的范围设置为仅限于打开的文件。'
- en: '**Module**: When you want to analyze the non-project files, such as the libraries
    or the software development kits (SDKs), PhpStorm provides you with a facility
    by allowing this option.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**：当你想要分析非项目文件，如库或软件开发工具包（SDK）时，PhpStorm通过允许此选项为你提供便利。'
- en: '**Current file**: When you are quite sure that you want only the file that
    is currently open and is being actively viewed, PhpStorm provides you with this
    feature.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前文件**：当你非常确定只想查看当前打开并正在积极查看的文件时，PhpStorm为你提供此功能。'
- en: '**Selected files**: When you need to select a few files from the Project view,
    PhpStorm will set the scope of duplicate search as the selected files only.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选定的文件**：当你需要从项目视图中选择几个文件时，PhpStorm会将重复搜索的范围设置为仅限于选定的文件。'
- en: '**Changed files**: Being an experienced professional, you might need to review
    the code written by fellow developers. This option comes in handy for files that
    are changed and are yet to be committed to the code repository.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已更改的文件**：作为一名经验丰富的专业人士，你可能需要审查其他开发者编写的代码。此选项对于已更改但尚未提交到代码库的文件非常有用。'
- en: '**Default**: This is used when you want to look for possible duplicates in
    the default change list for the changes to be put into the code repository.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认**：当你想要在代码库更改的默认更改列表中查找可能的重复项时使用此选项。'
- en: Note
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can separately include or exclude the test sources for the duplicate analysis.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以单独包含或排除重复分析中的测试源。
- en: Code duplication analysis settings define the sensitivity of the search and
    set limitations that help avoid reporting about every similar code construct.
    The following screenshot shows the code duplicate analysis settings:![How to do
    it…](img/3878OT_09_12.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码重复分析设置定义了搜索的敏感性，并设置限制以帮助避免报告每个类似的代码结构。以下截图显示了代码重复分析设置：![如何操作…](img/3878OT_09_12.jpg)
- en: You can anonymize the functions, variables, and literals to save the memory
    heap.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以将函数、变量和字面量匿名化以节省内存堆。
- en: PhpStorm can be told to limit the duplication analysis settings to dig only
    that block of code that is bigger than a particular size. The default size is
    10.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以指示PhpStorm将重复分析设置限制为仅挖掘大于特定大小的代码块。默认大小为10。
- en: How it works…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: 'The answer to this question is honestly! Code duplication works honestly and
    finds out the duplications in code. So, after you invoke the duplicate code finder,
    it finds the occurrences in the file that have duplicate code. The duplicate code
    block is found out on the basis of the filtering that you specified in the settings
    (see the *How to do it…* section), as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案很诚实！代码重复检测是诚实的，并找出代码中的重复。因此，在你调用重复代码查找器后，它会找到文件中具有重复代码的实例。重复代码块是基于你在设置中指定的过滤条件（请参阅*如何操作…*部分）找到的，如下面的截图所示：
- en: '![How it works…](img/3878OT_09_13.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_13.jpg)'
- en: There's more...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The concept of duplication in code needs to be understood quite clearly to
    have an insight into the working of the duplication analysis. When is a block
    of code eligible to be termed as duplicate? The answer: when there are plural
    instances of the same lines of code rewritten for different purposes. Due to the
    pressure from the business end, you might get a feeling that your task will be
    completed in time if you copy and paste the same code for various tasks, but PhpStorm
    frowns on this attitude. Whenever code gets repeated, the *DRY* principle gets
    violated. Whenever the DRY principle gets violated, software engineering demands
    you to ensure code reusability. The most common way is to write classes and methods
    appropriately. Since PhpStorm is a great soldier fighting to keep the principles
    of software engineering upright, to ensure this cause, the duplication analysis
    lists all such occurrences in a dedicated code duplication window.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 需要清楚地理解代码重复的概念，以便深入了解重复分析的工作原理。何时可以将代码块称为重复？答案是：当有多个相同代码行被重写用于不同目的时。由于业务端的压力，你可能会觉得如果你为各种任务复制粘贴相同的代码，你的任务将能够按时完成，但PhpStorm对此态度表示反对。每当代码重复时，*DRY*原则就会被违反。每当DRY原则被违反时，软件工程要求你确保代码的可重用性。最常见的方法是适当地编写类和方法。由于PhpStorm是维护软件工程原则的伟大战士，为了确保这一事业，重复分析会在一个专门的代码重复窗口中列出所有此类发生的情况。
- en: Code formatting and arrangement
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码格式化和排列
- en: A PhpStorm cookbook author says, "Merely writing code does not make you a software
    engineering warrior—an engineer becomes a Ninja when the code works and the person
    on the adjacent seat can make some sense out of it."
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一位PhpStorm食谱作者说：“仅仅编写代码并不能让你成为软件工程战士——一个工程师只有在代码运行良好，并且相邻的人能从中理解一些东西时，才能成为忍者。”
- en: People might argue over this statement's validity. But since there is a general
    trend among engineers to develop dissatisfaction from their jobs, it becomes quite
    important for you, the senior software developer in the team, to have control
    over the way the code is written. Of course, it is your responsibility!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能会对这个陈述的有效性提出异议。但鉴于工程师中普遍存在对工作不满的趋势，对于你这样的团队高级软件开发人员来说，控制代码的编写方式变得非常重要。当然，这是你的责任！
- en: How to do it…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: When you have got the determination to ensure that the written code has to be
    properly formatted, you need to select **Code** | **Reformat Code** from the main
    menu.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你下定决心确保所写的代码必须格式正确时，你需要从主菜单中选择**代码** | **重新格式化代码**。
- en: Like always, there will be a pop-up window for you to make selections. Quite
    happily, you can do wonders with this pop-up window, which is shown in the following
    screenshot:![How to do it…](img/3878OT_09_14.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同往常一样，将弹出一个窗口供你进行选择。非常高兴的是，你可以利用这个弹出窗口做些奇妙的事情，如下面的截图所示：![如何做…](img/3878OT_09_14.jpg)
- en: 'The default selection will format the currently selected file. Perform the
    following steps to obtain the required results:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认选择将格式化当前选定的文件。执行以下步骤以获得所需的结果：
- en: If you select text, PhpStorm will format the selected text only if the **Selected
    text** option is provided.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你选择了文本，PhpStorm只有在提供了**所选文本**选项的情况下才会格式化所选文本。
- en: You can select all files in a particular folder when you select all files in
    the **...** option. You can select the subdirectories inside the selected directory
    by selecting the checkbox adjacent to **Include subdirectories**.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在**...**选项中选择所有文件时，你可以选择特定文件夹中的所有文件。通过选择**包含子目录**旁边的复选框，你可以选择所选目录内的子目录。
- en: You can **Optimize imports** by removing the imports that are not required by
    the code.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过移除代码中不需要的导入来**优化导入**。
- en: You can rearrange the import entries in the target code by selecting the **Rearrange
    entries** option. **Rearrange entries** will rearrange the order in which the
    elements in the code will appear.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过选择**重新排列条目**选项来在目标代码中重新排列导入条目。**重新排列条目**将重新排列代码中元素出现的顺序。
- en: You can also reformat only the text that has been changed from Subversion by
    selecting **Only VCS changed text**.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过选择**仅VCS更改的文本**来仅重新格式化由Subversion更改的文本。
- en: On selecting the **Run** button, the code formatting process does its work.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择**运行**按钮后，代码格式化过程开始工作。
- en: How it works…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The formatting system works by respecting the settings you have specified in
    **Code style** | **PHP**. You can control **Tabs and Indents** by selecting the
    tab, as shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化系统通过尊重您在**代码样式** | **PHP**中指定的设置来工作。您可以通过选择选项卡来控制**制表符和缩进**，如下面的截图所示：
- en: '![How it works…](img/3878OT_09_15.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_15.jpg)'
- en: 'The spaces to be given in the code are controlled by the **Spaces** tab in
    the **Settings** panel, as shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中要提供的空格是由**设置**面板中的**空格**选项卡控制的，如下面的截图所示：
- en: '![How it works…](img/3878OT_09_16.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_16.jpg)'
- en: The wrappings and braces in the code are controlled by the **Wrapping and Braces**
    tab, as shown in the following screenshot. This tab specifies where the text will
    be wrapped in the code and where the braces will be formatted in the target code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的包裹和括号是由**包裹和括号**选项卡控制的，如下面的截图所示。此选项卡指定了文本在代码中将如何换行，以及括号在目标代码中将如何格式化。
- en: '![How it works…](img/3878OT_09_17.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_17.jpg)'
- en: 'The blank lines are inserted at appropriate places in the code when the specifications
    are made in the **Blank Lines** tab, as shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当在**空白行**选项卡中进行设置时，代码中会适当地插入空白行，如下面的截图所示：
- en: '![How it works…](img/3878OT_09_18.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_18.jpg)'
- en: The PHPDoc can be formatted as well.. Remember this setting?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: PHPDoc 也可以进行格式化。还记得这个设置吗？
- en: '![How it works…](img/3878OT_09_19.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_19.jpg)'
- en: 'Code formatting involves miscellaneous settings available under the **Other**
    tab. This provides the general settings that are not categorized under other categories.
    The settings behind the code formatting found under the **Other** tab are shown
    in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 代码格式化涉及在**其他**选项卡下可用的各种设置。这提供了不属于其他类别的通用设置。以下截图显示了**其他**选项卡下找到的代码格式化设置：
- en: '![How it works…](img/3878OT_09_20.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_20.jpg)'
- en: 'The arrangement of class members gets driven by the settings available under
    the **Arrangement** tab. The order in which the elements in the code are to be
    arranged is available under this tab. You can save the settings with the **Manage**
    button and can use it in other projects as well. If you already are in that "other"
    project, you need to select the text in blue **Set from...** to select the already-set
    formatting rule, as shown in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 类成员的排列是由**排列**选项卡下的设置驱动的。代码中元素排列的顺序可以在该选项卡下找到。您可以使用**管理**按钮保存设置，并在其他项目中使用它。如果您已经在那个“其他”项目中，您需要选择蓝色文本**从...设置**以选择已设置的格式规则，如下面的截图所示：
- en: '![How it works…](img/3878OT_09_21.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3878OT_09_21.jpg)'
- en: All done. Happy code formatting!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 所有工作都已完成。祝您代码格式化愉快！
- en: As a last word before leaving the kitchen, we, the authors, want to state that
    since knowledge is something that always keeps evolving, you, the (senior) software
    developer should not limit yourself to a limited set of knowledge resources. As
    an implementation of this rule, we plan to work on adding many more recipes that
    definitely were skipped due to deadline limitations. You can continue to follow
    the updates in the PhpStorm community; in the meantime, the authors will continue
    to work on PhpStorm to bring out more interesting and tasty dishes for you.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在离开厨房之前，我们，作为作者，想声明，由于知识总是在不断演变，因此作为（高级）软件开发者，您不应该将自己限制在有限的知识资源中。作为这一规则的体现，我们计划添加更多因截止日期限制而被跳过的食谱。您可以在PhpStorm社区中继续关注更新；同时，作者们将继续致力于PhpStorm，为您带来更多有趣和美味的佳肴。
- en: This is not the end, but the beginning of something more and something that
    is of the type *NeverBefore*. PhpStorm rocks!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是结束，而是更多和**前所未有**类型事物的开始。PhpStorm很棒！
