- en: Chapter 3. Frontend Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章 前端开发
- en: So far, we have focused on the theory behind Magento, its architecture, and
    getting familiar with the common and important concepts of everyday Magento development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直专注于 Magento 的理论、其架构以及熟悉日常 Magento 开发的常见和重要概念。
- en: In this chapter, we will give practical use to the skills and knowledge we have
    acquired so far by incrementally building a Magento extension for our frontend.
    We will build a fully functional gift registry extension.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过逐步构建一个用于我们前端的前端 Magento 扩展来实际应用我们迄今为止获得的技能和知识。我们将构建一个功能齐全的礼品登记册扩展。
- en: Extending Magento
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Magento
- en: Before jumping ahead and building our extension, let's define an example scenario
    and a scope for our extension. This way, we will have a clear idea of what we
    are building, and more importantly, what we are not building.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们跳过并构建我们的扩展之前，让我们定义一个示例场景和扩展的范围。这样，我们将清楚地了解我们正在构建的内容，更重要的是，我们不是在构建什么。
- en: Scenario
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景
- en: Our scenario is simple. We want to extend Magento to allow customers to create
    gift registry lists and share them with their friends and families. Customers
    should be able to create multiple gift registries and specify the recipients of
    those gift registries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的场景很简单。我们希望扩展 Magento，允许客户创建礼品登记册列表并与他们的朋友和家人分享。客户应该能够创建多个礼品登记册并指定这些登记册的收件人。
- en: 'A gift registry will hold the following information:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 礼品登记册将包含以下信息：
- en: Event type
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动类型
- en: Event name
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动名称
- en: Event date
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动日期
- en: Event location
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动地点
- en: List of products
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品列表
- en: Features
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能
- en: 'Have a look at the following features:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下功能：
- en: A store administrator can define multiple event types (birthdays, weddings,
    and gift registries)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 店铺管理员可以定义多种活动类型（生日、婚礼和礼品登记册）
- en: Create events and assign multiple gift registry lists to each event
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建事件并将多个礼品登记册列表分配给每个事件
- en: Customers can add products to their registries from the cart, wish list, or
    directly from the product pages
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以从购物车、愿望清单或直接从产品页面将产品添加到他们的登记册中
- en: Customers can have multiple gift registries
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以有多个礼品登记册
- en: People can share their registries with friends and family through e-mail and/or
    a direct link
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人们可以通过电子邮件和/或直接链接与朋友和家人分享他们的登记册
- en: Friends and family can buy the items from the gift registry
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 朋友和家人可以从礼品登记册购买商品
- en: Further improvements
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步改进
- en: 'The following is a list of possible features that have been left out of this
    example extension due to their complexity, or in the case of social media, due
    to the fact that their APIs and the amount of social media platforms is ever changing.
    However, they are still a good challenge for readers who want to extend this module
    event further. These features are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个列表，其中包含由于复杂性或社交媒体（由于它们的 API 和社交媒体平台数量不断变化）而被排除在这个示例扩展之外的可能功能。然而，它们仍然是希望进一步扩展此模块的读者的好挑战。以下功能如下：
- en: Social media integration
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交媒体集成
- en: Keep track of the request and fulfilled quantities for each registry item
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪每个登记册商品的请求和完成数量
- en: Specify multiple and different registry owners
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定多个不同的登记册所有者
- en: Delivery to the registry owner's address
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将商品递送到登记册所有者的地址
- en: Hello Magento!
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嗨，Magento！
- en: In previous chapters, we learned about the Magento code pools (core, community,
    and local). As we don't intend to distribute our module on Magento Connect, we
    will create it under the local directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了 Magento 代码池（核心、社区和本地）。由于我们不打算在 Magento Connect 上分发我们的模块，我们将在本地目录下创建它。
- en: All Magento modules are kept inside packages or namespaces. For example, all
    the core Magento modules are kept under the `Mage` namespace. For the purpose
    of this book, we will use **Magento Developer's Guide** (**Mdg**).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Magento 模块都保存在包或命名空间中。例如，所有核心 Magento 模块都保存在 `Mage` 命名空间下。为了本书的目的，我们将使用 **Magento
    开发者指南**（**Mdg**）。
- en: The Magento naming convention for modules is `Namespace_Modulename`
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 对模块的命名约定是 `Namespace_Modulename`
- en: Our next step is to create the module structure and configuration files. We
    need to create a "namespace" directory under `app/code/local/`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是创建模块结构和配置文件。我们需要在 `app/code/local/` 下创建一个 "命名空间" 目录。
- en: The namespace can be anything you like. The accepted convention is to use the
    company name or the author name as the namespace. So, our first step will be to
    create the directory `app/code/local/Mdg/`. This directory will hold not only
    our gift registry module, but any future modules we develop.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间可以是任何你喜欢的。接受的约定是使用公司名称或作者名称作为命名空间。因此，我们的第一步是创建`app/code/local/Mdg/`目录。这个目录不仅将包含我们的礼品注册模块，还将包含我们未来开发的任何模块。
- en: Under our namespace directory, we will also need to create a new directory with
    the name of our module which will hold all the code of a custom extension.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的命名空间目录下，我们还需要创建一个以我们的模块命名的新的目录，该目录将包含所有自定义扩展的代码。
- en: 'So let''s go ahead and create a `Giftregistry` directory. Once that is done,
    let''s create the rest of our directory structure located at `/app/code/local/Mdg/Giftregistry/`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续创建一个`Giftregistry`目录。一旦完成，让我们创建位于`/app/code/local/Mdg/Giftregistry/`的其余目录结构。
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Magento is a bit sensitive to the use of camel casing due to its use of factory
    methods. In general, it's a good idea to avoid using camel casing in our module/controller/action
    names. For more information on Magento naming conventions, please see the Appendices
    of this book.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Magento使用工厂方法，它对驼峰式命名法的使用比较敏感。一般来说，在我们的模块/控制器/动作名称中避免使用驼峰式命名法是一个好主意。有关Magento命名约定的更多信息，请参阅本书附录。
- en: 'As we have learned so far, Magento uses XML files as a central part of its
    configuration. In order for a module to be recognized and activated by Magento,
    we need to create a single file under `app/etc/modules/` following the `Namespace_Modulename.xml`
    convention. Let''s create our file located at `app/etc/modules/Mdg_Giftregistry.xml`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，Magento使用XML文件作为其配置的核心部分。为了使一个模块能被Magento识别和激活，我们需要在`app/etc/modules/`目录下创建一个遵循`Namespace_Modulename.xml`约定的单个文件。让我们创建位于`app/etc/modules/Mdg_Giftregistry.xml`的文件：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After creating this file or making any changes to our module configuration
    files, we will need to refresh the Magento configuration cache:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建此文件或对我们的模块配置文件进行任何更改后，我们需要刷新Magento配置缓存：
- en: Navigate to the Magento backend.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Magento后端。
- en: Go to the **System** | **Cache Management** menu.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**系统** | **缓存管理**菜单。
- en: Click on **Flush Magento Cache**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**清除Magento缓存**。
- en: 'As we are working on a development extension and are going to make frequent
    changes to the configuration and extension code, it is a good idea to disable
    the cache as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在开发扩展，并且将频繁更改配置和扩展代码，禁用缓存是一个好主意：
- en: Navigate to the Magento backend.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Magento后端。
- en: Go to the **System** | **Cache Management** menu.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**系统** | **缓存管理**菜单。
- en: Select all the checkboxes under **Cache Type**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**缓存类型**下选择所有复选框。
- en: Select **Disable** from the **Actions** drop-down menu.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**操作**下拉菜单中选择**禁用**。
- en: Click on the **Submit** button.![Hello Magento!](img/4195OS_03_02.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**按钮。![Hello Magento!](img/4195OS_03_02.jpg)
- en: Once we have cleared the cache, we can confirm that our extension is active
    by going into the Magento backend's **System** | **Advanced** section and confirming
    our new module is shown on the list.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们清除了缓存，我们可以通过进入Magento后端的**系统** | **高级**部分并确认我们的新模块显示在列表中来确认我们的扩展已被激活。
- en: '![Hello Magento!](img/4195OS_03_01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Hello Magento!](img/4195OS_03_01.jpg)'
- en: Magento now knows about our module, but we haven't told Magento what our module
    is supposed to do. For that, we will need to set up the module configuration.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Magento现在知道我们的模块了，但我们还没有告诉Magento我们的模块应该做什么。为此，我们需要设置模块配置。
- en: The XML module configuration
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML模块配置
- en: 'There are two main files involved in a module configuration, `config.xml` and
    `system.xml`. In addition to these, module configuration is also stored in the
    following files:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模块配置涉及两个主要文件，`config.xml`和`system.xml`。除了这些，模块配置还存储在以下文件中：
- en: '`api.xml`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api.xml`'
- en: '`adminhtml.xml`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adminhtml.xml`'
- en: '`cache.xml`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache.xml`'
- en: '`widget.xml`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`widget.xml`'
- en: '`wsdl.xml`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsdl.xml`'
- en: '`wsi.xml`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsi.xml`'
- en: '`convert.xml`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`convert.xml`'
- en: 'In this chapter, we will only focus on `config.xml`. Let''s create our base
    file and break down each of the nodes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将只关注`config.xml`。让我们创建我们的基本文件，并分解每个节点：
- en: Start by creating the `config.xml` file under our module `etc/` directory.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在我们的模块`etc/`目录下创建`config.xml`文件。
- en: 'Copy the given code to `config.xml`, located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将给定的代码复制到位于`app/code/local/Mdg/Giftregistry/etc/config.xml`的`config.xml`文件中：
- en: '[PRE2]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All module configurations are contained inside the `<config>` node. Inside this
    node, we have the `<global>` and `<modules>` nodes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所有模块配置都包含在 `<config>` 节点内。在这个节点内，我们有 `<global>` 和 `<modules>` 节点。
- en: The `<modules>` node is just used to specify the current module version, which
    is later used to decide which installation and upgrade scripts to run.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`<modules>` 节点仅用于指定当前模块版本，该版本随后用于决定要运行哪些安装和升级脚本。'
- en: 'There are three main configuration nodes that are most commonly used to specify
    the configuration scope:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个主要的配置节点，最常用于指定配置范围：
- en: '`<global>`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<global>`'
- en: '`<adminhtml>`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<adminhtml>`'
- en: '`<frontend>`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<frontend>`'
- en: 'For now, we will be working on the `<global>` scope. This will make any configuration
    available to both the Magento frontend and backend. Under the `<global>` node,
    we have the following nodes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于 `<global>` 范围。这将使任何配置对 Magento 前端和后端都可用。在 `<global>` 节点下，我们有以下节点：
- en: '`<models>`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<models>`'
- en: '`<blocks>`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<blocks>`'
- en: '`<helpers>`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<helpers>`'
- en: '`<resources>`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<resources>`'
- en: 'As we can see, each node follows the same configuration pattern:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，每个节点遵循相同的配置模式：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Each of the nodes is used by the Magento class **factories** to instantiate
    our custom objects. The `<factory_alias>` node is a critical part of our extension
    configuration; it is used by factory methods such as `Mage::getModel()` or `Mage::helper()`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点都由 Magento 类 **factories** 用于实例化我们的自定义对象。`<factory_alias>` 节点是我们的扩展配置的关键部分；它被工厂方法如
    `Mage::getModel()` 或 `Mage::helper()` 使用。
- en: Notice that we are not defining each specific **Model**, **Block**, or **Helper**,
    just the path where Magento factories can find them. The Magento naming convention
    allows us to have any folder structure under each of these folders and Magento
    will be smart enough to load the appropriated class.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们并没有定义每个具体的 **Model**、**Block** 或 **Helper**，只是 Magento 工厂可以找到它们的路径。Magento
    的命名约定允许我们在每个这些文件夹下有任意文件夹结构，并且 Magento 足够智能，能够加载适当的类。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Magento, class names and directory structures are one and the same.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Magento 中，类名和目录结构是相同的。
- en: 'For example, we could have created a new model class under `app/code/local/Mdg/Giftregistry/Models/Folder1/Folder2/Folder3`
    and the factory name to instantiate an object from this class would be as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在 `app/code/local/Mdg/Giftregistry/Models/Folder1/Folder2/Folder3` 下创建一个新的模型类，并且实例化这个类的工厂名称如下：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's create our first model, or to be more specific, our helper class. Helpers
    are used to contain utility methods used to perform common tasks and can be shared
    among different classes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个模型，或者更具体地说，我们的辅助类。辅助类用于包含执行常见任务的实用方法，并且可以在不同的类之间共享。
- en: 'Let''s go ahead and create an empty helper class at `app/code/loca/Mdg/Giftregistry/Helper/Data.php`
    (we will add the helper logic later in this chapter):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在 `app/code/loca/Mdg/Giftregistry/Helper/Data.php` 创建一个空的辅助类（我们将在本章后面添加辅助逻辑）：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It may seem odd that we are naming our helper `Data`, but this is actually part
    of Magento standards. Each module has a default helper class named `Data`. Another
    interesting thing with helpers is that they can just pass `<factory_alias>` without
    a class-specific class name to the `helper` factory method and this will default
    to the `Data` helper class.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的辅助类命名为 `Data` 可能看起来有些奇怪，但实际上这是 Magento 标准的一部分。每个模块都有一个默认的辅助类名为 `Data`。关于辅助类还有一个有趣的事情，它们可以直接传递
    `<factory_alias>` 而不是特定类的名称给 `helper` 工厂方法，这将默认为 `Data` 辅助类。
- en: 'So, if we wanted to instantiate our default helper class, we only need to do
    the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想实例化我们的默认辅助类，我们只需要做以下操作：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Models and saving data
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型和保存数据
- en: 'Before jumping straight to creating our models, we need to define clearly what
    type of models we are going to build and how many. So let''s review our example
    scenario. For our gift registry, it appears that we will need two different models,
    which are as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在直接创建我们的模型之前，我们需要明确我们要构建什么类型的模型以及需要多少个。因此，让我们回顾我们的示例场景。对于我们的礼品注册，看起来我们需要两个不同的模型，如下所示：
- en: '**Registry model**: This is used to store the gift registry information such
    as gift registry type, address, and recipient information'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册模型**：用于存储礼品注册信息，例如礼品注册类型、地址和收件人信息'
- en: '**Registry item**: This is used to store the information of each of the gift
    registry items (for example, quantity requested, quantity bought, and product_id)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册项**：用于存储每个礼品注册项的信息（例如，请求的数量、购买的数量和产品 ID）'
- en: Although this approach is correct, it does not meet all the requirements of
    our example scenario. By having all the registry information stored in a single
    table, we cannot add more registry types without modifying the code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法是正确的，但它并不满足我们示例场景的所有要求。由于所有注册信息都存储在单个表中，我们无法在不修改代码的情况下添加更多注册类型。
- en: 'So, in this case, we need to break down our data into multiple tables:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，我们需要将我们的数据分解成多个表：
- en: '**Registry entity**: This is used to store the gift registry and event information'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册实体**：此用于存储礼品注册和活动信息'
- en: '**Registry type**: By storing the gift registry type into a separate table,
    we can add or remove event types'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册类型**：通过将礼品注册类型存储到单独的表中，我们可以添加或删除事件类型'
- en: '**Registry item**: This is used to store the information of each of the gift
    registry items (for example, quantity requested, quantity bought, and product_id)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册项**：此用于存储每个礼品注册项的信息（例如，请求的数量、购买的数量和product_id）'
- en: Now that we have defined our data structure, we can start building the corresponding
    models that will allow us to access and manipulate our data.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们的数据结构，我们可以开始构建相应的模型，这将使我们能够访问和操作我们的数据。
- en: Creating the models
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'Let''s start by creating the `Giftregistry` type model, which is used to manage
    the registry types (wedding, birthday, baby shower, and so on):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建`Giftregistry`类型模型，该模型用于管理注册类型（婚礼、生日、婴儿洗礼等）：
- en: Navigate to the `Model` folder in our module directory.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`文件夹。
- en: 'Create a new file named `Type.php` and copy the following contents into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Type.php`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Type.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Type.php`的文件中：
- en: '[PRE7]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We also need to create a resource class. Every Magento data model has its own
    resource class. It is also important to clarify that only models that handle the
    data directly, be it a simple data model or an EAV model, need to have a resource
    class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个资源类。每个Magento数据模型都有自己的资源类。同样重要的是要明确，只有直接处理数据的模型，无论是简单数据模型还是EAV模型，才需要具有资源类。
- en: Navigate to the `Model` folder in our module directory.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`文件夹。
- en: Create a new folder under `Model`, named `Resource`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Model`下创建一个新的文件夹，命名为`Resource`。
- en: 'Create a new file named `Type.php` and copy the following content into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Type.php`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Type.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Resource/Type.php`的文件中：
- en: '[PRE8]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, we will also need a `collection` class to retrieve all the available
    event types. Perform the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还需要一个`collection`类来检索所有可用的活动类型。执行以下步骤：
- en: Navigate to the `Model`/`Resource` folder in our module directory.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`/`Resource`文件夹。
- en: Create a new folder named `Type`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Type`的新文件夹。
- en: 'Create a new file named `Collection.php` in the `Type` folder and copy the
    following content into the file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Type/Collection.php`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Type`文件夹中创建一个名为`Collection.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Resource/Type/Collection.php`的文件中：
- en: '[PRE9]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's do the same and create another model to handle the gift registry items.
    This model will hold all the relevant product information for the registry items.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做同样的事情，创建另一个模型来处理礼品注册项。此模型将包含注册项的所有相关产品信息。
- en: Navigate to the `Model` folder in our module directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`文件夹。
- en: 'Create a new file named `Item.php` and copy the following content into the
    file located at`app/code/local/Mdg/Giftregistry/Model/Item.php`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Item.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Item.php`的文件中：
- en: '[PRE10]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s go ahead and create the resource class:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建资源类：
- en: Navigate to the `Model` folder in our module directory.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`文件夹。
- en: Open the `Resource` folder.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Resource`文件夹。
- en: 'Create a new file named `Item.php` and copy the following content into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Item.php`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Item.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Resource/Item.php`的文件中：
- en: '[PRE11]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, let''s create the corresponding collection class:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建相应的集合类：
- en: Navigate to the `Model`/`Resource` folder in our module directory.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`/`Resource`文件夹。
- en: Create an `Item` folder.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Item`文件夹。
- en: 'Create a new file named `Item`/`Collection.php` and copy the following content
    into the file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Item/Collection.php`:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Item`/`Collection.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Resource/Item/Collection.php`的文件中：
- en: '[PRE12]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Our next step will be to create our `registry` entity. This is the core of
    our registry and is the model that ties everything together. Perform the following
    steps:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的步骤将是创建我们的`registry`实体。这是我们的注册核心，也是将所有内容联系在一起的模式。执行以下步骤：
- en: Navigate to the `Model` folder in our module directory.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`文件夹。
- en: 'Create a new file named `Entity.php` and copy the following content into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Entity.php`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Entity.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Entity.php`的文件中：
- en: '[PRE13]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s go ahead and create the resource class:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建资源类：
- en: Navigate to the `Model` folder in our module directory.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`文件夹。
- en: Open the `Resource` folder.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Resource`文件夹。
- en: 'Create a new file named `Entity.php` and copy the following content into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Entity.php`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Entity.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Resource/Entity.php`的文件中：
- en: '[PRE14]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, let''s create the corresponding collection class:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建相应的集合类：
- en: Navigate to the `Model`/`Resource` folder in our module directory.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的`Model`/`Resource`文件夹。
- en: Create a new folder named `Entity`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Entity`的新文件夹。
- en: 'Create a new file named `Entity`/`Collection.php` and copy the following content
    into the file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Entity/Collection.php`:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Entity`/`Collection.php`的新文件，并将以下内容复制到位于`app/code/local/Mdg/Giftregistry/Model/Resource/Entity/Collection.php`的文件中：
- en: '[PRE15]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So far, we haven't done more than blindly create new models by copying code
    and adding classes to our module. Now, let's test our newly created models.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是盲目地通过复制代码和添加类到我们的模块中创建了新的模型。现在，让我们测试我们新创建的模型。
- en: In the previous version of this book, we were using **Interactive Magento Console**
    (**IMC**) to test code on the fly. Nowadays, the community has built a much more
    powerful tool that not only allows us to test code interactively, but also to
    run common and useful commands right from the shell. This tool is called **Netz98/n98-magerun**.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的先前版本中，我们使用**交互式Magento控制台**（**IMC**）来即时测试代码。如今，社区已经构建了一个功能更强大的工具，它不仅允许我们交互式地测试代码，还可以直接从shell运行常见和有用的命令。这个工具被称为**Netz98/n98-magerun**。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This Netz98/n98-magerun tool can be downloaded at [https://github.com/netz98/n98-magerun](https://github.com/netz98/n98-magerun).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Netz98/n98-magerun工具可以在[https://github.com/netz98/n98-magerun](https://github.com/netz98/n98-magerun)下载。
- en: 'Let''s fire up the `dev` console and try out the new models by running the
    following command in the root of our Magento installation:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动`dev`控制台，并通过在Magento安装根目录下运行以下命令来尝试新的模型：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following code assumes you are running a Magento test installation with
    sample data:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码假设你正在运行一个带有示例数据的Magento测试安装：
- en: 'We will start by loading the `customer` model:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从加载`customer`模型开始：
- en: '[PRE17]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we need to instantiate a new registry object:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要实例化一个新的注册对象：
- en: '[PRE18]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'One handy function that is part of all Magento models is the `getData()` function,
    which returns an array of all the object attributes. Let''s run this function
    on both the `registry` and `customer` objects, and compare the output:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有Magento模型都包含的一个方便的函数是`getData()`函数，它返回一个包含所有对象属性的数组。让我们在`registry`和`customer`对象上运行这个函数，并比较输出：
- en: '[PRE19]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You may notice that the customer has all the datasets for our John Doe example
    record, while the `registry` object returns a completely empty array. Let''s change
    this by running the following code:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会注意到，客户拥有我们John Doe示例记录的所有数据集，而`registry`对象返回一个完全空的数组。让我们通过运行以下代码来改变这一点：
- en: '[PRE20]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let''s try to print the `registry` data one more time by running the following:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们再次尝试通过运行以下代码来打印`registry`数据：
- en: '[PRE21]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, to make our changes permanent, we need to call the model''s `save()`
    function:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了使我们的更改永久生效，我们需要调用模型的`save()`函数：
- en: '[PRE22]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And oops! Something went wrong when saving the product. We got the following
    error in the console:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！保存产品时出了点问题。我们在控制台得到了以下错误：
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: What happened? The `save()` function that is being called is part of the parent
    class `Mage_Core_Model_Resource_Abstract`, which in turn calls the abstract class'
    `save()` function, but we are missing a critical part of our `config.xml` file.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？正在调用的 `save()` 函数是父类 `Mage_Core_Model_Resource_Abstract` 的一部分，它反过来调用抽象类的
    `save()` 函数，但我们遗漏了 `config.xml` 文件的一个关键部分。
- en: 'In order for Magento to properly identify which resource class to use, we need
    to specify the resource model class and the matching table for each entity. Let''s
    go ahead and update our configuration file:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Magento 正确识别要使用哪个资源类，我们需要为每个实体指定资源模型类和匹配的表。让我们继续更新我们的配置文件：
- en: Navigate to the extension `etc/` folder.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到扩展 `etc/` 文件夹。
- en: Open `config.xml`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `config.xml`。
- en: 'Update the `<models>` node located at `app/code/local/Mdg/Giftregistry/etc/config.xml`
    with the following code:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新位于 `app/code/local/Mdg/Giftregistry/etc/config.xml` 的 `<models>` 节：
- en: '[PRE24]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, before we can actually save a product to the database, we have to create
    our database tables first. Next, we will learn how to use setup resources to create
    our table structure and set our default data.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们实际上将产品保存到数据库之前，我们必须首先创建我们的数据库表。接下来，我们将学习如何使用设置资源来创建我们的表结构并设置默认数据。
- en: Setup resources
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置资源
- en: Now that we have created our model code, we need to create setup resources in
    order to be able to save them. The setup resources will take care of creating
    the corresponding database tables. Now, we could just use straight **SQL** or
    a tool such as **phpmyadmin** to create all the tables. However, this is not the
    standard practice and by general rule, we should never modify the Magento database
    directly.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的模型代码，我们需要创建设置资源以便能够保存它们。设置资源将负责创建相应的数据库表。现在，我们本可以使用直接的 **SQL** 或如
    **phpmyadmin** 这样的工具来创建所有表。然而，这不是标准做法，并且按照一般规则，我们绝对不应该直接修改 Magento 数据库。
- en: 'To achieve this, we will do the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将执行以下操作：
- en: Define a setup resource on our configuration file
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配置文件上定义设置资源
- en: Create a resource class
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建资源类
- en: Create an installer script
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建安装脚本
- en: Create a data script
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据脚本
- en: Create an upgrade script
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建升级脚本
- en: Defining a setup resource
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义设置资源
- en: 'When we first defined our configuration file, we defined a `<resources>` node,
    which is located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们最初定义配置文件时，我们定义了一个 `<resources>` 节点，它位于 `app/code/local/Mdg/Giftregistry/etc/config.xml`：
- en: '[PRE25]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The first thing to notice is that `<mdg_giftregistry_setup>` is used as a unique
    identifier for our setup resource. The standard naming convention is `<modulename_setup>`
    and while it is not required, it is highly recommend to follow this naming convention.
    Creating this setup resource is not required for basic setup scripts and `Mage_Core_Model_Resource_Setup`
    can be used instead, but by creating our own setup class, we are planning ahead
    and giving ourselves more flexibility for future improvements.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是 `<mdg_giftregistry_setup>` 被用作我们设置资源的唯一标识符。标准的命名约定是 `<modulename_setup>`，虽然这不是必需的，但强烈建议遵循此命名约定。创建此设置资源对于基本的设置脚本不是必需的，可以使用
    `Mage_Core_Model_Resource_Setup` 代替，但通过创建我们自己的设置类，我们是在为未来的改进做规划，并给自己提供更多的灵活性。
- en: Adding this resource node allows Magento to keep track of the versions and data
    of each of the extensions installed. We are going to use that functionality to
    our advantage and make an upgrade script to create the tables we need.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此资源节点允许 Magento 跟踪已安装的每个扩展的版本和数据。我们将利用这个功能，并创建一个升级脚本来创建我们需要的表。
- en: Creating the upgrade script
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建升级脚本
- en: 'Our next step is to create an upgrade script. This script contains all the
    SQL code to create our tables. First, let''s take another quick look at our `config.xml`
    file. If we remember, the first node defined before our `<global>` node was the
    `<modules>` node, which is located at`app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步要创建一个升级脚本。这个脚本包含了创建我们所需表的所有 SQL 代码。首先，让我们再次快速查看我们的 `config.xml` 文件。如果我们记得，在我们
    `<global>` 节之前定义的第一个节点是 `<modules>` 节，它位于 `app/code/local/Mdg/Giftregistry/etc/config.xml`：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As we mentioned before, this node is required on all Magneto modules and is
    used to identify the current installed version of our module. This version number
    is used by Magento to identify which installation and upgrade scripts to run.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，此节点在所有 Magneto 模块中都是必需的，用于标识当前安装的模块版本。这个版本号被 Magento 用于识别要运行哪些安装和升级脚本。
- en: Note
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: '**A word on naming conventions**: Since Magento 1.6, the setup script naming
    conventions have changed. Originally, the `mysql4-install-x.x.x.php` naming convention
    was used. It is currently deprecated but still supported.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于命名约定的一词**: 自 Magento 1.6 以来，设置脚本的命名约定已更改。最初使用的是 `mysql4-install-x.x.x.php`
    命名约定。它目前已被弃用但仍受支持。'
- en: 'Since Magento 1.6, the naming convention for the setup script has changed and
    now, developers can make use of three different script types:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Magento 1.6 以来，设置脚本的命名约定已更改，现在，开发者可以使用三种不同的脚本类型：
- en: '**Install**: This is used when the module is first installed and no record
    of it exists on the `core_resource` table'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**: 当模块首次安装且在 `core_resource` 表上没有记录时使用'
- en: '**Upgrade**: This is used if the version in the `core_resource` table is lower
    than the one in the `config.xml` file'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**升级**: 如果 `core_resource` 表中的版本低于 `config.xml` 文件中的版本，则使用此选项'
- en: '**Data**: This will run after the matching version install/upgrade script and
    is used to populate the tables with required data'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**: 这将在匹配版本的安装/升级脚本之后运行，并用于向表中填充所需数据'
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Data scripts were introduced in Magento 1.6 and are stored under the data/directory
    directly under our module's root. They follow a slightly different convention
    to the install and upgrade scripts, by adding the prefix.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 数据脚本自 Magento 1.6 以来被引入，并存储在我们的模块根目录下的 data 目录中。它们遵循与安装和升级脚本略有不同的约定，通过添加前缀。
- en: 'Let''s continue creating our registry entity table in our installation script,
    which is located at `app/code/local/Mdg/Giftregistry/sql/mdg_giftregistry_setup/upgrade-0.2.0-0.2.1.php`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在安装脚本中继续创建我们的注册实体表，该脚本位于 `app/code/local/Mdg/Giftregistry/sql/mdg_giftregistry_setup/upgrade-0.2.0-0.2.1.php`：
- en: '[PRE27]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that due to space constraints, we have not added the full installation
    script. You still need to add the installer code for the item and type tables.
    The full installation file and the code files can be downloaded directly at [https://github.com/amacgregor/mdg_giftreg](https://github.com/amacgregor/mdg_giftreg).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于空间限制，我们没有添加完整的安装脚本。您仍然需要为项目表和类型表添加安装器代码。完整的安装文件和代码文件可以直接在 [https://github.com/amacgregor/mdg_giftreg](https://github.com/amacgregor/mdg_giftreg)
    下载。
- en: Now that might look like a lot of code, but it is only creating one of the tables.
    In order to make sense of it, let's break it down and see exactly what the code
    does.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可能看起来像很多代码，但它只创建了一个表。为了理解它，让我们分解它并确切地看看代码做了什么。
- en: The first thing to notice is that even if we are creating and setting database
    tables, we are not writing any SQL. The Magento ORM provides an adapter with the
    database. All the installation, upgrade, and data scripts inherit from `Mage_Core_Model_Resource_Setup`.
    Let's break down each of the functions being used in our installation script.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要注意的是，即使我们在创建和设置数据库表，我们也没有编写任何 SQL。Magento ORM 提供了一个与数据库的适配器。所有的安装、升级和数据脚本都继承自
    `Mage_Core_Model_Resource_Setup`。让我们分析一下安装脚本中使用的每个函数。
- en: 'The first three lines of the script take off by instantiating both the `resource_setup`
    model and the connection. The rest of the script deals with setting up a new table
    instance and calls the following functions on it:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的前三行通过实例化 `resource_setup` 模型和连接开始。其余的脚本处理设置新的表实例，并在其上调用以下函数：
- en: '`addColumn`: This function is used to define each of the table columns and
    takes the following five parameters:'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addColumn`: 这个函数用于定义表中的每个列，并接受以下五个参数：'
- en: '`name`: This is the name of the column'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 这是列的名称'
- en: '`type`: This is the data storage type (`int`, `varchar`, `text`, and so on)'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`: 这是数据存储类型（`int`、`varchar`、`text` 等）'
- en: '`size`: This is the column''s length'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`: 这是列的长度'
- en: '`options`: This is an array of additional options for data storage'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`: 这是一个用于数据存储的附加选项数组'
- en: '`comment`: This is the column''s description'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment`: 这是列的描述'
- en: '`addIndex`: This function is used to define the indexes of a particular table
    and takes the following three parameters:'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addIndex`: 这个函数用于定义特定表的索引，并接受以下三个参数：'
- en: '`index`: This is the index''s name'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`: 这是索引的名称'
- en: '`columns`: This can be a string with a single column name or an array with
    multiple ones'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns`: 这可以是一个包含单个列名的字符串或一个包含多个列名的数组'
- en: '`options`: This is an array of additional options for data storage'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`: 这是一个用于数据存储的附加选项数组'
- en: '`addForeginKey`: This function is used to define foreign key relationships
    and it takes the following six parameters:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addForeginKey`: 这个函数用于定义外键关系，并接受以下六个参数：'
- en: '`fkName`: This is the foreign key''s name'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fkName`：这是外键的名称'
- en: '`column`: This is the foreign key column''s name'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column`：这是外键列的名称'
- en: '`refTable`: This is the reference table''s name.'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refTable`：这是参考表的名称。'
- en: '`refColumn`: This is the reference table column''s name.'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refColumn`：这是参考表列的名称。'
- en: '`onDelete`: This is the action to delete a row'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDelete`：这是删除行的操作'
- en: '`onUpdate`: This is the action to update a row'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onUpdate`：这是更新行的操作'
- en: 'The code creating each of our tables is basically composed of these three functions.
    After each table definition, the following code is executed:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们每个表的代码基本上由这三个函数组成。在每个表定义之后，执行以下代码：
- en: '[PRE28]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This code is telling our database adapter to convert our code into SQL and
    run it against the database. There is one important thing to notice. Instead of
    providing or hardcoding the database names, the following code is called:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉我们的数据库适配器将我们的代码转换为SQL并在数据库上运行它。有一个重要的事情要注意。我们不是提供或硬编码数据库名称，而是调用以下代码：
- en: '[PRE29]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is the table alias that we defined earlier inside our `config.xml` files.
    To finish our installer, we need to create a `newTable` instance for each of our
    entities. The data scripts can be used to populate our tables. In our case, this
    will come in handy to set up some base event types.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在`config.xml`文件中定义的表别名。为了完成我们的安装程序，我们需要为我们的每个实体创建一个`newTable`实例。数据脚本可以用来填充我们的表。在我们的案例中，这将非常有用，用于设置一些基本的事件类型。
- en: 'We will first need to create a data installation script under the data folder.
    As we mentioned before, the structure is very similar to the SQL folder, and the
    only difference is that we append the data prefix to the matching installation/upgrade
    script. Perform the following steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要在数据文件夹下创建一个数据安装脚本。正如我们之前提到的，结构非常类似于SQL文件夹，唯一的区别是我们将数据前缀附加到匹配的安装/升级脚本。执行以下步骤：
- en: Go to the module data folder by navigating to `app/code/local/Mdg/Giftregistry/data/`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到`app/code/local/Mdg/Giftregistry/data/`进入模块数据文件夹。
- en: Create a new directory based on the resource. In this case, it would be `mdg_giftregistry_setup`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据资源创建一个新的目录。在这种情况下，它将是`mdg_giftregistry_setup`。
- en: Under `mdg_giftregistry_setup`, create a file named `data-upgrade-0.2.0-0.2.1.php`.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mdg_giftregistry_setup`下创建一个名为`data-upgrade-0.2.0-0.2.1.php`的文件。
- en: 'Copy the following code into the `data-upgrade-0.2.0-0.2.1.php` located at
    `app/code/local/Mdg/Giftregistry/data/mdg_giftregistry_setup/data-upgrade-0.2.0-0.2.1.php
    <?php`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到位于`app/code/local/Mdg/Giftregistry/data/mdg_giftregistry_setup/data-upgrade-0.2.0-0.2.1.php
    <?php`的`data-upgrade-0.2.0-0.2.1.php`：
- en: '[PRE30]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s take a closer look at the last conditional block in the `data-install-0.1.0.php`
    script:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看`data-install-0.1.0.php`脚本中的最后一个条件块：
- en: '[PRE31]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, if we refresh our Magento installation, the error should be gone. If we
    take a closer look at the `mdg_giftregistry_type` table, we should see the following
    records:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们刷新我们的Magento安装，错误应该会消失。如果我们仔细查看`mdg_giftregistry_type`表，我们应该看到以下记录：
- en: '![Creating the upgrade script](img/4195OS_03_03.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![创建升级脚本](img/4195OS_03_03.jpg)'
- en: As we learned before, the installation and data scripts will run the first time
    our module is installed. However, what happens in our case when Magento already
    thinks our module is installed?
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所学的，安装和数据脚本将在我们的模块第一次安装时运行。然而，在我们的案例中，当Magento已经认为我们的模块已经安装时，会发生什么呢？
- en: As the module is already registered in the `core_resource` table, the installation
    scripts will not be run again unless Magento detects a version change in the extension.
    This is great to handle multiple releases of an extension but not very practical
    for development purposes.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块已经在`core_resource`表中注册，除非Magento检测到扩展的版本变化，否则安装脚本将不会再次运行。这对于处理扩展的多个版本非常好，但不太适合开发目的。
- en: 'Fortunately, it is easy to trick Magento into running our extension installation
    scripts again. We only have to delete the corresponding entry in the `core_resource`
    table:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，很容易欺骗Magento再次运行我们的扩展安装脚本。我们只需要删除`core_resource`表中的相应条目：
- en: Open your MySQL console. If you are using our Vagrant box, you can just open
    it by typing `mysql`.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的MySQL控制台。如果你使用我们的Vagrant盒子，你只需通过输入`mysql`来打开它。
- en: Once we are in the MySQL shell, we need to select our working database.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们进入MySQL shell，我们需要选择我们的工作数据库。
- en: 'Finally, we need to add the entry the `core_resource` table using the following
    query:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要使用以下查询添加`core_resource`表中的条目：
- en: '[PRE32]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: What we have learned
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们所学到的东西
- en: 'So far, we have learned the following:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学到了以下内容：
- en: To create the base directory structure for our Magento module
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了创建我们的Magento模块的基础目录结构
- en: The role and importance of the configuration files
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件的角色和重要性
- en: Creating models and setup resources
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型和设置资源
- en: The role and order of installation, upgrade, and data scripts
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装、升级和数据脚本的角色和顺序
- en: Setting up our routes
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的路由
- en: Now that we are capable of saving and manipulating the data by using our models,
    we need to provide a way for customers to interact with the actual gift registries.
    Our first step is to need to create valid routes or URLs for the frontend.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够通过使用我们的模型来保存和操作数据，我们需要提供一个让客户与实际的礼物登记册交互的方法。我们的第一步是创建前端的有效路由或URL。
- en: As are many things in Magento, this is controlled by the configuration file.
    A route will convert a URL into a valid controller, action, and method.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 就像许多在Magento中的事情一样，这由配置文件控制。一个路由会将URL转换为有效的控制器、动作和方法。
- en: 'Open our `config.xml` file and insert the following code, located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们的`config.xml`文件，并插入以下代码，位于`app/code/local/Mdg/Giftregistry/etc/config.xml`：
- en: '[PRE33]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s break down the configuration code we just added:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解我们刚刚添加的配置代码：
- en: '`<frontend>`: Previously, we added all the configurations inside the global
    scope. As we want our routes to only be available in the frontend, we need to
    declare our custom routes under the frontend scope.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<frontend>`: 之前，我们在全局范围内添加了所有配置。由于我们希望我们的路由仅在前端可用，因此我们需要在`frontend`作用域下声明我们的自定义路由。'
- en: '`<routers>`: This is the container tag that holds the configuration for our
    custom routes.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<routers>`: 这是一个容器标签，包含我们自定义路由的配置。'
- en: '`<mdg_giftregistry>`: The naming convention for this tag is to match the module
    name and is the unique identifier for our route.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<mdg_giftregistry>`: 这个标签的命名规范是为了与模块名称匹配，并且是我们路由的唯一标识符。'
- en: '`<frontName>`: As we learned in [Chapter 2](ch02.html "Chapter 2. ORM and Data
    Collections"), *ORM and Data Collections*, break down the URLs into the following
    sections: `http://localhost.com/frontName/actionControllerName/actionMethod/`.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<frontName>`: 正如我们在[第二章](ch02.html "第二章. ORM和数据集合")中学习的，*ORM和数据集合*，将URL分解为以下部分：`http://localhost.com/frontName/actionControllerName/actionMethod/`。'
- en: Once we have defined our route configuration, we need to create an actual controller
    to handle all the incoming requests.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了我们的路由配置，我们需要创建一个实际的控制器来处理所有传入的请求。
- en: IndexController
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IndexController
- en: 'Our first step is to create an `IndexController` under our module controllers
    directory. Magento will always try to load the `IndexController` if no controller
    name is specified, this is located at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是在我们的模块控制器目录下创建一个`IndexController`。如果没有指定控制器名称，Magento将始终尝试加载`IndexController`，它位于`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`：
- en: '[PRE34]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After creating our file, if we go to `http://localhost.com/giftregistry/index/index`,
    we should see a blank page with only the message `This is our test controller`.
    This is because we are not loading the layout. To properly load the layout of
    our customer controller, we need to change our action code to the following, which
    is located at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的文件后，如果我们访问`http://localhost.com/giftregistry/index/index`，我们应该看到一个空白页面，上面只有消息`This
    is our test controller`。这是因为我们没有加载布局。为了正确加载我们的客户控制器布局，我们需要将我们的动作代码更改为以下内容，该代码位于`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`：
- en: '[PRE35]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Before going into the details of what is happening in the controller action,
    let's create the rest of the controllers and corresponding actions.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨控制器动作的细节之前，让我们创建其余的控制器和相应的动作。
- en: We need a controller that takes care of the basic operations for customers so
    that they are able to create, manage, and delete their registries. Also, we require
    a `SearchController` so that family and friends can locate the matching gift registries.
    Finally, we require a `ViewController` to show the registry's details.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个控制器来处理客户的基本操作，以便他们能够创建、管理和删除他们的登记册。此外，我们还需要一个`SearchController`，以便家人和朋友可以找到匹配的礼物登记册。最后，我们还需要一个`ViewController`来显示登记册的详细信息。
- en: 'Our first step is to add the remaining actions to the `IndexController` located
    at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是将剩余的动作添加到位于`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`的`IndexController`：
- en: '[PRE36]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Before we start adding all the logic to the `IndexController`, we need to take
    an extra step to prevent customers who are not logged in from accessing the `giftregistry`
    functionality. The Magento Front Controller already has a very useful method for
    handling this; it's called the `preDispatch()` method that is executed before
    any other action in the controller.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始向`IndexController`添加所有逻辑之前，我们需要采取额外的一步来防止未登录的客户访问`giftregistry`功能。Magento前端控制器已经有一个非常实用的方法来处理这个问题；它被称为`preDispatch()`方法，它在控制器中的任何其他操作之前执行。
- en: 'Open your `IndexController.php` and add the following code to the beginning
    of the class located at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的`IndexController.php`文件，并将以下代码添加到位于`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`的类开头：
- en: '[PRE37]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now, if we try to load `http://localhost.com/giftregistry/index/index`, we will
    be redirected to the login page, unless we are logged into the frontend.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试加载`http://localhost.com/giftregistry/index/index`，除非我们在前端登录，否则我们将被重定向到登录页面。
- en: Our next step is to add all the logic to each of the controller actions so that
    the controller can properly handle creation, update, and deletion.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是为每个控制器操作添加所有逻辑，以便控制器可以正确地处理创建、更新和删除。
- en: The index, new, and edit actions are mostly used to load and render the layout
    so there is not much logic involved in the controller. The `newPostAction()`,
    `editPostAction()`, and the `deleteAction()` controllers, on the other hand, handle
    heavier and more complicated logic.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 索引、新建和编辑操作主要用于加载和渲染布局，因此在控制器中涉及到的逻辑并不多。另一方面，`newPostAction()`、`editPostAction()`和`deleteAction()`控制器处理更复杂和更重的逻辑。
- en: 'Let''s get started with the `newPostAction()` controller. This action is used
    to handle the data received from the `newAction()` form:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`newPostAction()`控制器开始。这个操作用于处理从`newAction()`表单接收到的数据：
- en: Open the `IndexController.php` file.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`IndexController.php`文件。
- en: 'The first thing we will add to the action is an `if` statement to check if
    the request is a `Post` request that we can retrieve by using the following code:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将要添加到操作中的第一件事是一个`if`语句，用来检查请求是否是一个可以通过以下代码检索的`Post`请求：
- en: '[PRE38]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In addition to this, we also want to check if the request has actual data.
    To do this, we can use the following code:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们还想检查请求是否有实际数据。为此，我们可以使用以下代码：
- en: '[PRE39]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once we have validated that the request is a proper request, and while we are
    receiving data, we need to actually create a gift registry. To do this, we must
    add a new function inside our registry model:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们验证了请求是一个合适的请求，并且在接收数据时，我们需要实际创建一个礼品注册。为此，我们必须在我们的注册模型中添加一个新函数：
- en: Open the registry `Entity` model.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开注册`Entity`模型。
- en: Create a new function named `updateRegistryData()` and make sure the function
    takes two parameters, `$customer` and `$data`.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`updateRegistryData()`的新函数，并确保该函数接受两个参数，`$customer`和`$data`。
- en: 'Add the following code inside this function located at `app/code/local/Mdg/Giftregistry/Model/Entity.php`:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下位于`app/code/local/Mdg/Giftregistry/Model/Entity.php`的函数中添加以下代码：
- en: '[PRE40]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This function will help us out by adding the form data into the current instance
    of the registry object, which means we need to create one inside our controller.
    Let''s put the code for our controller together, which is located at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将帮助我们通过将表单数据添加到当前注册对象实例中，这意味着我们需要在我们的控制器中创建一个。让我们把我们的控制器代码放在一起，它位于`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`：
- en: '[PRE41]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We have created a very basic controller action that will handle the registry
    creation and most of the possible exceptions.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个非常基本的控制器操作，该操作将处理注册创建和大多数可能的异常。
- en: Let's continue by creating the `editPostAction()` controller. This action is
    very similar to the `newPostAction()` controller. The main difference is that,
    in the case of the `editPostAction()` controller, we are working with an already
    existing registry record so we will need to add some validation before setting
    the data.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建`editPostAction()`控制器。这个操作与`newPostAction()`控制器非常相似。主要区别在于，在`editPostAction()`控制器的情况下，我们正在处理一个已经存在的注册记录，因此我们将在设置数据之前需要添加一些验证。
- en: 'Let''s take a closer look at the action code which is located at`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看操作代码，它位于`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`：
- en: '[PRE42]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: As we can see, this code is pretty much the same as our `newPostAction()` controller,
    with the critical distinction that it tries to load an existing registry before
    updating the data.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这段代码基本上与我们的`newPostAction()`控制器相同，关键的区别在于它尝试在更新数据之前加载现有的登记。
- en: Note
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Challenge**: As the code between `editPostAction()` and `newPostAction()`
    are very similar, try combining both into a single post action that can be reused.
    To see the answer with the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter3/3](http://www.magedevguide.com/challenge/chapter3/3).'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**挑战**：由于`editPostAction()`和`newPostAction()`之间的代码非常相似，尝试将两者合并为一个可重用的单个帖子操作。要查看完整的代码和完整的分解，请访问[http://www.magedevguide.com/challenge/chapter3/3](http://www.magedevguide.com/challenge/chapter3/3)。'
- en: To finalize the `IndexController`, we need to add an action that allows us to
    delete a specific registry record. For this, we will use the `deleteAction()`
    controller.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最终确定`IndexController`，我们需要添加一个允许我们删除特定登记记录的操作。为此，我们将使用`deleteAction()`控制器。
- en: Thanks to the Magento **Object Relation Mapping** (**ORM**) system, this process
    is really simple. Magento models inherit the `delete` function, which, as the
    name implies, will simply delete that specific model instance.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了Magento的**对象关系映射**（**ORM**）系统，这个过程真的很简单。Magento模型继承了`delete`函数，正如其名，它将简单地删除那个特定的模型实例。
- en: 'Inside your `IndexController`, add the following code, which is located at
    `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`IndexController`中添加以下代码，这些代码位于`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`：
- en: '[PRE43]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The important actions to notice in our delete controller are as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的删除控制器中需要注意的重要操作如下：
- en: We check for the right type of request in our action.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在我们的操作中检查正确的请求类型。
- en: We instantiate the registry object and verify if it is a valid one.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们实例化登记对象并验证它是否有效。
- en: Finally, we call the `delete()` function on the registry instance.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们在登记实例上调用`delete()`函数。
- en: You may notice by now that as we have made a critical omission, there is no
    way for us to add an actual product to our cart.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经注意到，由于我们遗漏了一个关键的部分，我们无法将实际的产品添加到购物车中。
- en: We will skip that particular action for now and create it after we have a better
    understanding of the blocks and layouts involved and how to interact with our
    custom controllers.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将跳过那个特定的操作，在我们更好地理解涉及的块和布局以及如何与我们的自定义控制器交互之后，再创建它。
- en: SearchController
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SearchController
- en: 'Now that we have a working `IndexController` that will handle most of the logic
    to modify actual registries, using the following steps, we will create the next
    controller, `SearchController`:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个可以处理修改实际登记逻辑的大部分逻辑的`IndexController`，使用以下步骤，我们将创建下一个控制器，`SearchController`：
- en: Create a new controller under the `controllers` directory with the name `SearchController`.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controllers`目录下创建一个新的控制器，命名为`SearchController`。
- en: 'Copy the following code into the `SearchController.php` file located at`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到位于`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`的`SearchController.php`文件中：
- en: '[PRE44]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We will leave our `indexAction()` as is for now and focus on the logic involved
    in `resultsAction()`, which will be taking the search parameters and loading a
    registry collection.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将保持`indexAction()`不变，并专注于`resultsAction()`中涉及的逻辑，该操作将接受搜索参数并加载一个登记集合。
- en: 'Let''s take a look at the complete action code and break it down, this is located
    at `app/code/local/Mdg/Giftregistry/controllers/SearchController.php`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下完整的操作代码，并对其进行分解，这些代码位于`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`：
- en: '[PRE45]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'As with the previous actions, we are taking the request parameters, but in
    this particular case, we load a gift registry collection and apply a field filter
    for each of the available fields. One thing that stands out is that this is the
    first time we are interacting with the layout directly from a Magento controller:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的操作一样，我们正在获取请求参数，但在这种特定情况下，我们加载一个礼品登记集合并为每个可用的字段应用字段过滤器。值得注意的是，这是我们第一次直接从Magento控制器与布局交互：
- en: '[PRE46]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: What we are doing here is making the loaded registry collection available to
    that particular block instance.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是使加载的登记集合可用于特定的块实例。
- en: ViewController
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ViewController
- en: 'Finally, we need a controller that allows the display of registry details regardless
    of whether a customer is logged in or not:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个控制器，允许显示登记详情，无论客户是否登录：
- en: Create a new controller under the controllers directory with the name `ViewController`.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器目录下创建一个新的控制器，命名为`ViewController`。
- en: 'Open the controller that we just created and use the following placeholder
    code which is located at`app/code/local/Mdg/Giftregistry/controllers/ViewController.php`:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们刚刚创建的控制器，并使用以下占位符代码，该代码位于`app/code/local/Mdg/Giftregistry/controllers/ViewController.php`：
- en: '[PRE47]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'So here, we are using a new function named `Mage::register()`, which sets a
    global variable that we can retrieve later into the application flow by any method.
    This function is part of the Magento registry pattern, which comprises the following
    three functions:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这里，我们使用了一个名为`Mage::register()`的新函数，该函数设置一个全局变量，我们可以在应用程序流程中通过任何方法检索它。这个函数是Magento注册模式的一部分，包括以下三个函数：
- en: '`Mage::register()`: This is used to set global variables'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::register()`: 这用于设置全局变量'
- en: '`Mage::unregister()`: This is used to unset global variables'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::unregister()`: 这用于取消设置全局变量'
- en: '`Mage::registry()`: This is used to retrieve global variables'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::registry()`: 这用于检索全局变量'
- en: We are using the registry function to provide access to the registry entity
    later down the application flow, and doing so in this particular case, to the
    view block that we will be creating next.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用注册函数来在应用程序流程的后续部分提供对注册实体的访问，并在这种特定情况下，到我们将创建的视图块。
- en: Blocks and layouts
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 块和布局
- en: As we learned in [Chapter 2](ch02.html "Chapter 2. ORM and Data Collections"),
    *ORM and Data Collections*, Magento separates its view layer into blocks, templates,
    and layout files. Blocks are objects that handle part of the logic. Templates
    are `.phtml` files that are a mix of HTML and PHP code. Layout files are XML files
    that control the position of the blocks.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第二章](ch02.html "第二章. ORM和数据集合")中学到的，*ORM和数据集合*，Magento将其视图层分为块、模板和布局文件。块是处理部分逻辑的对象。模板是混合了HTML和PHP代码的`.phtml`文件。布局文件是控制块位置的XML文件。
- en: 'Each module has its own layout file that is in charge of updating that specific
    module layout. We need to start by creating a layout file for our module:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都有自己的布局文件，负责更新该特定模块的布局。我们需要首先为我们自己的模块创建一个布局文件：
- en: Navigate to `app/design/frontend/base/default/layout/`.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`app/design/frontend/base/default/layout/`。
- en: Create a file named `mdg_giftregistry.xml`.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mdg_giftregistry.xml`的文件。
- en: 'Add the following code located at `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/design/frontend/base/default/layout/mdg_giftregistry.xml`位置添加以下代码：
- en: '[PRE48]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By adding our templates and layouts to the base/default theme, we'll make our
    templates and layouts available to all stores and themes.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将我们的模板和布局添加到base/default主题，我们将使我们的模板和布局对所有商店和主题可用。
- en: If we take a closer look at the XML we just pasted, we can see that we have
    a default XML tag and several sets of tags. As we mentioned before, Magento routes
    are formed by a frontend name, a controller, and an action.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细查看我们刚刚粘贴的XML，我们可以看到我们有一个默认的XML标签和几组标签。正如我们之前提到的，Magento路由由前端名称、控制器和动作组成。
- en: Each of the XML tags in the layout file represents one of our controllers and
    actions. For example, `<giftregistry_index_index>` will control the layout of
    our `IndexController` index action. Magento assigns each page a unique handle.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 布局文件中的每个XML标签代表我们的一个控制器和动作。例如，`<giftregistry_index_index>`将控制`IndexController`的索引动作的布局。Magento为每个页面分配一个唯一的处理程序。
- en: 'In order for Magento to recognize our layout file, we need to declare the layout
    file inside the `config.xml` file:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Magento识别我们的布局文件，我们需要在`config.xml`文件内部声明布局文件：
- en: Navigate to the extension `etc/` folder.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到扩展`etc/`文件夹。
- en: Open `config.xml`.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config.xml`。
- en: 'Add the following code inside the `<frontend>` node, which is located at `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/design/frontend/base/default/layout/mdg_giftregistry.xml`中的`<frontend>`节点内添加以下代码：
- en: '[PRE49]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: IndexController blocks and views
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IndexController块和视图
- en: 'As we did before, we will start by building the `IndexController`. Let''s define
    which templates and blocks we need to define for each of the actions:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所做的那样，我们将从构建`IndexController`开始。让我们定义每个动作所需的模板和块：
- en: '`Index`: This is a list of the current customer available registries'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`索引`: 这是一个当前客户可用注册表的列表'
- en: '`New`: This is used if we need a new form to capture the registry information'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`新建`: 这用于我们需要一个新表单来捕获注册信息'
- en: '`Edit`: This loads a specific registry data and loads them in the a form'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`编辑`: 这将加载特定的注册数据并将它们加载到表单中'
- en: 'For the index action, we need to create a new block named listed while the
    **New** and **Edit** actions can share their template form:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 对于索引操作，我们需要创建一个名为 `listed` 的新块，而 **新建** 和 **编辑** 操作可以共享它们的模板表单：
- en: Let's start by creating the registry's `List` block.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先创建注册信息的 `List` 块。
- en: Navigate to `app/code/local/Mdg/Giftregistry/Block/`.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `app/code/local/Mdg/Giftregistry/Block/`。
- en: Create a file named `List.php`.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `List.php` 的文件。
- en: 'Copy the following code which is located at `app/code/local/Mdg/Giftregistry/Block/List.php`:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到位于 `app/code/local/Mdg/Giftregistry/Block/List.php` 的位置：
- en: '[PRE50]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The previous code declares the `list` block that will be used in the `IndexController`.
    The blocks declares `getCustomerRegistries()`, which will check for the current
    customer and try to retrieve a collection of registries based on that customer.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码声明了将在 `IndexController` 中使用的 `list` 块。该块声明了 `getCustomerRegistries()`，这将检查当前客户并尝试根据该客户检索注册信息集合。
- en: 'Now that we have created a new block, we need to add it to our layout XML file:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个新的块，我们需要将其添加到我们的布局 XML 文件中：
- en: Open the `mdg_giftregistry.xml` file.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mdg_giftregistry.xml` 布局文件。
- en: 'Add the following code inside the `<mdg_gifregistry_index_index>` file located
    at `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在位于 `app/design/frontend/base/default/layout/mdg_giftregistry.xml` 的 `<mdg_gifregistry_index_index>`
    文件中添加以下代码：
- en: '[PRE51]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In the layout, we declare our block. Inside that declaration, we set the block
    name's template and type. If we try loading the `IndexController` page right now,
    because we have not created our template file, we should see an error about the
    missing template.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局中，我们声明我们的块。在该声明内部，我们设置块名称的模板和类型。如果我们现在尝试加载 `IndexController` 页面，因为我们还没有创建模板文件，我们应该会看到一个关于缺失模板的错误。
- en: 'Let''s create the template file:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建模板文件：
- en: Navigate to `design/frontend/base/default/template/`.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `design/frontend/base/default/template/`.
- en: Create the `mdg/` folder.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `mdg/` 文件夹。
- en: 'Inside that folder, create a file named `list.phtml`, located at `app/design/frontend/base/default/template/mdg/list.phtml`:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件夹内部，创建一个名为 `list.phtml` 的文件，位于 `app/design/frontend/base/default/template/mdg/list.phtml`：
- en: '[PRE52]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This is the first time we generate a `.phtml` file. As we mentioned before,
    `.phtml` files are just a combination of PHP and HTML code.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们第一次生成 `.phtml` 文件。正如我们之前提到的，`.phtml` 文件只是 PHP 和 HTML 代码的组合。
- en: In the case of `list.phtml`, the first thing we are doing is loading a collection
    by calling the `getCustomerRegistries()` method. One thing to notice is that we
    are actually calling `$this->getCustomerRegistries()`. Each template is assigned
    to a specific block.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `list.phtml` 的情况下，我们首先通过调用 `getCustomerRegistries()` 方法来加载一个集合。需要注意的是，我们实际上调用的是
    `$this->getCustomerRegistries()`。每个模板都分配给一个特定的块。
- en: 'We are missing a few important things:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们缺少一些重要的事情：
- en: If there are no registries for the current customer, we would only display an
    empty unordered list
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果当前客户没有注册信息，我们只会显示一个空的未排序列表
- en: There is no link to delete or edit a specific registry
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有链接可以删除或编辑特定的注册信息
- en: 'One quick way to check if the collection has registries is to call the `count`
    function and display an error message if the collection is actually empty which
    is located at`app/design/frontend/base/default/template/mdg/list.phtml`:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 检查集合是否有注册信息的一个快速方法是调用 `count` 函数，如果集合实际上为空，则在 `app/design/frontend/base/default/template/mdg/list.phtml`
    显示一个错误消息：
- en: '[PRE53]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: We have added a new `if` statement to check that the collection count is not
    empty and link it to the `IndexController` edit action. Finally, if there are
    no registries to show, we are displaying an error message linking to `newAction`.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个新的 `if` 语句来检查集合计数不为空，并将其链接到 `IndexController` 的编辑操作。最后，如果没有注册信息显示，我们将显示一个错误消息，链接到
    `newAction`。
- en: 'Let''s continue by adding the block and templates for the new action:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加新操作的块和模板：
- en: Open the `mdg_giftregistry.xml` layout file.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mdg_giftregistry.xml` 布局文件。
- en: 'Add the following code inside the `<mdg_gifregistry_index_new>` node located
    at`app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在位于 `app/design/frontend/base/default/layout/mdg_giftregistry.xml` 的 `<mdg_gifregistry_index_new>`
    节点中添加以下代码：
- en: '[PRE54]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'As we are just displaying a form to post the registry information to `newPostAction()`,
    we are just creating a core/template block with the custom template file that
    will contain the form code. Our template file is located at`app/design/frontend/base/default/template/mdg/new.phtml`
    and will look like this:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只是创建一个表单来将注册信息发送到`newPostAction()`，所以我们只创建了一个核心模板块，该块包含表单代码。我们的模板文件位于`app/design/frontend/base/default/template/mdg/new.phtml`，其外观如下：
- en: '[PRE55]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'So we are doing something new here, we are calling a helper. A helper is a
    class that contains methods that can be reused from blocks, templates, controllers,
    and so on. In our case, we are creating a helper that will retrieve all the available
    registry types:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在这里做了一些新的尝试，我们调用了一个助手。助手是一个包含可以从块、模板、控制器等重用方法的类。在我们的情况下，我们创建了一个助手，它将检索所有可用的注册表类型：
- en: Navigate to `app/code/local/Mdg/Giftregistry/Helper`.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`app/code/local/Mdg/Giftregistry/Helper`。
- en: Open the `Data.php` class.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Data.php`类。
- en: 'Add the following code to it, which is located at`app/code/local/Mdg/Giftregistry/Helper/Data.php`:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加以下代码，该代码位于`app/code/local/Mdg/Giftregistry/Helper/Data.php`：
- en: '[PRE56]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Finally, we need to set up the `edit` template. The edit template will be exactly
    the same as the `new` template but with one major difference. We will check for
    the existence of a loaded registry and pre-populate the values of our fields in
    the `edit` template which is located at`app/design/frontend/base/default/template/mdg/edit.phtml`:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要设置`edit`模板。编辑模板将与`new`模板完全相同，但有一个主要区别。我们将在`edit`模板中检查已加载的注册表的存续状态，并在其中预填充我们字段的值，该模板位于`app/design/frontend/base/default/template/mdg/edit.phtml`：
- en: '[PRE57]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Let's continue by adding the blocks and templates for the edit action.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加编辑操作的块和模板。
- en: Open the `mdg_giftregistry.xml` layout file.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mdg_giftregistry.xml`布局文件。
- en: 'Add the following code inside the `<mdg_gifregistry_index_edit>` node located
    at `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/design/frontend/base/default/layout/mdg_giftregistry.xml`中位于`<mdg_gifregistry_index_edit>`节点内添加以下代码：
- en: '[PRE58]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Once this is set, we can try creating a couple of test registries and modifying
    their properties.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好，我们就可以尝试创建几个测试注册表并修改它们的属性。
- en: Note
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Challenge**: As with the controller, the edit and new form can be combined
    into a single reusable form. To see the answer with the complete code and full
    breakdown, visit [http://www.magedevguide.com/challenge/chapter3/4](http://www.magedevguide.com/challenge/chapter3/4).'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '**挑战**：与控制器一样，编辑和新建表单可以合并成一个可重用的表单。要查看完整的代码和详细分解，请访问[http://www.magedevguide.com/challenge/chapter3/4](http://www.magedevguide.com/challenge/chapter3/4)。'
- en: SearchController blocks and views
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SearchController块和视图
- en: 'For our `SearchController`, we need a search template for our index, and for
    the results, we can actually reuse the registry list template simply by making
    a change to our controller:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`SearchController`，我们需要为索引创建一个搜索模板，而对于结果，我们实际上可以通过修改控制器来重用注册列表模板：
- en: Navigate to the `template` folder.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`template`文件夹。
- en: Create a file named `search.phtml`.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`search.phtml`的文件。
- en: 'Add the following code located at `app/design/frontend/base/default/template/mdg/search.phtml`:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/design/frontend/base/default/template/mdg/search.phtml`中添加以下代码：
- en: '[PRE59]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'You will notice a few things:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到以下几点：
- en: We are using the helper model to populate the `Event` type IDs
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用助手模型来填充`Event`类型ID
- en: We are posting directly to the search/results
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们直接向搜索/结果发送请求
- en: Now, let's make the appropriate change to our layout file.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对我们的布局文件进行适当的修改。
- en: Open the `mdg_giftregistry.xml`.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mdg_giftregistry.xml`。
- en: 'Add the following code inside `<mdg_gifregistry_search_index>` located at`app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/design/frontend/base/default/layout/mdg_giftregistry.xml`中位于`<mdg_gifregistry_search_index>`节点内添加以下代码：
- en: '[PRE60]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: For the search results, we don't need to create a new block type as we are passing
    the results collection directly to the block. In the layout, our changes will
    be minimal and we can reuse the list block to display the search registry results.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 对于搜索结果，我们不需要创建一个新的块类型，因为我们直接将结果集合传递给块。在布局中，我们的更改将是最小的，我们可以重用列表块来显示搜索注册表结果。
- en: 'However, we do need to make a change in the controller. We need to change the
    function from `setResults()` to `setCustomerRegistries()` in the `SearchController`
    located at`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们确实需要在控制器中进行修改。我们需要将`SearchController`中位于`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`的函数从`setResults()`更改为`setCustomerRegistries()`：
- en: '[PRE61]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Finally, let''s update the layout files:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更新布局文件：
- en: Open the `mdg_giftregistry.xml` file.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mdg_giftregistry.xml` 文件。
- en: 'Add the following code inside `<mdg_gifregistry_search_results>`, located at
    `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/design/frontend/base/default/layout/mdg_giftregistry.xml` 中位于 `<mdg_gifregistry_search_results>`
    的内部添加以下代码：
- en: '[PRE62]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This will be the end of our `SearchController` templates. However, there is
    a problem; our search results are displaying the delete and edit links for a registry.
    We need a way to restrict these links only to the owner.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们的 `SearchController` 模板结束的地方。然而，有一个问题；我们的搜索结果显示了注册表的删除和编辑链接。我们需要一种方法来限制这些链接只对拥有者可见。
- en: 'We can do this with the following helper function, located at `app/code/local/Mdg/Giftregistry/Helper/Data.php`:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下位于 `app/code/local/Mdg/Giftregistry/Helper/Data.php` 的辅助函数来完成此操作：
- en: '[PRE63]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Let''s update our template to use the new `helper` method located at `app/design/frontend/base/default/template/mdg/list.phtml`:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的模板以使用位于 `app/design/frontend/base/default/template/mdg/list.phtml` 的新
    `helper` 方法：
- en: '[PRE64]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: ViewController blocks and views
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ViewController 块和视图
- en: 'For our `ViewController`, we just need to create a new template file and a
    new entry in the `layout.xml` file:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的 `ViewController`，我们只需要创建一个新的模板文件和一个新的 `layout.xml` 文件中的条目：
- en: Navigate to the template directory.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到模板目录。
- en: Create a template named `view.phtml`.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `view.phtml` 的模板。
- en: 'Add the following code located at `app/design/frontend/base/default/template/mdg/view.phtml`:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/design/frontend/base/default/template/mdg/view.phtml` 中添加以下代码：
- en: '[PRE65]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Update the layout XML file `<mdg_gifregistry_view_view>`:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 更新布局 XML 文件 `<mdg_gifregistry_view_view>`：
- en: '[PRE66]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Note
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Challenge**: Improve the view form to return an error if there is not an
    actual loaded registry. To see the answer with the complete code and full breakdown,
    visit [http://www.magedevguide.com/challenge/chapter3/5](http://www.magedevguide.com/challenge/chapter3/5).'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '**挑战**：改进视图表单，如果未加载实际的注册表，则返回错误。要查看完整的代码和详细分析，请访问 [http://www.magedevguide.com/challenge/chapter3/5](http://www.magedevguide.com/challenge/chapter3/5)。'
- en: Adding products to the registry
  id: totrans-427
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将产品添加到注册表中
- en: We are almost at the end of the chapter and we are yet to cover how to add products
    to our registries. Due to space concerns in this book, I have decided to move
    this section to the website at [http://www.magedevguide.com/chapter3/adding-products-registry](http://www.magedevguide.com/chapter3/adding-products-registry).
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将结束本章，但我们还没有介绍如何将产品添加到我们的注册表中。由于本书的空间限制，我决定将这一部分移至网站 [http://www.magedevguide.com/chapter3/adding-products-registry](http://www.magedevguide.com/chapter3/adding-products-registry)。
- en: Summary
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered a lot of ground. We have learned how to extend
    the frontend of Magento, and how to work with routes and controllers.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们覆盖了大量的内容。我们学习了如何扩展 Magento 的前端，以及如何与路由和控制器协同工作。
- en: The Magento layout system allows us to modify and control blocks and the display
    on our store. We also started working with Magento data models and learned how
    to use them to handle and manipulate our data.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 布局系统允许我们修改和控制块以及我们商店的显示。我们还开始使用 Magento 数据模型，并学习了如何使用它们来处理和操作我们的数据。
- en: We have only touched the surface of frontend development and the data models.
    In the next chapter, we will expand a little more on configuration, models, and
    data, and we will explore and create an admin section on the Magento backend.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是触及了前端开发和数据模型表面的内容。在下一章中，我们将更深入地探讨配置、模型和数据，并将在 Magento 后端探索和创建一个管理部分。
