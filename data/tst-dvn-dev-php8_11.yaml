- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Monitoring
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: Out in the real world, in a production environment, is where your application
    gets really tested to its limits. Despite all the effort in developing test scenarios,
    and going through different stages of quality assurance, there will come a time
    when there are edge case scenarios that the development team or the quality assurance
    team might have not considered and, therefore, these missed edge case scenarios
    might cause bugs to occur. There are times when hardware-related issues will be
    encountered, or sometimes there will be some code-related performance bottlenecks
    causing timeouts and unhappy clients. It happens, but it’s not the end of the
    world. It would be great if the development team had access to a production environment’s
    usage statistics, the CPU or memory usage of the containers, the most accessed
    controllers, the stack trace of an exception, and so on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，在生产环境中，您的应用程序将真正受到极限的考验。尽管在开发测试场景和通过不同阶段的质量保证方面付出了很多努力，但仍然会有一些边缘情况，开发团队或质量保证团队可能没有考虑到，因此这些遗漏的边缘情况可能会导致错误发生。有时会遇到与硬件相关的问题，或者有时可能会有一些代码相关的性能瓶颈导致超时和不愉快的客户。这种情况会发生，但并非世界末日。如果开发团队能够访问生产环境的用法统计信息、容器的
    CPU 或内存使用情况、最常访问的控制器、异常的堆栈跟踪等，那将是极好的。
- en: Having this information will help you and your team resolve issues more quickly
    when they happen. It will give you and your team a better understanding of how
    heavily your application is being used. In this chapter, we’ll use an **application
    performance monitoring** (**APM**) tool to give us the ability to collect and
    go through this valuable application performance and usage data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些信息将帮助您和您的团队在问题发生时更快地解决问题。这将使您和您的团队能够更好地理解您的应用程序被使用的程度。在本章中，我们将使用一个**应用程序性能监控**（**APM**）工具来收集和查看这些宝贵的应用程序性能和用法数据。
- en: 'In this chapter, we will go through the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Setting up New Relic APM for PHP
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 PHP 设置 New Relic APM
- en: Going through the application performance data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看应用程序性能数据
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you are expected to have gone through the processes and steps
    in [*Chapter 10*](B18318_10.xhtml#_idTextAnchor146), *Continuous Delivery*, and
    need to have access to the AWS EC2 instance that is used to host the PHP application;
    the code base for the PHP application can be found at [https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%2010](https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%2010).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您应已通过 [*第 10 章*](B18318_10.xhtml#_idTextAnchor146)，*持续交付* 的流程和步骤，并且需要能够访问用于托管
    PHP 应用程序的 AWS EC2 实例；PHP 应用程序的代码库可以在 [https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%2010](https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%2010)
    找到。
- en: Setting up New Relic APM for PHP
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 PHP 设置 New Relic APM
- en: There are a lot of different APM tools available out there, but in this book,
    we will just focus on using New Relic.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有很多不同的 APM 工具，但在这本书中，我们将只关注使用 New Relic。
- en: New Relic offers a lot of performance monitoring tools, but in this book, we
    will focus on monitoring our PHP application, and the infrastructure it runs on
    top of.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: New Relic 提供了许多性能监控工具，但在这本书中，我们将专注于监控我们的 PHP 应用程序及其运行的基础设施。
- en: In this section, we will install and configure the New Relic PHP agent in our
    EC2 instance so that we can start collecting PHP and server data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装和配置 New Relic PHP 代理到我们的 EC2 实例中，以便我们开始收集 PHP 和服务器数据。
- en: Creating a New Relic account and license key
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 New Relic 账户和许可证密钥
- en: The first thing you will need before installing the New Relic agent into the
    EC2 instance is a free New Relic account. You can sign up at [https://newrelic.com/signup](https://newrelic.com/signup)
    to create a free account. You will need your license key later in the setup process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 New Relic 代理安装到 EC2 实例之前，您需要的是一个免费的 New Relic 账户。您可以在 [https://newrelic.com/signup](https://newrelic.com/signup)
    注册以创建一个免费账户。您将在设置过程中稍后需要您的许可证密钥。
- en: 'The license key can be found on the New Relic **API keys** page under the **Administration**
    dashboard:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许可证密钥可以在**管理**仪表板下的 New Relic **API 密钥**页面找到：
- en: '![Figure 11.1 – License key](img/Figure_11.01_B18318.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 许可证密钥](img/Figure_11.01_B18318.jpg)'
- en: Figure 11.1 – License key
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 许可证密钥
- en: You can copy the license key from this page, and use it to set up the agent
    in the next steps.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从本页复制许可证密钥，并在下一步中设置代理。
- en: Installing a New Relic agent in the PHP 8 container
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在PHP 8容器中安装New Relic代理
- en: To install the PHP agent, we’ll need to connect to the AWS EC2 instance we are
    using to serve the application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装PHP代理，我们需要连接到我们用于托管应用程序的AWS EC2实例。
- en: Connect to the EC2 instance using SSH or the AWS EC2 Instance Connect web application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSH或AWS EC2实例连接Web应用程序连接到EC2实例。
- en: 'Once inside the instance, we’ll install the agent inside the container. This
    can be a part of your deployment automation, but in this book, we will install
    it manually. You can run the following command to connect to your PHP container:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入实例，我们将在容器内安装代理。这可以是您部署自动化的一部分，但在这本书中，我们将手动安装它。您可以使用以下命令连接到您的PHP容器：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once inside the container, run the following commands to install the PHP agent:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入容器，运行以下命令来安装PHP代理：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After running these commands, you will be prompted to enter your New Relic
    license key. Paste the license key from the New Relic **API keys** page, and finish
    the installation process:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令后，您将被提示输入您的New Relic许可证密钥。从New Relic的**API密钥**页面粘贴许可证密钥，并完成安装过程：
- en: '![Figure 11.2 – PHP Agent Installation result](img/Figure_11.02_B18318.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – PHP代理安装结果](img/Figure_11.02_B18318.jpg)'
- en: Figure 11.2 – PHP Agent Installation result
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – PHP代理安装结果
- en: 'After the installation process, you will notice that there is a new `ini` file
    created in `/usr/local/etc/php/conf.d/newrelic.ini`. You can modify this manually
    to set the PHP application name of your choice, or just run the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程完成后，您会注意到在`/usr/local/etc/php/conf.d/newrelic.ini`中创建了一个新的`ini`文件。您可以手动修改此文件以设置您选择的PHP应用程序名称，或者只需运行以下命令：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After updating the `newrelic.ini` file, restart `apache2` by running the following
    command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`newrelic.ini`文件后，通过运行以下命令重启`apache2`：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The New Relic PHP agent is now installed in the PHP container serving the Symfony
    and Behat applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Relic PHP代理现在已安装在我们为Symfony和Behat应用程序服务的PHP容器中。
- en: Next, we’ll see whether the agent is able to send data to New Relic, and we’ll
    go through the New Relic dashboard to see what performance data will be available
    to us.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查代理是否能够将数据发送到New Relic，并且我们将通过New Relic仪表板查看我们将能够获得哪些性能数据。
- en: Going through the application performance data
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看应用程序性能数据
- en: In the previous section, we installed a tool to collect performance and usage
    data from our PHP application. This data will be useless unless we are able to
    view and make sense of the data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们安装了一个工具来从我们的PHP应用程序中收集性能和用法数据。除非我们能够查看并理解这些数据，否则这些数据将毫无用处。
- en: 'To view the data being gathered by the PHP agent we just installed, follow
    these steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们刚刚安装的PHP代理正在收集的数据，请按照以下步骤操作：
- en: 'Go back to the **new relic** dashboard at [https://one.newrelic.com](https://one.newrelic.com)
    and then click on the **APM & services** menu item:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到[https://one.newrelic.com](https://one.newrelic.com)上的**new relic**仪表板，然后点击**APM
    & services**菜单项：
- en: '![Figure 11.3 – New Relic services – APM](img/Figure_11.03_B18318.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – New Relic服务 – APM](img/Figure_11.03_B18318.jpg)'
- en: Figure 11.3 – New Relic services – APM
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – New Relic服务 – APM
- en: Next, click on the `NEWRELIC_TDDPHP` item on the dashboard. You’ll notice that
    this is the same PHP name we used in the `/``usr/local/etc/php/conf.d/newrelic.ini`
    file.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击仪表板上的`NEWRELIC_TDDPHP`项目。您会注意到这与我们在`/usr/local/etc/php/conf.d/newrelic.ini`文件中使用的PHP名称相同。
- en: '![Figure 11.4 – newrelic.ini – newrelic.appname](img/Figure_11.04_B18318.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4 – newrelic.ini – newrelic.appname](img/Figure_11.04_B18318.jpg)'
- en: Figure 11.4 – newrelic.ini – newrelic.appname
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 – newrelic.ini – newrelic.appname
- en: Once you are monitoring a lot of applications, these app names will come in
    very handy so it would be great if you could standardize your app names. You can
    read more about New Relic’s APM best practices in the official documentation found
    at [https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/](https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您监控了许多应用程序，这些应用程序名称将非常有用，因此如果您能够标准化您的应用程序名称将非常棒。您可以在官方文档中了解更多关于New Relic的APM最佳实践，该文档位于[https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/](https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/)。
- en: 'After clicking on the `NEWRELIC_TDDPHP` item, you will be redirected to the
    APM dashboard:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`NEWRELIC_TDDPHP`项目后，您将被重定向到APM仪表板：
- en: '![Figure 11.5 – PHP APM dashboard](img/Figure_11.05_B18318.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5 – PHP APM仪表板](img/Figure_11.05_B18318.jpg)'
- en: Figure 11.5 – PHP APM dashboard
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – PHP APM仪表板
- en: 'On the dashboard, you will be able to view different metrics regarding the
    PHP application we are monitoring. For example, we can check which DB operations
    take the longest to execute:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表板上，您将能够查看关于我们正在监控的PHP应用程序的不同指标。例如，我们可以检查哪些数据库操作执行时间最长：
- en: '![Figure 11.6 – DB operations](img/Figure_11.06_B18318.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6 – 数据库操作](img/Figure_11.06_B18318.jpg)'
- en: Figure 11.6 – DB operations
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 – 数据库操作
- en: You and your team can learn a lot from the data being reported on these dashboards.
    You can spot performance bottlenecks, and go through the error exceptions that
    the users are encountering.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您和您的团队能够从这些仪表板上报告的数据中学到很多东西。您可以发现性能瓶颈，并查看用户遇到的所有错误异常。
- en: 'On the **Errors** dashboard, you will be able to view metrics about the errors
    being reported by the application:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在**错误**仪表板上，您将能够查看应用程序报告的错误指标：
- en: '![Figure 11.7 – Errors dashboard](img/Figure_11.07_B18318.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – 错误仪表板](img/Figure_11.07_B18318.jpg)'
- en: Figure 11.7 – Errors dashboard
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – 错误仪表板
- en: 'You can also click on the error item itself to get a deeper understanding of
    what’s going on:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以点击错误项本身以深入了解正在发生的事情：
- en: '![Figure 11.8 – Exception trace](img/Figure_11.08_B18318.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – 异常跟踪](img/Figure_11.08_B18318.jpg)'
- en: Figure 11.8 – Exception trace
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – 异常跟踪
- en: Here, you can see which specific object threw an exception, and what exception
    was thrown, along with the stack trace. This is all valuable information that
    can help you and your team spot and fix issues.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到哪个特定的对象抛出了异常，以及抛出了什么异常，以及堆栈跟踪。这些都是对您和您的团队发现和解决问题非常有价值的信息。
- en: Monitoring other containers in your setup
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控您设置中的其他容器
- en: In our example application, we are using more than one container. We can also
    monitor these containers, such as the MySQL server, and that example `phpMyAdmin`
    container we were using.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例应用程序中，我们使用了不止一个容器。我们还可以监控这些容器，例如MySQL服务器，以及我们之前使用的那个示例`phpMyAdmin`容器。
- en: 'In the EC2 Console, run the following command to install the New Relic agent
    into our AWS EC2 Linux instance:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在EC2控制台中，运行以下命令将New Relic代理安装到我们的AWS EC2 Linux实例中：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Make sure to include your New Relic license key and account ID, which can be
    found on the **API keys** page, as shown earlier in the chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保包括您的New Relic许可证密钥和账户ID，这些可以在之前章节中提到的**API密钥**页面找到。
- en: 'After the installation process, go back to the **New Relic** dashboard, and
    in the left-hand menu, click on the **All entities** menu item, then select **Containers**.
    You’ll then see all of the Docker containers we have in that EC2 instance:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程完成后，返回**New Relic**仪表板，在左侧菜单中点击**所有实体**菜单项，然后选择**容器**。您将看到该EC2实例中所有的Docker容器：
- en: '![Figure 11.9 – Docker containers performance monitoring](img/Figure_11.09_B18318.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图11.9 – Docker容器性能监控](img/Figure_11.09_B18318.jpg)'
- en: Figure 11.9 – Docker containers performance monitoring
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9 – Docker容器性能监控
- en: 'If you click on one of those containers in the list, you’ll be able to get
    more metrics about that container such as memory usage, CPU utilization, and so
    on:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击列表中的其中一个容器，您将能够获取更多关于该容器的指标，例如内存使用情况、CPU利用率等：
- en: '![Figure 11.10 – MySQL container metrics](img/Figure_11.10_B18318.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图11.10 – MySQL容器指标](img/Figure_11.10_B18318.jpg)'
- en: Figure 11.10 – MySQL container metrics
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.10 – MySQL容器指标
- en: All of these data visualization tools will help you get a better understanding
    of how heavily your containers and applications are being used and will be able
    to help you diagnose performance issues when they occur.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些数据可视化工具都将帮助您更好地了解您的容器和应用程序的使用情况，并在出现性能问题时帮助您诊断问题。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have gone through the importance of having an APM tool as
    a part of your setup. We have installed the New Relic APM agent into our AWS EC2
    instance and Docker container to start recording performance and usage data. Using
    an APM tool is entirely optional, but having one will help you and your team address
    issues more quickly by giving you and your team real production performance data.
    By having an APM tool, you will be able to understand your application much better,
    and it will help you to optimize and improve your application.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经讨论了将APM工具作为您设置的一部分的重要性。我们已经将New Relic APM代理安装到我们的AWS EC2实例和Docker容器中，以开始记录性能和用法数据。使用APM工具完全是可选的，但拥有一个将帮助您和您的团队能够通过提供真实的生产性能数据来更快地解决问题。通过拥有APM工具，您将能够更好地理解您的应用程序，并且它将帮助您优化和改进您的应用程序。
