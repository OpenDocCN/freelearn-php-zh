- en: Chapter 3. Scheduled Reminders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：预定提醒
- en: In the previous two chapters, we developed simple reactionary applications that
    went over the basic components of the Yii framework. For our next project, we
    will expand upon the concepts previously covered by creating a scheduled reminders
    application that will allow our users to search for, create, and schedule both
    events and reminders for themselves. This application will also send the user
    notifications automatically when the reminder is scheduled to occur.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个章节中，我们开发了简单的反应式应用程序，覆盖了Yii框架的基本组件。对于我们的下一个项目，我们将通过创建一个允许用户搜索、创建和为自己安排事件和提醒的预定提醒应用程序来扩展之前讨论的概念。此应用程序还将自动在预定提醒发生时向用户发送通知。
- en: Prerequisites
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Before we start, there are a couple of things that we''ll need to install and
    acquire:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，有一些我们需要安装和获取的东西：
- en: Install the latest version of MySQL (at the time of writing this, MySQL 5.6).
    MySQL is the most popular open source database and is a key part of LAMP (Linux,
    Apache, MySQL, and PHP). Because of its popularity with web hosting providers,
    MySQL is often the de facto choice for modern web applications.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装MySQL的最新版本（在撰写本文时，MySQL 5.6）。MySQL是最受欢迎的开源数据库，是LAMP（Linux、Apache、MySQL和PHP）的关键部分。由于其受到网络托管提供商的青睐，MySQL通常是现代Web应用程序的事实上的选择。
- en: Note
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: MySQL can be installed from either your distributions package management system
    or downloaded from [mysql.com](http://mysql.com). More details can be found at
    [http://dev.mysql.com/doc/refman/5.6/en/installing.html](http://dev.mysql.com/doc/refman/5.6/en/installing.html).
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL可以从您的发行版包管理系统中安装，或者从[mysql.com](http://mysql.com)下载。更多详细信息可以在[http://dev.mysql.com/doc/refman/5.6/en/installing.html](http://dev.mysql.com/doc/refman/5.6/en/installing.html)找到。
- en: Acquire an SMTP server or credentials to an SMTP server for our application
    to send e-mails with. The key details that we will need are a SMTP host, port,
    username, and password. Depending on the server, you may also need to know the
    type of security your server uses (such as SSL or TLS). If you do not have a SMTP
    server available, there is an abundant number of options available, ranging from
    setting up a Postfix SMTP server, using Gmail as an SMTP relay, or even obtaining
    a free SMTP account from SendGrid ([http://www.sendgrid.com](http://www.sendgrid.com)).
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的应用程序获取一个SMTP服务器或SMTP服务器的凭据，以便发送电子邮件。我们需要的关键细节包括SMTP主机、端口、用户名和密码。根据服务器不同，您可能还需要了解您的服务器使用的安全类型（如SSL或TLS）。如果您没有可用的SMTP服务器，有许多选项可供选择，从设置Postfix
    SMTP服务器，使用Gmail作为SMTP中继，甚至从SendGrid获取免费的SMTP账户（[http://www.sendgrid.com](http://www.sendgrid.com)）。
- en: Verify that our PHP instance has mcrypt libraries installed so that we can properly
    hash the passwords we'll be using. If your PHP instance already supports mcrypt,
    you should see an mcrypt section listed in `phpinfo()`. If mcrypt is not enabled
    in your PHP instance, install it either from your upstream provider, by enabling
    the mcrypt module, or by recompiling PHP.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证我们的PHP实例已安装mcrypt库，以便我们可以正确地散列我们将使用的密码。如果您的PHP实例已经支持mcrypt，您应该在`phpinfo()`中看到一个mcrypt部分。如果mcrypt在您的PHP实例中未启用，您可以从您的上游提供商安装它，通过启用mcrypt模块，或者通过重新编译PHP。
- en: Finally, we'll need to download and install Composer from [https://getcomposer.org/](https://getcomposer.org/).
    Composer is a PHP dependency manager that will allow us to declare and automatically
    install libraries that our application will use.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们需要从[https://getcomposer.org/](https://getcomposer.org/)下载并安装Composer。Composer是一个PHP依赖管理器，它将允许我们声明并自动安装应用程序将使用的库。
- en: Once we've obtained all of the prerequisites for our application, we can get
    started with development.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获取了应用程序的所有先决条件，我们就可以开始开发工作了。
- en: Describing the project
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述项目
- en: 'Our scheduled reminders project can be broken down into four main components:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划中的提醒项目可以分为四个主要部分：
- en: Users who will create events and reminders
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将创建事件和提醒的用户
- en: Events that the user wants to be reminded of
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户希望被提醒的事件
- en: Reminders for the actual event (of which there could be many)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际事件的提醒（可能有很多）
- en: A command-line task to process and send out the reminders to the user via e-mail
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个命令行任务，用于处理并发送提醒到用户通过电子邮件
- en: Users
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: 'The first component of our application is the users who will be using it. Users
    will be responsible to create both events and reminders for themselves. The users
    will also be the recipients of the reminder e-mails that they created. Using this
    information, we can simplify our database schema to the following structure:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第一个组件是使用它的用户。用户将负责为自己创建事件和提醒。用户也将是他们创建的提醒电子邮件的收件人。使用这些信息，我们可以简化我们的数据库模式为以下结构：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In [Chapter 1](ch01.html "Chapter 1. A Task-management Application"), *A Task-management
    Application*, we created a very primitive user authentication system that we'll
    be reusing and expanding upon and reusing in later chapters. In this chapter,
    we'll develop a system to create, delete, and manage the passwords of users with
    our application. We'll also cover several basic guidelines for properly securing,
    storing, and working with our users' credentials.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。任务管理应用")《任务管理应用》中，我们创建了一个非常原始的用户认证系统，我们将在后面的章节中重新使用、扩展并重复使用它。在本章中，我们将开发一个系统，使用我们的应用程序创建、删除和管理用户的密码。我们还将介绍一些基本指南，以正确地保护、存储和处理我们用户的凭据。
- en: Events
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: 'The second component of our application is events. Events are things that a
    particular user wants to be reminded of and will occur at a given time on a given
    date. Events should be easy to search through and intuitive to find. Additionally,
    events can have one, many, or no reminders associated with them. We can express
    this in our database schema, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第二个组件是事件。事件是特定用户希望被提醒的事情，将在特定日期的特定时间发生。事件应该易于搜索且直观。此外，事件可以有一个、多个或没有与之关联的提醒。我们可以在我们的数据库模式中表达如下：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A new concept that we'll be introducing in this chapter is the concept of database
    relations. Many times, data in our database will be associated with an attribute
    or data in another table of our database. In this case, an event is something
    that belongs to a given user. The relations that we create in this application
    will allow us to easily represent data in our tables without having to store that
    data in multiple places.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将引入的新概念是数据库关系。很多时候，我们数据库中的数据将与另一个表中的属性或数据相关联。在这种情况下，事件是某个特定用户拥有的东西。我们在本应用程序中创建的关系将使我们能够轻松地表示表中的数据，而无需在多个地方存储该数据。
- en: Reminders
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提醒
- en: 'A reminder is a time-sensitive event that belongs to a user-created event and
    acts as an indicator to our task runner to notify the user of the details of the
    event itself. This can be expressed in our simplified database schema, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒是一个对用户创建的事件具有时间敏感性的事件，它作为对任务运行器的指示，通知用户事件的详细信息。这可以在我们的简化数据库模式中表达如下：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When we set up our Reminders model, we'll define a relationship between a reminder
    and the event. As events are already bound to a user, we can transitively determine
    the user a reminder should be sent to without having to add the `user_id` field
    to the reminder itself.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设置提醒模型时，我们将定义提醒和事件之间的关系。由于事件已经与用户绑定，我们可以通过传递方式确定应该发送提醒的用户，而无需在提醒本身中添加`user_id`字段。
- en: The final piece of our reminders has to do with how we handle timestamps. In
    previous chapters, timestamps served only as metadata to specific records. Our
    reminders, however, will have to take into account the time that an event will
    be triggered, which means that we'll be involving time zones. While using UTC
    solves a lot of the issues when dealing with time, our reminders have to be aware
    of what the time offset is for a particular reminder.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提醒系统的最后一部分与处理时间戳的方式有关。在之前的章节中，时间戳仅作为特定记录的元数据。然而，我们的提醒必须考虑事件被触发的时间，这意味着我们将涉及时区。虽然使用协调世界时（UTC）在处理时间问题时解决了许多问题，但我们的提醒必须了解特定提醒的时间偏移量。
- en: For our application, that means we'll need to store the time that the end user
    will see in addition to either the time zone offset of the user or a conversion
    of that time into the real UTC time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序来说，这意味着我们需要存储最终用户将看到的时间，以及用户的时区偏移量或将其转换为真实UTC时间。
- en: The task runner
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务运行器
- en: The final component of our application is the task runner that will find reminders
    that need to be sent out and actually send them out to the user. While there are
    many ways to go about creating this task runner, we will be creating a command-line
    task that will run repeatedly after *n* minutes and will process all events between
    the trigger time and the provided interval in minutes. This approach will allow
    us to define how frequently or infrequently we want our reminders to be processed
    without having to rewrite code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的最后一个组件是任务运行器，它将找到需要发送的提醒，并将它们实际发送给用户。虽然有许多方法可以创建这个任务运行器，但我们将创建一个在*n*分钟后重复运行的命令行任务，并处理触发时间和提供的分钟间隔之间的所有事件。这种方法将允许我们定义我们希望提醒处理得多频繁或少频繁，而无需重写代码。
- en: Initializing the project
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化项目
- en: At this point, you should be fairly familiar with how to initialize a basic
    Yii framework project. Go ahead and create the base folder structures, and create
    the `index.php`, `yiic`, `yiic.bat`, and `yiic.php` files. Then in the `webroot`
    directory of our application, create a folder called `vendors`. This folder will
    be used for all of our Composer dependencies for us.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该已经相当熟悉如何初始化一个基本的Yii框架项目。继续创建基础文件夹结构，并创建`index.php`、`yiic`、`yiic.bat`和`yiic.php`文件。然后在我们的应用程序的`webroot`目录中创建一个名为`vendors`的文件夹。这个文件夹将用于我们所有的Composer依赖项。
- en: Create a MySQL user and database
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建MySQL用户和数据库名
- en: 'If you haven''t already created a MySQL user, password, and database for the
    project, do so now. From the MySQL command line, you can run the following commands
    to do this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有为项目创建MySQL用户、密码和数据库名，请现在创建。从MySQL命令行，您可以运行以下命令来完成此操作：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating a Yii configuration file
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Yii配置文件
- en: 'Our Yii configuration file will be slightly different than our previous configuration
    files due to the use of our MySQL database. We''ll start off with the base configuration
    `protected/config/main.php` and add the new components afterwards:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用了MySQL数据库，我们的Yii配置文件将与我们之前的配置文件略有不同。我们将从基础配置`protected/config/main.php`开始，然后添加新的组件：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In order for our application to interact with MySQL, we''ll need to update
    the database component so that Yii knows how to use the MySQL PDO adapter. We
    can do this by adding the following to our components array:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的应用程序与MySQL交互，我们需要更新数据库组件，以便Yii知道如何使用MySQL PDO适配器。我们可以通过向我们的组件数组中添加以下内容来实现：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this configuration, we've added `schemeaCachingDuration`, which outlines
    how long Yii will cache our MySQL schema. This will prevent unnecessary SQL commands,
    such as `DESCRIBE TABLE`, which will slow down our application. It's important
    to note that if you are using this option, you'll need to clear Yii's internal
    cache. You can find out more about MySQL-specific database configuration at [http://www.yiiframework.com/doc/api/1.1/CDbConnection](http://www.yiiframework.com/doc/api/1.1/CDbConnection).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配置中，我们添加了`schemeaCachingDuration`，它说明了Yii将缓存我们的MySQL模式多长时间。这将防止不必要的SQL命令，例如`DESCRIBE
    TABLE`，这将减慢我们的应用程序。需要注意的是，如果您使用此选项，您需要清除Yii的内部缓存。您可以在[http://www.yiiframework.com/doc/api/1.1/CDbConnection](http://www.yiiframework.com/doc/api/1.1/CDbConnection)了解更多有关MySQL特定数据库配置的信息。
- en: Creating a parameters configuration file
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建参数配置文件
- en: Many times, we have sensitive information we'd like to store in our configuration
    file that we wouldn't necessarily want to store with our version control software
    for security reasons. One way we can get around this is by storing this information
    in a separate file and then excluding it from being committed to source control.
    When we deploy our application to our production servers, we can manually add
    this file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时候，我们希望将敏感信息存储在我们的配置文件中，但我们可能不会出于安全原因将其与版本控制软件一起存储。我们可以通过将此信息存储在单独的文件中，然后将其排除在源控制提交之外来解决这个问题。当我们将应用程序部署到我们的生产服务器时，我们可以手动添加此文件。
- en: 'In Yii, we can accomplish this by adding the following to our base array of
    our configuration file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，我们可以通过向我们的配置文件的基础数组中添加以下内容来完成此操作：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, create a new file in the `config` folder called `params.php`. This file
    will store our SMTP credentials for our application. Have a look at the following
    code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`config`文件夹中创建一个名为`params.php`的新文件。此文件将存储我们应用程序的SMTP凭据。请查看以下代码：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At this time, go ahead and add your SMTP credentials to the `params.php` file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在此期间，请将您的SMTP凭据添加到`params.php`文件中。
- en: Adding Composer dependencies
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Composer依赖项
- en: The last configuration change we'll need to make is the inclusion of a file
    called `composer.json` in our `webroot` directory. For this project, we'll be
    using a dependency called `PHPMailer` that will help us send e-mails from our
    application. We'll also include a package called `password-compat`, which will
    provide us with the necessary userland functions for working with Bcrypt, a password
    hashing library that we'll cover in more detail when we start working with users
    and authentication.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一个配置更改是在`webroot`目录中包含一个名为`composer.json`的文件。对于这个项目，我们将使用一个名为`PHPMailer`的依赖项，它将帮助我们从应用程序发送电子邮件。我们还将包括一个名为`password-compat`的包，它将为我们提供与Bcrypt密码散列库一起工作的必要用户空间函数，我们将在开始处理用户和身份验证时更详细地介绍Bcrypt。
- en: 'This file should look as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件应如下所示：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With our Composer dependencies defined, we can now install them by running
    the following from our command line:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了我们的Composer依赖项之后，我们现在可以通过在命令行中运行以下命令来安装它们：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If everything goes well, you should see something similar outputted to your
    screen. If not, Composer will return and notify you of the error for you to correct:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该会在屏幕上看到类似的内容输出。如果不顺利，Composer将返回并通知你错误，以便你进行纠正：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we need to load the dependencies into Yii. The easiest way to do this
    is to add the following to our `index.php` file before `require_once($yii)`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将依赖项加载到Yii中。最简单的方法是在`index.php`文件中的`require_once($yii)`之前添加以下内容：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating the database
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: With our dependencies and configuration files in place, we can now create our
    database. Using the `yiic` command, create a migration called users and a migration
    called reminders.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的依赖项和配置文件就绪后，我们现在可以创建我们的数据库。使用`yiic`命令，创建一个名为users的迁移和一个名为reminders的迁移。
- en: The users migration
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户迁移
- en: 'The users migration will create the `users` database and ensure that no duplicate
    e-mail address can be entered at the database level. Within the `protected/migrations`
    folder, open up the users migration:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用户迁移将创建`users`数据库并确保在数据库级别不能输入重复的电子邮件地址。在`protected/migrations`文件夹中，打开用户迁移：
- en: 'In the `up()` method, add the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`up()`方法中添加以下内容：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may notice that the column types we selected do not match up with MySQL
    column types. This is because we are allowing Yii to determine the appropriate
    column type for the database adapter we are using. This allows interoperability
    between multiple database drivers, meaning that we could seamlessly swap the underlying
    database technology from a MySQL database to a SQLite or Postgres database without
    having to change our migrations. The Yii manual has more information about valid
    column types at [http://www.yiiframework.com/doc/api/1.1/CDbSchema#getColumnType-detail](http://www.yiiframework.com/doc/api/1.1/CDbSchema#getColumnType-detail).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到我们选择的列类型与MySQL列类型不匹配。这是因为我们允许Yii为我们使用的数据库适配器确定适当的列类型。这允许多个数据库驱动程序之间的互操作性，这意味着我们可以无缝地在MySQL数据库、SQLite或Postgres数据库之间切换底层数据库技术，而无需更改我们的迁移。Yii手册有更多关于有效列类型的信息，请参阅[http://www.yiiframework.com/doc/api/1.1/CDbSchema#getColumnType-detail](http://www.yiiframework.com/doc/api/1.1/CDbSchema#getColumnType-detail)。
- en: 'Next, we want to create a unique index on the `email` column, which we can
    do as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想在`email`列上创建一个唯一索引，我们可以这样做：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, in the `down()` method, add a call to drop the `users` table:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`down()`方法中添加一个调用以删除`users`表：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The reminders and events migration
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提醒和事件迁移
- en: Now, we'll create reminders and events migrations that will create the `reminders`
    and `events` table in our database. These two tables will store the bulk of the
    data for our application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建提醒和事件迁移，这些迁移将在我们的数据库中创建`reminders`和`events`表。这两个表将存储我们应用程序的大部分数据。
- en: 'In our reminders migration, add the following to the `up()` method to create
    the `events` table:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的提醒迁移中，将以下内容添加到`up()`方法以创建`events`表：
- en: '[PRE15]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then create a foreign key relationship between `events` and `users`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在`events`和`users`之间创建一个外键关系：
- en: '[PRE16]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then create the `reminders` table, as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建`reminders`表，如下所示：
- en: '[PRE17]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, create a foreign key relationship between `reminders` and `events`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`reminders`和`events`之间创建一个外键关系：
- en: '[PRE18]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that for both foreign keys, we want everything to be removed if a parent
    record is removed. For instance, if we delete an event, all reminders associated
    with that event should be removed as well. And if a user is deleted, all events
    and all reminders associated with those events should also be removed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于两个外键，我们希望在删除父记录时删除所有内容。例如，如果我们删除一个事件，与该事件关联的所有提醒也应该被删除。同样，如果删除一个用户，与该用户关联的所有事件和提醒也应该被删除。
- en: 'Then, to the `down()` method, add the following to drop the foreign keys and
    the tables. Once data has been added to our database, we won''t be able to drop
    the tables until the foreign key relationships have been removed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，向`down()`方法添加以下内容以删除外键和表。一旦数据已添加到我们的数据库中，除非删除外键关系，否则我们无法删除表：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once everything has been added, apply the migrations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一切添加完毕后，应用迁移。
- en: Creating models
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: By now, you should be familiar with using the Gii tool to create models for
    our newly created tables. Go ahead and create the models for `Users`, `Reminders`,
    and `Events`. After creating each model, there are several changes we need to
    make to each of them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该熟悉使用Gii工具为我们新创建的表创建模型。请继续创建`Users`、`Reminders`和`Events`模型的模型。创建每个模型后，我们需要对每个模型进行一些更改。
- en: Model behaviors
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型行为
- en: The first change that will need to be made to our newly created models is the
    automatic setting of the created and updated timestamp. In previous chapters,
    we modified the `beforeSave()` method to do this; however, Yii provides an easier
    way to implement this feature that is database-agnostic and reduces the amount
    of code we have to add to our models. To do this, we are going to attach a behavior
    to each of our models.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对我们新创建的模型进行的第一个更改是自动设置创建和更新时间戳。在之前的章节中，我们修改了`beforeSave()`方法来实现这一点；然而，Yii提供了一个更简单的方法来实现这个功能，它是数据库无关的，并且减少了我们需要添加到模型中的代码量。为此，我们将为每个模型附加一个行为。
- en: Behaviors in Yii are objects that have methods that can be attached to a component
    (in our case, a model). These behaviors then listen for certain events on the
    attached component (such as the `beforeSave()` method) and execute when that event
    is triggered.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Yii中的行为是具有可以附加到组件（在我们的情况下是模型）的方法的对象。这些行为会监听附加组件上的某些事件（如`beforeSave()`方法），并在事件触发时执行。
- en: 'The behavior that we''ll be adding to each of our models is called `CTimestampBehavior`
    and provides the necessary tools to automatically set the created and updated
    time. To attach this behavior, simply add the following method to our `Users.php`,
    `Events.php`, and `Reminders.php` files within the `protected/models` directory:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加到每个模型中的行为称为`CTimestampBehavior`，它提供了自动设置创建和更新时间的必要工具。要附加此行为，只需将以下方法添加到我们的`Users.php`、`Events.php`和`Reminders.php`文件中，这些文件位于`protected/models`目录内：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about `CTimestampBehavior` can be found in the Yii documentation
    available at [http://www.yiiframework.com/doc/api/1.1/CTimestampBehavior/](http://www.yiiframework.com/doc/api/1.1/CTimestampBehavior/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`CTimestampBehavior`的更多信息可以在Yii文档中找到，该文档可在[http://www.yiiframework.com/doc/api/1.1/CTimestampBehavior/](http://www.yiiframework.com/doc/api/1.1/CTimestampBehavior/)找到。
- en: The Users model
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户模型
- en: 'The first change we''ll need to make to our Users model is the definition of
    the relations between users and events. If you used Gii to generate the models,
    it must have prepopulated the `relations()` method for you. Otherwise, add the
    following method to the `Users.php` model at `protected/models/`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对`Users`模型进行的第一个更改是定义用户和事件之间的关系。如果您使用了Gii来生成模型，它必须已经为您预先填充了`relations()`方法。否则，请将以下方法添加到`protected/models/`目录下的`Users.php`模型中：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we''ll need to add a private attribute to our model that will store the
    old attributes of our model so that we can compare previous values to changed
    values without having to requery the database. Have a look at the following line
    of code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要给我们的模型添加一个私有属性，用于存储模型的老旧属性，这样我们就可以在不需要重新查询数据库的情况下，比较旧值和更改后的值。请看以下代码行：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can automatically populate this attribute by adding an `afterFind()` method
    to our model:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过给我们的模型添加一个`afterFind()`方法来自动填充此属性：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we''ll want to add a `beforeSave()` method to our model that will
    not modify the user''s password if we change the user''s e-mail address, and that
    will properly encrypt the password if we do change it:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望给我们的模型添加一个`beforeSave()`方法，当更改用户的电子邮件地址时，该方法不会修改用户的密码，并且如果确实更改了密码，将正确地加密密码：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Bcrypt password hashing
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bcrypt密码散列
- en: When storing passwords in a database, it is extremely important that you store
    those passwords in such a way that makes it easy for us to verify that the user
    provided the right password but makes it difficult for attackers to guess the
    password. Since most users use the same e-mail address and password for all their
    online identities, it's extremely important that we keep that information as secure
    as possible.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中存储密码时，非常重要的一点是，要以一种使我们能够轻松验证用户提供了正确的密码，同时使攻击者难以猜测密码的方式存储这些密码。由于大多数用户使用相同的电子邮件地址和密码来处理他们的所有在线身份，因此我们保持该信息尽可能安全至关重要。
- en: One way of doing this is by using a symmetric block cipher cryptographic algorithm,
    such as Bcrypt. Bcrypt converts plain text passwords into a hash with a salted
    value, iterated multiple times as defined by a cost factor. When using Bcrypt,
    the cost factor increased the work effector required to both generate and verify
    a password. By increasing the time it takes to generate and verify passwords,
    we can make a brute force attack very costly to a potential attacker. This cost
    factor also allows us as developers to adjust the difficulty of the password over
    time as computing power increases.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的其中一种方法是通过使用对称块加密算法，如Bcrypt。Bcrypt将明文密码转换为加盐的哈希值，根据成本因子迭代多次。当使用Bcrypt时，成本因子增加了生成和验证密码所需的工作量。通过增加生成和验证密码所需的时间，我们可以使暴力攻击对潜在攻击者变得非常昂贵。此成本因子还允许我们作为开发者随着计算能力的增加调整密码的难度。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about the password functions that were introduced in PHP 5.5
    at [http://us2.php.net/manual/en/ref.password.php](http://us2.php.net/manual/en/ref.password.php).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://us2.php.net/manual/en/ref.password.php](http://us2.php.net/manual/en/ref.password.php)
    上了解更多关于PHP 5.5中引入的密码函数的信息。
- en: The Reminders model
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提醒模型
- en: 'Next, we need to make a few changes to our Reminders model. First, let''s verify
    that the relations have been properly set up. In `protected/models/Reminders.php`,
    add the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要对我们的提醒模型进行一些修改。首先，让我们验证关系是否已经正确设置。在 `protected/models/Reminders.php`
    中添加以下内容：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, add a `beforeValidate()` method to convert the user submitted time to
    an integer timestamp and to store the offset time as UTC in our database:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加一个 `beforeValidate()` 方法，将用户提交的时间转换为整数时间戳，并将偏移时间存储为UTC到我们的数据库中：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The Events model
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件模型
- en: 'Next, we''re going to add and update several methods in our `protected/models/Events.php`
    model. The steps are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `protected/models/Events.php` 模型中添加和更新几个方法。步骤如下：
- en: 'First verify that the relations have been properly set up:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先验证关系是否已经正确设置：
- en: '[PRE27]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then add a `beforeValidate()` method to automatically adjust the submission
    and time and to automatically set the user to the currently logged-in user:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加一个 `beforeValidate()` 方法来自动调整提交时间和时间，并自动将用户设置为当前登录用户：
- en: '[PRE28]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`Yii::app()->user` is a reference to a `CWebUser` object that will handle the
    identity of our user once we are authenticated. To read more about `CWebUser`,
    check out [http://www.yiiframework.com/doc/api/1.1/CWebUser](http://www.yiiframework.com/doc/api/1.1/CWebUser).'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Yii::app()->user` 是对一个 `CWebUser` 对象的引用，一旦我们进行身份验证，它将处理我们的用户身份。要了解更多关于 `CWebUser`
    的信息，请查看 [http://www.yiiframework.com/doc/api/1.1/CWebUser](http://www.yiiframework.com/doc/api/1.1/CWebUser)。'
- en: 'Next, add the following getter method to our model. This method will allow
    us to retrieve the requested data from the URL to search against our events database:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加以下获取器方法到我们的模型中。此方法将允许我们从URL检索所需数据以搜索我们的活动数据库：
- en: '[PRE29]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, we''re going to update our model''s `search()` method to enable us to
    search for all events that occur between a certain time, specifically over the
    period of a single day. Modify the method signature to look as follows:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将更新我们的模型 `search()` 方法，以便我们能够搜索在特定时间发生的事件，特别是单日的时间段。修改方法签名如下：
- en: '[PRE30]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, add the following before the method returns:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在方法返回之前添加以下内容：
- en: '[PRE31]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Searching for events and displaying them
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索事件并显示它们
- en: 'Before we get too involved with our controllers, let''s take a look at what
    our frontend will look like to search for and display events as it will help to
    explain the model changes to the Events model and will help us identify what we
    still need to implement. Have a look at the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入到控制器之前，让我们看看我们的前端将如何搜索和显示事件，因为它将有助于解释对事件模型所做的模型更改，并将帮助我们确定我们还需要实现什么。请查看以下截图：
- en: '![Searching for events and displaying them](img/7734OS_03_01.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![搜索事件并显示它们](img/7734OS_03_01.jpg)'
- en: Our frontend view is broken down into several different components. First, we
    have a button in the top-right corner that should link to a simple CRUD form to
    create and update events. We also have a month and year picker that shows the
    current selected year and allows us to advance forwards or backwards in time by
    one month or one year increments. Directly below that, we have a date picker that
    shows the currently selected date (or the current date if none is selected) with
    fifteen days on each side of it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的前端视图被分解为几个不同的组件。首先，我们在右上角有一个按钮，该按钮应链接到一个简单的CRUD表单，用于创建和更新事件。我们还有一个月份和年份选择器，显示当前选定的年份，并允许我们按一个月或一年的增量向前或向后推进时间。直接在下面，我们有一个日期选择器，显示当前选定的日期（如果没有选择，则为当前日期），在其两侧各有十五天。
- en: On the left-hand side, we have the currently selected date displayed in text,
    followed by a sorter for both time and title of the events displayed below it,
    which occur on the selected day.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们显示当前选定的日期文本，然后是显示在选定日期下的事件的时间和标题的排序器。
- en: Finally, on the right-hand side, we have an Ajax view, which will appear when
    an event is clicked on showing the event details as well as all reminders associated
    with that event with some extra functionality to immediately remove that reminder.
    Additionally, we'll be providing the user with a link to edit the selected event.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在右侧，我们有一个Ajax视图，当点击事件时将显示事件详情以及与该事件相关的所有提醒，并提供一些额外功能，可以立即删除该提醒。此外，我们还将为用户提供一个链接来编辑所选事件。
- en: To achieve this level of functionality, we're going to have to create a custom
    list view, which will extend `CListView`, add a custom URL route, and create several
    new controller methods. Let's get started.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要达到这一级别的功能，我们需要创建一个自定义列表视图，该视图将扩展`CListView`，添加一个自定义URL路由，并创建几个新的控制器方法。让我们开始吧。
- en: Custom routing for dates
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期的自定义路由
- en: 'The first change that we''ll need to make is a change to the `urlManager` in
    our main configuration file. Within the `urlManager[''rules'']` array, add the
    following route:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一个更改是更改主配置文件中的`urlManager`。在`urlManager['rules']`数组中，添加以下路由：
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This custom route will allow us to arbitrarily set a date string in the URL
    and pass it as a `$_GET` parameter automatically to the `indexAction()` method
    of our `EventController` class, which we will create shortly.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义路由将允许我们任意地在URL中设置一个日期字符串，并将其自动作为`$_GET`参数传递给我们的`EventController`类的`indexAction()`方法，该类我们将很快创建。
- en: Creating the controller for events
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建事件控制器
- en: 'Let''s move on to our `EventController`. This controller will handle all of
    the actions necessary for working with events in our application. Create a new
    file in `protected/controllers` called `EventController.php` that has the following
    class definition:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到我们的`EventController`。这个控制器将处理我们应用程序中与事件相关的所有必要操作。在`protected/controllers`中创建一个名为`EventController.php`的新文件，其中包含以下类定义：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Perform the following steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'The first method we should create is our `indexAction()`. The `$_GET` parameters
    passed to this method will determine what events will ultimately be displayed
    on the page. To do this, we''ll take advantage of our event model''s `search()`
    method. When searching, we''ll also want to ensure that we only display data for
    the currently logged-in user:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该创建的第一个方法是我们的`indexAction()`。传递给此方法的`$_GET`参数将决定最终将在页面上显示哪些事件。为此，我们将利用我们的活动模型的`search()`方法。在搜索时，我们还想确保只显示当前登录用户的数据：
- en: '[PRE34]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, we need to create a utility method to load our model by a given primary
    key. We''ll be using this method throughout our model:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个实用方法来通过给定的主键加载我们的模型。我们将在整个模型中使用此方法：
- en: '[PRE35]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, we need to create an AJAX method to display the details of a particular
    event within our list view:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要创建一个AJAX方法来在我们的列表视图中显示特定事件的详情：
- en: '[PRE36]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'While we are in our `EventController`, it''s worthwhile implementing the remaining
    functionality necessary to both save and delete events. Our `save()` method will
    simply accept the `$_POST` input from the view file and should look as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在`EventController`中时，实现保存和删除事件所需的其他功能是值得的。我们的`save()`方法将简单地接受来自视图文件的`$_POST`输入，并应如下所示：
- en: '[PRE37]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, there''s our `delete()` method, which will facilitate the deletion
    of events:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，是我们的`delete()`方法，它将促进事件的删除：
- en: '[PRE38]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Creating the reminders controller
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建提醒控制器
- en: The next controller we'll want to implement is our `ReminderController`. Unlike
    our `EventController`, this controller should only serve AJAX responses and won't
    require any views.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要实现的是 `ReminderController` 控制器。与我们的 `EventController` 不同，这个控制器应该只提供 AJAX
    响应，并且不需要任何视图。
- en: 'We''ll start by creating a new file at `protected/controllers` called `ReminderController.php`
    and have the class extend `CController`. Perform the following steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在 `protected/controllers` 目录下创建一个新的文件 `ReminderController.php`，并将类扩展为 `CController`。执行以下步骤：
- en: 'First, we''ll want to make sure that only POST requests are sent to this controller.
    An easy way to force all requests to the controller to be POST requests is by
    checking the request type before each action runs. We can implement that check
    by using the `beforeAction()` method:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们想要确保只有 POST 请求被发送到这个控制器。强制所有请求在执行每个操作之前都是 POST 请求的一个简单方法是检查请求类型。我们可以通过使用
    `beforeAction()` 方法来实现这个检查：
- en: '[PRE39]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, we should implement a method to load a particular reminder and another
    method to verify that we have access to the associated event for a particular
    reminder, as follows:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该实现一个方法来加载特定的提醒，以及另一个方法来验证我们是否有权访问特定提醒关联的事件，如下所示：
- en: '[PRE40]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We''ll then add in the functionality necessary to delete a reminder:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将添加删除提醒所需的功能：
- en: '[PRE41]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, we''ll add in the functionality necessary to save and modify a reminder:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将添加保存和修改提醒所需的功能：
- en: '[PRE42]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Our `save()` method is built to allow reminders to both be created and modified
    through a single action rather than multiple actions.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `save()` 方法被设计成允许通过单一操作创建和修改提醒，而不是多个操作。
- en: Creating the layout
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建布局
- en: The first view that we should implement is our `main.php` file at `views/layouts/`.
    Since this file will look identical to the layout we created in the previous two
    chapters, copy the `views/layouts/main.php` file from the project resources folder
    into your application.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该实现的第一视图是位于 `views/layouts/` 目录下的 `main.php` 文件。由于这个文件将与我们在前两章中创建的布局相同，所以请将项目资源文件夹中的
    `views/layouts/main.php` 文件复制到您的应用程序中。
- en: Creating the main view
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建主视图
- en: 'Next, we''ll implement our list view that will display all of our events. To
    do this, we''ll be extending the `CListView` class. Perform the following steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实现一个列表视图，用于显示所有事件。为此，我们将扩展 `CListView` 类。执行以下步骤：
- en: 'First, create the view file `index.php` in `protected/views/events` that will
    call this custom class, and then add a button to allow the user to create a new
    event:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 `protected/views/events` 中创建一个名为 `index.php` 的视图文件，该文件将调用这个自定义类，然后添加一个按钮，允许用户创建新事件：
- en: '[PRE43]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, add the following to implement the list view. First, we''ll need to instantiate
    a new widget that will contain our custom list view:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加以下内容以实现列表视图。首先，我们需要实例化一个新的小部件，它将包含我们的自定义列表视图：
- en: '[PRE44]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After that, we''ll need to specify `dataProvider` that will populate our model.
    This is where our previous changes to the event model''s `search() method` come
    into play:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要指定 `dataProvider`，它将填充我们的模型。这是我们之前对事件模型 `search()` 方法所做的更改发挥作用的地方：
- en: '[PRE45]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, we''ll want to specify the template that our list view will use and also
    the element tag our list view should be contained in:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们想要指定列表视图将使用的模板，以及列表视图应该包含的元素标签：
- en: '[PRE46]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, we''ll enable sorting with the list view and specify which model attributes
    can be sorted against:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将启用列表视图的排序功能，并指定哪些模型属性可以用于排序：
- en: '[PRE47]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Finally, we''ll need to specify `itemView`, which will define what each item
    in our list will look like:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要指定 `itemView`，这将定义列表中每个项目的样子：
- en: '[PRE48]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'At the end of this file, we should also register the CSS that will be used
    to make our view look pretty in addition to creating the CSS file `/css/calendar.css`
    so that Yii doesn''t throw an error during the next steps. Please refer to the
    source code of this chapter to retrieve the `calendar.css` file:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件的末尾，我们还应该注册用于使视图看起来更漂亮的 CSS，同时创建 CSS 文件 `/css/calendar.css`，以便在下一步中 Yii
    不会抛出错误。请参考本章的源代码以检索 `calendar.css` 文件：
- en: '[PRE49]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Creating the item view
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建项目视图
- en: 'The next file that we need to create is our `itemView` file, `protected/views/events/_event.php`,
    as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建的是 `itemView` 文件，即 `protected/views/events/_event.php`，如下所示：
- en: '[PRE50]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: To save some time later, let's go ahead and implement a view to show the details
    of a particular event in `protected/views/events/details.php`. We'll add the JavaScript
    bindings to show this when we create `EventListView`. Grab this file from the
    project resources folder, and add it into your application.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省以后的时间，让我们先实现一个视图来显示特定事件的详细信息，在`protected/views/events/details.php`。当我们创建`EventListView`时，我们将添加JavaScript绑定来显示它。从项目资源文件夹中获取此文件，并将其添加到你的应用程序中。
- en: Creating the event list view
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建事件列表视图
- en: 'With our views in place, we now need to implement our `EventListView` that
    will display our calendar picker and our events. The steps are as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的视图就绪后，我们现在需要实现我们的`EventListView`，它将显示我们的日历选择器和事件。步骤如下：
- en: 'To do this, create a new file in `protected/components` called `EventListView.php`.
    This class should extend `CListView`, which we will have to explicitly load to
    make Yii aware of it. By extending `CListView`, we immediately get access to several
    useful functions, such as sorting and displaying our events:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，在`protected/components`中创建一个名为`EventListView.php`的新文件。这个类应该扩展`CListView`，我们将必须显式加载它以使Yii了解它。通过扩展`CListView`，我们立即可以访问几个有用的函数，例如排序和显示我们的事件：
- en: '[PRE51]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Next, we''ll need to create another custom getter to retrieve the current date
    from the URL:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建另一个自定义获取器来从URL中检索当前日期：
- en: '[PRE52]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, we''re going to overload the `CListView` `renderItems()` method, which
    will allow us to display our events as we like. To do this, create the `renderItems()`
    method, as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将重载`CListView`的`renderItems()`方法，这将允许我们按我们的喜好显示我们的事件。为此，创建`renderItems()`方法，如下所示：
- en: '[PRE53]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Within the `events_container` `div` that we just created, we need to add our
    month/year picker. These links will determine what the next and previous month
    and year are by the current date, which it will retrieve from the `getDate()`
    method we defined earlier:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚刚创建的`events_container` `div`中，我们需要添加我们的月/年选择器。这些链接将通过当前日期确定下一个和上一个月份和年份，它将从这个我们之前定义的`getDate()`方法中检索：
- en: '[PRE54]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Immediately following this closing `div`, we then need to add our date picker
    that will show 15 days on each side of the currently selected date. We can implement
    that as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 紧接着这个关闭`div`之后，我们需要添加我们的日期选择器，它将显示当前选定日期两侧的15天。我们可以这样实现它：
- en: '[PRE55]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'To make our lives easier, we can create a utility method that will display
    a range of dates for us automatically, called `renderDays()`. This will allow
    our code to be more readable and easier to debug should we need to. This method
    should accept two arguments: a start date and an end date:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的生活更简单，我们可以创建一个实用方法，它会自动显示一系列日期，称为`renderDays()`。这将使我们的代码更易于阅读和调试，如果我们需要的话。这个方法应该接受两个参数：一个开始日期和一个结束日期：
- en: '[PRE56]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then, we''ll need to create another utility method to display a particular
    date and provide a link to it:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要创建另一个实用方法来显示特定日期并提供一个链接：
- en: '[PRE57]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The final part of our custom view is a container to display the sorter, the
    items, and the details for a particular item. We should add the `day_picker` `div`
    immediately that we opened earlier. Because we took advantage of `CListView`,
    we can simply reference the parent class'' `renderItems()` method to display all
    of our items, and the parent class'' `renderSorter()` method to display the sorter
    according to the configuration we passed in our index view:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自定义视图的最后一部分是一个容器，用于显示排序器、项目以及特定项目的详细信息。我们应该立即添加我们之前打开的`day_picker` `div`。因为我们利用了`CListView`，我们可以简单地引用父类的`renderItems()`方法来显示我们所有的项目，以及父类的`renderSorter()`方法来根据我们在索引视图中传递的配置显示排序器：
- en: '[PRE58]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Then, let''s add some AJAX to display the details of an event when we click
    on an event and to remove a reminder if the event has any attached to it. We can
    add this right before we close our `renderItems()` method:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们添加一些AJAX来在点击事件时显示事件的详细信息，如果事件有任何附加的提醒，则移除它。我们可以在关闭`renderItems()`方法之前添加这个：
- en: '[PRE59]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Once you''ve added the CSS from the `calendar.css` file in the associated project
    source code, our view should be complete. Have a look at the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将关联项目源代码中的`calendar.css`文件中的CSS添加进来，我们的视图就应该完成了。看看下面的截图：
- en: '![Creating the event list view](img/7734OS_03_02.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![创建事件列表视图](img/7734OS_03_02.jpg)'
- en: Creating and saving events
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建和保存事件
- en: 'Now that we have a way to display events, we need to actually create them.
    This view will allow us to both save events as well as dynamically add multiple
    reminders to an existing event. Begin by creating `protected/views/events/save.php`,
    as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了显示事件的方法，我们需要实际创建它们。这个视图将允许我们保存事件以及动态向现有事件添加多个提醒。首先创建`protected/views/events/save.php`，如下所示：
- en: 'First we''re going to create the functionality necessary to modify the core
    attributes of the event: the title, date, and time:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建修改事件核心属性（标题、日期和时间）所需的功能：
- en: '[PRE60]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Next, we''ll want to display all of the reminders attached to our event if
    the event has been created. Since we''ve already established a relationship between
    reminders and events, we can do this simply by iterating through the `$events->reminders`
    relations, which will be populated with all of the reminders associated with our
    event:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，如果我们已经创建了事件，我们希望显示所有附加到事件上的提醒。由于我们已经建立了提醒和事件之间的关系，我们可以通过迭代`$events->reminders`关系来实现，这将填充与我们的事件相关联的所有提醒：
- en: '[PRE61]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Within this `if` clause, we''ll also want to create a template reminder that
    we can attach and clone with JavaScript. This will allow us to create as many
    reminders as we want for our events:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`if`子句中，我们还想创建一个模板提醒，我们可以使用JavaScript将其附加和克隆。这将允许我们为事件创建尽可能多的提醒：
- en: '[PRE62]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Finally, we need to add some buttons and close our widget:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要添加一些按钮并关闭我们的小部件：
- en: '[PRE63]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In its present state, our time fields aren''t very user friendly as the user
    has to manually enter a specific date timestamp, such as `2014-02-21 19:50:00`.
    To make this experience easier on our users, we can download a plugin from GitHub
    called bootstrap-datetimepicker. Simply clone the repository to the `/js` directory
    of the application using `git` or download the package directly:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前状态下，我们的时间字段对用户来说并不十分友好，因为用户必须手动输入特定的日期时间戳，例如 `2014-02-21 19:50:00`。为了让用户体验更简单，我们可以从GitHub下载一个名为bootstrap-datetimepicker的插件。只需使用`git`将仓库克隆到应用程序的`/js`目录，或者直接下载该包：
- en: '[PRE64]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Then, register the relevant CSS and JavaScript:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，注册相关的CSS和JavaScript：
- en: '[PRE65]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Finally, we can add the JavaScript bindings necessary to display the date time
    picker and to dynamically add new reminders. Within the project resources folder,
    copy the remaining JavaScript code from the `save.php` file at `protected/views/events/`
    into this file.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以添加必要的JavaScript绑定来显示日期时间选择器，并动态添加新的提醒。在项目资源文件夹中，将`protected/views/events/`目录下的`save.php`文件中的剩余JavaScript代码复制到该文件中。
- en: Since we've already created all the necessary controller actions to save and
    display events, we can now create and modify new events, add reminders, and view
    them in the interface that we built earlier. Check it out!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经创建了保存和显示事件所需的所有控制器操作，我们现在可以创建和修改新事件，添加提醒，并在我们之前构建的界面上查看它们。看看吧！
- en: Creating the controller to manage users
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用于管理用户的控制器
- en: Next, we'll need to implement the necessary methods to create and modify users
    within our application. Since our `users` table doesn't have any concept of roles
    yet, we'll manage our users from the command line through `CConsoleCommand`. This
    method will ensure that only authenticated users (users who have access to our
    server) can modify the user's information. In a real-world application, this functionality
    can be moved to a secured `UsersController` in our application.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现创建和修改我们应用程序中用户所需的方法。由于我们的`users`表还没有角色的概念，我们将通过`CConsoleCommand`从命令行管理用户。此方法将确保只有经过身份验证的用户（可以访问我们的服务器）才能修改用户信息。在实际应用中，此功能可以移动到我们应用程序中的受保护`UsersController`。
- en: Creating users
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户
- en: 'To start with our user management, create a new console command in `protected/commands/UserCommand.php`,
    and add the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始用户管理，请在`protected/commands/UserCommand.php`中创建一个新的控制台命令，并添加以下内容：
- en: '[PRE66]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The `CConsoleCommand` class is very similar to our controllers. In that, we
    can define actions that we want to run as well as any parameters that we want
    added. The first action we should create is an action to create our users. Since
    we''ve already set up our Users model to handle the appropriate password hashing,
    we can simply use the following:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`CConsoleCommand`类与我们控制器非常相似。在那里，我们可以定义要运行的操作以及我们想要添加的任何参数。我们应该创建的第一个操作是创建我们的用户。由于我们已经设置了用户模型来处理适当的密码散列，我们可以简单地使用以下内容：'
- en: '[PRE67]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We can then create new users from the command line, as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以从命令行创建新用户，如下所示：
- en: '[PRE68]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: If successful, the command will output `User Created`; otherwise, it will return
    an error.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，命令将输出`User Created`；否则，将返回错误。
- en: Deleting users
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除用户
- en: 'Deletion of users can also be a callable action that takes a user''s e-mail
    address as an argument:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 删除用户也可以是一个可调用的操作，它接受用户的电子邮件地址作为参数：
- en: '[PRE69]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We can then call the action we just created by running the following command
    from our command line:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过从我们的命令行运行以下命令来调用我们刚刚创建的操作：
- en: '[PRE70]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Changing the user's password
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改用户的密码
- en: 'Next, we''ll want to provide the functionality to change a user''s password.
    Before we change the user''s password, we need to verify the user''s identity.
    Usually, we accomplish this by verifying that they have the password to their
    account. We can implement this, as follows, within `protected/commands/UserCommand.php`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将提供更改用户密码的功能。在我们更改用户密码之前，我们需要验证用户的身份。通常，我们通过验证他们是否有账户密码来完成这项工作。我们可以在`protected/commands/UserCommand.php`中按照以下方式实现这一点：
- en: '[PRE71]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Once again, we''re taking advantage of PHP''s `password_*` functions, which
    include the ability to verify a password:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 再次利用PHP的`password_*`函数，这些函数包括验证密码的能力：
- en: '[PRE72]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Assuming the user''s password is valid, we can then hash the password they
    provided on the command line and store it with the model:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户的密码有效，然后我们可以对用户在命令行提供的密码进行散列，并将其与模型一起存储：
- en: '[PRE73]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'From the command line, this command can be run as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行此命令如下：
- en: '[PRE74]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Note
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While managing users from the command line is simple, it isn't very secure because
    user's passwords may be stored in plain text in your terminal's command history.
    In a real-world application, consider managing users from a web interface over
    a secure connection.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然从命令行管理用户很简单，但并不安全，因为用户的密码可能以纯文本形式存储在您的终端命令历史记录中。在实际应用中，请考虑通过安全连接从Web界面管理用户。
- en: Authenticating with Bcrypt
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bcrypt进行认证
- en: The last thing that we need to implement for our users is authentication. To
    do this, we'll expand upon the authentication process we developed in [Chapter
    1](ch01.html "Chapter 1. A Task-management Application"), *A Task-management Application*,
    and modify it to work with our Bcrypt hashed passwords.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的用户实现最后一件事情，那就是认证。为此，我们将扩展我们在[第1章](ch01.html "第1章。任务管理应用")中开发的认证流程，*任务管理应用*，并将其修改为与我们的Bcrypt散列密码一起工作。
- en: 'First, copy the following files from the source code of [Chapter 1](ch01.html
    "Chapter 1. A Task-management Application"), *A Task-management Application* (or
    from the source code in this chapter) into our project:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从[第1章](ch01.html "第1章。任务管理应用")的源代码（或本章的源代码）中复制以下文件到我们的项目中：
- en: '`css/signin.css`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css/signin.css`'
- en: '`protected/views/layouts/signin.php`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protected/views/layouts/signin.php`'
- en: '`protected/views/site/login.php`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protected/views/site/login.php`'
- en: '`protected/models/LoginForm.php`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protected/models/LoginForm.php`'
- en: '`protected/controllers/SiteController.php`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protected/controllers/SiteController.php`'
- en: '`protected/components/UserIdentity.php`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protected/components/UserIdentity.php`'
- en: 'Since the majority of the work involved in authenticating a user is done, the
    only changes we need to make to our authentication process is in our `UserIdentity`
    class. Begin by opening up `protected/components/UserIdentity.php`. We''ll start
    by defining the class as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 由于验证用户的大部分工作已经完成，我们只需要修改我们的认证流程中的`UserIdentity`类。首先，打开`protected/components/UserIdentity.php`文件。我们将首先按照以下方式定义该类：
- en: Note
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Yii may have already generated this file for you. If so, delete the contents
    of it entirely, and follow the instructions as outlined in this section.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Yii可能已经为您生成了此文件。如果是这样，请删除其全部内容，并按照本节中概述的说明进行操作。
- en: '[PRE75]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Perform the following steps:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'First, we want to ensure that each user''s ID from the database is stored with
    our `WebUser` property. To do this, create a new private attribute called `$_id`:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们想确保将数据库中每个用户的ID存储在我们的`WebUser`属性中。为此，创建一个新的私有属性`$_id`：
- en: '[PRE76]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Then, create a getter to retrieve it:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个getter来检索它：
- en: '[PRE77]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Next, we need to define our `authenticate()` method that will be called from
    `LoginForm`:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义我们的`authenticate()`方法，该方法将从`LoginForm`中调用：
- en: '[PRE78]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Within this method, we''ll need to find the appropriate user model using the
    e-mail address that was provided to us by the user through `LoginForm`:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此方法中，我们需要使用用户通过`LoginForm`提供的电子邮件地址找到适当的用户模型：
- en: '[PRE79]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'With this information, we can then verify that a user with that e-mail address
    exists:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些信息，我们可以验证是否存在具有该电子邮件地址的用户：
- en: '[PRE80]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Then, we need to verify that the user''s password matches the one we have on
    record. If it does, we should make sure that no errors are returned to the `LoginForm`
    and set the `WebUser` ID:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要验证用户的密码是否与我们记录的密码匹配。如果匹配，我们应该确保不向`LoginForm`返回任何错误，并设置`WebUser` ID：
- en: '[PRE81]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Then, we should reject anything else that comes through the method:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们应该拒绝通过该方法传入的其他任何内容：
- en: '[PRE82]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Finally, return the error code back to the `LoginForm`:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将错误代码返回给`LoginForm`：
- en: '[PRE83]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Note
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In a real-world application, we will want to expose as little information as
    possible about a potential login attempt to the user or a potential attacker,
    which is why we return `ERROR_UNKNOWN_IDENTITY`. During debugging of your application,
    you may find it useful to return either `ERROR_USERNAME_INVALID` or `ERROR_PASSWORD_INVALID`
    to help you better understand why a login request failed.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，我们希望尽可能少地向用户或潜在攻击者暴露有关潜在登录尝试的信息，这就是为什么我们返回`ERROR_UNKNOWN_IDENTITY`。在调试您的应用程序时，您可能会发现返回`ERROR_USERNAME_INVALID`或`ERROR_PASSWORD_INVALID`很有用，这有助于您更好地理解登录请求失败的原因。
- en: Requiring authentication
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要身份验证
- en: 'Finally, we can force our users to authenticate against our database by adding
    the following to both `EventController` and `ReminderController`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过在`EventController`和`ReminderController`中添加以下内容来强制用户对我们的数据库进行身份验证：
- en: '[PRE84]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Sending e-mail reminders
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送电子邮件提醒
- en: At this point, users can create new events and reminders for themselves through
    our web interface; however, they aren't able to receive these reminders yet. To
    send out these reminders, we'll create a new console command called `RemindersCommand`
    in `protected/commands/RemindersCommand.php`. When we're done, we'll be able to
    add this command to either our crontab or to our scheduled tasks and have it automatically
    process reminders in the background.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，用户可以通过我们的网络界面创建新的事件和提醒；然而，他们目前还不能接收这些提醒。为了发送这些提醒，我们将在`protected/commands/RemindersCommand.php`中创建一个新的控制台命令`RemindersCommand`。完成之后，我们可以将此命令添加到crontab或计划任务中，以便在后台自动处理提醒。
- en: 'Once the `RemindersCommand` file has been created, create the class definition
    in addition to an action to send the reminders that takes a time interval as an
    argument. This interval will define the length of time in minutes that we should
    run our command for. It will find all of the reminders within that interval''s
    timeframe to process:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了`RemindersCommand`文件，除了创建一个接受时间间隔作为参数的动作来发送提醒外，还需要创建类定义。这个时间间隔将定义我们应该运行命令的分钟数。它将找到该时间间隔时间段内的所有提醒进行处理：
- en: '[PRE85]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Within our action, define the UNIX timestamp that we should begin at as well
    as the time we should end at for the particular interval we are working with.
    The end time should be all microseconds before the next interval begins so that
    we do not send duplicate reminders out:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的动作中，定义我们应该开始的时间戳以及我们应该结束的时间，针对我们正在处理的时间间隔。结束时间应该在下一个间隔开始之前的所有微秒之前，这样我们就不发送重复的提醒：
- en: '[PRE86]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'With our time interval defined, we can now create a database search criteria
    with `CDBCriteria` that we can pass to our `reminders` `find()` method:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了时间间隔后，我们现在可以使用`CDBCriteria`创建一个数据库搜索条件，我们可以将其传递给`reminders`的`find()`方法：
- en: '[PRE87]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The `find()` method will return all reminders within the time interval that
    we specified. We can now simply iterate through the `$reminders` array and send
    an e-mail to the user the reminder belongs to:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`find()`方法将返回我们指定的所有时间间隔内的提醒。现在我们可以简单地遍历`$reminders`数组，并向提醒所属的用户发送电子邮件：'
- en: '[PRE88]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Note
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using a remote SMTP server and have already populated your `protected/config/params.php`
    file with your SMTP information, the previous code should work for you. If you're
    using a local mail server, such as Postfix or another setup, be sure to read the
    PHPMailer documentation at [https://github.com/PHPMailer/PHPMailer](https://github.com/PHPMailer/PHPMailer)
    on how to propery configure PHPMailer.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用远程SMTP服务器，并且已经将SMTP信息填充到`protected/config/params.php`文件中，则前面的代码应该适用于您。如果您正在使用本地邮件服务器，如Postfix或其他配置，请确保阅读PHPMailer文档[https://github.com/PHPMailer/PHPMailer](https://github.com/PHPMailer/PHPMailer)，了解如何正确配置PHPMailer。
- en: 'From the command line, we can now send reminders by running the following command
    (in the example we are using a `5`-minute interval):'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行，我们现在可以通过运行以下命令来发送提醒（在示例中我们使用的是`5`分钟间隔）：
- en: '[PRE89]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Once you have created events in your database, you can run the command or put
    this command on your crontab or scheduled tasks and have your application automatically
    send reminders to your users.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在数据库中创建了事件，你可以运行该命令或将此命令放入你的crontab或计划任务中，让你的应用程序自动向用户发送提醒。
- en: Summary
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered quite a bit of information in this chapter! We learned how to integrate
    our application with a MySQL database, started storing user information securely
    in our database, and expanded upon our knowledge of console commands. We also
    covered how to add behaviors and how to add relations to our models. Additionally,
    we went over including Composer and Composer dependencies into our project to
    reduce the amount of code that have to import manually.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中涵盖了大量的信息！我们学习了如何将我们的应用程序与MySQL数据库集成，开始安全地存储用户信息到我们的数据库中，并扩展了我们对控制台命令的知识。我们还介绍了如何为我们的模型添加行为和关系。此外，我们还讨论了如何将Composer及其依赖项包含到我们的项目中，以减少需要手动导入的代码量。
- en: In the next chapter, we'll be expanding on the knowledge we learned and the
    tools we developed to build even more complex and integrated web applications.
    Before continuing on, be sure to take a look at all the classes we referenced
    in the chapter in the official Yii documentation located at [http://www.yiiframework.com/doc/](http://www.yiiframework.com/doc/).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展我们在本章中学到的知识和我们开发的工具，以构建更复杂和集成的Web应用程序。在继续之前，请务必查看官方Yii文档中我们本章引用的所有类，文档位于[http://www.yiiframework.com/doc/](http://www.yiiframework.com/doc/)。
