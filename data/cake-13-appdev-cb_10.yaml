- en: Chapter 10. Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章。测试
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Setting up the test framework
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置测试框架
- en: Creating fixtures and testing model methods
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建测试数据（ fixtures）并测试模型方法
- en: Testing controller actions and their views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试控制器操作及其视图
- en: Using mocks to test controllers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模拟来测试控制器
- en: Running tests from the command line
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行运行测试
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'This chapter covers one of the most interesting areas of application programming:
    unit testing through CakePHP''s built-in tools, which offers a complete and powerful
    unit testing framework.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了应用编程中最有趣的一个领域：通过 CakePHP 内置工具进行单元测试，它提供了一个完整且强大的单元测试框架。
- en: The first recipe shows how to set up the test framework so that we can create
    our own test cases. The second recipe shows how to create test data (fixtures)
    and use that data to test model methods. The third and fourth recipes show how
    to test controller actions, and how to test that our views are showing what we
    expect. The last recipe shows how to run the test in a non-ordinary fashion.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个菜谱展示了如何设置测试框架，以便我们可以创建自己的测试用例。第二个菜谱展示了如何创建测试数据（ fixtures）并使用这些数据来测试模型方法。第三和第四个菜谱展示了如何测试控制器操作，以及如何测试我们的视图是否显示了我们期望的内容。最后一个菜谱展示了如何以非普通方式运行测试。
- en: Setting up the test framework
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置测试框架
- en: In this recipe, we will learn how to prepare our CakePHP application with all
    the elements needed to create our own unit tests, setting up the foundation for
    the rest of the recipes in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何准备我们的 CakePHP 应用程序，使其包含创建我们自己的单元测试所需的所有元素，为本章其余菜谱的设置打下基础。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through the recipes included in this chapter, we need some data to work
    with. Create the following tables by issuing these SQL statements:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章包含的菜谱，我们需要一些数据来工作。通过发出以下 SQL 语句创建以下表：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a controller in a file named `articles_controller.php` and place it
    in your `app/controllers` folder, with the following contents:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为 `articles_controller.php` 的文件中创建一个控制器，并将其放置在您的 `app/controllers` 文件夹中，内容如下：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file named `article.php` and place it in your `app/models` folder,
    with the following contents:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `article.php` 的文件，并将其放置在您的 `app/models` 文件夹中，内容如下：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file named `vote.php` and place it in your `app/models` folder with
    the following contents:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `vote.php` 的文件，并将其放置在您的 `app/models` 文件夹中，内容如下：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a folder named `articles` and place it in your `app/views` folder. Create
    a file named `view.ctp` and place it in your `app/views/articles` folder, with
    the following contents:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `articles` 的文件夹，并将其放置在您的 `app/views` 文件夹中。创建一个名为 `view.ctp` 的文件，并将其放置在您的
    `app/views/articles` 文件夹中，内容如下：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Download the 1.0.1 SimpleTest release from [https://sourceforge.net/projects/simpletest/files/simpletest/simpletest_1.0.1/simpletest_1.0.1.tar.gz/download](http://https://sourceforge.net/projects/simpletest/files/simpletest/simpletest_1.0.1/simpletest_1.0.1.tar.gz/download).
    Uncompress the downloaded file into your `app/vendors` folder. You should now
    have a folder named `simpletest` in `app/vendors`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://sourceforge.net/projects/simpletest/files/simpletest/simpletest_1.0.1/simpletest_1.0.1.tar.gz/download](http://https://sourceforge.net/projects/simpletest/files/simpletest/simpletest_1.0.1/simpletest_1.0.1.tar.gz/download)
    下载 1.0.1 SimpleTest 版本，并将其解压缩到您的 `app/vendors` 文件夹中。现在您应该在 `app/vendors` 中有一个名为
    `simpletest` 的文件夹。
- en: If you now browse to `http://localhost/test.php`, you should see the list of
    test groups available in CakePHP as shown in the next screenshot:![How to do it...](img/1926OS_10_01.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在浏览到 `http://localhost/test.php`，您应该看到 CakePHP 中可用的测试组列表，如图所示：![如何操作...](img/1926OS_10_01.jpg)
- en: Clicking on any of these groups would execute the appropriate unit tests. For
    example, if you click on the **acl** test group, you should see a green bar indicating
    that all tests for the selected group succeeded, as shown in the next screenshot:![How
    to do it...](img/1926OS_10_02.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击任何这些组都会执行相应的单元测试。例如，如果您点击 **acl** 测试组，您应该看到一个绿色的条形表示所选组的所有测试都通过了，如图所示：![如何操作...](img/1926OS_10_02.jpg)
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: CakePHP uses the SimpleTest library as the backbone of its unit testing framework.
    Unless we have installed SimpleTest on our application, we will be unable to run
    any unit test. Installing the library is as simple as downloading the appropriate
    version and extracting its contents into our `app/vendors` folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 使用 SimpleTest 库作为其单元测试框架的核心。除非我们在应用程序中安装了 SimpleTest，否则我们将无法运行任何单元测试。安装库就像下载适当的版本并将其内容提取到我们的
    `app/vendors` 文件夹中一样简单。
- en: The framework includes a broad set of unit tests that cover almost every functionality
    implemented in the core. These unit tests allow the developer to report bugs against
    core functionality, have them solved, and make sure those bugs do not reappear
    in future releases.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 框架包括一组广泛的单元测试，几乎涵盖了核心中实现的每个功能。这些单元测试允许开发者报告针对核心功能的错误，解决这些问题，并确保这些错误不会在未来版本中再次出现。
- en: Creating fixtures and testing model methods
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建固定装置和测试模型方法
- en: In this recipe, we will learn how to create test data that we can use to test
    our application without altering real data, and how to create our own unit tests
    to cover model functionality.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何创建测试数据，我们可以使用这些数据来测试我们的应用程序而不更改真实数据，以及如何创建我们自己的单元测试来覆盖模型功能。
- en: Getting ready
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, we need a basic application skeleton to work with
    and have the SimpleTest library installed. Go through the entire recipe, *Setting
    up the test framework*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个配方，我们需要一个基本的应用程序骨架来工作，并且需要安装SimpleTest库。完成整个配方，*设置测试框架*。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a file named `article_fixture.php` and place it in your `app/tests/fixtures`
    folder with the following contents:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`article_fixture.php`的文件，并将其放置在您的`app/tests/fixtures`文件夹中，内容如下：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a file named `user_fixture.php` and place it in your `app/tests/fixtures`
    folder with the following contents:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`user_fixture.php`的文件，并将其放置在您的`app/tests/fixtures`文件夹中，内容如下：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a file named `vote_fixture.php` and place it in your `app/tests/fixtures`
    folder, with the following contents:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`vote_fixture.php`的文件，并将其放置在您的`app/tests/fixtures`文件夹中，内容如下：
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a file named `article.test.php` and place it in your `app/tests/cases/models`
    folder with the following contents:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`article.test.php`的文件，并将其放置在您的`app/tests/cases/models`文件夹中，内容如下：
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When looking to test model methods, it is very important to know what data is
    used during testing. Even when it is perfectly possible to test models using real
    application data, it is often safer (and thus recommendable) to specify the data
    that will be used for testing. This way, any modification to real data should
    not affect our tests, and consequently running those tests should not affect real
    data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试模型方法时，了解测试期间使用的数据非常重要。即使完全有可能使用真实应用程序数据来测试模型，通常更安全（因此推荐）是指定用于测试的数据。这样，对真实数据的任何修改都不应影响我们的测试，因此运行这些测试不应影响真实数据。
- en: 'For this very purpose, CakePHP offers the concept of fixtures, which are no
    more than PHP classes that define the table structure and data used for testing
    models. These fixtures should have the same name as the model they are providing
    data for, should extend the base class `CakeTestFixture`, and should end with
    the word `Fixture`. The file name should be the underscored version of the class
    name, and should be placed in the `app/tests/fixtures` directory. A fixture may
    define the following properties:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，CakePHP提供了固定装置的概念，这不过是一些定义用于测试模型的表结构和数据的PHP类。这些固定装置应该与它们提供数据的模型同名，应该扩展基本类`CakeTestFixture`，并且应该以`Fixture`结尾。文件名应该是类名的下划线版本，并且应该放置在`app/tests/fixtures`目录中。一个固定装置可以定义以下属性：
- en: '`name`: The name of the fixture, used to determine the name of the table this
    fixture creates. If the table name can be determined by other means, such as by
    setting the `table` property, or by importing the structure from a model, then
    this property is optional.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 固定装置的名称，用于确定此固定装置创建的表名称。如果可以通过其他方式确定表名称，例如通过设置`table`属性，或者从模型导入结构，那么这个属性是可选的。'
- en: '`table`: The table this fixture creates. If the fixture imports the structure
    from an existing model, or if the `name` property is specified, then this property
    is optional.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table`: 这个固定装置创建的表。如果固定装置从现有模型导入结构，或者指定了`name`属性，那么这个属性是可选的。'
- en: '`import`: This property is optional and allows the structure, and/or data,
    to be imported from an existing source. If this property is set to a string, then
    it is a model name from where to import the structure (not the records.) Otherwise,
    it should be an array that consists of the following settings:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import`: 这个属性是可选的，允许从现有源导入结构，和/或数据。如果这个属性被设置为字符串，那么它是一个模型名称，从中导入结构（不是记录。）否则，它应该是一个包含以下设置的数组：'
- en: '`records`: An optional Boolean setting. If set to `true`, then all records
    will be imported from the specified source. Defaults to `false`.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`records`: 一个可选的布尔设置。如果设置为 `true`，则将从指定的来源导入所有记录。默认为 `false`。'
- en: '`model`: The model from where to import the structure, and/or data. If specified,
    this model must exist.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`: 从哪里导入结构，以及/或数据。如果指定，此模型必须存在。'
- en: '`table`: The table from where to import the structure, and/or data. If the
    `model` setting is specified, this setting is ignored and thus is optional.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table`: 从哪里导入结构，以及/或数据。如果指定了 `model` 设置，则此设置被忽略，因此是可选的。'
- en: '`fields`: If `import` is not defined, then this property is mandatory. It should
    be an array where each key is a field name, and each value the definition of the
    field, containing settings such as: `type, length, null, default`, and `key`.
    For more information about these settings, see [http://book.cakephp.org/view/1203/Creating-fixtures](http://book.cakephp.org/view/1203/Creating-fixtures).'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`: 如果未定义 `import`，则此属性是必需的。它应该是一个数组，其中每个键是字段名，每个值是字段的定义，包含如下设置：`type,
    length, null, default` 和 `key`。有关这些设置的更多信息，请参阅 [http://book.cakephp.org/view/1203/Creating-fixtures](http://book.cakephp.org/view/1203/Creating-fixtures)。'
- en: '`records`: An array of records, each record itself being an array where the
    keys are the field names, and the values their respective values.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`records`: 记录的数组，每个记录本身也是一个数组，其中键是字段名，值是相应的值。'
- en: 'We start by creating the following fixtures:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建以下 fixtures：
- en: '`ArticleFixture`: It imports its structure from the `Article` model, and defines
    two records.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ArticleFixture`: 它从 `Article` 模型导入其结构，并定义了两个记录。'
- en: '`UserFixture`: It imports its structure from the `users` table and defines
    three records (Notice how we import from a table instead of a model, as we did
    not create a `User` model).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserFixture`: 它从 `users` 表导入其结构，并定义了三个记录（注意我们是如何从表而不是从模型导入的，因为我们没有创建 `User`
    模型）。'
- en: '`VoteFixture`: It imports its structure from the `Vote` model, and defines
    five records.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VoteFixture`: 它从 `Vote` 模型导入其结构，并定义了五个记录。'
- en: After creating the fixtures, we proceed to build the test case. A test case
    is a PHP class without naming restrictions that contains unit tests. It extends
    from `CakeTestCase`, and is saved in a file ending with the suffix `.test.php`
    and placed in an appropriate subdirectory of the `app/tests/cases` folder. A unit
    test is a method of a test case class, but only methods with names starting with
    the word `test` are considered unit tests and thus run when the test case is executed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建完 fixtures 后，我们继续构建测试用例。测试用例是一个没有命名限制的 PHP 类，其中包含单元测试。它扩展自 `CakeTestCase`，并保存为以
    `.test.php` 为后缀的文件，并放置在 `app/tests/cases` 文件夹的适当子目录中。单元测试是测试用例类的一个方法，但只有以单词 `test`
    开头的方法被视为单元测试，因此当执行测试用例时才会运行。
- en: Our test case is named `ArticleTestCase`, and defines the `fixtures` property
    to specify which fixtures are utilized by the test case. These names should match
    the fixture file name, without the `_fixture.php` suffix. By means of these fixtures,
    we provide test data for the models used throughout our test case.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试用例命名为 `ArticleTestCase`，并定义了 `fixtures` 属性以指定测试用例使用的 fixtures。这些名称应与 fixture
    文件名匹配，但不包括 `_fixture.php` 后缀。通过这些 fixtures，我们为整个测试用例中使用的模型提供测试数据。
- en: Whenever you instantiate models from a unit test, and unless you specify otherwise
    through settings sent to the `ClassRegistry::init()` method, CakePHP will automatically
    set the model's database configuration to be `test_suite`, not only for the directly
    instantiated models, but for any models instantiated as a result of a binding
    definition.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，当你从单元测试实例化模型，并且除非你通过发送到 `ClassRegistry::init()` 方法的设置指定其他设置，否则 CakePHP
    将自动将模型的数据库配置设置为 `test_suite`，这不仅适用于直接实例化的模型，还适用于由于绑定定义而实例化的任何模型。
- en: The `test_suite` database configuration, unless specifically changed by the
    developer, will use the same database configuration as defined in the `default`
    configuration, and will also set `test_suite_` as a table prefix to avoid overwriting
    existing tables. This means that any models that are instantiated, together with
    their bindings (including bindings of bindings, and so on) should have a matching
    fixture, and those fixtures should be added to the test case. If you want to avoid
    defining fixtures for models you do not intend to test, see the section *Extending
    models to avoid testing unneeded bindings* in this recipe.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_suite` 数据库配置，除非开发人员明确更改，将使用在 `default` 配置中定义的相同数据库配置，并将 `test_suite_`
    设置为表前缀以避免覆盖现有表。这意味着任何实例化的模型及其绑定（包括绑定绑定等）都应该有一个匹配的固定值，并且这些固定值应该添加到测试用例中。如果您想避免为不打算测试的模型定义固定值，请参阅本食谱中的
    *扩展模型以避免测试不必要的绑定* 部分。'
- en: 'The first two methods in `ArticleTestCase` are implementations of callbacks
    offered by the parent class `CakeTestCase`. There are four callbacks available:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArticleTestCase` 中的前两种方法是父类 `CakeTestCase` 提供的回调的实现。有四个回调可用：'
- en: '`startCase()`: It executed before the first unit test method is run. This method
    is executed once per test case.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`startCase()`：在第一个单元测试方法运行前执行。此方法在每个测试用例中执行一次。'
- en: '`endCase()`: It executed after the last unit test method was run. This method
    is executed once per test case.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`endCase()`：在最后一个单元测试方法运行后执行。此方法在每个测试用例中执行一次。'
- en: '`startTest()`: It executed before each unit test method is run. It receives
    a single argument, which is the name of the test method that is about to be executed.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`startTest()`：在每个单元测试方法运行前执行。它接收一个参数，即即将执行的测试方法名称。'
- en: '`endTest()`: It executed after each unit test method was run. It receives a
    single argument, which is the name of the test method.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`endTest()`：在每个单元测试方法运行后执行。它接收一个参数，即测试方法名称。'
- en: We use the `startTest()` callback to instantiate the model we intend to test
    (Article in this case), and the `endTest()` callback to clean up the registry,
    a step that is not needed for this particular test case but that serves useful
    in many other scenarios.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `startTest()` 回调来实例化我们打算测试的模型（在这个例子中是 Article），并使用 `endTest()` 回调来清理注册表，这一步对于这个特定的测试用例不是必需的，但在许多其他场景中很有用。
- en: 'We then define two unit test methods: `testGet()` and `testVote()`. The first
    one is meant to provide testing for the `Article::get()` method, while the later
    tests the creation of votes through the `Article::vote()` method. In these tests,
    we issue different calls to the model method we are testing, and then use some
    of the test case assertion methods to evaluate these calls:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了两个单元测试方法：`testGet()` 和 `testVote()`。第一个方法旨在为 `Article::get()` 方法提供测试，而后者则通过
    `Article::vote()` 方法测试投票的创建。在这些测试中，我们向正在测试的模型方法发出不同的调用，然后使用一些测试用例断言方法来评估这些调用：
- en: '`assertTrue()`: Asserts that the provided argument evaluates to `true`.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTrue()`：断言提供的参数评估为 `true`。'
- en: '`assertFalse()`: Asserts that the provided argument evaluates to `false`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertFalse()`：断言提供的参数评估为 `false`。'
- en: '`assertEqual()`: Asserts that the first argument is equal to the second argument.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEqual()`：断言第一个参数等于第二个参数。'
- en: '`expectException()`: Expects the next call to produce an exception. Because
    of the way exceptions are handled, this assertion should be made last in the test
    method, as any code within that unit test method that should be executed after
    the exception is thrown will be ignored. Another approach to avoid this limitation
    is to use a try-catch block, and manually issue a call to the `fail()` or `pass()`
    method as a result.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expectException()`：期望下一次调用会产生异常。由于异常的处理方式，这个断言应该在测试方法中最后进行，因为任何在单元测试方法中抛出异常后应该执行的代码都将被忽略。避免这种限制的另一种方法是使用
    try-catch 块，并手动调用 `fail()` 或 `pass()` 方法作为结果。'
- en: 'There are other assertion methods that are useful in other scenarios, such
    as:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他在其他场景中很有用的断言方法，例如：
- en: '`assertIsA()`: Asserts that the first argument is an object of the type provided
    in the second argument.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertIsA()`：断言第一个参数是第二个参数中提供的类型的对象。'
- en: '`assertNull()`: Asserts that the provided argument is `null`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNull()`：断言提供的参数是 `null`。'
- en: '`assertPattern()`: Asserts that the second argument matches the regular expression
    pattern defined in the first argument.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertPattern()`：断言第二个参数与第一个参数中定义的正则表达式模式匹配。'
- en: '`assertTags()`: Asserts that the first argument matches the HTML tags provided
    in the second argument, without consideration to the order of tag attributes.
    See recipe *Testing views* for an example use of this assertion method.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTags()`: 断言第一个参数与第二个参数提供的HTML标签匹配，不考虑标签属性的顺序。请参阅*测试视图*配方以了解此断言方法的示例用法。'
- en: There's more...
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'This recipe has shown us how to easily create fixtures. However, when there
    are lots of models in our application this can become quite a tedious task. Fortunately,
    CakePHP''s `bake` command offers a task to automatically create fixtures: `fixture`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方向我们展示了如何轻松地创建固定装置。然而，当我们的应用程序中有许多模型时，这可以变成一项相当繁琐的任务。幸运的是，CakePHP的`bake`命令提供了一个任务来自动创建固定装置：`fixture`。
- en: 'It can run in interactive mode where its questions guide us through the steps
    required, or by using command line parameters. If we wanted to create a fixture
    for our `Article` model with up to two records, we would do:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以以交互模式运行，其中它的问题引导我们完成所需的步骤，或者通过使用命令行参数。如果我们想为我们的`Article`模型创建一个包含多达两个记录的固定装置，我们会这样做：
- en: 'On a GNU Linux / Mac / Unix system:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在GNU Linux / Mac / Unix系统上：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On Microsoft Windows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft Windows上：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This would generate the `article_fixture.php` file in its correct location,
    with two sample records ready to be used.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在正确的位置生成`article_fixture.php`文件，并包含两个准备使用的示例记录。
- en: Extending models to avoid testing unneeded bindings
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 扩展模型以避免测试不必要的绑定
- en: In this recipe, we tested code that affects the `Article` and `Vote` models,
    but none of the functionality that was covered by these unit tests had to interact
    with the `User` model. Why did we then need to add the `user` fixture? Simply
    removing this fixture from the `fixtures` property will make CakePHP complain
    about a missing table (specifically, `test_suite_users`).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们测试了影响`Article`和`Vote`模型的代码，但没有任何由这些单元测试覆盖的功能需要与`User`模型交互。那么我们为什么还需要添加`user`固定装置呢？简单地从`fixtures`属性中移除这个固定装置将使CakePHP抱怨缺少一个表（具体来说，是`test_suite_users`）。
- en: To avoid creating fixtures for models we are not testing, we can create modified
    versions of our model classes by extending them and re-defining their bindings,
    leaving in only those we intend to test. Let us modify our test case to avoid
    using the `user` fixture.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免为不测试的模型创建固定装置，我们可以通过扩展它们并重新定义它们的绑定来创建我们模型类的修改版本，只留下我们打算测试的部分。让我们修改我们的测试用例以避免使用`user`固定装置。
- en: 'Add the following to the beginning of your `app/tests/cases/models/article.test.php`
    file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`app/tests/cases/models/article.test.php`文件的开始部分：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'While still editing the `article.test.php file`, change the `fixtures` property
    of the `ArticleTestCase` class so that the user fixture is no longer loaded:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续编辑`article.test.php`文件时，修改`ArticleTestCase`类的`fixtures`属性，以便不再加载用户固定装置：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, change the instantiation of the `Article` model so that it uses `TestArticle`
    instead, by making the following changes to the `startTest()` method of the `ArticleTestCase`
    class:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过修改`ArticleTestCase`类的`startTest()`方法，将`Article`模型的实例化改为使用`TestArticle`：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Analyzing code coverage
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分析代码覆盖率
- en: If you have **Xdebug** installed (information about it is available at [http://xdebug.org](http://xdebug.org))
    you can find out how much of your application code is covered by your unit tests.
    This information is a great tool for understanding which parts of your application
    need more testing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了**Xdebug**（有关信息可在[http://xdebug.org](http://xdebug.org)找到），你可以找出你的应用程序代码中有多少被单元测试覆盖。这个信息是理解应用程序哪些部分需要更多测试的极好工具。
- en: 'Once you have run a test case, you will notice a link entitled **Analyze Code
    Coverage**. After running our test case, click on this link. CakePHP will inform
    us that we have fully covered (**100%** coverage) our code. If you now comment
    out the unit test method called `testVote()`, and then run the code coverage analysis,
    you will notice that this number drops to **47.62%**, and CakePHP also shows us
    which part of our code has not been covered by unit tests, as shown in the next
    screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行了测试用例，你会注意到一个名为**分析代码覆盖率**的链接。运行我们的测试用例后，点击此链接。CakePHP会告诉我们我们已经完全覆盖了（**100%**覆盖率）我们的代码。如果你现在注释掉名为`testVote()`的单元测试方法，然后运行代码覆盖率分析，你会注意到这个数字下降到**47.62**%，CakePHP也会显示哪些代码部分没有被单元测试覆盖，如下一张截图所示：
- en: '![Analyzing code coverage](img/1926OS_10_03.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![分析代码覆盖率](img/1926OS_10_03.jpg)'
- en: When you achieve **100%** code coverage, you are not guaranteeing that your
    code is bug-free, but that all lines of your application code have been reached
    by at least one unit test.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当你达到 **100%** 代码覆盖率时，你并不能保证你的代码没有错误，但可以保证你的应用程序代码的所有行至少被一个单元测试访问过。
- en: The more code left out of the reach of unit tests, the more prone to bugs your
    application becomes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试无法触及的代码越多，你的应用程序出现错误的可能性就越大。
- en: See also
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Testing controller actions and their views*'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试控制器操作及其视图*'
- en: Testing controller actions and their views
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试控制器操作及其视图
- en: In this recipe, we will learn how to test controller actions and ensure that
    their views produce the result we expect.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何测试控制器操作并确保它们的视图产生我们预期的结果。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe we need a basic application skeleton to work with,
    and have the SimpleTest library installed. Go through the entire recipe *Setting
    up the test framework*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个配方，我们需要一个基本的应用程序骨架来工作，并且需要安装 SimpleTest 库。请参阅整个配方 *设置测试框架*。
- en: We also need test data. Go through the creation of fixtures described in the
    recipe *Creating fixtures and testing model methods*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要测试数据。请参阅配方 *创建固定数据和测试模型方法* 中描述的固定数据的创建过程。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a file named `articles_controller.test.php` and place it in your `app/tests/cases/controllers`
    folder, with the following contents:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `articles_controller.test.php` 的文件，并将其放置在 `app/tests/cases/controllers`
    文件夹中，内容如下：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you now browse to `http://localhost/test.php`, click on the **Test Cases**
    option under the **App** section in the left menu, and then click on the **controllers
    / ArticlesController** test case, you should see our unit test succeeding, as
    shown in the next screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在浏览到 `http://localhost/test.php`，点击左侧菜单中的 **App** 部分的 **测试用例** 选项，然后点击 **controllers
    / ArticlesController** 测试用例，你应该会看到我们的单元测试成功，如下一张截图所示：
- en: '![How to do it...](img/1926OS_10_04.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926OS_10_04.jpg)'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by creating the test case in a class named `ArticlesControllerTestCase`,
    and save it in its proper location (`app/tests/cases/controllers`), using the
    right filename (`articles_controller.test.php`). In this class, we specify which
    fixtures we need to load, which, just as it was shown in the recipe *Creating
    fixtures and testing model methods*, consists of fixtures for all the loaded models.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在一个名为 `ArticlesControllerTestCase` 的类中创建测试用例，并将其保存在正确的位置（`app/tests/cases/controllers`），使用正确的文件名（`articles_controller.test.php`）。在这个类中，我们指定需要加载哪些固定数据，正如在配方
    *创建固定数据和测试模型方法* 中所展示的，它包括所有加载的模型的数据。
- en: 'Our test case includes a single unit test method: `testView(),` which intends
    to unit test the `ArticlesController::view()` action. In this unit test we use
    the `testAction()` method that is available to all test cases. This method takes
    two arguments:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试用例包含一个单独的单元测试方法：`testView()`，它旨在对 `ArticlesController::view()` 操作进行单元测试。在这个单元测试中，我们使用对所有测试用例都可用
    `testAction()` 方法。此方法接受两个参数：
- en: '`url`: This is either a string or an array containing the URL to the controller
    action we intend to test. If it is an array, it should be in the same format as
    the format used by CakePHP once a string-based URL has been parsed.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`：这是一个字符串或包含我们打算测试的控制器操作的 URL 的数组。如果它是一个数组，它应该与 CakePHP 解析基于字符串的 URL 使用的格式相同。'
- en: '`parameters`: This is a set of optional parameters, which can be any of the
    following:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters`：这是一组可选参数，可以是以下任何一种：'
- en: '`connection`: If `fixturize` is set to `true`, it defines the connection from
    where to import data.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection`：如果 `fixturize` 设置为 `true`，则定义从哪里导入数据。'
- en: '`data`: It is the data to post to the controller.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：这是要提交给控制器的数据。'
- en: '`fixturize`: If this is set to `true`, then all data from the connection defined
    in the `connection` setting will be imported into fixtures for all the used models.
    Defaults to `false`.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixturize`：如果设置为 `true`，则 `connection` 设置中定义的连接的所有数据都将导入到所有使用的模型的固定数据中。默认为
    `false`。'
- en: '`method`: This is the method to use when posting the data specified in the
    `data` setting. Can either be `get` or `post`. Defaults to `post`.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`：这是在 `data` 设置中指定数据时使用的提交方法。可以是 `get` 或 `post`。默认为 `post`。'
- en: '`return`: This specifies the type of result that should be returned as a result
    of a `testAction()` call. If it is set to `result`, which is the default, it will
    return whatever the controller action returns. If it is set to `vars`, it will
    return the view variables assigned from the action. If it is `view`, it will return
    the rendered view without the layout. Finally, if it is set to `contents`, it
    will return the rendered view within its layout.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return`: 这指定了 `testAction()` 调用后应返回的结果类型。如果设置为 `result`，这是默认值，它将返回控制器动作返回的任何内容。如果设置为
    `vars`，它将返回从动作分配的视图变量。如果设置为 `view`，它将返回不带布局的渲染视图。最后，如果设置为 `contents`，它将返回包含其布局的渲染视图。'
- en: '`testView()`: The `testView()` method calls the `view()` action with a proper
    ID, and tells the `testAction()` method to return the view variables created in
    the controller action. We make sure that this variable is set to the proper article
    information. We then finalize with a call to `testAction()`, using the same URL,
    but specifying that we want to obtain the rendered view.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testView()`: `testView()` 方法调用带有适当 ID 的 `view()` 动作，并告诉 `testAction()` 方法返回控制器动作中创建的视图变量。我们确保这个变量被设置为正确的文章信息。然后，我们通过调用
    `testAction()` 方法来最终化，使用相同的 URL，但指定我们想要获取渲染的视图。'
- en: To assert that the view has the proper content, we use the `assertTags()` method,
    which offers a flexible way to check HTML tags. This method takes an array of
    elements, each element being either a string that represents a static string or
    a closing tag if the string starts with a forward slash, or an array, where the
    key is an HTML tag name, and the value is itself an array of attributes (keys
    being the attribute names, and values being their respective values).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了断言视图具有适当的内容，我们使用 `assertTags()` 方法，它提供了一种灵活的方式来检查 HTML 标签。此方法接受一个元素数组，每个元素要么是一个表示静态字符串的字符串，要么是一个以正斜杠开头的闭合标签，或者是一个数组，其中键是
    HTML 标签名，值是自身也是一个数组，该数组包含属性（键是属性名称，值是相应的值）。
- en: There's more...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have seen how, by using `testAction()`, we can easily test our controller
    actions and make assertions on either the action's return value, the view variables,
    or the view content. However, we have not covered how to test actions that might
    redirect the user away from the current action, or how to test for session operations.
    The next recipe shows how to add more complex tests to the unit tests we have
    just built.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，通过使用 `testAction()`，我们可以轻松地测试我们的控制器动作并对动作的返回值、视图变量或视图内容进行断言。然而，我们还没有涵盖如何测试可能会将用户从当前动作重定向走的动作，或者如何测试会话操作。下一个菜谱将展示如何向刚刚构建的单元测试中添加更复杂的测试。
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Using mocks to test controllers*'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模拟测试控制器*'
- en: Using mocks to test controllers
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模拟测试控制器
- en: In this recipe we will learn how to extend what we have covered in the previous
    recipe by using mocks, an indispensable tool for building powerful test cases.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何通过使用模拟（mocks），这个构建强大测试用例不可或缺的工具，来扩展我们在上一个菜谱中覆盖的内容。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, we need unit tests already in place. Go through the
    previous recipe.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个菜谱，我们需要已经设置好的单元测试。查看上一个菜谱。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit your `app/tests/cases/controllers/articles_controller.test.php` file and
    place the following code at the beginning, right before the declaration of the
    class `ArticlesControllerTestCase`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `app/tests/cases/controllers/articles_controller.test.php` 文件，并在类 `ArticlesControllerTestCase`
    声明之前放置以下代码：
- en: '[PRE15]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'While still editing the `articles_controller.test.php` file, add the following
    code at the beginning of the `ArticlesControllerTestCase` class, right below the
    declaration of the `fixtures` property:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑 `articles_controller.test.php` 文件的同时，在 `ArticlesControllerTestCase` 类的声明之后，添加以下代码：
- en: '[PRE16]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following code at the beginning of the `testView()` method:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `testView()` 方法的开头添加以下代码：
- en: '[PRE17]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, add the following method to the end of the `ArticlesControllerTestCase`
    class:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下方法添加到 `ArticlesControllerTestCase` 类的末尾：
- en: '[PRE18]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you now browse to `http://localhost/test.php`, click on the **Test Cases**
    option under the **App** section in the left menu, and then click on the **controllers
    / ArticlesController** test case, you should see our unit test succeeding, as
    shown in the next screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在浏览到 `http://localhost/test.php`，点击左侧菜单中的 **App** 部分的 **Test Cases** 选项，然后点击
    **controllers / ArticlesController** 测试用例，你应该会看到我们的单元测试成功，如下一张截图所示：
- en: '![How to do it...](img/1926OS_10_05.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1926OS_10_05.jpg)'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by extending the controller we intend to test so we can override its
    `redirect()` method, so that when that method is executed as part of our unit
    test, the browser is not redirected and we can instead use the redirect information
    to make our assertions.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先扩展我们要测试的控制器，以便我们可以覆盖其 `redirect()` 方法，这样当该方法作为我们的单元测试的一部分执行时，浏览器不会被重定向，我们可以使用重定向信息来做出断言。
- en: If `redirect()` is called, we store the destination in a property named `testRedirect`,
    and instead of aborting the execution (which would abort the test case) we avoid
    the view from being rendered. This works properly because every time we called
    `redirect()` from our `ArticlesController` class, we stopped the action execution
    by issuing a return statement.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调用 `redirect()`，我们将目标存储在一个名为 `testRedirect` 的属性中，并且避免终止执行（这会终止测试用例），而是避免渲染视图。这之所以有效，是因为每次我们从
    `ArticlesController` 类调用 `redirect()` 时，我们通过发出返回语句来停止动作执行。
- en: As there is no direct way to get the instance of the controller that was executed
    from our test case (see the section *There's more* in this recipe for an alternative
    approach), we need to keep a reference of the controller instance. We use CakePHP's
    `Configure` class to store the reference, so that it can then be easily obtained.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有直接的方法可以从我们的测试用例中获取已执行的控制器实例（请参阅本食谱中的 *还有更多* 部分，以获取替代方法），我们需要保留控制器实例的引用。我们使用
    CakePHP 的 `Configure` 类来存储引用，这样就可以轻松获取。
- en: We also want to avoid using real session data as a result of our unit test.
    This means that we need to find a way to let CakePHP think that when a controller
    interacts with its `Session` component, everything behaves as expected, while
    still not really interacting with the browser session. We also want to be able
    to assert when a particular method in that component is executed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望避免在单元测试中使用真实的会话数据。这意味着我们需要找到一种方法让 CakePHP 认为，当控制器与其 `Session` 组件交互时，一切行为都如预期，同时实际上并不与浏览器会话交互。我们还想能够断言该组件中特定方法的执行情况。
- en: 'Mocks provide a way for us to mimic the way a real object behaves, without
    actually performing the object''s underlying logic. With the following lines of
    code in the controller''s `beforeFilter` callback:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟提供了一种方法，让我们在不实际执行对象底层逻辑的情况下模仿真实对象的行为。在控制器 `beforeFilter` 回调中的以下代码行：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We are replacing the instance of CakePHP''s `Session` component with a mocked
    version. This mocked version will allow the controller to use all the component''s
    available methods (such as `setFlash()`) without actually performing the underlying
    call. `Mock::generate()` will by default generate a fully mocked object (all its
    underlying functionality will be ignored.) If we wanted to mock only parts of
    an object, we would need to generate a partial mock. For example, if we only wanted
    to mock the `setFlash()` method of the `Session` component while still maintaining
    the rest of its original methods, we would do:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在用模拟版本替换 CakePHP 的 `Session` 组件的实例。这个模拟版本将允许控制器使用该组件的所有可用方法（例如 `setFlash()`），而无需实际执行底层调用。`Mock::generate()`
    默认会生成一个完全模拟的对象（其所有底层功能都将被忽略）。如果我们只想模拟对象的一部分，我们需要生成一个部分模拟。例如，如果我们只想模拟 `Session`
    组件的 `setFlash()` 方法，同时保持其其他原始方法，我们会这样做：
- en: '`Mock::generatePartial(''SessionComponent'', false, array(''setFlash''))`;'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mock::generatePartial(''SessionComponent'', false, array(''setFlash''))`;'
- en: 'Once we have a mocked object and a way to access it from our unit tests, we
    can use any of the following mock assertions methods to test if a method of a
    mocked object is called as expected:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有一个模拟对象以及从我们的单元测试中访问它的方法，我们就可以使用以下任何模拟断言方法来测试模拟对象的某个方法是否按预期调用：
- en: '`expectAtLeastOnce()`: Its first argument is the name of the method we expect
    to have executed, while the second optional argument is an array of parameters
    we expect that method to have received. This is used when the expected method
    is to be called at least once, but can still be executed more times.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expectAtLeastOnce()`: 其第一个参数是我们期望执行的方法的名称，第二个可选参数是我们期望该方法接收的参数数组。当期望的方法至少被调用一次，但还可以执行更多次时，使用此方法。'
- en: '`expectNever()`: Its first mandatory argument is the name of a method that
    we intend to ensure has not been executed on the mocked object.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expectNever()`: 其第一个强制参数是我们打算确保在模拟对象上未执行的方法的名称。'
- en: '`expectOnce()`: It behaves exactly as `expectAtLeastOnce()`, but makes sure
    the method is executed only once.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expectOnce()`: 它的行为与 `expectAtLeastOnce()` 完全相同，但确保该方法只执行一次。'
- en: We proceed by overriding `CakeTestCase's testAction()` method so that whenever
    an URL for the `ArticlesController` class is requested, we change that URL to
    use our extended `TestArticlesController` class. Once the proper action is executed,
    we obtain the instance of the controller class and keep it in a property of the
    unit test named `Articles` so we can then refer to it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过覆盖 `CakeTestCase` 的 `testAction()` 方法来继续，这样每当请求 `ArticlesController` 类的
    URL 时，我们就将那个 URL 更改为使用我们的扩展 `TestArticlesController` 类。一旦执行了适当的动作，我们就获取控制器类的实例，并将其保存在单元测试的
    `Articles` 属性中，这样我们就可以引用它。
- en: We are now ready to test. We start by modifying the `testView()` method so we
    can test a `redirect()` call, by building a test to force an invalid record ID,
    and asserting that the controller's `testRedirect` property is set to the `index`
    action.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备测试。我们首先修改 `testView()` 方法，以便我们可以测试一个 `redirect()` 调用，通过构建一个测试来强制无效的记录
    ID，并断言控制器的 `testRedirect` 属性被设置为 `index` 动作。
- en: We finalize the recipe by implementing the `testVote()` method, which gives
    us a chance to test posting data (using the second argument of the `testAction()`
    method as described in the previous recipe), and asserting that the mocked `Session`
    class receives a call to its `setFlash()` method, with the right arguments.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过实现 `testVote()` 方法来完成这个食谱，这个方法给我们一个机会来测试提交数据（使用前一个食谱中描述的 `testAction()`
    方法的第二个参数），并断言模拟的 `Session` 类收到了对其 `setFlash()` 方法的调用，并带有正确的参数。
- en: The last part of this unit test uses the main model of our controller to fetch
    the created article, and make sure that it matches our posted data.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单元测试的最后部分使用我们控制器的主体模型来获取创建的文章，并确保它与我们的提交数据匹配。
- en: There's more...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While the method shown in this recipe is quite powerful, it is definitely not
    the only way to test controllers. We can also perform direct calls on the controller
    actions we intend to test by instantiating the controller class and making a manual
    call to the action.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个食谱中展示的方法非常强大，但它绝对不是测试控制器的唯一方法。我们也可以通过实例化控制器类并对我们打算测试的控制动作进行直接调用来执行测试。
- en: However, this is not a straightforward operation, since it would require a proper
    initialization of our controller by following the same steps than those defined
    by CakePHP's `Dispatcher` class. Mark Story has produced a thorough article describing
    this approach at [http://mark-story.com/posts/view/testing-cakephp-controllers-the-hard-way](http://mark-story.com/posts/view/testing-cakephp-controllers-the-hard-way).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是一个简单的操作，因为它需要按照 CakePHP 的 `Dispatcher` 类定义的相同步骤正确初始化我们的控制器。Mark Story
    在 [http://mark-story.com/posts/view/testing-cakephp-controllers-the-hard-way](http://mark-story.com/posts/view/testing-cakephp-controllers-the-hard-way)
    上发表了一篇详细描述此方法的文章。
- en: Mark Story has also published a follow-up article on manual testing of controllers,
    where he introduces mocks. It is definitely a good read, and it is available at
    [http://mark-story.com/posts/view/testing-cakephp-controllers-mock-objects-edition](http://mark-story.com/posts/view/testing-cakephp-controllers-mock-objects-edition).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Mark Story 还发布了一篇关于控制器手动测试的后续文章，其中他介绍了模拟。这绝对是一篇值得一读的文章，可在[http://mark-story.com/posts/view/testing-cakephp-controllers-mock-objects-edition](http://mark-story.com/posts/view/testing-cakephp-controllers-mock-objects-edition)找到。
- en: Running tests from the command line
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行运行测试
- en: In this recipe, we will learn how to run our unit tests from the command line,
    which opens the possibility for automated test reporting.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何从命令行运行我们的单元测试，这为自动测试报告打开了可能性。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe we need a basic application skeleton to work with,
    which should have its own set of unit tests. Go through the entire recipe *Creating
    fixtures and testing model methods*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一个基本的应用程序骨架来与之一起工作，它应该有一套自己的单元测试。请阅读整个食谱“创建固定值和测试模型方法”。
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Using your operating system console, switch to your application directory,
    and run:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的操作系统控制台，切换到您的应用程序目录，并运行：
- en: 'If you are on a GNU Linux / Mac / Unix system:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 GNU Linux / Mac / Unix 系统：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you are on Microsoft Windows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Microsoft Windows：
- en: '[PRE21]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The shell should now run the specified unit test and inform us that all unit
    tests succeeded, as shown in the next screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在shell应该运行指定的单元测试，并通知我们所有单元测试都成功了，如下一张截图所示：
- en: '![How to do it...](img/1926OS_10_06.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926OS_10_06.jpg)'
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: CakePHP's `testsuite` shell allows us to execute any test case, or group of
    test cases, from the command line. It offers several ways to specify which unit
    test to execute by specifying a minimum of two arguments.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP的`testsuite` shell允许我们从命令行执行任何测试用例，或一组测试用例。它提供了几种方式来指定要执行哪个单元测试，只需指定至少两个参数。
- en: The first argument can either be `app, core`, or a plugin name. Use `app` when
    intending to execute a unit test, or group of tests, from your application directory.
    Use `core` if you wish to run CakePHP's core tests. Finally, if you wish to run
    tests from a plugin, use the plugin name as the first argument to the `testsuite`
    shell.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数可以是`app`、`core`或插件名称。当你打算从你的应用程序目录中执行单元测试或一组测试时，使用`app`。如果你希望运行CakePHP的核心测试，使用`core`。最后，如果你希望从插件中运行测试，将插件名称作为`testsuite`
    shell的第一个参数。
- en: The second argument should specify what type of unit test to run. It can be
    set to `all`, which runs all tests; `group`, which runs the test group specified
    in the third argument; or `case`, which runs the test case defined in the third
    argument.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数应指定要运行哪种类型的单元测试。它可以设置为`all`，表示运行所有测试；`group`，表示运行第三参数中指定的测试组；或者`case`，表示运行第三参数中定义的测试用例。
