- en: Chapter 8. Extending Yii
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。扩展 Yii
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating helpers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建辅助器
- en: Creating model behaviors
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型行为
- en: Creating components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建组件
- en: Creating reusable controller actions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可重用的控制器操作
- en: Creating reusable controllers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可重用的控制器
- en: Creating a widget
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建小部件
- en: Creating CLI commands
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 CLI 命令
- en: Creating filters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建过滤器
- en: Creating modules
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模块
- en: Creating a custom view renderer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义视图渲染器
- en: Creating a multilanguage application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多语言应用程序
- en: Making extensions distribution-ready
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使扩展准备分发
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will show you not only how to implement your own Yii extension,
    but also how to make your extension reusable and useful for the community. In
    addition, we will focus on many things you should do in order to make your extension
    as efficient as possible.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您展示如何实现自己的 Yii 扩展，以及如何使您的扩展可重用并对社区有用。此外，我们将关注许多您应该做的事情，以确保您的扩展尽可能高效。
- en: Creating helpers
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建辅助器
- en: There are a lot of built-in framework helpers such as `StringHelper` in the
    `yii\helpers` namespace. These contain sets of helpful static methods for manipulating
    strings, files, arrays, and other subjects.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `yii\helpers` 命名空间中有很多内置框架辅助器，如 `StringHelper`。这些包含用于操作字符串、文件、数组和其他主题的静态方法集。
- en: In many cases, for additional behavior you can create a own helper and put any
    static function into one. For example, we implement the number helper in this
    recipe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，为了添加额外的行为，你可以创建一个自己的辅助器并将任何静态函数放入其中。例如，我们在本食谱中实现了数字辅助器。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer package manager
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的 composer 包管理器创建一个新的 `yii2-app-basic` 应用程序，请参阅 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create the `helpers` directory in your project and write the `NumberHelper`
    class:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目中创建 `helpers` 目录并编写 `NumberHelper` 类：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the `actionNumbers` method to `SiteController`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `actionNumbers` 方法添加到 `SiteController`：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the `views/site/numbers.php` view:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `views/site/numbers.php` 视图：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open the action. You should see the following result:![How to do it…](img/image00443.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开操作。你应该看到以下结果：![如何操作…](img/image00443.jpeg)
- en: 'In other cases, you can specify another count of decimal numbers. Observe the
    following example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，你可以指定另一个小数位数。观察以下示例：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Any helper in Yii2 is just a set of functions, implemented as static methods
    in the corresponding classes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 Yii2 辅助器都只是一组函数，作为相应类中的静态方法实现。
- en: You can use a helper for implementing any different formats of output, for manipulations
    with values of any variables, and for other cases.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用辅助器来实现任何不同格式的输出，对任何变量的值进行操作，以及其他情况。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Usually, static helpers are lightweight clean functions with a small count of
    arguments. Avoid putting your business logic and other complicated manipulations
    into helpers. Use widgets or other components instead of helpers in other cases.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，静态辅助器是轻量级的干净函数，具有少量参数。避免将业务逻辑和其他复杂操作放入辅助器中。在其他情况下，使用小部件或其他组件代替辅助器。
- en: See also
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information about helpers, refer to:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于辅助器的更多信息，请参阅：
- en: '[http://www.yiiframework.com/doc-2.0/guide-helper-overview.html](http://www.yiiframework.com/doc-2.0/guide-helper-overview.html).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-helper-overview.html](http://www.yiiframework.com/doc-2.0/guide-helper-overview.html).'
- en: 'For examples of built-in helpers, refer to sources in the `helpers` directory
    of framework. For the framework, refer to:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关于内置辅助器的示例，请参阅框架 `helpers` 目录中的源代码。对于框架，请参阅：
- en: '[https://github.com/yiisoft/yii2/tree/master/framework/helpers](https://github.com/yiisoft/yii2/tree/master/framework/helpers).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/yiisoft/yii2/tree/master/framework/helpers](https://github.com/yiisoft/yii2/tree/master/framework/helpers).'
- en: Creating model behaviors
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型行为
- en: There are many similar solutions in today's web applications. Leading products
    such as Google's Gmail are defining nice UI patterns. One of these is soft delete.
    Instead of a permanent deletion with tons of confirmations, Gmail allows us to
    immediately mark messages as deleted and then easily undo it. The same behavior
    can be applied to any object such as blog posts, comments, and so on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的Web应用程序中有许多类似的解决方案。领先的产品，如Google的Gmail，正在定义良好的UI模式。其中之一是软删除。与需要大量确认的永久删除不同，Gmail允许我们立即标记消息为已删除，然后轻松撤销。同样的行为可以应用于任何对象，如博客文章、评论等。
- en: Let's create a behavior that will allow marking models as deleted, restoring
    models, selecting not yet deleted models, deleted models, and all models. In this
    recipe, we'll follow a test-driven development approach to plan the behavior and
    test if the implementation is correct.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个允许标记模型为已删除、恢复模型、选择尚未删除的模型、已删除的模型以及所有模型的行为。在这个菜谱中，我们将遵循测试驱动开发的方法来规划行为并测试实现是否正确。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的composer创建一个新的`yii2-app-basic`应用程序，指南链接为[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: Create two databases for working and for tests.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为工作和测试创建两个数据库。
- en: Configure Yii to use the first database in your primary application in `config/db.php`.
    Make sure the test application uses the second database in `tests/codeception/config/config.php`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config/db.php`中配置Yii以使用您主应用程序中的第一个数据库。确保测试应用程序使用`tests/codeception/config/config.php`中的第二个数据库。
- en: 'Create a new migration:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的迁移：
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Apply the migration to both the working and test databases:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将迁移应用到工作数据库和测试数据库：
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create the `Post` model:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Post`模型：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How to do it…
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s prepare a test environment first starting with defining fixtures for
    the `Post` model. Create the `tests/codeception/unit/fixtures/PostFixture.php`
    file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们准备一个测试环境，从定义`Post`模型的固定数据开始。创建`tests/codeception/unit/fixtures/PostFixture.php`文件：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add a fixture data file to `tests/codeception/unit/fixtures/data/post.php`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将固定数据文件添加到`tests/codeception/unit/fixtures/data/post.php`：
- en: '[PRE8]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we need to create a test case, `tests/codeception/unit/MarkdownBehaviorTest.php`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要创建一个测试用例，`tests/codeception/unit/MarkdownBehaviorTest.php`：
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the unit tests:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元测试：
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we need to implement behavior, attach it to the model, and make sure the
    test passes. Create a new directory, `behaviors`. Under this directory, create
    a `MarkdownBehavior` class:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要实现行为，将其附加到模型上，并确保测试通过。创建一个新的目录，`behaviors`。在这个目录下，创建一个`MarkdownBehavior`类：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s attach the behavior to the Post model:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将行为附加到`Post`模型上：
- en: '[PRE12]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the test and make sure it passes:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试并确保通过：
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: That's it. We've created a reusable behavior and can use it for all future projects
    by just connecting it to a model.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。我们已经创建了一个可重用的行为，并且可以通过将其连接到模型来在所有未来的项目中使用它。
- en: How it works…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Let's start with the test case. Since we want to use a set of models, we are
    defining fixtures. A fixture set is put into the "database" each time the test
    method is executed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从测试用例开始。由于我们想要使用一组模型，我们正在定义固定数据。每次执行测试方法时，固定数据集都会放入“数据库”中。
- en: 'We prepare unit tests for specifying how the behavior must work:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备单元测试来指定行为应该如何工作：
- en: First, we are testing a processing of a new model content. The behavior must
    convert the Markdown text from the source attribute to HTML and store the second
    one to the target attribute.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们正在测试新模型内容的处理。行为必须将源属性中的Markdown文本转换为HTML，并将第二个存储到目标属性中。
- en: Second, we are testing to update the content of the existing model. After changing
    the Markdown content and saving the model, we must get the updated HTML content.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，我们正在测试更新现有模型的内容。在更改Markdown内容并保存模型后，我们必须获取更新的HTML内容。
- en: 'Now let''s move to the interesting implementation details. In behavior, we
    can add our own methods, which will be mixed into the model that the behavior
    is attached to. Also, we can subscribe to the owner component events. We are using
    it to add an own listener:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到有趣的实现细节。在行为中，我们可以添加自己的方法，这些方法将被混合到附加行为到的模型中。我们还可以订阅所有者组件的事件。我们正在使用它来添加一个自己的监听器：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can implement this listener:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以实现这个监听器：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In all the methods, we can use the `owner` property to get the object the behavior
    is attached to. In general, we can attach any behavior to our models, controllers,
    applications, and other components that extend the `yii\base\Component` class.
    Also, we can attach one behavior repeatedly to the model for processing different
    attributes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有方法中，我们可以使用`owner`属性来获取行为附加到的对象。一般来说，我们可以将任何行为附加到我们的模型、控制器、应用程序和其他扩展`yii\base\Component`类的组件上。此外，我们还可以将一个行为重复附加到模型上以处理不同的属性：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Besides, we can extend the `yii\base\AttributeBehavior` class like `yii\behaviors\TimestampBehavior`
    for updating specified attributes for any events.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以像`yii\behaviors\TimestampBehavior`一样扩展`yii\base\AttributeBehavior`类，以更新任何事件指定的属性。
- en: See also
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more about behaviors and events, refer to the following pages:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于行为和事件的信息，请参阅以下页面：
- en: '[http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-concept-events.html](http://www.yiiframework.com/doc-2.0/guide-concept-events.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-concept-events.html](http://www.yiiframework.com/doc-2.0/guide-concept-events.html)'
- en: For more information about the Markdown syntax, refer to [http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Markdown语法的更多信息，请参阅[http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/)。
- en: Also, refer to the *Making extensions distribution-ready* recipe of this chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请参阅本章的*使扩展准备就绪*配方。
- en: Creating components
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建组件
- en: If you have some code that looks like it can be reused but you don't know if
    it's a behavior, widget, or something else, most probably it's a component. A
    component should be inherited from the `yii\base\Component` class. Later on, the
    component can be attached to the application and configured using the `components`
    section of the configuration file. That's the main advantage compared with using
    just a plain PHP class. Additionally, we are getting behavior, event, getter,
    and setter support.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一些看起来可以重用的代码，但不知道它是一个行为、小部件还是其他东西，那么它很可能是组件。组件应该继承自`yii\base\Component`类。稍后，组件可以附加到应用程序中，并使用配置文件的`components`部分进行配置。与仅使用纯PHP类相比，这是主要优势。此外，我们获得了行为、事件、获取器和设置器支持。
- en: For our example, we'll implement a simple Exchange application component that
    will be able to get currency rates from the [http://fixer.io](http://fixer.io)
    site, attach it to the application, and use it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将实现一个简单的交换应用程序组件，该组件将能够从[http://fixer.io](http://fixer.io)站点获取货币汇率，将其附加到应用程序中，并使用它。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用composer创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: For getting the currency rates, our component should send a HTTP GET query to
    a service URL such as [http://api.fixer.io/2016-05-14?base=USD](http://api.fixer.io/2016-05-14?base=USD).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于获取货币汇率，我们的组件应该向服务URL（如[http://api.fixer.io/2016-05-14?base=USD](http://api.fixer.io/2016-05-14?base=USD)）发送HTTP
    GET查询。
- en: 'The service must return all supported rates on the nearest working day:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 服务必须返回最近工作日的所有支持的汇率：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The component should extract needle currency from the response in JSON format
    and return a target rate:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 组件应从JSON格式的响应中提取针币货币并返回目标汇率：
- en: Create the `components` directory in your application structure.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的应用程序结构中创建`components`目录。
- en: 'Create the component class example with the following interface:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下接口创建组件类示例：
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Implement the `component` functional:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现组件功能：
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Attach the component to your `config/console.php` or `config/web.php` configuration
    files:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组件附加到您的`config/console.php`或`config/web.php`配置文件中：
- en: '[PRE20]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Right now, we can use a new component directly or via the `get` method:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，我们可以直接使用新组件或通过`get`方法使用：
- en: '[PRE21]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a demonstration console controller:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个演示控制台控制器：
- en: '[PRE22]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now try to run any command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试运行任何命令：
- en: '[PRE23]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As a result, you must see the rate values in the success cases or specific exceptions
    in the error ones. Besides creating your own components, you can do more.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您必须在成功情况下看到汇率值或在错误情况下看到特定的异常。除了创建自己的组件外，您还可以做更多的事情。
- en: Overriding existing application components
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖现有应用程序组件
- en: Most of the time, there will be no need to create your own application components
    since other types of extension such as widgets or behaviors, cover almost all
    types of reusable codes. However, overriding core framework components is a common
    practice and can be used to customize the framework's behavior for your specific
    needs without hacking into the core.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，您不需要创建自己的应用程序组件，因为其他类型的扩展，如小部件或行为，几乎涵盖了所有可重用代码的类型。然而，覆盖核心框架组件是一种常见的做法，并且可以用来根据您的特定需求自定义框架的行为，而无需修改核心。
- en: 'For example, to be able to format numbers using the `Yii::app()->formatter->asNumber($value)`
    method instead of our `NumberHelper::format` method from the *Creating helpers*
    recipe, you can follow the next steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了能够使用`Yii::app()->formatter->asNumber($value)`方法而不是从*创建辅助工具*配方中的`NumberHelper::format`方法格式化数字，您可以按照以下步骤操作：
- en: 'Extend the `yii\i18n\Formatter` component as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下扩展`yii\i18n\Formatter`组件：
- en: '[PRE24]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Override the class of the built-in `formatter` component:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖内置的`formatter`组件的类：
- en: '[PRE25]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Right now, we can use this method directly:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，我们可以直接使用此方法：
- en: '[PRE26]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Alternatively, it can be used as a new format for the `GridView` and `DetailView`
    widgets:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，它也可以用作`GridView`和`DetailView`小部件的新格式：
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Also, you can extend every existing component without overwriting its source
    code.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，您还可以扩展每个现有组件，而无需覆盖其源代码。
- en: How it works…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: To be able to attach a component to an application, it can be extended from
    the `yii\base\Component` class. Attaching is as simple as adding a new array to
    the components section of configuration. There, a class value specifies the component's
    class, and all other values are set to a component through the corresponding component's
    public properties and setter methods.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要将组件附加到应用程序中，可以从`yii\base\Component`类扩展。附加操作就像在配置的组件部分添加一个新的数组一样简单。在那里，类值指定组件的类，所有其他值都通过相应组件的公共属性和设置方法设置给组件。
- en: Implementation itself is very straightforward; we are wrapping the [http://api.fixer.io](http://api.fixer.io)
    calls into a comfortable API with validators and caching. We can access our class
    by its component name using `Yii::$app`. In our case, it will be `Yii::$app->exchange`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实现本身非常简单；我们将[http://api.fixer.io](http://api.fixer.io)调用封装到一个方便的API中，其中包含验证器和缓存。我们可以通过`Yii::$app`使用其组件名称访问我们的类。在我们的例子中，它将是`Yii::$app->exchange`。
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For official information about components, refer to [http://www.yiiframework.com/doc-2.0/guide-concept-components.html](http://www.yiiframework.com/doc-2.0/guide-concept-components.html).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 关于组件的官方信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-concept-components.html](http://www.yiiframework.com/doc-2.0/guide-concept-components.html)。
- en: For the `NumberHelper` class sources, refer to the *Creating helpers* recipe.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`NumberHelper`类的源代码，请参考*创建辅助工具*配方。
- en: Creating reusable controller actions
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可重用的控制器操作
- en: Common actions such as deleting the AR model by the primary key or getting data
    for AJAX autocomplete could be moved into reusable controller actions and later
    attached to controllers as needed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 常见操作，如通过主键删除AR模型或获取用于AJAX自动完成的 数据，可以移动到可重用的控制器操作，并在需要时附加到控制器。
- en: In this recipe, we will create a reusable delete action that will delete the
    specified AR model by its primary key.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将创建一个可重用的删除操作，该操作将通过主键删除指定的AR模型。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Create a new `yii2-app-basic` application using the composer as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的composer创建一个新的`yii2-app-basic`应用程序，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: Create a new database and configure it.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的数据库并对其进行配置。
- en: 'Create and apply the following migration:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并应用以下迁移：
- en: '[PRE28]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Generate models for posts and comments using Gii.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii为帖子生成模型和评论。
- en: Generate the standard CRUD controller `app\controllers\PostController` in Gii.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii生成标准的CRUD控制器`app\controllers\PostController`。
- en: Ensure that CRUD properly works:![Getting ready](img/image00519.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保CRUD操作正常工作：![准备中](img/image00519.jpeg)
- en: In a success case, add a set of example posts.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功的情况下，添加一组示例帖子。
- en: How to do it…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Carry out the following steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create the actions directory and add the `DeleteAction` standalone action:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建操作目录并添加`DeleteAction`独立操作：
- en: '[PRE29]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we need to attach it to the `controllers/PostController.php` controller.
    Remove the controller''s `actionDelete` and `behaviors` methods and attach your
    own action in the `action` method:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将其附加到 `controllers/PostController.php` 控制器。删除控制器的 `actionDelete` 和 `behaviors`
    方法，并在 `action` 方法中附加您自己的操作：
- en: '[PRE30]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: That is it. Ensure that the delete operation still works correctly, and after
    the deletion, you will be redirected to a corresponding index action.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。确保删除操作仍然正确工作，并且在删除后，您将被重定向到相应的索引操作。
- en: How it works…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: To create an external controller action, you need to extend your class from
    `yii\base\Action`. The only mandatory method to implement is `run`. In our case,
    it accepts the parameter named `$id` from `$_GET` using the automatic parameter
    binding feature of Yii and tries to delete a corresponding model.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建外部控制器操作，您需要从 `yii\base\Action` 类扩展您的类。唯一必须实现的方法是 `run`。在我们的例子中，它使用 Yii 的自动参数绑定功能从
    `$_GET` 接收名为 `$id` 的参数，并尝试删除相应的模型。
- en: To make it customizable, we've created two public properties configurable from
    the controller. These are `modelName`, which holds the name of the model we are
    working with, and `redirectTo` that specifies a route the user will be redirected
    to.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其可定制，我们创建了两个可以从控制器配置的公共属性。这些是 `modelName`，它包含我们正在工作的模型名称，以及 `redirectTo`，它指定用户将被重定向到的路由。
- en: The configuration itself is done by implementing the actions method in your
    controller. There, you can attach the action once or multiple times and configure
    its public properties.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 配置本身是通过在控制器中实现 `actions` 方法来完成的。在那里，您可以一次或多次附加操作并配置其公共属性。
- en: You can access the original controller object via the controller property if
    you need it to redirect to another action or render a specific view.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要将其重定向到另一个操作或渲染特定视图，您可以通过控制器属性访问原始控制器对象。
- en: See also
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn more about controllers and actions refer, to [http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html](http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于控制器和操作的信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html](http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html)
- en: The *Creating reusable controllers* recipe in this chapter
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *创建可重用控制器* 菜谱
- en: Creating reusable controllers
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可重用控制器
- en: In Yii, you can create reusable controllers. If you are creating a lot of applications
    or controllers that are of the same type, moving all common code into a reusable
    controller will save you a lot of time.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii 中，您可以创建可重用控制器。如果您正在创建大量应用程序或同类型的控制器，将所有通用代码移动到可重用控制器将为您节省大量时间。
- en: In this recipe, we try to create a common `CleanController`, which will clear
    temporary directories and flush cached data.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们尝试创建一个通用的 `CleanController`，该控制器将清除临时目录并刷新缓存数据。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的 composer 创建一个新的 `yii2-app-basic` 应用程序 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it…
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Carry out the following steps to create reusable controllers:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建可重用控制器：
- en: 'Create the `cleaner` directory and add the standalone `CleanController` controller:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为 `cleaner` 的目录并添加独立的 `CleanController` 控制器：
- en: '[PRE31]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create the `cleaner/views/index.php` view file for the `actionIndex` method:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `actionIndex` 方法创建 `cleaner/views/index.php` 视图文件：
- en: '[PRE32]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Attach the controller to application via the `controllerMap` section of the
    `config/web.php` configuration file:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `config/web.php` 配置文件的 `controllerMap` 部分将控制器附加到应用程序：
- en: '[PRE33]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add a new item to the main menu:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向主菜单添加新项目：
- en: '[PRE34]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Open the controller and clear the assets:![How to do it…](img/image00385.jpeg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制器并清除资源：![如何操作…](img/image00385.jpeg)
- en: 'In case you use the yii2-app-advanced application template, just specify the
    correct paths in the configuration:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是 yii2-app-advanced 应用程序模板，只需在配置中指定正确的路径：
- en: '[PRE35]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now we can attach the controller to any application.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将控制器附加到任何应用程序。
- en: How it works…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When you are running an application and passing a route such as `clean/index`,
    prior to executing `CleanController::actionIndex`, Yii checks if there is `controllerMap`
    defined. Since we have a clean controller defined there, Yii executes it instead
    of going the usual way.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序并传递一个如 `clean/index` 的路由时，在执行 `CleanController::actionIndex` 之前，Yii
    会检查是否定义了 `controllerMap`。由于我们已在那里定义了一个干净的控制器，因此 Yii 将执行它而不是走常规路线。
- en: In the controller itself we defined the `assetPaths`, `runtimePaths`, and `caches`
    properties to be able to connect the controller to applications with different
    directory and cache structures. We are setting it when attaching the controller.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器本身中，我们定义了 `assetPaths`、`runtimePaths` 和 `caches` 属性，以便能够将控制器连接到具有不同目录和缓存结构的应用程序。我们在附加控制器时设置它。
- en: See also
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn more about controllers and about the controllers map, refer
    to [http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html](http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于控制器和控制器映射的信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html](http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html)
- en: The *Creating reusable controllers* recipe in this chapter
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *创建可重用控制器* 菜谱
- en: Creating a widget
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控件
- en: A widget is a reusable part of a view that not only renders some data but also
    does it according to some logic. It can even get data from models and use its
    own views, so it is like a reduced reusable version of a module.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件是视图的可重用部分，它不仅渲染一些数据，而且还根据某些逻辑进行渲染。它甚至可以从模型中获取数据并使用自己的视图，因此它类似于模块的简化可重用版本。
- en: Let's create a widget that will draw a pie chart using Google APIs.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个使用 Google API 绘制饼图的控件。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的 composer 创建一个新的 `yii2-app-basic` 应用程序 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create the `widgets` directory and add the `ChartWidget` class:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `widgets` 目录并添加 `ChartWidget` 类：
- en: '[PRE36]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create the `widgets/views/chart.php` view:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `widgets/views/chart.php` 视图：
- en: '[PRE37]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now create a `ChartController` controller:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个 `ChartController` 控制器：
- en: '[PRE38]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the `views/chart/index.php` view:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `views/chart/index.php` 视图：
- en: '[PRE39]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now try to run the index action of the controller. You should see a pie chart
    like the following:![How to do it…](img/image00512.jpeg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试运行控制器的索引操作。您应该看到如下所示的饼图：![如何做…](img/image00512.jpeg)
- en: You can show any chart with different sizes and data sets.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用不同的大小和数据集显示任何图表。
- en: How it works…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As in every other type of extension, we are creating some public properties
    we can configure when calling a widget using its `widget` method. In this case,
    we are configuring the title, data set, and data labels.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在其他任何类型的扩展中一样，我们创建了一些公共属性，我们可以在调用控件的 `widget` 方法时进行配置。在这种情况下，我们配置了标题、数据集和数据标签。
- en: The main method of a widget is `run()`. In our widget, we are generating a URL
    and rendering the widget view, which uses the Google charting API for printing
    the `<img>` tag.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 控件的主要方法是 `run()`。在我们的控件中，我们生成一个 URL 并渲染控件视图，该视图使用 Google 图表 API 打印 `<img>` 标签。
- en: See also
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn more about widgets, refer to [http://www.yiiframework.com/doc-2.0/guide-structure-widgets.html](http://www.yiiframework.com/doc-2.0/guide-structure-widgets.html)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于小部件的信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-structure-widgets.html](http://www.yiiframework.com/doc-2.0/guide-structure-widgets.html)
- en: The *Making extensions distribution-ready* recipe in this chapter
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *制作扩展可分发* 菜谱
- en: Creating CLI commands
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 CLI 命令
- en: Yii has good command-line support and allows creating reusable console commands.
    Console commands are faster to create than web GUIs. If you need to create some
    kind of utility for your application that will be used by developers or administrators,
    console commands are the right tool.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 具有良好的命令行支持，并允许创建可重用的控制台命令。控制台命令的创建速度比 Web 图形用户界面快。如果您需要为您的应用程序创建一些将被开发人员或管理员使用的实用程序，控制台命令是正确的工具。
- en: To show how to create a console command, we'll create a simple command that
    will clean up various things, such as assets and temp directories.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示如何创建控制台命令，我们将创建一个简单的命令，该命令将清理各种内容，例如资源和临时目录。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用composer创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it…
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Carry out the following steps to create CLI commands:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建CLI命令：
- en: 'Create the `commands/CleanController.php` file with the following code:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建`commands/CleanController.php`文件：
- en: '[PRE40]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now we can use our own console controller with default settings. Just run the
    `yii` shell script:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用我们自己的具有默认设置的console控制器。只需运行`yii`shell脚本：
- en: '[PRE41]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Look for own `clean` commands:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找自己的`clean`命令：
- en: '[PRE42]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Right now run asset cleaning:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行资产清理：
- en: '[PRE43]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'See the process report:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看过程报告：
- en: '[PRE44]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If you want to use this controller in the `yii2-app-advanced` application,
    just specify the custom working paths:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想在`yii2-app-advanced`应用程序中使用此控制器，只需指定自定义工作路径：
- en: '[PRE45]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works…
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: All console commands should be extended from the `yii\console\Controller` class.
    Since all console commands are run in `yii\console\Application` instead of `yii\web\Application`,
    we don't have a way to determine the value of the `@webroot` alias. Also, in the
    `yii2-app-advanced` template we have backend, frontend, and console subdirectories
    by default. For this purpose, we are creating configurable public properties called
    `assetPaths` and `runtimePaths`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 所有控制台命令都应该扩展自`yii\console\Controller`类。由于所有控制台命令都是在`yii\console\Application`而不是`yii\web\Application`中运行的，我们没有方法来确定`@webroot`别名的值。此外，在`yii2-app-advanced`模板中，我们默认有后端、前端和控制台子目录。为此，我们正在创建可配置的公共属性，称为`assetPaths`和`runtimePaths`。
- en: The console command structure itself is like a typical controller. We are defining
    several actions we can run via `yii <console command>/<command action>`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台命令结构本身就像一个典型的控制器。我们正在定义几个可以通过`yii <console command>/<command action>`运行的操作。
- en: As you can see, there are no views used, so we can focus on programming tasks
    instead of design, markup, and so on. Still, you need to provide some useful output
    so that users will know what is going on. This is done through simple PHP echo
    statements.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，没有使用视图，因此我们可以专注于编程任务而不是设计、标记等。然而，您需要提供一些有用的输出，以便用户知道正在发生什么。这是通过简单的PHP echo语句完成的。
- en: 'If your command is relatively complex such as message or migrate bundled with
    Yii, it''s a good decision to provide some extra description of the available
    options and actions. It can be done by overriding the `getHelp` method:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的命令相对复杂，例如与Yii捆绑的消息或迁移，提供一些关于可用选项和操作的额外描述是一个好主意。这可以通过重写`getHelp`方法来完成：
- en: '[PRE46]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Run the following command:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE47]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You can see the full output as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式查看完整输出：
- en: '[PRE48]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'By default, when we run the shell command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当我们运行shell命令时：
- en: '[PRE49]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We have seen simplified description of all commands in the output list:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在输出列表中看到了所有命令的简化描述：
- en: '[PRE50]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This description will be taken from comments before class and actions:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 此描述将来自类和动作之前的注释：
- en: '[PRE51]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: It is optional to add descriptions for your classes. You must not do it for
    your own CLI commands.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的类添加描述是可选的。您绝对不应该为您的CLI命令这样做。
- en: See also
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating reusable controllers* recipe in this chapter
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*创建可重用控制器*配方
- en: The *Making extensions distribution-ready* recipe in this chapter
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*制作扩展分发准备就绪*配方
- en: Creating filters
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建过滤器
- en: A filter is a class that can run before/after an action is executed. It can
    be used to modify execution context or decorate output. In our example, we'll
    implement a simple access filter that will allow the user to see private content
    only after accepting the **User agreement**.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器是一个可以在执行动作之前/之后运行的类。它可以用来修改执行上下文或装饰输出。在我们的例子中，我们将实现一个简单的访问过滤器，它将允许用户在接受**用户协议**后才能看到私有内容。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 使用composer创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it…
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create the agreement form model:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建协议表单模型：
- en: '[PRE52]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create the agreement checker service:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建协议检查器服务：
- en: '[PRE53]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: It encapsulates work with the agreement cookies.
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它封装了对协议cookie的操作。
- en: 'Create the `filter` class:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`filter`类：
- en: '[PRE54]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create the content controller and attach the filter to its behaviors:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建内容控制器并将过滤器附加到其行为：
- en: '[PRE55]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the `views/content/index.php` view with private content:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加带有私有内容的`views/content/index.php`视图：
- en: '[PRE56]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Add the `views/content/agreement.php` view with the form:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加带有表单的`views/content/agreement.php`视图：
- en: '[PRE57]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Add the main menu item to the `views/layouts/main.php` file:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主菜单项添加到`views/layouts/main.php`文件：
- en: '[PRE58]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Try to open the content page. The filter must redirect you to the agreement
    page:![How to do it…](img/image00374.jpeg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试打开内容页面。过滤器必须将你重定向到协议页面：![如何做…](img/image00374.jpeg)
- en: Only after accepting the rules can you see the private content:![How to do it…](img/image00514.jpeg)
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有在接受规则之后，你才能看到私有内容：![如何做…](img/image00514.jpeg)
- en: Also, you can attach the filter to other controllers or modules.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，你还可以将过滤器附加到其他控制器或模块。
- en: How it works…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: A filter should extend the `yii\base\ActionFilter` class, which extends `yii\base\Behavior`.
    We can override the `beforeAction` or `afterAction` method if we want to do post-
    and pre-filtering.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器应该扩展`yii\base\ActionFilter`类，该类扩展了`yii\base\Behavior`。如果我们想进行后过滤和前过滤，我们可以重写`beforeAction`或`afterAction`方法。
- en: 'For example, we can check user access and throw corresponding HTTP-exceptions
    in a fail case. In this recipe, we redirect the user to the agreement page if
    the specific cookie value does not exist:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在失败情况下检查用户访问并抛出相应的HTTP异常。在这个菜谱中，如果特定的cookie值不存在，我们将用户重定向到协议页面：
- en: '[PRE59]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'You can attach filters to any controller or module. To specify the list of
    necessary routes, just use the `only` or `except` options. For example, we apply
    our filter only for the index action of the controller:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将过滤器附加到任何控制器或模块。要指定必要的路由列表，只需使用`only`或`except`选项。例如，我们只为控制器的index动作应用我们的过滤器：
- en: '[PRE60]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Note
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not forget to return a `true` value in the success case from the `beforeAction`
    method. Otherwise, the controller action will not be executed.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在`beforeAction`方法中返回一个`true`值（在成功情况下）。否则，控制器动作将不会执行。
- en: See also
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: For more information about filters, refer to [http://www.yiiframework.com/doc-2.0/guide-structure-filters.html](http://www.yiiframework.com/doc-2.0/guide-structure-filters.html).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 关于过滤器的更多信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-structure-filters.html](http://www.yiiframework.com/doc-2.0/guide-structure-filters.html).
- en: 'For build-in cache and access control filters, refer to:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内置缓存和访问控制过滤器，请参阅：
- en: '[http://www.yiiframework.com/doc-2.0/guide-caching-http.html](http://www.yiiframework.com/doc-2.0/guide-caching-http.html)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-caching-http.html](http://www.yiiframework.com/doc-2.0/guide-caching-http.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-securityauthorization.html](http://www.yiiframework.com/doc-2.0/guide-securityauthorization.html)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-securityauthorization.html](http://www.yiiframework.com/doc-2.0/guide-securityauthorization.html)'
- en: The *Creating model behaviors* recipe
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建模型行为*的菜谱'
- en: Creating modules
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模块
- en: If you have created a complex application part and want to use it with some
    degree of customization in your next project, most probably you need to create
    a module. In this recipe, we will see how to create an application log view module.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经创建了一个复杂的应用程序部分，并希望在下一个项目中以某种程度的定制使用它，那么你很可能需要创建一个模块。在这个菜谱中，我们将看到如何创建一个应用程序日志视图模块。
- en: Getting ready
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的composer创建一个新的`yii2-app-basic`应用程序，指南链接为 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
- en: How to do it…
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Let's do some planning first.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先做一些规划。
- en: In `yii2-app-basic` with default configuration, all log entries are stored in
    the `runtime/logs/app.log` file. We can extract all messages from this file with
    help of regular expressions and display them on the **GridView** widget. Besides,
    we must allow the user to configure the path to the custom log file.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认配置的`yii2-app-basic`中，所有日志条目都存储在`runtime/logs/app.log`文件中。我们可以使用正则表达式从该文件中提取所有消息，并在**GridView**小部件上显示它们。此外，我们必须允许用户配置自定义日志文件的路径。
- en: 'Carry out the following steps:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create the `modules/log` directory and create the `Module` class with the new
    file option:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`modules/log`目录，并使用新文件选项创建`Module`类：
- en: '[PRE61]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create a simple model for transferring rows from the log file:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的模型，用于从日志文件中传输行：
- en: '[PRE62]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Write a log file reader class that will parse file rows, reverse its order,
    and return array of instances of the `LogRow` models:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个日志文件读取器类，它将解析文件行，反转其顺序，并返回 `LogRow` 模型实例的数组：
- en: '[PRE63]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Add a helper for displaying pretty HTML-badges for the log levels:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个用于显示日志级别的美观 HTML 徽章的辅助器：
- en: '[PRE64]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Create a module controller that will get an array of rows from the reader and
    pass them into `ArrayDataProvider`:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个模块控制器，它将从读取器获取行数组并将它们传递到 `ArrayDataProvider`：
- en: '[PRE65]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, create the `modules/log/default/index.php` view file:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建 `modules/log/default/index.php` 视图文件：
- en: '[PRE66]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Attach the module to your application in the `config/web.php` file:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config/web.php` 文件中将模块附加到你的应用程序中：
- en: '[PRE67]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Add a link to the controller in the `views/layouts/main.php` file:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `views/layouts/main.php` 文件中添加对控制器的链接：
- en: '[PRE68]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Go to `url /index.php?r=lo``g` and ensure that the module works:![How to do
    it…](img/image00376.jpeg)
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `url /index.php?r=lo``g` 并确保模块正常工作：![如何操作…](img/image00376.jpeg)
- en: How it works...
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can group your controllers, models, views, and other components by separated
    modules and attach them into your application. You can generate a module template
    with the help of Gii or make it manually.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过分离的模块将控制器、模型、视图和其他组件分组，并将它们附加到你的应用程序中。你可以使用 Gii 生成模块模板，或者手动创建它。
- en: Each module contains a main module class where we can define configurable properties,
    define change paths, attach controllers, and so on. By default, a module generated
    with Gii runs the `index` action of the default controller.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都包含一个主模块类，我们可以在其中定义可配置的属性、定义更改路径、附加控制器等。默认情况下，使用 Gii 生成的模块运行默认控制器的 `index`
    动作。
- en: See also
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about modules and about best practices, refer to [http://www.yiiframework.com/doc-2.0/guide-structure-modules.html](http://www.yiiframework.com/doc-2.0/guide-structure-modules.html)
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关模块和最佳实践的更多信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-structure-modules.html](http://www.yiiframework.com/doc-2.0/guide-structure-modules.html)
- en: The *Making extensions distribution-ready* recipe
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*制作扩展准备就绪* 菜谱'
- en: Creating a custom view renderer
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义视图渲染器
- en: There are many PHP template engines out there. Yii2 only offers native PHP templates.
    If you want to use one of the existing template engines or create your own one,
    you have to implement it—of course, if it's not yet implemented by the Yii community.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有大量的 PHP 模板引擎。Yii2 只提供原生 PHP 模板。如果你想使用现有的模板引擎或创建自己的模板引擎，你必须实现它——当然，如果它还没有被
    Yii 社区实现的话。
- en: In this recipe we'll re-implement the Smarty templates support.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将重新实现 Smarty 模板支持。
- en: Getting ready
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 composer 创建一个新的 `yii2-app-basic` 应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Install the Smarty library:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Smarty 库：
- en: '[PRE69]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: How to do it…
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Carry out the following steps for creating a custom view renderer:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建自定义视图渲染器：
- en: 'Create the `smarty/ViewRenderer.php` file:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `smarty/ViewRenderer.php` 文件：
- en: '[PRE70]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now we need to connect the view renderer to the application. In `config/web
    php`, we need to add renderers of the view component:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将视图渲染器连接到应用程序。在 `config/web php` 中，我们需要添加视图组件的渲染器：
- en: '[PRE71]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now let''s test it. Create a new `SmartyController`:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们来测试它。创建一个新的 `SmartyController`：
- en: '[PRE72]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Next, we need to create the `views/smarty/index.tpl` view:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建 `views/smarty/index.tpl` 视图：
- en: '[PRE73]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Now try running the controller. In a success case, you should get the following
    as output:![How to do it…](img/image00412.jpeg)
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试运行控制器。在成功的情况下，你应该得到以下输出：![如何操作…](img/image00412.jpeg)
- en: How it works…
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'A view renderer is a child of the `yii\base\ViewRenderer` abstract class that
    implements only one method, called `render`:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 视图渲染器是 `yii\base\ViewRenderer` 抽象类的子类，它只实现了一个名为 `render` 的方法：
- en: '[PRE74]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Therefore, we are getting a view component, file path, and render variables.
    We need to process the file and return the rendered result. In our case, processing
    itself is done by the Smarty template engine, so we need to properly initialize
    it and call its processing methods:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们得到了一个视图组件、文件路径和渲染变量。我们需要处理文件并返回渲染结果。在我们的例子中，处理本身是由 Smarty 模板引擎完成的，所以我们需要正确地初始化它并调用其处理方法：
- en: '[PRE75]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: It is a good practice to store Yii temporary files in the application runtime
    directory. That is why we are setting the `compile` directory, where Smarty stores
    its templates compiled into PHP, to `runtime/smarty/compile`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 将Yii临时文件存储在应用程序运行时目录中是一个好习惯。这就是为什么我们将`compile`目录（Smarty存储编译成PHP的模板的地方）设置为`runtime/smarty/compile`。
- en: 'Rendering itself is a bit simpler:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染本身稍微简单一些：
- en: '[PRE76]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: All data set via `$this->render` is passed to the Smarty template as it is.
    Also, we are creating special Smarty template variables named `app` and `this`
    that point to `Yii::$app` and `Yii::$app->view` and allow us to get application
    properties inside a template.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`$this->render`设置的所有数据都原样传递给Smarty模板。此外，我们正在创建特殊的Smarty模板变量`app`和`this`，它们指向`Yii::$app`和`Yii::$app->view`，允许我们在模板内部获取应用程序属性。
- en: Then, we are rendering the templates.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将渲染模板。
- en: See also
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can get ready to use Smarty view renderer with plugins and configuration
    support at [https://github.com/yiisoft/yii2-smarty](https://github.com/yiisoft/yii2-smarty).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/yiisoft/yii2-smarty](https://github.com/yiisoft/yii2-smarty)上获取使用Smarty视图渲染器以及插件和配置支持的准备信息。
- en: 'To learn more about Smarty and view renderers in general, refer to the following
    URLs:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Smarty和一般视图渲染器的信息，请参考以下URL：
- en: '[http://www.smarty.net](http://www.smarty.net)'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.smarty.net](http://www.smarty.net)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-templateengines.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-templateengines.html)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-templateengines.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-templateengines.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-structure-views.html](http://www.yiiframework.com/doc-2.0/guide-structure-views.html)'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-structure-views.html](http://www.yiiframework.com/doc-2.0/guide-structure-views.html)'
- en: Creating a multilanguage application
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多语言应用程序
- en: Every day, we meet more and more international companies, software products,
    and information resources that publish content on multiple languages. Yii2 provides
    built-in i18n support for making multilanguage applications.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 每天我们都遇到越来越多的国际公司、软件产品和信息资源，它们在多种语言上发布内容。Yii2为制作多语言应用程序提供了内置的i18n支持。
- en: In this recipe, we are translating the application interface to different languages.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将应用程序界面翻译成不同的语言。
- en: Getting ready
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 使用composer创建一个新的`yii2-app-basic`应用程序，具体步骤请参考官方指南中的[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it…
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Change the main menu labels in the `views/layouts/main.php` file to use the
    `Yii::t(''app/nav'', ''...'')` method:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/layouts/main.php`文件中将主菜单标签更改为使用`Yii::t('app/nav', '...')`方法：
- en: '[PRE77]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Change all your titles and breadcrumbs to use the common `Yii::t(''app, ''...'')`
    method:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有标题和面包屑更改为使用通用的`Yii::t('app', '...')`方法：
- en: '[PRE78]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Also, change all the labels of your buttons:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，更改所有按钮的标签：
- en: '[PRE79]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Change other hard-coded messages as well:'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同时更改其他硬编码的消息：
- en: '[PRE80]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Change the attribute labels of your `ContactForm` model:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改你的`ContactForm`模型的属性标签：
- en: '[PRE81]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Also, change the attribute labels of the `LoginForm` model:'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同时，更改`LoginForm`模型的属性标签：
- en: '[PRE82]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: It will output translated labels for the current language instead of originals.
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将输出当前语言的翻译标签而不是原始标签。
- en: To prepare translations, create the `messages` directory. Right now, we can
    create translation files for all needed languages. We can do it manually, but
    there is a helpful crawler that can scan all project files and extract all messages
    from `Yii::t()` constructions. Let's use it.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了准备翻译，创建`messages`目录。目前，我们可以为所有需要的语言创建翻译文件。我们可以手动操作，但有一个有用的爬虫可以扫描所有项目文件并从`Yii::t()`结构中提取所有消息。让我们使用它。
- en: 'Generate the configuration file for the message scanner:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成消息扫描器的配置文件：
- en: '[PRE83]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Open the configuration file and set the following values:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开配置文件并设置以下值：
- en: '[PRE84]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Run crawler while passing this configuration file to it:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在传递此配置文件的同时运行爬虫：
- en: '[PRE85]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'After the process, we must get the following directory structure:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此过程中，我们必须获得以下目录结构：
- en: '[PRE86]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'For example, the `messages/de/app/contact` file contains the following content:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，`messages/de/app/contact`文件包含以下内容：
- en: '[PRE87]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: It is a plain PHP array with original sentences in keys and translated messages
    in values.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是一个普通的PHP数组，键是原始句子，值是翻译的消息。
- en: 'Just put in the values needed to translate messages from Deutsch:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需输入翻译德语消息所需的价值：
- en: '[PRE88]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Attach these translations to the `i18n` component of application in the `config/web.php`
    file:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config/web.php` 文件中将这些翻译附加到应用程序的 `i18n` 组件：
- en: '[PRE89]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Open the login page with the default language:![How to do it…](img/image00372.jpeg)
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认语言打开登录页面：![如何做…](img/image00372.jpeg)
- en: 'Switch the application language to `de`:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序语言切换为 `de`：
- en: '[PRE90]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Then refresh the login page:'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后刷新登录页面：
- en: '![How to do it…](img/image00503.jpeg)'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00503.jpeg)'
- en: The built-in frameworks messages and default validation errors will be translated
    automatically.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内置框架的消息和默认验证错误将自动翻译。
- en: How it works…
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Yii2 provides the `Yii::t()` method for translating interface messages via the
    `i18n` component, which supports different types of sources. In this recipe, we
    use `yii\i18n\hpMessageSource`, which stores translated messages in plain PHP
    files.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 提供了 `Yii::t()` 方法，通过 `i18n` 组件翻译界面消息，该组件支持不同类型的源。在本食谱中，我们使用 `yii\i18n\hpMessageSource`，它将翻译消息存储在纯
    PHP 文件中。
- en: The framework does not have artificial intelligence and does not translate messages
    by itself. You must put prepared translations in files or in the database and
    framework to get the needed message from this message source.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 框架没有人工智能，并且不会自动翻译消息。你必须将准备好的翻译放入文件或数据库中，并将框架中的消息源获取所需的消息。
- en: 'You can set the current language manually:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以手动设置当前语言：
- en: '[PRE91]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Instead of setting the language in the configuration file, you can switch the
    application language in runtime:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是在配置文件中设置语言，你可以在运行时切换应用程序语言：
- en: '[PRE92]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'For example, if you store the user language in the `lang` field of the `User`
    model, you can create the language loader:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在 `User` 模型的 `lang` 字段中存储用户语言，你可以创建语言加载器：
- en: '[PRE93]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Register this class in the bootstrapping list:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在引导列表中注册此类：
- en: '[PRE94]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Now, every authenticated user will see the interface in their own language.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个经过身份验证的用户都将看到他们自己的语言界面。
- en: Also, you can override the `yii\web\UrlManager` class for passing the current
    language as a GET parameter or as a prefix of a URL. Also, as an alternative you
    can store selected languages in browser cookies.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以覆盖 `yii\web\UrlManager` 类，通过 GET 参数或 URL 的前缀传递当前语言。另外，作为一个替代方案，你可以在浏览器
    cookie 中存储选定的语言。
- en: 'When you generate models and another code with Gii, you can check the following
    option:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 Gii 生成模型和其他代码时，你可以检查以下选项：
- en: '![How it works…](img/image00522.jpeg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00522.jpeg)'
- en: All labels in the generated code will be embraced into the `Yii::t()` calls.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 生成代码中的所有标签都将包含在 `Yii::t()` 调用中。
- en: Note
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We did not cover the translating of model content in this recipe. However, for
    example, you can store translated texts in separate tables (such as the `post_lang`
    table for post model table) in a database and use the value of the `Yii::$app->language`
    property to get the current language and extract needed content for your models
    by the value.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本食谱中没有涵盖模型内容的翻译。然而，例如，你可以在数据库中单独的表中（如用于帖子模型的 `post_lang` 表）存储翻译文本，并使用 `Yii::$app->language`
    属性的值来获取当前语言，并通过该值提取模型所需的内容。
- en: See also
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考也
- en: For more information about internationalization in Yii2, refer to [http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html).
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Yii2 国际化的更多信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html)。
- en: Making extensions distribution-ready
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使扩展准备分发
- en: In this chapter, you learned how to create various types of Yii extensions.
    Now we'll talk about how to share your results with people and why it's important.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何创建各种类型的 Yii 扩展。现在我们将讨论如何与他人分享你的成果以及为什么这很重要。
- en: Getting ready
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s form a checklist for a good extension first. A good programming product
    should follow these points:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先为好的扩展制定一个清单。一个好的编程产品应该遵循以下这些要点：
- en: Good coding style
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的编码风格
- en: People should be able to find it
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人们应该能够找到它
- en: A consistent, easy to read, and easy to use API
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致、易于阅读和易于使用的 API
- en: Good documentation
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的文档
- en: Extension should apply to the most common use cases
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展应该适用于最常见的用例
- en: Should be maintained
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该得到维护
- en: Well-tested code, ideally with unit tests
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码经过良好测试，理想情况下带有单元测试
- en: You need to provide support for it
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要提供对其的支持
- en: Of course, having all these requires a lot of work, but these are necessary
    to create a good product.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，拥有所有这些需要大量的工作，但这些对于创建一个好的产品是必要的。
- en: How to do it…
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Every modern PHP product must follow the PSR4 standards of autoloading and the
    PSR1 and PSR2 standards of the coding style from the [http://www.php-fig.org/psr/](http://www.php-fig.org/psr/)
    guide.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个现代PHP产品都必须遵循[http://www.php-fig.org/psr/](http://www.php-fig.org/psr/)指南中的PSR4自动加载标准和PSR1和PSR2编码风格标准。
- en: Let's review our list in more detail, starting with the API. The API should
    be consistent, easy to read, and easy to use. Consistent means that the overall
    style should not change, so no different variable naming, no inconsistent names
    such as `isFlag1()` and `isNotFlag2()`, and so on. Everything should obey the
    rules you've defined for your code. This allows less checking of documentation
    and allows you to focus on coding.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更详细地审查我们的列表，从API开始。API应该是一致的、易于阅读和使用的。一致性意味着整体风格不应该改变，所以没有不同的变量命名，没有像`isFlag1()`和`isNotFlag2()`这样的不一致的名称，等等。一切都应该遵循你为你的代码定义的规则。这允许减少对文档的检查，让你可以专注于编码。
- en: A code without any documentation is almost useless. An exception is a relatively
    simple code, but even if it's only a few lines, it doesn't feel right if there
    is not a single word about how to install and use it. What makes good documentation?
    The purpose of the code and its pros should be as visible as possible and should
    be written loud and clear.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有任何文档的代码几乎毫无用处。一个例外是相对简单的代码，但即使只有几行，如果没有关于如何安装和使用的说明，也会感觉不太对劲。好的文档有哪些特点？代码的目的和优点应该尽可能明显，并且应该写得清晰易懂。
- en: A code is useless if developers don't know where to put it and what should be
    in the application configuration. Don't expect that people know how to do framework-specific
    things. The installation guide should be verbose. A step-by-step form is preferred
    by a majority of developers. If the code needs SQL schema to work, provide it.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果开发者不知道代码应该放在哪里以及应用配置中应该有什么，那么代码就毫无用处。不要期望人们知道如何做框架特定的东西。安装指南应该详细说明。大多数开发者更喜欢逐步的形式。如果代码需要SQL模式才能工作，请提供它。
- en: Even if your API methods and properties are named properly, you still need to
    document them with PHPDoc comments specifying argument types and return types,
    providing a brief description for each method. Don't forget protected and private
    methods and properties since sometimes it's necessary to read these to understand
    the details of how code works. Also, consider listing public methods and properties
    in documentation so it can be used as a reference.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使你的API方法和属性命名得当，你仍然需要用PHPDoc注释来记录它们，指定参数类型和返回类型，并为每个方法提供简要的描述。不要忘记受保护的和方法和属性，因为有时阅读这些内容是理解代码工作细节的必要条件。同时，考虑在文档中列出公共方法和属性，以便作为参考。
- en: Provide use case examples with well-commented code. Try to cover the most common
    ways of extension usage.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供带有良好注释的代码用例示例。尽量涵盖扩展使用最常见的方式。
- en: In an example, don't try to solve multiple problems at a time since it can be
    confusing.
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在示例中，不要试图一次解决多个问题，因为这可能会造成混淆。
- en: It's important to make your code flexible so it will apply to many use cases.
    However, since it's not possible to create code for every possible use case, try
    to cover the most common ones.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让你的代码灵活很重要，这样它就可以适用于许多用例。然而，由于不可能为每个可能的用例编写代码，因此尽量涵盖最常见的用例。
- en: It's important to make people feel comfortable. Providing a good documentation
    is a first step. The second is providing a proof that your code works as expected
    and will work with further updates. The best way to do it is a set of unit tests.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让人们感到舒适很重要。提供良好的文档是第一步。第二步是提供证明你的代码按预期工作并且会与后续更新一起工作的证据。最好的方式是一套单元测试。
- en: Extension should be maintained, at least until it's stable and there are no
    more feature requests and bug reports. So expect questions and reports, and reserve
    some time to work on the code further. If you can't devote more time to maintain
    extensions, but it's very innovative and no one did it before, it's still worth
    sharing. If the community likes it, someone will definitely offer his or her help.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展应该得到维护，至少直到它稳定，没有更多的功能请求和错误报告。因此，预计会有问题和报告，并留出一些时间来进一步工作在代码上。如果你不能投入更多时间来维护扩展，但它非常创新，之前没有人做过，那么仍然值得分享。如果社区喜欢它，肯定有人会提供帮助。
- en: Finally, you need to make extensions available. Create the Composer package
    from your extension, push it on GitHub or other shared repository storage, and
    publish it on the [https://packagist.org](https://packagist.org) site.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您需要使扩展可用。从您的扩展创建Composer包，将其推送到GitHub或其他共享仓库存储，并在[https://packagist.org](https://packagist.org)网站上发布。
- en: Each extension should have a version number and a change log. It will allow
    the community to check if they have the latest version and check what is changed
    before upgrading. We recommend to follow the **Semantic Versioning** rules from
    the [http://semver.org](http://semver.org) site.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个扩展都应该有一个版本号和变更日志。这将允许社区检查他们是否拥有最新版本，并在升级前查看发生了什么变化。我们建议遵循来自[http://semver.org](http://semver.org)网站的**语义版本控制**规则。
- en: Even if your extension is relatively simple and documentation is good, there
    could be questions, and for the first time, the only person who can answer them
    is you. Typically, questions are asked at official forums, so it is better to
    create a topic where people can discuss your code and provide a link at the extension
    page.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使您的扩展相对简单且文档良好，也可能会有问题，而且第一次，唯一能回答这些问题的人就是您。通常，这些问题会在官方论坛上提出，因此最好创建一个人们可以讨论您的代码并在此扩展页面上提供链接的主题。
- en: How it works…
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: If you want to share an extension with the community and be sure it will be
    useful and popular, you need to do more than just write code. Making extensions
    distribution-ready is much more work to do. It can be even more than creating
    an extension itself. So, why is it good to share extensions with the community
    in the first place?
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想与社区分享一个扩展并确保它有用且受欢迎，您需要做的不仅仅是编写代码。使扩展准备分发需要做更多的工作。这甚至可能比创建扩展本身还要多。那么，为什么一开始就要与社区分享扩展呢？
- en: Making the code you use in your own projects open source has its pros. You are
    getting people, a lot more people than you can get to test your closed source
    project. People who are using your extension are testing it, giving valuable feedback,
    and reporting bugs. If your code is popular, there will be passionate developers
    who will try to improve your code, to make it more extensive, more stable, and
    reusable. Moreover, it just feels good because you are doing a good thing.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 将您在自己的项目中使用的代码开源有其优点。您将获得人们，比您能接触到测试封闭源代码项目的人多得多的测试人员。使用您扩展的人们正在测试它，提供宝贵的反馈，并报告错误。如果您的代码受欢迎，将会有热情的开发者尝试改进您的代码，使其更广泛、更稳定、更可重用。此外，这感觉很好，因为您正在做一件好事。
- en: We have covered the most important things. Still, there are more things to check
    out. Try existing extensions before writing your own. If an extension almost fits,
    try contacting the extension author and contributing ideas you have. Reviewing
    existing code helps you find out useful tricks, dos, and don'ts. Also, check wiki
    articles and the official forum from time to time; there is a lot of useful information
    about creating extensions and developing using Yii in general.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了最重要的内容。尽管如此，还有更多的事情需要检查。在编写自己的扩展之前，尝试使用现有的扩展。如果一个扩展几乎符合要求，尝试联系扩展作者并贡献您的想法。审查现有代码有助于您发现有用的技巧、应该做的和不应该做的。此外，不时查看维基文章和官方论坛；关于创建扩展和一般使用Yii进行开发的信息非常丰富。
- en: See also
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For modern information about PHP coding standards, refer to [http://www.php-fig.org/psr/](http://www.php-fig.org/psr/)
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于PHP编码标准的现代信息，请参考[http://www.php-fig.org/psr/](http://www.php-fig.org/psr/)
- en: To learn more about semantic versioning, refer to [http://semver.org](http://semver.org)
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想了解更多关于语义版本控制的信息，请参考[http://semver.org](http://semver.org)
