- en: Appendix B. Blueprint – Creating an Events Calendar Add-on
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 蓝图 – 创建事件日历插件
- en: Many add-ons that developers have to create end up combining dashboard interfaces
    and custom block types to not only provide great editing capabilities on the backend
    of the site, but also unique and powerful interfaces on the frontend of the website.
    A common request on websites is the ability to have an events calendar. This blueprint
    here is going to combine much of the knowledge that we gained in the prior chapters
    to create an events calendar add-on. The add-on will have a CRUD interface on
    the dashboard as well as a custom block type to display the events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者必须创建的插件最终会结合仪表板界面和自定义块类型，不仅为网站的后端提供强大的编辑能力，还在网站的前端提供独特且强大的界面。网站上的一个常见请求是拥有一个事件日历。此蓝图将结合我们在前几章中获得的大部分知识来创建一个事件日历插件。该插件将在仪表板上具有CRUD界面，以及一个自定义块类型来显示事件。
- en: Before we begin...
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们开始之前...
- en: Before we begin, we should note that the blueprint in this chapter is based
    on a fresh installation of concrete5, with all of the sample content loaded. This
    will give us some nice pages and a clean design to work with.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们应该注意，本章中的蓝图是基于一个全新的混凝土5安装，并加载了所有示例内容。这将为我们提供一些不错的页面和干净的设计来工作。
- en: The complete working code for this add-on is available for free from the book's
    website. Feel free to download that as a starting point or to solve any problems
    you may run into.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件的完整工作代码可在书籍网站上免费获取。您可以将其作为起点下载，或用于解决您可能遇到的问题。
- en: Creating the package
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建包
- en: Let's get moving. First, we will create the package's directory. Add a new directory
    in `/packages` called `cookbook_events`. Inside this directory, create the package's
    controller file.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始行动。首先，我们将创建包的目录。在 `/packages` 中添加一个名为 `cookbook_events` 的新目录。在此目录内，创建包的控制器文件。
- en: The package controller
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包控制器
- en: You may be familiar with package controllers already; they tell concrete5 about
    the package, as well as provide functionality for developers to perform advanced
    tasks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经熟悉包控制器了；它们告诉混凝土5有关包的信息，并为开发者提供执行高级任务的功能。
- en: 'Enter the following code in `controller.php`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `controller.php` 文件中输入以下代码：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice the use of the `defined or die` statement at the top of the file. This
    is required at the top of every PHP file in the package, otherwise concrete5 will
    reject your add-on if you submit it to the marketplace.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意文件顶部使用的 `defined or die` 语句。这是在包中的每个PHP文件顶部必需的，否则如果将您的插件提交到市场，混凝土5将拒绝您的插件。
- en: Also, note the use of the `t()` function around the package name and description
    strings. This will allow translators to offer translations of these strings in
    an easy and consistent way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意在包名称和描述字符串周围使用 `t()` 函数。这将允许翻译者以简单和一致的方式提供这些字符串的翻译。
- en: We are setting the minimum concrete5 Version to 5.6.0\. as we are using some
    CSS styles that don't fully work on older versions of concrete5\. With a little
    extra work, however, we could support older versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将最小混凝土5版本设置为5.6.0，因为我们使用了一些在混凝土5旧版本上不完全工作的CSS样式。然而，通过一些额外的工作，我们也可以支持旧版本。
- en: The package database XML file
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包数据库XML文件
- en: Our package will need to create a database table to store the event data. Rather
    than executing raw SQL, the preferred methodology is to create a `db.xml` file
    that contains all of the tables and fields to be created. concrete5 will read
    this file when the package is installed and will perform the necessary database
    operations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的包需要创建一个数据库表来存储事件数据。而不是执行原始SQL，首选的方法是创建一个包含所有要创建的表和字段的 `db.xml` 文件。当包安装时，混凝土5将读取此文件并执行必要的数据库操作。
- en: Create the `db.xml` file at `/packages/cookbook_events/db.xml`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/packages/cookbook_events/db.xml` 创建 `db.xml` 文件。
- en: 'Enter the following XML code in the file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中输入以下XML代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save this file. This tells concrete5 to create a table named `CookbookEvents`,
    with fields for a title, date, location, description, and some meta data. The
    use of `db.xml` also makes future database upgrades easier when your add-on is
    updated.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此文件。这告诉混凝土5创建一个名为 `CookbookEvents` 的表，其中包含标题、日期、地点、描述和一些元数据字段。使用 `db.xml`
    也使得在您的插件更新时数据库升级更容易。
- en: You may recall that this XML file makes use of the ADOdb XML schema format,
    or **AXMLS**. You can learn more about AXMLS and the different field types at
    [http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能记得这个XML文件使用了ADOdb XML模式格式，或**AXMLS**。你可以在[http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema)了解更多关于AXMLS和不同字段类型的信息。
- en: The model
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: Now that we know what our database table looks like, let's create the model
    that we will use to interact with the table.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了我们的数据库表的样子，让我们创建我们将用来与表交互的模型。
- en: Create a new file at `/packages/cookbook_events/models/cookbook_event.php`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/packages/cookbook_events/models/cookbook_event.php`创建一个新的文件。
- en: 'Create the `model` class and specify the name of the database table:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`model`类并指定数据库表名：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice how we named the class `CookbookEvent` rather than just `Event`. This
    is to prevent collisions with other classes. Since `Event` is a fairly common
    name for a class, it is possible that there could be a conflict. It's always a
    good idea to make your class names as unique as possible, while still following
    convention and being easy to understand.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们命名类为`CookbookEvent`而不是仅仅`Event`。这是为了防止与其他类冲突。由于`Event`是一个相当常见的类名，可能存在冲突。始终让类名尽可能独特，同时遵循约定并易于理解。
- en: We also added a function to return a formatted version of the event's date.
    This will come in handy later.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个函数来返回事件的格式化版本。这将在以后很有用。
- en: Single page controllers
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单页控制器
- en: In order for our add-on to have interfaces on the dashboard, we will need to
    create a few single pages with controllers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的附加组件在仪表板上具有接口，我们需要创建几个带有控制器的单页。
- en: 'Create a file in `/packages/cookbook_events/controllers/dashboard/cookbook_events.php`.
    This is the root controller file for the add-on. Give it a basic class file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/packages/cookbook_events/controllers/dashboard/cookbook_events.php`创建一个文件。这是附加组件的根控制器文件。给它一个基本的类文件：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `on_start` function will make sure that if anyone visits this page, they
    will be redirected to the default view showing the events listing. Let's create
    the controller for that view now.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`on_start`函数将确保如果有人访问这个页面，他们将被重定向到默认视图，显示事件列表。现在让我们为这个视图创建控制器。'
- en: 'Now create a new directory at `/packages/cookbook_events/controllers/dashboard/cookbook_events/`.
    Add two files to this directory: `add.php` and `list.php`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`/packages/cookbook_events/controllers/dashboard/cookbook_events/`创建一个新的目录。向这个目录添加两个文件：`add.php`和`list.php`。
- en: 'In `list.php`, add the following class:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`list.php`中添加以下类：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Great! Now in `add.php`, add another class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在在`add.php`中添加另一个类：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Looking good! Our single pages have basic controllers now, but they still need
    view files.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错！我们的单页现在有了基本的控制器，但它们仍然需要视图文件。
- en: Single page views
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单页视图
- en: Create the root view file for our interface at `/packages/cookbook_events/single_pages/cookbook_events.php`.
    Leave this file empty. Create a directory at `/packages/cookbook_events/single_pages/cookbook_events`.
    Add the two files, `add.php` and `list.php`, to this directory. We can leave these
    blank for now.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/packages/cookbook_events/single_pages/cookbook_events.php`创建我们界面的根视图文件。留这个文件为空。在`/packages/cookbook_events/single_pages/cookbook_events`创建一个目录。将两个文件`add.php`和`list.php`添加到这个目录中。我们现在可以留这些文件为空。
- en: The event list block type
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件列表块类型
- en: Before we can install our package, we need to make sure that the block type
    exists as well. This will allow us to automatically install the block type during
    the package's installation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够安装我们的包之前，我们需要确保该块类型也存在。这将允许我们在包安装期间自动安装块类型。
- en: This block type that we are creating will show a list of the events that have
    been entered into the database. It will act as a basic agenda view for the site's
    events.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建的这个块类型将显示已输入数据库的事件列表。它将作为网站事件的简单日程视图。
- en: Create a new directory at `/packages/cookbook_events/blocks`. Now, create another
    directory in there called `cookbook_events`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/packages/cookbook_events/blocks`创建一个新的目录。现在，在这个目录中创建另一个名为`cookbook_events`的目录。
- en: The first file that we will want to add to our block is the controller. Create
    `controller.php` in the block's directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先添加到我们的块中的第一个文件是控制器。在块的目录中创建`controller.php`。
- en: 'Enter the following code in `controller.php`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller.php`中输入以下代码：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that we remembered to include the required `defined or die` statement
    at the top of the file. We'll continue prefixing our class names with `Cookbook`
    to allow our classes to avoid conflicting with existing classes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们记得在文件顶部包含所需的 `defined or die` 语句。我们将继续使用 `Cookbook` 前缀来命名我们的类名，以便我们的类避免与现有类冲突。
- en: We also defined the name of the database table that this block type will use.
    Let's create that table now using the database XML format.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了此块类型将使用的数据库表名称。现在让我们使用数据库 XML 格式创建该表。
- en: The block's database XML file
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块的数据库 XML 文件
- en: 'Create a new file in the block directory named `db.xml`. Enter the following
    code in the XML file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在块目录中创建一个名为 `db.xml` 的新文件。在 XML 文件中输入以下代码：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This XML code will tell concrete5 to create a new table with two fields: a
    unique ID to identify the block, and a field to store how many events we want
    to display.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此 XML 代码将告诉 concrete5 创建一个包含两个字段的新表：一个唯一 ID 用于识别块，以及一个字段用于存储我们想要显示的事件数量。
- en: The block view files
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块视图文件
- en: 'If you recall from earlier chapters, blocks have three views that can be activated:
    add, edit, and view. Create `add.php`, `edit.php`, and `view.php` to represent
    each of these views. In our block, `add.php` and `edit.php` will show the same
    HTML, so we will create a fourth file for these views to share named `form.php`.
    Also, add a `view.css` file that will be used to apply styles to the frontend
    of the block.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得前面的章节，块有三个可激活的视图：添加、编辑和查看。创建 `add.php`、`edit.php` 和 `view.php` 来表示这些视图。在我们的块中，`add.php`
    和 `edit.php` 将显示相同的 HTML，因此我们将为这些视图创建一个第四个文件，命名为 `form.php`。另外，添加一个 `view.css`
    文件，该文件将用于应用块的前端样式。
- en: Leave these files empty for now, as we are ready to install our block!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 目前请留这些文件为空，因为我们准备安装我们的块！
- en: Installing the package
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装包
- en: 'Open the package controller (located at `/packages/cookbook_events/controller.php`)
    in your code editor. Add a new method to the controller class named `install`.
    It should look like the following code snippet:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开包控制器（位于 `/packages/cookbook_events/controller.php`）。向控制器类中添加一个名为
    `install` 的新方法。它应该看起来像以下代码片段：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What's going on here? Well, if you recall, we created three single pages with
    controllers to be used for the dashboard interface. These pages will need to be
    added to the site map, so we hook into the package's installation routine to make
    sure that they get installed when the package is installed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？好吧，如果您还记得，我们创建了三个带有控制器的单个页面用于仪表板界面。这些页面需要添加到网站地图中，因此我们挂钩到包的安装例程，以确保它们在安装包时被安装。
- en: Next, we also install the block type. This will ensure that our block is available
    to use on the frontend of the website.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还安装了块类型。这将确保我们的块可以在网站的前端使用。
- en: When concrete5 installs the package, it will run our package's `db.xml` file,
    creating the database tables defined in there. This will allow our package to
    remain completely portable, and it can be installed in any concrete5 website.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当 concrete5 安装该包时，它将运行我们的包的 `db.xml` 文件，创建其中定义的数据库表。这将使我们的包保持完全可移植，并且可以在任何 concrete5
    网站上安装。
- en: Let's install the package now.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在安装这个包。
- en: Installing the package to the dashboard
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将包安装到仪表板
- en: 'Visit the package installation page on your concrete5 site, located at `/dashboard/extend/install/`.
    You should see the events package awaiting installation, as shown in the following
    screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 访问您的 concrete5 网站上的包安装页面，位于 `/dashboard/extend/install/`。您应该看到等待安装的事件包，如下面的截图所示：
- en: '![Installing the package to the dashboard](img/4548OS_AppB_01.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![将包安装到仪表板](img/4548OS_AppB_01.jpg)'
- en: Click on the **Install** button on the package. If all goes well, the package
    will be installed! We should have some new pages on the dashboard, so visit `/dashboard/cookbook_events`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 点击包上的 **安装** 按钮。如果一切顺利，包将被安装！我们应该在仪表板上有一些新页面，所以访问 `/dashboard/cookbook_events`。
- en: Did you notice what happened? When we visit the `/dashboard/cookbook_events`
    page, it redirects us to `/dashboard/cookbook_events/list/`. This is intentional.
    The way that the dashboard is organized requires add-ons to have a parent page.
    That will allow our **Event List** and **Add Event** single pages to appear in
    the dashboard menu correctly.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您注意到发生了什么吗？当我们访问 `/dashboard/cookbook_events` 页面时，它将我们重定向到 `/dashboard/cookbook_events/list/`。这是故意的。仪表板的组织方式要求插件有一个父页面。这将允许我们的
    **事件列表** 和 **添加事件** 单个页面在仪表板菜单中正确显示。
- en: This list page is still completely empty. Let's add some HTML to it and fill
    it out.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表页面仍然是完全空的。让我们添加一些 HTML 并填充它。
- en: Creating the list single page
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建列表单页
- en: First, we will add some logic to the list page's controller file. Open `/packages/cookbook_events/controllers/dashboard/cookbook_events/list.php`
    in your code editor.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向列表页面的控制器文件中添加一些逻辑。在您的代码编辑器中打开 `/packages/cookbook_events/controllers/dashboard/cookbook_events/list.php`。
- en: 'Add a view method to the controller class:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 向控制器类中添加一个视图方法：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remember that `view()` is one of the automatic callback functions that gets
    executed when the single page is viewed. Here, we are loading the `model` class
    that we created and are using it to find all instances of the events in the database.
    We then send the array of event objects to the view, using `$this->set()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 记住`view()`是单页查看时自动执行的回调函数之一。在这里，我们正在加载我们创建并使用的`model`类，并使用它来查找数据库中所有事件的实例。然后我们使用`$this->set()`将事件对象的数组发送到视图。
- en: We also added a function to delete events from the system, using the `model`
    class and active record.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个函数来从系统中删除事件，使用`model`类和活动记录。
- en: Creating the list view
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建列表视图
- en: Let's open up the view and add some HTML to it. Open `/packages/cookbook_events/single_pages/dashboard/cookbook_events/list.php`
    in your editor.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开视图并添加一些HTML到其中。在您的编辑器中打开 `/packages/cookbook_events/single_pages/dashboard/cookbook_events/list.php`。
- en: 'Add the following HTML code to the view file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到视图文件中：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There's a lot here, but it's actually not too complex. First, we make sure to
    include the `defined or die` statement at the top of the file. Next, we output
    the header of the dashboard pane. This includes the controls to navigate around
    our add-on, as well as add the page to the main dashboard menu.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多东西，但实际上并不复杂。首先，我们确保在文件顶部包含`defined or die`语句。接下来，我们输出仪表板面板的标题。这包括用于在添加组件中导航的控件，以及将页面添加到主仪表板菜单中。
- en: A little further down, we check to see if there's anything in the `$events`
    array. If there are, we can show the list of events in an HTML table. If there
    aren't, we will show a message to the user that there are no events in the system.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有一点更往下，我们检查`$events`数组中是否有内容。如果有，我们可以用HTML表格显示事件列表。如果没有，我们将向用户显示一条消息，说明系统中没有事件。
- en: 'Next, we create an HTML table to hold the events. The table has five columns:
    the event ID, the event date, the title, location, and a column for some actions
    to be performed on the event.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个HTML表格来存放事件。该表格有五个列：事件ID、事件日期、标题、地点以及一个用于对事件执行某些操作的列。
- en: Once we begin looping through the events array, we will output one table row
    for each event in the system. Each column in the event row will output the corresponding
    field on the event. Notice the use of the date getter function to output a nicely
    formatted date.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们开始遍历事件数组，我们将为系统中的每个事件输出一行表格。事件行中的每一列将输出事件对应的字段。注意使用了日期获取函数来输出格式良好的日期。
- en: 'The last column contains the buttons to edit and delete an event. We added
    an additional CSS class of `.delete` to the **Delete** button that will allow
    us to use JavaScript to display a confirmation message. Let''s save this file
    and refresh the page:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个列包含编辑和删除事件的按钮。我们给**删除**按钮添加了一个额外的CSS类`.delete`，这将允许我们使用JavaScript显示一个确认消息。让我们保存这个文件并刷新页面：
- en: '![Creating the list view](img/4548OS_AppB_02.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![创建列表视图](img/4548OS_AppB_02.jpg)'
- en: Looking good, except we don't have any events in our system yet. Let's create
    the form to add events.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错，但我们系统中还没有任何事件。让我们创建一个表单来添加事件。
- en: Creating the add form single page
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建添加表单单页
- en: 'Open `/packages/cookbook_events/controllers/dashboard/cookbook_events/add.php`
    in your code editor. Let''s add a few functions to this class:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `/packages/cookbook_events/controllers/dashboard/cookbook_events/add.php`。让我们向这个类中添加几个函数：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First, we added a function to provide editing capabilities to this form. Essentially,
    if an ID is provided in the URL, we will use the event model to load the corresponding
    event and send it to the view as an array. We use an array because if the array
    is empty, the view will not produce errors as it would with an object.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加了一个函数来为这个表单提供编辑功能。本质上，如果URL中提供了ID，我们将使用事件模型加载相应的事件并将其作为数组发送到视图。我们使用数组是因为如果数组为空，视图不会像对象那样产生错误。
- en: Next, we define the function to actually save the new event. We use the Validation
    helper to verify that the required fields have been filled out. After that, we
    begin populating the event object to be saved to the database. One important thing
    to notice here is that we check for the presence of an event ID in the `POST`
    data. This is to allow us to edit an existing event, rather than create a duplicate
    one. We also use this area to set the metadata for the event, such as the ID of
    the user that added it, and the timestamp of when it was created.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个实际保存新事件的函数。我们使用验证助手来验证所需字段是否已填写。之后，我们开始填充要保存到数据库的事件对象。这里需要注意的一个重要事项是我们检查`POST`数据中是否存在事件ID。这是为了允许我们编辑现有事件，而不是创建一个重复的事件。我们还使用这个区域来设置事件的元数据，例如添加该事件的用户ID和创建时的时间戳。
- en: Finally, we save the event object to the database and redirect the user back
    to the event list, displaying a success message.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将事件对象保存到数据库中，并将用户重定向回事件列表，显示成功消息。
- en: The form view file
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单视图文件
- en: 'Of course, we still need to write the other half of this single page, the view.
    Let''s open `/packages/cookbook_events/single_pages/dashboard/cookbook_events/add.php`
    and add the following HTML and PHP code to it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们仍然需要编写这个单页面的另一半，即视图。让我们打开`/packages/cookbook_events/single_pages/dashboard/cookbook_events/add.php`，并向其中添加以下HTML和PHP代码：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Whoa, that's a lot of code! Don't worry, it's not as complex as it looks. At
    the top of the file, we of course add our `defined or die` statement, and then
    load two helpers, the Form helper and the Date field helper.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，这代码好多！别担心，它并没有看起来那么复杂。在文件顶部，我们当然添加了我们的`defined or die`语句，然后加载两个助手，即表单助手和日期字段助手。
- en: As our event's description field can contain HTML formatting, we will need to
    use a WYSIWYG editor. That editor needs some special JavaScript on the page before
    it can load, so we output that right away using the `editor_init` and `editor_config`
    elements.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的事件描述字段可以包含HTML格式，我们需要使用一个所见即所得（WYSIWYG）编辑器。这个编辑器在加载之前需要在页面上添加一些特殊的JavaScript，所以我们立即使用`editor_init`和`editor_config`元素输出它。
- en: Next, we begin our output by displaying any errors that occurred in the save
    procedure (for example, if the title field was left empty). After that, we use
    concrete5's Dashboard helper to output the header of the page, including the native
    page controls.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们首先显示在保存过程中发生的任何错误（例如，如果标题字段被留空）。之后，我们使用concrete5的仪表板助手输出页面的标题，包括原生页面控件。
- en: After that, we will define the form, setting the action of the form to use the
    `save` function in this page's controller and setting the HTTP method to `POST`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将定义表单，设置表单的动作使用本页面控制器中的`save`函数，并设置HTTP方法为`POST`。
- en: Inside the form, we use a table to give our form a simple layout. We output
    fields for title, location, date, and description. At the bottom of the page,
    we display some buttons to save the data or to cancel and return to the events
    listing. Let's take a look at this form in our browser now!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单内部，我们使用表格来为我们的表单提供一个简单的布局。我们输出标题、位置、日期和描述的字段。在页面底部，我们显示一些按钮来保存数据或取消并返回到事件列表。现在让我们在我们的浏览器中查看这个表单！
- en: '![The form view file](img/4548OS_AppB_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![表单视图文件](img/4548OS_AppB_03.jpg)'
- en: That looks great! Let's add a bunch of events to the site now, using this form.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很棒！现在让我们使用这个表单添加一些事件到网站上。
- en: Adding events to the database
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将事件添加到数据库
- en: 'Fill out the **Add Event** form that comes up with a couple of events to add
    to the database:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 填写出现的**添加事件**表单，添加一些要添加到数据库的事件：
- en: '![Adding events to the database](img/4548OS_AppB_04.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![将事件添加到数据库](img/4548OS_AppB_04.jpg)'
- en: 'Once you have a few events entered, your list view should look something like
    the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你输入了几个事件，你的列表视图应该看起来像以下这样：
- en: '![Adding events to the database](img/4548OS_AppB_05.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![将事件添加到数据库](img/4548OS_AppB_05.jpg)'
- en: Looking great! Let's click on the **Delete** button on one of these events.
    It works, but users don't have any chance to cancel that action if they change
    their mind. We should use JavaScript to ask users if they are sure they want to
    delete the event.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很棒！让我们点击这些事件中的一个的**删除**按钮。它有效，但如果用户改变主意，他们没有任何机会取消这个操作。我们应该使用JavaScript询问用户他们是否确定要删除该事件。
- en: Adding a delete confirmation
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加删除确认
- en: 'Let''s add a new JavaScript file to `/packages/cookbook_events/js/list.js`.
    Add some JavaScript (using the jQuery library) to listen to the clicks on the
    **Delete** button:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`/packages/cookbook_events/js/list.js`中添加一个新的JavaScript文件。添加一些JavaScript（使用jQuery库）以监听**删除**按钮的点击：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, we need to make sure this script is included on our list page. Open up
    the controller for the list page located at `/packages/cookbook_events/controllers/dashboard/cookbook_events/list.php`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要确保这个脚本包含在我们的列表页面上。打开位于`/packages/cookbook_events/controllers/dashboard/cookbook_events/list.php`的列表页面的控制器。
- en: 'Add a new function to include the JavaScript file on the page:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 向页面添加一个新函数以包含JavaScript文件：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This function will use the HTML helper to automatically add the `<script>` tag
    to the page's `<head>` area.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将使用HTML助手自动将`<script>`标签添加到页面的`<head>`区域。
- en: 'Now, if you try to delete an event, you should see a confirmation dialog, as
    shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你尝试删除一个事件，你应该会看到一个确认对话框，如下面的截图所示：
- en: '![Adding a delete confirmation](img/4548OS_AppB_06.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![添加删除确认](img/4548OS_AppB_06.jpg)'
- en: Perfect! We can consider the backend of the add-on to be complete! All that
    is left to do is displaying events on the frontend.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！我们可以认为插件的后端已经完成！剩下要做的就是在前端显示事件。
- en: Creating the custom block type
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义块类型
- en: If you recall, we created some boilerplate files for our block type, but it
    doesn't actually do anything. We will want to create a block that shows a list
    of the events entered into the database.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得，我们为我们的块类型创建了一些样板文件，但实际上并没有做任何事情。我们希望创建一个显示数据库中输入的事件列表的块。
- en: 'First, let''s add the HTML form to `form.php` that will be displayed whenever
    site editors add or edit the block on the site:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们向`form.php`添加HTML表单，该表单将在网站编辑器添加或编辑块时显示：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Great! Let''s include this file in both `add.php` and `edit.php`. Add the following
    to each of those files:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们将此文件包含在`add.php`和`edit.php`中。向每个文件添加以下内容：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alright! All we have to do now is create the frontend view of the block. Open
    `view.php` in your code editor and enter the following HTML and PHP code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧！我们现在要做的就是创建块的客户端视图。在你的代码编辑器中打开`view.php`，并输入以下HTML和PHP代码：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: That looks great! Here we are essentially looping through the `$events` array
    and displaying a row for each event. We again make use of the `getDate()` function
    on the event model to output a clean and friendly date.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很棒！在这里，我们实际上是在遍历`$events`数组并为每个事件显示一行。我们再次利用事件模型上的`getDate()`函数来输出干净友好的日期。
- en: 'Finally, let''s add some simple CSS styles to `view.css`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们向`view.css`添加一些简单的CSS样式：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Nice! Now we are ready to see it in action!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！现在我们准备好看到它的实际效果了！
- en: Adding the block to a page
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将块添加到页面
- en: 'Create a new page on the site to hold the events:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站上创建一个新页面来保存事件：
- en: '![Adding the block to a page](img/4548OS_AppB_07.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![将块添加到页面](img/4548OS_AppB_07.jpg)'
- en: 'Add a new block to this page. Scroll down to the bottom of the blocks list
    to see the block that we have created:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面上添加一个新块。滚动到块列表的底部，查看我们创建的块：
- en: '![Adding the block to a page](img/4548OS_AppB_08.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![将块添加到页面](img/4548OS_AppB_08.jpg)'
- en: Fill out the form to add the block to the page. Set a limit for the amount of
    events to be displayed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 填写表格以将块添加到页面。设置要显示的事件数量限制。
- en: '![Adding the block to a page](img/4548OS_AppB_09.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![将块添加到页面](img/4548OS_AppB_09.jpg)'
- en: Now publish the changes on the page. You should see a handsome list of events!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将页面上的更改发布。你应该会看到一个令人印象深刻的事件列表！
- en: '![Adding the block to a page](img/4548OS_AppB_10.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![将块添加到页面](img/4548OS_AppB_10.jpg)'
- en: Wrapping up
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Wow, we accomplished a lot! We started with absolutely nothing and built a fully
    functioning events calendar add-on. This add-on could be expanded to show alternate
    templates for the events, or to include advanced functionality such as hiding
    events that have already occurred, or giving each event its own page in the site
    map.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，我们取得了很大的成就！我们从一无所有开始，构建了一个完全功能的事件日历插件。这个插件可以扩展以显示事件的不同模板，或者包括高级功能，例如隐藏已发生的事件，或者在网站地图中为每个事件提供自己的页面。
- en: Hopefully this exercise has helped you get ideas on how to create packages for
    any need or situation.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这次练习能帮助你获得如何为任何需求或情况创建包的想法。
