- en: Chapter 6. Routing Magic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。路由魔法
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Using `named` and `GET` parameters
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `named` 和 `GET` 参数
- en: Using routes with prefixes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带前缀的路由
- en: Working with route elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与路由元素一起工作
- en: Adding catch-all routes for profile pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为个人页面添加通配符路由
- en: Adding validation for catch-all routes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为通配符路由添加验证
- en: Creating custom `Route` classes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义 `Route` 类
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Almost every web-based application will eventually have to develop a successful
    strategy to obtain better search engine position through a technique known as
    **search engine optimization**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个基于 Web 的应用程序最终都必须开发一种成功的策略，通过一种称为 **搜索引擎优化** 的技术来获得更好的搜索引擎排名。
- en: This chapter starts by introducing some basic concepts of routing through the
    use of route parameters, and continues to build optimized routes to leverage our
    search engine placement.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先通过使用路由参数介绍一些基本的路由概念，然后继续构建优化路由以利用我们的搜索引擎排名。
- en: The final section in this chapter shows us how to create highly optimized URLs
    for our user profiles, and how to build custom `Route` classes to obtain even
    more flexibility.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分展示了如何为我们的用户资料创建高度优化的 URL，以及如何构建自定义 `Route` 类以获得更多灵活性。
- en: Using named and GET parameters
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命名和 GET 参数
- en: CakePHP already offers a very useful set of default routes that allow any set
    of URL elements to be sent to the controller action as arguments. For example,
    a URL such as `http://localhost/tags/view/cakephp` is interpreted as a call to
    the `TagsController::view()` method, sending `cakephp` as its first argument.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 已经提供了一套非常有用的默认路由，允许将任何一组 URL 元素作为参数发送到控制器操作。例如，一个如 `http://localhost/tags/view/cakephp`
    的 URL 被解释为调用 `TagsController::view()` 方法，并将 `cakephp` 作为其第一个参数。
- en: However, there are times when we need more flexibility when creating URLs with
    arguments, such as the ability to omit certain arguments or add others that may
    not have been specified in the method signature. `Named` and `GET` parameters
    allow us to have such flexibility, without losing the advantage of letting CakePHP
    deal with its automatic URL parsing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时在创建带有参数的 URL 时我们需要更多的灵活性，例如省略某些参数或添加在方法签名中未指定的其他参数。`Named` 和 `GET` 参数允许我们拥有这种灵活性，同时不失让
    CakePHP 处理其自动 URL 解析的优势。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `categories`, using the following SQL statement:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一个用于工作的示例表。使用以下 SQL 语句创建一个名为 `categories` 的表：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a table named `articles`, using the following SQL statement:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 SQL 语句创建一个名为 `articles` 的表：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add some sample data, using the following SQL statements:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 SQL 语句添加一些示例数据：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We proceed now to create the required model. Create the model, `Article`, in
    a file named `article.php` and place it in your `app/models` folder, with the
    following contents:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在继续创建所需模型。在 `app/models` 文件夹中创建名为 `Article` 的模型，文件名为 `article.php`，内容如下：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create its appropriate controller, `ArticlesController`, in a file named `articles_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为 `articles_controller.php` 的文件中创建适当的控制器 `ArticlesController`，并将其放置在 `app/controllers`
    文件夹中，内容如下：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a folder named `articles` in your `app/views` folder, then create the
    view in a file named `view.ctp` and place it in your `app/views/articles` folder,
    with the following contents:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `app/views` 文件夹中创建一个名为 `articles` 的文件夹，然后在名为 `view.ctp` 的文件中创建视图，并将其放置在
    `app/views/articles` 文件夹中，内容如下：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We start by adding the possibility to change the number of related articles
    through a `GET` parameter. Edit your `app/controllers/articles_controller.php`
    file and make the following changes to the `view()` method:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先通过一个 `GET` 参数添加更改相关文章数量的可能性。编辑你的 `app/controllers/articles_controller.php`
    文件，并对 `view()` 方法进行以下更改：
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we now browse to `http://localhost/articles/view/1?related=2` we should see
    the article content, along with up to two related articles, as shown in the following
    screenshot:![How to do it...](img/1926_06_01.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在浏览到 `http://localhost/articles/view/1?related=2`，我们应该看到文章内容，以及最多两篇相关文章，如下面的截图所示：![如何操作...](img/1926_06_01.jpg)
- en: 'We will now use named parameters to pass a search engine-friendly version of
    the article title, even though it is not needed to show the article or its related
    content. Edit your `ArticlesController` class and add the following at the end
    of the `view()` method:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将使用命名参数来传递一个对搜索引擎友好的文章标题版本，即使显示文章或其相关内容并不需要。编辑你的`ArticlesController`类，并在`view()`方法的末尾添加以下内容：
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now edit the `app/views/articles/view.ctp` file and make the following changes:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编辑`app/views/articles/view.ctp`文件，并做出以下更改：
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we hover over the links to the related articles, we will notice they include
    two new parameters: `category` and `title`. An example generated URL could be
    `http://localhost/articles/view/4/category:frameworks/title:creating_your_first_helper`.
    Clicking on this link would take us to the article page, which also shows the
    specified parameters.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们悬停在相关文章的链接上，我们会注意到它们包括两个新的参数：`category`和`title`。一个生成的URL示例可能是`http://localhost/articles/view/4/category:frameworks/title:creating_your_first_helper`。点击此链接将带我们到文章页面，该页面也显示了指定的参数。
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Both `GET` and `named` parameters work in a similar fashion, by being automatically
    available in our application code as an array. `GET` parameters are available
    in `$this->params['url']`, while named parameters are available in `$this->params['named']`.
    Checking the existence of a parameter is as simple as verifying that one of these
    given arrays contains a value whose key is the wanted parameter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET`和`named`参数以类似的方式工作，它们作为数组自动在我们的应用程序代码中可用。`GET`参数在`$this->params[''url'']`中可用，而命名参数在`$this->params[''named'']`中可用。检查参数的存在就像验证这些给定数组中是否包含一个键是所需参数的值一样简单。'
- en: Creating links that specify either `named` or `GET` parameters (or both) is
    done by also specifying an indexed array of parameters (where the key is the parameter
    name, and the value its value.) For `GET` parameters, this array is set in the
    special `?` route index key, while for named parameters each parameter is specified
    as part of the actual array based URL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定一个参数（键是参数名，值是其值）的索引数组来创建指定`named`或`GET`参数（或两者）的链接（或两者）。对于`GET`参数，此数组设置在特殊的`?`路由索引键中，而对于命名参数，每个参数都作为实际基于数组的URL的一部分指定。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We learnt how to specify named parameters just by setting a `key => value` pair
    in the array-based URL. However, we may want to also specify which of the named
    parameters should actually be parsed, and to make sure they are only parsed when
    the value matches a certain regular expression.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何通过在基于数组的URL中设置`key => value`对来指定命名参数。然而，我们可能还想指定哪些命名参数应该被解析，并确保它们仅在值匹配某个正则表达式时才被解析。
- en: 'As an example, we can define the `title` named parameter for all actions in
    the `articles` controller, so it is parsed only when it follows a certain regular
    expression, where title can only contain lower case letters, numbers, or the underscore
    sign. To do so, we add the following sentence to our `app/config/routes.php` file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以为`articles`控制器中的所有操作定义`title`命名参数，使其仅在遵循某个正则表达式时解析，其中标题只能包含小写字母、数字或下划线符号。为此，我们在`app/config/routes.php`文件中添加以下句子：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The first argument is an array, indexed by parameter name, and whose value
    contains another array that may include any of the following settings, all of
    which are optional:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个数组，按参数名索引，其值包含另一个可能包括以下设置的数组，所有这些设置都是可选的：
- en: '| Setting | Purpose |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 目的 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `action` | If specified, the named parameter will be parsed only for the
    given action. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `action` | 如果指定，只有对于给定的操作，才会解析命名参数。 |'
- en: '| `controller` | If specified, the named parameter will be parsed only for
    the given controller. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `controller` | 如果指定，只有对于给定的控制器，才会解析命名参数。 |'
- en: '| `match` | A regular expression that will be used to see if the provided value
    matches the named parameter. If specified, the named parameter will be parsed
    only when the value matches the expression. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `match` | 一个正则表达式，用于检查提供的值是否与命名参数匹配。如果指定，只有当值匹配表达式时，才会解析命名参数。 |'
- en: 'The second argument to `Router::connectNamed()` is an optional array of settings,
    which may include any of the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router::connectNamed()`的第二个参数是一个可选的设置数组，可能包括以下任何一项：'
- en: '| Setting | Purpose |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 目的 |'
- en: '| --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `default` | If set to `true`, it will also load the named parameters needed
    for pagination to work. If you call `Router::connectNamed()` several times, this
    is only needed once, unless you set the `reset` option to `true`. Defaults to
    `false`. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `default` | 如果设置为 `true`，它还将加载使分页工作所需的命名参数。如果您多次调用 `Router::connectNamed()`，这只需要一次，除非您将
    `reset` 选项设置为 `true`。默认为 `false`。|'
- en: '| `greedy` | If set to `false`, it will only parse the named parameters that
    are explicitly defined through a `Router::connectNamed()` call. Defaults to `true`.
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `greedy` | 如果设置为 `false`，它将只解析通过 `Router::connectNamed()` 调用显式定义的命名参数。默认为
    `true`。|'
- en: '| `reset` | If set to `true`, it will wipe out any named parameters defined
    prior to this call. Defaults to `false`. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `reset` | 如果设置为 `true`，它将清除在此调用之前定义的任何命名参数。默认为 `false`。|'
- en: 'To further understand the `greedy` option, we could still allow the URL to
    include the `category` and `title` parameters, but may want to only parse the
    `title` value. To do this, we would set `greedy` to `false` when defining the
    named parameter. That way, `$this->params[''named'']` would only contain the value
    for `title`, even when `category` is specified in the requested URL. We also want
    to do this only for the `view` action of the `articles` controller:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步理解 `greedy` 选项，我们仍然可以允许 URL 包含 `category` 和 `title` 参数，但可能只想解析 `title`
    的值。为此，我们可以在定义命名参数时将 `greedy` 设置为 `false`。这样，`$this->params['named']` 将只包含 `title`
    的值，即使请求的 URL 中指定了 `category`。我们还想只为 `articles` 控制器的 `view` 动作执行此操作：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice how we had to specify the regular expression for the `title` named parameter
    again, even though we specified it before. This is because we are configuring
    a named parameter whose name already exists, so our definition would override
    the previous one.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们为什么必须再次指定 `title` 命名参数的正则表达式，尽管我们之前已经指定了它。这是因为我们正在配置一个已存在的名称的命名参数，因此我们的定义将覆盖之前的定义。
- en: See also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Working with route elements*'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与路由元素一起工作*'
- en: Using routes with prefixes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用带有前缀的路由
- en: Often enough we find ourselves needing to separate different areas of our application,
    not only in terms of code and user interface, but also in terms of functionality.
    With CakePHP's flexible routing system, we can achieve this and more by using
    prefixes, which provide us with a way to reimplement certain controller actions
    in different ways, and reach a particular implementation depending on the prefix
    being used, if any.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 经常情况下，我们发现我们需要将应用程序的不同区域分开，不仅是在代码和用户界面方面，而且在功能方面。通过使用 CakePHP 的灵活路由系统，我们可以通过使用前缀来实现这一点，并更多，因为前缀为我们提供了一种以不同方式重新实现某些控制器操作的方法，并且根据使用的任何前缀，达到特定的实现。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `profiles`, using the following SQL statement:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个配方，我们需要一个用于工作的示例表。使用以下 SQL 语句创建一个名为 `profiles` 的表：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add some sample data, using the following SQL statements:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 SQL 语句添加一些示例数据：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, create the required `ProfilesController` class in a file named `profiles_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在名为 `profiles_controller.php` 的文件中创建所需的 `ProfilesController` 类，并将其放置在您的
    `app/controllers` 文件夹中，内容如下：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a folder named `profiles` in your `app/views` folder, then create the
    view in a file named `index.ctp` and place it in your `app/views/profiles` folder,
    with the following contents:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `app/views` 文件夹中创建一个名为 `profiles` 的文件夹，然后创建一个名为 `index.ctp` 的视图，并将其放置在 `app/views/profiles`
    文件夹中，内容如下：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the view for the `edit` action in a file named `edit.ctp` and place
    it in your `app/views/profiles` folder, with the following contents:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为 `edit.ctp` 的文件中创建 `edit` 动作的视图，并将其放置在您的 `app/views/profiles` 文件夹中，内容如下：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We start by adding two prefixes to CakePHP: `admin`, and `manager`. Edit your
    `app/config/core.php` file and look for the line that defines the `Routing.prefixes`
    setting. If it is commented out, uncomment it. Then change it to:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先向 CakePHP 添加两个前缀：`admin` 和 `manager`。编辑您的 `app/config/core.php` 文件，查找定义
    `Routing.prefixes` 设置的行。如果该行被注释，取消注释它。然后将其更改为：
- en: '[PRE16]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let us modify the `ProfilesController` class to add the overridden `index`
    and `edit` actions for both prefixes. We will also add a new action so that when
    accessed with the `admin` prefix, we can add new profile records. Edit your `app/controllers/profiles_controller.php`
    file and add the following methods at the beginning of the `ProfilesController`
    class:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们修改`ProfilesController`类，为两个前缀添加重写的`index`和`edit`操作。我们还将添加一个新的操作，以便在通过`admin`前缀访问时，我们可以添加新的配置文件记录。编辑你的`app/controllers/profiles_controller.php`文件，并在`ProfilesController`类的开头添加以下方法：
- en: '[PRE17]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We now need to change the `edit` action so that it can handle the creation
    of new records. While still editing your `app/controllers/profiles_controller.php`
    file, make the following changes to the `edit()` method of the `ProfilesController`
    class:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要更改`edit`操作，使其能够处理新记录的创建。在继续编辑你的`app/controllers/profiles_controller.php`文件时，对`ProfilesController`类的`edit()`方法做出以下更改：
- en: '[PRE18]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next step is changing the views. Edit your `app/views/profiles/index.ctp`
    view file and add the following at the end:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是更改视图。编辑你的`app/views/profiles/index.ctp`视图文件，并在末尾添加以下内容：
- en: '[PRE19]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, edit your `app/views/profiles/edit.ctp` view file and make the following
    changes:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，编辑你的`app/views/profiles/edit.ctp`视图文件，并做出以下更改：
- en: '[PRE20]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Any set of values specified in the configuration setting, `Routing.prefixes`,
    act as routing prefixes. In this example, we have added two prefixes: `admin`
    and `manager`. Whenever we use a prefix in an URL (where the prefix precedes a
    normal CakePHP URL), CakePHP will set the current prefix in `$this->params[''prefix'']`
    and execute an action whose name is the same as if the prefix were not used, but
    preceded with the prefix and an underscore sign, in the same controller as if
    the prefix were not used.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置设置`Routing.prefixes`中指定的任何值都作为路由前缀。在这个例子中，我们添加了两个前缀：`admin`和`manager`。每次我们在URL中使用前缀（前缀在正常CakePHP
    URL之前）时，CakePHP都会将当前前缀设置在`$this->params['prefix']`中，并执行一个操作，其名称与如果不使用前缀，但在同一控制器中使用前缀和下划线符号相同。
- en: When we access `http://localhost/manager/profiles/index` in our example, CakePHP
    will process this request by executing the action `manager_index` located in the
    `ProfilesController`, and setting `$this->params['prefix']` to `manager`. Knowing
    this, we can add controller and view variables to tell actions and views if we
    are accessing the application as a manager (when the `manager` prefix is set)
    or as an administrator (when the `admin` prefix is set.) We implement this through
    a more general approach by creating an appropriate controller and view variable
    for each prefix (isManager for the `manager` prefix, and `isAdmin` for the `admin`
    prefix) in the `beforeFilter` callback.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，当我们访问`http://localhost/manager/profiles/index`时，CakePHP将通过执行位于`ProfilesController`中的`manager_index`操作来处理此请求，并将`$this->params['prefix']`设置为`manager`。了解这一点后，我们可以添加控制器和视图变量来告诉操作和视图，我们是以管理员的身份（当`manager`前缀被设置时）还是以管理员的身份（当`admin`前缀被设置时）访问应用程序。我们通过在`beforeFilter`回调中为每个前缀（`manager`前缀的`isManager`，`admin`前缀的`isAdmin`）创建适当的控制器和视图变量来实现这一点。
- en: See also
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Using prefixes for role based access controller* in [Chapter 1](ch01.html
    "Chapter 1. Authentication"), *Authentication*'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。认证")的*基于角色的访问控制器前缀使用*中，*认证*
- en: Working with route elements
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由元素进行操作
- en: Even when `GET` and `named` parameters can be useful in most situations, we
    may need to further optimize our application URLs for better search engine rankings.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`GET`和`named`参数在大多数情况下可能很有用，我们可能还需要进一步优化我们的应用程序URL以获得更好的搜索引擎排名。
- en: Fortunately, CakePHP provides us with route elements, a solution that maintains
    the flexibility of `GET` and named parameters, and improves the way intra-application
    URLs are built.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，CakePHP为我们提供了路由元素，这是一个保持`GET`和命名参数灵活性的解决方案，并改进了应用程序内URL的构建方式。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We need some sample data to work with. Follow the *Getting ready* section of
    the recipe *Using GET and named parameters*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些样本数据来工作。按照食谱*使用GET和命名参数*中的*准备就绪*部分进行操作。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We want our article URLs to be further optimized for search engines, so we
    start by creating a new route. Edit your `app/config/routes.php` file and add
    the following route at the end of the file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望我们的文章URL能够进一步优化以适应搜索引擎，所以我们首先创建一个新的路由。编辑你的`app/config/routes.php`文件，并在文件末尾添加以下路由：
- en: '[PRE21]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As our route defines three elements (`id`, `category`, and `title`), we need
    to modify the view to specify the values for those elements. Edit your `app/views/articles/index.ctp`
    view file and make the following changes:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的路由定义了三个元素（`id`、`category` 和 `title`），我们需要修改视图来指定这些元素的价值。编辑您的 `app/views/articles/index.ctp`
    视图文件并做出以下更改：
- en: '[PRE22]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: CakePHP uses the routes defined in the `routes.php` configuration file to generate
    URLs, and parse requested URLs. When we want different URLs than those provided
    by the framework, we add new routes to this configuration file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 使用 `routes.php` 配置文件中定义的路由来生成 URL，并解析请求的 URL。当我们想要与框架提供的不同 URL 时，我们向此配置文件添加新的路由。
- en: 'Routes are created by specifying up to three arguments when calling the `Router::connect()`
    method:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `Router::connect()` 方法时，通过指定最多三个参数来创建路由：
- en: The first argument is the route URL, a string representation of our route. It
    can include a wildcard and route elements.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是路由 URL，是我们路由的字符串表示。它可以包含通配符和路由元素。
- en: The second argument is utilized to specify the default route values, an array
    which may include `plugin, controller, action`, and action arguments. You may
    omit parts of these default values, for example, to define a route for all actions
    in a specific controller.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数用于指定默认路由值，这是一个可能包括 `plugin, controller, action` 和操作参数的数组。您可以省略这些默认值的一部分，例如，为特定控制器中的所有操作定义路由。
- en: The third argument defines the route elements, an optional array that defines
    the route elements a route utilizes. It may also include a list of those elements
    that are to be sent as arguments when calling the controller action
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数定义了路由元素，这是一个可选数组，它定义了路由所使用的路由元素。它还可以包括在调用控制器操作时要发送作为参数的元素列表。
- en: 'Using `Router::connect()`, we defined a route that includes all these arguments:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Router::connect()`，我们定义了一个包含所有这些参数的路由：
- en: We set `/article/:category/:id-:title` as our route URL. Notice how we are referring
    to route elements by prefixing their names with a colon.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将 `/article/:category/:id-:title` 设置为我们的路由 URL。注意我们是如何通过在名称前加冒号来引用路由元素的。
- en: In the second argument, we specify that this route will match any link to the
    `view` action of the `articles` controller. Similarly, if a URL that matches the
    route URL specified in the first argument is requested, this is the action that
    will be executed.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个参数中，我们指定这个路由将匹配指向 `articles` 控制器 `view` 动作的任何链接。同样，如果请求的 URL 与第一个参数中指定的路由
    URL 匹配，这将是要执行的操作。
- en: 'We specify three route elements in the third argument, with their respective
    regular expression matching expressions: `id` (a number), `category` (any string
    that does not include a dash), and `title` (also a string that does not include
    a dash.) We use the special `pass` option to specify which route elements are
    passed as regular action arguments.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第三个参数中，我们指定了三个路由元素，以及它们各自的正则表达式匹配表达式：`id`（一个数字）、`category`（不包含破折号的任何字符串）和 `title`（也不包含破折号的字符串）。我们使用特殊的
    `pass` 选项来指定哪些路由元素作为常规操作参数传递。
- en: 'When CakePHP finds a URL that includes the same default values as those specified
    in the first argument of our route, and also includes the route elements specified
    in its third argument, it will convert the route to our provided string representation.
    For example, if we create a link using the following statement:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当 CakePHP 发现一个 URL 包含与我们的路由第一个参数指定的默认值相同的值，并且也包含其第三个参数指定的路由元素时，它将把路由转换为我们的提供的字符串表示形式。例如，如果我们使用以下语句创建一个链接：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We would be matching all our route requirements, and the resulting generated
    URL would look like `http://localhost/article/my_category/1-my_title`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将匹配所有我们的路由要求，生成的结果 URL 将看起来像 `http://localhost/article/my_category/1-my_title`。
- en: There's more...
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多...
- en: When our controller action is executed as a result of a route that uses route
    elements, we can obtain the values for all the specified elements using the `$this->params`
    array available to every controller.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的控制器操作由使用路由元素的路线触发时，我们可以使用每个控制器都有的 `$this->params` 数组来获取所有指定元素的价值。
- en: 'In our example, we set the `id` route element to be passed as a regular action
    argument, but we did not do so for the remaining elements (category and `title.)`
    To obtain the given value for `category`, we would do:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将 `id` 路由元素设置为作为常规操作参数传递，但我们没有对剩余的元素（类别和 `title`）这样做。为了获取 `category`
    的给定值，我们会这样做：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Using reverse routing
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用反向路由
- en: Even though CakePHP allows us to specify a string-based URL when creating links,
    it is recommended that we always use arrays to define link URLs unless the URL
    is an absolute reference to a foreign site.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管CakePHP允许我们在创建链接时指定基于字符串的URL，但建议我们除非URL是外站绝对引用，否则始终使用数组来定义链接URL。
- en: URLs that are defined using an array allow for the reverse routing system to
    work, which is the part of the framework that allows us to use custom routes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组定义的URL允许反向路由系统工作，这是框架的一部分，允许我们使用自定义路由。
- en: See also
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Adding catch-all routes for profile pages*'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为个人资料页面添加通配符路由*'
- en: '*Using GET and named parameters*'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用GET和命名参数*'
- en: Adding catch-all routes for profile pages
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为个人资料页面添加通配符路由
- en: Several websites include direct URLs to access user profiles, and those addresses
    live alongside a broad set of other URLs. For example, Twitter allows [http://twitter.com/mgiglesias](http://twitter.com/mgiglesias)
    to list tweets created by the user `mgiglesias`, while an address like [http://twitter.com/about](http://twitter.com/about)
    would take us to their service description.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 几个网站包括直接URL来访问用户个人资料，并且这些地址与其他大量URL并存。例如，Twitter允许[http://twitter.com/mgiglesias](http://twitter.com/mgiglesias)列出用户`mgiglesias`创建的推文，而像[http://twitter.com/about](http://twitter.com/about)这样的地址将带我们到他们的服务描述。
- en: This recipe shows us how to create direct URLs for our profile records, allowing
    the generated URLs to coexist with other application routes we may have.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱向我们展示了如何为我们的个人资料记录创建直接URL，允许生成的URL与其他我们可能拥有的应用程序路由共存。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `profiles`, using the following SQL statement:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一个示例表来操作。使用以下SQL语句创建一个名为`profiles`的表：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add some sample data, using the following SQL statements:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下SQL语句添加一些示例数据：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Proceed now to create the required model. Create a file named `profile.php`
    and place it in your `app/models` folder, with the following contents:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在继续创建所需的模型。创建一个名为`profile.php`的文件，并将其放置在`app/models`文件夹中，内容如下：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create the `ProfilesController` class in a file named `profiles_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`profiles_controller.php`的文件中创建`ProfilesController`类，并将其放置在`app/controllers`文件夹中，内容如下：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a folder named `profiles` in your `app/views` folder. Create the view
    for the `index` action in a file named `index.ctp` and place it in your `app/views/profiles`
    folder, with the following contents:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`app/views`文件夹中创建一个名为`profiles`的文件夹。在`app/views/profiles`文件夹中创建`index`操作的视图，文件名为`index.ctp`，内容如下：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create the view for the `view` action in a file named `view.ctp` and place
    it in your `app/views/profiles` folder, with the following contents:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app/views/profiles`文件夹中创建`view`操作的视图，文件名为`view.ctp`，内容如下：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit your `app/config/routes.php` file and add the following routes at the
    end of the file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的`app/config/routes.php`文件，并在文件末尾添加以下路由：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you now browse to `http://localhost/profiles/index`, you will see that the
    generated link for the `jane` user account is `http://localhost/jane`. Clicking
    on it should show us Jane''s profile page, as shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在浏览到`http://localhost/profiles/index`，你会看到为`jane`用户账户生成的链接是`http://localhost/jane`。点击它应该会显示Jane的个人资料页面，如下面的截图所示：
- en: '![How to do it...](img/1926_06_02.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_06_02.jpg)'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created two routes. The first one uses a route element called `userName`
    to set the URL as consisting solely on its value. Using a regular expression,
    our route guarantees that it is only used when the value for `userName` consists
    of letters, numbers, dots, dashes, or underscore signs. Using the `controller`
    and `action` settings, we link the route to the `view` action of the `profiles`
    controller. Finally, the `userName` element is set to be passed as a regular argument
    to the `ProfilesController::view()` method.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个路由。第一个路由使用一个名为`userName`的路由元素来设置URL仅由其值组成。使用正则表达式，我们的路由确保只有在`userName`的值为字母、数字、点、破折号或下划线时才使用。使用`controller`和`action`设置，我们将路由链接到`profiles`控制器的`view`操作。最后，将`userName`元素设置为作为常规参数传递给`ProfilesController::view()`方法。
- en: 'With this route defined, if we created a link with the following statement:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 定义此路由后，如果我们使用以下语句创建链接：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The generated URL would be `http://localhost/john`. Clicking on this link would
    execute the same action, using the same arguments, as if we used the URL `http://localhost/profiles/view/john`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的URL将是 `http://localhost/john`。点击此链接将执行与使用URL `http://localhost/profiles/view/john`
    相同的动作，使用相同的参数。
- en: However, there is a noticeable problem. CakePHP provides a short URL for the
    index action for all our controllers. Because of it, we can access the `ProfilesController::index()`
    method using the URL `http://localhost/profiles`, the equivalent of the URL `http://localhost/profiles/index`.
    This default route would conflict with our custom route, as the word `profiles`
    matches our regular expression.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，存在一个明显的问题。CakePHP 为所有我们的控制器提供了索引动作的短URL。因此，我们可以使用URL `http://localhost/profiles`
    访问 `ProfilesController::index()` 方法，这与URL `http://localhost/profiles/index` 相当。此默认路由将与我们的自定义路由冲突，因为单词
    `profiles` 与我们的正则表达式匹配。
- en: Fortunately, this functionality would not conflict with our route when generating
    a URL out of an array-based route. Because we linked our route to the `view` action
    of the `profiles` controller, CakePHP will only use our custom route when linking
    to this action and specifying the `userName` element.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，此功能在从基于数组的路由生成URL时不会与我们的路由冲突。因为我们已将路由链接到 `profiles` 控制器的 `view` 动作，所以 CakePHP
    只会在链接到该动作并指定 `userName` 元素时使用我们的自定义路由。
- en: We still need to fix the conflict that is produced when parsing a URL such as
    `http://localhost/profiles`. To do so, we create another route so CakePHP's built-in
    `index` routes are not utilized when producing a link. This route uses the special
    `:controller` route element (set to the controller the link points to), and forcing
    the `index` action as part of the URL. We link this route to all routes that use
    the `index` action, regardless of the controller.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要修复解析URL（如 `http://localhost/profiles`）时产生的冲突。为此，我们创建另一个路由，以便在生成链接时不会使用
    CakePHP 的内置 `index` 路由。此路由使用特殊的 `:controller` 路由元素（设置为链接指向的控制器），并强制将 `index` 动作作为URL的一部分。我们将此路由链接到使用
    `index` 动作的所有路由，无论控制器是什么。
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn about another, more effective approach to this problem, see Creating
    custom Route classes
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解关于此问题的另一种更有效的方法，请参阅创建自定义 Route 类
- en: 'After adding this route, if we created a link with:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加此路由后，如果我们创建了一个链接：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: the generated URL would be `http://localhost/profiles/index`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的URL将是 `http://localhost/profiles/index`。
- en: See also
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Working with route elements*'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与路由元素一起工作*'
- en: '*Adding validation for catch-all routes*'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为通配符路由添加验证*'
- en: '*Creating custom route classes*'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义路由类*'
- en: Adding validation for catch-all routes
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为通配符路由添加验证
- en: In the recipe *Adding catch-all routes for profile pages*, we created routes
    so that profile pages can be accessed, specifying only the username in the URL.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱 *为个人资料页面添加通配符路由* 中，我们创建了路由，以便可以通过仅指定URL中的用户名来访问个人资料页面。
- en: In this recipe, we will learn how to implement a custom validation method so
    that these usernames do not conflict with other custom routes.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何实现自定义验证方法，以便这些用户名不会与其他自定义路由冲突。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need some sample data to work with, and we need a catch-all route. Follow
    the entire recipe *Adding catch-all routes* for profile pages.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些样本数据来工作，并且需要一个通配符路由。遵循整个食谱 *为个人资料页面添加通配符路由*。
- en: 'We also need the sign-up page, where new profile records are created. Edit
    your `app/controller/profiles_controller.php` file and place the following method
    inside the `ProfilesController` class definition:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要注册页面，用于创建新的个人资料记录。编辑你的 `app/controller/profiles_controller.php` 文件，并在 `ProfilesController`
    类定义中放置以下方法：
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the appropriate view in a file named `add.ctp` and place it in your
    `app/views/profiles` folder, with the following contents:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为 `add.ctp` 的文件中创建适当的视图，并将其放置在 `app/views/profiles` 文件夹中，内容如下：
- en: '[PRE35]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We also need a custom route to try out the validation. Edit your `app/config/routes.php`
    file and add the following route at the beginning:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个自定义路由来尝试验证。编辑你的 `app/config/routes.php` 文件，并在开头添加以下路由：
- en: '[PRE36]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit your `app/models/profile.php` file and make the following changes:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `app/models/profile.php` 文件，并做出以下更改：
- en: '[PRE37]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'While still editing your `app/models/profile.php` file, add the following method
    to the `Profile` class:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑你的 `app/models/profile.php` 文件的同时，向 `Profile` 类添加以下方法：
- en: '[PRE38]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you now browse to `http://localhost/profiles/add` and specify **home** as
    the user name and **Mark Doe** as the name, you will get a validation error message
    informing you that the username is reserved, as shown in the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在浏览到 `http://localhost/profiles/add` 并将 **home** 作为用户名，**Mark Doe** 作为姓名，您将得到一个验证错误消息，告知您用户名已被保留，如下面的截图所示：
- en: '![How to do it...](img/1926_06_03.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_06_03.jpg)'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'First we add validation rules for two fields: `username`, and `name`. The validation
    for the `username` field consists of two rules: a built-in `notEmpty` rule, and
    a custom validation rule named `validateUsername`. The `name` field has only one
    rule: `notEmpty`.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为两个字段添加验证规则：`username` 和 `name`。`username` 字段的验证由两个规则组成：内置的 `notEmpty`
    规则和一个名为 `validateUsername` 的自定义验证规则。`name` 字段只有一个规则：`notEmpty`。
- en: In our `validateUsername` rule implementation, we start by storing all routing
    prefixes into a list of reserved words. We then get a list of all controllers,
    using the `Configure::listObjects()` method, and excluding the value `App`, which
    is the base of our controllers (and as such not directly accessible). Then we
    convert each name to its lower case, underscored form.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `validateUsername` 规则实现中，我们首先将所有路由前缀存储到保留字列表中。然后我们使用 `Configure::listObjects()`
    方法获取所有控制器列表，排除值 `App`，它是我们控制器的基础（因此不能直接访问）。然后我们将每个名称转换为小写和下划线形式。
- en: We then obtain the list of all defined routes by getting the instance of the
    `Router` class and accessing its `routes` public property, and for each of those
    routes we look for their `template` property.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过获取 `Router` 类的实例并访问其 `routes` 公共属性来获取所有已定义的路由列表，然后我们查找每个路由的 `template` 属性。
- en: This property stores the string representation of a route. For the route we
    defined during the *Getting ready* section, this would be `/home`. We are only
    interested in the starting portion of this value (that is, anything after the
    first slash, and before the second one), so we use a regular expression to match
    and extract that value, and then we add it to the list of reserved words.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性存储了路由的字符串表示。对于我们在 *准备工作* 部分定义的路由，这将是一个 `/home`。我们只对值的起始部分感兴趣（即第一个斜杠之后，第二个斜杠之前的内容），因此我们使用正则表达式来匹配并提取这个值，然后将其添加到保留字列表中。
- en: 'In our example, the list of reserved words would be: `pages, profiles`, and
    `home`. The first two come from the list of our application controllers, and the
    last one comes from our custom route.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，保留字列表将是：`pages, profiles` 和 `home`。前两个来自我们的应用程序控制器列表，最后一个来自我们的自定义路由。
- en: Once we have the list of reserved words, we set the field as valid only if the
    given value is not within this list.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了保留字列表，我们只在该值不在该列表中时将字段设置为有效。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Adding catch-all routes for profile pages*'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为个人页面添加通配符路由*'
- en: Creating custom Route classes
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义路由类
- en: 'In the recipe *Adding catch-all routes for profile pages* we created routes
    so that profile pages can be accessed specifying only the user name in the URL.
    However, that implementation had a problem: we had to disallow the automatic access
    of the `index` action.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *为个人页面添加通配符路由* 的配方中，我们创建了路由，以便可以通过仅指定 URL 中的用户名来访问个人页面。然而，该实现有一个问题：我们必须禁止自动访问
    `index` 动作。
- en: This recipe shows a different approach to our profile URL generation, by creating
    a custom route implementation that not only overcomes this problem, but makes
    sure the route is utilized only for existing profile records.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了我们个人 URL 生成的一种不同方法，通过创建一个自定义路由实现，不仅克服了这个问题，而且确保该路由仅用于现有的个人记录。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need some sample data to work with. Follow the *Getting ready* section of
    the recipe *Adding catch-all routes for profile pages*.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些样本数据来工作。遵循 *准备工作* 部分的 *为个人页面添加通配符路由* 配方。
- en: How to do it...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit your `app/config/routes.php` file and add the following routes at the
    end of the file:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的 `app/config/routes.php` 文件，并在文件末尾添加以下路由：
- en: '[PRE39]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now create a file named `profile_route.php` and place it in your `app/libs`
    folder, with the following contents:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个名为 `profile_route.php` 的文件，并将其放置在您的 `app/libs` 文件夹中，内容如下：
- en: '[PRE40]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, edit your `app/models/profile.php` file and add the following methods
    to the `Profile` class:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，编辑您的 `app/models/profile.php` 文件，并将以下方法添加到 `Profile` 类中：
- en: '[PRE41]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You can now browse to `http://localhost/john` to see John's profile page. Specifying
    an invalid name in the URL (such as `http://localhost/kate`) would produce the
    regular CakePHP error page, while browsing to `http://localhost/profiles` will
    correctly take us to the profile index page.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以浏览到`http://localhost/john`来查看约翰的个人资料页面。在URL中指定无效的名称（例如`http://localhost/kate`）将产生常规的CakePHP错误页面，而浏览到`http://localhost/profiles`将正确地带我们到个人资料索引页面。
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by first importing our custom route class file, and then defining a
    catch-all route for the `view` action of the `profiles` controller, using the
    custom `ProfileRoute` class, and setting the `userName` route element to be passed
    as a regular argument.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入自定义路由类文件，然后使用自定义的`ProfileRoute`类定义一个用于`profiles`控制器`view`操作的通配路由，并将`userName`路由元素设置为作为常规参数传递。
- en: 'The `ProfileRoute` implementation implements two of the most typical route
    class methods:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProfileRoute`实现实现了两个最典型的路由类方法：'
- en: '`match()`: It is used during reverse routing to convert an array-based URL
    into its string representation. If the method returns `false`, then the provided
    URL does not fall into this route.'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`match()`：在反向路由期间使用，将基于数组的URL转换为它的字符串表示形式。如果该方法返回`false`，那么提供的URL不适用于此路由。'
- en: '`parse()`: It is used when parsing a requested URL into an array-based URL,
    specifying `controller, action`, and other parameters. If the method returns `false`,
    then this tells CakePHP that the given URL is not handled by this route.'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`parse()`：当解析请求的URL为基于数组的URL时使用，指定`controller, action`和其他参数。如果该方法返回`false`，那么这告诉CakePHP给定的URL不是由这个路由处理的。'
- en: We created a helper method, called `_exists()`, to assist us, which looks for
    the given username amongst the registered records. We cache the list of usernames
    for obvious performance reasons, and we invalidate this cache whenever a record
    is created, modified, or deleted, by implementing the `afterSave` and `afterDelete`
    callbacks in the `Profile` model.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`_exists()`的辅助方法来帮助我们，该方法在注册的记录中查找给定的用户名。出于明显的性能原因，我们缓存用户名列表，并在创建、修改或删除记录时通过在`Profile`模型中实现`afterSave`和`afterDelete`回调来使此缓存失效。
- en: Our `match()` implementation first checks to make sure the `userName` route
    element is provided. If so, and if the given user exists, it will use the parent
    implementation to return the string representation. In any other case (no username
    provided, or nonexistent), it will not process the given URL.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`match()`实现首先检查确保提供了`userName`路由元素。如果提供了，并且指定的用户存在，它将使用父实现来返回字符串表示形式。在任何其他情况下（未提供用户名或用户不存在），它将不会处理给定的URL。
- en: The `parse()` implementation starts by calling its parent implementation to
    convert the string URL into an array based URL. If that call is successful (which
    means it contains the `userName` route element), and if the given user name exists,
    it returns the conversion. Otherwise it returns `false` to not process the given
    URL. Another route handler, or CakePHP's default route handler, will process it.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`parse()`实现首先调用其父实现将字符串URL转换为基于数组的URL。如果该调用成功（这意味着它包含`userName`路由元素），并且如果给定的用户名存在，它将返回转换。否则，它返回`false`以不处理给定的URL。另一个路由处理程序或CakePHP的默认路由处理程序将处理它。'
- en: See also
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Adding catch-all routes for profile pages*'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为个人资料页面添加通配路由*'
- en: '*Custom route classes*'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义路由类*'
