- en: Creating Forms with the Form API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Form API创建表单
- en: 'In this chapter, we will explore the various recipes to work with forms in
    Drupal:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨各种与Drupal中的表单一起工作的菜谱：
- en: Creating a form
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个表单
- en: Using new HTML5 elements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的HTML5元素
- en: Validating form data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证表单数据
- en: Processing submitted form data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理提交的表单数据
- en: Altering other forms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改其他表单
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Drupal provides a robust API for creating and managing forms without writing
    any HTML. Drupal handles form building, validation, and submission. Drupal handles
    the request to either build the form or process the HTTP POST request. This allows
    developers to simply define the elements in a form, provide any additional validation
    if needed, and then handle a successful submission through specific methods.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal提供了一个强大的API来创建和管理表单，而无需编写任何HTML。Drupal处理表单构建、验证和提交。Drupal处理构建表单或处理HTTP
    POST请求的请求。这允许开发者简单地定义表单中的元素，提供所需的任何额外验证，然后通过特定方法处理成功的提交。
- en: This chapter contains various recipes to work with forms in Drupal through the
    Form API. In Drupal 8, forms and form states are objects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种通过Form API与Drupal中的表单一起工作的菜谱。在Drupal 8中，表单和表单状态是对象。
- en: Creating a form
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个表单
- en: In this recipe, we will create a form, which will be accessible from a menu
    path. This will involve creating a route that tells Drupal to invoke our form
    and display it to the end user.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个表单，它可以通过菜单路径访问。这涉及到创建一个路由，告诉Drupal调用我们的表单并将其显示给最终用户。
- en: Forms are defined as classes, which implement `\Drupal\Core\Form\FormInterface`.
    The `\Drupal\Core\Form\FormBase` serves as a utility class that is intended to
    be extended. We will extend this class to create a new form.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 表单被定义为类，这些类实现了`\Drupal\Core\Form\FormInterface`。`\Drupal\Core\Form\FormBase`作为一个实用类，旨在被扩展。我们将扩展这个类来创建一个新的表单。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Since we will write the code, you will want to have a custom module. Creating
    a custom module in Drupal is simple: create a folder and an `info.yml` file. For
    this recipe, we will create a folder under `/modules` in your Drupal folder called
    `drupalform`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将编写代码，你将需要一个自定义模块。在Drupal中创建自定义模块很简单：创建一个文件夹和一个`info.yml`文件。对于这个菜谱，我们将在你的Drupal文件夹的`/modules`下创建一个名为`drupalform`的文件夹。
- en: 'In the `drupalform` folder, create `drupalform.info.yml`. Drupal will parse
    the `info.yml` file to discover modules. An example of a module''s `info.yml`
    file is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在`drupalform`文件夹中，创建`drupalform.info.yml`。Drupal将解析`info.yml`文件以发现模块。一个模块的`info.yml`文件示例如下：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The name will be your module's name, and the description will be listed on the
    Extend page. Specifying the core tells Drupal what version of Drupal it is built
    for. [*Chapter 4*](a634af62-2148-4382-9121-b8500df169ed.xhtml), *Extending Drupal*,
    covers how to create a module in depth.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 名称将是你的模块名称，描述将在扩展页面上列出。指定核心告诉Drupal它为哪个版本的Drupal构建。[*第4章*](a634af62-2148-4382-9121-b8500df169ed.xhtml)，*扩展Drupal*，涵盖了如何深入创建模块。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Create an `src` folder in your module directory. In this directory, create a
    `Form` directory, which will hold the class that defines your form.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块目录中创建一个`src`文件夹。在这个目录中，创建一个`Form`目录，它将包含定义你的表单的类。
- en: Next, create a file called `ExampleForm.php` in your module's `src/Form` directory.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在你的模块的`src/Form`目录中创建一个名为`ExampleForm.php`的文件。
- en: Drupal utilizes PSR4 to discover and autoload classes. For brevity, this defines
    that there should be one class per file, with each filename matching the class
    name. The folder structure will also mimic the namespace expected.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal利用PSR4来发现和自动加载类。为了简洁，这定义了每个文件应该有一个类，每个文件名应与类名匹配。文件夹结构也将模仿预期的命名空间。
- en: 'We will edit the `ExampleForm.php` file and add the proper PHP namespace, classes
    used, and the class itself:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将编辑`ExampleForm.php`文件，并添加适当的PHP命名空间、使用的类以及类本身：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `namespace` defines the class in your module's `Form` directory. The `autoloader`
    will now look at the `drupalform` module path and load the `ExampleForm` class
    from the `src/Form` directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`namespace`定义了模块的`Form`目录中的类。`autoloader`现在将查看`drupalform`模块路径，并从`src/Form`目录加载`ExampleForm`类。'
- en: The use statement allows us to use just the class name when referencing `FormBase`,
    and, in the next steps, `FormStateInterface`. Otherwise, we would be forced to
    use the fully qualified namespace path for each class whenever it is used.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用语句允许我们在引用`FormBase`和，在接下来的步骤中，`FormStateInterface`时只使用类名。否则，我们被迫在每次使用每个类时使用完全限定的命名空间路径。
- en: 'The `\Drupal\Core\Form\FormBase` is an abstract class and requires us to implement
    four remaining interface methods: `getFormId`, `buildForm`, `validateForm`, and
    `submitForm`. The latter two will be covered in the following recipes; however,
    we will need to define the method stubs:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Form\FormBase` 是一个抽象类，并要求我们实现四个剩余的接口方法：`getFormId`、`buildForm`、`validateForm`
    和 `submitForm`。后两个方法将在接下来的食谱中介绍；然而，我们需要定义方法占位符：'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code flushes out the initial class definition from the preceding step.
    `FormBase` provides `utility` methods and does not satisfy the interface requirements
    for `FormStateInterface`. We define those here, as they are unique across each
    form definition.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码清除了前面步骤中的初始类定义。`FormBase` 提供了 `utility` 方法，并不满足 `FormStateInterface` 的接口要求。我们在这里定义这些，因为它们在每个表单定义中都是独特的。
- en: The `getFormId` method returns a unique string to identify the form, for example,
    `site_information`. You may encounter some forms that append `_form` to the end
    of their form ID. This is not required, and it is just a naming convention often
    found in previous versions of Drupal.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`getFormId` 方法返回一个唯一的字符串来标识表单，例如，`site_information`。你可能会遇到一些表单在其表单 ID 的末尾附加
    `_form`。这不是必需的，而只是 Drupal 早期版本中常见的命名约定。'
- en: The `buildForm` method is covered in the following steps. The `validateForm`
    and `submitForm` methods are both called during the Form API processes and are
    covered in later recipes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildForm` 方法将在以下步骤中介绍。`validateForm` 和 `submitForm` 方法都在表单 API 过程中调用，将在后面的食谱中介绍。'
- en: 'The `buildForm` method will be invoked to return Form API elements that are
    rendered to the end user. We will add a simple text field to ask for a company
    name and a submit button:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`buildForm` 方法将被调用以返回渲染给最终用户的表单 API 元素。我们将添加一个简单的文本字段来请求公司名称和一个提交按钮：'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We added a form element definition to the `form` array. Form elements are defined
    with a minimum of a type to specify what the element is and a title to act as
    the label. The title uses the `t` method to ensure that it is translatable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向 `form` 数组中添加了一个表单元素定义。表单元素通过指定元素类型和用作标签的标题来定义，标题使用 `t` 方法来确保它是可翻译的。
- en: Adding a submit button is done by providing an element with the type submit.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 添加提交按钮是通过提供一个类型为提交的元素来完成的。
- en: 'To access the form, we will create `drupalform.routing.yml` in the module''s
    folder. A route entry will be created to instruct Drupal to use `\Drupal\Core\Form\FormBuilder`
    to create and display our form:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问表单，我们将在模块文件夹中创建 `drupalform.routing.yml`。将创建一个路由条目来指示 Drupal 使用 `\Drupal\Core\Form\FormBuilder`
    创建和显示我们的表单：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In Drupal, all routes have a name, and this example defines it as `drupalform.form`.
    Routes then define a path attribute and override default variables. This route
    definition has altered the route's title, specified it as a form, and given the
    fully qualified namespace path to this form's class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Drupal 中，所有路由都有一个名称，这个例子将其定义为 `drupalform.form`。路由定义了一个路径属性并覆盖了默认变量。这个路由定义改变了路由的标题，将其指定为表单，并给出了此表单类的完全限定命名空间路径。
- en: Routes need to be passed a `requirements` property with specifications, or else
    the route will be denied access.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 路由需要传递一个具有特定说明的 `requirements` 属性，否则路由将被拒绝访问。
- en: Go to the Extend page and install the Drupal form example module that we created.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往扩展页面并安装我们创建的 Drupal 表单示例模块。
- en: 'Go to `/drupal-example-form`, and the form should be now visible, as shown
    in the following screenshot:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `/drupal-example-form`，现在表单应该可见，如下面的截图所示：
- en: '![](img/a2e8c515-0e51-4f70-bf4f-9f8416de7216.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2e8c515-0e51-4f70-bf4f-9f8416de7216.png)'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe creates a route to display the form. By passing the `_form` variable
    in the defaults section of our route entry, we are telling the route controller
    how to render our route's content. The fully qualified class name, which includes
    the namespace, is passed to a method located in the form builder. The route controller
    will invoke `\Drupal::formBuilder()->getForm` (`\Drupal\drupalform\Form\ExampleForm`)
    based on the recipe. At the same time, this can be manually called to embed the
    form elsewhere.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱创建了一个路由来显示表单。通过在我们的路由条目默认部分传递 `_form` 变量，我们告诉路由控制器如何渲染我们的路由内容。包含命名空间的完全限定类名被传递到表单构建器中的方法。根据食谱，路由控制器将调用
    `\Drupal::formBuilder()->getForm` (`\Drupal\drupalform\Form\ExampleForm`)。同时，这也可以手动调用以在其他地方嵌入表单。
- en: A form builder instance that implements `\Drupal\Core\Form\FormBuilderInterface`
    will then process the form by calling `buildForm` and initiate the rendering process.
    The `buildForm` method is expected to return an array of form elements and other
    API options. This will be sent to the render system to output the form as HTML.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个实现 `\Drupal\Core\Form\FormBuilderInterface` 的表单构建实例将调用 `buildForm` 并启动渲染过程来处理表单。`buildForm`
    方法预期返回一个表单元素和其他 API 选项的数组。这将发送到渲染系统以输出表单作为 HTML。
- en: There's more...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Many components make up a form created through Drupal's Form API. We will explore
    a few of them in depth.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组件构成了通过 Drupal 的表单 API 创建的表单。我们将深入探讨其中的一些。
- en: Form element definitions
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单元素定义
- en: A form is a collection of form elements, which are types of plugin in Drupal
    8\. Plugins are small pieces of swappable functionalities in Drupal 8\. Plugins
    and plugin development are covered in [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml),
    *Plug and Play with Plugins*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表单是一组表单元素，这些元素是 Drupal 8 中的插件类型。插件是 Drupal 8 中的可互换功能的小块。插件和插件开发在[*第7章*](3994173f-3d31-4f01-b808-99e01368564b.xhtml)，*使用插件轻松连接*中有所介绍。
- en: 'Here are some of the most common element properties that can be used:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些最常用的元素属性，可以使用：
- en: '`weight`: This is used to alter the position of a form element in a form. By
    default, elements will be displayed in the order in which they were added to the
    form array. Defining a weight allows a developer to control element positions.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weight`: 这用于改变表单元素在表单中的位置。默认情况下，元素将按照它们被添加到表单数组中的顺序显示。定义一个权重允许开发者控制元素的位置。'
- en: '`default_value`: This gives a developer the ability to prefill the element
    with a value, for example, when building configuration forms that have existing
    data or when editing an entity.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_value`: 这使开发者能够预先填充元素，例如，在构建具有现有数据的配置表单或编辑实体时。'
- en: '`placeholder`: This is new to Drupal 8\. Drupal 8 provides a new HTML5 support,
    and this attribute will set the placeholder attribute on the HTML input.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`placeholder`: 这在 Drupal 8 中是新的。Drupal 8 提供了新的 HTML5 支持，此属性将在 HTML 输入上设置占位符属性。'
- en: For a complete reference of available form elements and their properties, check
    out the Drupal.org API documentation page at [https://api.drupal.org/api/drupal/elements/](https://api.drupal.org/api/drupal/elements/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用表单元素及其属性的完整参考，请访问 Drupal.org API 文档页面[https://api.drupal.org/api/drupal/elements/](https://api.drupal.org/api/drupal/elements/)。
- en: The form state
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单状态
- en: The `\Drupal\Core\Form\FormStateInterface` object represents the current state
    of the form and its data. The form state contains user-submitted data for the
    form along with build state information. Redirection after the form submission
    is handled through the
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Form\FormStateInterface` 对象表示表单及其数据的当前状态。表单状态包含用户提交给表单的数据以及构建状态信息。表单提交后的重定向通过处理。'
- en: form state, as well. You will interact more with the form state during the validation
    and submission recipes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 表单状态，同样。你将在验证和提交过程中更多地与表单状态交互。
- en: The form cache
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单缓存
- en: Drupal utilizes a cache table for forms. This holds the build table, as identified
    by form build identifiers. This allows Drupal to validate forms during AJAX requests
    and easily build them when required. It is important to keep the form cache in
    persistent storage; otherwise, there may be repercussions, such as loss of form
    data or invalidating forms.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 使用表单缓存表。它保存了由表单构建标识符识别的构建表。这允许 Drupal 在 AJAX 请求期间验证表单，并在需要时轻松构建它们。保持表单缓存在持久存储中很重要；否则，可能会有不良后果，例如丢失表单数据或使表单无效。
- en: See also
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Form API in Drupal 8 at [https://www.drupal.org/node/2117411](https://www.drupal.org/node/2117411)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal 8 中的表单 API[https://www.drupal.org/node/2117411](https://www.drupal.org/node/2117411)
- en: The Drupal 8 Form API reference at [https://api.drupal.org/api/drupal/elements/](https://api.drupal.org/api/drupal/elements/)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[Drupal 8 表单 API 参考](https://api.drupal.org/api/drupal/elements/)
- en: Refer to [*Chapter 4*](a634af62-2148-4382-9121-b8500df169ed.xhtml), *Extending
    Drupal*
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参阅[*第4章*](a634af62-2148-4382-9121-b8500df169ed.xhtml)，*扩展 Drupal*
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), *Plug and
    Play with Plugins*, to learn more about derivatives
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参阅[*第7章*](3994173f-3d31-4f01-b808-99e01368564b.xhtml)，*使用插件轻松连接*，了解更多关于派生内容的信息。
- en: Using new HTML5 elements
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用新的 HTML5 元素
- en: 'With the release of Drupal 8, Drupal has finally entered into the realm of
    HTML5\. The Form API now allows utilization of HTML5 input elements out of the
    box. These include the following element types:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Drupal 8的发布，Drupal终于进入了HTML5的领域。表单API现在允许直接使用HTML5输入元素。以下是一些元素类型：
- en: '`tel`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`电话`'
- en: '`email`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`电子邮件`'
- en: '`number`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`数字`'
- en: '`date`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`日期`'
- en: '`url`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`网址`'
- en: '`search`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`搜索`'
- en: '`range`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`范围`'
- en: This allows your forms in Drupal to leverage native device input methods along
    with native validation support.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Drupal中的表单可以利用原生设备输入方法和原生验证支持。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will walk you through adding elements to a Drupal form. You will
    need to have a custom form implemented through a module, such as the one created
    in the *Creating a form* recipe of this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将指导您如何在Drupal表单中添加元素。您需要通过模块实现自定义表单，例如本章中*创建表单*菜谱中创建的表单。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To use the telephone input, you will need to add a new `form` element definition
    of the `tel` type to your `buildForm` method:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用电话输入，您需要在`buildForm`方法中添加一个新的`tel`类型的`form`元素定义：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To use the email input, you will need to add a new `form` element definition
    of the `email` type to your `buildForm` method. It will validate the format of
    email addresses in the Form API:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用电子邮件输入，您需要在`buildForm`方法中添加一个新的`email`类型的`form`元素定义。它将在表单API中验证电子邮件地址的格式：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To use the number input, you will need to add a new `form` element definition
    of the number type to your `buildForm` method. It will validate the range and
    format of the number:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用数字输入，您需要在`buildForm`方法中添加一个新的数字类型的`form`元素定义。它将验证数字的范围和格式：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To use the date input, you will need to add a new `form` element definition
    of the `date` type to your `buildForm` method. You can also pass the `#date_date_format`
    option to alter the format used by the input:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用日期输入，您需要在`buildForm`方法中添加一个新的`date`类型的`form`元素定义。您还可以传递`#date_date_format`选项来更改输入使用的格式：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To use the URL input, you will need to add a new `form` element definition
    of the `url` type to your `buildForm` method. The element has a validator to check
    the format of the URL:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用URL输入，您需要在`buildForm`方法中添加一个新的`url`类型的`form`元素定义。该元素有一个验证器来检查URL的格式：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To use the search input, you will need to add a new `form` element definition
    of the `search` type to your `buildForm` method. You can specify a route name
    that the search field will query for autocomplete options:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用搜索输入，您需要在`buildForm`方法中添加一个新的`search`类型的`form`元素定义。您可以指定搜索字段将查询以自动完成选项的路由名称：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To use the `range` input, you will need to add a new `form` element definition
    of the `range` type to your `buildForm` method. It is an extension of the number
    element and accepts `min`, `max`, and `step` properties to control the values
    of the range input:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用`range`输入，您需要在`buildForm`方法中添加一个新的`range`类型的`form`元素定义。它是数字元素的扩展，接受`min`、`max`和`step`属性来控制范围输入的值：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each type references an extended class of `\Drupal\Core\Render\Element\FormElement`.
    It provides the element's definition and additional functions. Each element defines
    a `prerender` method in the class that defines the `input` type attribute along
    with other additional attributes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类型都引用了`\Drupal\Core\Render\Element\FormElement`的扩展类。它提供了元素的定义和附加功能。每个元素在其类中定义了一个`prerender`方法，该方法定义了`input`类型属性以及其他附加属性。
- en: Each input defines its theme as `input__TYPE`, allowing you to copy the `input.html.twig`
    base to `input.TYPE.html.twig` for templating. The template then parses the attributes
    and renders the HTML.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个输入定义其主题为`input__TYPE`，允许您将`input.html.twig`基本模板复制到`input.TYPE.html.twig`以进行模板化。模板随后解析属性并渲染HTML。
- en: 'Some elements, such as emails, provide validators for the element. The email
    element defines the `validateEmail` method. Here is an example of the code from
    `\Drupal\Core\Render\Element\Email::valdateEmail`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一些元素，如电子邮件，为元素提供了验证器。电子邮件元素定义了`validateEmail`方法。以下是从`\Drupal\Core\Render\Element\Email::validateEmail`的代码示例：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code will be executed on form submission and validate the provider's email.
    It does this by taking the current value and trimming any whitespaces and using
    the form state object to update the value. The `email.validator` service is invoked
    to validate the email. If this method returns `false`, the form state is invoked
    to mark the element as the one that has an error. If the element has an error,
    the form builder will prevent form submission, returning the user to the form
    to fix the value.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将在表单提交时执行，并验证提供者的电子邮件。它通过获取当前值并删除任何空白字符，并使用表单状态对象来更新值来实现这一点。调用 `email.validator`
    服务来验证电子邮件。如果此方法返回 `false`，则调用表单状态来标记元素为有错误的元素。如果元素有错误，表单构建器将阻止表单提交，将用户返回到表单以修复值。
- en: There's more...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Elements are provided through Drupal's plugin system and are explored in detail
    in the upcoming sections.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 元素通过 Drupal 的插件系统提供，并在接下来的章节中详细探讨。
- en: Specific element properties
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特定元素属性
- en: 'Elements can have their own unique properties along with individual validation
    methods. You can refer to the available elements through the Drupal.org API documentation
    page at [https://api.drupal.org/api/drupal/elements/](https://api.drupal.org/api/drupal/elements/).
    However, the classes can also be examined, and the definition method can be read
    to learn about the properties of each element. These classes are under the `\Drupal\Core\Render\Element`
    namespace located in `/core/lib/Drupal/Core/Render/Element`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 元素可以有自己的独特属性以及单独的验证方法。您可以通过 Drupal.org API 文档页面在 [https://api.drupal.org/api/drupal/elements/](https://api.drupal.org/api/drupal/elements/)
    中参考可用的元素。然而，也可以检查这些类，并阅读定义方法来了解每个元素的属性。这些类位于 `/core/lib/Drupal/Core/Render/Element`
    下的 `\Drupal\Core\Render\Element` 命名空间中：
- en: '![](img/554d8884-2cf5-42cf-bad9-000f07982ef5.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/554d8884-2cf5-42cf-bad9-000f07982ef5.png)'
- en: Creating new elements
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新元素
- en: Each element used in the Form API extends the `\Drupal\Core\Render\Element\FormElement`
    class, which is a plugin. Modules can provide new element types by adding classes
    to their `Plugins/Element` namespace. Refer to *[Chapter 7](3994173f-3d31-4f01-b808-99e01368564b.xhtml)*,
    *Plug and Play with Plugins*, for more information on how to implement a plugin.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Form API 中使用的每个元素都扩展了 `\Drupal\Core\Render\Element\FormElement` 类，这是一个插件。模块可以通过向它们的
    `Plugins/Element` 命名空间添加类来提供新的元素类型。有关如何实现插件的更多信息，请参阅第 *[7章*](3994173f-3d31-4f01-b808-99e01368564b.xhtml)*，*使用插件轻松连接*。
- en: See also
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Form API in Drupal 8 at [https://www.drupal.org/node/2117411](https://www.drupal.org/node/2117411)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal 8 的表单 API 在 [https://www.drupal.org/node/2117411](https://www.drupal.org/node/2117411)
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), Plug and
    Play with Plugins
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考第 [*7章*](3994173f-3d31-4f01-b808-99e01368564b.xhtml)，使用插件轻松连接
- en: Validating form data
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证表单数据
- en: All forms must implement the `\Drupal\Core\Form\FormInterface`. The interface
    defines a `validation` method. The `validateForm` method is invoked once a form
    has been submitted and provides a way to validate the data and halt the processing
    of the data if required. The form state object provides methods for marking specific
    fields as having the error, providing a user experience tool to alert your users
    to specify the problem input.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所有表单都必须实现 `\Drupal\Core\Form\FormInterface` 接口。该接口定义了一个 `validation` 方法。`validateForm`
    方法在表单提交后调用，并提供了一种验证数据和在需要时停止数据处理的方式。表单状态对象提供了标记特定字段为错误的方法，为用户提供了一个工具来提醒用户指定问题输入。
- en: In this recipe, we will be validating the length of the submitted field.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将验证提交字段的长度。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will use the module and custom form created in the first *Creating
    a form* recipe.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱将使用在第一个 *创建表单* 菜谱中创建的模块和自定义表单。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Open and edit the `\Drupal\drupalform\Form\ExampleForm` class in the `src/Form`
    directory of the module.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的 `src/Form` 目录中打开并编辑 `\Drupal\drupalform\Form\ExampleForm` 类。
- en: 'Before validating the `company_name` value, we will need to check whether the
    value is empty using the `isValueEmpty()` method from the `\Drupal\Core\Form\FormStateInterface`
    object:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在验证 `company_name` 值之前，我们需要使用 `\Drupal\Core\Form\FormStateInterface` 对象中的 `isValueEmpty()`
    方法来检查值是否为空：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `\Drupal\Form\FormStateInterface::isValueEmpty` method takes the key name
    of the form element; for example, `$form['company_name']` from the `buildForm`
    method is referenced through `company_name` in the `isValueEmpty` method.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\Drupal\Form\FormStateInterface::isValueEmpty` 方法接受表单元素的键名；例如，从 `buildForm`
    方法中的 `$form[''company_name'']` 通过 `isValueEmpty` 方法中的 `company_name` 进行引用。'
- en: 'Next, we will check whether the value''s length is greater than five:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将检查值的长度是否大于五：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `getValue` takes a form element's key and returns the value. Since we have
    already verified that the value is not empty, we can retrieve the value.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getValue`接受表单元素的键并返回值。由于我们已经验证了值不为空，我们可以检索该值。'
- en: If you had any experience with previous versions of Drupal, note that the form
    state is now an object and not an array.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Drupal的先前版本有任何经验，请注意，表单状态现在是一个对象而不是数组。
- en: 'If the logic check finds a value with a length of five or fewer characters,
    it will throw a form error to prevent submission:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果逻辑检查发现长度为五个或更短的值，它将抛出表单错误以防止提交：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can place the `setErrorByName` method in our `strlen` logic check. If the
    string is fewer than five characters, an error is set on the element. The first
    parameter is the element's key, and the second parameter is the message to be
    presented to the user.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`strlen`逻辑检查中放置`setErrorByName`方法。如果字符串少于五个字符，将在元素上设置错误。第一个参数是元素的键，第二个参数是要向用户显示的消息。
- en: When the form is submitted, the Company name text field will have more than
    five characters or be empty to be submitted.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当表单提交时，公司名称文本字段将包含超过五个字符或为空才能提交。
- en: '![](img/ad84a16b-4eaf-4895-9dc9-b60c62ad867d.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ad84a16b-4eaf-4895-9dc9-b60c62ad867d.png)'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Before the form builder service invokes the form object's `submitForm` method,
    it invokes the object's `validateForm` method. In the validation method, the form
    state can be used to check values and perform logic checks. In the event that
    an item is deemed *invalid* and an error is set on an element, the form cannot
    be submitted and will show errors to the user.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单构建服务调用表单对象的`submitForm`方法之前，它将调用对象的`validateForm`方法。在验证方法中，可以使用表单状态来检查值和执行逻辑检查。如果项目被认为*无效*并在元素上设置错误，则表单无法提交，并将显示错误给用户。
- en: When an error is added to an element, an overall counter for the number of errors
    on the form is incremented. If the form has any errors, the form builder service
    will not execute the submit method.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当向元素添加错误时，表单上的错误总数会增加。如果表单有任何错误，表单构建服务将不会执行提交方法。
- en: This process is executed through the `\Drupal\Core\Form\FormValidator` class,
    which is run through the form builder service.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程通过`\Drupal\Core\Form\FormValidator`类执行，该类通过表单构建服务运行。
- en: There's more...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: Form validation can be done through multiple handlers and at the element level.
    The following sections will cover those.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 表单验证可以通过多个处理程序和元素级别进行。以下章节将介绍这些内容。
- en: Multiple validation handlers
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个验证处理程序
- en: A form can have multiple validation handlers. By default, all forms come with
    at least one validator, which is its own `validateForm` method. There is more
    that can be added. However, by default, the form will merely execute `::validateForm`
    and all element validators. This allows you to invoke methods on other classes
    or other forms.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 表单可以有多个验证处理程序。默认情况下，所有表单都至少有一个验证器，即其自己的`validateForm`方法。还可以添加更多。然而，默认情况下，表单将仅执行`::validateForm`和所有元素验证器。这允许您在类或表单上调用方法。
- en: 'If a class provides `method1` and `method2`, which it would like to execute
    as well, the following code can be added to the `buildForm` method:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个类提供了它希望执行的`method1`和`method2`，则可以在`buildForm`方法中添加以下代码：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This sets the validator array to execute the default `validateForm` method and
    the two additional methods. You can reference a method in the current class using
    two colons (`::`) and the method name. Alternatively, you can use an array that
    consists of a class instance and the method to be invoked.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置验证器数组以执行默认的`validateForm`方法和两个附加方法。您可以使用两个冒号（`::`）和方法名称在当前类中引用方法。或者，您可以使用一个包含类实例和要调用的方法的数组。
- en: Accessing multidimensional array values
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问多维数组值
- en: Forms support nested form elements in the form array. The default `\Drupal\Core\Form\FormStateInterface`
    implementation, `\Drupal\Core\Form\FormState`, supports accessing multidimensional
    array values. Instead of passing a string, you can pass an array that represents
    the parent array structure in the form array.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 表单支持在表单数组中嵌套表单元素。默认的`\Drupal\Core\Form\FormStateInterface`实现，`\Drupal\Core\Form\FormState`，支持访问多维数组值。您可以通过传递表示表单数组中父数组结构的数组，而不是传递字符串。
- en: If the element is defined as `in $form['company']['company_name']`, then we
    will pass `['company', 'company_name']` to the form state's methods.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果元素定义为 `in $form['company']['company_name']`，则我们将 `['company', 'company_name']`
    传递给表单状态的方法。
- en: Element validation methods
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素验证方法
- en: Form elements can have their own validators. The form state will aggregate all
    of the element validation methods and pass them to the form validation service.
    This will run with the form's validation.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 表单元素可以有自己的验证器。表单状态将聚合所有元素验证方法并将它们传递给表单验证服务。这将与表单的验证一起运行。
- en: There is a `limit_validation_errors` option, which can be set to allow selected
    invalid errors to be passed. This option allows you to bypass validation on specific
    elements in your form. This is useful if a form has two submit buttons and each
    intends to validate and submit specific data. This attribute is defined in the
    submit button, also known as the *triggering* element in the form state. It is
    an array value consisting of form element keys.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个 `limit_validation_errors` 选项，可以设置为允许传递选定的无效错误。此选项允许你绕过表单中特定元素的验证。如果表单有两个提交按钮，并且每个按钮都打算验证和提交特定数据，这很有用。此属性定义在提交按钮中，也称为表单状态中的
    *触发* 元素。它是一个由表单元素键组成的数组值。
- en: Processing submitted form data
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理提交的表单数据
- en: A form's purpose is to collect data and do something with the data that was
    submitted. All forms need to implement the `\Drupal\Core\Form\FormInterface` interface.
    The interface defines a submit method. Once the Form API has invoked the class's
    validation method, the submit method can be run.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的目的是收集数据并对提交的数据做些处理。所有表单都需要实现 `\Drupal\Core\Form\FormInterface` 接口。该接口定义了一个提交方法。一旦表单API调用了类的验证方法，就可以运行提交方法。
- en: This recipe will be based on the custom module and form created in the *Creating
    a form* recipe of this chapter. We will convert the form to `\Drupal\Core\FormConfigBaseForm`,
    allowing us to save our configuration and reuse code provided by Drupal core.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将基于本章 *创建表单* 配方中创建的自定义模块和表单。我们将表单转换为 `\Drupal\Core\Form\ConfigBaseForm`，这样我们就可以保存我们的配置并重用Drupal核心提供的代码。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will use the module and custom form created in the first
    *Creating a form* recipe.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将使用在第一个 *创建表单* 配方中创建的模块和自定义表单。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In your module's directory, create a `config` directory, and then create a directory
    inside it named `install`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块目录中，创建一个 `config` 目录，然后在其中创建一个名为 `install` 的目录。
- en: Create a file named `drupalform.schema.yml` . This file will tell Drupal about
    the configuration item that we want to save.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `drupalform.schema.yml` 的文件。此文件将告诉Drupal我们想要保存的配置项。
- en: 'Add the following configuration schema definition to `drupalform.schema.yml`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下配置模式定义添加到 `drupalform.schema.yml` 文件中：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This tells Drupal that we have the configuration with the name `drupalform.company`,
    and it has a valid option of `company_name`. We will cover this in more detail
    in *[Chapter 9](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)*, *Configuration Management
    - Deploying in Drupal 8*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉Drupal我们有一个名为 `drupalform.company` 的配置，并且它有一个有效的选项 `company_name`。我们将在*[第9章](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)*，*配置管理
    - 在Drupal 8中部署*中更详细地介绍这一点。
- en: 'Next, edit the module''s `src/Form/ExampleForm.php` file. Replace the `FormBase`
    use statement to use the `ConfigFormBase` class:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，编辑模块的 `src/Form/ExampleForm.php` 文件。将 `FormBase` 使用语句替换为使用 `ConfigFormBase`
    类：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Update the `ExampleForm` class to extend `ConfigFormBase` instead, to harness
    its existing methods and provided code:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ExampleForm` 类更新为扩展 `ConfigFormBase`，以利用其现有方法和提供的代码：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This allows us to reuse methods from the `ConfigFormBase` class and write less
    about our own implementation.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们重用 `ConfigFormBase` 类中的方法并减少我们自己的实现。
- en: 'For `ExampleForm` to implement `ConfigFormBase`, the `getEditableConfigNames`
    method needs to be implemented to satisfy the `\Drupal\Core\Form\ConfigBaseTrait`
    trait. This method can be added anywhere in the class:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使 `ExampleForm` 实现 `ConfigFormBase`，需要实现 `getEditableConfigNames` 方法以满足 `\Drupal\Core\Form\ConfigBaseTrait`
    特性。此方法可以添加到类的任何位置：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This function defines the configuration names, which will be editable by the
    form. This brings all the attributes under the `drupalform.company` object to
    be editable when accessed through the form with the `config` method provided by
    `ConfigFormBaseTrait`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数定义了配置名称，这些名称可以通过表单进行编辑。这使 `drupalform.company` 对象下的所有属性在通过 `ConfigFormBaseTrait`
    提供的 `config` 方法访问时都可编辑。
- en: 'We will remove the submit form element (`$form[''submit'']`) and update the
    `buildForm` method to return data from the parent''s method rather than from `$form`
    itself. We will also need to add a `#default_value` option to `company_name` so
    that it uses an existing value the next time our form is loaded:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将移除提交表单元素（`$form['submit']`）并更新`buildForm`方法，使其从父方法返回数据而不是从`$form`本身返回。我们还需要向`company_name`添加`#default_value`选项，以便在下次加载我们的表单时使用现有值：
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `ConfigFormBase` class implements the `buildForm` method to provide a reusable
    submit button. It also unifies the presentation across Drupal configuration forms:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConfigFormBase`类实现了`buildForm`方法以提供可重用的提交按钮。它还统一了Drupal配置表单的展示：'
- en: '![](img/dd77562a-7943-43c1-9143-1d0b05ff0047.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dd77562a-7943-43c1-9143-1d0b05ff0047.png)'
- en: 'The `ConfigFormBase` provides a configuration factory method. We will add a
    `default_value` property to our element with the currently saved item:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ConfigFormBase`提供了一个配置工厂方法。我们将向我们的元素添加一个`default_value`属性，以包含当前保存的项目：'
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `#default_value` key is added to the element's definition. It invokes the
    `config` method provided by `ConfigFormBaseTrait` to load our configuration group
    and access a specific configuration value.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`#default_value`键被添加到元素的定义中。它调用由`ConfigFormBaseTrait`提供的`config`方法来加载我们的配置组并访问特定的配置值。'
- en: 'The final step is to save the configuration in the `submitForm` method. Add
    the following method to your class:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是在`submitForm`方法中保存配置。向你的类中添加以下方法：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `config` method is invoked by specifying our configuration group. We will
    then use the set method to define the name as the value of the `company name`
    text field.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定我们的配置组来调用`config`方法。然后我们将使用`set`方法来定义名称作为`公司名称`文本字段的值。
- en: 'Your form class should resemble the following when complete:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，你的表单类应类似于以下内容：
- en: '[PRE24]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When you edit your form and click on the Submit button, the value that you entered
    in the Company name field will now be saved in the configuration.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你编辑你的表单并点击提交按钮时，你在公司名称字段中输入的值现在将被保存在配置中。
- en: How it works...
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ConfigFormBase` utilizes the `ConfigFormBaseTrait` to provide easy access
    to a configuration factory. The class's implementation of `buildForm` also adds
    a `submit` button and theme styling to forms. The submit handler displays a configuration
    saved message, but relies on implementing a module to save the configuration.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConfigFormBase`利用`ConfigFormBaseTrait`提供对配置工厂的便捷访问。该类对`buildForm`的实现还向表单添加了`submit`按钮和主题样式。提交处理程序显示配置保存消息，但依赖于实现模块来保存配置。'
- en: The form saves its data under the `drupalform.company` namespace. The company
    name value is stored as `name` and can be accessed as `drupalform.company.name`.
    Note that the configuration name does not have to match the form element's key.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 该表单在`drupalform.company`命名空间下保存其数据。公司名称值存储为`name`，可以通过`drupalform.company.name`访问。请注意，配置名称不必与表单元素的键匹配。
- en: There's more...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: In the next section, we will cover how to handle multiple submit callbacks.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍如何处理多个提交回调。
- en: Multiple submit handlers
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个提交处理程序
- en: A form can have multiple submit handlers. By default, all forms implement a
    submit handler, which is its own `submitForm` method. The form will execute `::submitForm`
    automatically and any other methods defined on the triggering element. There is
    more that can be added. However, this allows you to invoke `static` methods on
    other classes or other forms.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 表单可以有多个提交处理程序。默认情况下，所有表单都实现了一个提交处理程序，即其自己的`submitForm`方法。表单将自动执行`::submitForm`并触发元素上定义的任何其他方法。还可以添加更多内容。然而，这允许你调用其他类或其他表单上的`static`方法。
- en: 'If a class provides `method1` and `method2`, which it would like to execute
    as well, the following code can be added to the `buildForm` method:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个类提供了`method1`和`method2`，它希望同时执行，可以在`buildForm`方法中添加以下代码：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This sets the submit handler array to execute the default `submitForm` method
    and two additional methods. You can reference a method in the current class using
    two colons (`::`) and the method name. Alternatively, you can use an array consisting
    of a class instance and the method to be invoked.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置提交处理程序数组以执行默认的`submitForm`方法以及两个附加方法。你可以使用两个冒号（`::`）和方法名称来引用当前类中的方法。或者，你可以使用一个包含类实例和要调用的方法的数组。
- en: See also
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to [*Chapter 9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml), *Configuration
    Management- Deploying in Drupal 8*
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参阅[*第9章*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)，*配置管理-在Drupal 8中部署*
- en: Altering other forms
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改其他表单
- en: Drupal's Form API does not just provide a way to create forms. There are ways
    to alter forms through a custom module that allows you to manipulate the core
    and contributed forms. Using this technique, new elements can be added, default
    values can be changed, or elements can even be hidden from view to simplify the
    user experience.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal的表单API不仅提供创建表单的方式。还有通过自定义模块来修改表单的方法，该模块允许你操作核心和贡献的表单。使用这种技术，可以添加新元素，更改默认值，甚至可以将元素隐藏以简化用户体验。
- en: The altering of a form does not happen in a custom class; this is a hook defined
    in the module file. In this recipe, we will use the `hook_form_FORM_ID_alter()`
    hook to add a telephone field to the site's configuration form.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的修改不是在自定义类中发生的；这是一个在模块文件中定义的钩子。在这个配方中，我们将使用`hook_form_FORM_ID_alter()`钩子向网站的配置表单添加电话字段。
- en: Getting ready
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you have a custom module to add the code to.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个自定义模块来添加代码。
- en: How to do it...
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In the `modules` folder of your Drupal site, create a folder named `mymodule`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Drupal站点的`modules`文件夹中，创建一个名为`mymodule`的文件夹。
- en: 'In the `mymodule` folder, create a `mymodule.info.yml`, containing the following
    code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mymodule`文件夹中，创建一个`mymodule.info.yml`文件，包含以下代码：
- en: '[PRE26]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, create a `mymodule.module` file in your module''s directory:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在你的模块目录中创建一个名为`mymodule.module`的文件：
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the `mymodule_form_system_site_information_settings_alter()` hook. The
    form ID can be found by viewing the form''s class and reviewing the `getFormId`
    method:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`mymodule_form_system_site_information_settings_alter()`钩子。可以通过查看表单的类并审查`getFormId`方法来找到表单ID：
- en: '[PRE28]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Drupal will call this hook and pass the current form array and its form state
    object. The form array is passed by reference, allowing our hook to modify the
    array without returning any values. This is why the `$form` parameter has the
    ampersand (`&`) before it. In PHP, all objects are passed by reference, which
    is why we have no ampersand (`&`) before `$form_state`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal将调用此钩子并传递当前表单数组和其表单状态对象。表单数组是通过引用传递的，允许我们的钩子修改数组而不返回任何值。这就是为什么`$form`参数前面有反引号（`&`）。在PHP中，所有对象都是通过引用传递的，这就是为什么我们在`$form_state`前面没有反引号（`&`）。
- en: When calling a class in a normal file, such as the module file, you will need
    to either use the fully qualified class name or add a use statement at the beginning
    of the file. In this example, we can add `\Drupal\Core\Form\FormStateInterface`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当在普通文件中调用类时，例如模块文件，你需要使用完全限定的类名，或者在文件开头添加一个use语句。在这个例子中，我们可以添加`\Drupal\Core\Form\FormStateInterface`。
- en: 'Next, we add our `telephone` field to the form so that it can be displayed
    and saved:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加我们的`telephone`字段到表单中，以便它可以显示和保存：
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We retrieve the current phone value from `system.site` so that it can be modified
    if already set.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`system.site`检索当前电话值，以便如果已经设置，则可以对其进行修改。
- en: Go to the Extend page and install the module My module that we created.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往扩展页面并安装我们创建的模块“我的模块”。
- en: Note the Basic site settings form under Configuration, and test setting the
    site telephone number:![](img/78bcb6ee-530d-47ac-8dad-96d3cad03fc9.png)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意配置下的基本站点设置表单，并测试设置站点电话号码：![图片](img/78bcb6ee-530d-47ac-8dad-96d3cad03fc9.png)
- en: 'We then need to add a submit handler in order to save the configuration for
    our new field. We will need to add a submit handler to the form and a submit handler
    callback:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加一个提交处理程序来保存我们新字段的配置。我们需要向表单添加一个提交处理程序和一个提交处理程序回调：
- en: '[PRE30]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Submit the form, and verify that the data has been saved.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交表单，并验证数据是否已保存。
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `\Drupal\system\Form\SiteInformationForm` class extends `\Drupal\Core\Form\ConfigFormBase`
    to handle the writing of form elements as individual configuration values. However,
    it does not write the values automatically to the form state. In this recipe,
    we needed to add a submit handler to manually save our added field via a procedural
    function in our `mymodule.module` file.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\system\Form\SiteInformationForm`类扩展了`\Drupal\Core\Form\ConfigFormBase`以处理将表单元素作为单个配置值写入。然而，它不会自动将值写入表单状态。在这个配方中，我们需要添加一个提交处理程序，通过在`mymodule.module`文件中的过程函数手动保存我们添加的字段。'
- en: The form array is passed by reference, allowing modifications to be made in
    the hook to alter the original data. This allows us to add an element or even
    modify existing items, such as titles or descriptions.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 表单数组是通过引用传递的，允许在钩子中修改原始数据。这使我们能够添加元素，甚至修改现有项目，如标题或描述。
- en: There's more...
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We will discuss how to add additional handlers to other forms using form alters.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论如何使用表单修改向其他表单添加额外的处理程序。
- en: Adding additional validate handlers
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加额外的验证处理程序
- en: 'Using a form alter hook, we can add additional validators to a form. The proper
    way to do this is to load the current validators and add the new one to the array
    and reset the validators in the form state:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用表单修改钩子，我们可以向表单添加额外的验证器。正确的方法是加载当前的验证器，将新的一个添加到数组中，并在表单状态中重置验证器：
- en: '[PRE31]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: First, we will receive all of the currently set validators from the form state
    as the `$validators` variable. We then append a new callback to the end of the
    array. Once the `$validators` variable has been modified, we will override the
    form state's validator array by executing the `setValidateHandlers` method.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从表单状态中接收所有当前设置的验证器，作为变量 `$validators`。然后，我们将一个新的回调函数添加到数组的末尾。一旦 `$validators`
    变量被修改，我们将通过执行 `setValidateHandlers` 方法来覆盖表单状态的验证器数组。
- en: You can also use PHP array manipulation functions to add your validators in
    different execution orders. For example, `array_unshift` will place your validator
    at the beginning of the array so that it can run first.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 PHP 数组操作函数以不同的执行顺序添加您的验证器。例如，`array_unshift` 将您的验证器放置在数组的开头，以便它首先运行。
- en: Adding additional submit handlers
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加额外的提交处理程序
- en: 'Using a form alter hook, we can add additional submit handlers to a form. The
    proper way to do this is to load the current submit handlers, add the new one
    to the array, and reset the validators in the form state:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用表单修改钩子，我们可以向表单添加额外的提交处理程序。正确的方法是加载当前的提交处理程序，将新的一个添加到数组中，并在表单状态中重置验证器：
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: First, we will receive all of the currently set submit handlers from the form
    state as the `$submit_handlers` variable. We then append a new callback to the
    end of the array.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从表单状态中接收所有当前设置的提交处理程序，作为变量 `$submit_handlers`。然后，我们将一个新的回调函数添加到数组的末尾。
- en: Once the `$submit_handlers` variable has been modified, we will override the
    form state's submit handler array by executing the `setSubmitHandlers` method.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `$submit_handlers` 变量被修改，我们将通过执行 `setSubmitHandlers` 方法来覆盖表单状态的提交处理程序数组。
- en: You can also use PHP array manipulation functions to add your callback in different
    execution orders. For example, `array_unshift` will place your callback at the
    beginning of the array so that it can run first.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 PHP 数组操作函数以不同的执行顺序添加您的回调。例如，`array_unshift` 将您的回调放置在数组的开头，以便它首先运行。
