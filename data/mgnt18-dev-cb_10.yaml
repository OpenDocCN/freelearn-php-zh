- en: Chapter 10. Creating a Product Slider Widget
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。创建产品滑块小部件
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating an empty module
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个空模块
- en: Registering helpers and blocks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册帮助器和块
- en: Creating a widget configuration file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建小部件配置文件
- en: Creating a block and the template files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建块和模板文件
- en: Creating a custom configuration parameter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义配置参数
- en: Finalizing the theming
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成主题设计
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Magento widgets are graphical interfaces to configure blocks in the frontend.
    For every widget, there is a configuration page available where you can set the
    required values for that widget.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Magento小部件是前端中配置块的图形界面。对于每个小部件，都有一个可用的配置页面，您可以在其中设置该小部件所需的所有值。
- en: When the configuration is done, you can configure the layout instructions to
    show the widget at several places in the frontend.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，您可以配置布局指令，以在多个前端位置显示小部件。
- en: In this recipe, we will create a new module where we will create our own widget.
    We will create a product slider with the products of a category that we can configure
    in the widget.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个新的模块，在这个模块中我们将创建自己的小部件。我们将创建一个产品滑块，它将展示一个类别中的产品，我们可以在小部件中配置这些产品。
- en: When we have performed the required configuration for the widget, we will finish
    the representation in the frontend. We will create a product list that we will
    style with a jQuery slider script.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为小部件完成了所需的配置后，我们将在前端完成其表示。我们将创建一个产品列表，我们将使用jQuery滑块脚本对其进行样式设计。
- en: Creating an empty module
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个空模块
- en: As we did in the previous chapter and fully explained in [Chapter 4](ch04.html
    "Chapter 4. Creating a Module"), *Creating a Module*, we will create the required
    files to create an empty module that we will extend with widget configurations
    in further chapters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中做的那样，并在[第4章](ch04.html "第4章。创建模块")中完全解释了，我们将创建创建空模块所需的所有文件，该模块将在后续章节中通过小部件配置进行扩展。
- en: We will start with an empty Magento module that we will create in this recipe.
    We will create all the required files to initialize a new module that can be used
    for the creation of a widget.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个空的Magento模块开始，我们将在本菜谱中创建它。我们将创建所有必要的文件来初始化一个新模块，该模块可用于创建小部件。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open your code editor and prepare yourselves to create a new module called `Packt_Productslider`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的代码编辑器，准备创建一个名为`Packt_Productslider`的新模块。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'When you perform the following steps, you will create an empty `Packt_Productslider`
    module:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当您执行以下步骤时，您将创建一个空的`Packt_Productslider`模块：
- en: 'Create the following folders for the module:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为该模块创建以下文件夹：
- en: '`app/code/local/`'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/`'
- en: '`app/code/local/Packt/`'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/`'
- en: '`app/code/local/Packt/Productslider/`'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Productslider/`'
- en: '`app/code/local/Packt/Productslider/etc`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Productslider/etc`'
- en: Create the module file `Packt_Productslider.xml` in the `modules` folder under
    `app/etc`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/etc`文件夹下的`modules`文件夹中创建模块文件`Packt_Productslider.xml`。
- en: 'Paste the following code into it:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码粘贴到其中：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create the configuration file for the module. This is the `config.xml` file
    that is located in the `etc` folder under `app/code/local/Packt/Productslider`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模块的配置文件。这是位于`app/code/local/Packt/Productslider`文件夹下的`etc`文件夹中的`config.xml`文件。
- en: 'Add the following content to the file:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到文件中：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Clear the cache and check whether the module is installed. You can do this by
    navigating to the configuration page, **System** | **Configuration** | **Advanced**
    | **Advanced**, and checking whether the module is on the list. Alternatively,
    you can run the command `wiz module-list` in the command line.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并检查模块是否已安装。您可以通过导航到配置页面，**系统** | **配置** | **高级** | **高级**，检查模块是否在列表中。或者，您可以在命令行中运行命令`wiz
    module-list`。
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We just created a new module with the name `Packt_Productslider`. This module
    is a custom module, so we configured it in the local code pool.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个名为`Packt_Productslider`的新模块。这是一个自定义模块，因此我们在本地代码池中进行了配置。
- en: Practically, this module does nothing, but we will extend it in the next recipes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个模块什么也不做，但我们将扩展它在下个菜谱中。
- en: Registering helpers and blocks
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册帮助器和块
- en: The widget module we will create uses a custom block. For translating strings
    in the block and in different configurations, we need to configure a helper class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的小部件模块将使用自定义块。为了在块和不同的配置中翻译字符串，我们需要配置一个帮助类。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will initialize blocks and helpers, and we will create the default helper
    for our module, just like we did in [Chapter 4](ch04.html "Chapter 4. Creating
    a Module"), *Creating a Module*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将初始化块和助手，并为我们的模块创建默认的助手，就像我们在[第4章](ch04.html "第4章。创建模块")中做的那样，*创建模块*。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The following steps describe how to configure helpers and blocks for a new module.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何为新模块配置助手和块。
- en: 'Create the following folders:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下文件夹：
- en: '`app/code/local/Packt/Productslider/Block`'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Productslider/Block`'
- en: '`app/code/local/Packt/Productslider/Helper`'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Productslider/Helper`'
- en: 'In the `config.xml` file of the module, add the following configuration under
    the `<config>` tag:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的 `config.xml` 文件中，在 `<config>` 标签下添加以下配置：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the `Data.php` file under `app/code/local/Packt/Productslider/Helper`
    and paste the following content into it:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/code/local/Packt/Productslider/Helper` 下创建 `Data.php` 文件，并将以下内容粘贴到其中：
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Clear the cache, and your blocks and helpers will be registered.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存，您的块和助手将被注册。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the previous code, we initialized blocks and helpers with the name `productslider`.
    With this configuration, it is possible to use block names such as `productslider/block_name`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用名称 `productslider` 初始化了块和助手。使用此配置，可以使用如 `productslider/block_name`
    的块名称。
- en: The helpers are also registered under the name `productslider`. We created a
    default helper, which we can call with the function `Mage::helper('productslider')`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 助手也以 `productslider` 的名称注册。我们创建了一个默认助手，我们可以使用函数 `Mage::helper('productslider')`
    来调用它。
- en: Creating a widget configuration file
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建部件配置文件
- en: 'In this recipe, we will configure a new widget type. We have to create a new
    configuration file where we will initialize the following things for the widget
    type:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将配置一个新的部件类型。我们必须创建一个新的配置文件，在其中我们将为部件类型初始化以下内容：
- en: Name of the widget (in the backend)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部件名称（在后台）
- en: Widget configuration parameters
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部件配置参数
- en: Widget block type
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部件块类型
- en: Widget templates (`.phtml` files)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部件模板（`.phtml` 文件）
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To test the widget configuration, we can navigate to the **Widgets** page under
    **CMS** in the backend to manage the widget instances.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试部件配置，我们可以导航到后端 **CMS** 下的 **Widgets** 页面来管理部件实例。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Perform the following steps to create a `widget.xml` configuration file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建 `widget.xml` 配置文件。
- en: Create the file `app/code/local/Packt/Productslider/etc/widget.xml`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `app/code/local/Packt/Productslider/etc/widget.xml`。
- en: 'Add the following code to this file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到该文件中：
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Clear your cache and check whether the configuration works.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并检查配置是否生效。
- en: At the backend, navigate to **CMS** | **Widgets**, click on the **Add New Widget
    Instance** button, and confirm that the widget is in the list, as shown in the
    following screenshot:![How to do it...](img/3329OS_10_01.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后台，导航到 **CMS** | **Widgets**，点击 **Add New Widget Instance** 按钮，并确认部件在列表中，如图所示：![如何做...](img/3329OS_10_01.jpg)
- en: Configure the widget for your frontend theme and go to the next page.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置前端主题的部件，并转到下一页。
- en: You are now on the widget configuration page. In the **Widget Options** tab,
    we will create our own widget parameters.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在在部件配置页面。在 **Widget Options** 选项卡中，我们将创建我们自己的部件参数。
- en: To create a title field that we will use in the block, we have to create a `parameters`
    tag as shown in the following code. Paste this under the `<category_product_slider>`
    tag.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个将在块中使用的标题字段，我们必须创建一个 `parameters` 标签，如下面的代码所示。将其粘贴到 `<category_product_slider>`
    标签下。
- en: '[PRE5]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Clear the cache, reload the backend page, and go to the **Widget Options** tab.
    You will see that there is a title field available, as shown in the following
    screenshot:![How to do it...](img/3329OS_10_02.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存，重新加载后台页面，并转到 **Widget Options** 选项卡。您将看到有一个标题字段可用，如图所示：![如何做...](img/3329OS_10_02.jpg)
- en: 'To show all the products of a category, we have to create a configuration where
    we can select a category. We will create a text field where we can paste the right
    category ID. To configure the field, add the following code under the `<parameters>`
    tag:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示一个类别的所有产品，我们必须创建一个可以从中选择类别的配置。我们将创建一个文本框，可以粘贴正确的类别ID。要配置该字段，请在 `<parameters>`
    标签下添加以下代码：
- en: '[PRE6]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Clear the cache and reload the page again. You will see that a second textbox
    is added to the configuration form.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载页面。您将看到配置表单中添加了第二个文本框。
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `widget.xml` file is used to define widgets in the Magento installation.
    All widget types in Magento are defined under the `<widgets>` configuration tag.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.xml` 文件用于在 Magento 安装中定义小部件。在 Magento 中，所有小部件类型都在 `<widgets>` 配置标签下定义。'
- en: Under this tag, we defined a new widget called `category_product_slider`. In
    this tag, we used the `type` attribute to define the `Block` class that the widget
    will refer to. In this case, it is `catalog/product_list`. This is the block that
    is used to render the category product list or the grid.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在此标签下，我们定义了一个名为 `category_product_slider` 的新小部件。在这个标签中，我们使用 `type` 属性定义了小部件将引用的
    `Block` 类。在这种情况下，它是 `catalog/product_list`。这是用于渲染类别产品列表或网格的块。
- en: 'Under the `<category_product_slider>` tag, we have used the following configuration
    tags:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<category_product_slider>` 标签下，我们使用了以下配置标签：
- en: '`name`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`'
- en: '`description`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`'
- en: '`parameters`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters`'
- en: The `name` tag is used for the widget type name that is used in the dropdown
    when creating a widget.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`name` 标签用于在创建小部件时在下拉菜单中使用的 widget 类型名称。'
- en: The `description` tag is for information. It is not shown in the frontend or
    backend. It is only used for providing information for the widget.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`description` 标签用于信息。它不会在前端或后端显示。它仅用于为小部件提供信息。'
- en: In the `parameters` tag, we define the configuration parameters for the widget.
    In our case, these are `name` and `category_id`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `parameters` 标签中，我们定义了小部件的配置参数。在我们的例子中，这些是 `name` 和 `category_id`。
- en: Our fields are just text fields, but we can also make use of other input fields
    such as dropdowns and checkboxes. When working with dropdown or multiselect fields,
    we can define a source model with the `<source_model>` tag.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的字段只是文本字段，但我们可以利用其他输入字段，如下拉框和复选框。当与下拉框或多选框字段一起工作时，我们可以使用 `<source_model>`
    标签定义一个源模型。
- en: Creating a block and the template files
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建块和模板文件
- en: In the previous chapters, we learned how we can configure the widget. Now it
    is time to show the widget.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了如何配置小部件。现在是时候展示小部件了。
- en: We will create a custom block where we will write a query that returns the products
    for the given category, and we will set up a configuration to use two template
    files on the widget configuration page.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个自定义块，在其中我们将编写一个查询，返回给定类别的产品，并在小部件配置页面上设置一个配置以使用两个模板文件。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will work further to create our own widget instance. Open the `widget.xml`
    file that we created in the previous recipe.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进一步工作以创建我们自己的小部件实例。打开我们在前一个菜谱中创建的 `widget.xml` 文件。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps describe how we configure a custom block with custom templates
    for the widget instance.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何为小部件实例配置一个自定义块和自定义模板。
- en: First, we will create a block class that extends the `Mage_Catalog_Block_Product_List`
    class. We do this because the behavior of that class is what we need for our widget.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个扩展 `Mage_Catalog_Block_Product_List` 类的块类。我们这样做是因为那个类的行为正是我们小部件所需要的。
- en: Create the `List.php` file under `app/code/local/Packt/Productslider/Block/Catalog/Product`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/code/local/Packt/Productslider/Block/Catalog/Product` 下创建 `List.php`
    文件。
- en: 'Add the following content to that file to initialize the class and the functions
    that we will configure:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向该文件添加以下内容以初始化我们将要配置的类和函数：
- en: '[PRE7]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Configure the block that uses the class we previously created. We do this by
    changing the `type` attribute in the `<category_product_slider>` tag. Change the
    attribute to `productslider/catalog_product_list`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置使用我们之前创建的类的块。我们通过更改 `<category_product_slider>` 标签中的 `type` 属性来实现。将属性更改为 `productslider/catalog_product_list`。
- en: When the block class is created, it is time to create templates for the block.
    In this widget, we will use two templates. The first template comprises the image,
    title, and price of the products. The second template only shows the image and
    the **Add To Cart** button.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当块类创建完成后，是时候为该块创建模板了。在这个小部件中，我们将使用两个模板。第一个模板包含产品的图片、标题和价格。第二个模板只显示图片和“添加到购物车”按钮。
- en: Create the templates in the `category-product-slider` folder under `app/design/frontend/base/default/template/productslider`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/design/frontend/base/default/template/productslider` 文件夹下的 `category-product-slider`
    文件夹中创建模板。
- en: 'Create the folder and add the following files to this folder:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件夹并添加以下文件到该文件夹：
- en: '`list.phtml`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list.phtml`'
- en: '`teaser.phtml`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`teaser.phtml`'
- en: 'In the `list.phtml` file, add the following content:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `list.phtml` 文件中，添加以下内容：
- en: '[PRE8]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `teaser.phtml` file, add the following content:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `teaser.phtml` 文件中，添加以下内容：
- en: '[PRE9]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Configure the widget configuration page so that you can choose your template.
    We can do this by adding the following as a child of the `<parameters>` tag:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置小部件配置页面，以便您可以选择模板。我们可以通过将以下内容添加为`<parameters>`标签的子标签来完成：
- en: '[PRE10]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Clear the cache and go to the widget configuration page. When you click on **Add
    Layout Update**, you can select the page where the widget will display. The last
    dropdown is the template you can use for the widget, as shown in the following
    screenshot:![How to do it...](img/3329OS_10_03.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并转到小部件配置页面。当您点击**添加布局更新**时，您可以选择小部件将显示的页面。最后一个下拉菜单是您可以为小部件使用的模板，如下面的截图所示：![如何操作...](img/3329OS_10_03.jpg)
- en: Tip
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Make sure you choose the right theme to configure the widget. We will use the
    default / default theme to configure the widget, so make sure your shop is using
    the same theme.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您选择正确的主题来配置小部件。我们将使用默认的/默认主题来配置小部件，所以请确保您的商店使用的是相同的主题。
- en: Complete the form to place a widget instance on the home page.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成表单以在主页上放置小部件实例。
- en: When you clear the cache, the widget will appear on the home page with the content
    of the chosen template file.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您清除缓存时，小部件将带有所选模板文件的内容出现在主页上。
- en: When you enable developer hints, you will see that our previously created custom
    block is used as shown in the following screenshot:![How to do it...](img/3329OS_10_04.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您启用开发者提示时，您将看到我们之前创建的自定义块被使用，如下面的截图所示：![如何操作...](img/3329OS_10_04.jpg)
- en: Tip
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can enable developer hints in the backend by navigating to the**Developer**
    page under **System** | **Configuration** | **Advanced** in the **Debug** section.
    Be sure to configure it on the website or store a view scope.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过在**系统** | **配置** | **高级**下的**调试**部分导航到**开发者**页面来在后台启用开发者提示。务必在网站或存储视图范围内进行配置。
- en: You can also run the wiz command `wiz devel-showhints yes` to enable the hints.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还可以运行`wiz devel-showhints yes`命令来启用提示。
- en: 'The last thing we will do is to create a loop that shows the name of the products.
    Add the following code to the `list.phtml` file:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们最后要做的就是创建一个循环，显示产品的名称。将以下代码添加到`list.phtml`文件中：
- en: '[PRE11]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Configure the widget to use the right template and a valid category ID. After
    that, reload the frontend, and you will see something like the following screenshot:![How
    to do it...](img/3329OS_10_05.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置小部件以使用正确的模板和有效的类别ID。之后，重新加载前端，您将看到以下截图所示的内容：![如何操作...](img/3329OS_10_05.jpg)
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can find the category ID while navigating to a category in the backend.
    Navigate to **Catalog** | **Manage Categories**, select any category, and you
    will see the ID near the name.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在后端导航到类别时找到类别ID。导航到**目录** | **管理类别**，选择任何类别，您将看到名称附近的ID。
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created a custom block class for the widget. By configuring the `type` attribute
    of the widget, all instances of this widget will use a block of the type `productslider/catalog_product_list`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为小部件创建了一个自定义的块类。通过配置小部件的`type`属性，所有此类小部件实例都将使用类型为`productslider/catalog_product_list`的块。
- en: When we have a look at this class, we see that the class will extend the `Mage_Catalog_Block_Product_List`
    class, which is the block that is used to render product lists for a category.
    We use this class so we can use the standard functions instead of writing our
    own.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看这个类时，我们看到这个类将扩展`Mage_Catalog_Block_Product_List`类，这是用于为类别渲染产品列表的块。我们使用这个类，这样我们就可以使用标准函数而不是编写自己的函数。
- en: The next thing we did was to make it possible to choose two templates for the
    widgets. This is done by configuring the `<template>` parameter on the widget.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要做的是使小部件可以选择两个模板。这是通过在配置小部件的`<template>`参数上完成的。
- en: The template is configured in the **Layout Update** section of the widget configuration
    page. This form is a graphical implementation of the layout XML configuration
    in the template files.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 模板在配置小部件页面的**布局更新**部分进行配置。此表单是模板文件中布局XML配置的图形实现。
- en: When we save the widget, Magento will create a layout update in the database
    for the widget. This layout update is stored in the table `core_layout_update`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存小部件时，Magento将在数据库中为小部件创建一个布局更新。此布局更新存储在`core_layout_update`表中。
- en: When we look at the template file, we see the `$this->getTitle()` function is
    used to fill the title tag of the block. This function will output the data that
    is set for the `title` parameter on the block.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看模板文件时，我们看到`$this->getTitle()`函数用于填充块的标题标签。此函数将输出为块的`title`参数设置的任何数据。
- en: In the configuration, we created a `<title>` configuration which will do a `setData('title')`
    on the background when the block is created.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置中，我们创建了一个`<title>`配置，当块创建时将在后台执行`setData('title')`。
- en: The second configuration parameter is the `<category_id>` field. When the category
    ID is set on this block, the `$this->getLoadedProductCollection()` function will
    return the products of the given category ID, which is just the thing we need
    for this case.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个配置参数是`<category_id>`字段。当在这个块上设置分类ID时，`$this->getLoadedProductCollection()`函数将返回给定分类ID的产品，这正是我们在这个情况下需要的。
- en: Creating a custom configuration parameter
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义配置参数
- en: The widget is created. It shows up in the frontend and the right products are
    shown for the given category ID.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件已创建。它在前端显示，并为给定的分类ID显示了正确的产品。
- en: To configure the category ID, we have to copy it from the category page and
    paste it in the textbox. For better usability, we will create a custom widget
    in the configuration field where we can select a category from a pop-up window.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置分类ID，我们必须从分类页面复制它并粘贴到文本框中。为了提高可用性，我们将在配置字段中创建一个自定义小部件，我们可以从弹出窗口中选择一个分类。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To prepare yourselves, look at how you can configure the category for the **Catalog
    Category Link** widget in the backend. We will configure the same pop-up window
    for the widget that we created in previous recipes.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做好准备，查看如何在后端为**目录分类链接**小部件配置分类。我们将为之前菜谱中创建的小部件配置相同的弹出窗口。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to and you can create a custom configuration parameter:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，你可以创建一个自定义配置参数：
- en: When we look at the **Catalog Category Link** widget, we see that they use a
    custom widget to select the category—we will do the same for our module.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们查看**目录分类链接**小部件时，我们看到它们使用一个自定义小部件来选择分类——我们将在我们的模块中做同样的事情。
- en: 'In the `widget.xml` file, replace the `<category_id>` configuration parameter
    with the following code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`widget.xml`文件中，将`<category_id>`配置参数替换为以下代码：
- en: '[PRE12]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Clear the cache and reload the widget configuration page. You will see something
    like the following screenshot when you click on the configuration parameter button:![How
    to do it...](img/3329OS_10_06.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载组件配置页面。当你点击配置参数按钮时，你会看到如下截图：![如何操作...](img/3329OS_10_06.jpg)
- en: When you select a category, save the widget, clear the cache, and reload the
    home page, and you will see that the widget shows the wrong products.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你选择一个分类，保存小部件，清除缓存，并重新加载主页，你会看到小部件显示了错误的产品。
- en: When you inspect the **Select Category …** button and navigate to the hidden
    field that is some elements above, you will see that the value is similar to `category/<category_id>`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你检查**选择分类…**按钮并导航到一些元素以上的隐藏字段时，你会看到其值类似于`category/<category_id>`。
- en: 'The widget requires the category ID, that is, the number after the slash. We
    now have the category path that is used to generate URLs. To fix this problem,
    we can perform the following:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小部件需要分类ID，即斜杠后面的数字。我们现在有了用于生成URL的分类路径。为了解决这个问题，我们可以执行以下操作：
- en: Get the ID from the path with string functions
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字符串函数从路径中获取ID
- en: Make sure a proper ID is set in the widget configuration page
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在组件配置页面设置了正确的ID
- en: We will adapt the second method because it is the most stable way.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将采用第二种方法，因为它是最稳定的方法。
- en: To fix the issue, we have to update some code in the category widget chooser
    that is shown in the widget configuration page. We will create a new class that
    extends the current widget chooser. We will add the class to the `Widget` folder
    under `app/code/local/Packt/Productslider/Block/Adminhtml/Category`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要修复这个问题，我们必须更新在组件配置页面显示的分类小部件选择器中的某些代码。我们将创建一个新的类，该类扩展了当前的小部件选择器。我们将把这个类添加到`app/code/local/Packt/Productslider/Block/Adminhtml/Category`目录下的`Widget`文件夹中。
- en: 'In this folder, create a file called `Chooser.php` with the following content:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件夹中，创建一个名为`Chooser.php`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the previous step, we created a new block class to handle the return value
    of the chosen category. In this step, we will configure the configuration page
    to use the new block. In the `widget.xml` file of the module, change the tag `parameters/category_id/helper_block/type`
    from `adminhtml/catalog_category_widget_chooser` to `productslider/adminhtml_catalog_category_widget_chooser`.
    The `widget.xml` file will now appear as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步中，我们创建了一个新的块类来处理所选分类的返回值。在这一步中，我们将配置配置页面使用新的块。在模块的`widget.xml`文件中，将`parameters/category_id/helper_block/type`标签从`adminhtml/catalog_category_widget_chooser`更改为`productslider/adminhtml_catalog_category_widget_chooser`。`widget.xml`文件现在将如下所示：
- en: '[PRE14]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We need a custom controller action to handle the AJAX call of the pop-up window.
    To initialize admin controllers for the module, add the following code to the
    `config.xml` file of the module. Paste it as a child of the `<config>` tag:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个自定义控制器操作来处理弹出窗口的AJAX调用。为了初始化模块的admin控制器，将以下代码添加到模块的`config.xml`文件中。将其粘贴为`<config>`标签的子标签：
- en: '[PRE15]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `Category` folder under `app/code/local/Packt/Productslider/Adminhtml/Productslider/Catalog`,
    create a `WidgetController.php` file with the following content in it:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/code/local/Packt/Productslider/Adminhtml/Productslider/Catalog`下的`Category`文件夹中，创建一个`WidgetController.php`文件，并在其中包含以下内容：
- en: '[PRE16]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Clear the cache and load the configuration page. Select a category in the pop-up
    window and inspect the hidden field as we did in step 5\. You will see that the
    category ID is set as a number instead of a path.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并加载配置页面。在弹出窗口中选择一个分类，并检查隐藏字段，就像我们在第5步中所做的那样。你会看到分类ID被设置为数字而不是路径。
- en: Save the widget, clear the cache, and reload the home page. You will see that
    the right products of the configured category are shown.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存小部件，清除缓存，并重新加载主页。你会看到显示的是配置分类的正确产品。
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a custom configuration parameter. We did this for
    a better user experience.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们创建了一个自定义配置参数。我们这样做是为了更好的用户体验。
- en: First, we configured an existing configuration widget to show a category pop-up
    window when clicking on the field. This was not so difficult because the only
    workload is to configure the right settings in the `widget.xml` file.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们配置了一个现有的配置小部件，在点击字段时显示一个分类弹出窗口。这并不困难，因为唯一的工作量是在`widget.xml`文件中配置正确的设置。
- en: But this widget was not exactly what we were looking for. The frontend representation
    was OK, but in the background, a wrongly formatted category ID was returned.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个小部件并不是我们想要的。前端表示是好的，但在后台，返回了一个格式错误的分类ID。
- en: To solve this, we created a custom configuration field that extends the previous
    configuration field. We only changed the required things to format the right output.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们创建了一个自定义配置字段，它扩展了之前的配置字段。我们只更改了必要的部分以格式化正确的输出。
- en: Because the widget is working with an AJAX call, we had to create a custom controller
    that extends the standard one to show the right block. In that controller, we
    included the relative path of the parent controller because this class is not
    in the autoloader of Magento.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因为小部件正在使用AJAX调用，我们不得不创建一个自定义控制器，它扩展了标准控制器以显示正确的块。在那个控制器中，我们包含了父控制器的相对路径，因为这个类不在Magento的自动加载器中。
- en: There's more…
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We configured the widget parameter in this recipe to show how to create a custom
    HTML output for a configuration field.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个配方中配置了小部件参数，以展示如何为配置字段创建自定义HTML输出。
- en: 'Technically, you can do the most impossible things with a configuration field;
    however, the only thing you need to know is that you have to set the configuration
    value in an input field that has the naming convention: `<input name="parameter[<parameter_name>]"
    />`.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 技术上，你可以用配置字段做最不可能的事情；然而，你需要知道的是，你必须在一个具有命名约定`<input name="parameter[<parameter_name>]"
    />`的输入字段中设置配置值。
- en: Replace the `<parameter_name>` tag with the name of your custom parameter and
    the form will handle your configuration parameter just as it handles all the others.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将`<parameter_name>`标签替换为你的自定义参数名称，表单将像处理所有其他参数一样处理你的配置参数。
- en: Finalizing the theming
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成主题化
- en: The widget we made in the frontend does not invite us to buy some products.
    It is just a list with the names of the products from a category.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前端制作的小部件不会邀请我们购买一些产品。它只是一个包含产品名称的分类列表。
- en: In this recipe, we will finalize the theming of the widget. We will create an
    HTML output that shows an image, name, and price of the given products.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将完成小部件的主题设计。我们将创建一个 HTML 输出，显示给定产品的图片、名称和价格。
- en: With a jQuery plugin, we will convert the HTML output to a slider so we can
    scroll through the products.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 插件，我们将 HTML 输出转换为轮播图，以便我们可以滚动浏览产品。
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Search for a good jQuery carousel on the Internet. In this recipe, we will use
    [http://caroufredsel.dev7studios.com/](http://caroufredsel.dev7studios.com/).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上搜索一个好的 jQuery 轮播插件。在这个菜谱中，我们将使用 [http://caroufredsel.dev7studios.com/](http://caroufredsel.dev7studios.com/)。
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps describe the last set of actions to complete the widget:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了完成小部件的最后一系列操作：
- en: 'Let''s generate a good HTML that is usable for the jQuery plugin. Add the following
    code to the `list.phtml` template:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们生成一个适用于 jQuery 插件的良好 HTML。将以下代码添加到 `list.phtml` 模板中：
- en: '[PRE17]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a CSS file to set the required styling. Add a `productslider.css` file
    to the `css` folder under `skin/frontend/base/default` with the following content:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 CSS 文件以设置所需的样式。在 `skin/frontend/base/default` 下的 `css` 文件夹中添加一个 `productslider.css`
    文件，内容如下：
- en: '[PRE18]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the CSS file to the Magento head by adding the following code. With this
    code, the CSS file is only added when the widget is configured on a page. `app/code/local/Packt/Productslider/Block/Catalog/Product/List.php`
    in the `_prepareLayout()` function:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下代码将 CSS 文件添加到 Magento 的头部。使用此代码，CSS 文件仅在页面上配置了小部件时才被添加。在 `_prepareLayout()`
    函数中的 `app/code/local/Packt/Productslider/Block/Catalog/Product/List.php`：
- en: '[PRE19]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save all the files, clear the cache, and reload the frontend. You will see a
    styled output that we can use to convert to a slider.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件，清除缓存，并重新加载前端。你将看到一个样式化的输出，我们可以将其转换为滑块。
- en: The next step is to add a jQuery carousel script to the product list. We will
    use the script [http://caroufredsel.dev7studios.com/](http://caroufredsel.dev7studios.com/).
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将 jQuery 轮播脚本添加到产品列表中。我们将使用以下脚本 [http://caroufredsel.dev7studios.com/](http://caroufredsel.dev7studios.com/)。
- en: Download the source files, unzip it, and paste the folder and content to the
    folder `skin/frontend/base/default/js`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载源文件，解压，并将文件夹和内容粘贴到 `skin/frontend/base/default/js` 文件夹中。
- en: 'Link the CSS and JavaScript files by updating the `_prepareLayout()` function
    in the `app/code/local/Packt/Productslider/Block/Catalog/Product/List.php` file.
    Replace the function with the following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过更新 `app/code/local/Packt/Productslider/Block/Catalog/Product/List.php` 文件中的
    `_prepareLayout()` 函数来链接 CSS 和 JavaScript 文件。用以下代码替换函数：
- en: '[PRE20]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Make sure jQuery is enabled in your theme. You can find instructions on it in
    [Chapter 2](ch02.html "Chapter 2. Theming"), *Theming*.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你的主题中启用了 jQuery。你可以在 [第 2 章](ch02.html "第 2 章。主题") *主题* 中找到有关说明。
- en: 'The last step is to initialize the script for the product list element. Add
    the following JavaScript code at the bottom of the `list.phtml` template:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是为产品列表元素初始化脚本。将以下 JavaScript 代码添加到 `list.phtml` 模板的底部：
- en: '[PRE21]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Clear the cache and reload the frontend. You''re done and the output will be
    as shown in the following screenshot:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载前端。你已经完成了，输出结果将如以下截图所示：
- en: '![How to do it...](img/3329OS_10_07.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3329OS_10_07.jpg)'
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the initial steps, we created a good HTML output for the template. This output
    generates a scaled image, title, and price for every product in the loop.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始步骤中，我们为模板创建了一个良好的 HTML 输出。此输出为循环中的每个产品生成缩放图像、标题和价格。
- en: To theme the HTML output, we used a CSS file that will only be included when
    a widget is configured for the given page. The function `_prepareLayout()` is
    called when all blocks are initialized. In this function, we add a CSS file and
    later a JavaScript file to the head of the website.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了主题化 HTML 输出，我们使用了一个 CSS 文件，该文件仅在为给定页面配置了小部件时才被包含。当所有块初始化时，会调用 `_prepareLayout()`
    函数。在这个函数中，我们添加一个 CSS 文件，稍后添加一个 JavaScript 文件到网站的头部。
- en: To show the product slider with animations, we added some JavaScript code that
    adds the slider to the product list.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示带有动画的产品滑块，我们添加了一些 JavaScript 代码，将滑块添加到产品列表中。
