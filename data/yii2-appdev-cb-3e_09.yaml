- en: Chapter 9. Performance Tuning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。性能调整
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Following best practices
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循最佳实践
- en: Speeding up session handling
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加快会话处理
- en: Using cache dependencies and chains
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓存依赖和链
- en: Profiling an application with Yii
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Yii 分析应用程序
- en: Leveraging HTTP caching
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 HTTP 缓存
- en: Combining and minimizing assets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并和最小化资源
- en: Running Yii2 on HHVM
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 HHVM 上运行 Yii2
- en: Yii is one of the fastest frameworks available. Nevertheless, when developing
    and deploying an application, it is good to have some extra performance for free,
    and to follow the best practices for the application itself. In this chapter,
    you will see how to configure Yii to gain extra performance. In addition, you
    will learn some best practices for developing an application that will run smoothly
    until you have very high loads.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 是可用的最快框架之一。尽管如此，在开发和部署应用程序时，拥有一些额外的免费性能以及遵循应用程序自身的最佳实践是很好的。在本章中，您将了解如何配置
    Yii 以获得额外的性能。此外，您还将学习一些最佳实践，以开发一个即使在非常高的负载下也能平稳运行的应用程序。
- en: Following best practices
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遵循最佳实践
- en: In this recipe, you will see how to configure Yii2 for the best performance
    and some additional principles of building responsive applications. These principles
    are both general and Yii-related. Therefore, we will be able to apply some of
    these even without using Yii2.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将了解如何配置 Yii2 以获得最佳性能以及构建响应式应用的一些附加原则。这些原则既普遍又与 Yii 相关。因此，我们甚至在没有使用 Yii2
    的情况下也能应用其中的一些。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Composer 包管理器创建一个新的 `yii2-app-basic` 应用程序，如官方指南中所述 [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html)。
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Update your PHP to the latest stable version. Major releases of PHP may bring
    significant performance improvements. Turn off the debug mode and set the `prod`
    environment. This can be done by editing `web/index.php` as follows:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的 PHP 更新到最新稳定版本。PHP 的大版本发布可能会带来显著的性能改进。关闭调试模式并设置 `prod` 环境。这可以通过编辑 `web/index.php`
    来完成，如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: In the `yii2-app-advanced` application skeleton, you can use the
    shell command `php init` and opt production environment for loading optimized
    `index.php` and configuration files.'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：在 `yii2-app-advanced` 应用程序骨架中，您可以使用 shell 命令 `php init` 并选择生产环境来加载优化的
    `index.php` 和配置文件。'
- en: 'Enable the `cache` component:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 `cache` 组件：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can use any cache storage instead of `FileCache`. Also, you can register
    multiple cache application components and use `Yii::$app->cache` and `Yii::$app->cache2`
    for different data types:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用任何缓存存储而不是 `FileCache`。您还可以注册多个缓存应用程序组件，并使用 `Yii::$app->cache` 和 `Yii::$app->cache2`
    来处理不同类型的数据：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The framework uses the `cache` component by default in its own classes.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 框架默认在其自身类中使用 `cache` 组件。
- en: 'Enable table schema caching for the `db` component as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式启用 `db` 组件的表模式缓存：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Use plain arrays instead of Active Record objects for listing sets of elements:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列出元素集合时，使用纯数组而不是 Active Record 对象：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Use `each()` instead of `all()` in `foreach` for a large count of results:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理大量结果时，使用 `each()` 而不是 `all()` 在 `foreach` 中：
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Because Composer''s autoloader is used to include most third-party class files,
    you should consider optimizing it by executing the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 Composer 的自动加载器用于包含大多数第三方类文件，您应该考虑通过执行以下命令来优化它：
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When `YII_DEBUG` is set to `false`, Yii turns OFF all the trace level logging
    and uses less error handling code. Also, when you set `YII_ENV` to `prod` your
    application does not load Yii and Debug panel modules.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `YII_DEBUG` 设置为 `false` 时，Yii 关闭所有跟踪级别的日志记录并使用较少的错误处理代码。此外，当您将 `YII_ENV` 设置为
    `prod` 时，您的应用程序不会加载 Yii 和调试面板模块。
- en: 'Setting `schemaCachingDuration` to a number of seconds allows caching the database
    schema used by Yii''s Active Record. This is highly recommended for production
    servers and it significantly improves the Active Record performance. In order
    for it to work, you need to properly configure the `cache` component as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `schemaCachingDuration` 设置为秒数，允许缓存 Yii 的 Active Record 使用的数据库模式。这对于生产服务器来说非常推荐，并且它可以显著提高
    Active Record 的性能。为了使其正常工作，您需要正确配置 `cache` 组件，如下所示：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Enabling the cache also has a positive effect on other Yii components. For example,
    Yii router or urlManager starts to cache routes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 启用缓存也会对其他Yii组件产生积极影响。例如，Yii路由器或urlManager开始缓存路由。
- en: Of course, you can get into a situation where the preceding settings will not
    help to achieve a sufficient performance level. In most cases, it means that either
    the application itself is a bottleneck or you need more hardware.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能会遇到前述设置无法帮助达到足够性能水平的情况。在大多数情况下，这意味着应用程序本身是瓶颈，或者你需要更多的硬件。
- en: '**Server-side performance is just a part of the big picture**: Server-side
    performance is only one of the things that affect the overall performance. By
    optimizing the client side such as serving CSS, images, and JavaScript files,
    proper caching and minimizing the amount of HTTP-requests can give a good visual
    performance gain even without optimizing the PHP code.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器端性能只是大局的一部分**：服务器端性能只是影响整体性能的因素之一。通过优化客户端，如提供CSS、图像和JavaScript文件，适当的缓存以及最小化HTTP请求的数量，即使不优化PHP代码，也能获得良好的视觉性能提升。'
- en: '**Things to be done without using Yii**: Some things are best done without
    Yii. For example, image resizing on-the-fly is better in a separate PHP script
    in order to avoid the extra overhead.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无需使用Yii完成的事项**：有些事情最好不用Yii来完成。例如，为了避免额外的开销，动态图像缩放最好在单独的PHP脚本中完成。'
- en: '**Active Record versus Query Builder and SQL**: Use Query Builder or SQL in
    performance-critical application parts. Generally, AR is most useful when adding
    and editing records, as it adds a convenient validation layer, and is less useful
    when selecting records.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Active Record与查询构建器和SQL的比较**：在性能关键的应用程序部分使用查询构建器或SQL。通常，AR在添加和编辑记录时最有用，因为它添加了一个方便的验证层，而在选择记录时则不太有用。'
- en: '**Always check for slow queries first**: Database can become a bottleneck in
    a second if a developer accidentally forgets to add an index to a table that is
    being read often or vice versa, or adds too many indexes to a table we are writing
    to very often. The same goes for selecting unnecessary data and unneeded JOINs.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首先检查慢查询**：如果开发者不小心忘记为经常读取的表添加索引，或者相反，或者为经常写入的表添加过多的索引，数据库可能会在瞬间成为瓶颈。同样，选择不必要的数据和不必要的连接操作也会导致这种情况。'
- en: '**Cache or save results of heavy processes**: If you can avoid running a heavy
    process in every page load, it is better to do so. For example, it is a good practice
    to save or cache results of parsing the markdown text, purify it (this is a very
    resource-intensive process) once, and then to use the ready-to-display HTML.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存或保存重处理的结果**：如果你可以避免在每次页面加载时运行重处理过程，那就更好了。例如，保存或缓存解析Markdown文本的结果，净化它（这是一个非常耗资源的处理过程）一次，然后使用准备好的可显示HTML。'
- en: '**Handling too much processing**: Sometimes there is too much processing to
    be handled immediately. It can be building complex reports or simply sending e-mails
    (if your project is heavily loaded). In this case, it is better to put it into
    a queue and process it later using cron or other specialized tools.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理过多的处理**：有时需要立即处理过多的处理。这可能包括构建复杂的报告或简单地发送电子邮件（如果你的项目负载很重）。在这种情况下，最好将其放入队列中，稍后使用cron或其他专用工具进行处理。'
- en: See also
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information about performance tuning and caching refer to the following
    URLs:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于性能调整和缓存的信息，请参考以下链接：
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)'
- en: Speeding up session handling
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加快会话处理
- en: 'Native session handling in PHP is fine in most cases. There are at least two
    possible reasons why you will want to change the way sessions are handled:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，PHP的本地会话处理是不错的。至少有两个可能的原因让你想要改变会话处理的方式：
- en: When using multiple servers, you need to have common session storage for both
    servers.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用多个服务器时，你需要为两个服务器都拥有共同的会话存储。
- en: Default PHP sessions use files, so the maximum performance possible is limited
    by disk I/O.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的PHP会话使用文件，因此可能的最大性能受限于磁盘I/O。
- en: Default PHP sessions are blocking concurrent session storages. In this recipe,
    we will see how to use efficient storage for Yii sessions.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认PHP会话会阻塞并发会话存储。在这个菜谱中，我们将看到如何为Yii会话使用高效的存储。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html),
    and install the Memcache server and the `memcache` PHP extension.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，如官方指南[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)中所述，并安装Memcache服务器和`memcache`
    PHP扩展。
- en: How to do it…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We will stress-test the website using the Apache `ab` tool. It is distributed
    with Apache binaries, so if you are using Apache, you will find it inside the
    `bin` directory.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Apache `ab`工具对网站进行压力测试。它与Apache二进制文件一起分发，因此如果您使用Apache，您可以在`bin`目录中找到它。
- en: 'Run the following command replacing your website with the actual hostname you
    are using:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，将您的网站替换为您实际使用的实际主机名：
- en: '[PRE8]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will send 1,000 requests, five at a time, and will output stats as follows:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将发送1,000个请求，每次5个，并将输出以下统计信息：
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We are interested in the requests-per-second metric. The number means that the
    website can process 91.24 requests per second if there are five requests at a
    time.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们对每秒请求数的指标感兴趣。这个数字意味着，如果每次有5个请求，网站可以每秒处理91.24个请求。
- en: Note
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that debuging is not turned off since we are interested in changes to the
    session handling speed.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意调试没有关闭，因为我们对会话处理速度的变化感兴趣。
- en: 'Now add the following to the `/config/web.php` components section:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将以下内容添加到`/config/web.php`组件部分：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run `ab` again with the same settings. This time, you should get better results.
    In my case, it was 139.07 requests per second. This means `Memcache`, as a session
    handler, performed 52% better than the default file-based session handler.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的设置再次运行`ab`。这次，您应该得到更好的结果。在我的情况下，是每秒139.07个请求。这意味着作为会话处理器的`Memcache`比默认的基于文件的会话处理器性能提高了52%。
- en: Note
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't rely on the exact results provided here. It all depends on software versions,
    settings, and hardware used. Always try to run all tests yourself in an environment
    where you are going to deploy your application.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要依赖于这里提供的确切结果。这完全取决于软件版本、设置和使用的硬件。始终尝试在自己的部署环境中运行所有测试。
- en: You can get a significant performance gain by choosing the right session handling
    backend. Yii supports more caching backends out-of-the-box, including WinCache,
    XCache, and Zend data cache, which comes with the Zend Server. Moreover, you can
    implement your own cache backend to use fast noSQL storage, such as Redis.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择合适的会话处理后端，您可以获得显著的性能提升。Yii支持更多开箱即用的缓存后端，包括WinCache、XCache和与Zend Server一起提供的Zend数据缓存。此外，您可以实现自己的缓存后端以使用快速noSQL存储，如Redis。
- en: How it works…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: By default, Yii uses native PHP sessions; this means that the filesystem is
    used in most cases. A filesystem cannot deal with high concurrency efficiently.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Yii使用原生PHP会话；这意味着在大多数情况下使用文件系统。文件系统无法有效地处理高并发。
- en: 'Memcache or other platforms perform fine in the following situation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下情况下，Memcache或其他平台表现良好：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding config section, we instruct Yii to use `CacheSession` as a
    session handler. With this component, we can delegate session handling to the
    cache component specified in `cache`. This time we are using `MemCache`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配置部分中，我们指导Yii使用`CacheSession`作为会话处理器。使用此组件，我们可以将会话处理委托给`cache`中指定的缓存组件。这次我们使用`MemCache`。
- en: When using a memcached backend, you should take into account the fact that when
    using these solutions the application user can possibly lose the session if the
    maximum cache capacity is reached.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用memcached后端时，你应该考虑到，在使用这些解决方案时，如果达到最大缓存容量，应用程序用户可能会丢失会话。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that, when using a cache backend for a session, you cannot rely on a session
    as a temporary data storage, since then there will be no memory to store more
    data in memcached. In such a case, this will just purge all data or delete some
    of it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当使用会话的缓存后端时，您不能依赖于会话作为临时数据存储，因为这样就没有内存来存储更多的数据在memcached中。在这种情况下，这将只是清除所有数据或删除其中的一部分。
- en: If you are using multiple servers, you cannot use file storage. There is no
    way to share the session data between servers. In the case of memcached, it is
    easy because it can be easily accessed from as many servers as you want.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用多个服务器，你不能使用文件存储。服务器之间无法共享会话数据。在memcached的情况下，这很容易，因为它可以从你想要的任意多个服务器上轻松访问。
- en: 'Also, for sharing the session data you can use `DbSession`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了共享会话数据，你可以使用`DbSession`：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, create a new table in your database:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的数据库中创建一个新的表：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more…
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: It is a good idea to close the session as soon as possible. If you're not going
    to store anything in the session during the current request, you can even close
    it at the very beginning of your controller action. This way, even when using
    files as storage your application should be fine.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尽快关闭会话是个好主意。如果你在当前请求中不打算在会话中存储任何内容，你甚至可以在控制器动作的非常开始时就关闭它。这样，即使使用文件作为存储，你的应用程序也应该没问题。
- en: 'Use the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information about performance and caching refer to the following URLs:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 关于性能和缓存的更多信息，请参考以下URL：
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)'
- en: Using cache dependencies and chains
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用缓存依赖和链
- en: Yii supports many cache backends, but what really makes the Yii cache flexible
    is the dependency and dependency chaining support. There are situations when you
    cannot simply cache data for an hour because the information cached can be changed
    at any time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Yii支持许多缓存后端，但真正使Yii缓存灵活的是依赖和依赖链支持。有些情况下，你不能简单地缓存数据一小时，因为缓存的信息可能会随时更改。
- en: In this recipe, we will see how to cache a whole page and still always get fresh
    data when it is updated. The page will be of the dashboard-type and will show
    the five latest articles added and a total calculated for an account.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何缓存整个页面，并且在更新时仍然总是获取新鲜数据。页面将是仪表板类型的，将显示最近添加的五篇文章以及一个账户的总数。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that an operation cannot be edited as it is added, but an article can be.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，操作一旦添加就无法编辑，但文章可以编辑。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Activate the caching component in `config/web.php` as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config/web.php`中按照以下方式激活缓存组件：
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Set up a fresh database and configure it into `config/db.php`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config/db.php`中设置一个新的数据库并配置它。
- en: 'Run the following migration:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下迁移：
- en: '[PRE16]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Generate models for the account and article tables using Yii.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Yii生成账户和文章表的模型。
- en: 'Create `protected/controllers/DashboardController.php` as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`protected/controllers/DashboardController.php`如下：
- en: '[PRE17]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create `views/dashboard/index.php` as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`views/dashboard/index.php`如下：
- en: '[PRE18]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run `dashboard/random-operation` and `dashboard/random-article` several times.
    Then, run `dashboard/index` and you should see a screen similar to the one shown
    in the following screenshot:![Getting ready](img/image00499.jpeg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`dashboard/random-operation`和`dashboard/random-article`几次。然后，运行`dashboard/index`，你应该会看到一个类似于以下截图的屏幕：![准备就绪](img/image00499.jpeg)
- en: Click on the number of database queries in the debug panel at the bottom of
    the page:![Getting ready](img/image00508.jpeg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的调试面板中的数据库查询数量：![准备就绪](img/image00508.jpeg)
- en: 'See a query list:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看查询列表：
- en: '![Getting ready](img/image00516.jpeg)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![准备就绪](img/image00516.jpeg)'
- en: How to do it…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Carry out the following steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'We need to modify the controller code as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要修改控制器代码如下：
- en: '[PRE19]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That is it. Now, after loading `dashboard/index` several times, you will get
    only one simple query in the latest snapshot, as shown in the following screenshot:![How
    to do it…](img/image00483.jpeg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些了。现在，在加载`dashboard/index`几次之后，你将在最新的快照中只得到一个简单的查询，如图所示：![如何操作…](img/image00483.jpeg)
- en: 'Also, try to run either `dashboard/random-operation` or `dashboard/random-article`
    and refresh `dashboard/index` after that. The data should change as follows:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，尝试运行`dashboard/random-operation`或`dashboard/random-article`，然后刷新`dashboard/index`。数据应该如下变化：
- en: '![How to do it…](img/image00533.jpeg)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00533.jpeg)'
- en: How it works…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In order to achieve maximum performance while doing minimal code modification,
    we use a full-page cache using a filter as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在最小化代码修改的同时实现最佳性能，我们使用以下过滤器实现全页缓存：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding code means that we apply a full-page cache to the `index` action.
    The page will be cached for a year and the cache will refresh if one of the dependency
    data changes. Therefore, in general, the dependency works as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码表示我们将全页缓存应用于`index`操作。页面将被缓存一年，如果依赖数据中的任何一个发生变化，缓存将刷新。因此，一般来说，依赖的工作方式如下：
- en: The first run gets the fresh data as described in the dependency, saves it for
    future reference, and updates the cache
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次运行时，获取依赖中描述的新数据，保存以供将来参考，并更新缓存
- en: It gets the fresh data as described in dependency, gets the saved data, and
    then compares the two
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它获取依赖中描述的新数据，获取保存的数据，然后比较两者
- en: If they are equal, it uses the cached data
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它们相等，它将使用缓存数据
- en: If not, it updates the cache, uses the fresh data, and saves the fresh dependency
    data for future reference
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不是，它将更新缓存，使用新鲜数据，并保存新鲜依赖数据以供将来参考
- en: In our case, two dependency types are used—tag and DB. A tag dependency marks
    data with the custom string tag and checks it to decide if we need to invalidate
    the cache, while a DB dependency uses the SQL query result for the same purpose.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，使用了两种依赖类型——标签和数据库。标签依赖通过自定义字符串标签标记数据，并检查它以决定我们是否需要使缓存失效，而数据库依赖使用SQL查询结果来完成同样的目的。
- en: The question that you have now is probably, "Why have we used DB for one case
    and tags for another?" That is a good question!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能有的问题是，“为什么我们在一种情况下使用数据库，而在另一种情况下使用标签？”这是一个很好的问题！
- en: 'The goal of using the DB dependency is to replace heavy calculations and select
    a light query that gets as little data as possible. The best thing about this
    type of dependency is that we don''t need to embed any additional logic in the
    existing code. In our case, we can use this type of dependency for account operations,
    but cannot use it for articles as the article content can be changed. Therefore,
    for articles, we set a global tag named article which basically means that we
    can manually call the following when we want to invalidate total the article cache:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据库依赖的目标是替换繁重的计算，并选择一个尽可能少获取数据的轻量查询。这种类型依赖的最好之处在于，我们不需要在现有代码中嵌入任何额外的逻辑。在我们的案例中，我们可以使用这种类型的依赖进行账户操作，但不能用于文章，因为文章内容可能会改变。因此，对于文章，我们设置了一个名为article的全局标签，这意味着当我们想要使整个文章缓存失效时，可以手动调用以下操作：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See also
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn more about caching and using cache dependencies, refer to
    [http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于缓存和使用缓存依赖的信息，请参考[http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)
- en: Profiling an application with Yii
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Yii分析应用程序
- en: If all of the best practices for deploying a Yii application are applied and
    you still do not have the performance you want, then most probably there are some
    bottlenecks with the application itself. The main principle while dealing with
    these bottlenecks is that you should never assume anything and always test and
    profile the code before trying to optimize it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用了所有关于部署Yii应用程序的最佳实践，但你仍然没有得到你想要的表现，那么很可能是应用程序本身存在一些瓶颈。处理这些瓶颈的主要原则是，你永远不应该假设任何事情，并且在尝试优化代码之前，始终测试和评估代码。
- en: In this recipe, we will try to find bottlenecks in the Yii2 mini application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将尝试在Yii2迷你应用程序中找到瓶颈。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，请参阅[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Set up your database connection and apply the following migration:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置你的数据库连接并应用以下迁移：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Generate models for each table in Yii.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Yii生成每个表的模型。
- en: 'Write the following console command:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下控制台命令：
- en: '[PRE23]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And execute it:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后执行：
- en: '[PRE24]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the `ArticleController` class as follows:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`ArticleController`类，如下所示：
- en: '[PRE25]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the `views/article/index.php` view as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`views/article/index.php`视图，如下所示：
- en: '[PRE26]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then add `views/article/_item.php`:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后添加`views/article/_item.php`：
- en: '[PRE27]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How to do it…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to profile an application with Yii:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用Yii对应用程序进行性能分析：
- en: Open the articles page:![How to do it…](img/image00428.jpeg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文章页面：![如何操作…](img/image00428.jpeg)
- en: 'Open the `views/article/index.php` file and add profiler calls before and after
    the `ListView` widget:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`views/article/index.php`文件，并在`ListView`小部件前后添加性能分析调用：
- en: '[PRE28]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now refresh the page.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在刷新页面。
- en: Expand the debug panel at the bottom of page and click on the timing badge (**73
    ms** in our case):![How to do it…](img/image00384.jpeg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开页面底部的调试面板，并点击时间徽章（在我们的例子中为**73 ms**）：![如何操作…](img/image00384.jpeg)
- en: 'Now examine the **Profiling** report:'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在检查**性能分析**报告：
- en: '![How to do it…](img/image00391.jpeg)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00391.jpeg)'
- en: We can see that our articles block has taken close to 40 milliseconds.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到，我们的文章块接近40毫秒。
- en: 'Open our controller and add eager loading for article''s `category` relation
    as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的控制器，并为文章的`category`关系添加预加载，如下所示：
- en: '[PRE29]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Go back to the site, refresh the page, and open the **Profiling** report again:![How
    to do it…](img/image00492.jpeg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回网站，刷新页面，并再次打开**性能分析**报告：![如何操作…](img/image00492.jpeg)
- en: Right now the articles listing has taken close to 25 milliseconds because the
    application makes fewer SQL queries with eager loading of related models.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 目前文章列表的生成接近25毫秒，因为应用程序通过相关模型的预加载执行了较少的SQL查询。
- en: How it works…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'You can enclose any fragment of source code with `Yii::beginProfile` and `Yii::endProfile`
    calls:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Yii::beginProfile`和`Yii::endProfile`调用将任何源代码片段括起来：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: After executing the page, you can see the report with all timings on the **Profiling**
    page of the debug module.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 页面执行后，你可以在调试模块的**性能分析**页面看到包含所有时长的报告。
- en: 'Also, you can use nested profiling calls as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以使用嵌套的性能分析调用，如下所示：
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: Take care with correct opening and closing calls in this case and
    correct block naming. If you the miss `Yii::endProfile` call or switch the order
    of `Yii::endProfile(''inner'')` and `Yii::endProfile(''outer'')`, performance
    profiling will not work.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：在此情况下，请注意正确地打开和关闭调用以及正确的块命名。如果你遗漏了`Yii::endProfile`调用，或者将`Yii::endProfile(''inner'')`和`Yii::endProfile(''outer'')`的顺序颠倒，性能分析将不会工作。'
- en: See also
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information about logging refer to the following URL: [http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html#performance-profiling](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html#performance-profiling)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于日志的信息，请参考以下URL：[http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html#performance-profiling](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html#performance-profiling)
- en: 'About tuning of the application performance refer to the following URL: [http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于应用程序性能调整的信息，请参考以下URL：[http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)
- en: Leveraging HTTP caching
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用HTTP缓存
- en: Instead of only server-side caching implementation you can use client-side caching
    via specific HTTP-headers.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 除了仅服务器端缓存实现外，你还可以通过特定的HTTP头部使用客户端缓存。
- en: In this recipe, we will cover full-page caching on the basis of the `Last-Modified`
    and `ETag` headers.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将基于`Last-Modified`和`ETag`头部进行全页缓存。
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，具体方法请参阅官方指南中的[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Create and run migration as follows:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建和运行迁移：
- en: '[PRE32]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create an `Article` model as follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Article`模型，如下所示：
- en: '[PRE33]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a blog controller with the following actions:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有以下操作的博客控制器：
- en: '[PRE34]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the `views/blog/index.php` view:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`views/blog/index.php`视图：
- en: '[PRE35]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the `views/blog/view.php` view file:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`views/blog/view.php`视图文件：
- en: '[PRE36]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it…
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to leverage HTTP caching:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤利用HTTP缓存：
- en: Access this URL [http://yii-book.app/index.php?r=blog/create](http://yii-book.app/index.php?r=blog/create)
    three times to generate three articles.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问以下URL [http://yii-book.app/index.php?r=blog/create](http://yii-book.app/index.php?r=blog/create)三次以生成三篇文章。
- en: Open the following blog page:![How to do it…](img/image00394.jpeg)
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开以下博客页面：![如何操作…](img/image00394.jpeg)
- en: Open the developer console in your browser and see the `200 OK` response status
    for each reloading of the blog page:![How to do it…](img/image00456.jpeg)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开开发者控制台，查看每次重新加载博客页面时的 `200 OK` 响应状态：![如何操作…](img/image00456.jpeg)
- en: 'Open `BlogController` and attach the following behaviors:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `BlogController` 并附加以下行为：
- en: '[PRE37]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Next, reload the page a few times and check that the server returns the `304
    Not Modified` status instead of `200 OK`:![How to do it…](img/image00530.jpeg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，重新加载页面几次，并检查服务器返回的是 `304 Not Modified` 状态而不是 `200 OK`：![如何操作…](img/image00530.jpeg)
- en: 'Open the relevant page using the following URL to update random articles: `http://yii-book.app/index.php?r=blog/update`.'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下URL打开相关页面以更新随机文章：`http://yii-book.app/index.php?r=blog/update`。
- en: After updating the blog page, check that the server returns `200 OK` the first
    time and `304 Not Modified` thereafter, and verify that you see the new updated
    time on the page:![How to do it…](img/image00427.jpeg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新博客页面后，检查服务器在第一次请求时返回 `200 OK`，之后返回 `304 Not Modified`，并验证您是否在页面上看到了新的更新时间：![如何操作…](img/image00427.jpeg)
- en: Open any page from our article, as follows:![How to do it…](img/image00502.jpeg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们文章中的任何页面，如下所示：![如何操作…](img/image00502.jpeg)
- en: Verify that the server returns `200 OK` the first time and `304 Not` `Modified`
    on subsequent requests.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 验证服务器在第一次请求时返回 `200 OK`，在后续请求时返回 `304 Not Modified`。
- en: How it works…
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: There are time-based and content-based approaches to check the availability
    of the cached response content for your browser with the help of HTTP-headers.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 有基于时间和基于内容的方法，通过HTTP头部帮助您的浏览器检查缓存响应内容的可用性。
- en: Last-Modified
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Last-Modified
- en: This approach suggests that the server must return the last modification date
    of every document. After storing the date, our browser can attach it in the `If-Modified-Since`
    header for every subsequent request.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法表明服务器必须返回每个文档的最后修改日期。在存储日期后，我们的浏览器可以在每个后续请求的 `If-Modified-Since` 头部中附加它。
- en: 'We must attach the `action` filter to our controller and specify the `lastModified`
    callback as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将 `action` 过滤器附加到我们的控制器中，并指定 `lastModified` 回调如下：
- en: '[PRE38]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `\yii\filters\HttpCache` class calls the callback and compares the returned
    value with the `$_SERVER['HTTP_IF_MODIFIED_SINCE']` system variable. If the document
    has still not changed, `HttpCache` will send a lightweight `304` response header
    without running the action.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`\yii\filters\HttpCache` 类调用回调并比较返回值与 `$_SERVER[''HTTP_IF_MODIFIED_SINCE'']`
    系统变量。如果文档尚未更改，`HttpCache` 将发送一个轻量级的 `304` 响应头，而不运行操作。'
- en: However, if the document has been updated, the cache will be ignored and the
    server will return a full response.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果文档已更新，缓存将被忽略，服务器将返回一个完整响应。
- en: '| Request | Response |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| 请求 | 响应 |'
- en: '| --- | --- |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| First request with full response |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 第一次请求，包含完整响应 |'
- en: '|'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE40]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '|'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Second request with `If-Modified-Since` with blank response |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 第二次请求，使用 `If-Modified-Since` 且响应为空 |'
- en: '|'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE41]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE42]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '|'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Third request after updating the posts with a full response |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 第三次请求，更新帖子后包含完整响应 |'
- en: '|'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE43]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE44]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: As an alternative or an addition to the `Last-Modified` header variable, you
    can use `ETag`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 `Last-Modified` 头部变量的替代或补充，您可以使用 `ETag`。
- en: Entity Tag
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Entity Tag
- en: In cases when we do not store the last modified date in our documents or pages,
    we can use custom hashes, which can be generated at the base of the document content.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们不在文档或页面上存储最后修改日期的情况下，我们可以使用自定义哈希，这些哈希可以在文档内容的基础上生成。
- en: 'For example, we can use a content title for our document to hash a specific
    tag:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用文档的标题来对特定的标签进行哈希：
- en: '[PRE45]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `HttpCache` filter will attach this tag to the server response as an `ETag`
    header variable.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpCache` 过滤器将此标签附加到服务器响应的 `ETag` 头部变量。'
- en: After storing `ETag`, our browser can attach it in the `If-None-Match` header
    for every subsequent request.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 存储了 `ETag` 后，我们的浏览器可以在每个后续请求的 `If-None-Match` 头部中附加它。
- en: If the document still has not changed, `HttpCache` will send a lightweight `304`
    response header without running the action.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文档尚未更改，`HttpCache` 将发送一个轻量级的 `304` 响应头，而不运行操作。
- en: '| Request | Response |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 请求 | 响应 |'
- en: '| --- | --- |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| First request with full response |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| 第一次请求，包含完整响应 |'
- en: '|'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE46]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '|'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE47]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '|'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Second request with `If-None-Match` and blank response |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 第二次请求，使用 `If-None-Match` 且响应为空 |'
- en: '|'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE48]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '|'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE49]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '|'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Third request after updating the post with a full response |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 第三次请求，更新帖子后包含完整响应 |'
- en: '|'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE50]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '|'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE51]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '|'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: When the cache is valid, our application will send the `304 Not Modified` response
    HTTP-headers instead of the page content and will not run controllers and actions
    repeatedly.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当缓存有效时，我们的应用程序将发送`304 Not Modified` HTTP响应头而不是页面内容，并且不会重复运行控制器和操作。
- en: See also
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下
- en: For more information about HTTP caching refer to [https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching)
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于HTTP缓存的更多信息，请参阅[https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching)
- en: For HTTP-caching in Yii2 refer to [http://www.yiiframework.com/doc-2.0/guide-caching-http.html](http://www.yiiframework.com/doc-2.0/guide-caching-http.html)
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Yii2中的HTTP缓存，请参阅[http://www.yiiframework.com/doc-2.0/guide-caching-http.html](http://www.yiiframework.com/doc-2.0/guide-caching-http.html)
- en: Combining and minimizing assets
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并和最小化资源
- en: If your web page includes many CSS and/or JavaScript files, the page will open
    very slowly because the browser sends a large number of HTTP requests to download
    each file in separated threads. To reduce the number of requests and connections,
    we can combine and compress multiple CSS/JavaScript files into one or very few
    files in production mode, and then include these compressed files on the page
    instead of the original ones.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网页包含许多CSS和/或JavaScript文件，页面将非常慢地打开，因为浏览器会通过分离的线程发送大量的HTTP请求来下载每个文件。为了减少请求和连接的数量，我们可以在生产模式下将多个CSS/JavaScript文件合并并压缩成一个或非常少的文件，然后在页面上包含这些压缩文件而不是原始文件。
- en: Getting ready
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，具体操作请参考官方指南[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)
- en: Download the `compiler.jar` file from [https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)下载`compiler.jar`文件
- en: Download the `yuicompressor.jar` file from [https://github.com/yui/yuicompressor/releases](https://github.com/yui/yuicompressor/releases)
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://github.com/yui/yuicompressor/releases](https://github.com/yui/yuicompressor/releases)下载`yuicompressor.jar`文件
- en: Download and install the **Java Runtime Environment** (**JRE**) from [http://www.java.com](http://www.java.com)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[http://www.java.com](http://www.java.com)下载并安装**Java运行环境**（**JRE**）
- en: How to do it…
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to combine and minimize assets:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤合并和最小化资源：
- en: 'Open the source HTML code of the `index` page of your application. Check whether
    it is similar to the following structure:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用程序`index`页面的源HTML代码。检查它是否与以下结构相似：
- en: '[PRE52]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The page includes three JavaScript files.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 页面包含三个JavaScript文件。
- en: 'Open the `config/console.php` file and add the `@webroot` and `@web` alias
    definitions:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config/console.php`文件并添加`@webroot`和`@web`别名定义：
- en: '[PRE53]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Open a console and run the following command:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并运行以下命令：
- en: '[PRE54]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Open the generated `assets.php` file and configure it as follows:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开生成的`assets.php`文件并按以下方式配置：
- en: '[PRE55]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Run the combining command `yii asset assets.php config/assets-prod.php`. If
    this is successful you must get the `config/assets-prod.php` file with the following
    configuration:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行合并命令`yii asset assets.php config/assets-prod.php`。如果成功，您必须得到具有以下配置的`config/assets-prod.php`文件：
- en: '[PRE56]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Add the configuration for the `assetManager` component into the `config/web.php`
    file:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`assetManager`组件的配置添加到`config/web.php`文件中：
- en: '[PRE57]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Turn on production mode in `web/index.php`:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web/index.php`中开启生产模式：
- en: '[PRE58]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Reload the page in your browser and see the HTML code again. Now it must contain
    single lines to include our compressed files:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中重新加载页面并再次查看HTML代码。现在它必须包含单行以包含我们的压缩文件：
- en: '[PRE59]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works…
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'First of all, our page had a set of included files:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的页面包含了一系列的文件：
- en: '[PRE60]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Next, we generated the `assets.php` configuration file and specified bundles
    for compressing:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们生成了`assets.php`配置文件并指定了用于压缩的包：
- en: '[PRE61]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Note
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: We could specify all intermediate asset bundles such as `yii\web\JqueryAsset`
    and `yii\web\YiiAsset`, but these assets are already specified as dependencies
    of `AppAsset` and `BootstrapPluginAsset`, and the compressing command automatically
    resolves all these dependencies.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：我们可以指定所有中间资产包，例如`yii\web\JqueryAsset`和`yii\web\YiiAsset`，但这些资产已经作为`AppAsset`和`BootstrapPluginAsset`的依赖项指定，压缩命令会自动解决所有这些依赖。'
- en: The AssetManager publishes all assets into the classic subdirectories in `web/assets`
    and after publishing it runs compressors to combine all CSS and JS files into
    `all-{hash}.js` and `all-{hash}.css`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: AssetManager将所有资产发布到`web/assets`中的经典子目录，发布后运行压缩器将所有CSS和JS文件合并为`all-{hash}.js`和`all-{hash}.css`。
- en: 'Check whether the CSS file includes other resources by relative paths such
    as the `bootstrap.css` file:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 检查CSS文件是否包含其他资源，例如`bootstrap.css`文件通过相对路径：
- en: '[PRE62]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'If it is so, then in the combined file, our compressor changes all relative
    paths for storing all relationships as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，那么在合并文件中，我们的压缩器将所有相对路径更改为以下形式：
- en: '[PRE63]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'After processing, we get the `assets-prod.php` file with the bundles configuration
    of the `assetManager` component. It defines the new virtual asset as a dependency
    of clean copies of the original bundles:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 处理后，我们得到包含`assetManager`组件的包配置的`assets-prod.php`文件。它定义了新的虚拟资产作为原始包的干净副本的依赖项：
- en: '[PRE64]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now we can require this configuration into the `config/web.php` file:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将此配置引入`config/web.php`文件：
- en: '[PRE65]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Alternatively, we can require the file for the production environment only:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们只能为生产环境引入文件：
- en: '[PRE66]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Note
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: Do not forget to regenerate all compressed and combining files after
    any updates of the original resources.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：不要忘记在原始资源任何更新后重新生成所有压缩和合并的文件。'
- en: See also
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下
- en: 'For more information about assets refer to the following URL: [http://www.yiiframework.com/doc-2.0/guide-structure-assets.html](http://www.yiiframework.com/doc-2.0/guide-structure-assets.html)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于资产的信息，请参考以下网址：[http://www.yiiframework.com/doc-2.0/guide-structure-assets.html](http://www.yiiframework.com/doc-2.0/guide-structure-assets.html)
- en: 'For Closure Compiler refer to the following URL: [https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Closure Compiler，请参考以下网址：[https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)
- en: 'For YUI Compressor refer to the following URL: [https://github.com/yui/yuicompressor/](https://github.com/yui/yuicompressor/)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于YUI Compressor，请参考以下网址：[https://github.com/yui/yuicompressor/](https://github.com/yui/yuicompressor/)
- en: Running Yii2 on HHVM
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HHVM上运行Yii2
- en: '**HipHop Virtual Machine** (**HHVM**) is a process virtual machine from Facebook
    based on just-in-time (JIT) compilation. HHVM transforms PHP code into intermediate
    **HipHop bytecode** (**HHBC**) and dynamically translates PHP code into machine
    code, which will be optimized and natively executed.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**HipHop虚拟机**（**HHVM**）是Facebook基于即时编译（JIT）的一个进程虚拟机。HHVM将PHP代码转换为中间的**HipHop字节码**（**HHBC**），并将PHP代码动态转换为机器码，这将得到优化并本地执行。'
- en: Getting ready
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，该指南可在[http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html)找到。
- en: How to do it…
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to run Yii on HHVM:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在HHVM上运行Yii：
- en: Install the Apache2 or Nginx web server.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Apache2或Nginx网络服务器。
- en: 'Follow the guide for installing HHVM on Linux or Mac available at [https://docs.hhvm.com/hhvm/installation/introduction](https://docs.hhvm.com/hhvm/installation/introduction).
    For example, on Ubuntu you must run the following commands:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照在Linux或Mac上安装HHVM的指南进行操作，该指南可在[https://docs.hhvm.com/hhvm/installation/introduction](https://docs.hhvm.com/hhvm/installation/introduction)找到。例如，在Ubuntu上，您必须运行以下命令：
- en: '[PRE67]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Try to start the built-in server manually for your site:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试手动为您网站启动内置服务器：
- en: '[PRE68]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Open the `localhost:8080` host in your browser:'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`localhost:8080`主机：
- en: '![How to do it…](img/image00402.jpeg)'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00402.jpeg)'
- en: Right now you can use HHVM to develop your project.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前您可以使用HHVM开发您的项目。
- en: 'If you use the Nginx or Apache2 server, then HHVM automatically creates its
    own configuration files in the `/etc/nginx` and `/etc/apache2` directories. In
    the case of Nginx, it creates the `/etc/nginx/hhvm.conf` template to include configuration
    file to your projects. For example, let''s create a new virtual host called `yii-book-hhvm.app`:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用 Nginx 或 Apache2 服务器，那么 HHVM 会自动在 `/etc/nginx` 和 `/etc/apache2` 目录中创建自己的配置文件。在
    Nginx 的情况下，它创建 `/etc/nginx/hhvm.conf` 模板以将配置文件包含到您的项目中。例如，让我们创建一个名为 `yii-book-hhvm.app`
    的新虚拟主机：
- en: '[PRE69]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Add the hostname into your `/etc/hosts`:'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将主机名添加到您的 `/etc/hosts` 文件中：
- en: '[PRE70]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now restart the Nginx server:'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在重新启动 Nginx 服务器：
- en: '[PRE71]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Finally, open the new host in your browser.
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，在浏览器中打开新主机。
- en: '![How to do it…](img/image00457.jpeg)'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00457.jpeg)'
- en: Your server is successfully set up.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 您的服务器已成功设置。
- en: How it works…
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'You can use HHVM as an alternative PHP process in the `fastcgi` mode. By default,
    it listens to the `9000` port. You can change the default port of the `fastcgi`
    process in the `/etc/hhvm/server.ini` file:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `fastcgi` 模式下使用 HHVM 作为 PHP 进程的替代品。默认情况下，它监听 `9000` 端口。您可以在 `/etc/hhvm/server.ini`
    文件中更改 `fastcgi` 进程的默认端口：
- en: '[PRE72]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Configure the specific PHP options in the `/etc/hhvm/php.ini` file.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/etc/hhvm/php.ini` 文件中配置特定的 PHP 选项。
- en: See also
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information about installing HHVM, refer to the following URLs:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 关于安装 HHVM 的更多信息，请参阅以下网址：
- en: '[https://docs.hhvm.com/hhvm/installation/linux](https://docs.hhvm.com/hhvm/installation/linux)'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.hhvm.com/hhvm/installation/linux](https://docs.hhvm.com/hhvm/installation/linux)'
- en: '[https://docs.hhvm.com/hhvm/installation/mac](https://docs.hhvm.com/hhvm/installation/mac)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.hhvm.com/hhvm/installation/mac](https://docs.hhvm.com/hhvm/installation/mac)'
- en: In order to learn more information about HHVM usage refer to [https://docs.hhvm.com/hhvm/](https://docs.hhvm.com/hhvm/).
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于 HHVM 使用的信息，请参阅[https://docs.hhvm.com/hhvm/](https://docs.hhvm.com/hhvm/).
