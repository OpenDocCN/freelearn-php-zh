- en: Chapter 9. Frontend to Display Rooms to Everyone
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章. 前端向所有人显示房间
- en: This chapter will cover topics about using templates to have multiple apps in
    the same context.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖使用模板在同一上下文中拥有多个应用的主题。
- en: Yii, indeed, allows you to have an advanced installation able to contain multiple
    instances of an Yii application. Therefore, every folder in the project is actually
    a new Yii application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 确实允许你拥有一个高级安装，能够包含多个 Yii 应用实例。因此，项目中的每个文件夹实际上都是一个全新的 Yii 应用。
- en: We will see how to install and configure the project, share data between them,
    and finally customize the URL to make them pretty for the search engine.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何安装和配置项目，在它们之间共享数据，并最终自定义 URL 以使其对搜索引擎友好。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using an advanced template to split frontend and backend
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级模板来分割前端和后端
- en: Configuring an application using init
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 init 配置应用
- en: Example – creating frontend for public access
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 创建面向公开访问的前端
- en: Sharing ActiveRecord models among applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用之间共享 ActiveRecord 模型
- en: Example – displaying available rooms in frontend site
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 在前端网站上显示可用房间
- en: Customizing a URL in an advanced template
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在高级模板中自定义 URL
- en: Example – using advanced templates in the same domain
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 在同一域名中使用高级模板
- en: How to use advanced templates in shared hosting
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在共享托管中使用高级模板
- en: Using an advanced template to split frontend and backend
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高级模板来分割前端和后端
- en: 'Until now, we have seen simple applications with only one single entry point
    to access. However, a single entry point isn''t enough for more general applications.
    In advanced web applications, in fact, we have not just a single entry point but
    often three: frontend, backend, and a common area used as shared zone for every
    entry point.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到了只有单一入口点的简单应用。然而，单一入口点对于更通用的应用来说是不够的。实际上，在高级网络应用中，我们不仅仅有一个入口点，通常有三个：前端、后端以及用作每个入口点共享区域的公共区域。
- en: The frontend entry point is a public access that is available to all users without
    restrictions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前端入口点是一个公开访问，对所有用户无限制。
- en: On the other hand, the backend entry point is a restricted access available
    only for authenticated users that have administration roles for managing content
    in the web application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，后端入口点是仅对具有管理内容管理角色的认证用户开放的受限访问。
- en: Finally, the common entry point is used to share data between entry points.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，公共入口点用于在入口点之间共享数据。
- en: Think about a reservation system, where frontend is the website displaying room
    availability and prices, while backend is the administration area, where operators
    can manage rooms.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个预订系统，其中前端是显示房间可用性和价格的网站，而后端是管理员区域，操作员可以在此管理房间。
- en: In the same way, another example of frontend and backend could be a newspaper
    website that comprises a frontend area with news publically visible to all users,
    and a backend area where journalists can insert news.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，前端和后端的另一个例子可能是一个包含公开可见新闻的前端区域和记者可以插入新闻的后端区域的报纸网站。
- en: Now that we know the differences between frontend and backend and their aim,
    we will create an advanced Yii application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了前端和后端之间的区别以及它们的目的，我们将创建一个高级 Yii 应用。
- en: The steps to install an advanced template of the Yii application are similar
    to the ones to install basic templates.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Yii 应用高级模板的步骤与安装基本模板的步骤类似。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is highly recommended, at this point, to have a console access the host,
    where we can put files.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，强烈建议拥有对主机的控制台访问权限，我们可以在此放置文件。
- en: Locate the web hosting document root folder in the web hosting. Starting from
    it, we will launch commands to create the advanced application in a new subfolder
    named `yiiadv`, which stands for Yii installation with the advanced template.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络托管中定位网站文档根目录。从它开始，我们将启动命令，在名为 `yiiadv` 的新子文件夹中创建高级应用，其中 `yiiadv` 代表使用高级模板的
    Yii 安装。
- en: We will install the Yii advanced template using Composer as it is the most recommended
    way. If we have not installed Composer as the global application yet, we can install
    it now in the `yiiadv` folder.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Composer 安装 Yii 高级模板，因为这是最推荐的方式。如果我们还没有将 Composer 作为全局应用安装，现在我们可以在 `yiiadv`
    文件夹中安装它。
- en: 'The following are the instructions to install Yii advanced template starting
    from document root folder:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从文档根目录开始安装 Yii 高级模板的说明：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By opening the `yiiadv` subfolder, we can see some new folders beside the basic
    template, which are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开`yiiadv`子文件夹，我们可以看到除了基本模板之外的一些新文件夹，如下所示：
- en: '`backend`: This folder is the entry point for the backend application of the
    project'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backend`：这个文件夹是项目后端应用的入口点'
- en: '`common`: This folder is the entry point for the application containing common
    data for the other applications in the project'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common`：这个文件夹是包含项目其他应用通用数据的应用的入口点'
- en: '`console`: This folder is the entry point for the console application of the
    project'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`console`：这个文件夹是项目控制台应用的入口点'
- en: '`frontend`: This folder is the entry point for the frontend application of
    the project'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frontend`：这个文件夹是项目前端应用的入口点'
- en: This structure is the result of the experience on developing the web application.
    Backend and frontend entry points have been formerly discussed; the common entry
    point is an area where to put data (common models, components, and so on) shared
    among all the other applications in the project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构是开发Web应用的经验结果。后端和前端入口点已经被讨论过；通用入口点是一个放置所有其他应用共享数据（通用模型、组件等）的区域。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: Every application in the project (backend, frontend, common, and console) is
    considered as a single namespace in the web application. So, when we refer to
    `RoomsController` in the frontend, the complete class namespace will be `frontend/controllers/RoomsController`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中的每个应用（后端、前端、common和控制台）在Web应用中被视为一个单独的命名空间。因此，当我们提到前端中的`RoomsController`时，完整的类命名空间将是`frontend/controllers/RoomsController`。
- en: This installation is still raw and requires an initialization using the `init`
    command. However, if we try to open any of these applications, we can recognize
    the same basic template structure with `assets`, `config`, `controllers`, `models`,
    `runtime`, `views`, and `web` subfolders. So, a basic template application can
    be considered the only unique application in an advanced template one.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个安装仍然是原始的，需要使用`init`命令进行初始化。然而，如果我们尝试打开这些应用中的任何一个，我们可以识别出相同的基模板结构，包括`assets`、`config`、`controllers`、`models`、`runtime`、`views`和`web`子文件夹。因此，一个基本的模板应用可以被认为是高级模板中唯一的独特应用。
- en: Finally, in the advanced template properties, every application starting point
    is always in `web/index.php`. For example, for the frontend application, the starting
    point is `frontend/web/index.php`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在高级模板属性中，每个应用的起始点始终在`web/index.php`。例如，对于前端应用，起始点是`frontend/web/index.php`。
- en: Configuring an application using init
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用init配置应用
- en: Apart from having multiple kinds of configuration, we can have multiple entry
    points in advanced applications.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了有多种配置之外，在高级应用中我们还可以有多个入口点。
- en: 'In advanced web applications, in fact, we also have a different approach in
    the development stage. We usually have two environments: development and production.
    In the first one, we make tests using fake users, data, and so on, while in the
    second one we must take care to guarantee the proper functioning of the project.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在高级Web应用中，实际上在开发阶段我们也有不同的方法。我们通常有两个环境：开发和生产。在第一个环境中，我们使用假用户、数据等进行测试，而在第二个环境中，我们必须确保项目的正常运行。
- en: Therefore, we will have different sets of configuration files and parameters
    based on environments where we will work in.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将根据我们将工作的环境拥有不同的配置文件和参数集。
- en: We could wish, in fact, to test the application using the development database
    instead of the production database, or specific parameters available only in a
    specific environment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可能希望使用开发数据库而不是生产数据库来测试应用，或者只在特定环境中可用的特定参数。
- en: 'Indeed, the `init` command offers this capability to switch different configuration
    and parameters for different environments. Basically, there are two environments:
    development and production.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，`init`命令提供了这种能力，可以为不同的环境切换不同的配置和参数。基本上，有两个环境：开发和生产。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: A first initialization is needed to make sure that the project could work.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 需要进行一次初始化以确保项目能够运行。
- en: The `init` command can be launched both in interactive mode as well as in noninteractive
    (silent) one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`init`命令可以在交互模式和静默模式下启动。'
- en: 'In the interactive mode, starting from the `yiiadv` folder:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互模式下，从`yiiadv`文件夹开始：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And in a noninteractive (silent) mode:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在非交互式（静默）模式下：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In both modalities, we need to specify only the target environment if we want
    to overwrite all the current configuration files.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种模式中，如果我们想覆盖所有当前的配置文件，我们只需要指定目标环境。
- en: This command will simply copy the content of the chosen environment (according
    to the type of selected environment) in the respective application folder, with
    the same name starting from root.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将简单地复制所选环境（根据所选环境的类型）在相应应用文件夹中的内容，从根目录开始具有相同的名称。
- en: 'For example, open the folder in `environments/dev/backend`. We will see two
    folders: `config` and `web`, containing the first two configuration files and
    the other files `index.php` and `index-test.php`. These files will overwrite the
    corresponding files in the `backend` folder starting from the root folder of the
    project.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，打开`environments/dev/backend`文件夹。我们将看到两个文件夹：`config`和`web`，包含前两个配置文件以及其他文件`index.php`和`index-test.php`。这些文件将从项目根目录开始覆盖`backend`文件夹中的相应文件。
- en: So, if we launch the preceding command with parameters of `init`, the content
    of the folders in `environments/dev` (the `backend`, `common`, `console`, and
    `frontend` folders) will be copied in the `backend`, `common`, `console`, and
    `frontend` folders starting from the root folder of the project.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们使用`init`参数启动前面的命令，`environments/dev`（`backend`、`common`、`console`和`frontend`文件夹）中的文件夹内容将被复制到项目根目录开始的`backend`、`common`、`console`和`frontend`文件夹中。
- en: Also, with this command, other operations such as making some folders writable
    or applying specific values to configuration properties, are accomplished. However,
    the `init` command is mainly used to switch different configurations and `index.php`
    files.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用此命令，还可以完成其他操作，例如使某些文件夹可写或将特定值应用于配置属性。然而，`init`命令主要用于切换不同的配置和`index.php`文件。
- en: 'Starting from any application of the project (backend, frontend, common, and
    console), configuration values and parameters taken from the top of any application''s
    `index.php` file (backend, frontend, common, or console) are read in the following
    sequence:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目的任何应用（后端、前端、通用和控制台）开始，配置值和参数是从任何应用的`index.php`文件顶部（后端、前端、通用或控制台）读取的，读取顺序如下：
- en: '`common/config/main.php`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common/config/main.php`'
- en: '`common/config/main-local.php`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common/config/main-local.php`'
- en: '`config/main.php`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config/main.php`'
- en: '`config/main-local.php`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config/main-local.php`'
- en: This means that the `config` parameters are initially read firstly from `common/config/main.php`
    then from `common/config/main-local.php`, then again from `application config/main.php`,
    and finally from `application config/main-local.php`. The properties with same
    name will be overwritten during the reading of other configuration files.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`config`参数最初是从`common/config/main.php`读取的，然后是从`common/config/main-local.php`读取的，接着是从`application
    config/main.php`读取的，最后是从`application config/main-local.php`读取的。在读取其他配置文件的过程中，同名属性将被覆盖。
- en: Therefore, if the same configuration property is declared in all four configuration
    files, its value will be the same as `config/main-local.php`, which is the last
    configuration file to be read.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果相同的配置属性在所有四个配置文件中都有声明，其值将与`config/main-local.php`相同，这是最后被读取的配置文件。
- en: Since, we locally have a last chance to apply differences towards a specific
    property of configuration with the `-local` version of files, the content of environment
    subfolders will be only about the `-local` version of a specific file. For example,
    if we open `environments/dev/backend/config path`, we will see only `main-local.php`
    and `params-local.php`, practically the last two filenames that `index.php` will
    read in sequence.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们本地有最后一次机会通过`-local`版本的文件应用对特定配置属性的差异，因此环境子文件夹的内容将仅关于特定文件的`-local`版本。例如，如果我们打开`environments/dev/backend/config
    path`，我们将看到只有`main-local.php`和`params-local.php`，实际上这是`index.php`将按顺序读取的最后两个文件名。
- en: So if we change the database connection parameters in `environments/dev/backend/config/main-local.php`
    and then apply `init` with the `dev` target environment, this file will overwrite
    `backend/config/main-local.php`. This is the last configuration file that `backend/web/index.php`
    will read during its bootstrap (if we browse `/backend/web/index.php`).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们更改`environments/dev/backend/config/main-local.php`中的数据库连接参数，然后使用`dev`目标环境应用`init`，此文件将覆盖`backend/config/main-local.php`。这是`backend/web/index.php`在其引导过程中最后读取的配置文件（如果我们浏览`/backend/web/index.php`）。
- en: Now that we have executed the `init` command in the `dev` environment, we can
    point the browser to `http://hostname/yiiadv/frontend/web` and we should see the
    same congratulations page of the basic template.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 `dev` 环境中执行了 `init` 命令，我们可以将浏览器指向 `http://hostname/yiiadv/frontend/web`，并且我们应该看到基本模板相同的祝贺页面。
- en: In the same way, the backend entry point is also available pointing to `http://hostname/yiiadv/backend/web`,
    where a login form is displayed by default (this is because it is a restricted
    area).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，后端入口点也是可用的，指向 `http://hostname/yiiadv/backend/web`，默认情况下会显示登录表单（这是因为这是一个受限区域）。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we want to add a new application in the project, it is enough to copy the
    content of frontend or backend folder to another new folder in the project.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在项目中添加一个新的应用程序，只需将前端或后端文件夹的内容复制到项目中的另一个新文件夹中即可。
- en: Example – creating frontend for public access
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 创建公共访问的前端
- en: As we have seen, the frontend application is a reachable pointing browser to
    `http://hostname/yiiadv/frontend/web`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，前端应用程序是一个指向 `http://hostname/yiiadv/frontend/web` 的可访问浏览器。
- en: However, the first thing to set in the frontend access is URL-friendly customization;
    this is because it is important that our public website is well positioned in
    the search engine.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在前端访问中首先要设置的是 URL 友好性定制；这是因为我们的公共网站在搜索引擎中的良好定位非常重要。
- en: 'As we have done in the basic template, we can render pretty URLs in the advanced
    template too, following these two steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在基本模板中所做的那样，我们也可以在高级模板中渲染漂亮的 URL，遵循以下两个步骤：
- en: Create the `.htaccess` file in `yiiadv/frontend/web`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `yiiadv/frontend/web` 中创建 `.htaccess` 文件。
- en: Add the `urlManager` component in `yiiadv/frontend/config/main.php`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `yiiadv/frontend/config/main.php` 中添加 `urlManager` 组件。
- en: 'In step 1, it is enough to create a file in `yiiadv/frontend/web/.htaccess`
    with the following content:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 中，只需在 `yiiadv/frontend/web/.htaccess` 中创建一个包含以下内容的文件即可：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code will make the web server URL rewrite work, rewriting all requests
    to the `index.php` file in `yiiadv/frontend/web`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将使网络服务器 URL 重写工作，将所有请求重写到 `yiiadv/frontend/web/index.php` 文件。
- en: 'While, in step 2, we must add the `urlManager` property in `yiiadv/frontend/config/main.php`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 而，在步骤 2 中，我们必须在 `yiiadv/frontend/config/main.php` 中添加 `urlManager` 属性：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we can refresh the web browser to `http://hostname/yiiadv/frontend/web`
    and navigation to the URL link on the top, and we can see, for instance, that
    URL is in pretty form.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以刷新网络浏览器到 `http://hostname/yiiadv/frontend/web` 并导航到顶部的 URL 链接，我们可以看到，例如，该
    URL 是漂亮的格式。
- en: We can consider the `frontend` folder as a Yii standalone application and we
    can create controllers, views, models, and so on.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 `frontend` 文件夹视为一个 Yii 独立应用程序，并且我们可以创建控制器、视图、模型等。
- en: Sharing ActiveRecord models among applications
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序之间共享 ActiveRecord 模型
- en: Although every folder in the main Yii project could be considered a Yii standalone
    application, with its own controllers, models, views, and so on, it is conventionally
    accepted that all shared data are located in the `common` folder.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然主 Yii 项目中的每个文件夹都可以被视为一个 Yii 独立应用程序，拥有自己的控制器、模型、视图等，但传统上认为所有共享数据都位于 `common`
    文件夹中。
- en: So every shared model (such as `User`, `Room`, `Reservation`, and `Customer`)
    that could be used in other Yii applications, should be inserted in `common/models`,
    under the `common\models` namespace.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个可以用于其他 Yii 应用程序共享模型（如 `User`、`Room`、`Reservation` 和 `Customer`）都应该插入到 `common/models`
    下的 `common\models` 命名空间中。
- en: From my point of view, when an application needs to use an ActiveRecord from
    `common/models`, I rather prefer to point to an extended version in its namespace,
    so as to have a chance again to add custom methods or properties to model for
    that application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从我的观点来看，当一个应用程序需要使用 `common/models` 中的 ActiveRecord 时，我更倾向于指向其命名空间中的扩展版本，这样我们就有机会再次为该应用程序的模型添加自定义方法或属性。
- en: 'For example, consider we have the `Room` model in `common/models`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑我们在 `common/models` 中的 `Room` 模型：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the backend application, we will create an empty extension to the `Room`
    class from common namespace:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端应用程序中，我们将从公共命名空间创建 `Room` 类的空扩展：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this way, we have the possibility to add custom methods or properties to
    that specific application (namespace), if needed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就有可能根据需要向特定应用程序（命名空间）添加自定义方法或属性。
- en: Therefore, every controller, view, or model in backend namespace will point
    to `\backend\models\Room`, when it needs to refer to the `Room` ActiveRecord.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当后端命名空间中的每个控制器、视图或模型需要引用 `Room` ActiveRecord 时，都将指向 `\backend\models\Room`。
- en: Example – displaying available rooms in the frontend site
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 在前端网站上显示可用房间
- en: This example will emphasize the few differences between basic and advanced applications
    occurring in the developing phase.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将强调在开发阶段基本应用和高级应用之间存在的少数差异。
- en: The first thing to do is to check whether the database configuration is right,
    since we have just initialized an advanced application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要检查数据库配置是否正确，因为我们刚刚初始化了一个高级应用。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The database configuration on the production server can be found in `common/config/main.php`,
    whereas the database configuration on the developing server is located in `common/config/main-local.php`,
    which overwrites the configuration in `common/config/main.php`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 生成服务器上的数据库配置可以在 `common/config/main.php` 中找到，而开发服务器上的数据库配置位于 `common/config/main-local.php`，它会覆盖
    `common/config/main.php` 中的配置。
- en: 'Open `common/config/main.php` and add the `db` property to the configuration
    array:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `common/config/main.php` 并将 `db` 属性添加到配置数组中：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Change the database properties (`host`, `username`, and `password`) according
    to our configuration parameters.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的配置参数更改数据库属性（`host`、`username` 和 `password`）。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to comment out the database configuration in `common/config/main-local.php`
    to avoid overwriting configurations.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 记得注释掉 `common/config/main-local.php` 中的数据库配置，以避免覆盖配置。
- en: In this way, we will have complete access to the database and tables previously
    created, and to rooms' data, indeed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们将能够完全访问之前创建的数据库和表，以及房间数据。
- en: 'Now, we are ready to create:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好创建：
- en: The `Room` model.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Room` 模型。'
- en: The `Rooms` controller.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Rooms` 控制器。'
- en: View of index action of the `Rooms` controller.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Rooms` 控制器的索引动作视图。'
- en: The first step requires the use of Gii. By default, Gii is enabled with basic
    configuration in the frontend application (only from localhost).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步需要使用 Gii。默认情况下，Gii 在前端应用程序中启用基本配置（仅从本地主机）。
- en: 'We will overwrite this configuration so as to use Gii from everywhere. Therefore,
    in the frontend local configuration (`frontend/config/main-local.php`), which
    has the following lines:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖此配置，以便从任何地方使用 Gii。因此，在前端本地配置（`frontend/config/main-local.php`）中，以下行：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Replace them with these ones:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们替换为以下内容：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we can finally access Gii from everywhere. Using the browser, go to `http://hostname/yiiadv/frontend/web/gii`;
    a welcome page should be displayed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们终于可以从任何地方访问 Gii。使用浏览器，访问 `http://hostname/yiiadv/frontend/web/gii`；应该会显示一个欢迎页面。
- en: Go to **Model Generator** and fill the first field, `Table Name`, with `room`,
    the name of model we are creating, just as we have done in the previous chapters.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 **模型生成器** 并在第一个字段 `表名` 中填写 `room`，这是我们正在创建的模型的名称，就像我们在前面的章节中所做的那样。
- en: Since, we are working with the advanced template, model files (like other objects
    created by Gii) will be created in the `frontend` namespace, or rather in `frontend/models`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用高级模板，模型文件（如 Gii 创建的其他对象）将创建在 `frontend` 命名空间中，或者更确切地说，在 `frontend/models`
    中。
- en: 'Therefore, it is necessary to change the first field of **Model Generator**,
    **Namespace**, so as to switch from `app/models` to `common/models`, the shared
    area of common data:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有必要更改 **模型生成器** 的第一个字段 **命名空间**，从 `app/models` 切换到 `common/models`，这是公共数据共享区域：
- en: '![Example – displaying available rooms in the frontend site](img/B04656_09_01.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 在前端网站上显示可用房间](img/B04656_09_01.jpg)'
- en: Gii model generator in advanced template
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 高级模板中的 Gii 模型生成器
- en: In `common/models`, there should be a `Room.php` file containing the model of
    the `Room` table.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `common/models` 中，应该有一个包含 `Room` 表模型的 `Room.php` 文件。
- en: The second step it is to create the controller and the action of the controller
    to display the rooms list.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是创建控制器以及用于显示房间列表的控制器动作。
- en: 'Let''s create the controller under `frontend/controllers/RoomsController.php`
    with the following content:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `frontend/controllers/RoomsController.php` 下创建控制器，内容如下：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Make sure that the namespace declaration on top is `frontend\controllers`, since
    every application in the web project has its own namespace (in this case, `frontend`).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 确保顶部的命名空间声明是 `frontend\controllers`，因为每个网络项目中的应用程序都有自己的命名空间（在这种情况下，`frontend`）。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We should never directly subclass `yii\web\Controller`, instead we should create
    a custom controller for each application, for example, `frontend\controllers\BaseController`,
    and then subclass it from every controller that we will create in `frontend\controllers`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们永远不应该直接继承 `yii\web\Controller`，相反，我们应该为每个应用程序创建一个自定义控制器，例如，`frontend\controllers\BaseController`，然后从我们将创建的每个控制器中继承它。
- en: 'Finally, the third step is to create view content of index action in `frontend/views/rooms/index.php`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三步是在 `frontend/views/rooms/index.php` 中创建索引操作的视图内容：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will produce the following output with the data available in the database:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出，其中包含数据库中的可用数据：
- en: '![Example – displaying available rooms in the frontend site](img/B04656_09_02.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 在前端网站上显示可用房间](img/B04656_09_02.jpg)'
- en: Rooms availability in the frontend
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 前端房间可用性
- en: Customizing a URL in the advanced template
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在高级模板中自定义 URL
- en: When working with multiple applications in the same project, you might require
    access from an application to another, for example, from the backend to a frontend
    link. This is because we want to display public page rendering in the frontend
    after inserting data in the backend.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当在同一个项目中处理多个应用程序时，你可能需要从一个应用程序访问另一个应用程序，例如，从后端到前端链接。这是因为我们希望在插入后端数据后在前端显示公共页面渲染。
- en: The `urlManager` property is customized with references about the application
    where it is defined. However, we can add specific properties to refer to the respective
    application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`urlManager` 属性通过引用定义它的应用程序进行自定义。然而，我们可以添加特定的属性来引用相应的应用程序。'
- en: 'Therefore, in `common/config/main.php`, we can add these two properties:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在 `common/config/main.php` 中，我们可以添加这两个属性：
- en: '[PRE12]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For example, we can get a URL to frontend from everywhere. It is enough to write
    this code `echo Yii::$app->urlManagerFrontend->createUrl(...)` to create a URL
    from frontend.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以从任何地方获取前端 URL。只需编写此代码 `echo Yii::$app->urlManagerFrontend->createUrl(...)`
    就可以从前端创建一个 URL。
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is necessary to put the `.htaccess` file in the `web` folder of each application
    that has the `enablePrettyUrl` property in the `urlManager` configuration.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个具有 `urlManager` 配置中 `enablePrettyUrl` 属性的应用程序的 `web` 文件夹中放置 `.htaccess` 文件是必要的。
- en: 'Yii also provides convenient aliases to application paths, other than the default
    aliases of the basic template:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 还提供了方便的应用程序路径别名，除了基本模板的默认别名之外：
- en: '`@common`: This is the common directory'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@common`: 这是公共目录'
- en: '`@frontend`: This is the frontend web application directory'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@frontend`: 这是前端 Web 应用程序目录'
- en: '`@backend`: This is the backend web application directory'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@backend`: 这是后端 Web 应用程序目录'
- en: '`@console`: This is the console directory'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@console`: 这是控制台目录'
- en: Example – using the advanced template in the same domain
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 在同一域名中使用高级模板
- en: We have seen that the advanced template creates more applications in the same
    web application than we can reach using `/frontend` or `/backend` or any other
    application name prefix in the URL. However, it is not advisable, especially for
    frontend, that all URLs contain a `/frontend` prefix.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，高级模板在同一个 Web 应用程序中创建了比我们可以通过 `/frontend` 或 `/backend` 或任何其他应用程序名称前缀在
    URL 中访问到的更多应用程序。然而，对于前端来说，所有 URL 都包含 `/frontend` 前缀并不建议。
- en: 'We want to have this URL format for frontend: `http://hostname/yiiadv/`; and
    this one for backend: `http://hostname/yiiadv/admin` (we can choose the name we
    want).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望前端有这种 URL 格式：`http://hostname/yiiadv/`；而后端有这种格式：`http://hostname/yiiadv/admin`（我们可以选择我们想要的名称）。
- en: All requests have to be managed on the `/yiiadv` folder level. So, we will add
    an `.htaccess` file in the `/yiiadv` folder that it will dispatch to the correct
    route.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 所有请求都必须在 `/yiiadv` 文件夹级别上进行管理。因此，我们将在 `/yiiadv` 文件夹中添加一个 `.htaccess` 文件，它将转发到正确的路由。
- en: 'Here is a list of the actions that must be performed:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个必须执行的操作列表：
- en: Configure `.htaccess` in `/yiiadv` to handle all requests.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/yiiadv` 中配置 `.htaccess` 以处理所有请求。
- en: Configure the backend application to customize its `baseUrl`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置后端应用程序以自定义其 `baseUrl`。
- en: Configure the frontend application to customize its `baseUrl`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置前端应用程序以自定义其 `baseUrl`。
- en: It is obvious that steps 2 and 3 must be repeated for any other application,
    for which we want to manipulate the base URL.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，步骤 2 和 3 必须为任何其他应用程序重复，对于这些应用程序，我们想要操作基本 URL。
- en: 'For step 1, let''s put the `.htaccess` file with the following content in the
    `/yiiadv` folder:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于步骤 1，让我们在 `/yiiadv` 文件夹中放置以下内容的 `.htaccess` 文件：
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Therefore, in the `Backend` block of `.htaccess`, we catch requests in `/yiiadv/admin`
    and redirect them to the `yiiadv/backend/web/` base URL.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在`.htaccess`的`Backend`块中，我们捕获了`/yiiadv/admin`的请求并将它们重定向到`yiiadv/backend/web/`基本URL。
- en: 'For step 2, the backend requests capture is completed when we also make these
    changes in backend configuration, adding the `request` property in `backend/config/main.php`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第2步，当我们在后端配置中也进行这些更改时，后端请求捕获完成，我们在`backend/config/main.php`中添加了`request`属性：
- en: '[PRE14]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, point the browser to `http://hostname/yiiadv/admin` and if we did everything
    correctly we should finally be able to see the login page.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将浏览器指向`http://hostname/yiiadv/admin`，如果我们一切操作正确，我们最终应该能够看到登录页面。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure there is a `request` attribute in the configuration array in `backend/config/main-local.php`;
    we need to comment this otherwise it will overwrite `request` in the `backend/config/main.php`
    file that we have just changed.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在`backend/config/main-local.php`配置数组中有一个`request`属性；我们需要注释掉它，否则它将覆盖我们刚刚更改的`backend/config/main.php`文件中的`request`。
- en: 'Finally, just like we have done with backend requests, in step 3, we need to
    change the `request` property for frontend requests under `frontend/config/main.php`
    in the configuration:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，就像我们对后端请求所做的那样，在第3步中，我们需要在配置文件`frontend/config/main.php`下更改前端请求的`request`属性：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, point the browser to `http://hostname/yiiadv` and if we did everything
    correctly, we should see the congratulation page of the frontend.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将浏览器指向`http://hostname/yiiadv`，如果我们一切操作正确，我们应该看到前端的成功页面。
- en: 'As the last part of this example, if we want to reach the frontend to the `http://hostname`
    URL and backend to the `http://hostname/admin` URL, we must put an `.htaccess`
    file in the document root folder with this content:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本例的最后一部分，如果我们想将前端指向`http://hostname` URL，后端指向`http://hostname/admin` URL，我们必须在文档根目录中放置一个包含以下内容的`.htaccess`文件：
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we must change the `request` property of the frontend configuration in
    `frontend/config/main.php` with:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须在`frontend/config/main.php`中更改前端配置的`request`属性：
- en: '[PRE17]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, change the `request` property of the backend configuration in `backend/config/main.php`
    with:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更改`backend/config/main.php`中后端配置的`request`属性：
- en: '[PRE18]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this way, the frontend is now reachable pointing the browser to `http://hostname`
    and the backend to `http://hostname/admin`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，现在前端可以通过将浏览器指向`http://hostname`来访问，后端可以通过将浏览器指向`http://hostname/admin`来访问。
- en: How to use the advanced template in the shared hosting
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在共享托管中使用高级模板
- en: In my opinion, almost all applications should use the advanced template, since
    it provides the right project structure from the very start, so as to immediately
    handle frontend and backend occurring in every web project.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，几乎所有的应用程序都应该使用高级模板，因为它从一开始就提供了正确的项目结构，以便立即处理每个Web项目中出现的 frontend 和 backend。
- en: However, we have also seen that the advanced template requires a console access
    to execute installation and initialization commands. So, if we have a remote hosting
    without this capability, it could be difficult for us to install and use Yii with
    the advanced template.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们也看到高级模板需要控制台访问来执行安装和初始化命令。因此，如果我们有一个没有这种能力的远程托管，使用高级模板安装和Yii可能会很困难。
- en: 'If we cannot add the console capability to remote hosting, we have two possibilities:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们无法将控制台功能添加到远程托管，我们有两种可能性：
- en: Create the project in the local environment where we can install what we want
    and need; it is enough to locally install a WAMP or a LAMP distribution (based
    on the operating system of the hosting machine) and then launch the composer command
    to install Yii
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们可以安装我们想要和需要的东西的本地环境中创建项目；只需在本地安装一个WAMP或LAMP发行版（基于托管机的操作系统），然后启动composer命令安装Yii
- en: Launch the `init` command to initialize the project (it could be initialized
    from start in production mode so that no other changes are needed)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动`init`命令以初始化项目（它可以在生产模式下从开始初始化，这样就不需要其他更改）
- en: Therefore, the project is ready to be uploaded to remote hosting. Remember that
    project environment is in production mode, but in this way, we do not have to
    change the configuration manually if we want to pass from development to production
    mode.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，项目已准备好上传到远程托管。请记住，项目环境处于生产模式，但以这种方式，如果我们想从开发模式切换到生产模式，我们不需要手动更改配置。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to use Yii to build a modern web project based on
    frontend and backend applications. We have found out differences between basic
    and advanced templates, installing our first advanced project based on advanced
    templates.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 Yii 来构建一个基于前端和后端应用的现代网络项目。我们发现了基本模板和高级模板之间的差异，并安装了我们的第一个基于高级模板的高级项目。
- en: Then we have used the `init` command to customize development or production
    environment in which to make the application run. Then we have written an example
    to display in the frontend rooms list, similar to what we have done in the previous
    basic template.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用了 `init` 命令来自定义开发或生产环境，以便使应用程序运行。然后，我们编写了一个示例，用于在前端房间列表中显示，类似于我们在之前的基本模板中所做的。
- en: Finally, we customized URLs to make them pretty also in the advanced template,
    to refer to frontend and backend without URL application prefix. We also learned
    how to use advanced templates in shared hosting that does not have access to the
    console.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们自定义了 URL，使其在高级模板中看起来也很美观，以便在无需 URL 应用前缀的情况下引用前端和后端。我们还学习了如何在没有控制台访问权限的共享托管环境中使用高级模板。
- en: In the next chapter, we will explain how to write a multilingual app, adapt,
    and render the app in different languages without changes to the source code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将解释如何编写一个多语言应用程序，适应并渲染不同语言的应用程序，而无需更改源代码。
