- en: Chapter 1. The Testing Mindset
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 测试心态
- en: This book has been written with the intention of teaching how to use **Codeception**
    in conjunction with **Yii 2**. By using these two great frameworks, I confirmed
    that testing could finally become something that anyone would appreciate doing,
    rather than considering it an odd and not particularly clear appendix of development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的写作目的是教授如何结合使用**Codeception**和**Yii 2**。通过使用这两个优秀的框架，我证实了测试最终可以成为任何人都会欣赏去做的事情，而不是将其视为开发中一个奇特且不太清晰的附录。
- en: For this reason, this first chapter tries to address several aspects that are
    rarely touched on but hopefully should give you the understanding and required
    push to learn and adopt testing, and, on a larger scale, promote testing as a
    way to improve development as a methodology.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第一章试图解决几个很少被触及但希望给您带来理解和必要的推动去学习和采用测试的方面，并在更大范围内推广测试作为一种改进开发的方法论。
- en: In this chapter, you will see the reason for testing and why testing should
    be planned into a project, and not done as an afterthought.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解到测试的原因以及为什么测试应该被纳入到项目中，而不是作为事后考虑。
- en: 'You will also see what will happen when you start testing: the implicit and
    explicit benefits for the short and long term, such as a change of mentality toward
    testing, the ability to improve component specifications, and architectural, design,
    and implementation choices, as well as refactoring, redistribution, and overall
    quality of code.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将看到开始测试时会发生什么：短期和长期内隐含和显性的好处，例如对测试心态的改变、改进组件规格的能力、架构、设计和实现选择，以及重构、重新分配和代码的整体质量。
- en: In order to explain why testing is so important, I'll also briefly dive into
    the organizational part of the process where **Test Driven Development** (**TDD**)
    and **Behavior Driven Development** (**BDD**) will be explained in relation to
    modern project management techniques, such as Agile and XP in a multi-skilled,
    self-organized team.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释为什么测试如此重要，我还会简要地探讨过程中的组织部分，其中**测试驱动开发**（**TDD**）和**行为驱动开发**（**BDD**）将与现代项目管理技术（如敏捷和XP）相结合，在一个多技能、自我组织的团队中进行解释。
- en: You will also see how the whole team environment can be improved and re-organized
    to help share knowledge and speed up workflow.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将看到如何改善和重组整个团队环境，以帮助分享知识和加快工作流程。
- en: 'This chapter has been divided into the following three sections:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为以下三个部分：
- en: Understanding the importance of testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解测试的重要性
- en: Involving project management
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目管理的涉及
- en: Obtaining the testing mindset
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得测试心态
- en: Understanding the importance of testing
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解测试的重要性
- en: Since I started getting into quality assurance and testing in a professional
    way, I've never faced myself with the question of "what is testing?"
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我以专业方式开始从事质量保证和测试以来，我从未面临过“什么是测试？”这个问题。
- en: I have to be honest, but during my time at university, testing wasn't part of
    any course. I don't really know if this has changed recently, nor if what's being
    taught is of any importance or relevance to the business world.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须诚实地说，但在大学期间，测试并不是任何课程的一部分。我不确定最近是否有所改变，以及所教授的内容是否对商业世界有任何重要性或相关性。
- en: In this book, I've tried to combine the practicality of development and testing
    using a great PHP framework, Yii at its version 2, and the testing suite of Codeception.
    I will present each topic with a keen eye on the actual benefit for the team,
    while showing from a higher perspective the planning and the organization of the
    work. Throughout the chapters in this book, I'll shift back and forth, trying
    to give a clear understanding of the details you will be working on and the scope
    of the work, the overall aim from a testing perspective.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我尝试结合使用一个优秀的PHP框架Yii 2及其版本2和Codeception测试套件来展示开发和测试的实用性。我将从实际对团队有益的角度展示每个主题，同时从更高的视角展示工作的规划和组织。在这本书的各章节中，我会来回切换，试图清晰地理解您将要工作的细节和工作的范围，从测试的角度来看整体目标。
- en: 'But, before we venture into this journey, what effectively is testing? Google
    engineering director James Whittaker''s words make a very good answer to that:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在我们开始这段旅程之前，什么是有效的测试？谷歌工程总监詹姆斯·惠特克的话对此给出了很好的答案：
- en: '*"Although it is true that quality cannot be tested in, it is equally evident
    that without testing, it is impossible to develop anything of quality."*'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"尽管质量无法在产品中测试出来，但同样明显的是，没有测试，就不可能开发出高质量的产品。"'
- en: There are aspects of testing that are so completely fused with development that
    the two end up being practically indistinguishable from each other, and at other
    times it is so independent that developers are not even aware that this is happening.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的某些方面与开发完全融合在一起，以至于两者实际上无法区分，而在其他时候，它又是如此独立，以至于开发者甚至没有意识到这种情况正在发生。
- en: In the whole project lifespan, you start with ideas and transform them into
    features or stories, breaking them down into tasks. From there you move into the
    execution of each of these tasks that will hopefully grant you, at the end of
    them all, a finished product.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个项目生命周期中，你从想法开始，将其转化为功能或故事，将它们分解为任务。然后你进入执行这些任务的阶段，希望最终得到一个成品。
- en: At any point in our development process, we have tried to put some level of
    quality in it, either by "checking" the page loaded or by doing some more smart
    and deep, if not automated, testing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的开发过程中，我们试图在各个阶段都加入一定程度的质量，无论是通过“检查”页面加载，还是通过进行一些更智能和深入的测试，即使不是自动化的。
- en: Atlassian's QA team lead Penny Wyatt points out that teams where quality assurance
    was not performed or left alone to perform small automation tasks, with unit tests
    for instance, had the highest story rejection rate, which is when a story will
    have to be re-opened after being completed because of wrong or missing functionality.
    We are talking about a 100 percent of rejection rate.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Atlassian的QA团队负责人Penny Wyatt指出，那些没有执行质量保证或将其留给团队自行执行小型自动化任务（例如单元测试）的团队，故事拒绝率最高，这意味着一个故事在完成之后因为功能错误或缺失而需要重新打开。我们谈论的是100%的拒绝率。
- en: 'When such a situation occurs, we are left in a state where we have to go back
    into development and fix what we''ve done. This is not the only case: together
    with it, late discovered bugs and defects, and fixing them, are possibly some
    of the most expensive tasks in software development. In most cases, it has been
    shown that their cost is also way higher than it would have been to prevent them
    in the first place. Unfortunately, software development is rarely devoid of defects,
    and this should always be kept in mind.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种情况发生时，我们就处于一个不得不回到开发中去修复我们所做的工作的状态。这并非唯一的情况：与之相伴的，还有晚发现的错误和缺陷，以及修复它们，可能是软件开发中最昂贵的任务之一。在大多数情况下，已经证明它们的成本远远高于最初预防的成本。不幸的是，软件开发很少没有缺陷，这一点始终应该牢记在心。
- en: As developers and managers, one of the goals we should have is to reduce the
    occurrence of defects to an economically acceptable level, and doing this also
    reduces the resulting risk associated with it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者和管理者，我们应该有的一个目标是将缺陷的发生率降低到经济可接受的水平，这样做也减少了与之相关的风险。
- en: 'As a practical example, a large website might have thousands of software errors
    but still be economically viable due to the fact that 99 percent of the website
    is displayed correctly. For a Falcon rocket or a Formula 1 car, a defect rate
    that high is not acceptable: the risk of having a single one in the wrong place
    might also cost the lives of people.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作为实际例子，一个大型网站可能会有数千个软件错误，但由于99%的网站内容显示正确，它仍然具有经济可行性。对于一个猎鹰火箭或一级方程式赛车，如此高的缺陷率是不可接受的：一个错误放置的部件可能也会危及人们的生命。
- en: The other implicit aim for defect reduction is an investment in teamwork. An
    error introduced by one developer can have a ripple effect on the work of other
    team members and, overall, trust in the code base and other colleagues' work.
    In this chapter, and the later chapters, we are going to discuss this aspect in
    more detail by introducing some concepts of project management and how it can
    cooperate in ensuring that quality is ensured on many levels.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 缺陷减少的另一个隐含目标是投资于团队合作。一个开发者引入的错误可能会对其他团队成员的工作产生连锁反应，总体上，对代码库和其他同事工作的信任度也会受到影响。在本章和随后的章节中，我们将通过介绍一些项目管理概念以及它如何在不同层面上确保质量来更详细地讨论这一方面。
- en: 'The last and possibly an equally important aspect is how testing can be used
    to document the code by example. This is rarely discussed or brought to the attention
    of developers, but we will see how tests can describe the functionality of our
    implementations in a way more precise manner than what PHP documentation comments
    can provide. I''m not saying documentation comments are useless, quite the contrary:
    in modern **integrated development environments** (**IDE**) such as NetBeans or
    PHPStorm, auto-completion and code hinting are a great way to improve the time
    to discover the underlying framework without having the need to search through
    a reference manual. Tests can and should in fact provide the much needed help
    a developer might need when trying to combine and use yet unknown interfaces.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可能也是一个同样重要的方面是，如何通过示例使用测试来记录代码。这一点很少被讨论或引起开发者的注意，但我们将看到测试如何以比PHP文档注释更精确的方式描述我们实现的功能。我并不是说文档注释没有用，恰恰相反：在NetBeans或PHPStorm等现代**集成开发环境**（**IDE**）中，自动完成和代码提示是提高发现底层框架所需时间的绝佳方式，而不需要查阅参考手册。测试实际上可以，并且应该提供开发者可能需要的帮助，当他们在尝试组合和使用尚不为人知的接口时。
- en: When working with open source software that is a result of the work of a small
    self-organized team, having the ability to provide documentation without an extensive
    effort might be the key to rapid and continuous delivery.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当与由小型自发团队工作的开源软件合作时，如果能够提供文档而不需要大量努力，这可能是快速和持续交付的关键。
- en: But how do we ensure a delivery can be met within constraints that are imposed
    on the team? In order to explain this, we will have to take a quick detour into
    project management, from where some of the practices that are discussed and used
    in this book have been originating.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何确保在强加给团队的约束条件下能够满足交付？为了解释这一点，我们不得不快速转向项目管理，其中一些讨论和使用的实践就源于此。
- en: Involving project management
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 涉及项目管理
- en: 'If you ever have been involved in the planning phase of software development,
    or if you''ve worked as a project manager, you should have well in mind that there
    are three basic variables that you can leverage upon in order to manage projects:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经参与过软件开发规划阶段，或者如果你曾经担任过项目经理，你应该清楚地知道，有三个基本变量你可以利用来管理项目：
- en: Time
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间
- en: Quality
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量
- en: Cost
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本
- en: 'In most of the business scenarios described theoretically and practically,
    the stakeholders decide to fix two of these variables, leaving the team to estimate
    the third. In other words:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数理论和实践描述的商业场景中，利益相关者决定修复两个变量，将第三个变量留给团队来估算。换句话说：
- en: '*Time, Quality and Cost... pick two.*'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*时间、质量和成本...选择两个。*'
- en: In reality, what normally happens is that time and cost end up being set outside
    the project, thus leaving quality as the only variable developers can play on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，通常发生的情况是时间和成本最终被设定在项目之外，从而留下质量作为开发者唯一可以操作的变量。
- en: You might have already experienced that lowering quality doesn't eliminate work,
    it will just postpone it. Bringing back what we said earlier regarding defect
    rates, reducing quality might actually end up increasing the costs in the long
    run, leaving technical debt to spiral out of control if not causing a lot of problems
    in the short term.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经体验过，降低质量并不能消除工作，它只会推迟它。关于缺陷率的我们之前提到的，降低质量实际上可能会在长期内增加成本，如果不造成短期内的很多问题，那么技术债务可能会失控。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The term **technical debt** has been introduced as a metaphor referring to the
    consequences of bad design, or architectural or development choices in a codebase.
    A number of books have been written specifically to counterbalance bad practices
    that are not naturally aimed at managing it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**技术债务**被引入作为一种隐喻，指的是不良设计、架构或开发选择在代码库中的后果。已经有一些书籍专门写来对抗那些不是旨在管理它的不良实践。
- en: 'One of the agile methodologies that are nowadays not particularly talked about,
    **Extreme Programming** (**XP**), has introduced, if not rather exposed, a new
    variable into the equation: **scope**.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现今不太被谈论的敏捷方法之一，**极限编程**（**XP**），引入了，如果不是暴露了，方程中的一个新变量：**范围**。
- en: 'By making scope explicit, it does the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过明确范围，它执行以下操作：
- en: Creates a safe way to adapt
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一种安全的方式来适应
- en: Provides a way to negotiate
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一种协商的方式
- en: Gives us a tool to keep requests and demands under control
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给我们一个工具来控制请求和需求
- en: From the XP point of view, after the breakdown phase, we will have to go through
    a phase of estimating each single task, and based on the budget, you just keep
    adding or removing tasks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从XP（极限编程）的角度来看，在分解阶段之后，我们不得不进入一个估计每个单独任务的阶段，并且基于预算，你只需不断添加或删除任务。
- en: This discussion brings up a problem that is currently widely discussed in the
    community, as estimating tasks is not as easy one might think. We'll dive into
    it shortly, as I've seen too many misunderstandings of this topic.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这次讨论提出了一个目前在社区中广泛讨论的问题，因为估计任务并不像人们想象的那样简单。我们很快就会深入探讨这个问题，因为我看到太多人对这个话题的理解有误。
- en: Estimating tasks
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 估计任务
- en: As we've seen, estimation of the tasks has always been considered one of the
    fundamental principles of how the delivery path of a project is scheduled. This
    is especially valid in agile methodologies, as they use fixed time iterations
    and compute the amount of features and tasks that can be fitted in the given sprint
    and adjusted at each iteration using tools such as the burn down chart.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，任务的估计一直被认为是项目交付路径安排的基本原则之一。这在敏捷方法中尤其有效，因为它们使用固定时间迭代，并计算在给定冲刺中可以适应的功能和任务数量，并通过燃尽图等工具在每个迭代中进行调整。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you've worked in agile environments, this should be pretty much easy to understand,
    and if you haven't, then there's plenty of information that can be gained by reading
    books or articles on SCRUM that are freely available online.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾在敏捷环境中工作过，这应该很容易理解，如果你没有，那么通过阅读在线免费提供的关于SCRUM的书籍或文章，你可以获得很多信息。
- en: 'Unfortunately, with all the importance estimation has, it seems like nobody
    really looked deeper into it: there are plenty of articles that warn how much
    software development task estimations are always off by a factor of 2 or 3\. So,
    should we just swallow the fact that we won''t get better at estimating or is
    there something more to it?'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，尽管估计如此重要，似乎没有人真正深入研究过它：有很多文章警告说，软件开发任务的估计总是偏离2到3倍。那么，我们是否应该接受我们不会在估计上变得更好的事实，或者这背后还有更多东西？
- en: The "estimations do not work" argument is probably not correct either, and recently
    the hashtag `#NoEstimates` has sparked a bit of discussion online, which is probably
    worth including here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “估计不起作用”的论点可能也不正确，最近，#NoEstimates这个标签在网络上引发了一些讨论，这可能值得在这里包括。
- en: As a matter of fact, estimations do work. The only detail that is normally overlooked
    is that the estimation is nearing the actual time spent on it depending on how
    much knowledge the developer has and how much controllable the environment is.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，估计是有效的。唯一通常被忽视的细节是，估计接近实际花费的时间，这取决于开发者的知识程度和环境控制的程度。
- en: 'In fact, the reality is twofold: from one side, we will get better at estimating
    the greater our experience is, and, on the other side, our estimation will be
    closer to reality if there are less unknowns in our path.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，现实是双重的：一方面，我们的估计会随着经验的增加而变得更好，另一方面，如果我们的道路上未知因素减少，我们的估计将更接近现实。
- en: This is well-known in project management as the *Cone of Uncertainty*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这在项目管理中众所周知，被称为“不确定性锥”。
- en: What we really need to do is admit and expose all the aspects that would increase
    the risk and the uncertainty of our estimations, while trying to isolate what
    we know is going to take a specific amount of time.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正需要做的是承认并揭露所有会增加我们估计风险和不确定性的方面，同时试图隔离那些我们知道将需要特定时间的事情。
- en: As an example, having a fixed time investigation period to create working prototypes
    of the features we are going to implement sets a precedent for future computations,
    while human factors will need to be factored in.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了创建我们将要实现的功能的工作原型而设定一个固定时间的研究期，为未来的计算设定了先例，同时需要考虑人为因素。
- en: While estimations are particularly important from the business perspective of
    software development and project management, we won't be touching them again in
    this book. I'd rather focus on more practical aspects of the development work
    flow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管估计在软件开发和项目管理从业务角度来看特别重要，但我们在这本书中不会再涉及它们。我更愿意关注开发工作流程的更多实际方面。
- en: Testing approaches
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试方法
- en: 'Extreme Programming tries to stress the investment in defect reduction. In
    order to do so, it introduces two basic principles: **double-checking** and **Defect
    Cost Increase (DCI)**.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 极限编程试图强调对缺陷减少的投资。为了做到这一点，它引入了两个基本原则：**双重检查**和**缺陷成本增加（DCI）**。
- en: Double-checking *is* software testing. We know how a particular feature should
    be working, which can be represented through a test. When implementing such a
    feature, we know in a quasi-deterministic way that what we've done is actually
    correct.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查*就是软件测试。我们知道一个特定的功能应该如何工作，这可以通过一个测试来表示。当实现这样的功能时，我们以准确定的方式知道我们所做的是正确的*。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Extreme Programming makes use of values, principles, and practices to outline
    the core structure of the methodology: in short, you pick values that describe
    you as a team; you adhere to certain principles that will lead you into using
    specific practices.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 极限编程利用价值观、原则和实践来概述方法论的核心结构：简而言之，你选择描述团队特性的价值观；你遵守某些原则，这些原则将引导你使用特定的实践。
- en: Principles can be considered the bridge between values and practices, justifying
    the use of practices on something more concrete than a mere "but everybody's using
    it."
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 原则可以被认为是价值观和实践之间的桥梁，为在比“但每个人都这么做”更具体的事物上使用实践提供了正当理由。
- en: 'The other principle of **DCI** can be used to increase the cost-effectiveness
    of testing. What DCI states is the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**DCI**的另一个原则可以用来提高测试的成本效益。DCI所陈述的是以下内容：'
- en: '|   | *"The sooner you find a defect, the cheaper it is to fix."* |   |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|    | *"越早发现缺陷，修复成本就越低。"|    |'
- en: '|   | --*Kent Beck* |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|    | --*肯特·贝克* |'
- en: To make this even more clearer with an example, if you find a defect after years
    of development, it could take a lot of time to investigate both what the code
    was originally meant to be doing and what was the context it was developed in
    the first place. If, instead, you find the defect the minute it's being implemented,
    the cost to fix it will be minimal. This, clearly, doesn't even take into consideration
    all the hidden costs and risks that a severe bug can cause to critical sections
    of our code base; think about security and privacy for instance.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过一个例子使这一点更加清晰，如果你在开发多年后发现一个缺陷，可能需要花费大量时间来调查代码最初打算做什么以及最初是在什么背景下开发的。相反，如果你在实现时立即发现缺陷，修复的成本将是最小的。显然，这甚至没有考虑到一个严重缺陷可能对我们代码库的关键部分造成的所有隐藏成本和风险；例如，考虑安全和隐私。
- en: Not only the longer we wait the more difficult the defects will be to be amended,
    but also their cost will increase and have the potential to leave many residual
    defects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅等待时间越长，修正缺陷就越困难，而且成本也会增加，并有可能留下许多残余缺陷。
- en: This means that by adhering to DCI, firstly, we need to have shorter feedback
    cycles so that we can continuously find as many defects as possible, and, secondly,
    we will have to adopt different practices that can help us keep the cost and the
    quality untouched as much as we can.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，首先，我们需要有更短的反馈周期，以便我们可以连续发现尽可能多的缺陷；其次，我们不得不采用不同的实践，以帮助我们尽可能保持成本和质量不变。
- en: The idea of finding defects rapidly and often has been formalized as **Continuous
    Integration** (**CI**) and requires bringing automated testing into play to avoid
    the costs spiraling out of control. This practice has gained a lot of momentum
    outside XP and it's currently used widely in many organizations regardless of
    the project management methodology adopted. We will see how CI and automation
    can be introduced in our work flow and development in more detail in [Chapter
    9](ch09.html "Chapter 9. Eliminating Stress with the Help of Automation"), *Eliminating
    Stress with the Help of Automation*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 快速且频繁地发现缺陷的想法已经被正式化为**持续集成**（**CI**），这需要引入自动化测试以避免成本失控。这种实践在极限编程之外也获得了很大的动力，并且目前被许多组织广泛使用，无论采用哪种项目管理方法。我们将在第9章[消除自动化带来的压力](ch09.html
    "第9章。借助自动化消除压力")中更详细地了解如何在我们的工作流程和开发中引入CI和自动化。
- en: 'These practices defy entirely the idea of working in a waterfall way, as shown
    in the following figure:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实践完全反对像以下图中所示的那样以瀑布方式工作的想法：
- en: '![Testing approaches](img/B03646_01_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![测试方法](img/B03646_01_01.jpg)'
- en: The delivery path in a waterfall work flow
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 水瀑布工作流程中的交付路径
- en: 'In waterfall, we have a combination of factors that could impact the quality
    of the work we''re doing: in most of the situations where this was the norm, the
    specifications are not set at the beginning nor frozen at any time. This means
    that it''s very likely we might not produce what the business is asking.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布模型中，我们有一些可能影响我们工作质量的因素的组合：在大多数情况下，规格不是一开始就设定，也不会在任何时候冻结。这意味着我们很可能不会生产出业务所要求的产品。
- en: 'In other words, you would begin testing only after development, which is way
    too late, as you can see from the preceding figure: you will be unable to actually
    catch any of the defects in time for the release date. Unfortunately, as much
    as waterfall might feel natural, its effectiveness has been disproved multiple
    times and I won''t invest more time on this topic.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，你会在开发完成后才开始测试，这显然太晚了，正如前图所示：你将无法在发布日期前及时捕捉到任何缺陷。不幸的是，尽管瀑布模型可能感觉自然，但其有效性已经被多次证明是错误的，我不会在这个话题上投入更多时间。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's worth mentioning that the definition of "waterfall", although without using
    this term specifically, was formalized by Winston W. Royce in 1970, when describing
    a flawed and non-working model for software management.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，“瀑布”这个定义，尽管没有具体使用这个术语，是由温斯顿·W·罗伊斯在1970年正式提出的，当时他在描述一个有缺陷且无法工作的软件管理模式。
- en: Since the advent of agile methodologies, which XP is part of, there has been
    a great effort to bring testing as early as possible.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 自从敏捷方法的出现，XP也是其中一部分，人们一直在努力尽早引入测试。
- en: Remember that testing is as important as development, so it should be quite
    clear that we need to treat it as a first-class citizen.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，测试和开发一样重要，因此很明显，我们需要将其视为一等公民。
- en: 'One of the common situations you might find yourself in is that even if you
    start testing right at the beginning while the code base is being developed, it
    could potentially raise more issues than those that are needed or can be addressed.
    The resulting situation will still generate a good amount of problems and technical
    debt that won''t fit within the delivery path, as you can see in the following
    figure:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到的一种常见情况是，即使你在代码库开发的同时开始测试，也可能引发比所需或可以解决的问题更多的问题。结果情况仍然会产生大量的问题和技术债务，这些债务不会适合在交付路径中，正如以下图所示：
- en: '![Testing approaches](img/B03646_01_02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![测试方法](img/B03646_01_02.jpg)'
- en: The delivery path in an agile environment
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷环境中，交付路径
- en: The team's goal is to eliminate all post-development testing and shift testing
    resources to the beginning. If you have forms of testing such as stress or load
    testing that highlight defects at the end of the development, try to bring them
    into the development cycle. Try to run these tests continuously and automatically.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 团队的目标是消除所有开发后的测试，并将测试资源转移到开始阶段。如果你有如压力测试或负载测试这样的测试形式，它们在开发结束时可以突出显示缺陷，尝试将它们纳入开发周期。尝试持续和自动地运行这些测试。
- en: 'Transitioning into a work flow that has testing at the beginning brings to
    the surface two main problems: the accumulation of technical debt and the inherent
    problem that developers and testers are considered two separate entities. Don''t
    forget that there will be still some testing that will happen after development
    and will clearly need to be performed by third parties, but, nonetheless, let''s
    stress the fact that our efforts are to reduce it as much as we can.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 转变为一个在开始时就包含测试的工作流程会暴露出两个主要问题：技术债务的积累以及开发人员和测试人员被视为两个独立实体的固有问题。别忘了，在开发之后仍将有一些测试需要执行，并且显然需要第三方来完成，但无论如何，让我们强调我们的努力是尽可能减少它。
- en: As I'll constantly remind you, testing is not someone else's problem. Instead,
    with this book I'm aiming at giving the developers all the tools that can make
    him/her a tester first. There are different approaches to this problem, and we'll
    address them shortly at the end of this chapter, when talking about the testing
    mentality.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我将会不断提醒你的，测试不是别人的问题。相反，通过这本书，我旨在为开发者提供所有可以让他/她首先成为测试者的工具。对于这个问题有不同方法，我们将在本章末尾简要讨论，当谈到测试心态时。
- en: Introducing Test Driven Development
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引入测试驱动开发
- en: If you have ever developed with tests in mind, you might have appreciated that
    getting it right from the beginning is crucial. So, what do we need to test?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经带着测试意识进行开发，你可能已经欣赏到从一开始就做对是至关重要的。那么，我们需要测试什么呢？
- en: Throughout the years, various methodologies have been created that provide a
    set of rules for the developer that address how to include testing in the development
    cycle.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，已经创建了各种方法，为开发者提供了一套规则，以解决如何在开发周期中包含测试。
- en: The first and most well-known is **Test Driven Development**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第一也是最著名的，是**测试驱动开发**。
- en: The main objective of adopting TDD as a practice in your team is to achieve
    the test-first mentality, and this is done using the concept of Red-Green-Refactor.
    You implement the tests first, which shouldn't pass (red status), you implement
    the interface being tested allowing the tests to pass (green status), and then
    you refactor the interface to improve what the test has highlighted, if needed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的团队中采用TDD作为实践的主要目标是实现测试优先的心态，这通过红-绿-重构的概念来实现。你首先实现测试，这些测试不应该通过（红色状态），然后实现被测试的接口，以便测试通过（绿色状态），最后根据需要重构接口以改进测试所强调的内容。
- en: We've seen the benefits from the management point of view of using this approach,
    but there's a more direct impact on the developer side. TDD in fact allows you
    to achieve what is being taught in software development, that interfaces shouldn't
    be influenced by the implementations. And, as a secondary effect, it provides,
    as we've seen, a way to document the interface itself.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从管理的角度看到了使用这种方法的好处，但这对开发者的影响更为直接。实际上，TDD允许你实现软件开发中所教授的内容，即接口不应该受实现的影响。并且，作为次要影响，正如我们所看到的，它提供了一种记录接口本身的方法。
- en: By implementing tests first, you focus on how the method, class, and interface
    should be used by anyone inside or outside your team. This is called **black box
    testing**, which means that our tests should be completely unaware of the implementation
    details. This brings the implicit benefit of allowing the implementation to change
    over time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过首先实现测试，你关注的是方法、类和接口应该如何被团队内部或外部的人使用。这被称为**黑盒测试**，这意味着我们的测试应该完全不了解实现细节。这带来了隐含的好处，即允许实现随着时间的推移而改变。
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you're interested in this topic, you might find worth exploring the **Design
    by Contract** (**DbC**) specification that allows you to describe interfaces in
    a more formal way in specific object-oriented programming languages. A good starting
    point might be found at [http://c2.com/cgi/wiki?DesignByContract](http://c2.com/cgi/wiki?DesignByContract).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个主题感兴趣，你可能值得探索**设计规范**（**DbC**）的规范，它允许你在特定的面向对象编程语言中以更正式的方式描述接口。一个不错的起点可能是在[http://c2.com/cgi/wiki?DesignByContract](http://c2.com/cgi/wiki?DesignByContract)。
- en: Unfortunately, TDD tries to focus on the atomic part of the features being developed,
    and it fails to give a broader vision of everything, of what has been tested and
    how much, or, even better, if what has been tested is of any relevance for the
    business and the product itself.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，TDD试图关注正在开发的功能的原子部分，但它未能提供一个更广泛的视角，包括测试了什么、测试了多少，或者，更好的是，测试的内容对业务和产品本身是否有任何相关性。
- en: 'Once again, XP, in order to gain the full benefits of double-checking, introduces
    the following two sets of tests:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，XP为了获得双重检查的全部好处，引入了以下两组测试：
- en: One set written from the perspective of the programmers
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一套从程序员角度编写的代码
- en: Another set written from the perspective of the users
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一套从用户角度编写的代码
- en: In the first case, it allows the programmers to test all the system's components
    exhaustively, and in the latter case, the operation of the system as a whole.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，它允许程序员彻底测试系统的所有组件，而在后者情况下，则是整个系统的操作。
- en: The latter can in a way be seen as what **Behavior Driven Development** (**BDD**)
    describes in a more formal way. We're going to cover BDD in more detail in [Chapter
    2](ch02.html "Chapter 2. Tooling up for Testing"), *Tooling up for Testing*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，后者可以被视为**行为驱动开发**（**BDD**）以更正式的方式所描述的内容。我们将在[第2章](ch02.html "第2章。为测试做准备")
    *为测试做准备*中更详细地介绍BDD。
- en: BDD tries to cover TDD's lack of overall scope and shifts the attention to the
    behavioral aspect of the project. BDD is effectively an evolution of TDD but requires
    some changes in the organization of the work and the way it's shipped, which can
    be quite difficult to introduce in some environments without re-assessing the
    whole workflow.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: BDD试图弥补TDD在整体范围上的不足，并将注意力转向项目的行为方面。BDD实际上是TDD的一种演变，但需要对工作组织和交付方式进行一些改变，这在某些环境中可能相当困难，尤其是在不重新评估整个工作流程的情况下。
- en: 'With BDD, you define what to test and how to test it on multiple levels, detailing
    the scope of testing using a well-defined, business-oriented language called **ubiquitous
    language**, borrowed by **Domain-driven Design** (**DDD**) that is shared among
    all members of the team, both technical and non-technical. For the scope of this
    chapter, it should suffice to say that BDD introduces the concept of stories and
    scenarios giving the developer the ability to formally describe the user perspective
    and functionality of your application. Tests should be written using the standard
    agile framework of a user story: "As a [role] I want [feature] so that [benefit]."
    Acceptance criteria should be written in terms of scenarios and implemented as
    classes: "Given [initial context], when [event occurs], then [ensure some outcomes]."'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BDD（行为驱动开发），你可以在多个层面上定义要测试的内容以及如何测试，使用一种定义良好、面向业务的语言——**通用语言**，这种语言是从**领域驱动设计**（**DDD**）中借用的，并由团队的所有成员共享，无论是技术性的还是非技术性的。对于本章的范围，可以说BDD引入了故事和场景的概念，赋予开发者正式描述应用程序的用户视角和功能的能力。测试应该使用用户故事的标准敏捷框架来编写：“作为[角色]，我想[功能]以便[好处]。”验收标准应以场景的形式编写，并作为类实现：“给定[初始上下文]，当[事件发生]时，然后[确保某些结果]。”
- en: Planning tests
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试计划
- en: Planning is, hence, critical when stepping into testing from a software development
    point of view, and in not-so-recent years, there have been several solutions to
    improve testing from a planning perspective that give a more detailed and compact
    way to define the so-called test plan.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从软件开发的角度来看，规划测试是至关重要的，而在不太久远的几年里，已经出现了几种从规划角度改进测试的解决方案，它们提供了更详细和紧凑的方式来定义所谓的测试计划。
- en: In a testing-oriented environment, test plans should give you the direction
    and the indications of what and how much to test at any level. Moreover, the test
    plan is something that should be exposed to the various stakeholders and its visibility
    shouldn't live within the walls of development. Due to this, it's our responsibility
    to maintain and let this document live throughout the life of the project.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在以测试为导向的环境中，测试计划应为你提供在任何级别上测试什么和测试多少的方向和指示。此外，测试计划应该是向各种利益相关者公开的，其可见性不应局限于开发的范围内。因此，我们的责任是维护并确保这份文档在整个项目生命周期中保持活跃。
- en: In practice, I've seen this rarely happening because test plans are never formalized
    or, if they are, they are too long and hard to maintain, suffering from a very
    short lifespan since their initial conception.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我很少看到这种情况发生，因为测试计划从未被正式化，或者如果被正式化，它们太长且难以维护，从其最初构思以来寿命非常短暂。
- en: As an example, **Attributes-Components-Capabilities** (**ACC**) has been created
    by Google in order to solve some of the main problems that test plans have always
    suffered, especially their maintainability. You can find more information about
    ACC and Google Test Analytics software at [https://code.google.com/p/test-analytics/](https://code.google.com/p/test-analytics/).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**属性-组件-能力**（**ACC**）是由谷歌创建的，旨在解决测试计划一直面临的一些主要问题，尤其是其可维护性。你可以在[https://code.google.com/p/test-analytics/](https://code.google.com/p/test-analytics/)找到有关ACC和谷歌测试分析软件的更多信息。
- en: ACC test plans are short and compact, and the whole project tries to aim to
    test plans that could be created in minutes and that are self-describing and valuable
    to anyone close to the project.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ACC测试计划简短且紧凑，整个项目都试图实现可以在几分钟内创建的测试计划，这些计划能够自我描述，对项目中的任何人都是有价值的。
- en: For each component, you have a series of capabilities, which can be described
    with one or more attributes; think, for instance, "secure", "fast", or "user-friendly".
    On top of this, each capability and component has a relative risk level associated
    with it. These two things together allow you to understand what is most important
    to test and how thorough your testing should be.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个组件，你有一系列的能力，这些能力可以用一个或多个属性来描述；例如，“安全”、“快速”或“用户友好”。此外，每个能力和组件都与一个相对风险水平相关联。这两者结合起来，可以帮助你理解什么是最重要的测试内容，以及你的测试应该有多彻底。
- en: Generating tests
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成测试
- en: Clearly, planning tests is just the beginning. Once you get into the implementation
    side, you can pick up this book, which provides the knowledge of how to use the
    tools available to create tests.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，规划测试只是开始。一旦你进入实施阶段，你可以选择这本书，它提供了如何使用可用的工具来创建测试的知识。
- en: There isn't much more I can tell you about this aspect. You probably just need
    to read it all, but it should be stressed that there are some basic principles
    you must keep in mind when writing tests.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个方面，我无法告诉你更多。你可能只需要阅读所有内容，但应该强调的是，在编写测试时，你必须牢记一些基本原则。
- en: 'Good tests exhibit the following three important characteristics:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的测试应具备以下三个重要特征：
- en: '**Repeatability**: Tests must be deterministic. This ensures tests aren''t
    dependent on external factors issues.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重复性**：测试必须是确定的。这确保测试不依赖于外部因素问题。'
- en: '**Simplicity**: Test only one thing. The smaller the test the more controllable
    it is.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁性**：只测试一件事。测试越小，就越容易控制。'
- en: '**Independence**: Tests should execute in isolation. There should be no dependency
    between tests. This also improves debugging of both the tests and your code.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立性**：测试应该独立执行。测试之间不应存在依赖关系。这也有助于测试和代码的调试。'
- en: Once you've got a grip of how to approach a project, viewing it from the architectural
    point of view, and once you've understood how test plans work and what you really
    need to test, you can start implementing tests, discuss them, and improve the
    tools and the way you're using them with the help of your colleagues.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了如何从架构角度接近项目，一旦你理解了测试计划的工作原理以及你真正需要测试的内容，你就可以开始实施测试，与他们讨论，并在同事的帮助下改进工具和你的使用方式。
- en: Obtaining the testing mindset
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获得测试思维模式
- en: So, up until now, we've seen how important testing is in current development
    practices and we've seen all kind of aspects that revolve around development itself
    from a project managing point of view, but still we don't know what's needed to
    become a good tester.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，到目前为止，我们已经看到了测试在当前开发实践中的重要性，我们也看到了从项目管理角度围绕开发本身的所有方面，但我们仍然不知道要成为一名优秀的测试员需要什么。
- en: 'Finding developers knowledgeable about testing is particularly difficult, and
    there are a lot of talks online that address this problem: if that''s so difficult,
    can''t we do better? How do we get developers to become testers in the first place,
    especially when what you really want is to make developers responsible for the
    quality of the code they ship since the very beginning?'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找了解测试的开发者尤其困难，网上有很多讨论这个问题：如果这么难，我们难道不能做得更好吗？我们如何让开发者首先成为测试员，尤其是当你真正希望开发者从代码发布的最初就负责代码质量时？
- en: 'I tend to agree with the general idea that a tester, or a developer knowledgeable
    in testing, requires three basic things: *mindset*, *skillsets*, and *knowledge*.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我倾向于同意这样一个普遍观点，即测试员或了解测试的开发者需要三个基本要素：*思维模式*、*技能集*和*知识*。
- en: So how do you get into acquiring or improving these three basic aspects?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你该如何着手获取或提高这三个基本方面呢？
- en: Even if you can read all the books and listen to all the podcasts on testing,
    although these will give you a good amount of skillsets on how to test things
    and how the various testing suites and frameworks work, you won't be able to become
    a tester simply with that.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你能阅读所有关于测试的书籍并收听所有相关的播客，尽管这些会给你提供大量关于如何测试事物以及各种测试套件和框架如何工作的技能集，但你仅凭这些是无法成为一名测试员的。
- en: Of course, practice can help you a lot, but, all in all, the quality mindset
    and the knowledge of what to test are probably the hardest to acquire.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，实践可以帮助你很多，但总的来说，质量思维模式和测试知识可能是最难获得的。
- en: The knowledge part comes from a higher view of the product, both from the technical
    side and the business end. Introducing project breakdowns and pitches for the
    features that are going to be introduced in our software can be a starting point
    in this process.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 知识部分来自于对产品的更高视角，既包括技术方面，也包括业务端。介绍项目分解和为即将在我们的软件中引入的功能进行的提案可以是这个过程的起点。
- en: The quality mindset can be the trickiest of them all, as it ends up being baked
    into all sort of aspects of software development from the technical point of view
    and requires a proactive participation from all the parties involved, first of
    all starting with the developer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 质量思维模式可能是最棘手的，因为它最终会融入软件开发的所有方面，从技术角度来看，需要所有相关方的积极参与，首先是开发者。
- en: As previously said, there isn't a fixed definition of what you can achieve in
    terms of quality. There's no upper limit on how much quality you can put into
    your project. Hence, there's no limit on how much testing you can do in any project.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在质量方面没有固定的定义。你可以在项目中投入多少质量没有上限。因此，在任何项目中你可以进行多少测试也没有限制。
- en: 'From what I''ve witnessed, there are two requirements that can speed up the
    process of becoming a good tester on top of being a good developer: one of these
    comes from the environment, the other comes from us.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从我所见证的情况来看，除了成为一名优秀的开发者之外，还有两个要求可以加快成为一名优秀测试员的过程：其中一个来自环境，另一个来自我们自身。
- en: The environment bit in my opinion is the one that could potentially cut the
    deal to acquire the right testing mindset that we are talking about, and getting
    there should probably be the priority of any company that decides that quality
    has value, and a measurable one.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为环境因素可能是获得我们所说的正确测试心态的关键，而达到这一点可能应该是任何决定质量有价值的公司优先考虑的事情，并且是可以衡量的。
- en: 'Surely, having someone that can do mentoring on testing has always worked the
    best: learning by imitation and debating are probably the best team-oriented tools
    around. Even if you don''t have a tester in your team, you might have noticed
    that in development, practices such as paired programming or code reviews can
    go a long way to keep the team up to speed with the practices and knowledge required.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有一个可以进行测试指导的人总是效果最好：通过模仿和辩论可能是最好的团队导向工具。即使你的团队中没有测试员，你可能也注意到在开发中，像结对编程或代码审查这样的实践可以大大帮助团队跟上所需实践和知识。
- en: Let's have a closer look at what this would mean in practice, keeping in mind
    that there is no silver bullet in terms of applied practices and methodologies,
    and it's your task to experiment and adapt based on what you have at hand.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这在实际中意味着什么，同时记住在应用实践和方法论方面没有一劳永逸的解决方案，你的任务是根据手头的资源进行实验和调整。
- en: Starting with no testing culture – a practical approach
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从无测试文化开始——一种实用方法
- en: In this series of practical examples on how to introduce testing in a team or
    project, we are going to assume a couple of requirements that are indispensable
    in getting you somewhere.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一系列关于如何在团队或项目中引入测试的实践例子中，我们将假设一些不可或缺的要求，以帮助你取得进展。
- en: In this specific instance, we're going to assume you're working in a team. The
    ideal situation is to have a team of at least three people.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的情况下，我们将假设你在一个团队中工作。理想的情况是拥有至少三个人的团队。
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you're working with less than three people, or you're a lone developer, most
    of the techniques and practices tend to have a cost which might be higher than
    the perceived benefit.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你与不到三个人一起工作，或者你是一个独立开发者，大多数技术和实践可能带来的成本可能会高于预期的收益。
- en: A test plan and a sound organization of your workflow (trying to keep things
    simple) will not only provide a solid ground for working in a larger team if needed,
    but also grant you the instrument to deliver quality at speed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一个测试计划和合理的工作流程组织（尽量保持简单）不仅会在需要时为在大团队中工作提供坚实的基础，而且还能为你提供快速交付质量的工具。
- en: First of all, you need support from the business and your direct managers; speaking
    of direct and indirect experience, without that you won't get anywhere. The business
    side of the company needs to understand what testing is, in the way that is has
    been described at the beginning of this chapter, the value of testing, and all
    the good things that this can bring. There is plenty of documentation online for
    you to build a business case.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要来自业务和直接管理者的支持；说到直接和间接经验，没有这些你将无法取得任何进展。公司的业务方面需要理解测试是什么，就像本章开头所描述的那样，测试的价值，以及它能带来的所有好处。网上有大量的文档可以帮助你构建商业案例。
- en: Secondly, you need to have some skillsets in testing. This book should cover
    that part—hopefully quite well—and there are plenty of others that can teach you
    more theoretical aspects of testing for programmers and engineers, without considering
    the amount of online resources available on the topic.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你需要具备一些测试技能。这本书应该涵盖这部分内容——希望做得相当好——而且还有许多其他书籍可以教你更多关于测试的理论知识，无论在线上关于这个主题的资源有多少。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'A few good articles you can find online are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网上找到一些不错的文章，如下所示：
- en: '*Unit testing: Why bother?* available at [http://soundsoftware.ac.uk/unit-testing-why-bother/](http://soundsoftware.ac.uk/unit-testing-why-bother/)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*单元测试：为什么麻烦？* 可在 [http://soundsoftware.ac.uk/unit-testing-why-bother/](http://soundsoftware.ac.uk/unit-testing-why-bother/)
    查阅'
- en: '*Testing at Airbnb* available at [http://nerds.airbnb.com/testing-at-airbnb/](http://nerds.airbnb.com/testing-at-airbnb/)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Airbnb的测试* 可在 [http://nerds.airbnb.com/testing-at-airbnb/](http://nerds.airbnb.com/testing-at-airbnb/)
    查阅'
- en: Once you've got this, you can start moving into action.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了这个，你就可以开始采取行动。
- en: 'One of the situations most might find themselves in is that there is no testing
    culture whatsoever. Here you have two choices: either take the bottom-up approach,
    and get yourself familiar with TDD as a starter, or take the top-down one, where
    you''ll take the higher perspective.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人可能会发现自己处于这样的情况：完全没有测试文化。这里你有两个选择：要么采取自下而上的方法，从TDD（测试驱动开发）入门，要么采取自上而下的方法，从更高的视角出发。
- en: Either way you need to start having a compact test plan to adhere to. Taking
    as an example the approach of ACC, you start by breaking down the application/project/library
    into modules (components), each of them will be composed of features (capabilities).
    Each feature will be denoted with a particular attribute. From there you should
    have a compact enough representation of what you're trying to achieve. On top
    of this, you can start assigning a relative risk level, which you will use to
    give priority for your testing approach defining what and how much to test.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，你都需要开始制定一个紧凑的测试计划来遵守。以ACC的方法为例，你首先将应用程序/项目/库分解成模块（组件），每个模块将由功能（能力）组成。每个功能都将有一个特定的属性。从那里，你应该有一个足够紧凑的表示，说明你试图实现什么。在此基础上，你可以开始分配相对风险等级，这将用于确定测试方法的优先级，即测试什么和测试多少。
- en: The resulting test plan should be signed off by all the stakeholders and updated
    as frequently as possible, defining the aim of the project itself. The more this
    document is official the better it is, as it will be considered the business card
    of the project.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的测试计划应由所有利益相关者签署，并尽可能频繁地更新，以定义项目的目标本身。这份文件越正式越好，因为它将成为项目的名片。
- en: As highlighted by many, the immediate aim is to start planting the culture of
    testing in developers. Define the scope of your work, both in terms of testing
    and development, proceed with caution and evaluate both risks and costs, and leverage
    on those to take a decision on how to approach tests.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如许多人所强调的，直接的目标是开始在开发者中培养测试文化。定义你的工作范围，无论是测试还是开发，都要谨慎行事，评估风险和成本，并利用这些因素来决定如何进行测试。
- en: Thankfully, if you're finding yourself working with Yii and Codeception, you
    should be spared a bit of headaches putting together different frameworks and
    wasting a bit of time experimenting a working solution.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，如果你发现自己正在使用Yii和Codeception进行工作，你应该可以避免一些头痛，不必将不同的框架组合在一起，也不必浪费太多时间来实验一个可行的解决方案。
- en: Team-wise, when the experience in testing is not widespread nor solid, additional
    practices can be introduced that can help avoid bottlenecks or have all the knowledge
    trapped in a single person, such as paired programming and code reviews.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队层面，当测试经验既不广泛也不稳固时，可以引入一些额外的实践来帮助避免瓶颈或让所有知识都集中在一个人身上，例如结对编程和代码审查。
- en: Some companies, like Atlassian, introduced test engineers that could help the
    teams, both from a mentoring perspective and a mere quality assurance side. Their
    interventions in the development cycle ended up being confined to a more restricted
    participation, at the very beginning and before completing the task. Their role
    is, nonetheless, fundamental, as they became the guardians of the testing infrastructure,
    the tools, and the practices to be adopted, while the developer grew to become
    a fully fledged tester who can cover almost any aspect of testing without much
    support.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司，如Atlassian，引入了测试工程师，他们可以从指导和质量保证的角度帮助团队。他们在开发周期中的干预最终被限制在更有限的参与中，即在任务开始之前和完成之前。尽管如此，他们的角色是基本的，因为他们成为了测试基础设施、工具和要采用的实践的守护者，而开发者则成长为一名能够几乎涵盖测试所有方面的全面测试人员，而不需要太多支持。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've covered many aspects that are directly connected with
    testing, but are not strictly necessary to start testing, although they are fundamental
    if you want to understand why you've taken up this book and if it's necessary
    to go through the rest of it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了与测试直接相关但并非严格必要的许多方面，尽管如果你想要理解为什么选择这本书，以及是否需要继续阅读它是基本的。
- en: You've seen why it's important to test, some project management methodologies,
    how to estimate tasks and what it entails, and you've seen different testing approaches
    such as TDD and BDD, which will be the basis for many of the remaining chapters.
    At the end, I've tried to give an idea of what it takes to gain the testing mindset
    required to become a master in this art.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了测试的重要性，一些项目管理方法，如何估算任务以及它包含的内容，你还看到了不同的测试方法，如 TDD 和 BDD，这些将成为许多剩余章节的基础。最后，我尝试给出一个关于获得成为测试大师所需测试心态的想法。
- en: In [Chapter 2](ch02.html "Chapter 2. Tooling up for Testing"), *Tooling up for
    Testing*, we will start gearing up with the tools we are going to use throughout
    the rest of this book, understanding the basics of Yii 2 and applying what we've
    learned in this chapter by outlining our test plan.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二章](ch02.html "第二章. 准备测试工具")中，*准备测试工具*，我们将开始准备本书剩余部分将要使用的工具，了解 Yii 2 的基础知识，并通过概述我们的测试计划来应用本章所学。
