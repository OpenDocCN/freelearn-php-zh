- en: Chapter 1. Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 基础知识
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing the framework
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装框架
- en: Application templates
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用模板
- en: Dependency injection container
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入容器
- en: Service locator
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务定位器
- en: Code generation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码生成
- en: Configuring components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置组件
- en: Working with events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理事件
- en: Using external code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部代码
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'In this chapter we will cover how to install Yii Framework and about possible
    techniques of installation. We will introduce you to application templates: basic
    and advanced and their difference between them. Then you will learn about dependency
    injection container. This chapter contains info about model events, which trigger
    after some actions such as model saving, updating and others. We will learn how
    to use external code which will include ZendFramework, Laravel, or Symfony. We
    will also be learning about how to update your `yii-1.x.x` based application to
    `yii2` step-by-step.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何安装 Yii 框架以及可能的安装技术。我们将向您介绍应用模板：基本和高级模板及其之间的区别。然后您将了解依赖注入容器。本章包含有关模型事件的信息，这些事件在执行某些操作（如模型保存、更新等）后触发。我们将学习如何使用外部代码，包括
    ZendFramework、Laravel 或 Symfony。我们还将学习如何逐步将基于 `yii-1.x.x` 的应用程序更新到 `yii2`。
- en: Installing the framework
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装框架
- en: Yii2 is a modern PHP framework provided as a Composer package. In this recipe,
    we will install the framework via the Composer package manager and configure the
    database connection for our application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 是一个现代的 PHP 框架，以 Composer 包的形式提供。在本教程中，我们将通过 Composer 包管理器安装该框架，并配置应用程序的数据库连接。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First of all, install the Composer package manager on your system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在您的系统上安装 Composer 包管理器。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: If you use the OpenServer application on Windows, than the `composer`
    command already exists in the OpenServer terminal.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：如果您在 Windows 上使用 OpenServer 应用程序，那么 `composer` 命令已经在 OpenServer 终端中存在。'
- en: 'In Mac or Linux download the installer from [https://getcomposer.org/download/](https://getcomposer.org/download/)
    and install it globally by using the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 或 Linux 系统中，从 [https://getcomposer.org/download/](https://getcomposer.org/download/)
    下载安装程序，并使用以下命令全局安装：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Windows without OpenServer download and run `Composer-Setup.exe` from the
    [https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md)
    page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 系统中，从 [https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md)
    页面下载并运行 `Composer-Setup.exe`。
- en: If you do not have administrative privileges on the system then as an alternative
    you can just download the [https://getcomposer.org/composer.phar](https://getcomposer.org/composer.phar)
    raw file and use the `php composer.phar` call instead of single the `composer`
    command.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有系统管理员权限，那么作为替代方案，您可以只下载 [https://getcomposer.org/composer.phar](https://getcomposer.org/composer.phar)
    原始文件，并使用 `php composer.phar` 调用代替单个的 `composer` 命令。
- en: 'After installation run in your terminal:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，在您的终端中运行：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or (if you just download archive) its alternative:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 或者（如果您只是下载了存档），其替代方案：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When the installation succeeds you will see the following response:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装成功时，您将看到以下响应：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Right now you can install any package from the [https://packagist.org](https://packagist.org)
    repository.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 目前您可以从 [https://packagist.org](https://packagist.org) 仓库安装任何包。
- en: How to do it…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: You can install basic or advanced application templates. In order to learn about
    the differences between the templates see the *Application templates* recipe.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以安装基本或高级应用模板。为了了解模板之间的区别，请参阅 *应用模板* 部分的说明。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that during installation the Composer package manager gets a lot of information
    from the GitHub site. GitHub may limit requests for anonymous users. In this case
    Composer asks you to input your access token. You should just register the [https://github.com](https://github.com)
    site and generate a new token via the [https://github.com/blog/1509-personal-api-tokens](https://github.com/blog/1509-personal-api-tokens)
    guide.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在安装过程中，Composer 包管理器从 GitHub 网站获取大量信息。GitHub 可能会限制匿名用户的请求。在这种情况下，Composer
    会要求您输入您的访问令牌。您只需注册 [https://github.com](https://github.com) 网站，并通过 [https://github.com/blog/1509-personal-api-tokens](https://github.com/blog/1509-personal-api-tokens)
    指南生成新的令牌即可。
- en: Installing a basic project template
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装基本项目模板
- en: 'Carry out the following steps for installing basic project template:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以安装基本项目模板：
- en: 'As the first step open your terminal and install **Bower-to-Composer** adapter:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一步，打开您的终端并安装 **Bower-to-Composer** 适配器：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It provides a simple way to load related non-PHP packages (JavaScript and CSS)
    from the Bower repository.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它提供了一种简单的方法，可以从 Bower 仓库加载相关的非 PHP 包（JavaScript 和 CSS）。
- en: 'Create a new application in the new `basic` directory:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的 `basic` 目录中创建一个新的应用程序：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check that your PHP contains the required extensions:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的 PHP 是否包含所需的扩展：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: PHP in command-mode and in web-interface mode can use different `php.ini`
    files with different configurations and different extensions.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：命令行模式下的 PHP 和网页界面模式下的 PHP 可以使用不同的 `php.ini` 文件，具有不同的配置和不同的扩展。'
- en: Create a new database (if it is needle for your project) and configure it in
    the `config/db.php` file.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的数据库（如果您的项目需要），并在 `config/db.php` 文件中进行配置。
- en: 'Try to run application via the following console command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试通过以下控制台命令运行应用程序：
- en: '[PRE7]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Check in your browser that the application works by the `http://localhost:8080`
    address:![Installing a basic project template](img/image00451.jpeg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `http://localhost:8080` 地址检查浏览器中应用程序是否工作：![安装基本项目模板](img/image00451.jpeg)
- en: For permanent working create a new host in your server (Apache, Nginx, and so
    on) and set the `web` directory as a document root of the host.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了永久工作，在您的服务器（Apache、Nginx 等）上创建一个新的主机，并将 `web` 目录设置为该主机的文档根。
- en: Installing advanced project template
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装高级项目模板
- en: 'Carry out the following steps for installing advanced project template:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以安装高级项目模板：
- en: 'As the first step open your terminal install Bower-to-Composer adapter:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一步，在终端中安装 Bower-to-Composer 适配器：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It provides a simple way to load related non-PHP packages (JavaScript and CSS)
    from the Bower repository.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它提供了一种简单的方法，可以从 Bower 仓库加载相关的非 PHP 包（JavaScript 和 CSS）。
- en: 'Create a new application in the new `basic` directory:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的 `basic` 目录中创建一个新的应用程序：
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The new application does not contains local configuration files and `index.php`
    entry scripts yet. To generate the files just `init` a working environment:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新应用程序尚未包含本地配置文件和 `index.php` 入口脚本。要生成这些文件，只需 `init` 一个工作环境：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: During initialization select the **Development** environment.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在初始化过程中选择 **开发** 环境。
- en: 'Check that your PHP contains the required extensions:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的 PHP 是否包含所需的扩展：
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: PHP in **command-line** mode and in **web-interface** mode can use
    different `php.ini` files with different configuration and different extensions.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：命令行模式下的 PHP 和网页界面模式下的 PHP 可以使用不同的 `php.ini` 文件，具有不同的配置和不同的扩展。'
- en: Create a new database and configure it in the generated `common/config/main-local.php`
    file.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的数据库，并在生成的 `common/config/main-local.php` 文件中进行配置。
- en: 'Apply the application migrations:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用应用程序迁移：
- en: '[PRE12]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command will automatically create a `user` table in your database.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将在您的数据库中自动创建一个 `user` 表。
- en: 'Try to run a frontend application by the following console command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试通过以下控制台命令运行前端应用程序：
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then run the backend in an other terminal window:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，在另一个终端窗口中运行后端：
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Check in your browser that the application works via the `http://localhost:8080`
    and `http://localhost:8090` addresses:![Installing advanced project template](img/image00455.jpeg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中检查应用程序是否通过 `http://localhost:8080` 和 `http://localhost:8090` 地址工作：![安装高级项目模板](img/image00455.jpeg)
- en: Create two new hosts for backend and frontend application in your server (Apache,
    Nginx, and so on) and set the `backend/web` and `frontend/web` directories as
    document roots of the hosts.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的服务器（Apache、Nginx 等）上创建两个新的主机用于后端和前端应用程序，并将 `backend/web` 和 `frontend/web`
    目录设置为这些主机的文档根。
- en: How it works…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: First of all, we installed the Composer package manager and the Bower asset
    plugin.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们安装了 Composer 包管理器和 Bower 资产插件。
- en: After we installed the application via the `composer create-project` command,
    the command creates a new empty directory, clones the source code of application
    template and loads all its inner dependencies (framework and other components)
    into the `vendor` subdirectory.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `composer create-project` 命令安装应用程序后，该命令会自动创建一个新的空目录，克隆应用程序模板的源代码，并将所有内部依赖（框架和其他组件）加载到
    `vendor` 子目录中。
- en: If needed, we will initialize application configuration and set up a new database.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们将初始化应用程序配置并设置一个新的数据库。
- en: We can check system requirements via running the `requirements.php` script in
    console or browser mode.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在控制台或浏览器模式下运行 `requirements.php` 脚本来检查系统要求。
- en: And after cloning of the code we can configure our own PHP server to work with
    the `web` directories as the server's document roots.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码克隆之后，我们可以配置自己的 PHP 服务器，使其与 `web` 目录作为服务器的文档根一起工作。
- en: See also
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about installing `yii2-app-basic` refer to, [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于安装`yii2-app-basic`的更多信息，请参考[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: Refer to, [https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md](https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md)
    for `yii2-app-advanced`.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md](https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md)以了解`yii2-app-advanced`。
- en: Refer to, [https://getcomposer.org](https://getcomposer.org) for the Composer
    package manager.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[https://getcomposer.org](https://getcomposer.org)以获取Composer包管理器。
- en: For creating a GitHub access token for Composer refer to [https://github.com/blog/1509-personal-api-tokens](https://github.com/blog/1509-personal-api-tokens).
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于为Composer创建GitHub访问令牌，请参考[https://github.com/blog/1509-personal-api-tokens](https://github.com/blog/1509-personal-api-tokens)。
- en: Application templates
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序模板
- en: 'Yii2 has two application templates for development: basic and advanced. What
    is the difference between basic and advanced templates?'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2为开发提供了两个应用程序模板：基本和高级。基本和高级模板之间有什么区别？
- en: The names are confusing. Some people in the end choose basic because advanced
    may sound repulsive. In this chapter we will look at the differences.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 名称令人困惑。有些人最终选择基本，因为高级可能听起来令人反感。在本章中，我们将探讨这些区别。
- en: How to do it…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Please refer to the *Installing the framework* recipe's *How to do it…* section
    to understand and learn how to install different templates.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考*安装框架*菜谱的*如何做...*部分，以了解和学习如何安装不同的模板。
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The advanced template has a custom system of configurations. It is developed
    so that a team can work together on a project but each developer can customize
    their own configurations for development, testing, and other environments.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 高级模板有一个自定义的配置系统。它是为了使团队能够共同工作在一个项目上，但每个开发者都可以为开发、测试和其他环境定制自己的配置。
- en: Configuration environments can be complicated and normally aren't used when
    you develop alone.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 配置环境可能很复杂，通常在单独开发时不会使用。
- en: The advanced template has frontend and backend folders for the frontend and
    backend parts of the web application accordingly. So you can configure a separate
    host for each folder and thereby isolate the frontend and backend part.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 高级模板为Web应用程序的前端和后端部分分别提供了前端和后端文件夹。因此，你可以为每个文件夹配置一个单独的主机，从而隔离前端和后端部分。
- en: This is a simple way to organize files into directories and configure the web
    server. You can easily do the same thing in the basic template.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种将文件组织到目录中并配置Web服务器的简单方法。你可以在基本模板中轻松完成相同的事情。
- en: Neither front/back-end separation nor user management is on its own a good reason
    to choose the advanced template. It's better to adapt these features to your app—you'll
    learn more and won't get the difficult config problem.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前端/后端分离或用户管理本身并不是选择高级模板的好理由。更好的做法是将这些功能适应到你的应用程序中——你会学到更多，而且不会遇到困难的配置问题。
- en: If you will be working on the project with a team and you might need configuration
    flexibility, use different environments to develop and in this case a better choice
    would be the advanced application template. If you will be working alone and your
    project is simple you should choose the basic application template.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将与团队一起在项目上工作，并且可能需要配置灵活性，请使用不同的环境进行开发，在这种情况下，更好的选择是使用高级应用程序模板。如果你将单独工作，并且你的项目很简单，你应该选择基本应用程序模板。
- en: Dependency injection container
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入容器
- en: '**Dependency Inversion Principle** (**DIP**) suggests we create modular low-coupling
    code with the help of extracting clear abstraction subsystems.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖倒置原则**（**DIP**）建议我们通过提取清晰的抽象子系统来创建模块化低耦合代码。'
- en: For example, if you want to simplify a big class you can split it into many
    chunks of routine code and extract every chunk into a new simple separated class.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想简化一个大类，你可以将其拆分为许多常规代码块，并将每个块提取到一个新的简单分离的类中。
- en: The principle says that your low-level chunks should implement an all-sufficient
    and clear abstraction, and high-level code should work only with this abstraction
    and not low-level implementation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 原则指出，你的低级块应该实现一个全面且清晰的抽象，而高级代码应该只与此抽象一起工作，而不是与低级实现一起工作。
- en: When we split a big multitask class into small specialized classes, we face
    the issue of creating dependent objects and injecting them into each other.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将一个大型的多任务类分割成小的专业类时，我们面临创建依赖对象并将它们注入到彼此中的问题。
- en: 'If we could create one instance before:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们之前能创建一个实例：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And after splitting we will create or get all dependent items and build our
    service:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在分割之后，我们将创建或获取所有依赖项并构建我们的服务：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Dependency injection container is a factory that allows us to not care about
    building our objects. In Yii2 we can configure a container only once and use it
    for retrieving our service like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入容器是一个工厂，它允许我们不必关心构建我们的对象。在Yii2中，我们可以配置容器一次，并像这样使用它来检索我们的服务：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can also use this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用这个：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Or we ask the container to inject it as a dependency in the constructor of
    an other service:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们要求容器将其作为依赖项注入到其他服务的构造函数中：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When we will get the `OtherService` instance:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将获取`OtherService`实例时：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In all cases the container will resolve all dependencies and inject dependent
    objects in each other.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，容器将解决所有依赖项，并在彼此之间注入依赖对象。
- en: In the recipe we create shopping cart with storage subsystem and inject the
    cart automatically into controller.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在配方中，我们创建带有存储子系统的购物车，并自动将购物车注入到控制器中。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的Composer包管理器创建新应用程序，官方指南链接为[http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html)。
- en: How to do it…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Carry out the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create a shopping cart class:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建购物车类：
- en: '[PRE21]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: It will work only with own items. Instead of built-in storing items to session
    it will delegate this responsibility to any external storage class, which will
    implement the `StorageInterface` interface.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它只适用于自己的项目。它不会将内置存储项目到会话中，而是将这项责任委托给任何实现`StorageInterface`接口的外部存储类。
- en: The cart class just gets the storage object in its own constructor, saves it
    instance into private `$storage` field and calls its `load()` and `save()` methods.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 购物车类在其自己的构造函数中获取存储对象，将其实例保存到私有`$storage`字段中，并调用其`load()`和`save()`方法。
- en: 'Define a common cart storage interface with the required methods:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个具有所需方法的通用购物车存储接口：
- en: '[PRE22]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a simple storage implementation. It will store selected items in a server
    session:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的存储实现。它将在服务器会话中存储所选项目：
- en: '[PRE23]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The storage gets any framework session instance in the constructor and uses
    it later for retrieving and storing items.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储在构造函数中获取任何框架会话实例，并在稍后用于检索和存储项目。
- en: 'Configure the `ShoppingCart` class and its dependencies in the `config/web.php`
    file:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config/web.php`文件中配置`ShoppingCart`类及其依赖项：
- en: '[PRE24]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create the cart controller with an extended constructor:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用扩展构造函数创建购物车控制器：
- en: '[PRE25]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a form:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表单：
- en: '[PRE26]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create the `views/cart/index.php` view:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`views/cart/index.php`视图：
- en: '[PRE27]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create the `views/cart/add.php` view:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`views/cart/add.php`视图：
- en: '[PRE28]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add link items into the main menu:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将链接项目添加到主菜单中：
- en: '[PRE29]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Open the cart page and try to add rows:![How to do it…](img/image00448.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开购物车页面并尝试添加行：![如何操作…](img/image00448.jpeg)
- en: How it works…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In this case we have the main `ShoppingCart` class with a low-level dependency,
    defined by an abstraction interface:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有一个主要的`ShoppingCart`类，它具有低级依赖项，由抽象接口定义：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And we have some an implementation of the abstraction:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 并且我们有一些抽象的实现：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Right now we can create an instance of the cart manually like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以像这样手动创建购物车实例：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It allows us to create a lot of different implementations such as `SessionStorage`,
    `CookieStorage`, or `DbStorage`. And we can reuse the framework-independent `ShoppingCart`
    class with `StorageInterface` in different projects and different frameworks.
    We must only implement the storage class with the interface's methods for needed
    framework.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们创建许多不同的实现，例如`SessionStorage`、`CookieStorage`或`DbStorage`。我们可以在不同的项目和不同的框架中使用框架无关的`ShoppingCart`类和`StorageInterface`接口。我们只需为所需的框架实现具有接口方法的存储类即可。
- en: But instead of manually creating an instance with all dependencies, we can use
    a dependency injection container.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们不必手动创建具有所有依赖项的实例，我们可以使用依赖注入容器。
- en: 'By default the container parses the constructors of all classes and recursively
    creates all the required instances. For example, if we have four classes:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，容器解析所有类的构造函数，并递归地创建所有所需的实例。例如，如果我们有四个类：
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can retrieve the instance of class `A` in two ways:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式检索类`A`的实例：
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: And the container automatically creates instances of the `B`, `D`, `C`, and
    `A` classes and injects them into each other.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 容器自动创建`B`、`D`、`C`和`A`类的实例，并将它们相互注入。
- en: 'In our case we mark the cart instance as a singleton:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将购物车实例标记为单例：
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This means that the container will return a single instance for every repeated
    call instead of creating the cart again and again.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着容器将为每个重复的调用返回单个实例，而不是反复创建购物车。
- en: 'Besides, our `ShoppingCart` has the `StorageInterface` type in its own constructor
    and the container does know what class it must instantiate for this type. We must
    manually bind the class to the interface like this:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们的`ShoppingCart`在其构造函数中具有`StorageInterface`类型，容器知道必须为该类型实例化哪个类。我们必须像这样手动将类绑定到接口：
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'But our `SessionStorage` class has non-standard constructor:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们的`SessionStorage`类具有非标准构造函数：
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Therefore we use an anonymous function to manually creatie the instance:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我们使用匿名函数手动创建实例：
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'And after all we can retrieve the cart object from the container manually in
    our own controllers, widgets, and other places:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些之后，我们可以在自己的控制器、小部件和其他地方手动从容器中检索购物车对象：
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'But every controller and other object will be created via the `createObject`
    method inside the framework. And we can use injection of cart via the controller
    constructor:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 但每个控制器和其他对象将通过框架内部的`createObject`方法创建。并且我们可以通过控制器构造函数注入购物车：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Use this injected cart object:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个注入的购物车对象：
- en: '[PRE41]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: See also
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about DIP refer to [https://en.wikipedia.org/wiki/Dependency_inversion_principle](https://en.wikipedia.org/wiki/Dependency_inversion_principle)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关DIP的更多信息，请参阅[https://en.wikipedia.org/wiki/Dependency_inversion_principle](https://en.wikipedia.org/wiki/Dependency_inversion_principle)
- en: In order to learn more about dependency injection container refer to [http://www.yiiframework.com/doc-2.0/guide-concept-di-container.html](http://www.yiiframework.com/doc-2.0/guide-concept-di-container.html)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了了解更多关于依赖注入容器的信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-concept-di-container.html](http://www.yiiframework.com/doc-2.0/guide-concept-di-container.html)
- en: Service locator
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务定位器
- en: Instead of manually creating instances of different shared services (application
    components) we can get them from a special global object, which contains configurations
    and instances of all components.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是手动创建不同共享服务（应用程序组件）的实例，而是可以从一个特殊的全局对象中获取它们，该对象包含所有组件的配置和实例。
- en: A service locator is a global object that contains a list of components or definitions,
    uniquely identified by an ID, and allow us to retrieve any needed instance by
    its ID. The locator creates a single instance of the component on-the-fly at the
    first call and returns a previous instance at the subsequent calls.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 服务定位器是一个全局对象，其中包含一个组件或定义的列表，每个组件或定义都有一个唯一的ID，并允许我们通过其ID检索任何所需的实例。定位器在第一次调用时即时创建组件的单个实例，并在后续调用中返回之前创建的实例。
- en: In this recipe, we will create a shopping cart component and will write a cart
    controller for working with it.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个购物车组件，并将编写一个用于处理它的购物车控制器。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的应用程序，如官方指南中所述[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it…
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Carry out the following steps to create a shopping cart component:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建购物车组件：
- en: 'Create a shopping cart component. It will store selected items in a user session:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个购物车组件。它将在用户会话中存储所选项目：
- en: '[PRE42]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Register the `ShoppingCart` in service locator as an application component
    in the `config/web.php` file:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config/web.php`文件中将`ShoppingCart`注册到服务定位器中，作为应用程序组件：
- en: '[PRE43]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a cart controller:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建购物车控制器：
- en: '[PRE44]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a form:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表单：
- en: '[PRE45]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create the `views`/`cart`/`index.php` view:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`views`/`cart`/`index.php`视图：
- en: '[PRE46]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create the `views`/`cart`/`add.php` view:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`views`/`cart`/`add.php`视图：
- en: '[PRE47]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add a link item into the main menu:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主菜单中添加一个链接项：
- en: '[PRE48]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Open the cart page and try to add rows:![How to do it…](img/image00458.jpeg)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开购物车页面并尝试添加行：![如何操作…](img/image00458.jpeg)
- en: How it works…
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'First of all we created our own class with a public `sessionKey` option:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了自己的类，并公开了 `sessionKey` 选项：
- en: '[PRE49]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Secondly, we added the component definition into the `components` section of
    the configuration file:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们将组件定义添加到配置文件的 `components` 部分：
- en: '[PRE50]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Right now we can retrieve the component instance in two ways:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们可以通过两种方式检索组件实例：
- en: '[PRE51]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: And we can use this object in our own controllers, widgets, and other places.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个对象在我们的控制器、小部件和其他地方。
- en: 'When we call any component such as `cart`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用任何组件，如 `cart`：
- en: '[PRE52]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We call the virtual property of the `Application` class instance in the `Yii::$app`
    static variable. But the `yii\base\Application` class extends the `yii\base\Module`
    class, which extends the `yii\di\ServiceLocator` class with the `__get` magic
    method. This magic method just calls the `get()` method of the `yii\di\ServiceLocator`
    class:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `Yii::$app` 静态变量中调用 `Application` 类实例的虚拟属性。但是，`yii\base\Application` 类扩展了
    `yii\base\Module` 类，该类通过 `__get` 魔法方法扩展了 `yii\di\ServiceLocator` 类。这个魔法方法只是调用
    `yii\di\ServiceLocator` 类的 `get()` 方法：
- en: '[PRE53]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'As a result it is an alternative to directly calling the service via the `get`
    method:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它是直接通过 `get` 方法调用服务的一个替代方案：
- en: '[PRE54]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: When we get a component from the `get` method of service locator, the locator
    finds needed definition in its `_definitions` list and if successful it creates
    a new object by the definition on the fly, registers it in its own list of complete
    instances `_components` and returns the object.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从服务定位器的 `get` 方法获取组件时，定位器在其 `_definitions` 列表中查找所需定义，如果成功，它将根据定义动态创建一个新对象，将其注册在其自己的完整实例列表
    `_components` 中，并返回该对象。
- en: 'If we get some component, multiplying the locator will always return the previous
    saved instance again and again:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们获取某个组件，通过定位器乘以定位器将始终返回之前保存的实例：
- en: '[PRE55]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: It allows us to use the shared single cart instance `Yii::$app->cart` or single
    database connection `Yii::$app->db` instead of creating one large set from scratch
    again and again.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们使用共享的单个购物车实例 `Yii::$app->cart` 或单个数据库连接 `Yii::$app->db`，而不是每次都从头开始创建一个大型集合。
- en: See also
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about the service locator and about core framework components
    refer to [http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html](http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html)
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于服务定位器和核心框架组件的信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html](http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html)
- en: The *Configuring components* recipe
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置组件* 的配方'
- en: The *Creating components* recipe in [Chapter 8](part0086.xhtml#2I0GC1-ae331331bc644dc9b658d3634f0748da
    "Chapter 8. Extending Yii"), *Extending Yii*
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 8 章](part0086.xhtml#2I0GC1-ae331331bc644dc9b658d3634f0748da "第 8 章。扩展 Yii")
    的 *创建组件* 配方中，*扩展 Yii*
- en: Code generation
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码生成
- en: Yii2 provides the powerful module Gii to generate models, controllers, and views,
    which you can easily modify and customize. It's a really helpful tool for fast
    and quick development.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 提供了强大的模块 Gii，用于生成模型、控制器和视图，你可以轻松地进行修改和定制。这是一个真正有助于快速开发的工具。
- en: In this section we will explore how to use Gii and generate code. For example
    you have a database with one table named `film` and you would like to create an
    application with CRUD operations for this table. It's easy.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用 Gii 生成代码。例如，你有一个名为 `film` 的数据库表，你希望为这个表创建一个具有 CRUD 操作的应用程序。这很简单。
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using composer as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方指南使用 composer 创建一个新的应用程序 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: Download the Sakila database from [http://dev.mysql.com/doc/index-other.html](http://dev.mysql.com/doc/index-other.html).
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://dev.mysql.com/doc/index-other.html](http://dev.mysql.com/doc/index-other.html)
    下载 Sakila 数据库。
- en: 'Execute the downloaded SQLs: first the schema then the data.'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行下载的 SQL 文件：首先执行模式，然后执行数据。
- en: Configure the database connection in `config/main.php` to use the Sakila database.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config/main.php` 中配置数据库连接以使用 Sakila 数据库。
- en: Run your web-server by `./yii serve`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `./yii serve` 运行你的 web 服务器。
- en: How to do it…
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Go to `http://localhost:8080/index.php?r=gii` and select **Model Generator**.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 `http://localhost:8080/index.php?r=gii` 并选择 **模型生成器**。
- en: Fill out **Table Name** as `actor` and **Model Class** as `Actor` and press
    button **Generate** at the bottom of page.![How to do it…](img/image00463.jpeg)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **表名** 填写为 `actor`，将 **模型类** 填写为 `Actor`，然后在页面底部点击 **生成** 按钮。![如何做…](img/image00463.jpeg)
- en: Return tothe main Gii menu by clicking the **yii code generator** logo on the
    header and choose **CRUD Generator**.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击页眉上的 **yii 代码生成器** 标志返回主 Gii 菜单，并选择 **CRUD 生成器**。
- en: Fill out the **Model Class** field as `app\models\Actor` and **Controller Class**
    as `app\controllers\ActorController`.![How to do it…](img/image00466.jpeg)
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **模型类** 字段中填写 `app\models\Actor`，在 **控制器类** 中填写 `app\controllers\ActorController`。[![如何操作…](img/image00466.jpeg)]
- en: Press the **Preview** button at the bottom of page and then press green button
    **Generate**.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部点击 **预览** 按钮，然后点击绿色按钮 **生成**。
- en: Check the result via `http://localhost:8080/index.php?actor/create`.![How to
    do it…](img/image00480.jpeg)
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `http://localhost:8080/index.php?actor/create` 检查结果。[![如何操作…](img/image00480.jpeg)]
- en: How it works…
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: 'If you check your project structure you will see autogenerated code:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查你的项目结构，你会看到自动生成的代码：
- en: '![How it works…](img/image00471.jpeg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/image00471.jpeg)'
- en: Firstly we've created an `Actor` model. Gii automatically creates all model
    rules which depends on `mysql` field types. For example, if in your MySQL `actor`
    table's fields `first_name` and `last_name` have `IS NOT NULL` flag then Yii automatically
    creates rule for it `required` and sets max length `45` symbols because in our
    database max length of this field is set up as `45`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个 `Actor` 模型。Gii 会自动创建所有模型规则，这些规则依赖于 `mysql` 字段类型。例如，如果你的 MySQL `actor`
    表的字段 `first_name` 和 `last_name` 有 `IS NOT NULL` 标志，那么 Yii 会自动创建一个 `required` 规则，并设置最大长度为
    `45` 个符号，因为在我们数据库中，这个字段的长度设置为 `45`。
- en: '[PRE56]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Also Yii creates relationship between models automatically, based on foreign
    keys you added to your database. In our case two relations were created automatically.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Yii 会根据你添加到数据库的外键自动创建模型之间的关系。在我们的例子中，创建了两个自动关系。
- en: '[PRE57]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This relationship has been created because we have two foreign keys in our database.
    The `film_actor` table has foreign key `fk_film_actor_actor` which points to `actor`
    table fields `actor_id` and `fk_film_actor_film` which points to `film` table
    field `film_id`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的数据库中有两个外键，因此创建了这种关系。`film_actor` 表有外键 `fk_film_actor_actor`，它指向 `actor`
    表的字段 `actor_id`，以及 `fk_film_actor_film`，它指向 `film` 表的字段 `film_id`。
- en: Notice that you haven't generated `FilmActor` model yet. So if you would develop
    full-app versus demo you had to generate `Film`, `FilmActor` models also. For
    the rest of the pieces, refer to [http://www.yiiframework.com/doc-2.0/guide-start-gii.html](http://www.yiiframework.com/doc-2.0/guide-start-gii.html).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你还没有生成 `FilmActor` 模型。所以如果你要开发全功能应用而不是演示，你必须生成 `Film`、`FilmActor` 模型。对于其他部分，请参阅
    [http://www.yiiframework.com/doc-2.0/guide-start-gii.html](http://www.yiiframework.com/doc-2.0/guide-start-gii.html)。
- en: Configuring components
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置组件
- en: Yii is a very customizable framework. Moreover, as in all customizable code,
    there should be a convenient way to set up different application parts. In Yii,
    this is provided through configuration files located at `config`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 是一个非常可定制的框架。此外，正如所有可定制代码一样，应该有一个方便的方式来设置不同的应用程序部分。在 Yii 中，这是通过位于 `config`
    的配置文件来提供的。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 通过官方指南中描述的 Composer 包管理器创建一个新的应用程序，请参阅 [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html)。
- en: How to do it…
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'If you have worked with Yii before, then you have probably configured a database
    connection:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前使用过 Yii，那么你可能已经配置了一个数据库连接：
- en: '[PRE58]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This way of configuring components is used when you want to use a component
    across all application parts. With the preceding configuration, you can access
    a component by its name, such as `Yii::$app->db`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要在应用程序的所有部分使用一个组件时，会使用这种方式来配置组件。使用前面的配置，你可以通过其名称访问一个组件，例如 `Yii::$app->db`。
- en: How it works…
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: When you are using the `Yii::$app->db` component for the first time directly
    or through an Active Record model, Yii creates a component and initializes its
    public properties with the corresponding values provided in `db` array under the
    `components` section of the application configuration file. In the preceding code,
    `dsn` value will be assigned to `yii\db\Connection::dsn`, `username` will be assigned
    to `Connection::username`, and so on.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次直接使用或通过 Active Record 模型使用 `Yii::$app->db` 组件时，Yii 会创建一个组件，并使用应用程序配置文件
    `components` 部分下 `db` 数组中提供的对应值初始化其公共属性。在上面的代码中，`dsn` 值将被分配给 `yii\db\Connection::dsn`，`username`
    将被分配给 `Connection::username`，依此类推。
- en: If you want to find out what `charset` stands for or want to know what else
    you can configure in the `db` component, then you need to know its class. In the
    case of the `db` component, the class is `yii\db\Connection`. You can just open
    the class and look for its public properties, which you can set from config.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解`charset`的含义或想知道您可以在`db`组件中配置什么，那么您需要知道它的类。在`db`组件的情况下，类是`yii\db\Connection`。您可以打开这个类并查找其公共属性，您可以从配置中设置这些属性。
- en: 'In the preceding code, the `class` property is a bit special because it is
    used to specify the component class name. It does not exist in the `yii\db\Connection`
    class. Therefore, it can be used to override a class as follows:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`class`属性有点特殊，因为它用于指定组件类名。它不存在于`yii\db\Connection`类中。因此，它可以用来覆盖类，如下所示：
- en: '[PRE59]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This way, you can override each application component; this is very useful whenever
    a standard component does not fit your application.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您可以覆盖每个应用程序组件；当标准组件不适合您的应用程序时，这非常有用。
- en: Built-in components
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置组件
- en: 'Now, let''s find out which standard Yii application components you can configure.
    There are two application types bundled with Yii:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们找出您可以配置哪些标准的Yii应用程序组件。Yii捆绑了两种应用程序类型：
- en: Web application (`yii\webApplication`)
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序（`yii\webApplication`）
- en: Console application (`yii\console\Application`)
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台应用程序（`yii\console\Application`）
- en: Both are extended from `yii\base\Application`, so both console and web applications
    share its components.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都扩展自`yii\base\Application`，因此控制台和Web应用程序共享其组件。
- en: You can get the component names from the source code of the `coreComponents()`
    application's method.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从`coreComponents()`应用程序方法的源代码中获取组件名称。
- en: You can add your own application components (classes extended from `yii\base\Component`)
    by simply adding new configuration items and pointing their class properties to
    your custom classes.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过添加新的配置项并将它们的类属性指向您的自定义类来简单地添加您自己的应用程序组件（从`yii\base\Component`扩展的类）。
- en: See also
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Both console and web application components are listed in the list at [http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html](http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html)
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台和Web应用程序组件列在[http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html](http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html)的列表中
- en: 'For more information on creating your own components see:'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关创建您自己的组件的更多信息，请参阅：
- en: The *Service locator* recipe
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*服务定位器*配方'
- en: The *Creating components* recipe in [Chapter 8](part0086.xhtml#2I0GC1-ae331331bc644dc9b658d3634f0748da
    "Chapter 8. Extending Yii"), *Extending Yii*
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](part0086.xhtml#2I0GC1-ae331331bc644dc9b658d3634f0748da "第8章。扩展Yii")的*创建组件*配方中，*扩展Yii*，*Creating
    components*
- en: Working with events
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与事件一起工作
- en: Yii's events provide a simple implementation, which allows you to listen and
    subscribe to various events that occur in your web-application. For example, you
    may wish to send a notification about a new article to followers each time you
    publish new material.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Yii的事件提供了一个简单的实现，它允许您监听和订阅在您的Web应用程序中发生的各种事件。例如，您可能希望在发布新材料时向每位读者发送有关新文章的通知。
- en: Getting ready
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方指南在[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)中使用Composer包管理器创建一个新的应用程序。
- en: 'Execute the following SQL code on your server to create the `article` table:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的服务器上执行以下SQL代码以创建`article`表：
- en: '[PRE60]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Generate the `Article` model using Gii.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii生成`Article`模型。
- en: Run your webserver by `./yii serve` command.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`./yii serve`命令运行您的Web服务器。
- en: How to do it…
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Add an action test to `\controllers\SiteController`:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`\controllers\SiteController`中添加一个测试操作：
- en: '[PRE61]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Update the `config/web.php` component `mailer` using the following code.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新`config/web.php`组件`mailer`。
- en: '[PRE62]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Run this URL in your browser: `http://localhost:8080/index.php?r=site/test`.'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中运行此URL：`http://localhost:8080/index.php?r=site/test`。
- en: Also check `http://www.fakemailgenerator.com/inbox/teleworm.u``s/john2/`.![How
    to do it…](img/image00510.jpeg)
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也请检查`http://www.fakemailgenerator.com/inbox/teleworm.u``s/john2/`。![如何做…](img/image00510.jpeg)
- en: How it works…
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We've created an `Article` model and added a handler for the `ActiveRecord::EVENT_AFTER_INSERT`
    event to our `Article` model. It means that every time we save a new article an
    event is triggered and our attached handler will be called.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个`Article`模型，并为`Article`模型添加了一个处理`ActiveRecord::EVENT_AFTER_INSERT`事件的处理器。这意味着每次我们保存一篇新文章时，都会触发一个事件，并且我们的附加处理器将被调用。
- en: In the real-world, we would like to notify our blog followers each time we publish
    a new article. In a real application we would have a `follower` or `user` table
    and with different blog sections not only single blog. In this example, after
    saving our model we notify our followers `john2@teleworm.us`, `shivawhite@cuvox.de`,
    and `kate@dayrep.com`. In the last step we just prove that users have received
    our notifications, particularly `john2`. You can create your own event with any
    name. In this example we use a built-in event called `ActiveRecord::EVENT_AFTER_INSERT`,
    which is called after each insert to the database.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，我们希望在每次发布新文章时通知我们的博客关注者。在一个真实的应用程序中，我们会有一个`follower`或`user`表，以及不同的博客部分，而不仅仅是单个博客。在这个例子中，在保存我们的模型后，我们通知我们的关注者`john2@teleworm.us`、`shivawhite@cuvox.de`和`kate@dayrep.com`。在最后一步中，我们只是证明用户已经收到了我们的通知，特别是`john2`。你可以用任何名字创建自己的事件。在这个例子中，我们使用了一个内置的事件，称为`ActiveRecord::EVENT_AFTER_INSERT`，它在每次向数据库插入后都会被调用。
- en: 'For example, we can create our own event. Just add a new `actionTestNew` with
    the following code:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以创建自己的事件。只需添加一个新的`actionTestNew`，代码如下：
- en: '[PRE63]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Also add the `EVENT_OUR_CUSTOM_EVENT` constant to `models/Article` as:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 还要将`EVENT_OUR_CUSTOM_EVENT`常量添加到`models/Article`中，如下所示：
- en: '[PRE64]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Run `http://localhost:8080/index.php?r=site/test-new`.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`http://localhost:8080/index.php?r=site/test-new`。
- en: You should see the same result and all notifications to followers will be sent
    again. The main difference is we used our custom event name.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到相同的结果，并且所有通知都会再次发送给关注者。主要区别是我们使用了自定义的事件名称。
- en: After the save, we've triggered our event. Events may be triggered by calling
    the `yii\base\Component::trigger()` method. The method requires an event name,
    and optionally an event object that describes the parameters to be passed to the
    event handlers.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，我们已经触发了我们的事件。事件可以通过调用`yii\base\Component::trigger()`方法来触发。该方法需要一个事件名称，以及可选的事件对象，该对象描述了要传递给事件处理器的参数。
- en: See also
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about events refer to [http://www.yiiframework.com/doc-2.0/guide-concept-events.html](http://www.yiiframework.com/doc-2.0/guide-concept-events.html)
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于事件的信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-concept-events.html](http://www.yiiframework.com/doc-2.0/guide-concept-events.html)
- en: Using external code
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用外部代码
- en: Package repositories, PSR standards, and social coding provide us with lots
    of high-quality reusable libraries and other components with free licenses. We
    can just install any external component in project instead of reengineering them
    from scratch. It improves development performance and makes for higher-quality
    code.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包仓库、PSR标准和社会编码为我们提供了大量高质量的可重用库和其他免费许可的组件。我们只需在项目中安装任何外部组件，而不是从头开始重新设计它们。这提高了开发性能，并使代码质量更高。
- en: Getting ready
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 按照官方指南使用Composer包管理器创建一个新应用程序，如[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)中所述。
- en: How to do it…
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: In this recipe we will try to attach some libraries manually and via Composer.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将尝试手动和通过Composer安装一些库。
- en: Installing a library via Composer
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过Composer安装库
- en: 'When you use NoSQL or other databases without autoincrement primary keys, you
    must generate unique identifiers manually. For example, you can use **Universally
    Unique Identifier** (**UUID**) instead of a numerical one. Let''s do it:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用没有自增主键的NoSQL或其他数据库时，你必须手动生成唯一的标识符。例如，你可以使用**通用唯一标识符**（**UUID**）而不是数字标识符。让我们来做这件事：
- en: 'Install [https://github.com/ramsey/uuid](https://github.com/ramsey/uuid) component
    via Composer:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Composer安装[https://github.com/ramsey/uuid](https://github.com/ramsey/uuid)组件：
- en: '[PRE65]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Create a demonstration console controller:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个演示控制台控制器：
- en: '[PRE66]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'And just run it:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后运行它：
- en: '[PRE67]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'If successful, you''ll see the following output:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果成功，你将看到以下输出：
- en: '[PRE68]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: That's it! Now you can use the `Ramsey\Uuid\Uuid` class in your project.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！现在你可以在你的项目中使用`Ramsey\Uuid\Uuid`类。
- en: Installing libraries manually
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动安装库
- en: We can install a library automatically when it is provided as a Composer package.
    In other cases we must install it manually.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个库以Composer包的形式提供时，我们可以自动安装它。在其他情况下，我们必须手动安装。
- en: 'For example, create some library examples:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，创建一些库示例：
- en: 'Create the `awesome/namespaced/Library.php` file with the following code:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建`awesome/namespaced/Library.php`文件：
- en: '[PRE69]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Create the `old/OldLibrary.php` file:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`old/OldLibrary.php`文件：
- en: '[PRE70]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Create a set of functions as an `old/functions.php` file:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一组函数作为一个`old/functions.php`文件创建：
- en: '[PRE71]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'And now set up this file in our application:'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在我们的应用程序中设置此文件：
- en: 'Define the new alias for the `awesome` library namespace root in the `config/web.php`
    file (in `aliases` section):'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config/web.php`文件中的`aliases`部分定义`awesome`库命名空间根的新别名：
- en: '[PRE72]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'or via the `setAlias` method:'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者通过`setAlias`方法：
- en: '[PRE73]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Define a simple class file path at the top of the `config/web.php` file:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config/web.php`文件的顶部定义一个简单的类文件路径：
- en: '[PRE74]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Configure autoloading of the `functions.php` file in `composer.json`:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`composer.json`中配置`functions.php`文件的自动加载：
- en: '[PRE75]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'And apply the changes:'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并应用更改：
- en: '[PRE76]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'And now create an example controller:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个示例控制器：
- en: '[PRE77]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'And open the page:'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并打开页面：
- en: '![Installing libraries manually](img/image00524.jpeg)'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![手动安装库](img/image00524.jpeg)'
- en: Using Yii2 code in other frameworks
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在其他框架中使用Yii2代码
- en: 'If you want to use Yii2 framework code with other frameworks just add Yii2-specific
    parameters in `composer.json`:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在其他框架中使用Yii2框架的代码，只需在`composer.json`中添加Yii2特定的参数：
- en: '[PRE78]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'And install the framework:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 并安装框架：
- en: '[PRE79]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now open the entry script of your application (on ZendFramework, Laravel, Symfony,
    and many more), require the Yii2 autoloader, and create the Yii application instance:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开你应用程序的入口脚本（在ZendFramework、Laravel、Symfony等），引入Yii2自动加载器，并创建Yii应用程序实例：
- en: '[PRE80]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: That's it! Now you can use Yii::$app instances, models, widgets and other components
    from Yii2.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你可以使用Yii::$app实例、模型、小部件和其他从Yii2来的组件。
- en: How it works…
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: In the first case we just install a new Composer package in our project and
    use it, because its `composer.json` file defines all aspects of `autoloading`
    library files.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，我们只需在我们的项目中安装一个新的Composer包并使用它，因为它的`composer.json`文件定义了所有关于`autoloading`库文件的方面。
- en: But in the second case we did not have Composer packages and registered the
    files in the autoloading mechanism manually. In Yii2 we can use aliases and `Yii::$classMap`
    for registering the roots of PSR-4 namespaces and for single files.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 但在第二种情况下，我们没有Composer包，而是手动在自动加载机制中注册了文件。在Yii2中，我们可以使用别名和`Yii::$classMap`来注册PSR-4命名空间根和单个文件。
- en: 'But as an alternative we can use Composer autoloader for all cases. Just define
    an extended `autoload` section in the `composer.json` file like this:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 但作为替代，我们可以为所有情况使用Composer自动加载器。只需在`composer.json`文件中定义一个扩展的`autoload`部分，如下所示：
- en: '[PRE81]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Apply the changes using this command:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令应用更改：
- en: '[PRE82]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Right now you can remove aliases and `$classMap` definitions from your configuration
    files and ensure the example page still works correctly:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你可以从你的配置文件中移除别名和`$classMap`定义，并确保示例页面仍然可以正确工作：
- en: '![How it works…](img/image00479.jpeg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/image00479.jpeg)'
- en: This example completely uses Composer's autoloader instead of the framework's
    autoloader.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例完全使用Composer的自动加载器而不是框架的自动加载器。
- en: See also
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about integrating external code in Yii2 and framework code
    into our projects see the guide at [http://www.yiiframework.com/doc-2.0/guide-tutorial-yii-integration.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-yii-integration.html)
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于在Yii2中集成外部代码以及将框架代码集成到我们的项目中的信息，请参阅指南[http://www.yiiframework.com/doc-2.0/guide-tutorial-yii-integration.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-yii-integration.html)
- en: For more on aliases refer to [http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html](http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html)
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于别名的信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html](http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html)
- en: For more on the `autoload` section of `composer.json` refer to [https://getcomposer.org/doc/01-basic-usage.md#autoloading](https://getcomposer.org/doc/01-basic-usage.md#autoloading)
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`composer.json`中的`autoload`部分，请参阅[https://getcomposer.org/doc/01-basic-usage.md#autoloading](https://getcomposer.org/doc/01-basic-usage.md#autoloading)
- en: And also you can browse or search any Composer packages on [https://packagist.org](https://packagist.org)
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以在[https://packagist.org](https://packagist.org)上浏览或搜索任何Composer包
