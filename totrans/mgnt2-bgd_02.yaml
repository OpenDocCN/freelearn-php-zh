- en: Chapter 2. Managing the Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 管理环境
- en: 'Throughout this chapter, we will look into setting up our development and production
    environments. The idea is to have a fully automated development environment, which
    can be initiated with a single console command. For a production environment,
    we will turn our focus to one of the available cloud services, and see how easy
    it is to set up Magento for simpler production projects. We will not be covering
    any robust environment setups like auto-scaling, caching servers, content delivery
    networks, and similar. These are really jobs for *System Administrator or DevOps*
    roles. Our attention here is the bare minimum needed to get our Magento store
    up and running; a milestone we will achieve throughout the following sections
    would be:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨设置我们的开发和生产环境。我们的想法是拥有一个完全自动化的开发环境，可以通过单个控制台命令启动。对于生产环境，我们将关注可用的云服务之一，看看设置Magento进行更简单的生产项目有多容易。我们不会涵盖任何强大的环境设置，如自动扩展、缓存服务器、内容分发网络等。这些实际上是系统管理员或DevOps角色的工作。我们在这里的关注点是启动我们的Magento商店所需的最基本条件；在接下来的章节中，我们将实现以下里程碑：
- en: Setting up a development environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: VirtualBox
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox
- en: Vagrant
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant
- en: Vagrant project
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant项目
- en: Provisioning PHP
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置PHP
- en: Provisioning MySQL
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置MySQL
- en: Provisioning Apache
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Apache
- en: Provisioning Magento installation
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Magento安装
- en: Setting up a production environment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置生产环境
- en: Introduction to **Amazon Web Services** (**AWS**)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Web Services**（**AWS**）简介'
- en: Setting up access for S3 usage
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置S3使用权限
- en: Creating IAM users
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建IAM用户
- en: Creating IAM groups
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建IAM组
- en: Setting up S3 for database and media files backup
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置S3以备份数据库和媒体文件
- en: Bash script for automated EC2 setup
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化EC2设置的Bash脚本
- en: Setting up EC2
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置EC2
- en: Setting up Elastic IP and DNS
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置弹性IP和DNS
- en: Setting up a development environment
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: In this section, we will build a development environment using **VirtualBox**
    and **Vagrant**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用**VirtualBox**和**Vagrant**构建一个开发环境。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Magento official requirements call for Apache 2.2 or 2.4, PHP 5.6.x or 5.5.x
    (PHP 5.4 is not supported), and MySQL 5.6.x. We need to keep this in mind during
    the environment setup.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Magento官方要求Apache 2.2或2.4，PHP 5.6.x或5.5.x（PHP 5.4不受支持），以及MySQL 5.6.x。我们在设置环境时需要记住这一点。
- en: VirtualBox
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VirtualBox
- en: '**VirtualBox** is powerful and feature-rich x86 and AMD64/Intel64 virtualization
    software. It is free, runs on a large number of platforms, and supports a large
    number of guest operating systems. If we are using Windows, Linux, or OS X in
    our daily development, we can use VirtualBox to spin up a virtual machine with
    an isolated guest operating system in which we can install our server software
    needed to run Magento. This means using MySQL, Apache, and a few other things.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox**是一款功能强大且丰富的x86和AMD64/Intel64虚拟化软件。它是免费的，可以在大量平台上运行，并支持大量客户操作系统。如果我们日常开发中使用Windows、Linux或OS
    X，我们可以使用VirtualBox启动一个虚拟机，在其中安装运行Magento所需的服务器软件。这意味着使用MySQL、Apache以及一些其他东西。'
- en: Vagrant
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vagrant
- en: '**Vagrant** is a high-level software wrapper used for virtualization software
    management. We can use it to create and configure development environments. Vagrant
    supports several types of virtualization software such as VirtualBox, **VMware,
    Kernel-based Virtual Machine** (**KVM**), **Linux Containers** (**LXC**), and
    others. It even supports server environments like Amazon EC2.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vagrant**是一个用于虚拟化软件管理的软件包装器。我们可以用它来创建和配置开发环境。Vagrant支持多种类型的虚拟化软件，如VirtualBox、**VMware**、基于内核的虚拟机（**KVM**）、**Linux容器**（**LXC**）等。它甚至支持服务器环境，如Amazon
    EC2。'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Before we start, we need to make sure we have VirtualBox and Vagrant installed
    already. We can download them and install the following instructions from their
    official websites: [https://www.virtualbox.org](https://www.virtualbox.org) and
    [https://www.vagrantup.com](https://www.vagrantup.com).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要确保已经安装了VirtualBox和Vagrant。我们可以从它们的官方网站下载并按照以下说明进行安装：[https://www.virtualbox.org](https://www.virtualbox.org)
    和 [https://www.vagrantup.com](https://www.vagrantup.com)。
- en: Vagrant project
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vagrant项目
- en: We start by manually creating an empty directory somewhere within our host operating
    system, let's say `/Users/branko/www/B05032-Magento-Box/`. This is the directory
    we will pull in Magento code. We want Magento source code to be external to Vagrant
    box, so we can easily work with it in our favorite IDE.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在主机操作系统中某个地方手动创建一个空目录，比如说 `/Users/branko/www/B05032-Magento-Box/`。这是我们将会拉取Magento代码的目录。我们希望Magento源代码位于Vagrant虚拟机外部，这样我们就可以在我们的IDE中轻松地与之一起工作。
- en: We then create a Vagrant project directory, let's say `/Users/branko/www/magento-box/`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个Vagrant项目目录，比如说 `/Users/branko/www/magento-box/`。
- en: 'Within the `magento-box` directory, we run the console command `vagrant init`.
    This results in an output as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `magento-box` 目录中，我们运行控制台命令 `vagrant init`。这会产生如下输出：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `Vagrantfile` is actually a Ruby language source file. If we strip away
    the comments, its original content looks like the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vagrantfile` 实际上是一个 Ruby 语言源文件。如果我们去掉注释，其原始内容看起来如下：'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we were to run `vagrant up` now within the `magento-box` directory, this
    would start the VirtualBox in headless (no GUI) mode and run the base operating
    system. However, let's hold off running that command just now.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在 `magento-box` 目录下运行 `vagrant up`，这将启动VirtualBox的无头（无GUI）模式并运行基础操作系统。然而，现在让我们暂缓运行该命令。
- en: The idea is to create a more robust `Vagrantfile` that covers everything required
    for running Magento, from Apache, MySQL, PHP, PHPUnit, composer, and full Magento
    installation with performance fixture data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是创建一个更健壮的 `Vagrantfile`，它涵盖了运行Magento所需的所有内容，从Apache、MySQL、PHP、PHPUnit、composer到带有性能基准数据的完整Magento安装。
- en: Though Vagrant does not have a separate configuration file on its own, we will
    create one, as we want to store configuration data like a MySQL user and password
    in it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Vagrant本身没有单独的配置文件，但我们将创建一个，因为我们想在其中存储配置数据，如MySQL用户名和密码。
- en: 'Let''s go ahead and create the `Vagrantfile.config.yml` file, alongside a `Vagrantfile`
    in the same directory, with content as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `Vagrantfile.config.yml` 的文件，与同一目录下的 `Vagrantfile` 一起，内容如下：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There is no Vagrant-imposed structure here. This can be any valid YAML file.
    The values presented are merely examples of what we can put in.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有Vagrant强制的结构。这可以是任何有效的YAML文件。所提供的值仅是我们可以放入其中的示例。
- en: Magento enables us to generate a pair of 32-character authentication tokens
    that can use to access the Git repository. This is done by logging in to Magento
    Connect with a user name and password, then going to **My Account** | **Developers**
    | **Secure Keys**. The Public Key and Private Key then become our username and
    password for accessing Magento GitHub repository.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Magento使我们能够生成一对32字符的认证令牌，可用于访问Git仓库。这是通过使用用户名和密码登录到Magento Connect，然后转到**我的账户**
    | **开发者** | **安全密钥**来完成的。然后，公钥和私钥就成为了我们访问Magento GitHub仓库的用户名和密码。
- en: Having a separate configuration file means we can commit `Vagrantfile` to version
    control with our project, while leaving the `Vagrantfile.config.yml` out of version
    control.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个单独的配置文件意味着我们可以将 `Vagrantfile` 提交到版本控制中，同时将 `Vagrantfile.config.yml` 排除在版本控制之外。
- en: 'We now edit the `Vagrantfile` by replacing its content with the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在通过替换其内容为以下内容来编辑 `Vagrantfile`：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code first includes the `yaml` library, and then reads the content
    of the `Vagrantfile.config.yml` file into a `vagrantConfig` variable. Then we
    have a `config` block, within which we define the box type, fixed IP address,
    shared folder between our host and guest operating system, and a few VirtualBox
    specific details such as CPU and memory allocated.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码首先包含了 `yaml` 库，然后读取 `Vagrantfile.config.yml` 文件的内容到 `vagrantConfig` 变量中。然后我们有一个
    `config` 块，在其中我们定义了虚拟机类型、固定IP地址、主机和客户操作系统之间的共享文件夹，以及一些VirtualBox特定的细节，如分配的CPU和内存。
- en: We are using the `ubuntu/vivid64` box that stands for the server edition of
    Ubuntu 15.04 (Vivid Vervet). The reason is that this Ubuntu version gives us the
    MySQL 5.6.x and PHP 5.6.x, which stand as requirements for Magento installation,
    among other things.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是 `ubuntu/vivid64` 虚拟机，它代表Ubuntu 15.04（Vivid Vervet）的服务器版本。原因是这个Ubuntu版本为我们提供了MySQL
    5.6.x和PHP 5.6.x，这些是安装Magento的要求之一。
- en: 'We further have a configuration entry assigning a fixed IP to our virtual machine.
    Let''s go ahead and add an entry in the *hosts* file of our host operating system
    as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进一步有一个配置条目为我们的虚拟机分配一个固定IP。让我们现在在我们的主机操作系统的 *hosts* 文件中添加一个条目，如下所示：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The reason why we are assigning the fixed IP address to our box is that we can
    directly open a URL like `http://magento.box` within our host operating system,
    and then access Apache served page within our guest operating system.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将固定 IP 地址分配给我们的虚拟机的原因是，我们可以在主机操作系统内直接打开类似 `http://magento.box` 的 URL，然后访问客户操作系统内
    Apache 提供的页面。
- en: Another important part of the preceding code is the one where we defined `synced_folder`.
    Besides source and destination paths, the crucial parts here are `owner`, group,
    and `mount_options`. We set those to the vagrant user the `www-data` user group,
    and `774` and `664` for directory and file permissions that play nicely with Magento.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码的另一个重要部分是我们定义 `synced_folder` 的地方。除了源和目标路径外，这里的关键部分是 `owner`、`group` 和
    `mount_options`。我们将这些设置为 vagrant 用户、`www-data` 用户组，以及目录和文件权限的 `774` 和 `664`，以便与
    Magento 顺利配合。
- en: 'Let''s continue editing our `Vagrantfile` adding several provisioners to it,
    one below the other. We do so by replacing the `# <provisioner here>` from the
    preceding example, with content as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续编辑 `Vagrantfile`，向其中添加几个配置器，一个接一个。我们通过将前一个示例中的 `# <provisioner here>` 替换为以下内容来实现：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we are instructing Vagrant to pass our `.gitconfig` file from the host
    to the guest operating system. This is so we inherit the host operating system
    Git setup to the guest operating system Git. We then call for `apt-get update`
    in order to update the guest operating system.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指示 Vagrant 将主机的 `.gitconfig` 文件传递到客户操作系统。这样做是为了让客户操作系统的 Git 设置继承自主机操作系统的
    Git。然后我们调用 `apt-get update` 以更新客户操作系统。
- en: Provisioning PHP
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 PHP
- en: 'Further adding to `Vagrantfile`, we run several provisioners that will install
    PHP, required PHP modules, and PHPUnit, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Vagrantfile` 中进一步添加，我们运行多个配置器以安装 PHP、所需的 PHP 模块和 PHPUnit，如下所示：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is one thing worth pointing out here – the line where we are writing `xdebug.max_nesting_level=200`
    into the `php.ini` file. This is done to exclude the possibility that Magento
    would not start throwing a **Maximum Functions Nesting Level of '100' reached...**
    error.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一点值得指出——我们将 `xdebug.max_nesting_level=200` 写入 `php.ini` 文件的行。这样做是为了排除 Magento
    不会启动并抛出 **Maximum Functions Nesting Level of '100' reached...** 错误的可能性。
- en: Provisioning MySQL
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 MySQL
- en: 'Further adding to `Vagrantfile`, we run provisioners that will install the
    MySQL server, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Vagrantfile` 中进一步添加，我们运行配置器以安装 MySQL 服务器，如下所示：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What is interesting with the MySQL installation is that it requires a password
    and a password confirmation to be provided during installation. This makes it
    a troubling part of the provisioning process that expects shell commands to simply
    execute without asking for input. To bypass this, we use `debconf-set-selections`
    to store the parameters for input. We read the password from the `Vagrantfile.config.yml`
    file and pass it onto `debconf-set-selections`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 安装有趣的地方在于，它要求在安装过程中提供密码和密码确认。这使得它成为配置过程中的一个麻烦部分，该过程期望 shell 命令简单地执行而不需要输入。为了绕过这个问题，我们使用
    `debconf-set-selections` 来存储输入参数。我们从 `Vagrantfile.config.yml` 文件中读取密码，并将其传递给 `debconf-set-selections`。
- en: Once installed, `update-rc.d mysql` defaults will add MySQL to the operating
    system boot process, thus making sure MySQL is running when we reboot the box.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，`update-rc.d mysql` 默认设置将 MySQL 添加到操作系统启动过程中，从而确保在重启虚拟机时 MySQL 正在运行。
- en: Provisioning Apache
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Apache
- en: 'Further adding to `Vagrantfile`, we run the Apache provisioner as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Vagrantfile` 中进一步添加，我们按照以下方式运行 Apache 配置器：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code installs Apache, adds it to the boot sequence, starts it,
    and turns on the rewrite module. We then have an update to the Apache configuration
    file, as we want to replace `AllowOverride None` with `AllowOverride All`, or
    else our Magento won't work. Once the changes are done, we stop Apache due to
    the later processes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码安装了 Apache，将其添加到启动序列中，启动它，并打开重写模块。然后我们对 Apache 配置文件进行了更新，因为我们想将 `AllowOverride
    None` 替换为 `AllowOverride All`，否则我们的 Magento 将无法工作。一旦完成更改，我们停止 Apache 以避免后续进程。
- en: Provisioning Magento installation
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Magento 安装
- en: 'Further adding to `Vagrantfile`, we now turn our attention to Magento installation,
    which we split into several steps. First, we link our host folder, `/vagrant-B05032-Magento-Box/`,
    with the guest, `/var/www/html`, using Vagrant''s synced folder feature:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Vagrantfile` 中进一步添加，我们现在将注意力转向 Magento 安装，我们将它分为几个步骤。首先，我们使用 Vagrant 的同步文件夹功能将主机的
    `/vagrant-B05032-Magento-Box/` 文件夹链接到客户，即 `/var/www/html`：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then use the `composer create-project` command to pull the Magento 2 files
    from the official `repo.magento.com` source into the `/var/www/html/` director:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `composer create-project` 命令从官方 `repo.magento.com` 源将 Magento 2 文件拉取到
    `/var/www/html/` 目录：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We then create a database in which Magento will be installed later on:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个数据库，稍后将在其中安装 Magento：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We then run the Magento installation from the command line:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后从命令行运行 Magento 安装程序：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding code shows we are installing the fixtures data as well.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示我们还在安装 fixtures 数据。
- en: 'We need to be careful during the `Vagrantfile.config.yml` file configuration.
    Magento installation is quite sensible around provided data. We need to make sure
    we provide valid data for fields like mail and password or else the installation
    will fail showing errors similar to the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 `Vagrantfile.config.yml` 文件时，我们需要小心。Magento 安装对提供的数据非常敏感。我们需要确保我们为像邮件和密码这样的字段提供有效的数据，否则安装将失败，并显示类似于以下错误的错误：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With this, we conclude our `Vagrantfile` content.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就完成了 `Vagrantfile` 的内容。
- en: Running the `vagrant up` command now within the same directory as `Vagrantfile`
    triggers the box creation process. During this process, all of the previously
    listed commands will get executed. The process alone takes up to an hour or so.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `Vagrantfile` 所在的同一目录下运行 `vagrant up` 命令将触发盒子创建过程。在这个过程中，之前列出的所有命令都将被执行。这个过程本身可能需要一个小时左右。
- en: Once vagrant up is complete, we can issue another console command, `vagrant
    ssh`, to log in to the box.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 vagrant up 完成，我们可以发出另一个控制台命令，`vagrant ssh`，以登录到盒子。
- en: At the same time, if we open a URL like `http://magento.box` in our browser,
    we should see the Magento storefront loading.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，如果我们在我们浏览器中打开类似 `http://magento.box` 的 URL，我们应该看到 Magento 商店首页正在加载。
- en: The preceding `Vagrantfile` simply pulls from the official Magento Git repository
    and installs Magento from the ground up. `Vagrantfile` and `Vagrantfile.config.yml`
    can be further extended and tailored to suit our individual project needs, like
    pulling the code from the private Git repository, restoring the database from
    the shared drive, and so on.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `Vagrantfile` 简单地从官方 Magento Git 仓库中提取并从头开始安装 Magento。`Vagrantfile` 和 `Vagrantfile.config.yml`
    可以进一步扩展和定制，以满足我们各自项目的需求，例如从私有 Git 仓库中提取代码、从共享驱动器中恢复数据库等。
- en: This makes for a simple yet powerful scripting process by which we can prepare
    fully ready per-project machines for other developers in a team to be able to
    quickly spin up.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了一个简单而强大的脚本过程，通过这个过程我们可以为团队中的其他开发者准备完全就绪的项目机器，以便他们能够快速启动。
- en: Setting up a production environment
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置生产环境
- en: A production environment is the client-facing environment that focuses on good
    performance and availability. Setting up production environments is not really
    something we developers tend to do, especially if there are robust requirements
    around scaling, load balancing, high availability, and similar. Sometimes, however,
    we need to set up a simple production environment. There are various cloud providers
    that offer quick and simple solutions to this. For the purpose of this section,
    we will turn to Amazon Web Services.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 生产环境是面向客户的、专注于良好性能和可用性的环境。设置生产环境并不是我们开发者倾向于做的事情，尤其是当有关于扩展、负载均衡、高可用性等方面的稳健要求时。然而，有时我们可能需要设置一个简单的生产环境。有许多云服务提供商提供快速简单的解决方案。为了本节的目的，我们将转向
    Amazon Web Services。
- en: Introduction to Amazon Web Services
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亚马逊网络服务简介
- en: '**Amazon Web Services** (**AWS**) is a collection of remote computing services
    frequently referred to as web services. AWS provides on-demand computing resources
    and services in the cloud, with *pay-as-you-go* pricing. Amazon gives a nice comparison
    of its AWS resources, saying that using AWS resources instead of your own is like
    purchasing electricity from a power company instead of running your own generator.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）是一组远程计算服务，通常被称为网络服务。AWS 提供云中的按需计算资源和服务，具有 *按使用付费* 的定价。亚马逊提供了一个很好的
    AWS 资源比较，说使用 AWS 资源而不是自己的资源，就像从电力公司购买电力而不是运行自己的发电机一样。'
- en: If we stop and think about it for a minute, this makes it interesting to not
    only system operation roles but also for developers like us. We (developers) are
    now able to spin various databases, web application servers, and even complex
    infrastructures in a matter of minutes and a few mouse clicks. We can run these
    services for a few minutes, hours, or days then shut them down. Meanwhile, we
    only pay for the actual usage, not the full monthly or yearly price as we do with
    most of the hosting services. Although the overall AWS pricing for certain services
    might not be the cheapest out there, it certainly provides a level of commodity
    and usability unlike many other services. Commodity comes from things like auto-scaling
    resources, a feature that often offers significant cost savings compared to the
    equivalent on-premises infrastructure.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们停下来思考一下，这不仅仅对系统操作角色，对我们这样的开发者来说也很有趣。我们（开发者）现在能够在几分钟内启动各种数据库、Web应用服务器，甚至复杂的基础设施。我们可以运行这些服务几分钟、几小时或几天，然后关闭它们。同时，我们只需为实际使用付费，而不是像大多数托管服务那样支付全额的月费或年费。尽管AWS某些服务的整体定价可能不是最便宜的，但它确实提供了许多其他服务所不具备的商品化和易用性。商品化来自于诸如自动扩展资源这样的特性，与等效的本地基础设施相比，它通常可以提供显著的成本节约。
- en: Quality training and a certification program is another important aspect of
    the AWS ecosystem. Certifications are available for **Solutions Architect**, **Developer**,
    and **SysOps Administrator**, across associate and professional levels. Though
    the certification is not mandatory, if we deal with AWS on a regular basis, we
    are encouraged to take one. Earning the certification puts the seal on our expertise
    to design, deploy, and operate highly available, cost-effective, and secure applications
    on the AWS platform.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 质量培训和认证计划是AWS生态系统的重要方面之一。认证适用于**解决方案架构师**、**开发者**和**系统操作管理员**，涵盖副高级和专业级别。尽管认证不是强制性的，但如果我们经常处理AWS，我们被鼓励去参加。获得认证将证明我们在AWS平台上设计、部署和运行高度可用、成本效益和安全的应用的专长。
- en: 'We can manage our AWS through a simple and intuitive web-based user interface
    called AWS management console, which is available at [https://aws.amazon.com/console](https://aws.amazon.com/console).
    Signing into AWS, we should be able to see a screen similar to the following one:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个简单直观的基于Web的用户界面，即AWS管理控制台来管理我们的AWS，该界面可在[https://aws.amazon.com/console](https://aws.amazon.com/console)找到。登录AWS后，我们应该能看到以下类似的屏幕：
- en: '![Introduction to Amazon Web Services](img/00002.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![亚马逊网络服务的介绍](img/00002.jpeg)'
- en: 'The preceding image shows how the AWS management console groups the AWS services
    visually into several major groups, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图片显示了AWS管理控制台如何将AWS服务视觉上分组为几个主要组，如下所示：
- en: '**Compute**'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算**'
- en: '**Developer Tools**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者工具**'
- en: '**Mobile Services**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动服务**'
- en: '**Storage & Content Delivery**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储与内容分发**'
- en: '**Management Tools**'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理工具**'
- en: '**Application Services**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用服务**'
- en: '**Database**'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**'
- en: '**Security & Identity**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全与身份**'
- en: '**Networking**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**'
- en: '**Analytics**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**'
- en: '**Enterprise Applications**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业应用**'
- en: As part of this chapter, we will be taking a look at the **EC2** service found
    under the **Compute** group and the **S3** service found under the **Storage &
    Content Delivery** group.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章的一部分，我们将探讨**计算**组下的**EC2**服务和**存储与内容分发**组下的**S3**服务。
- en: '**Amazon Elastic Compute Cloud** (**Amazon EC2**) is a web service that provides
    a re-sizable compute capacity in the cloud. We can think of it as a virtual computer
    machine in the cloud that we can turn on and off at any time, within minutes.
    We can further commission one, hundreds, or even thousands of these machine instances
    simultaneously. This makes for the *re-sizable* compute capacity.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊弹性计算云**（**Amazon EC2**）是一种提供可伸缩计算容量的云服务。我们可以将其视为云中的虚拟计算机，我们可以在任何时间打开和关闭它，只需几分钟。我们可以同时部署一台、数百台甚至数千台这样的机器实例。这使得计算容量具有**可伸缩性**。'
- en: S3 provides secure, durable, and highly scalable object storage. It is designed
    to provide durability of 99.99% of objects. The service provides a web service
    interface to store and retrieve any amount of data from anywhere on the web. S3
    is charged only per storage that is actually used. S3 can be used alone or together
    with other AWS services such as EC2.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: S3提供安全、持久且高度可扩展的对象存储。它旨在提供99.99%的对象持久性。该服务提供了一个网络服务接口，可以从网络上的任何地方存储和检索任何数量的数据。S3仅按实际使用的存储收费。S3可以单独使用，也可以与其他AWS服务如EC2一起使用。
- en: Setting up access for S3 usage
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置S3使用的访问权限
- en: As part of our production environment, it is good to have reliable storage where
    we can archive database and media files. Amazon S3 stands out as a possible solution.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们生产环境的一部分，拥有可靠的存储空间，我们可以存档数据库和媒体文件，这是很好的。Amazon S3是一个可能的解决方案。
- en: In order to properly set access to the S3 scalable storage service, we need
    to take a quick look into AWS **Identity and Access Management** (**IAM** for
    short). IAM is a web service that helps us securely control access to AWS resources
    for our users. We can use IAM to control authentication (who can use our AWS resources)
    and authorization (what resources they can use and in what ways). More specifically,
    as we will soon see, we are interested in **Users** and **Groups**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确设置对S3可扩展存储服务的访问权限，我们需要快速了解一下AWS的**身份和访问管理**（简称**IAM**）。IAM是一种网络服务，帮助我们安全地控制用户对AWS资源的访问。我们可以使用IAM来控制身份验证（谁可以使用我们的AWS资源）和授权（他们可以使用哪些资源以及如何使用）。更具体地说，正如我们很快将看到的，我们感兴趣的是**用户**和**组**。
- en: Creating IAM users
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建IAM用户
- en: This section describes how to create IAM users. An IAM user is an entity that
    we create in AWS to represent the person or service using it when interacting
    with AWS.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了如何创建IAM用户。IAM用户是我们创建在AWS中，用于代表使用它的人或服务在与AWS交互时的实体。
- en: Log in to the AWS console.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 登录AWS控制台。
- en: 'Under the user menu, click on **Security Credentials** as shown in the following
    screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户菜单下，点击如下截图所示的**安全凭证**：
- en: '![Creating IAM users](img/00003.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![创建IAM用户](img/00003.jpeg)'
- en: This opens up the security dashboard page.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开安全仪表板页面。
- en: 'Clicking on the **Users** menu should open a screen like the following one:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**用户**菜单应该打开一个类似于以下屏幕的界面：
- en: '![Creating IAM users](img/00004.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![创建IAM用户](img/00004.jpeg)'
- en: 'On the **Users** menu, we click on **Create New User**, which opens a page
    like the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在**用户**菜单下，我们点击**创建新用户**，这将打开一个类似于以下页面：
- en: '![Creating IAM users](img/00005.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![创建IAM用户](img/00005.jpeg)'
- en: Here, we fill in the desired username for one or more users, something like
    `foggy_s3_user1`, and then click on the **Create** button.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们填写一个或多个用户的所需用户名，例如`foggy_s3_user1`，然后点击**创建**按钮。
- en: 'We should now see a screen like the following one:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该看到一个类似于以下屏幕的界面：
- en: '![Creating IAM users](img/00006.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![创建IAM用户](img/00006.jpeg)'
- en: Here, we can click on **Download Credentials** to initiate the CSV format file
    download or copy and paste our credentials manually.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以点击**下载凭证**来启动CSV格式文件的下载，或者手动复制粘贴我们的凭证。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Access Key ID** and **Secret Access Key** are the two pieces of information
    we will be using to access S3 storage.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问密钥ID**和**秘密访问密钥**是我们将用于访问S3存储的两条信息。'
- en: 'Clicking the close link takes us back to the **Users** menu, showing our newly
    created user listed as shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 点击关闭链接将我们带回到**用户**菜单，显示我们刚刚创建的用户，如下截图所示：
- en: '![Creating IAM users](img/00007.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![创建IAM用户](img/00007.jpeg)'
- en: Creating IAM groups
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建IAM组
- en: 'This section describes how to create IAM groups. Groups are collections of
    IAM users that we can manage as a single unit. So let''s begin:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了如何创建IAM组。组是我们可以将它们作为一个单一单元管理的IAM用户的集合。因此，让我们开始：
- en: Log in to the AWS console.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS控制台。
- en: Under the user menu, click on **Security Credentials** as shown in the following
    screenshot:![Creating IAM groups](img/00008.jpeg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户菜单下，点击如下截图所示的**安全凭证**：![创建IAM组](img/00008.jpeg)
- en: This opens up the security dashboard page. Clicking on the **Groups** menu should
    open a screen like the following one:![Creating IAM groups](img/00009.jpeg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开安全仪表板页面。点击**组**菜单应该打开一个类似于以下屏幕的界面：![创建IAM组](img/00009.jpeg)
- en: On the **Groups** menu, we click on **Create New Group**, which opens a page
    like the following:![Creating IAM groups](img/00010.jpeg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**组**菜单下，我们点击**创建新组**，这将打开一个类似于以下页面：![创建IAM组](img/00010.jpeg)
- en: Here, we fill in the desired group name, something like `FoggyS3Test`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们填写所需的组名，例如`FoggyS3Test`。
- en: We should now see a screen like the following one, where we need to select the
    group **Policy Type** and click the **Next Step** button:![Creating IAM groups](img/00011.jpeg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在应该看到一个类似于以下屏幕的界面，我们需要选择**策略类型**组，然后点击**下一步**按钮：![创建IAM组](img/00011.jpeg)
- en: We select the **AmazonS3FullAccess** policy type and click the **Next Step**
    button. The **Review** screen is now shown, asking us to review the provided information:![Creating
    IAM groups](img/00012.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择**AmazonS3FullAccess**策略类型，并点击**下一步**按钮。现在将显示**审查**屏幕，要求我们审查提供的信息：![创建IAM组](img/00012.jpeg)
- en: If the provided information is correct, we confirm it by clicking the **Create
    Group** button. We should now be able to see our group under the **Groups** menu
    as shown in the following screenshot:![Creating IAM groups](img/00013.jpeg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供的信息正确，我们通过点击**创建组**按钮来确认。现在，我们应该能够在**组**菜单下看到我们的组，如下面的截图所示：![创建IAM组](img/00013.jpeg)
- en: Mark the checkbox to the left of **Group Name**, click the **Group Actions**
    dropdown, and then select **Add Users to Group** as shown in the following screenshot:![Creating
    IAM groups](img/00014.jpeg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**组名**左侧的复选框，点击**组操作**下拉菜单，然后选择如下截图所示的**添加用户到组**：
- en: This opens the **Add Users to Group** page as shown in the following screenshot:![Creating
    IAM groups](img/00015.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开如下截图所示的**添加用户到组**页面：
- en: Mark the checkbox to the left of **User Name** and click on the **Add Users**
    button. This should add the selected user to the group and throw us back to the
    **Groups** listing.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**用户名**左侧的复选框，并点击**添加用户**按钮。这应该会将所选用户添加到组中，并返回到**组**列表。
- en: The result of this user and group creation process is a user with **Access Key
    Id**, **Secret Access Key**, and assigned user group with the **AmazonS3FullAccess**
    policy. We will use this information later on when we demonstrate backing up the
    database to S3.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和组创建过程的结果是一个具有**访问密钥ID**、**秘密访问密钥**和分配有**AmazonS3FullAccess**策略的用户组。我们将在演示将数据库备份到S3时使用这些信息。
- en: Setting up S3 for database and media files backup
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置S3用于数据库和媒体文件备份
- en: S3 consists of buckets. We can think of a bucket as the first level directory
    within our S3 account. We then set the permissions and other options on that directory
    (bucket). In this section, we are going to create our own bucket, with two empty
    folders called `database` and `media`. We will use these folders later on during
    our environment setup in order to back up our MySQL database and our media files.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: S3由存储桶组成。我们可以将存储桶视为我们S3账户中的第一级目录。然后，我们在该目录（存储桶）上设置权限和其他选项。在本节中，我们将创建自己的存储桶，包含两个名为`database`和`media`的空文件夹。在后续的环境设置过程中，我们将使用这些文件夹来备份我们的MySQL数据库和媒体文件。
- en: We start by logging in to the AWS management console.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先登录到AWS管理控制台。
- en: 'Under the **Storage & Content Delivery** group, we click on **S3**. This opens
    a screen similar to the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在**存储与内容分发**组下，我们点击**S3**。这将打开一个类似于以下截图的屏幕：
- en: '![Setting up S3 for database and media files backup](img/00016.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![设置S3用于数据库和媒体文件备份](img/00016.jpeg)'
- en: 'Click on the **Create Bucket** button. This opens a popup like the one shown
    in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建存储桶**按钮。这将打开一个类似于以下截图的弹出窗口：
- en: '![Setting up S3 for database and media files backup](img/00017.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![设置S3用于数据库和媒体文件备份](img/00017.jpeg)'
- en: Let's provide a unique **Bucket Name**, preferably something identifying the
    project for which we will be backing up the `database` and `media` file, and click
    the **Create** button. For the purpose of this chapter, let's imagine we selected
    something like `foggy-project-dhj6`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提供一个独特的**存储桶名称**，最好是一个可以识别我们将要备份的`database`和`media`文件的项目的名称，然后点击**创建**按钮。为了本章节的目的，让我们假设我们选择了类似`foggy-project-dhj6`的东西。
- en: 'Our bucket should now be visible under the **All Buckets** list. If we click
    on it, a new screen opens like the one shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的存储桶现在应该在**所有存储桶**列表中可见。如果我们点击它，将打开一个类似于以下截图的新屏幕：
- en: '![Setting up S3 for database and media files backup](img/00018.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![设置S3用于数据库和媒体文件备份](img/00018.jpeg)'
- en: Here, we click on the **Create Folder** button and add the necessary `database`
    and `media` folders.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们点击**创建文件夹**按钮，并添加必要的`database`和`media`文件夹。
- en: 'While still within the root bucket directory, click on the **Properties** button
    and fill in the **Permissions** section as shown in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在根存储桶目录内，点击**属性**按钮，并填写如下截图所示的**权限**部分：
- en: '![Setting up S3 for database and media files backup](img/00019.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![设置S3用于数据库和媒体文件备份](img/00019.jpeg)'
- en: Here, we are basically assigning all permissions to **Authenticated Users**.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们基本上将所有权限分配给了**认证用户**。
- en: We should now have an S3 bucket to which we can potentially store our database
    and media backups using the `s3cmd` console tool that we will soon reference.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该有一个S3存储桶，我们可以使用`s3cmd`控制台工具（我们很快会提到）将数据库和媒体备份存储到其中。
- en: Bash script for automated EC2 setup
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash脚本用于自动化EC2设置
- en: Similar to the `Vagrantfile` shell provisioners, let's go ahead and create a
    sequence of bash shell commands we can use for a production setup.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Vagrantfile` shell provisioners类似，让我们继续创建一系列bash shell命令，我们可以使用这些命令进行生产环境设置。
- en: 'The first block of commands goes as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组命令如下：
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, start with the `#!/bin/bash` expression. This specifies the type of script
    we are executing. Then we have a system update and `s3cmd` tool installation.
    The `s3cmd` is a free command-line tool and client for uploading, retrieving,
    and managing data in Amazon S3\. We can use it later on for database and media
    file backups and restores.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，从`#!/bin/bash`表达式开始。这指定了我们正在执行的脚本类型。然后我们有一个系统更新和`s3cmd`工具的安装。`s3cmd`是一个免费命令行工具和客户端，用于上传、检索和管理Amazon
    S3中的数据。我们可以稍后使用它进行数据库和媒体文件的备份和恢复。
- en: We then install the `postfix` mail server, using the following commands. Since
    the postfix installation triggers a graphical interface in the console, asking
    for `mailname` and `main_mailer_type`, we bypass those using `sudo debconf-set-selections`.
    Once installed, we reload `postfix`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用以下命令安装`postfix`邮件服务器。由于postfix安装会在控制台触发图形界面，要求输入`mailname`和`main_mailer_type`，我们使用`sudo
    debconf-set-selections`绕过这些步骤。安装完成后，我们重新加载`postfix`。
- en: '[PRE15]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using mail server directly on the EC2 box is fine for smaller production sites,
    where we do not expect high traffic or a large number of customers. For more intensive
    production sites, we need to pay attention to Amazon, possibly putting a throttle
    on port `25`, thus resulting in outgoing e-mail timeouts. In which case we can
    either ask Amazon to remove the limitation on our account, or move on to more
    robust services like **Amazon Simple Email Service**.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在EC2盒子上直接使用邮件服务器对于小型生产网站来说是可以的，我们预计不会有高流量或大量客户。对于更密集的生产网站，我们需要注意Amazon，可能需要在端口`25`上设置节流，从而导致发出的电子邮件超时。在这种情况下，我们可以要求Amazon取消我们账户的限制，或者转向更健壮的服务，如**Amazon
    Simple Email Service**。
- en: 'We then install all things related to PHP. Notice how we even install `xdebug`,
    though immediately turning it off. This might come in handy for those very rare
    moments when we really need to debug the live site, then we can turn it off and
    play with remote debugging. We further download and set composer to the user path:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们安装所有与PHP相关的组件。注意我们甚至安装了`xdebug`，尽管立即将其关闭。这可能在那些非常罕见的我们需要真正调试实时网站的时刻派上用场，然后我们可以将其关闭并尝试远程调试。我们进一步下载并设置composer到用户路径：
- en: '[PRE16]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We then move on to MySQL installation. Here, we are also using `debconf-set-selections`
    to automate the console part of providing input parameters to the installation.
    Once installed, MySQL is started and added to the boot process.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续进行MySQL的安装。在这里，我们也使用`debconf-set-selections`来自动化控制台部分提供安装输入参数。安装完成后，MySQL被启动并添加到启动过程中。
- en: '[PRE17]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Alongside MySQL, another major component is Apache. We install it using the
    following commands. With Apache, we need to pay attention to its `apache2.conf`
    file. We need to change `AllowOverride None` to `AllowOverride All` for the Magento
    directory:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 除了MySQL之外，另一个主要组件是Apache。我们使用以下命令来安装它。在使用Apache时，我们需要注意其`apache2.conf`文件。我们需要将Magento目录的`AllowOverride
    None`更改为`AllowOverride All`：
- en: '[PRE18]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we have MySQL and Apache installed, we move on to getting the source
    code files in place. Next, we are pulling from the official Magento Git repository.
    This is not the same as `repo.magento.com` we used when setting up the vagrant.
    Though in this case the Magento Git repository is public, the idea is to be able
    to pull the code from the private GitHub repository. Based on the production environment
    we tend to set up, we can easily replace the next part with pulling from any other
    private Git repository.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了MySQL和Apache，我们继续将源代码文件放置到位。接下来，我们从官方的Magento Git仓库中拉取代码。这不同于我们在设置vagrant时使用的`repo.magento.com`。尽管在这种情况下，Magento
    Git仓库是公开的，但我们的想法是能够从私有GitHub仓库中拉取代码。根据我们倾向于设置的生产环境，我们可以轻松地将下一部分替换为从任何其他私有Git仓库中拉取。
- en: '[PRE19]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'To pull the code from a private git repository, we can use a command of the
    following form, Git clone: `https://<user>:<OAuthToken>@github.com/<user>/<repo>.git`.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要从私有git仓库拉取代码，我们可以使用以下形式的命令，Git克隆：`https://<user>:<OAuthToken>@github.com/<user>/<repo>.git`。
- en: 'The `PUBLIC_HOSTNAME` variable stores the response of the `wget` command that
    calls the `http://instance-data/latest/meta-data/public-hostname` URL. This URL
    is a feature of AWS that allows us to get the current EC2 instance metadata. We
    then use the `PUBLIC_HOSTNAME` variable during Magento installation, passing it
    as the `--base-url` parameter:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`PUBLIC_HOSTNAME` 变量存储了调用 `http://instance-data/latest/meta-data/public-hostname`
    URL 的 `wget` 命令的响应。这个 URL 是 AWS 的一个功能，允许我们获取当前的 EC2 实例元数据。然后我们在 Magento 安装期间使用
    `PUBLIC_HOSTNAME` 变量，将其作为 `--base-url` 参数传递：'
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding command takes a lot of *per project* specific configuration values,
    so we need to be sure to paste in our own information here appropriately before
    simply copying and pasting it.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令包含了许多 *项目特定* 的配置值，所以我们需要确保在简单地复制粘贴之前，适当地粘贴我们自己的信息。
- en: 'Now we make sure the Magento mode is set to production, and cache is turned
    on and flushed, so it regenerates fresh:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们确保 Magento 模式设置为生产，并且缓存已开启并刷新，以便重新生成：
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we reset the permissions on the `/var/www/html` directory in order
    for our Magento to function properly:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们重置 `/var/www/html` 目录的权限，以确保我们的 Magento 能够正常运行：
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We need to take caution with the preceding Git and Magento installation example.
    The idea here was to show how we could automatically set Git pull from the public
    or private repository. The Magento installation part is a little bonus for this
    specific case, not something we would actually do on our production machine. The
    whole purpose of this script would be to serve as a blueprint for powering up
    new AMI images. So ideally what we would usually do once the code is pulled, is
    to restore the database from some private storage like S3 and then attach it to
    our installation. Thus making for a complete restore of files, database, and media
    once the script is finished.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对前面提到的 Git 和 Magento 安装示例保持谨慎。这里的想法是展示我们如何自动从公共或私有仓库设置 Git pull。对于这个特定案例，Magento
    安装部分只是一个小小的额外奖励，并不是我们会在生产机器上实际做的事情。这个脚本的整个目的就是作为启动新 AMI 图像的蓝图。所以理想情况下，一旦代码被拉取，我们通常会从一些私有存储（如
    S3）恢复数据库，并将其附加到我们的安装上。这样，一旦脚本完成，就可以完成文件、数据库和媒体的完整恢复。
- en: 'Putting that thought aside, let''s get back to our script, further adding the
    daily database backup using the set of command as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 把这个想法放在一边，让我们回到我们的脚本，进一步添加以下命令的每日数据库备份：
- en: '[PRE23]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, we are adding the 2:30 AM **cron job** for backing up the database into
    the home directory file named `database.sql.gz`. Then we are adding another cron
    job that executes at 3:30 AM, which pushes the database backup to S3 storage.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个凌晨 2:30 的 **cron 作业**，用于将数据库备份到名为 `database.sql.gz` 的家目录文件中。然后我们添加了另一个凌晨
    3:30 执行的 cron 作业，将数据库备份推送到 S3 存储。
- en: 'Similar to the database backup, we can add media backup instructions to our
    script using the set of command as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 与数据库备份类似，我们可以使用以下命令集将媒体备份指令添加到我们的脚本中：
- en: '[PRE24]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding commands have several pieces of information coded in them. We
    need to make sure to paste in our access key, secret key, and S3 bucket name accordingly.
    For simplicity sake, we are not addressing security implications such as hardcoding
    the access tokens into the cron jobs. Amazon provides an extensive *AWS Security
    Best Practices* guide that can be downloaded via the official AWS website.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令中包含了几条编码信息。我们需要确保相应地粘贴我们的访问密钥、秘密密钥和 S3 桶名称。为了简化，我们在这里没有讨论将访问令牌硬编码到 cron
    作业中的安全问题。亚马逊提供了一个广泛的 *AWS 安全最佳实践* 指南，可以通过官方 AWS 网站下载。
- en: Now that we have some understanding of what the bash script for automated EC2
    setup could look like, let's proceed to setting up the EC2 instance.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对自动化 EC2 设置的 bash 脚本可能的样子有了些了解，让我们继续设置 EC2 实例。
- en: Setting up EC2
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 EC2
- en: 'Follow these steps to get the setting done:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成设置：
- en: Log in to the AWS console
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 AWS 控制台
- en: Under the **Compute** group, click on **EC2**, which should open a screen like
    the following:![Setting up EC2](img/00020.jpeg)
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **计算** 组下，点击 **EC2**，应该会打开一个类似于以下屏幕的界面：![设置 EC2](img/00020.jpeg)
- en: Click on the **Launch Instance** button, which should open a screen like the
    following:![Setting up EC2](img/00021.jpeg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **启动实例** 按钮，应该会打开一个类似于以下屏幕的界面：![设置 EC2](img/00021.jpeg)
- en: Click on the **Community AMIs** tab to the left, and type in `Ubuntu Vivid`
    into the search field, as shown in the following screenshot:![Setting up EC2](img/00022.jpeg)
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧的 **社区 AMI** 选项卡，并在搜索框中输入 `Ubuntu Vivid`，如图所示：![设置 EC2](img/00022.jpeg)
- en: Tip
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Ubuntu 15.x (Vivid Vervet) server by default supports MySQL 5.6.x and PHP
    5.6.x, which makes it a good candidate for Magento installation.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，Ubuntu 15.x（Vivid Vervet）服务器支持MySQL 5.6.x和PHP 5.6.x，这使得它成为安装Magento的良好候选者。
- en: 'We should now see a screen like the following:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在应该看到一个类似于以下屏幕的界面：
- en: '![Setting up EC2](img/00023.jpeg)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置EC2](img/00023.jpeg)'
- en: 'Choose an instance type and click the **Next: Configure Instance Details**
    button. We should now see a screen like the following:![Setting up EC2](img/00024.jpeg)'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个实例类型，然后点击**下一步：配置实例详情**按钮。我们现在应该看到一个类似于以下屏幕的界面：![设置EC2](img/00024.jpeg)
- en: Note
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: We won't be getting into the details of each of these options. Suffice to say
    that if we are working on smaller production sites, chances are we can leave most
    of these options with their default values.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们不会深入到每个选项的细节。简单来说，如果我们正在处理较小的生产站点，那么我们很可能可以将大多数这些选项保留为默认值。
- en: Make sure **Shutdown behavior** is set to **Stop**.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将**关机行为**设置为**停止**。
- en: 'While still on the **Step 3: Configure Instance Details** screen, scroll down
    to the bottom **Advanced Details** area and expand it. We should see a screen
    like the following:![Setting up EC2](img/00025.jpeg)'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仍然位于**步骤3：配置实例详情**屏幕的情况下，向下滚动到底部的**高级详情**区域并展开它。我们应该看到一个类似于以下屏幕的界面：![设置EC2](img/00025.jpeg)
- en: The **User Data** input is where we will copy and paste the `auto-setup bash`
    script described in the previous section, as shown in the following screenshot:![Setting
    up EC2](img/00026.jpeg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户数据**输入是我们将复制并粘贴上一节中描述的`auto-setup bash`脚本的地方，如下截图所示：![设置EC2](img/00026.jpeg)'
- en: 'Once we copy and paste in the **User Data**, click on the **Next: Add Storage**
    button. This should bring up the screen as shown in the following screenshot:![Setting
    up EC2](img/00027.jpeg)'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们复制并粘贴了**用户数据**，点击**下一步：添加存储**按钮。这应该会显示以下截图所示的屏幕：![设置EC2](img/00027.jpeg)
- en: 'Within **Step 4: Add Storage**, we can select one or more volumes to attach
    to our EC2 instance. Preferably, we should select the SSD type of storage for
    faster performance. Once the volume is set, click on **Next: Tag Instance**. We
    should now see a screen like the following:![Setting up EC2](img/00028.jpeg)'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**步骤4：添加存储**中，我们可以选择一个或多个卷来附加到我们的EC2实例。最好选择SSD类型的存储以获得更快的性能。一旦设置了卷，点击**下一步：标记实例**。我们现在应该看到一个类似于以下屏幕的界面：![设置EC2](img/00028.jpeg)
- en: 'The **Tag Instance** screen allows us to assign tags. Tags enable us to categorize
    our AWS resource by purpose, owner, environment, or some other way. Once we have
    assigned one or more tags, we click on the **Next: Configure Security Group**
    button. We should now see a screen like the following:![Setting up EC2](img/00029.jpeg)'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**标记实例**屏幕允许我们分配标签。标签使我们能够根据目的、所有者、环境或其他方式对AWS资源进行分类。一旦我们分配了一个或多个标签，我们点击**下一步：配置安全组**按钮。我们现在应该看到一个类似于以下屏幕的界面：![设置EC2](img/00029.jpeg)'
- en: The **Configure Security Group** screen allows us to set rules for inbound and
    outbound traffic. We want to be able to access SSH, HTTP, HTTPs, and SMTP services
    on the box. Once we add the rules we want, click on the **Review and Launch**
    button. This opens a screen like the following:![Setting up EC2](img/00030.jpeg)
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置安全组**界面允许我们设置入站和出站流量的规则。我们希望能够访问该设备上的SSH、HTTP、HTTPS和SMTP服务。一旦我们添加了所需的规则，点击**审查和启动**按钮。这将打开一个类似于以下屏幕的界面：![设置EC2](img/00030.jpeg)'
- en: The **Review Instance Launch** screen is where we can view the summary of the
    box we configured up to this point. If needed, we can go back and edit individual
    settings. Once we are satisfied with the summary, we click on the **Launch** button.
    This opens a popup like the following:![Setting up EC2](img/00031.jpeg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**审查实例启动**屏幕是我们可以查看到目前为止配置的盒子的总结的地方。如果需要，我们可以返回并编辑单个设置。一旦我们对总结满意，我们点击**启动**按钮。这将打开一个类似于以下弹出窗口：![设置EC2](img/00031.jpeg)'
- en: Here, we get to choose an existing security key, or create a new one. Keys are
    provided in PEM format. Once we select the key, we click on the **Launch Instance**
    button.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们可以选择一个现有的安全密钥或创建一个新的密钥。密钥以PEM格式提供。一旦我们选择了密钥，我们点击**启动实例**按钮。
- en: 'We should now see the **Launch Status** screen like the following:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在应该看到一个类似于以下屏幕的**启动状态**界面：
- en: '![Setting up EC2](img/00032.jpeg)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置EC2](img/00032.jpeg)'
- en: Clicking on the instance name link should throw us back at the **EC2 Dashboard**
    like shown in the following screenshot:![Setting up EC2](img/00033.jpeg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击实例名称链接应该会带我们回到**EC2仪表板**，如下截图所示：![设置EC2](img/00033.jpeg)
- en: 'With regard to the preceding image, we should now be able to connect to our
    EC2 box with either one of the following console commands:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 关于前面的图像，我们现在应该能够通过以下任一控制台命令连接到我们的EC2服务器：
- en: '[PRE25]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It might take some time for our EC2 box to execute all of the shell commands
    passed to it. We can conveniently SSH into the box and then execute the following
    command to get an overview of current progress:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的EC2服务器执行传递给它的所有shell命令可能需要一些时间。我们可以方便地SSH到服务器，然后执行以下命令来获取当前进度的概述：
- en: '[PRE26]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: With this, we conclude our instance launch process.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了实例启动过程。
- en: Setting up Elastic IP and DNS
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置弹性IP和DNS
- en: Now that we have an EC2 box in place, let's go ahead and create the so-called
    Elastic IP for it. The **Elastic IP address** is a static IP address designed
    for dynamic cloud computing. It is tied to the AWS account, and not some specific
    instance. This makes it convenient to easily re-map it from one instance to another.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个EC2服务器，让我们继续创建所谓的弹性IP。**弹性IP地址**是为动态云计算设计的静态IP地址。它与AWS账户相关联，而不是某个特定的实例。这使得它很容易从一个实例重新映射到另一个实例。
- en: 'Let''s go ahead and create an Elastic IP as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个弹性IP，如下所示：
- en: Log in to the AWS console.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到AWS控制台。
- en: Under the **Compute** group, click on **EC2**, which should get us to the **EC2
    Dashboard**.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**计算**组下，点击**EC2**，这将带我们到**EC2仪表板**。
- en: Under the **EC2 Dashboard**, in the left area under Network and Security grouping,
    click on Elastic IPs. This should open a screen like the following:![Setting up
    Elastic IP and DNS](img/00034.jpeg)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**EC2仪表板**下，在“网络和安全”分组下的左侧区域，点击弹性IP。这将打开一个类似于以下屏幕的界面：![设置弹性IP和DNS](img/00034.jpeg)
- en: Click on the **Allocate New Address** button, which should open a popup like
    the following:![Setting up Elastic IP and DNS](img/00035.jpeg)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**分配新地址**按钮，这将打开一个类似于以下弹出窗口的界面：![设置弹性IP和DNS](img/00035.jpeg)
- en: Click on the **Yes, Allocate** button, which should open another popup like
    the following:![Setting up Elastic IP and DNS](img/00036.jpeg)
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**是，分配**按钮，这将打开另一个类似于以下弹出窗口的界面：![设置弹性IP和DNS](img/00036.jpeg)
- en: Now that the Elastic IP address is created, right-clicking on it within the
    table listing should bring up the options menu as shown in the following screenshot:![Setting
    up Elastic IP and DNS](img/00037.jpeg)
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在弹性IP地址已创建，在表格列表中右键单击它应该会弹出如下截图所示的下拉菜单：![设置弹性IP和DNS](img/00037.jpeg)
- en: Click on the **Associate Address** link. This should open a popup like the following:![Setting
    up Elastic IP and DNS](img/00038.jpeg)
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**关联地址**链接。这将打开一个类似于以下弹出窗口的界面：![设置弹性IP和DNS](img/00038.jpeg)
- en: On the **Associate Address** popup, we select the **Instance** to which we want
    to assign the Elastic IP address and click on the **Associate** button.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**关联地址**弹出窗口中，我们选择要分配弹性IP地址的**实例**，然后点击**关联**按钮。
- en: At this point, our EC2 box has a static (Elastic IP) address assigned. We can
    now log in to our domain registrar and point the A-record of our DNS to the Elastic
    IP we just created.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的EC2服务器已分配了一个静态（弹性IP）地址。现在我们可以登录到我们的域名注册商，并将DNS的A记录指向我们刚刚创建的弹性IP。
- en: 'Until we wait for the DNS change to kick in, there is one more thing we need
    to address. We need to SSH into our box and execute the following set of commands:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们等待DNS更改生效之前，还有一件事需要处理。我们需要SSH到我们的服务器并执行以下命令集：
- en: '[PRE27]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will update the Magento URL, so we can access it via a web browser once
    the DNS change kicks in. With a little bit of upfront planning, we could have
    easily made this bit a part of the user data for our EC2 instance, simply by providing
    the right `--base-url` parameter value in the first place.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新Magento的URL，因此一旦DNS更改生效，我们就可以通过Web浏览器访问它。通过一些前期规划，我们本可以轻松地将这部分内容作为我们EC2实例的用户数据的一部分，只需在最初提供正确的`--base-url`参数值即可。
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Throughout this chapter, we focused on two main things: setting up development
    and production environments.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们主要关注了两件事：设置开发和生产环境。
- en: As part of the development environment, we embraced free software such as VirtualBox
    and Vagrant to manage our environment setup. The setup alone came down to a single
    `Vagrantfile` script that contained the necessary set of commands to install everything
    from the Ubuntu server, PHP, Apache, MySQL, and even Magento itself. We should
    by no means look at this script as final and only as a valid script to set up
    our development environment. Investing time in making the development environment
    closer to the project-specific requirements pays off in terms of team productivity.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发环境的一部分，我们采用了如VirtualBox和Vagrant等免费软件来管理我们的环境设置。仅设置本身就归结为一个单独的`Vagrantfile`脚本，该脚本包含了安装从Ubuntu服务器、PHP、Apache、MySQL甚至包括Magento本身的必要命令集。我们绝不应该将此脚本视为最终的，而仅仅将其视为设置我们开发环境的有效脚本。在使开发环境更接近项目特定需求上投入时间，从团队生产力的角度来看是值得的。
- en: We then moved on to the production environment. Here, we looked into Amazon
    Web Services, utilizing S3 and EC2 along the way. The production environment also
    came with its own scripted installation process that sets most of the things.
    Similarly, this script is by no means final and is only a valid way to set things
    up; it's more of a base example of how to do it.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们转向生产环境。在这里，我们研究了Amazon Web Services，沿途使用了S3和EC2。生产环境也附带了自己的脚本安装过程，该过程设置了大多数东西。同样，这个脚本也绝不是最终的，而仅仅是一种设置事物的有效方式；它更多的是一个如何操作的基例。
- en: In the next chapter, we will take a closer look at some of programming concepts
    and conventions.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地探讨一些编程概念和约定。
