["```php\n// zip_01.php \n$obs1 = Observable::range(1, 7); \n$obs2 = Observable::fromArray(['a', 'b']); \n$obs3 = Observable::range(42, 5); \n\n$obs1->zip([$obs2, $obs3]) \n  ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php zip_01.php\n07:26:16 [] onNext: [1,\"a\",42] (array)\n07:26:16 [] onNext: [2,\"b\",43] (array)\n07:26:16 [] onCompleted\n\n```", "```php\n// zip_02.php \n$loop = new StreamSelectLoop(); \n$scheduler = new EventLoopScheduler($loop); \n\n$obs1 = Observable::interval(1000, $scheduler) \n  ->map(function($i) { return chr(65 + $i); }); \n\n$obs2 = Observable::interval(500, $scheduler) \n  ->map(function($i) { return $i + 42; }); \n\nObservable::interval(200, $scheduler) \n  ->zip([$obs1, $obs2]) \n  ->subscribe(new DebugSubject()); \n\n$loop->run(); \n\n```", "```php\n$ php zip_02.php\n08:48:47 [] onNext: [0,\"A\",42] (array)\n08:48:48 [] onNext: [1,\"B\",43] (array)\n08:48:49 [] onNext: [2,\"C\",44] (array)\n08:48:50 [] onNext: [3,\"D\",45] (array)\n...\n\n```", "```php\n// window_01.php \n$source = Observable::range(1, 10)->publish(); \n$windowBoundary = $source->bufferWithCount(3); \n\n$source->window($windowBoundary) \n  ->doOnNext(function() { \n    echo \"emitting new window Observable\\n\"; \n  }) \n  ->switchLatest() \n  ->subscribe(new CallbackObserver(function($value) { \n    echo \"$value\\n\"; \n  })); \n\n$source->connect(); \n\n```", "```php\n$ php window_01.php\nemitting new window Observable\n1\n2\n3\nemitting new window Observable\n4\n5\n6\nemitting new window Observable\n7\n8\n9\nemitting new window Observable\n10\n\n```", "```php\n// window_02.php \n$chars = []; \nfor ($i = 0; $i < 500; $i++) { \n  $chars[] = chr(rand(65, 67)); \n} \necho 'Source length: ' . count($chars) . \"\\n\"; \n\n$source = Observable::fromArray($chars)->publish(); \n$windowBoundary = $source->bufferWithCount(100); \n\n$source->window($windowBoundary, function($observable) { \n    return $observable->distinct(); \n  }) \n  ->doOnNext(function() { \n    echo \"emitting new window Observable\\n\"; \n  }) \n  ->switchLatest() \n  ->subscribe(new CallbackObserver(function($value) { \n    echo \"$value\\n\"; \n  })); \n\n$source->connect(); \n\n```", "```php\n$ php window_02.php\nSource length: 500\nemitting new window Observable\nA\nC\nB\nemitting new window Observable\nC\nA\nB\nemitting new window Observable\nB\nC\nA\nemitting new window Observable\nC\nB\nA\nemitting new window Observable\nB\nC\nA\nemitting new window Observable\n\n```", "```php\n// materialize_01.php  \nObservable::range(1, 3) \n    ->materialize() \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php materialize_01.php  \n20:15:48 [] onNext: OnNext(1) (Rx\\Notification\\OnNextNotification) \n20:15:48 [] onNext: OnNext(2) (Rx\\Notification\\OnNextNotification) \n20:15:48 [] onNext: OnNext(3) (Rx\\Notification\\OnNextNotification) \n20:15:48 [] onNext: OnCompleted() (...\\OnCompletedNotification) \n20:15:48 [] onCompleted \n\n```", "```php\n// materialize_02.php \nObservable::create(function(\\Rx\\ObserverInterface $observer) { \n        $observer->onNext(1); \n        $observer->onNext(2); \n        $observer->onError(new \\Exception(\"It's broken\")); \n        $observer->onNext(4); \n    }) \n    ->materialize() \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php materialize_02.php \n20:25:59 [] onNext: OnNext(1) (Rx\\Notification\\OnNextNotification)\n20:25:59 [] onNext: OnNext(2) (Rx\\Notification\\OnNextNotification)\n20:25:59 [] onNext: OnError(Exception) (...\\OnErrorNotification)\n20:25:59 [] onCompleted\n\n```", "```php\n// materialize_03.php  \nObservable::range(1, 9) \n  ->materialize() \n  ->map(function(Notification $notification) { \n    $val = null; \n    $notification->accept(function($next) use (&$val) { \n      $val = $next; \n    }, function() {}, function() use (&$val) { $val = -1; }); \n\n    if ($val % 3 == 0) { \n      $msg = \"It's really broken\"; \n      $e = $val==6 ? new LogicException($msg) : new Exception(); \n      return new OnErrorNotification($e); \n    } else { \n      return $notification; \n    } \n  }) \n  ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php materialize_03.php \n21:05:42 [] onNext: OnNext(1) (Rx\\Notification\\OnNextNotification)\n21:05:42 [] onNext: OnNext(2) (Rx\\Notification\\OnNextNotification)\n21:05:42 [] onNext: OnError(Exception) (...\\OnErrorNotification)\n21:05:42 [] onNext: OnNext(4) (Rx\\Notification\\OnNextNotification)\n21:05:42 [] onNext: OnNext(5) (Rx\\Notification\\OnNextNotification)\n21:05:42 [] onNext: OnError(LogicException) \n    (...\\OnErrorNotification)\n21:05:42 [] onNext: OnNext(7) (Rx\\Notification\\OnNextNotification)\n21:05:42 [] onNext: OnNext(8) (Rx\\Notification\\OnNextNotification)\n21:05:42 [] onNext: OnError(Exception) (...\\OnErrorNotification)\n21:05:42 [] onNext: OnCompleted() (...\\OnCompletedNotification)\n21:05:42 [] onCompleted\n\n```", "```php\n// materialize_04.php \n// the preceding chain from materialize_03.php \n->filter(function(Notification $notification) { \n  if ($notification instanceof OnErrorNotification) { \n    $e2 = new OnErrorNotification(new LogicException()); \n    return (string)$notification == (string)$e2; \n  } else { \n    return true; \n  } \n}) \n->dematerialize() \n->subscribe(new DebugSubject()) \n\n```", "```php\n$ php materialize_04.php \n21:09:33 [] onNext: 1 (integer)\n21:09:33 [] onNext: 2 (integer)\n21:09:33 [] onNext: 4 (integer)\n21:09:33 [] onNext: 5 (integer)\n21:09:33 [] onError (LogicException): It's really broken\n\n```", "```php\n// materialize_05.php  \nObservable::create(function($observer) { \n    $observer->onNext(1); \n    $observer->onNext(2); \n    $observer->onError(new Exception()); \n    $observer->onNext(4); \n    $observer->onError(new Exception()); \n    $observer->onNext(6); \n  }) \n  ->materialize() \n  ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php materialize_05.php \n21:14:53 [] onNext: OnNext(1) (Rx\\Notification\\OnNextNotification)\n21:14:53 [] onNext: OnNext(2) (Rx\\Notification\\OnNextNotification)\n21:14:53 [] onNext: OnError(Exception) (...\\OnErrorNotification)\n21:14:53 [] onCompleted\n\n```", "```php\n// error_01.php \nObservable::range(1, 5) \n  ->filter(function($val) { \n    if ($val === 3) { \n      throw new \\Exception(\"It's broken\"); \n    } \n  }) \n  ->subscribe(new CallbackObserver( \n    null, \n    function(\\Exception $e){ \n      $msg = $e->getMessage(); \n      echo \"Error: ${msg}\\n\"; \n    }) \n  ); \n\n```", "```php\n$ php error_01.php\nError: It's broken\n\n```", "```php\n// error_02.php \nObservable::range(1, 5) \n  ->filter(function($val) { \n    if ($val === 3) { \n      throw new \\Exception(\"It's broken\"); \n    } \n  }) \n  ->subscribe(new CallbackObserver()); \n\n```", "```php\n$ php error_02.php\nPHP Fatal error:  Uncaught Exception: It's broken in /.../Chapter 10/error_02.php:12\nStack trace:\n#0 [internal function]: {closure}(3)\n#1 /.../reactivex/rxphp/lib/Rx/Operator/FilterOperator.php(40): call_user_func(Object(Closure), 3)\n#2 [internal function]: Rx\\Operator\\FilterOperator->Rx\\Operator\\{closure}(3)\n...\n\n```", "```php\n// error_03.php \n$obs1 = Observable::range(1, 7); \n$obs2 = Observable::fromArray(['a', 'b']); \n$obs3 = Observable::range(42, 5); \n\n$obs1->zip([$obs2, $obs3], function($values) { \n    throw new \\Exception(\"It's broken\"); \n  }) \n  ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php error_03.php\n09:41:05 [] onError (Exception): It's broken\n\n```", "```php\n// error_04.php \n$obs1 = Observable::range(1, 7); \n$obs2 = Observable::fromArray(['a', 'b']); \n$object = new stdClass(); \n\n$obs1->zip([$obs2, $object]) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php error_04.php\nPHP Fatal error:  Uncaught Error: Call to undefined method \n    stdClass::subscribe() in /.../lib/Rx/Operator/ZipOperator.php:110\n...\n\n```", "```php\ninterface RemoteAPI { \n    public function connect($connectionDetails); \n    public function fetch($path, $callback); \n    public function close(); \n} \n\n```", "```php\n// observable_create_01.php \nclass RemoteServiceAPI implements RemoteAPI { \n  ... \n} \n\nObservable::create(function(ObserverInterface $observer) { \n  $producer = new RemoteServiceAPI(); \n  $producer->connect('...'); \n\n  $producer->fetch('whatever', function($result) use ($observer){ \n    $observer->onNext($result); \n  }); \n\n  return new CallbackDisposable(function() use ($producer) { \n    $producer->close(); \n  }); \n}); \n\n```", "```php\n// observable_create_02.php \n$producer = new RemoteServiceAPI(); \n$producer->connect('...'); \n\nObservable::create(function($observer) use ($producer) { \n  $producer->fetch('whatever', function($result) use ($observer){ \n    $observer->onNext($result); \n  }); \n}); \n\n// somewhere later... \n$producer->close(); \n\n```", "```php\n// stack_length_01.php \nObservable::range(1, 10) \n  ->doOnNext(function($val) { /* do whatever */ }) \n  ->startWithArray([12, 15, 17]) \n  ->skip(1) \n  ->map(function($val) { \n    return $val * 2; \n  }) \n  ->filter(function($val) { \n    return $val % 3 === 0; \n  }) \n  ->doOnNext(function($val) { /* do whatever */ }) \n  ->takeLast(3) \n  ->sum() \n  ->doOnNext(function($val) { /* do whatever */ }) \n  ->subscribe(new CallbackObserver(function() { \n    $backtrace = debug_backtrace(); \n    $len = count($backtrace); \n\n    foreach ($backtrace as $item) { \n      $args = count($item['args']); \n      $func = $item['function']; \n      if (isset($item['file'])) { \n        $file = substr($item['file'], \n            strrpos($item['file'], '/') + 1); \n        echo \"${file}#${item['line']} ${func} ${args} arg/s\\n\"; \n      } else { \n        echo \"${func} ${args} arg/s\\n\"; \n      } \n    } \n    echo \"============\\n\"; \n    echo \"Stack length: ${len}\\n\"; \n  })); \n\n```", "```php\n$ php stack_length_01.php \n{closure} 1 arg/s\nCallbackObserver.php#45 call_user_func_array 2 arg/s\nAbstractObserver.php#38 next 1 arg/s\nAutoDetachObserver.php#53 onNext 1 arg/s\nAbstractObserver.php#38 next 1 arg/s\nDoOnEachOperator.php#34 onNext 1 arg/s\n...\nDoOnEachOperator.php#51 onCompleted 0 arg/s\nRx\\Operator\\{closure} 0 arg/s\nCallbackObserver.php#35 call_user_func 1 arg/s\nAbstractObserver.php#19 completed 0 arg/s\nRangeObservable.php#59 onCompleted 0 arg/s\nImmediateScheduler.php#39 Rx\\Observable\\{closure} 1 arg/s\n...\nTakeLastOperator.php#55 subscribe 2 arg/s\nObservable.php#740 __invoke 3 arg/s\nAnonymousObservable.php#33 Rx\\{closure} 2 arg/s\nReduceOperator.php#73 subscribe 2 arg/s\nObservable.php#740 __invoke 3 arg/s\nAnonymousObservable.php#33 Rx\\{closure} 2 arg/s\nDoOnEachOperator.php#55 subscribe 2 arg/s\nObservable.php#740 __invoke 3 arg/s\nAnonymousObservable.php#33 Rx\\{closure} 2 arg/s\nstack_length_01.php#39 subscribe 1 arg/s\n============\nStack length: 103\n\n```", "```php\n// stack_length_02.php\n$loop = new StreamSelectLoop();\n$scheduler = new EventLoopScheduler($loop);\nObservable::range(1, 10, $scheduler)\n ...\n ->subscribe(new CallbackObserver(function() {\n ...\n }));\n$loop->run();\n\n```", "```php\n$ php stack_length_02.php \n{closure} 1 arg/s\nCallbackObserver.php#45 call_user_func_array 2 arg/s\nAbstractObserver.php#38 next 1 arg/s\n...\nTimers.php#90 call_user_func 2 arg/s\nStreamSelectLoop.php#177 tick 0 arg/s\nstack_length_02.php#45 run 0 arg/s\n============\nStack length: 65\n\n```", "```php\n// unsubscribe_01.php \n$loop = new StreamSelectLoop(); \n$scheduler = new EventLoopScheduler($loop); \n\n$subscription = Observable::range(1, 10, $scheduler) \n  ->subscribe(new CallbackObserver( \n    function($val) use (&$subscription) { \n      echo \"$val\\n\"; \n      if ($val === 3) { \n        $subscription->dispose(); \n      } \n    }, \n    null, // no error handler \n    function() { \n      echo \"completed!\\n\"; \n    }) \n  ); \n\n$loop->run(); \n\n```", "```php\n$ php unsubscribe_01.php\n1\n2\n3\n\n```", "```php\n// unsubscribe_02.php \n$subject = new Subject(); \n\n$subscription = Observable::range(1, 10) \n  ->takeUntil($subject) \n  ->subscribe(new CallbackObserver( \n    function($val) use ($subject) { \n      echo \"$val\\n\"; \n      if ($val === 3) { \n        $subject->onNext(null); \n      } \n    }, \n    null, // no error handler \n    function() { \n      echo \"completed!\\n\"; \n    }) \n  ); \n\n```", "```php\n$ php unsubscribe_02.php\n1\n2\n3\ncompleted!\n\n```", "```php\n// func_01.php \nclass MyClass { \n    public function __invoke($a, $b) { \n        return $a * $b; \n    } \n} \n$obj = new MyClass(); \nvar_dump($obj(3, 4)); \n\n```", "```php\n$ php func_01.php \nint(12)\n\n```", "```php\npublic function lift(callable $operatorFactory) { \n  return new AnonymousObservable( \n      function($observer, $schedule) use ($operatorFactory) { \n\n    $operator = $operatorFactory(); \n    return $operator($this, $observer, $schedule); \n  }); \n} \n\n```", "```php\n// anonymous_02.php \nObservable::range(1, 5) \n  ->map(function($val) { \n    return $val * 2; \n  }) \n  ->lift(function() { \n    return function($observable, $observer, $scheduler) { \n      $prevValue = 0; \n      $onNext = function($value) use ($observer, &$prevValue) { \n        $observer->onNext($value * $prevValue); \n        $prevValue = $value; \n      }; \n      $innerObs = new CallbackObserver( \n        $onNext, \n        [$observer, 'onError'], \n        [$observer, 'onCompleted'] \n      ); \n\n      return $observable->subscribe($innerObs); \n    }; \n  }) \n  ->subscribe(new DebugSubject()); \n\n```", "```php\n// DirectoryIteratorObservable.php \nclass DirectoryIteratorObservable extends Observable { \n  private $iter; \n  private $scheduler; \n  private $selector; \n  private $pattern; \n\n  public function __construct($dir, $pattern = null, \n      $selector = null, $recursive = true, $scheduler = null) { \n\n    $this->scheduler = $scheduler; \n    $this->pattern = $pattern; \n    if ($recursive) { \n      $dirIter = new RecursiveDirectoryIterator($dir); \n      $iter = new RecursiveIteratorIterator($dirIter); \n    } else { \n      $iter = new DirectoryIterator($dir); \n    } \n    $this->iter = $iter; \n\n    if ($selector) { \n         $this->selector = $selector; \n    } else { \n      $this->selector = function(SplFileInfo $file) { \n        return $file; \n      }; \n    } \n  } \n  // ... \n} \n\n```", "```php\n// DirectoryIteratorObservable.php \nclass DirectoryIteratorObservable extends Observable { \n  // ... \n  public function subscribe($observer, $scheduler = null) { \n    if ($this->scheduler !== null) { \n      $scheduler = $this->scheduler; \n    } \n    if ($scheduler === null) { \n      $scheduler = new ImmediateScheduler(); \n    } \n    $this->iter->rewind(); \n\n    return $scheduler->scheduleRecursive( \n        function($reschedule) use ($observer) { \n      /** @var SplFileInfo $current */ \n      $current = $this->iter->current(); \n      $this->iter->next(); \n      if (!$this->pattern || preg_match($this->pattern,$current)){  \n        try { \n          $processed = call_user_func($this->selector, $current); \n          $observer->onNext($processed); \n        } catch (\\Exception $e) { \n          $observer->onError($e); \n        } \n      } \n\n      if ($this->iter->valid()) { \n        $reschedule(); \n      } else { \n        $observer->onCompleted(); \n      } \n    }); \n  } \n} \n\n```", "```php\n// directory_iterator_01.php \n$dir = __DIR__ . '/../symfony_template'; \n(new DirectoryIteratorObservable($dir, '/.+\\.php$/')) \n  ->subscribeCallback(function(SplFileInfo $file) { \n    echo \"$file\\n\"; \n  }); \n\n```", "```php\n// DirectoryIteratorSharedObservable.php \nclass DirectoryIteratorSharedObservable extends Observable { \n    private $inner; \n    public function __construct() { \n        $args = func_get_args(); \n        // PHP7 array unpacking with \"...\" \n        $this->inner = (new DirectoryIteratorObservable(...$args)) \n            ->publish(); \n    } \n    public function subscribe($observer, $scheduler = null) { \n        $this->inner->subscribe($observer, $scheduler); \n    } \n    public function connect() { \n        return $this->inner->connect(); \n    } \n    public function refCount() { \n        return $this->inner->refCount(); \n    } \n} \n\n```", "```php\n// directory_iterator_shared_01.php \n$src = new DirectoryIteratorSharedObservable('.', '/.+\\.php$/'); \n$src->subscribe(new DebugSubject('1')); \n$src->subscribe(new DebugSubject('2')); \n$src->subscribe(new DebugSubject('3')); \n$src->connect(); \n\n```", "```php\n$ php7 directory_iterator_shared_01.php \n09:52:55 [1] onNext: ./materialize_01.php (SplFileInfo)\n09:52:55 [2] onNext: ./materialize_01.php (SplFileInfo)\n09:52:55 [3] onNext: ./materialize_01.php (SplFileInfo)\n09:52:55 [1] onNext: ./materialize_02.php (SplFileInfo)\n09:52:55 [2] onNext: ./materialize_02.php (SplFileInfo)\n09:52:55 [3] onNext: ./materialize_02.php (SplFileInfo)\n...\n\n```", "```php\n// FTPClient.php \nclass FTPClient { \n  private $conn; \n  private $cwd = '/'; \n\n  public function __construct($host, $username, $pass, $port=21) { \n    $this->conn = ftp_connect($host, $port); \n    if (!$this->conn) { \n      throw new \\Exception('Unable to connect to ' . $host); \n    } \n    if (!ftp_login($this->conn, $username, $pass)) { \n      throw new \\Exception('Unable to login'); \n    } \n  } \n\n  public function chdir($dir) { \n    $this->cwd = '/' . $dir; \n    if (!ftp_chdir($this->conn, $dir)) { \n      throw new \\Exception('Unable to change current directory'); \n    } \n  } \n\n  public function listDir() { \n    return Observable::defer(function() { \n      $files = ftp_nlist($this->conn, $this->cwd); \n      return Observable::fromArray($files) \n        ->shareReplay(PHP_INT_MAX); \n    }); \n  } \n\n  public function close() { \n    ftp_close($this->conn); \n  } \n  // ... \n} \n\n```", "```php\nclass FTPClient { \n  // ... \n  public function size(Observable $files) { \n    return Observable::create(function($obs) use ($files) { \n      $files->subscribeCallback(function($filename) use ($obs) { \n        $size = ftp_size($this->conn, $filename); \n        $obs->onNext(['filename' => $filename, 'size' => $size]); \n      }); \n    }); \n  } \n\n  public function upload(Observable $files, $m = FTP_ASCII) { \n    $subject = new Subject(); \n    $files->subscribeCallback(function($file) use ($subject, $m) { \n      $fp = fopen($file, 'r'); \n      $filename = basename($file); \n\n      if (ftp_fput($this->conn, $filename, $fp, $m)) { \n        $subject->onNext($filename); \n      } else { \n        $e = new Exception('Unable to upload ' . $filename); \n        $subject->onError($e); \n      } \n    }); \n    return $subject->asObservable(); \n  } \n\n  public function download(Observable $files, $dir, $m=FTP_ASCII){ \n    $subject = new Subject(); \n    $files->subscribeCallback( \n        function($file) use ($subject, $m, $dir) { \n\n      $dest = $dir . DIRECTORY_SEPARATOR . $filename; \n      if (ftp_get($this->conn, $dest, $filename, $mode)) { \n        $subject->onNext($filename); \n      } else { \n        $e = new Exception('Unable to download ' . $filename); \n        $subject->onError($e); \n      } \n    }); \n    return $subject->asObservable(); \n  } \n} \n\n```", "```php\n// ftp_01.php \n$ftp = new FTPClient('...', 'user', 'password'); \necho \"List content...\\n\"; \n$ftp->listDir() \n    ->takeLast(1) \n    ->subscribeCallback(function($dir) use ($ftp) { \n        echo \"Changing directory to \"$dir\"...\\n\"; \n        $ftp->chdir($dir); \n    }); \n\n```", "```php\n// ftp_01.php \n// ... \necho \"File sizes...\\n\"; \n$getFileSizesSubject = new Subject(); \n\n$fileSizes = $ftp \n  ->size($getFileSizesSubject->asObservable()) \n  ->doOnNext(function($file) { \n    echo \"Size of \".$file['filename'].\" is \".$file['size'].\"\\n\"; \n  }) \n  ->filter(function($file) { \n    return $file['size'] != -1; \n  }) \n  ->subscribe(new DebugSubject()); \n\n$ftp->listDir()->subscribe($getFileSizesSubject);  \n\n```", "```php\n// ftp_01.php \n// ... \n$fileSizes = $ftp \n  ->size($getFileSizesSubject->asObservable()) \n  ->doOnNext(function($file) { \n    echo \"Size of \".$file['filename'].\" is \".$file['size'].\"\\n\"; \n  }) \n  ->filter(function($file) { \n    return $file['size'] != -1; \n  }) \n  ->publish(); \n\n$destDir = './_download'; \n@mkdir($destDir); \n\necho \"Downloading files ...\\n\"; \n$filesToDownload = $fileSizes \n  ->map(function($file) { \n    return $file['filename']; \n  }); \n\n$ftp->download($filesToDownload, $destDir) \n  ->subscribeCallback(function($file) use ($destDir) { \n    echo \"$file downloaded\"; \n    $fileDest = $destDir . DIRECTORY_SEPARATOR . $file; \n    if (file_exists($fileDest)) { \n      echo \" - OK\\n\"; \n    } else { \n      echo \" - failed\\n\"; \n    } \n  }); \n\n$fileSizes->subscribeCallback(function($file) { \n  echo $file['filename'] . ' - ' . $file['size'] . \"B\\n\"; \n}); \n\n$fileSizes->connect(); \n$ftp->listDir()->subscribe($getFileSizesSubject); \necho \"Done\\n\"; \n\n```", "```php\n$ php ftp_01.php\nList content...\nChanging directory to \"web\"...\nFile sizes...\nDownloading files ...\nSize of . is -1\nSize of .. is -1\nSize of app is -1\nSize of blog is -1\nSize of cache is -1\nSize of composer.json is 522\ncomposer.json downloaded - OK\ncomposer.json - 522B\nSize of composer.lock is 23690\ncomposer.lock downloaded - OK\ncomposer.lock - 23690B\nSize of log is -1\nSize of src is -1\nSize of stats is -1\nSize of vendor is -1\nSize of www is -1\nDone\n\n```", "```php\nclass FTPClient { \n  // ... \n  public function listFiles() { \n    return $this->size($this->listDir()) \n      ->filter(function($file) { \n        return $file['size'] != -1; \n      }); \n  } \n\n  public function listDirectories() { \n    return $this->size($this->listDir()) \n      ->filter(function($dir) { \n        return $dir['size'] == -1 \n            && $dir['filename'] != '.' \n            && $dir['filename'] != '..'; \n      }) \n      ->map(function($dir) { \n        return $dir['filename']; \n      }); \n  } \n} \n\n```", "```php\nimport * as lib from 'lib'; \nconsole.log(lib.square(42)); \n\n```", "```php\n$ npm install rxjs\n\n```", "```php\n// rxjs_01.js \nconst Rx = require('rxjs/Rx'); \n\nRx.Observable.range(1, 8) \n    .filter(val => val % 2 == 0) \n    .subscribe(val => console.log('Next:', val)); \n\n```", "```php\nfunction(val) { \n    return val % 2 == 0; \n} \n\n```", "```php\n$ node rxjs_01.js \nNext: 2\nNext: 4\nNext: 6\nNext: 8\n\n```", "```php\n// interval_01.js \nconst Rx = require('rxjs/Rx'); \nconst Observable = Rx.Observable; \n\nObservable.interval(1000) \n    .subscribe(val => console.log('#1 Next:', val)); \nObservable.interval(60) \n    .subscribe(val => console.log('#2 Next:', val)); \n\n```", "```php\n$ node interval_01.js \n#2 Next: 0\n#1 Next: 0\n#2 Next: 1\n#2 Next: 2\n#1 Next: 1\n#2 Next: 3\n\n```", "```php\n// node_01.js  \nconsole.log('Starting application...'); \nvar num = 5; \nconsole.log('num =', num); \n\nsetTimeout(() => { \n    console.log('Inside setTimeout'); \n    num += 1; \n    console.log('num =', num); \n}); \n\nconsole.log('After scheduling another callback'); \nconsole.log('num =', num); \n\n```", "```php\n$ node node_01.js \nStarting application...\nnum = 5\nAfter scheduling another callback\nnum = 5\nInside setTimeout\nnum = 6\n\n```", "```php\n// debounce_time_01.js  \nObservable.interval(100) \n    .concatMap(val => { \n        let obs = Observable.of(val); \n        return val % 5 == 0 ? obs.delay(250) : obs; \n    }) \n    .debounceTime(200) \n    .subscribe(val => console.log(val)); \n\n```", "```php\n$ node debounce_time_01.js \n4\n9\n14\n\n```", "```php\n// excel_01.js \nconst Rx = require('rxjs/Rx'); \nconst Observable = Rx.Observable; \nconst BehaviorSubject = Rx.BehaviorSubject; \n\nlet A = new BehaviorSubject(1); \nlet B = new BehaviorSubject(2); \nlet C = new BehaviorSubject(3); \n\nlet AB = Observable.combineLatest(A, B, (a, b) => a + b) \n    .do(x => console.log('A + B = ' + x)); \n\nlet BC = Observable.combineLatest(B, C, (b, c) => b + c) \n    .do(x => console.log('B + C = ' + x)); \n\nlet ABBC = Observable.combineLatest(AB, BC, (ab, bc) => ab + bc) \n    .do(x => console.log('AB + BC = ' + x)); \n\nABBC.subscribe(); \n\n```", "```php\n$ node excel_01.js \nA + B = 3\nB + C = 5\nAB + BC = 8\n\n```", "```php\n... \nconsole.log(\"Updating B = 4 ...\"); \nB.next(4); \n\n```", "```php\n$ node excel_01.js \nA + B = 3\nB + C = 5\nAB + BC = 8\nUpdating B = 4 ...\nA + B = 5\nAB + BC = 10\nB + C = 7\nAB + BC = 12\n\n```", "```php\nlet ABBC = Observable.combineLatest(AB, BC, (ab, bc) => ab + bc) \n    .debounceTime(0) \n    .do(x => console.log('AB + BC = ' + x)); \n\n```", "```php\n$ node excel_01.js \nA + B = 3\nB + C = 5\nUpdating B = 4 ...\nA + B = 5\nB + C = 7\nAB + BC = 12\n\n```", "```php\n// http_mock_01.js \nconst Rx = require('rxjs/Rx'); \nlet data = '[{\"name\": \"John\"},{\"name\": \"Bob\"},{\"name\": \"Dan\"}]'; \n\nRx.Observable.of(data) \n    .map(response => JSON.parse(response)) \n    .subscribe(value => console.log('Next:', value)); \n\n```", "```php\n$ node http_mock_01.js \nNext: [ { name: 'John' }, { name: 'Bob' }, { name: 'Dan' } ]\n\n```", "```php\n// http_mock_02.js \n... \nObservable.of(data) \n    .map(response => JSON.parse(response)) \n    .concatMap(array => Observable.from(array)) \n    .filter(object => object.name[0].toLowerCase() == \"b\") \n    .subscribe(value => console.log('Next:', value)); \n\n```", "```php\n$ node http_mock_02.js\nNext: { name: 'Bob' }\n\n```", "```php\nObservable.of(data) \n    .map(data => JSON.parse(data)) \n    .concatAll() \n    .filter(object => object.name[0].toLowerCase() == \"b\") \n    .subscribe(value => console.log('Next:', value)); \n\n```", "```php\n// expand_01.js \nconst Rx = require('rxjs/Rx'); \nconst Observable = Rx.Observable; \n\nObservable.of(1) \n    .expand(val => { \n        if (val > 32) { \n            return Observable.empty(); \n        } else { \n            return Observable.of(val * 2); \n        } \n    }) \n    .subscribe(val => console.log(val)); \n\n```", "```php\n$ node expand_01.js \n1\n2\n4\n8\n16\n32\n64\n\n```", "```php\n// finally_01.js \nconst Rx = require('rxjs/Rx'); \nlet source = Rx.Observable.create(observer => { \n        observer.next(1); \n        observer.error('error message'); \n        observer.next(3); \n        observer.complete(); \n    }); \n\nsource \n    .finally(() => console.log('#1 Finally callback')) \n    .subscribe( \n        value => console.log('#1 Next:', value), \n        error => console.log('#1 Error:', error), \n        () => console.log('#1 Complete') \n    ); \n\nsource \n    .onErrorResumeNext() \n    .finally(() => console.log('#2 Finally callback')) \n    .subscribe( \n        value => console.log('#2 Next:', value), \n        error => console.log('#2 Error:', error), \n        () => console.log('#2 Complete') \n    ); \n\n```", "```php\n$ node finally_01.js \n#1 Next: 1\n#1 Error: error message\n#1 Finally callback\n#2 Next: 1\n#2 Complete\n#2 Finally callback\n\n```", "```php\n// with_latest_from_01.js  \nconst Rx = require('rxjs/Rx'); \nconst Observable = Rx.Observable; \n\nlet source1 = Observable.interval(150); \nlet source2 = Observable.interval(250); \n\nObservable.interval(1000) \n    .withLatestFrom(source1, source2) \n    .subscribe(response => console.log(response)); \n\n```", "```php\n$ node with_latest_from_01.js  \n[ 0, 5, 2 ] \n[ 1, 12, 6 ] \n[ 2, 19, 10 ] \n[ 3, 25, 14 ] \n[ 4, 31, 18 ] \n[ 5, 38, 22 ] \n[ 6, 45, 26 ] \n[ 7, 51, 30 ] \n\n```", "```php\n// cache_01.js \nconst Rx = require('rxjs/Rx'); \nconst Observable = Rx.Observable; \n\nvar counter = 1; \nvar updateTrigger = Observable.defer(() => mockDataFetch()) \n    .publishReplay(1, 1000) \n    .refCount(); \n\nfunction mockDataFetch() { \n    return Observable.of(counter++).delay(100); \n} \n\nfunction mockHttpCache() { \n    return updateTrigger.take(1); \n} \n\n```", "```php\nmockHttpCache().toPromise() \n    .then(val => console.log(\"Response from 0:\", val)); \n\nsetTimeout(() => mockHttpCache().toPromise() \n    .then(val => console.log(\"Response from 200:\", val)) \n, 200); \n\nsetTimeout(() => mockHttpCache().toPromise() \n    .then(val => console.log(\"Response from 1200:\", val)) \n, 1200); \n\nsetTimeout(() => mockHttpCache().toPromise() \n    .then(val => console.log(\"Response from 1500:\", val)) \n, 1500); \n\nsetTimeout(() => mockHttpCache().toPromise() \n    .then(val => console.log(\"Response from 3500:\", val)) \n, 3500); \n\n```", "```php\n$ node cache_01.js \nResponse from 0: 1\nResponse from 200: 1\nResponse from 1200: 2\nResponse from 1500: 2\nResponse from 3500: 3\n\n```"]