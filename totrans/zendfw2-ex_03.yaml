- en: Chapter 3. Creating a Communication Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the previous chapter, we covered creating controllers and views in a new
    Zend Framework module. In this chapter we will create our first registration form,
    and set up login and authentication for registered users using Zend Framework
    components.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the key components that we will focus on in this chapter are listed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Zend\Form`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend\InputFilter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend\Validator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Models and `Zend\Db`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zend\Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are usually built by creating the HTML page for the form, writing separate
    validation and filtering for various form events, and finally writing the controllers
    and actions for the form actions. With Zend Framework, the `Zend\Form` component
    provides all the previously stated features in a single component.
  prefs: []
  type: TYPE_NORMAL
- en: '`Zend\Form` allows developers to programmatically create and handle forms in
    your applications. `Zend\Form` supports form rendering, form handling, input filtering
    and validation, and form configurations. In our next task we will set up our first
    form in ZF2.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a registration form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create our first registration form, we will create a new controller to display
    a registration form; we will also create new forms and views. We need to make
    the following changes to the `Users` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Form** – We will also need to create a registration form under `src/Users/Form/RegisterForm.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `RegisterForm` class extends `Zend\Form\Form`; the form''s configuration
    is added to the constructor:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'All fields are added to the form using the `$this->add()` method on the form''s
    constructor:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Additional validators/filters can be added to the fields while declaring the
    fields in the form. In this case we are adding special validation for the `EmailAddress`
    field:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Use the same method to add `password`, `confirm_password`, and `submit` fields;
    `password` and `confirm_password` will be of type `password`, whereas `submit`
    will be of type `button`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Views** – The following views will have to be created to support the registration
    process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Registration page**: The view for registration page is created in `src/view/users/register/index.phtml`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The view consists of three main sections—the section to display error messages,
    the view logic which is used to generate the form tag, and the view helpers used
    to generate the actual form elements. The following logic is used to display error
    messages:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The following block is used to generate the `<form>` HTML tag using the `form`
    object assigned to the view in the controller:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The following section is used to generate individual form elements for the
    **Name**, **Email**, **Password**, **Confirm Password**, and **Submit** fields:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally the `form` HTML tag needs to be closed:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Confirmation page**: The view for the confirmation page is pretty straightforward,
    the view is created in `src/view/users/register/confirm.phtml`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Controller** – Now that we have the form and views ready, our next step will
    be to have a controller in place, which will help us to access this form. We will
    create a new `RegisterController` class and load the newly created form in its
    index action. The new controller will be created in the `src/Users/Controller/RegisterController.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Configuration** – Now we have created all the necessary components to display
    our form, we need to add our controller to the `invokables` list in the module
    config (`config/module.config.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test the registration form''s display, open any web browser and try accessing
    the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://comm-app.local/users/register`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The registration form should look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating a registration form](img/1929OS_03_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Until now we have created a form that can be used to display all the necessary
    fields that can be used during the registration process. Let us try to understand
    how the form is being rendered. When we invoke the `http://comm-app.local/users/register`
    page, the controller creates a new instance of the `RegisterForm` class and displays
    it on the web browser. We have added the following fields to the `RegisterForm`
    class using its constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Confirm Password**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Submit** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These fields are added to the newly created `Form` object. The `ViewModel` pattern
    renders the form, and the `form` object gets passed over to the view for rendering,
    and each field is rendered as per the logic in the view using the `FormElement`
    view helper.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`FormElement` works as a magic helper to render any form field based on the
    type of the `Zend\Form\Element` tag that is passed on to it. There are individual
    helpers for rendering specific form fields. The complete list of form view helpers
    can be obtained from the ZF documentation on *Form View Helpers* found at[http://framework.zend.com/manual/2.0/en/modules/zend.form.view.helpers.html](http://framework.zend.com/manual/2.0/en/modules/zend.form.view.helpers.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we move on to the next section, please create a login form in the same
    way that we used to create the registration form. The form will contain the following
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Email**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Submit** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be using this login form to perform authentication towards the end of
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Form validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you had taken a closer look at the form code, you would have noticed that
    we have added some validation for the **Email Address** field as shown in the
    following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we added the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An attribute to make the field a `required` field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A filter to trim the string that is passed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A validator to verify if the e-mail address is in the valid format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the introduction on Zend Framework's InputFilter, we can validate entire
    forms instead of attaching validation to each and every form field. This allows
    much cleaner code and better scalability of Zend Forms. So effectively we can
    have the same form being used in multiple sections of the website, each having
    its own set of validation rules that are not dependant on the form's validation.
    In our next section we will set up a new validator for the registration form.
  prefs: []
  type: TYPE_NORMAL
- en: Zend\InputFilter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Validation for forms and various other inputs can be performed by making use
    of `Zend\InputFilter`. This component allows filtering and validation of generic
    sets of input data. For specific form elements you can apply validation and filtering
    on the specific elements, but if we have to filter an input set like a `$_GET`
    request or a `$_POST` request, this can be implemented using the `InputFilter`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: In our next task, we will be adding the `InputFilter` class to our registration
    form.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding validation to the registration form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add an `InputFilter` class to an existing form, we need to create a new
    `InputFilter` class and use it during form submission for validation, as shown
    in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `InputFilter` class in `src/Users/Form/RegisterFilter.php`. The
    `RegisterFilter` class will extend the `Zend\InputFilter\InputFilter` class and
    will add all the necessary validators in its constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `$this->add()` method, we can add various filter options to the registration
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the **Email Address** field, we will add a validator to check if the value
    entered is a valid e-mail address:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For the **Name** field, we will add a validator to limit the size between `2`
    to `140` characters and will also add a filter to strip the HTML tags:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For the **Password** and **Confirm Password** fields, we will not add any validators
    but will make them mandatory:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: This `InputFilter` class is not mapped to the `RegisterForm` class yet; we will
    be performing the validation during form submission. We need to modify the `RegisterController`
    class to enable the `processAction` method and validate the form upon submission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `RegisterController` class to enable the `processAction` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now open the registration page in your web browser and test the validation:![Time
    for action – adding validation to the registration form](img/1929OS_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now enabled validation on the registration form. In the `processAction()`
    function of the `RegisterController` class, you will see that a new instance of
    the `RegisterFrom` class is created and `RegisterFilter` is applied to the form
    using the `$form->setInputFilter()` method. The data entered as input to the form
    is added again and validation is performed by using the `isValid()` method. Error
    messages are rendered in the form using the `FormElementErrors` view helper.
  prefs: []
  type: TYPE_NORMAL
- en: We need to ensure that the names in the `InputFilter` class properly map to
    the names in the form while adding validation to `InputFilter`.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've just learned about adding a custom `InputFilter` class to a Zend form
    using the previous task; before you move on to the next section, set up a validation
    `InputFilter` for the `Login` form that you have built in your previous exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Models and database access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Models provide a representation of data in the MVC application. There is no
    `Zend\Model` component that is provided by Zend Framework, so developers have
    to decide on the implementation part of models. Models by themselves cannot talk
    to databases and fetch or process data, so they are usually connected to mapper
    objects or use ORM to connect to databases. For this example, we will be using
    a `TableGateway` pattern for storing data in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`TableGateway` is a built-in Zend Framework 2 DB pattern which acts as a gateway
    to a database table, having access to all table rows for performing various SQL
    operations including `select`, `insert`, `update`, and `delete`.'
  prefs: []
  type: TYPE_NORMAL
- en: TableGateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TableGateway` pattern is used for creating an object that represents a
    table in the database; in this example, we will need a `TableGateway` object for
    the `User` table.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `exchangeArray()` method needs to be declared in the model if the model
    uses `TableGateway` for database storage.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating models and saving the form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task, we will be creating a new user model, creating a table in MySQL
    database to save the registration data using `TableGateway` to store registration
    data to the table. We will, finally, connect our registration form to `UserTable`
    so that new registrations are stored in the database. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A new table needs to be created to store the registration information in the
    MySQL database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The application's global configuration needs to be modified to add references
    to the database connection as shown in the following snippet. This is available
    under `<Application_Home>/config/autoload/global.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new model for the `User` class. This needs to be created under `src/Users/Model/User.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `User` model will define the `setPassword()` and the `exchangeArray()`
    methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement a `setPassword()` method which will assign a MD5 version password
    to the `UserTable` entity for storage:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `exchangeArray()` method; this method is used while mapping the
    `User` entity to the `UserTable` entity:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new table reference for `User`. This needs to be created under `src/Users/Model/UserTable.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can use `UserTable` to save new registrations to the database. To save
    registrations, we need to make changes to the `RegisterController` class. First,
    we will create a new function for saving user registration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `TableGateway` constructor takes the following parameters and generates
    a `TableGateway` object in response:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**$table**: Used to provide the table name for the `TableGateway` object.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adapter $adapter**: Used to provide the database adapter name.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**$features** (optional): TableGateway Feature API allows the extension of
    the `TableGateway` functionality without having to extend the base class. The
    features can be specified here.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ResultSet $resultSetPrototype** (optional): Used to provide the `ResultSet`
    type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sql $sql** (optional): Used to provide any additional SQL criteria; make
    sure that the SQL object is bound to the same table as in `$table`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information refer to: [http://framework.zend.com/manual/2.0/en/modules/zend.db.table-gateway.html#zend-db-tablegateway](http://framework.zend.com/manual/2.0/en/modules/zend.db.table-gateway.html#zend-db-tablegateway)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we need to make sure that the `processAction()` method calls this function
    before redirecting to the confirmation page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the registration page in your favourite browser and use the MySQL database
    to check if the registration information is properly stored in the database. The
    registration confirmation page should look like the following screenshot:![Time
    for action – creating models and saving the form](img/1929OS_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can check the MySQL database to see if the records have been inserted properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – creating models and saving the form](img/1929OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now modified the form to save new user registrations to the database;
    our next step will be to set up authentication based on the information stored
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Zend\Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Zend\Authentication` is an authentication component provided by Zend Framework
    which can be used for authentication against a wide number of authentication mechanisms
    including database table, HTTP authentication, and LDAP authentication. The component
    also lets you store the session information to a wide range of storages.'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will be using the `Zend\Authentication` component to validate
    the user credentials submitted in the login form.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – user authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task we will be authenticating the login form using the `Zend\Authentication`
    component using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a function to return the authentication service in the login controller
    `src/Users/Controller/LoginController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `processAction()` method for `LoginController`, check if the form submission
    is valid, and use the `AuthService` method to validate the credentials using the
    `authenticate` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `ConfirmAction` function will render the logged in user''s welcome screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The view for the user''s home page created under `/view/users/login/confirm.phtml`
    will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the login page in your browser and try to log in with the credentials that
    you used during registration. The login form should look like the following:![Time
    for action – user authentication](img/1929OS_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon successful login, you will be redirected to the login success page as shown
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – user authentication](img/1929OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a new database table authentication adapter for the `user` table
    to validate the `email` and `password` fields. Using the authentication adapter
    we have been able to perform authentication for registered users.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – Zend Framework 2.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which file should be modified to store the database credentials application-wide?
  prefs: []
  type: TYPE_NORMAL
- en: '`<App>/module/<Module>/config.inc`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<App>/config/autoload/global.php`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<App>/module/<Module>/module.config.php`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<App>/module/<Module>/config/module.config.php`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What is the correct method to assign an input filter to a form?
  prefs: []
  type: TYPE_NORMAL
- en: '`$form->setInputFilter($inputFilter)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$form->useInputFilter($inputFilter)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$form->assignInputFilter($inputFilter)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$form->mapInputFilter($inputFilter)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have learned creating forms, doing basic validations, storing
    form data to the database, using models, and authenticating with the database.
    In the next chapter we will be learning about advanced database operations, which
    will be based on the `TableGateway` pattern that we have covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
