- en: Chapter 10. Building Mobile Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*One of the major hurdles in mobile application development is the diversified
    number of platforms that have to be targeted while building mobile applications.
    Platforms such as PhoneGap and Titanium enable developers to build cross-platform
    mobile applications, but one of the disadvantages with this model is to manage
    multiple projects on different platforms for mobile and web services. Zend, with
    the release of Zend Studio 10, has tried to address the same gap by providing
    a development platform based on PhoneGap, which supports end-to-end mobile apps
    in a cloud-based environment.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the release of Zend Studio 10, Zend now offers extremely simplified mobile
    application development platform using Zend Framework 2, known as **Cloud Connected
    Mobile Tool**. In this chapter we will be learning about the basics of building
    cloud-connected mobile applications using Zend Studio. Some of the key learning
    areas discussed are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Building your first **cloud-connected mobile** (**CCM**) application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing as a native application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a simple search interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-connected mobile applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zend Studio now offers a CCM tool enabling developers to build native mobile
    applications using the cloud platform. CCM supports development of RPC-based or
    REST-based web services for the cloud using Zend Framework 2 and Zend Server Gateway.
  prefs: []
  type: TYPE_NORMAL
- en: CCM also offers support for developing native mobile applications by integrating
    with various mobile SDKs (Android SDK/ADT for Android, Xcode for iOS, and Windows
    Phone SDK for Windows Phone). This enables developers to build and test the applications
    in native environments/devices.
  prefs: []
  type: TYPE_NORMAL
- en: CCM tool also offers a simple and easy-to-use mobile GUI editor which helps
    developers to effortlessly build great user interfaces for their mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: Zend Studio 10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a first step towards building your mobile application, please ensure that
    you install Zend Studio 10 on your development machine. Zend Studio 10 offers
    integrated support for building cloud-connected mobile applications and allows
    developers to deploy their mobile application on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Zend Studio 10 is available for purchase from the Zend Online Store; there is
    a free 30-day trial as well. For further information visit [http://www.zend.com/en/products/studio/](http://www.zend.com/en/products/studio/).
  prefs: []
  type: TYPE_NORMAL
- en: phpCloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zend Developer Cloud is a cloud-based PHP development environment, which enables
    developers to build and deploy applications on the cloud, without undergoing the
    hassle of setting up a PHP development environment, and configuring and maintaining
    the environment.
  prefs: []
  type: TYPE_NORMAL
- en: This environment has Zend Framework 2 installed with a large set of PHP extensions;
    developers can make use of various development tools such as Zend Studio, Eclipse
    PDT, and CLI to build and deploy their applications on the developer cloud. Zend
    Developer Cloud also provides capabilities to push your application to other external
    cloud services such as Amazon and IBM SmartCloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Zend Developer Cloud is currently in free developer beta. For further information
    about Zend Developer Cloud, please refer to their website: [http://www.phpcloud.com/](http://www.phpcloud.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – configuring your phpCloud account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task we will set up our phpCloud account and configure the cloud environment
    in Zend Studio 10 using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://my.phpcloud.com/user/login](https://my.phpcloud.com/user/login),
    register for a new account, and log in to your phpCloud account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the login, you will be asked to create a container. You can specify a
    container name which will be a part of the container URL; you can also choose
    to generate a SSH key pair or use your own SSH keys; in this case, we will generate
    a new SSH key pair. The following screenshot describes the container creation
    screen:![Time for action – configuring your phpCloud account](img/1929OS_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now download the SSH keys; we will be using these keys to set up our deployment
    target in Zend Studio:![Time for action – configuring your phpCloud account](img/1929OS_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Zend Studio, navigate to **Window** | **Show View** | **Targets**:![Time
    for action – configuring your phpCloud account](img/1929OS_10_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Target** icon and choose **phpcloud** as shown in the following
    screenshot:![Time for action – configuring your phpCloud account](img/1929OS_10_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **phpcloud Target Details** page, you will be asked to provide the following
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Username**: Used to specify your Zend Developer Cloud username'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: Used to specify your Zend Developer Cloud password'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSH Private Key**: Used to point to the SSH key that was just generated in
    the phpcloud container creation screen'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action – configuring your phpCloud account](img/1929OS_10_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After you click on **Finish**, you will see that the new target is added to
    the list of targets:![Time for action – configuring your phpCloud account](img/1929OS_10_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully created our first mobile application using Zend's cloud-connected
    mobile application projects. In the subsequent sections we will understand how
    to extend these web services using Zend Framework 2 to build additional functionality
    into mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneGap and Zend Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PhoneGap is a mobile application development framework which allows developers
    to build mobile applications using HTML, CSS, and JavaScript. The PhoneGap framework
    is used to convert these applications into native mobile applications, without
    having to rewrite the applications in native languages like Objective-C for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Zend Studio 10 now integrates PhoneGap into the Zend Studio IDE; this enables
    developers to easily build and test mobile applications without having to depend
    on external libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on cloud-connected mobile applications using Zend Studio
    10; please refer the following documentation page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://files.zend.com/help/Zend-Studio-10/zend-studio.htm#cloud_connect_mobile.htm](http://files.zend.com/help/Zend-Studio-10/zend-studio.htm#cloud_connect_mobile.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – building your first cloud-connected mobile application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for building your first cloud-connected mobile
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the **Cloud Connected Mobile Project** option from the **New** menu:![Time
    for action – building your first cloud-connected mobile application](img/1929OS_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Project** wizard, you will be asked to provide the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mobile Project Name**: Name of the client-side mobile application project'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Services Project Name**: Name of the web services project for the mobile
    application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Services Project Deployment Target**: Deployment target for the mobile
    application (you can choose the previously created phpcloud target here)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Zend Studio 10 supports various deployment options; it can automatically detect
    local Zend Server installation or deploy an application to one of the targets—
    the local Zend Server, remote Zend Server, Zend Developer Cloud (phpCloud), or
    OpenShift Cloud.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – building your first cloud-connected mobile application](img/1929OS_10_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the template selection page, choose **Simple Services** as it will create
    a simple project with a client/server-side example as shown in the following screenshot:![Time
    for action – building your first cloud-connected mobile application](img/1929OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on **Finish** will create the mobile and web services projects. The
    user interface designer in the mobile project lets us easily make changes to the
    mobile interface as shown in the following screenshot:![Time for action – building
    your first cloud-connected mobile application](img/1929OS_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run the project from the Zend Studio IDE; it should launch a Zend emulator
    interface as shown in the next screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Get List** button should return the list of customers from the web services
    project via an RPC call. If the request doesn''t return a response and throws
    an error such as **Ajax error. Error: Access is denied. Trying static data!**,
    then check the `gatewayURL` variable in `MobileApplication/www/js/my.js`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make sure it points to the correct deployment URL as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`var gatewayURL = ''http://zf2cloudapp.my.phpcloud.com/MobileService'';`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – building your first cloud-connected mobile application](img/1929OS_10_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully created our first mobile application using Zend's cloud-connected
    mobile application projects. In the subsequent sections we will understand how
    to extend these web services using Zend Framework 2 to build additional functionality
    into mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: Native applications versus mobile web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Native mobile applications provide great benefits over mobile web applications.
    Native web applications are run from the device memory, so there is little need
    for network interaction; these applications tend to load and run faster. One of
    the other key advantages of native mobile applications is that they have access
    to the device's native features such as camera, device information, and accelerometer;
    this gives native applications an added advantage over mobile web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – testing as a native application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task we will create a native iOS application using the **Native Applications**
    section of Zend Studio. Before you get started, make sure that Xcode IDE in installed
    on your Mac. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For Android applications, you will need to have **Android Development Tool**
    (**ADT**) installed; this can be installed directly from Zend Studio.
  prefs: []
  type: TYPE_NORMAL
- en: For a Windows phone application, the Windows Phone SDK needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, from our mobile application project choose **Create iOS Application**:![Time
    for action – testing as a native application](img/1929OS_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be asked to provide the project details; please specify the **Company
    Name** and **Bundle Id** values. The **Bundle Id** value refers to the unique
    name that is used to identify the application; this is usually provided in the
    `com.my-company-name.my-application-name` format. When you register the application
    with the Apple Store, ensure that the bundle identifier matches with the one provided
    at Apple.![Time for action – testing as a native application](img/1929OS_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the new iOS project is created in the workspace as you can see in the following
    screenshot:![Time for action – testing as a native application](img/1929OS_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Zend Studio allows for the creation of multiple dependent mobile application
    projects. If you have to make any changes to the client code, the changes can
    be made in the parent mobile project and that will automatically update all dependent
    client projects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For more information on creating native applications, please refer to the Zend
    Studio documentation at the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://files.zend.com/help/Zend-Studio-10/zend-studio.htm#creating_native_applications.htm](http://files.zend.com/help/Zend-Studio-10/zend-studio.htm#creating_native_applications.htm)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you run the project, the application will launch the iOS emulator and will
    launch the mobile application as shown in the following screenshot:![Time for
    action – testing as a native application](img/1929OS_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created a new native iOS application using Zend Studio support for a
    native application; in our next section we will be using Zend Framework 2 to provide
    web services for this application.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have created an iOS native application, try creating an Android
    version of the same application using Zend Studio. For this, you will need to
    install the Android Development Tool on your Zend Studio installation.
  prefs: []
  type: TYPE_NORMAL
- en: Zend Server Gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zend Server Gateway is a lightweight web services gateway based on Zend Framework
    2, which allows for the mapping of web service routes to various controller/actions
    of the web services. Zend Server Gateway is responsible for authentication, validation,
    filtering, and routing for RPC and RESTful APIs used in CCM projects.
  prefs: []
  type: TYPE_NORMAL
- en: The routing configurations are mapped into `config/gateway.xml`; the routes
    and configurations can be managed using the gateway editor interface provided
    in Zend Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a mobile search interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task, we will be creating a simple search interface for searching the
    existing customer records by name using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to create a search function in the `CustomerRepository` model
    (`MyMobileService\src\MyCompany\Model\CustomerRepository.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new action in `RpcController` (`MyMobileService\src\MyCompany\Controller\RpcController.php`);
    this will handle the web service request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the gateway editor, create a new RPC service; set the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**URL**: `/search`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method**: `GET`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request Parameters(Add)**: **Name** – `query`; **Source** – `Route`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handler Method**: `MyCompany\Controller\RpcController::getSearchCustomersAction`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can test the RPC service by right-clicking on the service and choosing **Test
    Service**. On the right-hand side you will be presented with an interface to provide
    test input and validate the service response:![Time for action – creating a mobile
    search interface](img/1929OS_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the mobile GUI editor, create a new page `searchCustomers`, and add the
    following elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Text Box**: `custsearchinput`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Button**: `searchbutton`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List View**: `custlistview`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `binding` section of the `Search` button, bind the button with the `GET
    /search:query()` web service. Map the `custsearchinput` textbox to the `query`
    route parameter in the `data` section. This action will bind the search text to
    the `query` route parameter. Note that the `query` route parameter is already
    mapped to `getSearchCsutomerAction`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `onGetSearchquery` JavaScript method in `MyMobileApp/www/js/my.js`
    to handle the RPC response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that you link the `Search` page from the `index` page using a button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run the project in native mode; you will be able to see the search page,
    like the one shown in the following screenshot:![Time for action – creating a
    mobile search interface](img/1929OS_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now created new web services for the existing cloud-connected mobile
    application and have tested the mobile app in a native emulator. With Zend Studio
    10, you can see the simplicity in building mobile apps which are supported by
    web services running on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – building mobile applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which of the following platforms are supported in Zend Studio 10 for native
    mobile application development?
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firefox OS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MeeGo
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Brew
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which of the following web services are not supported by Zend Server Gateway
    for building cloud-connected mobile applications?
  prefs: []
  type: TYPE_NORMAL
- en: RPC
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SOAP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: REST
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud-connected mobile applications are a great step by Zend towards enabling
    PHP developers to build and support mobile apps using the cloud platform. With
    CCM, Zend is offering an extremely robust, yet simple-to-use platform for building
    these applications.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this chapter, you have come to the end of this book. You have
    covered a lot of ground in various different applications of Zend Framework through
    this book and have accomplished a number of tasks. This book has shown you the
    building blocks for developing applications using Zend Framework 2; there is lot
    more to learn in Zend Framework, most of which is explained in an extremely detailed
    manner in the Zend Framework documentation ([http://framework.zend.com/manual/2.2/en/index.html](http://framework.zend.com/manual/2.2/en/index.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading. Feel free to give your feedback on how you felt reading
    this book.
  prefs: []
  type: TYPE_NORMAL
