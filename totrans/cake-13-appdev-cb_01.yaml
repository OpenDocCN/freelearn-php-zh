- en: Chapter 1. Authentication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 身份验证
- en: 'This chapter will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up a basic authentication system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本身份验证系统
- en: Using and configuring the `Auth` component
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用和配置 `Auth` 组件
- en: Allowing logins with e-mail or username
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许使用电子邮件或用户名登录
- en: Saving the user details after login
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录后保存用户详情
- en: Getting the current user's information
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前用户的信息
- en: Using prefixes for role-based access control
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用前缀进行基于角色的访问控制
- en: Setting up Access Control Layer based authentication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于访问控制层的身份验证设置
- en: Integrating with OpenID
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 OpenID 集成
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter explains how to set up authentication on a CakePHP application,
    starting from the most basic setup and finishing with advanced authorization mechanisms.
    This is accomplished through the use of tools that are built into the framework
    core, which allow us to quickly set up secure areas without losing flexibility
    to build more complex solutions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何在 CakePHP 应用程序上设置身份验证，从最基本的设置开始，到高级授权机制结束。这是通过使用框架核心中内置的工具来实现的，这些工具允许我们快速设置安全区域，同时不失构建更复杂解决方案的灵活性。
- en: The first two recipes show us how to set up a basic, yet fully working authentication
    system. The next three recipes allow our users to log in using different information,
    have their user details saved after a successful login, and show us how to get
    this user information. The sixth recipe shows a more complex authorization technique
    that relies on route prefixes. The seventh recipe sets up a complex authentication
    system through the use of CakePHP's Access Control Layer. Finally, the last recipe
    shows us how to integrate our application with OpenID.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个菜谱展示了如何设置一个基本但完全工作的身份验证系统。接下来的三个菜谱允许我们的用户使用不同的信息登录，在成功登录后保存用户详情，并展示如何获取这些用户信息。第六个菜谱展示了一种更复杂的基于路由前缀的授权技术。第七个菜谱通过使用
    CakePHP 的访问控制层设置了一个复杂的身份验证系统。最后，最后一个菜谱展示了如何将我们的应用程序与 OpenID 集成。
- en: Setting up a basic authentication system
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本身份验证系统
- en: The first task to be completed when we are in the process of adding authentication
    to an application is to identify which controllers will need user access. Normally
    we would make every controller and action protected by default, and then we would
    specify which areas of our application allow public access.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在向应用程序添加身份验证的过程中时，首先要完成的第一项任务是确定哪些控制器需要用户访问。通常，我们会默认保护每个控制器和操作，然后我们会指定我们应用程序的哪些区域允许公开访问。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We must have a `users` table that should contain, at least, two fields: `username`
    (to hold the username) and `password` (to hold a hash made out of the user''s
    password).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须有一个包含至少两个字段的 `users` 表：`username`（用于存储用户名）和 `password`（用于存储由用户密码生成的散列）。
- en: 'If you don''t have a table for this purpose, you can use the following SQL
    statement to create it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有为此目的创建表，可以使用以下 SQL 语句来创建它：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a file named `users_controller.php` and place it inside your `app/controllers`
    folder with the following contents:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `users_controller.php` 的文件，并将其放置在您的 `app/controllers` 文件夹中，内容如下：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file named `login.ctp` in your `app/views/users` folder (create the
    folder if you don''t have one already), and add the following contents:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `app/views/users` 文件夹中创建一个名为 `login.ctp` 的文件（如果您还没有创建该文件夹，请先创建），并添加以下内容：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file named `app_controller.php` in your `app/` folder with the following
    contents:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `app/` 文件夹中创建一个名为 `app_controller.php` 的文件，内容如下：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Modify the `UsersController`, and add the following code before the `login`
    method:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `UsersController`，并在 `login` 方法之前添加以下代码：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file named `add.ctp` and place it in your `app/views/users` folder
    with the following contents:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `add.ctp` 的文件，并将其放置在您的 `app/views/users` 文件夹中，内容如下：
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We now have a fully working authentication system. We can add new users by browsing
    to `http://localhost/users/add`, logging in by browsing to `http://localhost/users/login`,
    and finally logging out by browsing to `http://localhost/users/logout`.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经有一个完全工作的身份验证系统。我们可以通过浏览到 `http://localhost/users/add` 来添加新用户，通过浏览到 `http://localhost/users/login`
    来登录，最后通过浏览到 `http://localhost/users/logout` 来注销。
- en: 'After creating a user, you should see the login form with a success message,
    as shown in the following screenshot:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建用户后，你应该会看到一个带有成功信息的登录表单，如下面的截图所示：
- en: '![How to do it...](img/1926_01_01.jpg)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_01_01.jpg)'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We start by creating two actions in the `UsersController` class: `login()`,
    to show and process submissions of the login form, and `logout()`, to handle users
    logging out.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`UsersController`类中创建两个动作：`login()`，用于显示和处理登录表单的提交，以及`logout()`，用于处理用户登出。
- en: 'You may be surprised that the `login()` method has no logic whatsoever. To
    display the form, all we need to do is display the action''s view. The form submission
    is taken care of by the `Auth` component, leaving us with no need to implement
    any controller logic. Therefore, the only implementation we need is to create
    a view for this action, which includes a simple form with two fields: `username`,
    and `password`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会惊讶，`login()`方法没有任何逻辑。要显示表单，我们只需要显示动作的视图。表单提交由`Auth`组件处理，因此我们不需要实现任何控制器逻辑。因此，我们唯一需要实现的是为这个动作创建一个视图，该视图包括一个简单的表单，包含两个字段：`username`和`password`。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `inputs` method of CakePHP's `FormHelper` is a shortcut designed to avoid
    multiple calls to the `input` method. By using it, we can create a full form with
    elements without the need to call `FormHelper::input()` several times.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP的`FormHelper`的`inputs`方法是一个旨在避免多次调用`input`方法的快捷方式。通过使用它，我们可以创建一个包含元素的完整表单，而无需多次调用`FormHelper::input()`。
- en: The `logout()` controller action simply calls the `Auth` component's `logout()`
    method. This method removes the logged-in user data from the session, and returns
    the address to which the user should be redirected after logging out, obtained
    from the previously configured `logoutRedirect` setting of the component (defaults
    to the application's home page if the setting was not configured.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`logout()`控制器动作简单地调用`Auth`组件的`logout()`方法。此方法从会话中删除已登录用户数据，并返回用户登出后应重定向到的地址，该地址来自组件先前配置的`logoutRedirect`设置（如果未配置，则默认为应用程序的主页。）'
- en: 'Next, we add two components to the controller: `Session`, and `Auth`. The `Session`
    component is needed to create the messages (through the use of its `setflash()`
    method) that informs the user if a login attempt was unsuccessful, or if a user
    was created.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在控制器中添加两个组件：`Session`和`Auth`。`Session`组件是必需的，用于创建消息（通过使用其`setflash()`方法），告知用户登录尝试是否失败，或者是否创建了用户。
- en: The `Auth` component operates between your controller's actions and the incoming
    request by means of the `beforeFilter` callback method. It uses it's `authorize`
    setting to check what type of authentication scheme is to be used.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth`组件通过`beforeFilter`回调方法在控制器动作和传入请求之间操作。它使用其`authorize`设置来检查将要使用哪种身份验证方案。'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To obtain more information about the `authorize` setting, see the recipe *Using
    and configuring the Auth component*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关`authorize`设置的更多信息，请参阅配方*使用和配置Auth组件*。
- en: Once the `Auth` component is added to a controller, all actions in that controller
    are not accessible unless there is a valid user logged in. This means that if
    we had any actions that should be public (such as the `login()` and `add()` actions
    in our controller), we would have to tell the `Auth` component about them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将`Auth`组件添加到控制器中，该控制器中的所有动作在没有有效用户登录的情况下均不可访问。这意味着，如果我们有任何应该公开的动作（例如我们控制器中的`login()`和`add()`动作），我们就必须告诉`Auth`组件这些动作。
- en: If one wishes to make some actions public, one can add the name of these actions
    to the `allowedActions` setting of the `Auth` component, or by calling its `allow()`
    method. We use the later approach to tell the `Auth` component that the `add()`
    action should be reachable without a logged-in user. The `login()` action is automatically
    added to the list of public actions by the `Auth` component.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人想使某些动作公开，可以将这些动作的名称添加到`Auth`组件的`allowedActions`设置中，或者通过调用其`allow()`方法。我们使用后者来告诉`Auth`组件`add()`动作可以在不登录用户的情况下访问。`login()`动作由`Auth`组件自动添加到公共动作列表中。
- en: When the user attempts to reach an action that is not within the public actions,
    the `Auth` component checks the session to see if a user is already logged in.
    If a valid user is not found, it redirects the browser to the `login` action.
    If there is a user who is logged in, it uses the controller's `isAuthorized` method
    to check if the user has access. If its return value is `true`, it allows access,
    otherwise access is rejected. In our case, we implemented this method in `AppController`,
    our base controller class. If the attempted action requires a user who is logged
    in, the `login()` action is executed. After the user submits data using the login
    form, the component will first hash the password field, and then issue a find
    operation on the `User` model to find a valid account, using the posted username
    and password. If a valid record is found, it is saved to the session, marking
    the user as logged in.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试访问不在公共操作范围内的操作时，`Auth`组件会检查会话以查看是否有用户已经登录。如果没有找到有效的用户，它将浏览器重定向到`login`操作。如果已登录用户，它将使用控制器的`isAuthorized`方法检查用户是否有权限。如果其返回值为`true`，则允许访问，否则拒绝访问。在我们的案例中，我们在`AppController`，我们的基本控制器类中实现了此方法。如果尝试的操作需要已登录的用户，则执行`login()`操作。在用户使用登录表单提交数据后，组件将首先对密码字段进行哈希处理，然后对`User`模型执行查找操作以找到有效的账户，使用提交的用户名和密码。如果找到有效记录，则将其保存到会话中，标记用户已登录。
- en: Hashing a password confirmation field
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对密码确认字段进行哈希处理
- en: When the `Auth` component is enabled on a controller and the user submits a
    form with a field named `password` (regardless if it is being rendered in the
    login form), the component will automatically hash the `password` field before
    executing the controller's action.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Auth`组件在控制器上启用，并且用户提交了一个名为`password`的字段（无论它是否在登录表单中渲染）的表单时，组件将在执行控制器操作之前自动对`password`字段进行哈希处理。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Auth` component uses the salt defined in the configuration setting `Security.salt`
    (in your `app/config/core.php` file) to calculate the hash. Different salt values
    will produce different hashes even when using the same password. Therefore, make
    sure you change the salt on all your CakePHP applications, thus enhancing the
    security of your authentication system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth`组件使用配置设置中定义的盐（在您的`app/config/core.php`文件中的`Security.salt`）来计算哈希。即使使用相同的密码，不同的盐值也会产生不同的哈希值。因此，请确保您更改所有CakePHP应用程序中的盐，从而增强您的认证系统的安全性。'
- en: 'This means that the action will never hold the plain password value, and this
    should be particularly noted when utilizing mechanisms to confirm password validations.
    When you are implementing such validation, make sure you hash the confirmation
    field using the proper method:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着该操作永远不会保留明文密码值，在利用机制进行密码验证确认时，这一点应特别注意。当你实施此类验证时，请确保使用正确的方法对确认字段进行哈希处理：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Using and configuring the Auth component*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用和配置Auth组件*'
- en: '*Getting the current user''s information*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取当前用户信息*'
- en: Using and configuring the Auth component
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用和配置Auth组件
- en: If there is something that defines the `Auth` component, it is its flexibility
    that accounts for different types of authentication modes, each of these modes
    serving different needs. In this recipe, you will learn how to modify the component's
    default behavior, and how to choose between the different authentications modes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有什么定义了`Auth`组件，那就是它的灵活性，它负责不同的认证模式，每种模式都满足不同的需求。在本食谱中，您将学习如何修改组件的默认行为，以及如何在不同认证模式之间进行选择。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We should have a fully working authentication system, so follow the entire recipe
    *Setting up a basic authentication system*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个完全工作的认证系统，所以按照整个食谱*设置基本认证系统*。
- en: 'We will also add support to have disabled user accounts. Add a field named
    active to your users table with the following SQL statement:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加对禁用用户账户的支持。使用以下SQL语句向您的用户表添加一个名为active的字段：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Modify the definition of the `Auth` component in your `AppController` class,
    so it looks like the following:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`AppController`类中`Auth`组件的定义，使其看起来如下：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now while still editing your `app/app_controller.php` file, place the following
    code right below the `components` property declaration, at the beginning of the
    `beforeFilter` method in your `AppController` class:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当您仍在编辑`app/app_controller.php`文件时，在`AppController`类中的`beforeFilter`方法声明下方，放置以下代码：
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Copy the default layout from `cake/libs/view/layouts/default.ctp` to your `app/views/layouts`
    directory, and make sure you place the following line in your layout where you
    wish to display authentication messages:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认布局从 `cake/libs/view/layouts/default.ctp` 复制到你的 `app/views/layouts` 目录，并确保你在布局中放置以下行，以便显示认证消息：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Edit your `app/controllers/users_controller.php` file and place the following
    method right below the `logout()` method:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `app/controllers/users_controller.php` 文件，并在 `logout()` 方法下方放置以下方法：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, create the view for this newly added action in a file named `dashboard.ctp`
    and place it in your `app/views/users` folder with the following contents:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在名为 `dashboard.ctp` 的文件中创建此新添加的动作视图，并将其放置在你的 `app/views/users` 文件夹中，内容如下：
- en: '[PRE12]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you now browse to `http://localhost/users/login` and enter the wrong credentials
    (wrong username and/or password), you should see the error message shown in the
    following screenshot:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在浏览到 `http://localhost/users/login` 并输入错误的凭据（错误的用户名和/或密码），你应该会看到以下截图中的错误消息：
- en: '![How to do it...](img/1926_01_02.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/1926_01_02.jpg)'
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As the `Auth` component does its magic right before a controller action is executed,
    we either need to specify its settings in the `beforeFilter` callback, or pass
    them in an array when adding the component to the `components` property. A common
    place to do it is in the `beforeFilter()` method of the `AppController` class,
    as by doing so we can share the same authentication settings throughout all our
    controllers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `Auth` 组件在其执行控制器动作之前执行其魔法，我们要么需要在 `beforeFilter` 回调中指定其设置，要么在将组件添加到 `components`
    属性时传递它们。一个常见的地方是在 `AppController` 类的 `beforeFilter()` 方法中这样做，因为这样我们可以在所有控制器中共享相同的认证设置。
- en: 'This recipe changes some `Auth` settings, so that whenever a valid user logs
    in, they are automatically taken to a `dashboard` action in the `UsersController`
    (done via the `loginRedirect` setting.) It also adds some default error messages
    through the component''s respective settings: `loginError` for when the given
    account is invalid, and `authError` for when there is a valid account, but the
    action is not authorized (which can be achieved by returning `false` from the
    `isAuthorized()` method implemented in `AppController`.)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方更改了一些 `Auth` 设置，以便每当有效用户登录时，他们都会自动被带到 `UsersController` 中的 `dashboard` 动作（通过
    `loginRedirect` 设置完成。）它还通过组件的相应设置添加了一些默认错误消息：当提供的账户无效时为 `loginError`，当有有效账户但操作未授权时为
    `authError`（这可以通过在 `AppController` 中实现的 `isAuthorized()` 方法返回 `false` 来实现。）
- en: It also sets the component's `userScope` setting in `AppController::beforeFilter()`.
    This setting allows us to define which conditions the `User` find operation need
    to match to allow a user account to log in. By adding the `userScope` setting,
    we ensure that only user records that have the `active` field set to `1` are allowed
    access.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它还在 `AppController::beforeFilter()` 中设置了组件的 `userScope` 设置。此设置允许我们定义 `User`
    查找操作需要匹配哪些条件才能允许用户账户登录。通过添加 `userScope` 设置，我们确保只有将 `active` 字段设置为 `1` 的用户记录才能访问。
- en: Changing the default user model
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改默认用户模型
- en: As you may have noticed, the role of the `User` model is crucial, not only to
    fetch the right user account, but also to check the permissions on some of the
    authentication schemes. By default, the `Auth` component will look for a `User`
    model, but you can change which model is to be used by setting the `userModel`
    property or the `userModel` key in the settings array.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，`User` 模型的角色至关重要，不仅是为了获取正确的用户账户，还要检查某些认证方案上的权限。默认情况下，`Auth` 组件会寻找一个
    `User` 模型，但你可以通过设置 `userModel` 属性或设置数组中的 `userModel` 键来更改要使用的模型。
- en: 'For example, if your user model is `Account`, you would add the following setting
    when adding the `Auth` component to your controller:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的用户模型是 `Account`，你会在将 `Auth` 组件添加到控制器时添加以下设置：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or equivalently, you would add the following to the `beforeFilter` method of
    your `AppController` class, in the block of code where you are setting up the
    component:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 或者等价地，你可以在 `AppController` 类的 `beforeFilter` 方法中添加以下内容到 `beforeFilter` 方法：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's more...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `$authorize` property of the `Auth` component (or the `authorize` key in
    the `Auth` component settings array) defines which authentication scheme should
    be used. Possible values are:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth` 组件的 `$authorize` 属性（或 `Auth` 组件设置数组中的 `authorize` 键）定义了应该使用哪种认证方案。可能的值有：'
- en: '`controller`: It makes the component use the controller''s `isAuthorized` method,
    which returns `true` to allow access, or `false` to reject it. This method is
    particularly useful when obtaining the logged-in user (refer to the *Getting the
    current user''s information* recipe)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controller`：它使组件使用控制器的`isAuthorized`方法，该方法返回`true`以允许访问，或返回`false`以拒绝访问。此方法在获取登录用户时特别有用（请参阅*获取当前用户信息*配方）。'
- en: '`model`: It is similar to `controller`; instead of using the controller to
    call the method, it looks for the `isAuthorized` method in the `User` model. First,
    it tries to map the controller''s action to a CRUD operation (one of`''create'',
    ''read'', ''update''`, or`''delete''`), and then calls the method with three arguments:
    the user record, the controller that is being accessed, and the CRUD operation
    (or actual controller action) that is to be executed.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`：它与`controller`类似；而不是使用控制器来调用方法，它会在`User`模型中查找`isAuthorized`方法。首先，它会尝试将控制器的操作映射到CRUD操作（`''create''`、`''read''`、`''update''`或`''delete''`之一），然后使用三个参数调用该方法：用户记录、被访问的控制器以及要执行的操作（或实际的控制器操作）。'
- en: '`object`: It is similar to `model`; instead of using the model to call the
    method, it looks for the `isAuthorized` method in a given class. In order to specify
    which class, set the `AuthComponent::$object` property to an instance of such
    a class. It calls the method with three arguments: the user record, the controller
    that is being accessed, and the action that is to be executed.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object`：它与`model`类似；而不是使用模型来调用方法，它会在给定的类中查找`isAuthorized`方法。为了指定哪个类，将`AuthComponent::$object`属性设置为该类的实例。它使用三个参数调用该方法：用户记录、被访问的控制器以及要执行的操作。'
- en: '`actions`: It uses the `Acl` component to check for access, which allows a
    much more grained access control.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions`：它使用`Acl`组件来检查访问权限，这允许更细粒度的访问控制。'
- en: '`crud`: It is similar to `actions`; the difference lies in the fact that it
    first tries to map the controller''s action to a CRUD operation (one of`''create'',
    ''read'', ''update''`, or`''delete''`.)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crud`：它与`actions`类似；区别在于它首先尝试将控制器的操作映射到CRUD操作（`''create''`、`''read''`、`''update''`或`''delete''`之一）。'
- en: See also
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: '*Getting the current user''s information*'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取当前用户信息*'
- en: '*Setting up Access Control Layer based authentication*'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置基于访问控制层身份验证*'
- en: Allowing logins with username or e-mail
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许使用用户名或电子邮件登录
- en: 'By default the `Auth` component will use the given username posted in the login
    form to check for a valid user account. However, some applications have two separate
    fields: one to define the username, and another one to define the user''s e-mail.
    This recipe shows how to allow logins using either a username or an e-mail.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Auth`组件将使用登录表单中提交的给定用户名来检查有效用户账户。然而，某些应用程序有两个单独的字段：一个用于定义用户名，另一个用于定义用户的电子邮件。本配方展示了如何允许使用用户名或电子邮件进行登录。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We should have a fully working authentication system, so follow the entire recipe,
    *Setting up a basic authentication system*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个完全工作的身份验证系统，所以按照整个配方，*设置基本身份验证系统*。
- en: 'We also need the field to hold the user''s e-mail address. Add a field named
    `email` to your `users` table with the following SQL statement:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要字段来存储用户的电子邮件地址。使用以下SQL语句向您的`users`表添加一个名为`email`的字段：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We need to modify the signup page so users can specify their e-mail address.
    Edit your `app/views/users/add.ctp` file and make the following changes:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改注册页面，以便用户可以指定他们的电子邮件地址。编辑您的`app/views/users/add.ctp`文件并做出以下更改：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Edit your `app/views/users/login.ctp` file and make the following changes to
    it:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的`app/views/users/login.ctp`文件并对其做出以下更改：
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Edit your `UsersController` class and make sure the `login` action looks like
    the following:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的`UsersController`类，并确保`login`操作看起来如下：
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you now browse to `http://localhost/users/login` and you can enter the user''s
    e-mail and password to log in, as shown in the following screenshot:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您现在浏览到`http://localhost/users/login`，您就可以输入用户的电子邮件和密码进行登录，如下面的截图所示：
- en: '![How to do it...](img/1926_01_03.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/1926_01_03.jpg)'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the `Auth` component is unable to find a valid user account using the username
    and password fields, it gives the control back to the `login` action. Therefore,
    in the `login` action we can check if there is any submitted data. If that is
    the case, we know that the `Auth` component was not able to find a valid account.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `Auth` 组件无法使用用户名和密码字段找到有效的用户账户时，它将控制权交回 `login` 动作。因此，在 `login` 动作中，我们可以检查是否有任何提交的数据。如果是这样，我们知道
    `Auth` 组件无法找到有效的账户。
- en: With this in mind, we can try to find a user account with an e-mail that matches
    the given username. If there is one, we log the user in and redirect the browser
    to the default action, similar to what the component would do on a successful
    attempt.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们可以尝试找到与给定用户名匹配的电子邮件地址的用户账户。如果存在，我们登录用户并将浏览器重定向到默认动作，类似于组件在成功尝试时所做的操作。
- en: If we cannot find a valid user account, we simply set the flash message to the
    default error message specified in the `Auth` component.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们找不到有效的用户账户，我们只需将闪存消息设置为 `Auth` 组件中指定的默认错误消息。
- en: There's more...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You may have noticed that when looking for the user record, we used `$this->Auth->data`
    rather than `$this->data` to use the actual posted values. The reason for this
    is because the `Auth` component will not only automatically hash the password
    field, but also remove its value from the controller's `data` property, so if
    you need to show the login form again, the password field will not be pre-filled
    for the user.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在查找用户记录时，我们使用了 `$this->Auth->data` 而不是 `$this->data` 来使用实际提交的值。这样做的原因是因为
    `Auth` 组件不仅会自动哈希密码字段，还会将其值从控制器中的 `data` 属性中移除，所以如果你需要再次显示登录表单，密码字段将不会为用户预先填充。
- en: See also
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Getting the current user''s information*'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取当前用户信息*'
- en: Saving the user details after login
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录后保存用户详情
- en: One of the most typical functionalities offered by sites with authentication
    capabilities is the ability to let the user choose (by clicking on a checkbox)
    whether they want the system to remember their account after logging in.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 具有身份验证功能的网站提供的最典型的功能之一是允许用户选择（通过点击复选框）他们是否希望在登录后让系统记住他们的账户。
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We should have a working authentication system, so follow the entire recipe,
    *Setting up a basic authentication system*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个工作的身份验证系统，所以按照整个配方，*设置基本身份验证系统*。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit your `app/app_controller.php` file and add the following `Auth` component
    settings to the `Auth` component. Also add the `Cookie` component by making the
    following changes to the `components` property: `AppController` (in the `$components`
    property) must include the following mandatory setting (if it is not there, add
    it inside the array of settings for the component):'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `app/app_controller.php` 文件，并将以下 `Auth` 组件设置添加到 `Auth` 组件中。同时，通过以下更改 `components`
    属性来添加 `Cookie` 组件：`AppController`（在 `$components` 属性中）必须包含以下强制性设置（如果尚未存在，请将其添加到组件设置数组的内部）：
- en: '[PRE19]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Edit your `app/views/users/login.ctp view` file and make the following changes:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `app/views/users/login.ctp` 视图文件，并做出以下更改：
- en: '[PRE20]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, add the following code to the end of the `login` action of your `UsersController`
    class:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下代码添加到你的 `UsersController` 类的 `login` 动作末尾：
- en: '[PRE21]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, add the following code to the beginning of the `logout()` method of your
    `UsersController` class:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到你的 `UsersController` 类的 `logout()` 方法开头：
- en: '[PRE22]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, add the following method to your `AppController` class, right below
    the `components` property declaration:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下方法添加到你的 `AppController` 类中，紧接在 `components` 属性声明下方：
- en: '[PRE23]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first task we needed to accomplish was to disable the automatic redirect
    in the `Auth` component. By doing so, we are able to catch both successful and
    failed log in attempts, which allows us to check if they **remember me** checkbox
    is selected. If the checkbox is indeed checked, we create a cookie named `User`
    that contains the values for the `username` and `password` fields with a value
    equal to the user ID that logged in. Remember that the `password` value is automatically
    encrypted by the `Auth` component, so it is safe for storage. The `Cookie` component
    adds another layer of security by automatically encrypting and decrypting the
    given values.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要完成的第一项任务是禁用`Auth`组件中的自动重定向。通过这样做，我们能够捕捉到成功和失败的登录尝试，这允许我们检查是否选中了**记住我**复选框。如果复选框确实被选中，我们创建一个名为`User`的cookie，其中包含`username`和`password`字段的值，其值等于登录的用户ID。记住，`password`值会自动由`Auth`组件加密，因此存储是安全的。`Cookie`组件通过自动加密和解密给定值，增加了另一层安全性。
- en: In `AppController::beforeFilter()`, when there is no logged-in user, we check
    to see if the cookie is set. If it is, we use the values for the `username` and
    `password` fields stored in the cookie to log in a user, and then redirect the
    browser to the `login` action.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AppController::beforeFilter()`中，如果没有登录用户，我们会检查cookie是否已设置。如果是，我们使用cookie中存储的`username`和`password`字段的值来登录用户，然后将浏览器重定向到`login`操作。
- en: Finally, we delete the cookie when it is appropriate (when a user logs in without
    the checkbox selected, or when the user manually logs out).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在适当的时候删除cookie（当用户未选中复选框登录或用户手动注销时）。
- en: See also
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Getting the current user''s information*'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取当前用户信息*'
- en: Getting the current user's information
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取当前用户信息
- en: CakePHP's authentication system will provide us with the necessary tools to
    build a strong, flexible `Auth` based application. We can then use it to fetch
    the current user information and make it available throughout our application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP的认证系统将为我们提供构建强大、灵活的基于`Auth`的应用程序所需的工具。然后我们可以使用它来获取当前用户信息，并在整个应用程序中使其可用。
- en: In this recipe, we will see how to save the current logged-in user's information
    so it is accessible from any point of our CakePHP application, including its layout,
    while adding a helpful method to the `User` model to make the job easier.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何保存当前登录用户的信息，使其可以从我们的CakePHP应用程序的任何地方访问，包括布局，同时向`User`模型添加一个有用的方法以简化工作。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We should have a working authentication system, so follow the recipe, *Setting
    up a basic authentication system*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个工作的认证系统，所以按照以下步骤，*设置基本认证系统*。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Add the following method to your `AppController` class:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加到您的`AppController`类中：
- en: '[PRE24]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Also in your `AppController` class, add the following method inside the class
    definition:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`AppController`类中，在类定义内添加以下方法：
- en: '[PRE25]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Copy the default CakePHP layout file named `default.ctp` from your `cake/libs/view/layouts`
    folder to your application''s `app/views/layouts` folder. Place the following
    code in the `app/views/layouts/default.ctp` folder. While editing this layout,
    add the following code right where you want login / logout links to appear:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认的CakePHP布局文件`default.ctp`从您的`cake/libs/view/layouts`文件夹复制到您的应用程序的`app/views/layouts`文件夹。在`app/views/layouts/default.ctp`文件夹中放置以下代码。在编辑此布局时，在您想要登录/注销链接出现的地方添加以下代码：
- en: '[PRE26]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following method to the `User` model. If you do not have a model created
    for the `users` table, proceed to create a file named `user.php` and place it
    in your `app/models` directory. If you do have one already, make sure you add
    the `get` method to it:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加到`User`模型中。如果您还没有为`users`表创建模型，请继续创建一个名为`user.php`的文件并将其放置在您的`app/models`目录中。如果您已经有了，请确保将其`get`方法添加进去：
- en: '[PRE27]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By storing the user record in an application-wide configuration variable, we
    are able to obtain the current user information from anywhere in our application,
    whether it is controllers, components, models, and so on. This gives us the power
    to know if there's a logged-in user at any point.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将用户记录存储在应用程序的全局配置变量中，我们能够在应用程序的任何地方获取当前用户信息，无论是控制器、组件、模型等。这使得我们能够知道在任何时候是否有用户登录。
- en: We also need to make sure that views are able to learn whether there is a logged-in
    user. Even though a view could, technically speaking, still have access to the
    configure variable, it is normally more elegant to set a view variable to avoid
    any interaction with PHP classes from the view (except for the view helpers).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保视图能够了解是否有已登录的用户。虽然从技术上讲，视图仍然可以访问配置变量，但通常更优雅的做法是设置一个视图变量，以避免视图与PHP类之间的任何交互（除了视图助手之外）。
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you set variables for the view in `AppController`, it is very important
    to make sure no controller action will overwrite the variable. Choose a unique
    name wisely, and make sure you don't set a view variable with the same name in
    your controllers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 `AppController` 中为视图设置变量时，确保没有任何控制器操作会覆盖这个变量非常重要。明智地选择一个独特的名称，并确保你不在你的控制器中设置具有相同名称的视图变量。
- en: 'Finally, we add a handy method to the `User` model, so we can obtain the current
    user from our controllers without having to deal with the `Configure` variable.
    We can also use the `get` method to collect a particular bit of user information.
    For example, to fetch the current user''s username from a controller, we would
    do something like the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在 `User` 模型中添加了一个方便的方法，这样我们就可以从我们的控制器中获取当前用户，而无需处理 `Configure` 变量。我们还可以使用
    `get` 方法收集特定的用户信息。例如，要从控制器中获取当前用户的用户名，我们可以做如下操作：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You should not have to load the `User` model class yourself, as the `Auth` component
    does it for you.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要自己加载 `User` 模型类，因为 `Auth` 组件会为你做这件事。
- en: See also
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Allowing logins with e-mail or username*.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*允许使用电子邮件或用户名登录*。'
- en: Using prefixes for role-based access control
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用前缀进行基于角色的访问控制
- en: Even though CakePHP provides a very powerful access control layer, sometimes
    we just need to implement user roles without having to go into the details of
    specifying which role is allowed access to which action.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管CakePHP提供了一个非常强大的访问控制层，但有时我们只需要实现用户角色，而不必深入了解指定哪个角色可以访问哪个操作。
- en: 'This recipe shows how to limit access to certain actions by role-using routing
    prefixes, which constitutes a perfect solution for simple role-based authentication.
    In order to accomplish this recipe, we will assume the need to add three user
    roles in our application: administrators, managers, and users.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱展示了如何通过使用路由前缀来限制基于角色的特定操作访问，这构成了一个简单的基于角色的身份验证的完美解决方案。为了完成这个菜谱，我们将假设需要在我们的应用程序中添加三个用户角色：管理员、经理和用户。
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We should have a working authentication system, so follow the recipe, *Setting
    up a basic authentication system*. The `users` table should also contain a field
    to hold the user''s role (named `role`.) Add this field with the following SQL
    statement:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个工作的身份验证系统，所以按照菜谱，*设置基本身份验证系统*。`users` 表也应该包含一个字段来存储用户的角色（命名为 `role`。）使用以下
    SQL 语句添加此字段：
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit your `app/config/core.php` file and look for the line that defines the
    `Routing.prefixes` setting. If it is commented out, uncomment it. Then change
    it to:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `app/config/core.php` 文件，查找定义 `Routing.prefixes` 设置的行。如果该行被注释掉了，取消注释它。然后将其更改为：
- en: '[PRE30]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following code at the end of your `UsersController` class definition:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `UsersController` 类定义的末尾添加以下代码：
- en: '[PRE31]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a view for each of these actions, and put content into it to reflect
    which view is being rendered. Therefore, you would have to create three files:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这些操作中的每一个创建一个视图，并在其中放入内容以反映正在渲染的视图。因此，你需要创建三个文件：
- en: '`app/views/users/admin_dashboard.ctp`'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/views/users/admin_dashboard.ctp`'
- en: '`app/views/users/manager_dashboard.ctp`'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/views/users/manager_dashboard.ctp`'
- en: '`app/views/users/dashboard.ctp`'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/views/users/dashboard.ctp`'
- en: 'For example, the contents for `dashboard.ctp` could simply be:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`dashboard.ctp` 的内容可以简单地是：
- en: '[PRE32]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Edit your `app/controllers/app_controller.php` file and change the `components`
    property declaration to include the following setting for the `Auth` component:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `app/controllers/app_controller.php` 文件，并将 `components` 属性声明更改为包括以下设置，用于
    `Auth` 组件：
- en: '[PRE33]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'While still editing your `AppController` class, change the `isAuthorized` method
    and replace it entirely with the following:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑你的 `AppController` 类的同时，更改 `isAuthorized` 方法，并将其完全替换为以下内容：
- en: '[PRE34]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Copy the default CakePHP layout file named `default.ctp` from your `cake/libs/view/layouts`
    folder to your application's `app/views/layouts` folder. While editing this layout,
    place the following code in the `app/views/layouts/default.ctp` layout file, right
    where you want the link to the dashboard to appear.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认的 CakePHP 布局文件 `default.ctp` 从您的 `cake/libs/view/layouts` 文件夹复制到您的应用程序的 `app/views/layouts`
    文件夹。在编辑此布局时，将以下代码放置在 `app/views/layouts/default.ctp` 布局文件中，您希望链接到仪表板的位置。
- en: '[PRE35]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: CakePHP will recognize prefixes defined in the `Routing.prefixes` setting as
    part of the URL, when they are preceding a normal route. For example, if `admin`
    is a defined prefix, the route `/admin/articles/index` will translate to the `admin_index`
    action in `ArticlesController`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们位于正常路由之前时，CakePHP 会识别 `Routing.prefixes` 设置中定义的前缀作为 URL 的一部分。例如，如果 `admin`
    是一个已定义的前缀，则路由 `/admin/articles/index` 将转换为 `ArticlesController` 中的 `admin_index`
    操作。
- en: Since we are utilizing the controller authentication scheme in the `Auth` configuration,
    we know that every time a user is trying to access a non-public action, `AppController::isAuthorized()`
    is executed, and inside the method we set `true` if the user has access, or `false`
    otherwise.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在利用 `Auth` 配置中的控制器认证方案，我们知道每次用户尝试访问非公开操作时，都会执行 `AppController::isAuthorized()`，在方法内部，我们根据用户是否有权访问设置
    `true` 或 `false`。
- en: Knowing that, we can check to see if a prefix is being used when a controller
    action is about to be executed. If the current route being accessed includes a
    prefix, we can match that prefix against the user's role to make sure they have
    access to the requested resource.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这一点后，我们可以在控制器操作即将执行时检查是否使用了前缀。如果当前访问的路由包含前缀，我们可以将该前缀与用户的角色匹配，以确保他们有权访问请求的资源。
- en: 'We are able to link to a role-only resource just by prefixing it with the appropriate
    prefix in the route. For example, to link to the manager''s dashboard, the URL
    would be:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在路由中添加适当的前缀来链接仅对角色可用的资源。例如，要链接到管理员的仪表板，URL 将是：
- en: '[PRE36]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: See also
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关内容
- en: '*Setting up Access Control Layer based authentication*.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于访问控制层设置认证*。'
- en: Setting up Access Control Layer-based authentication
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于访问控制层设置认证
- en: The more roles an application has, the more complex its Access Control Layer
    becomes. Luckily, one of the authentication schemes provided by the `Auth` component
    allows us to easily define which actions are accessible by certain roles (known
    as groups), using command-line tools. In this recipe, you will learn how to set
    up ACL on your application.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序拥有的角色越多，其访问控制层就越复杂。幸运的是，`Auth` 组件提供的认证方案之一允许我们通过命令行工具轻松定义哪些操作可以被某些角色（称为组）访问。在本教程中，您将学习如何在您的应用程序上设置访问控制列表（ACL）。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We should have a table to hold the roles, named `groups`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个名为 `groups` 的表来存储角色。
- en: 'If you do not have one already, create it using the following statement:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有，请使用以下语句创建它：
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you do not have any records in your `groups` table, create some by running
    the following SQL statement:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 `groups` 表中没有记录，请运行以下 SQL 语句创建一些：
- en: '[PRE38]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We must also have a `users` table to hold the users, which should contain a
    field (named `group_id`) to contain a reference to the group a user belongs to.
    If you do not have such a table, create it using the following statement:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须有一个 `users` 表来存储用户，该表应包含一个字段（命名为 `group_id`），用于包含用户所属组的引用。如果您没有这样的表，请使用以下语句创建它：
- en: '[PRE39]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We also need to have the ARO / ACO tables initialized. Using your operating
    system console, switch to your application directory, and run:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要初始化 ARO / ACO 表。使用您的操作系统控制台，切换到您的应用程序目录，并运行：
- en: 'If you are on a GNU Linux / Mac / Unix system:'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是 GNU Linux / Mac / Unix 系统：
- en: '[PRE40]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If you are on Microsoft Windows:'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是 Microsoft Windows：
- en: '[PRE41]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How to do it...
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The following initial steps are very similar to what is shown in *Setting up
    a basic authentication system*. However, there are some differences between the
    two that are crucial, so make sure you go through these instructions carefully.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下初始步骤与 *设置基本认证系统* 中显示的步骤非常相似。然而，两者之间有一些关键的区别，所以请确保仔细阅读这些说明。
- en: 'Create a controller for the `User` model (in a file named `users_controller.php`
    placed inside your `app/controllers` folder), which should contain the following:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `User` 模型创建一个控制器（在 `app/controllers` 文件夹内名为 `users_controller.php` 的文件中），它应包含以下内容：
- en: '[PRE42]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a file named `login.ctp` in your `app/views/users` folder (create the
    folder if you do not have one already), with the following contents:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`app/views/users`文件夹中创建一个名为`login.ctp`的文件（如果您还没有创建该文件夹，请先创建），内容如下：
- en: '[PRE43]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a file named `app_controller.php` in your `app/` folder. Make sure it
    contains the following:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`app/`文件夹中创建一个名为`app_controller.php`的文件。确保它包含以下内容：
- en: '[PRE44]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Modify the `UsersController` class and add the following code before its `login()`
    method:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`UsersController`类，并在其`login()`方法之前添加以下代码：
- en: '[PRE45]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the view for the action in the folder `app/views/users` by creating a file
    named `add.ctp` with the following contents:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views/users`文件夹中添加动作视图，通过创建一个名为`add.ctp`的文件并包含以下内容：
- en: '[PRE46]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a file named `group.php` and place it in your `app/models` folder with
    the following contents:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`group.php`的文件，并将其放置在您的`app/models`文件夹中，内容如下：
- en: '[PRE47]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create a file named `user.php` and place it in your `app/models` folder with
    the following contents:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`user.php`的文件，并将其放置在您的`app/models`文件夹中，内容如下：
- en: '[PRE48]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Take note of the IDs for all the records in your `groups` table, as they are
    needed to link each group to an *ARO* record.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意您`groups`表中所有记录的ID，因为它们需要将每个组链接到一个*ARO*记录。
- en: Run the following commands in your console (change the references to 1, 2, 3
    to meet your own group IDs, if they are different).
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的控制台中运行以下命令（如果您的组ID不同，请将引用的1、2、3更改为您的组ID）。
- en: 'If you are on a GNU Linux / Mac / Unix system, the commands are:'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是GNU Linux / Mac / Unix系统，命令如下：
- en: '[PRE49]'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you are on Microsoft Windows, the commands are:'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是Microsoft Windows，命令如下：
- en: '[PRE50]'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the following code at the end of your `UsersController` class definition:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`UsersController`类定义的末尾添加以下代码：
- en: '[PRE51]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a view for each of these actions, and put some distinctive content on
    each one of them to reflect which view is being rendered. Therefore, you have
    to create three files:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这些动作中的每一个创建一个视图，并在每个视图中放置一些独特的内容，以反映正在渲染的视图。因此，您必须创建三个文件：
- en: '`app/views/users/user.ctp`'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/views/users/user.ctp`'
- en: '`app/views/users/manager.ctp`'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/views/users/manager.ctp`'
- en: '`app/views/users/administrator.ctp`.'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/views/users/administrator.ctp`。'
- en: 'For example the contents for `user.ctp` could simply be:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`user.ctp`的内容可以简单地是：
- en: '[PRE52]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We have to tell ACL about these restricted actions. Run the following commands
    in your console.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须告诉ACL关于这些受限动作的信息。请在您的控制台中运行以下命令。
- en: 'If you are on a GNU Linux / Mac / Unix system, the commands are:'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是GNU Linux / Mac / Unix系统，命令如下：
- en: '[PRE53]'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If you are on Microsoft Windows, the commands are:'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是Microsoft Windows，命令如下：
- en: '[PRE54]'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Finally, we have to grant permissions by linking each ARO (groups) to each ACO
    (controller's actions). Run the following commands in your console.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须通过将每个ARO（组）链接到每个ACO（控制器动作）来授予权限。请在您的控制台中运行以下命令。
- en: 'If you are on a GNU Linux / Mac / Unix system, the commands are:'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是GNU Linux / Mac / Unix系统，命令如下：
- en: '[PRE55]'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'If you are on Microsoft Windows, the commands are:'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是Microsoft Windows，命令如下：
- en: '[PRE56]'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: We now have a fully working ACL based authentication system. We can add new
    users by browsing to `http://localhost/users/add`, logging in with http://localhost/users/login,
    and finally logging out with http://localhost/users/logout.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经有一个完全工作的基于ACL的认证系统。我们可以通过浏览到`http://localhost/users/add`，使用http://localhost/users/login登录，并最终使用http://localhost/users/logout登出来添加新用户。
- en: Users should only have access to `http://localhost/users/user`, managers to
    `http://localhost/users/manager`, and administrators should be able to access
    all those actions, including `http://localhost/users/administrator`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应只能访问`http://localhost/users/user`，经理可以访问`http://localhost/users/manager`，而管理员应该能够访问所有这些动作，包括`http://localhost/users/administrator`。
- en: How it works...
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When setting the `authorize` configuration option of the `Auth` component to
    `actions`, and after adding `Acl` to the list of controller-wide components, CakePHP
    will check to see if the current action being accessed is a public action. If
    this is not the case, it will check for a logged-in user with a matching ACO record.
    If there is no such record, it will deny access.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 当将`Auth`组件的`authorize`配置选项设置为`actions`，并在控制器组件列表中添加`Acl`之后，CakePHP将检查当前访问的动作是否是公开动作。如果不是这种情况，它将检查是否有匹配ACO记录的已登录用户。如果没有这样的记录，它将拒绝访问。
- en: Once there is a matching ACO for the controller action, it will use the `bindNode`
    method in the `User` model to see how a user record is matched to an ARO. The
    method implementation we added specifies that a user record should be looked up
    in the `aros` table by means of the group that the user belongs to.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为控制器操作找到了匹配的ACO，它将使用`User`模型中的`bindNode`方法来查看用户记录是如何与ARO匹配的。我们添加的方法实现指定用户记录应该通过用户所属的组在`aros`表中查找。
- en: After having both the matching ACO and ARO, it lastly checks to see whether
    there is a valid permission set up (in the `aros_acos` table) for the given ARO
    and ACO records. If it finds one, it allows access, otherwise it will reject authorization.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在拥有匹配的ACO和ARO之后，它最后会检查是否为给定的ARO和ACO记录设置了有效的权限集（在`aros_acos`表中）。如果找到，则允许访问，否则将拒绝授权。
- en: It is of vital importance that each record in the groups table has a matching
    ARO record. We set that association by issuing `aro create` commands to link each
    group ID to an ARO record of the form `Group.ID`, where ID is the actual ID.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在组表中的每个记录都必须有一个匹配的ARO记录，这是至关重要的。我们通过发出`aro create`命令来设置这种关联，将每个组ID链接到形式为`Group.ID`的ARO记录，其中ID是实际的ID。
- en: Similarly, all controller actions that are not within the defined public actions
    should have a matching ACO record. Just as with AROs, we create the association
    between controller's actions and ACOs issuing `aco create` commands, setting the
    ACO name to be the action name, and making them child of an ACO which name is
    the controller name.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，所有不在定义的公共操作中的控制器操作都应该有一个匹配的ACO记录。就像ARO一样，我们通过发出`aco create`命令来创建控制器操作和ACO之间的关联，将ACO名称设置为操作名称，并使它们成为名称为控制器名称的ACO的子项。
- en: Finally, to grant the permission of an ARO (group) to an ACO (controller's actions),
    we issue `acl grant` commands, specifying as the first argument the ARO (Group.ID)
    and the second argument either a whole controller (such as `controllers/Users`),
    or a specific controller action (such as `controllers/Users/logout`). The last
    argument to the grant command (all) simply gives a further control of the type
    of access, and makes more sense when using ACL to control access to custom objects,
    or when using the `crud` authentication scheme.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了授予ARO（组）对ACO（控制器操作）的权限，我们发出`acl grant`命令，将ARO（Group.ID）指定为第一个参数，将第二个参数指定为整个控制器（例如`controllers/Users`）或特定的控制器操作（例如`controllers/Users/logout`）。grant命令的最后一个参数（all）简单地提供了对访问类型的进一步控制，并在使用ACL控制对自定义对象的访问或使用`crud`认证方案时更有意义。
- en: There's more...
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While developing an application, the task of matching each controller action
    to an ACO may be somewhat troublesome. Fortunately, several people in the CakePHP
    community felt the need for an easier solution. One of the solutions that I'd
    recommend is adopting `acl_extras`, a plugin developed by Mark Story, the lead
    developer of the CakePHP 1.3 release. By using this plugin, you will be able to
    continuously synchronize your controllers with the `acos` table. Find more about
    it, including its installation instructions, at [http://github.com/markstory/acl_extras](http://github.com/markstory/acl_extras).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序时，将每个控制器操作与ACO匹配的任务可能有些麻烦。幸运的是，CakePHP社区中的几个人感觉到了对更简单解决方案的需求。我推荐的一个解决方案是采用由CakePHP
    1.3版本的首席开发者Mark Story开发的插件`acl_extras`。通过使用此插件，您将能够持续同步您的控制器与`acos`表。更多关于它的信息，包括其安装说明，可以在[http://github.com/markstory/acl_extras](http://github.com/markstory/acl_extras)找到。
- en: See also
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Using prefixes for role-based access control*.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用前缀进行基于角色的访问控制*。'
- en: Integrating with OpenID
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成OpenID
- en: '**OpenID** ([http://openid.net](http://openid.net)) is a great way to allow
    users to log in without having to have an actual username in your application.
    It is a solution that is widely adopted, and has proven itself on many popular
    sites (such as Google, Yahoo, MySpace, and AOL).'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenID** ([http://openid.net](http://openid.net)) 是一种允许用户无需在您的应用程序中实际拥有用户名即可登录的绝佳方式。这是一个被广泛采用且在许多知名网站上（如Google、Yahoo、MySpace和AOL）证明了自己的解决方案。'
- en: This recipe shows how to add support for OpenID logins in a transparent way,
    while still working with a valid `Auth` implementation.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何以透明的方式添加对OpenID登录的支持，同时仍然与有效的`Auth`实现一起工作。
- en: Getting ready
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We should have a working authentication system, so follow the recipe, *Setting
    up a basic authentication system*.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个工作的认证系统，所以按照配方，*设置基本认证系统*。
- en: We will also need the PHP OpenID Library. Download the latest release from [https://github.com/openid/php-openid/downloads](http://https://github.com/openid/php-openid/downloads)
    and extract the folder named `Auth` from the downloaded file into your `app/vendors`
    folder. You should now have a directory named `Auth` inside your `vendors` folder.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要 PHP OpenID 库。从 [https://github.com/openid/php-openid/downloads](http://https://github.com/openid/php-openid/downloads)
    下载最新版本，并将下载文件中的 `Auth` 文件夹提取到你的 `app/vendors` 文件夹中。你现在应该在 `vendors` 文件夹内有一个名为
    `Auth` 的目录。
- en: Finally, we need to download the OpenID plugin for CakePHP. Go to [http://github.com/mariano/openid/downloads](http://github.com/mariano/openid/downloads)
    and download the latest release. Uncompress the downloaded file into your `app/plugins`
    folder. You should now have a directory named `openid` inside `app/plugins`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要下载 CakePHP 的 OpenID 插件。访问 [http://github.com/mariano/openid/downloads](http://github.com/mariano/openid/downloads)
    并下载最新版本。将下载的文件解压缩到你的 `app/plugins` 文件夹中。你现在应该在 `app/plugins` 文件夹内有一个名为 `openid`
    的目录。
- en: How to do it...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit your `AppController` class and change the reference for the `Auth` component
    from `Auth` to `Openid.OpenAuth`. The `components` property should now look like
    this:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `AppController` 类，将 `Auth` 组件的引用从 `Auth` 更改为 `Openid.OpenAuth`。`components`
    属性现在应该看起来像这样：
- en: '[PRE57]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Next, edit the login view (in `app/views/users/login.ctp`) and add a field
    to allow the user to specify their OpenID URL. The view should now look like this:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，编辑登录视图（在 `app/views/users/login.ctp` 中）并添加一个字段，允许用户指定他们的 OpenID URL。视图现在应该看起来像这样：
- en: '[PRE58]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You should now be able to log in using either a valid username and password
    combination, or an OpenID URL, as shown in the following screenshot:'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你应该能够使用有效的用户名和密码组合，或者 OpenID URL 登录，如下面的截图所示：
- en: '![How to do it...](img/1926_01_04.jpg)'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_01_04.jpg)'
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As the `OpenAuth` component (a part of the `openid` plugin) extends the CakePHP
    built-in `Auth` component, it works in a similar fashion. When the component cannot
    seem to find a way to log in the user with a username and password, it will check
    whether the OpenID URL is specified.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `OpenAuth` 组件（`openid` 插件的一部分）扩展了 CakePHP 内置的 `Auth` 组件，它以类似的方式工作。当组件似乎找不到使用用户名和密码登录用户的方法时，它将检查是否指定了
    OpenID URL。
- en: If this is the case, it will attempt to authenticate the URL against the OpenID
    server. When it does, the user is taken to the OpenID server so the application
    can be granted permission to access the OpenID credentials. When permission is
    given, the user is taken back to the application, at a point on which the `OpenAuth`
    component is able to mark the user as logged in, and resume the normal application
    work flow.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，它将尝试将 URL 与 OpenID 服务器进行认证。当它这样做时，用户将被带到 OpenID 服务器，以便应用程序可以授予访问 OpenID
    凭证的权限。当权限被授予时，用户将被带回到应用程序，此时 `OpenAuth` 组件能够标记用户为已登录，并继续正常的应用程序工作流程。
- en: There's more...
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `openid` plugin has further options to customize its behavior; including
    the ability to specify which user information should be given back. Check the
    documentation in [http://github.com/mariano/openid](http://github.com/mariano/openid).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`openid` 插件有进一步选项来自定义其行为；包括指定应返回哪些用户信息的能力。请查看 [http://github.com/mariano/openid](http://github.com/mariano/openid)
    中的文档。'
- en: Being a standard `Auth` implementation, this integration can be combined with
    any of the other recipes we have seen in this chapter, which allows for a flexible
    open authentication solution. If you do, make sure to note that the user given
    back by the `OpenAuth` component does not contain a valid user record, so you
    should create one upon log in.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 作为标准的 `Auth` 实现，这种集成可以与本章中我们看到的其他任何配方结合使用，从而允许灵活的开放认证解决方案。如果你这样做，请确保注意 `OpenAuth`
    组件返回的用户不包含有效的用户记录，因此你应该在登录时创建一个。
- en: Even when you are using the `OpenAuth` component which clearly has a different
    name than `Auth`, you can still use `$this->Auth` to set properties or call, for
    example, the `allow` method. This is possible because the component creates an
    alias.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你在使用名为 `OpenAuth` 的组件，其名称与 `Auth` 明显不同，你仍然可以使用 `$this->Auth` 来设置属性或调用，例如，`allow`
    方法。这是可能的，因为该组件创建了一个别名。
- en: See also
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Getting the current user''s information*.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取当前用户信息*。'
