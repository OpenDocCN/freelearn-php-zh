- en: Chapter 3. Working with Products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the catalog defaults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with attribute sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with product types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Facebook like button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a product to the cart through querystring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding a YouTube video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the URL of a product page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The choice of products and how they are displayed on the frontend are very important
    to make a web shop with good usability. Making a visitor buy something is the
    main target of every shop owner.
  prefs: []
  type: TYPE_NORMAL
- en: We have to set up the products in a way such that a visitor can quickly find
    what they are looking for. If this is done and the shop looks reliable, a visitor
    is more likely to buy something.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will explain all the possibilities of what you can do with a set
    of products and how to add extra things such as a video or a `like` button.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to make your shop more user-friendly without a lot
    of development.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the catalog defaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to configure the catalog settings to the preferred values.
    We will cover all the configuration values that are possible with a standard installation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the frontend in a tab of your browser. In the second tab, open the backend
    and log in.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next steps, we will configure the settings of the catalog (category
    and product) pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Configuration** section in **System**, and click on the **Catalog**
    tab. You will see the following screen:![How to do it...](img/3329OS_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the frontend section and set the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**List mode**: **grid (Show products by default in a grid or list)**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Products per page on Grid allowed values**: **12,24,36**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Products per page on Grid default value**: **24**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: While changing the allowed and default value for a grid page, make sure the
    numbers are divisible by the number of products in a row. Otherwise, the number
    of products on a page will not fit in the grid.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Products per page on List allowed values**: **10,20,30,40**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Products per page on List default value**: **10**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow all products per page**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When you have a large number of products, it is not recommended to set the **Allow
    all products per page** option to **Yes**. When you have 2,000 products, and you
    want to show all the products on a single page, you will generate an enormous
    HTML output that can cause memory issues.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Product listing Sort by**: **price**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Flat Catalog Category**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Flat Catalog Product**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The purpose of the preceding two settings (**Use Flat Catalog Category** and
    Use Flat Catalog Product) is explained in the *Working with EAV tables* recipe
    in [Chapter 5](ch05.html "Chapter 5. Database Concepts"), *Database Concepts*.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Allow Dynamic Media URLs in Products and Categories**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set the following values under the **Sitemap** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Use tree like category sitemap**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum lines per page**: **30**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This setting will change the look of the sitemap pages. You can find this at
    `catalog/seo_sitemap/category`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enable the product reviews for guests. This allows everyone to write a review
    about a product. When this is enabled, a review form will appear on the product
    review page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Product Alert Settings** section to configure product alert e-mails
    that will be sent when the price or stock changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will configure a stock alert with the following settings:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Allow alert when product price changes**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow alert when product stock changes**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous configurations will send stock alert e-mails (a stock alert is
    triggered when a product becomes available in stock) to the subscribed e-mail
    addresses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can set the **Product Alert Run Settings** values in the next section. We
    will configure a daily job at 0400 hours to send the alert e-mails:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Frequency**: **Daily**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start time**: **04:00:00**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave the product image placeholders as they are. Here, we can set a default
    image that will be shown when a product has no image or the image is not found.
    The best way is to set the placeholder image(s) in the theme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Recently Viewed/Compared Products** tab, set the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Show for current**: **Website**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This will show the recent products you viewed over all stores and store views
    in the website.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Default recently viewed count**: **5**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default recently compared count**: **5**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Price** tab, set **Catalog Price Scope** as **Global**. For this tutorial,
    we don't need different prices for each store view. When **Price Scope** is set
    to **Global**, we can only configure one price for a product in different store
    views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Layered Navigation** section, we will modify some settings to customize
    the left navigation for the category pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Display product count**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Price ranges**: **Equalize price ranges**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By setting this, the price steps will always have the same increment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set the top navigation **Category** to **3**. This will mean that the depth
    of the navigation is three levels at the maximum.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Skip the **Search Engine Optimization** option. We will look into it in the
    *Changing the URL of a product page* recipe
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the **Catalog / Search** section as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Minimal query length**: **3**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum query length**: **128**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum query words count**: **10**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search type**: **Like**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set this to full text that has better results, but the performance is
    not so good. The previous settings configure the search behavior of Magento.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Don't forget to save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All these settings are saved in the configuration table of Magento. The frontend
    files of the catalog pages will pick up these settings and render the output based
    on these settings.
  prefs: []
  type: TYPE_NORMAL
- en: When you add extra functionality to the category page, you can easily extend
    the configuration with extra parameters. More information about extending the
    configurations is explained in the *Extending the system configuration* recipe
    of [Chapter 7](ch07.html "Chapter 7. Magento Backend"), *Magento Backend*.
  prefs: []
  type: TYPE_NORMAL
- en: Working with attribute sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento has a flexible system to work with products. When you sell, for example,
    a board game and a computer, the specifications of each product are different.
    Suppose I want to configure an age for the board game and a screen resolution
    for the computer. In such cases, these things are covered with **attributes**
    and **attribute sets**.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a product, you have to first select an attribute set (with specific
    attributes) before entering other data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the backend and navigate to **Catalog** | **Attributes** | **Manage Attributes**
    and **Catalog** | **Attributes** | **Manage Attribute Sets**.
  prefs: []
  type: TYPE_NORMAL
- en: We will create some extra attributes and an attribute set on these pages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next steps, we will create extra product attributes that we can use
    with an attribute set:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new attribute on the **Manage Attributes** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you click on **New Attribute**, fill in the form as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Attribute Code**: **available_from** (the code of the attribute used in the
    database and functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scope**: **Store View** (this setting adds the ability to specify a separate
    value for each store view)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Catalog Input Type for Store Owner**: **Date** (this is the type of the attribute)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Value**: empty'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unique Value**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Values Required**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply To**: **All Product Types**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use in Quick Search**: **No** (this option searches through the attribute
    values while performing a quick search)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use in Advanced Search**: **No** (this option makes the attribute available
    to search on in the **Advanced search** option)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comparable on Front end**: **No** (this option shows the attribute in the
    product comparing tool)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use for Promo Rule Conditions**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Position**: empty'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visible on Product View Page on Front-end**: **Yes** (this option shows the
    attribute value on product pages)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Used in Product Listing**: **No** (this option makes the attribute value
    available on category pages)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Used for sorting in Product Listing**: **No** (this option makes the attribute
    available to sort on category pages)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Manage Label / Options** field, fill in the labels for the frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save Attribute** and the attribute is saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new attribute set by navigating to **Catalog** | **Attributes** | **Manage
    Attribute Sets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form as follows and click on **Save Attribute Set**:![How to do
    it...](img/3329OS_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attribute set overview opens. On this page, you can drag-and-drop the attributes
    in the appropriate groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a group named `Game specific data` and drag the **available_from**, **memory**,
    and **processor** attributes to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The overview will look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Save the attribute set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new product in **Manage Products** from **Catalog**, and enter the
    following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Attribute Set**: **Games**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product Type**: **Simple Product**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see that the special game attributes are now available in the **Game
    specific data** tab:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attributes and attribute sets are used when you work with multiple families
    of products. In the sample data of our shop, there are more attribute sets available
    for cameras, computers, shirts, shoes, and more.
  prefs: []
  type: TYPE_NORMAL
- en: With attribute sets, you can group attributes of a family with each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'While creating a new attribute, you will have to specify the type of the attribute.
    The following types are available with different inputs and outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text field**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text area** (a text field with multiple lines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yes** / **No**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple Select**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dropdown**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Price**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Media Image**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed Product Tax** (this is used for extra taxes such as author taxes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When you will use an attribute as a filter in the left navigation on the category
    pages, this attribute must have the type **Dropdown**, **Multiple Select**, or
    **Price**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Working with product types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Magento, there are different types of products you can create. The standard
    product is a simple product. This type of product is used to sell basic products.
    However, there are other product types where you can choose options or a size.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a configurable product. For example, you want to buy a pair of
    shoes where you can choose their size and color. Open your backend and navigate
    to **Catalog** | **Manage Products**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will create a product (shoes) where we can specify
    their sizes on the product detail page:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the following configuration when you hit the **Add Product** button:![How
    to do it...](img/3329OS_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we click on **Next**, we have to choose the attributes to configure. This
    product has to be configurable on the **Shoe size** attribute. Select the checkbox
    and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the required attributes, and save the product by clicking on **Save
    And Continue Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To make a product visible in the store, check the **Websites**, **Status**,
    **Visibility**, **Category**, and **Inventory** attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the **Associated Products** tab where we will create the child products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By adding the following configuration to the **Quick simple product creation**
    section, we will add five child products:![How to do it...](img/3329OS_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Quick Create** button and repeat this four times with a different
    shoe size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When everything goes well, the **Super product attributes configuration** section
    will look as follows:![How to do it...](img/3329OS_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save And Continue** button and the product is saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the frontend and search for the product we just created. When we
    are on the product detail page, you will see a dropdown where you can choose the
    options we have just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A configurable product is a product in which you will have to configure the
    options before adding it to the cart. The customer will see the configurable product
    in the cart, but in the background a simple product is also added to the cart.
  prefs: []
  type: TYPE_NORMAL
- en: That's the reason we have to create simple products to use as options for the
    configurable product. The configurable product is the parent that is used to show
    the child products in the frontend. When a product is sold, the SKU of the selected
    child product will be used to process the order. That's the reason the stock is
    configured on the child products.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Magento, you can create six types of products. The following section gives
    a short description of what is possible with the different product types.
  prefs: []
  type: TYPE_NORMAL
- en: Simple product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A simple product is just a product that you can sell in your web shop. Every
    product in Magento has a unique ID (**SKU**) that mostly has the same value as
    the article code of the suppliers.
  prefs: []
  type: TYPE_NORMAL
- en: Configurable product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we created a configurable product. This product has child products
    that you can configure on the product detail page (for example, to configure the
    size). The child products are simple products.
  prefs: []
  type: TYPE_NORMAL
- en: Bundled product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bundled product is like a configurable product, but with this one you can
    specify more (optional) options. For a good example of a bundled product, you
    can go to **Electronics** | **Computers** | **Build Your Own**. The products in
    this category are bundled products.
  prefs: []
  type: TYPE_NORMAL
- en: Grouped product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A grouped product is a product that represents a set where you can specify the
    number of child products. A good example of this can be found in **Furniture**
    | **Magento Red Furniture Set**.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A virtual product is like a simple product but it is not physical. It has no
    inventory and can't be shipped. In the sample data, the warranties on the bundled
    products of the sample store are good examples of virtual products.
  prefs: []
  type: TYPE_NORMAL
- en: Downloadable product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A downloadable product is a product that is not physical. When a customer buys
    a product like this, they will receive a download link where they can download
    their product such as a PDF, ZIP, MP3, or any other type of file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Facebook like button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days, it is trendy to show a Facebook `like` button on your website so
    that visitors can share the page with their friends.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will add the `like` button on every product page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your browser and go to a product page. In your IDE, open your configured
    theme folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next steps, we will generate and add the code of a Facebook `like` button
    to the product detail pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `catalog/product/view.phtml` template from your theme. If it is not
    in the theme, copy it from the `app/design/frontend/base/default` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [http://developers.facebook.com/docs/reference/plugins/like](http://developers.facebook.com/docs/reference/plugins/like)
    from where you can use the **Configurator** page to customize the `like` button
    for your page, as shown in the following screenshot:![How to do it...](img/3329OS_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the code in your `view.phtml` file where it will be more readable; for
    example, at the end of the file as a child of the `div` tag with the class `product-collateral`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload a product page and the `like` button will show up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To change the URL of the `like` button, change the `data-href` attribute of
    the HTML5 code. The following code shows you how to do this to use the product
    page URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While using the HTML5 code, don't forget to include the JavaScript SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Facebook `like` button is one of the social plugins you can embed in your
    website. On Facebook, every URL is an object you can like or comment on. You can
    find more information about the available social plugins from the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.facebook.com/docs/plugins/](https://developers.facebook.com/docs/plugins/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we covered the addition of the Facebook `like` button, but
    when you want to add buttons for other social media sites such as Twitter or Google
    Plus, you can visit the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/+/web/+1button/](https://developers.google.com/+/web/+1button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://about.twitter.com/resources/buttons](https://about.twitter.com/resources/buttons)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you like a page of your website, Facebook will generate a wall post based
    on the HTML markup of the page. When you like a page, Facebook will post an image,
    title, and description of that item on your wall.
  prefs: []
  type: TYPE_NORMAL
- en: With **Open Graph** (**og**) `meta` tags, you can customize the content of these
    things. An overview of the available og tags and how to use them can be found
    at [https://developers.facebook.com/docs/opengraph/using-objects/](https://developers.facebook.com/docs/opengraph/using-objects/).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a product to the cart through querystring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some use cases, you will link a visitor to your site when they directly add
    a product to the cart; for example, when you have a campaign with a **buy now**
    button on an external website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your browser with your shop and navigate to **Catalog** | **Manage Products**
    in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next steps, we will create a URL where a product will be added to the
    cart:'
  prefs: []
  type: TYPE_NORMAL
- en: Find a product in your frontend you want to add to the cart. For example, navigate
    to **Furniture** | **Living Room** | **Ottoman**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find this product in the backend and keep the ID in mind.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add a product, we have to call the `checkout/cart/add` URL with the product
    ID as the `GET` parameter. So, the final URL will be `http://magento-dev.local/checkout/cart/add?product=51`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While calling this URL, you will be redirected to the cart page with one item
    of this product in the cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you add the `qty` parameter to the query, you can add more than one item
    of the same product to the cart. Call the `http://magento-dev.local/checkout/cart/add?product=51&qty=3`
    URL, and you will see that three products are added to the cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not possible to add two or more different products to the cart with the
    same query. If you want to do this, you can create a grouped product.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we monitor the `add to cart` action in our shop, we will see that there is
    a `GET` or `POST` request to the `checkout/cart/add` action in the frontend. This
    action will forward the request to the cart page if it is valid.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a simple product is easy, but if we want to add a grouped, configurable,
    or bundled product, the querystring is a bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'To know which parameters you have to send to the `add` action, we have to debug
    this with Firebug. In the **Net Panel**, as shown in the following screenshot,
    you can debug the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3329OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the `POST` parameters of a configurable product.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding a YouTube video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a product description, we can add HTML tags so that we can use the `<object>`
    tag to embed a YouTube video in the description of a product.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to [http://www.youtube.com](http://www.youtube.com), and choose a video that
    you want to add to the description of the product.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next steps show you how to embed a YouTube video on a product detail page:'
  prefs: []
  type: TYPE_NORMAL
- en: On the YouTube video page, click on the **Embed** button. When you click on
    this button, the following screen shows up:![How to do it...](img/3329OS_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the HTML code and paste it in the description of a product.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the product.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the product in the frontend. You will see the video on the product page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ability to use HTML tags in product descriptions gives a lot of flexibility
    for this field. It is possible to use a **WYSIWYG** editor for the content because
    this allows us to use widgets such as a YouTube video or other third-party widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the URL of a product page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are on a product page, the URL of every product always looks clean.
    The name in the URL makes it very SEO friendly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will explore the possibilities with **URL rewrites** in Magento
    and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the **Manage Products** page from **Catalog** in the backend. Open a product
    and have a look at the **URL key** attribute. This recipe is based on the **HTC
    Touch Diamond** product.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next steps, the way you can change the URL of a product page is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the appropriate product in the frontend and look for the URL. In this case,
    this will be `/htc-touch-diamond.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the backend, change the **URL key** attribute to **buy-now-htc-touch-diamond**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the product in the frontend. The URL will change to the new one we have
    entered at the backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When you select the **Create Permanent Redirect for old URL** checkbox, Magento
    will create a permanent 301 redirect response for the old URL of the product.
    The checkbox is located in the product's **Edit** page under the **URL key** attribute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Empty the **URL key** attribute at the backend and save the product again. You
    will see that Magento autogenerates the **URL key** value based on the name of
    the product.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the backend, go to **System** | **Configuration** | **Catalog** | **Search
    Engine Optimizations**. Empty the **Product URL Suffix** field and save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the cache by navigating to **System** | **Cache Management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reindex the **Product URL Rewrites** index by navigating to **System** | **Index
    Management**. In the reindexing process, the URLs will be generated in the `core_url_rewrite`
    database table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the product in the frontend, and you will see that the `.html` suffix
    is gone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Magento, there is a URL rewrite system that maps an SEO-friendly URL to the
    system URL for that request. You can see all the URL rewrites in the backend.
    Navigate to **Catalog** | **URL Rewrite Management**, and you will see the complete
    list of URLs that Magento will map on a controller action. For example, when we
    search for `htc-touch-diamond`, we will see a list with all the URLs for this
    key.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we see is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Permanent 301 redirect responses (rows where the **Options** column has the
    value **RP**. RP stands for Redirect Permanently.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The product URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The category product URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All URLs are generated again for each store view. When a product is enabled
    in multiple stores, it is normal that a product has more than one URLs.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the URL rewrite page, it is also possible to add custom URL rewrites; for
    example, a URL rewrite for the contacts page.
  prefs: []
  type: TYPE_NORMAL
- en: 'While adding the configuration as shown in the following screenshot, you will
    create a rewrite for `/sitemap.html` for the English store view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3329OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Store** dropdown, you can configure the store for the URL rewrite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **ID Path** field, the ID of the URL rewrite is set. You have to enter
    a unique name for this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value in the **Request Path** field is the path you want to rewrite. In
    this case, we want to rewrite something on the `/sitemap.html` path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value in the **Target Path** field is the path where the request will end.
    In this case, it is the **contacts** page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the value in the **Redirect** dropdown is set to **Yes**, you can choose
    for a 301 redirect to the target. When it is set to **No**, the target page will
    be rendered on the request path (so the URL of the page doesn't change).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
