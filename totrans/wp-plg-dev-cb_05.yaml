- en: Customizing Post and Page Editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to customize the core post and page editors
    through the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Capturing and displaying information using custom meta boxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom post data via filter functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding the Custom Field section in the post editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the post editor to allow users to upload files directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few chapters, you learned how to create custom plugin configuration
    panels and how to set up custom post types. With this knowledge in hand, we will
    now see how to customize the post and page editors using meta boxes.
  prefs: []
  type: TYPE_NORMAL
- en: Meta boxes are a very useful tool in the creation of WordPress plugins. They
    were first used to organize large administration panels into manageable sections
    in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*, and then continued to be a key element in the creation
    of tailored interfaces to edit custom post types in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explores how meta boxes can be used to augment the default post
    and page editors' capabilities. While WordPress posts and pages already offer
    a lot of functionalities in a default installation, custom data entry fields go
    a long way in crafting a user experience that is much smoother than using the
    custom fields editor. These extra fields can be used to store anything. For example,
    they could be used to specify alternative language links for blog entries or to
    assign a pop-up dialog to specific articles on a site.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing and displaying information using custom meta boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The WordPress post and page editors are organized in a series of collapsible
    sections with headers called meta boxes. While WordPress is mainly responsible
    for populating these containers with all of the appropriate elements, plugin developers
    can insert their own sections by registering user meta boxes.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this capability, this recipe shows how to add a custom meta box
    that will be used to display and capture information about the name and web address
    of the source materials used when writing a new post or page entry.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch5-post-source-link`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory and create a text file called `ch5-post-source-link.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 5 - Post Source Link`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be executed
    when WordPress is preparing a list of meta boxes for all the administration areas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to provide an implementation for the `ch5_psl_register_meta_box`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert this code to provide an implementation for the `ch5_psl_source_meta_box`
    function, responsible for rendering the meta box contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following block of code to register a function that will be called
    when any type of post is saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following code section to provide an implementation for the `ch5_psl_save_source_data`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 5 - Post Source
    Link` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Posts section of the administration, click on one of the entries
    to open the post editor, and see the new Post/Page Source meta box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7c004c5-a5d7-49c0-96aa-417c4fc6f96e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time an administrator or content manager visits the platform's backend,
    WordPress creates a number of meta boxes for all of its internal editors (posts,
    pages, links, and so on) using the `add_meta_box` function that we have seen in
    the previous two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the same `add_meta_box` function twice to associate
    a new box to the page and post editors, with both calls registering the same callback
    function, since we want the same functionality in both places. As WordPress stores
    posts and pages in the same database table, it will automatically make sure that
    all the entries have unique IDs between both types of entries.
  prefs: []
  type: TYPE_NORMAL
- en: The other function that we have seen before is `get_post_meta`, which is used
    to retrieve custom metadata associated with post entries.
  prefs: []
  type: TYPE_NORMAL
- en: The content of the meta box itself is displayed using standard HTML. As this
    box will be part of a larger editor, there is no need to worry about declaring
    a form in this box.
  prefs: []
  type: TYPE_NORMAL
- en: Once the new dialog section is created, the next task is to put code in place
    to store data from the additional fields upon submission through the use of the
    `save_post` action. Functions associated with this hook are called when posts
    of any type are saved. When executed, the associated function receives two parameters
    from WordPress that contain the ID of the post being saved and a copy of all the
    data that has been processed to be saved so far. The callback also has access
    to all the server post data received from the user, and uses the `sanitize_text_field`
    and `esc_url` functions to make sure that no malicious content was received.
  prefs: []
  type: TYPE_NORMAL
- en: As indicated in the previous chapter, it is important to set the fourth parameter
    of the `add_action` call--that is, `accepted_args`--for actions and filters that
    receive more than one argument. If it is not specified, these additional arguments
    will not be available to the receiving hook function.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the assumption that the meta box was only added to the post and
    page editors, the code contained in the `ch5_psl_save_source_data` function first
    checks to see whether the post type is set as a post or page. If it is one of
    these two types, it moves on to check for the presence of post data for the source
    name and address fields. If found, `update_post_meta` is called once for each
    field to store the new information in the site's database associated with the
    posts that it belongs to. Making a call to the `update_post_meta` function actually
    updates the post custom field data if it exists or creates it in the case of new
    post or page entries.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While this recipe specifically adds a new section to the post and page editors,
    it may be desirable to make the new fields available to all post types, including
    custom ones.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new meta box to all post types (including custom ones)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe made two function calls to register meta boxes with the post and
    page editors. This concept does not expand well to register a custom section with
    all the post types, since custom types created by other plugins are not known.
    Thankfully, there is an easy way to get an array of all the post types that can
    be used to associate the new meta box with all the post editors, using a quick
    `foreach` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how the `ch5_psl_register_meta_box` function can be
    re-written to associate the new box with all the post types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Displaying custom post data using filter functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have captured additional data in the post editor, the next logical step
    will be to add code to display it when visitors view posts and pages. In the case
    of our source link data, the most logical place to show this link is after each
    post's content, which can easily be accomplished by assigning a function to the
    filter `the_content`.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to create a filter function to display the source data
    associated with a post or page item as a clean link.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Capturing and displaying information using
    custom meta boxes* recipe to have a starting point for this recipe and the resulting
    plugin should still be active in your development site. Alternatively, you can
    get the resulting code (`Chapter 5/ch5-post-source-link/ch5-post-source-link-v1.php`)
    from the code bundle you downloaded from the Packt Publishing website ([https://www.packtpub.com/support](https://www.packtpub.com/support))
    and rename the file as `ch5-post-source-link.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch5-post-source-link` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch5-post-source-link.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a filter function to be called when
    the post and page content is prepared for display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch5_psl_display_source_link`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add source data to one of your site's posts and view it to see the new Source
    link displayed on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbbae67f-3b45-4c08-9f42-562860d41056.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similarly to what was done in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*, in the *Adding text after each item's content using
    plugin filters* recipe, this recipe registers a callback with the `the_content`
    filter hook, which allows us to add an additional link after each post or page
    where the source name and source address fields have been filled in. We use the
    `get_post_type` function in our callback to first check whether the item being
    displayed is in one of these two categories. Then, we use `get_post_meta` to retrieve
    the information and display the source link if both fields contain information.
  prefs: []
  type: TYPE_NORMAL
- en: We also use the `esc_url` and `esc_html` functions as a precaution to be sure
    that the data stored in these two post meta fields is clean.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Capturing and displaying information using custom meta boxes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding the Custom Field section in the post editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After having full control over which meta boxes are shown when creating custom
    post type editor controls and putting together plugin configuration pages, things
    are a little different when it comes to altering the basic post and page editors.
    More specifically, instead of choosing which meta boxes to display, the editor
    sections created by WordPress need to be removed to tailor the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe shows how to remove the Custom Fields meta boxes from the post
    and page editors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16a1a8cb-233f-460d-bfc4-242f7ce1d003.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch5-hide-custom-fields`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch5-hide-custom-fields.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 5 - Hide Custom Fields`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be executed
    when WordPress is preparing a list of meta boxes for all the administration areas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch5_hcf_remove_custom_fields_metabox`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 5 - Hide Custom
    Fields` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Posts section of the administration and click on one of the entries
    to open the post editor. You will see that the Custom Fields section is no longer
    visible in the editor and does not show up in the Screen Options configuration
    tab either:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c466d605-2903-4a09-a783-3cef9e9960c4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This short recipe contains only a few lines of code which register a function
    to be called when WordPress is preparing meta boxes for all the administration
    sections, followed by the implementation of this function. The function itself
    makes two calls to the `remove_meta_box` function to remove the custom fields
    section from the post and page editors. This function requires three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first argument is the meta box identifier that was used when it was first
    created. While you may not know where the creation code for a given meta box is
    located within the WordPress source code, a quick look at the box's `div id` in
    the page source from a browser reveals its name. In this case, the `id` is `postcustom`.
    The other two arguments indicate the name of the editor from which the meta box
    is to be removed and the context of the meta box (`normal`, `advanced`, or `side`).
  prefs: []
  type: TYPE_NORMAL
- en: Once the plugin is activated, the designated box disappears from the interface
    immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the post editor to allow users to upload files directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress offers a very complete media upload dialog. However, some projects
    might require users to be able to attach files right from the post editor. This
    recipe shows how to modify the post editor form to be able to attach files to
    articles and how to store these files once they have been uploaded. While any
    type of file could be attached using this technique, the code will be written
    to accept only items with a PDF file extension.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch5-custom-file-uploader`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch5-custom-file-uploader.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 5 - Custom File Uploader`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be executed
    when WordPress is rendering the HTML code at the beginning of the post editor
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch5_cfu_form_add_enctype`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following line of code to register a function to be called when
    WordPress is preparing the meta boxes for all the administration sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to implement the `ch5_cfu_register_meta_box`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the function responsible for rendering the meta box contents, `ch5_cfu_upload_meta_box`,
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code, which calls the `add_action` function to register
    a callback that will be executed when post data is processed to be saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement `ch5_cfu_save_uploaded_file` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to register a filter function to be called when
    the post and page content is prepared for display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code to provide an implementation for the `ch5_cfu_display_pdf_link`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the Chapter 5 - Custom
    File Uploader plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit any post on your site to see the new Upload File meta box and click on
    Update to save the post and upload the selected PDF file to be associated with
    the item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b643d75a-a996-42c7-8cd2-9568aeaf1b6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'View the post to see the link to download the attached file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a43c622-0066-4969-80f6-dcaf81c292b5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default WordPress post editor declares a simple form that does not have
    an encoding type defined and, therefore, can only accept regular text input. Fortunately,
    we have access to an action hook to register a callback function that will output
    additional code when the form gets created, allowing us to upload files. This
    callback is implemented in the first part of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The next code section registers a meta box, as we have seen in many recipes
    so far, to display a new editor section that will display a link to an attached
    file if present, a file selection box to upload a new file, and a button to request
    for the attachment to be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to the function responsible for processing the post data, the recipe's
    code first checks whether the user requested to delete a file associated with
    a post. If that is the case, it will proceed with the deletion of the file and
    remove the associated post metadata. In other circumstances, if the item's post
    type is a post or page, the plugin will proceed to search for a file uploaded
    by the user within the PHP global `$_FILES` array. This array contains information
    on any uploads that have been processed as part of a form's post data. If an entry
    is found, we will use the `wp_check_filetype` function to retrieve information
    about the file type and proceed to convert the resulting extension to a lowercase
    string to make comparisons easier.
  prefs: []
  type: TYPE_NORMAL
- en: As this example only expects to receive PDF files, the code then checks to see
    whether the file extension is correct to decide whether it will display an error
    message using the `wp_die` function or move the file from the web server's temp
    directory to the `wp-content/uploads` directory in WordPress, using the `wp_upload_bits`
    function. In the latter case, it also stores the resulting file's path and URL
    in the post custom field table.
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done, this recipe implements a filter function for `the_content`
    to display a link to associated PDF attachments under posts and pages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding extra fields to the post editor using custom meta boxes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
