- en: Customizing Post and Page Editors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义帖子和页面编辑器
- en: 'In this chapter, you will learn how to customize the core post and page editors
    through the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将通过以下食谱学习如何通过以下方法自定义核心帖子和页面编辑器：
- en: Capturing and displaying information using custom meta boxes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义元框捕获和显示信息
- en: Displaying custom post data via filter functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过过滤器函数显示自定义帖子数据
- en: Hiding the Custom Field section in the post editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在帖子编辑器中隐藏自定义字段部分
- en: Extending the post editor to allow users to upload files directly
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展帖子编辑器以允许用户直接上传文件
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the last few chapters, you learned how to create custom plugin configuration
    panels and how to set up custom post types. With this knowledge in hand, we will
    now see how to customize the post and page editors using meta boxes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后几章中，您学习了如何创建自定义插件配置面板和如何设置自定义帖子类型。掌握这些知识后，我们现在将看到如何使用元框自定义帖子和页面编辑器。
- en: Meta boxes are a very useful tool in the creation of WordPress plugins. They
    were first used to organize large administration panels into manageable sections
    in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*, and then continued to be a key element in the creation
    of tailored interfaces to edit custom post types in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 元框是创建WordPress插件的一个非常有用的工具。它们最初用于将大型管理面板组织成可管理的部分，如第3章中所述，*用户设置和管理页面*，然后继续成为第4章中创建定制界面以编辑自定义帖子类型的关键元素，*自定义帖子类型的威力*。
- en: This chapter explores how meta boxes can be used to augment the default post
    and page editors' capabilities. While WordPress posts and pages already offer
    a lot of functionalities in a default installation, custom data entry fields go
    a long way in crafting a user experience that is much smoother than using the
    custom fields editor. These extra fields can be used to store anything. For example,
    they could be used to specify alternative language links for blog entries or to
    assign a pop-up dialog to specific articles on a site.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了如何使用元框来增强默认帖子和页面编辑器的功能。虽然WordPress的帖子和页面在默认安装中已经提供了很多功能，但自定义数据输入字段在制作比使用自定义字段编辑器更流畅的用户体验方面发挥了重要作用。这些额外字段可以用来存储任何内容。例如，它们可以用来指定博客条目的替代语言链接或将弹出对话框分配给网站上特定的文章。
- en: Capturing and displaying information using custom meta boxes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义元框捕获和显示信息
- en: The WordPress post and page editors are organized in a series of collapsible
    sections with headers called meta boxes. While WordPress is mainly responsible
    for populating these containers with all of the appropriate elements, plugin developers
    can insert their own sections by registering user meta boxes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress的帖子和页面编辑器组织成一系列可折叠的带有标题的元框。虽然WordPress主要负责用所有适当元素填充这些容器，但插件开发者可以通过注册用户元框来插入自己的部分。
- en: To demonstrate this capability, this recipe shows how to add a custom meta box
    that will be used to display and capture information about the name and web address
    of the source materials used when writing a new post or page entry.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这一功能，本食谱展示了如何添加一个自定义元框，该元框将用于显示和捕获在撰写新帖子或页面条目时使用的源材料的名称和网页地址。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够访问一个WordPress开发环境，无论是在您的本地计算机上还是在远程服务器上，您将能够加载您的新插件文件。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch5-post-source-link`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch5-post-source-link`的新目录。
- en: Navigate to the directory and create a text file called `ch5-post-source-link.php`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录并创建一个名为`ch5-post-source-link.php`的文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 5 - Post Source Link`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为`第5章 - 帖子源链接`。
- en: 'Add the following line of code to register a function that will be executed
    when WordPress is preparing a list of meta boxes for all the administration areas:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个函数，该函数将在WordPress准备所有管理区域元框列表时执行：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code segment to provide an implementation for the `ch5_psl_register_meta_box`
    function:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch5_psl_register_meta_box`函数的实现：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Insert this code to provide an implementation for the `ch5_psl_source_meta_box`
    function, responsible for rendering the meta box contents:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码以提供`ch5_psl_source_meta_box`函数的实现，该函数负责渲染元框内容：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Insert the following block of code to register a function that will be called
    when any type of post is saved:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码块以注册一个函数，该函数将在任何类型的帖子保存时被调用：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Append the following code section to provide an implementation for the `ch5_psl_save_source_data`
    function:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch5_psl_save_source_data`函数的实现：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save and close the plugin file.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins management page and Activate the `Chapter 5 - Post Source
    Link` plugin.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活“第5章 - 帖子源链接”插件。
- en: 'Go to the Posts section of the administration, click on one of the entries
    to open the post editor, and see the new Post/Page Source meta box:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往管理后台的“帖子”部分，点击其中一个条目以打开帖子编辑器，并查看新的“帖子/页面源”元框：
- en: '![](img/b7c004c5-a5d7-49c0-96aa-417c4fc6f96e.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b7c004c5-a5d7-49c0-96aa-417c4fc6f96e.png)'
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Every time an administrator or content manager visits the platform's backend,
    WordPress creates a number of meta boxes for all of its internal editors (posts,
    pages, links, and so on) using the `add_meta_box` function that we have seen in
    the previous two chapters.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每当管理员或内容经理访问平台的后端时，WordPress都会使用我们在前两章中看到的`add_meta_box`函数为所有内部编辑器（帖子、页面、链接等）创建多个元框。
- en: In this recipe, we will use the same `add_meta_box` function twice to associate
    a new box to the page and post editors, with both calls registering the same callback
    function, since we want the same functionality in both places. As WordPress stores
    posts and pages in the same database table, it will automatically make sure that
    all the entries have unique IDs between both types of entries.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个菜谱中，我们将使用两次`add_meta_box`函数来将新框关联到页面和帖子编辑器，由于我们希望在这两个地方都有相同的功能，因此两次调用都注册了相同的回调函数。由于WordPress将帖子存储在同一个数据库表中，它将自动确保两种类型的条目之间具有唯一的ID。 '
- en: The other function that we have seen before is `get_post_meta`, which is used
    to retrieve custom metadata associated with post entries.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到的另一个函数是`get_post_meta`，它用于检索与帖子条目关联的自定义元数据。
- en: The content of the meta box itself is displayed using standard HTML. As this
    box will be part of a larger editor, there is no need to worry about declaring
    a form in this box.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 元框本身的内容使用标准HTML显示。由于此框将是更大编辑器的一部分，因此无需担心在此框中声明表单。
- en: Once the new dialog section is created, the next task is to put code in place
    to store data from the additional fields upon submission through the use of the
    `save_post` action. Functions associated with this hook are called when posts
    of any type are saved. When executed, the associated function receives two parameters
    from WordPress that contain the ID of the post being saved and a copy of all the
    data that has been processed to be saved so far. The callback also has access
    to all the server post data received from the user, and uses the `sanitize_text_field`
    and `esc_url` functions to make sure that no malicious content was received.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建新的对话框部分，接下来的任务就是通过使用`save_post`动作来存储从附加字段提交的数据。当保存任何类型的帖子时，与该钩子相关联的函数会被调用。当执行时，相关的函数会从WordPress接收两个参数，包含正在保存的帖子的ID以及迄今为止已处理并准备保存的所有数据的副本。回调函数还可以访问从用户那里接收到的所有服务器帖子数据，并使用`sanitize_text_field`和`esc_url`函数来确保没有接收到恶意内容。
- en: As indicated in the previous chapter, it is important to set the fourth parameter
    of the `add_action` call--that is, `accepted_args`--for actions and filters that
    receive more than one argument. If it is not specified, these additional arguments
    will not be available to the receiving hook function.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，对于接收多个参数的操作和过滤器，设置`add_action`调用的第四个参数——即`accepted_args`——非常重要。如果没有指定，这些额外的参数将不可用于接收钩子函数。
- en: Working with the assumption that the meta box was only added to the post and
    page editors, the code contained in the `ch5_psl_save_source_data` function first
    checks to see whether the post type is set as a post or page. If it is one of
    these two types, it moves on to check for the presence of post data for the source
    name and address fields. If found, `update_post_meta` is called once for each
    field to store the new information in the site's database associated with the
    posts that it belongs to. Making a call to the `update_post_meta` function actually
    updates the post custom field data if it exists or creates it in the case of new
    post or page entries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设元框只添加到帖子编辑器和页面编辑器中，`ch5_psl_save_source_data`函数中的代码首先检查帖子类型是否设置为帖子或页面。如果是这两种类型之一，它将继续检查源名称和地址字段是否存在帖子数据。如果找到，则对每个字段调用一次`update_post_meta`来将新信息存储在与其所属帖子关联的网站数据库中。调用`update_post_meta`函数实际上会更新帖子自定义字段数据（如果存在）或在新帖子或页面条目中创建它。
- en: There's more...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: While this recipe specifically adds a new section to the post and page editors,
    it may be desirable to make the new fields available to all post types, including
    custom ones.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个配方专门为帖子编辑器和页面编辑器添加了一个新部分，但可能希望将新字段提供给所有帖子类型，包括自定义类型。
- en: Adding a new meta box to all post types (including custom ones)
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向所有帖子类型（包括自定义类型）添加新的元框
- en: This recipe made two function calls to register meta boxes with the post and
    page editors. This concept does not expand well to register a custom section with
    all the post types, since custom types created by other plugins are not known.
    Thankfully, there is an easy way to get an array of all the post types that can
    be used to associate the new meta box with all the post editors, using a quick
    `foreach` loop.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方对注册元框调用了两次函数，用于注册帖子编辑器和页面编辑器。由于其他插件创建的自定义类型是未知的，因此这个概念不适合注册所有帖子类型的自定义部分。幸运的是，有一个简单的方法可以通过快速`foreach`循环获取所有帖子类型的数组，以便将新元框与所有帖子编辑器关联起来。
- en: 'The following code shows how the `ch5_psl_register_meta_box` function can be
    re-written to associate the new box with all the post types:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何重写`ch5_psl_register_meta_box`函数，以便将新框与所有帖子类型关联：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Displaying custom post data using filter functions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过滤器函数显示自定义帖子数据
- en: Once we have captured additional data in the post editor, the next logical step
    will be to add code to display it when visitors view posts and pages. In the case
    of our source link data, the most logical place to show this link is after each
    post's content, which can easily be accomplished by assigning a function to the
    filter `the_content`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在帖子编辑器中捕获了额外的数据，下一步逻辑上将是添加代码，以便在访客查看帖子时显示它。在我们的源链接数据的情况下，最合理的地方是在每篇帖子内容之后显示此链接，这可以通过将函数分配给过滤器`the_content`轻松实现。
- en: This recipe explains how to create a filter function to display the source data
    associated with a post or page item as a clean link.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方解释了如何创建一个过滤器函数，以显示与帖子或页面项关联的源数据，并以干净的链接形式显示。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Capturing and displaying information using
    custom meta boxes* recipe to have a starting point for this recipe and the resulting
    plugin should still be active in your development site. Alternatively, you can
    get the resulting code (`Chapter 5/ch5-post-source-link/ch5-post-source-link-v1.php`)
    from the code bundle you downloaded from the Packt Publishing website ([https://www.packtpub.com/support](https://www.packtpub.com/support))
    and rename the file as `ch5-post-source-link.php`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*使用自定义元框捕获和显示信息*配方，以便为这个配方提供一个起点，并且生成的插件仍然在你的开发站点中处于活动状态。或者，你可以从Packt
    Publishing网站下载的代码包（[https://www.packtpub.com/support](https://www.packtpub.com/support)）中获取生成的代码（`Chapter
    5/ch5-post-source-link/ch5-post-source-link-v1.php`），并将文件重命名为`ch5-post-source-link.php`。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch5-post-source-link` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录中的`ch5-post-source-link`文件夹。
- en: Open the `ch5-post-source-link.php` file in a code editor.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开`ch5-post-source-link.php`文件。
- en: 'Add the following line of code to register a filter function to be called when
    the post and page content is prepared for display:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在准备显示帖子内容时调用的过滤器函数：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code section to provide an implementation for the `ch5_psl_display_source_link`
    function:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到为`ch5_psl_display_source_link`函数提供实现的区域：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save and close the plugin file.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Add source data to one of your site's posts and view it to see the new Source
    link displayed on the page.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将源数据添加到您网站上的一个帖子中，并查看它以查看页面上显示的新源链接。
- en: '![](img/bbbae67f-3b45-4c08-9f42-562860d41056.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bbbae67f-3b45-4c08-9f42-562860d41056.png)'
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Similarly to what was done in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*, in the *Adding text after each item's content using
    plugin filters* recipe, this recipe registers a callback with the `the_content`
    filter hook, which allows us to add an additional link after each post or page
    where the source name and source address fields have been filled in. We use the
    `get_post_type` function in our callback to first check whether the item being
    displayed is in one of these two categories. Then, we use `get_post_meta` to retrieve
    the information and display the source link if both fields contain information.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于在[第2章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)，“插件框架基础”中，在“使用插件过滤器在每个项目内容后添加文本”配方中执行的操作，这个配方使用`the_content`过滤器钩子注册了一个回调，这允许我们在每个已填写源名称和源地址字段的帖子或页面后添加一个额外的链接。我们在回调中使用`get_post_type`函数首先检查显示的项目是否属于这两个类别之一。然后，我们使用`get_post_meta`检索信息，如果两个字段都包含信息，则显示源链接。
- en: We also use the `esc_url` and `esc_html` functions as a precaution to be sure
    that the data stored in these two post meta fields is clean.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用`esc_url`和`esc_html`函数作为预防措施，确保存储在这两个帖子元字段中的数据是干净的。
- en: See also
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Capturing and displaying information using custom meta boxes* recipe
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用自定义元框捕获和显示信息*配方'
- en: Hiding the Custom Field section in the post editor
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在帖子编辑器中隐藏自定义字段部分
- en: After having full control over which meta boxes are shown when creating custom
    post type editor controls and putting together plugin configuration pages, things
    are a little different when it comes to altering the basic post and page editors.
    More specifically, instead of choosing which meta boxes to display, the editor
    sections created by WordPress need to be removed to tailor the user experience.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全控制创建自定义帖子类型编辑控件和组合插件配置页面时显示哪些元框之后，当涉及到更改基本帖子编辑器时，事情就有些不同了。更具体地说，不是选择要显示哪些元框，而是需要删除WordPress创建的编辑器部分，以定制用户体验。
- en: 'This recipe shows how to remove the Custom Fields meta boxes from the post
    and page editors:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何从帖子编辑器中删除自定义字段元框：
- en: '![](img/16a1a8cb-233f-460d-bfc4-242f7ce1d003.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/16a1a8cb-233f-460d-bfc4-242f7ce1d003.png)'
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够访问一个WordPress开发环境，无论是在您的本地计算机上还是在远程服务器上，您将能够加载您的新插件文件。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录。
- en: Create a new directory called `ch5-hide-custom-fields`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch5-hide-custom-fields`的新目录。
- en: Navigate to this directory and create a new text file called `ch5-hide-custom-fields.php`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录并创建一个名为`ch5-hide-custom-fields.php`的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 5 - Hide Custom Fields`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为`第5章 - 隐藏自定义字段`。
- en: 'Add the following line of code to register a function that will be executed
    when WordPress is preparing a list of meta boxes for all the administration areas:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到注册一个函数中，该函数将在WordPress准备所有管理区域元框列表时执行：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following code section to provide an implementation for the `ch5_hcf_remove_custom_fields_metabox`
    function:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到为`ch5_hcf_remove_custom_fields_metabox`函数提供一个实现：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save and close the plugin file.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins management page and Activate the `Chapter 5 - Hide Custom
    Fields` plugin.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活`第5章 - 隐藏自定义字段`插件。
- en: 'Go to the Posts section of the administration and click on one of the entries
    to open the post editor. You will see that the Custom Fields section is no longer
    visible in the editor and does not show up in the Screen Options configuration
    tab either:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往管理后台的帖子部分，点击其中一个条目以打开帖子编辑器。您将看到编辑器中不再可见自定义字段部分，也不会在屏幕选项配置标签中显示：
- en: '![](img/c466d605-2903-4a09-a783-3cef9e9960c4.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c466d605-2903-4a09-a783-3cef9e9960c4.png)'
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This short recipe contains only a few lines of code which register a function
    to be called when WordPress is preparing meta boxes for all the administration
    sections, followed by the implementation of this function. The function itself
    makes two calls to the `remove_meta_box` function to remove the custom fields
    section from the post and page editors. This function requires three parameters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本简短食谱仅包含几行代码，这些代码注册了一个在WordPress准备所有管理部分的元框时要调用的函数，然后是实现此函数。该函数本身对`remove_meta_box`函数进行了两次调用，以从帖子编辑器和页面编辑器中删除自定义字段部分。此函数需要三个参数：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first argument is the meta box identifier that was used when it was first
    created. While you may not know where the creation code for a given meta box is
    located within the WordPress source code, a quick look at the box's `div id` in
    the page source from a browser reveals its name. In this case, the `id` is `postcustom`.
    The other two arguments indicate the name of the editor from which the meta box
    is to be removed and the context of the meta box (`normal`, `advanced`, or `side`).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是在首次创建时使用的元框标识符。虽然您可能不知道给定元框的创建代码位于WordPress源代码的何处，但快速查看浏览器页面源中的框的`div
    id`可以揭示其名称。在这种情况下，`id`是`postcustom`。其他两个参数表示要从哪个编辑器中删除元框的名称以及元框的上下文（`normal`、`advanced`或`side`）。
- en: Once the plugin is activated, the designated box disappears from the interface
    immediately.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件被激活，指定的框会立即从界面中消失。
- en: Extending the post editor to allow users to upload files directly
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展帖子编辑器以允许用户直接上传文件
- en: WordPress offers a very complete media upload dialog. However, some projects
    might require users to be able to attach files right from the post editor. This
    recipe shows how to modify the post editor form to be able to attach files to
    articles and how to store these files once they have been uploaded. While any
    type of file could be attached using this technique, the code will be written
    to accept only items with a PDF file extension.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress提供了一个非常完整的媒体上传对话框。然而，一些项目可能需要用户能够直接从帖子编辑器中附加文件。本食谱展示了如何修改帖子编辑器表单以能够将文件附加到文章中，以及如何在文件上传后存储这些文件。虽然可以使用此技术附加任何类型的文件，但代码将编写为仅接受具有PDF文件扩展名的项目。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够访问一个WordPress开发环境，无论是在您的本地计算机上还是在远程服务器上，您将能够加载您的新插件文件。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录。
- en: Create a new directory called `ch5-custom-file-uploader`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch5-custom-file-uploader`的新目录。
- en: Navigate to this directory and create a new text file called `ch5-custom-file-uploader.php`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为`ch5-custom-file-uploader.php`的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 5 - Custom File Uploader`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，命名为“第5章 - 自定义文件上传器”。
- en: 'Add the following line of code to register a function that will be executed
    when WordPress is rendering the HTML code at the beginning of the post editor
    form:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行代码以注册一个在WordPress渲染帖子编辑器表单开头HTML代码时要执行的函数：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following code section to provide an implementation for the `ch5_cfu_form_add_enctype`
    function:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch5_cfu_form_add_enctype`函数的实现：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Insert the following line of code to register a function to be called when
    WordPress is preparing the meta boxes for all the administration sections:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下行代码以注册一个在WordPress准备所有管理部分的元框时要调用的函数：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following block of code to implement the `ch5_cfu_register_meta_box`
    function:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码块以实现`ch5_cfu_register_meta_box`函数：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Implement the function responsible for rendering the meta box contents, `ch5_cfu_upload_meta_box`,
    with the following code:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码实现负责渲染元框内容的函数，`ch5_cfu_upload_meta_box`：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following line of code, which calls the `add_action` function to register
    a callback that will be executed when post data is processed to be saved:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行代码，该代码调用`add_action`函数以注册在处理要保存的帖子数据时要执行的回调：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Implement `ch5_cfu_save_uploaded_file` with the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码实现`ch5_cfu_save_uploaded_file`：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following line of code to register a filter function to be called when
    the post and page content is prepared for display:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个过滤器函数，当帖子内容和页面内容准备显示时将被调用：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Insert the following code to provide an implementation for the `ch5_cfu_display_pdf_link`
    function:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码以提供`ch5_cfu_display_pdf_link`函数的实现：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save and close the plugin file.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins management page and Activate the Chapter 5 - Custom
    File Uploader plugin.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活第5章 - 自定义文件上传插件。
- en: 'Edit any post on your site to see the new Upload File meta box and click on
    Update to save the post and upload the selected PDF file to be associated with
    the item:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您网站上任何帖子以查看新的上传文件元框，然后点击更新以保存帖子并将选定的PDF文件上传并关联到项目：
- en: '![](img/b643d75a-a996-42c7-8cd2-9568aeaf1b6d.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b643d75a-a996-42c7-8cd2-9568aeaf1b6d.png)'
- en: 'View the post to see the link to download the attached file:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看帖子以查看下载附件文件的链接：
- en: '![](img/0a43c622-0066-4969-80f6-dcaf81c292b5.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a43c622-0066-4969-80f6-dcaf81c292b5.png)'
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The default WordPress post editor declares a simple form that does not have
    an encoding type defined and, therefore, can only accept regular text input. Fortunately,
    we have access to an action hook to register a callback function that will output
    additional code when the form gets created, allowing us to upload files. This
    callback is implemented in the first part of this recipe.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的WordPress帖子编辑器声明了一个没有定义编码类型的简单表单，因此只能接受常规文本输入。幸运的是，我们有访问动作钩子来注册一个回调函数，该函数将在表单创建时输出额外的代码，允许我们上传文件。此回调在此菜谱的第一部分实现。
- en: The next code section registers a meta box, as we have seen in many recipes
    so far, to display a new editor section that will display a link to an attached
    file if present, a file selection box to upload a new file, and a button to request
    for the attachment to be deleted.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码部分注册了一个元框，正如我们在许多先前的菜谱中看到的那样，用于显示一个新编辑器部分，该部分将显示一个指向附件文件的链接（如果存在），一个文件选择框用于上传新文件，以及一个按钮用于请求删除附件。
- en: Moving on to the function responsible for processing the post data, the recipe's
    code first checks whether the user requested to delete a file associated with
    a post. If that is the case, it will proceed with the deletion of the file and
    remove the associated post metadata. In other circumstances, if the item's post
    type is a post or page, the plugin will proceed to search for a file uploaded
    by the user within the PHP global `$_FILES` array. This array contains information
    on any uploads that have been processed as part of a form's post data. If an entry
    is found, we will use the `wp_check_filetype` function to retrieve information
    about the file type and proceed to convert the resulting extension to a lowercase
    string to make comparisons easier.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将转到负责处理帖子数据的函数，菜谱的代码首先检查用户是否请求删除与帖子关联的文件。如果是这种情况，它将进行文件删除并移除相关的帖子元数据。在其他情况下，如果项目的帖子类型是帖子或页面，插件将开始搜索用户在PHP全局`$_FILES`数组中上传的文件。此数组包含有关作为表单帖子数据处理部分的任何上传的信息。如果找到条目，我们将使用`wp_check_filetype`函数检索有关文件类型的信息，并继续将生成的扩展名转换为小写字符串，以便比较更容易。
- en: As this example only expects to receive PDF files, the code then checks to see
    whether the file extension is correct to decide whether it will display an error
    message using the `wp_die` function or move the file from the web server's temp
    directory to the `wp-content/uploads` directory in WordPress, using the `wp_upload_bits`
    function. In the latter case, it also stores the resulting file's path and URL
    in the post custom field table.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此示例仅期望接收PDF文件，因此代码会检查文件扩展名是否正确，以决定是否使用`wp_die`函数显示错误消息，或者使用`wp_upload_bits`函数将文件从Web服务器的临时目录移动到WordPress中的`wp-content/uploads`目录。在后一种情况下，它还会将生成的文件路径和URL存储在帖子自定义字段表中。
- en: Once this is done, this recipe implements a filter function for `the_content`
    to display a link to associated PDF attachments under posts and pages.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，此菜谱实现了`the_content`的过滤器函数，用于在帖子下面和页面下面显示关联的PDF附件链接。
- en: See also
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding extra fields to the post editor using custom meta boxes* recipe
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用自定义元框添加额外字段到帖子编辑器*的菜谱'
