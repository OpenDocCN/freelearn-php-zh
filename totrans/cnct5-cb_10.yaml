- en: Appendix A. Blueprint – Creating an Image Gallery Add-on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned dozens of concrete5 recipes, it is time to put them
    to practical use. Think of this chapter as one giant recipe, with the sole purpose
    of creating an image gallery add-on, which you can install on your concrete5 website
    and begin using right away. If you visit the website for this book, there is a
    complete download of the source code to help you out if you get stuck.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This entire chapter was developed with a fresh installation of concrete5 Version
    5.6.1.2, though the code will technically work for any concrete5 after Version
    5.6\. If you'd like to follow along exactly, get a new version of concrete5 running
    on your development server and install the sample content with it. That will give
    us some pages and images to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the package controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in creating our add-on is to create the directories and files.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory in `/packages` called `cookbook_gallery`. The first file
    we will need is `controller.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code in `controller.php` to define the add-on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You may recall from [Chapter 8](ch08.html "Chapter 8. Working with Themes and
    Add-ons"), *Working with Themes and Add-Ons*, that packages only require one file,
    the `controller`. The `controller` file contains methods that tell concrete5 what
    the package's name is, and a text description of the package.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things we need to make note of here. First, notice the class
    name of the controller. Since our package handle is `cookbook_gallery`, we need
    to camel case that handle and append the package to the end, to create the class
    name that concrete5 can predict and load correctly.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need is the `defined` or `die` statement at the top of the
    file. This is a special security requirement of concrete5 to ensure that scripts
    cannot be executed arbitrarily. Everything has to get run through the concrete5
    dispatcher. This statement is required at the top of every `.php` (excluding third-party
    libraries that exist in `libraries/3rd_party`) file in your package if you plan
    on submitting the package to the concrete5 marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing that we need to pay attention to is that all public facing strings
    are encased in the `t()` function (see the package name and description). The
    `t()` function, as discussed in [Chapter 9](ch09.html "Chapter 9. System Events
    and Advanced Configuration"), *System Events and Advanced Configuration* allows
    translators to supply alternate translations for the given string. This is another
    requirement for add-ons to be submitted into the concrete5 marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: We aren't done with the controller yet; we will need to come back and add the
    installation function once our block is created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the block type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our image gallery is going to be a custom block type. This block type can be
    added to any page in the concrete5 site, and will show an image gallery wherever
    it is placed. The first thing we will need to do is create the block's directory.
    Add a new directory in `/packages/cookbook_gallery/blocks`. Inside the new block's
    directory, add a directory called `cookbook_gallery`. This will contain our block's
    files.
  prefs: []
  type: TYPE_NORMAL
- en: The block's controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First up for our block type is the `controller` file. Create `controller.php`
    in `/packages/cookbook_gallery_blocks/cookbook_gallery`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare the block `controller` class and add the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Again, notice the `defined` or `die` statement at the top of the file and the
    use of `t()` functions to wrap our public facing strings. We have also defined
    the name of the block's database table, using the member variable `$btTable`.
  prefs: []
  type: TYPE_NORMAL
- en: Save the `controller` file, we will be coming back to it later to add our block's
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The database XML file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next file that our block type needs is the database XML file. Create it
    at `/packages/cookbook_gallery/blocks/cookbook_gallery/db.xml`. This file defines
    all of the tables and fields that the block type will need. concrete5 will automatically
    create the defined tables when the block type is installed.
  prefs: []
  type: TYPE_NORMAL
- en: You may recall from [Chapter 2](ch02.html "Chapter 2. Working with Blocks"),
    *Working with Blocks* that this file makes use of ADOdb's XML schema (or AXMLS).
    You can learn more about AXMLS on the ADOdb website, located at [http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema).
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following XML code in `db.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We created a database table with the same name that we specified in the block
    type's controller. The table has two fields, a unique integer ID called `bID`
    (which is required for the block to be installed), and an integer file set ID
    field. Save this `db.xml` file, and you can close it if you'd like, as we won't
    be needing it again.
  prefs: []
  type: TYPE_NORMAL
- en: The block type's view files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we will need to create files for the various views for the block. The
    block has three views—add, edit, and view. Create `add.php`, `edit.php`, and `view.php`
    in the block's directory. Since add and edit share the same HTML, we will create
    a shared template that both views will include, called `form.php`. Oh, why not
    create `view.css` as well, since our view file will need to use some styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting contents of our new package are in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The block type''s view files](img/4548OS_A_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's leave these view files empty for now, because we want to install our block
    type and its package to the website!
  prefs: []
  type: TYPE_NORMAL
- en: Installing the block type with the package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right now, if we were to install the package, the block type would not come
    with it, and users of your add-on would be confused and disappointed. We can tell
    the package to install the block type during the package's installation, though.
  prefs: []
  type: TYPE_NORMAL
- en: Open the package `controller` (`/packages/cookbook_gallery/controller.php`)
    in your code editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new method to the `controller` class called `install`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What's going on here? Well, the `Package` class has a function called `install`,
    which, you guessed it, installs the package to the concrete5 database. Since our
    package controller extends the `Package` class, the `install` function is automatically
    available to us.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to call the `Package` class's `install` function and get the
    object that it returns. This will allow us to install the block type and have
    it assigned to our package.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to pass the `$pkg` object to the block type installer, because
    if users uninstall or reinstall your add-on, the block type will come and go with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Save the controller file. It's time to install our add-on!
  prefs: []
  type: TYPE_NORMAL
- en: Installing the package in concrete5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visit `/dashboard/extend/install/` on your concrete5 site (you'll have to log
    in if your haven't already). You will see your add-on awaiting installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The gallery add-on awaiting installation is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the package in concrete5](img/4548OS_A_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Install** button. concrete5 will add your package and its block
    controller to the site. If it succeeds, you will see a message at the top of the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'After successful installation of the add-on, we see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the package in concrete5](img/4548OS_A_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a page for the gallery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visit your concrete5 homepage and hover over the **Edit** button to add a sub-page
    underneath the home page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a page for the gallery](img/4548OS_A_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's use the **Full** layout for this gallery page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a page for the gallery](img/4548OS_A_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Give the page a title and path. How about `Image Gallery`?
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a page for the gallery](img/4548OS_A_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add the page to the site. Now that we have a nice place to put our block, let's
    actually make our block do something!
  prefs: []
  type: TYPE_NORMAL
- en: Giving life to the block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your block's controller (located at `/packages/cookbook_gallery/blocks/cookbook_gallery/controller.php`)
    in your code editor. We need to add some functions to this class to make it work.
    First, let's bring the block's add and edit forms to life. Add the following functions
    to the `controller` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Whoa, what are we doing here? You may recall from earlier chapters that concrete5
    controllers employ the use of callbacks, which are functions in the class that
    get automatically executed when certain things happen. Whenever a block is added
    to a page for the first time, concrete5 will call the `add` function when the
    `add.php` view is displayed. The same goes for the `edit` function and the `edit.php`
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Since we want the same code to run when both add and edit forms are used, why
    not create a function that they each can use? The `addEdit` function contains
    the real code for our backend work.
  prefs: []
  type: TYPE_NORMAL
- en: First, we load a list of all of the file sets in the concrete5 database. Next,
    we transform this list of file sets into a simple key/value array that we can
    feed into a select box in the HTML form. Lastly, we send the array of `<select>`
    options to the view as the variable `$sets`.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome. Now, what about when the gallery block is actually viewed on the website?
    There's a callback for that, too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `view` function will be automatically run by concrete5 whenever the block
    is displayed on the website. It is here that we load the images from the chosen
    file set and send them to the view.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create a new instance of the `FileList` class. This class
    allows us to filter the files in the file manager, to only show the ones that
    belong in our image gallery.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we load the file set object, based on the file set ID that we will set
    in the add/edit form. Using the file set object, we are able to filter the set
    to only show us files that are in that set. We don't want all types of files appearing
    though (imagine a PDF in the image gallery—that's no fun!), so we add another
    filter to only show us images.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we write a ternary expression to fall back on the default gallery limit,
    if one was not chosen when the block was added to the page.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let's send the images array to the view, so we can show our gallery!
  prefs: []
  type: TYPE_NORMAL
- en: Filling out the add and edit view files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alright, so we have some great code in our controller, but there's still no
    HTML in our views. Let's fix that right now.
  prefs: []
  type: TYPE_NORMAL
- en: Open `form.php` in your code editor. We are going to create the HTML form that
    site editors will see when the block is added or edited on a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following HTML and PHP code in `form.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Hey, that wasn't so bad! This form will contain two fields—a select box containing
    a list of the file sets in concrete5, and a text input to limit the image gallery.
    Don't worry about wrapping it in a form element or adding save controls, concrete5
    will take care of all of that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s include this form in `add.php` and `edit.php`. Add the following
    code to both files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That's it! Now when our block gets added to the website, editors will see our
    nice new form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the gallery view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Of course, our gallery is still missing the most important component, the gallery
    itself. Let''s add some HTML and PHP to `view.php` to show the various images
    in the chosen file set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Great. Now let's see what we did. At the very top of the file, of course, we
    included the `defined` or `die` statement that is required on all the PHP files.
    Following that, we load up the Image helper, which we will be using later to generate
    thumbnails.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we output a title for the gallery, using the `t()` wrapper to remain translation
    friendly, of course.
  prefs: []
  type: TYPE_NORMAL
- en: Shortly after that, we begin looping through the array of images. These are
    `File` objects, so we have access to all of the related properties. Let's use
    the Image helper to generate a 100 x 100 pixel crop of the image (passing `true`
    as the second parameter tells the Image helper to crop the image, not just resize
    it). That will give our gallery a clean and consistent look.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's wrap the image in an `<a>` tag, so we can link to the full size
    image. Output the image tag, using the thumbnail's source.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to wrap the whole thing in an `if` statement to handle file sets
    with no images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, let''s add some basic styles to `view.css` so our gallery looks pretty
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Trying out the block
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alright, let's see how we did! Before we can use the block, let's add a file
    set to concrete5\. Visit `/dashboard/files/sets/` in your browser and click on
    the big blue button to add a file set. We need to add at least one file set before
    we can use the gallery.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create a new file set called `Gallery Images`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have a file set, but still it is empty. Let's add some images to this
    file set by visiting the file manager at `/dashboard/files/search/`.
  prefs: []
  type: TYPE_NORMAL
- en: Select a few images to add to the set.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the dropdown menu in the upper-left hand corner. Select **Sets**,
    as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select the file set that we just created to assign these images to that set.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fantastic! Now we are ready to try out our block. Visit the image gallery page
    that we created earlier and enter edit mode. Click on the main content area to
    add a new block.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scroll to the bottom of the block list to find the photo gallery block that
    we created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, fill out the form to add the block. Select the file set and set a limit
    to how many images can appear (or leave it blank to use the default of 20).
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add the block to the page and publish the changes. You will see a great-looking
    image gallery!
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on one of the images to see it in its original size.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying out the block](img/4548OS_A_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Well, that looks like our code worked! Congratulations, you have created an
    add-on that can be installed on any concrete5 website and work automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Wrap-up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We accomplished a lot in this chapter. We started with nothing, and ended up
    with a fully functioning image gallery. There's still a lot of room for expansion
    and improvements, though. What if we would have added a jQuery lightbox plugin,
    such as fancyBox (available at [http://fancyapps.com/fancybox/](http://fancyapps.com/fancybox/))?
    Or if the gallery had multiple pages? This block type is a great starting point
    for many different possibilities. These tasks are all possible with the concrete5
    API, so have fun exploring and learning new things.
  prefs: []
  type: TYPE_NORMAL
