["```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\Actor;\n    use Yii;\n    use yii\\db\\Query;\n    use yii\\helpers\\ArrayHelper;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n\n    /**\n    * Class DbController\n    * @package app\\controllers\n    */\n    class DbController extends Controller\n    {\n        /**\n        * Example of Active Record usage.\n        *\n        * @return string\n        */\n        public function actionAr()\n        {\n            $records = Actor::find()\n                            ->joinWith('films')\n                            ->orderBy('actor.first_name, actor.last_name, film.title')\n                            ->all();\n\n            return $this->renderRecords($records);\n        }\n\n        /**\n        * Example of Query class usage.\n        *\n        * @return string\n        */\n        public function actionQuery()\n        {\n            $rows = (new Query())\n                ->from('actor')\n                ->innerJoin('film_actor', 'actor.actor_id=film_actor.actor_id')\n                ->leftJoin('film', 'film.film_id=film_actor.film_id')\n                ->orderBy('actor.first_name, actor.last_name, actor.actor_id, film.title')\n                ->all();\n\n            return $this->renderRows($rows);\n        }\n\n        /**\n        * Example of SQL execution usage.\n        *\n        * @return string\n        */\n        public function actionSql()\n        {\n            $sql = 'SELECT *\n                FROM actor a\n                JOIN film_actor fa ON fa.actor_id = a.actor_id\n                JOIN film f ON fa.film_id = f.film_id\n                ORDER BY a.first_name, a.last_name, a.actor_id, f.title';\n\n            $rows = Yii::$app->db->createCommand($sql)->queryAll();\n\n            return $this->renderRows($rows);\n        }\n\n        /**\n        * Render records for Active Record array.\n        *\n        * @param array $records\n        *\n        * @return string\n        */\n        protected function renderRecords(array $records = [])\n        {\n            if (!$records) {\n                return $this->renderContent('Actor list is empty.');\n            }\n\n            $items = [];\n\n            foreach ($records as $record) {\n                $actorFilms = $record->films\n                    ? Html::ol(ArrayHelper::getColumn($record->films, 'title')): null;\n                $actorName = $record->first_name.' '.$record->last_name;\n                    $items[] = $actorName.$actorFilms;\n           }\n\n            return $this->renderContent(Html::ol($items, [\n                'encode' => false,\n            ]));\n        }\n\n        /**\n        * Render rows for result of query.\n        *\n        * @param array $rows\n        *\n        * @return string\n        */\n        protected function renderRows(array $rows = [])\n        {\n            if (!$rows) {\n                return $this->renderContent('Actor list is empty.');\n            }\n\n            $items = [];\n            $films = [];\n\n            $actorId = null;\n            $actorName = null;\n            $actorFilms = null;\n\n            $lastActorId = $rows[0]['actor_id'];\n\n            foreach ($rows as $row) {\n                $actorId = $row['actor_id'];\n                $films[] = $row['title'];\n\n                if ($actorId != $lastActorId) {\n                    $actorName = $row['first_name'].' '.$row['last_name'];\n                    $actorFilms = $films ? Html::ol($films) : null;\n\n                    $items[] = $actorName.$actorFilms;\n                    $films = [];\n                    $lastActorId = $actorId;\n                }\n            }\n\n            if ($actorId == $lastActorId) {\n                $actorFilms = $films ? Html::ol($films) : null;\n                $items[] = $actorName.$actorFilms;\n            }\n\n            return $this->renderContent(Html::ol($items, [\n                'encode' => false,\n            ]));\n        }\n    }\n    ```", "```php\n    DROP TABLE IF EXISTS 'post';\n    CREATE TABLE IF NOT EXISTS 'post' (\n        'id' INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'title' VARCHAR(255) NOT NULL,\n        'text' TEXT NOT NULL,\n         PRIMARY KEY  ('id')\n    );\n    ```", "```php\n    DROP TABLE IF EXISTS 'comment';\n    CREATE TABLE IF NOT EXISTS 'comment' (\n        'id' INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'text' TEXT NOT NULL,\n        'post_id' INT(10) UNSIGNED NOT NULL,\n         PRIMARY KEY  ('id')\n    );\n    ```", "```php\n    'db' => [\n        'connectionString' =>'mysql:host=localhost;dbname=db1',\n        'username' => 'root',\n        'password' => '',\n        'charset' => 'utf8',\n    ],\n    ```", "```php\n    'db2' => [\n        'class'=>'yii\\db\\Connection',\n        'connectionString' => 'mysql:host=localhost;dbname=db2',\n        'username' => 'root',\n        'password' => '',\n        'charset' => 'utf8',\n    ],\n    ```", "```php\n    $rows1 = Yii::$app->db->createCommand($sql)->queryAll();\n    $rows2 = Yii::$app->db2->createCommand($sql)->queryAll();\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\Post;\n    use app\\models\\Comment;\n    use yii\\helpers\\ArrayHelper;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n\n    /**\n    * Class DbController.\n    * @package app\\controllers\n    */\n    class DbController extends Controller\n    {\n        public function actionIndex()\n        {\n            $post = new Post();\n            $post->title = 'Post #'.rand(1, 1000);\n            $post->text = 'text';\n            $post->save();\n\n            $posts = Post::find()->all();\n\n            echo Html::tag('h1', 'Posts');\n            echo Html::ul(ArrayHelper::getColumn($posts, 'title'));\n\n            $comment = new Comment();\n            $comment->post_id = $post->id;\n            $comment->text = 'comment #'.rand(1, 1000);\n            $comment->save();\n\n            $comments = Comment::find()->all();\n\n            echo Html::tag('h1', 'Comments');\n            echo Html::ul(ArrayHelper::getColumn($comments, 'text'));\n        }\n    }\n    ```", "```php\nclass Comment extends \\yii\\db\\ActiveRecord\n{\n    //...\n    public function tableName()\n    {\n        return 'db2.comment';\n    }\n    //... \n}\n```", "```php\n$posts = Post::find()->joinWith('comments')->all();\n```", "```php\n    DROP TABLE IF EXISTS 'post';\n    CREATE TABLE IF NOT EXISTS 'post' (\n        'id' INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'lang' VARCHAR(5) NOT NULL DEFAULT 'en',\n        'title' VARCHAR(255) NOT NULL,\n        'text' TEXT NOT NULL,\n         PRIMARY KEY ('id')\n    );\n    INSERT INTO 'post'('id','lang','title','text')\n    VALUES (1,'en_us','Yii news','Text in English'),\n    (2,'de','Yii Nachrichten','Text in Deutsch');\n    ```", "```php\n    <?php\n\n    namespace app\\models;\n\n    /**\n    * This is the ActiveQuery class for [[Post]].\n    *\n    * @see Post\n    */\n    class PostQuery extends \\yii\\db\\ActiveQuery\n    {\n        /**\n        * @param $lang\n        *\n        * @return $this\n        */\n        public function lang($lang)\n        {\n            return $this->where([ 'lang' => $lang ]);\n        }\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\Post;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n\n    /**\n    * Class DbController.\n    * @package app\\controllers\n    */\n    class DbController extends Controller\n    {\n        public function actionIndex()\n        {\n            // Get posts written in default application language\n            $posts = Post::find()->all();\n\n            echo Html::tag('h1', 'Default language');\n            foreach ($posts as $post) {\n                echo Html::tag('h2', $post->title);\n                echo $post->text;\n            }\n\n           // Get posts written in German\n           $posts = Post::find()->lang('de')->all();\n\n            echo Html::tag('h1', 'German');\n            foreach ($posts as $post) {\n                echo Html::tag('h2', $post->title);\n                echo $post->text;\n            }\n        }\n    }\n    ```", "```php\n    DROP TABLE IF EXISTS 'post';\n    CREATE TABLE IF NOT EXISTS 'post' (\n        'id' INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'title' VARCHAR(255) NOT NULL,\n        'text' TEXT NOT NULL,\n         PRIMARY KEY ('id')\n    );\n    ```", "```php\n    /**\n    * @param bool $insert\n    *\n    * @return bool\n    */\n    public function beforeSave($insert)\n    {\n        $this->text = preg_replace('~((?:https?|ftps?)://.*?)( |$)~iu',\n        '<a href=\"\\1\">\\1</a>\\2', $this->text);\n\n        return parent::beforeSave($insert);\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\Post;\n    use yii\\helpers\\Html;\n    use yii\\helpers\\VarDumper;\n    use yii\\web\\Controller;\n\n    /**\n    * Class TestController.\n    * @package app\\controllers\n    */\n    class TestController extends Controller\n    {\n        public function actionIndex()\n        {\n            $post = new Post();\n            $post->title = 'links test';\n            $post->text = 'before http://www.yiiframework.com/ after';\n            $post->save();\n\n            return $this->renderContent(Html::tag('pre', VarDumper::dumpAsString(\n                $post->attributes\n            )));\n        }\n    }\n    ```", "```php\n    DROP TABLE IF EXISTS 'blog_post';\n    CREATE TABLE IF NOT EXISTS 'blog_post' (\n        'id' INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'title' VARCHAR(255) NOT NULL,\n        'text' TEXT NOT NULL,\n        'created_date' INTEGER,\n        'modified_date'INTEGER,\n         PRIMARY KEY  ('id')\n    );\n    ```", "```php\n    /**\n    * @return array\n    */\n    public function behaviors()\n    {\n        return [\n            'timestamp'=> [\n                'class' => 'yii\\behaviors\\TimestampBehavior',\n                'createdAtAttribute' => 'creation_date',\n                'updatedAtAttribute' => 'modified_date'\n            ]\n        ];\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\BlogPost;\n    use yii\\helpers\\Html;\n    use yii\\helpers\\VarDumper;\n    use yii\\web\\Controller;\n\n    /**\n    * Class TestController.\n    * @package app\\controllers\n    */\n    class TestController extends Controller\n    {\n        public function actionIndex()\n        {\n            $blogPost = new BlogPost();\n            $blogPost->title = 'Gotcha!';\n            $blogPost->text = 'We need some laughter to ease the tension of holiday shopping.';\n            $blogPost->save();\n\n            return $this->renderContent(Html::tag('pre',\n            VarDumper::dumpAsString($blogPost->attributes)\n            ));\n        }\n    }\n    ```", "```php\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\BaseActiveRecord;\n\nclass Post extends \\yii\\db\\ActiveRecord\n{\n    // ..\n    public function behaviors()\n    {\n        return [\n            [\n                'class' => 'yii\\behaviors\\TimestampBehavior',\n                'attributes' => [\n                    BaseActiveRecord::EVENT_BEFORE_INSERT => 'creation_date',\n                    BaseActiveRecord::EVENT_BEFORE_UPDATE => 'modified_date',\n               ]\n           ]\n       ];\n    }\n    // ..\n}\n```", "```php\n$model->touch('last_login');\n```", "```php\n$model = new Post();\n$model->touch('creation_date');\n```", "```php\n    DROP TABLE IF EXISTS 'blog_post';\n    CREATE TABLE IF NOT EXISTS 'blog_post' (\n        'id' INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'author_id' INT(10) UNSIGNED DEFAULT NULL,\n        'updater_id' INT(10) UNSIGNED DEFAULT NULL,\n        'title' VARCHAR(255) NOT NULL,\n        'text' TEXT NOT NULL,\n        PRIMARY KEY  ('id')\n    );\n    ```", "```php\n    <?php\n\n    namespace app\\models;\n\n    use Yii;\n    use yii\\db\\BaseActiveRecord;\n\n    /**\n    * This is the model class for table \"blog_post\".\n    *\n    * @property integer $id\n    * @property integer $author_id\n    * @property integer $updater_id\n    * @property string $title\n    * @property string $text\n    */\n    class BlogPost extends \\yii\\db\\ActiveRecord\n    {\n        /**\n        * @return array\n        */\n        public function behaviors()\n        {\n            return [\n                [\n                    'class' => 'yii\\behaviors\\BlameableBehavior',\n                    'attributes' => [\n                        BaseActiveRecord::EVENT_BEFORE_INSERT => 'author_id',\n                        BaseActiveRecord::EVENT_BEFORE_UPDATE => 'updater_id'\n                    ]\n                ]\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\BlogPost;\n    use app\\models\\User;\n    use Yii;\n    use yii\\helpers\\Html;\n    use yii\\helpers\\VarDumper;\n    use yii\\web\\Controller;\n\n    /**\n    * Class TestController.\n    * @package app\\controllers\n    */\n    class TestController extends Controller\n    {\n        public function actionIndex()\n        {\n            $users = new User();\n            $identity = $users->findIdentity(100);\n\n            Yii::$app->user->setIdentity($identity);\n\n            $blogPost = new BlogPost();\n            $blogPost->title = 'Very pretty title';\n            $blogPost->text = 'Success is not final, failure is not fatal...';\n            $blogPost->save();\n\n            return $this->renderContent(Html::tag('pre', VarDumper::dumpAsString(\n                $blogPost->attributes\n            )));\n        }\n    }\n    ```", "```php\n$model->detachBehavior('blammable');\n```", "```php\n    DROP TABLE IF EXISTS 'blog_post';\n    CREATE TABLE IF NOT EXISTS 'blog_post' (\n        'id' INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'title' VARCHAR(255) NOT NULL,\n        'slug' VARCHAR(255) NOT NULL,\n        'text' TEXT NOT NULL,\n        PRIMARY KEY ('id')\n    );\n    ```", "```php\n    <?php\n\n    namespace app\\models;\n\n    use Yii;\n    use yii\\db\\BaseActiveRecord;\n\n    class BlogPost extends \\yii\\db\\ActiveRecord\n    {\n        // ..\n        public function behaviors()\n        {\n            return [\n                [\n                    'class' => 'yii\\behaviors\\SluggableBehavior',\n                    'attribute' => 'title',\n                    'slugAttribute' => 'slug',\n                    'immutable'=> false,\n                    'ensureUnique' => true\n                ]\n            ];\n        }\n        // ..\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\BlogPost;\n    use Yii;\n    use yii\\helpers\\Html;\n    use yii\\helpers\\VarDumper;\n    use yii\\web\\Controller;\n\n    /**\n    * Class TestController\n    * @package app\\controllers\n    */\n    class TestController extends Controller\n    {\n        public function actionIndex()\n        {\n            $blogPostA        = new BlogPost();\n            $blogPostA->title = 'Super Quote title 1';\n            $blogPostA->text  = 'The price of success is hard work, dedication to the job at hand';\n            $blogPostA->save();\n\n            $blogPostB        = new BlogPost();\n            $blogPostB->title = 'Super Quote title 2';\n            $blogPostB->text  = 'Happiness lies in the joy of achievement...';\n            $blogPostB->save();\n\n            return $this->renderContent(\n                '<pre>' .\n                VarDumper::dumpAsString(\n                  $blogPostA->attributes\n              ).\n              VarDumper::dumpAsString(\n                  $blogPostB->attributes\n              ) .\n              '</pre>'\n          );\n      }\n    }\n    ```", "```php\n    /**\n    * @param $slug\n    *\n    * @return string\n    * @throws NotFoundHttpException\n    */\n    public function actionSlug($slug)\n    {\n        $model = BlogPost::findOne(['slug'=>$slug]);\n\n        if ($model === null) {\n            throw new NotFoundHttpException('The requested page does not exist.');\n        }\n\n        return $this->render('view', [\n            'model' => $model,\n            ]);\n    }\n    ```", "```php\n    //..\n    'urlManager' => [\n        'enablePrettyUrl' => true,\n        'rules' => [\n            'blog-post' => 'blog-post/index',\n            'blog-post/index' => 'blog-post/index',\n            'blog-post/create' => 'blog-post/create',\n            'blog-post/view/<id:\\d+>' => 'blog-post/view',\n            'blog-post/update/<id:\\d+>' => 'blog-post/update',\n            'blog-post/delete/<id:\\d+>' => 'blog-post/delete',\n            'blog-post/<slug>' => 'blog-post/slug',\n            'defaultRoute' => '/site/index',\n        ],\n    ]\n    //..\n    ```", "```php\n    ./yii migrate/create create_account_table\n    ```", "```php\n    <?php\n\n    use yii\\db\\Schema;\n    use yii\\db\\Migration;\n\n    class m150620_062034_create_account_table extends Migration\n    {\n        const TABLE_NAME = '{{%account}}';\n\n        public function up()\n        {\n            $tableOptions = null;\n            if ($this->db->driverName === 'mysql') {\n                $tableOptions = 'CHARACTER SET utf8 COLLATE utf8_general_ci ENGINE=InnoDB';\n           }\n\n           $this->createTable(self::TABLE_NAME, [\n               'id' => Schema::TYPE_PK,\n               'balance' => ' NUMERIC(15,2) DEFAULT NULL',\n           ], $tableOptions);\n\n        }\n\n        public function down()\n        {\n            $this->dropTable(self::TABLE_NAME);\n        }\n    }\n    ```", "```php\n    ./yii migrate up\n    ```", "```php\n    ./yii migrate/create add_account_records\n    ```", "```php\n    <?php\n\n    use yii\\db\\Migration;\n    use app\\models\\Account;\n\n    class m150620_063252_add_account_records extends Migration\n    {\n        public function up()\n        {\n            $accountFirst = new Account();\n            $accountFirst->balance = 1110;\n            $accountFirst->save();\n\n            $accountSecond = new Account();\n            $accountSecond->balance = 779;\n            $accountSecond->save();\n\n            $accountThird = new Account();\n            $accountThird->balance = 568;\n            $accountThird->save();\n            return true;\n        }\n\n        public function down()\n        {\n            $this->truncateTable('{{%account}}');\n            return false;\n        }\n    }\n    ```", "```php\n    public function rules()\n    {\n        return [\n            //..\n            [['balance'], 'number', 'min' => 0],\n            //..\n        ];\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\Account;\n    use Yii;\n    use yii\\db\\Exception;\n    use yii\\helpers\\Html;\n    use yii\\helpers\\VarDumper;\n    use yii\\web\\Controller;\n\n    class TestController extends Controller\n    {\n\n        public function actionSuccess()\n        {\n            $transaction = Yii::$app->db->beginTransaction();\n\n            try {\n                $recipient = Account::findOne(1);\n                $sender    = Account::findOne(2);\n\n                $transferAmount = 177;\n                $recipient->balance += $transferAmount;\n                $sender->balance -= $transferAmount;\n\n                if ($sender->save() && $recipient->save()) {\n                    $transaction->commit();\n\n                    return $this->renderContent(\n                        Html::tag('h1', 'Money transfer was successfully')\n                    );\n                } else {\n                    $transaction->rollBack();\n                    throw new Exception('Money transfer failed:' .\n                    VarDumper::dumpAsString($sender->getErrors()) .\n                    VarDumper::dumpAsString($recipient->getErrors())\n                    );\n                }\n            } catch ( Exception $e ) {\n                $transaction->rollBack();\n                throw $e;\n            }\n        }\n\n        public function actionError()\n        {\n            $transaction = Yii::$app->db->beginTransaction();\n\n            try {\n                $recipient = Account::findOne(1);\n                $sender    = Account::findOne(3);\n\n                $transferAmount = 1000;\n                $recipient->balance += $transferAmount;\n                $sender->balance -= $transferAmount;\n\n                if ($sender->save() && $recipient->save()) {\n                    $transaction->commit();\n\n                    return $this->renderContent(\n                        Html::tag('h1', 'Money transfer was successfully')\n                    );\n                } else {\n                    $transaction->rollBack();\n\n                    throw new Exception('Money transfer failed: ' .\n                    VarDumper::dumpAsString($sender->getErrors()) .\n                    VarDumper::dumpAsString($recipient->getErrors())\n                   );\n               }\n\n            } catch ( Exception $e ) {\n                $transaction->rollBack();\n                throw $e;\n            }\n        }\n    }\n    ```", "```php\n    DROP TABLE IF EXISTS 'blog_post';\n    CREATE TABLE IF NOT EXISTS 'blog_post' (\n        'id' INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'title' VARCHAR(255) NOT NULL,\n        'text' TEXT NOT NULL,\n        'created_at' INTEGER,\n        'modified_at'INTEGER,\n         PRIMARY KEY  ('id')\n    );\n    ```", "```php\n    'components' =>\n        // ..\n        'db' => [\n            'class' => 'yii\\db\\Connection',\n\n            'dsn' => 'mysql:host=4.4.4.4;dbname=masterdb',\n            'username' => 'master',\n            'password' => 'pass',\n            'charset' => 'utf8',\n\n            'slaveConfig' => [\n                'username' => 'slave',\n                'password' => 'pass',\n            ],\n\n            // list of slave configurations\n            'slaves' => [\n                ['dsn' => 'mysql:host=5.5.5.5;dbname=slavedb']\n            ]\n        ],\n        // ..\n    ]\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\BlogPost;\n    use Yii;\n    use yii\\helpers\\Html;\n    use yii\\helpers\\VarDumper;\n    use yii\\web\\Controller;\n\n    /**\n    * Class TestController\n    * @package app\\controllers\n    */\n    class TestController extends Controller\n    {\n        public function actionIndex(){\n\n            $masterModel = new BlogPost();\n            $masterModel->title = 'Awesome';\n            $masterModel->text = 'Something is going on..';\n            $masterModel->save();\n\n            $postId = $masterModel->id;\n\n            $replModel = BlogPost::findOne($postId);\n\n            return $this->renderContent(\n                Html::tag('h2', 'Master') .\n                Html::tag('pre', VarDumper::dumpAsString(\n                    $masterModel\n                       ? $masterModel->attributes\n                       : null\n                )) .\n                Html::tag('h2', 'Slave') .\n                Html::tag('pre', VarDumper::dumpAsString(\n                    $replModel\n                        ? $replModel->attributes\n                        : null\n\n                ))\n            );\n        }\n\n    }\n    ```", "```php\n    DROP TABLE IF EXISTS 'car';\n    CREATE TABLE 'car' (\n        'id' int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n        'name' varchar(255) NOT NULL,\n        'type' varchar(100) NOT NULL,\n         PRIMARY KEY ('id')\n    );\n\n    INSERT INTO 'car' ('name', 'type')\n    VALUES ('Ford Focus', 'family'),\n    ('Opel Astra', 'family'),\n    ('Kia Ceed', 'family'),\n    ('Porsche Boxster', 'sport'),\n    ('Ferrari 550', 'sport');\n    ```", "```php\n    /**\n    * @var\n    */\n    public $type;\n\n    /**\n    * @param \\yii\\db\\QueryBuilder $builder\n    *\n    * @return \\yii\\db\\Query\n    */\n    public function prepare($builder)\n        {\n            if ($this->type !== null) {\n                $this->andWhere(['type' => $this->type]);\n            }\n            return parent::prepare($builder);\n        }\n    ```", "```php\n    <?php\n\n    namespace app\\models;\n\n    use Yii;\n\n    /**\n    * Class SportCar\n    * @package app\\models\n    */\n    class SportCar extends Car\n    {\n        const TYPE = 'sport';\n\n        /**\n        * @return CarQuery\n        */\n        public static function find()\n        {\n            return new CarQuery(get_called_class(), ['where' => ['type' => self::TYPE]]);\n        }\n\n        /**\n        * @param bool $insert\n        *\n        * @return bool\n        */\n        public function beforeSave($insert)\n        {\n            $this->type = self::TYPE;\n            return parent::beforeSave($insert);\n        }\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\models;\n\n    use Yii;\n\n    /**\n    * Class FamilyCar\n    * @package app\\models\n    */\n    class FamilyCar extends Car\n    {\n        const TYPE = 'family';\n\n        /**\n        * @return CarQuery\n        */\n        public static function find()\n        {\n            return new CarQuery(get_called_class(), ['where' => ['type' => self::TYPE]]);\n        }\n\n        /**\n        * @param bool $insert\n        *\n        * @return bool\n        */\n        public function beforeSave($insert)\n        {\n            $this->type = self::TYPE;\n            return parent::beforeSave($insert);\n        }\n    }\n    ```", "```php\n        /**\n        * @param array $row\n        *\n        * @return Car|FamilyCar|SportCar\n        */\n        public static function instantiate($row)\n        {\n            switch ($row['type']) {\n                case SportCar::TYPE:\n                    return new SportCar();\n                case FamilyCar::TYPE:\n                    return new FamilyCar();\n                default:\n                    return new self;\n            }\n        }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\Car;\n    use app\\models\\FamilyCar;\n    use Yii;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n\n    /**\n    * Class TestController\n    * @package app\\controllers\n    */\n    class TestController extends Controller\n    {\n        public function actionIndex()\n        {\n            echo Html::tag('h1', 'All cars');\n\n            $cars = Car::find()->all();\n            foreach ($cars as $car) {\n                // Each car can be of class Car, SportCar or FamilyCar\n                echo get_class($car).' '.$car->name.\"<br />\";\n            }\n\n            echo Html::tag('h1', 'Family cars');\n\n            $familyCars = FamilyCar::find()->all();\n            foreach($familyCars as $car)\n            {\n                // Each car should be FamilyCar\n                echo get_class($car).' '.$car->name.\"<br />\";\n            }\n        }\n    }\n    ```"]