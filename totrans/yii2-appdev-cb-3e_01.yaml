- en: Chapter 1. Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency injection container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service locator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using external code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover how to install Yii Framework and about possible
    techniques of installation. We will introduce you to application templates: basic
    and advanced and their difference between them. Then you will learn about dependency
    injection container. This chapter contains info about model events, which trigger
    after some actions such as model saving, updating and others. We will learn how
    to use external code which will include ZendFramework, Laravel, or Symfony. We
    will also be learning about how to update your `yii-1.x.x` based application to
    `yii2` step-by-step.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 is a modern PHP framework provided as a Composer package. In this recipe,
    we will install the framework via the Composer package manager and configure the
    database connection for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, install the Composer package manager on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: If you use the OpenServer application on Windows, than the `composer`
    command already exists in the OpenServer terminal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Mac or Linux download the installer from [https://getcomposer.org/download/](https://getcomposer.org/download/)
    and install it globally by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In Windows without OpenServer download and run `Composer-Setup.exe` from the
    [https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md)
    page.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have administrative privileges on the system then as an alternative
    you can just download the [https://getcomposer.org/composer.phar](https://getcomposer.org/composer.phar)
    raw file and use the `php composer.phar` call instead of single the `composer`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation run in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or (if you just download archive) its alternative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When the installation succeeds you will see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Right now you can install any package from the [https://packagist.org](https://packagist.org)
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can install basic or advanced application templates. In order to learn about
    the differences between the templates see the *Application templates* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that during installation the Composer package manager gets a lot of information
    from the GitHub site. GitHub may limit requests for anonymous users. In this case
    Composer asks you to input your access token. You should just register the [https://github.com](https://github.com)
    site and generate a new token via the [https://github.com/blog/1509-personal-api-tokens](https://github.com/blog/1509-personal-api-tokens)
    guide.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a basic project template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Carry out the following steps for installing basic project template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the first step open your terminal and install **Bower-to-Composer** adapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It provides a simple way to load related non-PHP packages (JavaScript and CSS)
    from the Bower repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new application in the new `basic` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that your PHP contains the required extensions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: PHP in command-mode and in web-interface mode can use different `php.ini`
    files with different configurations and different extensions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new database (if it is needle for your project) and configure it in
    the `config/db.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try to run application via the following console command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check in your browser that the application works by the `http://localhost:8080`
    address:![Installing a basic project template](img/image00451.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For permanent working create a new host in your server (Apache, Nginx, and so
    on) and set the `web` directory as a document root of the host.
  prefs: []
  type: TYPE_NORMAL
- en: Installing advanced project template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Carry out the following steps for installing advanced project template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the first step open your terminal install Bower-to-Composer adapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It provides a simple way to load related non-PHP packages (JavaScript and CSS)
    from the Bower repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new application in the new `basic` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The new application does not contains local configuration files and `index.php`
    entry scripts yet. To generate the files just `init` a working environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: During initialization select the **Development** environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check that your PHP contains the required extensions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: PHP in **command-line** mode and in **web-interface** mode can use
    different `php.ini` files with different configuration and different extensions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new database and configure it in the generated `common/config/main-local.php`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Apply the application migrations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will automatically create a `user` table in your database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try to run a frontend application by the following console command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then run the backend in an other terminal window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check in your browser that the application works via the `http://localhost:8080`
    and `http://localhost:8090` addresses:![Installing advanced project template](img/image00455.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two new hosts for backend and frontend application in your server (Apache,
    Nginx, and so on) and set the `backend/web` and `frontend/web` directories as
    document roots of the hosts.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we installed the Composer package manager and the Bower asset
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: After we installed the application via the `composer create-project` command,
    the command creates a new empty directory, clones the source code of application
    template and loads all its inner dependencies (framework and other components)
    into the `vendor` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: If needed, we will initialize application configuration and set up a new database.
  prefs: []
  type: TYPE_NORMAL
- en: We can check system requirements via running the `requirements.php` script in
    console or browser mode.
  prefs: []
  type: TYPE_NORMAL
- en: And after cloning of the code we can configure our own PHP server to work with
    the `web` directories as the server's document roots.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about installing `yii2-app-basic` refer to, [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to, [https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md](https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md)
    for `yii2-app-advanced`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to, [https://getcomposer.org](https://getcomposer.org) for the Composer
    package manager.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For creating a GitHub access token for Composer refer to [https://github.com/blog/1509-personal-api-tokens](https://github.com/blog/1509-personal-api-tokens).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Yii2 has two application templates for development: basic and advanced. What
    is the difference between basic and advanced templates?'
  prefs: []
  type: TYPE_NORMAL
- en: The names are confusing. Some people in the end choose basic because advanced
    may sound repulsive. In this chapter we will look at the differences.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the *Installing the framework* recipe's *How to do it…* section
    to understand and learn how to install different templates.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The advanced template has a custom system of configurations. It is developed
    so that a team can work together on a project but each developer can customize
    their own configurations for development, testing, and other environments.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration environments can be complicated and normally aren't used when
    you develop alone.
  prefs: []
  type: TYPE_NORMAL
- en: The advanced template has frontend and backend folders for the frontend and
    backend parts of the web application accordingly. So you can configure a separate
    host for each folder and thereby isolate the frontend and backend part.
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple way to organize files into directories and configure the web
    server. You can easily do the same thing in the basic template.
  prefs: []
  type: TYPE_NORMAL
- en: Neither front/back-end separation nor user management is on its own a good reason
    to choose the advanced template. It's better to adapt these features to your app—you'll
    learn more and won't get the difficult config problem.
  prefs: []
  type: TYPE_NORMAL
- en: If you will be working on the project with a team and you might need configuration
    flexibility, use different environments to develop and in this case a better choice
    would be the advanced application template. If you will be working alone and your
    project is simple you should choose the basic application template.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Dependency Inversion Principle** (**DIP**) suggests we create modular low-coupling
    code with the help of extracting clear abstraction subsystems.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to simplify a big class you can split it into many
    chunks of routine code and extract every chunk into a new simple separated class.
  prefs: []
  type: TYPE_NORMAL
- en: The principle says that your low-level chunks should implement an all-sufficient
    and clear abstraction, and high-level code should work only with this abstraction
    and not low-level implementation.
  prefs: []
  type: TYPE_NORMAL
- en: When we split a big multitask class into small specialized classes, we face
    the issue of creating dependent objects and injecting them into each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we could create one instance before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And after splitting we will create or get all dependent items and build our
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Dependency injection container is a factory that allows us to not care about
    building our objects. In Yii2 we can configure a container only once and use it
    for retrieving our service like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we ask the container to inject it as a dependency in the constructor of
    an other service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When we will get the `OtherService` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In all cases the container will resolve all dependencies and inject dependent
    objects in each other.
  prefs: []
  type: TYPE_NORMAL
- en: In the recipe we create shopping cart with storage subsystem and inject the
    cart automatically into controller.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a shopping cart class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It will work only with own items. Instead of built-in storing items to session
    it will delegate this responsibility to any external storage class, which will
    implement the `StorageInterface` interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cart class just gets the storage object in its own constructor, saves it
    instance into private `$storage` field and calls its `load()` and `save()` methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a common cart storage interface with the required methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a simple storage implementation. It will store selected items in a server
    session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The storage gets any framework session instance in the constructor and uses
    it later for retrieving and storing items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the `ShoppingCart` class and its dependencies in the `config/web.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the cart controller with an extended constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `views/cart/index.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `views/cart/add.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add link items into the main menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the cart page and try to add rows:![How to do it…](img/image00448.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this case we have the main `ShoppingCart` class with a low-level dependency,
    defined by an abstraction interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'And we have some an implementation of the abstraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now we can create an instance of the cart manually like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: It allows us to create a lot of different implementations such as `SessionStorage`,
    `CookieStorage`, or `DbStorage`. And we can reuse the framework-independent `ShoppingCart`
    class with `StorageInterface` in different projects and different frameworks.
    We must only implement the storage class with the interface's methods for needed
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: But instead of manually creating an instance with all dependencies, we can use
    a dependency injection container.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default the container parses the constructors of all classes and recursively
    creates all the required instances. For example, if we have four classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We can retrieve the instance of class `A` in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: And the container automatically creates instances of the `B`, `D`, `C`, and
    `A` classes and injects them into each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case we mark the cart instance as a singleton:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This means that the container will return a single instance for every repeated
    call instead of creating the cart again and again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides, our `ShoppingCart` has the `StorageInterface` type in its own constructor
    and the container does know what class it must instantiate for this type. We must
    manually bind the class to the interface like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'But our `SessionStorage` class has non-standard constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore we use an anonymous function to manually creatie the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'And after all we can retrieve the cart object from the container manually in
    our own controllers, widgets, and other places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'But every controller and other object will be created via the `createObject`
    method inside the framework. And we can use injection of cart via the controller
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Use this injected cart object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about DIP refer to [https://en.wikipedia.org/wiki/Dependency_inversion_principle](https://en.wikipedia.org/wiki/Dependency_inversion_principle)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to learn more about dependency injection container refer to [http://www.yiiframework.com/doc-2.0/guide-concept-di-container.html](http://www.yiiframework.com/doc-2.0/guide-concept-di-container.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service locator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of manually creating instances of different shared services (application
    components) we can get them from a special global object, which contains configurations
    and instances of all components.
  prefs: []
  type: TYPE_NORMAL
- en: A service locator is a global object that contains a list of components or definitions,
    uniquely identified by an ID, and allow us to retrieve any needed instance by
    its ID. The locator creates a single instance of the component on-the-fly at the
    first call and returns a previous instance at the subsequent calls.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a shopping cart component and will write a cart
    controller for working with it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create a shopping cart component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a shopping cart component. It will store selected items in a user session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the `ShoppingCart` in service locator as an application component
    in the `config/web.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a cart controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `views`/`cart`/`index.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `views`/`cart`/`add.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a link item into the main menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the cart page and try to add rows:![How to do it…](img/image00458.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all we created our own class with a public `sessionKey` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, we added the component definition into the `components` section of
    the configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now we can retrieve the component instance in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: And we can use this object in our own controllers, widgets, and other places.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we call any component such as `cart`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We call the virtual property of the `Application` class instance in the `Yii::$app`
    static variable. But the `yii\base\Application` class extends the `yii\base\Module`
    class, which extends the `yii\di\ServiceLocator` class with the `__get` magic
    method. This magic method just calls the `get()` method of the `yii\di\ServiceLocator`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result it is an alternative to directly calling the service via the `get`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: When we get a component from the `get` method of service locator, the locator
    finds needed definition in its `_definitions` list and if successful it creates
    a new object by the definition on the fly, registers it in its own list of complete
    instances `_components` and returns the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we get some component, multiplying the locator will always return the previous
    saved instance again and again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: It allows us to use the shared single cart instance `Yii::$app->cart` or single
    database connection `Yii::$app->db` instead of creating one large set from scratch
    again and again.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about the service locator and about core framework components
    refer to [http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html](http://www.yiiframework.com/doc-2.0/guide-concept-service-locator.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring components* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating components* recipe in [Chapter 8](part0086.xhtml#2I0GC1-ae331331bc644dc9b658d3634f0748da
    "Chapter 8. Extending Yii"), *Extending Yii*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 provides the powerful module Gii to generate models, controllers, and views,
    which you can easily modify and customize. It's a really helpful tool for fast
    and quick development.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will explore how to use Gii and generate code. For example
    you have a database with one table named `film` and you would like to create an
    application with CRUD operations for this table. It's easy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Sakila database from [http://dev.mysql.com/doc/index-other.html](http://dev.mysql.com/doc/index-other.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the downloaded SQLs: first the schema then the data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the database connection in `config/main.php` to use the Sakila database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your web-server by `./yii serve`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to `http://localhost:8080/index.php?r=gii` and select **Model Generator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out **Table Name** as `actor` and **Model Class** as `Actor` and press
    button **Generate** at the bottom of page.![How to do it…](img/image00463.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return tothe main Gii menu by clicking the **yii code generator** logo on the
    header and choose **CRUD Generator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the **Model Class** field as `app\models\Actor` and **Controller Class**
    as `app\controllers\ActorController`.![How to do it…](img/image00466.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the **Preview** button at the bottom of page and then press green button
    **Generate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the result via `http://localhost:8080/index.php?actor/create`.![How to
    do it…](img/image00480.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you check your project structure you will see autogenerated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00471.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Firstly we've created an `Actor` model. Gii automatically creates all model
    rules which depends on `mysql` field types. For example, if in your MySQL `actor`
    table's fields `first_name` and `last_name` have `IS NOT NULL` flag then Yii automatically
    creates rule for it `required` and sets max length `45` symbols because in our
    database max length of this field is set up as `45`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Also Yii creates relationship between models automatically, based on foreign
    keys you added to your database. In our case two relations were created automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This relationship has been created because we have two foreign keys in our database.
    The `film_actor` table has foreign key `fk_film_actor_actor` which points to `actor`
    table fields `actor_id` and `fk_film_actor_film` which points to `film` table
    field `film_id`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you haven't generated `FilmActor` model yet. So if you would develop
    full-app versus demo you had to generate `Film`, `FilmActor` models also. For
    the rest of the pieces, refer to [http://www.yiiframework.com/doc-2.0/guide-start-gii.html](http://www.yiiframework.com/doc-2.0/guide-start-gii.html).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii is a very customizable framework. Moreover, as in all customizable code,
    there should be a convenient way to set up different application parts. In Yii,
    this is provided through configuration files located at `config`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have worked with Yii before, then you have probably configured a database
    connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This way of configuring components is used when you want to use a component
    across all application parts. With the preceding configuration, you can access
    a component by its name, such as `Yii::$app->db`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are using the `Yii::$app->db` component for the first time directly
    or through an Active Record model, Yii creates a component and initializes its
    public properties with the corresponding values provided in `db` array under the
    `components` section of the application configuration file. In the preceding code,
    `dsn` value will be assigned to `yii\db\Connection::dsn`, `username` will be assigned
    to `Connection::username`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out what `charset` stands for or want to know what else
    you can configure in the `db` component, then you need to know its class. In the
    case of the `db` component, the class is `yii\db\Connection`. You can just open
    the class and look for its public properties, which you can set from config.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, the `class` property is a bit special because it is
    used to specify the component class name. It does not exist in the `yii\db\Connection`
    class. Therefore, it can be used to override a class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This way, you can override each application component; this is very useful whenever
    a standard component does not fit your application.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s find out which standard Yii application components you can configure.
    There are two application types bundled with Yii:'
  prefs: []
  type: TYPE_NORMAL
- en: Web application (`yii\webApplication`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Console application (`yii\console\Application`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both are extended from `yii\base\Application`, so both console and web applications
    share its components.
  prefs: []
  type: TYPE_NORMAL
- en: You can get the component names from the source code of the `coreComponents()`
    application's method.
  prefs: []
  type: TYPE_NORMAL
- en: You can add your own application components (classes extended from `yii\base\Component`)
    by simply adding new configuration items and pointing their class properties to
    your custom classes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both console and web application components are listed in the list at [http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html](http://www.yiiframework.com/doc-2.0/guide-structure-application-components.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on creating your own components see:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Service locator* recipe
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating components* recipe in [Chapter 8](part0086.xhtml#2I0GC1-ae331331bc644dc9b658d3634f0748da
    "Chapter 8. Extending Yii"), *Extending Yii*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii's events provide a simple implementation, which allows you to listen and
    subscribe to various events that occur in your web-application. For example, you
    may wish to send a notification about a new article to followers each time you
    publish new material.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following SQL code on your server to create the `article` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate the `Article` model using Gii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your webserver by `./yii serve` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add an action test to `\controllers\SiteController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the `config/web.php` component `mailer` using the following code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run this URL in your browser: `http://localhost:8080/index.php?r=site/test`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also check `http://www.fakemailgenerator.com/inbox/teleworm.u``s/john2/`.![How
    to do it…](img/image00510.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've created an `Article` model and added a handler for the `ActiveRecord::EVENT_AFTER_INSERT`
    event to our `Article` model. It means that every time we save a new article an
    event is triggered and our attached handler will be called.
  prefs: []
  type: TYPE_NORMAL
- en: In the real-world, we would like to notify our blog followers each time we publish
    a new article. In a real application we would have a `follower` or `user` table
    and with different blog sections not only single blog. In this example, after
    saving our model we notify our followers `john2@teleworm.us`, `shivawhite@cuvox.de`,
    and `kate@dayrep.com`. In the last step we just prove that users have received
    our notifications, particularly `john2`. You can create your own event with any
    name. In this example we use a built-in event called `ActiveRecord::EVENT_AFTER_INSERT`,
    which is called after each insert to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can create our own event. Just add a new `actionTestNew` with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Also add the `EVENT_OUR_CUSTOM_EVENT` constant to `models/Article` as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Run `http://localhost:8080/index.php?r=site/test-new`.
  prefs: []
  type: TYPE_NORMAL
- en: You should see the same result and all notifications to followers will be sent
    again. The main difference is we used our custom event name.
  prefs: []
  type: TYPE_NORMAL
- en: After the save, we've triggered our event. Events may be triggered by calling
    the `yii\base\Component::trigger()` method. The method requires an event name,
    and optionally an event object that describes the parameters to be passed to the
    event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about events refer to [http://www.yiiframework.com/doc-2.0/guide-concept-events.html](http://www.yiiframework.com/doc-2.0/guide-concept-events.html)
  prefs: []
  type: TYPE_NORMAL
- en: Using external code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Package repositories, PSR standards, and social coding provide us with lots
    of high-quality reusable libraries and other components with free licenses. We
    can just install any external component in project instead of reengineering them
    from scratch. It improves development performance and makes for higher-quality
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we will try to attach some libraries manually and via Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a library via Composer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you use NoSQL or other databases without autoincrement primary keys, you
    must generate unique identifiers manually. For example, you can use **Universally
    Unique Identifier** (**UUID**) instead of a numerical one. Let''s do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install [https://github.com/ramsey/uuid](https://github.com/ramsey/uuid) component
    via Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a demonstration console controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And just run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If successful, you''ll see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it! Now you can use the `Ramsey\Uuid\Uuid` class in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing libraries manually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can install a library automatically when it is provided as a Composer package.
    In other cases we must install it manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, create some library examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `awesome/namespaced/Library.php` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `old/OldLibrary.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a set of functions as an `old/functions.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And now set up this file in our application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define the new alias for the `awesome` library namespace root in the `config/web.php`
    file (in `aliases` section):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'or via the `setAlias` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a simple class file path at the top of the `config/web.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure autoloading of the `functions.php` file in `composer.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And apply the changes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And now create an example controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And open the page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Installing libraries manually](img/image00524.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Using Yii2 code in other frameworks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to use Yii2 framework code with other frameworks just add Yii2-specific
    parameters in `composer.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'And install the framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the entry script of your application (on ZendFramework, Laravel, Symfony,
    and many more), require the Yii2 autoloader, and create the Yii application instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: That's it! Now you can use Yii::$app instances, models, widgets and other components
    from Yii2.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first case we just install a new Composer package in our project and
    use it, because its `composer.json` file defines all aspects of `autoloading`
    library files.
  prefs: []
  type: TYPE_NORMAL
- en: But in the second case we did not have Composer packages and registered the
    files in the autoloading mechanism manually. In Yii2 we can use aliases and `Yii::$classMap`
    for registering the roots of PSR-4 namespaces and for single files.
  prefs: []
  type: TYPE_NORMAL
- en: 'But as an alternative we can use Composer autoloader for all cases. Just define
    an extended `autoload` section in the `composer.json` file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the changes using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now you can remove aliases and `$classMap` definitions from your configuration
    files and ensure the example page still works correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00479.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This example completely uses Composer's autoloader instead of the framework's
    autoloader.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about integrating external code in Yii2 and framework code
    into our projects see the guide at [http://www.yiiframework.com/doc-2.0/guide-tutorial-yii-integration.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-yii-integration.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more on aliases refer to [http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html](http://www.yiiframework.com/doc-2.0/guide-concept-aliases.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more on the `autoload` section of `composer.json` refer to [https://getcomposer.org/doc/01-basic-usage.md#autoloading](https://getcomposer.org/doc/01-basic-usage.md#autoloading)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And also you can browse or search any Composer packages on [https://packagist.org](https://packagist.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
