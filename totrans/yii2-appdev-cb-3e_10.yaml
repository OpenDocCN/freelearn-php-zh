- en: Chapter 10. Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Yii directory layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving an application webroot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing an advanced application template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving configuration parts into separate files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multiple configurations to simplify the deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and executing cron jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover various tips that are especially useful during
    application deployment; these tips will also come in handy when developing an
    application in a team or when you just want to make your development environment
    more comfortable.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Yii directory layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, we have the Basic and Advanced Yii2 application skeletons with different
    directory structures. But these structures are not dogmatic, and we can customize
    them if required.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can move the runtime directory out of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer the package
    manager, as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing the location of the runtime directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open `config/web.php` and `config/console.php` and define the `runtimePath`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Move the runtime directory to the new location.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the location of the vendor directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open `config/web.php` and `config/console.php` and define the `vendorPath`
    parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Move the `vendor` directory with the `composer.json` and `composer.lock` files
    to the new location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `web/index.php` and `yii` files and find these rows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the including paths.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing the location of the controllers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rename the `commands` directory to `console`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the namespace of `app\commands\HelloController` to `app\console\HelloController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `config/console.php` and redefine the `controllerNamespace` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Changing the locations of the views directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open `config/web.php` and define `viewPath` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rename your `views` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `yii\base\Application::preInit` method our application defines `basePath`,
    `runtimePath`, and `vendorPath` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: By default, these values lead to the root application directory, `runtime` and
    `vendor` path in the root respectively.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can redefine `vendorPath` if you want to share the vendor directory
    with some instances of the same projects. But take care of the package's versions
    compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `yii\base\Application` class extends `yii\base\Module`, which contains
    the `controllerNamespace` and `viewPath` parameters. The first one allows you
    to change the base namespace of the application and modules. It is helpful if
    you want to provide frontend and backend controllers in the same module directory.
    Just change the `controllers` directory to frontend and backend or create subdirectories
    and configure your frontend and backend applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about application structures, refer to [http://www.yiiframework.com/doc-2.0/guide-structure-applications.html](http://www.yiiframework.com/doc-2.0/guide-structure-applications.html).
  prefs: []
  type: TYPE_NORMAL
- en: Moving an application webroot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Yii2 applications work from the `web` directory for your site's
    entry script. But shared hosting environments are often quite limited when it
    comes to the configuration and directory structure. You cannot change the working
    directory for your site. Most servers provide only the `public_html` directory
    for your site entry scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's discuss the ways to move an application webroot.
  prefs: []
  type: TYPE_NORMAL
- en: Placing files in the root
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Upload the application files into your hosting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `web` directory to `public_html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the site works correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Placing files in a subdirectory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A hosting user directory may contain other files and folders. Here''s how you
    can move files to a subdirectory:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `application` and `public_html` directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the application files to the `application` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the content of the `application/web` directory to `public_html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `public_html/index.php` file and change the include paths:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Yii2 application automatically sets the `@web` and `@webroot` alias paths
    on the base of the entry script location. Therefore we can easily move or rename
    a `web` directory without changing the application configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `yii2-app-advanced`, you can move the `web` directory content from `backend`
    to a subdirectory, such as `admin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get more information on installing Yii on a shared hosting environment, refer
    to [http://www.yiiframework.com/doc-2.0/guide-tutorial-shared-hosting.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-shared-hosting.html).
  prefs: []
  type: TYPE_NORMAL
- en: Changing an advanced application template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Yii2's Advanced template has `console`, `frontend`, and `backend`
    applications. However, in your specific case, you can rename the existing ones
    and create your own applications. For example you can add the `api` application
    if you develop an API for your site.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-advanced` project by using the Composer package manager,
    as described in the official guide at [https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md](https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy the `backend` directory content to a new `api` directory in the root of
    your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `api/config/main.php` file and change the `controllerNamespace` option
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `api/assets/AppAsset.php` and `api/controllers/SiteController.php` and
    change the namespaces from `backend` to `api` like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `api/views/layouts/main.php` file and find the following row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change it to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `common/config/bootstrap.php` and add the `@api` alias for the new application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `environments` directory, and in the `dev` and `prod` subdirectories
    make the `api` directories copies of `backend`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `environments/index.php` file and add rows for the `api` application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you have the `console`, `frontend`, `backend`, and `api` applications.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Advanced application template is a set of applications with custom aliases,
    such as `@frontend`, `@backend`, `@common`, and `@console` and corresponding namespaces
    instead of the simple `@app` alias for the `Basic` template.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily add, remove, or rename this applications (with their aliases
    and namespaces) if needed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For getting more information about the usage of application directory structures
    refer to [https://github.com/yiisoft/yii2-app-advanced/tree/master/docs/guide](https://github.com/yiisoft/yii2-app-advanced/tree/master/docs/guide).
  prefs: []
  type: TYPE_NORMAL
- en: Moving configuration parts into separate files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the basic application template we have separated web and console configuration
    files. And usually we set some application components in the both the configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, when we develop a big application, we may face some inconvenience.
    For example, if we need to adjust some settings, we would most probably end up
    repeating the changes in both the web application config and console application
    config.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `config/web.php` file and add the `urlManager` section to the components
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `config/urlRules.php` file and move rules array into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the rule array with the file that requires this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding technique relies on the fact that Yii configuration files are
    native PHP files with arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the `require` construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When we use this, it reads the file specified, and, if there is a `return` statement
    inside this file, it returns a value.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, moving a part out of the main configuration file into a separate
    file requires creating a separate file, moving the configuration part into it
    right after the `return` statement, and using `require` in the main configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: If separate applications (in our example, these are web applications and console
    applications) require some common configuration parts, then we can use `require`
    to move them into a separate file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to learn more about PHP `require` and `include` statements, refer
    to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://php.net/manual/en/function.require.php](http://php.net/manual/en/function.require.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://php.net/manual/en/function.include.php](http://php.net/manual/en/function.include.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multiple configurations to simplify the deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Advanced application template uses different configuration files for each
    of its applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Each entry `web/index.php` script merges own set of configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Each `config/main.php` file merges parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This system allows you to configure both common and specific application properties
    and components of our applications. And we can store default configuration files
    on the version control system and ignore all the `*-local.php` files.
  prefs: []
  type: TYPE_NORMAL
- en: All local files templates are prepared in the `environments` directory. When
    you run `php init` in your console and choose a needle environment, this initialization
    script makes copies of the corresponded files and places them into target folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'But the Basic application template does not contain an agile configuration
    system and provides only the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Let's try to add an advanced configuration system to the `yii2-app` `-basic`
    application template.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the `config/common.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `config/common-local` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remove the `config/db.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove repetitive code from `config/console.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `config/console-local.php` file with an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `config/web.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move the `request` configuration into `config/web-local.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the e-mail ID from `config/params.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Paste the ID into `config/params-local.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the `dsn` string from `tests/codeception/config/config.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Put the string into a new `tests/codeception/config/config-local.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add configuration merging to the `web/index.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add configuration merging to the console entry script, `yii`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add configuration merging to the testing configurations of the unit, functional,
    and acceptance tests from `tests/codeception/config`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add configuration merging to the testing environment console''s entry script,
    `tests/codeception/bin/yii`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As a result, you must get the following content in your configuration directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After all, you can add a new `.gitignore` file with this content into your
    `config` and `tests/codeception/config` directories so you can ignore local configuration
    files by the Git version control system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can store common application components configuration in the `config/common.php`
    file and also set specific configurations for web and console applications. You
    can put your temporary and secure configuration data into the `*-local.php` files.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can copy the initialization shell script from `yii2-app-advanced`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `environments` directory and copy your templates into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `environments/index.php` file with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the default `Installer::postCreateProject` configuration from your `composer.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy the `init` and `init.bat` scripts from the Advanced template, [https://github.com/yiisoft/yii2-app-advanced](https://github.com/yiisoft/yii2-app-advanced)
    and you can run the initialization process using the command `php init` after
    the cloning of the project from the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about application configurations refer to [http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html](http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and executing cron jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, an application requires some background tasks, such as regenerating
    a site map or refreshing statistics. A common way to implement this is by using
    cron jobs. When using Yii, there is a way to use a command to run as a job.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to implement both. For our recipe, we will implement
    writing the current timestamp into a `t` `imestamp.txt` file under the protected
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Running the Hello command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us try to run `app\commands\HelloController::actionIndex` as a shell command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the shell in your application directory and execute this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, you also can call the following and ensure that the shell works:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type the following command for the display `hello`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The framework must display some information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the default command action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, run the concrete `index` action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You must now see the default phrase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the command with any parameter and see the response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating your own command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You also can create your own console controllers. For example, create a `commands/CronController.php`
    file with the sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'After all is done, run the command in a shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Then, check the response text and the existence of a new file, namely `timestamp.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the cron schedule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create `/etc/cron.d/myapp` on your Linux server and add the following row to
    run our command at every midnight:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A console command is defined as a controller class that extends from `yii\console\Controller`.
    In the controller class, you define one or more actions that correspond to the
    subcommands of the controller. Within each action, you write code that implements
    the appropriate tasks for that particular sub-command.
  prefs: []
  type: TYPE_NORMAL
- en: When running a command, you need to specify the route to the controller action.
    For example, the route `migrate/create` invokes the sub-command that corresponds
    to the `MigrateController::actionCreate()` action method. If a route offered during
    the execution does not contain an action ID, the default action will be executed
    (as with a web controller).
  prefs: []
  type: TYPE_NORMAL
- en: Take care that your console controllers are placed in the directory defined
    in the `c` `ontrollerNamespace` option in your `web/console.php` config.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For getting more information about Yii2 console commands, refer to [http://www.yiiframework.com/doc-2.0/guide-tutorial-console.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-console.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to learn more about the Cron daemon, refer to [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Changing the Yii directory layout* recipe for `controllerNamespace`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, there is a need to fine tune some application settings or restore
    a database from a backup. When working on tasks such as these, it is not desirable
    to allow everyone to use the application because it can lead to losing the recent
    user messages or showing the application implementation details.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to show everyone except the developer a maintenance
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create `protected/controllers/MaintenanceController.php`.
    We do this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we create a view named `views/maintenance/index.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to add a single line of code to `config/web.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now in order to go into the maintenance mode, you need to create a file named
    `.maintenance` in your site directory. After you do this, you should see this
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to get it back to normal, you just need to delete it. To view the website
    in the maintenance mode, you can create a cookie named `secret` with its value
    equal to `password`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Yii web application offers a way to intercept all the possible requests and
    route these to a single controller action. You can do this by setting `yii\web\Application::catchAll`
    to an array containing the application route as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The maintenance controller itself is nothing special; it just renders a view
    with some text.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need an easy way to turn the maintenance mode on and off. As the application
    config is a regular PHP file, we can achieve it with a simple check to confirm
    the file exists, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, we check for the cookie value to be able to override the maintenance
    mode. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about how to catch all the requests in a Yii application
    and check the production ready solution for maintenance, refer to [http://www.yiiframework.com/doc-2.0/yii-web-application.html#$catchAll-detail](http://www.yiiframework.com/doc-2.0/yii-web-application.html#%24catchAll-detail).
  prefs: []
  type: TYPE_NORMAL
- en: Deployment tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using a version control system such as Git, for your project's code
    and pushing releases into remote repository, you can use Git to deploy code to
    your production server via the `git pull` shell command instead of uploading files
    manually. Also, you can write your own shell script to pull new repository commits,
    update vendors, apply migrations, and do more things.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are many tools available for automating the deployment process.
    In this recipe, we consider the tool named Deployer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a shared remote repository, you can use it for deployment source.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - Preparing the remote host
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go to your remote host and install Composer and `asset-plugin` too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate the SSH key via `ssh-keygen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `~/.ssh/id_rsa.pub` file content into deployment the SSH keys page of
    your repository settings on GitHub, Bitbucket, or other repositories storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try to clone your repository manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the Github address and the list of known hosts if the system asks you to
    do it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step 2 - Preparing the localhost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Install `deploy.phar` globally on your local host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `deploy.php` file with the deployment configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Try to prepare remote project directories structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Step 3 - Adding remote configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the server''s `/var/www/project` directory. It has two subdirectories
    after the initialization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create original files with private configurations in a `shared` directory like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Deployer tool will include these files in every release subdirectory via
    symbolic links.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify your private configuration in `share/config/db.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, specify it in `share/config/params.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the content of `share/web/index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, set the content of the `share/yii` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: We deliberately use the `dirname($_SERVER[''SCRIPT_FILENAME''])`
    code instead of the original `__DIR__` constant because `__DIR__` will return
    incorrect value when the file is included via symbolic link.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: If you use the `yii2-app-advanced` template you can redeclare only the
    `config/main-local.php` and `config/params-local.php` files of every (backend,
    frontend, console, and common) because `web/index.php` and `yii` files will be
    created automatically by the `init` command.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 - Trying to deploy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Come back to the localhost with the `deploy.php` file and run the deploy command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If successful, you will see the deployment report:![Step 4 - Trying to deploy](img/image00469.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deployer created a new release subdirectory on your remote server and added
    symlinks from your project to the shared items and from the `current` directory
    to the current release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After all is done, you must set up the `DocumentRoot` of your server in `project/current/web`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If something goes wrong during the deployment process you can roll back to
    the previous working release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `current` directory will lead to your previous release files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the deployment tools do the same tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new release subdirectory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone repository files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make symlinks from the project to shared directories and to local configuration
    files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Composer packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply project migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch the symlink from the server's `DocumentRoot` path to the current release
    directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Deployer tool has predefined recipes for popular frameworks. You can extend
    any existing recipe or write a new one for your specific case.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about Deployer, refer to [http://deployer.org/docs](http://deployer.org/docs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And about creating SSH keys refer to [https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key](https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
