- en: Chapter 13. Debugging and Deploying
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章 调试和部署
- en: One of the most important tasks when working with modern web applications is
    determining what went wrong during the development and runtime of our application.
    Without knowing what went wrong, it's impossible to determine the correct steps
    to correct the problem. Yii2 provides several tools and components that make the
    debugging of our applications painless and simple. In this chapter, we'll explore
    several different ways in which we can debug our applications. We'll also outline
    some of the best practices for the deployment of our Yii2 application once we've
    completed the development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理现代Web应用程序时，最重要的任务之一是确定在应用程序的开发和运行过程中出了什么问题。如果不了解出了什么问题，就无法确定纠正问题的正确步骤。Yii2提供了几个工具和组件，使我们的应用程序调试变得轻松简单。在本章中，我们将探讨几种不同的调试应用程序的方法。我们还将概述完成开发后部署Yii2应用程序的一些最佳实践。
- en: Debugging
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: '**Debugging** is an important process in which we can discover what went wrong
    with our application. Whether we''re solving a problem locally or trying to identify
    an issue in our production, our applications need to be configured to supply us
    with the required information to quickly and effectively identify and resolve
    issues as they arise. In this section, we''ll cover how to enable logging within
    our application, how to benchmark certain sections of code and handler errors,
    and general debugging tools and guidelines.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试**是一个重要的过程，通过这个过程我们可以发现我们的应用程序出了什么问题。无论我们是解决本地的问题还是试图在生产环境中识别问题，我们的应用程序都需要配置为提供所需的信息，以便快速有效地识别和解决出现的问题。在本节中，我们将介绍如何在我们的应用程序中启用日志记录，如何基准测试代码的某些部分和处理错误，以及一般的调试工具和指南。'
- en: Logging
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录
- en: To help us debug our applications, Yii2 comes built with several different logging
    components and log methods that we can implement within our application. To get
    started with logging in Yii2, we first need to implement a log component within
    our application. Yii2 comes with several different components that we can implement
    in concert with one another or disjointedly.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们调试应用程序，Yii2内置了几个不同的日志组件和日志方法，我们可以在应用程序中实现。要开始使用Yii2的日志记录，我们首先需要在应用程序中实现一个日志组件。Yii2提供了几个不同的组件，我们可以将它们一起或独立地实现。
- en: '| Logger Class | Description | Class Reference |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 日志类 | 描述 | 类参考 |'
- en: '| --- | --- | --- |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `yii\log\DbTarget` | Logs information to a database table | [http://www.yiiframework.com/doc-2.0/yii-log-dbtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-dbtarget.html)
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `yii\log\DbTarget` | 将信息记录到数据库表 | [http://www.yiiframework.com/doc-2.0/yii-log-dbtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-dbtarget.html)
    |'
- en: '| `yii\log\EmailTarget` | On logging events, sends an email to a specified
    email address | [http://www.yiiframework.com/doc-2.0/yii-log-emailtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-emailtarget.html)
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `yii\log\EmailTarget` | 在记录事件时，向指定的电子邮件地址发送电子邮件 | [http://www.yiiframework.com/doc-2.0/yii-log-emailtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-emailtarget.html)
    |'
- en: '| `yii\log\FileTarget` | Logs events to a file | [http://www.yiiframework.com/doc-2.0/yii-log-filetarget.html](http://www.yiiframework.com/doc-2.0/yii-log-filetarget.html)
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `yii\log\FileTarget` | 将事件记录到文件 | [http://www.yiiframework.com/doc-2.0/yii-log-filetarget.html](http://www.yiiframework.com/doc-2.0/yii-log-filetarget.html)
    |'
- en: '| `yii\log\SyslogTarget` | Logs events using PHP''s `syslog()` function | [http://www.yiiframework.com/doc-2.0/yii-log-syslogtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-syslogtarget.html)
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `yii\log\SyslogTarget` | 使用PHP的`syslog()`函数记录事件 | [http://www.yiiframework.com/doc-2.0/yii-log-syslogtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-syslogtarget.html)
    |'
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Each of the previously listed loggers have slight variations in their configuration.
    For more information on how to specifically configure each log target, refer to
    the class reference for that logger class.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的每个日志记录器在其配置上都有细微的差异。有关如何具体配置每个日志目标的更多信息，请参阅该日志记录器类的类参考。
- en: 'To enable a log target within our application, we first need to bootstrap the
    log component and then specify the logger target that we want to use within the
    components section of our application configuration, as shown in the following
    example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序中启用日志目标，我们首先需要引导日志组件，然后在应用程序配置的组件部分指定我们想要使用的日志记录器目标，如下例所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In the previous example, we enabled `yii\log\FileTarget` by itself for any error
    and warning log events. Note that multiple loggers can be enabled concurrently
    by specifying additional loggers within the `targets` array.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们通过自身启用了`yii\log\FileTarget`以处理任何错误和警告日志事件。请注意，可以通过在`targets`数组中指定额外的记录器来同时启用多个记录器。
- en: 'Each logging target can be configured to listen to certain events. Yii2 provides
    five distinct events that we can log to and several logging methods that we can
    add to our code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个日志目标都可以配置为监听某些事件。Yii2提供了五个不同的事件，我们可以将它们记录到，以及几个可以添加到我们代码中的日志方法：
- en: '**Error**: This is triggered by `Yii:error()` when a regular error or a fatal
    error occurs. These types of events should be acted upon immediately as they indicate
    failure within the application.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：当发生常规错误或致命错误时，由`Yii:error()`触发。这些类型的事件应立即处理，因为它们表明应用程序中存在失败。'
- en: '**Warning**: This is triggered by `Yii::warning()`. These events indicate that
    something went wrong within the application.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警告**：这是由`Yii::warning()`触发的。这些事件表明应用程序中出现了问题。'
- en: '**Info**: This is triggered by `Yii::info()`. Typically, these events are used
    to log something useful or interesting that has occurred.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息**：这是由`Yii::info()`触发的。通常，这些事件用于记录发生的有用或有趣的事情。'
- en: '**Trace**: This is triggered by `Yii::trace()`, which is usually used during
    development to trace a particular piece of code.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪**：这是由`Yii::trace()`触发的，通常在开发期间用于跟踪特定的代码片段。'
- en: '**Profile**: This is triggered by `Yii::beginProfile()` and `Yii::endProfile()`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能分析**：这是由`Yii::beginProfile()`和`Yii::endProfile()`触发的。'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Most of these methods are simply wrappers around `Yii::log()`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些方法只是`Yii::log()`的包装器。
- en: Each log target can be configured to listen to a specific set of events by specifying
    the `level` property of that logger target, and by default, if the `level` property
    is not specified, Yii2 will process messages of any severity.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个日志目标都可以通过指定该日志目标对象的`level`属性来配置它监听特定的事件集，默认情况下，如果未指定`level`属性，Yii2将处理任何严重性的消息。
- en: 'Each log method shares a similar method signature:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每个日志方法具有类似的方法签名：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Yii2''s log method will allow strings and complex data objects or arrays through
    the `yii\helpers\VarDumper::export()` method. When logging information, it''s
    important that you specify a category, as that category can be searched and filtered
    within our log. As shown in the method signature, Yii2 will log information to
    the `application` category by default. When specifying a category, it''s generally
    good to specify it in a hierarchical way, such as in a slash-like format:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2的日志方法将通过`yii\helpers\VarDumper::export()`方法允许字符串和复杂的数据对象或数组。在记录信息时，指定一个类别非常重要，因为这个类别可以在我们的日志中进行搜索和过滤。正如方法签名所示，Yii2默认将信息记录到`application`类别。在指定类别时，通常最好以分层的方式指定，例如以类似斜杠的格式：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Another effective format is to use the PHP magic method, `__METHOD__`, which
    will return the namespace and method the logger was called in:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有效的格式是使用PHP魔法方法`__METHOD__`，它将返回调用日志记录器的命名空间和方法：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Within our logger components, we can specify which categories we want our logger
    to handle by specifying the `categories` parameter. The categories parameter can
    be configured to listen to specific categories such as `yii\db\Connection`, but
    it can also be configured with wildcards. For instance, if we want to send an
    email anytime a category within `yii\db` is called, we can configure the following
    logger target:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的记录器组件中，我们可以通过指定`categories`参数来指定我们希望记录器处理的类别。类别参数可以配置为监听特定的类别，如`yii\db\Connection`，但它也可以使用通配符进行配置。例如，如果我们想在`yii\db`中的任何类别被调用时发送电子邮件，我们可以配置以下记录器目标：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you decide to use email logging, you can quickly flood your inbox with multiple
    messages or even be rate-limited by your email provider. It's highly recommended
    that you specify only the most critical categories for email logging.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定使用电子邮件日志记录，你可能会迅速收到多个消息，甚至可能被你的电子邮件提供商限制速率。强烈建议你只为电子邮件日志记录指定最关键的类别。
- en: 'In situations where we''re logging multiple categories, such as `yii\web\HttpException`,
    we can also exclude certain categories from being logged by specifying the `except`
    property. For instance, if we want to log all non-HTTP 404 exceptions, we can
    configure our logger as follows to accomplish this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们需要记录多个类别的情况下，例如`yii\web\HttpException`，我们还可以通过指定`except`属性来排除某些类别不被记录。例如，如果我们想记录所有非HTTP
    404异常，我们可以按照以下方式配置我们的记录器以实现这一点：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, within our application, loggers can be toggled on and off by setting
    the `enabled` property of the logger target. To programmatically disable a logging
    target, we first need to specify a key for our logger target:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的应用程序中，可以通过设置日志目标对象的 `enabled` 属性来开启或关闭记录器。要程序化地禁用日志目标，我们首先需要指定我们的日志目标键：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, within our code, we can temporarily disable our `file` target, as specified
    in the previous example, using the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的代码中，我们可以使用以下代码临时禁用之前示例中指定的 `file` 目标：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Benchmarking
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基准测试
- en: 'Another tool that we can use to debug our applications is the profiler tool.
    The profile tool allows us to gain an insight into how long a certain piece of
    code takes to execute. To use the profiler, we simply need to wrap the code we
    want to examine in the following code block:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用分析器工具来调试我们的应用程序。分析器工具允许我们了解特定代码片段执行所需的时间。要使用分析器，我们只需将以下代码块包裹我们要检查的代码即可：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `beginProfile()` and `endProfile()` methods can be nested within another
    profiler section. The code within these methods will be outputted to your log
    targets for profiling. In production, you should disable profiling.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`beginProfile()` 和 `endProfile()` 方法可以嵌套在其他分析器部分中。这些方法内的代码将被输出到您的日志目标以进行分析。在生产环境中，您应该禁用分析。'
- en: Error handling
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: By default, Yii2 has a fairly comprehensive error handler that will automatically
    catch and display all nonfatal PHP errors. The error handler can be an extremely
    powerful tool during development as it can provide complete stack traces in the
    event that something fails.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Yii2 具有一个相当全面的错误处理程序，它将自动捕获并显示所有非致命 PHP 错误。在开发过程中，错误处理程序可以是一个极其强大的工具，因为它可以在出现故障时提供完整的堆栈跟踪。
- en: '![Error handling](img/00060.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![错误处理](img/00060.jpeg)'
- en: Tip
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: By default, the error handler is automatically enabled as part of our application,
    but it can be disabled by setting the `YII_ENABLE_ERROR_HANDLER` constant within
    our bootstrap file to `false`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，错误处理程序作为我们应用程序的一部分自动启用，但可以通过在引导文件中将 `YII_ENABLE_ERROR_HANDLER` 常量设置为 `false`
    来禁用。
- en: 'The error handler is configured within our main application configuration file,
    and it supports several different configuration options, as shown in the following
    example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理程序配置在我们的主要应用程序配置文件中，并支持多个不同的配置选项，如下例所示：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: More information on the error handler and its properties can be found on the
    Yii2 class reference page at [http://www.yiiframework.com/doc-2.0/yii-web-errorhandler.html](http://www.yiiframework.com/doc-2.0/yii-web-errorhandler.html).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于错误处理及其属性的更多信息可以在 Yii2 类参考页面上找到，网址为 [http://www.yiiframework.com/doc-2.0/yii-web-errorhandler.html](http://www.yiiframework.com/doc-2.0/yii-web-errorhandler.html)。
- en: 'By default, the error handler will use two views to display errors:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，错误处理程序将使用两个视图来显示错误：
- en: '`@yii/views/errorHandler/error.php`: This will be used to display errors without
    a call stack and is the default view that is used when `YII_DEBUG` is set to `false`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@yii/views/errorHandler/error.php`：此视图将用于显示不带调用堆栈的错误，并且是当 `YII_DEBUG` 设置为
    `false` 时的默认视图。'
- en: '`@yii/views/errorHandler/exception.php`: This will be used when errors display
    a complete call stack'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@yii/views/errorHandler/exception.php`：当错误显示完整的调用堆栈时将使用此视图。'
- en: We can define our own error view files by specifying the `errorView` and `exceptionView`
    properties of our error handler.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指定错误处理程序的 `errorView` 和 `exceptionView` 属性来自定义错误视图文件。
- en: 'As an alternative to the default error page, as presented in the previous screenshot,
    errors can be redirected to a different action by specifying the `errorAction`
    property of the error handler. We can then handle errors separately from our application
    by adding an errors action to our `actions()` method and defining an `actionError()`
    action within the specified controller:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为默认错误页面的替代方案，如前一个屏幕截图所示，可以通过指定错误处理程序的 `errorAction` 属性将错误重定向到不同的操作。然后，我们可以通过向
    `actions()` 方法添加错误操作并在指定的控制器中定义 `actionError()` 操作来从我们的应用程序中单独处理错误：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Our custom error handler page can then be created within our `views/site/error.php`
    file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在 `views/site/error.php` 文件中创建我们自定义的错误处理页面。
- en: Handling errors within non HTML responses
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理非 HTML 响应中的错误
- en: 'When working with non-HTML responses such as JSON or XML, Yii2 will be presented
    as a simplified error response, as shown in the following example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理非 HTML 响应，如 JSON 或 XML 时，Yii2 将显示简化的错误响应，如下例所示：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the event that you wish to display more debugging information in nonproduction
    environments, you can create a custom response handler by overwriting the `on
    beforeSend` event of the response component. Our response handler can be rewritten
    as follows to achieve this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在非生产环境中显示更多调试信息，你可以通过覆盖响应组件的 `on beforeSend` 事件来创建一个自定义响应处理程序。我们的响应处理程序可以重写如下以实现此目的：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Our response handler class located at `@app/components/ResponseEvent.php` can
    be written as follows to change the error behavior when `YII_DEBUG` is set to
    `true`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们位于 `@app/components/ResponseEvent.php` 的响应处理类可以编写如下，以更改当 `YII_DEBUG` 设置为 `true`
    时的错误行为：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now when an error occurs, output similar to the following will be displayed,
    saving us the time taken to flip between our browser and our application log:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当发生错误时，将显示类似以下内容的输出，节省了我们切换浏览器和应用程序日志所需的时间：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Debugging with the Yii2 debug extension
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Yii2 调试扩展进行调试
- en: Another powerful tool that we can use to debug our applications is the `yii2-debug`
    extension. When enabled, the debug extension provides deep insights into every
    aspect of our request, ranging from logs, configurations, profiling, requests,
    asset bundles, and even emails sent by our application. With this tool, we can
    find out exactly what happened during a specific request.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用来调试应用程序的另一个强大工具是 `yii2-debug` 扩展。启用后，调试扩展提供了对请求每个方面的深入了解，从日志、配置、性能分析、请求、资产包，甚至我们的应用程序发送的电子邮件。使用此工具，我们可以确切地了解在特定请求期间发生了什么。
- en: 'To get started with using the `yii2-debug` extension, we first need to install
    it as part of our composer dependencies:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 `yii2-debug` 扩展，我们首先需要将其作为我们的 composer 依赖项安装：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After installing the package and running the composer update, we can configure
    the debug extension by adding the following to our `config/web.php` configuration
    file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装包并运行 composer update 后，我们可以通过向我们的 `config/web.php` 配置文件添加以下内容来配置调试扩展：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After enabling the extension, we will be able to view it at the bottom of every
    view of our application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 启用扩展后，我们将在应用程序的每个视图中底部看到它。
- en: '![Debugging with the Yii2 debug extension](img/00061.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Yii2 调试扩展进行调试](img/00061.jpeg)'
- en: By default, the extension will show some basic things about our application;
    however, if we click on it, we can gain deep insights into every aspect of our
    application for a particular request.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，扩展将显示我们应用程序的一些基本信息；然而，如果我们点击它，我们可以深入了解针对特定请求的应用程序各个方面。
- en: '![Debugging with the Yii2 debug extension](img/00062.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Yii2 调试扩展进行调试](img/00062.jpeg)'
- en: Alternatively, we can navigate to the `/debug` endpoint of our application to
    view all the debug requests captured by the extension.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以导航到应用程序的 `/debug` 端点来查看扩展捕获的所有调试请求。
- en: '![Debugging with the Yii2 debug extension](img/00063.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Yii2 调试扩展进行调试](img/00063.jpeg)'
- en: Deploying
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: The final step in working with any Yii2 application is to move it to production
    and create a deployment strategy. There are many different tools that we can use
    to deploy our code, ranging from Bamboo, TravisCI, Jenkins, Capistrano, and even
    manual SSH deployments—just to name a few.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何 Yii2 应用程序一起工作的最后一步是将它移至生产环境并创建一个部署策略。我们可以使用许多不同的工具来部署我们的代码，从 Bamboo、TravisCI、Jenkins、Capistrano，甚至手动
    SSH 部署——仅举几例。
- en: 'In general, however, there are several key concepts we should keep in mind
    when deploying our code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一般来说，在部署我们的代码时，我们应该牢记几个关键概念：
- en: Deployments should be automated and hands off. In order to be consistent, your
    deployments should be run by a tool or service that can run the same tasks every
    time. This eliminates any human error during the deployment and ensures consistency.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应该是自动化的，无需人工干预。为了保持一致性，你的部署应该由一个工具或服务运行，该工具或服务可以每次运行相同的任务。这消除了部署过程中可能出现的任何人为错误，并确保了一致性。
- en: Deployments should be fast, providing you with the ability to quickly push out
    new features and bug fixes.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应该是快速的，为你提供快速推出新功能和修复错误的能力。
- en: The actual building of your application (such as combined and compressed JavaScript,
    CSS, and other configurations) should occur on a build server and then be pushed
    to your production server in a pre-build manner. This ensures that your production
    servers don't have extra tools on them that may contain security vulnerabilities
    while also ensuring that your project is built with the same tools each time.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应用程序的实际构建（如合并和压缩JavaScript、CSS和其他配置）应该在构建服务器上完成，然后以预构建的方式推送到您的生产服务器。这确保了您的生产服务器上没有额外的工具，这些工具可能包含安全漏洞，同时也确保了每次构建项目时都使用相同的工具。
- en: Deployments should be reversible. If we deploy code and our application breaks,
    we should be able to easily roll back to a previous version.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应该是可逆的。如果我们部署了代码并且我们的应用程序崩溃了，我们应该能够轻松地回滚到之前的版本。
- en: When deploying, we should remove any development tools, scripts, and our DCVS
    repository information. This ensures that in case there is a bug or security vulnerability
    in our code or our web server, this information is not exposed.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署时，我们应该删除任何开发工具、脚本以及我们的DCVS仓库信息。这确保了如果我们的代码或我们的Web服务器中存在错误或安全漏洞，这些信息不会被泄露。
- en: Directories that contain logs of our other information (such as `runtime`) should
    be stored in a persistent directory and then symlinked back into our project.
    This ensures that our logs and other data can persist across multiple deployments.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含我们其他信息日志的目录（如`runtime`）应该存储在持久目录中，然后将其符号链接回我们的项目。这确保了我们的日志和其他数据可以在多个部署之间持续存在。
- en: Our deployments should be structured in such a way that there is no interruption
    of service. Typically, this is achieved by storing our deployment in a specific
    folder and then renaming or symlinking it into the directory our web server is
    pointed to. This ensures that our site does not experience an outage when we are
    making a change.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的部署应该以这种方式结构化，以确保服务中断。通常，这是通过将我们的部署存储在特定的文件夹中，然后重命名或创建符号链接到我们的Web服务器指向的目录来实现的。这确保了当我们进行更改时，我们的网站不会出现中断。
- en: When deploying new code, we should clear any application-specific caches, such
    as our schema cache, configuration cache, and PHP OPCache, to ensure that our
    new code changes take effect.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署新代码时，我们应该清除任何应用程序特定的缓存，例如我们的模式缓存、配置缓存和PHP OPCache，以确保我们的新代码更改生效。
- en: Configuration files should never be committed to our DCVS as they contain database
    usernames, passwords, and other secret information. Consider storing this data
    as environment variables on the servers themselves, or encrypting them in a way
    such that only your production servers can decrypt and use the data.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件绝不应该提交到我们的DCVS中，因为它们包含数据库用户名、密码和其他机密信息。考虑将这些数据存储在服务器上的环境变量中，或者以只有生产服务器才能解密和使用数据的方式加密它们。
- en: By following these general guidelines, we can ensure that our Yii2 applications
    are deployed seamlessly and easily.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些通用指南，我们可以确保我们的Yii2应用程序能够无缝且容易地部署。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the basics of debugging and deploying our application.
    We covered how to set up logging and benchmarking and how to debug our application
    with the `yii2-debug` extension while also detailing general guidelines and a
    few tools we can use to deploy our applications to production.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了调试和部署我们应用程序的基础知识。我们介绍了如何设置日志和基准测试，以及如何使用`yii2-debug`扩展来调试我们的应用程序，同时详细介绍了通用的指南和一些我们可以用来将我们的应用程序部署到生产的工具。
- en: As you may expect, there's more to Yii2 than what is covered in this book. When
    developing Yii2 applications, remember that the Yii2 API documentation located
    at [http://www.yiiframework.com/doc-2.0/](http://www.yiiframework.com/doc-2.0/)
    provides excellent class reference documentation along with superb documentation
    on how to use many of the classes. Having reached the end of the book, you should
    feel confident in your knowledge and mastery of Yii2, and you should feel ready
    to take on any project with Yii2.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所预期的那样，Yii2的内容远不止本书所涵盖的。在开发Yii2应用程序时，请记住，位于[http://www.yiiframework.com/doc-2.0/](http://www.yiiframework.com/doc-2.0/)的Yii2
    API文档提供了优秀的类参考文档，以及关于如何使用许多类的卓越文档。随着本书的结束，您应该对自己的Yii2知识和掌握感到自信，并且应该准备好用Yii2承担任何项目。
