- en: Chapter 13. Debugging and Deploying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important tasks when working with modern web applications is
    determining what went wrong during the development and runtime of our application.
    Without knowing what went wrong, it's impossible to determine the correct steps
    to correct the problem. Yii2 provides several tools and components that make the
    debugging of our applications painless and simple. In this chapter, we'll explore
    several different ways in which we can debug our applications. We'll also outline
    some of the best practices for the deployment of our Yii2 application once we've
    completed the development.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Debugging** is an important process in which we can discover what went wrong
    with our application. Whether we''re solving a problem locally or trying to identify
    an issue in our production, our applications need to be configured to supply us
    with the required information to quickly and effectively identify and resolve
    issues as they arise. In this section, we''ll cover how to enable logging within
    our application, how to benchmark certain sections of code and handler errors,
    and general debugging tools and guidelines.'
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To help us debug our applications, Yii2 comes built with several different logging
    components and log methods that we can implement within our application. To get
    started with logging in Yii2, we first need to implement a log component within
    our application. Yii2 comes with several different components that we can implement
    in concert with one another or disjointedly.
  prefs: []
  type: TYPE_NORMAL
- en: '| Logger Class | Description | Class Reference |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\log\DbTarget` | Logs information to a database table | [http://www.yiiframework.com/doc-2.0/yii-log-dbtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-dbtarget.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\log\EmailTarget` | On logging events, sends an email to a specified
    email address | [http://www.yiiframework.com/doc-2.0/yii-log-emailtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-emailtarget.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\log\FileTarget` | Logs events to a file | [http://www.yiiframework.com/doc-2.0/yii-log-filetarget.html](http://www.yiiframework.com/doc-2.0/yii-log-filetarget.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\log\SyslogTarget` | Logs events using PHP''s `syslog()` function | [http://www.yiiframework.com/doc-2.0/yii-log-syslogtarget.html](http://www.yiiframework.com/doc-2.0/yii-log-syslogtarget.html)
    |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each of the previously listed loggers have slight variations in their configuration.
    For more information on how to specifically configure each log target, refer to
    the class reference for that logger class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable a log target within our application, we first need to bootstrap the
    log component and then specify the logger target that we want to use within the
    components section of our application configuration, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous example, we enabled `yii\log\FileTarget` by itself for any error
    and warning log events. Note that multiple loggers can be enabled concurrently
    by specifying additional loggers within the `targets` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each logging target can be configured to listen to certain events. Yii2 provides
    five distinct events that we can log to and several logging methods that we can
    add to our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Error**: This is triggered by `Yii:error()` when a regular error or a fatal
    error occurs. These types of events should be acted upon immediately as they indicate
    failure within the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning**: This is triggered by `Yii::warning()`. These events indicate that
    something went wrong within the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Info**: This is triggered by `Yii::info()`. Typically, these events are used
    to log something useful or interesting that has occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trace**: This is triggered by `Yii::trace()`, which is usually used during
    development to trace a particular piece of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profile**: This is triggered by `Yii::beginProfile()` and `Yii::endProfile()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of these methods are simply wrappers around `Yii::log()`.
  prefs: []
  type: TYPE_NORMAL
- en: Each log target can be configured to listen to a specific set of events by specifying
    the `level` property of that logger target, and by default, if the `level` property
    is not specified, Yii2 will process messages of any severity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each log method shares a similar method signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Yii2''s log method will allow strings and complex data objects or arrays through
    the `yii\helpers\VarDumper::export()` method. When logging information, it''s
    important that you specify a category, as that category can be searched and filtered
    within our log. As shown in the method signature, Yii2 will log information to
    the `application` category by default. When specifying a category, it''s generally
    good to specify it in a hierarchical way, such as in a slash-like format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Another effective format is to use the PHP magic method, `__METHOD__`, which
    will return the namespace and method the logger was called in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Within our logger components, we can specify which categories we want our logger
    to handle by specifying the `categories` parameter. The categories parameter can
    be configured to listen to specific categories such as `yii\db\Connection`, but
    it can also be configured with wildcards. For instance, if we want to send an
    email anytime a category within `yii\db` is called, we can configure the following
    logger target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you decide to use email logging, you can quickly flood your inbox with multiple
    messages or even be rate-limited by your email provider. It's highly recommended
    that you specify only the most critical categories for email logging.
  prefs: []
  type: TYPE_NORMAL
- en: 'In situations where we''re logging multiple categories, such as `yii\web\HttpException`,
    we can also exclude certain categories from being logged by specifying the `except`
    property. For instance, if we want to log all non-HTTP 404 exceptions, we can
    configure our logger as follows to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, within our application, loggers can be toggled on and off by setting
    the `enabled` property of the logger target. To programmatically disable a logging
    target, we first need to specify a key for our logger target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, within our code, we can temporarily disable our `file` target, as specified
    in the previous example, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Benchmarking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another tool that we can use to debug our applications is the profiler tool.
    The profile tool allows us to gain an insight into how long a certain piece of
    code takes to execute. To use the profiler, we simply need to wrap the code we
    want to examine in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `beginProfile()` and `endProfile()` methods can be nested within another
    profiler section. The code within these methods will be outputted to your log
    targets for profiling. In production, you should disable profiling.
  prefs: []
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Yii2 has a fairly comprehensive error handler that will automatically
    catch and display all nonfatal PHP errors. The error handler can be an extremely
    powerful tool during development as it can provide complete stack traces in the
    event that something fails.
  prefs: []
  type: TYPE_NORMAL
- en: '![Error handling](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the error handler is automatically enabled as part of our application,
    but it can be disabled by setting the `YII_ENABLE_ERROR_HANDLER` constant within
    our bootstrap file to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The error handler is configured within our main application configuration file,
    and it supports several different configuration options, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on the error handler and its properties can be found on the
    Yii2 class reference page at [http://www.yiiframework.com/doc-2.0/yii-web-errorhandler.html](http://www.yiiframework.com/doc-2.0/yii-web-errorhandler.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the error handler will use two views to display errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@yii/views/errorHandler/error.php`: This will be used to display errors without
    a call stack and is the default view that is used when `YII_DEBUG` is set to `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@yii/views/errorHandler/exception.php`: This will be used when errors display
    a complete call stack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can define our own error view files by specifying the `errorView` and `exceptionView`
    properties of our error handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an alternative to the default error page, as presented in the previous screenshot,
    errors can be redirected to a different action by specifying the `errorAction`
    property of the error handler. We can then handle errors separately from our application
    by adding an errors action to our `actions()` method and defining an `actionError()`
    action within the specified controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Our custom error handler page can then be created within our `views/site/error.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Handling errors within non HTML responses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When working with non-HTML responses such as JSON or XML, Yii2 will be presented
    as a simplified error response, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the event that you wish to display more debugging information in nonproduction
    environments, you can create a custom response handler by overwriting the `on
    beforeSend` event of the response component. Our response handler can be rewritten
    as follows to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Our response handler class located at `@app/components/ResponseEvent.php` can
    be written as follows to change the error behavior when `YII_DEBUG` is set to
    `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when an error occurs, output similar to the following will be displayed,
    saving us the time taken to flip between our browser and our application log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Debugging with the Yii2 debug extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another powerful tool that we can use to debug our applications is the `yii2-debug`
    extension. When enabled, the debug extension provides deep insights into every
    aspect of our request, ranging from logs, configurations, profiling, requests,
    asset bundles, and even emails sent by our application. With this tool, we can
    find out exactly what happened during a specific request.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with using the `yii2-debug` extension, we first need to install
    it as part of our composer dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the package and running the composer update, we can configure
    the debug extension by adding the following to our `config/web.php` configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After enabling the extension, we will be able to view it at the bottom of every
    view of our application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with the Yii2 debug extension](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By default, the extension will show some basic things about our application;
    however, if we click on it, we can gain deep insights into every aspect of our
    application for a particular request.
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with the Yii2 debug extension](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Alternatively, we can navigate to the `/debug` endpoint of our application to
    view all the debug requests captured by the extension.
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with the Yii2 debug extension](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final step in working with any Yii2 application is to move it to production
    and create a deployment strategy. There are many different tools that we can use
    to deploy our code, ranging from Bamboo, TravisCI, Jenkins, Capistrano, and even
    manual SSH deployments—just to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, however, there are several key concepts we should keep in mind
    when deploying our code:'
  prefs: []
  type: TYPE_NORMAL
- en: Deployments should be automated and hands off. In order to be consistent, your
    deployments should be run by a tool or service that can run the same tasks every
    time. This eliminates any human error during the deployment and ensures consistency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployments should be fast, providing you with the ability to quickly push out
    new features and bug fixes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual building of your application (such as combined and compressed JavaScript,
    CSS, and other configurations) should occur on a build server and then be pushed
    to your production server in a pre-build manner. This ensures that your production
    servers don't have extra tools on them that may contain security vulnerabilities
    while also ensuring that your project is built with the same tools each time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployments should be reversible. If we deploy code and our application breaks,
    we should be able to easily roll back to a previous version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When deploying, we should remove any development tools, scripts, and our DCVS
    repository information. This ensures that in case there is a bug or security vulnerability
    in our code or our web server, this information is not exposed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directories that contain logs of our other information (such as `runtime`) should
    be stored in a persistent directory and then symlinked back into our project.
    This ensures that our logs and other data can persist across multiple deployments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our deployments should be structured in such a way that there is no interruption
    of service. Typically, this is achieved by storing our deployment in a specific
    folder and then renaming or symlinking it into the directory our web server is
    pointed to. This ensures that our site does not experience an outage when we are
    making a change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When deploying new code, we should clear any application-specific caches, such
    as our schema cache, configuration cache, and PHP OPCache, to ensure that our
    new code changes take effect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration files should never be committed to our DCVS as they contain database
    usernames, passwords, and other secret information. Consider storing this data
    as environment variables on the servers themselves, or encrypting them in a way
    such that only your production servers can decrypt and use the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By following these general guidelines, we can ensure that our Yii2 applications
    are deployed seamlessly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the basics of debugging and deploying our application.
    We covered how to set up logging and benchmarking and how to debug our application
    with the `yii2-debug` extension while also detailing general guidelines and a
    few tools we can use to deploy our applications to production.
  prefs: []
  type: TYPE_NORMAL
- en: As you may expect, there's more to Yii2 than what is covered in this book. When
    developing Yii2 applications, remember that the Yii2 API documentation located
    at [http://www.yiiframework.com/doc-2.0/](http://www.yiiframework.com/doc-2.0/)
    provides excellent class reference documentation along with superb documentation
    on how to use many of the classes. Having reached the end of the book, you should
    feel confident in your knowledge and mastery of Yii2, and you should feel ready
    to take on any project with Yii2.
  prefs: []
  type: TYPE_NORMAL
