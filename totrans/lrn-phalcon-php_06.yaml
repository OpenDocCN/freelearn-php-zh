- en: Chapter 6. Assets, Authentication, and ACL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will make use of our `Backoffice` module for this chapter, since it will
    be the second module that we will develop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Assets management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing an authentication system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the application using the **Access Control List** (**ACL**) component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assets management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before going further, I would like to introduce you to Phalcon''s assets manager.
    This is a very useful component when you need to handle lots of assets (in general,
    CSS files, images, and JavaScript files). The service should already be available,
    and you can access it via DI using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I''ve heard some people complaining that after its installation, this service
    does not exist. If you are using Phalcon version 1.3.* (and you should be), then
    you wouldn''t have any problem. If you use an older version, you might need to
    inject this service into the DI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's open the main layout for the back office and do some changes. Open
    `modules/Backoffice/Views/Default/layout.volt` and remove all the lines containing
    `stylesheetLink` and `javascriptInclude`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, between `<head>` and `</head>` sections, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And before the `</body>` close tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `outputJs` and `outputCss` methods contain two parameters (`headerCss` and
    `footerJs`). These parameters are the names of the assets collections that we
    are going to build in a few moments. I have added two blocks (`css` and `javascripts`),
    because we might want to add some special resource for a certain page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to modify the `BaseController.php` file, and we will add
    the assets. Open `Backoffice/Controllers/BaseController.php` and append this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the new private method `buildAssets()`, where we create the asset
    groups and use special filters to minify them. After that, we call this method
    in `afterExecuteRoute()`. You can create your own custom filters, if you want,
    by extending `Phalcon\Assets\FilterInterface` class. Note that the output goes
    to a new folder named `prod`. We must create this directory and give it the proper
    permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you handle many assets, you might want to save a list in a `config` array
    or something similar. If you use assets from a CDN, you need to pass some special
    parameter, for example, something like the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Before checking the result, we need to do two more things. First, remove any
    content from the `IndexController` class to `indexAction()`. The final `IndexController.php`
    file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open the template for `IndexAction()` that can be found at `Backoffice/Views/Default/index/index.volt`,
    remove any content from it, and append this code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is it. You should now be able to access `http://www.learning-phalcon.localhost/backoffice`,
    and the result should be exactly the same as that shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assets management](img/B03522_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fig. 1
  prefs: []
  type: TYPE_NORMAL
- en: This is pretty much everything about assets manager, which is a simple, yet
    powerful and useful tool.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see an example of custom filters in the official documentation at [http://docs.phalconphp.com/en/latest/reference/assets.html#assets-management](http://docs.phalconphp.com/en/latest/reference/assets.html#assets-management).
  prefs: []
  type: TYPE_NORMAL
- en: Developing an authentication system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are always parts within your application that need to be protected. In
    this section, we will implement an authentication system that is partially based
    on the user tables that we created in the previous chapters, and we will use Phalcon's
    ACL component.
  prefs: []
  type: TYPE_NORMAL
- en: We are not going to reinvent the wheel, so parts of the HTML code are taken
    from the official Bootstrap website ([http://getbootstrap.com](http://getbootstrap.com)).
    In addition, you can find parts of the PHP code in a plugin that I developed a
    long time ago and which can be found at [https://github.com/calinrada/PhalconUserPlugin](https://github.com/calinrada/PhalconUserPlugin).
    That being said, let's start developing our authentication system.
  prefs: []
  type: TYPE_NORMAL
- en: The database structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a few more tables for users, and we will create new ones for the
    ACL according to the example found at [https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Acl/Adapter](https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Acl/Adapter)
    because we will use the database adapter. The incubator page contains a structure
    for the SQLite database, but we are going to "convert it" for MySQL. The new `user_*`
    tables are extracted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And the new `acl_*` tables can look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the DB structure, we need to generate the models for the newly
    created `user_*` tables. There is really no point in filling pages with complete
    models because for now, they will contain only getters and setters. The sort version
    of our models (without getters and setters) is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You can add the getters and setters on your own or check the source code for
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the relations to the User models so that we can have quick
    access to the data from these new tables. Open `App\Core\Models\User.php` and
    append this code to the `initialize()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As for the `acl_*` tables, for now, we don't need to create any models. The
    `acl` database adapter will handle most of the data from them. We can also add
    data manually or create a task for it. We have database tables and models. Next,
    we will create an authentication component that will interact with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, navigate to `modules/Core/ directory` and create a new folder named
    `Security`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `security` folder, create a new file named `Auth.php` and add the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that this is not the complete code due to its size. Please check
    the source code for this chapter. You can see that this file is extending `\Phalcon\Mvc\User\Component`.
    This means that we already have access to the DI, so we don't have to inject any
    services because they are already available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s analyze a few of the methods from the `Auth` component a little bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '`registerUserThrottling($user_id)`: This method logs any failed login attempts
    with a time stamp, and it checks the number of attempts for a user from a certain
    IP. If the number of attempts is greater than three, we will delay the response.
    This is a simple method to reduce the effectiveness of brute force attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkUserFlags($user)`: This method checks whether or not a user is active.
    Here, you can add other checks, for example, whether a user is banned or temporarily
    suspended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`saveSuccessLogin($user)`: This method saves all the successful logins of a
    user and contains the user ID, IP, user agent, and the date and time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createRememberEnviroment($user)`: This method (check the source code for `Chapter
    6`) creates tokens that we will hold in the database and some cookies. If this
    operation is successful, next time, we can auto login the user, using this information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setIdentity($user)`: This method simply saves an array containing information
    about the current authenticated user in the session. We can retrieve this information
    by using the `getIdentity()` method or directly from the session by calling `$session->get(''identity'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check($credentials)`: This method is the most important one. Here, we first
    check whether there is any user in our database, registered with the e-mail that
    we provided. If the user exists, we compare their password with the one that is
    provided, by making use of the `checkHash()` security component. After that, we
    check whether the user is active, save a log in successful login table, create
    a `Remember me` environment, and then save the information of the user in the
    session, by calling the `setIdentity()` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signin($form)`: We use this method to log in the user with the help of a form
    (and we will create this form in a few moments). If the form is valid, we call
    the `check()` method to validate the credentials. The rest of the methods are
    quite easy to understand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have the `Auth` component, but it is not available just yet. We need to
    add it to our DI. Open `modules/Backoffice/Config/services.php` and add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open the `config.php` file and append this code to the `$module_config`
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The component is now active, and we can use it. We will create the templates,
    forms, and controllers for a sign in action. Navigate to `modules/Backoffice/Controllers`
    and create a new file named `AuthController.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t have the `UserSinginForm`. Navigate to `modules/Core/` directory
    and create a new folder named `Forms`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Forms` directory, create a new file named `UserSigninForm.php` with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You might have noticed that we are using **CSRF** fields in order to prevent
    **Cross-Site Request Forgery** attacks. If you have no idea what this is, please
    take a few moments and read about it at [https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create the templates. We will use the example template from [http://getbootstrap.com/examples/signin/](http://getbootstrap.com/examples/signin/),
    but we will adapt it to our needs. Since our main template, `layout.volt`, contains
    information that would be available just to authenticated users, we will clone
    this template and clean it so that we can use it for our sign in action and other
    actions that requires simple templates. Navigate to `modules/Backoffice/Views/Default/`
    and duplicate the `layout.volt` file by renaming it to `layout_simple.volt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, remove the code from `layout_simple.volt` and append the new cleaned
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to create the template for `signingAction()`. Navigate to
    `modules/Backoffice/Views/Default` and create a new folder named `auth`. After
    that, in the `auth` folder, create a file named `signin.volt` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `signin.volt` template extends the newly created `layout_simple.volt`. Note
    the new `css` block. We have added a new `css` group named `signin`. We will enable
    it in a few moments. The `{{ content() ~ flashSession.output() }}` line is a concatenation,
    because the `flashSession` component is not returned in the `content()` file.
    So, if we output just the `content()` method, the `flashSession` messages will
    not be seen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The template is missing a `css` file. We need to create it and add it to our
    assets collection. To do this, navigate to `public/assets/default/css/` and create
    a new file named `lp.backoffice.signin.css` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add this file to our `assets` collection. Open `modules/Backoffice/Controllers/BaseController.php`
    and append the following code to the `buildAssets()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This should be all. Our `Backoffice` module is not yet protected, but we can
    actually do a `signin` action. Using your browser, go to `http://www.learning-phalcon.localhost/backoffice/auth/signin`,
    and you should be able to see the exact result that is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Models](img/B03522_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Sign in** page
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already have a user name, you can try to log in. If not, you can create
    a new user using the task that we created in [Chapter 4](ch04.html "Chapter 4. Database
    Architecture, Models, and CLI Applications"), *Database Architecture, Models,
    and CLI Applications*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This will create a user who has the e-mail address as `john.doe@learning-phalcon.localhost`
    and the password as `myPassw0rd`. You can use these details to test the form.
    On success, you will be redirected to index page, on failure; you will see some
    error messages.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a fully functional authentication system, we can secure the
    entire application. For this, we will make use of Phalcon's `Acl` component.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the application using the ACL component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ACL is very useful when you have users with different roles. For example,
    an administrator should have unlimited access, but an editor should have access
    only to the Articles section. We already have the database structure for the Acl,
    so we just need to create some relations. First, we will create a new intermediate
    table named `user_roles` that will hold information about each user's role. A
    user can have many roles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Another thing that we can do is get rid of the `user_group` table since we are
    not going to use it anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `modules/Core/Models/UserGroup.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove this code from `User.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the column from `user` table and drop the `user_group` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the user `create()` method by navigating to `Core/Managers/UserManager.php`,
    and remove the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the `create()` method, replace the `param $user_group_name = 'User'` with
    `$user_role = 'Guest'`. (We will implement the functionality in a few moments.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's create the models from `user_role` and `acl_roles`. Remember that
    I will not write down the getters and the setters, just the important stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to make some changes to the `create()` method from `UserManager.php`
    in order to assign existing roles to a user. The new method should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason why we define `$o_user_role` as array collection of objects is because
    the relationship between a user and the roles is one-to-many. We also need to
    modify the `createAction()` method from the `UserTask.php`. Open the file located
    at `modules/Tasks/UserTask.php` and append the user''s role as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use `Guest` by default. Later, we will create a method that will add
    and remove roles for a user. Now, we are going to implement the security check.
    Switch to `modules/Core/Security` folder and create a new file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, using the `beforeDispatch()` method, we check for what the user
    is requesting, whether it is authenticated, and whether the role that they have
    allows them to access a certain resource. We need to enable the `Acl` service
    and attach the `Acl` to the events manager. In `config/services.php` (globally),
    add the setting for the `Acl` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, update the dispatcher with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to update the `setIdentity()` method from `Auth.php`. Replace
    it with this code to get the user roles from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If you followed the steps closely and did everything by the book, you should
    be able to access `http://www.learning-phalcon.localhost/backoffice/`; the browser
    will redirect you to the **Sign in** page (the same page where we saw the **Sign
    in** page).
  prefs: []
  type: TYPE_NORMAL
- en: We are almost at the end of this chapter. What we will do next is create a task
    that will handle `Acl`, and we will use this task in the future when we need to
    modify someone's permissions. Let's see how a simple task for `Acl` can look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to `modules/Tasks` and create a new file named `AclTask.php`, with the
    following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We created only one method named `initAction()` that will create the two default
    acl roles: `Administrator` and `Guest`. An administrator will be allowed to access
    everything, whereas a `Guest` role will be able to access nothing. Run this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now you should be able to see records in your database with the two roles inserted.
    If you see them, you can navigate to the `user_role` table and insert an `Administrator`
    role for your user, then try to login, then delete the `Administrator` role and
    add the `Guest` one. We will add more methods to this task in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about assets management and Access Control List.
    We also developed an authentication system for our application. We will continue
    our journey with the development of the `Backoffice` module, where you will learn
    more about Forms, Volt, and Models.
  prefs: []
  type: TYPE_NORMAL
