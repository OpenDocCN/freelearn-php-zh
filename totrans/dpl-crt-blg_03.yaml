- en: 'Chapter 3. Basics I: Site Configuration'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common trap people fall into when first starting out is that they assume
    that the *basics* are easy to master, and therefore don't require too much thought.
    Things are not quite so clean cut in reality because while your site's basic setup
    is, more often than not, easy to implement, the more subtle problem is knowing
    *what* you want to implement, and *how* you want to implement it in the first
    place. Discovering what you need from your site is particularly important for
    precisely this reason, which is why we discussed it right at the start in [Chapter
    1](ch01.html "Chapter 1. Introduction to Drupal").
  prefs: []
  type: TYPE_NORMAL
- en: '*Does this mean that you should not start working directly on the site unless
    you know exactly what you want?* Not really; like most things, it''s a bit of
    a tradeoff when it comes to starting out with the development of your Drupal website.
    This is because it is almost impossible to determine exactly what your site will
    need, and how its functionality should be provided until you have been working
    with it for some time. Often, you will find yourself modifying the behavior of
    a site based on feedback from the users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At any rate, to get the ball rolling, we are going to need to talk about the
    following Drupal site configuration topics:'
  prefs: []
  type: TYPE_NORMAL
- en: General settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache and file system settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RSS feed settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Site maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assuming you have paid close attention to how you want your site to function,
    and how you visualize it being used, then once your basic settings are complete
    you should find that the number of changes you have to make down the line are
    kept to a minimum. Bear in mind though, that changes in Drupal are fairly easy
    to implement. Don't worry if you have to go back, and change things based on user
    feedback, or changes to your site in general.
  prefs: []
  type: TYPE_NORMAL
- en: Before We Start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is sensible to make note of one or two important things before getting our
    hands dirty. For example, you should make it second nature to check how the changes
    made to the settings in Drupal affect the site. Learning which setting does what
    and how it alters the behavior of the site is really the goal of this chapter,
    and while we won't cover each and every little thing in excruciating detail, you
    will be shown enough to feel confident about your site's general configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The settings we deal with in this chapter really only affect the site in the
    broadest sense in that they modify its default behavior—things like what error
    pages are displayed, or what return email address your site will use. The trickier
    or more specific settings that apply to a focused area of concern, such as input
    formats, access rights, or module activation, will be discussed in more detail
    in the chapters to come.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, some of the topics we cover here won't apply to you right
    at this moment. For example, it is unlikely that you will want to work with RSS
    feeds right off the bat (although you may well want to work with them a little
    later on). Feel free to skip any sections that are not of immediate value to you,
    because you can always come back to them when you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Also, some of you might be groaning at the prospect of having to plow through
    setting after setting in order to get everything just as you want it. Of course,
    creating a flashy new theme would probably be more exciting, but taking the time
    to look through and play with all the available settings is an important step
    towards becoming a competent Drupal administrator. Not only will you learn how
    to get things done, but also what things can in fact be done. Believe me, with
    software as flexible and powerful as Drupal, there is a surprising amount on offer.
  prefs: []
  type: TYPE_NORMAL
- en: '*So what are we going to be looking at precisely?* If you log in as the administrator,
    and navigate to **administer**, and then **settings**, you should see something
    like the following page brought up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Before We Start](img/1800_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see there are plenty of options to deal with (from the sheer number
    of links presented on this page), and we will start, throughout this chapter,
    by working our way down the links provided on the right-hand side of the page.
    Throughout the course of the book, we will end up covering each and every item
    under the **administer** main-menu link.
  prefs: []
  type: TYPE_NORMAL
- en: Some of you may have realized that cron jobs were not mentioned in the introduction
    as something that is covered in this chapter despite the fact that they are present
    in the settings page, as shown in the screenshot above. The reason for this is
    that dealing with cron jobs or scheduled tasks is more of a site administration
    task instead of a specifically Drupal-oriented one. Because of this, everything
    you need to know about cron jobs is covered in [Chapter 10](ch10.html "Chapter 10. Running
    Your Website") on Running Your Website instead.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it won't always be possible to discuss each setting in order because often
    Drupal requires us to make settings in several different places in order to effect
    certain changes. However, this will all seem far less daunting once we have gone
    through the entire menu, and you are more familiar with how things work.
  prefs: []
  type: TYPE_NORMAL
- en: General Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This page contains a mixed bag of settings, some of which are pretty self explanatory
    while others will require us to think quite carefully about what we need to do.
    To start with, we are presented with a few text boxes that control things like
    the name of the site, the mission statement, and so on. For the demo site, the
    following settings were entered for the first six options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General Settings](img/1800_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the face of it, we are pretty much set here. There isn't anything complex
    about these settings, and it should be fine to move on with the next lot; or should
    we check first? It is important to remember that before we continue it is always
    wise to use the site to ensure whatever modifications have been made have the
    desired effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'After saving the aforementioned changes, the demo site now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General Settings](img/1800_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hmm, this is not ideal! For a start, we seem to be missing our slogan entirely,
    and the hard hitting poetry we added in the **Footer message** section isn't being
    displayed in the format we want it either. What's going on? As you can see, things
    are not always as straightforward as they seem. The reason the slogan is not displayed
    is because some themes don't display a slogan at all (or simply have the slogan
    disabled by default), and the reason that the footer has not come out in poetry
    format is because we haven't told Drupal to format it as such.
  prefs: []
  type: TYPE_NORMAL
- en: Oh dear, it looks like we have already run into problems that, with the information
    we have at hand, cannot be easily solved. The answer here is to be patient and
    wait until we have dealt with various other configuration settings and themes
    in some detail as this will help us to understand how we can modify the actual
    presentation of the site with a greater level of sophistication.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s not to say we are entirely without tricks up our sleeve. Bear in mind
    that Drupal will format HTML (HyperText Markup Language) if you enter it into
    the text boxes. So, if instead of the original **Footer message** text, we entered
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The footer message would then appear on the site as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General Settings](img/1800_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is far more suitable for our purposes since the text is both poetry, and
    a quote (hence the italics) from a poem called *The Vanishing*.
  prefs: []
  type: TYPE_NORMAL
- en: For some of you, this may present a bit of a problem because you are unfamiliar
    with HTML. If at this stage you have little to no knowledge of HTML, then you
    might find it worthwhile teaching yourself a little bit about it before you continue
    on—if so, jump ahead to the section on *HTML, PHP, and Content Posting* in [Chapter
    7](ch07.html "Chapter 7. Advanced Content"), for more information on this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving along we see that we also have the option of defining a name for anonymous
    users. This is fine as it is, but feel free to change this if you have a compelling
    reason for doing so. The only thing this will do is change the credited name of
    a posting from **Anonymous** to whatever you have set (assuming you allow anonymous
    users to post any content to the site). Let''s take a look at the remaining settings
    in this section before going into an explanation of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General Settings](img/1800_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have changed the **Default front page** to **node/2**. *But
    what does changing this setting do?* Well, let's assume that there is a page of
    content that you would like to be displayed as the default page of your website—before
    anyone views any of the other content. For example, if you wanted to display some
    sort of promotional information or an introduction page, you could tell Drupal
    to display that using this setting. In this case, the second node has been stipulated
    as the default front page—remember that you have to create the content for this
    post first, and then determine its ID before you can tell Drupal to use it.
  prefs: []
  type: TYPE_NORMAL
- en: It is probably best that you leave this as is for the moment, until we have
    discussed how to add content. If you are keen on getting something posted to the
    site, simply use the **create content** link at the top of the menu and follow
    the instructions there. You should be able to get something up and running fairly
    easily. The important thing about content as it relates to this section, however,
    is that you need to know the ID of the node you want to specify as the default
    front page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is easy if you bear the following in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever you edit content, the ID of the node being edited will appear in the
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: We are not finished yet, because it is possible to specify several options depending
    on what you require for your front page. In this case, the specific node with
    identity number `2` has been chosen, but if you prefer your site's blogs to be
    displayed you could substitute **node/2** (in node/ID format) for **blog**, and
    a list of the blogs would be shown by default.
  prefs: []
  type: TYPE_NORMAL
- en: A good way to determine exactly how to display the front page you want is to
    actually browse to the page you want on your site. This could be your blog page,
    your aggregated news feed (more about feeds later in the book), or whatever. Once
    you are looking at what you want, take note of the **relative URL path** and simply
    enter that into the text box provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'The relative URL path is that part of the page''s address that comes after
    the standard domain, which is shared by the whole site. For example, in this case,
    setting `node/2` works because Drupal maps this relative path to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first part of this address, `http://localhost/drupal/` is the **base URL**
    (recall that you specified this in the previous chapter when configuring Drupal),
    and everything after that is the relative URL path.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure, however, that everything works properly before moving on. Setting
    file paths can sometimes be a pain because it is easy to make a mistake and add
    an erroneous slash here and there—if you're like me, that is.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also display content by category by simply entering the correct relative
    URL path along with the category''s ID number—this will require us to learn about
    how to work with categories before this is of any use, so it is left as an exercise.
    For the time being the default page of the site now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General Settings](img/1800_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So far so good, but what did the final setting mean? Many of you may have noticed
    that whenever you make a request to Drupal, the URL of the page you are taken
    to looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the default form of URLs in Drupal, and it is unfortunate because obviously
    the `?q=` is not very attractive. Worse it may interfere with your site being
    indexed by search engines. Accordingly, you can remove this from your URLs by
    enabling the **Clean URLs** option. In order for this to work you must have the
    Apache `mod_rewrite` module enabled (this can be set in the `httpd.conf` file
    in your Apache installation). If you have installed Apache2Triad then this should
    already be the case, but when it comes to deploying your site to your live host
    you must ensure that they too have it enabled, otherwise you will have to disable
    **Clean URLs**.
  prefs: []
  type: TYPE_NORMAL
- en: Error Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section allows you to broadly deal with the problem of errors that may
    crop up (hopefully not that often). In particular, you may wish to create a couple
    of customized error pages that will be displayed to your users in the event of
    a *page not found or access denied* problem. Remember that there are already pretty
    concise pages, which are supplied by default, but should you wish to make any
    changes, then the process is the same as defining a default page for the site
    as shown in the previous section. Create the content that will be displayed—an
    example is shown here for the *page not found* error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Error Handling](img/1800_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we simply determine the unique ID of this post by clicking **Submit**,
    and then looking at the URL displayed in the address bar on the following page—in
    this case, the ID of the page is 5\. Bashing up a similar page for the *access
    denied* error, and providing Drupal with its ID completes the error page handling.
    So whenever something goes wrong, the user gets a nice friendly message and the
    chance to email the staff directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please bear in mind that while we will cover adding, removing, and manipulating
    content in great detail in Chapters 6 and 7, you might find it useful to know
    at this stage that you can select the **input format** whenever you add content
    by using this drop-down list on the content addition page (useful if you need
    to do something fairly advanced with your posting):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Error Handling](img/1800_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see I have the default option of **Filtered HTML** that allows me
    to enter some HTML code, and no PHP code.*"Why would they have several options
    like this?"*, you might ask. We will discuss the reasons for this in more detail
    later on. For now, it is best to stick to **Filtered HTML** unless you have a
    specific need to add PHP code, or HTML tags that are otherwise not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: The next option, **Error reporting**, allows you to decide whether to write
    errors to the screen as well as to the error log. While you are busy building
    the site, you will probably find it useful to select **Write errors to the log
    and to the screen**, so that you can determine what has gone wrong and when. However,
    once it is time to go live you should change this to **Write errors to the log**
    (seen in the drop‑down list), as you don't want everyone to be able to read the
    system's various errors as this may divulge information to malicious users who
    might be able to use it in an attack on your site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Error handling** section now looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Error Handling](img/1800_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final option shown in this screenshot lets you decide how long to keep logged
    messages. You will probably have to find your way as you go when it comes to making
    this choice, as it really depends on how busy you are, and how busy the site is.
    When in doubt, leave it as the default as this is a broadly sensible option.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to use the crontab in order to enforce this setting, and in case
    mentioning cron jobs at this point has made things as clear as mud, it is important
    to understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cron jobs (on Windows, these are known as scheduled tasks) are simply batches
    of commands that are run at specific times depending on how often you set them
    to run. The crontab allows you to stipulate various jobs, and the intervals at
    which they are to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you need to work with the `cron.php` script, which controls all the
    cron-related tasks on your Drupal site, flip over to the *Cron and Scheduled Tasks*
    section in [Chapter 10](ch10.html "Chapter 10. Running Your Website").
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are happy that you have set your cron jobs appropriately, you can
    be sure that your automated tasks will be handled by the cron script. That aside,
    let''s take a look and see the new settings from this section in action. For example,
    I attempted to access a page that did not exist. As expected, the following friendly
    message appeared:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Error Handling](img/1800_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An important point to note is that you should remember to check your logs on
    a regular basis as part of your overall strategy to ensure that the site continues
    to run smoothly. Error messages, warnings, and so on, are effectively a window
    into the operations of the site, and are an indispensable tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to take a look at your logs, simply click **logs** under the **administer**
    menu item, and you will be presented with a list of all the events that have taken
    place on your site. You can filter these events by selecting an option in the
    drop-down list under the heading **Filter by message type**, and then clicking
    **Filter**. If you want to look at the details of any error report, simply click
    the link found under the **Message** column, and the details of the log report
    will be displayed, much like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Error Handling](img/1800_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That wraps it up for error handling for now. Of course, it is important to realize
    that this type of error handling does not deal with errors or bugs that may be
    within the actual source code or file system of your website. In other words,
    this type of *error handling* is not to be confused with *bugs* within the application,
    it is simply there to deal with the functioning of the site as it pertains to
    serving pages. If you come across a bug in your system then you will need to attempt
    to repair the problem, failing which you can look to the Drupal community for
    help.
  prefs: []
  type: TYPE_NORMAL
- en: Cache and File System Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A cache is a storage place where web pages can be held for quick access by the
    server, without the need to build them from scratch each time. Obviously, this
    can speed up a site significantly if it is providing pages that require large
    data retrievals each time. The problem is that a cached page serves an old version
    of the page, and not the most recent one. This is no problem if you are working
    with pages which only change once in a while, but if it's important that users
    are able to see the latest version of a page each time it is requested, then you
    should not use caching.
  prefs: []
  type: TYPE_NORMAL
- en: '*So when do we not need caching?* For a start, there is no need to use it while
    you are building your site, because any changes you make while you are setting
    things up may not display until the cache is flushed—this can lead to no small
    amount of confusion when you are expecting a change to manifest itself on a page.
    Accordingly, you should only really enable page caching just before your site
    is ready to go live in order to test that it works correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second setting in the **Cache settings** section, **Minimum cache lifetime**,
    determines how long Drupal holds a page in its cache. This is really determined
    by the nature of your content, and you should be able to work out what is best
    for your site depending on how quickly the content changes, and how much it is
    used. If you set the cache to be refreshed every minute, then you can be sure
    that all content on your site is at most a minute old because the page is refreshed
    every minute after it is called. A setting of one day means that content might
    be up to a day old. The longer the cache is held, the better the site''s performance,
    but the more dated the content becomes. Obviously, for registered users or site
    administrators it is important to be able to view the latest version of each page,
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only pages accessed by *anonymous* users are cached!
  prefs: []
  type: TYPE_NORMAL
- en: How you deal with file system settings really depends on what type of content
    you visualize your site using. It is recommended that you set the **Download method**
    to **Private** straight away, so that you can control file downloads properly
    from the start. If you know that all files will always be available for anyone
    to download on your site, then leave it as is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you *do* want to make your download method private, then you will
    need to move the `files` directory out of the document root so that it is not
    directly available over the Web. If you do this, you need to enter the *fully-qualified*
    file path to this folder instead of the *relative* path, because otherwise Drupal
    will try to find it in the normal place. For example, on the demo site''s development
    machine, the following file path was entered with the **Private Download method**
    selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As well as this, ensure that the `temp` directory set is sensible, which in
    the case of the demo site is `C:\apache2triad\temp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we continue though, we should make sure that we can upload a file to
    the site without any problems. In order to do this, go to the **modules** section
    under **administer**, enable the **upload** option (found at the bottom of the
    list of modules), and click **Save configuration**. Now when you attempt to **create
    content**, you are presented with the following **File attachments** option to
    go with the actual content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cache and File System Settings](img/1800_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the file has been uploaded, you will see something like the following
    confirmation message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cache and File System Settings](img/1800_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The new table shown below **File attachments** in the previous figure has four
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Delete**, which gives you the option to delete the attachment from the post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List**, which lists the uploaded file in the attachment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**, which is the name of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size**, which is the size of the uploaded file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this case, the file uploaded is an image and weighs in at 2.45KB. If you
    are attaching files in order to display them within a page you will need to ensure
    that they are fairly small. Incidentally, if you do choose to list your attachment,
    by selecting the **List** option, then it will appear in the post as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cache and File System Settings](img/1800_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Users can simply click the link to upload the file. Obviously, if you are attaching
    the file to your post so that you can display it from within the page, then you
    probably want to disable the **List** option. For more information on file attachments
    head on over to [Chapter 7](ch07.html "Chapter 7. Advanced Content"), which deals
    with *Advanced Content*.
  prefs: []
  type: TYPE_NORMAL
- en: RSS Feed Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At some stage in the future you may wish to make use of some of the multitude
    of RSS feeds available on the Web. When this time comes, you will need to make
    a few choices about how these will be presented on your website. The options presented
    in this section allow you to control how many feeds per page you wish to display,
    and whether you would like to show the title alone, the title plus a teaser, or
    the entire feed. These options are pretty straightforward and won't affect anything
    as it stands for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: We will take a closer look at RSS feeds (including a discussion on what they
    are) when we work with the feed aggregator in [Chapter 6](ch06.html "Chapter 6. Basic
    Content").
  prefs: []
  type: TYPE_NORMAL
- en: Date Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everything in this section is fairly straightforward and concerns the date and
    time values, and formats shown on the site. Select your default time zone according
    to your local time—for example, the demo site is two hours ahead of GMT.
  prefs: []
  type: TYPE_NORMAL
- en: Following this you can decide whether users should be allowed to set their own
    time zones according to their location. By default, this is set to **Enabled**,
    which is fairly sensible unless you happen to know that the vast majority of your
    users will be from a fairly small geographic location. For example, if you are
    running a community site for your local SPCA in Wyoming, then it is unlikely that
    the site will have members in Kinshasa, and so the **Configurable time zones**
    option can be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: Following on from this, there is a set of options pertaining to the format of
    the date and time displayed on the site, and you should select the ones that agree
    with the majority of the site's intended users, or alternatively, the site's locality.
    Nothing too life threatening in there, and you can always make modifications at
    a later date if a change is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Site Maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The developers of Drupal should be given a pat on the back for making your
    life easier than that of most other website administrators by providing you with
    the site maintenance facility. Before we discuss it though, I should make the
    following point very clear:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All major development or changes to your site should be performed on the development
    machine and thoroughly tested before being implemented or ported to the live site.
  prefs: []
  type: TYPE_NORMAL
- en: There will be times, however, when you simply have to make some changes directly
    to the live site—even if it is only to implement upgrades that have already been
    tested out on the development server. If this is the case, then rather than allow
    users to work on a site under maintenance, you can simply switch the **Site status**
    to **Off-line**, and get on with your work.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also add a simple message explaining why the site is currently offline
    so that when a user attempts to access the site they see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Site Maintenance](img/1800_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Having this facility will make life easy for you in the event that you do have
    to perform some sort of major work on the site. But be very careful when working
    on this, because if you log out, then you have just locked yourself out of the
    site. This is because only user 1 (that is the administrative user) can do anything
    on the site while it is offline. If you log off and try logging on again, you
    are no longer the administrative user; you are instead anonymous.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not very helpful if you do happen to be the site administrator; so
    Drupal allows the login page to be accessed as normal. Navigate to `http://localhost/drupal/user`,
    and you will be able to log in as the administrator and use the site without hindrance.
    Very important:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make certain you do not forget your administrator's password when setting the
    site's status to **Off‑line!**
  prefs: []
  type: TYPE_NORMAL
- en: Everyone else is locked out until the site's status is returned to **Online**.
  prefs: []
  type: TYPE_NORMAL
- en: String Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At present there is no option for you to consider here, other than educating
    yourself on the Unicode string handling facilities in place. Drupal makes use
    of the **PHP mbstring extension**, which is not enabled by default. Provided you
    ensure that the live host has this extension enabled, Drupal will faithfully support
    multi-byte Unicode operations allowing your site to cater to some pretty far out
    characters in any language you like.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has covered a fair amount of ground in terms of setting up the
    site. We began by looking at some general configuration settings that are important
    in terms of getting the nuts and bolts in working order. Many of these settings
    will need to be revisited as the site develops, and as you become more adventurous.
  prefs: []
  type: TYPE_NORMAL
- en: However, you have learned some valuable information about where to go, and what's
    available when you need to deal with the site's overall well-being. From error
    handling to site maintenance, you should now be able to work with Drupal with
    some confidence.
  prefs: []
  type: TYPE_NORMAL
- en: It is worthwhile noting that with the standard Drupal configuration, there are
    also related technologies that are useful to know. In this instance, taking time
    out to learn a bit of HTML will definitely help to get your content nicely organized,
    and displayed on the site. Not only will this be of benefit now (and most definitely
    later on in the development phase), but it is an important tool to have when working
    with the Web in general.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if you are feeling up to it, a good understanding of PHP will also
    help! Take some time to browse over the PHP website at [http://www.php.net](http://www.php.net)
    to learn a bit more about the language.
  prefs: []
  type: TYPE_NORMAL
