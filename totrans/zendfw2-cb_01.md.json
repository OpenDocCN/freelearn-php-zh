["```php\n$ sudo apt-get install git\n\n```", "```php\n$ git clone git://github.com/zendframework/\n ZendSkeletonApplication.git\n\n```", "```php\n$ cd ZendSkeletonApplication\n$ mv ./* /var/www â€“f\n$ cd /var/www\n\n```", "```php\n$ php composer.phar install\n\n```", "```php\nAllowOverride FileInfo\n\n```", "```php\n$ apache2ctl restart\n\n```", "```php\nhttp://localhost/\n\n```", "```php\n$ cd /var/www\n$ mkdir -p vendor/zftool\n$ cd vendor/zftool\n$ wget https://packages.zendframework.com/zftool.phar\n\n```", "```php\n$ cd /var/www\n$ php vendor/zftool/zftool.phar create project new-project\n\n```", "```php\n$ cd new-project\n$ php composer.phar install\n\n```", "```php\n$ php ../vendor/zftool/zftool.phar modules\n\n```", "```php\n$ php ../vendor/zftool/zftool.phar create module wow-module\n /var/www/new-project\n\n```", "```php\n$ php zftool.phar classmap generate <directory> <file> -w\n\n```", "```php\n<?php\nreturn array(\n  // Every class beginning with namespace Zend\\ will be \n  // searched in this specific directory\n  'Zend\\\\' => array(\n    __DIR__ . '/../zendframework/zendframework/library'\n  ),\n  'ZendTest\\\\' => array(\n    __DIR__ . '/../zendframework/zendframework/tests'\n  ),\n);\n```", "```php\n$ cd vendor\n$ git clone https://github.com/zendframework/ZFTool.git\n$ cd ZFTool\n$ php ./zf.php\n\n```", "```php\nreturn array(\n  // Here we define our route configuration\n  'routes' => array( \n\n    // We give this route the name 'website'\n    'website' => array( \n\n      // The route type is of the class:\n      // Zend\\Mvc\\Router\\Http\\Segment\n      'type' => 'segment', \n\n        // Lets set the options for this route\n        'options' => array( \n\n          /*\n            The route that we want to match is /website\n            where we can optionally add a controller name\n            and an action name. For example:\n              /website/index/index\n          */ \n          'route' => '/website[/:controller[/:action]]',\n\n          /*\n            We don't want to accept everything, but this\n            regex makes sure we only accept alpha-\n            numeric characters and a dash and underscore.\n\n            In our instance we want to check this for the\n            action and the controller.\n          */\n          'constraints' => array( \n            'controller' => '[a-zA-Z][a-zA-Z0-9_-]*',\n            'action' => '[a-zA-Z][a-zA-Z0-9_-]*'\n          ),\n\n          /*\n           We want to make sure that if the user only \n           types /website in the URL bar it will actually\n           go somewhere. We defined that here.\n          */\n          'defaults' => array( \n            'controller' => 'Website\\Controller\\Index', \n            'action' => 'index'\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n```", "```php\n<?php\n\n// We are working in the Application module\nnamespace Application;\n\n// Our main imports that we want to use\nuse Zend\\Mvc\\ModuleRouteListener;\nuse Zend\\Mvc\\MvcEvent;\n\n// Define our module class, this is always 'Module', but \n// needs to be specifically created by the developer.\nclass Module\n{\n  public function onBootstrap(MvcEvent $e)\n  {\n    // First we want to get the ServiceManager\n    $sm = $e->getApplication()->getServiceManager();\n\n    /*\n      Say our logged in user is 'gdog' and we want\n      him to be able to go to /gdog to see his profile.\n    */\n    $user = 'gdog';\n\n    // Now get the router\n    $router = $sm->get('router');\n\n    // Lets add a route called 'member' to our router\n    $router->addRoute('member', array(\n\n      /*\n        We want to make /$user the main end point, with \n        an optional controller and action.\n      */\n     'route' => '/'. $user. '[/:controller[/:action]]',\n\n      /*\n        We want a default end point (if no controller\n        and action is given) to go to the index action\n        of the index controller.\n      */\n      'defaults' => array( \n        'controller' => 'Member\\Controller\\Index', \n        'action' => 'index' \n      ), \n\n      /*\n        We only want to allow alphanumeric characters\n        with an exception to the dash and underscore.\n      */\n      'constraints' => array( \n          'controller' => '[a-zA-Z][a-zA-Z0-9_-]*', \n          'action' => '[a-zA-Z][a-zA-Z0-9_-]*' \n      ), \n    ));\n  }\n}\n```", "```php\nreturn array(\n  // We begin our router configuration\n  'router' => array(\n\n    // Define our routes \n    'routes' => array(\n\n      // We are defining a route named 'Example'\n      'Example' => array(\n        'type' => 'Literal',\n        'options' => array(\n\n           /*\n            This route will resolve to /recipe \n            which will resolve to the Example \n            module's IndexController and execute \n            the IndexAction.\n           */\n           'route' => 'recipe',\n           'defaults' => array(\n             '__NAMESPACE__' => 'Example\\Controller',\n             'controller' => 'Index',\n           ),\n         ),\n\n         'may_terminate' => true,\n\n          /*\n            Here we begin to define our Part route, \n            which always begins with the \n            'child_routes' configuration.\n          */\n          'child_routes' => array(\n            'client' => array(\n              'type' => 'Literal',\n              'options' => array(\n\n              /*\n                This child route (or Part) \n                will resolve to /recipe/foo       \n                and will call the fooAction in  \n                the IndexController.\n              */\n              'route' => '/foo',\n              'defaults' => array(\n               'action' => 'fooAction'\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n```", "```php\n// We begin our router configuration\n'router' => array(\n\n  // Define our routes \n  'routes' => array(\n\n    // We are defining a route named 'Archive'\n    'Archive' => array(\n      'type' => 'Literal',\n      'options' => array(\n\n        /*\n          This route will resolve to /archive \n          which will resolve to the Archive \n          module's IndexController and execute \n          the IndexAction.\n        */\n        'regex' => '/archive/(?<id>[a-zA-Z0-9_-\n  ]+)(\\.(?<format>(html|xml)))?',\n        'defaults' => array(\n            '__NAMESPACE__' => 'Archive\\Controller',\n            'controller' => 'Index',\n            'action' => 'indexAction',\n            'format' => 'html',\n        ), \n        'spec' => '/archive/%id%.%format%',\n      ),\n    ),\n  ),\n),\n```", "```php\nnamespace OneNamespace\n{\n  class FirstClass \n  {\n    private $secondClass;\n    public function __construct(SecondClass $secondClass)\n    {\n      $this->secondClass = $secondClass;  \n    } \n  }\n\n  class SecondClass \n  {\n    private $thirdClass;\n    private $vehicle;\n    public function __construct(ThirdClass $thirdClass, $vehicle)\n    {\n      $this->thirdClass = $thirdClass;\n      $this->vehicle = $vehicle;\n    }\n  }\n}\n\nnamespace AnotherNamespace \n{\n  class ThirdClass \n  {\n    private $first_name;\n    private $last_name;\n\n    public function __construct($first_name, $last_name)\n    {\n      $this->first_name = $first_name;\n      $this->last_name = $last_name;\n    }\n  }\n}\n\n// Let us now create the example through the classic \n// method.\n$thirdClass = new AnotherNamespace\\ThirdClass(\"John\", \"Doe\");\n$secondClass = new OneNamespace\\SecondClass($thirdClass, \n  'Motorcycle');\n$firstClass = new OneNamespace\\FirstClass($secondClass);\n```", "```php\nnamespace OneNamespace\n{\n  class FirstClass \n  {\n    [..] \n  }\n\n  class SecondClass \n  {\n    [..]  \n  }\n}\n\nnamespace AnotherNamespace \n{\n  class ThirdClass \n  {\n    [..]\n  }\n}\n\n// Instead of configuring all the classes, we will now \n// simply configure the Di, and only instantiate the \n// class that we want to use.\n$di = new \\Zend\\Di\\Di();\n$lister = $di->get(\n    'OneNamespace\\FirstClass',\n    array(\n        'first_name' => 'Jane',\n        'last_name' => 'Doe',\n        'vehicle' => 'Car',\n    )\n);\n```", "```php\n<?php\n// We are assuming that we are using the same classes as \n// in the previously shown examples.\nnamespace OneNamespace \n{\n  class FirstClass \n  {\n    [..] \n  }\n\n  class SecondClass \n  {\n    [..]  \n  }\n}\n\nnamespace AnotherNamespace \n{\n  class ThirdClass \n  {\n    [..]\n  }\n}\n\n// After defining our classes we now begin to create our \n// configuration array which we will use to initialize \n// the DI.\n$configuration = array(\n\n  // We want to use this specific configuration at \n  // initialization of our class.\n  'instance' => array(\n\n    // We specify the class name to use here\n    'SecondClass' => array(\n\n      // We want to use this as a parameter\n      'parameters' => array(\n\n        // The property name to fill is vehicle.\n        'vehicle' => 'Airplane'\n      ),\n    ),\n\n    'FirstClass' => array(\n      // Again we want to use this as a parameter\n      'parameters' => array(\n\n        // The property name to fill is first name and \n        //last name.\n        'first_name' => 'Neil',\n        'last_name' => 'deGrasse Tyson',\n      ),\n    ),\n  ),\n);\n\n// We want to instantiate the Di\\Configuration now.\nuse \\Zend\\Di\\Configuration; \n\n$diConfiguration = new Configuration($configuration);\n\n// Now instantiate the Di itself, with the configuration \n// attached.\n$di = new \\Zend\\Di\\Di($configuration);\n\n// And to get the object we want to use, we just do the \n//same as before.\n$firstClass = $di->get('OneNamespace\\FirstClass');\n```", "```php\n<?php\nreturn array(\n\n  // We want to create a new database connection\n  'db' => array(\n\n    // The driver we want to use is the Pdo, our  \n    // favorite\n    'driver' => 'Pdo',\n\n    // This is our connection url, defining a MySQL \n    // connection, with database 'somename' which is \n    // available on the localhost server.\n    'dsn' => 'mysql:dbname=somename;host=localhost',\n\n    // This is exactly what we should NOT do in this  \n    // file, shame on you developer!\n    'username' => 'terribleuser',\n    'password' => 'evenworsepassword',\n  ),\n\n  // We need a database adapter defined as well, \n  // otherwise we can't use it at all.\n  'service_manager' => array(\n    'factories' => array(\n      'Zend\\Db\\Adapter\\Adapter' => \n  'Zend\\Db\\Adapter\\AdapterServiceFactory',\n    ),\n  ),\n);\n```", "```php\n<?php\nreturn array(\n\n  // We want to create a new database connection\n  'db' => array(\n\n    // The driver we want to use is the Pdo, our  \n    // favorite\n    'driver' => 'Pdo',\n\n    // This is our connection url, defining a MySQL \n    // connection, with database 'somename' which is \n    // available on the localhost server.\n    'dsn' => 'mysql:dbname=somename;host=localhost',\n  ),\n\n  // We need a database adapter defined as well, \n  // otherwise we can't use it at all.\n  'service_manager' => array(\n    'factories' => array(\n      'Zend\\Db\\Adapter\\Adapter' => \n  'Zend\\Db\\Adapter\\AdapterServiceFactory',\n    ),\n  ),\n);\n```", "```php\n<?php\nreturn array(\n  'db' => array(\n    'username' => 'awesomeuser',\n    'password' => 'terriblepassword',\n  ),\n);\n```", "```php\n<?php \n\nreturn array(\n  // This should be an array of module namespaces used \n  // in the application.\n  'modules' => array(\n    'Application',\n  ),\n[..]\n```", "```php\n<?php\nreturn array(\n  'service_manager' => array(\n     // These are the factories needed by the Service \n     // Locator to load in the session manager\n    'factories' => array(\n      'Zend\\Session\\Config\\ConfigInterface' => \n  'Zend\\Session\\Service\\SessionConfigFactory',\n      'Zend\\Session\\Storage\\StorageInterface' => \n  'Zend\\Session\\Service\\SessionStorageFactory',\n      'Zend\\Session\\ManagerInterface' => \n  'Zend\\Session\\Service\\SessionManagerFactory',\n    ),\n    'abstract_factories' => array(\n  'Zend\\Session\\Service\\ContainerAbstractFactory',\n    ),\n  ),\n  'session_config' => array(\n    // How long can the session be idle for in seconds \n    // before it is being invalidated\n    'remember_me_seconds' => 3600,\n\n    // What is the name of the session (can be anything)\n    'name' => 'some_name',\n  ),\n  // What kind of session storage do we want to use, \n  // only SessionArrayStorage is available at the minute\n  'session_storage' => array(\n    'type' => 'SessionArrayStorage',\n    'options' => array(), \n  ),\n  // These are session containers we can use to store \n  // our information in\n  'session_containers' => array(\n    'ContainerOne',\n    'ContainerTwo',\n  ),\n);\n```", "```php\n<?php\n\nnamespace Application;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractController\n{\n  public function indexAction()\n  {\n    // Every session container we define receives a \n    // SessionContainer\\ prefix before the name\n    $containerOne = $this->getServiceLocator()\n  ->get('SessionContainer\\ContainerOne');\n  }\n}\n```", "```php\n<?php\n// Don't forget to add the namespace\nnamespace Application\\Model;\n\n// We shouldn't forget to add these!\nuse Zend\\EventManager\\EventManager;\n\nclass SwagMachine\n{\n  // This will hold our EventManager\n  private $em;\n\n  public function getEventManager() \n  {\n    // If there is no EventManager, make one!\n    if (!$this->em) {\n      $this->em = new EventManager(__CLASS__);\n    }\n\n    // Return the EventManager.\n    return $this->em;\n  }\n\n  public function findSwag($id)\n  {\n    // Trigger our findSwag.begin event \n    // and push our $id variable with it.\n    $response = $this->getEventManager()\n                     ->trigger(\n           'findSwag.begin', \n           $this,\n           array(\n             'id' => $id\n           )\n    );\n\n    // Make our last response, the final \n    // ID if there is a response.\n    if ($response->count() > 0)\n      $id = $response->last();\n\n    // ********************************\n    // In the meantime important code \n    // is happening...\n    // ********************************\n\n    // ...And that ends up with the \n    // folowing return value:\n    $returnValue = 'Original Value ('. $id. ')';\n\n    // Now let's trigger our last \n    // event called findSwag.end and \n    // give the returnValue as a \n    // parameter.\n    $this->getEventManager()\n         ->trigger(\n           'findSwag.end', \n           $this, \n           array(\n             'returnValue' => $returnValue\n           )\n    );\n\n    // Now return our value.\n    return $returnValue;\n  }\n}\n```", "```php\n<?php\n\nnamespace Application\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction() \n  {\n    // Get our SwagMachine\n    $machine = new SwagMachine();\n\n    // Let's attach our first callback, \n    // which potentially will increase \n    // the $id with 10, which would \n    // make it result in 30!\n    $machine->getEventManager()\n            ->attach(\n        'findSwag.begin',\n        function(Event $e) \n        {\n          // Get the ID from our findSwag() \n          // method, and add it up with 12.\n          return $e->getParam('id') + 10;\n        },\n        200\n    );\n\n    // Now attach our second callback, \n    // which potentially will increase \n    // the value of $id to 60! We give \n    // this a *higher* priority then \n    // the previous attached event \n    // trigger.\n    $machine->getEventManager()\n            ->attach(\n        'findSwag.begin',\n        function(Event $e) \n        {\n        // Get the ID from our findSwag() \n        // method, and add it up with 15.\n        return $e->getParam('id') + 40;\n      },\n      100\n    );\n\n    // Now create a trigger callback \n    // for the end event called findSwag.end, \n    // which has no specific priority, \n    // and will just output to the screen.\n    $machine->getEventManager()\n            ->attach(\n        'findSwag.end',\n        function(Event $e) \n        {\n          echo 'We are returning: '\n             . $e->getParam('returnValue');\n        }\n    );\n\n    // Now after defining the triggers, \n    // simply try and find our 'Swag'.      \n    echo $machine->findSwag(20);\n  }\n}\n```", "```php\nWe are returning: Original Value (60)\nOriginal Value (60)\n\n```", "```php\nModule.php:\nnamespace Application;\n\n// We are going to use events, and because we use a MVC, \n// we need to use the MvcEvent.\nuse Zend\\Mvc\\MvcEvent;\n\nclass Module\n{\n  public function onBootstrap(MvcEvent $e)\n  {\n    // Get our SharedEventManager from the MvcEvent $e \n    // that we got from the method\n    $sharedEvents = $e->getApplication()\n                      ->getEventManager()\n                      ->getSharedManager();\n\n    // Also retrieve the ServiceManager of the \n    // application.\n    $sm = $e->getApplication()->getServiceManager();\n\n    // Let's propose a new ViewStrategy to our \n    // EventManager.\n    $sharedEvents->attach(\n\n        // We are attaching the event to this namespace \n        // only.\n        __NAMESPACE__, \n\n        // We want to attach to this very specific \n        // event, the Dispatch event of our controller.\n        MvcEvent::EVENT_DISPATCH, \n\n        // The callback function of the event, used when \n        // the event we attached to happens. In our \n        // callback we also want our local variable $sm \n        // to be available for use.\n        function($e) use ($sm) \n        {\n          // Get our alternate view strategy from the \n          // ServiceManager and attach the EventManager     \n          // to the strategy.\n          $strategy = $sm->get('ViewJsonStrategy');\n          $view = $sm->get('ViewManager')->getView();\n          $strategy->attach($view->getEventManager());\n        }, \n\n        // We want to give this a priority, so this will \n        // get more priority.\n        100\n    );\n}\n```"]