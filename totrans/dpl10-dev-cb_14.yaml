- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Migrating External Data into Drupal
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将外部数据迁移到 Drupal 中
- en: Whether you have been developing for a while or just getting started in your
    career, one very common situation you will encounter is the need to bring in data
    from an external source. This can include migrating from older versions of Drupal,
    migrating from sites not based on Drupal, different database engines, static HTML
    files, or incorporating data from CSV or HTTP APIs with JSON or XML.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您已经开发了一段时间还是刚开始您的职业生涯，您都会遇到一个非常常见的情况，那就是需要从外部来源引入数据。这可能包括从旧版本的 Drupal 迁移，从非
    Drupal 网站迁移，不同的数据库引擎，静态 HTML 文件，或者从 CSV 或 HTTP API 中整合 JSON 或 XML 数据。
- en: No matter the scenario, Drupal contains several powerful tools to solve these
    needs with the core Migrate module. Under the hood, it also contains a powerful
    plugin system that allows you to extend and define your own data source or process
    plugin, as well as a healthy ecosystem of contributed modules to enhance the migration
    experience in Drupal.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种场景，Drupal 都包含几个强大的工具，通过核心 Migrate 模块解决这些需求。在底层，它还包含一个强大的插件系统，允许您扩展和定义自己的数据源或处理插件，以及一个健康的贡献模块生态系统，以增强
    Drupal 中的迁移体验。
- en: 'In this chapter, we will look at the Migrate module in Drupal 10, and you will
    learn how to achieve the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Drupal 10 中的 Migrate 模块，您将学习如何实现以下内容：
- en: Migrating from a previous version of Drupal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从旧版本的 Drupal 迁移
- en: Migrating data from a **comma-separated value** (**CSV**) file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从逗号分隔值（CSV）文件迁移数据
- en: Migrating data from a remote HTTP API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从远程 HTTP API 迁移数据
- en: Writing a custom migration source plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自定义迁移源插件
- en: Writing a custom process plugin for migrations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为迁移编写自定义处理插件
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the full code used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp14](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp14)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到本章中使用的完整代码：[https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp14](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp14)
- en: Migrating from a previous version of Drupal
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从旧版本的 Drupal 迁移
- en: Drupal ships with a couple of core modules that assist you in updating your
    site from Drupal 6 or 7 to Drupal 10\. The architecture between previous versions
    of Drupal before version 8 was radically different in design, and you cannot upgrade
    from 6 or 7 the same way you can from 8 or 9.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 随带了一些核心模块，可以帮助您将网站从 Drupal 6 或 7 更新到 Drupal 10。在版本 8 之前的 Drupal 旧版本之间的架构在设计上有着根本的不同，您不能像从
    8 或 9 版本那样升级。
- en: To mitigate the challenges of upgrading from Drupal 6 or 7, the Migrate Drupal
    module helps prepare a new environment for your older Drupal database to migrate
    to and is included in the core release of Drupal 10.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻从 Drupal 6 或 7 升级的挑战，Migrate Drupal 模块帮助为您的旧 Drupal 数据库准备一个新的迁移环境，并包含在 Drupal
    10 的核心版本中。
- en: Custom modules, custom themes, and custom Drush commands
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义模块、自定义主题和自定义 Drush 命令
- en: An important thing to note about upgrading from versions of Drupal prior to
    version 8 is that you will need to *manually* port custom modules, custom theme(s),
    and custom Drush commands you may have created. There are no tools to automate
    this, and they *will not work* until you have ported them to be compatible with
    Drupal 10\. This must be done prior to upgrading, or you may encounter several
    errors while attempting to migrate or review your progress.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于从版本 8 之前的 Drupal 版本升级的一个重要注意事项是，您将需要**手动**移植您可能创建的自定义模块、自定义主题和自定义 Drush 命令。没有工具可以自动化此过程，并且它们**不会工作**，直到您将它们移植以与
    Drupal 10 兼容。这必须在升级之前完成，否则在尝试迁移或审查您的进度时可能会遇到多个错误。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before you perform any migration from an older version of Drupal, it is important
    to have prepared the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在您从旧版本的 Drupal 执行任何迁移之前，准备以下内容是很重要的：
- en: A working environment running Drupal 10
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Drupal 10 的工作环境
- en: A copy of the Drupal 6/7 database to use in the upgrade
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于升级的 Drupal 6/7 数据库副本
- en: An inventory of modules and theme(s) used on the site you are migrating from
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您要迁移的网站上使用的模块和主题清单
- en: A database server that has both the Drupal 10 database and the old Drupal 6/7
    database
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数据库服务器，其中既有 Drupal 10 数据库，也有旧 Drupal 6/7 数据库
- en: The database credentials needed to connect to the Drupal 6/7 database in your
    server
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到您服务器上的 Drupal 6/7 数据库所需的数据库凭据
- en: A copy of all public and private files from the old site in a place accessible
    by the new site
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从旧网站复制所有公共和私有文件到新网站可访问的位置
- en: Enabling the Migrate Drupal and Migrate Drupal UI module in your Drupal 10 site
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的 Drupal 10 网站中启用 Migrate Drupal 和 Migrate Drupal UI 模块
- en: A *database backup* of your current Drupal 10 installation
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对当前 Drupal 10 安装的 *数据库备份*
- en: We will walk through these steps in the next section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中逐步介绍这些步骤。
- en: It is likely that you will need to iterate on the migration before it is complete,
    especially with old, complex sites. So, before you proceed, make sure you take
    a *database backup* of your Drupal 10 site. That way, if something goes wrong
    during the migration, you can restore the database, make changes, and try again.
    This is much faster than having to completely reinstall Drupal 10 to start the
    migration over. Always keep a clean database backup available. Let’s begin!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移完成之前，你可能需要迭代这个过程，尤其是对于老旧、复杂的网站。因此，在继续之前，请确保您备份了 Drupal 10 网站的 *数据库备份*。这样，如果在迁移过程中出现问题，您可以恢复数据库，进行更改，并再次尝试。这比完全重新安装
    Drupal 10 来重新开始迁移要快得多。始终保持一个干净的数据库备份可用。让我们开始吧！
- en: How to do it…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: With your new Drupal 10 site installed and ready, the first step you need to
    take is to review the modules you were using in your Drupal 6/7 site. You should
    log in to the site you are migrating from and go to the module list section of
    the admin. You can also get this list using the Drush command-line tool if you
    prefer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Drupal 10 网站安装并准备就绪后，您需要采取的第一步是审查您在 Drupal 6/7 网站上使用的模块。您应该登录到您要迁移的网站，并转到管理后台的模块列表部分。如果您更喜欢使用
    Drush 命令行工具，您也可以获取此列表。
- en: 'Write down the list of contributed modules and themes that are in use in the
    old Drupal site. You are going to have to evaluate the following questions per
    module:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 记录下在旧 Drupal 网站中使用中的贡献模块和主题列表。您将不得不针对每个模块评估以下问题：
- en: Do I still need this module on Drupal 10?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我是否还需要在 Drupal 10 上使用此模块？
- en: Has the contributed module moved to the core?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献模块是否已迁移到核心？
- en: Does the contributed module have a Drupal 10 version available? If not, do I
    still need it? Is there an alternative module with similar functionality?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献模块是否有 Drupal 10 版本可用？如果没有，我是否还需要它？是否有具有类似功能的替代模块？
- en: Does this module provide an upgrade path and migration integration to move data
    from a previous version of Drupal?
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此模块是否提供升级路径和迁移集成，以将数据从之前的 Drupal 版本迁移过来？
- en: Keeping an inventory like this is required when upgrading from versions of Drupal
    prior to version 8.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在从版本 8 之前的 Drupal 版本升级时，需要保持这样的清单
- en: As you go down the list and answer each question, you can update your Drupal
    10 site by selecting the module you need with Composer. The idea is that you get
    the Drupal 10 environment ready first by making the modules and themes available
    that were being used in the previous Drupal site.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在回答列表中的每个问题的时候，您可以通过 Composer 选择所需的模块来更新您的 Drupal 10 网站。想法是首先通过使之前 Drupal 网站中使用的模块和主题可用，来准备好
    Drupal 10 环境。
- en: Some modules, such as views, have been moved into Drupal core and do not have
    a contributed version available. Others, such as Pathauto, have newer versions
    available for Drupal and also include migration plugins. These migration plugins
    are used automatically by the Migrate Drupal module when migrating your old site.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模块，如 views，已被移入 Drupal 核心，并且没有贡献版本可用。其他模块，如 Pathauto，为 Drupal 提供了更新的版本，并且还包括迁移插件。这些迁移插件在迁移您的旧网站时由
    Migrate Drupal 模块自动使用。
- en: 'Not all modules have compatible versions for Drupal 10, unfortunately. This
    can happen when they are replaced by a competing module (Field Collections versus
    Paragraphs, for example) or the maintainer(s) decided not to port the module beyond
    Drupal 7\. If you find that there is a module in your Drupal 6/7 site you absolutely
    need for your Drupal 10 site, you have limited options in this case. You can do
    the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，并非所有模块都有与 Drupal 10 兼容的版本。这可能发生在它们被竞争性模块（例如，Field Collections 与 Paragraphs）取代，或者维护者决定不将模块迁移到
    Drupal 7 以外。如果您发现您的 Drupal 6/7 网站中有一个您绝对需要在 Drupal 10 网站上使用的模块，在这种情况下您的选择有限。您可以执行以下操作：
- en: Check the module issue queue to see whether a newer version has been worked
    on
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查模块问题队列，以查看是否已经对较新版本进行了工作
- en: Check the module yourself and with your development team to assess how hard
    porting it would be
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您自己和您的开发团队检查该模块，以评估迁移的难度
- en: See whether an alternative module exists for Drupal 10 that is similar and make
    the configuration changes you need (it may be possible to provide a migration
    path as well)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看是否存在与 Drupal 10 类似的替代模块，并做出您需要的配置更改（可能还可以提供迁移路径）
- en: Use a tool such as Drupal Module Upgrader ([https://www.drupal.org/project/drupalmoduleupgrader](https://www.drupal.org/project/drupalmoduleupgrader))
    to help you figure out how to port the module
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用像 Drupal Module Upgrader（[https://www.drupal.org/project/drupalmoduleupgrader](https://www.drupal.org/project/drupalmoduleupgrader)）这样的工具来帮助您了解如何移植模块
- en: Consult the official Drupal Slack channel, Drupal Stack Exchange website, and/or
    a development agency to help you port the functionality to Drupal 10 if you or
    your team are unable to
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 咨询官方 Drupal Slack 频道、Drupal Stack Exchange 网站，或开发机构以帮助您将功能移植到 Drupal 10，如果您或您的团队无法完成此操作
- en: Choosing to port the module?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 是否选择移植模块？
- en: If you do wind up porting the module to Drupal 10, be sure to contribute the
    work back to the community on [Drupal.org](https://Drupal.org). Not only is it
    a good learning experience on how to develop a module and learn the new APIs of
    Drupal 10, but paying it forward also helps other people who may be stuck too.
    You can request to be a maintainer of the module and ensure bug fixes and feature
    enhancements are published.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您最终将模块移植到 Drupal 10，请确保将工作贡献回社区在 [Drupal.org](https://Drupal.org)。这不仅是一个很好的学习经验，了解如何开发模块和学习
    Drupal 10 的新 API，而且将知识传递下去也有助于其他可能遇到困难的人。您可以申请成为模块的维护者，确保错误修复和功能增强被发布。
- en: 'Now that you have gone through the list of modules, begin adding the ones you
    need to your Drupal 10 site with Composer:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经通过了模块列表，请使用 Composer 将您需要的模块添加到您的 Drupal 10 网站中：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you have all the required modules and theme(s), be sure to enable them.
    Don’t worry about configuring all of the added modules; the migration will take
    care of that for you. If they are not enabled, the migration process won’t see
    or use any migration plugins they may have, and you may not get all of your data
    migrated across.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有了所有必需的模块和主题，请确保启用它们。不必担心配置所有新增的模块；迁移过程会为您处理这些。如果它们未被启用，迁移过程将无法看到或使用它们可能拥有的任何迁移插件，并且您可能无法迁移所有数据。
- en: If these modules contain migration plugins for Drupal 6/7, these will be incorporated
    when running a migration into your Drupal 10 site automatically.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些模块包含 Drupal 6/7 的迁移插件，它们将在运行迁移到您的 Drupal 10 网站时自动合并。
- en: Running the Drupal migration
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行 Drupal 迁移
- en: Now that our environment is ready and we have all the modules we need, let’s
    proceed with the migration.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了环境，并且拥有了所有需要的模块，让我们开始迁移过程。
- en: 'Navigate to `/upgrade`. You will be greeted with this screen:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `/upgrade`。您将看到以下屏幕：
- en: '![Figure 14.1 – The Upgrade screen provides a wizard for upgrading from older
    versions](img/Figure_14.1_B18548.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1 – 升级屏幕提供了一个从旧版本升级的向导](img/Figure_14.1_B18548.jpg)'
- en: Figure 14.1 – The Upgrade screen provides a wizard for upgrading from older
    versions
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1 – 升级屏幕提供了一个从旧版本升级的向导
- en: The Migrate Drupal UI module provides this interface to help you perform the
    migration from within the administrative section. Review the preparation steps
    one last time, and then click **Continue**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Migrate Drupal UI 模块提供了这个界面，帮助您在管理部分内执行迁移。再次审查准备步骤，然后点击**继续**。
- en: On the next screen, we need to set which version of Drupal we are migrating
    from, as well as the database credentials required to connect to the old database.
    If you are unsure of what to enter for the database host or credentials, check
    the platform documentation of what to use (Lando, DDEV, Docksal, etc.) to connect
    to a second database.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一屏幕上，我们需要设置要迁移的 Drupal 版本，以及连接到旧数据库所需的数据库凭据。如果您不确定数据库主机或凭据应该输入什么，请检查平台文档了解如何连接到第二个数据库（Lando、DDEV、Docksal
    等）。
- en: '![Figure 14.2 – The migrate wizard will prompt for the database credentials
    of the previous version of Drupal](img/Figure_14.2_B18548.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2 – 迁移向导将提示输入先前版本 Drupal 的数据库凭据](img/Figure_14.2_B18548.jpg)'
- en: Figure 14.2 – The migrate wizard will prompt for the database credentials of
    the previous version of Drupal
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – 迁移向导将提示输入先前版本 Drupal 的数据库凭据
- en: Where is the option for Drupal 8 or 9?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 哪里可以找到 Drupal 8 或 9 的选项？
- en: If you are updating from Drupal 8 or 9, you do not need to leverage Migrate
    Drupal or this interface. Instead, you should proceed with the regular update
    process for Drupal to go from Drupal 8 or 9 to Drupal 10\. If you are migrating
    partial data from a Drupal 8 or 9 site and starting over in Drupal 10, you will
    need to write your own migration script(s). See the later sections in this chapter
    for examples.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是从 Drupal 8 或 9 更新，您不需要利用 Migrate Drupal 或此界面。相反，您应该继续使用 Drupal 的常规更新过程，从
    Drupal 8 或 9 升级到 Drupal 10。如果您正在从 Drupal 8 或 9 站点迁移部分数据并在 Drupal 10 中重新开始，您将需要编写自己的迁移脚本。请参阅本章后面的部分以获取示例。
- en: Setting the public/private files source
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置公共/私有文件源
- en: On the bottom of the previous screen, you can set the source for any public
    and private files that were uploaded to the old site.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一屏幕的底部，您可以设置上传到旧站点的任何公共和私有文件的源。
- en: '![Figure 14.3 – You can specify where the uploaded files are located on the
    old site so that the migration can locate them](img/Figure_14.3_B18548.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.3 – 您可以指定上传的文件在旧站点上的位置，以便迁移可以找到它们](img/Figure_14.3_B18548.jpg)'
- en: Figure 14.3 – You can specify where the uploaded files are located on the old
    site so that the migration can locate them
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3 – 您可以指定上传的文件在旧站点上的位置，以便迁移可以找到它们
- en: You have the option of either setting a local path to the files or adding a
    URL to a public website.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择设置文件的本地路径或添加到公共网站的 URL。
- en: The migration will source the files from their old paths, so if your files were
    previously uploaded to `sites/default/files`, you need to supply them in the same
    location. For the value of the public files, you then enter `/var/www/web`, the
    location of the web root for your site.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移将从旧路径源文件，因此如果您的文件之前上传到 `sites/default/files`，您需要在该位置提供它们。对于公共文件的值，您然后输入 `/var/www/web`，这是您网站
    web 根目录的位置。
- en: Document root
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 文档根目录
- en: Note that, in some cases, the webroot can be named `docroot` instead of `web`.
    This can vary depending on your setup of Lando, DDEV, Docksal, and so on, and/or
    vary if you use a managed hosting provider such as Acquia, Pantheon, or **Platform.sh**.
    If unsure, check the documentation that applies in your case.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在某些情况下，webroot 可以命名为 `docroot` 而不是 `web`。这取决于您的 Lando、DDEV、Docksal 等设置，以及/或如果您使用
    Acquia、Pantheon 或 **Platform.sh** 等托管主机提供商，可能会有所不同。如果您不确定，请检查适用于您情况的文档。
- en: You can do the same for private files.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以对私有文件做同样处理。
- en: If you choose to use a web address instead, this will also work. However, running
    a migration that pulls files across the internet may result in a migration taking
    a lot longer than you expect. Also, you risk knocking your live website offline
    with several file requests. While you can opt for this route, it is generally
    not advised for larger migrations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择使用网址，这也会起作用。然而，运行从互联网拉取文件的迁移可能会导致迁移所需的时间比您预期的要长得多。此外，您可能会因为多个文件请求而使您的实时网站离线。虽然您可以选择这条路线，但对于较大的迁移来说，通常不建议这样做。
- en: When you have added all the applicable settings, click **Review Upgrade**. This
    screen will display a list of items that will be upgraded and is the final step
    before executing the migration.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当您已添加所有适用的设置后，点击 **审查升级**。此屏幕将显示将要升级的项目列表，这是执行迁移前的最后一步。
- en: Running the migration
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行迁移
- en: At this point, the system is now performing the migration from the old version
    of Drupal to Drupal 10\. The batch process will run until it completes (or encounters
    an error). Depending on the size and build of your old site, this can take a while.
    You may leave the computer and take a break; just be sure to leave the browser
    window open.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，系统正在从旧版本的 Drupal 迁移到 Drupal 10。批处理过程将一直运行，直到完成（或遇到错误）。根据您旧站点的规模和构建，这可能需要一段时间。您可以离开电脑休息一下；只需确保浏览器窗口保持打开即可。
- en: If the migration has an error, the process won’t complete. While unfortunate,
    this can happen, depending on how complex your previous site was. At this point,
    you should review the site logs to see what the errors were. These can be addressed
    and the migration can be performed again. You may need to adjust some migration
    settings, you may need a patch for a module (to support the migration), or it
    may be some other kind of error altogether.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果迁移出现错误，则过程将不会完成。虽然不幸，但这可能会发生，具体取决于您之前站点的复杂程度。在这种情况下，您应该检查站点日志以查看错误是什么。这些问题可以解决，然后可以再次执行迁移。您可能需要调整一些迁移设置，可能需要为模块（以支持迁移）提供补丁，或者可能是其他类型的错误。
- en: Remember the database backup we made of the Drupal 10 site in preparation? After
    addressing what you found in the site logs, go ahead and restore the database.
    You should be able to go back to the first upgrade screen and start the migration
    over, which is faster than setting up Drupal 10 again from scratch.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们为准备Drupal 10站点所做的数据库备份吗？在处理了你在站点日志中找到的问题之后，继续恢复数据库。你应该能够回到第一个升级界面并重新开始迁移，这比从头开始设置Drupal
    10要快。
- en: If everything went fine, the migration will finish and you will have migrated
    your old Drupal site to Drupal 10!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，迁移将完成，你将成功将你的旧Drupal站点迁移到Drupal 10！
- en: Migration complete!
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移完成！
- en: When it has completed, take a look around your admin. You should see familiar
    items, such as content types, taxonomy, media types, user roles, uploaded files,
    redirects, and other items from your previous site, as well as all of your content
    and user accounts restored.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当它完成时，环顾一下你的管理界面。你应该会看到熟悉的项目，例如内容类型、分类法、媒体类型、用户角色、上传的文件、重定向以及其他来自你之前站点的项目，以及所有你的内容和用户账户都已恢复。
- en: Do note that certain items such as view configurations cannot be automatically
    migrated. This is due to the complex nature of views themselves. Fortunately,
    views are very easy to build out in the admin, and you can always tackle that
    once you verify the migration was successful.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些项目，如视图配置，无法自动迁移。这是由于视图本身的复杂性质。幸运的是，在管理界面中构建视图非常容易，一旦你验证迁移成功，你总是可以处理这个问题。
- en: How it works…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Drupal core contains dozens of plugins and migration paths to migrate from older
    Drupal 6 or 7 installations. These help explain to newer versions of Drupal how
    to access, transform, and save data into the new system during migration.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal核心包含数十个插件和迁移路径，用于从旧版本的Drupal 6或7安装迁移。这些帮助解释了新版本的Drupal如何访问、转换并在迁移过程中将数据保存到新系统中。
- en: 'For example, the core Filter module has existed in several versions of Drupal.
    However, its schema, configuration, and data structure have changed over the years.
    It does not map 1:1 with Drupal 10\. If you look in the module directory at `core/modules/filter`,
    you will notice a directory called `migrations`. There are a handful of files
    in here that help Drupal understand how to map old filters from Drupal 6 and 7
    into your new Drupal 10 installation. You can see an example of this in `d7_filter_format.yml`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，核心的过滤器模块在Drupal的几个版本中都存在。然而，它的模式、配置和数据结构在多年中发生了变化。它并不与Drupal 10一一对应。如果你查看`core/modules/filter`模块目录，你会注意到一个名为`migrations`的目录。这里有一些文件帮助Drupal理解如何将旧过滤器从Drupal
    6和7映射到你的新Drupal 10安装中。你可以在`d7_filter_format.yml`中看到这个示例：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Without getting too deep into the details just yet, this definition helps the
    migration process understand how to transform and move the filter and filter settings
    coming into Drupal 10\. Files like these are loaded and used automatically when
    using the Migrate Drupal module, and you can see several examples of them spread
    around Drupal core.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入细节之前，这个定义有助于迁移过程理解如何转换和移动即将进入Drupal 10的过滤器和过滤设置。这些文件在使用迁移Drupal模块时自动加载和使用，你可以在Drupal核心中看到它们的几个示例。
- en: Contributed modules can provide these as well. This is how we are able to migrate
    from older versions of Drupal without losing data. Most popular contributed modules
    will migrate fine with no problems, but some modules do not include files. You
    can check the issue queue(s) for help, but it is also possible to write your own
    in a custom module too.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献模块也可以提供这些功能。这就是我们能够从旧版本的Drupal迁移而不丢失数据的原因。大多数流行的贡献模块都能顺利迁移且没有问题，但有些模块不包括文件。你可以检查问题队列以获取帮助，但也可以在自定义模块中编写自己的代码。
- en: We will look at custom migration source and migration process plugins in later
    sections.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，我们将探讨自定义迁移源和迁移过程插件。
- en: Migrating data from CSV file(s)
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从CSV文件迁移数据
- en: From time to time, you will encounter the need to migrate data into Drupal,
    which comes in various formats. One such popular format is **CSV**, or a **comma-separated
    value**. CSV files can be exported from various database clients and spreadsheet
    software and make an excellent data source candidate for migrations.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要将数据迁移到Drupal中，这些数据以各种格式存在。其中一种流行的格式是**CSV**，或称为**逗号分隔值**。CSV文件可以从各种数据库客户端和电子表格软件中导出，是迁移的优秀数据源候选者。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'From here, we are going to need to add two modules to migrate from CSV files.
    Using Composer, download the following modules:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们需要添加两个模块来从CSV文件进行迁移。使用Composer，下载以下模块：
- en: Migrate Plus ([https://www.drupal.org/project/migrate_plus](https://www.drupal.org/project/migrate_plus))
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移增强 ([https://www.drupal.org/project/migrate_plus](https://www.drupal.org/project/migrate_plus))
- en: Migrate Tools ([https://www.drupal.org/project/migrate_tools](https://www.drupal.org/project/migrate_tools))
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移工具 ([https://www.drupal.org/project/migrate_tools](https://www.drupal.org/project/migrate_tools))
- en: Migrate Source CSV ([https://www.drupal.org/project/migrate_source_csv](https://www.drupal.org/project/migrate_source_csv))
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移源CSV ([https://www.drupal.org/project/migrate_source_csv](https://www.drupal.org/project/migrate_source_csv))
- en: You will also need to create a custom module where we will place our migration
    definitions, source plugins, and process plugin classes. At this point, you should
    be familiar with creating a custom module. Consult the previous chapters if you
    need to refresh.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要创建一个自定义模块，我们将在这里放置迁移定义、源插件和过程插件类。到这一点，你应该熟悉创建自定义模块。如果需要刷新，请参考前面的章节。
- en: How to do it…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: When you have to perform migrations in Drupal that cannot use Migrate Drupal,
    you have to write your own migration YAML configuration files in a custom module.
    This is because the Migrate Drupal module is specifically for migrating in from
    older versions of Drupal, treating that old version of Drupal as the *source*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你必须执行无法使用Migrate Drupal的Drupal迁移时，你必须在一个自定义模块中编写自己的迁移YAML配置文件。这是因为Migrate Drupal模块专门用于从旧版本Drupal迁移，将那个旧版本Drupal视为*源*。
- en: 'In this case, the CSV file(s) will be the *source* of the migration. Every
    migration consists of three main parts:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，CSV文件将是迁移的*源*。每次迁移都由三个主要部分组成：
- en: 'The **source**: This is the provider of data consumed by the migration.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源**：这是为迁移提供数据的提供者。'
- en: 'The **destination**: This is where each record will be migrated into and stored
    – typically, an entity (node, user, media, taxonomy, etc.).'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：这是每个记录将被迁移到并存储的地方——通常是一个实体（节点、用户、媒体、分类法等）。'
- en: 'The **process**: This pipeline defines how source data is transformed and saved
    for a migration item. Here, you can define various fields and properties on the
    *destination* and use a number of *process* plugins to make the *source* data
    fit into the field(s) the way you want (or the way Drupal may require it to be).'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过程**：此管道定义了源数据如何转换和保存为迁移项。在这里，你可以定义`目标`上的各种字段和属性，并使用多个`过程`插件来使`源`数据适合你想要的字段（或Drupal可能要求的方式）。'
- en: 'Before we proceed, let’s look at a quick example of a migration definition
    for migrating from a CSV file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们看看一个从CSV文件迁移的迁移定义的快速示例：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s assume we need to use a CSV file to migrate in URLs from an old website
    and store them in Drupal as redirects, using the Redirect contributed module ([https://www.drupal.org/project/redirect](https://www.drupal.org/project/redirect)).
    By doing so, we can ensure URLs that existed on the old site can successfully
    redirect to their new URLs in Drupal so that we don’t lose visitors.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要使用CSV文件将旧网站的URL迁移到Drupal，并使用重定向贡献模块([https://www.drupal.org/project/redirect](https://www.drupal.org/project/redirect))将它们存储为重定向。通过这样做，我们可以确保旧网站上存在的URL可以成功重定向到Drupal中的新URL，这样我们就不会失去访客。
- en: In order to do this, we’ve defined a migration definition file named `migrate_plus.migration.redirects.yml`
    in the `config/install` directory of our custom module. This is for migrations
    that need the Migrate Plus contributed module to execute (as Migrate Source CSV
    does).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们在自定义模块的`config/install`目录中定义了一个名为`migrate_plus.migration.redirects.yml`的迁移定义文件。这是为需要Migrate
    Plus贡献模块来执行迁移（如Migrate Source CSV）的迁移。
- en: Here, you can clearly see the `source`, `destination`, and `process` sections.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以清楚地看到`源`、`目标`和`过程`部分。
- en: The `source` section tells the migration that we are going to use the CSV plugin
    (provided by the Migrate Source CSV module), a path to the CSV file itself, the
    ID keys (what Migrate will use to track unique row values), and some constant
    values to use in the process pipeline.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`源`部分告诉迁移我们将使用CSV插件（由Migrate Source CSV模块提供），CSV文件的路径，ID键（Migrate将使用它来跟踪唯一行值），以及在过程管道中使用的某些常量值。'
- en: The `destination` section tells the migration we want to save data using the
    `entity:redirect` plugin. This plugin ensures migrated values are saved as Redirect
    entities.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`目标`部分告诉迁移我们想要使用`entity:redirect`插件来保存数据。此插件确保迁移的值被保存为重定向实体。'
- en: The `process` section maps fields and properties on the entity to data values
    in the migration source. In this case, `redirect_source`, `redirect_redirect`,
    `uid`, and `status_code` are being mapped to `old_url` and `new_url` in our CSV
    file, and constant values are used for `uid` and `status_code` (defined in the
    preceding source section).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`process`部分将实体上的字段和属性映射到迁移源中的数据值。在这种情况下，`redirect_source`、`redirect_redirect`、`uid`和`status_code`被映射到CSV文件中的`old_url`和`new_url`，而`uid`和`status_code`使用常量值（在先前的源部分定义）。'
- en: 'The CSV file under `/data/redirects.csv` of the module contains all of the
    data for the migration. The file contains the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 模块下的`/data/redirects.csv` CSV文件包含迁移的所有数据。文件包含以下内容：
- en: '| **ID** | **old_path** | **new_path** |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| **ID** | **old_path** | **new_path** |'
- en: '| 1 | `/``foo` | `/``node/1` |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `/``foo` | `/``node/1` |'
- en: '| 2 | `/``foo/bar` | `/``node/2` |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `/``foo/bar` | `/``node/2` |'
- en: '| 3 | `/``foo/bar/baz` | `/``node/3` |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `/``foo/bar/baz` | `/``node/3` |'
- en: Table 14.1 – The CSV file under /data/redirects.csv
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 表14.1 – `/data/redirects.csv`下的CSV文件
- en: The CSV file contains a few hundred records like the preceding one.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件包含了几百条与前面类似的记录。
- en: What about the alias?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 别名怎么办？
- en: When migrating redirects the URLs into Drupal, the destination (in this case,
    `new_path`) needs to be the Drupal entity path (`/node/1`, for example). Drupal
    will save the redirect correctly. If you have Pathauto auto-alias patterns in
    place, they will be generated when the migration saves each row of data. With
    the redirect contributed module installed, a 301 redirect will be created and
    related to the node we are redirecting to automatically.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当将重定向的URL迁移到Drupal时，目的地（在这种情况下，`new_path`）需要是Drupal实体路径（例如`/node/1`）。Drupal将正确保存重定向。如果您已安装Pathauto自动别名模式，它们将在迁移保存每行数据时生成。安装了重定向贡献模块后，将自动创建一个301重定向并将其与我们要重定向到的节点相关联。
- en: When we enable our custom module, the migration appears in the list of migrations
    in the admin section under **Structure** | **Migrations**. Any migration that
    you define will appear in this section. You can run migrations from this interface,
    or you can do it from the command line using Drush, courtesy of the **Migrate
    Tools** contributed module.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启用我们的自定义模块时，迁移将出现在**结构** | **迁移**下的管理部分迁移列表中。您定义的任何迁移都将出现在此部分。您可以从此界面运行迁移，或者您可以使用Drush从命令行运行，这是由于**Migrate
    Tools**贡献模块的恩赐。
- en: '![Figure 14.4 – The Migrations screen lists all registered migrations in Drupal
    and the tasks you can perform with them](img/Figure_14.4_B18548.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图14.4 – Migrations屏幕列出了Drupal中所有注册的迁移以及您可以执行的任务](img/Figure_14.4_B18548.jpg)'
- en: Figure 14.4 – The Migrations screen lists all registered migrations in Drupal
    and the tasks you can perform with them
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 – Migrations屏幕列出了Drupal中所有注册的迁移以及您可以执行的任务
- en: 'Then, we can execute the migration:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以执行迁移：
- en: '![Figure 14.5 – A migration running in the admin, displaying a progress meter](img/Figure_14.5_B18548.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图14.5 – 在管理界面中运行的迁移，显示进度条](img/Figure_14.5_B18548.jpg)'
- en: Figure 14.5 – A migration running in the admin, displaying a progress meter
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 – 在管理界面中运行的迁移，显示进度条
- en: 'We can see that redirects are now showing up in Drupal that were migrated from
    the CSV file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，现在在Drupal中显示的重定向是从CSV文件迁移过来的：
- en: '![Figure 14.6 – The migration created all the URL redirects we expect from
    our CSV file](img/Figure_14.6_B18548.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图14.6 – 迁移创建了从我们的CSV文件中预期的所有URL重定向](img/Figure_14.6_B18548.jpg)'
- en: Figure 14.6 – The migration created all the URL redirects we expect from our
    CSV file
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 – 迁移创建了从我们的CSV文件中预期的所有URL重定向
- en: Migrating into nodes from CSV
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从CSV迁移到节点
- en: Suppose for a second that we have another CSV file that contains data we want
    to migrate into a node type in Drupal. What might the migration definition look
    like? Not all that different actually!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们还有一个包含我们想要迁移到Drupal节点类型中的数据的CSV文件。迁移定义可能看起来会怎样？实际上并没有太大的不同！
- en: '[PRE3]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using the CSV source plugin again, we made a few modifications, and now we have
    another migration defined that is ready to use. In the `destination` section,
    we swapped `entity:redirect` for `entity:node`, and also provided the node type
    (`bundle`) that we want to save the migrated data to.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用CSV源插件，我们进行了一些修改，现在我们定义了另一个可以使用的迁移。在`destination`部分，我们将`entity:redirect`替换为`entity:node`，并提供了我们想要保存迁移数据的节点类型（`bundle`）。
- en: Under the `process` section, we’ve added specific node properties and fields
    from the Article node type that we want to map migrated data to. There are also
    examples here of process plugins that have configurations attached about how we
    want to handle the data.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在`过程`部分，我们添加了从文章节点类型中映射迁移数据所需的具体节点属性和字段。这里也有关于如何处理数据的配置附加到过程插件的示例。
- en: 'You will see a mapping like this in a migration file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在迁移文件中看到如下映射：
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is a shorthand for the `get` plugin provided by the Migrate module. The
    `get` plugin uses the provided value as-is from the source to store in Drupal.
    The longer way to write out using the `get` plugin would be as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对Migrate模块提供的`get`插件的简写。`get`插件直接使用源提供的值存储在Drupal中。使用`get`插件的长写方式如下：
- en: '[PRE5]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The created property shows off another process plugin, `format_date`. The `format_date`
    process plugin allows you to take a date and format it before saving it to Drupal.
    In the preceding example, it is converting a date-time value to a timestamp, which
    is how Drupal stores create and change dates on nodes.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的属性展示了另一个过程插件`format_date`。`format_date`过程插件允许你在保存到Drupal之前对日期进行格式化。在上面的示例中，它将日期时间值转换为时间戳，这是Drupal在节点上存储创建和更改日期的方式。
- en: How it works…
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The *Migrate Source CSV* module provides a CSV source plugin that takes care
    of parsing and reading provided CSV files for you, parsing out headers and records.
    This makes it possible to create a migration definition and quickly map records
    to destinations in Drupal.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*Migrate Source CSV*模块提供了一个CSV源插件，它会为你解析和读取提供的CSV文件，解析出标题和记录。这使得创建迁移定义并快速将记录映射到Drupal中的目的地成为可能。'
- en: 'There are dozens of migrate process plugins just like these that you can use
    in your migrations to make the process easier. For a full list of plugins that
    you can use, consult the online documentation:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有数十个类似这些的迁移过程插件，你可以在迁移中使用它们来简化过程。有关你可以使用的插件的完整列表，请查阅在线文档：
- en: Migrate process plugins ([https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins](https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins))
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移过程插件([https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins](https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins))
- en: Migrate Plus process plugins ([https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins](https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins))
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Migrate Plus过程插件([https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins](https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins))
- en: There are other contributed modules that add more process plugins, but between
    them, the core Migrate and contributed Migrate Plus modules cover nearly all that
    you will need to do migrations. When there is no process plugin that meets the
    needs of converting data during a migration, you can make your own. See the section
    on creating process plugins later in the chapter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他贡献的模块添加了更多的过程插件，但在这两者之间，核心的Migrate和贡献的Migrate Plus模块几乎涵盖了你需要做的所有迁移。当没有过程插件满足在迁移过程中转换数据的需求时，你可以自己创建。请参阅本章后面的创建过程插件部分。
- en: Migrating data from an HTTP API
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从HTTP API迁移数据
- en: 'CSV files and SQL databases are not the only data source you can use for migrations.
    The **Migrate Plus** contributed module comes with a URL source plugin. By using
    the URL plugin as a migration source, the migration can fetch and parse data over
    HTTP in the following formats:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件和SQL数据库并不是迁移中唯一可以使用的数据源。**Migrate Plus**贡献模块附带了一个URL源插件。通过使用URL插件作为迁移源，迁移可以获取并解析以下格式的数据：
- en: JSON
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON
- en: XML
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML
- en: SOAP
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOAP
- en: This means that you can migrate data from any API over the internet, making
    Migrate Plus an indispensable tool when you need to migrate data over the wire.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以从任何互联网API迁移数据，这使得Migrate Plus在需要通过线迁移数据时成为一个不可或缺的工具。
- en: Let’s take a look at how this could be used to migrate data from an HTTP API.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用它从HTTP API迁移数据。
- en: How to do it…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: At this point, we have given two examples of migration definitions in this chapter.
    Even though we are migrating from a different kind of source, the format of the
    migration definition itself is not going to change all that much. We still have
    our `source`, `destination`, and `process` section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在本章中给出了两个迁移定义的示例。尽管我们是从不同类型的源迁移，但迁移定义本身的格式不会改变太多。我们仍然有我们的 `source`、`destination`
    和 `process` 部分。
- en: 'Imagine that we want to grab data from a public API that returns a JSON response
    and save it as nodes in Drupal. The JSON response in this example looks like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要从返回 JSON 响应的公共 API 中抓取数据并将其保存为 Drupal 中的节点。本例中的 JSON 响应看起来像这样：
- en: '[PRE6]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We need to consume that response and insert nodes for every item under `data`.
    Our migration definition would look like the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要消费该响应并为 `data` 下的每个项目插入节点。我们的迁移定义看起来如下：
- en: '[PRE7]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The destination and process sections look the same as the other migrations at
    the beginning of the chapter. By now, you should see a pattern – migration definitions
    always look similar regardless of the source or destination. Each source plugin
    has different configuration values. Let’s break down what the `Url` plugin is
    doing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 目标和过程部分与本章开头其他迁移相同。到现在为止，你应该看到一种模式——迁移定义总是看起来很相似，无论源或目标如何。每个源插件都有不同的配置值。让我们分析一下
    `Url` 插件正在做什么。
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Url` plugin has a few configuration properties that can be set. The most
    important ones are `urls`, `data_fetcher_plugin`, and `data_parser_plugin`. These
    must always be set when using the `Url` plugin.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`Url` 插件有一些可设置的配置属性。其中最重要的有 `urls`、`data_fetcher_plugin` 和 `data_parser_plugin`。在使用
    `Url` 插件时，这些属性必须始终设置。'
- en: The `urls` property accepts one or more URLs for the migration. Each URL will
    have its contents migrated in one by one. This is useful if you have a scenario
    where you have multiple locations and need to migrate the data into the same place
    (assuming the response format is the same).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`urls` 属性接受一个或多个用于迁移的 URL。每个 URL 将逐个迁移其内容。如果你有一个多个位置且需要将数据迁移到同一位置的场景（假设响应格式相同），这很有用。'
- en: The `data_fetcher_plugin` and `data_parser_plugin` properties are unique to
    the Migrate Plus module. Migrate Plus introduces the `DataFetcher` and `DataParser`
    plugin types as well as plugin managers for them. It also includes the `File`
    and `Http` data fetcher plugins, and the `Json`, `Xml`, and `Soap` data parser
    plugins.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`data_fetcher_plugin` 和 `data_parser_plugin` 属性是 Migrate Plus 模块的独特属性。Migrate
    Plus 引入了 `DataFetcher` 和 `DataParser` 插件类型以及它们的插件管理器。它还包括 `File` 和 `Http` 数据获取插件，以及
    `Json`、`Xml` 和 `Soap` 数据解析插件。'
- en: 'When the migration is executed, the configuration is read. This loads the `Url`
    plugin, which contains the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当迁移执行时，配置被读取。这加载了 `Url` 插件，其中包含以下内容：
- en: '[PRE8]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `initializeIterator` method is required to be provided by any migration
    source plugin. This tells the migration how to parse the data, which hands it
    off to the `Json` plugin. The `Json` plugin then gets the `data_fetcher_plugin`
    value from the migration definition, which we have set as `http`. The `Xml` and
    `Soap` data parsers have a similar implementation. When you combine those, this
    is how the migration knows to make a call over the internet to get data and how
    to parse that data to prepare it for migration.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 任何迁移源插件都必须提供 `initializeIterator` 方法。这告诉迁移如何解析数据，并将其传递给 `Json` 插件。然后 `Json`
    插件从迁移定义中获取 `data_fetcher_plugin` 值，我们将其设置为 `http`。`Xml` 和 `Soap` 数据解析器有类似的实现。当你结合这些时，这就是迁移知道如何通过互联网调用以获取数据以及如何解析这些数据以准备迁移的方式。
- en: Once the data has been retrieved and parsed, it needs to know how to *access*
    items within the response. Sometimes, you get API responses where the results
    you want are deeply nested.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据被检索和解析，它需要知道如何 *访问* 响应中的项目。有时，你会得到 API 响应，其中你想要的结果是深度嵌套的。
- en: The `item_selector` property in our source definition informs the parser how
    to read and extract items from the response. Since the example JSON structure
    is simple, all we have to do is give it `data` for the item selector. If the items
    we wanted were nested in some way, we would enter the path to the results as `foo/bar/data`,
    for example.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们源定义中的 `item_selector` 属性通知解析器如何读取和从响应中提取项目。由于示例 JSON 结构简单，我们只需为项目选择器提供 `data`。如果我们想要的项目以某种方式嵌套，我们会输入结果的路径，例如
    `foo/bar/data`。
- en: 'The fields portion under `source` describes to the migration the fields that
    we want to map, and how we want to refer to those fields in the process section.
    This was not necessary for the CSV migrations because the header records automatically
    become reference fields to use in the process pipeline mapping. In this case,
    we need to map them:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `source` 部分下的字段描述了我们要映射的字段，以及我们希望在过程部分如何引用这些字段。对于 CSV 迁移来说这不是必要的，因为标题记录会自动成为在过程管道映射中使用的参考字段。在这种情况下，我们需要映射它们：
- en: '[PRE9]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `name` property is how we want to refer to this in the migration in the
    process section. The `label` property is what it is called (visible in the migration
    source area within Drupal), and the `selector` property is the actual name of
    it in our JSON result. You can make `name` and `label` whatever you want, but
    `selector` has to match what’s in the response fields returned from the API.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`name` 属性是我们希望在过程部分中如何引用这个属性的。`label` 属性是它的名称（在 Drupal 迁移源区域中可见），而 `selector`
    属性是我们 JSON 结果中的实际名称。你可以将 `name` 和 `label` 设置为你想要的任何内容，但 `selector` 必须与 API 返回的响应字段匹配。'
- en: Again, we can navigate to **Structure** | **Migrations** in the Drupal admin
    to see this new migration and execute it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们可以导航到 Drupal 管理中的 **结构** | **迁移** 来查看这个新的迁移并执行它。
- en: There’s more…
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Here’s one final note on using the `Url` plugin. Earlier, we mentioned that
    Migrate Plus comes with two data fetcher plugins. We covered `Http`; the other
    is `File`. If you want to migrate data in from JSON or XML files on disk, you
    can. If you change your `data_fetcher_plugin` from `http` to `file`, the `Url`
    plugin will locate it and use it as a migration source.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用 `Url` 插件的一个最后的注意事项。之前，我们提到 Migrate Plus 包含两个数据提取插件。我们介绍了 `Http`；另一个是 `File`。如果你想从磁盘上的
    JSON 或 XML 文件中迁移数据，你可以这样做。如果你将 `data_fetcher_plugin` 从 `http` 更改为 `file`，`Url`
    插件将找到它并将其用作迁移源。
- en: Writing a custom migration source plugin
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义迁移源插件
- en: At this point, you have seen a few powerful ways that Drupal can migrate in
    data using available source plugins. What happens when one does not exist to meet
    your needs? You can write a migration source plugin, of course!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到了 Drupal 使用可用的源插件进行数据迁移的几种强大方式。当没有插件满足你的需求时会发生什么？当然，你可以编写一个迁移源插件！
- en: Consider this scenario. You need to migrate data in from a MySQL database as
    nodes into Drupal. While the migration system in Drupal can understand how to
    connect to databases, it does not understand how to query for the data you are
    trying to obtain. In these instances, you can write a source plugin.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下场景。你需要从 MySQL 数据库迁移数据到 Drupal 的节点中。虽然 Drupal 的迁移系统可以理解如何连接到数据库，但它并不理解如何查询你试图获取的数据。在这些情况下，你可以编写一个源插件。
- en: How to do it…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let’s assume that the database has a table named `articles` that we want to
    pull data from in the migration, and it has `id`, `title`, `body`, `is_published`,
    and `published_on` as fields. Before we can write our source plugin, the first
    thing we need to do is establish a connection that will access this database.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 假设数据库中有一个名为 `articles` 的表，我们在迁移中需要从中提取数据，它有 `id`、`title`、`body`、`is_published`
    和 `published_on` 等字段。在我们能够编写源插件之前，我们首先需要建立连接以访问这个数据库。
- en: 'In your `settings.php` file, add the following MySQL database connection:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `settings.php` 文件中，添加以下 MySQL 数据库连接：
- en: '[PRE10]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note the `migrate` key name in the `$databases` array. This entry will be used
    in our source plugin to make the connection. This key can be any name you want,
    other than `default`, which is used by Drupal for its default database connection.
    If you choose to use a key name other than `migrate`, be sure to remember it,
    as it will be referenced in your migration definition.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `$databases` 数组中的 `migrate` 键名。这个条目将用于我们的源插件以建立连接。这个键可以是任何你想要的名字，除了 `default`，这是
    Drupal 用于其默认数据库连接的名称。如果你选择使用除 `migrate` 之外的其他键名，请确保记住它，因为它将在你的迁移定义中被引用。
- en: Back in your custom module, create a new directory at `src/Plugin/migrate/source`.
    Next, create a file in this directory named `ArticlesSource.php`. This will be
    the source plugin that powers the data retrieval for the migration.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的自定义模块中，回到 `src/Plugin/migrate/source` 目录，创建一个新的目录。然后，在这个目录中创建一个名为 `ArticlesSource.php`
    的文件。这将是我们为迁移提供数据检索功能的源插件。
- en: 'There are three methods that we need to fulfill for our source plugin – a `query`
    method, a `fields` method, and an `id` method. For every SQL source plugin you
    create, these three methods are required:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要满足我们的源插件三个方法——一个 `query` 方法，一个 `fields` 方法和一个 `id` 方法。对于你创建的每个 SQL 源插件，这三个方法是必需的：
- en: The `query` method will contain our actual SQL query to retrieve the data
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query` 方法将包含我们实际用于检索数据的 SQL 查询'
- en: The `fields` method will return an array of available fields on the source,
    keyed by their machine names and a description
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields` 方法将返回一个数组，包含源上的可用字段，以它们的机器名称和描述为键'
- en: The `id` method defines the source field(s) for uniquely identifying a source
    row
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` 方法定义了用于唯一标识源行的源字段'
- en: 'In our new `ArticlesSource.php` file, we can start defining our source plugin:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的新文件 `ArticlesSource.php` 中，我们可以开始定义我们的源插件：
- en: '[PRE11]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Our plugin class extends `SqlBase`, a core migrate plugin that deals with database
    source connections. It will do most of the heavy lifting after we provide the
    three aforementioned methods.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的插件类扩展了 `SqlBase`，这是一个核心迁移插件，用于处理数据库源连接。在我们提供上述三个方法之后，它将完成大部分繁重的工作。
- en: Our plugin class also has the `@MigrateSource` annotation. This is **required**.
    Without this annotation, Drupal will not discover this class as a usable source
    plugin, and the migration will fail to do anything.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的插件类也具有 `@MigrateSource` 注解。这是**必需的**。如果没有这个注解，Drupal 将不会发现这个类作为可用的源插件，迁移将无法执行任何操作。
- en: The `id` property of the annotation defines the plugin ID. The `source_module`
    property identifies the system providing the data the source plugin will read
    from. For contributed sources, this is almost always the module they are defined
    in.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注解的 `id` 属性定义了插件 ID。`source_module` 属性标识了提供源插件将从中读取数据的系统。对于贡献的源，这几乎总是它们定义的模块。
- en: Next, we provide the `query` method. If you have ever used the database API
    in Drupal before, this will be familiar. It uses the same APIs. It looks like
    any other Drupal SQL query; the only difference is it will be executed in the
    other database – the one we defined in our `settings.php` file earlier.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们提供 `query` 方法。如果你以前在 Drupal 中使用过数据库 API，这将很熟悉。它使用相同的 API。它看起来像任何其他 Drupal
    SQL 查询；唯一的区别是它将在另一个数据库中执行——即我们在之前的 `settings.php` 文件中定义的那个。
- en: 'Filling that in is straightforward:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 填充这部分很简单：
- en: '[PRE12]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The database API in Drupal is fairly easy to use. The `query` method here selects
    all articles and their fields, ordering them by their ID and published dates.
    The results of this query are what will power our migration later in this section.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 的数据库 API 比较容易使用。这里的 `query` 方法选择所有文章及其字段，按它们的 ID 和发布日期排序。这个查询的结果将在这个部分的后面为我们的迁移提供动力。
- en: 'For the `fields` method, we need to list out the fields we are using within
    the migration:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `fields` 方法，我们需要列出我们在迁移中使用的字段：
- en: '[PRE13]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, for the `id` method, we need to specify which field is the unique
    identifier for the migration:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于 `id` 方法，我们需要指定哪个字段是迁移的唯一标识符：
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this case, it is simply `id`, the unique field from the legacy database articles
    table.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它只是 `id`，来自旧数据库文章表的唯一字段。
- en: Using a custom source plugin in the migration
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在迁移中使用自定义源插件
- en: With our source plugin in place, we can now focus on the migration itself.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的源插件就绪后，我们现在可以专注于迁移本身。
- en: 'Like in our other examples, we need to define a migration definition YAML file:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们的其他示例一样，我们需要定义一个迁移定义 YAML 文件：
- en: '[PRE15]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: One of the best parts about migrations in Drupal is that the API is well defined,
    so regardless of how you may be obtaining data or processing data, the definitions
    always follow the same patterns.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 中迁移的最好部分之一是 API 定义得很好，所以无论你如何获取或处理数据，定义总是遵循相同的模式。
- en: In this migration, we have specified our new source plugin, `legacy_articles`,
    which is the plugin ID we provided in our `ArticlesSource` class. The `key` property
    in the source section is the same name as the database key we added in `settings.php`.
    Since we extended `SqlBase`, the key property is used when establishing a database
    connection to execute the query against. If you’re curious, you can review the
    `getDatabase` method of `SqlBase` to see how it uses the `key` property.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个迁移中，我们指定了我们的新源插件 `legacy_articles`，这是我们在 `ArticlesSource` 类中提供的插件 ID。源部分中的
    `key` 属性与我们在 `settings.php` 中添加的数据库键同名。由于我们扩展了 `SqlBase`，键属性用于在执行查询时建立数据库连接。如果你好奇，可以查看
    `SqlBase` 的 `getDatabase` 方法，看看它是如何使用 `key` 属性的。
- en: Since we defined our fields in the `fields` method of our source plugin, we
    can skip the fields section in the migration definition entirely and use them
    as provided. In this case, the migration will already know what the fields are.
    The same is true of the `ids` property; the source plugin already defines it,
    so we do not need to list it here like the other migrations in this chapter.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在源插件的`fields`方法中定义了我们的字段，我们可以在迁移定义中完全跳过字段部分，并按提供的方式使用它们。在这种情况下，迁移已经知道字段是什么。对于`ids`属性也是如此；源插件已经定义了它，所以我们不需要像本章中的其他迁移那样在这里列出它。
- en: From here, the rest of the migration looks the same as what you have seen in
    other examples in this chapter. The `destination` section informs the migration
    to create `article` nodes, and the `process` section defines how to map our source
    fields to node fields.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，迁移的其余部分看起来与本章中其他示例中的相同。`destination`部分通知迁移创建`article`节点，而`process`部分定义了如何将我们的源字段映射到节点字段。
- en: Once again, you can view this migration at **Structure** | **Migrations** in
    the admin and run it. Feel free to create a database alongside your Drupal database
    to experiment with the source plugin – once you know how to do it, you will be
    able to pull anything into Drupal and be a true migration wizard.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，你可以在管理界面中的**结构** | **迁移**下查看此迁移并运行它。你可以自由地创建一个与Drupal数据库并行的数据库来实验源插件——一旦你知道如何操作，你就能将任何内容拉入Drupal，并成为一名真正的迁移大师。
- en: Writing a custom process plugin for migrations
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为迁移编写自定义流程插件
- en: At this point, we’ve covered migrating data from CSV, JSON, and database sources,
    but what about cases where the data from these sources don’t quite align with
    the way they need to be stored in Drupal?
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了从CSV、JSON和数据库源迁移数据的情况，但如果是这些源中的数据并不完全符合在Drupal中存储的方式，该怎么办呢？
- en: Migrations can be a tricky thing. While Drupal provides several avenues to source
    data to migrate in, there will be many cases where you need to manipulate that
    incoming data to get it to a satisfactory state, either for storage or cleanup
    purposes. Fortunately, creating process plugins is easy, and you will be manipulating
    data in a migration in no time.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移可能是一件棘手的事情。虽然Drupal提供了多个途径来获取迁移所需的数据源，但仍然会有许多情况需要你操纵这些传入的数据，以便将其处理到满意的状态，无论是为了存储还是清理目的。幸运的是，创建流程插件非常简单，你很快就能在迁移中操纵数据。
- en: How to do it…
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let’s take a look at an example of writing a process plugin. Using the previous
    example, a custom source plugin that fetches data from a database table, assume
    we now have to pull an additional field for the migration, `no_index`. While querying
    the data is easy, the data itself is not suitable for storage in the metatag field
    ([https://www.drupal.org/project/metatag](https://www.drupal.org/project/metatag)),
    as its value is either a 0 or 1\. When the value is 1 (`true`), the author has
    indicated they do not want this page crawled by search engines. In the previous
    system, the presence of this value would add additional metatags to the head of
    the page.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看编写流程插件的示例。使用之前的示例，一个从数据库表获取数据的自定义源插件，假设我们现在需要为迁移拉取一个额外的字段`no_index`。虽然查询数据很容易，但数据本身不适合存储在元标签字段中（[https://www.drupal.org/project/metatag](https://www.drupal.org/project/metatag)），因为其值要么是0要么是1。当值为1（`true`）时，作者表示他们不希望搜索引擎抓取此页面。在之前的系统中，此值的出现会在页面头部添加额外的元标签。
- en: The contributed Metatag module is able to replicate this functionality. However,
    the metatag field stores this data in a serialized fashion in the database. We
    cannot use the value as-is from the source, but we can add a process plugin to
    *convert* the data to the way we need it.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献的Metatag模块能够复制这种功能。然而，元标签字段以序列化的方式在数据库中存储这些数据。我们不能直接使用源数据中的值，但我们可以添加一个流程插件来*转换*数据为我们所需的形式。
- en: Assuming you added a Metatag field to the Article content type in Drupal, you
    can migrate the data by doing the following.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在Drupal中为文章内容类型添加了一个Metatag字段，你可以通过以下步骤进行数据迁移。
- en: 'First, let’s update our source plugin to account for a new field:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更新我们的源插件以考虑一个新字段：
- en: '[PRE16]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we add it to our `fields` list:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将它添加到我们的`fields`列表中：
- en: '[PRE17]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now that it has been added to the source plugin, the migration is receiving
    the value for each record.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它已经被添加到源插件中，迁移正在接收每条记录的值。
- en: 'Back in our migration definition, let’s map the metatags field and get set
    up to write the custom process plugin:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的迁移定义中，让我们映射元标签字段，并设置好编写自定义流程插件：
- en: '[PRE18]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we are piping the value of the `no_index` field to a plugin whose ID is
    `set_no_index`. Now, we can start to manipulate the data during the migration
    so that it can be stored properly.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 `no_index` 字段的值通过管道传递到一个 ID 为 `set_no_index` 的插件。现在，我们可以在迁移过程中开始操作数据，以确保它能够正确存储。
- en: In the custom module, we create a directory at `src/Plugin/migrate/process`.
    Within this directory, we are going to create a file called `SetNoIndex.php`.
    This is our new custom process plugin.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义模块中，我们在 `src/Plugin/migrate/process` 目录下创建一个目录。在这个目录中，我们将创建一个名为 `SetNoIndex.php`
    的文件。这是我们新的自定义处理插件。
- en: Custom process plugins at a minimum need to implement the `transform` method.
    This method is responsible for handling and returning data for this step in the
    pipeline.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义处理插件至少需要实现 `transform` 方法。该方法负责处理并返回管道中此步骤的数据。
- en: 'The process plugin code would look like the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 过程插件代码看起来如下：
- en: '[PRE19]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Like the custom source plugin, note the annotation at the top of the class.
    This is required so that the plugin can be discovered by Drupal. The `id` value
    is the same one we used in the migration definition.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 与自定义源插件一样，注意类顶部的注释。这是必需的，以便插件能够被 Drupal 发现。`id` 值与我们在迁移定义中使用的是相同的。
- en: How it works…
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: When the migration runs, if the value passed in is 1, we get an array of values
    back. This is exactly what we need! However, we need to do one more thing before
    this will be successfully saved into Drupal.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 当迁移运行时，如果传入的值是 1，我们将返回一个值数组。这正是我们所需要的！然而，在成功保存到 Drupal 之前，我们还需要做一件事。
- en: Remember how we mentioned earlier that data is stored as a serialized array?
    Passing a plain PHP array along from our custom process plugin is not enough.
    In a migration, you can use several process plugins in a field mapping. They are
    run in the order they are listed, and this offers a composable way to transform
    the source data.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们之前提到数据是以序列化数组的形式存储的吗？仅从我们的自定义处理插件传递一个普通的 PHP 数组是不够的。在迁移中，你可以在字段映射中使用多个处理插件。它们按照列表中的顺序运行，这提供了一种可组合的方式来转换源数据。
- en: Fortunately, the core Migrate module provides a process plugin that will help
    us out, the `callback` process plugin. The `callback` process plugin calls a PHP
    function using the value from the previous process plugin (our result from `set_no_index`)
    and returns the value from the callback provided.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，核心 Migrate 模块提供了一个将帮助我们处理的过程插件，即 `callback` 过程插件。`callback` 过程插件使用来自先前过程插件（我们
    `set_no_index` 的结果）的值调用 PHP 函数，并返回回调提供的值。
- en: 'Combining the two in the pipeline would look like this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在管道中将这两个结合起来看起来如下：
- en: '[PRE20]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After updating the migration definition, we need to bring those changes into
    Drupal. This can be done using Drush:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 更新迁移定义后，我们需要将这些更改引入 Drupal。这可以通过 Drush 完成：
- en: '[PRE21]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This command will re-import the configuration files in the `config/install`
    directory of the `chapter14` module. This command is a good way to continually
    bring in changes to a definition as you work on a migration definition bit by
    bit.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将重新导入 `chapter14` 模块 `config/install` 目录中的配置文件。这是一个很好的方法，可以在你逐步处理迁移定义的同时持续引入定义的更改。
- en: Migration definitions are configuration
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移定义是配置
- en: Migration YAML files are configured just like any other Drupal configuration
    file. When you make updates to a migration YAML file and import the changes with
    the command above, be sure to `config-export` when ready to deploy or commit the
    work to a repository.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移 YAML 文件配置方式与任何其他 Drupal 配置文件相同。当你对迁移 YAML 文件进行更新并使用上述命令导入更改时，确保在准备部署或提交工作到仓库时执行
    `config-export`。
- en: 'When we run the migration, we have the new data in our metatags field. In this
    example, you could validate that it worked in two ways:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行迁移时，我们将在元标签字段中有新的数据。在这个例子中，你可以通过两种方式验证它是否工作：
- en: 'First, you can look at the migrated content on your site in the admin, edit
    one of the migrated nodes, and see that the metatags field has the correct data
    on the node form:'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，你可以在管理界面中查看你网站上迁移的内容，编辑一个迁移节点，并看到元标签字段在节点表单上有正确的数据：
- en: '![Figure 14.7 – The metatags fields on the node form](img/Figure_14.7_B18548.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.7 – 节点表单上的元标签字段](img/Figure_14.7_B18548.jpg)'
- en: Figure 14.7 – The metatags fields on the node form
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7 – 节点表单上的元标签字段
- en: 'Secondly, you can check the metatags field in the database and see the raw
    data is there:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，你可以在数据库中检查元标签字段，看看原始数据是否在那里：
- en: '![Figure 14.8 – The metatags table in the database reflects the values we want
    to migrate](img/Figure_14.8_B18548.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图14.8 – 数据库中的元标签表反映了我们要迁移的值](img/Figure_14.8_B18548.jpg)'
- en: Figure 14.8 – The metatags table in the database reflects the values we want
    to migrate
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8 – 数据库中的元标签表反映了我们要迁移的值
- en: If you remember from the previous chapter, we discussed the importance of *knowing*
    that code we wrote actually works using unit tests. Process plugins are pretty
    easy to write tests for. We may be viewing data in Drupal from the migration,
    but let’s be 100% certain that our process plugin is doing the right thing.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得上一章的内容，我们讨论了使用单元测试来*知道*我们编写的代码实际上是否工作的重要性。处理插件编写测试相对简单。我们可能正在从迁移中查看Drupal中的数据，但让我们100%确信我们的处理插件正在做正确的事情。
- en: 'Our unit test for the `set_no_index` plugin would look like this:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`set_no_index`插件编写的单元测试看起来像这样：
- en: '[PRE22]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `valueProvider` method feeds our test method values and the result we expect
    our `set_no_index` plugin to return when evaluated. Now we know for certain that
    our migration will always provide the right data and that no migrated articles
    will be incorrectly crawled by search engines. For more on unit testing in Drupal,
    be sure to refer to [*Chapter 13*](B18548_13.xhtml#_idTextAnchor412), *Running
    and Writing Tests* *with Drupal*.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`valueProvider`方法为我们的测试方法提供值，以及当评估时我们期望`set_no_index`插件返回的结果。现在我们确信我们的迁移将始终提供正确的数据，并且没有迁移的文章会被搜索引擎错误地抓取。有关Drupal中的单元测试的更多信息，请务必参考[*第13章*](B18548_13.xhtml#_idTextAnchor412)，*使用Drupal*运行和编写测试。'
- en: See also
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In this chapter, we have demonstrated the power and flexibility of the Migrate
    and Migrate Plus modules of Drupal. Wielding both of these will empower you to
    migrate data from just about any source and process it accordingly. We also demonstrated
    how you can write custom source and custom process plugins to achieve this goal
    as well.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了Drupal的Migrate和Migrate Plus模块的强大功能和灵活性。掌握这两个模块将使你能够从几乎任何来源迁移数据并相应地处理它。我们还展示了如何编写自定义源和自定义处理插件来实现这一目标。
- en: Be sure to check the contributed module ecosystem of Migrate on [Drupal.org](http://Drupal.org).
    There are several modules that provide countless source and process plugins, covering
    various data sources, such as CSV, JSON, XML, XLS, HTML, and HTTP APIs.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必检查[Drupal.org](http://Drupal.org)上Migrate的模块贡献生态系统。这里有几个模块提供了无数的数据源和处理插件，覆盖了各种数据源，例如CSV、JSON、XML、XLS、HTML和HTTP
    API。
