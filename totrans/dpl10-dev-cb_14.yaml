- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Migrating External Data into Drupal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you have been developing for a while or just getting started in your
    career, one very common situation you will encounter is the need to bring in data
    from an external source. This can include migrating from older versions of Drupal,
    migrating from sites not based on Drupal, different database engines, static HTML
    files, or incorporating data from CSV or HTTP APIs with JSON or XML.
  prefs: []
  type: TYPE_NORMAL
- en: No matter the scenario, Drupal contains several powerful tools to solve these
    needs with the core Migrate module. Under the hood, it also contains a powerful
    plugin system that allows you to extend and define your own data source or process
    plugin, as well as a healthy ecosystem of contributed modules to enhance the migration
    experience in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the Migrate module in Drupal 10, and you will
    learn how to achieve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Migrating from a previous version of Drupal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating data from a **comma-separated value** (**CSV**) file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating data from a remote HTTP API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a custom migration source plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a custom process plugin for migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the full code used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp14](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp14)'
  prefs: []
  type: TYPE_NORMAL
- en: Migrating from a previous version of Drupal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal ships with a couple of core modules that assist you in updating your
    site from Drupal 6 or 7 to Drupal 10\. The architecture between previous versions
    of Drupal before version 8 was radically different in design, and you cannot upgrade
    from 6 or 7 the same way you can from 8 or 9.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate the challenges of upgrading from Drupal 6 or 7, the Migrate Drupal
    module helps prepare a new environment for your older Drupal database to migrate
    to and is included in the core release of Drupal 10.
  prefs: []
  type: TYPE_NORMAL
- en: Custom modules, custom themes, and custom Drush commands
  prefs: []
  type: TYPE_NORMAL
- en: An important thing to note about upgrading from versions of Drupal prior to
    version 8 is that you will need to *manually* port custom modules, custom theme(s),
    and custom Drush commands you may have created. There are no tools to automate
    this, and they *will not work* until you have ported them to be compatible with
    Drupal 10\. This must be done prior to upgrading, or you may encounter several
    errors while attempting to migrate or review your progress.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you perform any migration from an older version of Drupal, it is important
    to have prepared the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working environment running Drupal 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copy of the Drupal 6/7 database to use in the upgrade
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An inventory of modules and theme(s) used on the site you are migrating from
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database server that has both the Drupal 10 database and the old Drupal 6/7
    database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database credentials needed to connect to the Drupal 6/7 database in your
    server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copy of all public and private files from the old site in a place accessible
    by the new site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the Migrate Drupal and Migrate Drupal UI module in your Drupal 10 site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *database backup* of your current Drupal 10 installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will walk through these steps in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: It is likely that you will need to iterate on the migration before it is complete,
    especially with old, complex sites. So, before you proceed, make sure you take
    a *database backup* of your Drupal 10 site. That way, if something goes wrong
    during the migration, you can restore the database, make changes, and try again.
    This is much faster than having to completely reinstall Drupal 10 to start the
    migration over. Always keep a clean database backup available. Let’s begin!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With your new Drupal 10 site installed and ready, the first step you need to
    take is to review the modules you were using in your Drupal 6/7 site. You should
    log in to the site you are migrating from and go to the module list section of
    the admin. You can also get this list using the Drush command-line tool if you
    prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write down the list of contributed modules and themes that are in use in the
    old Drupal site. You are going to have to evaluate the following questions per
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: Do I still need this module on Drupal 10?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has the contributed module moved to the core?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the contributed module have a Drupal 10 version available? If not, do I
    still need it? Is there an alternative module with similar functionality?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does this module provide an upgrade path and migration integration to move data
    from a previous version of Drupal?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping an inventory like this is required when upgrading from versions of Drupal
    prior to version 8.
  prefs: []
  type: TYPE_NORMAL
- en: As you go down the list and answer each question, you can update your Drupal
    10 site by selecting the module you need with Composer. The idea is that you get
    the Drupal 10 environment ready first by making the modules and themes available
    that were being used in the previous Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: Some modules, such as views, have been moved into Drupal core and do not have
    a contributed version available. Others, such as Pathauto, have newer versions
    available for Drupal and also include migration plugins. These migration plugins
    are used automatically by the Migrate Drupal module when migrating your old site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all modules have compatible versions for Drupal 10, unfortunately. This
    can happen when they are replaced by a competing module (Field Collections versus
    Paragraphs, for example) or the maintainer(s) decided not to port the module beyond
    Drupal 7\. If you find that there is a module in your Drupal 6/7 site you absolutely
    need for your Drupal 10 site, you have limited options in this case. You can do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the module issue queue to see whether a newer version has been worked
    on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the module yourself and with your development team to assess how hard
    porting it would be
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See whether an alternative module exists for Drupal 10 that is similar and make
    the configuration changes you need (it may be possible to provide a migration
    path as well)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a tool such as Drupal Module Upgrader ([https://www.drupal.org/project/drupalmoduleupgrader](https://www.drupal.org/project/drupalmoduleupgrader))
    to help you figure out how to port the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consult the official Drupal Slack channel, Drupal Stack Exchange website, and/or
    a development agency to help you port the functionality to Drupal 10 if you or
    your team are unable to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing to port the module?
  prefs: []
  type: TYPE_NORMAL
- en: If you do wind up porting the module to Drupal 10, be sure to contribute the
    work back to the community on [Drupal.org](https://Drupal.org). Not only is it
    a good learning experience on how to develop a module and learn the new APIs of
    Drupal 10, but paying it forward also helps other people who may be stuck too.
    You can request to be a maintainer of the module and ensure bug fixes and feature
    enhancements are published.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have gone through the list of modules, begin adding the ones you
    need to your Drupal 10 site with Composer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once you have all the required modules and theme(s), be sure to enable them.
    Don’t worry about configuring all of the added modules; the migration will take
    care of that for you. If they are not enabled, the migration process won’t see
    or use any migration plugins they may have, and you may not get all of your data
    migrated across.
  prefs: []
  type: TYPE_NORMAL
- en: If these modules contain migration plugins for Drupal 6/7, these will be incorporated
    when running a migration into your Drupal 10 site automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Drupal migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that our environment is ready and we have all the modules we need, let’s
    proceed with the migration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `/upgrade`. You will be greeted with this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – The Upgrade screen provides a wizard for upgrading from older
    versions](img/Figure_14.1_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – The Upgrade screen provides a wizard for upgrading from older
    versions
  prefs: []
  type: TYPE_NORMAL
- en: The Migrate Drupal UI module provides this interface to help you perform the
    migration from within the administrative section. Review the preparation steps
    one last time, and then click **Continue**.
  prefs: []
  type: TYPE_NORMAL
- en: On the next screen, we need to set which version of Drupal we are migrating
    from, as well as the database credentials required to connect to the old database.
    If you are unsure of what to enter for the database host or credentials, check
    the platform documentation of what to use (Lando, DDEV, Docksal, etc.) to connect
    to a second database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – The migrate wizard will prompt for the database credentials
    of the previous version of Drupal](img/Figure_14.2_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – The migrate wizard will prompt for the database credentials of
    the previous version of Drupal
  prefs: []
  type: TYPE_NORMAL
- en: Where is the option for Drupal 8 or 9?
  prefs: []
  type: TYPE_NORMAL
- en: If you are updating from Drupal 8 or 9, you do not need to leverage Migrate
    Drupal or this interface. Instead, you should proceed with the regular update
    process for Drupal to go from Drupal 8 or 9 to Drupal 10\. If you are migrating
    partial data from a Drupal 8 or 9 site and starting over in Drupal 10, you will
    need to write your own migration script(s). See the later sections in this chapter
    for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the public/private files source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the bottom of the previous screen, you can set the source for any public
    and private files that were uploaded to the old site.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – You can specify where the uploaded files are located on the
    old site so that the migration can locate them](img/Figure_14.3_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – You can specify where the uploaded files are located on the old
    site so that the migration can locate them
  prefs: []
  type: TYPE_NORMAL
- en: You have the option of either setting a local path to the files or adding a
    URL to a public website.
  prefs: []
  type: TYPE_NORMAL
- en: The migration will source the files from their old paths, so if your files were
    previously uploaded to `sites/default/files`, you need to supply them in the same
    location. For the value of the public files, you then enter `/var/www/web`, the
    location of the web root for your site.
  prefs: []
  type: TYPE_NORMAL
- en: Document root
  prefs: []
  type: TYPE_NORMAL
- en: Note that, in some cases, the webroot can be named `docroot` instead of `web`.
    This can vary depending on your setup of Lando, DDEV, Docksal, and so on, and/or
    vary if you use a managed hosting provider such as Acquia, Pantheon, or **Platform.sh**.
    If unsure, check the documentation that applies in your case.
  prefs: []
  type: TYPE_NORMAL
- en: You can do the same for private files.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose to use a web address instead, this will also work. However, running
    a migration that pulls files across the internet may result in a migration taking
    a lot longer than you expect. Also, you risk knocking your live website offline
    with several file requests. While you can opt for this route, it is generally
    not advised for larger migrations.
  prefs: []
  type: TYPE_NORMAL
- en: When you have added all the applicable settings, click **Review Upgrade**. This
    screen will display a list of items that will be upgraded and is the final step
    before executing the migration.
  prefs: []
  type: TYPE_NORMAL
- en: Running the migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, the system is now performing the migration from the old version
    of Drupal to Drupal 10\. The batch process will run until it completes (or encounters
    an error). Depending on the size and build of your old site, this can take a while.
    You may leave the computer and take a break; just be sure to leave the browser
    window open.
  prefs: []
  type: TYPE_NORMAL
- en: If the migration has an error, the process won’t complete. While unfortunate,
    this can happen, depending on how complex your previous site was. At this point,
    you should review the site logs to see what the errors were. These can be addressed
    and the migration can be performed again. You may need to adjust some migration
    settings, you may need a patch for a module (to support the migration), or it
    may be some other kind of error altogether.
  prefs: []
  type: TYPE_NORMAL
- en: Remember the database backup we made of the Drupal 10 site in preparation? After
    addressing what you found in the site logs, go ahead and restore the database.
    You should be able to go back to the first upgrade screen and start the migration
    over, which is faster than setting up Drupal 10 again from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: If everything went fine, the migration will finish and you will have migrated
    your old Drupal site to Drupal 10!
  prefs: []
  type: TYPE_NORMAL
- en: Migration complete!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it has completed, take a look around your admin. You should see familiar
    items, such as content types, taxonomy, media types, user roles, uploaded files,
    redirects, and other items from your previous site, as well as all of your content
    and user accounts restored.
  prefs: []
  type: TYPE_NORMAL
- en: Do note that certain items such as view configurations cannot be automatically
    migrated. This is due to the complex nature of views themselves. Fortunately,
    views are very easy to build out in the admin, and you can always tackle that
    once you verify the migration was successful.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal core contains dozens of plugins and migration paths to migrate from older
    Drupal 6 or 7 installations. These help explain to newer versions of Drupal how
    to access, transform, and save data into the new system during migration.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the core Filter module has existed in several versions of Drupal.
    However, its schema, configuration, and data structure have changed over the years.
    It does not map 1:1 with Drupal 10\. If you look in the module directory at `core/modules/filter`,
    you will notice a directory called `migrations`. There are a handful of files
    in here that help Drupal understand how to map old filters from Drupal 6 and 7
    into your new Drupal 10 installation. You can see an example of this in `d7_filter_format.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Without getting too deep into the details just yet, this definition helps the
    migration process understand how to transform and move the filter and filter settings
    coming into Drupal 10\. Files like these are loaded and used automatically when
    using the Migrate Drupal module, and you can see several examples of them spread
    around Drupal core.
  prefs: []
  type: TYPE_NORMAL
- en: Contributed modules can provide these as well. This is how we are able to migrate
    from older versions of Drupal without losing data. Most popular contributed modules
    will migrate fine with no problems, but some modules do not include files. You
    can check the issue queue(s) for help, but it is also possible to write your own
    in a custom module too.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at custom migration source and migration process plugins in later
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating data from CSV file(s)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From time to time, you will encounter the need to migrate data into Drupal,
    which comes in various formats. One such popular format is **CSV**, or a **comma-separated
    value**. CSV files can be exported from various database clients and spreadsheet
    software and make an excellent data source candidate for migrations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From here, we are going to need to add two modules to migrate from CSV files.
    Using Composer, download the following modules:'
  prefs: []
  type: TYPE_NORMAL
- en: Migrate Plus ([https://www.drupal.org/project/migrate_plus](https://www.drupal.org/project/migrate_plus))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate Tools ([https://www.drupal.org/project/migrate_tools](https://www.drupal.org/project/migrate_tools))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate Source CSV ([https://www.drupal.org/project/migrate_source_csv](https://www.drupal.org/project/migrate_source_csv))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need to create a custom module where we will place our migration
    definitions, source plugins, and process plugin classes. At this point, you should
    be familiar with creating a custom module. Consult the previous chapters if you
    need to refresh.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have to perform migrations in Drupal that cannot use Migrate Drupal,
    you have to write your own migration YAML configuration files in a custom module.
    This is because the Migrate Drupal module is specifically for migrating in from
    older versions of Drupal, treating that old version of Drupal as the *source*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the CSV file(s) will be the *source* of the migration. Every
    migration consists of three main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **source**: This is the provider of data consumed by the migration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **destination**: This is where each record will be migrated into and stored
    – typically, an entity (node, user, media, taxonomy, etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **process**: This pipeline defines how source data is transformed and saved
    for a migration item. Here, you can define various fields and properties on the
    *destination* and use a number of *process* plugins to make the *source* data
    fit into the field(s) the way you want (or the way Drupal may require it to be).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we proceed, let’s look at a quick example of a migration definition
    for migrating from a CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let’s assume we need to use a CSV file to migrate in URLs from an old website
    and store them in Drupal as redirects, using the Redirect contributed module ([https://www.drupal.org/project/redirect](https://www.drupal.org/project/redirect)).
    By doing so, we can ensure URLs that existed on the old site can successfully
    redirect to their new URLs in Drupal so that we don’t lose visitors.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, we’ve defined a migration definition file named `migrate_plus.migration.redirects.yml`
    in the `config/install` directory of our custom module. This is for migrations
    that need the Migrate Plus contributed module to execute (as Migrate Source CSV
    does).
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can clearly see the `source`, `destination`, and `process` sections.
  prefs: []
  type: TYPE_NORMAL
- en: The `source` section tells the migration that we are going to use the CSV plugin
    (provided by the Migrate Source CSV module), a path to the CSV file itself, the
    ID keys (what Migrate will use to track unique row values), and some constant
    values to use in the process pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: The `destination` section tells the migration we want to save data using the
    `entity:redirect` plugin. This plugin ensures migrated values are saved as Redirect
    entities.
  prefs: []
  type: TYPE_NORMAL
- en: The `process` section maps fields and properties on the entity to data values
    in the migration source. In this case, `redirect_source`, `redirect_redirect`,
    `uid`, and `status_code` are being mapped to `old_url` and `new_url` in our CSV
    file, and constant values are used for `uid` and `status_code` (defined in the
    preceding source section).
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSV file under `/data/redirects.csv` of the module contains all of the
    data for the migration. The file contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **old_path** | **new_path** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `/``foo` | `/``node/1` |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `/``foo/bar` | `/``node/2` |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `/``foo/bar/baz` | `/``node/3` |'
  prefs: []
  type: TYPE_TB
- en: Table 14.1 – The CSV file under /data/redirects.csv
  prefs: []
  type: TYPE_NORMAL
- en: The CSV file contains a few hundred records like the preceding one.
  prefs: []
  type: TYPE_NORMAL
- en: What about the alias?
  prefs: []
  type: TYPE_NORMAL
- en: When migrating redirects the URLs into Drupal, the destination (in this case,
    `new_path`) needs to be the Drupal entity path (`/node/1`, for example). Drupal
    will save the redirect correctly. If you have Pathauto auto-alias patterns in
    place, they will be generated when the migration saves each row of data. With
    the redirect contributed module installed, a 301 redirect will be created and
    related to the node we are redirecting to automatically.
  prefs: []
  type: TYPE_NORMAL
- en: When we enable our custom module, the migration appears in the list of migrations
    in the admin section under **Structure** | **Migrations**. Any migration that
    you define will appear in this section. You can run migrations from this interface,
    or you can do it from the command line using Drush, courtesy of the **Migrate
    Tools** contributed module.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – The Migrations screen lists all registered migrations in Drupal
    and the tasks you can perform with them](img/Figure_14.4_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – The Migrations screen lists all registered migrations in Drupal
    and the tasks you can perform with them
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can execute the migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – A migration running in the admin, displaying a progress meter](img/Figure_14.5_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – A migration running in the admin, displaying a progress meter
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that redirects are now showing up in Drupal that were migrated from
    the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – The migration created all the URL redirects we expect from
    our CSV file](img/Figure_14.6_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – The migration created all the URL redirects we expect from our
    CSV file
  prefs: []
  type: TYPE_NORMAL
- en: Migrating into nodes from CSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose for a second that we have another CSV file that contains data we want
    to migrate into a node type in Drupal. What might the migration definition look
    like? Not all that different actually!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using the CSV source plugin again, we made a few modifications, and now we have
    another migration defined that is ready to use. In the `destination` section,
    we swapped `entity:redirect` for `entity:node`, and also provided the node type
    (`bundle`) that we want to save the migrated data to.
  prefs: []
  type: TYPE_NORMAL
- en: Under the `process` section, we’ve added specific node properties and fields
    from the Article node type that we want to map migrated data to. There are also
    examples here of process plugins that have configurations attached about how we
    want to handle the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see a mapping like this in a migration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a shorthand for the `get` plugin provided by the Migrate module. The
    `get` plugin uses the provided value as-is from the source to store in Drupal.
    The longer way to write out using the `get` plugin would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The created property shows off another process plugin, `format_date`. The `format_date`
    process plugin allows you to take a date and format it before saving it to Drupal.
    In the preceding example, it is converting a date-time value to a timestamp, which
    is how Drupal stores create and change dates on nodes.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs: []
  type: TYPE_NORMAL
- en: The *Migrate Source CSV* module provides a CSV source plugin that takes care
    of parsing and reading provided CSV files for you, parsing out headers and records.
    This makes it possible to create a migration definition and quickly map records
    to destinations in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are dozens of migrate process plugins just like these that you can use
    in your migrations to make the process easier. For a full list of plugins that
    you can use, consult the online documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: Migrate process plugins ([https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins](https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate Plus process plugins ([https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins](https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins/list-of-core-migrate-process-plugins))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other contributed modules that add more process plugins, but between
    them, the core Migrate and contributed Migrate Plus modules cover nearly all that
    you will need to do migrations. When there is no process plugin that meets the
    needs of converting data during a migration, you can make your own. See the section
    on creating process plugins later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating data from an HTTP API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSV files and SQL databases are not the only data source you can use for migrations.
    The **Migrate Plus** contributed module comes with a URL source plugin. By using
    the URL plugin as a migration source, the migration can fetch and parse data over
    HTTP in the following formats:'
  prefs: []
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that you can migrate data from any API over the internet, making
    Migrate Plus an indispensable tool when you need to migrate data over the wire.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at how this could be used to migrate data from an HTTP API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we have given two examples of migration definitions in this chapter.
    Even though we are migrating from a different kind of source, the format of the
    migration definition itself is not going to change all that much. We still have
    our `source`, `destination`, and `process` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that we want to grab data from a public API that returns a JSON response
    and save it as nodes in Drupal. The JSON response in this example looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to consume that response and insert nodes for every item under `data`.
    Our migration definition would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The destination and process sections look the same as the other migrations at
    the beginning of the chapter. By now, you should see a pattern – migration definitions
    always look similar regardless of the source or destination. Each source plugin
    has different configuration values. Let’s break down what the `Url` plugin is
    doing.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Url` plugin has a few configuration properties that can be set. The most
    important ones are `urls`, `data_fetcher_plugin`, and `data_parser_plugin`. These
    must always be set when using the `Url` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The `urls` property accepts one or more URLs for the migration. Each URL will
    have its contents migrated in one by one. This is useful if you have a scenario
    where you have multiple locations and need to migrate the data into the same place
    (assuming the response format is the same).
  prefs: []
  type: TYPE_NORMAL
- en: The `data_fetcher_plugin` and `data_parser_plugin` properties are unique to
    the Migrate Plus module. Migrate Plus introduces the `DataFetcher` and `DataParser`
    plugin types as well as plugin managers for them. It also includes the `File`
    and `Http` data fetcher plugins, and the `Json`, `Xml`, and `Soap` data parser
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the migration is executed, the configuration is read. This loads the `Url`
    plugin, which contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `initializeIterator` method is required to be provided by any migration
    source plugin. This tells the migration how to parse the data, which hands it
    off to the `Json` plugin. The `Json` plugin then gets the `data_fetcher_plugin`
    value from the migration definition, which we have set as `http`. The `Xml` and
    `Soap` data parsers have a similar implementation. When you combine those, this
    is how the migration knows to make a call over the internet to get data and how
    to parse that data to prepare it for migration.
  prefs: []
  type: TYPE_NORMAL
- en: Once the data has been retrieved and parsed, it needs to know how to *access*
    items within the response. Sometimes, you get API responses where the results
    you want are deeply nested.
  prefs: []
  type: TYPE_NORMAL
- en: The `item_selector` property in our source definition informs the parser how
    to read and extract items from the response. Since the example JSON structure
    is simple, all we have to do is give it `data` for the item selector. If the items
    we wanted were nested in some way, we would enter the path to the results as `foo/bar/data`,
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fields portion under `source` describes to the migration the fields that
    we want to map, and how we want to refer to those fields in the process section.
    This was not necessary for the CSV migrations because the header records automatically
    become reference fields to use in the process pipeline mapping. In this case,
    we need to map them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `name` property is how we want to refer to this in the migration in the
    process section. The `label` property is what it is called (visible in the migration
    source area within Drupal), and the `selector` property is the actual name of
    it in our JSON result. You can make `name` and `label` whatever you want, but
    `selector` has to match what’s in the response fields returned from the API.
  prefs: []
  type: TYPE_NORMAL
- en: Again, we can navigate to **Structure** | **Migrations** in the Drupal admin
    to see this new migration and execute it.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s one final note on using the `Url` plugin. Earlier, we mentioned that
    Migrate Plus comes with two data fetcher plugins. We covered `Http`; the other
    is `File`. If you want to migrate data in from JSON or XML files on disk, you
    can. If you change your `data_fetcher_plugin` from `http` to `file`, the `Url`
    plugin will locate it and use it as a migration source.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a custom migration source plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you have seen a few powerful ways that Drupal can migrate in
    data using available source plugins. What happens when one does not exist to meet
    your needs? You can write a migration source plugin, of course!
  prefs: []
  type: TYPE_NORMAL
- en: Consider this scenario. You need to migrate data in from a MySQL database as
    nodes into Drupal. While the migration system in Drupal can understand how to
    connect to databases, it does not understand how to query for the data you are
    trying to obtain. In these instances, you can write a source plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s assume that the database has a table named `articles` that we want to
    pull data from in the migration, and it has `id`, `title`, `body`, `is_published`,
    and `published_on` as fields. Before we can write our source plugin, the first
    thing we need to do is establish a connection that will access this database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `settings.php` file, add the following MySQL database connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note the `migrate` key name in the `$databases` array. This entry will be used
    in our source plugin to make the connection. This key can be any name you want,
    other than `default`, which is used by Drupal for its default database connection.
    If you choose to use a key name other than `migrate`, be sure to remember it,
    as it will be referenced in your migration definition.
  prefs: []
  type: TYPE_NORMAL
- en: Back in your custom module, create a new directory at `src/Plugin/migrate/source`.
    Next, create a file in this directory named `ArticlesSource.php`. This will be
    the source plugin that powers the data retrieval for the migration.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three methods that we need to fulfill for our source plugin – a `query`
    method, a `fields` method, and an `id` method. For every SQL source plugin you
    create, these three methods are required:'
  prefs: []
  type: TYPE_NORMAL
- en: The `query` method will contain our actual SQL query to retrieve the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `fields` method will return an array of available fields on the source,
    keyed by their machine names and a description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `id` method defines the source field(s) for uniquely identifying a source
    row
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our new `ArticlesSource.php` file, we can start defining our source plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Our plugin class extends `SqlBase`, a core migrate plugin that deals with database
    source connections. It will do most of the heavy lifting after we provide the
    three aforementioned methods.
  prefs: []
  type: TYPE_NORMAL
- en: Our plugin class also has the `@MigrateSource` annotation. This is **required**.
    Without this annotation, Drupal will not discover this class as a usable source
    plugin, and the migration will fail to do anything.
  prefs: []
  type: TYPE_NORMAL
- en: The `id` property of the annotation defines the plugin ID. The `source_module`
    property identifies the system providing the data the source plugin will read
    from. For contributed sources, this is almost always the module they are defined
    in.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we provide the `query` method. If you have ever used the database API
    in Drupal before, this will be familiar. It uses the same APIs. It looks like
    any other Drupal SQL query; the only difference is it will be executed in the
    other database – the one we defined in our `settings.php` file earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filling that in is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The database API in Drupal is fairly easy to use. The `query` method here selects
    all articles and their fields, ordering them by their ID and published dates.
    The results of this query are what will power our migration later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `fields` method, we need to list out the fields we are using within
    the migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for the `id` method, we need to specify which field is the unique
    identifier for the migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this case, it is simply `id`, the unique field from the legacy database articles
    table.
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom source plugin in the migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With our source plugin in place, we can now focus on the migration itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like in our other examples, we need to define a migration definition YAML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: One of the best parts about migrations in Drupal is that the API is well defined,
    so regardless of how you may be obtaining data or processing data, the definitions
    always follow the same patterns.
  prefs: []
  type: TYPE_NORMAL
- en: In this migration, we have specified our new source plugin, `legacy_articles`,
    which is the plugin ID we provided in our `ArticlesSource` class. The `key` property
    in the source section is the same name as the database key we added in `settings.php`.
    Since we extended `SqlBase`, the key property is used when establishing a database
    connection to execute the query against. If you’re curious, you can review the
    `getDatabase` method of `SqlBase` to see how it uses the `key` property.
  prefs: []
  type: TYPE_NORMAL
- en: Since we defined our fields in the `fields` method of our source plugin, we
    can skip the fields section in the migration definition entirely and use them
    as provided. In this case, the migration will already know what the fields are.
    The same is true of the `ids` property; the source plugin already defines it,
    so we do not need to list it here like the other migrations in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: From here, the rest of the migration looks the same as what you have seen in
    other examples in this chapter. The `destination` section informs the migration
    to create `article` nodes, and the `process` section defines how to map our source
    fields to node fields.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, you can view this migration at **Structure** | **Migrations** in
    the admin and run it. Feel free to create a database alongside your Drupal database
    to experiment with the source plugin – once you know how to do it, you will be
    able to pull anything into Drupal and be a true migration wizard.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a custom process plugin for migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we’ve covered migrating data from CSV, JSON, and database sources,
    but what about cases where the data from these sources don’t quite align with
    the way they need to be stored in Drupal?
  prefs: []
  type: TYPE_NORMAL
- en: Migrations can be a tricky thing. While Drupal provides several avenues to source
    data to migrate in, there will be many cases where you need to manipulate that
    incoming data to get it to a satisfactory state, either for storage or cleanup
    purposes. Fortunately, creating process plugins is easy, and you will be manipulating
    data in a migration in no time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s take a look at an example of writing a process plugin. Using the previous
    example, a custom source plugin that fetches data from a database table, assume
    we now have to pull an additional field for the migration, `no_index`. While querying
    the data is easy, the data itself is not suitable for storage in the metatag field
    ([https://www.drupal.org/project/metatag](https://www.drupal.org/project/metatag)),
    as its value is either a 0 or 1\. When the value is 1 (`true`), the author has
    indicated they do not want this page crawled by search engines. In the previous
    system, the presence of this value would add additional metatags to the head of
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: The contributed Metatag module is able to replicate this functionality. However,
    the metatag field stores this data in a serialized fashion in the database. We
    cannot use the value as-is from the source, but we can add a process plugin to
    *convert* the data to the way we need it.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you added a Metatag field to the Article content type in Drupal, you
    can migrate the data by doing the following.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s update our source plugin to account for a new field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add it to our `fields` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that it has been added to the source plugin, the migration is receiving
    the value for each record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in our migration definition, let’s map the metatags field and get set
    up to write the custom process plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are piping the value of the `no_index` field to a plugin whose ID is
    `set_no_index`. Now, we can start to manipulate the data during the migration
    so that it can be stored properly.
  prefs: []
  type: TYPE_NORMAL
- en: In the custom module, we create a directory at `src/Plugin/migrate/process`.
    Within this directory, we are going to create a file called `SetNoIndex.php`.
    This is our new custom process plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Custom process plugins at a minimum need to implement the `transform` method.
    This method is responsible for handling and returning data for this step in the
    pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process plugin code would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Like the custom source plugin, note the annotation at the top of the class.
    This is required so that the plugin can be discovered by Drupal. The `id` value
    is the same one we used in the migration definition.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the migration runs, if the value passed in is 1, we get an array of values
    back. This is exactly what we need! However, we need to do one more thing before
    this will be successfully saved into Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Remember how we mentioned earlier that data is stored as a serialized array?
    Passing a plain PHP array along from our custom process plugin is not enough.
    In a migration, you can use several process plugins in a field mapping. They are
    run in the order they are listed, and this offers a composable way to transform
    the source data.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the core Migrate module provides a process plugin that will help
    us out, the `callback` process plugin. The `callback` process plugin calls a PHP
    function using the value from the previous process plugin (our result from `set_no_index`)
    and returns the value from the callback provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Combining the two in the pipeline would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After updating the migration definition, we need to bring those changes into
    Drupal. This can be done using Drush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This command will re-import the configuration files in the `config/install`
    directory of the `chapter14` module. This command is a good way to continually
    bring in changes to a definition as you work on a migration definition bit by
    bit.
  prefs: []
  type: TYPE_NORMAL
- en: Migration definitions are configuration
  prefs: []
  type: TYPE_NORMAL
- en: Migration YAML files are configured just like any other Drupal configuration
    file. When you make updates to a migration YAML file and import the changes with
    the command above, be sure to `config-export` when ready to deploy or commit the
    work to a repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the migration, we have the new data in our metatags field. In this
    example, you could validate that it worked in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you can look at the migrated content on your site in the admin, edit
    one of the migrated nodes, and see that the metatags field has the correct data
    on the node form:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.7 – The metatags fields on the node form](img/Figure_14.7_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – The metatags fields on the node form
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, you can check the metatags field in the database and see the raw
    data is there:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.8 – The metatags table in the database reflects the values we want
    to migrate](img/Figure_14.8_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.8 – The metatags table in the database reflects the values we want
    to migrate
  prefs: []
  type: TYPE_NORMAL
- en: If you remember from the previous chapter, we discussed the importance of *knowing*
    that code we wrote actually works using unit tests. Process plugins are pretty
    easy to write tests for. We may be viewing data in Drupal from the migration,
    but let’s be 100% certain that our process plugin is doing the right thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our unit test for the `set_no_index` plugin would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `valueProvider` method feeds our test method values and the result we expect
    our `set_no_index` plugin to return when evaluated. Now we know for certain that
    our migration will always provide the right data and that no migrated articles
    will be incorrectly crawled by search engines. For more on unit testing in Drupal,
    be sure to refer to [*Chapter 13*](B18548_13.xhtml#_idTextAnchor412), *Running
    and Writing Tests* *with Drupal*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we have demonstrated the power and flexibility of the Migrate
    and Migrate Plus modules of Drupal. Wielding both of these will empower you to
    migrate data from just about any source and process it accordingly. We also demonstrated
    how you can write custom source and custom process plugins to achieve this goal
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to check the contributed module ecosystem of Migrate on [Drupal.org](http://Drupal.org).
    There are several modules that provide countless source and process plugins, covering
    various data sources, such as CSV, JSON, XML, XLS, HTML, and HTTP APIs.
  prefs: []
  type: TYPE_NORMAL
