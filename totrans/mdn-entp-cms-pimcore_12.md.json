["```php\n    docker-compose up\n    ```", "```php\n    docker-compose exec php bash restore.sh\n    ```", "```php\n<?php\nnamespace App\\Model;\nuse Pimcore\\Model\\DataObject;\nclass AbstractProduct extends DataObject\\Concrete\n{\n    /**\n     * @return self[]\n     */\n    public function getVariants(){\n        $variantType = self::OBJECT_TYPE_VARIANT; //variant\n        $variants = $this->getChildren(array($variantType));\n        return $variants;\n    }\n}\n```", "```php\n<?php\n    use Pimcore\\Model\\DataObject;\n    $product = DataObject\\Product::getById(1);\n    $variants = $product->getVariants();\n?>\n```", "```php\n<?php\n    use Pimcore\\Model\\DataObject\\Product;\n    use Pimcore\\Model\\DataObject\\AbstractObject;\n    $list = new Product\\Listing();\n    $list->setObjectTypes([AbstractObject::OBJECT_TYPE_    VARIANT]);\n    $variants = $list->load();\n?>\n```", "```php\n<?php\n    use Pimcore\\Model\\DataObject\\Product;\n    use Pimcore\\Model\\DataObject\\AbstractObject;\n    $tshirt = Product::getByName(\"Classic T-Shirt\", \"en\", 1);\n    $orange = new Product();\n    $orange->setKey(\"Orange\");\n    $orange->setParent($tshirt);\n    $orange->setType(AbstractObject::OBJECT_TYPE_VARIANT);\n    $orange->save();\n?>\n```", "```php\nservices:\nApp\\EventListener\\DataObjectListener:\n        tags:\n            - { name: kernel.event_listener, event: pimcore.            dataobject.postUpdate, method: onObjectPostUpdate }\n```", "```php\n<?php\nnamespace App\\EventListener;\nuse Pimcore\\Event\\Model\\DataObjectEvent;\nuse Pimcore\\Model\\DataObject\\Product;\nclass DataObjectListener \n{\n    public function onObjectPostUpdate (DataObjectEvent $e) \n    {\n        $obj = $e->getObject(); \n        if($obj instanceof Product)\n        {\n            $bundleProducts = $obj->getBundle_products();\n            $currentPrice = $obj->getBundlePrice();\n            if(count($bundleProducts) >0)\n            {\n                $bundlePrice = 0;\n                foreach($bundleProducts as $product)\n                {\n                    $price = $product->getPrice()\n                        ->getValue();\n                    $bundlePrice += $price;\n                }\n                //substract the 20% of the sum\n                $bundlePrice = round($bundlePrice*0.8,2);\n                //Add this check to avoid circular saves\n                if($bundlePrice != $currentPrice)\n                {\n                    $obj->setBundlePrice($bundlePrice);\n                    $obj->save();\n                }\n            }\n        }\n    }\n}\n```", "```php\npimcore:\n    workflows:\n        product_workflow:\n            label: 'Product Workflow'\n            type: 'state_machine'\n            supports:\n                - 'Pimcore\\Model\\DataObject\\Product'\n            marking_store:\n                type: single_state\n                arguments:\n                    - marking\n```", "```php\npimcore:\n    workflows:\n        product_workflow:\n            places:\n                base_data:\n                    label: 'Base Data'\n                    color: '#ffd700'\n                    permissions:\n                        - objectLayout: basedata\n```", "```php\npimcore:\n    workflows:\n        product_workflow:\n            transitions:\n                product_images:\n                    from: [ translations, enrichment ]\n                    to: images\n                    guard: subject.checkTranslationsCompleted()\n                    options:\n                        label: 'Edit Images'\n                        notes:\n                            commentEnabled: true\n                            commentRequired: false\n                        iconClass: 'pimcore_icon_image'\n```"]