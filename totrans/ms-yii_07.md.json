["```php\nreturn [\n    // [...],\n\n    'components' => [\n        'user' => [\n            'identityClass' => 'app\\models\\User',\n        ],\n    ],\n\n    // [...],\n];\n```", "```php\nclass User extends \\yii\\db\\ActiveRecord implements \\yii\\web\\IdentityInterface\n```", "```php\n    /**\n     * @inheritdoc\n     */\n    public static function findIdentity($id)\n    { \n        return static::findOne($id);\n    }\n    ```", "```php\n    /** \n     * @inheritdoc\n     */\n    public static function findIdentityByAccessToken($token, $type=null) { }\n    ```", "```php\n        public static function findIdentityByAccessToken($token, $type=null)\n        {\n            return static::findOne(['access_token' => $token]);\n        }\n    ```", "```php\n    /**\n     * @inheritdoc\n     */\n    public function getId()\n    {\n        return $this->id;\n    }\n    ```", "```php\n        /**\n         * @return string current user auth key\n         */\n        public function getAuthKey() {}\n\n        /**\n         * @param string $authKey\n         * @return boolean if auth key is valid for current user\n         */\n        public function validateAuthKey($authKey)\n        {\n            return true;\n        }\n    ```", "```php\n    return [\n        'components' => [\n            // [...],\n            'user' => [\n                'identityClass' => 'app\\models\\User',\n                'enableAutoLogin' => true,\n            ],\n            // [...],\n        ]\n    ];\n    ```", "```php\n    public function beforeSave($insert)\n    {\n        if (parent::beforeSave($insert))\n        {\n            if ($this->isNewRecord)\n            {\n                $this->auth_key = \\Yii::\n                $app->security->generateRandomString();\n            }\n            return true;\n        }\n\n        return false;\n    }\n    ```", "```php\n    Yii::$app->user->login($identity, 3600*24*30);\n    ```", "```php\n$name = \\Yii::$app->user->identity->getFullName(); // \"Jane Doe\";\n```", "```php\n\\Yii::$app->user->isGuest;\n```", "```php\n\\Yii::$app->user->getId();\n```", "```php\n$identity = User::findOne([ 'email' => $emailAddress ]);\nYii::$app->user->login($identity);\n```", "```php\n<?php\n\nnamespace app\\models;\nuse Yii;\n\nclass UserForm extends \\yii\\base\\Model\n{\n    public $email;\n    public $password;\n    public $name;\n\n    public function rules()\n    {\n        return [\n            [['email', 'password'], 'required'],\n            [['email'], 'email'],\n            [['email', 'password', 'name'], 'string', 'max' => 255],\n            [['email', 'password'], 'required', 'on' => 'login'],\n            [['email', 'password', 'name'], 'required', 'on' => 'register']\n        ];\n    }\n\n    public function scenarios()\n    {\n        return [\n            'login' => ['email', 'password'],\n            'register' => ['email', 'password', 'name']\n        ];\n    }\n}\n```", "```php\n    private $_user = false;\n    /**\n    * Finds user by [[email]]\n    * @return User|null\n    */\n        public function getUser()\n        {\n            if ($this->_user === false)\n                $this->_user = User::findOne(['email' => $this->email]);\n\n            return $this->_user;\n        }\n    ```", "```php\n    /**\n     * Validates password\n     *\n     * @param  string  $password password to validate\n     * @return boolean if password provided is valid for current user\n     */\n    public function validatePassword($password)\n    {\n        return password_verify($password, $this->password);\n    }\n    ```", "```php\n    public function rules()\n    {\n      return [\n        // [...],\n        [['password'], 'validatePassword', 'on' => 'login'],\n      ];\n    }\n    ```", "```php\n    /**\n     * Validates the password.\n     * This method serves as the inline validation for password.\n     *\n     * @param string $attribute the attribute currently being validated\n     * @param array $params the additional name-value pairs given in the rule\n     */\n    public function validatePassword($attribute, $params)\n    {\n        if (!$this->hasErrors())\n        {\n            if (!$this->getUser() || !$this->getUser()->validatePassword($this->password)) {\n                $this->addError($attribute, 'Incorrect email or password.');\n            }\n        }\n    }\n    ```", "```php\n    /**\n     * Logs in a user using the provided email and password.\n     * @return boolean whether the user is logged in successfully\n     */\n    public function login()\n    {\n        if ($this->validate())\n    {\n        if (Yii::$app->user->login($this->getUser()))\n             return true;\n    }\n\n        return false;\n    }\n    ```", "```php\n    public function actionLogin()\n    {\n        $model = new \\app\\models\\UserForm(['scenario' => 'login']);\n\n        if ($model->load(Yii::$app->request->post()))\n        {\n            if ($model->login())\n                return $this->redirect('secure');\n        }\n\n        return $this->render('login', [\n            'model' => $model,\n        ]);\n    }\n    ```", "```php\n    public function actionSecure()\n    {\n        echo \"<pre>\";\n        \\yii\\helpers\\VarDumper::dump(\\Yii::$app->user->identity->attributes);\n        echo \"</pre>\";\n    }\n    ```", "```php\n[\n    'id' => 4\n    'email' => 'admin@example.com'\n    'password' => '$2y$13$f.1jE/cSFP42bHbqjtmJ5.6VkcOtKPp7Vu3UBC6clL7cHj84fltUC'\n    'first_name' => 'Site'\n    'last_name' => 'Administrator'\n    'role_id' => 2\n    'created_at' => 1439233885\n    'updated_at' => 1439233885\n] \n```", "```php\n<?php\n\nnamespace app\\controllers;\n\nuse yii\\web\\Controller;\nuse yii\\filters\\AccessControl;\n\nclass SiteController extends Controller\n{\n    public function behaviors()\n    {\n        return [\n            'access' => [\n                'class' => AccessControl::className(),\n                'only' => ['login', 'logout', 'register'],\n                'rules' => [\n                    [\n                        'allow' => true,\n                        'actions' => ['login', 'register'],\n                        'roles' => ['?'],\n                    ],\n                    [\n                        'allow' => true,\n                        'actions' => ['logout'],\n                        'roles' => ['@'],â€©                    ],\n                ],\n            ],\n        ];\n    }\n}\n```", "```php\n    return [\n      'access' => [\n        'class' => AccessControl::className(),\n        // [...]\n      ]\n    ];\n    ```", "```php\n    'only' => ['login', 'logout', 'register'],\n    ```", "```php\n    'rules' => [\n        [\n            'allow' => true,\n            'actions' => ['login', 'register'],\n            'roles' => ['?'],\n        ],\n        [\n            'allow' => true,\n            'actions' => ['logout'],\n            'roles' => ['@'],\n        ],\n    ]\n    ```", "```php\n<?php\n\nnamespace app\\controllers;\n\nuse Yii;\nuse yii\\filters\\AccessControl;\nuse yii\\web\\Controller;\nuse yii\\web\\HttpException;\nuse yii\\helpers\\Url;\n\nclass SiteController extends Controller\n{\n    public function behaviors()\n    {\n        return [\n            'access' => [\n                'class' => AccessControl::className(),\n                // Specifies the actions that the rules should be applied to\n                'only' => ['secure'],\n                // The rules surrounding who should and should not have access to the page\n                'rules' => [\n                    [\n                        'allow' => true,\n                        'matchCallback' => function($rule, \n$action) {\n                            return !\\Yii::$app->user->isGuest && \n\\Yii::$app->user->identity->role->id === 2;\n                        }\n                    ],\n                ],\n                // The action that should happen if the user shouldn't have access to the page\n                'denyCallback' => function ($rule, $action) {\n                    if (\\Yii::$app->user->isGuest)\n                        return $this->redirect\n(Url::to('/site/login'));\n                    else\n                        throw new HttpException('403', 'You are \nnot allowed to access this page');\n                },\n            ],\n        ];\n    }\n}\n```", "```php\nreturn [\n    'access' => [\n        'class' => AccessControl::className(),\n        // [..]\n        'rules' => [\n            [\n                'allow' => true,\n                'ips' => [\n                    '10.0.0.5', // Allow 10.0.0.5\n                    '192.168.*' // Allow 192.168.0.0/24 subnet\n                ]\n            ]\n        ]\n    ],\n];\n```", "```php\n<?php\n\nnamespace app\\controllers;\n\nuse Yii;\nuse yii\\web\\Controller;\nuse yii\\filters\\VerbFilter;\n\nclass SiteController extends Controller\n{\n    public function behaviors()\n    {\n        return [\n            // [...]\n            'verbs' => [\n                'class' => VerbFilter::className(),\n                'actions' => [\n                    'secure' => ['get'],\n                ],\n            ],\n        ];\n    }\n}\n```", "```php\n'only' => ['secure'],\n```", "```php\n'rules' => [\n    [\n        'allow' => true,\n        'actions' => [ 'secure' ],\n        'matchCallback' => function($rule, $action) {\n            return !\\Yii::$app->user->isGuest && \\Yii::$app->user->identity->role->id === 2;\n        }\n    ],\n    [\n        'allow' => true,\n        'actions' => [ 'authenticated' ],\n        'roles' => ['@']\n    ]\n],\n```", "```php\n'except' => ['secure'],\n```", "```php\nreturn [\n    // [...],\n    'components' => [\n        'authManager' => [\n            'class' => 'yii\\rbac\\PhpManager',\n        ],\n    ],\n    // [...],\n];\n```", "```php\nreturn [\n    // [...],\n    'components' => [\n        'authManager' => [\n            'class' => 'yii\\rbac\\DbManager',\n        ],\n    ],\n    // [...],\n];\n```", "```php\n./ yii migrate --migrationPath=@yii/rbac/migrations\n\n```", "```php\nYii Migration Tool (based on Yii v2.0.6)\nTotal 1 new migration to be applied:\n m140506_102106_rbac_init\n*** applying m140506_102106_rbac_init\n > create table {{%auth_rule}} ... done (time: 0.006s)\n > create table {{%auth_item}} ... done (time: 0.005s)\n > create index idx-auth_item-type on {{%auth_item}} (type) ... /\n done (time: 0.006s)\n > create table {{%auth_item_child}} ... done (time: 0.005s)\n > create table {{%auth_assignment}} ... done (time: 0.005s)\n*** applied m140506_102106_rbac_init (time: 0.050s)\nMigrated up successfully.\n\n```", "```php\n// Save to @app/commands\n<?php\nnamespace app\\commands;\n\nuse Yii;\nuse yii\\console\\Controller;\n\nclass RbacController extends Controller\n{\n    public function actionInit()\n    {\n        $auth = \\Yii::$app->authManager;\n\n        // Create the user permissions\n        $user = $auth->createPermission('createIssue');\n        $user->description = 'A permission to create a new issue within our incident management system';\n        $auth->add($user);\n\n        // Create the supporter permissions\n        $supporter = $auth->createPermission('supportIssue');\n        $supporter->description = 'A permission to apply supporter specific actions to an issue';\n        $auth->add($supporter);\n\n        // A supporter should have all the permissions of a user\n        $auth->addChild($supporter, $user);\n\n        // Create a permission to manage issues\n        $supervisor = $auth->createPermission('manageIssue')\n        $supervisor->description = 'A permission to apply management specific actions to an issue';\n        $auth->add($supervisor);\n\n        // A supervisor should have all the permissions of a supporter and a end user\n        $auth->addChild($supervisor, $supporter);\n        $auth->addChild($supervisor, $user);\n\n        $admin = $auth->createRole('admin');\n        $admin->description = 'A permission to perform admin actions on an issue';\n        $auth->add($admin);\n\n        // Allow an admin to perform all related tasks.\n        $auth->addChild($admin, $supervisor);\n        $auth->addChild($admin, $supporter);\n        $auth->addChild($admin, $user);\n    }\n}\n```", "```php\n./yii rbac/init\n\n```", "```php\n$auth = \\Yii::$app->authManager;\n$role = $auth->getRole('admin');\n$auth->assign($role, User::findOne([ 'email' => 'admin@example.com' ]));\n```", "```php\nreturn [\n    // [...],\n    'components' => [\n        'authManager' => [\n            'class' => 'yii\\rbac\\PhpManager',\n            'defaultRoles' => ['user'],\n        ],\n       // [...],\n    ],\n];\n```", "```php\n// Save to @app/rbac\n<?php\nnamespace app\\rbac;\n\nuse yii\\rbac\\Rule;\n\n/**\n * Checks if a user can edit their own issue\n */\nclass SupervisorRule extends Rule\n{\n    public $name = 'isAuthor';\n\n    /**\n     * @param string|integer $user the user ID.\n     * @param Item $item the role or permission that this rule is associated with\n     * @param array $params parameters passed to ManagerInterface::checkAccess().\n     * @return boolean a value indicating whether the rule permits the role or permission it is associated with.\n     */\n    public function execute($user, $item, $params)\n    {\n        return isset($params['issue']) ? $params['issue']->author == $user : false;\n    }\n}\n```", "```php\n$auth = Yii::$app->authManager;\n\n// Add a rule\n$rule = new \\app\\rbac\\SupervisorRule;\n$auth->add($rule);\n\n// Create a permission and associate the rule to it\n$modifyOwnIssue = $auth->createPermission('modifyOwnIssue');\n$modifyOwnIssue->description = 'Modify a issue that was self submitted';\n$modifyOwnIssue->ruleName = $rule->name;\n$auth->add($modifyOwnIssue);\n// Assign the supervisor role to the superviseIssue permissions\n$superviseIssue = $auth->getRole('superviseIssue');\n$auth->addChild($modifyOwnIssue, $superviseIssue); \n```", "```php\nif (\\Yii::$app->user->can('createIssue'))\n{\n    // Create a new issue\n}\n```", "```php\nif (\\Yii::$app->user->can('superviseIssue', ['issue' => Yii::$app->request->post('Issue')]))\n{\n    // Can modify an issue that they created\n}\n```", "```php\npublic function behaviors()\n{\n    return [\n        'access' => [\n            'class' => AccessControl::className(),\n            'denyCallback' => function ($rule, $action) {\n                if (\\Yii::$app->user->isGuest)\n                {\n                    \\Yii::$app->session->setFlash('warning', 'You must be authenticated to access this page');\n                    return $this->redirect(Url::to('/site/login'));\n                }\n                else\n                    throw new HttpException('403', 'You are not allowed to access this page');\n            },\n            'only' => ['secure'],\n            'rules' => [\n                [\n                    'allow' => true,\n                    'matchCallback' => function($rule, $action) {\n                        return !\\Yii::$app->user->isGuest && \\Yii::$app->user->identity->role->id === 2;\n                    }\n                ],\n            ],\n        ],\n    ];\n}\n```", "```php\n<?php use yii\\bootstrap\\Alert; ?>\n\n<div class=\"site-login\">\n    <?php if (\\Yii::$app->user->isGuest): ?>\n        <div class=\"body-content\">\n            <?php if (\\Yii::$app->session->hasFlash('warning')): ?>\n            <?php echo Alert::widget([\n                    'options' => [\n                    'class' => 'alert alert-warning'\n                    ],\n                    'body' => \\Yii::$app->session->getFlash('warning')\n                ]); ?>\n                <?php endif; ?>\n            <?php echo $this->render('forms/LoginForm', [ 'model' => $model ]); ?>\n        </div>\n    <?php else: ?>\n        <?php echo Alert::widget([\n            'options' => [\n                'class' => 'alert alert-info'\n            ],\n            'body' => 'You are already logged in. To login as a different user, logout first'\n        ]); ?>\n    <?php endif; ?>\n</div>\n```", "```php\nYii::$app->getSecurity();\n```", "```php\n$hash = \\Yii::$app->getSecurity()->generatePasswordHash($password);\n```", "```php\nif (Yii::$app->getSecurity()->validatePassword($plainTextPassword, $hashedPassword))\n{\n    // Valid Password\n}\nelse\n{\n    // Invalid Password\n}\n```", "```php\nreturn [\n    // [...],\n    'security' => [\n        'passwordHashStrategy' => 'password_hash'\n    ],\n    // [...],\n];\n```", "```php\n$encrypted = \\Yii::$app->getSecurity()->encryptByPassword($data, $secretPassword);\n```", "```php\n$data = \\Yii::$app->getSecurity()->decryptByPassword($encrypted, $secretPassword);\n```", "```php\n$hash = Yii::$app->getSecurity()->hashData($data, $secretKey);\n$data = Yii::$app->getSecurity()->validateData($hash, $secretKey);\n```"]