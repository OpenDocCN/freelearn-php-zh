["```php\n'always_load'  => array(\n    'packages'  => array(\n        'orm',\n        'auth',\n        'parser',\n    ),\n),\n```", "```php\nphp oil refine migrate --packages=auth\n\n```", "```php\n<h1>Items</h1>\n<?php foreach ($items as $item) { ?>\n    <li><?php echo $item->title ?></li>\n<?php } ?>\n<a href=\"item/create\">Create an item</a>\n```", "```php\n%h1 Items\n- foreach ($items as $item)\n  %li\n    = $item->title\n%a(href=\"item/create\") Create an item\n```", "```php\n<h1>Items</h1>\n{{#items}}\n  <li>{{title}}</li>\n{{/items}}\n<a href=\"item/create\">Create an item</a>\n```", "```php\n...\n<div class=\"posts_list\">\n    <div class=\"post\" id=\"post_232\">\n       <div class=\"post_author\">first_user</div>\n       <div class=\"post_content\">My last post.</div>\n       <div class=\"post_date\">5 minutes ago</div>\n    </div>\n    <div class=\"post\" id=\"post_214\">\n       <div class=\"post_author\">first_user</div>\n       <div class=\"post_content\">Hello everyone.</div>\n       <div class=\"post_date\">21 minutes ago</div>\n    </div>\n    ...\n</div>\n...\n```", "```php\n{\n    ...\n    \"posts\": [\n        {\n            \"id\": 142,\n            \"content\": \"previous post.\",\n            \"created_at\": 1409741475,\n            \"author\": {\n                \"id\": 24,\n                \"username\": \"first_user\"\n            }\n        },\n        {\n            \"id\": 125,\n            \"content\": \"very old post.\",\n            \"created_at\": 1209751372,\n            \"author\": {\n                \"id\": 24,\n                \"username\": \"first_user\"\n            }\n        },\n        ...\n    ]\n    ...\n}\n```", "```php\n\"mustache/mustache\": \"2.7.0\"\n```", "```php\n<?php\nclass Controller_User extends Controller_Template\n{\n\n}\n```", "```php\npublic function action_index()\n{\n    if (false /* is the user logged ? */) {\n        // @todo: handle response if user is logged.\n    } else {\n        $this->template->content = \n            View::forge(\n                'user/connect.mustache',\n                array(),\n                // By default, mustache escapes displayed\n                // variables, so no need to escape them here\n                false\n            );\n    }\n}\n```", "```php\n<!DOCTYPE html>\n<html>\n<head>\n<?php\necho '<base '.array_to_attr(array('href' => Uri::base())).' />';\n?>\n    <meta charset=\"utf-8\">\n    <title>My microblog</title>\n    <?php echo Asset::css('bootstrap.css'); ?>\n    <?php echo Asset::css('website.css'); ?>\n    <style>\n        body { margin: 50px; }\n    </style>\n    <?php echo Asset::js(array(\n        'http://code.jquery.com/jquery-1.11.2.min.js',\n        'bootstrap.js'\n    )); ?>\n    <script>\n        $(function(){ $('.topbar').dropdown(); });\n    </script>\n</head>\n<body>\n\n    <div class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <a class=\"navbar-brand\"\n<?php echo array_to_attr(array('href' => Uri::base())) ?>\n                >\n                    My microblog\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n<?php if (Session::get_flash('success')): ?>\n\t\t\t\t<div class=\"alert\n                            alert-success\n                            alert-dismissable\">\n\t\t\t\t\t<button\n                            type=\"button\"\n                            class=\"close\"\n                            data-dismiss=\"alert\"\n                            aria-hidden=\"true\">\n                        &times;\n                    </button>\n\t\t\t\t\t<p>\n<?php\necho implode(\n    '</p><p>',\n    (array) Session::get_flash('success')\n); ?>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n<?php endif; ?>\n<?php if (Session::get_flash('error')): ?>\n\t\t\t\t<div class=\"alert\n                            alert-danger\n                            alert-dismissable\">\n\t\t\t\t\t<button\n                            type=\"button\"\n                            class=\"close\"\n                            data-dismiss=\"alert\"\n                            aria-hidden=\"true\">\n                        &times;\n                    </button>\n\t\t\t\t\t<p>\n<?php\necho implode(\n    '</p><p>',\n    (array) Session::get_flash('error')\n); ?>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n<?php endif; ?>\n\t\t\t</div>\n<?php echo $content; ?>\n        </div>\n    </div>\n</body>\n</html>\n```", "```php\nbody {\n    background-color: #f8f8f8;\n}\n\nh1.home {\n    font-size: 45px;\n    text-align: center;\n}\n\n.alert {\n    margin-top: 10px;\n}\n```", "```php\n<h1 class=\"home\">\n    My microblog\n</h1>\n<div class=\"signup_or_signin\">\n    <div class=\"signin col-md-1\"></div>\n    <div class=\"signup col-md-4\">\n        <h2>Signup</h2>\n        <form action=\"user/signup\" method=\"post\">\n            <div class=\"form-group\">\n                <input\n                       type=\"text\"\n                       name=\"username\"\n                       placeholder=\"Username\"\n                       class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n                <input\n                       type=\"email\"\n                       name=\"email\"\n                       placeholder=\"Email\"\n                       class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n                <input\n                       type=\"password\"\n                       name=\"password\"\n                       placeholder=\"Password\"\n                       class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n                <input\n                       type=\"submit\"\n                       value=\"Signup\"\n                       class=\"btn btn-lg\n                              btn-primary\n                              btn-block\" />\n            </div>\n        </form>\n    </div>\n    <div class=\"signin col-md-2\"></div>\n    <div class=\"signin col-md-4\">\n        <h2>Signin</h1>\n        <form action=\"user/signin\" method=\"post\">\n            <div class=\"form-group\">\n                <input\n                       type=\"text\"\n                       name=\"username\"\n                       placeholder=\"Email or Username\"\n                       class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n                <input\n                       type=\"password\"\n                       name=\"password\"\n                       placeholder=\"Password\"\n                       class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n                <input\n                       type=\"submit\"\n                       value=\"Signin\"\n                       class=\"btn btn-lg\n                              btn-primary\n                              btn-block\" />\n            </div>\n        </form>\n    </div>\n    <div class=\"signin col-md-1\"></div>\n</div>\n\n```", "```php\n<?php\nreturn array(\n  '_root_'  => 'user/index',\n);\n```", "```php\npublic function action_signup()\n{\n    /*\n    Validating our form (checks if the username, the\n    password and the email have a correct value). We\n    are using the same Validation class as we saw on\n    numerous generated models\n    */\n    $val = Validation::forge('signup_validation');\n    $val->add_field(\n        'username',\n        'Username',\n        'required|valid_string[alpha,lowercase,numeric]'\n    );\n    $val->add_field(\n        'password',\n        'Password',\n        'required|min_length[6]'\n    );\n    $val->add('email', 'Email')\n        ->add_rule('required')\n        ->add_rule('valid_email');\n\n    // Running validation\n    if ($val->run())\n    {\n        try {\n            // Since validation passed, we try to create\n            // a user\n            $user_id = Auth::create_user(\n                Input::post('username'),\n                Input::post('password'),\n                Input::post('email')\n            );\n\n            /*\n            Note: at this point, we could send a\n            confirmation email, but for the sake of this\n            chapter conciseness, we will leave the\n            implementation of this feature to you as a\n            training exercise.\n            */\n\n            // If no exceptions were triggered, the user\n            // was succesfully created.\n            Session::set_flash(\n                'success',\n                e('Welcome '.Input::post('username').'!')\n            );\n        } catch (\\SimpleUserUpdateException $e) {\n            // Either the username or email already exists\n            Session::set_flash('error', e($e->getMessage());\n        }\n\n    }\n    else\n    {\n        // At least one field is not correct\n        Session::set_flash('error', e($val->error()));\n    }\n\n    /*\n    Sending the signup form fields information so that they\n    are already filled when the user is redirected to the\n    the index action (useful if the user could not be created)\n    */\n    Session::set_flash('signup_form', Input::post());\n\n    // No matter what, we return to the home page.\n    Response::redirect('/');\n}\n```", "```php\nView::forge(...);\n```", "```php\nView::forge(\n    'user/connect.mustache',\n    array(\n       'signup_form' => Session::get_flash('signup_form'),\n    ),\n    // By default, mustache escape displayed\n    // variables, so no need to escape them here\n    false\n);\n```", "```php\n<input\n       type=\"text\"\n       name=\"username\"\n       placeholder=\"Username\"\n       class=\"form-control\"\n       value=\"{{signup_form.username}}\"/>\n```", "```php\npublic function action_signin()\n{\n    // If already logged in, redirecting to home page.\n    if (Auth::check()) {\n        Session::set_flash(\n            'error',\n            e('You are already logged in, '.\n            Auth::get_screen_name().'.')\n        );\n        Response::redirect('/');\n    }\n\n    $val = Validation::forge();\n    $val->add('username', 'Email or Username')\n        ->add_rule('required');\n    $val->add('password', 'Password')\n        ->add_rule('required');\n\n    // Running validation\n    if ($val->run())\n    {\n        $auth = Auth::instance();\n\n        // Checking the credentials.\n        if (\n            Auth::check() or\n            $auth->login(\n                Input::post('username'),\n                Input::post('password')\n            )\n        )\n        {\n            Session::set_flash(\n                'success',\n                e('Welcome, '.Auth::get_screen_name().'!')\n            );\n        }\n        else\n        {\n            Session::set_flash(\n                'error',\n                'Incorrect username and / or password.'\n            );\n        }\n    } else {\n        Session::set_flash(\n            'error',\n            'Empty username or password.'\n        );\n    }\n\n    // No matter what, we return to the home page.\n    Response::redirect('/');\n}\n```", "```php\n<div class=\"navbar-header\">\n    <!-- Allows the navbar to collapse when\n         the screen width is too small -->\n    <button\n            type=\"button\"\n            class=\"navbar-toggle\"\n            data-toggle=\"collapse\"\n            data-target=\".navbar-collapse\">\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n    </button>\n    <a class=\"navbar-brand\"\n<?php echo array_to_attr(array('href' => Uri::base())); ?>\n    >\n        My microblog\n    </a>\n</div>\n<div class=\"navbar-collapse collapse\">\n<?php if (Auth::check()): ?>\n    <ul class=\"nav navbar-nav pull-right\">\n        <li class=\"dropdown\">\n            <a\n               data-toggle=\"dropdown\"\n               class=\"dropdown-toggle\"\n               href=\"#\">\n                <?php echo e(Auth::get_screen_name()) ?>\n                <b class=\"caret\"></b>\n            </a>\n            <ul class=\"dropdown-menu\">\n                <li>\n<?php\necho Html::anchor('user/signout', 'Sign out');\n?>\n                </li>\n            </ul>\n        </li>\n    </ul>\n<?php endif; ?>\n</div>\n```", "```php\npublic function action_signout()   \n{\n    Auth::logout();\n    Response::redirect('/');\n}\n```", "```php\nphp oil generate model post content:varchar[140] user_id:int created_at:int --no-timestamp\n\n```", "```php\nCreating model: APPPATH/classes/model/post.php\nCreating migration: APPPATH/migrations/001_create_posts.php\n\n```", "```php\nprotected static $_observers = array(\n    'Orm\\Observer_CreatedAt' => array(\n        'events' => array('before_insert'),\n        'mysql_timestamp' => false,\n    ),\n);\n```", "```php\nphp oil refine migrate\n\n```", "```php\n<li>\n    <a href=\"#\"\n       data-toggle=\"modal\"\n       data-target=\"#create_post_modal\">\n        <!-- Displays the pencil icon.\n             http://glyphicons.com/ -->\n        <span class=\"glyphicon glyphicon-pencil\"></span>\n        New post\n    </a>\n</li>\n```", "```php\ndata-toggle=\"modal\" data-target=\"#create_post_modal\"\n```", "```php\n<!-- Post modal window -->\n<div\n     class=\"modal fade\"\n     id=\"create_post_modal\"\n     tabindex=\"-1\"\n     role=\"dialog\"\n     aria-labelledby=\"myModalLabel\"\n     aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button\n                        type=\"button\"\n                        class=\"close\"\n                        data-dismiss=\"modal\">\n                    <span aria-hidden=\"true\">&times;</span>\n                    <span class=\"sr-only\">Close</span>\n                </button>\n                <h4 class=\"modal-title\" id=\"myModalLabel\">\n                    Compose new Post\n                </h4>\n            </div>\n            <div class=\"modal-body\">\n                <!-- Will be displayed conditionally -->\n                <div id=\"post_success\" class=\"alert\n                            alert-success\">\n                    Your post has been successfully\n                    published!\n                </div>\n                <!-- Will be displayed conditionally -->\n                <div id=\"post_fail\" class=\"alert\n                            alert-danger\"></div>\n\n                <textarea\n                          id=\"post_content\"\n                          rows=\"4\"\n                          class=\"form-control\"></textarea>\n            </div>\n            <div class=\"modal-footer\">\n                <span id=\"post_remaining_characters\"></span>\n                <button\n                        type=\"button\"\n                        class=\"btn btn-primary\"\n                        id=\"post_submit_button\">\n                    Submit\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n```", "```php\ntextarea {\n    resize: none;\n}\n\n#post_success, #post_fail {\n    display: none;\n}\n\n#post_remaining_characters.too_much {\n    color: red;\n}\n```", "```php\n// When the DOM is ready\n$(function(){\n    // jQuery elements initialization\n    var $postContent = $('#post_content');\n    var $postRemainingCharacters =\n        $('#post_remaining_characters');\n    var $postSuccess = $('#post_success');\n    var $postFail = $('#post_fail');\n    var $postSubmitButton = $('#post_submit_button');\n\n    // Defining the max number of characters of a post\n    var postMaxNbCharacters = 140; // will be improved\n\n    /*\n    Refreshes the remaining number of characters indicator,\n    and whether or not the submission button is enabled.\n    */\n    function refreshPostWindow() {\n        var postLength = $postContent.val().length;\n        var remainingCharacters =\n            postMaxNbCharacters - postLength;\n\n        $postRemainingCharacters\n        .text(remainingCharacters)\n        .attr(\n            'class',\n            remainingCharacters >= 0 ? '' : 'too_much'\n        );\n\n        $postSubmitButton.prop(\n            'disabled',\n            postLength == 0 || remainingCharacters < 0\n        );\n    }\n\n    // Initialization\n    refreshPostWindow();\n\n    /*\n    When showing the post creation modal window, clearing\n    all previous messages. Useful if a user publishes many\n    posts in a row.\n    */\n    $('#create_post_modal')\n    .on('show.bs.modal', function() {\n        $postFail.hide();\n        $postSuccess.hide();\n    });\n\n    // When the user type in the post textarea\n    $postContent.keyup(function() {\n        // In case he writes two posts in a row\n        $postSuccess.hide();\n        // See comments above\n        refreshPostWindow();\n    });\n\n    // When clicking on the submit button\n    $postSubmitButton.click(function() {\n\n        // Sending an AJAX POST request to post/create.json\n        // with the post content.\n        $.post(\n            'post/create.json',\n            {post_content: $postContent.val()}\n        )\n        .done(function(data) {\n            // In case the connection succeeded\n\n            /*\n            The action will define whether or not the\n            post passed validation using the data.success\n            variable.\n            */ \n            if (data.success) {\n                // If succeeded\n                $postFail.hide();\n                $postContent.val('');\n                refreshPostWindow();\n                $postSuccess.show();\n            } else {\n                // If failed, the error message will be\n                // defined in data.error.\n                $postFail\n                .text(data.error)\n                .show();\n            }\n        })\n        .fail(function() {\n            // In case the connection failed\n            $postFail\n            .text('Sorry, it seems there was an issue ' +\n                  'somewhere. Please try again later.')\n            .show();\n        });\n    });\n});\n```", "```php\nvar postMaxNbCharacters = 140; // will be improved\n```", "```php\n<?php\nreturn array(\n    'post_max_nb_characters' => 140,\n);\n```", "```php\n<?php\n// Converts the mymicroblog configuration to json.\n$json_configuration = Format::forge(\n    \\Config::load('mymicroblog', true)\n)->to_json();\n\necho '        ';\necho 'var MMBConfiguration = '.$json_configuration.\";\\n\";\n?>\n```", "```php\nvar postMaxNbCharacters =\n    MMBConfiguration['post_max_nb_characters'];\n```", "```php\n<?php\nclass Controller_Post extends Controller_Rest \n{\n}\n```", "```php\npublic function action_test() {\n    return $this->response(array(\n        'test_1' => 42,\n        'test_2' => 'Answer to the Ultimate Question',\n        'test_3' => array(\n            'test_4' => array(\n                'test_5', 'test_6', 'test_7'\n            ),\n            'test_8' => true,\n            'test_9' => null,\n        ),\n    ));\n}\n```", "```php\n{\n    \"test_1\":42,\n    \"test_2\":\"Answer to the Ultimate Question\",\n    \"test_3\":{\n        \"test_4\":[\"test_5\",\"test_6\",\"test_7\"],\n        \"test_8\":true,\n        \"test_9\":null\n    }\n}\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xml>\n    <test_1>42</test_1>\n    <test_2>Answer to the Ultimate Question</test_2>\n    <test_3>\n        <test_4>\n            <item>test_5</item>\n            <item>test_6</item>\n            <item>test_7</item>\n        </test_4>\n        <test_8>1</test_8>\n        <test_9/>\n    </test_3>\n</xml>\n```", "```php\narray (\n    'test_1' => 42,\n    'test_2' => 'Answer to the Ultimate Question',\n    'test_3' =>\n    array (\n        'test_4' =>\n        array (\n            0 => 'test_5',\n            1 => 'test_6',\n            2 => 'test_7',\n        ),\n        'test_8' => true,\n        'test_9' => NULL,\n    ),\n)\n```", "```php\npublic function action_create()\n{\n    $post_content = Input::post('post_content');\n\n    $response = array();\n\n    if (!Auth::check()) {\n        // In case the user has been signed out before\n        // he submits his post.\n        $response = array(\n            'success' => false,\n            'error' => 'You are not authenticated.',\n        );\n    } else {\n        // Checking if the post is correct. The JavaScript\n        // should have tested that already, but never trust\n        // the client.\n        $val = Validation::forge('post');\n        $val->add_field(\n            'post_content',\n            'post',\n            'required|max_length[140]'\n        );\n\n        if ($val->run())\n        {\n            // Creating the post.\n            list(, $user_id) = Auth::get_user_id();\n            $post = Model_Post::forge();\n            $post->content = $post_content;\n            $post->user_id = $user_id;\n            if ($post and $post->save()) {\n                $response = array(\n                    'success' => true,\n                );\n            } else {\n                $response = array(\n                    'success' => false,\n                    'error' => 'Internal error: Could'.\n                        ' not save the post.',\n                );\n            }\n        } else {\n            // The error can only occur on the only field...\n            $error = $val->error()['post_content'];\n            $response = array(\n                'success' => false,\n                'error' => $error->get_message(),\n            );\n        }\n    }\n\n    return $this->response($response);\n}\n```", "```php\n'(:segment)' => 'user/show/$1',\n```", "```php\n<?php\n\nclass Model_User extends \\Orm\\Model\n{\n  protected static $_properties = array(\n      'id',\n      'username',\n        'password',\n        'group',\n        'email',\n        'last_login',\n        'login_hash',\n        'profile_fields',\n        'created_at',\n        'updated_at',\n  );\n\n  protected static $_table_name = 'users';\n\n    protected static $_observers = array(\n      'Orm\\Observer_CreatedAt' => array(\n          'events' => array('before_insert'),\n          'mysql_timestamp' => false,\n      ),\n      'Orm\\Observer_UpdatedAt' => array(\n          'events' => array('before_save'),\n          'mysql_timestamp' => false,\n      ),\n  );\n}\n```", "```php\npublic function action_show($username) {\n    // Finding a user with a similar username\n    $user = Model_User::find('first', array(\n        'where' => array(\n            array('username' => $username),\n        ),\n    ));\n\n    if (!$user) {\n        Session::set_flash(\n            'error',\n            'The user '.e($username).' does not exists.'\n        );\n        Response::redirect('/');\n    }\n\n    // Finding 20 latest posts (will be improved)\n    $posts = Model_Post::find('all', array(\n        'related' => 'user',\n        'where' => array(\n            array('user_id' => $user->id),\n        ),\n        'order_by' => array('id' => 'DESC'),\n        'limit' =>\n        \\Config::get('mymicroblog.pagination_nb_posts'),\n    ));\n\n    // Displaying the profile page\n    $this->template->content =\n        View::forge(\n            'user/show.mustache',\n            array(\n                'user' => $user,\n                /*\n                As Model_Post::find returns an associative\n                array, with ids as keys and posts as\n                values, we need to transform it to a\n                classic array, otherwise mustache will\n                process as an object and not the list,\n                hence the use of array_values.\n                */\n                'posts' => array_values($posts),\n            ),\n            // By default, mustache escape displayed\n            // variables...\n            false\n        );\n}\n```", "```php\nprotected static $_belongs_to = array('user');\n```", "```php\n'pagination_nb_posts' => 20,\n```", "```php\npublic function before() {\n    parent::before();\n\n    \\Config::load('mymicroblog', true);\n}\n```", "```php\n<div class=\"col-md-3\"></div>\n<div class=\"col-md-6 profile\">\n    <div class=\"row profile_informations\">\n        <h1>\n            {{user.username}}\n        </h1>\n    </div>\n    {{> post/list}}\n</div>\n<div class=\"col-md-3\"></div>\n```", "```php\necho \\View::forge(\n    'post/list.mustache',\n    array(/* all current variables */),\n    false\n);\n```", "```php\n<div class=\"row post_list\">\n    {{> post/inside_list}}\n</div>\n```", "```php\n{{#posts}}\n    <div class=\"post\">\n        <div class=\"post_content\">{{content}}</div>\n        <div class=\"post_additional_infos\">\n            By\n            <a\n                class=\"post_author\"\n                href=\"/{{user.username}}\">\n                {{user.username}}\n            </a>\n            &middot;\n            <span\n                class=\"post_date\"\n                data-timestamp=\"{{created_at}}\">\n            </span>\n        </div>\n    </div>\n{{/posts}}\n```", "```php\n\\Parser\\View_Mustache::parser()\n    ->setPartialsLoader(\n    new Mustache_Loader_FilesystemLoader(\n        APPPATH.'views'\n    )\n);\n```", "```php\n.profile {\n    border-left: 1px solid #e8e8e8;\n    border-right: 1px solid #e8e8e8;\n    background-color: white;\n}\n\n.profile_informations {\n    text-align: center;\n    padding-top: 10px;\n    padding-bottom: 40px;\n    border-bottom: 1px solid #e8e8e8;\n}\n\n.post {\n    padding: 5px 10px 5px 10px;\n    border-bottom: 1px solid #e8e8e8;\n}\n\n.post_content {\n    margin-bottom: 10px;\n    word-break: break-all;\n    white-space: pre-wrap;\n}\n\n.post_additional_infos {\n    color: #888;\n}\n```", "```php\n<span>\n    class=\"post_date\"\n    data-timestamp=\"{{created_at}}\">\n</span>\n```", "```php\n/*\nConverts a timestamp to relative format.\nYou could use plugins as jquery.timeago for doing that, and\nit would probably be better that way, but we implemented\nourselves the method for being sure we won't have any\ncompatibility issues in the future. It is far from a perfect\nsolution: for instance, it supposes the client and the server\nshare the same time zone.\n*/\nfunction relativeFormat(timestamp) {\n    var timeLabels = [\n        {\n            divider: 31536000,\n            label: '(:nb) year ago',\n            label_plural: '(:nb) years ago'\n        },\n        {\n            divider: 2592000,\n            label: '(:nb) month ago',\n            label_plural: '(:nb) months ago'\n        },\n        {\n            divider: 86400,\n            label: '(:nb) day ago',\n            label_plural: '(:nb) days ago'\n        },\n        {\n            divider: 3600,\n            label: '(:nb) hour ago',\n            label_plural: '(:nb) hours ago'\n        },\n        {\n            divider: 60,\n            label: '(:nb) minute ago',\n            label_plural: '(:nb) minutes ago'\n        }\n    ];\n\n    var seconds = Math.floor(\n        (new Date() - timestamp) / 1000);\n\n    for (var i = 0; i < timeLabels.length; i++) {\n        var nb = Math.floor(seconds / timeLabels[i].divider);\n\n        if (nb > 0) {\n            var label = timeLabels[i][\n                (nb == 1 ? 'label' : 'label_plural')];\n            return label.replace('(:nb)', nb);\n        }\n    }\n    return 'Few seconds ago';\n}\n\n// Refresh all posts dates\nfunction refreshPostsDates() {\n    $('.post_date').each(function() {\n        var $this = $(this);\n        $this.text(\n            relativeFormat(\n                parseInt($this.data('timestamp')) * 1000\n            )\n        );\n    });\n}\n\n// When the DOM is ready\n$(function(){\n    refreshPostsDates();\n\n    // Regularly refresh posts dates (every 30000ms = 30s)\n    setInterval(refreshPostsDates, 30000);\n});\n```", "```php\n<?php\nclass Controller_Base extends Controller_Hybrid \n{\n\n}\n```", "```php\n/*\nOverriding the is_restful method to make the controller go into\nrest mode when an extension is specified in the URL. Ex:\nhttp://mymicroblog.com/first_user.json\n*/\npublic function is_restful()\n{\n    return !is_null(\\Input::extension());\n}\n\n/*\nHandles an hybrid response: when no extension is specified\nthe action returns HTML code by setting the template's content\nattribute with the specified view and data, and when an\nextension is specified, the action returns data in the expected \nformat(if available).\n*/\npublic function hybrid_response($view, $data) {\n    if (is_null(\\Input::extension())) {\n        $this->template->content =\n        View::forge(\n            $view.'.mustache',\n            $data,\n            // By default, mustache escape displayed\n            // variables...\n            false\n        );\n    } else {\n        $this->response($data);\n    }\n}\n```", "```php\nreturn $this->hybrid_response(\n    'user/show',\n    array(\n        'user' => $user,\n        'posts' => array_values($posts),\n    )\n);\n```", "```php\n<?php\n// This class will be extended by all our mappers and\n// contains general purpose methods.\nclass Mapper\n{\n    /**\n    * Transforms an object or objects to their mapped\n    * associative arrays. No matter what mapper we\n    * will use, the idea is to always call\n    * Mapper_CLASS::get('CONTEXT', $objects)\n    *\n    * @param string $context The context\n    * @param mixed $objects Array of objects or single object\n    *\n    * @return array Array of associative array or associative\n    *               array\n    */\n    static function get($context, $objects) {\n        if (is_array($objects)) {\n            $result = array();\n            foreach ($objects as $object) {\n                $result[] = static::get($context, $object);\n            }\n            return $result;\n        } else {\n            return static::$context($objects);\n        }\n    }\n\n    /**\n    * Extracts specified properties of an object and\n    * returns them as an associative array.\n    *\n    * @param object $object The object to convert\n    * @param array $attributes The list of attributes to extract\n    *\n    * @return array The associative array\n    */\n    static function extract_properties($object, $properties) {\n        $result = array();\n        foreach ($properties as $property) {\n            $result[$property] = $object->{$property};\n        }\n        return $result;\n    }\n}\n```", "```php\n<?php\n// Mapper for posts\nclass Mapper_Post extends Mapper\n{    \n    static function item($post) {\n        $result = static::extract_properties(\n            $post,\n            array('id', 'content', 'created_at')\n        );\n        $result['user'] = Mapper_User::get(\n            'minimal',\n$post->user\n        );\n        return $result;\n    }\n}\n```", "```php\n<?php\n// Mapper for users\nclass Mapper_User extends Mapper\n{\n    static function minimal($user) {\n        return array('username' => $user->username);\n    }\n\n    static function profile($user) {\n        $result = static::extract_properties(\n            $user,\n            array('id', 'username', 'created_at')\n        );\n\n        /*\n        profile_fields is always empty, but this is just here\n        to illustrate that you can also send other information\n        than object attributes.\n        */\n        $result['profile_fields'] = unserialize(\n            $user->profile_fields\n        );\n        return $result;\n    }\n}\n```", "```php\n'user' => $user,\n'posts' => array_values($posts),\n```", "```php\n'user' => Mapper_User::get('profile', $user),\n'posts' => Mapper_Post::get('item', $posts),\n```", "```php\n// Executed each time the application is requested in\n// development mode\nif (Fuel::$env == Fuel::DEVELOPMENT && !\\Fuel::$is_cli) {\n    $view_directory = APPPATH.'views/';\n    $extension = '.mustache';\n\n    /*\n    The following searches for mustache files in APPPATH/views/\n    and saves its content into the $template associative array.\n    Each key will be the template relative path; for instance,\n    if a template is located at\n    APPPATH/views/dir_1/file.mustache the value of the key\n    will be dir_1/file.\n    Each value will be the template content.\n    */\n    $templates = array();\n    $it = new RecursiveDirectoryIterator($view_directory);\n    foreach(new RecursiveIteratorIterator($it) as $file)\n    {\n        if (substr($file, -strlen($extension)) == $extension) {\n            // Deducing the key from the filename\n            // APPPATH/views/dir_1/file.mustache -> dir_1/file\n            $file_key = substr(\n                $file,\n                strlen($view_directory)\n            );\n            $file_key = substr(\n                $file_key,\n                0,\n                -strlen($extension)\n            );\n\n            $templates[$file_key] = file_get_contents($file);\n        }\n    }\n    $template_file_content = 'MyMicroblog.templates = '.\n        json_encode($templates).';';\n\n    // Saves the templates in the templates.js file\n    file_put_contents(\n        DOCROOT.'assets/js/templates.js',\n        $template_file_content\n    );\n}\n```", "```php\nsudo gem install guard-templates\n\n```", "```php\nguard init templates\n\n```", "```php\nguard 'templates',\n      :output => 'public/assets/js/templates.js',\n      :namespace => 'MyMicroblog' do\n    watch(/fuel\\/app\\/views\\/(.*)\\.mustache$/)\nend\n```", "```php\nguard\n\n```", "```php\n// We need to initialize the MyMicroblog for our templates\n// to work\nMyMicroblog = {};\n\n// Inspired from FuelPHP's render method\nfunction render(view, data) {\n    return Mustache.render(\n        MyMicroblog.templates[view],\n        data,\n        MyMicroblog.templates\n    );\n}\n```", "```php\n'mustache/mustache.js',\n'view.js',\n'templates.js',\n```", "```php\nrender('user/connect', {})\n```", "```php\n// Get the posts list depending on $_GET parameters\n// limited to 20 posts maximum\npublic function action_list() {\n    $query = static::get_posts_query(Input::get(), true);\n    $posts = $query->limit(\n        \\Config::get('mymicroblog.pagination_nb_posts')\n    )->get();\n\n    return $this->response(\n        Mapper_Post::get('item', $posts)\n    );\n}\n\n// Get the number of posts depending on $_GET parameters\npublic function action_count() {\n    $query = static::get_posts_query(Input::get(), false);\n    return $this->response($query->count());\n}\n```", "```php\n// Getting the posts query\npublic static function get_posts_query($params) {\n    $user_id = Arr::get($params, 'user_id', null);\n    // id > since_id\n    $after_id = intval(\n        Arr::get($params, 'after_id', null)\n    );\n    // id < from_id\n    $before_id = intval(\n        Arr::get($params, 'before_id', null)\n    );\n\n    $query = Model_Post::query();\n    $query->related('user');\n    $query->where('user_id', '=', $user_id);\n    if ($after_id != 0) {\n        $query->where('id', '>', $after_id);\n    }\n    if ($before_id != 0) {\n        $query->where('id', '<', $before_id);\n    }\n    $query->order_by(array('id' => 'DESC'));\n\n    return $query;\n}\n```", "```php\n$query = static::get_posts_query(\n    array('user_id' => $user->id),\n    true\n);\n$posts = $query->limit(\n\\Config::get('mymicroblog.pagination_nb_posts')\n)->get();\n```", "```php\n<div class=\"post\" data-post_id=\"{{id}}\">\n```", "```php\n<div class=\"row post_list\" data-user_id=\"{{user.id}}\">\n```", "```php\n<div class=\"load_more see_more\">\n    <button type=\"button\" class=\"btn btn-default btn-lg\">\n        <span\n            class=\"glyphicon glyphicon-arrow-down\"></span>\n        See more...\n    </button>\n    <div class=\"loading_message\">\n        Loading...\n    </div>\n</div>\n```", "```php\n// When the DOM is ready\n$(function() {\n\n// Triggered when the user clicks on the see more button\n    $('body').on(\n'click',\n'.post_list .see_more button',\n        function() {\n            // JQuery elements initialization\n            var $this = $(this);\n            var $post_list = $this.closest('.post_list');\n            var $see_more = $this.closest('.see_more');\n\n            // Getting user_id and before_id (last displayed\n            // post id)\n            var user_id = $post_list.data('user_id');\n            var before_id =\n                $post_list.find('.post:last').data('post_id');\n\n            /*\n            Adding the loading class to the see more in order\n            to tell the user we are loading older posts.\n            */\n            $see_more.addClass('loading');\n\n            // Getting the older posts\n            $.get(\n                'post/list.json',\n                {\n                    user_id: user_id,\n                    before_id: before_id\n                }\n            )\n            .done(function(data) {\n                if (data != null) {\n                    // Displaying loaded posts\n                    $see_more.before(\n                        render('post/inside_list', {posts: data})\n                    );\n                } else {\n                    // Everything has been loaded, no need\n                    // to show the See more button anymore\n                    $see_more.addClass('all_loaded');\n                }\n                $see_more.removeClass('loading');\n\n                // Refreshing posts dates\n                refreshPostsDates();\n            })\n            .fail(function() {\n                $see_more.removeClass('loading');\n                alert('Sorry, it seems there was an issue ' +\n                      'somewhere. Please try again later.');\n            });\n\n        }\n    );\n\n    // @note: we will add more code here later\n});\n```", "```php\n.load_more {\n    padding: 10px 0px 10px 0px;\n    text-align: center;\n    border-bottom: 1px solid #e8e8e8;\n}\n\n.loading_message,\n.load_more.loading button,\n.load_more.all_loaded {\n    display: none;\n}\n\n.load_more.loading .loading_message {\n    display: block;\n}\n```", "```php\n// @note: we will add more code here later\n```", "```php\n// When the See more button appears in the screen, the following\n// code triggers a click on it to load older posts, resulting in\n// an infinite scroll\n$(document).scroll(function() {\n    var $this = $(this);\n    var $see_more_button = $('.see_more button');\n    if ($see_more_button.length > 0 &&\n        $see_more_button.is(':visible')) {\n        if (\n            $this.scrollTop() + $(window).height() >\n            $see_more_button.offset().top) {\n            $see_more_button.click();\n        }\n    }\n});\n```", "```php\nif (false /* is the user logged ? */) {\n```", "```php\nif (Auth::check()) { \nResponse::redirect('/'.Auth::get_screen_name());\n```", "```php\nphp composer.phar require phpunit/phpunit:4.4.*\n\n```", "```php\n<?php\nreturn array(\n  'phpunit' => array(\n      'autoload_path' =>\n            VENDORPATH.'phpunit/phpunit/PHPUnit/Autoload.php',\n      'binary_path' => VENDORPATH.'bin/phpunit',\n  ),\n);\n```", "```php\nphp oil test\n\n```", "```php\nTests Running...This may take a few moments.\n...\nTime: 512 ms, Memory: 20.25Mb\nOK (375 tests, 447 assertions)\n\n```", "```php\n<?php\nnamespace Fuel\\App;\n\n/**\n * Examples tests \n *\n * @group App\n */\nclass Test_Examples extends \\TestCase\n{\n    // This method is executed before all tests are executed.\n    // If your unit test require some initialization, you can\n    // do it here.\n    public static function setUpBeforeClass() {\n        \\Config::load('mymicroblog', true);\n\n        // Executing migrations (we are on a test database)\n        \\Migrate::latest('auth', 'package');\n        \\Migrate::latest();\n\n        // Truncating the tables since we might already have data\n        \\DBUtil::truncate_table('users');\n        \\DBUtil::truncate_table('posts');\n\n        // Generating test data\n        \\Auth::create_user(\n            'first_user',\n            'test',\n            'email@email.com'\n        );\n        for ($i = 1; $i < 100; $i++) {\n            $post = \\Model_Post::forge(array(\n                'content' => 'post 1',\n                'user_id' => 1\n            ));\n            $post->save();\n        }\n\n        // ...\n    }\n\n    /**\n   * Tests the User mapper.\n   *\n   * @test\n   */\n    public function test_extract_properties() {\n        $object = new \\stdClass();\n        $object->a = '1';\n        $object->b = 2;\n        $object->c = true;\n\n        $res = \\Mapper::extract_properties(\n            $object,\n            array('a', 'c')\n        );\n\n        $expected_res = array('a' => '1', 'c' => true);\n\n        $this->assertEquals($res, $expected_res);\n\n        // A lot more should be tested...\n    }\n\n  /**\n   * Tests the User mapper.\n   *\n   * @test\n   */\n  public function test_user_mapper() {\n        // Getting any user.\n        // Note: In order not to depend on the database and on\n        // the ORM, you might want to create mock users objects\n        // (simulated users objects) and test features on these\n        // objects instead...\n        $user = \\Model_User::find('first');\n\n        // Testing that the profile context returns 4\n        // attributes\n        $profile = \\Mapper_User::get('profile', $user);\n        $this->assertCount(4, $profile);\n\n        // Testing that the minimal context returns 1 attribute\n        $minimal = \\Mapper_User::get('minimal', $user);\n        $this->assertCount(1, $minimal);\n\n        // A lot more should be tested...\n  }\n\n  // This method is executed after all tests have been\n  // executed\n  static function tearDownAfterClass() {} \n}\n```", "```php\nphp oil test --group=App\n\n```", "```php\nTests Running...This may take a few moments.\n..\nTime: 22 ms, Memory: 18.50Mb\nOK (2 tests, 3 assertions)\n\n```"]