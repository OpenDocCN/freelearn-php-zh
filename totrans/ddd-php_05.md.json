["```php\nclass SignUpController extends Controller\n{\n    public function signUpAction(Request $request)\n    {\n        $signUpService = new SignUpUserService(\n            $this->get('user_repository')\n        );\n\n        try {\n            $response = $signUpService->execute(new SignUpUserRequest(\n                $request->request->get('email'),\n                $request->request->get('password')\n            ));\n        } catch (UserAlreadyExistsException $e) {\n            return $this->render('error.html.twig', $response);\n        }\n\n        return $this->render('success.html.twig', $response);\n    }\n}\n\n```", "```php\nclass SignUpUserService\n{\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function execute(SignUpUserRequest $request)\n    {\n        $user = $this->userRepository->userOfEmail($request->email);\n        if ($user) {\n            throw new UserAlreadyExistsException();\n        }\n\n        $user = new User(\n            $this->userRepository->nextIdentity(),\n            $request->email,\n            $request->password\n        );\n\n        $this->userRepository->add($user);\n\n        return new SignUpUserResponse($user);\n    }\n}\n\n```", "```php\nclass SignUpUserRequest\n{\n    public $email;\n    public $password;\n\n    public function __construct($email, $password)\n    {\n        $this->email = $email;\n        $this->password = $password;\n    }\n}\n\n```", "```php\nclass SignUpUserResponse\n{\n    public $id;\n    public $email;\n\n    public function __construct(User $user)\n    {\n        $this->id = $user->id();\n        $this->email = $user->email();\n    }\n}\n\n```", "```php\nclass User\n{\n    public function signUp($aUsername, $aPassword)\n    {\n        // ...\n    }\n}\n\nclass Cart\n{\n    public function createOrder()\n    {\n        // ...\n    }\n}\n\n```", "```php\nclass SignUp\n{\n    public function execute($aUsername, $aPassword)\n    {\n        // ...\n    }\n}\n\n```", "```php\nclass CreateOrderFromCart\n{\n    public function execute(Cart $aCart)\n    {\n        // ...\n    }\n}\n\n```", "```php\nnamespace Ddd\\Auth\\Domain\\Model;\n\ninterface SignUp\n{\n    public function execute($aUsername, $aPassword);\n}\n\n```", "```php\nnamespace Ddd\\Auth\\Infrastructure\\Authentication;\n\nclass DefaultHashingSignUp implements Ddd\\Auth\\Domain\\Model\\SignUp\n{\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function execute($aUsername, $aPassword)\n    {\n        if (!$this->userRepository->has($aUsername)) {\n            throw UserDoesNotExistException::fromUsername($aUsername);\n        }\n\n        $aUser = $this->userRepository->byUsername($aUsername);\n\n        if (!$this->isPasswordValidForUser($aUser, $aPassword)) {\n            throw new BadCredentialsException($aUser, $aPassword);\n        }\n\n        return $aUser;\n    }\n\n    private function isPasswordValidForUser(\n        User $aUser, $anUnencryptedPassword\n    ) {\n        return password_verify($anUnencryptedPassword,$aUser->hash());\n    }\n}\n\n```", "```php\nnamespace Ddd\\Auth\\Infrastructure\\Authentication;\n\nuse Ddd\\Auth\\Domain\\Model\\SignUp\n\nclass Md5HashingSignUp implements SignUp\n{\n    const SALT = 'S0m3S4lT' ;\n\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function execute($aUsername, $aPassword)\n    {\n        if (!$this->userRepository->has($aUsername)) {\n            throw new InvalidArgumentException(\n                sprintf('The user \"%s\" does not exist.', $aUsername)\n            );\n        }\n\n        $aUser = $this->userRepository->byUsername($aUsername);\n\n        if ($this->isPasswordInvalidFor($aUser, $aPassword)) {\n            throw new BadCredentialsException($aUser, $aPassword);\n        }\n\n        return $aUser;\n    }\n\n    private function salt()\n    {\n        return md5(self::SALT);\n    }\n\n    private function isPasswordInvalidFor(\n        User $aUser, $anUnencryptedPassword\n    ) {\n        $encryptedPassword = md5(\n            $anUnencryptedPassword . '_' .$this->salt()\n        );\n\n        return $aUser->hash() !== $encryptedPassword;\n    }\n}\n\n```", "```php\n<?xml version=\"1.0\"?>\n<container\n\n    xsi:schemaLocation=\"\n        http://symfony.com/schema/dic/services\n        http://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n\n        <service id=\"sign_in\" alias=\"sign_in.default\" />\n\n        <service id=\"sign_in.default\"\n            class=\"Ddd\\Auth\\Infrastructure\\Authentication\n            \\DefaultHashingSignUp\">\n            <argument type=\"service\" id=\"user_repository\"/>\n        </service>\n\n        <service id=\"sign_in.md5\"\n            class=\"Ddd\\Auth\\Infrastructure\\Authentication\n                \\Md5HashingSignUp\">\n            <argument type=\"service\" id=\"user_repository\"/>\n        </service>\n\n    </services>\n</container>\n\n```", "```php\nnamespace Ddd\\Auth\\Domain\\Model;\n\nclass SignUp \n{\n    private $userRepository;â€†\n    private $passwordHashing;\n\n    public function __construct(\n        UserRepository $userRepository, PasswordHashing $passwordHashing\n    ) {\n        $this->userRepository = $userRepository;\n        $this->passwordHashing = $passwordHashing;\n    }\n\n    public function execute($aUsername, $aPassword)\n    {\n        if (!$this->userRepository->has($aUsername)) {\n            throw new InvalidArgumentException(\n                sprintf('The user \"%s\" does not exist.', $aUsername)\n            );\n        }\n\n        $aUser = $this->userRepository->byUsername($aUsername);\n\n        if ($this->isPasswordInvalidFor($aUser, $aPassword)) {\n            throw new BadCredentialsException($aUser, $aPassword);\n        }\n\n        return $aUser;\n    }\n\n    private function isPasswordInvalidFor(User $aUser, $plainPassword)\n    {\n        return !$this->passwordHashing->verify(\n            $plainPassword,\n            $aUser->hash()\n        );\n    }\n}\n\ninterface PasswordHashing \n{\n    /**\n     * @param string $password\n     * @param string $hash \n     * @return boolean \n     */\n    public function verify($plainPassword, hash);\n}\n\n```", "```php\nnamespace Ddd\\Auth\\Infrastructure\\Authentication;\n\nclass BasicPasswordHashing\n    implements \\Ddd\\Auth\\Domain\\Model\\PasswordHashing\n{\n    public function verify($plainPassword, $hash)\n    {\n        return password_verify($plainPassword, $hash);\n    }\n}\n\nclass Md5PasswordHashing\n    implements Ddd\\Auth\\Domain\\Model\\PasswordHashing\n{\n    const SALT = 'S0m3S4lT' ;\n\n    public function verify($plainPassword, $hash)\n    {\n        return $hash === $this-> calculateHash($plainPassword);\n    }\n\n    private function calculateHash($plainPassword)\n    {\n        return md5($plainPassword . '_' .$this-> salt());\n    }\n\n    private function salt()\n    {\n        return md5(self::SALT);\n    }\n}\n\n```", "```php\nclass PlainPasswordHashing implements PasswordHashing\n{\n    public function verify($plainPassword, $hash)\n    {\n        return $plainPassword === $hash;\n    }\n}\n\n```", "```php\nclass SignUpTest extends PHPUnit_Framework_TestCase\n{\n    private $signUp;\n    private $userRepository;\n\n    protected function setUp()\n    {\n        $this->userRepository = new InMemoryUserRepository();\n        $this->signUp = new SignUp(\n            $this->userRepository,\n            new PlainPasswordHashing()\n        );\n    }\n\n    /**\n     * @test\n     * @expectedException InvalidArgumentException\n     */\n    public function itShouldComplainIfTheUserDoesNotExist()\n    {\n        $this->signUp->execute('test-username', 'test-password');\n    }\n\n    /**\n     * @test\n     * @expectedException BadCredentialsException\n     */\n    public function itShouldTellIfThePasswordDoesNotMatch()\n    {\n        $this->userRepository->add(\n            new User(\n                'test-username',\n                'test-password'\n            )\n        );\n\n        $this->signUp->execute('test-username', 'no-matching-password')\n    }\n\n    /**\n     * @test\n     */\n    public function itShouldTellIfTheUserMatchesProvidedPassword()\n    {\n        $this->userRepository->add(\n            new User(\n                'test-username',\n                'test-password'\n            )\n        );\n\n        $this->assertInstanceOf(\n            'Ddd\\Domain\\Model\\User\\User',\n            $this->signUp->execute('test-username', 'test-password')\n        );\n    }\n}\n\n```", "```php\nCREATE TABLE `orders` (\n    `ID` INTEGER NOT NULL AUTO_INCREMENT,\n    `CUSTOMER_ID` INTEGER NOT NULL,\n    `AMOUNT` DECIMAL(17, 2) NOT NULL DEFAULT '0.00',\n    `STATUS` TINYINT NOT NULL DEFAULT 0,\n    `CREATED_AT` DATETIME NOT NULL,\n    `UPDATED_AT` DATETIME NOT NULL, \n    PRIMARY KEY (`ID`)\n) ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n```", "```php\nclass Order \n{ \n    const STATUS_CREATED   = 10;\n    const STATUS_ACCEPTED  = 20;\n    const STATUS_PAID      = 30;\n    const STATUS_PROCESSED = 40;\n\n    private $id;\n    private $customerId;\n    private $amount;\n    private $status;\n    private $createdAt;\n    private $updatedAt;\n\n    public function __construct(\n        $customerId,\n        $amount,\n        $status,\n        DateTimeInterface $createdAt,\n        DateTimeInterface $updatedAt\n    ) {\n        $this->customerId = $customerId;\n        $this->amount = $amount;\n        $this->status = $status;\n        $this->createdAt = $createdAt;\n        $this->updatedAt = $updatedAt;\n    }\n\n    public function setId($id)\n    {\n        $this->id = $id;\n    }\n\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    public function setCustomerId($customerId)\n    {\n        $this->customerId = $customerId;\n    }\n\n    public function getCustomerId()\n    {\n        return $this->customerId;\n    }\n\n    public function setAmount($amount)\n    {\n        $this->amount = $amount;\n    }\n\n    public function getAmount()\n    {\n        return $this->amount;\n    }\n\n    public function setStatus($status)\n    {\n        $this->status = $status;\n    }\n\n    public function getStatus()\n    {\n        return $this->status;\n    }\n\n    public function setCreatedAt(DateTimeInterface $createdAt)\n    {\n        $this->createdAt = $createdAt;\n    }\n\n    public function getCreatedAt()\n    {\n        return $this->createdAt;\n    }\n\n    public function setUpdatedAt(DateTimeInterface $updatedAt)\n    {\n        $this->updatedAt = $updatedAt;\n    }\n\n    public function getUpdatedAt()\n    {\n        return $this->updatedAt;\n    }\n}\n\n```", "```php\n// Fetch an order from the database\n$anOrder = $orderRepository->find( 1 );\n\n// Update order status\n$anOrder->setStatus(Order::STATUS_ACCEPTED);\n\n// Update updatedAt field\n$anOrder->setUpdatedAt(new DateTimeImmutable());\n\n// Save the order to the database\n$orderRepository->save($anOrder);\n\n```", "```php\nclass ChangeOrderStatusService\n{\n    private $orderRepository;\n\n    public function __construct(OrderRepository $orderRepository)\n    {\n        $this->orderRepository = $orderRepository;\n    }\n\n    public function execute($anOrderId, $anOrderStatus)\n    {\n        // Fetch an order from the database\n        $anOrder = $this->orderRepository->find($anOrderId);\n\n        // Update order status\n        $anOrder->setStatus($anOrderStatus);\n\n        // Update updatedAt field\n        $anOrder->setUpdatedAt(new DateTimeImmutable());\n\n        // Save the order to the database\n        $this->orderRepository->save($anOrder);\n    }\n}\n\n```", "```php\nclass UpdateOrderAmountService\n{\n    private $orderRepository;\n\n    public function __construct(OrderRepository $orderRepository)\n    {\n        $this->orderRepository = $orderRepository;\n    }\n\n    public function execute( $orderId, $amount)\n    {\n        $anOrder = $this->orderRepository->find(1);\n\n        $anOrder->setAmount($amount);\n        $anOrder->setUpdatedAt(new DateTimeImmutable());\n        $this->orderRepository->save($anOrder);\n    }\n}\n\n```", "```php\n$updateOrderAmountService = new UpdateOrderAmountService(\n    $orderRepository\n);\n\n$updateOrderAmountService->execute(1, 20.5);\n\n```", "```php\nclass Order \n{ \n    // ...\n    public function changeAmount($amount)\n    {\n        $this->amount = $amount;\n        $this->setUpdatedAt(new DateTimeImmutable());\n    }\n}\n\n```"]