- en: '*Chapter 8*: Creating Custom CMS Pages'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：创建自定义CMS页面'
- en: In the previous chapters, we learned how to create documents and objects and
    implement very simple websites using such features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了如何使用这些功能创建文档和对象，并实现非常简单的网站。
- en: In this chapter, we will have a deep dive into the creation of custom CMS pages.
    In fact, if you are templating a document or creating a standalone page, you have
    many tools that make the development experience in Pimcore great for you. This
    chapter will cover many aspects that are fundamental for a full overview of Pimcore's
    CMS capabilities; such features are basic tools for creating custom web pages,
    which we have combined to discuss user inputs and templates for creating content.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨自定义CMS页面的创建。实际上，如果你正在模板化文档或创建独立页面，你有许多工具可以使Pimcore的开发体验对你来说非常出色。本章将涵盖许多对于全面了解Pimcore的CMS功能至关重要的方面；这些功能是创建自定义网页的基本工具，我们将它们结合起来讨论用户输入和模板以创建内容。
- en: 'The chapter is structured as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结构如下：
- en: Using the MVC Model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MVC模型
- en: Using Editables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可编辑内容
- en: Using Blocks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用块
- en: Let's see Pimcore in action!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Pimcore的实际应用！
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'As with the previous chapters, there is a demo that you can find in our GitHub
    repository, which you can find here: [https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章一样，你可以在我们的GitHub仓库中找到一个演示，你可以在这里找到：[https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore)。
- en: All you need to do to run the demo connected with this chapter is to clone it
    and navigate to the `8\. Creating Custom CMS Pages` folder and start the Docker
    environment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行与本章相关的演示，你需要克隆它，导航到`8. 创建自定义CMS页面`文件夹，并启动Docker环境。
- en: 'To do so, just follow these instructions:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，请遵循以下说明：
- en: 'Run Docker with the following command:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行Docker：
- en: '[PRE0]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, to restore all the settings from on your local machine, type the following:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，要恢复本地机器上的所有设置，请输入以下命令：
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Navigate to [http://localhost/admin](http://localhost/admin) and log in with
    your admin/pimcore credentials.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[http://localhost/admin](http://localhost/admin)并使用你的管理员/pimcore凭据登录。
- en: 'What you will get with this setup is the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此设置，你将获得以下内容：
- en: A class definition called `MyObject`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`MyObject`的类定义
- en: Two instances of the class, `My Item 1` and `My Item 2`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该类的两个实例，`My Item 1`和`My Item 2`
- en: The **Editables** page, a page with a demo of editables (see *Using Editables*)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可编辑内容**页面，一个展示可编辑内容的示例页面（参见*使用可编辑内容*）'
- en: The **Template** page, a page with a demo of the templating helpers (see *Using
    the MVC model*)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**页面，一个展示模板辅助工具的示例页面（参见*使用MVC模型*）'
- en: A thumbnail preset called `MyThumbnails`
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`MyThumbnails`的缩略图预设
- en: Now you are ready to play with the demo related to this chapter!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好玩本章相关的演示了！
- en: Using the MVC Model
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MVC模型
- en: In this section, we will learn how the **MVC** (**Model View Controller**) model
    works and how to use it for creating a standalone web page that works outside
    the document scope. This is very important for covering all possible needs that
    you may encounter on your path with Pimcore as a Content Management System.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习MVC（**模型-视图-控制器**）模型的工作原理以及如何使用它创建一个独立于文档范围的网页。这对于覆盖你在使用Pimcore作为内容管理系统过程中可能遇到的所有可能需求非常重要。
- en: The MVC principle is very easy. When a URL matches a set of rules (**Routing**),
    a controller class is activated and this will compute data (**Model**) using certain
    business logic (**Controller**). The data is then sent to the **View** that implements
    the presentation logic and shows content to the user.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: MVC原则非常简单。当一个URL与一组规则匹配（**路由**）时，会激活一个控制器类，并使用某些业务逻辑（**控制器**）计算数据（**模型**）。然后，数据被发送到**视图**，该视图实现展示逻辑并向用户展示内容。
- en: 'In this section, we will cover the most important concepts relating to building
    embedded web pages using the MVC pattern:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍使用MVC模式构建嵌入式网页的最重要概念：
- en: Controllers
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器
- en: Views (template helpers)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图（模板辅助工具）
- en: Routing
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: Let's see them in detail.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看它们。
- en: Controllers
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: Pimcore **Controllers** implement the "C" part of the MVC pattern. Controllers
    are responsible for business logic or, in simpler words, are the part of your
    source code that reads, manipulates, and prepares data to be passed to the presentation
    layers (views). It is good practice to keep all the reusable logic in service
    classes, but the point that connects presentation with the business layer is,
    in fact, the controller element.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore **控制器**实现了 MVC 模式中的 "C" 部分。控制器负责业务逻辑，或者说，它是你的源代码中读取、操作和准备数据以传递给表示层（视图）的部分。将所有可重用逻辑保留在服务类中是一种良好的实践，但连接表示层与业务层的实际点是控制器元素。
- en: 'Pimcore offers an abstract class (`FrontendController`) that can be used as
    a base for your controller implementation. This simply means that all your controllers
    will usually inherit from the frontend controller. The naming convention of your
    files will follow the generic Symfony rules. In a simple scenario where you use
    Symfony''s standards for your website, you will have the following rules:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore 提供了一个抽象类（`FrontendController`），可以用作控制器实现的基类。这意味着你的所有控制器通常都会继承自前端控制器。你的文件命名约定将遵循通用的
    Symfony 规则。在简单的场景中，如果你使用 Symfony 的标准来构建网站，你将遵循以下规则：
- en: '`/src/Controller/[Controller].php`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/src/Controller/[Controller].php`'
- en: '`/templates/[Controller]/[action].html.twig`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/templates/[Controller]/[action].html.twig`'
- en: Inside controllers, you can create any action you want. Each action is responsible
    for a single functionality and is linked to a URL. We usually create a controller
    for each topic or homogeneous group or function (that is, `CustomerController`,
    which manages all the customer's features). If you invoke a controller omitting
    the action name, `default` will be used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器内部，你可以创建任何你想要的操作。每个操作负责单一的功能，并与一个 URL 相关联。我们通常为每个主题或同质组或功能（即 `CustomerController`，它管理所有客户功能）创建一个控制器。如果你省略了操作名称来调用控制器，将使用
    `default`。
- en: As we explained in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083),
    *Creating Documents in Pimcore*, we can choose a controller for each document
    and Pimcore comes out with a ready-to-go controller called `DefaultController`.
    We can create controllers that are unrelated to documents and simply implement
    custom web pages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [*第 4 章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083) 中解释的，*在 Pimcore 中创建文档*，我们可以为每个文档选择一个控制器，Pimcore
    提供了一个现成的控制器，称为 `DefaultController`。我们可以创建与文档无关的控制器，并简单地实现自定义网页。
- en: 'Inside controllers, you can access some special variables that can help you
    to define how to build the desired output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器内部，你可以访问一些特殊的变量，这些变量可以帮助你定义如何构建所需的输出：
- en: '`$this->document`: If you are working on a document, this is the document that
    you are manipulating.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$this->document`: 如果你正在处理文档，这就是你正在操作的文档。'
- en: '`$this->editmode`: Indicates whether you are in edit mode or not, and can be
    used for diversifying the output based on the case. This applies when you are
    working with documents.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$this->editmode`: 表示你是否处于编辑模式，并且可以根据情况用于多样化输出。这适用于你处理文档时。'
- en: In the next sections, you will find some examples of controller actions that
    cover all the most common use cases.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将找到一些控制器操作的示例，这些示例涵盖了所有最常见的情况。
- en: Passing data to a view
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数据传递给视图
- en: 'The following example is an action that adds a variable into the view with
    a value. In this case, the value is just text, but imagine that you could use
    the input from `$request` for computing data and add a more complex data object:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例是一个将变量添加到视图中的操作，其中的值只是文本，但想象一下，你可以使用 `$request` 的输入来计算数据，并添加一个更复杂的数据对象：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting HTTP headers
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 HTTP 头部
- en: 'Another requirement that we may have is to set some HTTP headers. If these
    values are fixed, you can add them using an annotation, or you can access and
    programmatically alter the response object using the `addResponseHeader` helper:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还有另一个要求，即设置一些 HTTP 头部。如果这些值是固定的，你可以使用注解添加它们，或者你可以使用 `addResponseHeader`
    辅助函数访问和程序化地修改响应对象：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The previous code adds three values for the same header: the first two from
    the annotation, and the other from the piece of code inside the method.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码为相同的头部添加了三个值：前两个来自注解，另一个来自方法内部的代码片段。
- en: Specifying the template path
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定模板路径
- en: 'If you are scared about the fixed conventions of templating, we will reassure
    you with the next example. In the following snippet, we will override the normal
    template path by setting it manually:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你担心模板的固定约定，我们将通过下一个示例来安慰你。在以下代码片段中，我们将通过手动设置来覆盖正常的模板路径：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, you can manually specify the template path to the `@Template()`
    annotation and just return the data, as in the following snippet:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以手动指定`@Template()`注解的模板路径，然后只返回数据，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Generating JSON output
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成JSON输出
- en: 'Even though Pimcore comes with a powerful API engine and `json` function. In
    the next example, you will see how to create a `json` response starting from plain
    data:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Pimcore自带了一个强大的API引擎和`json`函数。在下一个示例中，你将看到如何从原始数据创建一个`json`响应：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This outputs the `json` serialization of data as the body of the response and
    sets the content type to `application/json`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出数据的`json`序列化为响应的主体，并将内容类型设置为`application/json`。
- en: For all other cases
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于所有其他情况
- en: 'As a final fallback, if none of the standard solutions offered by Pimcore will
    satisfy your needs, there is the bare option to create a Symfony response object
    manually and return it to the MVC engine. Using this option, you will be free
    to set all response parameters, for `mime` type to the raw content without any
    limitation. In the next example, we will return fixed text:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的备选方案，如果你对Pimcore提供的所有标准解决方案都不满意，你可以选择手动创建一个Symfony响应对象，并将其返回给MVC引擎。使用此选项，你可以自由设置所有响应参数，包括`mime`类型到原始内容，没有任何限制。在下一个示例中，我们将返回固定的文本：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous block of code returns a response with text content as an example.
    Given the `Request` object, you can implement all the code you want and then produce
    a custom `Response`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码块返回了一个包含文本内容的响应作为示例。给定`Request`对象，你可以实现所有想要的代码，然后生成一个自定义的`Response`。
- en: 'All the preceding actions are intended to be contained in a `controller` class
    like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的上述操作都旨在包含在一个`controller`类中，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This set of samples is not exhaustive but contains the most important features
    and is a great starting point. You can find more details in the official documentation:
    [https://pimcore.com/docs/pimcore/current/Development_Documentation/MVC/index.html](https://pimcore.com/docs/pimcore/current/Development_Documentation/MVC/index.html).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这组示例并不全面，但包含了最重要的功能，是一个很好的起点。你可以在官方文档中找到更多详细信息：[https://pimcore.com/docs/pimcore/current/Development_Documentation/MVC/index.html](https://pimcore.com/docs/pimcore/current/Development_Documentation/MVC/index.html)。
- en: Views
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: This section covers the "V" component of the MVC pattern. **Views** are the
    components that receive data and render it by implementing presentation logic.
    A views file can be written using Twig or a PHP template but, as we told you in
    [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083), *Creating Documents in
    Pimcore*, we will focus only on the Twig solution, which allows a more strict
    separation between business and presentation logic and makes Pimcore a real detached
    CMS. The downside of this solution is that the logic that you can implement in
    a Twig file is limited as it forces you to implement all the business logic in
    the controller. This strict separation may seem limiting at the beginning, but
    when you are confident with the pattern, you will agree that it's more clean,
    reusable, and maintainable. Other than all the platform-specific features, called
    **helpers**, Pimcore's Twig files support all the standard features of Twig.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了MVC模式中的“V”组件。**视图**是接收数据并通过实现表示逻辑来渲染数据的组件。视图文件可以使用Twig或PHP模板编写，但正如我们在[*第4章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)中提到的，*在Pimcore中创建文档*，我们将只关注Twig解决方案，它允许更严格地分离业务和表示逻辑，使Pimcore成为一个真正的独立CMS。这种解决方案的缺点是，你可以在Twig文件中实现的逻辑有限，因为它强迫你在控制器中实现所有业务逻辑。这种严格的分离在开始时可能看起来有限制，但当你对模式有信心时，你会同意它更干净、可重用且易于维护。除了所有平台特定的功能，称为**助手**之外，Pimcore的Twig文件支持所有标准的Twig功能。
- en: Here is a list of the most important Pimcore helpers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Pimcore最重要的助手列表。
- en: pimcore_object
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_object
- en: 'In the following code, we loaded an object by its `id` (in our case, `2`) and
    we displayed the `Title` property:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们通过其`id`（在我们的案例中，`2`）加载了一个对象，并显示了`Title`属性：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our object has a `Title` property accessed by the standard `getTitle` `method`,
    so the value will be printed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的对象有一个`Title`属性，可以通过标准的`getTitle` `方法`访问，因此值将被打印。
- en: pimcore_document
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_document
- en: 'In the next snippet, we have loaded a document and printed the title:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个代码片段中，我们加载了一个文档并打印了标题：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `myDoc` element is Pimcore's document and all its properties can be accessed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`myDoc`元素是Pimcore的文档，您可以访问其所有属性。'
- en: pimcore_asset
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_asset
- en: 'This helper loads an asset that can be used in the template. In the next example,
    we loaded one asset and we displayed the `filename` and `url`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此辅助程序加载一个可用于模板的资产。在下一个例子中，我们加载了一个资产，并显示了`filename`和`url`：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Alternatively, you can find an asset by its path, using the following shortcut:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用以下快捷方式通过路径找到资产：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As usual, the assigned variable can be used in the template file for implementing
    any presentation logic.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，分配的变量可以在模板文件中用于实现任何展示逻辑。
- en: Render controller output
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渲染控制器输出
- en: 'This function calls an arbitrary action and prints the result. In the next
    example, we used the `/custom/json` example and we rendered the output, passing
    `items=11` as the parameter:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数调用一个任意动作并打印结果。在下一个例子中，我们使用了`/custom/json`示例，并渲染了输出，传递`items=11`作为参数：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The parameter order is action, controller, bundle, and parameters.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 参数顺序是动作、控制器、包和参数。
- en: pimcore_cache
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_cache
- en: 'Pimcore''s cache simply implements an in-template caching functionality. You
    can use this to cache some parts of the HTML page directly in the template, independent
    of the other global definable caching functionality. This can be useful for templates
    that need a lot of calculation or require a huge amount of objects (such as navigations,
    and so on). In the next block of code, we will see caching in action:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore的缓存简单地实现了模板内的缓存功能。您可以直接在模板中缓存HTML页面的某些部分，而不依赖于其他全局可定义的缓存功能。这对于需要大量计算或需要大量对象（如导航等）的模板非常有用。在下一块代码中，我们将看到缓存的实际应用：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The parameter order is the name of the key, the timeout in seconds, and an optional
    flag for forcing the cache in admin mode.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 参数顺序是键名、秒数超时以及可选的强制在管理员模式下缓存标志。
- en: pimcore_device
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_device
- en: 'The `pimcore_device` function helps when implementing adaptive designs. The
    next piece of code displays the usage of this helper in a template snippet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`pimcore_device`函数在实现自适应设计时很有帮助。下一段代码显示了在模板片段中此辅助程序的使用：'
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you are running this script on your PC, the output will be **I'm a desktop
    device**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在您的PC上运行此脚本，输出将是**我是一个桌面设备**。
- en: Request
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 请求
- en: 'From the default Symfony objects, you can access the request data. This can
    be done using the `app.request` item that contains all the information that we
    need. In the next example, we used this method to get the `"_dc"` URL parameter
    that you usually have in a page preview:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从默认的Symfony对象中，您可以访问请求数据。这可以通过包含所有所需信息的`app.request`项来完成。在下一个例子中，我们使用了这种方法来获取页面预览中通常存在的`"_dc"`
    URL参数：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is just a sample, and you can access all the request parameters. You can
    look at the official documentation for more information, here: [https://symfony.com/doc/current/templates.html#the-app-global-variable](https://symfony.com/doc/current/templates.html#the-app-global-variable).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个示例，您可以访问所有请求参数。您可以查看官方文档以获取更多信息，请参阅：[https://symfony.com/doc/current/templates.html#the-app-global-variable](https://symfony.com/doc/current/templates.html#the-app-global-variable)。
- en: Glossary
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 术语表
- en: 'This helper replaces glossary terms with links. The glossary module is a powerful
    tool, making internal and external linking easy and smart, and which Pimcore has
    out of the box. As an example, you can connect the word "Pimcore" with the official
    website, so that each time you use it in HTML, it will be replaced with a link
    to the website. The `pimcore_glossary` helper will be used by this helper to render
    links. To test this feature, follow these steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此辅助程序将术语替换为链接。术语表模块是一个强大的工具，使得内部和外部链接变得简单且智能，并且Pimcore提供的是即用型。例如，您可以将“Pimcore”这个词与官方网站连接起来，这样每次在HTML中使用它时，都会被替换为指向网站的链接。此`pimcore_glossary`辅助程序将由该辅助程序用于渲染链接。要测试此功能，请按照以下步骤操作：
- en: Go to **Tools** | **Glossary**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**工具** | **术语表**。
- en: Click **Add**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**。
- en: 'Enter the term `PIMcore` in the **Text** column and then the link to the page
    in the **Link** column. In this example, we added PIMcore and CMS words with the
    related links. In the next screenshot, you will find the result:![Figure 8.1:
    Glossary terms'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**文本**列中输入术语`PIMcore`，然后在**链接**列中输入页面链接。在这个例子中，我们添加了PIMcore和CMS词及其相关链接。在下一张截图，您将找到结果：![图8.1：术语表项
- en: '](img/Figure_8.01_B17073.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.01_B17073.jpg)'
- en: 'Figure 8.1: Glossary terms'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.1：术语表项
- en: 'Now the glossary is set and we can use it on any web page using the `pimcoreglossary`
    helper. We can do this by placing the following snippet in a web page template:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，术语表已设置，我们可以在任何网页上使用 `pimcoreglossary` 助手使用它。我们可以通过在网页模板中放置以下代码片段来实现这一点：
- en: '[PRE17]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the previous snippet, we surround the text with the `glossary` function.
    Because we defined the words **PIMcore** and **CMS** inside the glossary, they
    will be transformed into a link on the web page. This is the final result:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们用 `glossary` 函数包围了文本。因为我们定义了术语表中的单词 **PIMcore** 和 **CMS**，它们将在网页上转换为链接。这是最终结果：
- en: '![Figure 8.2: The glossary helper in action'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.2：术语表助手在行动中'
- en: '](img/Figure_8.02_B17073.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.02_B17073.jpg)'
- en: 'Figure 8.2: The glossary helper in action'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：术语表助手在行动中
- en: This was a simple example to explain the concept, but it shows how powerful
    this feature is.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的示例，用于解释概念，但它展示了此功能是多么强大。
- en: pimcore_placeholder
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_placeholder
- en: 'This helper adds custom placeholders into the template. The next snippet defines
    a placeholder called `myplaceholder`, which is configured for building an H3 tag
    surrounding the `"My content`" value:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手将自定义占位符添加到模板中。下一个代码片段定义了一个名为 `myplaceholder` 的占位符，该占位符配置用于构建围绕 `"My content"`
    值的 H3 标签：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The output of this is `<h3>My content</h3>`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出的结果是 `<h3>My content</h3>`。
- en: pimcore_head_link
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_head_link
- en: This helper collects a list of head links (stylesheet or any other `head link`
    tag) and prints them on the head section of the web page. Based on the presentation
    logic, the links are collected (you may or may not include a file based on some
    special conditions) and then printed once.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手收集头部链接列表（样式表或任何其他 `head link` 标签）并在网页的头部区域打印它们。根据展示逻辑，链接被收集（您可能包括或不包括文件，基于某些特殊条件）然后一次性打印。
- en: 'In the following example, the snippets append a favicon (favorite icon – the
    logos you see in browser tabs when you surf websites) to the link list:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，代码片段将 favicon（收藏夹图标——您在浏览网站时在浏览器标签中看到的标志）添加到链接列表中：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the example, we appended a favicon to the list. Using the correct configuration
    of `pimcore_head_link`, we can also define the order using relative inclusion
    (for example, add x file after y file).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们将 favicon 添加到列表中。使用正确的 `pimcore_head_link` 配置，我们还可以使用相对包含（例如，在文件 y 之后添加文件
    x）来定义顺序。
- en: pimcore_head_meta
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_head_meta
- en: 'This helper prints HTTP meta tags. It can collect a set of items that will
    be printed once in the header section. In the next block of code, like in the
    `HeadLink` helper, the data is collected and printed to the function by the final
    call:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手打印 HTTP 元标签。它可以收集一组将在头部区域打印一次的项目。在下一个代码块中，类似于 `HeadLink` 助手，数据通过最终调用收集并打印到函数中：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: pimcore_head_script
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_head_script
- en: 'This is the same as `HeadLink` and `Style`, but for a JavaScript file. The
    next block of code adds a script to the list and then prints it on the page:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 `HeadLink` 和 `Style` 相同，但用于 JavaScript 文件。下一个代码块将脚本添加到列表中，然后将其打印到页面上：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: pimcore_head_style
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_head_style
- en: 'This helper manages inline styles. It is like `HeadLink`, but with inline scripts.
    In the next piece of code, we add a file called `ie.css` with conditional wrapping
    that, in this case, limits the CSS action to Internet Explorer before version
    11:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手管理内联样式。它类似于 `HeadLink`，但带有内联脚本。在下一段代码中，我们添加了一个名为 `ie.css` 的文件，该文件具有条件包装，在这种情况下，将
    CSS 操作限制在版本 11 之前的 Internet Explorer 中：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: pimcore_head_title
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_head_title
- en: 'Creates and save the HTML document''s `<title>` for later retrieval and output.
    The following script adds the special `title` tag into the page:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并保存 HTML 文档的 `<title>` 以供以后检索和输出。以下脚本将特殊的 `title` 标签添加到页面中：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: pimcore_inc
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_inc
- en: 'This helper includes a Pimcore document in the page. In the next snippet, we
    see how the `MySnippet` document is rendered and added to the page:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手在页面中包含 Pimcore 文档。在下一个代码片段中，我们看到 `MySnippet` 文档是如何渲染并添加到页面中的：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: pimcore_inline_script
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pimcore_inline_script
- en: 'This helper adds inline scripts to a page. The usage is very similar to `HeadScript`,
    but intended for inline usage. The next piece of code adds `myscript.js` to the
    list and then prints it on the page:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手向页面添加内联脚本。用法与 `HeadScript` 非常相似，但旨在内联使用。下一个代码块将 `myscript.js` 添加到列表中，然后将其打印到页面上：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Navigation
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航
- en: 'This helper is responsible for generating and adding a navigation menu. In
    the next piece of code, you will find an example that prints a menu based on the
    document hierarchy:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手负责生成并添加导航菜单。在下一个代码块中，您将找到一个示例，该示例根据文档层次结构打印菜单：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the snippet, it rendered a menu that starts from `mainNavStartNode`, which
    is the root document, and uses the current document as the active one.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在片段中，它渲染了一个从`mainNavStartNode`（根文档）开始的菜单，并使用当前文档作为活动文档。
- en: 'You can refer to the official documentation for more information on `navigation`:
    [https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Navigation.html.](https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Navigation.html)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考官方文档以获取有关`导航`的更多信息：[https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Navigation.html.](https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Navigation.html)
- en: include
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: include
- en: 'This helper directly includes a template inside the page. Look at the following
    script:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手直接在页面中包含一个模板。看看以下脚本：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This script includes the `Default/include.html.twig` `template`, where you can
    use the set of parameters passed as the input.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本包括`Default/include.html.twig`模板，您可以在其中使用作为输入传递的参数集。
- en: Translations
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 翻译
- en: 'This is a Symfony feature integrated within Pimcore''s engine. With the pipe
    filter, you can transform text using the translations database and replace the
    original text with the translated version. To do this, do the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在Pimcore引擎中集成的Symfony功能。使用管道过滤器，您可以使用翻译数据库转换文本，并用翻译版本替换原始文本。为此，请执行以下操作：
- en: Create a document and assign a template to it.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文档并将其分配给一个模板。
- en: 'Add the following snippet to the template:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下片段添加到模板中：
- en: '[PRE28]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This script sets a variable with a string value (`my-test-key`) and then prints
    it using the `trans` filter.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此脚本设置一个具有字符串值（`my-test-key`）的变量，然后使用`trans`过滤器打印它。
- en: 'After the first usage of the label, an entry will be created in your backend,
    and you will be able to set a value for each language. Go to **Tools** | **Shared
    Translations**. Set the value of the label for each language by entering data
    into the table:![Figure 8.3: The Shared Translations panel'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在第一次使用标签后，将在您的后端创建一个条目，并且您可以为每种语言设置一个值。转到**工具** | **共享翻译**。通过在表中输入数据为每种语言设置标签的值：![Figure
    8.3: 共享翻译面板'
- en: '](img/Figure_8.03_B17073.jpg)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_8.03_B17073.jpg]'
- en: 'Figure 8.3: The Shared Translations panel'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Figure 8.3: 共享翻译面板'
- en: Open the web page and see the translated text.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开网页并查看翻译后的文本。
- en: The translation functionality is very useful and easy to manage with its visual
    interface.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译功能非常有用且易于管理，因为它具有直观的界面。
- en: Website config
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网站配置
- en: 'Pimcore has a bucket of configuration keys that are easily editable via the
    web interface. You can add them from **Settings** | **Website Settings** and then
    you can insert the value into the template or controller. To do this, do the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore有一组易于通过网页界面编辑的配置关键字。您可以从**设置** | **网站设置**中添加它们，然后可以将值插入模板或控制器中。为此，请执行以下操作：
- en: Create a document and assign a template.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文档并分配一个模板。
- en: Open the website settings administration from **Settings** | **Website Settings**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**设置** | **网站设置**打开网站设置管理。
- en: Enter a key for your settings in the top editing bar and choose the **Text**
    option.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部编辑栏中输入设置的关键字并选择**文本**选项。
- en: 'Click the **+** button and the value will be displayed in the table. You will
    be able to edit it just by entering text into the grid. In the next screenshot,
    you will see the final result. In this example, we added a key called **mykey**
    with the value **My Value**:![Figure 8.4: The Website Settings panel'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击**+**按钮，值将在表中显示。您只需在网格中输入文本即可编辑它。在下一张屏幕截图中，您将看到最终结果。在这个例子中，我们添加了一个名为**mykey**的键，其值为**My
    Value**：![Figure 8.4: 网站设置面板'
- en: '](img/Figure_8.04_B17073.jpg)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_8.04_B17073.jpg]'
- en: 'Figure 8.4: The Website Settings panel'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Figure 8.4: 网站设置面板'
- en: 'Now add the following snippet to the template:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将以下片段添加到模板中：
- en: '[PRE29]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Using the preceding code, you will get `MyValue` as the result of the helper.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用前面的代码，您将得到助手的结果`MyValue`。
- en: The visual editing of settings is very useful because it lets us create configurable
    templates and websites that can be easily managed centrally.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化编辑设置非常有用，因为它允许我们创建可配置的模板和网站，这些模板和网站可以轻松集中管理。
- en: instanceof
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: instanceof
- en: 'The `instanceof` construct is useful for checking whether an object is of a
    given type. In the next piece of code, we will check whether an asset instance
    is of type `Image` or not:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`instanceof`构造非常有用，可以检查一个对象是否为特定类型。在下一段代码中，我们将检查资产实例是否为`Image`类型：'
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This feature is important because you can alter the code flow so it either completes
    or doesn't complete a task based on the object type. In the previous example,
    we get an object that could be a video or an image, and we can display it properly
    based on the type.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能很重要，因为它可以改变代码流程，使其根据对象类型完成或未完成任务。在之前的例子中，我们获取了一个可能是视频或图像的对象，并且我们可以根据类型正确地显示它。
- en: Thumbnails
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩略图
- en: 'When you are working with images, printing them at the right size is fundamental.
    The Pimcore thumbnail feature helps a lot with templating. What we can do is to
    define the asset thumbnails from the administration; you should have already discovered
    this topic in [*Chapter 5*](B17073_05_ePub_RK.xhtml#_idTextAnchor093)*, Exploring
    Objects and Classes*. Let''s see this feature in action in a few simple steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当您处理图像时，以正确的大小打印它们是基本的。Pimcore的缩略图功能在模板制作中非常有帮助。我们可以从管理界面定义资产缩略图；您应该已经在[*第5章*](B17073_05_ePub_RK.xhtml#_idTextAnchor093)*，探索对象和类*中发现了这个主题。让我们通过几个简单的步骤来查看这个功能：
- en: Create a web page and assign a template to it.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个网页并将其分配一个模板。
- en: Go to **Settings | Thumbnails | Image Thumbnails**.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**设置 | 缩略图 | 图像缩略图**。
- en: 'Add a thumbnail configuration with the settings shown in the following screenshot:![Figure
    8.5: The thumbnail settings'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个具有以下截图所示设置的缩略图配置：![图8.5：缩略图设置
- en: '](img/Figure_8.05_B17073.jpg)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.05_B17073.jpg](img/Figure_8.05_B17073.jpg)'
- en: 'Figure 8.5: The thumbnail settings'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.5：缩略图设置
- en: We used the **PNG** format, and we set **Scale by Height** to **200**. Now the
    images that we will upload will have a proper thumbnail.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用了**PNG**格式，并将**按高度缩放**设置为**200**。现在我们将上传的图像将会有一个合适的缩略图。
- en: 'Upload an image into the **DAM** section. Right-click in the **Assets** section
    of the menu and choose the **Upload Files** option:![Figure 8.6: Uploading an
    image'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**DAM**部分上传一个图像。在菜单的**资产**部分右键单击并选择**上传文件**选项：![图8.6：上传图像
- en: '](img/Figure_8.06_B17073.jpg)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.06_B17073.jpg](img/Figure_8.06_B17073.jpg)'
- en: 'Figure 8.6: Uploading an image'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.6：上传图像
- en: 'The demo example already ships a Pimcore logo image with ID 2\. To get a thumbnail,
    you just have to get the asset by path or ID, then render it. The next snippet
    does that. Copy the snippet to the template:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 演示示例已经包含了一个ID为2的Pimcore标志图像。要获取缩略图，您只需通过路径或ID获取资产，然后渲染它。下面的代码片段就是这样做。将代码片段复制到模板中：
- en: '[PRE31]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The scripts get the thumbnail (the files generated at the first usage) for the
    image and print the image tag to the document.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 脚本获取图像的缩略图（第一次使用时生成的文件）并将图像标签打印到文档中。
- en: 'The next example gets an on-the-fly thumbnail without having a configuration
    defined. Copy this code to the template and see the result:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个示例获取了一个没有配置定义的即时缩略图。将此代码复制到模板中并查看结果：
- en: '[PRE32]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This example is quite similar to the previous one but uses settings that are
    not predefined by a thumbnail configuration.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个例子与上一个例子非常相似，但使用了不是由缩略图配置预定义的设置。
- en: 'That whole list of functions covers the set of features that Pimcore offers
    to us out of the box. In addition, you will have all the default Symfony functions,
    which you can discover using the official documentation: https://symfony.com/doc/current/reference/twig_reference.html.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 整个函数列表涵盖了Pimcore为我们提供的开箱即用的功能集。此外，您还将拥有所有默认的Symfony函数，您可以通过官方文档来发现它们：https://symfony.com/doc/current/reference/twig_reference.html。
- en: But what should you do if neither Pimcore nor Symfony implements what you need?
    The easier solution, if we are talking about business logic, is to manipulate
    data inside the controller, and produce a clean output for the view. In some cases,
    we may need to implement some complex presentation logic that is hard to manage
    with Twig syntax. Moreover, we do not want to move this logic to the controller
    (where it will be easy to implement) because it will create coupling between the
    template and controller, and this is not what we want (do you remember when we
    talked about the benefits of a detached solution in [*Chapter 1*](B17073_01_ePub_RK.xhtml#_idTextAnchor014)*,
    Introducing Pimcore*?). The solution to the problem of implementing complex presentation
    logic inside templates is provided in the next section where we will see how to
    add methods to the template engine and implement reusable helpers for our project.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你既没有使用Pimcore也没有使用Symfony实现你所需要的功能，你应该怎么办？如果我们谈论的是业务逻辑，那么一个更简单的解决方案是在控制器内部操作数据，并为视图生成干净的输出。在某些情况下，我们可能需要实现一些复杂的展示逻辑，这些逻辑很难用Twig语法来管理。此外，我们不想将这种逻辑移动到控制器中（那里很容易实现），因为这将在模板和控制器之间创建耦合，而这不是我们想要的（你还记得我们在[*第一章*](B17073_01_ePub_RK.xhtml#_idTextAnchor014)*，介绍Pimcore*）时讨论的分离解决方案的好处吗？在下一节中，我们将提供在模板中实现复杂展示逻辑的解决方案，我们将看到如何向模板引擎添加方法并为我们的项目实现可重用的助手。
- en: Implementing your own template helper
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现你自己的模板助手
- en: 'In the previous section, we learned how to use template helpers to generate
    dynamic content. Now it is time to learn how to extend the template helper system
    and add your own function inside the set. In the next example, we will create
    a template helper that will display the current date and time in a given format.
    You may object that the Twig templating already offers a feature more or less
    like this, but remember that this is an example to explain the template helper
    extension, so it is better to keep our case study as simple as possible. Now,
    follow the next steps:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何使用模板助手来生成动态内容。现在，是时候学习如何扩展模板助手系统并在集合中添加自己的函数了。在下一个示例中，我们将创建一个模板助手，它将以指定的格式显示当前日期和时间。你可能会有异议，因为Twig模板已经提供了类似的功能，但请记住，这是一个解释模板助手扩展的示例，所以最好将我们的案例研究保持尽可能简单。现在，按照以下步骤操作：
- en: Create a file in `/src/Templating/Helper/Timestamp.php`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/src/Templating/Helper/Timestamp.php` 中创建一个文件。
- en: 'Then copy the following snippet inside the `Timestamp.php` file:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在 `Timestamp.php` 文件中复制以下代码段：
- en: '[PRE33]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`getFunctions` is a special function that lists all the helper extensions exposed
    from this extension. In our case, we have one function, called `timestamp`. This
    function computes a textual date representation based on the format that''s received
    from the user. This function is mapped to a command called `timestamp` and can
    be used inside the template engine. For simplicity, I used for the helper name
    the function that computes the result, but you can choose your own.'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`getFunctions` 是一个特殊函数，它列出了从这个扩展公开的所有助手扩展。在我们的例子中，我们有一个名为 `timestamp` 的函数。这个函数根据用户接收到的格式计算文本日期表示。这个函数映射到名为
    `timestamp` 的命令，并可以在模板引擎中使用。为了简单起见，我使用了计算结果的函数作为助手名称，但你也可以选择自己的名称。'
- en: 'Register the snippet using the YAML configuration. Open the `/` `config/services.yml`
    file and add the following:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用YAML配置注册代码片段。打开 `/` `config/services.yml` 文件并添加以下内容：
- en: '[PRE34]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now the timestamp helper is registered inside the templating engine, so we
    can call it inside our Twig files. Copy the following piece of code:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在时间戳助手已注册在模板引擎中，因此我们可以在我们的Twig文件中调用它。复制以下代码段：
- en: '[PRE35]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You will get something similar to `2020-11-03`.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到类似 `2020-11-03` 的结果。
- en: In this section, we learned how to add functionality to the template engine.
    This is good for reusing code and overcomes the Twig syntax limitations. In the
    next section, we will learn how to master routing rules to connect URLs with controllers.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何向模板引擎添加功能。这对于代码重用和克服Twig语法限制是有益的。在下一节中，我们将学习如何掌握路由规则，将URL与控制器连接起来。
- en: Mastering Routing and URLs
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 掌握路由和URL
- en: 'The last step of mastering custom pages is routing. We learned in [*Chapter
    4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083), *Creating Documents in Pimcore*,
    that each document has a path that can be changed by the document editing interface.
    What if we are not working with documents, but with custom pages? In this section,
    we will learn about the options that Pimcore offers, which are the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握自定义页面的最后一步是路由。我们在[*第4章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)，*在Pimcore中创建文档*中了解到，每个文档都有一个路径，可以通过文档编辑界面进行更改。如果我们不是在处理文档，而是在处理自定义页面呢？在本节中，我们将了解Pimcore提供的选项，如下所示：
- en: '**Hardcoded Routes**, as per Symfony standard.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定路由**，按照Symfony标准。'
- en: '**Static Routes**, configurable routes that can be changed by the admin interface.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态路由**，可由管理界面更改的可配置路由。'
- en: '**Redirects**, which can set HTTP redirection using a nice admin interface.
    For those who are not familiar with redirection, imagine it as a way to redirect
    the browser from one URL to another. This is very common when a page changes its
    URL or we have to move a website from one domain to another.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重定向**，可以使用友好的管理界面设置HTTP重定向。对于那些不熟悉重定向的人来说，想象一下它是一种将浏览器从一个URL重定向到另一个URL的方式。这在页面更改URL或我们需要将网站从一个域名迁移到另一个域名时非常常见。'
- en: Let's look at them in detail.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看它们。
- en: Hardcoded routes
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定路由
- en: 'To add a route, there isn''t anything more complex than adding it to the configuration.
    These settings are contained inside the `routing.yml` file, and these rules follow
    the Symfony standard that you can find here: https://symfony.com/doc/current/routing.html.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加路由，没有比将其添加到配置更复杂的了。这些设置包含在`routing.yml`文件中，这些规则遵循你可以在这里找到的Symfony标准：https://symfony.com/doc/current/routing.html。
- en: 'In the next code fragment, we can see an example of a rule:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的代码片段中，我们可以看到一个规则的示例：
- en: '[PRE36]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The most relevant settings for our purpose are the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的来说，最相关的设置如下：
- en: '`name`: The rule has a name that must be unique; in our example, it is `custom_rule`.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：规则有一个必须唯一的名称；在我们的例子中，它是`custom_rule`。'
- en: '`path`: This is the path that the rule is listening on; this can contain regular
    expressions and fetch parameters (in our case, `parameter`).'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`：这是规则正在监听的路径；它可以包含正则表达式和获取参数（在我们的例子中，`parameter`）。'
- en: '`controller`: This is the controller, including the action name; it supports
    the Symfony syntax. In the case that you write `App\Controller\CustomController:myaction`,
    you will activate `myaction` inside the `CustomController` controller of the application`.`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`controller`：这是控制器，包括动作名称；它支持Symfony语法。如果你写下`App\Controller\CustomController:myaction`，你将在应用程序的`CustomController`控制器中激活`myaction`。'
- en: For each parameter, you can give a default value in the case the parameter was
    optional.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个参数，如果参数是可选的，你可以为其提供一个默认值。
- en: Note that even if we used names with an understandable naming convention, you
    could define any rule as you want. The parameter inside the URL (or query path)
    is parsed and delivered to the action.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，即使我们使用了可理解的命名约定，你也可以定义任何规则。URL内部（或查询路径）的参数将被解析并传递给动作。
- en: 'If you prefer, the second option is to use routing as an annotation of the
    controller''s actions. The equivalent of the previous rule is the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，第二个选项是将路由作为控制器动作的注解。前一个规则的等效如下：
- en: '[PRE37]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The routing rule is bidirectional, so it can both produce a URL from the parameter
    values and give the parameters values from a URL. For example, consider that you
    have the `/product/{id}` rule for the product URL. If the user enters `/product/5`
    in the browser, the routing engine is able to tell you that the ID parameter is
    5\. On the other hand, you can ask the engine to generate a URL for the product
    with ID 5 and you will get back `/product/5`. In simple words, you can build the
    URL automatically from the rule name and parameter. This is easy to do with the
    path helper:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 路由规则是双向的，因此它可以从参数值生成URL，也可以从URL中获取参数值。例如，假设你有一个用于产品URL的`/product/{id}`规则。如果用户在浏览器中输入`/product/5`，路由引擎能够告诉你ID参数是5。另一方面，你可以要求引擎为ID为5的产品生成URL，你将得到`/product/5`。简单来说，你可以从规则名称和参数自动构建URL。这可以通过路径助手轻松完成：
- en: '[PRE38]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This will generate the full URL, `/custom/actionname/67`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成完整的URL，`/custom/actionname/67`。
- en: Configurable routes
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可配置路由
- en: The hardcoded rules used in the previous section are a good solution but are
    static, and you need access to the source code to understand or change them. The
    other solution offered by Pimcore is to define them visually, using the admin
    UI. Under **Settings** | **Static Routes**, you can find a table where you can
    enter all values of a routing rule (including the name, pattern, parameter names,
    and building rules). This makes rule management very easy and you can monitor
    how many rules you have and their configuration without accessing the source code.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中使用的前置规则是一个很好的解决方案，但它是静态的，您需要访问源代码来理解或更改它们。Pimcore提供的另一种解决方案是使用管理UI可视地定义它们。在**设置**
    | **静态路由**下，您可以找到一个表格，您可以输入路由规则的所有值（包括名称、模式、参数名称和构建规则）。这使得规则管理变得非常容易，您可以在不访问源代码的情况下监控您有多少规则以及它们的配置。
- en: 'You can follow these steps to see this method in action:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤查看此方法的效果：
- en: Create a controller caller, `CustomController`.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器调用者，`CustomController`。
- en: 'Add an action called `data` into the controller, similar to this:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中添加一个名为`data`的操作，类似于以下内容：
- en: '[PRE39]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This code will take the `data` parameter from the URL and will pass it to the
    view using the `content` variable.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此代码将从URL中获取`data`参数，并通过`content`变量将其传递给视图。
- en: 'Create a view in the controller folder called `data.html.` `Twig` and add the
    following code inside:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器文件夹中创建一个名为`data.html`的视图。添加以下代码：
- en: '[PRE40]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This script will print the `content` variable.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此脚本将打印`content`变量。
- en: Open the `custom`.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`custom`。
- en: '`/\/custom_data\/(.*)\//`. Note that `\/` is for escaping the `/` char in the
    regular expression, so a URL such as `/custom_data/anything/` will be matched.
    The parameter matched by the selector `(.*)` is the `anything` part.'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/\/custom_data\/(.*)\//`。请注意，`\/`用于在正则表达式中转义`/`字符，因此像`/custom_data/anything/`这样的URL将被匹配。由选择器`(.*)`匹配的参数是`anything`部分。'
- en: '`CustomController`.'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CustomController`。'
- en: '`data`.'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data`。'
- en: '`/custom_data/%data/`. With this value, the routing engine will be able to
    generate the URL, `/custom_data/value/`, if you use use the editable, `{{% pimcore_path(''custom'',
    {''data'': ''value''}); }}`.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/custom_data/%data/`。使用此值，路由引擎将能够生成URL，`/custom_data/value/`，如果您使用可编辑的`{{%
    pimcore_path(''custom'', {''data'': ''value''}); }}`。'
- en: '`data`. This will mean that the value of `(.*)` will be named `data`.'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data`。这意味着`(.*)`的值将被命名为`data`。'
- en: '`empty`. In this case, if the parameter will be omitted, the parameter data
    will have the text `empty` as its value.'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`empty`。在这种情况下，如果省略了参数，参数数据将具有文本`empty`作为其值。'
- en: Open your browser and navigate to [http://localhost/custom_data/myvalue](http://localhost/custom_data/myvalue).
    You will see the `myvalue` parameter printed on the page.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器并导航到[http://localhost/custom_data/myvalue](http://localhost/custom_data/myvalue)。您将在页面上看到打印的`myvalue`参数。
- en: Similar to the previous example, we can generate a URL using a rule name and
    parameters with the template helper.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例类似，我们可以使用规则名称和参数通过模板助手生成URL。
- en: 'The settings that you edited through the admin UI are saved in a PHP configuration
    file (`var/config/staticroutes.php`), so it''s also possible to edit the code
    directly or save them by committing it to a Git repository. The next piece of
    code shows what we obtained by adding the previous rules:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过管理UI编辑的设置保存在一个PHP配置文件中（`var/config/staticroutes.php`），因此也可以直接编辑代码或将它们提交到Git存储库。下一部分代码显示了通过添加前面的规则所获得的内容：
- en: '[PRE41]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Configurable routes are very useful when you want to keep URL routing flexible,
    letting the user choose the paths at runtime. This is essential for matching specification
    changes from the customer about URLs (maybe due to the SEO requirement changes)
    without touching a single line of code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望保持URL路由灵活，允许用户在运行时选择路径时，可配置的路由非常有用。这对于匹配客户关于URL的规格变更（可能是由于SEO需求的变化）至关重要，而无需修改任何一行代码。
- en: Redirects
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重定向
- en: Redirects are a useful feature of Pimcore for directing the user to the correct
    pages – whether it be for marketing URLs, for redirects after a website's relaunch,
    or redirects for moved documents.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 重定向是Pimcore的一个有用功能，可以将用户引导到正确的页面——无论是用于营销URL，还是用于网站重新发布后的重定向，或者是移动文档的重定向。
- en: 'The process for creating a redirect is very simple. Just follow these steps:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 创建重定向的过程非常简单。只需遵循以下步骤：
- en: 'Navigate to **System | Redirects**. This menu opens a table similar to this
    one:![Figure 8.8: The Redirects table'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**系统 | 重定向**。此菜单将打开一个类似于这个的表格：![图8.8：重定向表格
- en: '](img/Figure_8.08_B17073.jpg)'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.08_B17073.jpg)'
- en: 'Figure 8.8: The Redirects table'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.8：重定向表格
- en: 'Click the **Add** button. You will be prompted with the following popup:![Figure
    8.9: Adding a redirect'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。您将看到一个以下弹出窗口：![Figure 8.9：添加重定向
- en: '](img/Figure_8.09_B17073.jpg)'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_8.09_B17073.jpg](img/Figure_8.09_B17073.jpg)'
- en: 'Figure 8.9: Adding a redirect'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.9：添加重定向
- en: The **Type** dropdown lets you choose the type of redirection, while **Source**
    and **Target** allow you to choose the mapping rule that redirects the source
    to the target URL.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**类型**下拉菜单允许您选择重定向的类型，而**源**和**目标**允许您选择将源重定向到目标 URL 的映射规则。'
- en: Enter `/\/redirect\/(.*)/` in the `/custom_data/$1` in the **Target** box, like
    in *Figure 8.9*.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标**框中输入 `/\/redirect\/(.*)/` 到 `/custom_data/$1`，就像在 *图 8.9* 中所示。
- en: Open a browser and navigate to [http://localhost/redirect/xxx/](http://localhost/redirect/xxx/).
    You will be redirected to http://localhost/custom_data/xxx/ instead.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并导航到 [http://localhost/redirect/xxx/](http://localhost/redirect/xxx/)。您将被重定向到
    http://localhost/custom_data/xxx/。
- en: 'In this section, we learned how to create custom web pages using the MVC model.
    In particular, we covered all the most important topics:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用 MVC 模型创建自定义网页。特别是，我们涵盖了所有最重要的主题：
- en: '**Controllers**: We understood how controllers interact with request parameters
    and pass data to the view. Inside a controller, we can implement our business
    logic without any limitations.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：我们了解了控制器如何与请求参数交互并将数据传递给视图。在控制器内部，我们可以实现我们的业务逻辑而没有任何限制。'
- en: '**Views**: We learned how the template engine works and how we can use the
    helpers to implement presentation logic.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：我们学习了模板引擎的工作原理以及我们如何使用助手来实现表示逻辑。'
- en: '**Routing and URLs**: We learned how to manage the page''s URL properly. We
    didn''t limit ourselves to Symfony''s standard routing but also covered static
    routes and redirect options. With all these options, we can choose the right solution
    based on our use case. The most important thing to know is that this wide set
    of options give us the power to solve any URL problems that we may face.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由和 URL**：我们学习了如何正确管理页面的 URL。我们没有将自己限制在 Symfony 的标准路由上，还涵盖了静态路由和重定向选项。有了所有这些选项，我们可以根据我们的用例选择正确的解决方案。最重要的是要知道，这个广泛的选项集赋予我们解决我们可能遇到的任何
    URL 问题的能力。'
- en: In the next section, we will have a deep dive into Pimcore editables and we
    will learn how to combine them to get results without writing tons of lines of
    code.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨 Pimcore 可编辑，并学习如何将它们组合起来以获得结果，而无需编写大量的代码。
- en: Using editables
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可编辑
- en: As we introduced in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083),
    *Creating Documents in Pimcore*, Pimcore's editables are a set of visual components
    that can be used to enter information in the CMS page and are able to render the
    output to get the web page ready. You should remember the `pimcore_input` and
    `pimcore_wysiwyg` components; well, the good news is that Pimcore has a lot of
    components like that and covers most of your user needs. In this section, we will
    take a look at these.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [*第 4 章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083) *在 Pimcore 中创建文档*
    中所介绍的，Pimcore 的可编辑是一组可视化组件，可用于在 CMS 页面上输入信息，并且能够渲染输出以准备网页。您应该记住 `pimcore_input`
    和 `pimcore_wysiwyg` 组件；好消息是 Pimcore 有很多这样的组件，并覆盖了您的大部分用户需求。在本节中，我们将查看这些组件。
- en: Important note
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In the **Editables** list, we should have **Area** and **Areablock** components,
    but we won't discuss these in this chapter. These elements, in conjunction with
    **Bricks**, are the pillars of code reuse in Pimcore and will be covered in [*Chapter
    10*](B17073_10_ePub_RK.xhtml#_idTextAnchor188), *Creating Pimcore Bricks*. The
    motivation is that without discovering what bricks are, the Area, Areablock, and
    Block components would be hard to understand.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在**可编辑**列表中，我们应该有**区域**和**区域块**组件，但在此章节中我们不会讨论这些。这些元素与**砖块**结合，是 Pimcore 中代码重用的支柱，将在
    [*第 10 章*](B17073_10_ePub_RK.xhtml#_idTextAnchor188) *创建 Pimcore 砖块* 中介绍。动机是，如果不了解砖块是什么，区域、区域块和块组件将难以理解。
- en: In the next sections, we will discover a list of the editables available. For
    each one, we will add a snippet of code to show you how to add it to your code
    and, for the more complex items, we also have some screenshots to explain the
    interaction.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将发现可用的可编辑列表。对于每一个，我们将添加一段代码片段来向您展示如何将其添加到您的代码中，对于更复杂的项，我们还有一些截图来解释交互。
- en: 'The process for testing an editable in your live Pimcore environment is the
    following:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的实时 Pimcore 环境中测试可编辑的过程如下：
- en: Add a document into your CMS and link the document to a template. This process
    is well described in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*,
    Creating Documents in Pimcore*.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文档添加到你的 CMS 中，并将其链接到模板。这个过程在[*第 4 章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*，在
    Pimcore 中创建文档*中有详细描述。
- en: Copy the snippets that you find in the following subsections.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制以下子节中的代码片段。
- en: Enter the page editor and see how the component looks.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入页面编辑器，看看组件的外观。
- en: Open page preview and see the data that is saved inside the editable. Remember
    that by using `{{ pimcore_xxx('name') }}`, you will print the data, but you can
    also set it to a variable using `{% set var = pimcore_xxx('name') %}` and then
    implement your own presentation logic.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开页面预览，查看保存在可编辑区域内的数据。记住，通过使用 `{{ pimcore_xxx('name') }}`，你可以打印数据，但你也可以将其设置为变量，使用
    `{% set var = pimcore_xxx('name') %}`，然后实现自己的展示逻辑。
- en: All these examples are contained in the `editable.htm.twig` template, used in
    **The Editable Pages** that you will find in the demo related to this chapter.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些示例都包含在 `editable.htm.twig` 模板中，该模板用于**可编辑页面**，你可以在与本章相关的演示中找到。
- en: Checkbox
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复选框
- en: 'The following editable adds a checkbox that can be checked by the page editor:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下可编辑内容添加了一个可以被页面编辑器勾选的复选框：
- en: '[PRE42]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The value can be used to implement some rendering logic (that is, showing or
    not showing something basing on the `myCheckbox` value).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 该值可用于实现一些渲染逻辑（即根据 `myCheckbox` 值显示或隐藏某些内容）。
- en: Date
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期
- en: 'This snippet adds a `DateTime` picker to the web page:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段向网页添加了一个 `DateTime` 选择器：
- en: '[PRE43]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'When editing the page, you will see an editable `DateTime` picker like the
    one shown here:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当编辑页面时，你将看到如这里所示的可编辑 `DateTime` 选择器：
- en: '![Figure 8.10: The date picker in action'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.10：日期选择器操作界面'
- en: '](img/Figure_8.10_B17073.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.10_B17073.jpg)'
- en: 'Figure 8.10: The date picker in action'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10：日期选择器操作界面
- en: During the page rendering, when you are not in edit mode, the function outputs
    the value that the user selected in the editor. This value can be displayed or
    be used for implementing presentation logic.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面渲染过程中，当你不在编辑模式时，该函数输出用户在编辑器中选择的值。此值可以显示或用于实现展示逻辑。
- en: Relation (Many-To-One)
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系（多对一）
- en: 'This editable provides the opportunity to add a `relation` to an object. You
    can select which types of elements you want to add (for example, `asset` or `object`)
    and which subtypes. In the following example, we allowed only classes of type
    `MyObject`:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此可编辑内容提供了将 `relation` 添加到对象的机会。你可以选择你想添加哪些类型的元素（例如，`asset` 或 `object`）以及哪些子类型。在以下示例中，我们只允许
    `MyObject` 类型的类：
- en: '[PRE44]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This component, once added to the page, is displayed as a simple edit box where
    you can drag the items that you want to show, as in the following screenshot:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件一旦添加到页面，就会显示为一个简单的编辑框，你可以拖动你想要显示的项目，如下面的截图所示：
- en: '![Figure 8.11: Relation configuration'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.11：关系配置'
- en: '](img/Figure_8.11_B17073.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.11_B17073.jpg)'
- en: 'Figure 8.11: Relation configuration'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11：关系配置
- en: Then the relation named `myRelation` will contain your selection value, and
    you can use it in the template for rendering data.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，名为 `myRelation` 的关系将包含你的选择值，你可以在模板中使用它来渲染数据。
- en: 'In the following example, we will add a **Link** button that navigates to the
    selected item:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将添加一个**链接**按钮，用于导航到所选项目：
- en: '[PRE45]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The previous snippet will display a link in the text.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码片段将在文本中显示一个链接。
- en: Relations (many-to-many relation)
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系（多对多关系）
- en: 'This editable is like the many-to-one relation but allows you to select references
    to multiple other elements (such as documents, assets, and objects). The following
    snippet is the same as the previous use case, but because this editable has multiple
    references, we used a `for` loop to list all the selected options:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可编辑内容类似于多对一关系，但允许你选择对多个其他元素的引用（例如文档、资产和对象）。以下代码片段与上一个用例相同，但由于这个可编辑内容有多个引用，我们使用了
    `for` 循环来列出所有选定的选项：
- en: '[PRE46]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now we can drag and drop multiple items:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以拖放多个项目：
- en: '![Figure 8.12: Relation configuration'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.12：关系配置'
- en: '](img/Figure_8.12_B17073.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.12_B17073.jpg)'
- en: 'Figure 8.12: Relation configuration'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12：关系配置
- en: 'The result of the selection is shown in the following table:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 选择的结果如下表所示：
- en: '![Figure 8.13: Relations in edit mode'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.13：编辑模式下的关系'
- en: '](img/Figure_8.13_B17073.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.13_B17073.jpg)'
- en: 'Figure 8.13: Relations in edit mode'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13：编辑模式下的关系
- en: 'With the data in our sandbox, we will have something like this:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的沙盒数据中，我们将得到如下内容：
- en: '![Figure 8.14: The output of relations'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.14：关系的输出'
- en: '](img/Figure_8.14_B17073.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.14_B17073.jpg)'
- en: 'Figure 8.14: The output of relations'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14：关系的输出
- en: Image
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图片
- en: This editable gives you a widget where you can upload an image. If you drag
    a file from the asset folder and drop it on the component, the image will be displayed.
    The advantages compared with the `Relation` component are that the image is easier
    to use and integrated with the thumbnail system.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 此可编辑器为您提供了一个可以上传图片的小部件。如果您从资产文件夹中拖动一个文件并将其放在组件上，图片将被显示。与`关系`组件相比的优势在于图片更容易使用且与缩略图系统集成。
- en: 'The next piece of code allows you to upload an image:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行代码允许您上传图片：
- en: '[PRE47]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You can upload images or drag and drop them to the widget as shown in the following
    screenshot:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以上传图片或将它们拖放到小部件中，如下面的屏幕截图所示：
- en: '![Figure 8.15: Image configuration'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.15：图片配置'
- en: '](img/Figure_8.15_B17073.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.15_B17073.jpg)'
- en: 'Figure 8.15: Image configuration'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15：图片配置
- en: Input
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入
- en: '`Input` allows the user to input a single line of text, and we can use the
    input for rendering HTML:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`输入`允许用户输入一行文本，我们可以使用输入来渲染HTML：'
- en: '[PRE48]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We used it in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*, Creating
    Documents in Pimcore*; there isn't anything more to add about this editable.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第4章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*，在Pimcore中创建文档中使用过它；关于此可编辑器没有更多要添加的内容。
- en: Link
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接
- en: 'This is a component for rendering a link:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于渲染链接的组件：
- en: '[PRE49]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following screenshot shows the link in edit mode:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了编辑模式中的链接：
- en: '![Figure 8.16 – The link component in edit mode'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.16 – 编辑模式中的链接组件'
- en: '](img/Figure_8.16_B17073.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.16_B17073.jpg)'
- en: Figure 8.16 – The link component in edit mode
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – 编辑模式中的链接组件
- en: 'The component comes out with two buttons: the folder that opens the selected
    link, and the edit button (pencil icon) that opens the settings form. The next
    screenshot shows the popup and the parameters available for a link:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 组件包含两个按钮：打开所选链接的文件夹和打开设置表单的编辑按钮（铅笔图标）。下一个屏幕截图显示了弹出窗口和链接可用的参数：
- en: '![Figure 8.17: Link configuration'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.17：链接配置'
- en: '](img/Figure_8.17_B17073.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.17_B17073.jpg)'
- en: 'Figure 8.17: Link configuration'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17：链接配置
- en: Once completed, the result is an HTML link with the text and the destination
    provided.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，结果是一个包含文本和目的地的HTML链接。
- en: Select
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择
- en: 'This snippet adds a `select` component that lets the user choose between a
    set of items. The following snippet shows how it works:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段添加了一个`选择`组件，允许用户从一组项目中选择。以下代码片段显示了它是如何工作的：
- en: '[PRE50]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The `store` parameter contains a list of arrays. Each item is composed of an
    array of two elements: the first is the key, the second is the value. The `defaultValue`
    setting configures the default value for the selected list item.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`store`参数包含一个数组列表。每个项目由两个元素的数组组成：第一个是键，第二个是值。`defaultValue`设置配置了所选列表项的默认值。'
- en: 'This is what is shown in edit mode:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在编辑模式中显示的内容：
- en: '![Figure 8.18: Select configuration'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.18：选择配置'
- en: '](img/Figure_8.18_B17073.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.18_B17073.jpg)'
- en: 'Figure 8.18: Select configuration'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18：选择配置
- en: Multiselect
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多选
- en: 'The `Multiselect` component is very similar to the `Select` one, but it allows
    multiple choices:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`多选`组件与`选择`组件非常相似，但它允许多项选择：'
- en: '[PRE51]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This is what is shown in edit mode:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在编辑模式中显示的内容：
- en: '![Figure 8.19: Multiselect configuration'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.19：多选配置'
- en: '](img/Figure_8.19_B17073.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.19_B17073.jpg)'
- en: 'Figure 8.19: Multiselect configuration'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19：多选配置
- en: Numeric
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字
- en: 'This editable is like the `Input` one, but specifically for numbers:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 此可编辑器类似于`输入`，但专门用于数字：
- en: '[PRE52]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This is what is shown in edit mode:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在编辑模式中显示的内容：
- en: '![Figure 8.20: Numeric editor'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.20：数字编辑器'
- en: '](img/Figure_8.20_B17073.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.20_B17073.jpg)'
- en: 'Figure 8.20: Numeric editor'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20：数字编辑器
- en: And in edit mode, it returns the number chosen.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑模式下，它返回所选的数字。
- en: Renderlet
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Renderlet
- en: 'The `Renderlet` is a special container that is able to render an object. It
    uses a controller and an action to process the selected items, and the resulting
    HTML is provided to the user:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`Renderlet`是一个特殊的容器，能够渲染一个对象。它使用控制器和操作来处理所选项目，并将生成的HTML提供给用户：'
- en: '[PRE53]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In this case, we need some extra steps to test it. Follow the next steps:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要额外的步骤来测试它。按照以下步骤操作：
- en: 'Add a template file inside the `/app/Resources/views/Default` folder called
    `gallery.php`, and add the following code to render your data:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/app/Resources/views/Default`文件夹内添加一个名为`gallery.php`的模板文件，并添加以下代码以渲染您的数据：
- en: '[PRE54]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add an action to the default controller with the following code:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码向默认控制器添加一个操作：
- en: '[PRE55]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Then add a `Renderlet` editable into the page with the following configuration:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在页面中添加一个具有以下配置的`Renderlet`可编辑：
- en: '[PRE56]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This configuration tells Pimcore to use the action `galleryAction` from the
    `Default` controller to render the data.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个配置告诉Pimcore使用`Default`控制器中的`galleryAction`操作来渲染数据。
- en: 'Drag and drop a folder into `Renderlet`; this is what is shown in edit mode:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个文件夹拖放到`Renderlet`中；这就是编辑模式中显示的内容：
- en: '![Figure 8.21:Dragging a folder to Renderlet'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.21：将文件夹拖放到Renderlet中'
- en: '](img/Figure_8.21_B17073.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.21_B17073.jpg)'
- en: Figure 8.21:Dragging a folder to Renderlet
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21：将文件夹拖放到Renderlet中
- en: 'View the page as a normal user and see the result of your template:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 以普通用户查看页面，并查看你的模板的结果：
- en: '![Figure 8.22: Output with the sample template'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.22：使用示例模板的输出'
- en: '](img/Figure_8.22_B17073.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.22_B17073.jpg)'
- en: 'Figure 8.22: Output with the sample template'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22：使用示例模板的输出
- en: Snippet
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 片段
- en: 'This component is used to include a document or snippet (a special document
    type) inside the document; this is useful for reusing scripts or pieces of the
    website on your page:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件用于在文档中包含一个文档或片段（一种特殊的文档类型）；这对于在页面上重用脚本或网站的部分非常有用：
- en: '[PRE57]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Once you have entered the code, this is how to add a snippet to the web page:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你输入了代码，这就是如何在网页中添加一个片段的方法：
- en: '![Figure 8.23:Configuration of the snippet control'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.23：片段控制的配置'
- en: '](img/Figure_8.23_B17073.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.23_B17073.jpg)'
- en: Figure 8.23:Configuration of the snippet control
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.23：片段控制的配置
- en: 'And this is what you will see as a website user:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网站用户，你会看到以下内容：
- en: '![Figure 8.24: The output of the snippet control'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.24：片段控制输出'
- en: '](img/Figure_8.24_B17073.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.24_B17073.jpg)'
- en: 'Figure 8.24: The output of the snippet control'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.24：片段控制输出
- en: In the previous screenshot, the text **I'm the default template** comes from
    the snippet.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个截图中，文本**我是默认模板**来自片段。
- en: Table
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表格
- en: 'This editable creates a table and lets the editor define the data inside of
    it. You can specify the default number of columns (`cols`) or rows (`rows`). You
    can also add a matrix of data (array of array) into the `data` parameter. The
    user will be able to add rows and columns by itself. Here is an example of the
    editable:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可编辑创建一个表格，并允许编辑器定义其中的数据。你可以指定默认的列数（`cols`）或行数（`rows`）。你还可以在`data`参数中添加数据矩阵（数组数组）。用户将能够自行添加行和列。以下是一个可编辑的示例：
- en: '[PRE58]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'This is the resulting editor interface:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是生成的编辑器界面：
- en: '![Figure 8.25: Configuration of the table control'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.25：表格控制的配置'
- en: '](img/Figure_8.25_B17073.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.25_B17073.jpg)'
- en: 'Figure 8.25: Configuration of the table control'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25：表格控制的配置
- en: 'And this is the default rendering result:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是默认的渲染结果：
- en: '![](img/Figure_8.26_B17073.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_8.26_B17073.jpg)'
- en: 'Figure 8.26: Table output'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26：表格输出
- en: The previous figure doesn't look nice because the component outputs a simple
    HTML table without any styles. Of course, based on your CSS theme, you can apply
    all the styles you want to make it coherent for your website design.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个图看起来不太美观，因为组件输出的是一个没有样式的简单HTML表格。当然，基于你的CSS主题，你可以应用所有你想要的样式，使其与你的网站设计保持一致。
- en: Textarea
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本区域
- en: 'This is very similar to the `Input` editable but uses a `Textarea` component
    instead:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`输入`可编辑非常相似，但使用的是`Textarea`组件：
- en: '[PRE59]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Video
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视频
- en: 'This editable allows you to insert movie assets into your page content. It
    is very similar to the image component but works with video. You will need to
    add the following snippet to activate it:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可编辑功能允许你将电影资产插入到你的页面内容中。它与图像组件非常相似，但用于视频。你需要添加以下代码片段来激活它：
- en: '[PRE60]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then you will be able to define the source (local assets or an external link)
    and fine-tune some options:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将能够定义源（本地资产或外部链接）并微调一些选项：
- en: '![Figure 8.27: Video control'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.27：视频控制'
- en: '](img/Figure_8.27_B17073.jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.27_B17073.jpg)'
- en: 'Figure 8.27: Video control'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27：视频控制
- en: 'On the web page, you will see it inside a video player as in the following
    screenshot:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页上，你将看到它在一个视频播放器中，如下截图所示：
- en: '![Figure 8.28: Video control output'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.28：视频控制输出'
- en: '](img/Figure_8.28_B17073.jpg)'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.28_B17073.jpg)'
- en: 'Figure 8.28: Video control output'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.28：视频控制输出
- en: The video editable is a very powerful solution for letting the user be autonomous
    in terms of uploading and managing videos without asking for help from a developer.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 视频可编辑是一个非常强大的解决方案，允许用户在不上传和管理视频时无需寻求开发者的帮助。
- en: WYSIWYG
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WYSIWYG
- en: 'This WYSIWYG editor is used for entering HTML content. In the next piece of
    code, there is a sample of editable usage:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 这个所见即所得编辑器用于输入HTML内容。在下一段代码中，有一个可编辑使用的示例：
- en: '[PRE61]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We used it in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*, Creating
    documents in Pimcore*; there isn't anything more to add.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第4章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*，在Pimcore中创建文档*中使用过它；没有更多要添加的内容。
- en: In this section, we saw an overview of the most important editables. Using them
    as base components for the web pages that we create gives us absolute power to
    customize any aspect of our HTML. Moreover, with this large set of options, cases
    when you need something more than adding input for the user and then templating
    the data that you collect are very few. Generally speaking, you do not have to
    code to satisfy the customer's needs but just template the pages.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了最重要的可编辑内容的概述。使用它们作为我们创建的网页的基础组件，使我们能够完全自定义HTML的任何方面。此外，有了这个庞大的选项集，您需要比为用户添加输入并模板化收集到的数据更多的场合非常少。一般来说，您不需要编写代码来满足客户的需求，只需模板化页面即可。
- en: 'For more information about editables, you can consult the official documentation
    at the following URL: [https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Editables/](https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Editables/).'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 关于可编辑的更多信息，您可以在以下URL的官方文档中进行咨询：[https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Editables/](https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Editables/)。
- en: In the next section, we will discover the usage of blocks, which are simple
    tools that help to create dynamic pages.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解块的使用方法，这些是简单的工具，有助于创建动态页面。
- en: Using blocks
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用块
- en: Pimcore blocks are a very clever system for iterating parts of a page. For example,
    if you have a standard page composed of horizontal bands or titled paragraphs,
    you can define a piece of HTML that explains how each item should look and let
    the user add as many items as they want. As another example, you can define a
    block composed of an H2 title and text, and this will create many titled paragraphs
    on your web page. Alternatively, you could use a block with an image and create
    a gallery iterating the blocks. Moreover, you can also manage the visibility of
    blocks by scheduling their publication.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore块是一个非常聪明的系统，用于迭代页面的一部分。例如，如果您有一个由水平带或标题段落组成的标准页面，您可以定义一段HTML代码，说明每个项目应该如何看起来，并允许用户添加他们想要的任意数量的项目。作为另一个例子，您可以定义一个由H2标题和文本组成的块，这将为您网页创建许多标题段落。或者，您可以使用带有图像的块来创建一个画廊，迭代这些块。此外，您还可以通过安排发布来管理块的可视性。
- en: Regular Blocks
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正规块
- en: '`pimcore_iterate_block` can return the list of blocks. All the code that is
    wrapped inside the `for` loop can be replicated as many times as the user wants.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`pimcore_iterate_block`可以返回块列表。在`for`循环内包装的所有代码都可以根据用户的意愿复制任意多次。'
- en: The difference between a block iteration and a regular `for` loop is that in
    the case of a block, the user defines how many items they want, and all the data
    input inside the editables is persisted.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 块迭代与常规`for`循环的区别在于，在块的情况下，用户定义他们想要多少项，并且所有在可编辑区域内的数据输入都将被持久化。
- en: 'The syntax for defining a block is very easy and we can see in the next snippet
    the usage of the previously mentioned functions:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 定义块的语法非常简单，我们可以在下一个片段中看到之前提到的函数的使用：
- en: '[PRE62]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the next example, we will see a block in action that iterates over a small
    template with a header and text that builds a web page with titled paragraphs:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将看到在动作中的块，它遍历一个带有标题和文本的小型模板，构建一个带有标题段落的网页：
- en: Create a page and link the page with a template, as we have done many times
    before. If you have any doubts, just refer to [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*,
    Creating Documents in Pimcore*.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个页面，并将页面与模板链接，就像我们之前多次做的那样。如果您有任何疑问，请参阅[*第4章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*，在Pimcore中创建文档*。
- en: 'Copy the following snippet into the template:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下片段复制到模板中：
- en: '[PRE63]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The template part is composed of a `title`, surrounded by a `H2` tag and a
    `paragraph`. In the next screenshot, you will see the result of our code in edit
    mode before adding the blocks:![Figure 8.29: Adding a block to the list'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板部分由一个`title`组成，被`H2`标签和`paragraph`包围。在下一张屏幕截图中，您将看到在添加块之前我们的代码在编辑模式下的结果：![图8.29：向列表添加块
- en: '](img/Figure_8.29_B17073.jpg)'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.29_B17073.jpg)'
- en: 'Figure 8.29: Adding a block to the list'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.29：向列表添加块
- en: Go to the page editor and click the green **+** icon to add one block to the
    block list. Now the block is visible in the editor and you will be able to enter
    data. You can add as many blocks as you want; you will be able to edit them one
    by one in the backend.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往页面编辑器，点击绿色**+**图标以将一个块添加到块列表中。现在块在编辑器中可见，您将能够输入数据。您可以添加任意多个块；您将能够在后端逐个编辑它们。
- en: 'Now enter data into the editables. In this example, I put **My first item**
    as the title and **value** inside the long text. The output will be something
    like the following screenshot:![Figure 8.30: Editing the element in the block
    list'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将数据输入到可编辑内容中。在这个例子中，我将**我的第一个条目**作为标题，**值**放在长文本中。输出将类似于以下屏幕截图：![图8.30：在块列表中编辑元素
- en: '](img/Figure_8.30_B17073.jpg)'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.30_B17073.jpg)'
- en: 'Figure 8.30: Editing the element in the block list'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.30：在块列表中编辑元素
- en: Iterate this for as many blocks as you like.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以迭代任意多个块。
- en: 'The final result will look like this on the web page:'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终结果在网页上看起来将如下所示：
- en: '![Figure 8.31: The result after adding more elements'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.31：添加更多元素后的结果'
- en: '](img/Figure_8.31_B17073.jpg)'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.31_B17073.jpg)'
- en: 'Figure 8.31: The result after adding more elements'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.31：添加更多元素后的结果
- en: Scheduled Blocks
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计划块
- en: 'The scheduled block component is very similar to the block, but it has the
    option to define an expiration date for the contents. The syntax is the same,
    as you can see in the next snippet:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 计划块组件与块非常相似，但它有定义内容过期日期的选项。语法与下一片段中所示相同：
- en: '[PRE64]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The process for testing this snippet is exactly the same as the standard block
    that we saw in the previous section.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 测试此代码片段的过程与上一节中我们看到的标准块完全相同。
- en: 'In the next screenshot, we will see the edit mode for the scheduled block,
    where we have a `DateTime` picker near the green **+** icon that allows the user
    to define when the content will expire:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一张屏幕截图中，我们将看到计划块的编辑模式，其中靠近绿色**+**图标有一个`DateTime`选择器，允许用户定义内容何时过期：
- en: '![Figure 8.32 – Editing a scheduled block'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.32 – 编辑计划块'
- en: '](img/Figure_8.32_B17073.jpg)'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.32_B17073.jpg)'
- en: Figure 8.32 – Editing a scheduled block
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.32 – 编辑计划块
- en: 'The block engine is a very powerful system that allows a lot of opportunities
    for making dynamic pages easily editable by the user. We will appreciate this
    feature more in [*Chapter 10*](B17073_10_ePub_RK.xhtml#_idTextAnchor188), *Creating
    Pimcore Bricks*, when we will use blocks in conjunction with bricks to create
    fully dynamic templates. Anyway, what we have learned so far is very interesting:
    we can give the user the opportunity to manage a repetitive template with a well-structured
    approach.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 块引擎是一个非常强大的系统，它允许用户轻松地将动态页面制作成易于编辑。当我们将在[*第10章*](B17073_10_ePub_RK.xhtml#_idTextAnchor188)“创建Pimcore砖块”中使用块与砖块结合来创建完全动态的模板时，我们将更加欣赏这个功能。无论如何，到目前为止我们所学的都是非常有趣的：我们可以通过一种结构化的方法给用户机会来管理重复的模板。
- en: Summary
  id: totrans-459
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned all the information needed for creating a custom
    CMS page. We gained an understanding of the MVC model, and we had a deep dive
    into the templating engine of Pimcore, discovering all the helpers and how to
    create our own. We also learned how to write backend code in the controller and
    make it work by defining routing rules. We saw that there are many ways to manage
    URLs in Pimcore (Hardcoded, Static Route, and Redirect) and they cover all the
    use cases for a website. Then we had a complete overview of editables, which left
    us able to master any custom web page just by templating it. Finally, we discovered
    the block system that allows the iteration of pieces of a template by giving the
    user the opportunity to manage repetitive patterns in web pages.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了创建自定义CMS页面所需的所有信息。我们了解了MVC模型，并深入研究了Pimcore的模板引擎，发现了所有助手以及如何创建自己的助手。我们还学习了如何在控制器中编写后端代码，并通过定义路由规则使其工作。我们了解到在Pimcore中有许多管理URL的方法（硬编码、静态路由和重定向），并且它们涵盖了网站的所有用例。然后我们对可编辑内容进行了全面概述，这使得我们能够仅通过模板化来掌握任何自定义网页。最后，我们发现了允许通过给用户机会管理网页中的重复模式来迭代模板片段的块系统。
- en: This was an intense chapter that provided us with full knowledge of custom CMS
    pages. What we learned here will be very useful in the next chapter, [*Chapter
    9*](B17073_09_ePub_RK.xhtml#_idTextAnchor166), Configuring Entities and *Rendering
    Data*, where we will use it to render web pages for implementing a simple blog
    engine.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内容丰富的章节，为我们提供了关于自定义CMS页面的全面知识。在这里学到的内容将在下一章，[*第9章*](B17073_09_ePub_RK.xhtml#_idTextAnchor166)，配置实体和*渲染数据*中非常有用，我们将利用这些知识来渲染网页，以实现一个简单的博客引擎。
