- en: '*Chapter 8*: Creating Custom CMS Pages'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned how to create documents and objects and
    implement very simple websites using such features.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will have a deep dive into the creation of custom CMS pages.
    In fact, if you are templating a document or creating a standalone page, you have
    many tools that make the development experience in Pimcore great for you. This
    chapter will cover many aspects that are fundamental for a full overview of Pimcore's
    CMS capabilities; such features are basic tools for creating custom web pages,
    which we have combined to discuss user inputs and templates for creating content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter is structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the MVC Model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Editables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see Pimcore in action!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with the previous chapters, there is a demo that you can find in our GitHub
    repository, which you can find here: [https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore).'
  prefs: []
  type: TYPE_NORMAL
- en: All you need to do to run the demo connected with this chapter is to clone it
    and navigate to the `8\. Creating Custom CMS Pages` folder and start the Docker
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, just follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run Docker with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, to restore all the settings from on your local machine, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to [http://localhost/admin](http://localhost/admin) and log in with
    your admin/pimcore credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What you will get with this setup is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A class definition called `MyObject`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two instances of the class, `My Item 1` and `My Item 2`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Editables** page, a page with a demo of editables (see *Using Editables*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Template** page, a page with a demo of the templating helpers (see *Using
    the MVC model*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A thumbnail preset called `MyThumbnails`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now you are ready to play with the demo related to this chapter!
  prefs: []
  type: TYPE_NORMAL
- en: Using the MVC Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how the **MVC** (**Model View Controller**) model
    works and how to use it for creating a standalone web page that works outside
    the document scope. This is very important for covering all possible needs that
    you may encounter on your path with Pimcore as a Content Management System.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC principle is very easy. When a URL matches a set of rules (**Routing**),
    a controller class is activated and this will compute data (**Model**) using certain
    business logic (**Controller**). The data is then sent to the **View** that implements
    the presentation logic and shows content to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the most important concepts relating to building
    embedded web pages using the MVC pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views (template helpers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pimcore **Controllers** implement the "C" part of the MVC pattern. Controllers
    are responsible for business logic or, in simpler words, are the part of your
    source code that reads, manipulates, and prepares data to be passed to the presentation
    layers (views). It is good practice to keep all the reusable logic in service
    classes, but the point that connects presentation with the business layer is,
    in fact, the controller element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pimcore offers an abstract class (`FrontendController`) that can be used as
    a base for your controller implementation. This simply means that all your controllers
    will usually inherit from the frontend controller. The naming convention of your
    files will follow the generic Symfony rules. In a simple scenario where you use
    Symfony''s standards for your website, you will have the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/src/Controller/[Controller].php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/templates/[Controller]/[action].html.twig`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside controllers, you can create any action you want. Each action is responsible
    for a single functionality and is linked to a URL. We usually create a controller
    for each topic or homogeneous group or function (that is, `CustomerController`,
    which manages all the customer's features). If you invoke a controller omitting
    the action name, `default` will be used.
  prefs: []
  type: TYPE_NORMAL
- en: As we explained in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083),
    *Creating Documents in Pimcore*, we can choose a controller for each document
    and Pimcore comes out with a ready-to-go controller called `DefaultController`.
    We can create controllers that are unrelated to documents and simply implement
    custom web pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside controllers, you can access some special variables that can help you
    to define how to build the desired output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$this->document`: If you are working on a document, this is the document that
    you are manipulating.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$this->editmode`: Indicates whether you are in edit mode or not, and can be
    used for diversifying the output based on the case. This applies when you are
    working with documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next sections, you will find some examples of controller actions that
    cover all the most common use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data to a view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following example is an action that adds a variable into the view with
    a value. In this case, the value is just text, but imagine that you could use
    the input from `$request` for computing data and add a more complex data object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Setting HTTP headers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another requirement that we may have is to set some HTTP headers. If these
    values are fixed, you can add them using an annotation, or you can access and
    programmatically alter the response object using the `addResponseHeader` helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code adds three values for the same header: the first two from
    the annotation, and the other from the piece of code inside the method.'
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the template path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are scared about the fixed conventions of templating, we will reassure
    you with the next example. In the following snippet, we will override the normal
    template path by setting it manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can manually specify the template path to the `@Template()`
    annotation and just return the data, as in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Generating JSON output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even though Pimcore comes with a powerful API engine and `json` function. In
    the next example, you will see how to create a `json` response starting from plain
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This outputs the `json` serialization of data as the body of the response and
    sets the content type to `application/json`.
  prefs: []
  type: TYPE_NORMAL
- en: For all other cases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a final fallback, if none of the standard solutions offered by Pimcore will
    satisfy your needs, there is the bare option to create a Symfony response object
    manually and return it to the MVC engine. Using this option, you will be free
    to set all response parameters, for `mime` type to the raw content without any
    limitation. In the next example, we will return fixed text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The previous block of code returns a response with text content as an example.
    Given the `Request` object, you can implement all the code you want and then produce
    a custom `Response`.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the preceding actions are intended to be contained in a `controller` class
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This set of samples is not exhaustive but contains the most important features
    and is a great starting point. You can find more details in the official documentation:
    [https://pimcore.com/docs/pimcore/current/Development_Documentation/MVC/index.html](https://pimcore.com/docs/pimcore/current/Development_Documentation/MVC/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section covers the "V" component of the MVC pattern. **Views** are the
    components that receive data and render it by implementing presentation logic.
    A views file can be written using Twig or a PHP template but, as we told you in
    [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083), *Creating Documents in
    Pimcore*, we will focus only on the Twig solution, which allows a more strict
    separation between business and presentation logic and makes Pimcore a real detached
    CMS. The downside of this solution is that the logic that you can implement in
    a Twig file is limited as it forces you to implement all the business logic in
    the controller. This strict separation may seem limiting at the beginning, but
    when you are confident with the pattern, you will agree that it's more clean,
    reusable, and maintainable. Other than all the platform-specific features, called
    **helpers**, Pimcore's Twig files support all the standard features of Twig.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a list of the most important Pimcore helpers.
  prefs: []
  type: TYPE_NORMAL
- en: pimcore_object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the following code, we loaded an object by its `id` (in our case, `2`) and
    we displayed the `Title` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Our object has a `Title` property accessed by the standard `getTitle` `method`,
    so the value will be printed.
  prefs: []
  type: TYPE_NORMAL
- en: pimcore_document
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the next snippet, we have loaded a document and printed the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `myDoc` element is Pimcore's document and all its properties can be accessed.
  prefs: []
  type: TYPE_NORMAL
- en: pimcore_asset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper loads an asset that can be used in the template. In the next example,
    we loaded one asset and we displayed the `filename` and `url`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can find an asset by its path, using the following shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As usual, the assigned variable can be used in the template file for implementing
    any presentation logic.
  prefs: []
  type: TYPE_NORMAL
- en: Render controller output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This function calls an arbitrary action and prints the result. In the next
    example, we used the `/custom/json` example and we rendered the output, passing
    `items=11` as the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The parameter order is action, controller, bundle, and parameters.
  prefs: []
  type: TYPE_NORMAL
- en: pimcore_cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Pimcore''s cache simply implements an in-template caching functionality. You
    can use this to cache some parts of the HTML page directly in the template, independent
    of the other global definable caching functionality. This can be useful for templates
    that need a lot of calculation or require a huge amount of objects (such as navigations,
    and so on). In the next block of code, we will see caching in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The parameter order is the name of the key, the timeout in seconds, and an optional
    flag for forcing the cache in admin mode.
  prefs: []
  type: TYPE_NORMAL
- en: pimcore_device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `pimcore_device` function helps when implementing adaptive designs. The
    next piece of code displays the usage of this helper in a template snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you are running this script on your PC, the output will be **I'm a desktop
    device**.
  prefs: []
  type: TYPE_NORMAL
- en: Request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From the default Symfony objects, you can access the request data. This can
    be done using the `app.request` item that contains all the information that we
    need. In the next example, we used this method to get the `"_dc"` URL parameter
    that you usually have in a page preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This is just a sample, and you can access all the request parameters. You can
    look at the official documentation for more information, here: [https://symfony.com/doc/current/templates.html#the-app-global-variable](https://symfony.com/doc/current/templates.html#the-app-global-variable).'
  prefs: []
  type: TYPE_NORMAL
- en: Glossary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper replaces glossary terms with links. The glossary module is a powerful
    tool, making internal and external linking easy and smart, and which Pimcore has
    out of the box. As an example, you can connect the word "Pimcore" with the official
    website, so that each time you use it in HTML, it will be replaced with a link
    to the website. The `pimcore_glossary` helper will be used by this helper to render
    links. To test this feature, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Tools** | **Glossary**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the term `PIMcore` in the **Text** column and then the link to the page
    in the **Link** column. In this example, we added PIMcore and CMS words with the
    related links. In the next screenshot, you will find the result:![Figure 8.1:
    Glossary terms'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.01_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.1: Glossary terms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now the glossary is set and we can use it on any web page using the `pimcoreglossary`
    helper. We can do this by placing the following snippet in a web page template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the previous snippet, we surround the text with the `glossary` function.
    Because we defined the words **PIMcore** and **CMS** inside the glossary, they
    will be transformed into a link on the web page. This is the final result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.2: The glossary helper in action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.02_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.2: The glossary helper in action'
  prefs: []
  type: TYPE_NORMAL
- en: This was a simple example to explain the concept, but it shows how powerful
    this feature is.
  prefs: []
  type: TYPE_NORMAL
- en: pimcore_placeholder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper adds custom placeholders into the template. The next snippet defines
    a placeholder called `myplaceholder`, which is configured for building an H3 tag
    surrounding the `"My content`" value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The output of this is `<h3>My content</h3>`.
  prefs: []
  type: TYPE_NORMAL
- en: pimcore_head_link
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This helper collects a list of head links (stylesheet or any other `head link`
    tag) and prints them on the head section of the web page. Based on the presentation
    logic, the links are collected (you may or may not include a file based on some
    special conditions) and then printed once.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the snippets append a favicon (favorite icon – the
    logos you see in browser tabs when you surf websites) to the link list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the example, we appended a favicon to the list. Using the correct configuration
    of `pimcore_head_link`, we can also define the order using relative inclusion
    (for example, add x file after y file).
  prefs: []
  type: TYPE_NORMAL
- en: pimcore_head_meta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper prints HTTP meta tags. It can collect a set of items that will
    be printed once in the header section. In the next block of code, like in the
    `HeadLink` helper, the data is collected and printed to the function by the final
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: pimcore_head_script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the same as `HeadLink` and `Style`, but for a JavaScript file. The
    next block of code adds a script to the list and then prints it on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: pimcore_head_style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper manages inline styles. It is like `HeadLink`, but with inline scripts.
    In the next piece of code, we add a file called `ie.css` with conditional wrapping
    that, in this case, limits the CSS action to Internet Explorer before version
    11:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: pimcore_head_title
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creates and save the HTML document''s `<title>` for later retrieval and output.
    The following script adds the special `title` tag into the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: pimcore_inc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper includes a Pimcore document in the page. In the next snippet, we
    see how the `MySnippet` document is rendered and added to the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: pimcore_inline_script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper adds inline scripts to a page. The usage is very similar to `HeadScript`,
    but intended for inline usage. The next piece of code adds `myscript.js` to the
    list and then prints it on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper is responsible for generating and adding a navigation menu. In
    the next piece of code, you will find an example that prints a menu based on the
    document hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the snippet, it rendered a menu that starts from `mainNavStartNode`, which
    is the root document, and uses the current document as the active one.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can refer to the official documentation for more information on `navigation`:
    [https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Navigation.html.](https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Navigation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: include
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper directly includes a template inside the page. Look at the following
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This script includes the `Default/include.html.twig` `template`, where you can
    use the set of parameters passed as the input.
  prefs: []
  type: TYPE_NORMAL
- en: Translations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a Symfony feature integrated within Pimcore''s engine. With the pipe
    filter, you can transform text using the translations database and replace the
    original text with the translated version. To do this, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document and assign a template to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following snippet to the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script sets a variable with a string value (`my-test-key`) and then prints
    it using the `trans` filter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the first usage of the label, an entry will be created in your backend,
    and you will be able to set a value for each language. Go to **Tools** | **Shared
    Translations**. Set the value of the label for each language by entering data
    into the table:![Figure 8.3: The Shared Translations panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.03_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.3: The Shared Translations panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the web page and see the translated text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The translation functionality is very useful and easy to manage with its visual
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Website config
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Pimcore has a bucket of configuration keys that are easily editable via the
    web interface. You can add them from **Settings** | **Website Settings** and then
    you can insert the value into the template or controller. To do this, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document and assign a template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the website settings administration from **Settings** | **Website Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a key for your settings in the top editing bar and choose the **Text**
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **+** button and the value will be displayed in the table. You will
    be able to edit it just by entering text into the grid. In the next screenshot,
    you will see the final result. In this example, we added a key called **mykey**
    with the value **My Value**:![Figure 8.4: The Website Settings panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.04_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.4: The Website Settings panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now add the following snippet to the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the preceding code, you will get `MyValue` as the result of the helper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The visual editing of settings is very useful because it lets us create configurable
    templates and websites that can be easily managed centrally.
  prefs: []
  type: TYPE_NORMAL
- en: instanceof
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `instanceof` construct is useful for checking whether an object is of a
    given type. In the next piece of code, we will check whether an asset instance
    is of type `Image` or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This feature is important because you can alter the code flow so it either completes
    or doesn't complete a task based on the object type. In the previous example,
    we get an object that could be a video or an image, and we can display it properly
    based on the type.
  prefs: []
  type: TYPE_NORMAL
- en: Thumbnails
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you are working with images, printing them at the right size is fundamental.
    The Pimcore thumbnail feature helps a lot with templating. What we can do is to
    define the asset thumbnails from the administration; you should have already discovered
    this topic in [*Chapter 5*](B17073_05_ePub_RK.xhtml#_idTextAnchor093)*, Exploring
    Objects and Classes*. Let''s see this feature in action in a few simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a web page and assign a template to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Settings | Thumbnails | Image Thumbnails**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a thumbnail configuration with the settings shown in the following screenshot:![Figure
    8.5: The thumbnail settings'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.05_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.5: The thumbnail settings'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We used the **PNG** format, and we set **Scale by Height** to **200**. Now the
    images that we will upload will have a proper thumbnail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Upload an image into the **DAM** section. Right-click in the **Assets** section
    of the menu and choose the **Upload Files** option:![Figure 8.6: Uploading an
    image'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.06_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.6: Uploading an image'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The demo example already ships a Pimcore logo image with ID 2\. To get a thumbnail,
    you just have to get the asset by path or ID, then render it. The next snippet
    does that. Copy the snippet to the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The scripts get the thumbnail (the files generated at the first usage) for the
    image and print the image tag to the document.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next example gets an on-the-fly thumbnail without having a configuration
    defined. Copy this code to the template and see the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This example is quite similar to the previous one but uses settings that are
    not predefined by a thumbnail configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'That whole list of functions covers the set of features that Pimcore offers
    to us out of the box. In addition, you will have all the default Symfony functions,
    which you can discover using the official documentation: https://symfony.com/doc/current/reference/twig_reference.html.'
  prefs: []
  type: TYPE_NORMAL
- en: But what should you do if neither Pimcore nor Symfony implements what you need?
    The easier solution, if we are talking about business logic, is to manipulate
    data inside the controller, and produce a clean output for the view. In some cases,
    we may need to implement some complex presentation logic that is hard to manage
    with Twig syntax. Moreover, we do not want to move this logic to the controller
    (where it will be easy to implement) because it will create coupling between the
    template and controller, and this is not what we want (do you remember when we
    talked about the benefits of a detached solution in [*Chapter 1*](B17073_01_ePub_RK.xhtml#_idTextAnchor014)*,
    Introducing Pimcore*?). The solution to the problem of implementing complex presentation
    logic inside templates is provided in the next section where we will see how to
    add methods to the template engine and implement reusable helpers for our project.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing your own template helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous section, we learned how to use template helpers to generate
    dynamic content. Now it is time to learn how to extend the template helper system
    and add your own function inside the set. In the next example, we will create
    a template helper that will display the current date and time in a given format.
    You may object that the Twig templating already offers a feature more or less
    like this, but remember that this is an example to explain the template helper
    extension, so it is better to keep our case study as simple as possible. Now,
    follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file in `/src/Templating/Helper/Timestamp.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then copy the following snippet inside the `Timestamp.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`getFunctions` is a special function that lists all the helper extensions exposed
    from this extension. In our case, we have one function, called `timestamp`. This
    function computes a textual date representation based on the format that''s received
    from the user. This function is mapped to a command called `timestamp` and can
    be used inside the template engine. For simplicity, I used for the helper name
    the function that computes the result, but you can choose your own.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Register the snippet using the YAML configuration. Open the `/` `config/services.yml`
    file and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now the timestamp helper is registered inside the templating engine, so we
    can call it inside our Twig files. Copy the following piece of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will get something similar to `2020-11-03`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, we learned how to add functionality to the template engine.
    This is good for reusing code and overcomes the Twig syntax limitations. In the
    next section, we will learn how to master routing rules to connect URLs with controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering Routing and URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last step of mastering custom pages is routing. We learned in [*Chapter
    4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083), *Creating Documents in Pimcore*,
    that each document has a path that can be changed by the document editing interface.
    What if we are not working with documents, but with custom pages? In this section,
    we will learn about the options that Pimcore offers, which are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardcoded Routes**, as per Symfony standard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static Routes**, configurable routes that can be changed by the admin interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redirects**, which can set HTTP redirection using a nice admin interface.
    For those who are not familiar with redirection, imagine it as a way to redirect
    the browser from one URL to another. This is very common when a page changes its
    URL or we have to move a website from one domain to another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Hardcoded routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add a route, there isn''t anything more complex than adding it to the configuration.
    These settings are contained inside the `routing.yml` file, and these rules follow
    the Symfony standard that you can find here: https://symfony.com/doc/current/routing.html.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next code fragment, we can see an example of a rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The most relevant settings for our purpose are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: The rule has a name that must be unique; in our example, it is `custom_rule`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path`: This is the path that the rule is listening on; this can contain regular
    expressions and fetch parameters (in our case, `parameter`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`controller`: This is the controller, including the action name; it supports
    the Symfony syntax. In the case that you write `App\Controller\CustomController:myaction`,
    you will activate `myaction` inside the `CustomController` controller of the application`.`'
  prefs: []
  type: TYPE_NORMAL
- en: For each parameter, you can give a default value in the case the parameter was
    optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that even if we used names with an understandable naming convention, you
    could define any rule as you want. The parameter inside the URL (or query path)
    is parsed and delivered to the action.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer, the second option is to use routing as an annotation of the
    controller''s actions. The equivalent of the previous rule is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The routing rule is bidirectional, so it can both produce a URL from the parameter
    values and give the parameters values from a URL. For example, consider that you
    have the `/product/{id}` rule for the product URL. If the user enters `/product/5`
    in the browser, the routing engine is able to tell you that the ID parameter is
    5\. On the other hand, you can ask the engine to generate a URL for the product
    with ID 5 and you will get back `/product/5`. In simple words, you can build the
    URL automatically from the rule name and parameter. This is easy to do with the
    path helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This will generate the full URL, `/custom/actionname/67`.
  prefs: []
  type: TYPE_NORMAL
- en: Configurable routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The hardcoded rules used in the previous section are a good solution but are
    static, and you need access to the source code to understand or change them. The
    other solution offered by Pimcore is to define them visually, using the admin
    UI. Under **Settings** | **Static Routes**, you can find a table where you can
    enter all values of a routing rule (including the name, pattern, parameter names,
    and building rules). This makes rule management very easy and you can monitor
    how many rules you have and their configuration without accessing the source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can follow these steps to see this method in action:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a controller caller, `CustomController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an action called `data` into the controller, similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will take the `data` parameter from the URL and will pass it to the
    view using the `content` variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a view in the controller folder called `data.html.` `Twig` and add the
    following code inside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script will print the `content` variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `custom`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/\/custom_data\/(.*)\//`. Note that `\/` is for escaping the `/` char in the
    regular expression, so a URL such as `/custom_data/anything/` will be matched.
    The parameter matched by the selector `(.*)` is the `anything` part.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CustomController`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/custom_data/%data/`. With this value, the routing engine will be able to
    generate the URL, `/custom_data/value/`, if you use use the editable, `{{% pimcore_path(''custom'',
    {''data'': ''value''}); }}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data`. This will mean that the value of `(.*)` will be named `data`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`empty`. In this case, if the parameter will be omitted, the parameter data
    will have the text `empty` as its value.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your browser and navigate to [http://localhost/custom_data/myvalue](http://localhost/custom_data/myvalue).
    You will see the `myvalue` parameter printed on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similar to the previous example, we can generate a URL using a rule name and
    parameters with the template helper.
  prefs: []
  type: TYPE_NORMAL
- en: 'The settings that you edited through the admin UI are saved in a PHP configuration
    file (`var/config/staticroutes.php`), so it''s also possible to edit the code
    directly or save them by committing it to a Git repository. The next piece of
    code shows what we obtained by adding the previous rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Configurable routes are very useful when you want to keep URL routing flexible,
    letting the user choose the paths at runtime. This is essential for matching specification
    changes from the customer about URLs (maybe due to the SEO requirement changes)
    without touching a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Redirects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Redirects are a useful feature of Pimcore for directing the user to the correct
    pages – whether it be for marketing URLs, for redirects after a website's relaunch,
    or redirects for moved documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process for creating a redirect is very simple. Just follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **System | Redirects**. This menu opens a table similar to this
    one:![Figure 8.8: The Redirects table'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.08_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.8: The Redirects table'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Add** button. You will be prompted with the following popup:![Figure
    8.9: Adding a redirect'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.09_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.9: Adding a redirect'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Type** dropdown lets you choose the type of redirection, while **Source**
    and **Target** allow you to choose the mapping rule that redirects the source
    to the target URL.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter `/\/redirect\/(.*)/` in the `/custom_data/$1` in the **Target** box, like
    in *Figure 8.9*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a browser and navigate to [http://localhost/redirect/xxx/](http://localhost/redirect/xxx/).
    You will be redirected to http://localhost/custom_data/xxx/ instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this section, we learned how to create custom web pages using the MVC model.
    In particular, we covered all the most important topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Controllers**: We understood how controllers interact with request parameters
    and pass data to the view. Inside a controller, we can implement our business
    logic without any limitations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Views**: We learned how the template engine works and how we can use the
    helpers to implement presentation logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Routing and URLs**: We learned how to manage the page''s URL properly. We
    didn''t limit ourselves to Symfony''s standard routing but also covered static
    routes and redirect options. With all these options, we can choose the right solution
    based on our use case. The most important thing to know is that this wide set
    of options give us the power to solve any URL problems that we may face.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will have a deep dive into Pimcore editables and we
    will learn how to combine them to get results without writing tons of lines of
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Using editables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we introduced in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083),
    *Creating Documents in Pimcore*, Pimcore's editables are a set of visual components
    that can be used to enter information in the CMS page and are able to render the
    output to get the web page ready. You should remember the `pimcore_input` and
    `pimcore_wysiwyg` components; well, the good news is that Pimcore has a lot of
    components like that and covers most of your user needs. In this section, we will
    take a look at these.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In the **Editables** list, we should have **Area** and **Areablock** components,
    but we won't discuss these in this chapter. These elements, in conjunction with
    **Bricks**, are the pillars of code reuse in Pimcore and will be covered in [*Chapter
    10*](B17073_10_ePub_RK.xhtml#_idTextAnchor188), *Creating Pimcore Bricks*. The
    motivation is that without discovering what bricks are, the Area, Areablock, and
    Block components would be hard to understand.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will discover a list of the editables available. For
    each one, we will add a snippet of code to show you how to add it to your code
    and, for the more complex items, we also have some screenshots to explain the
    interaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process for testing an editable in your live Pimcore environment is the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a document into your CMS and link the document to a template. This process
    is well described in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*,
    Creating Documents in Pimcore*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the snippets that you find in the following subsections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the page editor and see how the component looks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open page preview and see the data that is saved inside the editable. Remember
    that by using `{{ pimcore_xxx('name') }}`, you will print the data, but you can
    also set it to a variable using `{% set var = pimcore_xxx('name') %}` and then
    implement your own presentation logic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All these examples are contained in the `editable.htm.twig` template, used in
    **The Editable Pages** that you will find in the demo related to this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Checkbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following editable adds a checkbox that can be checked by the page editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The value can be used to implement some rendering logic (that is, showing or
    not showing something basing on the `myCheckbox` value).
  prefs: []
  type: TYPE_NORMAL
- en: Date
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This snippet adds a `DateTime` picker to the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'When editing the page, you will see an editable `DateTime` picker like the
    one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10: The date picker in action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.10: The date picker in action'
  prefs: []
  type: TYPE_NORMAL
- en: During the page rendering, when you are not in edit mode, the function outputs
    the value that the user selected in the editor. This value can be displayed or
    be used for implementing presentation logic.
  prefs: []
  type: TYPE_NORMAL
- en: Relation (Many-To-One)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This editable provides the opportunity to add a `relation` to an object. You
    can select which types of elements you want to add (for example, `asset` or `object`)
    and which subtypes. In the following example, we allowed only classes of type
    `MyObject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This component, once added to the page, is displayed as a simple edit box where
    you can drag the items that you want to show, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11: Relation configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.11: Relation configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Then the relation named `myRelation` will contain your selection value, and
    you can use it in the template for rendering data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we will add a **Link** button that navigates to the
    selected item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The previous snippet will display a link in the text.
  prefs: []
  type: TYPE_NORMAL
- en: Relations (many-to-many relation)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This editable is like the many-to-one relation but allows you to select references
    to multiple other elements (such as documents, assets, and objects). The following
    snippet is the same as the previous use case, but because this editable has multiple
    references, we used a `for` loop to list all the selected options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can drag and drop multiple items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12: Relation configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.12_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.12: Relation configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of the selection is shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13: Relations in edit mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.13_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.13: Relations in edit mode'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the data in our sandbox, we will have something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14: The output of relations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.14_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.14: The output of relations'
  prefs: []
  type: TYPE_NORMAL
- en: Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This editable gives you a widget where you can upload an image. If you drag
    a file from the asset folder and drop it on the component, the image will be displayed.
    The advantages compared with the `Relation` component are that the image is easier
    to use and integrated with the thumbnail system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next piece of code allows you to upload an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You can upload images or drag and drop them to the widget as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15: Image configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.15_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.15: Image configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Input` allows the user to input a single line of text, and we can use the
    input for rendering HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We used it in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*, Creating
    Documents in Pimcore*; there isn't anything more to add about this editable.
  prefs: []
  type: TYPE_NORMAL
- en: Link
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a component for rendering a link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the link in edit mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – The link component in edit mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.16_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.16 – The link component in edit mode
  prefs: []
  type: TYPE_NORMAL
- en: 'The component comes out with two buttons: the folder that opens the selected
    link, and the edit button (pencil icon) that opens the settings form. The next
    screenshot shows the popup and the parameters available for a link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17: Link configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.17_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.17: Link configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Once completed, the result is an HTML link with the text and the destination
    provided.
  prefs: []
  type: TYPE_NORMAL
- en: Select
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This snippet adds a `select` component that lets the user choose between a
    set of items. The following snippet shows how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The `store` parameter contains a list of arrays. Each item is composed of an
    array of two elements: the first is the key, the second is the value. The `defaultValue`
    setting configures the default value for the selected list item.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what is shown in edit mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18: Select configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.18_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.18: Select configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Multiselect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Multiselect` component is very similar to the `Select` one, but it allows
    multiple choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what is shown in edit mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19: Multiselect configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.19_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.19: Multiselect configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This editable is like the `Input` one, but specifically for numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what is shown in edit mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20: Numeric editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.20_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.20: Numeric editor'
  prefs: []
  type: TYPE_NORMAL
- en: And in edit mode, it returns the number chosen.
  prefs: []
  type: TYPE_NORMAL
- en: Renderlet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Renderlet` is a special container that is able to render an object. It
    uses a controller and an action to process the selected items, and the resulting
    HTML is provided to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we need some extra steps to test it. Follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a template file inside the `/app/Resources/views/Default` folder called
    `gallery.php`, and add the following code to render your data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an action to the default controller with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add a `Renderlet` editable into the page with the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration tells Pimcore to use the action `galleryAction` from the
    `Default` controller to render the data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag and drop a folder into `Renderlet`; this is what is shown in edit mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.21:Dragging a folder to Renderlet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.21_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.21:Dragging a folder to Renderlet
  prefs: []
  type: TYPE_NORMAL
- en: 'View the page as a normal user and see the result of your template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.22: Output with the sample template'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.22_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.22: Output with the sample template'
  prefs: []
  type: TYPE_NORMAL
- en: Snippet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This component is used to include a document or snippet (a special document
    type) inside the document; this is useful for reusing scripts or pieces of the
    website on your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have entered the code, this is how to add a snippet to the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.23:Configuration of the snippet control'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.23_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.23:Configuration of the snippet control
  prefs: []
  type: TYPE_NORMAL
- en: 'And this is what you will see as a website user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.24: The output of the snippet control'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.24_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.24: The output of the snippet control'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot, the text **I'm the default template** comes from
    the snippet.
  prefs: []
  type: TYPE_NORMAL
- en: Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This editable creates a table and lets the editor define the data inside of
    it. You can specify the default number of columns (`cols`) or rows (`rows`). You
    can also add a matrix of data (array of array) into the `data` parameter. The
    user will be able to add rows and columns by itself. Here is an example of the
    editable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the resulting editor interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.25: Configuration of the table control'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.25_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.25: Configuration of the table control'
  prefs: []
  type: TYPE_NORMAL
- en: 'And this is the default rendering result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.26_B17073.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.26: Table output'
  prefs: []
  type: TYPE_NORMAL
- en: The previous figure doesn't look nice because the component outputs a simple
    HTML table without any styles. Of course, based on your CSS theme, you can apply
    all the styles you want to make it coherent for your website design.
  prefs: []
  type: TYPE_NORMAL
- en: Textarea
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is very similar to the `Input` editable but uses a `Textarea` component
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Video
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This editable allows you to insert movie assets into your page content. It
    is very similar to the image component but works with video. You will need to
    add the following snippet to activate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you will be able to define the source (local assets or an external link)
    and fine-tune some options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.27: Video control'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.27_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.27: Video control'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the web page, you will see it inside a video player as in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.28: Video control output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.28_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.28: Video control output'
  prefs: []
  type: TYPE_NORMAL
- en: The video editable is a very powerful solution for letting the user be autonomous
    in terms of uploading and managing videos without asking for help from a developer.
  prefs: []
  type: TYPE_NORMAL
- en: WYSIWYG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This WYSIWYG editor is used for entering HTML content. In the next piece of
    code, there is a sample of editable usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: We used it in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*, Creating
    documents in Pimcore*; there isn't anything more to add.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we saw an overview of the most important editables. Using them
    as base components for the web pages that we create gives us absolute power to
    customize any aspect of our HTML. Moreover, with this large set of options, cases
    when you need something more than adding input for the user and then templating
    the data that you collect are very few. Generally speaking, you do not have to
    code to satisfy the customer's needs but just template the pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about editables, you can consult the official documentation
    at the following URL: [https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Editables/](https://pimcore.com/docs/pimcore/current/Development_Documentation/Documents/Editables/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discover the usage of blocks, which are simple
    tools that help to create dynamic pages.
  prefs: []
  type: TYPE_NORMAL
- en: Using blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pimcore blocks are a very clever system for iterating parts of a page. For example,
    if you have a standard page composed of horizontal bands or titled paragraphs,
    you can define a piece of HTML that explains how each item should look and let
    the user add as many items as they want. As another example, you can define a
    block composed of an H2 title and text, and this will create many titled paragraphs
    on your web page. Alternatively, you could use a block with an image and create
    a gallery iterating the blocks. Moreover, you can also manage the visibility of
    blocks by scheduling their publication.
  prefs: []
  type: TYPE_NORMAL
- en: Regular Blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pimcore_iterate_block` can return the list of blocks. All the code that is
    wrapped inside the `for` loop can be replicated as many times as the user wants.'
  prefs: []
  type: TYPE_NORMAL
- en: The difference between a block iteration and a regular `for` loop is that in
    the case of a block, the user defines how many items they want, and all the data
    input inside the editables is persisted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for defining a block is very easy and we can see in the next snippet
    the usage of the previously mentioned functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next example, we will see a block in action that iterates over a small
    template with a header and text that builds a web page with titled paragraphs:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a page and link the page with a template, as we have done many times
    before. If you have any doubts, just refer to [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)*,
    Creating Documents in Pimcore*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following snippet into the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The template part is composed of a `title`, surrounded by a `H2` tag and a
    `paragraph`. In the next screenshot, you will see the result of our code in edit
    mode before adding the blocks:![Figure 8.29: Adding a block to the list'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.29_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.29: Adding a block to the list'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to the page editor and click the green **+** icon to add one block to the
    block list. Now the block is visible in the editor and you will be able to enter
    data. You can add as many blocks as you want; you will be able to edit them one
    by one in the backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now enter data into the editables. In this example, I put **My first item**
    as the title and **value** inside the long text. The output will be something
    like the following screenshot:![Figure 8.30: Editing the element in the block
    list'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.30_B17073.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.30: Editing the element in the block list'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Iterate this for as many blocks as you like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final result will look like this on the web page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.31: The result after adding more elements'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.31_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.31: The result after adding more elements'
  prefs: []
  type: TYPE_NORMAL
- en: Scheduled Blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The scheduled block component is very similar to the block, but it has the
    option to define an expiration date for the contents. The syntax is the same,
    as you can see in the next snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The process for testing this snippet is exactly the same as the standard block
    that we saw in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next screenshot, we will see the edit mode for the scheduled block,
    where we have a `DateTime` picker near the green **+** icon that allows the user
    to define when the content will expire:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32 – Editing a scheduled block'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.32_B17073.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.32 – Editing a scheduled block
  prefs: []
  type: TYPE_NORMAL
- en: 'The block engine is a very powerful system that allows a lot of opportunities
    for making dynamic pages easily editable by the user. We will appreciate this
    feature more in [*Chapter 10*](B17073_10_ePub_RK.xhtml#_idTextAnchor188), *Creating
    Pimcore Bricks*, when we will use blocks in conjunction with bricks to create
    fully dynamic templates. Anyway, what we have learned so far is very interesting:
    we can give the user the opportunity to manage a repetitive template with a well-structured
    approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned all the information needed for creating a custom
    CMS page. We gained an understanding of the MVC model, and we had a deep dive
    into the templating engine of Pimcore, discovering all the helpers and how to
    create our own. We also learned how to write backend code in the controller and
    make it work by defining routing rules. We saw that there are many ways to manage
    URLs in Pimcore (Hardcoded, Static Route, and Redirect) and they cover all the
    use cases for a website. Then we had a complete overview of editables, which left
    us able to master any custom web page just by templating it. Finally, we discovered
    the block system that allows the iteration of pieces of a template by giving the
    user the opportunity to manage repetitive patterns in web pages.
  prefs: []
  type: TYPE_NORMAL
- en: This was an intense chapter that provided us with full knowledge of custom CMS
    pages. What we learned here will be very useful in the next chapter, [*Chapter
    9*](B17073_09_ePub_RK.xhtml#_idTextAnchor166), Configuring Entities and *Rendering
    Data*, where we will use it to render web pages for implementing a simple blog
    engine.
  prefs: []
  type: TYPE_NORMAL
