["```php\n    <?php\n    namespace app\\helpers;\n\n    class NumberHelper\n    {\n        public static function format($value, $decimal = 2)\n        {\n            return number_format($value, $decimal, '.', ',');\n        }\n    }\n    ```", "```php\n    <?php\n    ...\n    class SiteController extends Controller\n    {\n        â€¦\n\n        public function actionNumbers()\n        {\n            return $this->render('numbers', ['value' => 18878334526.3]);\n        }\n    }\n    ```", "```php\n    <?php\n    use app\\helpers\\NumberHelper;\n    use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n    /* @var $value float */\n\n    $this->title = 'Numbers';\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"site-numbers\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <p>\n            Raw number:<br />\n            <b><?= $value ?></b>\n        </p>\n        <p>\n            Formatted number:<br />\n            <b><?= NumberHelper::format($value) ?></b>\n        </p>\n    </div>\n    ```", "```php\nNumberHelper::format($value, 3)\n```", "```php\n    <?php\n    use yii\\db\\Migration;\n\n    class m160427_103115_create_post_table extends Migration\n    {\n        public function up()\n        {\n            $this->createTable('{{%post}}', [\n                'id' => $this->primaryKey(),\n                'title' => $this->string()->notNull(),\n                'content_markdown' => $this->text(),\n                'content_html' => $this->text(),\n            ]);\n        }\n\n        public function down()\n        {\n            $this->dropTable('{{%post}}');\n        }\n    }\n    ```", "```php\n    ./yii migrate\n    tests/codeception/bin/yii migrate\n    ```", "```php\n    <?php\n    namespace app\\models;\n\n    use app\\behaviors\\MarkdownBehavior;\n    use yii\\db\\ActiveRecord;\n\n    /**\n     * @property integer $id\n     * @property string $title\n     * @property string $content_markdown\n     * @property string $content_html\n     */\n    class Post extends ActiveRecord\n    {\n        public static function tableName()\n        {\n            return '{{%post}}';\n        }\n\n        public function rules()\n        {\n            return [\n                [['title'], 'required'],\n                [['content_markdown'], 'string'],\n                [['title'], 'string', 'max' => 255],\n            ];\n        }\n    }\n    ```", "```php\n<?php\nnamespace app\\tests\\codeception\\unit\\fixtures;\n\nuse yii\\test\\ActiveFixture;\n\nclass PostFixture extends ActiveFixture\n{\n    public $modelClass = 'app\\models\\Post';\n    public $dataFile = '@tests/codeception/unit/fixtures/data/post.php';\n}\n```", "```php\n    <?php\n    return [\n        [\n            'id' => 1,\n            'title' => 'Post 1',\n            'content_markdown' => 'Stored *markdown* text 1',\n            'content_html' => \"<p>Stored <em>markdown</em> text 1</p>\\n\",\n        ],\n    ];\n    ```", "```php\n    <?php\n    namespace app\\tests\\codeception\\unit;\n\n    use app\\models\\Post;\n    use app\\tests\\codeception\\unit\\fixtures\\PostFixture;\n    use yii\\codeception\\DbTestCase;\n\n    class MarkdownBehaviorTest extends DbTestCase\n    {\n        public function testNewModelSave()\n        {\n            $post = new Post();\n            $post->title = 'Title';\n            $post->content_markdown = 'New *markdown* text';\n\n            $this->assertTrue($post->save());\n            $this->assertEquals(\"<p>New <em>markdown</em> text</p>\\n\", $post->content_html);\n        }\n\n        public function testExistingModelSave()\n        {\n            $post = Post::findOne(1);\n\n            $post->content_markdown = 'Other *markdown* text';\n            $this->assertTrue($post->save());\n\n            $this->assertEquals(\"<p>Other <em>markdown</em> text</p>\\n\", $post->content_html);\n        }\n\n        public function fixtures()\n        {\n            return [\n                'posts' => [\n                    'class' => PostFixture::className(),\n                ]\n            ];\n        }\n    }\n    ```", "```php\n    codecept run unit MarkdownBehaviorTest\n    Ensure that tests has not passed:\n    Codeception PHP Testing Framework v2.0.9\n    Powered by PHPUnit 4.8.27 by Sebastian Bergmann and contributors.\n\n    Unit Tests (2) ---------------------------------------------------------------------------\n    Trying to test ... MarkdownBehaviorTest::testNewModelSave             Error\n    Trying to test ... MarkdownBehaviorTest::testExistingModelSave        Error\n    ---------------------------------------------------------------------------\n\n    Time: 289 ms, Memory: 16.75MB\n\n    ```", "```php\n    <?php\n    namespace app\\behaviors;\n\n    use yii\\base\\Behavior;\n    use yii\\base\\Event;\n    use yii\\base\\InvalidConfigException;\n    use yii\\db\\ActiveRecord;\n    use yii\\helpers\\Markdown;\n\n    class MarkdownBehavior extends Behavior\n    {\n        public $sourceAttribute;\n        public $targetAttribute;\n\n        public function init()\n        {\n            if (empty($this->sourceAttribute) || empty($this->targetAttribute)) {\n                throw new InvalidConfigException('Source and target must be set.');\n            }\n            parent::init();\n        }\n\n        public function events()\n        {\n            return [\n                ActiveRecord::EVENT_BEFORE_INSERT => 'onBeforeSave',\n                ActiveRecord::EVENT_BEFORE_UPDATE => 'onBeforeSave',\n            ];\n        }\n\n        public function onBeforeSave(Event $event)\n        {\n            if ($this->owner->isAttributeChanged($this->sourceAttribute)) {\n                $this->processContent();\n            }\n        }\n\n        private function processContent()\n        {\n            $model = $this->owner;\n            $source = $model->{$this->sourceAttribute};\n            $model->{$this->targetAttribute} = Markdown::process($source);\n        }\n    }\n    ```", "```php\n    class Post extends ActiveRecord\n    {\n        ...\n\n        public function behaviors()\n        {\n            return [\n                'markdown' => [\n                    'class' => MarkdownBehavior::className(),\n                    'sourceAttribute' => 'content_markdown',\n                    'targetAttribute' => 'content_html',\n                ],\n            ];\n        }\n    }\n    ```", "```php\n    Codeception PHP Testing Framework v2.0.9\n    Powered by PHPUnit 4.8.27 by Sebastian Bergmann and contributors.\n\n    Unit Tests (2) ---------------------------------------------------------------------------\n    Trying to test ... MarkdownBehaviorTest::testNewModelSave             Ok\n    Trying to test ... MarkdownBehaviorTest::testExistingModelSave        Ok\n    ---------------------------------------------------------------------------\n\n    Time: 329 ms, Memory: 17.00MB\n\n    ```", "```php\npublic function events()\n{\n    return [\n        ActiveRecord::EVENT_BEFORE_INSERT => 'onBeforeSave',\n        ActiveRecord::EVENT_BEFORE_UPDATE => 'onBeforeSave',\n    ];\n}\n```", "```php\npublic function onBeforeSave(Event $event)\n{\n    if ($this->owner->isAttributeChanged($this->sourceAttribute))\n    {\n        $this->processContent();\n    }\n}\n```", "```php\nclass Post extends ActiveRecord\n{\n    ...\n\n    public function behaviors()\n    {\n        return [\n            [\n                'class' => MarkdownBehavior::className(),\n                'sourceAttribute' => 'description_markdown',\n                'targetAttribute' => 'description_html',\n            ],\n            [\n                'class' => MarkdownBehavior::className(),\n                'sourceAttribute' => 'content_markdown',\n                'targetAttribute' => 'content_html',\n            ],\n        ];\n    }\n}\n```", "```php\n{\n    \"base\":\"USD\",\n    \"date\":\"2016-05-13\",\n    \"rates\": {\n        \"AUD\":1.3728,\n        \"BGN\":1.7235,\n        ...\n        \"ZAR\":15.168,\n        \"EUR\":0.88121\n    }\n}\n```", "```php\n    <?php\n    namespace app\\components;\n\n    use yii\\base\\Component;\n\n    class Exchange extends Component\n    {\n        public function getRate($source, $destination, $date = null)\n        {\n\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\components;\n\n    use yii\\base\\Component;\n    use yii\\base\\InvalidConfigException;\n    use yii\\base\\InvalidParamException;\n    use yii\\caching\\Cache;\n    use yii\\di\\Instance;\n    use yii\\helpers\\Json;\n\n    class Exchange extends Component\n    {\n        /**\n        * @var string remote host\n        */\n        public $host = 'http://api.fixer.io';\n        /**\n        * @var bool cache results or not\n        */\n        public $enableCaching = false;\n        /**\n        * @var string|Cache component ID\n        */\n        public $cache = 'cache';\n\n        public function init()\n        {\n            if (empty($this->host)) {\n                throw new InvalidConfigException('Host must be set.');\n            }\n            if ($this->enableCaching) {\n                $this->cache = Instance::ensure($this->cache, Cache::className());\n            }\n            parent::init();\n        }\n\n        public function getRate($source, $destination, $date = null)\n        {\n            $this->validateCurrency($source);\n            $this->validateCurrency($destination);\n            $date = $this->validateDate($date);\n            $cacheKey = $this->generateCacheKey($source, $destination, $date);\n            if (!$this->enableCaching || ($result = $this->cache->get($cacheKey)) === false) {\n                $result = $this->getRemoteRate($source, $destination, $date);\n                if ($this->enableCaching) {\n                    $this->cache->set($cacheKey, $result);\n                }\n            }\n            return $result;\n        }\n\n        private function getRemoteRate($source, $destination, $date)\n        {\n            $url = $this->host . '/' . $date . '?base=' . $source;\n            $response = Json::decode(file_get_contents($url));\n            if (!isset($response['rates'][$destination])) {\n                throw new \\RuntimeException('Rate not found.');\n            }\n            return $response['rates'][$destination];\n        }\n\n        private function validateCurrency($source)\n        {\n            if (!preg_match('#^[A-Z]{3}$#s', $source)) {\n                throw new InvalidParamException('Invalid currency format.');\n            }\n        }\n\n        private function validateDate($date)\n        {\n            if (!empty($date) && !preg_match('#\\d{4}\\-\\d{2}-\\d{2}#s', $date)) {\n                throw new InvalidParamException('Invalid date format.');\n            }\n            if (empty($date)) {\n                $date = date('Y-m-d');\n            }\n            return $date;\n        }\n\n        private function generateCacheKey($source, $destination, $date)\n        {\n            return [__CLASS__, $source, $destination, $date];\n        }\n    }\n    ```", "```php\n    'components' => [\n        'cache' => [\n            'class' => 'yii\\caching\\FileCache',\n        ],\n        'exchange' => [\n            'class' => 'app\\components\\Exchange',\n            'enableCaching' => true,\n        ],\n        // ...\n        db' => $db,\n    ],\n    ```", "```php\n    echo \\Yii::$app->exchange->getRate('USD', 'EUR');\n    echo \\Yii::$app->get('exchange')->getRate('USD', 'EUR', '2014-04-12');\n    ```", "```php\n    <?php\n    namespace app\\commands;\n\n    use yii\\console\\Controller;\n\n    class ExchangeController extends Controller\n    {\n        public function actionTest($currency, $date = null)\n        {\n            echo \\Yii::$app->exchange->getRate('USD', $currency, $date) . PHP_EOL;\n        }\n    }\n    ```", "```php\n    $ ./yii exchange/test EUR\n    > 0.90196\n\n    $ ./yii exchange/test EUR 2015-11-24\n    > 0.93888\n\n    $ ./yii exchange/test OTHER\n    > Exception 'yii\\base\\InvalidParamException' with message 'Invalid currency format.'\n\n     $ ./yii exchange/test EUR 2015/24/11\n    Exception 'yii\\base\\InvalidParamException' with message 'Invalid date format.'\n\n    $ ./yii exchange/test ASD\n    > Exception 'RuntimeException' with message 'Rate not found.'\n    ```", "```php\n    <?php\n    namespace app\\components;\n\n    class Formatter extends \\yii\\i18n\\Formatter\n    {\n        public function asNumber($value, $decimal = 2)\n        {\n            return number_format($value, $decimal, '.', ',');\n        }\n    }\n    ```", "```php\n    'components' => [\n        // ...\n        formatter => [\n            'class' => 'app\\components\\Formatter,\n        ],\n        // ...\n    ],\n    ```", "```php\n    echo Yii::app()->formatter->asNumber(1534635.2, 3);\n    ```", "```php\n    <?= \\yii\\grid\\GridView::widget([\n        'dataProvider' => $dataProvider,\n        'columns' => [\n            'id',\n            'created_at:datetime',\n            'title',\n            'value:number',\n        ],\n    ]) ?>\n    ```", "```php\n    <?php\n    use yii\\db\\Migration;\n\n    class m160308_093233_create_post_table extends Migration\n    {\n        public function up()\n        {\n            $this->createTable('{{%post}}', [\n                'id' => $this->primaryKey(),\n                'title' => $this->string()->notNull(),\n                'text' => $this->text()->notNull(),\n            ]);\n        }\n\n        public function down()\n        {\n            $this->dropTable('{{%post}}');\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\actions;\n\n    use yii\\base\\Action;\n    use yii\\base\\InvalidConfigException;\n    use yii\\web\\MethodNotAllowedHttpException;\n    use yii\\web\\NotFoundHttpException;\n\n    class DeleteAction extends Action\n    {\n        public $modelClass;\n        public $redirectTo = ['index'];\n\n        public function init()\n        {\n            if (empty($this->modelClass)) {\n                throw new InvalidConfigException('Empty model class.');\n            }\n            parent::init();\n        }\n\n        public function run($id)\n        {\n            if (!\\Yii::$app->getRequest()->getIsPost()) {\n                throw new MethodNotAllowedHttpException('Method not allowed.');\n            }\n            $model = $this->findModel($id);\n            $model->delete();\n            return $this->controller->redirect($this->redirectTo);\n        }\n\n        /**\n        * @param $id\n        * @return \\yii\\db\\ActiveRecord\n        * @throws NotFoundHttpException\n        */\n        private function findModel($id)\n        {\n            $class = $this->modelClass;\n            if (($model = $class::findOne($id)) !== null) {\n                return $model;\n            } else {\n                throw new NotFoundHttpException('Page does not exist.');\n            }\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n\n    use app\\actions\\DeleteAction;\n    use Yii;\n    use app\\models\\Post;\n    use app\\models\\PostSearch;\n    use yii\\web\\Controller;\n    use yii\\web\\NotFoundHttpException;\n\n    class PostController extends Controller\n    {\n        public function actions()\n        {\n            return [\n                'delete' => [\n                    'class' => DeleteAction::className(),\n                    'modelClass' => Post::className(),\n                ],\n            ];\n        }\n\n        public function actionIndex()  {  ...  }\n\n        public function actionView($id)  {  ...  }\n\n        public function actionCreate()  {  ...  }\n\n        public function actionUpdate($id)  {  ...  }\n\n        protected function findModel($id)\n        {\n            if (($model = Post::findOne($id)) !== null) {\n                return $model;\n            } else {\n                throw new NotFoundHttpException('The requested page does not exist.');\n            }\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\cleaner;\n\n    use Yii;\n    use yii\\filters\\VerbFilter;\n    use yii\\helpers\\FileHelper;\n    use yii\\web\\Controller;\n\n    class CleanController extends Controller\n    {\n        public $assetPaths = ['@app/web/assets'];\n        public $runtimePaths = ['@runtime'];\n        public $caches = ['cache'];\n\n        public function behaviors()\n        {\n            return [\n                'verbs' => [\n                    'class' => VerbFilter::className(),\n                    'actions' => [\n                        'assets' => ['post'],\n                        'runtime' => ['post'],\n                        'cache' => ['post'],\n                    ],\n                ],\n            ];\n        }\n\n        public function actionIndex()\n        {\n            return $this->render('@app/cleaner/views/index');\n        }\n\n        public function actionAssets()\n        {\n            foreach ((array)$this->assetPaths as $path) {\n                $this->cleanDir($path);\n                Yii::$app->session->addFlash(\n                    'cleaner',\n                    'Assets path \"' . $path . '\" is cleaned.'\n                );\n            }\n            return $this->redirect(['index']);\n        }\n\n        public function actionRuntime()\n        {\n            foreach ((array)$this->runtimePaths as $path) {\n                $this->cleanDir($path);\n                Yii::$app->session->addFlash(\n                    'cleaner',\n                    'Runtime path \"' . $path . '\" is cleaned.'\n                );\n            }\n            return $this->redirect(['index']);\n        }\n\n        public function actionCache()\n        {\n            foreach ((array)$this->caches as $cache) {\n                Yii::$app->get($cache)->flush();\n                Yii::$app->session->addFlash(\n                    'cleaner',\n                    'Cache \"' . $cache . '\" is cleaned.'\n                );\n            }\n            return $this->redirect(['index']);\n        }\n\n        private function cleanDir($dir)\n        {\n            $iterator = new \\DirectoryIterator(Yii::getAlias($dir));\n            foreach($iterator as $sub) {\n                if(!$sub->isDot() && $sub->isDir()) {\n                    FileHelper::removeDirectory($sub->getPathname());\n                }\n            }\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n    /* @var $this yii\\web\\View */\n    $this->title = 'Cleaner';\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"clean-index\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <?php if (Yii::$app->session->hasFlash('cleaner')): ?>\n        <?php foreach ((array)Yii::$app->session->getFlash('cleaner', []) as $message): ?>\n        <div class=\"alert alert-success\">\n            <?= $message ?>\n        </div>\n        <?php endforeach; ?>\n        <?php endif; ?>\n\n        <p>\n            <?= Html::a('Clear Caches', ['cache'], [\n                'class' => 'btn btn-primary',\n                'data' => [\n                    'confirm' => 'Are you sure you want to clear all cache data?',\n                    'method' => 'post',\n                ],\n            ]) ?>\n            <?= Html::a('Clear Assets', ['assets'], \n                ['class' => 'btn btn-primary',\n                    'data' => [\n                        'confirm' => 'Are you sure you want to \n                            clear all temporary assets?',\n                    'method' => 'post',\n                ],\n            ]) ?>\n            <?= Html::a('Clear Runtime', ['runtime'], \n                ['class' => 'btn btn-primary',\n                    'data' => [\n                        'confirm' => 'Are you sure you want to clear all runtime files?',\n                            'method' => 'post',\n                    ],\n                ]) ?>\n        </p>\n    </div>\n    ```", "```php\n    $config = [\n        'id' => 'basic',\n        'basePath' => dirname(__DIR__),\n        'bootstrap' => ['log'],\n        'controllerMap' => [\n            'clean' => 'app\\cleaner\\CleanController',\n        ],\n        'components' => [\n            ...\n        ]\n        ...\n    ];\n    ```", "```php\n    echo Nav::widget([\n        'options' => ['class' => 'navbar-nav navbar-right'],\n        'items' => [\n            ['label' => 'Home', 'url' => ['/site/index']],\n            ['label' => 'Cleaner', 'url' => ['/clean/index']],\n            ['label' => 'About', 'url' => ['/site/about']],\n            ...\n        ],\n    ]);\n    ```", "```php\n    'controllerMap' => [\n        'clean' => 'app\\cleaner\\CleanController',\n        'assetPaths' => [\n            '@backend/web/assets',\n            '@frontend/web/assets',\n        ],\n        'runtimePaths' => [\n            '@backend/runtime',\n            '@frontend/runtime',\n            '@console/runtime',\n        ],\n    ],\n    ```", "```php\n    <?php\n    namespace app\\widgets;\n\n    use yii\\base\\Widget;\n\n    class ChartWidget extends Widget\n    {\n        public $title;\n        public $width = 300;\n        public $height = 200;\n        public $data = [];\n        public $labels = [];\n\n        public function run()\n        {\n            $path = 'http://chart.apis.google.com/chart';\n\n            $query = http_build_query([\n                'chtt' => $this->title,\n                'cht' => 'pc',\n                'chs' => $this->width . 'x' . $this->height,\n                'chd' => 't:' . implode(',', $this->data),\n                'chds' => 'a',\n                'chl' => implode('|', $this->labels),\n                'chxt' => 'y',\n                'chxl' => '0:|0|' . max($this->data)\n            ]);\n\n            $url = $path  . '?' . $query;\n\n            return $this->render('chart', [\n                'url' => $url,\n            ]);\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n    /* @var $url string */\n    ?>\n\n    <div class=\"chart\">\n        <?= Html::img($url) ?>\n    </div>\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n\n    use yii\\base\\Controller;\n\n    class ChartController extends Controller\n    {\n        public function actionIndex()\n        {\n            return $this->render('index');\n        }\n    }\n    ```", "```php\n    <?php\n    use app\\widgets\\ChartWidget;\n    use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n\n    $this->title = 'Chart';\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"site-about\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <?= ChartWidget::widget([\n            'title' => 'My Chart Diagram',\n            'data' => [\n                100 - 32,\n                    32,\n            ],\n            'labels' => [\n                'Big',\n                'Small',\n            ],\n        ]) ?>\n    </div>\n    ```", "```php\n    <?php\n    namespace app\\commands;\n\n    use yii\\console\\Controller;\n    use yii\\helpers\\FileHelper;\n\n    /**\n    * Removes content of assets and runtime directories.\n    */\n    class CleanController extends Controller\n    {\n        public $assetPaths = ['@app/web/assets'];\n        public $runtimePaths = ['@runtime'];\n\n        /**\n        * Removes temporary assets.\n        */\n        public function actionAssets()\n        {\n            foreach ((array)$this->assetPaths as $path) {\n                $this->cleanDir($path);\n            }\n\n            $this->stdout('Done' . PHP_EOL);\n        }\n\n        /**\n        * Removes runtime content.\n        */\n        public function actionRuntime()\n        {\n            foreach ((array)$this->runtimePaths as $path) {\n                $this->cleanDir($path);\n            }\n\n            $this->stdout('Done' . PHP_EOL);\n        }\n\n        private function cleanDir($dir)\n        {\n            $iterator = new \\DirectoryIterator(\\Yii::getAlias($dir));\n            foreach($iterator as $sub) {\n                if(!$sub->isDot() && $sub->isDir()) {\n                    $this->stdout('Removed ' . $sub->getPathname() . PHP_EOL);\n                    FileHelper::removeDirectory($sub->getPathname());\n                }\n            }\n        }\n    }\n    ```", "```php\n    ./yii\n\n    ```", "```php\n    This is Yii version 2.0.7.\n\n    The following commands are available:\n\n    - asset                    Allows you to combine...\n     asset/compress         Combines and compresses the asset...\n     asset/template         Creates template of configuration file...\n\n    ...\n\n    - clean                    Removes content of assets and runtime directories.\n     clean/assets           Removes temporary assets.\n     clean/runtime          Removes runtime content.\n\n    - fixture                  Manages fixture data loading and unloading.\n     fixture/load (default) Loads the specified fixture data.\n     fixture/unload         Unloads the specified fixtures.\n\n    ...\n\n    ```", "```php\n    .yii clean/assets\n\n    ```", "```php\n    Removed /yii-book.app/web/assets/25f82b8a\n    Removed /yii-book.app/web/assets/9b3b2888\n    Removed /yii-book.app/web/assets/f4307424\n    Done\n\n    ```", "```php\n    return [\n        'id' => 'app-console',\n        'basePath' => dirname(__DIR__),\n        'bootstrap' => ['log'],\n        'controllerNamespace' => 'console\\controllers',\n        'controllerMap' => [\n            'clean' => [\n                'class' => 'console\\controllers\\CleanController',\n                'assetPaths' => [\n                    '@backend/web/assets',\n                    '@frontend/web/assets',\n                ],\n                'runtimePaths' => [\n                    '@backend/runtime',\n                    '@frontend/runtime',\n                    '@console/runtime',\n                ],\n            ],\n        ],\n        // ...\n    ];\n    ```", "```php\npublic function getHelp()\n{\n    $out = \"Clean command allows you to clean up various temporary data Yii and an application are generating.\\n\\n\";\n    return $out . parent::getHelp();\n}\n```", "```php\n./yii help clean\n\n```", "```php\nDESCRIPTION\nClean command allows you to clean up various temporary data Yii and an application are generating.\nRemoves content of assets and runtime directories.\nSUB-COMMANDS\n- clean/assets   Removes temporary assets.\n- clean/runtime  Removes runtime content.\n\n```", "```php\n./yii\n\n```", "```php\n- clean                    Removes content of assets and runtime directories.\n clean/assets           Removes temporary assets.\n clean/runtime          Removes runtime content.\n\n```", "```php\n/**\n* Removes content of assets and runtime directories.\n*/\nclass CleanController extends Controller\n{\n    /**\n    * Removes temporary assets.\n    */\n    public function actionAssets() { â€¦ }\n\n    * Removes runtime content.\n    */\n    public function actionRuntime() { â€¦ }\n}\n```", "```php\n    <?php\n    namespace app\\models;\n\n    use yii\\base\\Model;\n\n    class AgreementForm extends Model\n    {\n        public $accept;\n\n        public function rules()\n        {\n            return [\n                ['accept', 'required'],\n                ['accept', 'compare', 'compareValue' => 1, 'message' => 'You must agree the rules.'],\n            ];\n        }\n\n        public function attributeLabels()\n        {\n            return [\n                'accept' => 'I completely accept the rules.'\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\services;\n\n    use Yii;\n    use yii\\web\\Cookie;\n\n    class AgreementChecker\n    {\n        public function isAllowed()\n        {\n            return Yii::$app->request->cookies->has('agree');\n        }\n\n        public function allowAccess()\n        {\n            Yii::$app->response->cookies->add(new Cookie([\n                'name' => 'agree',\n                'value' => 'on',\n                'expire' => time() + 3600 * 24 * 90, // 90 days\n            ]));\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\filters;\n\n    use app\\services\\AgreementChecker;\n    use Yii;\n    use yii\\base\\ActionFilter;\n\n    class AgreementFilter extends ActionFilter\n    {\n        public function beforeAction($action)\n        {\n            $checker = new AgreementChecker();\n            if (!$checker->isAllowed()) {\n                Yii::$app->response->redirect(['/content/agreement'])->send();\n                return false;\n            }\n            return true;\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n\n    use app\\filters\\AgreementFilter;\n    use app\\models\\AgreementForm;\n    use app\\services\\AgreementChecker;\n    use Yii;\n    use yii\\web\\Controller;\n\n    class ContentController extends Controller\n    {\n        public function behaviors()\n        {\n            return [\n                [\n                    'class' => AgreementFilter::className(),\n                    'only' => ['index'],\n                ],\n            ];\n        }\n\n        public function actionIndex()\n        {\n            return $this->render('index');\n        }\n\n        public function actionAgreement()\n        {\n            $model = new AgreementForm();\n            if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n                $checker = new AgreementChecker();\n                $checker->allowAccess();\n                return $this->redirect(['index']);\n            } else {\n                return $this->render('agreement', [\n                    'model' => $model,\n                ]);\n            }\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n    $this->title = 'Content';\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"site-about\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <div class=\"well\">\n            This is our private page.\n        </div>\n    </div>\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n    use yii\\bootstrap\\ActiveForm;\n\n    /* @var $this yii\\web\\View */\n    /* @var $form yii\\bootstrap\\ActiveForm */\n    /* @var $model app\\models\\AgreementForm */\n\n    $this->title = 'User agreement';\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"site-login\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <p>Please agree with our rules:</p>\n\n        <?php $form = ActiveForm::begin(); ?>\n\n        <?= $form->field($model, 'accept')->checkbox() ?>\n\n        <div class=\"form-group\">\n            <?= Html::submitButton('Accept', ['class' => 'btn btn-success']) ?>\n            <?= Html::a('Cancel', ['/site/index'], ['class' => 'btn btn-danger']) ?>\n        </div>\n\n        <?php ActiveForm::end(); ?>\n    </div>\n    ```", "```php\n    echo Nav::widget([\n        'options' => ['class' => 'navbar-nav navbar-right'],\n        'items' => [\n            ['label' => 'Home', 'url' => ['/site/index']],\n            ['label' => 'Content', 'url' => ['/content/index']],\n            ['label' => 'About', 'url' => ['/site/about']],\n            ...\n        ],\n    ]);\n    ```", "```php\nclass AgreementFilter extends ActionFilter\n{\n    public function beforeAction($action)\n    {\n        $checker = new AgreementChecker();\n        if (!$checker->isAllowed()) {\n            Yii::$app->response->redirect(['/content/agreement'])->send();\n            return false;\n        }\n        return true;\n    }\n}\n```", "```php\npublic function behaviors() \n{\n    return [\n        [\n            'class' => AgreementFilter::className(),\n            'only' => ['index'],\n        ],\n    ];\n}\n```", "```php\n    <?php\n    namespace app\\modules\\log;\n\n    class Module extends \\yii\\base\\Module\n    {\n        public $file = '@runtime/logs/app.log';\n    }\n    ```", "```php\n    <?php\n    namespace app\\modules\\log\\models;\n\n    use yii\\base\\Object;\n\n    class LogRow extends Object\n    {\n        public $time;\n        public $ip;\n        public $userId;\n        public $sessionId;\n        public $level;\n        public $category;\n        public $text;\n    }\n    ```", "```php\n    <?php\n    namespace app\\modules\\log\\services;\n\n    use app\\modules\\log\\models\\LogRow;\n\n    class LogReader\n    {\n        public function getRows($file)\n        {\n            $result = [];\n            $handle = @fopen($file, \"r\");\n            if ($handle) {\n                while (($row = fgets($handle)) !== false) {\n                    $pattern =\n                        '#^' .\n                        '(?P<time>\\d{4}\\-\\d{2}\\-\\d{2} \\d{2}:\\d{2}:\\d{2}) ' .\n                        '\\[(?P<ip>[^\\]]+)\\]' .\n                        '\\[(?P<userId>[^\\]]+)\\]' .\n                        '\\[(?P<sessionId>[^\\]]+)\\]' .\n                        '\\[(?P<level>[^\\]]+)\\]' .\n                        '\\[(?P<category>[^\\]]+)\\]' .\n                        ' (?P<text>.*?)' .\n                        '(\\$\\_(GET|POST|REQUEST|COOKIE|SERVER) = \\[)?' .\n                        '$#i';\n                    if (preg_match($pattern, $row, $matches)) {\n                        if ($matches['text']) {\n                            $result[] = new LogRow([\n                                'time' => $matches['time'],\n                                'ip' => $matches['ip'],\n                                'userId' => $matches['userId'],\n                                'sessionId' => $matches['sessionId'],\n                                'level' => $matches['level'],\n                                'category' => $matches['category'],\n                                'text' => $matches['text'],\n                            ]);\n                        }\n                    }\n                }\n                fclose($handle);\n            }\n            return array_reverse($result);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\modules\\log\\helpers;\n\n    use yii\\helpers\\ArrayHelper;\n    use yii\\helpers\\Html;\n\n    class LogHelper\n    {\n        public static function levelLabel($level)\n        {\n            $classes = [\n                'error' => 'danger',\n                'warning' => 'warning',\n                'info' => 'primary',\n                'trace' => 'default',\n                'profile' => 'success',\n                'profile begin' => 'info',\n                'profile end' => 'info',\n            ];\n\n            $class = ArrayHelper::getValue($classes, $level, 'default');\n            return Html::tag('span', Html::encode($level), ['class' => 'label-' . $class]);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\modules\\log\\controllers;\n\n    use app\\modules\\log\\services\\LogReader;\n    use yii\\data\\ArrayDataProvider;\n    use yii\\web\\Controller;\n\n    class DefaultController extends Controller\n    {\n        public function actionIndex()\n        {\n            $reader = new LogReader();\n            $dataProvider = new ArrayDataProvider([\n                'allModels' => $reader->getRows($this->getFile()),\n            ]);\n            return $this->render('index', [\n                'dataProvider' => $dataProvider,\n            ]);\n        }\n\n        private function getFile()\n        {\n            return \\Yii::getAlias($this->module->file);\n        }\n    }\n    ```", "```php\n    <?php\n    use app\\modules\\log\\helpers\\LogHelper;\n    use app\\modules\\log\\models\\LogRow;\n    use yii\\grid\\GridView;\n    use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n    /* @var $dataProvider yii\\data\\ArrayDataProvider */\n\n    $this->title = 'Application log';\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"log-index\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <?= GridView::widget([\n            'dataProvider' => $dataProvider,\n            'columns' => [\n                [\n\n                'attribute' => 'time',\n                    'format' => 'datetime',\n                    'contentOptions' => [\n                        'style' => 'white-space: nowrap',\n                    ],\n                ],\n                'ip:text:IP',\n                'userId:text:User',\n                [\n                    'attribute' => 'level',\n                    'value' => function (LogRow $row) {\n                        return LogHelper::levelLabel($row->level);\n                    },\n                    'format' => 'raw',\n                ],\n                'category',\n                'text',\n            ],\n        ]) ?>\n    </div>\n    ```", "```php\n    $config = [\n        'id' => 'basic',\n        'basePath' => dirname(__DIR__),\n        'bootstrap' => ['log'],\n        'modules' => [\n            'log' => 'app\\modules\\log\\Module',\n        ],\n        'components' => [\n\n        ],\n        ...\n    ];\n    ```", "```php\n    echo Nav::widget([\n        'options' => ['class' => 'navbar-nav navbar-right'],\n        'items' => [\n            ['label' => 'Home', 'url' => ['/site/index']],\n            ['label' => 'Log', 'url' => ['/log/default/index']],\n            ['label' => 'About', 'url' => ['/site/about']],\n            ['label' => 'Contact', 'url' => ['/site/contact']],\n            ...\n        ],\n    ]);\n    NavBar::end();\n    ```", "```php\n    composer require smarty/smarty\n\n    ```", "```php\n    <?php\n    namespace app\\smarty;\n\n    use Smarty;\n    use Yii;\n\n    class ViewRenderer extends \\yii\\base\\ViewRenderer\n    {\n        public $cachePath = '@runtime/smarty/cache';\n        public $compilePath = '@runtime/smarty/compile';\n\n        /**\n        * @var Smarty\n        */\n        private $smarty;\n\n        public function init()\n        {\n            $this->smarty = new Smarty();\n            $this->smarty->setCompileDir(Yii::getAlias($this->compilePath));\n            $this->smarty->setCacheDir(Yii::getAlias($this->cachePath));\n            $this->smarty->setTemplateDir([\n                dirname(Yii::$app->getView()->getViewFile()),\n                Yii::$app->getViewPath(),\n            ]);\n        }\n\n        public function render($view, $file, $params)\n        {\n            $templateParams = empty($params) ? null : $params;\n            $template = $this->smarty->createTemplate($file, null, null, $templateParams, false);\n            $template->assign('app', \\Yii::$app);\n            $template->assign('this', $view);\n            return $template->fetch();\n        }\n    }\n    ```", "```php\n    'components' => [\n        ....\n        'view' => [\n            'renderers' => [\n                'tpl' => [\n                    'class' => 'app\\smarty\\ViewRenderer',\n                ],\n            ],\n        ],\n        ...\n    ];\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n\n    use yii\\web\\Controller;\n\n    class SmartyController extends Controller\n    {\n        public function actionIndex()\n        {\n            return $this->render('index.tpl', [\n                'name' => 'Bond',\n            ]);\n        }\n    }\n    ```", "```php\n    <div class=\"smarty-index\">\n        <h1>Smarty Example</h1>\n        <p>Hello, {$name}!</p>\n    </div>\n    ```", "```php\n<?php\nnamespace yii\\base;\n\nabstract class ViewRenderer extends Component\n{\n    /**\n    * Renders a view file.\n    *\n    * This method is invoked by [[View]] whenever it tries to render a view.\n    * Child classes must implement this method to render the given view file.\n    *\n    * @param View $view the view object used for rendering the file.\n    * @param string $file the view file.\n    * @param array $params the parameters to be passed to the view file.\n    * @return string the rendering result\n    */\n   abstract public function render($view, $file, $params);\n}\n```", "```php\nclass ViewRenderer extends \\yii\\base\\ViewRenderer\n{\n    public $cachePath = '@runtime/smarty/cache';\n    public $compilePath = '@runtime/smarty/compile';\n    private $smarty;\n\n    public function init()\n    {\n        $this->smarty = new Smarty();\n        $this->smarty->setCompileDir(Yii::getAlias($this->compilePath));\n        $this->smarty->setCacheDir(Yii::getAlias($this->cachePath));\n        $this->smarty->setTemplateDir([\n            dirname(Yii::$app->getView()->getViewFile()),\n            Yii::$app->getViewPath(),\n        ]);\n    }\n    â€¦\n}\n```", "```php\npublic function render($view, $file, $params)\n{\n    $templateParams = empty($params) ? null : $params;\n    $template = $this->smarty->createTemplate($file, null, null, $templateParams, false);\n    $template->assign('app', \\Yii::$app);\n    $template->assign('this', $view);\n    return $template->fetch();\n}\n```", "```php\n    echo Nav::widget([\n        'options' => ['class' => 'navbar-nav navbar-right'],\n        'items' => [\n            ['label' => Yii::t('app/nav', 'Home'), 'url' => ['/site/index']],\n            ['label' => Yii::t('app/nav', 'About'), 'url' => ['/site/about']],\n            ['label' => Yii::t('app/nav', 'Contact'), 'url' => ['/site/contact']],\n            ...\n        ],\n    ]);\n    ```", "```php\n    $this->title = Yii::t('app', 'Contact');\n    $this->params['breadcrumbs'][] = $this->title;\n    ```", "```php\n    <div class=\"form-group\">\n        <?= Html::submitButton(Yii::t('app', 'Submit'), ['class' => 'btn btn-primary'']) ?>\n    </div>\n    ```", "```php\n    <p>\n        <?= Yii::t('app', 'The above error occurred while the Web server was processing your request.') ?>\n    </p>\n    ```", "```php\n    class LoginForm extends Model\n    {\n        ...\n\n        public function attributeLabels()\n        {\n            return [\n                'username' => Yii::t('app/user', 'Username'),\n                'password' => Yii::t('app/user', 'Password'),\n                'rememberMe' => Yii::t('app/user', 'Remember Me'),\n            ];\n        }\n    }\n    ```", "```php\n    class ContactForm extends Model\n    {\n        ...\n\n        public function attributeLabels()\n        {\n            return [\n                'name' => Yii::t('app/contact', 'Name'),\n                'email' => Yii::t('app/contact', 'Email'),\n                'subject' => Yii::t('app/contact', 'Subject'),\n                'body' => Yii::t('app/contact', 'Body'),\n                'verifyCode' => Yii::t('app', 'Verification Code'),\n            ];\n        }\n    }\n    ```", "```php\n    ./yii message/config-template config/messages.php\n\n    ```", "```php\n    <?php\n\n    return [\n        'sourcePath' => '@app',\n        'languages' => ['de', 'fr'],\n        'translator' => 'Yii::t',\n        'sort' => false,\n        'removeUnused' => false,\n        'markUnused' => true,\n        'only' => ['*.php'],\n        'except' => [\n            '.svn',\n            '.git',\n            '.gitignore',\n            '.gitkeep',\n            '.hgignore',\n            '.hgkeep',\n            '/messages',\n            '/vendor',\n        ],\n\n        'format' => 'php',\n        'messagePath' => '@app/messages',\n        'overwrite' => true,\n\n        'ignoreCategories' => [\n            'yii',\n        ],\n    ];\n    ```", "```php\n    ./yii message config/messages.php\n\n    ```", "```php\n    messages\n    â”œâ”€â”€ de\n    â”‚   â”œâ”€â”€ app\n    â”‚   â”‚   â”œâ”€â”€ contact.php\n    â”‚   â”‚   â”œâ”€â”€ nav.php\n    â”‚   â”‚   â””â”€â”€ user.php\n    â”‚   â””â”€â”€ app.php\n    â””â”€â”€ fr\n        â”œâ”€â”€ app\n        â”‚   â”œâ”€â”€ contact.php\n        â”‚   â”œâ”€â”€ nav.php\n        â”‚   â””â”€â”€ user.php\n        â””â”€â”€ app.php\n    ```", "```php\n    <?php\n    ... \n    return [\n        'Body' => '',\n        'Email' => '',\n        'Name' => '',\n        'Subject' => '',\n    ];\n    ```", "```php\n    <?php\n    ... \n    return [\n        'Password' => 'Passwort',\n        'Remember Me' => 'Erinnere dich an mich',\n        'Username' => 'Benutzername',\n    ];\n    ```", "```php\n    $config = [\n        'id' => 'basic',\n        'basePath' => dirname(__DIR__),\n        'bootstrap' => ['log'],\n        'components' => [\n            â€¦\n            'i18n' => [\n                'translations' => [\n                    'app*' => [\n                        'class' => 'yii\\i18n\\PhpMessageSource',\n                        'sourceLanguage' => 'en-US',\n                    ],\n                ],\n            ],\n            'db' => require(__DIR__ . '/db.php'),\n        ],\n        'params' => $params,\n    ];\n    ```", "```php\n    $config = [\n        'id' => 'basic',\n        'language' => 'de',\n        'basePath' => dirname(__DIR__),\n        'bootstrap' => ['log'],\n        ...\n    ];\n    ```", "```php\n$config = [\n    'id' => 'basic',\n    'language' => 'de',\n    ...\n];\n```", "```php\nYii::$app->language = 'fr';\n```", "```php\n<?php\nnamespace app\\bootstrap;\n\nuse yii\\base\\BootstrapInterface;\n\nclass LanguageBootstrap implements BootstrapInterface\n{\n    public function bootstrap($app)\n    {\n        if (!$app->user->isGuest) {\n            $app->language = $app->user->identity->lang;\n        }\n    }\n}\n```", "```php\n$config = [\n    'id' => 'basic',\n    'basePath' => dirname(__DIR__),\n    'bootstrap' => ['log', 'app'bootstrap\\LanguageBoostrap'],\n    ...\n];\n```"]