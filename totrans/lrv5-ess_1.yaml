- en: Chapter 1. An Introduction to Laravel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Laravel简介
- en: PHP frameworks aren't new, but one of the newest on the block is Laravel. Since
    version 3, Laravel has exploded in popularity to become one of the most popular
    and widely used PHP frameworks in a short span of time. At the time of writing,
    the Laravel repository on GitHub has more stars than its more mature contemporaries
    such as Symfony, CakePHP, CodeIgniter, and Yii. So what is it about Laravel that
    makes it so popular?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PHP框架并不新鲜，但最新的是Laravel。自第3版以来，Laravel在短时间内迅速崛起，成为最受欢迎和最广泛使用的PHP框架之一。在撰写本文时，GitHub上的Laravel存储库的星标数量超过了其更成熟的同行，如Symfony、CakePHP、CodeIgniter和Yii。那么，是什么让Laravel如此受欢迎呢？
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How the productivity can be increased using a framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过使用框架来提高生产力
- en: The fundamental concepts and key features of Laravel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Laravel的基本概念和关键特性
- en: The general structure and conventions of a new Laravel application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新建Laravel应用程序的一般结构和约定
- en: An introduction to the Model-View-Controller (MVC) design pattern, on which
    Laravel is based
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍基于Laravel的模型-视图-控制器（MVC）设计模式
- en: Migration tips for users of the previous versions of Laravel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Laravel旧版本用户提供的迁移技巧
- en: We will look at its key features and how they have made Laravel an indispensable
    tool for many web developers. We will compare writing PHP applications with and
    without a framework, and see how using a framework can aid in writing more robust
    and better-structured PHP applications. Then, we will take a closer look at the
    anatomy of a Laravel application and the third-party packages that it leverages.
    After reading this chapter, you will have the knowledge needed to get started
    and build your first Laravel application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨其关键特性和它们是如何使Laravel成为许多Web开发人员不可或缺的工具。我们将比较使用和不使用框架编写PHP应用程序，并看看使用框架如何有助于编写更健壮和结构更好的PHP应用程序。然后，我们将更深入地研究Laravel应用程序的结构和它所利用的第三方包。阅读完本章后，您将拥有开始构建您的第一个Laravel应用程序所需的知识。
- en: The need for frameworks
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对框架的需求
- en: Of all the server-side programming languages, PHP undoubtedly has the lowest
    entry barriers. It is almost always installed by default on even the cheapest
    web hosts, and it is also extremely easy to set up on any personal computer. For
    newcomers who have some experience with authoring web pages in HTML and CSS, the
    concepts of variables, inline conditions, and `include` statements are easy to
    grasp. PHP also provides many commonly used functions that one might need when
    developing a dynamic website. All of this contributes to what some refer to as
    the **immediacy** of PHP. However, this instant gratification comes at a cost.
    It gives a false sense of productivity to beginners, who almost inevitably end
    up with convoluted spaghetti code as they add more features and functionality
    to their site. This is mainly because PHP, out of the box, does not do much to
    encourage the separation of concerns.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有服务器端编程语言中，PHP无疑具有最低的入门门槛。它几乎总是默认安装在即使是最低成本的Web托管服务上，而且它也非常容易在任何个人计算机上设置。对于有HTML和CSS网页编写经验的初学者来说，变量、内联条件和`include`语句的概念很容易理解。PHP还提供了许多在开发动态网站时可能需要的常用函数。所有这些都为一些人所说的PHP的**即时性**做出了贡献。然而，这种即时的满足感是有代价的。它给初学者一种虚假的生产力感，他们几乎不可避免地会在添加更多功能和功能到他们的网站时，最终得到一团糟的意大利面代码。这主要是因为PHP本身并没有做很多来鼓励关注点的分离。
- en: The limitations of homemade tools
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自制工具的限制
- en: If you already have a few PHP projects under your belt, but have not used a
    web application framework before, then you will probably have amassed a personal
    collection of commonly used functions and classes that you can use on new projects.
    These homegrown utilities might help you with common tasks, such as sanitizing
    data, authenticating users, and including pages dynamically. You might also have
    a predefined directory structure where these classes and the rest of your application
    code reside. However, all of this will exist in complete isolation; you will be
    solely responsible for the maintenance, inclusion of new features, and documentation.
    For a lone developer or an agency with ever-changing staff, this can be a tedious
    and time-consuming task, not to mention that if you were to collaborate with other
    developers on the project, they would first have to get acquainted with the way
    in which you build applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有一些PHP项目经验，但之前没有使用过Web应用程序框架，那么你可能会积累了一些常用的函数和类，可以在新项目中使用。这些自制的实用工具可以帮助你完成常见任务，如清理数据、验证用户和动态包含页面。你可能还有一个预定义的目录结构，其中包含这些类以及你应用程序的其余代码。然而，所有这些都将完全独立存在；你将完全负责维护、添加新功能和编写文档。对于一个单独的开发者或人员不断变化的代理机构来说，这可能是一项繁琐且耗时的任务，更不用说如果你要与项目中的其他开发者合作，他们首先必须熟悉你构建应用程序的方式。
- en: Laravel to the rescue
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel来救命
- en: This is exactly where a web application framework such as Laravel comes to the
    rescue. Laravel reuses and assembles existing components to provide you with a
    cohesive layer upon which you can build your web applications in a more structured
    and pragmatic way. Drawing inspiration from popular frameworks written not just
    in PHP but other programming languages too, Laravel offers a robust set of tools
    and an application architecture that incorporates many of the best features of
    frameworks like CodeIgniter, Yii, ASP.NET MVC, Ruby on Rails, Sinatra, and others.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是像Laravel这样的Web应用程序框架可以救命的地方。Laravel重用和组装现有组件，为你提供一个统一的层，你可以在这个层上以更结构化和实用化的方式构建Web应用程序。Laravel从不仅限于PHP，还包括其他编程语言的流行框架中汲取灵感，提供了一套强大的工具和应用程序架构，它结合了许多像CodeIgniter、Yii、ASP.NET
    MVC、Ruby on Rails、Sinatra等其他框架的最佳特性。
- en: Most of these frameworks use the **Model-View-Controller** (**MVC**) paradigm
    or design pattern. If you have used one of the aforementioned tools or the MVC
    pattern, then you will find it quite easy to get started with Laravel 5.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些框架都使用**模型-视图-控制器**（**MVC**）范式或设计模式。如果你使用过上述工具或MVC模式，那么你会发现开始使用Laravel 5相当容易。
- en: A new approach to developing PHP applications
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发PHP应用程序的新方法
- en: As previously mentioned, PHP gained a bad reputation over the years due to lots
    of badly-written websites and web applications, and its shortcomings when compared
    to other, more mature languages. PHP is also notorious for its naming inconsistencies
    and questionable design decisions regarding its syntax. As a consequence, there
    has been an exodus to more credible frameworks written in **Ruby** and **Python**.
    Since these languages were nowhere as feature-rich for the Web as PHP, the creators
    of Ruby on Rails and Django, for instance, had to recreate some essential building
    blocks, such as classes, to represent HTTP requests and responses and were, therefore,
    able to avoid some of the mistakes that PHP had made before them, due to the luxury
    of starting from a blank slate. These frameworks also forced the developer to
    adhere to a predefined application architecture.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，PHP由于许多编写不良的网站和Web应用程序以及与其他更成熟语言相比的不足，在多年中获得了坏名声。PHP在命名不一致和关于其语法的有疑问的设计决策方面也臭名昭著。因此，许多人转向了用**Ruby**和**Python**编写的更可信的框架。由于这些语言在Web方面的功能远不如PHP丰富，例如Ruby
    on Rails和Django的创造者，不得不重新创建一些基本构建块，如类，以表示HTTP请求和响应，因此能够避免PHP在他们之前犯下的某些错误，因为从一张白纸开始有更多的自由。这些框架还迫使开发者遵守预定义的应用程序架构。
- en: However, it's now a great time to discover (or fall back in love with) PHP again,
    as over the past couple of years the language has rapidly evolved to include new
    features such as closures and traits, and a de facto package manager in Composer.
    Past complaints of PHP when compared to other languages are now exactly that,
    of the past, and PHP is slowly but surely changing the bad reputation it has suffered
    from, for so long.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在是一个很好的时机去发现（或者重新爱上）PHP，因为在这过去的几年里，这门语言迅速发展，包括了新的特性，如闭包和 traits，以及事实上的包管理器
    Composer。与其他语言相比，PHP 过去的抱怨现在正是如此，是过去的，PHP 正在缓慢但肯定地改变它长期遭受的坏名声。
- en: A more robust HTTP foundation
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更健壮的HTTP基础
- en: After years of people developing their own, unique approach of handling common
    tasks, such as handling requests and responses, specifically for their own projects,
    one framework took a different approach and instead, began creating components
    that could be used in any codebase no matter its foundation, be it homegrown or
    based on a framework. The **Symfony** project adopted these principles to recreate
    a more solid, flexible, and testable HTTP foundation for PHP applications. Along
    with the latest version of Drupal and phpBB, Laravel is one of the many open source
    projects that use this foundation together with several other components that
    form the Symfony framework.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 经过多年人们开发自己独特的处理常见任务的方法，例如处理请求和响应，特别是针对他们自己的项目，一个框架采取了不同的方法，而不是开始创建可以在任何代码库中使用的组件，无论其基础是自建的还是基于框架的。**Symfony**
    项目采用了这些原则，为 PHP 应用程序重新创建了一个更坚固、更灵活、更可测试的 HTTP 基础。与 Drupal 和 phpBB 的最新版本一样，Laravel
    是众多使用此基础以及形成 Symfony 框架的几个其他组件的开源项目之一。
- en: Laravel is such a project that relies on the HTTP foundation created by Symfony.
    It also relies on other components created by Symfony, as well as a variety of
    other popular libraries, such as **SwiftMailer** for more straightforward e-mailing,
    **Carbon** for more expressive date and time handling, **Doctrine** for its inflector
    and database abstraction tools, and a handful of other tools to handle logging,
    class loading, and error reporting. Instead of re-inventing the wheel, Laravel
    decided to hop on the shoulder of giants and embrace these pre-existing mature
    components.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 是这样一个项目，它依赖于由 Symfony 创建的 HTTP 基础设施。它还依赖于由 Symfony 创建的其他组件，以及各种其他流行的库，例如
    **SwiftMailer** 用于更直接的电子邮件发送，**Carbon** 用于更丰富的日期和时间处理，**Doctrine** 提供其屈折词和数据库抽象工具，以及一些其他工具来处理日志记录、类加载和错误报告。Laravel
    决定不重新发明轮子，而是站在巨人的肩膀上，拥抱这些现有的成熟组件。
- en: Embracing PHP
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥抱 PHP
- en: 'One way in which Laravel differs from its contemporaries is that it openly
    embraces new features of PHP and in turn requires a fairly recent version (at
    least 5.4). Previously, other frameworks would build support for older versions
    of PHP to maintain backwards-compatibility for as long as possible. However, this
    approach meant that those same frameworks couldn''t take advantage of new features
    in the newer versions of PHP, in turn, hampering the evolution of PHP. Using Laravel
    5, you will get to grips with some of the newer features of PHP. If you''re new
    to PHP, or coming back to the language after a while, then here''s what you can
    expect to find:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 与其同行不同的一个方面是，它公开拥抱 PHP 的新特性，并相应地要求一个相当新的版本（至少 5.4）。以前，其他框架会构建对旧版本 PHP
    的支持，以尽可能长时间地保持向后兼容性。然而，这种方法意味着那些相同的框架无法利用 PHP 新版本中的新特性，从而阻碍了 PHP 的发展。使用 Laravel
    5，你将能够掌握 PHP 的一些新特性。如果你是 PHP 新手，或者一段时间后重返这门语言，那么你可以期待以下内容：
- en: '**Namespaces**: More mature languages such as Java and C# have namespaces.
    Namespaces help developers avoid naming collisions that might happen if say, two
    different libraries have the same function or class name. In PHP, namespaces are
    separated by backslashes, which is usually mirrored by the directory structure,
    with the only difference being the use of slashes on Unix systems, in accordance
    with the PSR-4 convention. A namespace, such as `<?php namespace Illuminate\Database\Eloquent`
    is declared at the top of the file. To use code from another namespace, it needs
    to be imported, which can be done with the `use` keyword, and then by specifying
    the namespace, that is, `use Illuminate\Database\Eloquent\Model`. Another advantage
    of namespaces is that you can alias imported classes, so as to avoid collisions
    with classes with the same name in another namespace or the global namespace.
    To do this, you use the `as` keyword after the `use` statement as `use Foo\Logger
    as FooLogger;`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间**：比 PHP 更成熟的语言，如 Java 和 C#，都有命名空间。命名空间帮助开发者避免可能发生的命名冲突，比如两个不同的库有相同的函数或类名。在
    PHP 中，命名空间由反斜杠分隔，这通常与目录结构相匹配，唯一的区别是在 Unix 系统中，根据 PSR-4 规范，使用斜杠。一个命名空间，如 `<?php
    namespace Illuminate\Database\Eloquent`，在文件顶部声明。要使用另一个命名空间中的代码，需要导入，这可以通过 `use`
    关键字完成，然后指定命名空间，即 `use Illuminate\Database\Eloquent\Model`。命名空间的另一个优点是可以为导入的类创建别名，以避免与另一个命名空间或全局命名空间中具有相同名称的类发生冲突。为此，你在
    `use` 语句之后使用 `as` 关键字，例如 `use Foo\Logger as FooLogger;`'
- en: '**Interfaces**: Interfaces specify the methods that a class should provide
    when that interface is implemented. Interfaces do not contain any implementation
    details themselves, merely the methods (and the arguments those methods should
    take). For instance, if a class implements Laravel''s `JsonableInterface` instance,
    then that class will also need to have a `toJson()` method. Within Laravel, interfaces
    tend to be referred to as **Contracts**.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口**：接口指定了当实现该接口时类应该提供的方法。接口本身不包含任何实现细节，只包含方法（以及这些方法应该接受的参数）。例如，如果一个类实现了
    Laravel 的 `JsonableInterface` 接口，那么这个类也需要有一个 `toJson()` 方法。在 Laravel 中，接口通常被称为
    **契约**。'
- en: '**Anonymous functions**: These are also known as `closures` and were introduced
    in PHP 5.3\. Somewhat reminiscent of JavaScript, they help you to produce shorter
    code, and you will use them extensively when building Laravel applications to
    define routes, events, filters, and in many other instances. This is an example
    of an anonymous function attached to a route: `Route::get(''/'', function() {
    return ''Hello, world.''; });`.In Laravel, this code creates a new **route** when
    the base path of a website is requested. When it is, the code in the closure is
    executed and returned as the response.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**匿名函数**：这些也被称为 `closures`，PHP 5.3 中引入。它们与 JavaScript 有点相似，可以帮助你编写更短的代码。在构建
    Laravel 应用程序时，你将广泛使用它们来定义路由、事件、过滤器等。这是一个附加到路由上的匿名函数示例：`Route::get(''/'', function()
    { return ''Hello, world.''; });`。在 Laravel 中，当请求网站的根路径时，这段代码创建了一个新的 **路由**。当请求发生时，闭包中的代码被执行并返回作为响应。'
- en: '**Overloading**: Also called `dynamic` methods, they allow you to call methods
    such as `whereUsernameOrEmail($name, $email)` that were not explicitly defined
    in a class. These calls get handled by the `__call()` method in the class, which
    then tries to parse the name to execute one or more known methods. In this case,
    `->where(''username'', $username)->orWhere(''email'', $email)`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法重载**：也称为“动态”方法，它们允许你调用在类中未显式定义的方法，例如 `whereUsernameOrEmail($name, $email)`。这些调用由类中的
    `__call()` 方法处理，该方法随后尝试解析名称以执行一个或多个已知方法。例如，`->where(''username'', $username)->orWhere(''email'',
    $email)`。'
- en: '**Shorter array syntax**: PHP 5.4 introduced the shorter array syntax. Instead
    of writing `array(''primes'' =>array(1,3,5,7))`, it is now possible to use just
    square brackets to denote an array, that is, `[''primes''=>[1,3,5,7]]`. You might
    know syntax if you''ve used arrays in JavaScript.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的数组语法**：PHP 5.4 引入了简化的数组语法。现在，你可以只用方括号来表示数组，即 `[''primes''=>[''1'',''3'',''5'',''7'']]`，而不再需要像
    `array(''primes'' =>array(1,3,5,7))` 这样写。如果你在 JavaScript 中使用过数组，你可能已经熟悉这种语法。'
- en: Laravel's main features and sources of inspiration
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel 的主要特性和灵感来源
- en: 'So, what do you get out of the box with Laravel 5? Let''s take a look and see
    how the following features can help boost your productivity:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Laravel 5 默认提供了哪些功能？让我们来看看以下功能如何帮助提高你的生产力：
- en: '**Modularity**: Laravel was built on top of over 20 different libraries and
    is itself split into individual modules. Tightly integrated with **Composer**
    dependency manager, these components can be updated with ease.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**：Laravel建立在20多个不同的库之上，并且自身被分割成单独的模块。与**Composer**依赖管理器紧密集成，这些组件可以轻松更新。'
- en: '**Testability**: Built from the ground up to ease testing, Laravel ships with
    several helpers that let you visit routes from your tests, crawl the resulting
    HTML, ensure that methods are called on certain classes, and even impersonate
    authenticated users in order to make sure the right code is run at the right time.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可测试性**：Laravel从构建之初就是为了简化测试而设计的，它自带了几个辅助工具，允许您从测试中访问路由，抓取生成的HTML，确保在特定的类上调用方法，甚至可以模拟认证用户以确保在正确的时间运行正确的代码。'
- en: '**Routing**: Laravel gives you a lot of flexibility when you define the routes
    of your application. For example, you could manually bind a simple anonymous function
    to a route with an HTTP verb, such as `GET`, `POST`, `PUT`, or `DELETE`. This
    feature is inspired by micro-frameworks, such as **Sinatra** (Ruby) and **Silex**
    (PHP).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**：当您定义应用程序的路由时，Laravel提供了很多灵活性。例如，您可以将一个简单的匿名函数手动绑定到一个带有HTTP动词的路由上，如`GET`、`POST`、`PUT`或`DELETE`。这个功能受到了像**Sinatra**（Ruby）和**Silex**（PHP）这样的微框架的启发。'
- en: '**Configuration management**: More often than not, your application will be
    running in different environments, which means that the database or e-mail server
    credential''s settings or the displaying of error messages will be different when
    your app is running on a local development server to when it is running on a production
    server. Laravel has a consistent approach to handle configuration settings, and
    different settings can be applied in different environments via the use of an
    `.env` file, containing settings unique for that environment.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置管理**：通常情况下，您的应用程序将在不同的环境中运行，这意味着当您的应用程序在本地开发服务器上运行时，数据库或电子邮件服务器凭证的设置或错误信息的显示将与在生产服务器上运行时不同。Laravel采用了一种一致的方法来处理配置设置，并且可以通过使用包含特定环境设置的`.env`文件，在不同的环境中应用不同的设置。'
- en: '**Query builder and ORM**: Laravel ships with a fluent query builder, which
    lets you issue database queries with a PHP syntax, where you simply chain methods
    instead of writing SQL. In addition to this, it provides you with an **Object
    Relational Mapper** (**ORM**) and **ActiveRecord** implementation, called **Eloquent**,
    which is similar to what you will find in Ruby on Rails, to help you define interconnected
    models. Both the query builder and the ORM are compatible with different databases,
    such as PostgreSQL, SQLite, MySQL, and SQL Server.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询构建器和ORM**：Laravel自带了一个流畅的查询构建器，允许您使用PHP语法发出数据库查询，您只需链式调用方法而不是编写SQL语句。除此之外，它还为您提供了**对象关系映射器（ORM**）和**ActiveRecord**实现，称为**Eloquent**，这与您在Ruby
    on Rails中找到的类似，以帮助您定义相互关联的模型。查询构建器和ORM与不同的数据库兼容，例如PostgreSQL、SQLite、MySQL和SQL
    Server。'
- en: '**Schema builder, migrations, and seeding**: Also inspired by Rails, these
    features allow you to define your database schema in PHP code and keep track of
    any changes with the help of database migrations. A migration is a simple way
    of describing a schema change and how to revert to it. Seeding allows you to populate
    the selected tables of your database, for example, after running a migration.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式构建器、迁移和填充**：这些功能也受到了Rails的启发，允许您在PHP代码中定义数据库模式，并借助数据库迁移跟踪任何更改。迁移是一种简单的方式来描述模式更改及其回滚方式。填充允许您在运行迁移后填充数据库中选定的表，例如。'
- en: '**Template engine**: Partly inspired by the **Razor** template language in
    ASP.NET MVC, Laravel ships with **Blade**, a lightweight template language with
    which you can create hierarchical layouts with predefined blocks in which dynamic
    content is injected.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板引擎**：部分受到ASP.NET MVC中的**Razor**模板语言的启发，Laravel自带了**Blade**，这是一种轻量级的模板语言，您可以使用它创建具有预定义块的分层布局，其中动态内容被注入。'
- en: '**E-mailing**: With its `Mail` class, which wraps the popular `SwiftMailer`
    library, Laravel makes it very easy to send an e-mail, even with rich content
    and attachments from your application. Laravel also comes with drivers for popular
    e-mail sending services such as SendGrid, Mailgun, and Mandrill.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件**：通过其`Mail`类，该类封装了流行的`SwiftMailer`库，Laravel使得发送电子邮件变得非常简单，甚至可以发送包含丰富内容和附件的电子邮件。Laravel还提供了对流行的电子邮件发送服务如SendGrid、Mailgun和Mandrill的驱动程序。'
- en: '**Authentication**: Since user authentication is such a common feature in web
    applications, out of the box Laravel comes with a default implementation to register,
    authenticate, and even send password reminders to users.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证**：由于用户认证是Web应用程序中如此常见的功能，因此Laravel默认提供了一种实现，用于注册、认证用户，甚至发送密码提醒。'
- en: '**Redis**: This is an in-memory key-value store that has a reputation for being
    extremely fast. If you give Laravel a `Redis` instance that it can connect to,
    it can use it as a session and general purpose cache, and also give you the possibility
    to interact with it directly.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redis**：这是一个以极快速度著称的内存键值存储。如果您为Laravel提供了一个它可以连接的`Redis`实例，它可以用作会话和通用缓存，并为您提供直接与之交互的可能性。'
- en: '**Queues**: Laravel integrates with several queue services, such as Amazon
    SQS, Beanstalkd, and IronMQ, to allow you to delay resource-intensive tasks, such
    as the e-mailing of a large number of users, and run them in the background, rather
    than keep the user waiting for the task to complete.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**队列**：Laravel集成了多个队列服务，如Amazon SQS、Beanstalkd和IronMQ，允许您延迟执行资源密集型任务，例如向大量用户发送电子邮件，并在后台运行，而不是让用户等待任务完成。'
- en: '**Event and command bus**: Although not new in version 5, Laravel has brought
    a command bus to the forefront in which it''s easy to dispatch events (a class
    that represents something that''s happened in your application), handle commands
    (another class that represents something that should happen in your application),
    and act upon these at different points in your application''s lifecycle.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件和命令总线**：尽管在版本5中并非新特性，但Laravel将命令总线提到了前台，这使得在应用程序的生命周期中的不同点轻松分发事件（表示应用程序中发生的事情的类），处理命令（表示应在应用程序中发生的事情的另一个类），并对这些事件采取行动。'
- en: Expressiveness and simplicity
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表现力和简洁性
- en: 'Something that is at the core of Laravel is its philosophy that code should
    be named simply and expressively. Consider the following code example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的核心是其代码应简单且富有表现力的哲学。考虑以下代码示例：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt Publishing books you have
    purchased from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt Publishing书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Even though we have not even touched Laravel or covered its routing functions
    yet, you will probably have a rough idea of what this snippet of code does. Expressive
    code is more readable for someone new to a project, and it is probably also easier
    for you to learn and remember.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们还没有接触Laravel或介绍其路由函数，但您可能已经对这段代码的用途有一个大致的了解。具有表现力的代码对项目的新手来说更容易阅读，而且可能也更容易学习和记忆。
- en: Prettifying PHP
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 美化PHP
- en: 'Prettifying PHP as well as ensuring code in Laravel is named to effectively
    convey its actions in plain English, the authors of Laravel have also gone on
    to apply these principles to existing PHP language functions. A prime example
    is the `Storage` class, which was created to make file manipulations:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了美化PHP以及确保Laravel中的代码以有效传达其动作的纯英文命名外，Laravel的作者们还将这些原则应用于现有的PHP语言函数。一个主要的例子是`Storage`类，它是为了简化文件操作而创建的：
- en: '**More expressive**: To find out when a file was last modified, use `Storage::lastModified($path)`
    instead of `filemtime(realpath($path))`. To delete a file, use `Storage::delete($path)`
    instead of `unlink($path)`, which is the plain old PHP equivalent.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更具表现力**：要找出文件最后修改的时间，请使用`Storage::lastModified($path)`而不是`filemtime(realpath($path))`。要删除文件，请使用`Storage::delete($path)`而不是`unlink($path)`，后者是普通的PHP等效方法。'
- en: '**More consistent**: Some of the original file manipulation functions of PHP
    are prefixed with `file_`, while others just start with `file`; some are abbreviated
    and other are not. Using Laravel''s wrappers, you no longer need to guess or refer
    to PHP''s documentation.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更一致**：PHP的一些原始文件操作函数以`file_`为前缀，而其他则仅以`file`开头；一些被缩写，而其他则没有。使用Laravel的包装器，您不再需要猜测或参考PHP的文档。'
- en: '**More testable**: Many of the original functions can be tricky to use in tests,
    due to the exceptions they throw and also because they are more difficult to mock.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更易于测试**：许多原始函数由于它们抛出的异常以及它们更难以模拟，因此在测试中使用时可能会很棘手。'
- en: '**More feature complete**: This is achieved by adding functions that did not
    exist before, such as `File::copyDirectory($directory, $destination)`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更完整的功能**：这是通过添加之前不存在的功能来实现的，例如`File::copyDirectory($directory, $destination)`。'
- en: There are very rare instances where expressiveness is foregone in the favor
    of brevity. This is the case for commonly-used shortcut functions, such as `e()`,
    that escape HTML entities, or `dd()`, with which you can halt the execution of
    the script and dump the contents of one or more variables.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 非常罕见的情况下，会牺牲表达性以换取简洁性。这适用于常用的快捷函数，例如用于转义HTML实体的`e()`函数，或者可以用来停止脚本执行并转储一个或多个变量内容的`dd()`函数。
- en: Responsibilities, naming, and conventions
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 职责、命名和约定
- en: At the beginning of this chapter, we pointed out that one of the main issues
    with standard PHP applications was the lack of a clear separation of concerns;
    business logic becomes entangled with the presentation and data tier. Like many
    other frameworks that favor convention over configuration, Laravel gives you scaffolding
    with predefined places to put code in. To help you eliminate trivial decisions,
    it expects you to name your variables, methods, or database tables in certain
    ways, even though these are editable via configuration. It is, however, far less
    opinionated than a framework such as Ruby on Rails and in areas like routing,
    where there is often more than one way to solve a problem.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们指出，标准PHP应用的主要问题之一是缺乏清晰的关注点分离；业务逻辑与表示层和数据层纠缠在一起。像许多其他更倾向于约定而非配置的框架一样，Laravel为你提供了带有预定义代码放置位置的脚手架。为了帮助你消除琐碎的决定，它期望你以某种方式命名你的变量、方法或数据库表，尽管这些可以通过配置进行编辑。然而，它比Ruby
    on Rails这样的框架要少一些偏见，在路由等区域，通常有不止一种解决问题的方法。
- en: 'You might remember us mentioning that Laravel is a framework that is based
    on the MVC paradigm. Do not worry if you have not used this architectural pattern
    before; in a nutshell, this is what you need to know about MVC in order to be
    able to build your first Laravel applications:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得我们提到过，Laravel是一个基于MVC范式的框架。如果你之前没有使用过这种架构模式，请不要担心；简而言之，这是你需要了解的MVC知识，以便能够构建你的第一个Laravel应用：
- en: '**Models**: Models represent *resources* in your application. More often than
    not, they correspond to records in a data store, most commonly a database table.
    In this respect, you can think of models as representing *entities* in your application,
    be that a user, a news article, or an event, among others. In Laravel, models
    are classes that usually extend Eloquent''s base `Model` class and are named in
    **CamelCase** (that is, `NewsArticle`). This will correspond to a database table
    with the same name, but in **snake_case** and plural (that is, `news_articles`).
    By default, Eloquent also expects a primary key named `id`, and will also look
    for—and automatically update—the `created_at` and `updated_at` columns. Models
    can also describe the relationships they have with other models. For example,
    a `NewsArticle` model might be associated with a `User` model, as a `User` model
    might be able to author a `NewsArticle` model. However, models can also refer
    to data from other data sources, such as an `XML` file, or the response from a
    web service or API.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：模型代表应用中的**资源**。大多数情况下，它们对应于数据存储中的记录，最常见的是数据库表。在这方面，你可以将模型视为代表应用中的**实体**，无论是用户、新闻文章还是事件等。在Laravel中，模型是通常扩展Eloquent基本`Model`类的类，并以**驼峰式**命名（即`NewsArticle`）。这将对应于具有相同名称的数据库表，但以**蛇形小写**和复数形式（即`news_articles`）。默认情况下，Eloquent还期望有一个名为`id`的主键，并且会查找并自动更新`created_at`和`updated_at`列。模型还可以描述它们与其他模型之间的关系。例如，一个`NewsArticle`模型可能与一个`User`模型相关联，因为一个`User`模型可能能够创建一个`NewsArticle`模型。然而，模型也可以引用来自其他数据源的数据，例如`XML`文件或来自网络服务或API的响应。'
- en: '**Controllers or routes**: Controllers, at their simplest, take a request,
    do something, and then send an appropriate response. Controllers are where the
    actual processing of data goes, whether that is retrieving data from a database,
    or handling a form submission, and saving data back to a database. Although you
    are not forced to adhere to any rules when it comes to creating controller classes
    in Laravel, it does offer you two sane approaches: RESTful controllers and resource
    controllers. A RESTful controller allows you to define your own actions and what
    HTTP methods they should respond to. Resource controllers are based around an
    entity and allow you to perform common operations on that entity, based on the
    HTTP method used. Another option is to bypass using controller classes altogether
    and instead write your logic in your routes, by way of anonymous functions.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器或路由**：控制器在最简单的形式下，接收一个请求，执行一些操作，然后发送一个适当的响应。控制器是实际数据处理的地方，无论是从数据库中检索数据，还是处理表单提交，并将数据保存回数据库。尽管在Laravel中创建控制器类时你不必遵守任何规则，但它确实提供了两种合理的做法：RESTful控制器和资源控制器。RESTful控制器允许你定义自己的操作以及它们应该响应的HTTP方法。资源控制器围绕一个实体构建，允许你根据使用的HTTP方法在该实体上执行常见操作。另一种选择是完全不使用控制器类，而是通过匿名函数在你的路由中编写逻辑。'
- en: '**Views or Templates**: Views are responsible for displaying the response returned
    from a controller in a suitable format, usually as an HTML web page. They can
    be conveniently built by using the Blade template language or by simply using
    standard PHP. The file extension of the view, either `.blade.php` or simply `.php`,
    determines whether or not Laravel treats your view as a `Blade` template or not.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图或模板**：视图负责以合适的格式显示控制器返回的响应，通常是HTML网页。它们可以通过使用Blade模板语言或简单地使用标准PHP方便地构建。视图的文件扩展名，无论是`.blade.php`还是简单的`.php`，决定了Laravel是否将你的视图视为`Blade`模板。'
- en: 'The following diagram illustrates the interactions between all the constituents
    applied in a typical web application:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了在典型Web应用中所有应用组件之间的交互：
- en: '![Responsibilities, naming, and conventions](img/B04308_01_01.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![职责、命名和约定](img/B04308_01_01.jpg)'
- en: Of course, it is possible to go against the MVC paradigm and the framework's
    conventions and write code as you wish, but this will often require more effort
    on the developer's part for no gain.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以违背MVC范式和框架的约定，按照自己的意愿编写代码，但这通常需要开发者付出更多努力，却得不到任何回报。
- en: Helping you become a better developer
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帮助你成为更好的开发者
- en: Laravel has become a standard-bearer for a new way of developing PHP applications
    through various design decisions and philosophies, such as the way in which it
    advocates developers to write framework-agnostic code and to rely on contracts
    (interfaces) rather than implementations are only a good thing. It has also built
    such a strong community that it is undoubtedly one of its strongest assets and
    a major contributing factor to its success; it is possible to get answers within
    minutes from other users via avenues such as forums, IRC, and social networking
    websites like Twitter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel通过各种设计决策和哲学，如它倡导开发者编写框架无关的代码，并依赖于契约（接口）而不是实现，已经成为一种新的PHP应用开发方式的标准。它还建立了一个如此强大的社区，这无疑是其最强大的资产之一，也是其成功的主要贡献因素；你可以在几分钟内通过论坛、IRC和像Twitter这样的社交网站等途径从其他用户那里获得答案。
- en: However, if time has taught us anything, it is that frameworks come and go and
    it is hard to predict when Laravel will lose its steam and be supplanted by a
    better or more popular framework. Nonetheless, Laravel will not only make you
    more productive in the short term, but it also has the potential to make you a
    better developer in the long run. By using it to build web applications, you will
    indirectly become more familiar with the following concepts, all of which are
    highly transferable to any other programming language or framework. These include
    the MVC paradigm and **Object-oriented programming** (**OOP**) design patterns,
    the use of dependency managers, testing and dependency injection, and the power
    and limitations of ORMs and database migration.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果时间教会了我们什么，那就是框架的兴衰无常，很难预测Laravel何时会失去势头，被更好的或更受欢迎的框架所取代。尽管如此，Laravel不仅会在短期内让你更高效，而且从长远来看，它还有潜力让你成为一名更好的开发者。通过用它来构建Web应用，你将间接地更熟悉以下概念，所有这些概念都高度可迁移到任何其他编程语言或框架。这包括MVC范式和**面向对象编程**（**OOP**）设计模式，依赖管理器的使用，测试和依赖注入，以及ORMs和数据库迁移的强大功能和局限性。
- en: It will also inspire you to write more expressive code with descriptive **DocBlock**
    comments that facilitate the generation of documentation, as well as the future
    maintenance of the application, irrespective of whether it is done by you or another
    developer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会激发你编写更具表达力的代码，使用描述性的**DocBlock**注释，这些注释有助于生成文档，以及无论是由你还是其他开发者进行的未来维护。
- en: Structure of a Laravel application
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel应用的架构
- en: 'Over the course of the next two chapters, we will install Laravel and create
    our first application. Like most frameworks, Laravel starts out with a complete
    directory tree for you to organize your code in, and also includes placeholder
    files for you to use as a starting point. Here is what the directory of a new
    Laravel 5 application looks like:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，我们将安装Laravel并创建我们的第一个应用。像大多数框架一样，Laravel一开始就为你提供了一个完整的目录树，你可以用它来组织你的代码，还包括一些占位符文件，你可以用作起点。以下是一个新的Laravel
    5应用的目录结构：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Like Laravel's source code, the naming of directories is also expressive, and
    it is easy to guess what each directory is for. The `app` directory is where most
    of your application's server-side code will reside, which has subdirectories both
    for how your application could be accessed (`Console` and `Http`), as well as
    subdirectories for organizing code that could be used in both scenarios (such
    as `Events` and `Services`). We will explore the responsibilities of each directory
    further in the next chapters.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与Laravel的源代码一样，目录的命名也是表达性的，很容易猜测每个目录的作用。`app`目录是大多数应用的服务端代码所在的地方，它有子目录来处理应用如何被访问（`Console`和`Http`），以及用于组织可以在两种场景下使用的代码的子目录（例如`Events`和`Services`）。我们将在下一章中进一步探讨每个目录的职责。
- en: The service container and request lifecycle
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务容器和请求生命周期
- en: Whether you are a beginner in PHP or an experienced developer in a different
    language, it might not always be obvious how an HTTP request reaches a Laravel
    application. Indeed, the request lifecycle is fundamentally different from plain
    PHP scripts that are accessed directly by their URI (for example, `GET http://example.com/about-us.php`).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是PHP的初学者还是一个不同语言的资深开发者，可能并不总是明显地知道一个HTTP请求是如何到达Laravel应用的。确实，请求的生命周期与直接通过URI访问的纯PHP脚本（例如，`GET
    http://example.com/about-us.php`）在本质上是有区别的。
- en: The `public/` directory is meant to act as the document root; in other words,
    the directory in which your web server starts looking after every incoming request.
    Once URL rewriting is properly set up, every request that does not match an existing
    file or directory hits the `/public/index.php` file. This file includes the Composer
    autoloader file, which loads in dependencies (including the Laravel framework
    components) and also where to look for your application's code. Your application
    is then bootstrapped, loading configuration variables based on the environment.
    Once this is done, it instantiates a new service container instance, which in
    turn handles the incoming request, uses the HTTP method and URL used to access
    the application (such as `POST` /`comments`), and passes the request off to the
    correct controller action or route for handling.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`public/` 目录旨在充当文档根目录；换句话说，这是你的 web 服务器在处理每个传入请求时开始查找的目录。一旦 URL 重写设置正确，所有不匹配现有文件或目录的请求都会命中
    `/public/index.php` 文件。此文件包含 Composer 自动加载文件，它加载依赖项（包括 Laravel 框架组件），并且也是查找你的应用程序代码的位置。然后你的应用程序启动，根据环境加载配置变量。完成此操作后，它实例化一个新的服务容器实例，该实例随后处理传入的请求，使用访问应用程序时使用的
    HTTP 方法（例如 `POST` /`comments`），并将请求传递给正确的控制器操作或路由进行处理。'
- en: Exploring Laravel
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 Laravel
- en: In this chapter, we are only covering the general mechanisms of how Laravel
    works, without looking at the detailed implementation examples. For the majority
    of developers, who just want to get the job done, this is sufficient. Moreover,
    it is much easier to delve into the source code of Laravel once you have already
    built a few applications. Nevertheless, here are some answers to the questions
    that might crop up when exceptions are thrown or when you navigate through the
    source code. In doing so, you will come across some methods that are not documented
    in the official guide, and you might even be inspired to write better code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只介绍 Laravel 的工作的一般机制，而不涉及详细的实现示例。对于大多数只想完成任务的开发者来说，这已经足够了。此外，一旦你已经构建了一些应用程序，深入研究
    Laravel 的源代码会容易得多。尽管如此，这里有一些可能出现的异常抛出或源代码导航时可能需要回答的问题。这样做时，你可能会遇到官方指南中未记录的一些方法，甚至可能会激发你编写更好的代码的灵感。
- en: 'Browsing the API ([http://laravel.com/api](http://laravel.com/api)) can be
    somewhat intimidating at first. But it is often the best way to understand how
    a particular method works under the hood. Here are a few tips:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览 API ([http://laravel.com/api](http://laravel.com/api)) 在一开始可能会有些令人畏惧。但通常这是了解特定方法底层工作原理的最好方式。以下是一些建议：
- en: The `Illuminate` namespace does not refer to a third-party library. It is the
    namespace that the author of Laravel has chosen for the different modules that
    constitute Laravel. Every single one of them is meant to be reusable and used
    independently of the framework.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Illuminate` 命名空间并不指代第三方库。这是 Laravel 作者为构成 Laravel 的不同模块所选择的命名空间。它们中的每一个都旨在可重用，并且可以独立于框架使用。'
- en: When searching for a class definition, for example, `Auth`, in the source code
    or the API, you might bump into `Facade`, which hardly contains any helpful methods
    and only acts as a proxy to the real class. This is because almost every dependency
    in Laravel is injected into the service container when it is instantiated.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在源代码或 API 中搜索类定义，例如 `Auth`，时，你可能会遇到 `Facade`，它几乎不包含任何有用的方法，仅作为真实类的代理。这是因为 Laravel
    中几乎每个依赖项在实例化时都会注入到服务容器中。
- en: Most of the libraries that are included in the `vendor/` directory contain a
    `README` file, which details the functionality present in the library (for example,
    `vendor/nesbot/carbon/readme.md`).
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含在 `vendor/` 目录中的大多数库都包含一个 `README` 文件，该文件详细说明了库中存在的功能（例如，`vendor/nesbot/carbon/readme.md`）。
- en: Changes in Version 5 from Version 4
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本 5 从版本 4 的变化
- en: 'Laravel 5 started life as Laravel 4.3, but was promoted to its own major version
    when it became apparent that this new version was going to be a radical departure
    from version 4 of the framework. Laravel 5 builds on Laravel 4 as a base, but
    makes architecting larger applications with things like an application namespace
    out of the box. Laravel 4 applications will need a fair bit of work to be ported
    to Laravel 5\. Features that are new or have been updated in Laravel 5 include:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5 最初是以 Laravel 4.3 的形式出现的，但当人们意识到这个新版本将彻底不同于框架的 4.0 版本时，它被提升到了自己的主要版本。Laravel
    5 以 Laravel 4 为基础，但内置了诸如应用程序命名空间等功能，使得构建大型应用程序变得容易。要将 Laravel 4 应用程序迁移到 Laravel
    5，需要进行相当多的工作。Laravel 5 中新增或更新的功能包括：
- en: '**Method injection**: In Laravel 4, you could type hint (specify in the constructor)
    the dependencies a class needed, and Laravel would automatically resolve those
    dependencies out of its container. Now, Laravel 5 takes that one step further
    and will also resolve dependencies specified in class methods, as well as class
    constructors.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法注入**：在 Laravel 4 中，你可以通过类型提示（在构造函数中指定）来指定一个类所需的依赖项，Laravel 会自动从其容器中解析这些依赖项。现在，Laravel
    5 将这一步更进一步，还将解析类方法和类构造函数中指定的依赖项。'
- en: '**Form requests**: Laravel 5 introduces form request classes. These classes
    can be injected into your controller actions. They take the current request, and
    on it, you can perform data validation and sanitizing and even user authorization
    (that is, check if the currently-logged in user can perform the requested action).
    This streamlines validation, meaning you have to do very little, if any, data
    validation in your controller actions.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单请求**：Laravel 5 引入了表单请求类。这些类可以被注入到你的控制器操作中。它们接受当前请求，并且你可以对它进行数据验证和清理，甚至用户授权（即检查当前登录的用户是否可以执行请求的操作）。这简化了验证过程，意味着你几乎不需要在你的控制器操作中进行数据验证。'
- en: '**Socialite**: New to Laravel 5 is an optional package called Socialite that
    you can declare as a Composer dependency. It makes authenticating with third-party
    services a breeze, meaning you can easily implement functionality like login with
    Facebook in a few lines of code.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Socialite**：Laravel 5 新增了一个可选的包，名为 Socialite，你可以将其声明为 Composer 依赖项。它使得与第三方服务进行身份验证变得轻而易举，这意味着你可以通过几行代码轻松实现如
    Facebook 登录等功能。'
- en: '**Elixir**: Laravel 5 also looks at making front-end development easier. A
    lot of developers these days are using languages like LESS and Sass to create
    their style sheets, and concatenating JavaScript files into one, minified JavaScript
    file to reduce HTTP requests and speed up loading times. Elixir is a wrapper around
    **Gulp**, a **Node.js** based build system that simplifies the tasks mentioned
    here. This greatly reduces the time needed to get up and running with a new application,
    as you don''t have to install Node.js modules or Gulp files from other projects.
    You get it free from the get-go.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Elixir**：Laravel 5 还致力于使前端开发更加容易。如今，许多开发者都在使用 LESS 和 Sass 等语言来创建他们的样式表，并将
    JavaScript 文件合并成一个压缩的 JavaScript 文件，以减少 HTTP 请求并加快加载时间。Elixir 是一个围绕 **Gulp** 的包装器，Gulp
    是一个基于 **Node.js** 的构建系统，它简化了上述任务。这大大减少了启动新应用程序所需的时间，因为你不需要从其他项目中安装 Node.js 模块或
    Gulp 文件。你可以从一开始就免费获得它。'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have introduced you to Laravel 5 and how it can help you
    to write better, more structured applications while reducing the amount of boilerplate
    code. We have also explained the concepts and PHP features used by Laravel, and
    you should now be well equipped to get started and write your first application!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您介绍了 Laravel 5 以及它如何帮助你编写更好、更有结构的应用程序，同时减少样板代码的数量。我们还解释了 Laravel 使用的概念和
    PHP 功能，你现在应该已经准备好开始编写你的第一个应用程序了！
- en: In the next chapter, you will learn how to set up an environment in which you
    can develop Laravel applications and you will also be introduced to Composer for
    managing dependencies.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何设置一个环境，在这个环境中你可以开发 Laravel 应用程序，同时你还将被介绍到 Composer，用于管理依赖。
