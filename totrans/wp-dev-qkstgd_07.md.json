["```php\nif( !class_exists( 'WPQuick_CPT' ) ) {   \n  class WPQuick_CPT{   \n    private static $instance;\n    public static function instance() { \n      if ( ! isset( self::$instance ) && ! ( self::$instance instanceof WPQuick_CPT ) ) {\n        self::$instance = new WPQuick_CPT();\n        self::$instance->setup_constants();\n        self::$instance->includes();\n\n        add_action( 'admin_enqueue_scripts',array( self::$instance, 'load_admin_scripts' ),9);                \n        add_action( 'wp_enqueue_scripts',array( self::$instance,'load_scripts' ),9);                \n\n        self::$instance->model_property= new WQCPT_Model_Property(); \n      }\n      return self::$instance;\n    }\n\n    public function setup_constants() {\n      if ( ! defined( 'WQCPT_PLUGIN_DIR' ) ) {\n        define( 'WQCPT_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );\n      }\n    }       \n    public function load_scripts(){ }   \n    public function load_admin_scripts(){ }  \n    private function includes() { \n      require_once WQCPT_PLUGIN_DIR . 'classes/class-wqcpt-model-property.php';\n    }\n  }\n}\n```", "```php\nadd_action( 'plugins_loaded', 'wqcpt_plugin_init' );\nfunction wqcpt_plugin_init(){\n  global $wqcpt;\n  $wqcpt = WPQuick_CPT::instance();\n}\n```", "```php\nrequire_once WQCPT_PLUGIN_DIR . 'classes/class-wqcpt-model-property.php';\n```", "```php\nself::$instance->model_property  = new WQCPT_Model_Property();\n```", "```php\n$this->post_type   =  'wqcpt_property';\nadd_action( 'init', array( $this, 'create_property_post_type' ) );\n```", "```php\npublic function create_property_post_type() {\n  global $wqcpt; \n  $post_type = $this->post_type;\n  $singular_post_name = __( 'Property','wqcpt' );\n  $plural_post_name = __( 'Properties','wqcpt' );\n\n  $labels = array(\n    'name' => sprintf( __( '%s', 'wqcpt' ), $plural_post_name),\n    'singular_name' => sprintf( __( '%s', 'wqcpt' ), $singular_post_name),\n    'add_new' => __( 'Add New', 'wqcpt' ),\n    'add_new_item' => sprintf( __( 'Add New %s ', 'wqcpt' ), $singular_post_name),\n  );\n\n  $args = array(\n    'labels' => $labels,\n    'hierarchical' => true,\n    'description' => __( 'Property Description', 'wqcpt' ),\n    'supports' => array( 'title', 'editor' ),\n    'public' => true,\n    'show_ui' => true,\n    'show_in_menu' => true,\n    'show_in_nav_menus' => true,\n    'publicly_queryable' => true,\n    'exclude_from_search' => false,\n    'has_archive' => true,\n    'query_var' => true,\n    'can_export' => true,\n    'rewrite' => true\n  );\n  register_post_type( $post_type, $args );\n}\n```", "```php\n$this->property_category_taxonomy  = 'wqcpt_property_listing_type';\nadd_action( 'init', array( $this, 'create_property_custom_taxonomies' ) );\n```", "```php\npublic function create_property_custom_taxonomies() {\n  $category_taxonomy = $this->property_category_taxonomy;\n  $singular_name = __('Property Listing Type','wqcpt');\n  $plural_name = __('Property Listing Types','wqcpt');\n\n  register_taxonomy(\n    $category_taxonomy,\n    $this->post_type,\n    array(\n      'labels' => array(\n      'name' => sprintf( __( '%s ', 'wqcpt' ) , $singular_name),\n      'singular_name' => sprintf( __( '%s ', 'wqcpt' ) , $singular_name),\n      'search_items' => sprintf( __( 'Search %s ', 'wqcpt' ) , $singular_name),\n    ),\n    'hierarchical' => true,\n  )\n );\n}\n```", "```php\nadd_action( 'add_meta_boxes', array( $this, 'add_property_meta_boxes' ) );\n```", "```php\npublic function add_property_meta_boxes() {\n  add_meta_box( 'wqcpt-property-meta', __('Property Details','wqcpt' ), array( $this, 'display_property_meta_boxes' ), $this->post_type );\n}\n\npublic function display_property_meta_boxes( $property ) {\n  global $wqcpt,$template_data;\n\n  $template_data['property_post_type'] = $this->post_type;\n  $template_data['property_nonce'] = wp_create_nonce('wqcpt-property-meta');\n  $template_data['wqcpt_pr_type'] = get_post_meta( $property->ID, '_wqcpt_pr_type', true );\n  $template_data['wqcpt_pr_city'] = get_post_meta( $property->ID, '_wqcpt_pr_city', true );\n\n  ob_start();\n  $wqcpt->template_loader->get_template_part( 'property','meta');\n  $display = ob_get_clean();\n  echo $display;\n}\n```", "```php\n<?php\n  global $template_data;\n  extract($template_data);\n?>\n\n<input type=\"hidden\" name=\"property_nonce\" value=\"<?php echo $property_nonce; ?>\" />\n<table class=\"form-table\">\n  <tr>\n    <th style=''><label><?php _e('Status','wqcpt'); ?>*</label></th>\n    <td><select class='widefat' name=\"wqcpt_pr_type\" id=\"wqcpt_pr_type\">\n      <option <?php selected( $wqcpt_pr_type, '0' ); ?> value='0' ><?php _e('Please Select','wqcpt'); ?></option>\n      <option <?php selected( $wqcpt_pr_type, 'house' ); ?> value='house' ><?php _e('House','wqcpt'); ?></option>\n      <option <?php selected( $wqcpt_pr_type, 'office' ); ?> value='office' ><?php _e('Office','wqcpt'); ?></option>\n         </select></td>\n  </tr>\n  <tr>\n    <th style=''><label><?php _e('City','wqcpt'); ?></label></th>\n    <td><input class='widefat' name='wqcpt_pr_city' id='wqcpt_pr_city' type='text' value='<?php echo $wqcpt_pr_city; ?>' /></td>\n  </tr> \n</table>\n```", "```php\nadd_action( 'save_post', array( $this, 'save_property_meta_data' ) );\n```", "```php\npublic function save_property_meta_data( $post_id ) {\n  global $post,$wqcpt;\n  if (   isset($_POST['property_nonce']) &&  ! wp_verify_nonce($_POST['property_nonce'], 'wqcpt-property-meta')){\n    return $post_id;\n  }\n  if ( defined('DOING_AUTOSAVE') && DOING_AUTOSAVE ) {\n    return $post_id;\n  }\n\n  if (  isset($_POST['post_type']) &&  $this->post_type == $_POST['post_type'] && current_user_can( 'edit_post', $post->ID ) ) {\n\n    $wqcpt_pr_type = isset( $_POST['wqcpt_pr_type'] ) ? sanitize_text_field( trim($_POST['wqcpt_pr_type']) ) : '';\n    $wqcpt_pr_city = isset( $_POST['wqcpt_pr_city'] ) ? sanitize_text_field( trim($_POST['wqcpt_pr_city']) ) : ''; \n    update_post_meta( $post_id, '_wqcpt_pr_type', $wqcpt_pr_type );\n    update_post_meta( $post_id, '_wqcpt_pr_city', $wqcpt_pr_city );\n  } else {\n    return $post_id;\n  }\n}\n```", "```php\nadd_shortcode( 'wqcpt_property_form', array( $this, 'display_property_form' ) );\n```", "```php\npublic function display_property_form( $atts, $content ){\n  global $wqcpt,$template_data;\n  $template_data['property_nonce'] = wp_create_nonce('wqcpt-property-meta');\n\n  ob_start();\n  $wqcpt->template_loader->get_template_part( 'property','form');\n  $display = ob_get_clean();\n  return $display;\n}\n```", "```php\n<?php\n  global $template_data;\n  extract($template_data); ?>\n<form action=\"\" method=\"POST\" >\n  <input type=\"hidden\" name=\"property_nonce\" value=\"<?php echo $property_nonce; ?>\" />\n  <table class=\"form-table\">\n    <tr>\n      <th><label><?php _e('Property Title','wqcpt'); ?>*</label></th>\n      <td><input type=\"text\" name=\"wqcpt_prfr_title\" id=\"wqcpt_prfr_title\" value=\"\" /></td>\n    </tr>\n    <tr>\n      <th><label><?php _e('Property Content','wqcpt'); ?>*</label></th>\n      <td><textarea name=\"wqcpt_prfr_content\" id=\"wqcpt_prfr_content\" ></textarea></td>\n    </tr>\n    <!â€”HTML for other custom fields -->\n    <tr>\n      <th>&</th>\n      <td><input name=\"wqcpt_prfr_submit\" id=\"wqcpt_prfr_submit\" type=\"submit\" value=\"<?php _e('Add Property','wqcpt'); ?>\" /></td>\n    </tr>\n  </table>\n</form>\n```", "```php\nadd_action( 'init', array( $this, 'save_property_form' ) );\n```", "```php\npublic function save_property_form() {\n  global $post,$wqcpt;\n  if( ! isset( $_POST['wqcpt_prfr_submit'] ) ){\n    return;\n  }\n\n  if ( !wp_verify_nonce($_POST['property_nonce'], 'wqcpt-property-meta' ) || ! current_user_can( 'edit_post' ) ) {\n    // Handle error\n  }\n\n   $wqcpt_prfr_title = isset( $_POST['wqcpt_prfr_title'] ) ? sanitize_text_field( trim($_POST['wqcpt_prfr_title']) ) : '';\n   $wqcpt_prfr_content = isset( $_POST['wqcpt_prfr_content'] ) ? wp_kses_post( trim($_POST['wqcpt_prfr_content']) ) : '';\n   $wqcpt_pr_type = isset( $_POST['wqcpt_prfr_type'] ) ? sanitize_text_field( trim($_POST['wqcpt_prfr_type']) ) : '';\n   $wqcpt_pr_city = isset( $_POST['wqcpt_prfr_city'] ) ? sanitize_text_field( trim($_POST['wqcpt_prfr_city']) ) : '';\n\n // Validations and generate errors\n // post fields and existence of a post\n // Rest of the code for saving data\n}\n```", "```php\n$post_id = wp_insert_post(\n             array(\n               'post_author' => get_current_user_id() ,\n               'post_name' => sanitize_title( $wqcpt_prfr_titley ),\n               'post_title' => $wqcpt_prfr_title,\n               'post_status' => 'publish',\n               'post_content' => $wqcpt_prfr_content,\n               'post_type' => $this->post_type\n             )\n         );\n\nif ( !is_wp_error( $post_id ) ) {\n  update_post_meta( $post_id, '_wqcpt_pr_type', $wqcpt_pr_type );\n  update_post_meta( $post_id, '_wqcpt_pr_city', $wqcpt_pr_city );\n} else {\n // Handle errors\n}\n```", "```php\nadd_action( 'init', 'wqcpt _manage_property_routes' );\nfunction wqcpt_manage_property_routes() {\n  add_rewrite_rule( '^property-listing/([^/]+)/?', 'index.php?wpquick_property_actions=$matches[1]', 'top' );\n  add_rewrite_tag('%wpquick_property_actions%', '([^&]+)');\n}\n```", "```php\nregister_activation_hook( __FILE__, 'wqcpt_activate' );\nfunction wqcpt_activate(){\n  wqcpt_manage_property_routes();\n  flush_rewrite_rules(); \n}\n```", "```php\npublic function property_controller() {\n  global $wp_query,$wqcpt,$template_data;\n  $wpquick_actions = isset ( $wp_query->query_vars['wpquick_property_actions'] ) ? $wp_query->query_vars['wpquick_property_actions'] : '';\n\n  switch ( $wpquick_actions ) {\n    case 'add':\n      $template_data['property_nonce'] = wp_create_nonce('wqcpt-property-meta');\n\n      ob_start();\n      $wqcpt->template_loader->get_template_part( 'property','form' );\n      $display = ob_get_clean();\n      echo get_header();\n      echo $display;\n      echo get_footer();\n      exit;\n      break;\n  }\n}\n```"]