- en: Chapter 2. Theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Magento themes and packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding extra files to your theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding jQuery support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing a page title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the theming block system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding widgets to the layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you want to make your sample Magento site ready for use, the first thing
    most people want to change is the look and feel of the shop. The first impression
    a visitor has of your site is the look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover the most important things you can do with a Magento
    theme. Customizing the standard theme is not so difficult but building a theme
    from scratch is a lot of work.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Magento themes and packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento works with multiple themes. You can configure more themes in the same
    store. A common case is that you have a theme of your shop and some inherited
    themes based on the shop theme.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in to the backend and go to the theme configuration section that you can
    find at **System** | **Configuration** | **Design**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following instructions describe how to manage the different Magento themes
    of a webshop:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the theme field to `modern` and clear the cache. Go to your frontend
    and your shop will look as follows:![How to do it...](img/3329OS_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now configured the `modern` theme in the `default` package. This theme
    will extend things from the `default` theme and, in the last case, from the `base/default`
    theme. This process is called the **theme fallback system**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make the theme field empty and add the following configuration:![How to do it...](img/3329OS_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the frontend:![How to do it...](img/3329OS_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your shop will look like the `default` theme but with some different CSS styles.
    We have configured the `default` theme but with another `skin` folder that contains
    the CSS files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three levels of themes in Magento: the base theme, the package''s
    default theme, and the other themes in the package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how the theme fallback system works when you have
    configured a theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3329OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the `winter` theme is configured, Magento will look at files in the following
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: The theme (`packt/winter`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package's default theme (`packt/default`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The base theme (`base/default`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is possible to configure a default theme in the configuration page by navigating
    to **System** | **Configuration** | **Design**. If this is set (for example, `packt/summer`),
    the fallback system will loop through the themes in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: The theme (`packt/winter`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configured default theme (`packt/summer`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package's default theme (`packt/default`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The base theme (`base/default`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The directory where the theme is stored is `app/design/frontend` for the template
    files (rendering HTML) and `skin/frontend` for the static files (CSS, images,
    fonts, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Practically, the default theme of a package will contain the theme of the webshop.
    The subthemes in that package mostly have the same layout but differ in some small
    things. For example, a winter theme has a background with snow and the summer
    theme has a background with a beach. The rest of the theme is exactly the same
    because this uses the same files of the default theme.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When your theme is not in the default package, nothing happens on the frontend
    after installing a Magento extension.
  prefs: []
  type: TYPE_NORMAL
- en: The reason could be that the theme files of the module are in the default package.
    Magento looks only at the configured and base packages. The default package is
    just like every other package such as `packt` or `music`. When a module has custom
    theme files, the best practice is to store these files in the base theme to avoid
    this problem.
  prefs: []
  type: TYPE_NORMAL
- en: You can configure Magento themes on different levels to show up on the frontend.
    In most cases, the theme settings are configured on the configuration page by
    navigating to **System** | **Configuration** | **Design**.
  prefs: []
  type: TYPE_NORMAL
- en: You can add exceptions on the page by navigating to **System** | **Design**.
    On this page, you can configure a theme for a store with a from date and to date.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to configure a specific theme for a product, category, or
    CMS page. You can change the settings on the edit pages of a product, category,
    or CMS page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a package with a default theme in it. At a later stage, we can
    add more themes in this package, which extend the default theme that we will create
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your IDE and navigate to the theme folder (`app/design/frontend and skin/frontend/default`).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure shows you which actions are required to create a custom
    theme:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`app/design/frontend/packt/default`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/design/frontend/packt/default/layout`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/design/frontend/packt/default/template`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skin/frontend/packt/default`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the content of the folder `skin/frontend/default/blank/` to `skin/frontend/packt/default`.
    The folder looks as follows:![How to do it...](img/3329OS_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the new theme and package in the backend. Navigate to **System** |
    **Configuration** | **Design** and configure as follows:![How to do it...](img/3329OS_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/suppor)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the configuration and your site will look as follows:![How to do it...](img/3329OS_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The theme is now installed and ready for further development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have just created a blank theme; a theme with only structural CSS. When
    we want to customize the look and feel with CSS, we have to work in the following
    folders and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`skin/frontend/packt/default/css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skin/frontend/packt/default/css/styles.css (the main css file)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skin/frontend/packt/default/images (the css images folder)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these files, you can change the CSS look and feel of the shop. If you want
    to change some of the HTML code, you have to work in the `app/design/frontend/packt/default`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: This folder is inherited from the `app/design/frontend/base/default` folder
    where the standard files are stored. If you want to change a file in the `base`
    folder, you need to copy the file with the same folder structure from the `base`
    folder to your theme.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing the code of the base package files will also work but this is not recommended
    because these files are part of the Magento core. When these files are changed,
    your changes will be lost after a Magento upgrade and your code maintainability
    becomes low.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to change the `header.phtml` file that is located at `app/design/frontend/base/default/template/page/html/header.phtml`,
    you have to copy it to `app/design/frontend/packt/default/template/page/html/header.phtml`.
  prefs: []
  type: TYPE_NORMAL
- en: When it is located there, clear your caches. Now, the file of your theme is
    loaded instead of the one in the base folder.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Magento development process, you have to clear the caches to see your
    changes. It is also possible to disable the cache. If so, you don't have to clear
    the cache many times when developing but you will have longer page loads.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see from where every file is loaded, you can turn on **Template Path Hints**.
    To do this, go to the backend and navigate to **System** | **Configuration** |
    **Developer**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to your store view in the top-left corner and set the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3329OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When this is set, navigate to the frontend and you will see red columns around
    every block.
  prefs: []
  type: TYPE_NORMAL
- en: Adding extra files to your theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we set up our theme with one CSS file. Mostly, you want
    to add some more files to it (when you are using a JavaScript plugin or something).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add an extra CSS and JavaScript file to our theme. To do this, we have
    to work in the following two directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app/design/frontend/packt/default/layout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skin/frontend/packt/default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will see how we can add extra files to a theme:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `page.xml` file. The declarations of all the CSS and JavaScript files
    that need to be included are stored in the file `app/design/frontend/base/default/layout/page.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible that there are other CSS and JavaScript declarations in other
    layout XML files. The `page.xml` file is used to set up the default layout structure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We need to add something. So we need to copy this file with the same folder
    structure to our theme folder. Copy the file to `app/design/frontend/packt/default/layout/page.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the CSS declaration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you open the `page.xml` file and look in the `<default>` tag, you will see
    a lot of lines with `"addCss"`. We need to add the following line in that section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The path we specify here is the path starting from our theme root folder, so
    it is `css/packt.css`. Magento will use the theme fallback to find the file in
    the `theme`, `package`, or `base` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Don't forget to create the CSS file. Create the `packt.css` file in the `skin/frontend/packt/default/css/`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the Magento cache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When you change something in the XML files, you will always have to clear the
    cache to see the effect of your changes. It is also possible to disable the cache.
    The purpose is that you don't have to clear the cache many times as the page loads
    are slower.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reload the frontend and look at the HTML source. Your file should be added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `addCss` function is one of the functions in the head block of Magento.
    This block will generate the HTML head section of a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following functions are useful when working with extra CSS and JS files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addJs`: This function will add a JS file from the `js` folder (folder in the
    root directory) to the head of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addItem`: This is a function that will add a JS or CSS file to the head of
    the page. The function has two required parameters: the type and the filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The type can have the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`skin_js`: This is a JavaScript file in the `skin` folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`js_css`: This is a CSS file in the `js` folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`js`: This is a JavaScript file in the `js` folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`css`: This is a CSS file in the `skin` folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rss`: This creates a `<link>` HTML tag with an attribute `type="application/rss+xml"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `addItem` function has three other optional parameters to customize the
    output of the tag in the `head` tag.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you use the right functions to include images, JavaScript, and CSS, you
    have the following advantages over adding HTML code in a `.phtml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: You can merge the CSS and JavaScript files to one file when you configure it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It always contains the right absolute URL to the file (it contains the right
    domain and protocol)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses the theme fallback system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding jQuery support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento 1.8 and earlier versions didn't use jQuery in the frontend and backend.
    The library that Magento uses for the JavaScript functionality is Prototype. When
    you want to use some jQuery code, you need to add the jQuery library in your theme.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the jQuery website and get the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Magento loads the Prototype library. Excluding this will cause JavaScript
    errors on every page, so we need to use both libraries. The problem with jQuery
    and Prototype is that they both use the dollar sign (`$`) as the namespace for
    their functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid the conflict, we have to use jQuery in the noconflict mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Put the jQuery library in the `js/jquery` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will create a `local.xml` file in our theme folder to add extra layout instructions.
    Create the `app/design/frontend/packt/default/local.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content in that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `jquery.noconflict.js` file in the `js/jquery` folder with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this file, after adding the jQuery file, in your `local.xml` file. The
    file contains the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear your caches and look at the source of your frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The jQuery file and the `noconflict` file should be added in the head section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now use jQuery in your webshop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that you have to call jQuery with the `jQuery` namespace instead
    of the `$` namespace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also keep in mind that third-party extensions of Magento could include jQuery
    in the frontend. Make sure the version is compatible with your code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We normally use the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'But, we will instead use the following line with the jQuery namespace:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added two files to the theme that contains the jQuery library. We had to
    use the noconflict mode to avoid conflicts with the prototype library.
  prefs: []
  type: TYPE_NORMAL
- en: To add files to the layout, we created a `local.xml` file. In that file, we
    added instructions to add the JavaScript files to the head of the HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of using a `local.xml` file for this is that you don't have
    to overwrite an entire XML file from the base folder to add just two lines of
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Changing a page title
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we added some CSS and JavaScript files to the `<head>`
    tag of the HTML. To change the page title, we have to do it in a similar way.
  prefs: []
  type: TYPE_NORMAL
- en: We will change the page title of the contacts page that is available at `http://magento-dev.local/contacts`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To change the page title of the contacts page, have a look at the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the contacts page in the frontend. This is available at `http://magento-dev.local/contacts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You see that the page title reads **Contact Us**. We will change this to **Give
    us a message**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the `layout/contacts.xml` file from the base theme to our theme and open
    the file. In this file, there is an xml tag `<contacts_index_index>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `<reference name="head">` tag, you will see a `setTitle` method. Set
    this line as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear your cache and reload the page. The title in your browser is now changed
    to **Give us a message.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<title>` tag in the HTML page is in the head section. This head section
    is generated by the Magento head block.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the template file, the code looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This means that Magento will print the title of that object in the tag. To set
    the title of that object, we use the `setTitle` function.
  prefs: []
  type: TYPE_NORMAL
- en: Working with translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento has the ability to run multiple stores in different languages. In the
    sample store, you can see English, French, and a German store view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the backend and go to the general configuration section (**System** | **Configuration**
    | **General**). We will configure the languages for the store views and do some
    inline translations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps show you how you can translate strings in a Magento store:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the languages for each store view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top-left corner, you will see a store switcher where you can switch the
    configuration for a store. Set the French language for the French store view and
    the German language for the German store view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the cache and reload your frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will see no changes because there is no language pack installed by default
    for French and German. Language packs are available in Magento Connect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enable the inline translation. We will translate our store with the inline translation
    tool that you can configure from **System** | **Configuration** | **Developer**
    (the last tab). In the default configuration scope, configure the following:![How
    to do it...](img/3329OS_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload your frontend. You will see red frames around a lot of strings in the
    frontend. When you hover and click on the icon, a pop-up window will show the
    translation form:![How to do it...](img/3329OS_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this translation form, you can create your own translations for the language
    of the current store.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Submit**, clear the caches, and reload the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything goes well, you will see that the text is translated into the string
    you just entered. Make sure you always clear the cache when editing a translation.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Magento has a very powerful translate function. To create a string in this
    translate function, you have to use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This syntax always works, but when working in template files, you can also
    use the shorter syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The translate function will search for the string in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: First, Magento will look into the `core_translate` table of the database. In
    this table, only those translations which you have translated inline are added
    (like we did in this recipe).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no matching string is found in the `core_translate` table, Magento will look
    at the `translate.csv` file in the theme. This file is located under `app/design/frontend/<<my_package>>/<<my_theme>>/locale/<<language>>/translate.csv`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the string is not found in the theme translation file, Magento will search
    for the string in the `app/locale/<<language>>` folder. In this folder, you can
    find all the translation files. A translate package will contain some of the module's
    translate files (`.csv`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no string is found in the module's translate files, Magento will print the
    original string that is passed as an argument to the translation function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the theming block system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Magento frontend is not a single file. It is a combination of blocks nested
    in each other. Each block is an object you can play with.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a category page in your shop and you see a lot of frames which all represent
    a block. Some blocks are structural (left column, right column, content, and footer)
    and others contain content (product list, cart, navigation, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next two steps, we will enable the frontend hints to get an idea of the
    used blocks on a page.
  prefs: []
  type: TYPE_NORMAL
- en: Enable your frontend **Template Path Hints**. Go to **System** | **Configuration**
    | **Developer** and enable the template and block names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the frontend. When the frontend hints are enabled, a frontend page will
    have red frames around each block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each block with a template is in a red frame. The title in white is the template
    file and the blue title is the classname of the block object.
  prefs: []
  type: TYPE_NORMAL
- en: When you want to edit the content of a block, you will have to look at the files
    displayed in the red frames. Make sure when a template file is in the base theme,
    you copy it to your theme.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the blocks are declared in layout XML files. These layout files are stored
    in the layout folder of a theme.
  prefs: []
  type: TYPE_NORMAL
- en: When you open a layout file, everything is stored in the layout XML tag. The
    children of this tag are layout handles.
  prefs: []
  type: TYPE_NORMAL
- en: 'A layout handle is a set of layout instructions that can be loaded on a page.
    When you look at the `contacts.xml` file, you see two handles. Layout handles
    are always in the second level of the `<layout>` XML tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '`default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contacts_index_index`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default handle will be loaded on every page. The `contacts_index_index`
    handle will be loaded on the contacts page.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to load a layout instruction on a page, you have to name your
    handle as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For the contacts page, you have to enter following values:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Module: `contacts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Controller: `IndexController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Action: `indexAction`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the login page, it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Module: `customer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Controller: `AccountController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Action: `loginAction`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, the name of the handle is `customer_account_login`.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about controllers and their actions in the *Adding
    a new page* recipe in [Chapter 4](ch04.html "Chapter 4. Creating a Module"), *Creating
    a Module*.
  prefs: []
  type: TYPE_NORMAL
- en: When you look at the `customer.xml` file in the theme, you will see this handle
    with the instructions for the login page. When you look inside a handle, you will
    see the `<reference>` tags. Inside these tags, you see the `<block>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: A reference is a block. When you have `<reference name="left">`, you are performing
    actions in the block with the name `left`. This block with the name `left` is
    declared in the `page.xml` file of the theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actions that you can perform are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling methods on the block object with `<action method="methodName">`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding child blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing child blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Magento frontend is built with blocks. The main block where everything starts
    from is called root. If you look at the `page.xml` file in our theme, in the default
    handle, you will see how the structural blocks are initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Adding widgets to the layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we described the Magento layout blocks. Writing layout
    XML files is not so easy as there is a graphical interface to add blocks to the
    layout. This interface is called **widgets**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add a product link to the left column of the category page. Go to the
    backend and navigate to **CMS** | **Widgets**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following steps, we will configure a widget for the category pages.
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Add new widget instance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next form, choose the configuration shown in the following screenshot:![How
    to do it...](img/3329OS_02_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Continue** and the following screen shows up:![How to do it...](img/3329OS_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the form with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Widget Instance Title**: `Widget-category-left-product`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the title of the widget in the backend. A structural name is easy when
    working with a lot of widgets.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Assign to Store Views**: **All Store Views**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Widget Options** tab, you have to choose the product.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the widget. Click on **Save and Continue Edit**. The widget instance is
    now saved but nothing will show up in the frontend because there is no layout
    update set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To show the widget in the frontend, we have to create a layout update by clicking
    on the **Add Layout Update** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form as follows:![How to do it...](img/3329OS_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the cache and go to a category page. A product link will show up in the
    left column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the left column, a new block is added to the frontend. Like each block on
    the frontend, this widget has a block class and a template similar to the other
    blocks.
  prefs: []
  type: TYPE_NORMAL
- en: The only difference is that this block is not generated by an XML file but by
    an XML layout instruction in the database.
  prefs: []
  type: TYPE_NORMAL
- en: The widget interface will generate a layout XML that is stored in the database.
    The block class and template are similar to other blocks in the XML files.
  prefs: []
  type: TYPE_NORMAL
