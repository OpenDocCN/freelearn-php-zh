["```php\n<?php\n// a simple foreach() to traverse the SPL class names\nforeach(spl_classes() as $key=>$value)\n  {\n    echo $value.\"\\n\";\n  }\n?>\n```", "```php\nAppendIterator\nArrayIterator\nArrayObject\nBadFunctionCallException\nBadMethodCallException\nCachingIterator\nCountable\nDirectoryIterator\nDomainException\nEmptyIterator\nFilterIterator\nInfiniteIterator\nInvalidArgumentException\nIteratorIterator\nLengthException\nLimitIterator\nLogicException\nNoRewindIterator\nOuterIterator\nOutOfBoundsException\nOutOfRangeException\nOverflowException\nParentIterator\nRangeException\nRecursiveArrayIterator\nRecursiveCachingIterator\nRecursiveDirectoryIterator\nRecursiveFilterIterator\nRecursiveIterator\nRecursiveIteratorIterator\nRuntimeException\nSeekableIterator\nSimpleXMLIterator\nSplFileObject\nSplObjectStorage\nSplObserver\nSplSubject\nUnderflowException\nUnexpectedValueException\n```", "```php\n<?\nclass ExtendedArrayObject extends ArrayObject {\n\n  private $_array;\n  public function __construct()\n  {\n    if (is_array(func_get_arg(0)))\n    $this->_array = func_get_arg(0);\n    else\n    $this->_array = func_get_args();\n    parent::__construct($this->_array);\n  }\n\n  public function each($callback)\n  {\n    $iterator = $this->getIterator();\n\n    while($iterator->valid()) \n    {\n      $callback($iterator->current());\n      $iterator->next();\n    }\n\n  }\n\n  public function without()\n  {\n    $args = func_get_args();\n    return array_values(array_diff($this->_array,$args));\n  }\n\n  public function first()\n  {\n    return $this->_array[0];\n  }\n\n  public function indexOf($value)\n  {\n    return array_search($value,$this->_array);\n  }\n\n  public function inspect()\n  {\n    echo \"<pre>\".print_r($this->_array, true).\"</pre>\";\n  }\n\n  public function last()\n  {\n    return $this->_array[count($this->_array)-1];\n  }\n\n  public function reverse($applyToSelf=false)\n  {\n    if (!$applyToSelf)\n    return array_reverse($this->_array);\n    else \n    {\n      $_array = array_reverse($this->_array);\n      $this->_array = $_array;\n      parent::__construct($this->_array);\n      return $this->_array;\n    }\n  }\n\n  public function shift()\n  {\n    $_element = array_shift($this->_array);\n    parent::__construct($this->_array);\n    return $_element;\n  }\n\n  public function pop()\n  {\n    $_element = array_pop($this->_array);\n    parent::__construct($this->_array);\n    return $_element;\n  }\n}\n?>\n```", "```php\n<?\ninclude_once(\"ExtendedArrayObject.class.php\");\n\nfunction speak($value)\n{\n  echo $value;\n\n}\n\n$newArray = new ExtendedArrayObject(array(1,2,3,4,5,6));\n\n/* or you can use this */\n\n$newArray = new ExtendedArrayObject(1,2,3,4,5,6);\n\n$newArray->each(speak); //pass callback for loop\nprint_r($newArray->without(2,3,4)); //subtract\n$newArray->inspect(); //display the array in a nice manner\necho $newArray->indexOf(5); //position by value\nprint_r($newArray->reverse()); //reverse the array\nprint_r($newArray->reverse(true)); /*for changing array itself*/\n\necho $newArray->shift();//shifts the first value of the array \n                       //and returns it\necho $newArray->pop();// pops out the last value of array\necho $newArray->last();\necho $newArray->first(); //the first element\n?>\n```", "```php\n123456\nArray\n(\n    [0] => 1\n    [1] => 5\n    [2] => 6\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\n4\nArray\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n)\nArray\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n)\n6125\n\n```", "```php\n<?php\n$fruits = array(  \n    \"apple\" => \"yummy\",\n    \"orange\" => \"ah ya, nice\",\n    \"grape\" => \"wow, I love it!\",\n    \"plum\" => \"nah, not me\"\n);\n\n$obj = new ArrayObject( $fruits );\n\n$it = $obj->getIterator();\n\n// How many items are we iterating over?\necho \"Iterating over: \" . $obj->count() . \" values\\n\";\n\n// Iterate over the values in the ArrayObject:\nwhile( $it->valid() )\n{\n    echo $it->key() . \"=\" . $it->current() . \"\\n\"; \n    $it->next();\n}\n\n?> \n```", "```php\nIterating over: 4 values\napple=yummy\norange=ah ya, nice\ngrape=wow, I love it!\nplum=nah, not me\n```", "```php\n<?php\n\n$fruits = array(  \n    \"apple\" => \"yummy\",\n    \"orange\" => \"ah ya, nice\",\n    \"grape\" => \"wow, I love it!\",\n    \"plum\" => \"nah, not me\"\n);\n\n$obj = new ArrayObject( $fruits );\n$it = $obj->getIterator();\n\n// How many items are we iterating over?\necho \"Iterating over: \" . $obj->count() . \" values\\n\";\n\n// Iterate over the values in the ArrayObject:\nforeach ($it as $key=>$val)\necho $key.\":\".$val.\"\\n\";\n?> \n```", "```php\n<?php\nclass MyArray implements IteratorAggregate\n{\n\n  private $arr;\n  public function __construct()\n  {\n    $this->arr = array();   \n  }\n\n  public function add( $key, $value )\n  {\n    if( $this->check( $key, $value ) )\n      {\n        $this->arr[$key] = $value;\n      }\n    }\n\n  private function check( $key, $value )\n    {\n      if( $key == $value )\n        {\n          return false;\n        }\n       return true;\n    }\n\n  public function getIterator()\n  {\n    return new ArrayIterator( $this->arr );\n  }       \n}\n?>\n```", "```php\n<?php\n\n$obj = new MyArray();\n$obj->add( \"redhat\",\"www.redhat.com\" );\n\n$obj->add( \"php\", \"php\" );\n$it = $obj->getIterator();\nwhile( $it->valid() )\n{\n  echo $it->key() . \"=\" . $it->current() . \"\\n\";\n  $it->next();\n}\n?>\n```", "```php\nredhat=www.redhat.com\n```", "```php\n<?php\nReflectionClass::export(DirectoryIterator);\n?>\n```", "```php\nClass [ <internal:SPL> <iterateable> class DirectoryIterator \n                      implements Iterator, Traversable ] \n{\n\n  - Constants [0] { }\n  - Static properties [0] {  }\n  - Static methods [0] {  }\n  - Properties [0] {  }\n  - Methods [27] \n{\n    Method [ <internal> <ctor> public method __construct ] \n{\n\n      - Parameters [1] \n{\n        Parameter #0 [ <required> $path ]\n      }\n    }\n    Method [ <internal> public method rewind ] {    }\n    Method [ <internal> public method valid ] {    }\n    Method [ <internal> public method key ] {    }\n    Method [ <internal> public method current ] {    }\n    Method [ <internal> public method next ] {    }\n    Method [ <internal> public method getPath ] {    }\n    Method [ <internal> public method getFilename ] {    }\n    Method [ <internal> public method getPathname ] {    }\n    Method [ <internal> public method getPerms ] {    }\n    Method [ <internal> public method getInode ] {    }\n    Method [ <internal> public method getSize ] {    }\n    Method [ <internal> public method getOwner ] {    }\n    Method [ <internal> public method getGroup ] {    }\n    Method [ <internal> public method getATime ] {    }\n    Method [ <internal> public method getMTime ] {    }\n    Method [ <internal> public method getCTime ] {    }\n    Method [ <internal> public method getType ] {    }\n    Method [ <internal> public method isWritable ] {    }\n    Method [ <internal> public method isReadable ] {    }\n    Method [ <internal> public method isExecutable ] {    }\n    Method [ <internal> public method isFile ] {    }\n    Method [ <internal> public method isDir ] {    }\n    Method [ <internal> public method isLink ] {    }\n    Method [ <internal> public method isDot ] {    }\n    Method [ <internal> public method openFile ] \n        {\n      - Parameters [3] {\n        Parameter #0 [ <optional> $open_mode ]\n        Parameter #1 [ <optional> $use_include_path ]\n        Parameter #2 [ <optional> $context ]\n        }\n      }\n    Method [ <internal> public method __toString ] {    }\n  }\n}\n```", "```php\n<?\n$DI = new DirectoryIterator(\"c:/spket\");\nforeach ($DI as $file) {\n  echo $file.\"\\n\";\n}\n?>\n```", "```php\n.\n..\nplugins\nfeatures\nreadme\n.eclipseproduct\nepl-v10.html\nnotice.html\nstartup.jar\nconfiguration\nspket.exe\nspket.ini\n```", "```php\n<?\n$DI = new DirectoryIterator(\"c:/spket\");\n$directories = array();\n$files = array();\nforeach ($DI as $file) {\n  $filename = $file->getFilename();\n  if ($file->isDir()){\n    if(strpos($filename,\".\")===false) \n    $directories[] = $filename;\n  }\n  else\n  $files[] = $filename;\n}\necho \"Directories\\n\";\nprint_r($directories);\necho \"\\nFiles\\n\";\nprint_r($files);\n?>\n```", "```php\nDirectories\nArray\n(\n    [1] => plugins\n    [2] => features\n    [3] => readme\n    [4] => configuration\n)\n\nFiles\nArray\n(\n    [0] => .eclipseproduct\n    [1] => epl-v10.html\n    [2] => notice.html\n    [3] => startup.jar\n    [4] => spket.exe\n    [5] => spket.ini\n)\n```", "```php\n<?php\n// Create the new iterator:\n$it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator( \n                                                    'c:/spket' ));\nforeach( $it as $key=>$file ) \n{\n    echo $key.\"=>\".$file.\"\\n\";\n}\n\n?>\n```", "```php\nc:/spket/epl-v10.html=>epl-v10.html\nc:/spket/notice.html=>notice.html\nc:/spket/startup.jar=>startup.jar\nc:/spket/configuration/config.ini=>config.ini\nc:/spket/configuration/org.eclipse.osgi/.manager/\n                                .fileTableLock=>.fileTableLock\nc:/spket/configuration/org.eclipse.osgi/.manager/\n                                .fileTable.4=>.fileTable.4\nc:/spket/configuration/org.eclipse.osgi/.manager/\n                                .fileTable.5=>.fileTable.5\nc:/spket/configuration/org.eclipse.osgi/bundles/4/1/.cp/\n                    swt-win32-3236.dll=>swt-win32-3236.dll\nc:/spket/configuration/org.eclipse.osgi/bundles/4/1/.cp/\n                    swt-gdip-win32-3236.dll=>swt-gdip-win32-3236.dll\nc:/spket/configuration/org.eclipse.osgi/bundles/48/1/.cp/os/win32/\n                    x86/localfile_1_0_0.dll=>localfile_1_0_0.dll\nc:/spket/configuration/org.eclipse.osgi/bundles/69/1/.cp/os/win32/\n                    x86/monitor.dll=>monitor.dll\nc:/spket/spket.exe=>spket.exe\nc:/spket/spket.ini=>spket.ini\n………\n```", "```php\n<?\nclass Post\n{\n  public $id;\n  public $title;\n\n  function __construct($title, $id)\n  {\n    $this->title = $title;\n    $this->id = $id;\n  }\n}\n\nclass Comment{\n  public $content;\n  public $post_id;\n\n  function __construct($content, $post_id)\n  {\n    $this->content = $content;\n    $this->post_id = $post_id;\n  }\n}\n\n$posts = new ArrayObject();\n$comments = new ArrayObject();\n\n$posts->append(new post(\"Post 1\",1));\n$posts->append(new post(\"Post 2\",2));\n\n$comments->append(new Comment(\"comment 1\",1));\n$comments->append(new Comment(\"comment 2\",1));\n$comments->append(new Comment(\"comment 3\",2));\n$comments->append(new Comment(\"comment 4\",2));\n\n$a = new AppendIterator();\n$a->append($posts->getIterator());\n$a->append($comments->getIterator());\n\n//print_r($a->getInnerIterator());\n\nforeach ($a as $key=>$val)\n{\n  if ($val instanceof post)\n  echo \"title = {$val->title}\\n\";\n  else if ($val instanceof Comment )\n  echo \"content = {$val->content}\\n\";\n\n}\n?>\n```", "```php\ntitle = Post 1\ntitle = Post 2\ncontent = comment 1\ncontent = comment 2\ncontent = comment 3\ncontent = comment 4\n```", "```php\n<?php\nclass GenderFilter extends FilterIterator\n{\n  private $GenderFilter;\n\n  public function __construct( Iterator $it, $gender=\"F\" )\n  {\n    parent::__construct( $it );\n    $this->GenderFilter = $gender;\n  }\n\n  //your key point to implement filter\n  public function accept()\n  {\n    $person = $this->getInnerIterator()->current();\n\n    if( $person['sex'] == $this->GenderFilter ) \n    {    \n      return TRUE;\n    }       \n    return FALSE;\n  }\n}\n\n$arr = array(  \n  array(\"name\"=>\"John Abraham\", \"sex\"=>\"M\", \"age\"=>27),\n  array(\"name\"=>\"Lily Bernard\", \"sex\"=>\"F\", \"age\"=>37),\n  array(\"name\"=>\"Ayesha Siddika\", \"sex\"=>\"F\", \"age\"=>26),\n  array(\"name\"=>\"Afif\", \"sex\"=>\"M\", \"age\"=>2)\n);\n\n$persons = new ArrayObject( $arr ); \n\n$iterator = new GenderFilter( $persons->getIterator() );\nforeach( $iterator as $person ) \n{\n  echo $person['name'] . \"\\n\"; \n}\n\necho str_repeat(\"-\",30).\"\\n\";\n\n$persons = new ArrayObject( $arr ); \n\n$iterator = new GenderFilter( $persons->getIterator() ,\"M\");\nforeach( $iterator as $person ) \n{\n    echo $person['name'] . \"\\n\"; \n}\n\n?>\n```", "```php\nLily Bernard\nAyesha Siddika\n------------------------------\nJohn Abraham\nAfif\n```", "```php\npublic function accept()\n  {\n    $person = $this->getInnerIterator()->current();\n    if( $person['sex'] == $this->GenderFilter ) \n    {    \n      return TRUE;\n    }       \n      return FALSE;\n  }\n}\n\n```", "```php\n<?\n$arr = array(  \n  array(\"name\"=>\"John Abraham\", \"sex\"=>\"M\", \"age\"=>27),\n  array(\"name\"=>\"Lily Bernard\", \"sex\"=>\"F\", \"age\"=>37),\n  array(\"name\"=>\"Ayesha Siddika\", \"sex\"=>\"F\", \"age\"=>26),\n  array(\"name\"=>\"Afif\", \"sex\"=>\"M\", \"age\"=>2)\n);\n\n$persons = new ArrayObject($arr);\n\n$LI = new LimitIterator($persons->getIterator(),1,2);\nforeach ($LI as $person) {\n  echo $person['name'].\"\\n\";\n}\n?>\n```", "```php\nLily Bernard\nAyesha Siddika\n```", "```php\n<?\nprint_r(get_class_methods(NoRewindIterator));\n  //you can also use refelection API as before to see the methods. \n?>\n```", "```php\nArray\n(\n  [0] => __construct\n  [1] => rewind\n  [2] => valid\n  [3] => key\n  [4] => current\n  [5] => next\n  [6] => getInnerIterator\n)\n```", "```php\n<?\n$arr = array(  \n  array(\"name\"=>\"John Abraham\", \"sex\"=>\"M\", \"age\"=>27),\n  array(\"name\"=>\"Lily Bernard\", \"sex\"=>\"F\", \"age\"=>37),\n  array(\"name\"=>\"Ayesha Siddika\", \"sex\"=>\"F\", \"age\"=>26),\n  array(\"name\"=>\"Afif\", \"sex\"=>\"M\", \"age\"=>2)\n);\n\n$persons = new ArrayObject($arr);\n\n$LI = new NoRewindIterator($persons->getIterator());\nforeach ($LI as $person) {\n  echo $person['name'].\"\\n\";\n\n  $LI->rewind();\n}\n?>\n```", "```php\nJohn Abraham\nLily Bernard\nAyesha Siddika\nAfif\n\n```", "```php\n<?\n$arr = array(  \n    array(\"name\"=>\"John Abraham\", \"sex\"=>\"M\", \"age\"=>27),\n    array(\"name\"=>\"Lily Bernard\", \"sex\"=>\"F\", \"age\"=>37),\n    array(\"name\"=>\"Ayesha Siddika\", \"sex\"=>\"F\", \"age\"=>26),\n    array(\"name\"=>\"Afif\", \"sex\"=>\"M\", \"age\"=>2)\n);\n\n$persons = new ArrayObject($arr);\n\n$it = $persons->getIterator();\n$it->seek(2);\n\nwhile ($it->valid())\n{\n  print_r($it->current());\n  $it->next();\n}\n?>\n```", "```php\nArray\n(\n  [name] => Ayesha Siddika\n  [sex] => F\n  [age] => 26\n)\nArray\n(\n  [name] => Afif\n  [sex] => M\n  [age] => 2\n)\n\n```", "```php\n<?\n$arr = array(  \n  \"john\"=>array(\"name\"=>\"John Abraham\", \"sex\"=>\"M\", \"age\"=>27),\n  \"lily\"=>array(\"name\"=>\"Lily Bernard\", \"sex\"=>\"F\", \"age\"=>37),\n  \"ayesha\"=>array(\"name\"=>\"Ayesha Siddika\", \"sex\"=>\"F\", \"age\"=>26),\n  \"afif\"=>array(\"name\"=>\"Afif\", \"sex\"=>\"M\", \"age\"=>2)\n);\n\nclass MyRecursiveIterator extends ArrayIterator implements \n                                           RecursiveIterator \n{\n  public function hasChildren()\n  {\n    return is_array($this->current());\n  }\n\n  public function getChildren()\n  {\n    return new MyRecursiveIterator($this->current());\n  }\n}\n\n$persons = new ArrayObject($arr);\n$MRI = new RecursiveIteratorIterator(new MyRecursiveIterator($persons));\nforeach ($MRI as $key=>$person)\necho $key.\" : \".$person.\"\\n\";\n?>\n```", "```php\nname : John Abraham\nsex : M\nage : 27\nname : Lily Bernard\nsex : F\nage : 37\nname : Ayesha Siddika\nsex : F\nage : 26\nname : Afif\nsex : M\nage : 2\n\n```", "```php\nArray\n(\n    [0] => __construct\n    [1] => getFilename\n    [2] => rewind\n    [3] => eof\n    [4] => valid\n    [5] => fgets\n    [6] => fgetcsv\n    [7] => flock\n    [8] => fflush\n    [9] => ftell\n    [10] => fseek\n    [11] => fgetc\n    [12] => fpassthru\n    [13] => fgetss\n    [14] => fscanf\n    [15] => fwrite\n    [16] => fstat\n    [17] => ftruncate\n    [18] => current\n    [19] => key\n    [20] => next\n    [21] => setFlags\n    [22] => getFlags\n    [23] => setMaxLineLen\n    [24] => getMaxLineLen\n    [25] => hasChildren\n    [26] => getChildren\n    [27] => seek\n    [28] => getCurrentLine\n    [29] => __toString\n)\n```", "```php\n<?\n$file = new SplFileObject(\"c:\\\\lines.txt\");\n\nforeach( $file as $line ) {\n    echo $line;\n}\n\n?>\n```", "```php\nArray\n(\n    [0] => __construct\n    [1] => getPath\n    [2] => getFilename\n    [3] => getPathname\n    [4] => getPerms\n    [5] => getInode\n    [6] => getSize\n    [7] => getOwner\n    [8] => getGroup\n    [9] => getATime\n    [10] => getMTime\n    [11] => getCTime\n    [12] => getType\n    [13] => isWritable\n    [14] => isReadable\n    [15] => isExecutable\n    [16] => isFile\n    [17] => isDir\n    [18] => isLink\n    [19] => getFileInfo\n    [20] => getPathInfo\n    [21] => openFile\n    [22] => setFileClass\n    [23] => setInfoClass\n    [24] => __toString\n)\n\n```", "```php\n<?php\n\nclass CustomFO extends SplFileObject\n{\n  private $i=1;\n  public function current() \n  {\n\n    return $this->i++ . \":   \" . \n             htmlspecialchars($this->getCurrentLine()).\"\";\n  }\n}\n$SFI= new SplFileInfo( \"splfileinfo2.php\" );\n\n$SFI->setFileClass( \"CustomFO\" );\n$file = $SFI->openFile(  );\necho \"<pre>\";\nforeach( $file as $line ) \n{\n  echo $line;\n}\n\n?>\n```", "```php\n1:   \n2:   <?php\n3:   \n4:   class CustomFO extends SplFileObject\n     {\n5:     private $i=1;\n6:     public function current() \n     {\n7:   \n8:       return $this->i++ . \":   \" . \n                htmlspecialchars($this->getCurrentLine()).\"\";\n9:     }\n10:   }\n11:   $SFI= new SplFileInfo( \"splfileinfo2.php\" );\n12:   \n13:   $SFI->setFileClass( \"CustomFO\" );\n14:   $file = $SFI->openFile(  );\n15:   echo \"<pre>\";\n16:   foreach( $file as $line ) \n      {\n17:   \techo $line;\n18:   }\n19:   \n20:   ?>\n21:   \n22:   \n\n```", "```php\n<?\n$os = new SplObjectStorage();\n\n$person = new stdClass();// a standard object\n$person->name = \"Its not a name\";\n$person->age = \"100\";\n\n$os->attach($person); //attached in the storage\n\nforeach ($os as $object)\n{\n  print_r($object);\n  echo \"\\n\";\n}\n\n$person->name = \"New Name\"; //change the name\n\necho str_repeat(\"-\",30).\"\\n\"; //just a format code\n\nforeach ($os as $object)\n{\n  print_r($object); //you see that it changes the original object\n  echo \"\\n\";\n}\n\n$person2 = new stdClass();\n$person2->name = \"Another Person\";\n$person2->age = \"80\";\n\n$os->attach($person2);\n\necho str_repeat(\"-\",30).\"\\n\";\n\nforeach ($os as $object)\n{\n  print_r($object);\n  echo \"\\n\";\n}\n\necho \"\\n\".$os->contains($person);//seek\n\n$os->rewind();\necho \"\\n\".$os->current()->name;\n\n$os->detach($person); //remove the object from collection\n\necho \"\\n\".str_repeat(\"-\",30).\"\\n\";\n\nforeach ($os as $object)\n{\n  print_r($object);\n  echo \"\\n\";\n}\n\n?>\n```", "```php\nstdClass Object\n(\n  [name] => It's not a name\n  [age] => 100\n)\n\n------------------------------\nstdClass Object\n(\n  [name] => New Name\n  [age] => 100\n)\n\n------------------------------\nstdClass Object\n(\n  [name] => New Name\n  [age] => 100\n)\n\nstdClass Object\n(\n  [name] => Another Person\n  [age] => 80\n)\n\n1\nNew Name\n------------------------------\nstdClass Object\n(\n  [name] => Another Person\n  [age] => 80\n) \n```"]