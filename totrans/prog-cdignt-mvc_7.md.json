["```php\n$this->load->view('templates/home');\n//The following load view call, render a view using all its optional parameters\n$this->load->view('view_file', // PHP view file to render\n$view_params,  // parameters array for view\nFALSE  //  FALSE - default. to output\n//   TRUE – back as string\n  );\n```", "```php\n$view_buffer=$this->load->view('sectionA/view_file', $params, TRUE);\n```", "```php\n$data['myval'] = 'Hello';\n$this->load->view('my_view',$data);\n```", "```php\n<H1><?PHP echo $myval; ?></H1>\n```", "```php\n$data['myval'] = 'Hello';\n```", "```php\n<H1><?PHP echo $myval; ?></H1>\n```", "```php\n<H1>Hello</H1>\n```", "```php\n$param = $this->session->userdata('param1' );\n```", "```php\n$calc = $this->my_lib->my_lib_calc( $param);\n<H1><?PHP echo $calc; ?></H1>\n```", "```php\n<HTML>\n<?PHP\n// URI is a built-in CI library\n// if the rendering controller for this view was// http://mysite/myproject/mycontroller/test3\n// the segment(1) = mycontroller – the controller name\n// the segment(2) = test3 - the controller method\n$the_controller = $this->uri->segment(1);\n$the_method = $this->uri->segment(2);\n?>\n<H1>This View Rendered by Controller\n<?=$the_controller; ?> </H1>\n<H1>Using its method named <?=$the_method; ?></H1>\n```", "```php\n<HTML>\n<?PHP\n$attr = ' class=\"nice_field\" ';\n$options = array();\n$options[0] = 'Blue';\n$options[1] = 'Green';\n$options[2] = 'Yellow';\n$default    = 1;\necho form_dropdown(\"color\", $options, $default, $attr);\n?>\n```", "```php\n<select class=\"nice_field\" name=\"color\">\n<option value=\"0»>Blue</option>\n<option selected=»selected» value=»1»>Green</option>\n<option value=»2»>Yellow</option>\n</select>\n```", "```php\n<script type=\"text/javascript\">\nfunction get_person_info (SSN_val, name_sel, phone_sel, err_sel) {\n  /*\n  //SSN_val –the value of the SSN user typed in to search \n  //name_sel–the name input that the Ajax will update if SSN found\n..//phone_sel-the phone selector to be update if SSN found as well\n  //err_sel-the error message area, to explain error such as SSN //not found or some other error occurred.\n  */\n  varajax_url = '<?php echo base_url();?>ajax/get_person_info';\n  $.ajax({\n    type: \"POST\",    //Very important POST is the best\n    url: ajax_url,\n    // the URI of the AJAX server side controller method that will processes this request\n    data: {SSN: SSN_val},\n    // SSN is the parameter name\n    // SSN_val is the value\n    dataType: \"json\",\n    //the retuned data expected to be JSON\n    success: function(data) { \n      // the data is the array conversion of the JSON data// retuned to ease our usage in the JavaScript!\n      if(data.result=='found') {\n        // Let's show the name and phone of the person with the//given SSN\n        $(name_sel).val(data.name);\n        $(phone_sel).val(data.phone);\n      } else{\n        // SSN Not found in the database!\n        // Let's notify SSN has no person match\n        $(err_sel).css ('color', 'red');\n        $(err_sel).text('No person found with SSN' + SSN_val );\n      }\n    },\n    error : //Ajax error occurred such as Ajax server not found//and so on\n    function ( msg ) { alert ('Error:' + msg )\n    $(err_sel).css ('color', 'red');\n    $(err_sel).text ('Error:' + msg);\n  }\n});\n// Wait for the document to be ready and bind the user click// on the #get id selector to call the AJAX search service// with the user typed SSN\n$(function(){\n  $('#get').click( function(){ \n    get_person_info ($('#SSN').val(),\n    '#name',\n    '#Phone',\n    '#err_sel'\n  );\n  });\n});\n</script>\n```", "```php\n<form>\n<label>Enter SSN</label>\n<input type='text' name=\"SSN\" id=\"SSN\">\n<button id='get'>Get Info</button>\n<BR/>\n<label>Name</label><B id='name'></B><BR/>\n<label>phone</label><B id='phone'></B>\n</form>\n<B id='err_sel'></B>\n```", "```php\n$this->load->library('javascript');\n```", "```php\n<script type='text/javascript'src=\"img/myjs.js\" ></script>\n```", "```php\n//The default template shall be defined as follow:\n//Note, more templates can be defined in the same fashion\n$template['default']['template'] = 'main_template';\n$template['default']['regions'] = array ('header', 'upper_navigation', 'content', 'footer');\n```", "```php\n<html>\n<body>\n<div><?=$header;?></div>\n<div ><?= $upper_navigation;?></div>\n<div><!--main content area -->\n<?= $content; ?>\n</div>\n<!-- #footer -->\n<?=$footer;?>\n</body>\n</html>\n```", "```php\n$this->load->library('template');\n```", "```php\n//set the selected template from the template config we want//to use\n$this->template->set_template('default');\n```", "```php\n$this->template->write_view ('header', 'header_view', $data);.\n$this->template->write_view('upper_navigation', 'upper_navigation_view', $data );\n$this->template->write_view ('content', 'content_view', $data);\n$this->template->write_view ('footer', 'footer_view', $data);\n```", "```php\n// Now, we have all the regions rendered into the\n// template instance buffer, we can render them all to\n// the desired template base page.\n$this->template->render();\n```", "```php\nnavigator.geolocation.getCurrentPosition(getLocation, locationFail);\n\n```", "```php\nclass Gmaps extends CI_Controller\n{\n// Extends the CI controller to be our Gmaps controller powered by \n// the Google API wrapper library.\n // Setting the initialization parameters of Google Maps \n // Library Mapper for the window size where the \n // user interaction with Google Maps created window will occur\n private $user_lon = 0;\n private $user_lat = 0;\n  function __construct()\n  {parent::__construct();\n    $this->load->library('googlemaps');\n    // Set the map window sizes:\n    $config['map_width'] = \"1000px\";  // map window width\n    $config['map_height'] = \"1000px\";  // map window height\n    $this->googlemaps->initialize($config);\n  }\n  function index()\n  {\n  /*Initialize and setup Google Maps for our App starting with 3 marked places: London, UK, Bombai, India, Rehovot, Israel */\n  // Initialize our map for this use case of show 3 places // altogether.\n  // let the zoom be automatically decided by Google for// showing the several places in one view\n  $config['zoom'] = \"auto\";\n  $this->googlemaps->initialize($config);\n  //Define the places we want to see marked on Google Map!\n  $this->add_visual_flag ('London, UK');\n  $this->add_visual_flag ('Bombai, India');\n  $this->add_visual_flag ('Rehovot, Israel');\n\n // **NEW CODE ** \n // optional user location if user allow it and was fetched// successfully\n if ( $this->is_user_location_defined () ) {\n $this->add_visual_flag ($this->get_user_location ());\n }\n\n  $data = $this->load_map_setting ();\n  // Load our view, passing the map data that has just been //created.\n  $this->load->view('google_map_view', $data);\n}\n// ** NEW CODE **\nfunction user_location ($lat=0, $lon=0)\n{\n // This is a new code we add for showing the //Geolocation fetched from the view base HTML5 Geolocation//service.\n //Initialize our map with it if it is set.\n if (! $lat&& ! $lon ) $this->index();\n\n // They are ok - let's keep them \n $this->user_lat = $lat;\n $this->user_lon = $lon;\n $config['center'] = $this->get_user_location ();\n // Define the address we want to be on the map center\n $config['zoom'] = \"5\";\n // since its approximate location is country level\n $this->googlemaps->initialize($config);\n //Add visual flag\n $this->add_visual_flag ($config['center']);\n $data = $this->load_map_setting ();\n // Load our view, passing the map data that has just been //created.\n $this->load->view('google_map_view', $data);\n }\n// ** NEW CODE\nfunctionis_user_location_defined ( ) {\n return ( $this->user_lat != 0 ) || ( $this->user_lon!= 0 );\n }\n// ** NEW CODE\nfunctionget_user_location ( ) {\n return $this->user_lat.\", \".$this->user_lon;\n }\n\nfunctionlondon() \n{\n  // as before\n  }\n\nfunctionbombai()\n{\n  // as before\n  }\nfunctionrehovot()\n{\n  // as before\n  }\nfunctionload_map_setting ( ) {\n  // as before\n  }\nfunctionadd_visual_flag ( $place ) {\n  // as before\n  }\n}\n//End class Gmaps\n```", "```php\n<!DOCTYPE html\">\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\" />\n<html>\n<head>\n<script src=\"img/jquery-latest.js\" type ='text/javascript'></script>\n<script>\n// New Code to get the user Geolocation and ask the controller to// render a Google Map for it.\nvar latitude = 0;\nvar longitude = 0;\nfunctionshow_on_map () {\n var DIRECTORY_SEPARATOR = '/';\n\n // Prepare the URL path of calling the Gmaps controller method// user_location with latitude and longitude coordinates as// parameters using the CI naming convention of\n // ControllerName/methodName/Param1/Param2\n Var url_to_show = \n '<?php echo base_url(); ?>index.php/gmaps/user_location/' +\n longitude + DIRECTORY_SEPARATOR + latitude;\n // Use jQuery to issue the HTTP controller call and rendering// request\n $(location).attr('href', url_to_show );\n }\n$(document).ready(function() {\n // if user clicks on the <li> for getting its Geolocation\n $('#getmylocation').click(checkLocation);\n functioncheckLocation() {\n // Check if the browser supports the HTML5 Geolocation\n // Note that navigator.geolocation will pop a request from// the user to allow getting its location (Privacy)\n if (navigator.geolocation) {\n // It does so let the user be notified\n $('#notifications').html ( 'fetching your location, wait...' );\n $('#notifications').css ( 'color', 'blue' );\n\n // Try to fetch the latitude/longitude of the browsing user//and provides the callbacks\n // Success: getLocation\n // Failure: locationFail\n navigator.geolocation.getCurrentPosition(getLocation, locationFail);\n }\n\nelse {\n $('#notifications').html( 'Sorry, your browser settings does not enable fetching yourGeolocation');\n } // ends checkLocation()\n //this is what happens if getCurrentPosition is successful\n functiongetLocation(position) { \n latitude = position.coords.latitude;\n longitude = position.coords.longitude;\n // Notify user for its location:\n $('#notifications').html\n ( 'Your approx. position : (' + latitude + ',' + longitude + ')' );\n $('#notifications').css ( 'color', 'green' );\n // Two seconds after the notification to user we have the// location issue call to the controller to show it on// the Google Map\n setTimeout ( show_on_map, 2000);\n }\n //this is what happens if getCurrentPosition is unsuccessful//(getCurrentPositionerrorCallback)\n functionlocationFail() {\n $('#notifications').html('Sorry, your browser could not fetch your location ...');\n $('#notifications').css ('color', 'red');\n }\n });\n </script>\n    <!—As Before..  -->\n <!—Notification selector  -->\n <HR></HR>\n <DIV style='background:lightgreen;width:300px;'>\n <span id='notifications'>...</span>\n    </DIV>\n    <HR></HR>\n    <ul>\n    <!-- Let the User Always Get Back to the default Zoom out withall places marked>\n    <li><?php echo anchor(\"index.php/gmaps\", '<B>See All Locations</B>' ) ?></li>\n <!—If user clicks this one the Geo Location service will start -->\n <li id = 'getmylocation' style = 'cursor: pointer;color: blue; decoration: underline'> Show Me My Location</li>\n    <!—As Before..  -->\n```", "```php\n<?php if (!defined('BASEPATH'))exit('No direct script access allowed');\nclass Ajax_handler extends CI_Controller {\n  function __construct()\n  {parent::__construct();\n    /* Standard libraries, database & helper URL loaded via theauto load\n    */\n    if (!$this->input->is_ajax_request())\n    {exit( \"Bad Request ignored! - Your info has been logged forfurther investigation of attacking the site!\");\n    }\n  /* ------ Our Users Model ---------- */\n  $this->load->model ( 'users_model' );\n}\n\nfunctionsave_user_feedback () {\n  // Get the feedback content\n  $feedback = $this->input->post('feedback');\n  // Get if the user is logged in keep the user id\n  $this->users_model->keep_user_feedback($feedback);\n  }\nfunctionget_user_feedback_log () {\n  $user = $this->users_model->get_logged_in_user ();\n  if ( $user ) $uid = $user->id;\n  $user_feedback_rows = $this->users_model->get_user_feedbacks( $uid );\n  $html = '';\n  foreach ($user_feedback_rows as $row )\n  $html.= $row->timestamp.' -  <B>'.$row->feedback.'</B><BR/>';\n  $result = array ('result' => $html);\n  echojson_encode ($result);\n  return;\n  }\n} // End Ajax_handler\n```", "```php\n<?php if (!defined('BASEPATH'))\nexit('No direct script access allowed');\nclass Users_model extends CI_Model {\n  function __construct()\n  {parent::__construct();\n  }\n  functioncheck_login ($user, $pass)\n  {\n    /* No change here\n    */ \n    }\n  functionget_logged_in_user (  )\n  {\n    // Will check if there's a login user session and if so will// fetch its record\n    $ci = &get_instance();\n\n    //get the login in user ID, if any\n    $uid = $this->session->userdata('user_id');\n    if (! $uid ) return NULL;\n    $sql = \"SELECT *\n    FROMusers\n    WHERE id = '$uid' \";\n\n    $q = $ci->db->query($sql);\n    if ($q->num_rows())\n    {foreach ($q->result() as $row )\n      return $row;\n      }\n    return NULL;\n    }\n    Function get_user_rec ( $uid ){\n      // Will check if there's a login user session and if so will// fetch its record\n      $ci = &get_instance();\n      // get the login in user ID, if any\n      if (! $uid ) return NULL;\n      $sql = \"SELECT *FROM users WHERE id = '$uid' \";\n      $q = $ci->db->query($sql);\n      if($q->num_rows())\n      {foreach ($q->result() as $row ) return $row;\n        }\n      return NULL;\n      }\n    Function keep_user_feedback ($feedback) {\n      $ci = &get_instance();\n      $uid_rec = $this->get_logged_in_user ();\n      $uid = $uid_rec ? $uid_rec->id: 0;\n      /* id email uid feedback timestamp\n      */\n      $table = 'user_feedback';\n      $data = array ( 'feedback'  =>urldecode ($feedback),'uid'=>  $uid);\n      $ci->db->insert($table, $data);\n      }\n      Function  get_user_feedbacks ( $uid ) {\n        $ci = &get_instance();\n        if (! $uid ) return NULL;\n        $feedbacks = array();\n        $table = 'user_feedback';\n        $sql = \"SELECT * FROM  $tableWHERE  uid = '$uid'\n        ORDER BY timestamp DESC\";\n        $q = $ci->db->query($sql);\n        if ( $q->num_rows() ) {\n          foreach ($q->result() as $row)\n          $feedbacks[] = $row;\n          }\n        return $feedbacks;\n        }\n      } // End Users_model\n```", "```php\n<!DOCTYPE html\">\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\" />\n<html>\n<head>\n<script src=\"img/jquery-latest.js\" type='text/javascript'></script>\n<scriptsrc=\"img/jquery-1.8.2.js\"></script>\n<script src=\"img/jquery-ui.js\">\n</script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"<?=base_url(); ?>/css/my_style.css\" media=\"screen\" />\n<script type='text/javascript'>\n// The AJAX handler controller method URLs\nvarsave_user_feedback_submitter = '<?=site_url()?>'+'index.php/ajax_handler/save_user_feedback';\nvarget_user_feedbacks = '<?=site_url()?>' +'index.php/ajax_handler/get_user_feedback_log';\nfunctionajax_save_user_feedback (feedback) {\n  $.ajax({\n    type : \"POST\",\n    url : save_user_feedback_submitter,\n    data : {feedback: feedback},\n    dataType: \"json\",\n    success: function(data) {\n      // When AJAX return back alert // ('Your feedback Updated - Thanks!');\n      }\n    });\n  }\n\nfunctionajax_get_user_feedback_log() {\n  $.ajax({\n    type: \"POST\",\n    url: get_user_feedbacks,\n    dataType: \"json\",\n    success: function(data) {\n      $('#feedback_log_view').show();\n      $('#feedback_log_view').html(data.result);\n      }\n    });\n  }\n$(document).ready(function() {\n  // Set up the jQuery UI feedback dialog\n  $(\"#ideas-form\").dialog({\n    autoOpen: false,\n    height: 270,\n    width: 700,\n    modal: true,\n    resizable: false,\n    effect: 'drop',\n    direction: \"up\",\n    show: \"slide\",\n    buttons: {\n      \"Send Us Your Feedback\": function() {\n        varuser_feedback = $('#user_feedback').val();\n        ajax_save_user_feedback(user_feedback);\n        // clean feedback entry for next one\n        $('#user_feedback').val('');\n        // Show user all its feedback so far\n        ajax_get_user_feedback_log();\n        $(this).dialog(\"close\");\n        },\n      \"Cancel\": function() {\n        $(this).dialog(\"close\");\n        }\n      }\n    });\n\n  // When user clicks on for a popup feedback window\n  $('#user_ideas').button().click(function() {\n    $(\"#ideas-form\").dialog(\"open\");\n    });\n\n  $('#feedback_log').button().click(function() {\n    ajax_get_user_feedback_log();\n    });\n  });// Document ready section\n</script >\n</head>\n<body>\n<H1>Welcome <?=$user_name; ?>! </H1>\n<H1>You are logged in! </H1>\n<HR></HR>\n  <H3>Your User ID is: <?=$uid; ?></H3>\n  <H3>Your System Role is: <?=$role; ?></H3>\n  <H3>Your Menu options: <?=$menu; ?></H3>\n<DIV>\n  <button id='user_ideas' style=\"cursor: pointer; position: relative; top:0px\" title='Share your feedback/ideas'> Add A New Feedback </button><BR/>\n  <button id=\"feedback_log\" style= \"cursor: pointer; position: relative; top:0px\" title=\"Your feedback log\"> See Your Feedback Log </button>\n</DIV>\n  <div id='feedback_log_view' style= \"display: none; width: 800 px; border-style: solid;border-color: black; overflow-x: auto; height: 200 px; overflow-y: auto;\">\n</DIV>\n<H2><?php echo anchor ('index.php/auth/logout', 'Logout')?></H2>\n\n  <div id= \"ideas-form\", title= \"Your Feedback To Improve\">\n<form>\n<fieldset>\n<span id= \"user_name\" class= \"text ui-widget-content ui-corner-all\"> Thanks <? = $user_name; ?>, Please share your feedback with us</span>\n<textarea name= \"idea_desc\", id = \"user_feedback\", rows = \"10\" cols = \"83\", placeholder = 'Your ideas'></textarea>\n</fieldset>\n</form>\n</div>\n</body>\n</html>\n```"]