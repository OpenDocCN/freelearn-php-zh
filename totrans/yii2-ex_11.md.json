["```php\n$ mkdir api\n\n```", "```php\n$ mkdir config\n$ mkdir web\n$ mkdir controllers\n$ mkdir runtime\n\n```", "```php\n<?php\nreturn [\n];\n```", "```php\n<?php\n$params = array_merge(\n    require(__DIR__ . '/../../common/config/params.php'),\n    require(__DIR__ . '/../../common/config/params-local.php'),\n    require(__DIR__ . '/params.php')\n);\n\nreturn [\n    'id' => 'app-api',\n    'basePath' => dirname(__DIR__),\n    'controllerNamespace' => 'api\\controllers',\n    'bootstrap' => ['log'],\n    'modules' => [],\n\n    'components' => [\n\n        'urlManager' => [\n            'enablePrettyUrl' => true,\n            'showScriptName' => false,\n        ],        \n\n        'user' => [\n            'identityClass' => '\\common\\models\\User',\n            'enableSession' => false,\n            'loginUrl' => null\n        ],\n\n        'log' => [\n            'traceLevel' => YII_DEBUG ? 3 : 0,\n            'targets' => [\n                [\n                    'class' => 'yii\\log\\FileTarget',\n                    'levels' => ['error', 'warning'],\n                ],\n            ],\n        ],\n\n    ],\n    'params' => $params,\n];\n```", "```php\n<?php\ndefined('YII_DEBUG') or define('YII_DEBUG', true);\ndefined('YII_ENV') or define('YII_ENV', 'dev');\n\nrequire(__DIR__ . '/../../vendor/autoload.php');\nrequire(__DIR__ . '/../../vendor/yiisoft/yii2/Yii.php');\nrequire(__DIR__ . '/../../common/config/bootstrap.php');\n\n$config = yii\\helpers\\ArrayHelper::merge(\n    require(__DIR__ . '/../../common/config/main.php'),\n    require(__DIR__ . '/../../common/config/main-local.php'),\n    require(__DIR__ . '/../config/main.php')\n);\n\n$application = new yii\\web\\Application($config);\n$application->run();\n```", "```php\nRewriteEngine on\n\n# If a directory or a file exists, use it directly\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\n# Otherwise forward it to index.php\nRewriteRule . index.php\n```", "```php\nYii::setAlias('api', dirname(dirname(__DIR__)) . '/api');\n```", "```php\n<?php\nnamespace api\\controllers;\n\nuse yii\\rest\\Controller;\n\nclass TestRestController extends Controller\n{\n    private function dataList()\n    {\n        return [\n            [ 'id' => 1, 'name' => 'Albert', 'surname' => 'Einstein' ],\n            [ 'id' => 2, 'name' => 'Enzo', 'surname' => 'Ferrari' ],\n            [ 'id' => 4, 'name' => 'Mario', 'surname' => 'Bros' ]\n        ];\n    }\n\n    public function actionIndex()\n    {\n            return $this->dataList();\n    }\n}\n```", "```php\n$ curl -H \"Accept: application/xml\" http://hostname/yiiadv/api/web/test-rest/index\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response><item><id>1</id><name>Albert</name><surname>Einstein</surname></item><item><id>2</id><name>Enzo</name><surname>Ferrari</surname></item><item><id>4</id><name>Mario</name><surname>Bros</surname></item></response>\n\n```", "```php\n$ curl -H \"Accept: application/json\" http://hostname/yiiadv/api/web/test-rest/index\n\n[{\"id\":1,\"name\":\"Albert\",\"surname\":\"Einstein\"},{\"id\":2,\"name\":\"Enzo\",\"surname\":\"Ferrari\"},{\"id\":4,\"name\":\"Mario\",\"surname\":\"Bros\"}]\n\n```", "```php\n    public function behaviors()\n    {\n        $behaviors = parent::behaviors();\n        $behaviors['verbs'] = [\n                'class' => \\yii\\filters\\VerbFilter::className(),\n                'actions' => [\n                    'index'  => ['get'],\n                ],\n        ];\n        return $behaviors;\n    }\n```", "```php\n<?php\nnamespace api\\controllers;\n\nuse yii\\rest\\ActiveController;\n\nclass RoomsController extends ActiveController\n{\n    public $modelClass = 'common\\models\\Room';\n}\n```", "```php\n[\n{\n    \"id\": 1,\n    \"floor\": 1,\n    \"room_number\": 101,\n    \"has_conditioner\": 1,\n    \"has_tv\": 0,\n    \"has_phone\": 1,\n    \"available_from\": \"2015-05-20\",\n    \"price_per_day\": \"120.00\",\n    \"description\": \"description 1\"\n\n},\n\n    {\n        \"id\": 2,\n        \"floor\": 2,\n        \"room_number\": 202,\n        \"has_conditioner\": 0,\n        \"has_tv\": 1,\n        \"has_phone\": 1,\n        \"available_from\": \"2015-05-30\",\n        \"price_per_day\": \"118.00\",\n        \"description\": \"description 2\"\n    }\n]\n```", "```php\nX-Pagination-Current-Page: 1\nX-Pagination-Page-Count: 1\nX-Pagination-Per-Page: 20\nX-Pagination-Total-Count: 2\n```", "```php\n{\n  \"id\": 1,\n  \"floor\": 1,\n  \"room_number\": 101,\n  \"has_conditioner\": 1,\n  \"has_tv\": 0,\n  \"has_phone\": 1,\n  \"available_from\": \"2015-05-20\",\n  \"price_per_day\": \"120.00\",\n  \"description\": \"description 1\"\n}\n```", "```php\n{\n  \"name\": \"Not Found\",\n  \"message\": \"Object not found: 100\",\n  \"code\": 0,\n  \"status\": 404,\n  \"type\": \"yii\\\\\\\\web\\\\\\\\NotFoundHttpException\"\n}\n```", "```php\n'request' => [\n    'parsers' => [\n        'application/json' => 'yii\\web\\JsonParser',\n    ]\n]\n```", "```php\n    {\n        \"floor\": 99,\n        \"room_number\": 999,\n        \"has_conditioner\": 1,\n        \"has_tv\": 1,\n        \"has_phone\": 1,\n        \"available_from\": \"2015-12-30\",\n        \"price_per_day\": \"48.00\",\n        \"description\": \"description room 999\"\n    }\n```", "```php\n201 Created as HTTP Header Status Code\nObject just created as body content\n\n```", "```php\n422 Data Validation Failed\nAn array of field-message to indicate which validation errors occurred\n\n```", "```php\n    'components' => [\n            ...\n        'user' => [\n            'identityClass' => 'common\\models\\User',\n            'enableSession' => false,\n            'loginUrl' => null\n        ],\n];\n```", "```php\npublic function behaviors()\n{\n    $behaviors = parent::behaviors();\n    $behaviors['authenticator'] = [\n        'class' => yii\\filters\\auth\\HttpBasicAuth::className(),\n    ];\n    return $behaviors;\n}\n```", "```php\npublic function behaviors()\n{\n    $behaviors = parent::behaviors();\n    $behaviors['authenticator'] = [\n        'class' => yii\\filters\\auth\\CompositeAuth::className(),\n        'authMethods' => [\n            yii\\filters\\auth\\HttpBasicAuth::className(),\n            yii\\filters\\auth\\HttpBearerAuth::className(),\n            yii\\filters\\auth\\QueryParamAuth::className(),\n        ],\n    ];\n    return $behaviors;\n}\n```", "```php\n    public static function findIdentityByAccessToken($token, $type = null)\n    {\n        return static::findOne(['access_token' => $token]);\n    }\n```", "```php\npublic function behaviors()\n{\n    $behaviors = parent::behaviors();\n    $behaviors['authenticator'] = [\n            'class' => yii\\filters\\auth\\HttpBasicAuth::className(),\n           'auth' => function($username, $password) {\n            // return null or identity interface\n    // For example search by username and password\n    return \\common\\models\\User::findOne(['username' => $username, 'password' => $password);\n           }\n\n           /*\n           'auth' => [$this, 'httpBasicAuthHandler'],\n           */\n    ];\n    return $behaviors;\n}\n\npublic function httpBasicAuthHandler($username, $password)\n{\n    // For example search by username and password\n    return \\common\\models\\User::findOne(['username' => $username, 'password' => $password]);\n}\n```", "```php\npublic function behaviors()\n{\n    $behaviors = parent::behaviors();\n    $behaviors['authenticator'] = [\n            'class' => yii\\filters\\auth\\QueryParamAuth::className(),\n           'tokenParam' => 'myAccessToken'\n    ];\n    return $behaviors;\n}\n```", "```php\n<?php\nnamespace api\\controllers;\n\nuse yii\\rest\\ActiveController;\nuse yii\\filters\\auth\\CompositeAuth;\nuse yii\\filters\\auth\\HttpBasicAuth;\nuse yii\\filters\\auth\\QueryParamAuth;\n\nclass CustomersController extends ActiveController\n{\n  public $modelClass = 'common\\models\\Customer';\n\n  public function behaviors()\n  {\n    $behaviors = parent::behaviors();\n\n    $behaviors['authenticator'] = [\n      'class' => CompositeAuth::className(),\n      'authMethods' => [\n        [\n          'class' => HttpBasicAuth::className(),\n          'auth' => function($username, $password)\n          {\n            $out = null;\n            $user = \\common\\models\\User::findByUsername($username);\n            if($user!=null)\n            {\n              if($user->validatePassword($password)) $out = $user;\n            }\n            return $out;\n          }\n        ],\n        [\n           'class' => QueryParamAuth::className(),\n        ]\n      ]\n    ];\n\n   return $behaviors;\n  }\n}\n```", "```php\n    public function actionAccessTokenByUser($username, $passwordHash)\n    {\n        $accessToken = null;\n\n        $user = \\common\\models\\User::findOne(['username' => $username, 'password_hash' => $passwordHash]);\n        if($user!=null)\n        {\n            $user->access_token = Yii::$app->security->generateRandomString();\n            $user->save();\n            $accessToken = $user->access_token;\n        }        \n        return [ 'access-token' => $accessToken ];\n    }\n```", "```php\npublic static function findIdentityByAccessToken($token, $type = null)\n    {\n    return User::findOne(['access_token' => $token]);\n    }\n```", "```php\n    public function behaviors()\n    {\n        $behaviors = parent::behaviors();\n        $behaviors['verbs'] = [\n                'class' => \\yii\\filters\\VerbFilter::className(),\n                'actions' => [\n                    'myCustomAction'  => ['get', 'head'],\n                ],\n        ];\n\n        $behaviors['authenticator'] = [\n        'except' => 'myCustomAction',\n            'class' => HttpBasicAuth::className(),\n        ];\n\n        return $behaviors;\n    }\n\npublic function actionMyCustomAction()\n{\n    …\n    …\n\n}\n```", "```php\n<?php\nnamespace api\\controllers;\n\nuse Yii;\nuse yii\\rest\\ActiveController;\nuse yii\\filters\\auth\\CompositeAuth;\nuse yii\\filters\\auth\\HttpBasicAuth;\nuse yii\\filters\\auth\\QueryParamAuth;\n\nclass ReservationsController extends ActiveController\n{\n    public $modelClass = 'common\\models\\Reservation';\n\n    public function actionIndexWithRooms()\n    {\n        $reservations = \\common\\models\\Reservation::find()->all();\n\n        $outData = [];\n        foreach($reservations as $r)\n        {\n            $outData[] = array_merge($r->attributes, ['room' => $r->room->attributes]);\n        }\n        return $outData;        \n    }\n\n}\n```", "```php\n    public function getRoom()\n    {\n        return $this->hasOne(Room::className(), ['id' => 'room_id']);\n    }\n```", "```php\n    public function actionIndexWithRooms()\n    {\n            $_GET['expand'] = 'room';\n            return $this->runAction('index');\n    }\n```", "```php\n<?php\n\nnamespace api\\components;\n\nuse yii\\filters\\auth\\AuthMethod;\nuse Yii;\n\nclass CustomAuthMethod extends AuthMethod {\n\n    public function authenticate($user, $request, $response) {\n    …\n    …\n    …\n}\n…\n…\n…\n}\n```", "```php\n<?php\n\nnamespace api\\components;\n\nuse yii\\filters\\auth\\AuthMethod;\nuse Yii;\n\nclass SessionAuth extends AuthMethod {\n  public $tokenParam = 'sid';\n\n  public function authenticate($user, $request, $response) {\n    $accessToken = $request->get($this->tokenParam);\n\n    if (is_string($accessToken)) {\n\n       Yii::$app->session->id = $accessToken;\n\n       $identity = isset(Yii::$app->session['loggedUser'])?Yii::$app->session['loggedUser']:null;\n\n          if ($identity !== null) {\n             return $identity;\n          }\n    }\n    if ($accessToken !== null) {\n        $this -> handleFailure($response);\n    }\n    return null;\n  }\n\n}\n```", "```php\n<?php\nnamespace api\\controllers;\n\nuse Yii;\nuse yii\\rest\\ActiveController;\nuse yii\\filters\\auth\\CompositeAuth;\nuse yii\\filters\\auth\\HttpBasicAuth;\nuse yii\\filters\\auth\\QueryParamAuth;\nuse api\\components\\SessionAuth;\nuse common\\models\\User;\n\nclass UsersController extends ActiveController\n{\n    public $modelClass = 'common\\models\\User';\n\n    public function behaviors()\n    {\n        $behaviors = parent::behaviors();\n\n        $behaviors['authenticator'] = [\n                'except' => ['login'],\n                'class' => SessionAuth::className(),\n        ];\n\n        return $behaviors;\n    }    \n\n    public function actionLogin($username, $passwordHash)\n    {\n        $dataOut = null;\n\n        $user = User::findOne(['username' => $username, 'password_hash' => $passwordHash]);\n        if($user != null)\n        {\n            $session = Yii::$app->session;\n            $session->open();\n\n            $session['loggedUser'] = $user;\n\n            $sid = $session->id;\n\n            $dataOut = ['sid' => $sid];        \n        }\n\n        return $dataOut;\n    }\n}\n```", "```php\n<?php\nnamespace api\\components;\n\nuse yii\\rest\\ActiveController;\nuse Yii;\nuse yii\\web\\Response;\n\nclass ApiResponse extends \\yii\\web\\Response\n{\n\n    public function send()\n    {\n      ..\n  ..\n  ..\n  }\n}\n```", "```php\n    public function send()\n    {\n        ..\n  ..\n        parent::send();\n }\n```", "```php\n<?php\nnamespace api\\components;\n\nclass ApiResponseCode\n{\n    const ERR_OK = 0;\n    const ERR_LOGIN_REQUIRED = 1;\n    const ERR_METHOD_NOT_FOUND = 2;\n    const ERR_NOT_FOUND = 3;\n    const ERR_NOT_SAVED = 4;\n    const ERR_DUPLICATE = 5;\n    const ERR_INPUT_DATA_FORMAT = 6;\n\n    public static function responsesExtras()\n    {\n        return [\n            ApiResponseCode::ERR_OK => '',\n            ApiResponseCode::ERR_LOGIN_REQUIRED => 'Login required to use this interface',\n            ApiResponseCode::ERR_METHOD_NOT_FOUND => 'Interface not found',\n            ApiResponseCode::ERR_NOT_FOUND => 'Record not found',\n            ApiResponseCode::ERR_NOT_SAVED => 'Error in saving',\n            ApiResponseCode::ERR_DUPLICATE => 'Duplicated record',\n            ApiResponseCode::ERR_INPUT_DATA_FORMAT => 'Input data format incompatible',\n        ];        \n    }\n\n    public static function responseExtraFromCode($rc)\n    {\n        $al = ApiResponseCode::responsesExtras();\n        return (isset($al[$rc]))?$al[$rc]:null;\n    }     \n\n    public static function responseMessages()\n    {\n        return [\n            ApiResponseCode::ERR_OK => 'OK',\n            ApiResponseCode::ERR_LOGIN_REQUIRED => 'ERR_LOGIN_REQUIRED',\n            ApiResponseCode::ERR_METHOD_NOT_FOUND => 'ERR_METHOD_NOT_FOUND',\n            ApiResponseCode::ERR_NOT_FOUND => 'ERR_NOT_FOUND',\n            ApiResponseCode::ERR_NOT_SAVED => 'ERR_NOT_SAVED',\n            ApiResponseCode::ERR_DUPLICATE => 'ERR_DUPLICATED',\n            ApiResponseCode::ERR_INPUT_DATA_FORMAT => 'ERR_INPUT_DATA_FORMAT',\n        ];        \n    }\n\n    public static function responseMessageFromCode($rc)\n    {\n        $al = ApiResponseCode::responseMessages();\n        return (isset($al[$rc]))?$al[$rc]:null;\n    }            \n}\n```", "```php\n<?php\nnamespace api\\components;\n\nuse Yii;\nuse yii\\web\\Response;\n\nclass ApiResponse extends Response\n{\n    public $statusResponseCode;\n    public $statusResponseMessage;\n    public $statusResponseExtra;\n\n    /**\n     * Set response code and extra from code.\n     *\n     * Response extra will be filled based on $extraData value\n     * If $extraData is null, response extra will be value from ApiResponseCode::responseExtraFromCode($code)\n     * If $extraData is string, response extra will be filled with this value\n     */\n    public function fillStatusResponse($code, $extraData=null)\n    {\n        $responseExtra = ApiResponseCode::responseExtraFromCode($code);\n        $responseMessage = ApiResponseCode::responseMessageFromCode($code);\n\n        if($extraData == null)\n        {\n            $statusResponseExtra = $responseExtra;\n        }\n        else\n        {\n            $statusResponseExtra = $extraData;\n        }\n\n        $this->statusResponseCode = $code;\n        $this->statusResponseMessage = $responseMessage;\n        $this->statusResponseExtra = $statusResponseExtra;\n    }\n\n    /**\n     * Override send() method.\n     *\n     * $this->data member contains data released to client.\n     */\n    public function send()\n    {\n        $responseMessage = ApiResponseCode::responseMessageFromCode($this->statusResponseCode);\n\n        if($this->isClientError)\n        {\n           $dataOut = $this->data;\n\n           if($this->statusCode == 401) {   // Not authorized\n             $dataOut = null;\n\n             $this->fillStatusResponse(ApiResponseCode::ERR_LOGIN_REQUIRED);\n            }\n            else if($this->statusCode == 404) {  // Non found\n                $dataOut = null;\n\n                $this->fillStatusResponse(ApiResponseCode::ERR_METHOD_NOT_FOUND);\n            }            \n\n            $this->data = ['status' => ['response_code' => $this->statusResponseCode, 'response_message' => $this->statusResponseMessage, 'response_extra' => $this->statusResponseExtra ], 'data' => $dataOut ];\n\n        }\n        else\n        {\n            $this->data = ['status' => ['response_code' => $this->statusResponseCode, 'response_message' => $responseMessage, 'response_extra' => $this->statusResponseExtra ], 'data' => $this->data ];\n        }\n\n        parent::send();\n    }\n\n    public function init()\n    {\n        parent::init();\n\n        $this->statusResponseCode = ApiResponseCode::ERR_OK;\n    }\n\n}\n```", "```php\n        'response' => [\n\n            'format' => yii\\web\\Response::FORMAT_JSON,\n            'charset' => 'UTF-8',\n            'class' => '\\api\\components\\ApiResponse',\n\n        ],\n```", "```php\n<?php\nnamespace api\\components;\n\nuse yii\\web\\ResponseFormatterInterface;\n\nclass RssResponseFormatter implements ResponseFormatterInterface\n{\n    public function format($response)\n    {\n        $response->getHeaders()->set('Content-Type', 'application/rss+xml; charset=UTF-8');\n        if ($response->data !== null) {\n            $response->content = \"<rss></rss>\";\n        }\n    }\n}\n```", "```php\n         'response' => [\n            'formatters' => [\n\n                'rss' => [\n                    'format' => 'raw',\n                    'charset' => 'UTF-8',\n                    'class' => '\\api\\components\\RssResponseFormatter',\n                ],                \n\n            ]\n\n        ],             \n```", "```php\n    public function behaviors()\n    {\n        $behaviors = parent::behaviors();\n        $behaviors['contentNegotiator']['formats']['application/rss+xml'] = 'rss';\n        return $behaviors;\n    }    \n```", "```php\n<?php\nnamespace api\\components;\n\nuse yii\\web\\ResponseFormatterInterface;\n\nclass RssResponseFormatter implements ResponseFormatterInterface\n{\n    public function format($response)\n    {\n        $response->getHeaders()->set('Content-Type', 'application/rss+xml; charset=UTF-8');\n        if ($response->data !== null) {\n            $rssOut = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            $rssOut .= '<rss>';\n            $rssOut .= '<channel>';\n            foreach($response->data as $d)\n            {\n                $rssOut .= '<item>';    \n                $rssOut .= sprintf('<title>Room #%d at floor %d</title>', $d['id'], $d['floor']);\n                $rssOut .= '</item>';\n            }\n            $rssOut .= '</channel>';\n            $rssOut .= '</rss>';\n\n            $response->content = $rssOut;;\n        }\n    }\n}\n```", "```php\n        'response' => [\n            'formatters' => [\n\n                'rss' => [\n                    'format' => 'raw',\n                    'charset' => 'UTF-8',\n                    'class' => '\\api\\components\\RssResponseFormatter',\n                ],                \n\n            ]\n        ],\n```", "```php\n    public function behaviors()\n    {\n        $behaviors = parent::behaviors();\n        $behaviors['contentNegotiator']['formats']['application/rss+xml'] = 'rss';\n        return $behaviors;\n    }    \n```", "```php\nGET /yiiadv/api/web/rooms/index HTTP/1.1\nHost: hostname\nAccept: application/rss+xml\n```", "```php\n    public function actionIndexRss()\n    {\n        \\Yii::$app->response->format = 'rss';\n\n        $provider = new \\yii\\data\\ActiveDataProvider([\n            'query' => \\common\\models\\Room::find(),\n            'pagination' => [\n                'pageSize' => 20,\n            ],\n        ]);\n\n        return $provider;\n    }\n```"]