["```php\ncd core  \n```", "```php\n../vendor/bin/phpunit —testsuite=unit  \n```", "```php\n../vendor/bin/phpunit tests/Drupal/Tests/Core/Routing/UrlGeneratorTest.php  \n```", "```php\n../vendor/bin/phpunit —group=Routing \n```", "```php\n../vendor/bin/phpunit —list-groups \n```", "```php\n../vendor/bin/phpunit —filter=testAliasGenerationUsingInterfaceConstants  \n```", "```php\nnamespace Drupal\\Tests\\[module_name]\\[suite_type]  \n```", "```php\nnamespace Drupal\\hello_world; \n\n/** \n * Class used to demonstrate a simple Unit test. \n */ \nclass Calculator { \n\n  private $a; \n  private $b; \n\n  public function __construct($a, $b) { \n    $this->a = $a; \n    $this->b = $b; \n  } \n\n  public function add() { \n    return $this->a + $this->b; \n  } \n\n  public function subtract() { \n    return $this->a - $this->b; \n  } \n\n  public function multiply() { \n    return $this->a * $this->b; \n  } \n\n  public function divide() { \n    return $this->a / $this->b; \n  } \n} \n```", "```php\nnamespace Drupal\\Tests\\hello_world\\Unit; \n\nuse Drupal\\hello_world\\Calculator; \nuse Drupal\\Tests\\UnitTestCase; \n\n/** \n * Tests the Calculator class methods. \n * \n * @group hello_world \n */ \nclass CalculatorTest extends UnitTestCase { \n\n  /** \n   * Tests the Calculator::add() method. \n   */ \n  public function testAdd() { \n    $calculator = new Calculator(10, 5); \n    $this->assertEquals(15, $calculator->add()); \n  } \n\n  /** \n   * Tests the Calculator::subtract() method. \n   */ \n  public function testSubtract() { \n    $calculator = new Calculator(10, 5); \n    $this->assertEquals(5, $calculator->subtract()); \n  } \n\n  /** \n   * Tests the Calculator::multiply() method. \n   */ \n  public function testMultiply() { \n    $calculator = new Calculator(10, 5); \n    $this->assertEquals(50, $calculator->multiply()); \n  } \n\n  /** \n   * Tests the Calculator::divide() method. \n   */ \n  public function testDivide() { \n    $calculator = new Calculator(10, 5); \n    $this->assertEquals(2, $calculator->divide()); \n  } \n\n}  \n```", "```php\n../vendor/bin/phpunit ../modules/custom/hello_world/tests/src/Unit/CalculatorTest.php  \n```", "```php\nOK (4 tests, 4 assertions)  \n```", "```php\nreturn 15;  \n```", "```php\n$calculator = new Calculator(10, 5); \n$this->assertEquals(15, $calculator->add()); \n$calculator = new Calculator(10, 6); \n$this->assertEquals(16, $calculator->add());  \n```", "```php\n/** \n * @var \\Drupal\\hello_world\\Calculator \n */ \nprotected $calculatorOne; \n\n/** \n * @var \\Drupal\\hello_world\\Calculator \n */ \nprotected $calculatorTwo; \n\n/** \n * {@inheritdoc} \n */ \npublic function setUp() { \n  parent::setUp(); \n  $this->calculatorOne = new Calculator(10, 5); \n  $this->calculatorTwo = new Calculator(10, 2); \n}  \n```", "```php\npublic function testAdd() { \n  $this->assertEquals(15, $this->calculatorOne->add()); \n  $this->assertEquals(12, $this->calculatorTwo->add()); \n}  \n```", "```php\nnamespace Drupal\\Tests\\user_types\\Unit; \n\nuse Drupal\\Tests\\UnitTestCase; \n\n/** \n * Tests the UserTypesAccess class methods. \n * \n * @group user_types \n */ \nclass UserTypesAccessTest extends UnitTestCase {}  \n```", "```php\n$user = $this->createMock('Drupal\\user\\Entity\\User');  \n```", "```php\n$user->expects($this->any()) \n  ->method('id') \n  ->will($this->returnValue(1));  \n```", "```php\n$user = $this->getMockBuilder('Drupal\\user\\Entity\\User') \n  ->getMock(); \n```", "```php\npublic function access(AccountInterface $account, Route $route) { \n  $user_types = $route->getOption('_user_types'); \n  if (!$user_types) { \n    return AccessResult::forbidden(); \n  } \n  if ($account->isAnonymous()) { \n    return AccessResult::forbidden(); \n  } \n  $user = $this->entityTypeManager->getStorage('user')->load($account->id()); \n  $type = $user->get('field_user_type')->value; \n  return in_array($type, $user_types) ? AccessResult::allowed() : AccessResult::forbidden(); \n}  \n```", "```php\n/**\n  * Tests the UserTypesAccess::access() method.\n  */\n public function testAccess() {\n   // User accounts\n   $anonymous = new UserSession(['uid' => 0]);\n   $registered = new UserSession(['uid' => 2]);\n\n   // Route definitions.\n   $manager_route = new Route('/test_manager', [], [], ['_user_types' => ['manager']]);\n   $board_route = new Route('/test_board', [], [], ['_user_types' => ['board']]);\n   $none_route = new Route('/test_board');\n }\n```", "```php\nuse Drupal\\Core\\Session\\UserSession; \nuse Symfony\\Component\\Routing\\Route;  \n```", "```php\n$access = new UserTypesAccess($entity_type_manager);\n```", "```php\n use Drupal\\user_types\\Access\\UserTypesAccess;\n```", "```php\n// User entity mock. \n$type = new \\stdClass(); \n$type->value = 'manager'; \n$user = $this->getMockBuilder('Drupal\\user\\Entity\\User') \n  ->disableOriginalConstructor() \n  ->getMock(); \n$user->expects($this->any()) \n  ->method('get') \n  ->will($this->returnValue($type)); \n\n// User storage mock \n$user_storage = $this->getMockBuilder('Drupal\\user\\UserStorage') \n  ->disableOriginalConstructor() \n  ->getMock(); \n$user_storage->expects($this->any()) \n  ->method('load') \n  ->will($this->returnValue($user)); \n\n// Entity type manager mock. \n$entity_type_manager = $this->getMockBuilder('Drupal\\Core\\Entity\\EntityTypeManager') \n  ->disableOriginalConstructor() \n  ->getMock(); \n$entity_type_manager->expects($this->any()) \n  ->method('getStorage') \n  ->will($this->returnValue($user_storage));  \n```", "```php\n$this->entityTypeManager->getStorage('user')->load($account->id());  \n```", "```php\n// Access denied due to lack of route option. \n$this->assertInstanceOf('Drupal\\Core\\Access\\AccessResultForbidden', $access->access($registered, $none_route)); \n\n// Access denied due to user being anonymous on any of the routes \n$this->assertInstanceOf('Drupal\\Core\\Access\\AccessResultForbidden', $access->access($anonymous, $manager_route)); \n$this->assertInstanceOf('Drupal\\Core\\Access\\AccessResultForbidden', $access->access($anonymous, $board_route)); \n\n// Access denied due to user not having proper field value \n$this->assertInstanceOf('Drupal\\Core\\Access\\AccessResultForbidden', $access->access($registered, $board_route)); \n\n// Access allowed due to user having the proper field value. \n$this->assertInstanceOf('Drupal\\Core\\Access\\AccessResultAllowed', $access->access($registered, $manager_route));  \n```", "```php\n../vendor/bin/phpunit ../modules/custom/user_types/tests/src/Unit/UserTypesAccessTest.php   \n```", "```php\nmysql://username:password@localhost/databasename#table_prefix  \n```", "```php\nnamespace Drupal\\Tests\\sports\\Kernel; \n\nuse Drupal\\KernelTests\\KernelTestBase; \n\n/** \n * Test the TeamCleaner QueueWorker plugin. \n * \n * @group sports \n */ \nclass TeamCleanerTest extends KernelTestBase {}  \n```", "```php\n/** \n * Modules to enable. \n * \n * @var array \n */ \nprotected static $modules = ['sports'];  \n```", "```php\n/** \n * Tests the TeamCleaner::processItem() method. \n */ \npublic function testProcessItem() { \n  $this->installSchema('sports', 'teams'); \n  $database = $this->container->get('database'); \n  $fields = ['name' => 'Team name']; \n  $id = $database->insert('teams') \n    ->fields($fields) \n    ->execute(); \n\n  $records = $database->query(\"SELECT id FROM {teams} WHERE id = :id\", [':id' => $id])->fetchAll(); \n  $this->assertNotEmpty($records); \n\n  $worker = new TeamCleaner([], NULL, NULL, $database); \n  $data = new \\stdClass(); \n  $data->id = $id; \n  $worker->processItem($data); \n  $records = $database->query(\"SELECT id FROM {teams} WHERE id = :id\", [':id' => $id])->fetchAll(); \n  $this->assertEmpty($records); \n}  \n```", "```php\nuse Drupal\\sports\\Plugin\\QueueWorker\\TeamCleaner;  \n```", "```php\n../vendor/bin/phpunit ../modules/custom/sports/tests/src/Kernel/TeamCleanerTest.php  \n```", "```php\nnamespace Drupal\\Tests\\products\\Kernel; \n\nuse Drupal\\KernelTests\\KernelTestBase; \n\n/** \n * Tests the CSV Product Importer \n * \n * @group products \n */ \nclass CsvImporterTest extends KernelTestBase {}  \n```", "```php\n  /** \n   * Modules to enable. \n   * \n   * @var array \n   */ \n  protected static $modules = ['system', 'csv_importer_test', 'products', 'image', 'file', 'user'];  \n```", "```php\nname: CSV Importer Test \ndescription: Used for testing the CSV Importer \ncore: 8.x \ntype: module \npackage: Testing  \n```", "```php\nid,name,number \n1,Car,45345 \n2,Motorbike,54534  \n```", "```php\n/** \n * Tests the import of the CSV based plugin. \n */ \npublic function testImport() { \n  $this->installEntitySchema('product'); \n  $this->installEntitySchema('file'); \n  $this->installSchema('file', 'file_usage'); \n  $manager = $this->container->get('entity_type.manager'); \n  $products = $manager->getStorage('product')->loadMultiple(); \n  $this->assertEmpty($products); \n\n  $csv_path = drupal_get_path('module', 'csv_importer_test') . '/products.csv'; \n  $csv_contents = file_get_contents($csv_path); \n  $file = file_save_data($csv_contents, 'public://simpletest-products.csv', FileSystemInterface::EXISTS_REPLACE); \n  $config = $manager->getStorage('importer')->create([ \n    'id' => 'csv', \n    'label' => 'CSV', \n    'plugin' => 'csv', \n    'plugin_configuration' => [ \n      'file' => [$file->id()] \n    ], \n    'source' => 'Testing', \n    'bundle' => 'goods', \n    'update_existing' => true \n  ]); \n  $config->save(); \n\n  $plugin = $this->container->get('products.importer_manager')->createInstanceFromConfig('csv'); \n  $plugin->import(); \n  $products = $manager->getStorage('product')->loadMultiple(); \n  $this->assertCount(2, $products); \n\n  $products = $manager->getStorage('product')->loadByProperties(['number' => 45345]); \n  $this->assertNotEmpty($products); \n  $this->assertCount(1, $products); \n}  \n```", "```php\nuse Drupal\\Core\\File\\FileSystemInterface;  \n```", "```php\n../vendor/bin/phpunit ../modules/custom/products/tests/src/Kernel/CsvImporterTest.php  \n```", "```php\n/var/www/sites/default/files/browser-output   \n```", "```php\nnamespace Drupal\\Tests\\hello_world\\Functional; \n\nuse Drupal\\Tests\\BrowserTestBase; \n\n/** \n * Basic testing of the main Hello World page. \n * \n * @group hello_world \n */ \nclass HelloWorldPageTest extends BrowserTestBase {}  \n```", "```php\n/** \n * Modules to enable. \n * \n * @var array \n */ \nprotected static $modules = ['hello_world', 'user']; \n```", "```php\n/** \n * Tests the main Hello World page. \n */ \npublic function testPage() { \n  $expected = $this->assertDefaultSalutation(); \n  $config = $this->config('hello_world.custom_salutation'); \n  $config->set('salutation', 'Testing salutation'); \n  $config->save(); \n\n  $this->drupalGet('/hello'); \n  $this->assertSession()->pageTextNotContains($expected); \n  $expected = 'Testing salutation'; \n  $this->assertSession()->pageTextContains($expected); \n}  \n```", "```php\n/** \n * Helper function to assert that the default salutation is present on the page. \n * \n * Returns the message so we can reuse it in multiple places. \n */ \nprivate function assertDefaultSalutation() { \n  $this->drupalGet('/hello'); \n  $this->assertSession()->pageTextContains('Our first route'); \n  $time = new \\DateTime(); \n  $expected = ''; \n  if ((int) $time->format('G') >= 00 && (int) $time->format('G') < 12) { \n    $expected = 'Good morning'; \n  } \n\n  if ((int) $time->format('G') >= 12 && (int) $time->format('G') < 18) { \n    $expected = 'Good afternoon'; \n  } \n\n  if ((int) $time->format('G') >= 18) { \n    $expected = 'Good evening'; \n  } \n  $expected .= ' world'; \n  $this->assertSession()->pageTextContains($expected); \n  return $expected; \n} \n```", "```php\n$this->assertSession()->elementTextContains('css', 'h1', 'Our first route');  \n```", "```php\n../vendor/bin/phpunit ../modules/custom/hello_world/tests/src/Functional/HelloWorldPageTest.php  \n```", "```php\nBehat\\Mink\\Exception\\ResponseTextException: The text \"Good evening world\" appears in the text of this page, but it should not. \n```", "```php\n/** \n * @var \\Drupal\\Core\\PageCache\\ResponsePolicy\\KillSwitch \n */ \nprotected $killSwitch; \n\n/** \n * HelloWorldSalutation constructor. \n * \n * @param \\Drupal\\Core\\Config\\ConfigFactoryInterface $config_factory \n * @param \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface $eventDispatcher \n * @param \\Drupal\\Core\\PageCache\\ResponsePolicy\\KillSwitch $killSwitch \n */ \npublic function __construct(ConfigFactoryInterface $config_factory, EventDispatcherInterface $eventDispatcher, KillSwitch $killSwitch) { \n  $this->configFactory = $config_factory; \n  $this->eventDispatcher = $eventDispatcher; \n  $this->killSwitch = $killSwitch; \n}  \n```", "```php\nuse Drupal\\Core\\PageCache\\ResponsePolicy\\KillSwitch;  \n```", "```php\n$this->killSwitch->trigger();  \n```", "```php\n/** \n * Tests that the configuration form for overriding the message works. \n */ \npublic function testForm() { \n  $expected = $this->assertDefaultSalutation(); \n  $this->drupalGet('/admin/config/salutation-configuration'); \n  $this->assertSession()->statusCodeEquals(403); \n  $account = $this->drupalCreateUser(['administer site configuration']); \n  $this->drupalLogin($account); \n  $this->drupalGet('/admin/config/salutation-configuration'); \n  $this->assertSession()->statusCodeEquals(200); \n  $this->assertSession()->pageTextContains('Salutation configuration'); \n  $this->assertSession()->elementExists('css', '#edit-salutation'); \n\n  $edit = [ \n    'salutation' => 'My custom salutation', \n  ]; \n\n  $this->drupalPostForm(NULL, $edit, 'op'); \n  $this->assertSession()->pageTextContains('The configuration options have been saved'); \n  $this->drupalGet('/hello'); \n  $this->assertSession()->pageTextNotContains($expected); \n  $this->assertSession()->pageTextContains('My custom salutation'); \n}  \n```", "```php\n<env name=\"MINK_DRIVER_ARGS_WEBDRIVER\" value='[\"chrome\", null, \"http://localhost:4444/wd/hub\"]'/> \n```", "```php\nnamespace Drupal\\Tests\\hello_world\\FunctionalJavascript; \n\nuse Drupal\\FunctionalJavascriptTests\\WebDriverTestBase; \n\n/** \n * Testing the simple Javascript timer on the Hello World page. \n * \n * @group hello_world \n */ \nclass TimeTest extends WebDriverTestBase {}  \n```", "```php\n/** \n * Modules to enable. \n * \n * @var array \n */ \nprotected static $modules = ['hello_world']; \n```", "```php\n/** \n * Tests the time component. \n */ \npublic function testTime() { \n  $this->drupalGet('/hello'); \n  $this->assertSession()->pageTextContains('The time is'); \n\n  $config = $this->config('hello_world.custom_salutation'); \n  $config->set('salutation', 'Testing salutation'); \n  $config->save(); \n\n  $this->drupalGet('/hello'); \n  $this->assertSession()->pageTextNotContains('The time is'); \n}  \n```", "```php\nnamespace Drupal\\Tests\\products\\FunctionalJavascript; \n\nuse Drupal\\FunctionalJavascriptTests\\WebDriverTestBase; \n\n/** \n * Testing the creation/edit of Importer configuration entities using the CSV importer \n * \n * @group products \n */ \nclass ImporterFormTest extends WebDriverTestBase {}  \n```", "```php\n/** \n * Modules to enable. \n * \n * @var array \n */ \nprotected static $modules = ['image', 'file', 'node']; \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function setUp() { \n  parent::setUp(); \n  $this->container->get('module_installer')->install(['products', 'csv_importer_test']); \n  $csv_path = drupal_get_path('module', 'csv_importer_test') . '/products.csv'; \n  $csv_contents = file_get_contents($csv_path); \n  $this->file = file_save_data($csv_contents, 'public://simpletest-products.csv', FileSystemInterface::EXISTS_REPLACE); \n  $this->admin = $this->drupalCreateUser(['administer site configuration']); \n  $this->bundle = ProductType::create(['id' => 'goods', 'label' => 'Goods']); \n  $this->bundle->save(); \n}  \n```", "```php\nuse Drupal\\products\\Entity\\ProductType; \nuse Drupal\\Core\\File\\FileSystemInterface;  \n```", "```php\n/** \n * @var \\Drupal\\file\\FileInterface \n */ \nprotected $file; \n\n/** \n * @var \\Drupal\\Core\\Session\\AccountInterface \n */ \nprotected $admin; \n\n/** \n * @var \\Drupal\\products\\Entity\\ProductType \n */ \nprotected $bundle; \n```", "```php\n/** \n * Tests the importer form. \n */ \npublic function testForm() {} \n```", "```php\n$this->drupalGet('/admin/structure/importer/add'); \n$assert = $this->assertSession(); \n$assert->pageTextContains('Access denied'); \n```", "```php\n$this->drupalLogin($this->admin); \n$this->drupalGet('/admin/structure/importer/add'); \n$assert->pageTextContains('Add importer'); \n$assert->elementExists('css', '#edit-label'); \n$assert->elementExists('css', '#edit-plugin'); \n$assert->elementExists('css', '#edit-update-existing'); \n$assert->elementExists('css', '#edit-source'); \n$assert->elementExists('css', '#edit-bundle'); \n$assert->elementNotExists('css', 'input[name=\"files[plugin_configuration_plugin_file]\"]'); \n```", "```php\n$page = $this->getSession()->getPage(); \n$page->selectFieldOption('plugin', 'csv'); \n$this->assertSession()->assertWaitOnAjaxRequest(); \n$assert->elementExists('css', 'input[name=\"files[plugin_configuration_plugin_file]\"]');  \n```", "```php\n$page->fillField('label', 'Test CSV Importer'); \n$this->assertJsCondition('jQuery(\".machine-name-value\").html() == \"test_csv_importer\"'); \n$page->checkField('update_existing'); \n$page->fillField('source', 'testing'); \n$page->fillField('bundle', $this->bundle->id()); \n$wrapper = $this->container->get('stream_wrapper_manager')->getViaUri($this->file->getFileUri()); \n$page->attachFileToField('files[plugin_configuration_plugin_file]', $wrapper->realpath()); \n$this->assertSession()->assertWaitOnAjaxRequest(); \n$page->pressButton('Save'); \n$assert->pageTextContains('Created the Test CSV Importer Importer.'); \n```", "```php\n$config = Importer::load('test_csv_importer'); \n$this->assertInstanceOf('Drupal\\products\\Entity\\ImporterInterface', $config); \n\n$fids = $config->getPluginConfiguration()['file']; \n$fid = reset($fids); \n$file = File::load($fid); \n$this->assertInstanceOf('Drupal\\file\\FileInterface', $file);  \n```", "```php\nuse Drupal\\file\\Entity\\File; \nuse Drupal\\products\\Entity\\Importer;  \n```", "```php\n$this->drupalGet('admin/structure/importer/test_csv_importer/edit'); \n$assert->pageTextContains('Edit Test CSV Importer'); \n$assert->fieldValueEquals('label', 'Test CSV Importer'); \n$assert->fieldValueEquals('plugin', 'csv'); \n$assert->checkboxChecked('update_existing'); \n$assert->fieldValueEquals('source', 'testing'); \n$page->hasLink('products.csv'); \n$bundle_field = $this->bundle->label() . ' (' . $this->bundle->id() . ')'; \n$assert->fieldValueEquals('bundle', $bundle_field);  \n```", "```php\n../vendor/bin/phpunit ../modules/custom/products/tests/src/Kernel/CsvImporterTest.php \n```"]