- en: Chapter 4. Database Architecture, Models, and CLI Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know the basics of Phalcon's ORM and ODM, we can create the database
    architecture and most of the models needed for our project. We will also create
    some CLI tasks in order to help us work faster. Because there is a large amount
    of code, when referring to some of the parts in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Phalcon"), *Getting Started with Phalcon*, I will use the abbreviation
    **CSC** (**check source code**).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The database architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CLI applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main goal of this book is to learn by example and we are achieving this
    by developing an online news/magazine website. We will assume the following tables
    as mandatory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`User`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserGroup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserProfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Article`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ArticleCategory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ArticleTranslation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ArticleCategoryArticle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Hashtag`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ArticleHashtagArticle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are basic tables, and we will add a few more in the later chapters. I
    like to use singular terms as part of the naming convention, but it's a matter
    of choice. To work faster, I recommend tools such as PhpMyAdmin or MySQL Workbench.
    Let's start with the first table.
  prefs: []
  type: TYPE_NORMAL
- en: The User table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `User` table will hold basic information about a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `group_id` and `profile_id` fields will have a relation to the `UserGroup`
    and `UserProfile` tables. After we have created these tables, we will also create
    the relations.
  prefs: []
  type: TYPE_NORMAL
- en: The UserGroup table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UserGroup` table will hold information about user groups, and each user
    will be part of one of the available groups. We are not going to use one-to-many
    relationship between users and groups, but if you need them, feel free to implement
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The UserProfile table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`UserProfile` is useful if you want a profile for the user. We are going to
    hold information about the user''s location and date of birth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For simplicity, the user location field will be free text, not a location based
    on coordinates. Now that we have all the user tables, let''s create the relations/constraints
    between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, your database structure should look like what is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The UserProfile table](img/B03522_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the user architecture, before we continue with the rest of
    the database, let's create the models and a simple CLI task to register a new
    user.
  prefs: []
  type: TYPE_NORMAL
- en: If you have already installed the Phalcon Developer Tools, you can use them
    to generate models, or you can manually create them. You can also find them in
    the source code for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the model generator will not create relations between tables. You have
    to manually create them.
  prefs: []
  type: TYPE_NORMAL
- en: All our models will extend the `Base` models created in the previous chapter.
    Next, I will show you a few lines of code containing the important parts of the
    models, excluding the getters, setters, and protected variables.
  prefs: []
  type: TYPE_NORMAL
- en: The User model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `User` model will be located under the `App\Core\Models` namespace in the
    `apps/Core/Models/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `initialize()` method acts like a constructor, so here we will put most
    of the code that we need to execute when the model is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we created relations between the models in the `initialize()`
    method. We have already talked about relations, but you can always read more on
    the official website at [http://docs.phalconphp.com/en/latest/reference/models.html#relationships-between-models](http://docs.phalconphp.com/en/latest/reference/models.html#relationships-between-models).
  prefs: []
  type: TYPE_NORMAL
- en: The model contains two other methods for quick access (`find` and `findFirst`).
    Remember that Phalcon's ORM supports calls using magic methods, for example, if
    you want to find a user by ID, you can use `findFirstById()`; if you want to find
    the first user by e-mail, you can use `findFirstByEmail()`; and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The `find()` and `findFirst()` methods are automatically created if you generate
    the model using the Phalcon Developer Tools.
  prefs: []
  type: TYPE_NORMAL
- en: The UserGroup model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`UserGroup` will be located under the `App\Core\Models` namespace in the `apps/Core/Models/`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This model has a 1-n relationship with users, which means that when you invoke
    `$group->users`, the command will return the names of all the users assigned to
    the `users` group.
  prefs: []
  type: TYPE_NORMAL
- en: The UserProfile model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UserProfile` model will be located under the `App\Core\Models` namespace
    in the `apps/Core/Models/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `UserProfile` model has a 1-1 relationship with the user, which means that
    a profile is tightly coupled to a single user.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re all set. Let''s take a look at our `modules\Core\Models` directory structure.
    It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The UserProfile model](img/B03522_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`Article.php` is in the list because we created it in the previous chapter.
    We can now go forward and create a CLI task to register a new user.'
  prefs: []
  type: TYPE_NORMAL
- en: In general, you develop CLI applications to be used within cron jobs, to create
    utilities, and so on. We are going to develop a few tasks in this book for different
    situations. One of them is for registering a new user via command line.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a new user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new directory named `Task` in the `modules\` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the `Task` directory, create a new file named `BaseTask.php`, and append
    the following content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I wrote the content of this file a few years ago to "prettify" my command-line
    scripts a bit. If you are not happy with it, please feel free to remove it or
    change it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to need a bootstrap for our CLI application, but before
    we do that, we need to install some dependencies. Assuming that you have installed
    Composer ([http://getcomposer.org](http://getcomposer.org)), edit `composer.json`
    and add this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Update Composer by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Go back to the `modules\` folder and create a new file named `cli.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will try to split and explain the contents of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In these first lines, we include the autoloader generated by Composer and make
    use of Phalcon''s DI and CLI and the `Extractor` helper, which will be needed
    to parse annotation comments for the methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding class constructor will set up the DI for us and load the configuration
    files needed to run the tasks. It will also read any argument assigned to a task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `readTask` method to read the annotation from each task and to list
    the tasks available in our application. By executing `$` `php` `modules/cli.php`
    in your terminal, you will understand the purpose of this method better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to initialize our newly created class. We do this with the
    help of the next few lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to register the new task folder. Open the `config/loader.php` file
    and add this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re now ready to create our first task. Let''s create a test task just to
    be sure that our code is working. Go to the `modules/Task/` folder and create
    a new file named `UserTask.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the task from your project root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a new user](img/B03522_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So far, we have the database structure and the models for the `user*` tables.
    We also have a working CLI application and a dummy test task. We can move forward
    with the user task.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to develop a user registration process that can be accessed
    from a CLI. The first thing we need to do is implement a registration method in
    our manager. This manager does not exist yet, but we will create it in `modules/Core/Managers/`,
    where `ArticleManager.php` resides (from the previous chapter).
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `modules/Core/Managers/` and create a new file named `UserManager.php`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we are using the security service to hash the user's password. The
    `hash` method uses the bcrypt algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, we need to register the newly created manager. To do this, open
    the service file located at `config/service.php` and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can implement the user creation task. Open `modules/Task/UserTask.php`
    and append the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first two lines of the `createAction()` method, we just make a simple
    validation of parameters and ask the developer for a confirmation of the input.
    You can now execute the task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'But you will get an error similar to the one shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a new user](img/B03522_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `user_created_at` `is` `required` exception is thrown, because in our `create()`
    method from the user manager, we didn't add this field—and we are not going to
    add it. Instead, we are going to use Phalcon's "timestampable" behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `User` model (`modules/Core/Models/User.php`) and add the following
    code to the `initialize()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add this behavior to all the models where we are using `*_created_at` and `*_updated_at`.
    Also, don't forget to make use of `use` `\Phalcon\Mvc\Model\Behavior\Timestampable;`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can execute the user creation task again. If everything goes OK, you
    should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a new user](img/B03522_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now have a functional CLI application for a user and a user manager, but
    the user has no profile and no group. We will modify the `create()` method from
    the user manager to be able to assign groups and create a profile. Because the
    `user_group` table is empty, we need to insert some data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we created a new group named `User`. This will be the default group.
    Next, we will modify the `create()` method from the user manager to be able to
    assign an existing group to a user. The new `create()` method will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to create the `findFirstGroupByName()` method. Append the following
    content to the `UserManager.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Before we run the `user create` task again, we need to ensure data integrity,
    avoiding duplicate e-mails. Because of the database structure, we are not allowed
    to insert duplicate records (the `email` column is unique), and the `create()`
    method will throw a SQL exception similar to `SQLSTATE[23000]:` `Integrity` `constraint`
    `violation:` `1062` `Duplicate` `entry` `'john.doe@john.tld'` `for` `key` `'idx_email'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid this, we will make use of the built-in validators. In this case, we
    will implement two of them: a uniqueness validator and an e-mail validator, both
    for the `user_email` column. We achieve this by adding the following code to the
    user model in the `modules/Core/Models/User.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a validator, we can be sure that an e-mail has the correct
    format and it does exist in our database. Let''s execute the same task to see
    what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you did everything well, you should see a response similar to the one presented
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a new user](img/B03522_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, execute the task again by changing the e-mail address and checking whether
    the group ID has been assigned to the new user. Let''s call it `me@me.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get a response similar to the one shown in the following screenshot,
    it means that you have done a great job!:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a new user](img/B03522_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about validating data integrity at [http://docs.phalconphp.com/en/latest/reference/models.html#validating-data-integrity](http://docs.phalconphp.com/en/latest/reference/models.html#validating-data-integrity).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What we need to do next is repeat almost the same process to create a user
    profile. The final `create()` method in `UserManager.php` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid code repetition, we will create a `save()` method in the `BaseManager`
    file. Open `modules/Core/Managers/BaseManager.php` and append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'One last change we need to make is in the `UserTask.php` file. Open it and
    update the `createAction()` method by replacing the `$user` `=` `$manager->create`
    `…` block of code with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can try to execute the task again and test whether the new user has been
    created and a profile has also been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a user profile](img/B03522_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you check out the records in the database, you should get a profile linked
    to the user, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a user profile](img/B03522_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember that when you create or update a record using the ORM, it is not mandatory
    to use the setters. Phalcon has a method named `assign()` that accepts the `key`
    `=>` `value` array, where the key is the column name as defined in the table structure,
    for example, our `create()` method can also look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We are ready to go further with this project by creating the rest of our database
    structure. Let''s start with the `Article` table. First, drop the existing table
    from your database, and then create a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: For simplicity, an article will be assigned to a user through the `article_user_id`
    column.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to implement more complex things, such as "blameable" behavior,
    you can read an interesting article here [http://blog.phalconphp.com/post/47652831003/tutorial-creating-a-blameable-behavior-with](http://blog.phalconphp.com/post/47652831003/tutorial-creating-a-blameable-behavior-with).
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we eliminated all the text fields from the `article` table.
    This is because we are going to create another table named `article_translation`.
    In this way, we will be able to create multilingual articles/website content.
    The `article_translation` table is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The `article_lang` column will accept the two-letter ISO code for languages
    (ISO 639-1). Any news item, blog, or magazine has two major factors: **categories**
    and **hashtags/keywords**. We are going to create many-to-many relationship between
    articles and categories and between articles and hashtags. First, let''s create
    the tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you check out the code from incubator ([https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/Model/Behavior](https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/Model/Behavior)),
    you will see that there is a nice solution for a nested set, if you ever need
    to implement it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we will use a many-to-many relationship, we need to create an intermediate
    table between articles and categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Having made these tables, let's create the models and the managers. The Article
    model already exists; remove it and create a new one with the new getters and
    setters. The next code samples will not contain the getters and setters, so you
    have to create them manually or check out the source code for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Category model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Category` model can be seen with the `modules/Core/Models/Category.php`
    file. The following code contains an important method—`initialize()`. Here, we
    create a relation between models and add certain kinds of behavior for the date
    and time fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The Category translation model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Category translation model makes use of `\Phalcon\Utils\Slug` to generate
    slugs. It uses the `Uniqueness` validator to ensure the uniqueness of the newly
    generated slug. This verification is made by interrogating the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We make use of `\Phalcon\Utils\Slug` to generate slugs for `category`. The same
    applies to the Article translation model.
  prefs: []
  type: TYPE_NORMAL
- en: The Article translation model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This model, like the Category translation model, is validating the slug field
    to be unique and makes use of `\Phalcon\Utils\Slug` to generate a slug. This model
    is defined as follows. We''ll be referencing the model from the `modules/Core/Models/ArticleTranslation.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The Article model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Article model is similar to the Category model, with the difference being
    in the relations and the names of the fields. We''ll be referencing the model
    from the `modules/Core/Models/Article.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The Article-Category-Article model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Article-Category-Article model is an intermediate table and model used
    in a many-to-many relationship between articles and categories. We''ll be referencing
    this model from the `modules/Core/Models/Article.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The final relations between articles and categories are presented here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Article-Category-Article model](img/B03522_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have the models. Now, let's continue by creating the managers and a simple
    task to create an article. The article manager already exists, but we are going
    to change the `create()` method. Before this, we will need to write the category
    manager with a `create()` method and enable it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file named `CategoryManager.php` in `modules/Core/Managers/` and add
    this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to register the new manager. Open `config/service.php` and
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$default_data` array is meant to always remember the structure of the
    input that we need to use. We can test everything now by creating a task. Let''s
    name it the `Article` task. Create the new file in `modules/Tasks/ArticleTask.php`
    and add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This task will create a new category and generate a slug for it. Execute this
    task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Article-Category-Article model](img/B03522_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have pretty much everything we need to create a new article. Let''s go back
    to our `ArticleManager.php` file and replace the existing `create()` method with
    this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The `createAction()` method from `ArticleTask.php`, which will enable us to
    create the new article, is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Pay attention to this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: In this case, I have assigned a user ID that I already have in the database.
    Check your database and add the specific user ID. Normally, this will be the ID
    of the authenticated user.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now run the task and you should see something similar to the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![The Article-Category-Article model](img/B03522_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The newly created article does not have any category assigned to it.
  prefs: []
  type: TYPE_NORMAL
- en: We will close this chapter with a small summary, and you will learn more about
    models when we develop the API module. In the meantime, I recommend that you try
    and develop the `hashtag` and `article_hashtag_article` tables, tasks, and models.
    There is no point in writing about this here, because it's the same thing as we
    did for categories (only the names have been changed). Also, you have it in the
    source code of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As always, please spare some time to read the official documentation at [http://docs.phalconphp.com/en/latest/reference/models.html](http://docs.phalconphp.com/en/latest/reference/models.html),
    where you can learn more about working with models.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created the database structure for our project, and you
    learned how to create a CLI application. We created models and managers and saw
    how relations between tables work. You also learned about model behavior ("timestampable"),
    model validations, and the storage of related records.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be about developing an API module, and we will have the
    chance to discover more techniques of working with models, searching for data,
    authenticating users, and much more.
  prefs: []
  type: TYPE_NORMAL
