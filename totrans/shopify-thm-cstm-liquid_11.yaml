- en: '[*Chapter 8*](B17606_08_Final_PD_ePub.xhtml#_idTextAnchor152): Exploring the
    Shopify Ajax API'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned about the basics of Shopify and Liquid,
    which provided us with some solid groundwork for future development. After setting
    up a proper foundation for our future learning, we learned how Liquid core works.
    By learning about objects, tags, and filters, we have learned how to create complex
    functionalities using a somewhat simple and insignificant set of features. Lastly,
    we learned how to create easily configurable elements throughout the store using
    various input type settings, combined with the `sections` and `blocks` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout these chapters, we have learned how to create elements with static
    content. *However, what if we were looking to update the content of our pages
    dynamically?* This is where the Shopify Ajax API comes to help. In this final
    chapter, we will go over the Shopify Ajax API, explain its requirements and limitations,
    as well as its possible use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Shopify Ajax API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the cart session with a POST request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data with a GET request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After completing this chapter, we will understand what the Shopify Ajax API
    is and the types of requests we can make, such as retrieving product information,
    adding products to the cart, or even reading the cart's current content. Additionally,
    we will learn about the typical uses cases for the Shopify Ajax API by working
    on some of our previous projects and improving them with the Ajax API.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will learn how to pull and render an automatically generated list
    of recommended products based on Shopify's algorithms, and then turn a general
    search input into a predictive search feature that's often requested by store
    owners.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we will explain each topic and present it with the accompanying graphics,
    we will need an internet connection to follow the steps outlined in this chapter,
    considering that **Shopify** is a hosted service.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available on GitHub at [https://github.com/PacktPublishing/Shopify-Theme-Customization-with-Liquid/tree/main/Chapter08](https://github.com/PacktPublishing/Shopify-Theme-Customization-with-Liquid/tree/main/Chapter08).
  prefs: []
  type: TYPE_NORMAL
- en: While this chapter will contain several real-life examples and use cases for
    each topic, we will need a basic understanding and knowledge of Ajax to be able
    to follow this chapter thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we will only show examples and work on projects related to the Shopify
    API and not Ajax in general. For detailed information on Ajax, we can consult
    [https://www.w3schools.com/js/js_ajax_intro.asp](https://www.w3schools.com/js/js_ajax_intro.asp),
    which provides a great introduction to Ajax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video for the chapter can be found here: [https://bit.ly/2VUZ7Qp](https://bit.ly/2VUZ7Qp)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Shopify Ajax API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ajax**, or **Asynchronous JavaScript and XML**, is a method that we can use
    to exchange small amounts of data with the server and update the parts of any
    page, without the need to reload it in its entirety. *So, what exactly is the
    Shopify Ajax API?*'
  prefs: []
  type: TYPE_NORMAL
- en: The Shopify Ajax API is a REST API endpoint through which we can send out requests
    to read or update certain information. For example, we can use a **GET** request
    to read the product or even the current cart data, or we can use a **POST** request
    to update the current content session of the cart.
  prefs: []
  type: TYPE_NORMAL
- en: Shopify Ajax is an unauthenticated API, which means that it does not require
    any tokens or API keys to gain access to store information. Shopify also provides
    us with an authenticated API named the **Shopify Admin API**, which apps and services
    use to communicate with Shopify servers.
  prefs: []
  type: TYPE_NORMAL
- en: Through the Shopify API, we can access most of our store data, whose responses
    will return JSON-formatted data, though we can't read customer and order data
    or update any store data â€“ we can only do this using the Shopify Admin API.
  prefs: []
  type: TYPE_NORMAL
- en: Note that Shopify has certain rate limitations regarding the Ajax API to prevent
    abuse (sending an unlimited number of requests to Shopify servers). One such limitation
    is that there's a maximum input array size limit, currently limited to 250\. Let's
    say that we are looking to pull information about all the products in a collection
    of over 1,000 products. We will have to use multiple queries to achieve this since
    we are limited to a maximum of 250 products per query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip:'
  prefs: []
  type: TYPE_NORMAL
- en: To keep everything concise and to the point, we won't mention all of the rate
    limitations here. For more information on Ajax API rate limitations, please refer
    to [https://shopify.dev/api/usage/rate-limits](https://shopify.dev/api/usage/rate-limits).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have familiarized ourselves with the need-to-know Shopify Ajax API
    basics, we can learn more about the Ajax API from a practical standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the cart session with a POST request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Previously, we mentioned that we can use a POST request to update the current
    cart session. Depending on the type of action we are looking to perform, we can
    pair the POST request with the following cart endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/cart/add.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/cart/update.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/cart/change.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/cart/clear.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While this might sound trivial, it is an essential aspect of today's e-commerce
    stores, where we expect to perform an action without refreshing an entire page.
  prefs: []
  type: TYPE_NORMAL
- en: The /cart/add.js endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As its name suggests, the `/cart/add.js` endpoint allows us to add one or multiple
    product variants to the cart, without the need to refresh the cart. To perform
    this action, we need to create an array named `items` with an object inside containing
    the following two keys:'
  prefs: []
  type: TYPE_NORMAL
- en: The `id` key, whose value should contain the number type value of the variant
    ID we are adding to the cart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `quantity` key, whose value should contain the number type value of the
    quantity we are adding to the cart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we need to include multiple variants, we can simply append multiple objects
    inside the `items` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, we can see an array with two objects containing a different
    set of variant `id` and `quantity` keys. However, note that the first object does
    not contain the `quantity` key. The reason for this is that the `quantity` key
    is entirely optional, and if we fail to include it, it assumes that the `quantity`
    value is equal to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how we could use this in a real-life example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may recall, in [*Chapter 4*](B17606_04_Final_PD_ePub.xhtml#_idTextAnchor079),
    *Diving into Liquid Core with Objects*, and later in [*Chapter 5*](B17606_05_Final_PD_ePub.xhtml#_idTextAnchor097),
    *Diving into Liquid Core with Filters*, we worked on a `Custom collection` project
    by adding the additional collection to the collection template. However, the current
    functionality is that if we click on the `Custom collection` form that we developed
    through [*Chapter 4*](B17606_04_Final_PD_ePub.xhtml#_idTextAnchor079), *Diving
    into Liquid Core with Objects*, and [*Chapter 5*](B17606_05_Final_PD_ePub.xhtml#_idTextAnchor097),
    *Diving into Liquid Core with Filters*. We can find the `Custom collection` form
    inside the `Snippet` directory, under `collection-form.liquid`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we can see, the collection form that we have created already contains the
    two necessary things we need: the `submit` button and the variant `id` that we
    have stored inside a hidden input. For more straightforward navigation, let''s
    start by assigning a new class called `collection-submit` to the `submit` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the proper selector in place, we can now use an `addEventListener` on
    the `submit` button to capture the click event and pass the object to the function
    that we will create next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding example, we created an `addSelector` constant for capturing
    the click event. Using `preventDefault()`, we canceled any current events'' flows
    and passed the object of the clicked element to the `addCart` function. Now, let''s
    look at creating the `addCart` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We started by creating an arrow function with an `el` parameter that we will
    pass the object of the previously clicked element to. Inside the `addCart` function,
    we created a local variable, inside which we assigned an array. This array contains
    an object that contains the `id` property of the variable we want to add to the
    cart.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Considering that we previously passed the clicked-on object to the arrow function,
    we used `previousElementSibling` to select the correct input element and return
    its value accordingly. Now that we have all the necessary assets in place, all
    we need to do is use the `fetch` request to `POST` the data to the Shopify server
    and update the current cart session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we have successfully created a fully functional Ajax API POST request,
    allowing us to add any number of items to the current cart session without reloading
    the page. Additionally, we included the `then()` and `catch()` methods to return
    `success` and `error` messages inside the console log.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to add specific products in selected quantities to the current
    cart session through the `/cart/add.js` endpoint. *However, what if we had certain
    line item properties on the specific product that we were looking to carry over
    to the cart?*
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily resolve this by simply including an additional parameter, `properties`,
    which accepts a key-value type object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We should set the key so that it's equal to the name of the line item's input
    or the first part of the line item property, where the value should equal the
    value that was retrieved from the input or the second part of the line item property.
    Suppose we need to recall how line item properties work. In that case, we can
    revisit [*Chapter 4*](B17606_04_Final_PD_ePub.xhtml#_idTextAnchor079), *Diving
    into Liquid Core with Objects*, where, in the *Product customization* subtopic,
    located in the *Working with global objects* section, we explained how line item
    properties work.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we need to pass a hidden line item that will only be visible in the order
    section part of the admin, we will need to append an *underscore* to the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we decide to use `jQuery`, we can make the code a lot more compact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: However, we should check whether the theme we are working on already contains
    a `jQuery` library. Otherwise, we should avoid introducing a new library to the
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: By covering both the `JavaScript` and `jQuery` solutions, we are now sure that
    we will be able to use our skills to produce the necessary Ajax API code. *However,
    what if we accidentally added a much higher quantity than we needed, and we need
    to update the product's quantity?*
  prefs: []
  type: TYPE_NORMAL
- en: The /cart/update.js endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As its name suggests, the `/cart/update.js` endpoint allows us to update the
    line item values inside the current cart session.
  prefs: []
  type: TYPE_NORMAL
- en: 'While `/cart/update.js` works similarly to `/cart/update.js`, there are a few
    noticeable differences. For example, in `/cart/add.js`, we had to create a separate
    object when working with multiple variants, whereas with `/cart/update.js`, we
    only have to create a single object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that instead of using two sets of key values, we use only one here,
    where the key is represented by the variant ID and the `quantity` value represents
    the key value. Additionally, instead of items, we are now using updates. Let''s
    create a function that will help us test out our new knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the general code for updating the cart session is similar to
    adding the product cart, which is not surprising. Besides updating the cart's
    content, `/cart/update.js` also allows us to add the product to the current cart
    session.
  prefs: []
  type: TYPE_NORMAL
- en: By using `/cart/update.js`, we can easily update the quantity of every item
    inside the cart by using the variant ID to identify which variant we are looking
    to update. *But what if the variant we are looking to update is not present inside
    the cart?* This is where the `/cart/update.js` alternate function triggers, updating
    the current cart session by adding the product variant to the cart with the selected
    quantity.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the previous `updateCart` function, we set the `quantity` value
    to a static value of `5`. No matter how many times we call the preceding function,
    the total quantity of any variant inside the cart will never exceed `5`. For this
    reason, we recommend always using `/cart/update.js` to update the existing cart
    items and `/cart/add.js` to add additional items to the cart.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have learned how to update the line items in the current cart
    session. However, as you may recall from [*Chapter 4*](B17606_04_Final_PD_ePub.xhtml#_idTextAnchor079),
    *Diving into Liquid Core with Objects*, in the *Product customization* subtopic,
    located in the *Working with global objects* section, we learned that it is possible
    to implement a different type of customization using line items. Consequently,
    this will sort the same product variants into different lines if their customization
    differs.
  prefs: []
  type: TYPE_NORMAL
- en: While these products might be on different lines, they will all have the same
    variant ID. *So, what will happen if we run* `/cart/update.js` *to update the
    specific variant on three different lines?*
  prefs: []
  type: TYPE_NORMAL
- en: The `/cart/update.js` endpoint would successfully perform its operation. However,
    since it does not know which line item we are looking to update, it will only
    update the first occurrence of the line item with the matching variant ID, and
    then it will stop. It will not update any additional occurrence with the same
    variant ID. *But what if we were looking to update a specific line item and not
    the first occurrence?*
  prefs: []
  type: TYPE_NORMAL
- en: The /cart/change.js endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/cart/change.js` endpoint works similarly to the `/cart/update.js` endpoint
    as it allows us to update the line item inside the current cart session. However,
    two crucial differences are that we can only modify a single line item at a time
    and that (more importantly) we can specify exactly which line item we are looking
    to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the `/cart/add.js` endpoint, the `/cart/change.js` endpoint also
    uses an object with two key-value pairs â€“ one to identify the line item and one
    to assign the needed quantity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'While using `id` and the variant ID to identify the line item will not cause
    any errors, this will not resolve our problem as we can have multiple line items
    with the same variant ID in the cart. To resolve this, we can use the `line` property
    to identify the specific line item we want to change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `line` value is based on the index position of the line items inside the
    current cart session, where the base value starts with `1`. For example, if we
    have four items within the cart and we are looking to update the line item at
    the third position, we can set the `line` value to `3`, as per our previous example.
    Note that the most common use for the `/cart/change.js` endpoint is to easily
    update the quantity of each line item inside the cart page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement the `/cart/update.js` endpoint successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned previously, to use the `/cart/update.js` endpoint successfully,
    we need two things: the `quantity` value, which we can quickly return from the
    input value that we modify, and the current position of the line item. To determine
    the position of the line item, we can use the JavaScript `indexOf()` method. Alternatively,
    we can introduce a `data` attribute and set its value to `forloop.index` if the
    quantity input is inside a Liquid `for` loop. We will use the second approach
    to add `forloop.index` as a `data` attribute here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After making sure that we have all the necessary attributes in place, all we
    need to do is use `addEventListener` to detect the `change` event on the input,
    and then pass the object to the `changeCart()` arrow function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `changeCart()` arrow function is similar to the previous functions that
    we have created. The only difference is that now, we are using the `/cart/change.js`
    endpoint and no longer using static values for key-value pairs. Instead, we are
    pulling both values from the object that we passed previously.
  prefs: []
  type: TYPE_NORMAL
- en: While we can use both `/cart/update.js` and `/cart/change.js` to remove the
    item from the cart by simply setting the `quantity` value to `0`, we would have
    to adjust the quantity of each `line` item to `0` manually. *But what if we wanted
    an easy way to clear out the entire cart with a single click?*
  prefs: []
  type: TYPE_NORMAL
- en: The /cart/clear.js endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/cart/clear.js` endpoint is pretty simple to use compared to the previous
    endpoints as it does not accept any parameters. All we have to do is simply submit
    a POST request with `/cart/clear.js` and the cart will automatically clear all
    present items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if we were to run the preceding code on the cart, we would successfully
    clear all the items from the cart. However, we would still have to refresh the
    cart page to see the change because although we have cleared all the items from
    the current cart session, we have not removed the items from the actual DOM. We
    can implement a short `while` statement inside the `success` function and remove
    all line item elements to resolve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using the preceding code example, we have successfully removed all the items
    from our current cart session and the DOM. Notice that there are many additional
    fine-tuning aspects that we will need to handle, such as clearing the price, removing
    the cart table, and displaying a message stating that the cart is empty. However,
    to keep this book concise and to the point, we will not be getting into this,
    but you are free (and it is advisable) to keep upgrading the preceding code as
    you will only benefit from it.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have learned how to add products to the current cart session using
    the `/cart/add.js` endpoint, update the existing line items using `/cart/update.js`
    and `/cart/change.js`, and how to clear the current cart session using the `/cart/clear.js`
    endpoint. However, as we had a chance to see, while we could add easily, update,
    or even clear items from the current cart session, we still had to reload the
    page to see specific results, such as updating the item `counter` near the *cart*
    icon inside the header or the line item price when updating the item quantity.
  prefs: []
  type: TYPE_NORMAL
- en: While it would do so, we could quickly simply increment the item `counter` by
    the number of products we are adding to the cart. A more straightforward solution
    to achieve this is to use a GET request in combination with the Shopify Ajax API,
    which will allow us to retrieve all kinds of data from Shopify servers, including
    the number of products in the current cart session.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving data with a GET request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned previously, using a GET request, we can pull all types of data
    from Shopify servers, except for customer and order information, which can only
    be accessed using an authenticated Shopify Admin API. Depending on the type of
    action we are looking to perform, we can pair the GET request with the following
    endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/cart.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/products/{product-handle}.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/recommendations/products.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/search/suggest.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GET request is a pretty powerful method that we will commonly use in combination
    with a POST request to retrieve data after making changes to the current cart
    session. However, we can also use a GET request to retrieve and create complex
    functionalities, as we are about to learn.
  prefs: []
  type: TYPE_NORMAL
- en: The /cart.js endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/cart.js` endpoint, as its name suggests, allows us to access the current
    cart session and retrieve all the information about the cart, as well as products
    inside the cart. We can use it to dynamically update the cart page or even create
    a cart drawer for the store and improve the purchase flow significantly. Let''s
    take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can retrieve information about the cart using the following `fetch` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that the response of a successful GET request is a JSON object. The following
    example shows the response we will receive using the previous code to fetch the
    cart data:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have learned how to retrieve current cart session information,
    we can combine it with the `POST` request for `/cart/add.js` that we worked on
    previously, and then ensure that the cart counter is updated correctly each time
    we add a new product to the cart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have all the knowledge necessary to retrieve different types of information
    from the current cart session. However, notice that the price values are pure
    strings within the cart response and have no currency format.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example, let''s say that we were looking to update the total price on the
    cart page every time we update the product quantity. To start, we will use the
    `fetch` method to retrieve the total price value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While we successfully retrieved the price, all that we have received is an
    unformatted string value, which is not that useful to us:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The easiest way to resolve this would be to look into how the theme developer
    has defined the currency formatting helper function throughout the theme. We can
    usually find it inside the theme `master js` file. In our case, this will be `theme.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After identifying the keywords that we need, we simply need to apply the formatting
    to the value that we are looking to format:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the formatting we have used in the previous example will work without
    any modifications in most cases. However, we might need to make some adjustments
    to specific themes â€“ it all depends on how the theme developer defined the function.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, we learned how to retrieve information about the current cart session
    and any data about any product inside the cart. *However, what if we wanted to
    retrieve product information more directly?*
  prefs: []
  type: TYPE_NORMAL
- en: The /products/{product-handle}.js endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/products/{product-handle}.js` endpoint is a simple endpoint that we can
    use in combination with a GET request to retrieve information about any product
    in the store easily. Similarly, as with the `/cart.js` endpoint, `/products/{product-handle}.js`
    is relatively easy to use as it only requires us to include the handle of a product
    we are looking to retrieve data about:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The return value that we will receive from the preceding example will include
    the product ID, which we will be using in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: The most common use for this endpoint is when creating on-click functionalities,
    such as the quick view feature, where we need to load a lot of product information
    dynamically to avoid cluttering the DOM and slowing down the store.
  prefs: []
  type: TYPE_NORMAL
- en: The /recommendations/products.json endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/recommendations/products.json` endpoint allows us to retrieve a list of
    JSON objects regarding the recommended products for the selected product based
    on Shopify algorithms, which we can use to construct a dynamic recommended section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through this endpoint, we can use three parameters, one of which is mandatory,
    while the other two are optional:'
  prefs: []
  type: TYPE_NORMAL
- en: The `product_id` parameter is a mandatory parameter whose value should be set
    to the ID of the product whose recommendation list we are looking to retrieve.
    Note that the product ID is not the same as the variant ID. They are two different
    attributes that we can retrieve through the `product` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `limit` parameter is an optional parameter that allows us to select the
    maximum number of recommended products we should receive per request. We cannot
    retrieve more than 10 recommended products per request due to Shopify limitations.
    This is the default value if we do not set the `limit` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last but not least is the `section_id` parameter, which, while optional, is
    quite an interesting parameter as it allows us to change the type of response
    that we will receive. By including the ID of a section as the `section_id` parameter
    value, we can select the parent element where we would like to render the recommended
    products. More importantly, we can also change the JSON response to an HTML string,
    which we can then use in combination with the `recommendations` object to output
    the recommended products dynamically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have familiarized ourselves with all the attributes that we can
    use with the `/recommendations/products.json` endpoint, it is time to see them
    in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we have used a `fetch` request, paired with the `/recommendations/products.json`
    endpoint, to generate a JSON object list and output them in the console log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, retrieving a JSON object for the recommended products is quite
    simple, as the only thing that we need to do now is pass the product ID to the
    `productId` parameter. As you may recall, the `limit` parameter is optional and
    will default to the maximum value of `10` when not included. Now, let's look at
    how we can include `section_id` and learn how to retrieve HTML strings instead.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can modify the `fetch` request to accomplish this, we need to make
    specific preparations. The first thing we need to do is create a new section in
    the `Sections` directory. For our example, we will name it `recommended-products`.
  prefs: []
  type: TYPE_NORMAL
- en: Since we already have a recommended products section on the product page template
    and are only creating a new section to learn how this works, let's include this
    new section at the bottom of the `theme.liquid` layout file, just above the `</body>`
    tag. Now that we have created the section file and successfully included it, we
    must familiarize ourselves with the `recommendations` object.
  prefs: []
  type: TYPE_NORMAL
- en: As its name suggests, the `recommendations` object allows us to retrieve products
    from the product recommendations list. However, this particular object only works
    in combination with the `/recommendations/products` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, the `recommendations` object is relatively simple to use as
    it only contains three attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: The `performed` attribute returns a Boolean, depending on whether we have placed
    the `recommendations` object inside the section whose content we are rendering
    by combining the `recommendations` endpoint and the necessary parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `products_count` attribute provides us with a number value for the number
    of products in the recommendation list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last but not least, the `products` attribute allows us to retrieve an array
    of recommended product objects. We can combine the `products` attribute with the
    `for` tag to provide an output the same way as we did previously for the `Custom
    collection` project in [*Chapter 5*](B17606_05_Final_PD_ePub.xhtml#_idTextAnchor097),
    *Diving into Liquid Core with Filters*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s return to the `recommended-products` section file we created and use
    the `recommendations` object to output the recommended products array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have created a proper layout for the future recommendations list.
    However, if we were to preview the results on the theme, we would notice that
    the section does not render anything inside the `product-recommendations` div.
    As we mentioned previously, the `recommendations` object only works in combination
    with the `recommendations` endpoint, so let's look at how to use the endpoint
    to generate the necessary HTML strings to output the recommended product list.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we need to make a few adjustments to our previous `fetch`
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that we need to do is include the additional parameters for
    the `productRecommendations` function that we will pass the section ID value to.
    Additionally, we will need to include the `section_id` parameter and its value
    to the fetch URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second and more important step is to remove `.json` from the fetch URL.
    Otherwise, we will not be able to retrieve the JSON HTML string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Last but not least, we will need to replace `.json()` with `.text()` inside
    the first `then` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we have all the necessary elements to retrieve the JSON HTML
    string. Let''s test it out by calling the products inside the console log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'However, before we can test this out, we need to pass the three values to our
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: For `productId`, we can use the product ID value that we retrieved while learning
    about the `/products/{product-handle}.js` endpoint. Alternatively, we can use
    `product.id` inside any product template and copy the value that we receive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For `limit`, we can use any number value up to `10`, which is the maximum number
    of products we can receive as a response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For `sectionId`, we should include a string value equal to the name of the section
    we are looking to display the recommended products inside. In our case, the value
    is `recommended-products`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of passing all three values to our function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If we were to preview our duplicate theme and check the console log inside the
    previous `fetch` function, we would see that we have successfully retrieved the
    JSON HTML string values for the recommended products.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have confirmed that everything works well, the only thing left
    to do is use the retrieved value and output the recommended products lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have successfully learned how to render a list of recommended
    products according to the layout that we previously defined inside the `recommended-products`
    section. Additionally, the product list will automatically update itself based
    on Shopify's algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: While having a recommended list of products is a great feature for finding similar
    products, we still have to navigate to a specific product, and even then, we can't
    be sure that we will receive the exact results we needed. To help us with this,
    we can use a predictive search feature.
  prefs: []
  type: TYPE_NORMAL
- en: The /search/suggest.json endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As its name suggests, the `/search/suggest.json` endpoint allows us to create
    a predictive search that will automatically provide us with a list of products
    that matches our query, either partially or completely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides allowing us to use predictive search on products, we can also search
    for collections, pages, and even articles, depending on the type of parameters
    that we include. `/search/suggest.json` allows us to use seven different types
    of parameters. However, to keep everything concise and to the point, we will only
    cover the most important ones that are needed to make the predictive search functionality
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter on our list is the `q` parameter, which is a mandatory string
    type parameter whose value should be equal to the search query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `type` parameter allows us to specify the type of result we are looking
    to receive. We can include the following comma-separated values: `product`, `page`,
    `article`, and `collection`. The `type` parameter is also mandatory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `limit` parameter is an optional integer parameter that allows us to set
    the number of results we should receive per request. Note that if we do not include
    the `limit` attribute, it defaults to `10`, which is the maximum number of results
    we can receive per request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `resources` attribute is a mandatory hash type parameter that requests resource
    results for the query based on the `type` and `limit` fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, we have used a `fetch` request, paired with the `/search/suggest.json`
    endpoint, to generate a JSON object list that matches our search query and outputs
    it in the console log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, retrieving predictive search results based on the search query
    is relatively simple, since the only thing we need to do now is pass down the
    required values to our function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: By typing a search query inside the search field, we will notice that we have
    successfully retrieved a combined list of up to four products, pages, articles,
    or collections of JSON objects that partially or fully match our search query
    inside the console log. The only thing left to do now is use the response values
    to generate the results inside the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: With the `/products/{product-handle}.js` endpoint, we had a parameter that allowed
    us to retrieve a JSON HTML string to output the results into the DOM easily. This
    is not the case with the `/search/suggest.json` endpoint, however; to render these
    results, we will need to use JavaScript to create the layout and functionality
    that we need. To keep everything concise and to the point, we will not be covering
    that in this book. However, we recommend finishing the project as it will be some
    excellent practice that will help you with everything you have learned so far.
  prefs: []
  type: TYPE_NORMAL
- en: For additional information on predictive search parameters and their general
    requirements and limitations, please consult [https://shopify.dev/api/ajax/reference/predictive-search](https://shopify.dev/api/ajax/reference/predictive-search).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this final chapter, we have familiarized ourselves with the Shopify
    Ajax API and learned about different types of use cases. First, we learned how
    to upgrade the current purchase flow using the `/cart/add.js` endpoint, through
    which we can add any number of products, quantities, and line item customizations,
    whether they are public or private, directly to the current cart session.
  prefs: []
  type: TYPE_NORMAL
- en: By learning how to handle the `/cart/change.js` endpoint, we gained the necessary
    knowledge to create a feature that includes a specific product and quantity, such
    as an automatic gift or upsells feature. Using `/cart/update.js` in combination
    with the `/cart.js` endpoint, we learned how to update the cart's content dynamically
    and retrieve it. We can then use this to create a cart drawer feature.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we learned how to use the `/products/{product-handle}.js` endpoint
    to retrieve an automatic list of recommended products and render their content
    into a section of our choice.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we learned about the `/search/suggest.json` endpoint, which allows us
    to create a predictive search functionality, one of the most requested features
    by store owners.
  prefs: []
  type: TYPE_NORMAL
- en: From the very beginning of this book, we have worked together on pushing the
    limits of our knowledge and creating a solid flow of understanding that will help
    us on our path of becoming a Shopify expert. While we haven't gone over every
    piece of Liquid code, we have worked on some exciting projects where we have learned
    about something a lot more beneficial. Our goal was not to simply create a list
    of where we would list all the different methods and attributes, which we can
    always find by looking through the Shopify documentation, but also to learn how
    both Shopify and Liquid work.
  prefs: []
  type: TYPE_NORMAL
- en: While it suffices to say that through the knowledge we've gained here, we should
    be ready to start working on the Shopify theme independently, note that our adventure
    is not ending â€“ it is only just beginning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shopify is a constantly evolving platform, and it will require us to stay up
    to date with all the latest announcements and approaches. Luckily, Shopify offers
    various communities to improve our knowledge further or get assistance from other
    Shopify experts on various topics. Last but not least, we have a Discord channel
    at our disposal, where we can talk with other developers and both get assistance
    when we need it or share our knowledge with other developers: [https://discord.gg/shopifydevs](https://discord.gg/shopifydevs).'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shopify official documentation: [https://shopify.dev/](https://shopify.dev/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shopify cheat sheet: [http://cheat.markdunkley.com/](http://cheat.markdunkley.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer changelog: [https://shopify.dev/changelog](https://shopify.dev/changelog%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official community: [https://community.shopify.com/](https://community.shopify.com/%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twitter announcements: [https://twitter.com/shopifydevs](https://twitter.com/shopifydevs%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shopify Developer YouTube channel: [https://www.youtube.com/channel/UCcYsEEKJtpxoO9T-keJZrEw](https://www.youtube.com/channel/UCcYsEEKJtpxoO9T-keJZrEw%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shopify official blog for all the latest information about the world of Shopify:
    [https://www.shopify.com/partners/blog](https://www.shopify.com/partners/blog)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
