- en: Chapter 4. Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the CI libraries topic, and the different types of libraries
    and their different usage categories, with several code examples of web applications.
    The CI development platform provides us with the built-in libraries, enables us
    with an easy procedure to integrate third-party libraries, and also allows us
    to develop our new libraries and share them with the community, if we wish to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CI libraries are powering efficiency, code reusability, separation, and
    simplicity. The benefits achieved are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Efficiency**: In means of minimal loaded resources. This feature achieved
    by the fact that the CI library, may be loaded only by the specific CI project
    controller(s), or even only in specific method(s), where the library''s services
    are required. Hence, the overhead (memory) of the library resources during execution
    time is minimized in each controller operation state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reusability**: Reusability means writing once a function code and reusing
    it across the project resources. The libraries can be loaded by any project controller,
    model, or helper (in a helper, we shall use the `&get_instance()` method discussed
    several times before) to reuse their code anywhere in the CI project. More than
    that, the controller-rendered views can call those loaded library methods. Hence,
    great code reusability is achieved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Separation**: Separation prevents, accidental overlapping with same name
    to the parameters or functions elsewhere in the project. The Library class methods
    and parameters have their own name space so that they can''t be overridden by
    a mistake outside the library in case the developer is using the same parameters
    in the served module such as controllers/views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplicity**: This make the code text as minimal as possible and easy to
    understand and maintain. The libraries'' methods called from the served resources,
    such as controllers, models, and helpers, make the code look much simpler, and
    make it easy to maintain and navigate. Hence, this simplifies extending the code
    and maintaining it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The libraries give us development power and efficiency with rich-focused functionality
    on certain project aspects, and also enable us to have simple and concise fashion
    code in the served controllers by calling the library method, instead of having
    the service code locally in the controller. The libraries should be initially
    instantiated by the code using them, such as the controller, model, or helper,
    or if used by almost all controllers, models can be loaded using the autoload
    mechanism. [Chapter 2](ch02.html "Chapter 2. Configurations and Naming Conventions"),
    *Configurations and Naming Conventions*, discusses how to autoload the libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Once instantiated by the autoload or controller constructor, the libraries can
    be used by the controller methods or by rendered views. In addition, any model,
    helper, or another library may use our project installed libraries using `&get_instance()`,
    as described in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The libraries power the code of the CI model-view-controller instantiated components
    (for more information, visit the website [http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller)),
    regarding the functionality expansion and reusability across the project controllers,
    models, helpers, and views.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will primarily focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CI libraries'' scope and usage:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage categories
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a library
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a library to the project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiating a library
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using library method(s)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Available CI libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 1: using the built-in libraries'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 2: using third-party libraries such as the Google Maps CI library wrapper'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 3: building our own library such as the Flickr API wrapper'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 4: building our own library such as the LinkedIn API wrapper'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin by briefly reviewing what a library in a CI framework is, and
    how we can use it for our needs across the project code resources.
  prefs: []
  type: TYPE_NORMAL
- en: The CI libraries' scope and usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CI library does not have access to the controller resources by default unless
    the CI `$ci = &get_instance()` is called and `$ci` is used instead of `$this`
    to access the CI resources, for example, instead of `$this->db->query ($sql)`,
    we shall use `$ci->db->query ($sql)`, and so on. We can extend the CI library
    using the third-party libraries from where CI echo system (the CI community of
    developers worldwide share knowledge, sources, and solutions for code and open
    issues), or develop our own libraries from scratch or extending other libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Any application library will be located under `application/libraries/` in the
    project's directory. In addition, optional resources such as the library configuration
    file that is required for library configurations can be placed under the project
    root or elsewhere. A good practice is to place them under the project root for
    enhanced security provided by CI. For example, `<PROJECT_ROOT>application/config/<LIB_NAME>_config.php`,
    or even additional resources such as the `images/CSS/HTML/additional` class libraries
    may be required under another `application/<LIB_ADDITIONAL_RESOURCES>`, such as
    `application/assets`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library integration and the usage within the CI project are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the library code resources to `application/libraries/my_lib.php`, optionally
    adding related resources, if any, such as a library configuration file, and/or
    other library assets to their locations as mentioned before.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiating the library class via config autoload, or instantiating it via
    the controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automatically load a library `my_lib` for the entire CI project:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Specifically in certain controller(s), constructor(s), or method(s):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the library methods:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can see the library scope as the ultimate OOP reusability enabler for the
    entire project code resources' models, views, helpers, and libraries, which govern
    all to address the execution requests from the user, or a scheduled request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As mentioned, the CI libraries enables us with great Separation and Simplicity.
    For example, the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Available CI libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CI and the CI echo system of developers provide many libraries covering a rich
    set of topics. We will review the CI libraries as well as known resources for
    the third-party CI libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are also encouraged to build our own libraries that can be used by others,
    and share them with the community, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: The Git community at [https://github.com](https://github.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI Sparks at [http://getsparks.org](http://getsparks.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI Forums at [http://codeigniter.com/forums](http://codeigniter.com/forums)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packagist at [https://packagist.org](https://packagist.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To call a built-in library, we shall call for example, the built-in library
    named `CI_Xxxx` as follows: `$this->load->library (xxxx)`;. So that CI_ prefix
    is not used and instead of the capitalized library name `Xxxx`, we use the lowercase
    library name `xxxx`. For calling a library function `yyyy` within the library
    **CI_Xxxx**, we shall write `$this->xxxx->yyyy()`;.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of built-in and commonly useful CI libraries (As of
    version 2.1.4):'
  prefs: []
  type: TYPE_NORMAL
- en: '| `CI_Benchmark` | `CI_Encrypt` | `CI_Migration` | `CI_Unit_test` |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Cache` | `CI_Exceptions` | `CI_Model` | `CI_Upload` |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Cache_apc` | `CI_Form_validation` | `CI_Output` | `CI_URI` |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Cache_dummy` | `CI_FTP` | `CI_Pagination` | `CI_User_agent` |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Cache_file` | `CI_Hooks` | `CI_Parser` | `CI_Utf8` |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Cache_memcached` | `CI_Image_lib` | `CI_Profiler` | `CI_Xmlrpc` |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Calendar` | `CI_Input` | `CI_Router` | `CI_Xmlrpcs` |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Cart` | `CI_Javascript` | `CI_Security` | `CI_Zip` |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Config` | `CI_Jquery` | `CI_Session` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Controller` | `CI_Lang` | `CI_SHA1` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Driver` | `CI_Loader` | `CI_Table` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `CI_Driver_Library` | `CI_Log` | `CI_Trackback` |   |'
  prefs: []
  type: TYPE_TB
- en: In this chapter, we will provide a usage example for Google Maps' third-party
    library wrapper, available at [https://github.com/ianckc/CodeIgniter-Google-Maps-Library](https://github.com/ianckc/CodeIgniter-Google-Maps-Library).
  prefs: []
  type: TYPE_NORMAL
- en: Many more third-party libraries can be found following the CI forums at [http://codeigniter.com/forums](http://codeigniter.com/forums).
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – using the built-in libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this initial example, we will see how to use the CI built-in library. Here
    we will use the CI library `CI_Table` as well as the `CI_db` library, which, for
    a given database table/view and some optional CSS settings, will enable us to
    render the table nicely with all the HTML table tags and CSS settings in just
    a single line of code. In this example, we will use the same user's table that
    we used for the controller example in [Chapter 3](ch03.html "Chapter 3. Controller
    Usage and Scope"), *Usage and Scope of Controllers*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example will be constructed from the following controller and view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/controllers/builtins.php`: This controller loads the built-in
    CI library `table` as well as the `db` library, which is autoloaded (for more
    information, refer to [Chapter 2](ch02.html "Chapter 2. Configurations and Naming
    Conventions"), *Configurations and Naming Conventions*) to get the user''s table
    content, and set up the table to render using the `table` library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The controllers prepare vectors of map settings and the list of places and possible
    controllers to zoom into each of the places, and render a view named `google_map_view`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`application/views/users_view.php`: This view will use the `table` library
    service to render a nicely formatted table as loaded from `db`, and configured
    by the controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Let us assume that the URL to the project root is `http://mydomain.com/myproject`,
    `http://mydomain.com/myproject/builtins`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (The source code is provided with this book via URLs.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a step-by-step example of the controller code for each operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete the operation, we will finish working on the view file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Example 2 – using third-party libraries such as the Google Maps CI library wrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will see how to install and use the Google Maps CI library
    with some cool services. First, we need to download the library files from [http://biostall.com/codeigniter-google-maps-v3-api-library](http://biostall.com/codeigniter-google-maps-v3-api-library).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the downloaded TAR file, we shall find the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Googlemaps.php`: This is the Google Maps API library for CI. We shall place
    it at `application/libraries/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Jsmin.php`: This is an auxiliary code for the library to generate the JavaScript
    generated code for enabling the smart Google Maps UI interaction. We shall also
    place it at `application/libraries/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Maps V3 API: This is a PDF file for in-depth, possible library settings
    and usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, we will provide an initial page showing several marked places
    together on the Google Map window that we will create in our application. In that
    visualized view, we will enable the user to zoom into predefined selected places
    we have marked on the map using the CI anchor URL helper.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example will be constructed from the following library, controller, and
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/libraries/`: This is the CI wrapper library for Google Maps that
    we downloaded. Refer to the CI library contributor website at [http://biostall.com](http://biostall.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/controllers/gmaps.php`: This controller loads the `googlemaps`
    library and builds up several views for several places shown together on the Google
    Map, and zooms in to each of the places.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The controllers prepare vectors of map settings and the list of places and possible
    controllers to zoom into each of the places, and render a view named `google_map_view`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`application/views/google_map_view.php`: This is the rendered view that initially
    shows all the places on the Google Map, and lets the user zoom in using a menu
    option to a listed zoom-in location, or go back to the view of all the places
    together on a zoom-out map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
    `http://mydomain.com/myproject/gmaps`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code is provided with this book via URLs.
  prefs: []
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller file `controllers/gmaps.php` will initially load the CI Google
    Maps library, then set up the maps' settings and the places to be marked and shown
    in different views (the same view file is rendered with different `$data` settings
    each time). The controller will have the `__construct()` and `index()` methods,
    in addition to set the zoom in on the defined places.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The class `Gmaps` continues with several more functions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The class `Gmaps` continues with several more functions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view file will render the provided Google Maps JavaScript and HTML portions
    as well as render the list of places. It also provides zoom-in and zoom-out navigation
    options to the places supported by the controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Example 3 – building a library such as the Flickr API wrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [flickr.com](http://flickr.com) website by Yahoo! provides API access to
    the Flickr repository of public photos uploaded to the community. The API is extremely
    rich, and its documentation is available at [http://www.flickr.com/services/api/](http://www.flickr.com/services/api/),
    and is called **App Garden**.
  prefs: []
  type: TYPE_NORMAL
- en: The API is enabled for various programming languages and access methods. We
    will build a solution of a wrapper that can be expanded to get any Flickr API
    service, using the PHP REST access method.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example will be constructed from the following library, controller, and
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/libraries/flickr_wrapper.php`: The is the CI wrapper library that
    enables smooth Flickr API access via CI. This basic services library can be expanded
    to support the entire Flickr App Garden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/controllers/flickr_recent.php`: This is the controller that uses
    the `flickr_wrapper` library that we wrote and pulls the recent public photos
    uploaded with the EXIF photo info and the photographer-related information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/flickr_recent_view.php`: This is the view that shows the
    collected information of recent photos and photographers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
    Hence, the URI to execute the auto controller for logging in will be `http://mydomain.com/myproject/flickr_recent`.
  prefs: []
  type: TYPE_NORMAL
- en: The flickr_wrapper.php library file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `application/libraries/flickr_wrapper.php` library file contains the library
    `flickr_wrapper` class library that we are building and using to access the Flickr
    App Garden API. It is mandatory to load this library with a valid Flickr `api_key`
    that you can get by following the Flickr App Garden documentation. The library
    will use the PHP REST API access, so that we can later expand any of the Flickr
    API services to be supported with our library. Each of the library methods returns
    a multidimensional keyed array of the resultant data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the `Flickr_wrapper` class that we are building:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The class code continues while shifting our focus on accessing the recent public
    photos.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The class code continues, where we will see how to access additional information
    related to the image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how we can apply photo filtering with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The class code continues as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The class code continues as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The flickr_recent.php controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `application/controllers/flickr_recent.php` controller file will load the
    `flickr_wrapper` API, call its services for newly uploaded public photos and photographers,
    and render a view to show the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to execute the controller, you should point your browser to the following
    URI: `http://mydomain.com/myproject/flickr_recent`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the controller code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The class code continues as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The flickr_recent_view.php view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `flickr_recent_view.php` view file is rendered by our controller named `Flickr_recent`
    defined previously. This controller uses our developed `flickr_wrapper` library
    in order to get the recent Flickr uploaded photos with their associated information.
  prefs: []
  type: TYPE_NORMAL
- en: The view file is located at `application/views/flickr_recent_view.php`. This
    view uses the CI parser for the PHP inserted parameters using the `<?=$param ?>`
    notation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The class code continues as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Example 4 – the LinkedIn API wrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will build the CI Library wrapper to integrate with the
    LinkedIn API in order to query the LinkedIn information from it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several challenges in doing so, one of which is to get the token
    to access the LinkedIn resources and access the data objects such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The LinkedIn user's details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The LinkedIn user's connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The LinkedIn company's details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The LinkedIn company's updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PHP extension `oauth` library must be installed from [http://il1.php.net/manual/en/book.oauth.php](http://il1.php.net/manual/en/book.oauth.php).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We shall register the application at LinkedIn Developers Network Homepage to
    receive the API key from [http://developer.linkedin.com](http://developer.linkedin.com).
    This unique API key is required to identify our application in order to grant
    access from LinkedIn for responding to our API calls to their API. Once we've
    registered our LinkedIn app, we will be provided with an API key and a secret
    key. For the safety of our application, we do not share our secret key. For more
    information, please refer to [http://developer.linkedin.com/](http://developer.linkedin.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication flowchart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps are required to authenticate our LinkedIn application to
    grant access. We will refer to this project as LinkedIn app.
  prefs: []
  type: TYPE_NORMAL
- en: The LinkedIn API client sends a request to LinkedIn. The client sends the request
    to the LinkedIn request token URL at [https://api.linkedin.com/uas/oauth/requestToken](https://api.linkedin.com/uas/oauth/requestToken)
    via the `oauth` object with a `callback URL` as a parameter to the LinkedIn API.
    The `callback URL` parameter is the URL to return to from the LinkedIn Authorization
    URL, where the LinkedIn user shall confirm the LinkedIn app's required permission.
    The LinkedIn server responds and returns the `oauth` token (public key) and the
    `ouath` token secret key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The client sends the request to the LinkedIn server auth URL using the `oauth_token`
    token received from [https://api.linkedin.com/uas/oauth/authorize ?oauth_token
    = oauth_token](https://api.linkedin.com/uas/oauth/authorize%20?oauth_token%20=%20oauth_token),
    where `oauth_token` is the oauth token returned from the server at phase 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The LinkedIn server returns the oauth token, the oauth token secret, and the
    `oauth_verifier` to the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The client sends the request to the LinkedIn Server access token path at [https://api.linkedin.com/uas/oauth/accessToken](https://api.linkedin.com/uas/oauth/accessToken).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This example will be constructed from the following controller, library, and
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/controllers/linkedinfo.php`: The controller that uses the LinkedIn
    library for authentication and displaying the output returned by the library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/libraries/linkedin_handeler.php`: The `linkedin_handler` library,
    which enables access to the LinkedIn resources, such as the LinkedIn user''s details
    and connections, and the companies'' details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/linkedin-me.php`: The view, which displays the LinkedIn
    user''s details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/linked-connections.php`: The view, which displays the LinkedIn
    user''s connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/linked-company.php`: The view, which displays the company''s
    details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/linked-company-updates.php`: The view, which displays a
    company''s updates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, the URI to execute the auth controller for login will be `http://mydomain.com/myproject/linkedinfo`.
  prefs: []
  type: TYPE_NORMAL
- en: The linkedin_handler.php library file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The library file `application/libraries/linkedin_handler.php` contains the class
    library `linkedin_handler`.
  prefs: []
  type: TYPE_NORMAL
- en: The library contains the function for authenticating the app and accessing the
    LinkedIn resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The linkedinfo.php controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller file `application/controllers/linkedinfo.php` will load the LinkedIn
    API, call its services, and render a view to show the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the controller code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The linkedin-me.php view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This view file displays the LinkedIn user's details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the view code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The view file linked-connections.php
  prefs: []
  type: TYPE_NORMAL
- en: This view file displays the LinkedIn user's connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the view code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The view file linked-company.php
  prefs: []
  type: TYPE_NORMAL
- en: This view file displays the LinkedIn company's details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the view code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The view file linked-company-updates.php
  prefs: []
  type: TYPE_NORMAL
- en: This view file displays the three updates of the LinkedIn company.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the view code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reviewed the CI libraries' scope, the different types
    of built-in CI echo system third-party libraries, and how to build our own libraries.
    We also reviewed the steps to load and use the library resources in our project.
    Eventually, we created several usage examples.
  prefs: []
  type: TYPE_NORMAL
