["```php\n<?php\nclass MyApp\n{\n    public function __construct(\n        private myRepository $myRepository\n    ) {\n    }\n    public function run(): string\n    {\n        $dataArray = $this->myRepository->getData();\n        return $dataArray['value_1'] .\n          $dataArray['value_2'];\n    }\n}\n```", "```php\n<?php\nclass MyRepository\n{\n    public function getData(): array\n    {\n        return [\n            'value_1' => 'some data...',\n            'value_2' => 'and some more data'\n        ];\n    }\n}\n```", "```php\npublic function testRun(): void\n{\n    // Arrange\n$repositoryMock = \n      $this->createMock(MyRepository::class);\n    $repositoryMock\n        ->expects($this->once())\n        ->method('getData')\n        ->willReturn([\n            'value_1' => 'a',\n            'value_2' => 'b'\n        ]);\n    // Act\n    $appTest = new MyApp($repositoryMock);\n    $result = $appTest->run();\n    // Assert\n    $this->assertEquals('ab', $result);\n}\npublic function testGetDataReturnsAnArray(): void\n{\n    // Arrange\n    $repositoryTest = new MyRepository();\n    // Act\n    $result = $repositoryTest->getData();\n    // Assert\n    $this->assertIsArray($result);\n    $this->assertCount(2, $result);\n}\n```", "```php\n$ php index.php \nPHP Warning:  Undefined array key \"value_1\" in\n  /home/curtis/clean-\n  code/chapter10/unit_tests_fail/src/MyApp.php on line 18\nPHP Warning:  Undefined array key \"value_2\" in\n  /home/curtis/clean-\n  code/chapter10/unit_tests_fail/src/MyApp.php on line 18\n```", "```php\n$ vendor/bin/phpunit tests\nPHPUnit 9.5.20 #StandWithUkraine\n\n..                                         2 / 2 (100%)\n\nTime: 00:00.008, Memory: 6.00 MB\n\nOK (2 tests, 4 assertions)\n```", "```php\npublic function productIsSaved(Tester $tester)\n{\n    $product = new Product();\n    $product->setId(123);\n    $product->setName('USB Coffee Maker');\n    $product->save();\n\n   $this->tester->seeInDatabase(\n        'products',\n        ['id' => 123, 'name' => 'USB Coffee Maker' ]\n    );\n}\n```", "```php\ndescribe('Application Login', function () {\n    it('successfully logs in', function () {\n        cy.visit('http://localhost:8000/login')\n        cy.get('#username')\n            .type('test@test.com')\n        cy.get('#password')\n            .type('supersecret')\n        cy.get('#submit')\n            .click()\n        cy.url()\n            .should('contain',\n              'http://localhost:8000/home')\n    })\n})\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"vendor/autoload.php\">\n    <testsuites>\n        <testsuite name=\"default\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <coverage>\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n        <report>\n            <html outputDirectory=\"reports/coverage\" />\n            <text outputFile=\"reports/coverage.txt\" />\n        </report>\n    </coverage>\n</phpunit>\n```", "```php\n$ vendor/bin/phpunit\n```", "```php\n/**\n * @covers MyRepository\n */\nclass MyRepositoryTest extends TestCase\n{\n    public function testGetDataReturnsAnArray(): void\n    {\n        // ...\n    }\n}\n```", "```php\npublic function testUselessTestCase(): void\n{\n    $repositoryMock = \n      $this->createMock(MyRepository::class);\n    $repositoryMock\n        ->method('getData')\n        ->willReturn([\n            'value_1' => 'a',\n            'value_2' => 'b'\n        ]);\n    $this->assertEquals(\n        [ \n           'value_1' => 'a',\n           'value_2' => 'b'\n        ],\n        $repositoryMock->getData()\n    );\n}\n```"]