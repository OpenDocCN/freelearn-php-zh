- en: Accepting User Content Submissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be focusing on giving visitors the ability to make
    submissions to a website. We will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a client-side content submission form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving user-submitted content in custom post types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending email notifications upon new submissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a CAPTCHA on user forms using an online service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a local library to implement a CAPTCHA on user forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Giving users the ability to contribute content to a website is always a good
    way to engage the community and keep content fresh on a website. Going back to
    the book review system that was put in place in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*, this chapter explains how to allow visitors
    to add their own book reviews to a website.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a client-side content submission form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step toward giving visitors the ability to contribute to a website
    is to present a form that they will be able to use to submit new content. This
    recipe shows how to create a shortcode that can easily be inserted on any WordPress
    page to render a simple form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should be running the final version of the Book Reviews plugin created in
    [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*, or using the final resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php`)
    from the downloaded code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch6-book-review-user-submission` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a text file called `ch6-book-review-user-submission.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 6 - Book Review User Submission`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to declare a new shortcode and its associated
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to provide an implementation for the `ch6_brus_book_review_form`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the `Chapter 6 - Book Review User Submission` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new page and insert the newly created `[submit-book-review]` shortcode
    in the item's content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Publish and view the page to see the form. If you submit the form, nothing
    will happen at the moment, since we have not implemented a processing function
    to parse and save the submitted data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4983c168-84af-4664-a966-3e48e235547a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As seen in the previous chapters, shortcodes are special blocks of text that
    can be easily added in any post or page to be replaced by content when they are
    found in pages visited by users. This recipe uses the `add_shortcode` function
    to declare a new shortcode that gets replaced with a review submission form.
  prefs: []
  type: TYPE_NORMAL
- en: The form itself is created using standard HTML and displays a number of text
    fields. It also uses a bit of PHP code to dynamically build the list of ratings
    and book types defined in the system. The form also includes a PHP call to the
    `wp_nonce_field` function, which was previously seen when creating plugin configuration
    panels, to add hidden fields that will be used as a security measure in the associated
    data processing function. Finally, the code checks to see whether the user visiting
    the page is logged in to the website and displays a short message instead of the
    submission form when the check is negative.
  prefs: []
  type: TYPE_NORMAL
- en: When submitted, the form action will send visitor content to the page where
    the book review form is displayed. This new content will be intercepted and processed
    in the code that will be added in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a new simple shortcode* recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving user-submitted content in custom post types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When visitors click on the Submit button on the form created in the previous
    recipe, the target of the form is set to be the same page that is hosting the
    submission form. Since this page is not capable of handling form data, we must
    implement an action hook that intercepts this post data and sends it to a processing
    function that we will define. This recipe shows how to implement a function responsible
    for processing user input.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should be running the final version of the Book Reviews plugin created in
    [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*, and should have already followed the *Creating a client-side content
    submission form* recipe. Alternatively, you can get the files from the code bundle
    (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php` and `Chapter 6/ch6-book-review-user-submission/ch6-book-review-user-submission-v1.php`),
    and rename `ch6-book-review-user-submission-v1.php` to `ch6-book-review-user-submission.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch6-book-review-user-submission` directory of the WordPress
    plugin folder of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file `ch6-book-review-user-submission.php` in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will intercept user-submitted
    book reviews:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to implement the `ch6_brus_match_new_book_reviews`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code to provide an implementation for the `ch6_brus_process_user_book_reviews`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the original `ch6_brus_book_review_form` function, add the following code
    after the `wp_nonce_field` function call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the book review submission form and submit a review to send all the
    fields to the newly created processing function. After processing the new content,
    the script will return to the form, which will display a confirmation message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After submitting the book review form data to the page containing the book review
    submission form in the previous recipe, the first few steps of this recipe will
    be to assign a function to the `template_redirect` action hook to allow us to
    capture new book review content. This hook function is executed early in the WordPress
    processing sequence. If found, we will call the processing function that is defined
    in the rest of the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that is done in our processing function is to check whether
    the proper hidden data field is found as part of the post data, using the `wp_verify_nonce`
    function. If it is not present, indicating that someone may be trying to post
    data to the website without having visited the frontend form, it will display
    an error message.
  prefs: []
  type: TYPE_NORMAL
- en: When we are sure that our data storage script is being called legitimately,
    we will continue processing the actual data by first checking to see whether all
    the fields are present and are not empty. If that is not the case, we will display
    an error message, asking the user to go back and complete the form using the `wp_die`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: If all the fields have been received correctly, the recipe continues to process
    the incoming data by preparing an array of information that includes the newly
    submitted title and review text, along with a post status and the `book_reviews`
    post type name. The resulting array is sent to the `wp_insert_post` function to
    store the information. As we can see, `wp_insert_post` only requires a single
    parameter that is fulfilled using the array that we just created. While we only
    define four elements of that array, many more are available, which can be seen
    by consulting the WordPress Codex ([https://developer.wordpress.org/reference/functions/wp_insert_post/](https://developer.wordpress.org/reference/functions/wp_insert_post/)).
  prefs: []
  type: TYPE_NORMAL
- en: Now, calling `wp_insert_post` only takes care of storing some key data elements
    that belong in the post data. We must follow up this code with calls to `update_post_meta`
    and `wp_set_post_terms` to store the remaining user information to the website
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Once all the information is stored, we use a combination of the `wp_redirect`
    and `add_query_arg` functions to send the user back to the page where he submitted
    a book review, while making sure that only one instance of the `add_review_message`
    variable is in the target address.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, this recipe makes a small modification to the code that
    rendered the book review form to add a confirmation message that is shown to visitors
    when information is accepted by the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a world of spam bots and real people, who are set on creating bogus content
    on any website, setting new book reviews to be immediately visible on the website
    might not be wise.
  prefs: []
  type: TYPE_NORMAL
- en: Moderating user-submitted content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of setting a status of publish for new post entries, we can use a value
    of draft to make the new entry visible only in the backend administration area.
    To give plugin users more flexibility, you could also give them a way to decide
    what method they prefer in a configuration panel.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a client-side content submission form* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Processing and storing plugin configuration data* recipe in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a new section to the custom post type editor* recipe in [Chapter
    4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom Post Types*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending email notifications upon new submissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like WordPress sends out email notifications to the administrator when
    new comments are posted, sending out emails when visitors post new book reviews
    allows website managers to review new content as it comes in and decide if they
    approve it to be published online.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to prepare email data and send it using the `wp_mail`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should be running the final version of the Book Reviews plugin created in
    [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*, and should have already followed the *Saving user-submitted data
    in custom post types* recipe (including changing the post status to draft as indicated
    in the *There's more*... section). Alternatively, you can get the resulting files
    from the code bundle (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php` and
    `Chapter 6/ch6-book-review-user-submission/ch6-book-review-user-submission-v2.php`)
    and rename `ch6-book-review-user-submission-v2.php` to `ch6-book-review-user-submission.php`.
    Finally, you should have access to a WordPress installation on a hosted web server,
    as emails are usually not sent when running it on a local installation. Be sure
    to have access to the email account associated with the website administrator
    to see the resulting email.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch6-book-review-user-submission` directory of the WordPress
    plugin folder of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file `ch6-book-review-user-submission.php` in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following line of code to register a function to be called back
    when new posts are submitted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following block of code to implement the `ch6_brus_send_email` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to the book review submission form and submit a book review. An email
    will be sent to the address associated with the website administrator, containing
    some information from the new review:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d17aacb-9af6-4397-8a7a-a81f617416f5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `wp_mail` function can be used by any plugin to send out email messages.
    It takes five arguments to define all the elements of the outgoing message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The first three arguments are required and respectively define the email address
    of the intended recipient, the title of the message, and its content. As we have
    seen in this recipe, the content is mainly specified using standard HTML syntax,
    while the target email address is retrieved from the options table using the `get_option`
    function. As for the title, it is built from a number of textual elements, such
    as the blog title and book review title, to create the final result.
  prefs: []
  type: TYPE_NORMAL
- en: The next parameter is optional and provides header information for the email,
    with the most important piece of information in that section being the character
    set. The last parameter can optionally be used to specify the path of one or more
    files to be sent as email attachments.
  prefs: []
  type: TYPE_NORMAL
- en: To make it easier for website administrators to manage new entries, part of
    the message body contains a link to the custom post management page of the WordPress
    website administration area to quickly display all the unapproved entries (set
    as draft items).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a client-side content submission form* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a CAPTCHA on user forms using an online service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common security measure on website forms is to use CAPTCHA codes, where distorted
    letters or some other form of test is displayed to check that the person submitting
    data is not a spam robot. The form that we have been building to accept visitor-submitted
    book reviews could benefit from this type of technology to avoid weeding through
    unwanted entries.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to integrate Google's reCAPTCHA service in our book review
    submission form. If you prefer using a local CAPTCHA script to avoid being dependent
    on an online service or to be sure that your form can be used in all countries,
    jump to the next recipe, titled *Using a local library to implement a CAPTCHA
    on user forms*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should be running the final version of the Book Reviews plugin created in
    [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*, and should have already followed the *Sending email notifications
    upon new submissions* recipe. Alternatively, you can get the resulting files from
    the code bundle (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php` and `Chapter
    6/ch6-book-review-user-submission/ch6-book-review-user-submission-v3.php`) and
    rename `ch6-book-review-user-submission-v3.php` to `ch6-book-review-user-submission.php`
    before starting the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe requires having a Google account to be able to register for the
    reCAPTCHA service.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit the Google reCAPTCHA administrator website ([https://www.google.com/recaptcha/admin](https://www.google.com/recaptcha/admin))
    and log in if you are not already connected to Google services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register a new website by specifying a Label (for example, `Development website`)
    and setting the type of reCAPTCHA to reCAPTCHA V2 using the radio selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the domain name of the web server you will be using to test your code
    in the Domains field. If you are running a local development server, it is likely
    to be `localhost`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box to accept the terms of service, then click on Register to complete
    the new website creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the resulting page, take note of the website and secret keys that the service
    assigned to your test website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch6-book-review-user-submission` directory of your plugin folder
    and open the file named `ch6-book-review-user-submission.php` in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following line of code at the end of the file to register a function
    that will be called when WordPress prepares the list of scripts to be loaded on
    the website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to provide an implementation for the `ch6_brus_recaptcha_script`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the `ch6_brus_book_review_form` function in your code and add an extra
    row to the form table to display the CAPTCHA, replacing `**[my-website-key]**`
    with the website key obtained earlier from the reCAPTCHA service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Save your plugin and visit your book review submission page. You should now
    see the Google reCAPTCHA box appear in the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f80034a7-19c8-40b0-8541-bf33301c4d63.png)'
  prefs: []
  type: TYPE_IMG
- en: Visit the Google reCAPTCHA GitHub page ([https://github.com/google/recaptcha](https://github.com/google/recaptcha))
    and download the latest version of the repository to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the repository contents and copy the resulting `src` folder to the `ch6-book-review-user-submission`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `src` folder to `recaptcha`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the `ch6_brus_process_user_book_reviews` function in your code and add
    the following lines of code at the top of the function implementation, replacing
    `[my-secret-key]` with the secret key obtained earlier from the reCAPTCHA service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Add an extra closing bracket (`}`) just before the end of the `ch6_brus_process_user_book_reviews`
    function to close out the `else` section of the code inserted in the previous
    step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and close the code file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit a new book review without checking the reCAPTCHA checkbox to see that
    it will not be accepted by the processing function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google's reCAPTCHA service is a free service that can generate and display a
    CAPTCHA box in your form. It has evolved over time from asking users to decipher
    a scrambled message in an image to displaying addresses and other street signs
    and asking users to enter what they saw. In its latest incarnation, reCAPTCHA
    simply asks the user to check a box to indicate that they are not a robot and
    only asks more advanced questions if it suspects the visitor from being an automated
    system. When visitors check the box, a hidden field is populated with a validation
    code that gets sent to our data processing function along with the rest of the
    form data.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a reCAPTCHA to our form is actually quite easy, only requiring us to
    load a Javascript script and add a line of code to our form that gets transformed
    into the service's trademark checkbox. Once the form data is posted, validating
    it is a bit more complex than the nonces we have used before since our plugin
    needs to communicate with Google's servers to check the validation code. Thankfully,
    Google offers an easy-to-use library to hide away much of this operation's complexity.
    If the reCAPTCHA code received is valid, the previously created data processing
    and storage code is executed as before. Otherwise, an error message is displayed
    to users. In addition to being easy to integrate, a benefit of using a third-party
    service is that most code updates are done by the service provider. You would
    still need to check for occasional updates to the PHP validation library, but
    that is only a small part of this service's functionality.
  prefs: []
  type: TYPE_NORMAL
- en: If you are planning to distribute a plugin that makes use of the reCAPTCHA service
    for more than one person or customer, it would not make sense to leave your own
    website and secret keys in the final plugin code, as we have done here. Instead,
    you should create an administration panel, as you learned to do in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)*,
    User Settings and Administration Pages*, so that users can enter their own keys
    and have them be used on the website.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that while Google reCAPTCHA is one of the most popular CAPTCHA-generation
    services, it does not work for Chinese visitors at the time of writing and has
    not worked there for some time. If you are developing a plugin for a wide audience,
    you might want to consider supporting more than one CAPTCHA service or library
    to make sure that users have options, no matter where they or their audience resides.
    Read the next recipe for an example of using a local library to generate a CAPTCHA.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Sending email notifications upon new submissions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating an administration page menu item in the Settings menu* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Rendering the admin page contents using HTML* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Processing and storing plugin configuration data* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Displaying a confirmation message when options are saved* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a local library to implement a CAPTCHA on user forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the previous recipe, *Implementing a CAPTCHA on user forms using
    an online service*, adding a CAPTCHA to visitor-facing forms helps reduce unwanted
    submissions to a website. After seeing how to integrate an online third-party
    service, this recipe shows how to download and integrate a local PHP script to
    generate and validate CAPTCHA images locally.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should be running the final version of the Book Reviews plugin created in
    [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*, and should have already followed the *Sending email notifications
    upon new submissions* recipe. Alternatively, you can get the resulting files from
    the code bundle (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php` and `Chapter
    6/ch6-book-review-user-submission/ch6-book-review-user-submission-v3.php`) and
    rename `ch6-book-review-user-submission-v3.php` to `ch6-book-review-user-submission.php`
    before starting the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The GD and FreeType libraries need to be installed and activated in your development
    web server's PHP installation to be able to generate a CAPTCHA image. Most of
    the pre-packaged local web servers listed in the *Installing a web server on your
    computer* recipe from [Chapter 1](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml),
    *Preparing a Local Development Environment*, come with these libraries activated.
    They are also commonly enabled on most hosted web servers, but you should still
    mention that they are required when distributing a plugin containing the following
    code to a larger audience.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit the Securimage website ([https://www.phpcaptcha.org/download/](https://www.phpcaptcha.org/download/))
    to download the latest version of their CAPTCHA library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the resulting archive and extract the entire `securimage` directory to
    the `ch6-book-review-user-submission` folder of your plugin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the plugin directory, open the file named `ch6-book-review-user-submission.php`
    in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the `ch6_brus_book_review_form` function in your code and add an extra
    row to the form table to display the CAPTCHA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Save your plugin and visit your book review submission page. You should now
    see the CAPTCHA image appear in the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c99e4d48-24ca-4c3c-bba8-a5a55ae6636d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Locate the `ch6_brus_process_user_book_reviews` function in your code and add
    the following lines of code at the top of the function implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Add an extra closing bracket (`}`) just before the end of the `ch6_brus_process_user_book_reviews`
    function to close out the `else` section of the code inserted in the previous
    step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and close the code file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit a new book review without entering the CAPTCHA code to see that it will
    not be accepted by the processing function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Securimage` script is a simple tool that can generate and display a CAPTCHA
    image, as well as store the string that it generated using session data.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe's code displays the CAPTCHA image by using a standard HTML `img`
    tag that uses one of the scripts in the `securimage` directory as the image path.
    On the data processing side, our code first starts by calling `session_start`
    to reconnect to the session that was initiated by the image generator to store
    the CAPTCHA code. It then proceeds to check whether the user CAPTCHA text matches
    the image that was displayed using the `check` method of the `securimage` class.
    Based on this result, we display an error message or continue verifying that the
    rest of the required data fields have been submitted correctly.
  prefs: []
  type: TYPE_NORMAL
- en: While there are many PHP scripts available to generate CAPTCHA images, this
    particular one was selected for this recipe since it is an open source script
    that uses the BSD license, which is compatible with WordPress licensing. This
    means that you would be able to distribute this script with your plugin on the
    official WordPress plugin repository.
  prefs: []
  type: TYPE_NORMAL
- en: When using a third-party library in your plugin, you should regularly check
    whether that library has been updated by its author and incorporate new versions
    in your work as soon as possible to make sure that you don't expose your plugin
    to security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: For more advanced content filtering methods, look up the Akismet API ([https://akismet.com/development/api/](https://akismet.com/development/api/)).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Implementing a CAPTCHA on user forms using an online service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
