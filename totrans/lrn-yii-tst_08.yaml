- en: Chapter 8. Analyzing Testing Information
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 分析测试信息
- en: 'In the last three chapters, we covered the topic of writing tests at different
    levels: unit, functional, and acceptance. So far, we have tested the new interface
    that we created, and we learned to apply all the new methods. This was a relatively
    easy task, but we don''t know how good we did in our testing. There are some specific
    metrics that we can analyze to generate a direct and immediate report on the quality
    of the tests. These reports will help us in taking informed decisions regarding
    the architecture of our code.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后三章中，我们讨论了在不同级别编写测试的主题：单元、功能和验收。到目前为止，我们已经测试了我们创建的新接口，并学会了应用所有新方法。这是一个相对简单的工作，但我们不知道我们在测试中做得如何。有一些特定的指标我们可以分析，以生成关于测试质量的直接和即时报告。这些报告将帮助我们做出有关代码架构的明智决策。
- en: Codeception is bundled with most of these report generation tools, and it's
    quite easy as it's been until now.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Codeception捆绑了大多数这些报告生成工具，而且到目前为止它相当简单。
- en: In this chapter, we will primarily cover the code coverage metrics, and we'll
    briefly touch on some other metrics, which can be obtained through various software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将主要介绍代码覆盖率指标，并简要介绍一些其他指标，这些指标可以通过各种软件获得。
- en: Improving the quality of your tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高你测试的质量
- en: Improving our code with the aid of additional tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用额外的工具来改进我们的代码
- en: Improving the quality of your tests
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高你测试的质量
- en: Since the beginning of programming and, in particular, testing, many programmers
    started questioning themselves on what it means to write good tests, or in other
    words, how do I know that the test I have written is good? What are the metrics
    for this?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从编程开始，特别是测试开始以来，许多程序员开始质疑自己编写良好测试的含义，或者换句话说，我如何知道我编写的测试是好的？这个指标是什么？
- en: It's definitely not a question of personal preference or skill.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对不是一个个人偏好或技能的问题。
- en: One of the first methods that was created for analyzing the quality of the tests
    was called code coverage. From a wider perspective, code coverage measures how
    much of the code is covered by the tests. There is a correlation between software
    bugs and the test code coverage, where the software with more code coverage has
    fewer bugs, although the tests won't remove the possibility of bugs being introduced,
    for instance, as a manifestation of complex interactions between modules or unexpected
    inputs and corner cases. This is why you need to be careful when planning and
    designing your tests, and you need to take into consideration that this won't
    remove the need for regression and exploratory testing, at least, not entirely.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 分析测试质量最早创建的方法之一被称为代码覆盖率。从更广泛的角度来看，代码覆盖率衡量测试覆盖了多少代码。软件缺陷与测试代码覆盖率之间存在相关性，具有更多代码覆盖率的软件具有更少的缺陷，尽管测试不会消除引入缺陷的可能性，例如，作为模块之间复杂交互或意外输入和边缘情况的表现。这就是为什么在规划和设计测试时需要谨慎，并且需要考虑这一点不会完全消除回归和探索性测试的需求。
- en: There are several code coverage criteria that are normally used for the code
    coverage programs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常用于代码覆盖率程序的代码覆盖率标准有几个。
- en: '**Line coverage**: This is based on the number of executable lines that were
    executed.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行覆盖率**：这是基于执行了多少可执行行的数量。'
- en: '**Function and method coverage**: This calculates the number of functions or
    methods that were executed.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数和方法覆盖率**：这计算执行了多少个函数或方法。'
- en: '**Class and trait coverage**: This measures the covered classes and traits
    when all of their methods are executed.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类和特性覆盖率**：这衡量在所有方法都执行时覆盖了多少个类和特性。'
- en: '**Opcode coverage**: This is similar to line coverage, although a single line
    might generate more than one opcode. The line coverage considers a line to have
    been covered as soon as one of its opcodes are executed.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指令覆盖率**：这与行覆盖率类似，尽管单行可能生成多个指令。行覆盖率认为一旦其指令之一被执行，该行就被覆盖了。'
- en: '**Branch coverage**: This measures if each possible combination of Boolean
    expression in the control structures are being evaluated when the tests are run.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支覆盖率**：这衡量在测试运行时是否评估了控制结构中每个可能的布尔表达式的组合。'
- en: '**Path coverage**: This is also called **Decision-to-Decision** (**DD**) path,
    and it considers all the possible execution paths, in terms of its unique sequence
    of branch execution from the beginning to the end of each method or function.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径覆盖**：这同样被称为**决策到决策**（**DD**）路径，它考虑了从每个方法或函数的开始到结束的所有可能的执行路径，从其独特的分支执行顺序来考虑。'
- en: '**Change Risk Anti-Patterns** (**C.R.A.P.**) **Index**: This is based on the
    cyclomatic complexity and the code coverage of a unit of code. This index can
    be lowered by refactoring the code or by incrementing the number of tests. Either
    way, it''s primarily used for unit tests.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更风险反模式**（**C.R.A.P.**）**索引**：这个索引基于代码单元的循环复杂度和代码覆盖率。可以通过重构代码或增加测试数量来降低这个索引。无论如何，它主要用于单元测试。'
- en: Since Codeception uses PHP_CodeCoverage, it does not support opcode coverage,
    branch coverage, and path coverage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Codeception使用PHP_CodeCoverage，它不支持指令覆盖、分支覆盖和路径覆盖。
- en: With this in mind, if we go back to our unit tests, we will understand a bit
    better the structure of our tests and how they are currently working.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，如果我们回到我们的单元测试，我们将更好地理解测试的结构以及它们目前的工作方式。
- en: Let's start by enabling the code coverage in our unit tests and then looking
    at their results.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先在我们的单元测试中启用代码覆盖率，然后查看它们的结果。
- en: Later, we will look at the functional and acceptance coverage reports, and then
    explore some other interesting information, which we can extract from our code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将查看功能性和验收覆盖率报告，然后探索一些其他有趣的信息，我们可以从我们的代码中提取这些信息。
- en: Enabling code coverage in Codeception
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Codeception中启用代码覆盖率
- en: Codeception provides a global and a specific configuration for code coverage.
    Depending on the structure of your application and the type of test you are going
    to implement based on your test plan, you can have either a generic configuration
    in `/tests/codeception.yml,` or a specific configuration for each suite configuration
    file, such as `/tests/codeception/unit.suite.yml`. You can also have both of these
    configurations. However, in this case, the single suite configuration will override
    the setting of the global configuration.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Codeception提供了全局和特定配置的代码覆盖率。根据您应用程序的结构和您根据测试计划将要实施的测试类型，您可以在`/tests/codeception.yml`中有一个通用配置，或者为每个套件配置文件（如`/tests/codeception/unit.suite.yml`）有一个特定配置。您也可以同时拥有这两种配置。然而，在这种情况下，单个套件配置将覆盖全局配置的设置。
- en: 'We are going to use the global configuration file. So at the end of the file,
    append the following lines:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用全局配置文件。因此，在文件末尾添加以下行：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This should be enough for getting started. The first option enables the code
    coverage, while the rest of the options tell Codeception and the code coverage
    program which files to include when writing the report for the white list and
    the black list. This will ensure that the results aggregate the information that
    is relevant to us, in other words, what we've written, rather than the framework
    itself.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足够开始。第一个选项启用了代码覆盖率，而其余的选项告诉Codeception和代码覆盖率程序在编写报告时包含哪些文件，以生成白名单和黑名单。这将确保结果汇总了与我们相关的信息，换句话说，就是我们编写的代码，而不是框架本身。
- en: We won't need to run the `build` command of Codeception, as there isn't a new
    module that has to be imported into our tester guys.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要运行Codeception的`build`命令，因为没有新的模块需要导入到我们的测试人员中。
- en: If we look at the `help` option for the `run` action of Codeception, then we
    will notice that it has two main options for generating the reports that we are
    interested in.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看Codeception的`run`操作的`help`选项，我们会注意到它有两个主要选项用于生成我们感兴趣的报告。
- en: '`--coverage`: This generates the actual coverage report, and it is accompanied
    by a series of other options for controlling the format and the verbosity of the
    report'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--coverage`：这会生成实际的覆盖率报告，并伴随一系列其他选项来控制报告的格式和详细程度'
- en: '`--report`: This generates an overall report of the tests that were run'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--report`：这会生成运行测试的整体报告'
- en: In conjunction with these two options, we will be able to generate the HTML
    and XML test and coverage reports, depending on the use. In particular, the XML
    report will be quite handy when we get to [Chapter 9](ch09.html "Chapter 9. Eliminating
    Stress with the Help of Automation"), *Eliminating Stress with the Help of Automation*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与这两个选项结合使用，我们能够根据需要生成HTML和XML测试和覆盖率报告。特别是，当到达[第9章](ch09.html "第9章。借助自动化消除压力")
    *借助自动化消除压力*时，XML报告将非常方便。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's important to keep in mind that currently the coverage reports of the acceptance
    tests are not merged with the reports generated for the functional and unit tests.
    This is due to the way in which the code coverage is calculated and intercepted.
    Later, we will see what will be needed for generating the coverage reports for
    acceptance tests.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，目前验收测试的覆盖率报告并没有与功能测试和单元测试生成的报告合并。这是由于代码覆盖率计算和拦截的方式造成的。稍后，我们将看到生成验收测试覆盖率报告需要什么。
- en: Extracting the code coverage information for unit tests
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取单元测试的代码覆盖率信息
- en: In the Codeception documentation, this is normally referred to as the **local
    coverage** report and it is applied to both the unit and functional tests. We'll
    touch upon remote coverage when talking about the coverage for acceptance tests.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Codeception文档中，这通常被称为**本地覆盖率**报告，它适用于单元测试和功能测试。当我们谈到验收测试的覆盖率时，我们将涉及到远程覆盖率。
- en: 'We can easily generate the coverage by appending the `--coverage` flag to the
    command shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在命令中添加`--coverage`标志来轻松生成覆盖率：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will end with an output similar to the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将结束于以下类似的输出：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The execution time you see here is based on a machine with an i7-m620 processor,
    on which runs the Linux kernel. The coverage increases the time exponentially.
    On the same machine, running the unit tests takes less than 10 seconds.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的执行时间是基于一个装有i7-m620处理器的机器，该机器运行Linux内核。覆盖率会增加执行时间呈指数增长。在同一台机器上运行单元测试不到10秒。
- en: There are methods for shortening the execution time. This can be done by using
    Robo, which is a task runner, and its specific Codeception plugin is robo-paracept.
    More information can be found in the official Codeception documentation at [http://codeception.com/docs/12-ParallelExecution](http://codeception.com/docs/12-ParallelExecution).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有方法可以缩短执行时间。这可以通过使用Robo（一个任务运行器）及其特定的Codeception插件robo-paracept来实现。更多详细信息可以在官方Codeception文档中找到，网址为[http://codeception.com/docs/12-ParallelExecution](http://codeception.com/docs/12-ParallelExecution)。
- en: This report gives us a succinct and immediate output of the code coverage of
    our unit tests.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这份报告为我们提供了代码覆盖率的一个简洁且直接的输出。
- en: The coverage for classes, methods, and lines (and where the percentage is calculated
    from), and a slightly detailed breakdown per class can be seen from the summary.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从摘要中可以看到类、方法和行的覆盖率（以及百分比的计算方式），以及每个类的略微详细分解。
- en: We can see that we succeeded in covering 100 percent of the `Dog` and `LoginForm`
    classes, and we nonetheless achieved a good 84.62 percent of the methods of the
    `User` class, but disappointingly, we covered only 33.33 percent of the methods
    of the `ContactForm`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们成功覆盖了100%的`Dog`和`LoginForm`类，并且我们仍然达到了`User`类方法的良好覆盖率，为84.62%，但令人失望的是，我们只覆盖了`ContactForm`类方法的33.33%。
- en: But, what did we miss?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们错过了什么？
- en: Well, there's only one way to find out, and that is by generating the HTML coverage
    report.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，只有一个方法可以找到答案，那就是生成HTML覆盖率报告。
- en: Generating a detailed coverage report of the unit tests
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成单元测试的详细覆盖率报告
- en: 'With the help of the `--coverage-html` option, we can generate a detailed code
    coverage report. Then, we can inspect it in order to understand what was covered
    and what was missed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`--coverage-html`选项，我们可以生成详细的代码覆盖率报告。然后，我们可以检查它，以了解哪些被覆盖了，哪些被遗漏了：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will now end with the following output line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将结束于以下输出行：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The report will be saved in the `_output/coverage/` directory, where you will
    find two files: `dashboard.html` and `index.html`. The first gives you some nice
    graphs, which are a little more interesting than the coverage report summary printed
    on the console, but it is mostly used for showing off and it is not useful for
    understanding what''s wrong with the tests. There''s, in fact, an open request
    for suppressing this output on the console ([https://github.com/Codeception/Codeception/issues/1592](https://github.com/Codeception/Codeception/issues/1592)).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 报告将被保存在`_output/coverage/`目录中，在那里你可以找到两个文件：`dashboard.html`和`index.html`。第一个文件提供了一些漂亮的图表，这些图表比控制台上打印的覆盖率报告摘要更有趣，但它主要用于炫耀，并不适用于理解测试中的问题。实际上，有一个公开的请求要求在控制台上抑制这种输出（[https://github.com/Codeception/Codeception/issues/1592](https://github.com/Codeception/Codeception/issues/1592)）。
- en: '![Generating a detailed coverage report of the unit tests](img/B03646_08_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![生成单元测试的详细覆盖率报告](img/B03646_08_06.jpg)'
- en: Details of the **Insufficient Coverage** panel on the dashboard
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板中**不足覆盖率**面板的详细信息
- en: As you can see from the preceding screenshot, the bit that you might be interested
    in at this level of detail is the **Insufficient Coverage** panel, (currently)
    sitting at bottom-left of the page.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的截图中所见，在这个细节级别，您可能感兴趣的部分是位于页面左下角的**覆盖率不足**面板（目前）。
- en: We will discuss the other panels later.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后讨论其他面板。
- en: You will be really interested in the `index.html` file. From there, you can
    see some of the detailed statistics and you can dig into every single file that
    has been analyzed, to see what lines the tests have covered and so improve your
    tests from there.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你会对`index.html`文件真正感兴趣。从那里，你可以看到一些详细的统计数据，并且可以深入查看每个已分析的文件，以查看测试覆盖了哪些行，从而从那里改进你的测试。
- en: '![Generating a detailed coverage report of the unit tests](img/B03646_08_01.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![生成单元测试的详细覆盖率报告](img/B03646_08_01.jpg)'
- en: Summary of the coverage across all files analyzed
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所有分析文件的覆盖率总结
- en: The summary of the coverage shows what's been covered, in some detail. This
    helped us in discovering immediately what was wrong with our testing, and in our
    case, one of the tests provided by Yii for `ContactForm` was not covered sufficiently.
    In the preceding screenshot, we can see that it shows 80 percent coverage of lines,
    33.33 percent coverage of the methods, but it does not show anything regarding
    the classes. This is because, unless you have all the methods covered, you won't
    have the class marked as covered.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖率总结显示了覆盖了什么，相当详细。这帮助我们立即发现我们的测试中出了什么问题，在我们的案例中，Yii为`ContactForm`提供的测试覆盖不足。在前面的截图中，我们可以看到它显示了80%的行覆盖率，33.33%的方法覆盖率，但它没有显示关于类的任何内容。这是因为，除非你覆盖了所有的方法，否则类不会被标记为已覆盖。
- en: 'This may not prove be a problem. There are methods that are not a part of our
    implementation and these can only be tested by using an integration test, and
    then there are others that can be covered by paying a bit of attention. If we
    click on the **ContactForm.php** link, then we would see the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不会证明是一个问题。有一些方法不是我们实现的一部分，这些方法只能通过使用集成测试来测试，还有一些可以通过稍微注意一下来覆盖。如果我们点击**ContactForm.php**链接，那么我们会看到以下内容：
- en: '![Generating a detailed coverage report of the unit tests](img/B03646_08_02.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![生成单元测试的详细覆盖率报告](img/B03646_08_02.jpg)'
- en: Summary of the coverage of the code in the selected file
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 选中文件的代码覆盖率总结
- en: 'Of the two methods that have not been covered, we don''t really need to cover
    the first method, `attributeLabels()`. Technically, this is because of two reasons:
    the first reason is that as it is a part of the Yii framework, we assume that
    it will work; the second reason is that it''s a trivial method, and it always
    returns an internal variable, which can''t be controlled in any way.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个未被覆盖的方法中，我们实际上并不需要覆盖第一个方法`attributeLabels()`。技术上，这是由于两个原因：第一个原因是它是Yii框架的一部分，我们假设它会工作；第二个原因是它是一个简单的函数，它总是返回一个内部变量，无法以任何方式控制。
- en: The other method is the `contact()` method and it has been covered partially.
    So, we're going to fix this. It may well be possible that this specific test will
    get corrected in a future version of the framework. This might be something that
    you need to look out for.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是`contact()`方法，它已经被部分覆盖。所以，我们将修复这个问题。完全有可能这个特定的测试将在框架的未来的版本中得到修正。这可能是一些你需要留意的事情。
- en: By clicking on the **contact($email)** link, or by just scrolling to the bottom
    of the page, we will find our method, and this will show us that all the paths
    have not been covered.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**contact($email)**链接，或者直接滚动到页面底部，我们会找到我们的方法，这将显示所有路径都没有被覆盖。
- en: '![Generating a detailed coverage report of the unit tests](img/B03646_08_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![生成单元测试的详细覆盖率报告](img/B03646_08_03.jpg)'
- en: Discovering what needs to be covered with the aid of color coded lines
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在颜色编码线条的帮助下发现需要覆盖的内容
- en: Our case is quite simple, so we will try to fix these errors either by adding
    the `@codeCoverageIgnore` directive to the documentation of the method that we
    want to exclude, or by adjusting or adding a new test to it in order to reach
    as close as possible to 100 percent. Remember, this is what we will be aiming
    for, but this is not necessarily our target.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的案例相当简单，所以我们将尝试通过添加`@codeCoverageIgnore`指令到我们想要排除的方法的文档中，或者通过调整或添加一个新的测试来尽可能接近100%。记住，这是我们将会追求的目标，但这并不一定是我们的目标。
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The solution to cover the remaining branch of the `if` statement is to add
    a test similar to the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 解决`if`语句剩余分支覆盖率的方法是添加一个类似于以下测试：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s run our tests again, and we will see the screenshot shown here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次运行我们的测试，我们将看到这里显示的截图：
- en: '![Generating a detailed coverage report of the unit tests](img/B03646_08_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![生成单元测试的详细覆盖率报告](img/B03646_08_04.jpg)'
- en: We've reached 100 percent coverage! Yay!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经达到了100%的覆盖率！太好了！
- en: I'll leave it to you to fix the remaining errors. Certain situations might be
    hard to cover, and you may need additional hints and suggestions on how to restructure
    your tests.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我将留给你去修复剩余的错误。某些情况可能很难覆盖，你可能需要额外的提示和建议来重新结构你的测试。
- en: Aggregating functional tests to unit tests
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将功能测试汇总到单元测试
- en: Now that we've seen what is going on in our unit tests and how to visually understand
    if we have effectively covered as much as we could, we can move to the functional
    tests that we wrote previously.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了我们的单元测试中发生了什么，以及如何直观地理解我们是否已经尽可能多地覆盖了，我们可以转向我们之前编写的功能测试。
- en: As we saw earlier, we can just add the functional suite to the command line
    for generating the aggregated reports.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，我们只需将功能套件添加到命令行中，以生成汇总报告。
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will also see that by omitting the suites we will end up with the same result,
    but we don't know when the Codeception developers will merge all the three suites
    into a single coverage report, so just keep this in mind and consult the documentation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会看到，如果我们省略了套件，最终结果将相同，但我们不知道Codeception开发者何时将所有三个套件合并为一个覆盖率报告，所以请记住这一点，并查阅文档。
- en: Our unit tests have covered the models in their entirety. Our functional tests
    should focus on the controllers. You should be able to spot that the login page
    and the REST module controller have not been covered completely. So, let's discuss
    these one by one.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的单元测试已经完全覆盖了模型。我们的功能测试应该专注于控制器。你应该能够发现登录页面和REST模块控制器并未完全被覆盖。所以，让我们逐一讨论这些问题。
- en: The login page will display the missing coverage for the login and the logout
    action.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面将显示登录和注销操作的缺失覆盖率。
- en: 'In the first case, it seems pretty easy to cover that. We have to make sure
    that we reach that action after logging in. So, let''s add the following assertion
    right after the successful login at the end of the test file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，覆盖它似乎相当简单。我们必须确保在登录后达到该操作。因此，让我们在测试文件末尾成功登录后立即添加以下断言：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we can see, we're using a few specific paths for testing the website. This
    isn't a problem when interacting with the Codeception REST module, but here we
    have to be verbose.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们正在使用一些特定的路径来测试网站。当与Codeception REST模块交互时，这并不是问题，但在这里我们必须详细说明。
- en: The other portion that we have to cover is a little more complex. Once we are
    logged in, notice that the logout button has a JS click event attached to it,
    and that will send a POST request to `/logout`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须覆盖的另一部分要复杂一些。一旦我们登录，请注意注销按钮上附加了一个JS点击事件，这将向`/logout`发送POST请求。
- en: Since PHPBrowser won't be able to read JS, nor will it have the ability to do
    a specific POST call, we won't be able to cover this piece of code. Don't even
    think about using `sendPost()` as it's a specific method, which comes from the
    REST module of Codeception.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PHPBrowser无法读取JS，也没有能力进行特定的POST调用，因此我们无法覆盖这段代码。甚至不要考虑使用`sendPost()`，因为这是一个特定方法，来自Codeception的REST模块。
- en: The only solution for this is to leave the coverage of this bit to the acceptance
    tests or to WebDriver.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的唯一方法是将这部分覆盖率留给验收测试或WebDriver。
- en: Due to the fact that acceptance and functional tests have not been merged, we
    can exclude this method from the coverage report by using `@codeCoverageIgnore`.
    However, make sure that this isn't a case anymore and discuss it with your colleagues
    before excluding the method coverage from all the tests.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于验收测试和功能测试尚未合并，我们可以使用`@codeCoverageIgnore`排除此方法，从而排除覆盖率报告中的方法覆盖率。但是，请确保这不再是问题，并在排除所有测试的方法覆盖率之前与你的同事讨论。
- en: The last part that we need to cover is the controller of the REST interface.
    Here, we have a mixed situation. We have uncovered the functions that are mostly
    a part of our framework, such as the anonymous function that performs the authentication
    and `checkAccess()`, we have a small bit in `actionUpdate()`, which forbids anything
    but a PUT, and we have another control statement in `actionSearch()`, which controls
    who can search what.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要覆盖的最后部分是REST接口的控制器。在这里，我们有一个混合的情况。我们有未覆盖的函数，这些函数主要是我们框架的一部分，例如执行身份验证的匿名函数和`checkAccess()`，我们在`actionUpdate()`中有少量内容，它禁止除了PUT以外的任何操作，并且在`actionSearch()`中还有一个控制语句，它控制谁可以搜索什么。
- en: In the first two cases we'll gladly avoid them from getting covered, as we've
    explicitly excluded the framework files which these two are part of.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两种情况下，我们很高兴避免它们被覆盖，因为我们已经明确排除了这些文件所属的框架文件。
- en: For `actionUpdate(),` we'll find out that we won't even need a specific check,
    as Yii already defines the type of HTTP call that is allowed against the default
    REST interfaces.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`actionUpdate()`，我们会发现我们甚至不需要特定的检查，因为Yii已经定义了针对默认REST接口允许的HTTP调用类型。
- en: 'We can add a test that ensures that we can''t perform a POST on the interface
    and it can be added to any of the already present tests. This could be something
    along the lines of the following code block:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加一个测试来确保我们无法在接口上执行POST操作，并且它可以添加到任何现有的测试中。这可能是以下代码块的内容：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Lastly, we want to ensure that the user can only search for his own username
    to get the ID, as we outlined in [Chapter 6](ch06.html "Chapter 6. Testing the
    API – PHPBrowser to the Rescue"), *Testing the API – PHPBrowser to the Rescue*.
    In order to do this, we can simply add something similar to the code block shown
    here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望确保用户只能搜索自己的用户名以获取ID，正如我们在[第6章](ch06.html "第6章。测试API - PHPBrowser来拯救")中概述的那样，“测试API
    - PHPBrowser来拯救”。为了做到这一点，我们可以简单地添加类似于这里显示的代码块的内容：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we run the tests with coverage, then we'll get a 100 percent on all the files
    that we wanted to see the coverage on.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行带有覆盖率的测试，那么我们将得到所有我们想要查看覆盖率的文件的100%。
- en: '![Aggregating functional tests to unit tests](img/B03646_08_07.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![将功能测试聚合为单元测试](img/B03646_08_07.jpg)'
- en: The final overview of the coverage for unit and functional tests
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 单元和功能测试的最终覆盖率概述
- en: Generating acceptance tests' coverage report
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成验收测试覆盖率报告
- en: Now that we've seen what to make of our coverage reports, we'll quickly look
    at the configuration that will help us in obtaining the coverage reports for the
    acceptance tests.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何处理我们的覆盖率报告，我们将快速查看将帮助我们获取验收测试覆盖率报告的配置。
- en: These coverage reports might not be the most important ones, but if constructed
    correctly, then they should prove that our scenarios are well written. Normally,
    the focus of acceptance tests is on ensuring browser cross- and preserving retro-compatibility.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些覆盖率报告可能不是最重要的，但如果构建正确，它们应该可以证明我们的场景编写得很好。通常，验收测试的焦点在于确保浏览器跨兼容性和向后兼容性。
- en: As we've seen in [Chapter 7](ch07.html "Chapter 7. Having Fun Doing Browser
    Testing"), *Having Fun Doing Browser Testing*, Codeception talks to the Selenium
    standalone server, which in turn launches the browser and performs the required
    tests through the browser driver. Because of this architecture, the c3 project
    has been created, which basically listens to the browser calls and understands
    which bit of our code is being executed remotely.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第7章](ch07.html "第7章。享受浏览器测试的乐趣")中看到的，“享受浏览器测试的乐趣”，Codeception与Selenium独立服务器通信，该服务器反过来启动浏览器并通过浏览器驱动程序执行所需的测试。正因为这种架构，c3项目被创建，它基本上监听浏览器调用并理解我们的代码的哪一部分正在远程执行。
- en: 'So, first of all, let''s get c3\. We can either download it from Composer or
    from the official website ([https://github.com/Codeception/c3](https://github.com/Codeception/c3))
    by running this command from the root of the project:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，让我们获取c3。我们可以从Composer或从官方网站（[https://github.com/Codeception/c3](https://github.com/Codeception/c3)）通过在项目根目录运行以下命令来下载它：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you're downloading it through Composer, then you'll have to add some additional
    instructions to the `composer.json` file. You should take the official documentation
    as the main reference point.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过Composer下载，那么你必须在`composer.json`文件中添加一些额外的说明。你应该以官方文档为主要参考点。
- en: 'Once you have it, include it in the `index-test.php` file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了它，就将其包含在`index-test.php`文件中：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With this, we have hooked c3 to Yii. Now, we just need to make Codeception
    aware of it. So open the `codeception.yml` file, and add the following options
    to the `coverage` section of the file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们已经将c3连接到Yii。现在，我们只需要让Codeception知道这一点。所以打开`codeception.yml`文件，并将以下选项添加到文件的`coverage`部分：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We need to enable the remote coverage, set the configuration of the file by
    using `remote_config,` and then specify the URL c3 should be listening on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要启用远程覆盖率，通过使用`remote_config`设置文件配置，然后指定c3应该监听的URL。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The detailed explanation of the remote code coverage and its configuration can
    be read from the official documentation of Codeception, which can be found at
    [http://codeception.com/docs/11-Codecoverage](http://codeception.com/docs/11-Codecoverage),
    and from the `README.md` file, which is either located in the `tests/` directory
    of your project or at [https://github.com/yiisoft/yii2-app-basic/tree/master/tests#remote-code-coverage](https://github.com/yiisoft/yii2-app-basic/tree/master/tests#remote-code-coverage).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 关于远程代码覆盖率及其配置的详细说明，可以从Codeception的官方文档中阅读，该文档可在[http://codeception.com/docs/11-Codecoverage](http://codeception.com/docs/11-Codecoverage)找到，也可以从`README.md`文件中找到，该文件位于你的项目的`tests/`目录中，或者可在[https://github.com/yiisoft/yii2-app-basic/tree/master/tests#remote-code-coverage](https://github.com/yiisoft/yii2-app-basic/tree/master/tests#remote-code-coverage)找到。
- en: Now, all our remote calls will go through the `index-test.php` file, and they
    will use c3 to generate the coverage data.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有我们的远程调用都将通过`index-test.php`文件进行，并且它们将使用c3生成覆盖率数据。
- en: Additionally, we may want to get a trimmed down report for specific acceptance
    tests, and in our case, we can decide to focus our attention only on the controllers
    that are being hit, and then choose to remove any reporting for the models.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可能还想为特定的验收测试获取一个精简的报告，在我们的情况下，我们可以决定只关注被击中的控制器，然后选择移除对模型的任何报告。
- en: 'In order to do so, consider what we already have in the main configuration
    file. We just need to add the following to our `acceptance.suite.yml` file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，考虑我们在主配置文件中已经有的内容。我们只需要将以下内容添加到我们的`acceptance.suite.yml`文件中：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At this point, you can generate the reports separately by using the code block
    shown here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可以通过使用这里显示的代码块单独生成报告：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can also do this by simply running the tests for the whole suite, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过简单地运行整个套件的测试来完成这项工作，如下所示：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we saw earlier, both of these methods will generate a separate report for
    the acceptance tests. It might happen that in the future this is no longer valid,
    so be sure to head over to the official documentation and check that.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，这两种方法将为验收测试生成单独的报告。未来这可能会不再有效，所以请务必查看官方文档并确认。
- en: 'Once we generate the reports, we will notice two things: the tests with the
    coverage report might take ages, so we don''t want to run this every time we make
    a change to the interface. Secondly, we will have to cover the missing logout
    test that we have highlighted before.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们生成了报告，我们会注意到两件事：带有覆盖率报告的测试可能需要很长时间，所以我们不希望在每次更改接口时都运行这个测试。其次，我们必须覆盖之前突出显示的缺失登出测试。
- en: So, let's go to our `LoginCept.php` file and add what's missing.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们转到我们的`LoginCept.php`文件，并添加缺少的内容。
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Please note that we need to be very specific while using the URLs, just as we
    were with the functional tests.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在使用URL时，我们需要非常具体，就像我们在功能测试中所做的那样。
- en: Once this is done, we should find ourselves with the complete coverage of all
    the suites.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们应该发现自己拥有所有套件的完整覆盖率。
- en: In the next section, we'll see what else we can generate, and then we'll take
    it to the next level with the aid of automation in the next chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到我们还能生成什么，然后我们将在下一章中借助自动化将其提升到更高水平。
- en: Improving our code with the aid of additional tools
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在额外工具的帮助下改进我们的代码
- en: In addition to code coverage and test reports, we have a range of additional
    tools, which we can use for improving the quality of our code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 除了代码覆盖率和测试报告之外，我们还有一系列额外的工具，我们可以使用这些工具来提高我们代码的质量。
- en: The two tools that we're going to talk about are the check style and the cyclomatic
    complexity through the C.R.A.P. index.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的两个工具是检查样式和通过C.R.A.P.指数的循环复杂度。
- en: We are going to add more examples and tools to these in [Chapter 9](ch09.html
    "Chapter 9. Eliminating Stress with the Help of Automation"), *Eliminating Stress
    with the Help of Automation*, as each command would require too much knowledge
    from the developer's side, and it is something that can be automated and triggered
    by the flick of a switch.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第9章](ch09.html "第9章。借助自动化消除压力")“借助自动化消除压力”中添加更多示例和工具，因为每个命令都需要开发者过多的知识，而且这是可以通过开关自动触发的事情。
- en: '**PHP Checkstyle** (**PHPCS**) is a great tool, albeit it is rather complex
    at first . This will help us in maintaining a style of code that is uniform for
    all developers. You might care too much about this, and I''ve seen situations
    where decisions on which style to use have resulted in a big fight. However, the
    benefits of this are quite evident, as it forces the developers to control their
    style of coding. When used with the cyclomatic complexity, it can standardize
    the code and avoid any situation involving intricate and difficult code.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**PHP Checkstyle**（**PHPCS**）是一个非常好的工具，尽管一开始它相当复杂。这将帮助我们保持所有开发者代码风格的统一。你可能对此过于关心，我也见过因为选择哪种风格而引发的激烈争论。然而，这种做法的好处是显而易见的，因为它迫使开发者控制他们的编码风格。当与循环复杂度一起使用时，它可以标准化代码并避免任何涉及复杂和困难代码的情况。'
- en: There are some already existing code standards available for your use and these
    have been configured according to your needs. PHPCS only needs a reference for
    the configuration file or the name of the standard to follow.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有一些现成的代码标准可供使用，并且这些标准已经根据你的需求进行了配置。PHPCS只需要一个配置文件或要遵循的标准名称的引用。
- en: We are going to install and use Yii 2 own code standards, which you can use
    as a base for specifying the rules that are more suited to your needs.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装并使用Yii 2自己的代码标准，你可以将其作为指定更适合你需求的规则的基准。
- en: 'You can install the Yii 2 code standards by using Composer, which will include
    the actual binary that we need as a dependency:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Composer安装Yii 2代码标准，这将包括我们需要的实际二进制文件作为依赖项：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once we have installed both of them, we can invoke them through the console
    by using the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了这两个工具，我们就可以通过以下命令在控制台中调用它们：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The last three arguments are the folders that we want PHPCS to scan.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后三个参数是我们希望PHPCS扫描的文件夹。
- en: If you want to improve your code, then you should make use of the C.R.A.P. index,
    which is included in the coverage reports generated by Codeception. In the following
    chapter, we'll see how the cyclomatic complexity index can be used for basing
    the decisions for modifying your code.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要改进你的代码，那么你应该利用C.R.A.P.指数，这是Codeception生成的覆盖率报告中包含的。在下一章中，我们将看到如何使用循环复杂度指数来基于修改代码的决定。
- en: The C.R.A.P. index has been designed for analyzing and predicting the amount
    of effort, pain, and time required for maintaining an existing body of code.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: C.R.A.P.指数是为了分析和预测维护现有代码库所需的工作量、痛苦和时间而设计的。
- en: 'It is mathematically defined as shown here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 它在这里以数学方式定义：
- en: '*C.R.A.P.(m) = comp(m)^2 * (1 – cov(m)/100)^3 + comp(m)*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*C.R.A.P.(m) = comp(m)^2 * (1 – cov(m)/100)^3 + comp(m)*'
- en: Where *comp(m)* is the cyclomatic complexity, and *cov(m)* is the test code
    coverage provided by the automated tests. The cyclomatic complexity is calculated
    as 1 plus the number of unique decisions in the method.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*comp(m)*是循环复杂度，*cov(m)*是自动化测试提供的测试代码覆盖率。循环复杂度是方法中唯一决策数加1。
- en: A low C.R.A.P. index indicates a relatively low change and maintenance risk,
    because it's either not too complex or sufficiently covered by tests. To keep
    it practical, if your method is a straight sequence of calls, then it is likely
    that it will have a C.R.A.P. index that is close to 1\. The more `if`, `for,`
    and `while` clauses it has, the more complex it will be, and hence it will have
    a higher C.R.A.P. index.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 低C.R.A.P.指数表明相对较低的变化和维护风险，因为它要么不是太复杂，或者被测试充分覆盖。为了保持其实用性，如果你的方法是直接的调用序列，那么它很可能有一个接近1的C.R.A.P.指数。它包含的`if`、`for`和`while`子句越多，它就越复杂，因此它的C.R.A.P.指数就越高。
- en: This is where testing lets the potential problems emerge and points you in the
    direction that you should be taking for keeping your code maintainable and modular.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是测试如何让潜在的问题显现出来，并指引你走向保持代码可维护和模块化的正确方向。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've discussed the basic steps needed for configuring and
    generating the code coverage for the project. We've seen how to use the reports
    generated for discovering potential problems with the code. We've also covered
    some additional tools for improving our code quality.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了配置和生成项目代码覆盖率所需的基本步骤。我们看到了如何使用生成的报告来发现代码中的潜在问题。我们还介绍了一些额外的工具来提高我们的代码质量。
- en: In [Chapter 9](ch09.html "Chapter 9. Eliminating Stress with the Help of Automation"),
    *Eliminating Stress with the Help of Automation*, we'll complete this journey.
    We will discuss the topic of additional tools, how to integrate them into a continuous
    integration system, and then display the results for better access and browsing.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章。借助自动化消除压力")中，*借助自动化消除压力*，我们将完成这段旅程。我们将讨论额外工具的主题，如何将它们集成到持续集成系统中，并展示结果以方便访问和浏览。
