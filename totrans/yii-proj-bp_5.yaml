- en: Chapter 5. Creating a Microblogging Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our next project, we will be developing a scalable microblogging platform
    similar to Twitter. This platform will allow users to share content with others,
    mention other users in their share, and view a timeline of their shares. Additionally,
    users will be able to register, manage, and change certain account details such
    as their e-mail address and password. Finally, our platform will enable users
    to share content with other external social networks such as Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, we''ll have a social network that will allow us
    to share content and manage our accounts, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Microblogging Platform](img/7734OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our users will also have the ability to directly reply to and share individual
    posts that they make, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Microblogging Platform](img/7734OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get started, there are a couple of things that we''ll need to set
    up and have working:'
  prefs: []
  type: TYPE_NORMAL
- en: Since we'll be sending and receiving e-mails from our application, we're going
    to need a registered and active domain name. If you do not already have a working
    domain name, you can purchase one from a domain registrar such as [https://www.namecheap.com](https://www.namecheap.com),
    [www.name.com](http://www.name.com), or [www.gandi.net](http://www.gandi.net).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, you'll need to have a web server with a public-facing IP address. This
    will allow e-mails to be sent to our application. Many cloud **Virtual Private
    Server** (**VPS**) providers are available for use for low monthly or hourly prices.
    Such services include [https://www.digitalocean.com](https://www.digitalocean.com),
    [https://www.linode.com](https://www.linode.com), and [www.rackspace.com/cloud/servers](http://www.rackspace.com/cloud/servers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to send e-mails in our application, we'll once again be utilizing a
    free SendGrid Developer Account, which can be set up at [https://www.sendgrid.com/developers](https://www.sendgrid.com/developers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we'll once again be using the latest version of MySQL (at the
    time of writing this, it is MySQL 5.6). Make sure that your MySQL server is set
    up and running on your server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this project, we'll once again be managing our dependencies through Composer,
    which you can download and install from [https://getcomposer.org/](https://getcomposer.org/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you'll need a Twitter Developer account, which can be obtained from
    [https://dev.twitter.com/](https://dev.twitter.com/). This account will allow
    us to enable the sharing of our content to Twitter as the logged-in user via Twitter's
    OAuth API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have acquired the listed items, create a subdomain on the domain name
    you are using and point it to your server. In this chapter, I'll be using `chapter5.example.com`
    to refer to this subdomain. After everything is set up and your server is responding
    to that domain name, we can get started.
  prefs: []
  type: TYPE_NORMAL
- en: Describing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our microblogging platform can be broken down into two big components:'
  prefs: []
  type: TYPE_NORMAL
- en: Users who will be following other users and creating, sharing, and liking content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text-based shares that will be created by the users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first component of our application is the set of users who will be performing
    all the tasks in our application. For this application, we're going to be largely
    reusing the user database and authentication system that we expanded upon in [Chapter
    4](ch04.html "Chapter 4. Developing an Issue-tracking Application"), *Developing
    an Issue-tracking Application*. In this chapter, we'll be expanding upon the `users`
    database table, and adding several new relations such as followers and likes.
  prefs: []
  type: TYPE_NORMAL
- en: Followers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this application, users will be able to follow and be followed by other
    users. This relationship will allow users to stay up-to-date with other users
    by showing content that other users have recently created. Moreover, it will allow
    them to know how many people are following them and see how much of an influence
    they have over their network. For this application, our `followers` table will
    just contain the primary keys of users who are either following or being followed
    by another user. Our database table will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Likes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this application, users will also be able to indicate that they like a particular
    share. Similar to our `followers` table, the `likes` table will only contain the
    primary keys of the `users` and the `shares` table. Our database table will look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Shares
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The second component of our application will be the shares that users create.
    For our purposes, we will define a share as a piece of text that can contain unique
    markers such as the `@` sign for mentioning other users, and the `#` character
    for tagging a share. Shares can also be in reply to another share, which will
    allow them to be viewed on the share''s view page. Finally, shares can be reshared
    users who wish to share another user''s share with their network. Our database
    table will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Initializing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, you should be comfortable with creating projects from scratch. To provide
    us with a common starting ground, a skeleton project has been included with the
    project resources for this chapter. Included with this skeleton project are the
    necessary migrations, data files, controllers, and views that we need to get started.
    The login system that we''ll be using for authentication throughout this chapter
    is also included. Copy the skeleton project from the project resources folder
    to your web server and configure it so that it responds to `chapter5.example.com`
    as outlined at the beginning of the chapter, and then perform the following steps
    to make sure everything is set up:'
  prefs: []
  type: TYPE_NORMAL
- en: Adjust the permissions on the `assets` and `protected/runtime` folders so that
    they are writable by your web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the MySQL user and database table that our application will use.
    If you don''t want to alter the provided main configuration file, the following
    MySQL commands will create the database and user for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll need to run the initial migrations and then import the sample
    data that is provided in the `protected/data` folder. This sample data will allow
    us to immediately log in to our application and start using it once the application
    is running. Navigate to the root of the project, and then run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, we will need to update `params.php` located at `protected/config/` with
    our SendGrid information. Your username and password will correspond to your SendGrid
    username and password. Keeping in line with our example domain, set the `from`
    address to `socialii@chapter5.example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we will need to install the necessary Composer dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, you should be able to open `http://chapter5.example.com` in
    your browser and see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing the project](img/7734OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making a better Yii bootstrap file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One thing you may have noticed was that we didn''t have to declare where the
    Yii framework was located for our site to work. That''s because we included Yii
    framework as a dependency in our `composer.json` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several benefits to including Yii as a dependency in our project
    rather than hardcoding it in our bootstrapper, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Including it in our bootstrapper as a Composer dependency means that we don't
    have to bother installing Yii framework on our server before we push our code
    to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can now automate our deployment process, and be certain that the dependencies
    in our development environment match those of our production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used for this project is now separate from other projects that might
    also use Yii framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, this separation allows us to upgrade Yii or use a different fork of
    Yii without having to worry about how we're going to deploy Yii framework to our
    server—Composer will simply take care of the installation for us
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ve also made a few improvements and changes to our Bootstrap file to make
    developing and debugging easier for us. Let''s take a look at the changes in our
    `index.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we include our configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''re going to set `YII_DEBUG` and `YII_TRACE` to variables that are
    defined in our `main.php` file at `protected/config/`. This will allow us to toggle
    the debug mode and the trace level without having to alter the code in `index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In our `main.php` file at `protected/config/`, we can toggle these variables
    by setting `params[debug]` and `params[trace]`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''re going to load our Composer dependencies. Depending on whether
    `YII_DEBUG` is set or not, load `yii.php` or `yiilite.php`. For most configurations,
    and when coupled with APC Cache or Zend OPcache, `yiilite.php` should improve
    the performance of your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn more about yiilite, take a look at the official Yii documentation
    at [http://www.yiiframework.com/doc/guide/1.1/en/topics.performance#using-x-9x](http://www.yiiframework.com/doc/guide/1.1/en/topics.performance#using-x-9x).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''re going to automatically enable logging, and turn error reporting
    to its maximum value when we''re in the debug mode. This will allow us to easily
    view full stack traces when an error occurs and get detailed log messages about
    what''s going on in our application. This option will help with development and
    won''t be loaded when we are running in a production environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the preceding step to work, we then need to define a logging method that
    we want to use. In our development environment, it makes sense to use `CWebLogRoute`
    so that we can see our log messages in our browser. To enable this route, we''ll
    add the following to the components section of our `main.php` file located at
    `protected/config/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii provides several different logging methods that you can use in both production
    and development environments. To learn more about logging, take a look at the
    official Yii documentation at [http://www.yiiframework.com/doc/guide/1.1/en/topics.logging](http://www.yiiframework.com/doc/guide/1.1/en/topics.logging).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we''re going to bootstrap our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enabling users to manage their information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, our users haven't been able to do much besides interacting
    with content. In this chapter, we'll be expanding upon the base User model so
    that they can register with our application, securely activate their accounts,
    reset their passwords if they forget them, and change their e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading our UserIdentity class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before implementing the previously mentioned functionality, we need to make
    sure that we can address our users appropriately without having to ask our database
    for some basic information about the currently logged-in user. To do this, we''re
    going to add some information to our `UserIdentity.php` file located at `protected/components/`
    as shown next in the highlighted sections of our `authenticate()` method. Additionally,
    we''re going to enhance this class so that if `YII_DEBUG` is enabled, we can get
    more information about what is going on if authentication fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Defining user relations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we''ll want to make sure that our relations are set up so that we can
    tell which data is associated with our users. This includes shares, followers,
    and followees. Within our `protected/models/User.php` file, make sure the following
    is set to our `relations()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re also going to add a new relational type to our `relations()` method
    so that we can quickly retrieve the number of shares, followers, and followees
    a user has. This relation type is called `STAT`, and behaves the same as a `HAS_MANY`
    relation, except that it performs a count at the database level and returns a
    number rather than returning an array of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By using the `STAT` relation, we can reduce the strain on our database when
    we want to know how many followers a user has. In a small database with a few
    users, a `HAS_MANY` relationship isn't very significant; however, when dealing
    with thousands of users, repeatedly running a `HAS_MANY` query will result in
    a large number of results to be returned, which can result in our application
    running out of memory and crashing.
  prefs: []
  type: TYPE_NORMAL
- en: Determining whether a user is following another user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last change we need to make to our model for our relations is to add a
    quick method that will allow us to determine whether the currently logged-in user
    is following another user. We''ll use this information later on to adjust what''s
    displayed in our views. Add the following method to your `User.php` file located
    at `protected/models/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Implementing a secure registration process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the more difficult parts of creating a secure web application is ensuring
    that the users who register on our site are really the users they claim to be.
    Often, this is accomplished by sending an e-mail to the user with a unique single-use
    token. If the user is able to visit our site with that secure token, we can assume
    that they are real users, and that they have access to the e-mail address. By
    employing this method of validation, we can ensure that the users who register
    on our site are who they claim to be, and that they choose to engage with our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: While we could handle the majority of this functionality directly within our
    controller and bloat our User model with unnecessary methods, our tool of choice
    for this task will be `CFormModel`. In this book, we've only utilized `CFormModel`
    for our `LoginForm` model, which we've been using for logging users in. Before
    moving forward, let's take a deeper look into what `CFormModel` is and explore
    how we can use it.
  prefs: []
  type: TYPE_NORMAL
- en: '`CFormModel` is very similar to `CActiveRecord`, in that it extends `CModel`
    and inherits many of the methods that `CActiveRecord` has, such as `attributeLabels`,
    `attributes`, and `rules`. The primary difference between `CFormModel` and `CActiveRecord`
    is that `CFormModel` is used to collect information from an HTML form, and the
    data submitted to `CFormModel` is acted upon rather than stored and manipulated
    in a database. By taking advantage of the methods inherited from `CModel`, we
    can cleanly and easily use `CFormModel` to validate input and reduce the amount
    of code clutter in our controllers and models.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about `CFormModel`, check out the official Yii documentation at
    [http://www.yiiframework.com/doc/api/1.1/CFormModel](http://www.yiiframework.com/doc/api/1.1/CFormModel).
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, create a new file in `protected/models/RegistrationForm.php`
    and add the following to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The next steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first item we''ll be placing in this class is our attributes. These model
    attributes are publicly exposed, and can be set from our controllers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll define our attribute labels for these attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll want to set up our validation rules. For new users, we want to
    verify that all attributes are set, the e-mail address is a valid one, the password
    is at least `8` characters long, and the username the user''s trying to register
    with is not already taken:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since Yii doesn''t provide a native validator for usernames, we will then need
    to define our own `validateUsername()` method, which will do a simple existence
    check against our database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll also want to define a validator to ensure that our e-mail address is
    not already taken:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice that when validation fails, we''re not only returning false but also
    adding an error to our model. We''re doing this for three reasons: to enhance
    the user experience and ensure that the user knows what went wrong, to ensure
    that the `validate()` method of `CModel` fails when an error is thrown (it will
    return true unless `$this->addError()` is called), and to ensure that we can run
    these validators independently of the form.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Out of preference, the last method we''ll be creating is a `save()` method,
    which will perform the validation, send a verification e-mail to the user, and
    insert the new record into our database. To achieve this, start by creating a
    new method called `save()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, within the method, first perform the validation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a new `User` object:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, attempt to save the user and send that user an e-mail address with the
    activation details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll want to update our User models so that the activation key is set
    when the user is first created. To generate the activation key, we''ll be using
    a library that was included in our `composer.json` file that securely generates
    strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add a register action to our `UserController.php` file located
    at `protected/controllers/` that will allow the user to register with our site.
    Since majority of the work has already been done in our form, all we have to do
    is collect the data from the `$_POST` request, apply it to the model, and call
    the `save()` method on the model. To provide a better user experience, we can
    also attempt to automatically log the user in using their new credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, from the project resources folder, copy the following view files into
    your project: `protected/views/user/register.php`, `protected/views/email/activate.php`,
    and `protected/views/site/index.php`. Now, either from the `site/index` or `user/register`
    route, you can register a new account in your site.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, create a new method in your `UserController.php` file located at `protected/controllers/`
    called `actionActivate()` that will actually activate our user. To do so, we''re
    simply going to verify that the ID parameter sent to us in the route matches with
    what we have on file for the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also reuse the form we just created on our home page to allow users
    to log in or register a new account from there. Since we''ve already copied the
    view over, we simply need to adjust the `SiteController` `actionIndex()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Handling forgotten passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously shown, using `CFormModel` to handle input from an HTML form makes
    it very easy to validate submitted information and act upon it while keeping our
    models and controllers very clear. We can once again use `CFormModel` to handle
    forgotten password requests from a user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle forgotten passwords, we''re going to request that the user provides
    us with the e-mail address they used to register their account. Next, we''ll verify
    that we have an e-mail address on file, and then send the user an e-mail with
    a single use token that will allow them to securely reset their password. To start,
    create a new file called `ForgotForm.php` in `protected/models` and add the following
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The next steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by declaring the public attributes of our form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''re also going to declare a private property for our User model that we''ll
    be reusing throughout this model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll declare our validation rules and custom validator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we will declare our `save()` method that will send the user the e-mail
    and indicate that they have asked for their password to be reset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create an action in `protected/controllers/UserController.php` to handle
    the form submission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, copy `protected/views/user/forgot.php`, `protected/views/user/forgot_success.php`
    and `protected/views/email/forgot.php` from the project resources folder into
    your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resetting a forgotten password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the user has the single-use token we sent them, we can then allow the
    user to securely change their password to whatever they want. Start by creating
    a new file in `protected/models` called `PasswordResetform.php` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The next steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by declaring the public attributes for this form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the validation rules. The user''s new password should have the same
    requirements as when the user registered. Since we''re requesting the password
    twice, we''ll want to compare the two passwords using the compare validator. This
    validator validates the first attribute against the `attribute_repeat` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the `save()` method to reset the user''s password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create our controller action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, copy `protected/views/user/resetpassword.php` and `protected/views/user/resetpassword_success.php`
    from the project resources folder into your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling users to manage their details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, we can now log in, register an account, and reset our passwords
    if we forgot them. Now, let''s work on allowing users to manage their own details.
    This includes allowing them to change their password, e-mail address, and the
    other pieces of information that we collect during the registration process. The
    steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by once again creating a new `CFormModel` in `protected/models`
    called `ProfileForm.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll add our attributes and labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll then add our basic validation rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before allowing the user to change any of their information (including their
    password and e-mail address), we''re going to require them to enter their current
    password. This will validate that they have control over the account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll then add our `save()` method that will update the user''s information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `save()` method, we declared two new methods: `sendPasswordChangeNotification()`
    and `sendEmailChangeNotification()`. These two methods will send e-mails to the
    user when the event occurs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second method, `sendEmailChangeNotification()` sends an e-mail to the user
    when the user''s e-mail address changes. This allows us to verify their new e-mail
    address before we start using it in our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, within our `UserController`, we''ll define our `actionIndex()` method
    that will collect this information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we need to copy `protected/views/user/index.php`, `protected/view/email/passwordchange.php`
    and `protected/views/email/verify.php` from our project resources folder into
    our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verifying a new e-mail address
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, our users can change their own information without having to go through
    us. Before we close `UserController`, there are a couple of more methods that
    we need to implement.
  prefs: []
  type: TYPE_NORMAL
- en: 'One secure way of changing a user''s e-mail address is to store the new e-mail
    address in a temporary table or column in our database and then send to that e-mail
    address a verification e-mail (this is what we implemented in our `ProfileForm`
    class). This allows us to indicate that we''re aware that the user wants to change
    their password, but we require them to prove that they have access to the new
    e-mail address. The e-mail that we sent them contains a secure activation token
    and a link to the `actionVerify()` method, which will verify that the token belongs
    to the user, and then move the new e-mail address to the main e-mail address field
    in our database. We can implement the `actionVerify()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The last actions we''ll implement for this controller will allow a user to
    follow and unfollow another user. We''ll use these actions in our views later
    in the chapter. For now, implement the actions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Before closing this controller, verify that the `accessRules()` method is set
    up correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Viewing a timeline of shares
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to display new content is to simply list it so that the newest
    items are shown first. On our timeline page, we want to provide the user with
    the ability to share something, view information about the user they are viewing
    (such as the number of shares, followers, and followees), and view things that
    the user has recently shared. To do this, we''re going to take advantage of `CListView`
    loaded asynchronously from our main timeline view. This will allow us to reuse
    this view later on by simply making a `GET` request to an endpoint that we''ll
    create later. In our `TimelineController.php` file located at `protected/controllers/`,
    implement the `actionIndex()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: All that we're doing in this action is retrieving the user ID (in this case,
    the username of the user) from the route and then passing some information down
    to our view. From the project resources folder, copy the `index.php` file located
    at `protected/views/timeline/` into your project. Let's take a look at some of
    the more interesting parts of this file.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to notice in this file is that we're simply using `CActiveForm`
    to display the new share container. Moreover, at the bottom of this file, we've
    implemented some JavaScript to do some rudimentary form validation checking, to
    clear the text field upon asynchronous submission, to adjust the number of shares
    we have, and finally, to prepend the new share to the top of our shares list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing to notice is that we''ve implemented conditional follow and
    unfollow button links to allow our users to simply click on a link to follow or
    unfollow a particular user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing to notice in this file is our use of the count relations we
    set up earlier in our User model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''re loading our shares for this user by registering an asynchronous
    callback to fetch the appropriate shares, regardless of which user we are viewing
    the share for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving shares
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s implement our action that will display our shares. This action
    will have slightly different behaviors depending on whether we''re viewing our
    timeline or a timeline of another user. Within our `ShareController.php` file
    located at `protected/controllers/`, implement `actionGetShares`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The next steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this is an asynchronous callback, we don''t want to render anything from
    our layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''re going to either throw an error if a user wasn''t provided and
    we''re not logged in, or set the user to ourselves if we are logged in and an
    ID was given to us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we''re going to implement `CListView`, which will retrieve data from our
    `GET` parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When viewing another user''s timeline, we only care about the shares that they
    have shared with the world. However, when we''re viewing our timeline, we want
    to view both our shares and the shares of the user we are following. We can implement
    the controller portion of this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll need to implement our `getshares.php` view file at `protected/views/shares/`
    as `CListView`. Notice that we''re passing down `$myFollowers` as a custom parameter
    to our Share model''s `search()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, within our model, we''re going to adjust our `search()` method so that
    it conditionally loads the appropriate data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we can implement our individual share view by copying `protected/views/share/share.php`
    from our project resources folder into our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within this file, we''re going to implement some custom logic so that hashtags
    (#) and @ mentions are displayed as links. This will allow us to store unformatted
    text in our database, which in turns means we could adjust the way our views work
    without having to modify our data. We''re also going to render our text in Markdown
    to allow our users to add links or other custom formatting, but prevent them from
    attempting XSS injection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Sharing new content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, if we had shares in our database, we''d be able to see them.
    So let''s work on sharing new content! From within our controller, the action
    to handle sharing is simply going to be loading a new Share model and populating
    it. Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Though, the real power behind sharing content happens in the `beforeSave()`
    method of our Share model. From here, we handle all the mentioning that may occur
    within our model, and send an e-mail to everyone who was mentioning in the share.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Resharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since everything in our model is already implemented, we can easily implement
    resharing now as a new controller action within `protected/controllers/ShareController.php`.
    Resharing allows a user to share something another user shared, while still giving
    that user credit for the original share. In our controller, what we're going to
    do is load the share we want to reshare with our network, change the author to
    us, and then indicate that this is a reshare of another share.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a `loadModel()` utility method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll implement the resharing ability as described in the *Describing
    the project* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Liking and unliking shares
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we'll implement the actions and methods necessary for a user to like and
    unlike a given share. The only restriction on likes should be that a user can't
    like a share more than once.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can implement the action for liking in `ShareController` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, within our Share model, we''ll implement the method necessary to check
    whether an action has already been liked by a user or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will implement the `like()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will implement the `unlike()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Viewing shares
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, we can do everything with a share except dive into one and view
    all the replies to a share. Let''s implement the `actionView()` method so that
    our users can view a particular share. In `ShareController`, we''ll implement
    this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will copy `protected/views/share/view.php` from our project resources
    folder into the project. Within our view, we can now share something and click
    on the eye icon on the share in order to view it in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for shares
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most important parts of any application is the ability to search
    for and discover new content. For this application, we''ll be implementing a search
    method that will allow users to search for content and users. To do this, we''ll
    check whether the query string in our search method contains the `@` character.
    If it does, we''ll perform a second search for that user and display information
    about that user in our view. We''ll implement that method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by implementing `actionSearch()` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll then retrieve the query string from our `$_GET` parameters and define
    the scope for our models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, as long as there is a query to run against, we''ll create two `CDbCriteria`
    objects; one for users and the other for shares:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within this `if` bracket, we''ll first check whether there were any mentions
    in our query string, by using `preg_match_all`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If there are any results, we''ll build a query to find all the users who were
    mentioned in the query, and then, we''ll remove that criteria from our query string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll perform a `LIKE` query search against the `text` field of our
    Share model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll render our view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we'll need to copy our view file from `protected/views/timeline/search.php`
    into our project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sharing on Twitter with HybridAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our application doesn't have a large following yet, it's important to
    enable our users to share content that they generate on our site to other places.
    A great way to spread the word about a particular site or service is to take advantage
    of Twitter. One way to integrate with Twitter is by utilizing their OAuth API.
    This will allow us to authenticate as a given user and post content on their behalf,
    at just a click of a button.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we'll be taking advantage of **HybridAuth**. HybridAuth is an open
    source library that allows developers to integrate with multiple third-party social
    networks, and enables developers to make their application more social. For our
    purposes, we're going to utilize HybridAuth to impersonate a given user (with
    their permission, of course) and submit content on their behalf upon their request.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn more about HybridAuth, check out the official documentation
    at [http://hybridauth.sourceforge.net/](http://hybridauth.sourceforge.net/).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Twitter application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start using HybridAuth though, we first need to set up a Twitter
    application and obtain our OAuth credentials. These credentials will allow our
    application to communicate securely with Twitter, and enable us to sign in and
    post as our users. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is OAuth? OAuth is an open standard for authentication, and provides client
    applications such as the one we are building in this application, secure delegated
    access to server resources on behalf of that owner, in this case, Twitter. By
    using OAuth, we can communicate securely with a server without having to transmit
    our user's credentials to our application. In our application, we'll be using
    HybridAuth to take care of most of the leg work when dealing with Twitter's OAuth
    endpoint. Check out [http://oauth.net/about/](http://oauth.net/about/) for more
    information about what OAuth is and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, open up your web browser, navigate to [https://apps.twitter.com/](https://apps.twitter.com/),
    and sign in using your Twitter credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once authenticated, click on the **Create New App** button in the top-right
    corner of the page body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On this page, fill out the fields as shown in the next screenshot. Adjust the
    website URL and **Callback URL** to match what you are using in your application.
    Note that the endpoint you provide to Twitter must be publicly accessible.![Setting
    up a Twitter application](img/7734OS_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, click on the **Settings** tab, check the **Allow this application
    to be used to sign into Twitter** checkbox, and click on the **Update Settings**
    button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Permissions** tab and change the access level to **Read
    and Write** and save the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring HybridAuth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With our Twitter application configured, we now need to install and configure
    HybridAuth. Fortunately, HybridAuth is available as a Composer dependency, so
    we can include its source code into our project by adding the following to the
    require section of our `composer.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The next steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `composer update` command from your command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see something similar to the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll configure HybridAuth so that it knows what information to use.
    Open up `protected/config/params.php`, and add the following after our SendGrid
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, retrieve your Twitter API key and Twitter Secret key from the **API Keys**
    tab of our Twitter application, as shown in the next screenshot, and replace `<twitter_key>`
    and `<twitter_secret>` with them in your configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Your Twitter OAuth Key and Secret are confidential pieces of information and
    should be kept out of your DCVS provider. If you ever suspect that your OAuth
    credentials have been compromised, you should immediately regenerate your API
    keys. This will prevent potential attacks from gaining the ability to sign on
    and tweet as your users.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Configuring HybridAuth](img/7734OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HybridAuth can be configured with several different options. Be sure to look
    at a few of the examples if you're interested in implementing social sharing for
    other providers at [http://hybridauth.sourceforge.net/userguide/Configuration.html](http://hybridauth.sourceforge.net/userguide/Configuration.html).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing HybridAuth social sign-on and sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our application has Twitter''s OAuth credentials, we can implement
    the social sign-on and sharing features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by adjusting our `accessRules()` method to only allow authenticated users
    to share content on Twitter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, implement the `actionHybrid()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll start this action by looking for some specific HybridAuth `$_GET` parameters,
    and calling `Hybrid_Endpoint::process()` if either of the two are detected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll then wrap the next section in a `try`/`catch` block to catch any errors
    that HybridAuth may throw if it encounters an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within our `try`/`catch` block, we''ll then load our configuration we set in
    our `params.php` file, and set the base URL for HybridAuth to use internally within
    our application. This base URL should correspond to the location from where HybridAuth
    will be called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll initialize HybridAuth with our configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll create a HybridAuth adapter for us to talk to Twitter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we should check whether the `adapter` is connected to Twitter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within this `if` block, we should load the share we want to share on Twitter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, share our content on Twitter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if you share something on our site, then click on the Twitter icon for
    that share; you''ll be redirected to Twitter to sign in, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing HybridAuth social sign-on and sharing](img/7734OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After signing in, you''ll need to authorize our application to update our Twitter
    profile, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing HybridAuth social sign-on and sharing](img/7734OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, our content will be shared on Twitter on our behalf, as shown in the next
    screenshot. Moreover, if we click on the Twitter button again within our application,
    our content will be automatically shared on Twitter for us, without us having
    to reauthenticate against Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing HybridAuth social sign-on and sharing](img/7734OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wow, we covered quite a bit in this chapter! We expanded upon our user authentication
    and management to include secure activation and password resets if a user forgets
    their password, and enabled our users to securely and safely change both their
    own e-mail address and password with proper verification and notifications. Moreover,
    we implemented all of these actions using `CFormModel`, which enabled us to cleanly
    isolate the logic for handling these actions in forms rather than in our controllers.
    Finally, we implemented an asynchronous `CListViews` and utilized HybridAuth to
    share on Twitter using our OAuth credentials.
  prefs: []
  type: TYPE_NORMAL
- en: The user components that we developed in this chapter can easily be used and
    adapted for almost any application that will require user authentication and management.
    In the next chapter, we'll be utilizing these components to build a full-scale
    content management system that will allow us to upload content and photos and
    also allow us to share this content with others. The CMS that we'll be building
    will also be SEO-optimized and will include dynamic content slugs and a sitemap
    feature that can be submitted to the search engines. Before proceeding to the
    next chapter, be sure to review the Yii Class Reference at [http://www.yiiframework.com/doc/api/](http://www.yiiframework.com/doc/api/)
    and review all the classes that we used in this chapter. Then, when you're ready,
    head over to the next chapter where you'll build a CMS!
  prefs: []
  type: TYPE_NORMAL
