- en: Chapter 5. Creating a Microblogging Platform
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our next project, we will be developing a scalable microblogging platform
    similar to Twitter. This platform will allow users to share content with others,
    mention other users in their share, and view a timeline of their shares. Additionally,
    users will be able to register, manage, and change certain account details such
    as their e-mail address and password. Finally, our platform will enable users
    to share content with other external social networks such as Twitter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, we''ll have a social network that will allow us
    to share content and manage our accounts, as shown in the following screenshot:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Microblogging Platform](img/7734OS_05_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: 'Our users will also have the ability to directly reply to and share individual
    posts that they make, as shown in the following screenshot:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Microblogging Platform](img/7734OS_05_02.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
- en: Prerequisites
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get started, there are a couple of things that we''ll need to set
    up and have working:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Since we'll be sending and receiving e-mails from our application, we're going
    to need a registered and active domain name. If you do not already have a working
    domain name, you can purchase one from a domain registrar such as [https://www.namecheap.com](https://www.namecheap.com),
    [www.name.com](http://www.name.com), or [www.gandi.net](http://www.gandi.net).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, you'll need to have a web server with a public-facing IP address. This
    will allow e-mails to be sent to our application. Many cloud **Virtual Private
    Server** (**VPS**) providers are available for use for low monthly or hourly prices.
    Such services include [https://www.digitalocean.com](https://www.digitalocean.com),
    [https://www.linode.com](https://www.linode.com), and [www.rackspace.com/cloud/servers](http://www.rackspace.com/cloud/servers).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to send e-mails in our application, we'll once again be utilizing a
    free SendGrid Developer Account, which can be set up at [https://www.sendgrid.com/developers](https://www.sendgrid.com/developers).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we'll once again be using the latest version of MySQL (at the
    time of writing this, it is MySQL 5.6). Make sure that your MySQL server is set
    up and running on your server.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this project, we'll once again be managing our dependencies through Composer,
    which you can download and install from [https://getcomposer.org/](https://getcomposer.org/).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you'll need a Twitter Developer account, which can be obtained from
    [https://dev.twitter.com/](https://dev.twitter.com/). This account will allow
    us to enable the sharing of our content to Twitter as the logged-in user via Twitter's
    OAuth API.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have acquired the listed items, create a subdomain on the domain name
    you are using and point it to your server. In this chapter, I'll be using `chapter5.example.com`
    to refer to this subdomain. After everything is set up and your server is responding
    to that domain name, we can get started.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Describing the project
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述项目
- en: 'Our microblogging platform can be broken down into two big components:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的微博平台可以分为两个主要组件：
- en: Users who will be following other users and creating, sharing, and liking content
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将关注其他用户并创建、分享和点赞内容的用户
- en: Text-based shares that will be created by the users
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户创建的基于文本的分享
- en: Users
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: The first component of our application is the set of users who will be performing
    all the tasks in our application. For this application, we're going to be largely
    reusing the user database and authentication system that we expanded upon in [Chapter
    4](ch04.html "Chapter 4. Developing an Issue-tracking Application"), *Developing
    an Issue-tracking Application*. In this chapter, we'll be expanding upon the `users`
    database table, and adding several new relations such as followers and likes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第一个组件是执行我们应用程序中所有任务的用户集。对于这个应用程序，我们将主要重用我们在[第4章](ch04.html "第4章。开发问题跟踪应用程序")中扩展的用户数据库和身份验证系统，即*开发问题跟踪应用程序*。在本章中，我们将扩展`users`数据库表，并添加几个新的关系，如粉丝和点赞。
- en: Followers
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 粉丝
- en: 'In this application, users will be able to follow and be followed by other
    users. This relationship will allow users to stay up-to-date with other users
    by showing content that other users have recently created. Moreover, it will allow
    them to know how many people are following them and see how much of an influence
    they have over their network. For this application, our `followers` table will
    just contain the primary keys of users who are either following or being followed
    by another user. Our database table will look as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，用户将能够关注其他用户并被其他用户关注。这种关系将使用户能够通过显示其他用户最近创建的内容来保持与其他用户的同步。此外，它将使用户知道有多少人关注他们，并了解他们对网络的影响程度。对于这个应用程序，我们的`followers`表将只包含那些正在关注或被其他用户关注的用户的键。我们的数据库表将如下所示：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Likes
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 点赞
- en: 'In this application, users will also be able to indicate that they like a particular
    share. Similar to our `followers` table, the `likes` table will only contain the
    primary keys of the `users` and the `shares` table. Our database table will look
    as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，用户还可以表示他们喜欢某个特定的分享。类似于我们的`followers`表，`likes`表将只包含`users`和`shares`表的键。我们的数据库表将如下所示：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Shares
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分享
- en: 'The second component of our application will be the shares that users create.
    For our purposes, we will define a share as a piece of text that can contain unique
    markers such as the `@` sign for mentioning other users, and the `#` character
    for tagging a share. Shares can also be in reply to another share, which will
    allow them to be viewed on the share''s view page. Finally, shares can be reshared
    users who wish to share another user''s share with their network. Our database
    table will look as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第二个组件将是用户创建的分享。为了我们的目的，我们将定义分享为可以包含独特标记的文本片段，例如用于提及其他用户的`@`符号，以及用于标记分享的`#`字符。分享也可以是对另一个分享的回复，这将允许它们在分享的查看页面上查看。最后，分享可以被重新分享，用户可以将其他用户的分享分享给他们的网络。我们的数据库表将如下所示：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Initializing the project
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化项目
- en: 'By now, you should be comfortable with creating projects from scratch. To provide
    us with a common starting ground, a skeleton project has been included with the
    project resources for this chapter. Included with this skeleton project are the
    necessary migrations, data files, controllers, and views that we need to get started.
    The login system that we''ll be using for authentication throughout this chapter
    is also included. Copy the skeleton project from the project resources folder
    to your web server and configure it so that it responds to `chapter5.example.com`
    as outlined at the beginning of the chapter, and then perform the following steps
    to make sure everything is set up:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，您应该已经熟悉了从头创建项目。为了提供一个共同的起点，本章的项目资源中包含了一个骨架项目。这个骨架项目包括我们开始所需的必要迁移、数据文件、控制器和视图。我们将在本章中使用该登录系统进行身份验证。将骨架项目从项目资源文件夹复制到您的Web服务器，并按照本章开头概述的配置，使其响应`chapter5.example.com`，然后执行以下步骤以确保一切设置正确：
- en: Adjust the permissions on the `assets` and `protected/runtime` folders so that
    they are writable by your web server.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整`assets`和`protected/runtime`文件夹的权限，以便您的Web服务器可以写入。
- en: 'Next, create the MySQL user and database table that our application will use.
    If you don''t want to alter the provided main configuration file, the following
    MySQL commands will create the database and user for you:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we''ll need to run the initial migrations and then import the sample
    data that is provided in the `protected/data` folder. This sample data will allow
    us to immediately log in to our application and start using it once the application
    is running. Navigate to the root of the project, and then run the following commands:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, we will need to update `params.php` located at `protected/config/` with
    our SendGrid information. Your username and password will correspond to your SendGrid
    username and password. Keeping in line with our example domain, set the `from`
    address to `socialii@chapter5.example.com`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we will need to install the necessary Composer dependencies:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At this point, you should be able to open `http://chapter5.example.com` in
    your browser and see the following page:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing the project](img/7734OS_05_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Making a better Yii bootstrap file
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One thing you may have noticed was that we didn''t have to declare where the
    Yii framework was located for our site to work. That''s because we included Yii
    framework as a dependency in our `composer.json` file, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There are several benefits to including Yii as a dependency in our project
    rather than hardcoding it in our bootstrapper, which are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Including it in our bootstrapper as a Composer dependency means that we don't
    have to bother installing Yii framework on our server before we push our code
    to it
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can now automate our deployment process, and be certain that the dependencies
    in our development environment match those of our production environment
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used for this project is now separate from other projects that might
    also use Yii framework
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, this separation allows us to upgrade Yii or use a different fork of
    Yii without having to worry about how we're going to deploy Yii framework to our
    server—Composer will simply take care of the installation for us
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ve also made a few improvements and changes to our Bootstrap file to make
    developing and debugging easier for us. Let''s take a look at the changes in our
    `index.php` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we include our configuration file:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we''re going to set `YII_DEBUG` and `YII_TRACE` to variables that are
    defined in our `main.php` file at `protected/config/`. This will allow us to toggle
    the debug mode and the trace level without having to alter the code in `index.php`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In our `main.php` file at `protected/config/`, we can toggle these variables
    by setting `params[debug]` and `params[trace]`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, we''re going to load our Composer dependencies. Depending on whether
    `YII_DEBUG` is set or not, load `yii.php` or `yiilite.php`. For most configurations,
    and when coupled with APC Cache or Zend OPcache, `yiilite.php` should improve
    the performance of your application:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn more about yiilite, take a look at the official Yii documentation
    at [http://www.yiiframework.com/doc/guide/1.1/en/topics.performance#using-x-9x](http://www.yiiframework.com/doc/guide/1.1/en/topics.performance#using-x-9x).
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''re going to automatically enable logging, and turn error reporting
    to its maximum value when we''re in the debug mode. This will allow us to easily
    view full stack traces when an error occurs and get detailed log messages about
    what''s going on in our application. This option will help with development and
    won''t be loaded when we are running in a production environment:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For the preceding step to work, we then need to define a logging method that
    we want to use. In our development environment, it makes sense to use `CWebLogRoute`
    so that we can see our log messages in our browser. To enable this route, we''ll
    add the following to the components section of our `main.php` file located at
    `protected/config/`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii provides several different logging methods that you can use in both production
    and development environments. To learn more about logging, take a look at the
    official Yii documentation at [http://www.yiiframework.com/doc/guide/1.1/en/topics.logging](http://www.yiiframework.com/doc/guide/1.1/en/topics.logging).
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we''re going to bootstrap our application:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Enabling users to manage their information
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, our users haven't been able to do much besides interacting
    with content. In this chapter, we'll be expanding upon the base User model so
    that they can register with our application, securely activate their accounts,
    reset their passwords if they forget them, and change their e-mail address.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading our UserIdentity class
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before implementing the previously mentioned functionality, we need to make
    sure that we can address our users appropriately without having to ask our database
    for some basic information about the currently logged-in user. To do this, we''re
    going to add some information to our `UserIdentity.php` file located at `protected/components/`
    as shown next in the highlighted sections of our `authenticate()` method. Additionally,
    we''re going to enhance this class so that if `YII_DEBUG` is enabled, we can get
    more information about what is going on if authentication fails:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Defining user relations
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we''ll want to make sure that our relations are set up so that we can
    tell which data is associated with our users. This includes shares, followers,
    and followees. Within our `protected/models/User.php` file, make sure the following
    is set to our `relations()` method:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We''re also going to add a new relational type to our `relations()` method
    so that we can quickly retrieve the number of shares, followers, and followees
    a user has. This relation type is called `STAT`, and behaves the same as a `HAS_MANY`
    relation, except that it performs a count at the database level and returns a
    number rather than returning an array of objects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By using the `STAT` relation, we can reduce the strain on our database when
    we want to know how many followers a user has. In a small database with a few
    users, a `HAS_MANY` relationship isn't very significant; however, when dealing
    with thousands of users, repeatedly running a `HAS_MANY` query will result in
    a large number of results to be returned, which can result in our application
    running out of memory and crashing.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`STAT`关系，当我们想知道一个用户有多少关注者时，可以减少对数据库的压力。在一个用户数量较少的小型数据库中，`HAS_MANY`关系并不十分显著；然而，当处理数千个用户时，反复执行`HAS_MANY`查询会导致返回大量结果，这可能导致我们的应用程序耗尽内存并崩溃。
- en: Determining whether a user is following another user
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确定一个用户是否关注另一个用户
- en: 'The last change we need to make to our model for our relations is to add a
    quick method that will allow us to determine whether the currently logged-in user
    is following another user. We''ll use this information later on to adjust what''s
    displayed in our views. Add the following method to your `User.php` file located
    at `protected/models/`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对模型中的关系进行的最后一个更改是添加一个快速方法，以便我们能够确定当前登录的用户是否关注另一个用户。我们将在稍后使用此信息来调整视图中的显示内容。将以下方法添加到位于`protected/models/`的`User.php`文件中：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Implementing a secure registration process
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现安全的注册过程
- en: One of the more difficult parts of creating a secure web application is ensuring
    that the users who register on our site are really the users they claim to be.
    Often, this is accomplished by sending an e-mail to the user with a unique single-use
    token. If the user is able to visit our site with that secure token, we can assume
    that they are real users, and that they have access to the e-mail address. By
    employing this method of validation, we can ensure that the users who register
    on our site are who they claim to be, and that they choose to engage with our
    application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 创建安全Web应用的一个更困难的部分是确保在我们网站上注册的用户确实是他们声称的用户。通常，这是通过向用户发送包含唯一一次性令牌的电子邮件来完成的。如果用户能够使用这个安全令牌访问我们的网站，我们可以假设他们是真实的用户，并且他们有权访问电子邮件地址。通过采用这种验证方法，我们可以确保在我们网站上注册的用户是他们所声称的用户，并且他们选择与我们应用程序互动。
- en: While we could handle the majority of this functionality directly within our
    controller and bloat our User model with unnecessary methods, our tool of choice
    for this task will be `CFormModel`. In this book, we've only utilized `CFormModel`
    for our `LoginForm` model, which we've been using for logging users in. Before
    moving forward, let's take a deeper look into what `CFormModel` is and explore
    how we can use it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以在控制器中直接处理大部分此功能，并使用户模型因不必要的函数而膨胀，但我们将选择`CFormModel`作为此任务的工具。在这本书中，我们只使用了`CFormModel`来处理`LoginForm`模型，这是我们用来登录用户的。在继续前进之前，让我们深入了解`CFormModel`是什么，并探讨我们如何使用它。
- en: '`CFormModel` is very similar to `CActiveRecord`, in that it extends `CModel`
    and inherits many of the methods that `CActiveRecord` has, such as `attributeLabels`,
    `attributes`, and `rules`. The primary difference between `CFormModel` and `CActiveRecord`
    is that `CFormModel` is used to collect information from an HTML form, and the
    data submitted to `CFormModel` is acted upon rather than stored and manipulated
    in a database. By taking advantage of the methods inherited from `CModel`, we
    can cleanly and easily use `CFormModel` to validate input and reduce the amount
    of code clutter in our controllers and models.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`CFormModel`与`CActiveRecord`非常相似，因为它扩展了`CModel`并继承了`CActiveRecord`的许多方法，如`attributeLabels`、`attributes`和`rules`。`CFormModel`与`CActiveRecord`的主要区别在于`CFormModel`用于从HTML表单收集信息，提交给`CFormModel`的数据是被处理的，而不是存储和操纵在数据库中。通过利用从`CModel`继承的方法，我们可以干净且容易地使用`CFormModel`来验证输入，并减少控制器和模型中的代码杂乱。'
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about `CFormModel`, check out the official Yii documentation at
    [http://www.yiiframework.com/doc/api/1.1/CFormModel](http://www.yiiframework.com/doc/api/1.1/CFormModel).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`CFormModel`的信息，请查看官方Yii文档[http://www.yiiframework.com/doc/api/1.1/CFormModel](http://www.yiiframework.com/doc/api/1.1/CFormModel)。
- en: 'To get started, create a new file in `protected/models/RegistrationForm.php`
    and add the following to it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，在`protected/models/RegistrationForm.php`中创建一个新文件，并将其添加以下内容：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next steps are as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步如下：
- en: 'The first item we''ll be placing in this class is our attributes. These model
    attributes are publicly exposed, and can be set from our controllers:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在类中放置的第一个项目是我们的属性。这些模型属性是公开的，可以从我们的控制器中设置：
- en: '[PRE19]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we''ll define our attribute labels for these attributes:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we''ll want to set up our validation rules. For new users, we want to
    verify that all attributes are set, the e-mail address is a valid one, the password
    is at least `8` characters long, and the username the user''s trying to register
    with is not already taken:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Since Yii doesn''t provide a native validator for usernames, we will then need
    to define our own `validateUsername()` method, which will do a simple existence
    check against our database:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We''ll also want to define a validator to ensure that our e-mail address is
    not already taken:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice that when validation fails, we''re not only returning false but also
    adding an error to our model. We''re doing this for three reasons: to enhance
    the user experience and ensure that the user knows what went wrong, to ensure
    that the `validate()` method of `CModel` fails when an error is thrown (it will
    return true unless `$this->addError()` is called), and to ensure that we can run
    these validators independently of the form.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Out of preference, the last method we''ll be creating is a `save()` method,
    which will perform the validation, send a verification e-mail to the user, and
    insert the new record into our database. To achieve this, start by creating a
    new method called `save()`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, within the method, first perform the validation:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, create a new `User` object:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, attempt to save the user and send that user an e-mail address with the
    activation details:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we''ll want to update our User models so that the activation key is set
    when the user is first created. To generate the activation key, we''ll be using
    a library that was included in our `composer.json` file that securely generates
    strings:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we can add a register action to our `UserController.php` file located
    at `protected/controllers/` that will allow the user to register with our site.
    Since majority of the work has already been done in our form, all we have to do
    is collect the data from the `$_POST` request, apply it to the model, and call
    the `save()` method on the model. To provide a better user experience, we can
    also attempt to automatically log the user in using their new credentials:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, from the project resources folder, copy the following view files into
    your project: `protected/views/user/register.php`, `protected/views/email/activate.php`,
    and `protected/views/site/index.php`. Now, either from the `site/index` or `user/register`
    route, you can register a new account in your site.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, create a new method in your `UserController.php` file located at `protected/controllers/`
    called `actionActivate()` that will actually activate our user. To do so, we''re
    simply going to verify that the ID parameter sent to us in the route matches with
    what we have on file for the user:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can also reuse the form we just created on our home page to allow users
    to log in or register a new account from there. Since we''ve already copied the
    view over, we simply need to adjust the `SiteController` `actionIndex()` method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Handling forgotten passwords
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously shown, using `CFormModel` to handle input from an HTML form makes
    it very easy to validate submitted information and act upon it while keeping our
    models and controllers very clear. We can once again use `CFormModel` to handle
    forgotten password requests from a user.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle forgotten passwords, we''re going to request that the user provides
    us with the e-mail address they used to register their account. Next, we''ll verify
    that we have an e-mail address on file, and then send the user an e-mail with
    a single use token that will allow them to securely reset their password. To start,
    create a new file called `ForgotForm.php` in `protected/models` and add the following
    to it:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The next steps are as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by declaring the public attributes of our form:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We''re also going to declare a private property for our User model that we''ll
    be reusing throughout this model:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, we''ll declare our validation rules and custom validator:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, we will declare our `save()` method that will send the user the e-mail
    and indicate that they have asked for their password to be reset:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, create an action in `protected/controllers/UserController.php` to handle
    the form submission:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Finally, copy `protected/views/user/forgot.php`, `protected/views/user/forgot_success.php`
    and `protected/views/email/forgot.php` from the project resources folder into
    your application.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resetting a forgotten password
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the user has the single-use token we sent them, we can then allow the
    user to securely change their password to whatever they want. Start by creating
    a new file in `protected/models` called `PasswordResetform.php` with the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The next steps are as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by declaring the public attributes for this form:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, add the validation rules. The user''s new password should have the same
    requirements as when the user registered. Since we''re requesting the password
    twice, we''ll want to compare the two passwords using the compare validator. This
    validator validates the first attribute against the `attribute_repeat` attribute:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, add the `save()` method to reset the user''s password:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, create our controller action:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Finally, copy `protected/views/user/resetpassword.php` and `protected/views/user/resetpassword_success.php`
    from the project resources folder into your application.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling users to manage their details
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, we can now log in, register an account, and reset our passwords
    if we forgot them. Now, let''s work on allowing users to manage their own details.
    This includes allowing them to change their password, e-mail address, and the
    other pieces of information that we collect during the registration process. The
    steps are as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by once again creating a new `CFormModel` in `protected/models`
    called `ProfileForm.php`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先在 `protected/models` 中再次创建一个新的 `CFormModel`，名为 `ProfileForm.php`：
- en: '[PRE43]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, we''ll add our attributes and labels:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将添加我们的属性和标签：
- en: '[PRE44]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We''ll then add our basic validation rules:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将添加我们的基本验证规则：
- en: '[PRE45]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Before allowing the user to change any of their information (including their
    password and e-mail address), we''re going to require them to enter their current
    password. This will validate that they have control over the account:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在允许用户更改任何信息（包括他们的密码和电子邮件地址）之前，我们将要求他们输入他们的当前密码。这将验证他们是否控制着账户：
- en: '[PRE46]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We''ll then add our `save()` method that will update the user''s information:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将添加我们的 `save()` 方法，该方法将更新用户的信息：
- en: '[PRE47]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the `save()` method, we declared two new methods: `sendPasswordChangeNotification()`
    and `sendEmailChangeNotification()`. These two methods will send e-mails to the
    user when the event occurs:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `save()` 方法中，我们声明了两个新方法：`sendPasswordChangeNotification()` 和 `sendEmailChangeNotification()`。这两个方法将在事件发生时向用户发送电子邮件：
- en: '[PRE48]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The second method, `sendEmailChangeNotification()` sends an e-mail to the user
    when the user''s e-mail address changes. This allows us to verify their new e-mail
    address before we start using it in our application:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二种方法，`sendEmailChangeNotification()` 当用户的电子邮件地址发生变化时向用户发送电子邮件。这允许我们在开始在我们的应用程序中使用它之前验证他们的新电子邮件地址：
- en: '[PRE49]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Then, within our `UserController`, we''ll define our `actionIndex()` method
    that will collect this information:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在我们的 `UserController` 中，我们将定义我们的 `actionIndex()` 方法，该方法将收集这些信息：
- en: '[PRE50]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Finally, we need to copy `protected/views/user/index.php`, `protected/view/email/passwordchange.php`
    and `protected/views/email/verify.php` from our project resources folder into
    our project.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要将 `protected/views/user/index.php`、`protected/view/email/passwordchange.php`
    和 `protected/views/email/verify.php` 从我们的项目资源文件夹复制到我们的项目中。
- en: Verifying a new e-mail address
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证新的电子邮件地址
- en: Now, our users can change their own information without having to go through
    us. Before we close `UserController`, there are a couple of more methods that
    we need to implement.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的用户可以更改自己的信息，而无需通过我们。在我们关闭 `UserController` 之前，还有一些其他方法需要实现。
- en: 'One secure way of changing a user''s e-mail address is to store the new e-mail
    address in a temporary table or column in our database and then send to that e-mail
    address a verification e-mail (this is what we implemented in our `ProfileForm`
    class). This allows us to indicate that we''re aware that the user wants to change
    their password, but we require them to prove that they have access to the new
    e-mail address. The e-mail that we sent them contains a secure activation token
    and a link to the `actionVerify()` method, which will verify that the token belongs
    to the user, and then move the new e-mail address to the main e-mail address field
    in our database. We can implement the `actionVerify()` method as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 更改用户电子邮件地址的一种安全方式是将新电子邮件地址存储在我们的数据库中的一个临时表或列中，然后向该电子邮件地址发送一个验证电子邮件（这是我们已经在 `ProfileForm`
    类中实现的）。这允许我们表明我们知道用户想要更改密码，但我们要求他们证明他们可以访问新的电子邮件地址。我们发送给他们的电子邮件包含一个安全的激活令牌和一个链接到
    `actionVerify()` 方法，该方法将验证令牌是否属于用户，然后将新的电子邮件地址移动到我们数据库中的主要电子邮件地址字段。我们可以按照以下方式实现
    `actionVerify()` 方法：
- en: '[PRE51]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The last actions we''ll implement for this controller will allow a user to
    follow and unfollow another user. We''ll use these actions in our views later
    in the chapter. For now, implement the actions as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这个控制器实现的最后操作将允许用户关注和取消关注另一个用户。我们将在本章后面的视图中使用这些操作。现在，按照以下方式实现这些操作：
- en: '[PRE52]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Before closing this controller, verify that the `accessRules()` method is set
    up correctly:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭此控制器之前，请确保 `accessRules()` 方法设置正确：
- en: '[PRE53]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Viewing a timeline of shares
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看分享的时间线
- en: 'The easiest way to display new content is to simply list it so that the newest
    items are shown first. On our timeline page, we want to provide the user with
    the ability to share something, view information about the user they are viewing
    (such as the number of shares, followers, and followees), and view things that
    the user has recently shared. To do this, we''re going to take advantage of `CListView`
    loaded asynchronously from our main timeline view. This will allow us to reuse
    this view later on by simply making a `GET` request to an endpoint that we''ll
    create later. In our `TimelineController.php` file located at `protected/controllers/`,
    implement the `actionIndex()` method:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: All that we're doing in this action is retrieving the user ID (in this case,
    the username of the user) from the route and then passing some information down
    to our view. From the project resources folder, copy the `index.php` file located
    at `protected/views/timeline/` into your project. Let's take a look at some of
    the more interesting parts of this file.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to notice in this file is that we're simply using `CActiveForm`
    to display the new share container. Moreover, at the bottom of this file, we've
    implemented some JavaScript to do some rudimentary form validation checking, to
    clear the text field upon asynchronous submission, to adjust the number of shares
    we have, and finally, to prepend the new share to the top of our shares list.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing to notice is that we''ve implemented conditional follow and
    unfollow button links to allow our users to simply click on a link to follow or
    unfollow a particular user:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The last thing to notice in this file is our use of the count relations we
    set up earlier in our User model:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Finally, we''re loading our shares for this user by registering an asynchronous
    callback to fetch the appropriate shares, regardless of which user we are viewing
    the share for:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Retrieving shares
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s implement our action that will display our shares. This action
    will have slightly different behaviors depending on whether we''re viewing our
    timeline or a timeline of another user. Within our `ShareController.php` file
    located at `protected/controllers/`, implement `actionGetShares`, as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The next steps are as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this is an asynchronous callback, we don''t want to render anything from
    our layout:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, we''re going to either throw an error if a user wasn''t provided and
    we''re not logged in, or set the user to ourselves if we are logged in and an
    ID was given to us:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then we''re going to implement `CListView`, which will retrieve data from our
    `GET` parameters:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'When viewing another user''s timeline, we only care about the shares that they
    have shared with the world. However, when we''re viewing our timeline, we want
    to view both our shares and the shares of the user we are following. We can implement
    the controller portion of this as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Then, we''ll need to implement our `getshares.php` view file at `protected/views/shares/`
    as `CListView`. Notice that we''re passing down `$myFollowers` as a custom parameter
    to our Share model''s `search()` method:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then, within our model, we''re going to adjust our `search()` method so that
    it conditionally loads the appropriate data:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Finally, we can implement our individual share view by copying `protected/views/share/share.php`
    from our project resources folder into our project.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within this file, we''re going to implement some custom logic so that hashtags
    (#) and @ mentions are displayed as links. This will allow us to store unformatted
    text in our database, which in turns means we could adjust the way our views work
    without having to modify our data. We''re also going to render our text in Markdown
    to allow our users to add links or other custom formatting, but prevent them from
    attempting XSS injection:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Sharing new content
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, if we had shares in our database, we''d be able to see them.
    So let''s work on sharing new content! From within our controller, the action
    to handle sharing is simply going to be loading a new Share model and populating
    it. Have a look at the following code:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Though, the real power behind sharing content happens in the `beforeSave()`
    method of our Share model. From here, we handle all the mentioning that may occur
    within our model, and send an e-mail to everyone who was mentioning in the share.
    The code is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Resharing
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since everything in our model is already implemented, we can easily implement
    resharing now as a new controller action within `protected/controllers/ShareController.php`.
    Resharing allows a user to share something another user shared, while still giving
    that user credit for the original share. In our controller, what we're going to
    do is load the share we want to reshare with our network, change the author to
    us, and then indicate that this is a reshare of another share.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a `loadModel()` utility method:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Then, we''ll implement the resharing ability as described in the *Describing
    the project* section:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Liking and unliking shares
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we'll implement the actions and methods necessary for a user to like and
    unlike a given share. The only restriction on likes should be that a user can't
    like a share more than once.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'We can implement the action for liking in `ShareController` as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Then, within our Share model, we''ll implement the method necessary to check
    whether an action has already been liked by a user or not:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Then, we will implement the `like()` method:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Finally, we will implement the `unlike()` method:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Viewing shares
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, we can do everything with a share except dive into one and view
    all the replies to a share. Let''s implement the `actionView()` method so that
    our users can view a particular share. In `ShareController`, we''ll implement
    this as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Then, we will copy `protected/views/share/view.php` from our project resources
    folder into the project. Within our view, we can now share something and click
    on the eye icon on the share in order to view it in more detail.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Searching for shares
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most important parts of any application is the ability to search
    for and discover new content. For this application, we''ll be implementing a search
    method that will allow users to search for content and users. To do this, we''ll
    check whether the query string in our search method contains the `@` character.
    If it does, we''ll perform a second search for that user and display information
    about that user in our view. We''ll implement that method as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by implementing `actionSearch()` as follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'We''ll then retrieve the query string from our `$_GET` parameters and define
    the scope for our models:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Then, as long as there is a query to run against, we''ll create two `CDbCriteria`
    objects; one for users and the other for shares:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Within this `if` bracket, we''ll first check whether there were any mentions
    in our query string, by using `preg_match_all`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'If there are any results, we''ll build a query to find all the users who were
    mentioned in the query, and then, we''ll remove that criteria from our query string:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Then, we''ll perform a `LIKE` query search against the `text` field of our
    Share model:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Then, we''ll render our view:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Finally, we'll need to copy our view file from `protected/views/timeline/search.php`
    into our project folder.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sharing on Twitter with HybridAuth
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our application doesn't have a large following yet, it's important to
    enable our users to share content that they generate on our site to other places.
    A great way to spread the word about a particular site or service is to take advantage
    of Twitter. One way to integrate with Twitter is by utilizing their OAuth API.
    This will allow us to authenticate as a given user and post content on their behalf,
    at just a click of a button.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we'll be taking advantage of **HybridAuth**. HybridAuth is an open
    source library that allows developers to integrate with multiple third-party social
    networks, and enables developers to make their application more social. For our
    purposes, we're going to utilize HybridAuth to impersonate a given user (with
    their permission, of course) and submit content on their behalf upon their request.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn more about HybridAuth, check out the official documentation
    at [http://hybridauth.sourceforge.net/](http://hybridauth.sourceforge.net/).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Twitter application
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start using HybridAuth though, we first need to set up a Twitter
    application and obtain our OAuth credentials. These credentials will allow our
    application to communicate securely with Twitter, and enable us to sign in and
    post as our users. The steps are as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is OAuth? OAuth is an open standard for authentication, and provides client
    applications such as the one we are building in this application, secure delegated
    access to server resources on behalf of that owner, in this case, Twitter. By
    using OAuth, we can communicate securely with a server without having to transmit
    our user's credentials to our application. In our application, we'll be using
    HybridAuth to take care of most of the leg work when dealing with Twitter's OAuth
    endpoint. Check out [http://oauth.net/about/](http://oauth.net/about/) for more
    information about what OAuth is and how it works.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: To begin, open up your web browser, navigate to [https://apps.twitter.com/](https://apps.twitter.com/),
    and sign in using your Twitter credentials.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once authenticated, click on the **Create New App** button in the top-right
    corner of the page body.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On this page, fill out the fields as shown in the next screenshot. Adjust the
    website URL and **Callback URL** to match what you are using in your application.
    Note that the endpoint you provide to Twitter must be publicly accessible.![Setting
    up a Twitter application](img/7734OS_05_04.jpg)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, click on the **Settings** tab, check the **Allow this application
    to be used to sign into Twitter** checkbox, and click on the **Update Settings**
    button at the bottom of the page.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Permissions** tab and change the access level to **Read
    and Write** and save the form.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring HybridAuth
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With our Twitter application configured, we now need to install and configure
    HybridAuth. Fortunately, HybridAuth is available as a Composer dependency, so
    we can include its source code into our project by adding the following to the
    require section of our `composer.json` file:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The next steps are as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `composer update` command from your command line:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'You should see something similar to the following output:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Next, we''ll configure HybridAuth so that it knows what information to use.
    Open up `protected/config/params.php`, and add the following after our SendGrid
    information:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Then, retrieve your Twitter API key and Twitter Secret key from the **API Keys**
    tab of our Twitter application, as shown in the next screenshot, and replace `<twitter_key>`
    and `<twitter_secret>` with them in your configuration file:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Your Twitter OAuth Key and Secret are confidential pieces of information and
    should be kept out of your DCVS provider. If you ever suspect that your OAuth
    credentials have been compromised, you should immediately regenerate your API
    keys. This will prevent potential attacks from gaining the ability to sign on
    and tweet as your users.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Configuring HybridAuth](img/7734OS_05_05.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HybridAuth can be configured with several different options. Be sure to look
    at a few of the examples if you're interested in implementing social sharing for
    other providers at [http://hybridauth.sourceforge.net/userguide/Configuration.html](http://hybridauth.sourceforge.net/userguide/Configuration.html).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Implementing HybridAuth social sign-on and sharing
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our application has Twitter''s OAuth credentials, we can implement
    the social sign-on and sharing features:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by adjusting our `accessRules()` method to only allow authenticated users
    to share content on Twitter:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Then, implement the `actionHybrid()` method:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'We''ll start this action by looking for some specific HybridAuth `$_GET` parameters,
    and calling `Hybrid_Endpoint::process()` if either of the two are detected:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'We''ll then wrap the next section in a `try`/`catch` block to catch any errors
    that HybridAuth may throw if it encounters an error:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Within our `try`/`catch` block, we''ll then load our configuration we set in
    our `params.php` file, and set the base URL for HybridAuth to use internally within
    our application. This base URL should correspond to the location from where HybridAuth
    will be called:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'We''ll initialize HybridAuth with our configuration:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Then, we''ll create a HybridAuth adapter for us to talk to Twitter:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Next, we should check whether the `adapter` is connected to Twitter:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Within this `if` block, we should load the share we want to share on Twitter:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Then, share our content on Twitter:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Now, if you share something on our site, then click on the Twitter icon for
    that share; you''ll be redirected to Twitter to sign in, as shown in the following
    screenshot:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing HybridAuth social sign-on and sharing](img/7734OS_05_06.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
- en: 'After signing in, you''ll need to authorize our application to update our Twitter
    profile, as shown in the following screenshot:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing HybridAuth social sign-on and sharing](img/7734OS_05_07.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
- en: Then, our content will be shared on Twitter on our behalf, as shown in the next
    screenshot. Moreover, if we click on the Twitter button again within our application,
    our content will be automatically shared on Twitter for us, without us having
    to reauthenticate against Twitter.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing HybridAuth social sign-on and sharing](img/7734OS_05_08.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wow, we covered quite a bit in this chapter! We expanded upon our user authentication
    and management to include secure activation and password resets if a user forgets
    their password, and enabled our users to securely and safely change both their
    own e-mail address and password with proper verification and notifications. Moreover,
    we implemented all of these actions using `CFormModel`, which enabled us to cleanly
    isolate the logic for handling these actions in forms rather than in our controllers.
    Finally, we implemented an asynchronous `CListViews` and utilized HybridAuth to
    share on Twitter using our OAuth credentials.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: The user components that we developed in this chapter can easily be used and
    adapted for almost any application that will require user authentication and management.
    In the next chapter, we'll be utilizing these components to build a full-scale
    content management system that will allow us to upload content and photos and
    also allow us to share this content with others. The CMS that we'll be building
    will also be SEO-optimized and will include dynamic content slugs and a sitemap
    feature that can be submitted to the search engines. Before proceeding to the
    next chapter, be sure to review the Yii Class Reference at [http://www.yiiframework.com/doc/api/](http://www.yiiframework.com/doc/api/)
    and review all the classes that we used in this chapter. Then, when you're ready,
    head over to the next chapter where you'll build a CMS!
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
