["```php\nID INTEGER PRIMARY KEY\nfollower_id INTEGER\nfollowee_id INTEGER\ncreated INTEGER\nupdated INTEGER\n```", "```php\nID INTEGER PRIMARY KEY\nuser_id INTEGER\nshare_id INTEGER\ncreated INTEGER\nupdated INTEGER\n```", "```php\nID INTEGER PRIMARY KEY\ntext STRING\nauthor_id INTEGER\nreshare_id INTEGER\nreply_id INTEGER\ncreated INTEGER\nupdated INTEGER\n```", "```php\n    CREATE USER 'ch5_socialii'@'localhost' IDENTIFIED BY ''ch5_socialii'';\n    CREATE DATABASE IF NOT EXISTS  `'ch5_socialii'` ;\n    GRANT ALL PRIVILEGES ON  `'ch5\\_socialii'` . * TO  ''ch5_socialii''@'localhost';\n    FLUSH PRIVILEGES;\n    ```", "```php\n    php protected/yiic.php migrate up --interactive=0\n    mysql –u ch5_socialii –pch5_socialii ch5_socialii < protected/data/combined.sql\n\n    ```", "```php\n    composer install\n\n    ```", "```php\n\"yiisoft/yii\": \"1.1.14\"\n```", "```php\n    $config=require dirname(__FILE__).'/protected/config/main.php';\n    defined('DS') or define('DS', DIRECTORY_SEPARATOR);\n    ```", "```php\n    defined('YII_DEBUG') or define('YII_DEBUG',isset($config['params']['debug']) ? $config['params']['debug'] : false);\n    defined('YII_TRACE_LEVEL') or define('YII_TRACE_LEVEL',isset($config['params']['trace']) ? $config['params']['trace'] : 0);\n    ```", "```php\n    'params' => array(\n       'includes' => require __DIR__ . '/params.php',\n       'debug' => true,\n       'trace' => 3\n    )\n    ```", "```php\n    require_once(__DIR__ . '/vendor/autoload.php');\n    require(__DIR__.DS.'vendor'.DS.'yiisoft'.DS.'yii'.DS.'framework'.DS.(YII_DEBUG ? 'yii.php' : 'yiilite.php'));\n    ```", "```php\n    if (YII_DEBUG && YII_TRACE_LEVEL == 3)\n    {\n       error_reporting(-1);\n       ini_set('display_errors', 'true');\n\n       // Enable WebLogRouteLogging\n       $config['preload'][] = 'log';\n       $config['components']['log']['routes'][0]['enabled'] = true;\n    }\n    ```", "```php\n    'log' => array(\n       'class' => 'CLogRouter',\n          'routes' => array(\n          array(\n             'class' => 'CWebLogRoute',\n             'levels' => 'error, warning, trace, info',\n             'enabled' => false\n          )\n       )\n    )\n    ```", "```php\n    Yii::createWebApplication($config)->run();\n    ```", "```php\npublic function authenticate()\n{\n   $record = User::model()->findByAttributes(array('email'=>$this->username));\n\n   if ($record == NULL)\n      $this->errorCode = YII_DEBUG ? this->errorCode=self::ERROR_USERNAME_INVALID : self::ERROR_UNKNOWN_IDENTITY;\n   else if (password_verify($this->password, $record->password))\n   {\n      $this->errorCode = self::ERROR_NONE;\n      $this->_id        = $record->id;\n      $this->setState('email', $record->email);\n      $this->setState('role', $record->role_id);\n      $this->setState('username', $record->username);\n      $this->setState('name', $record->name);\n   }\n   else\n      $this->errorCode = YII_DEBUG ? self::ERROR_PASSWORD_INVALID : self::ERROR_UNKNOWN_IDENTITY;\n\n   return !$this->errorCode;\n}\n```", "```php\nreturn array(\n   'followees' => array(self::HAS_MANY, 'Follower', 'followee_id'),\n   'followers' => array(self::HAS_MANY, 'Follower', 'follower_id'),\n   'shares' => array(self::HAS_MANY, 'Share', 'author_id'),\n   'role' => array(self::BELONGS_TO, 'Role', 'role_id'),\n);\n```", "```php\n'followeesCount' => array(self::STAT, 'Follower', 'followee_id'),\n'followersCount' => array(self::STAT, 'Follower', 'follower_id'),\n'sharesCount' => array(self::STAT, 'Share', 'author_id')\n```", "```php\npublic static function isFollowing($id=NULL)\n{\n   if ($id == NULL || Yii::app()->user->isGuest)\n      return false;\n\n   $following = Follower::model()->findByAttributes(array('follower_id' => Yii::app()->user->id, 'followee_id' => $id));\n\n   return $following != NULL;\n}\n```", "```php\n<?php class RegistrationForm extends CFormModel {}\n```", "```php\n    public $email;\n    public $name;\n    public $password;\n    public $username;\n    ```", "```php\n    public function attributeLabels()\n    {\n       return array(\n          'email' => 'Your Email Address',\n          'name' => 'Your Full Name',\n          'password' => 'Your Password',\n          'username' => 'Your Username'\n       );\n    }\n    ```", "```php\n    public function rules()\n    {\n       return array(\n          array('email, username, name, password', 'required'),\n          array('password', 'length', 'min'=>8),\n          array('email', 'email'),\n          array('username', 'validateUsername') ,\n          array('email', 'verifyEmailIsUnique')\n       );\n    }\n    ```", "```php\n    public function validateUsername($attributes, $params)\n    {\n       $user = User::model()->findByAttributes(array('username' => $this->username));\n\n       if ($user === NULL)\n          return true;\n       else\n       {\n          $this->addError('username', 'That username has already been registered');\n          return false;\n       }\n    }\n    ```", "```php\n    public function verifyEmailIsUnique($attributes, $params)\n    {\n       $user = User::model()->findByAttributes(array('email' => $this->email));\n\n       if ($user === NULL)\n          return true;\n       else\n       {\n          $this->addError('email', 'That email address has already been registered');\n          return false;\n       }\n    }\n    ```", "```php\n    public function save()\n    ```", "```php\n    if (!$this->validate())\n    return false;\n    ```", "```php\n    $user = new User;\n    $user->attributes = array(\n       'email' => $this->email,\n       'name' => $this->name,\n       'password' => $this->password,\n       'username' => str_replace(' ', '',$this->username),\n       'activated' => 0\n    );\n    ```", "```php\n    if ($user->save())\n    {\n       // Send an email to the user\n       $sendgrid = new SendGrid(Yii::app()->params['includes']['sendgrid']['username'], Yii::app()->params['includes']['sendgrid']['password']);\n       $email    = new SendGrid\\Email();\n\n       $email->setFrom(Yii::app()->params['includes']['sendgrid']['from'])\n          ->addTo($user->email)\n          ->setSubject(\"Activate Your Socialii Account\")\n          ->setText('Activate Your Socialii Account')\n          ->setHtml(Yii::app()->controller->renderPartial('//email/activate', array('user' => $user), true));\n\n       // Send the email\n       $sendgrid->send($email);\n\n       // Return true if we get to this point\n       return true;\n    }\n    ```", "```php\n    public function beforeSave()\n    {\n       if ($this->isNewRecord)\n       {\n          $this->generateActivationKey();\n          $this->role_id = 1;\n       }\n\n       return parent::beforeSave();\n    }\n\n    public function generateActivationKey()\n    {\n       $factory = new CryptLib\\Random\\Factory;\n       $this->activation_key = $factory->getHighStrengthGenerator()->generateString(16);\n       return $this->activation_key;\n    }\n    ```", "```php\n    public function actionRegister()\n    {\n       // Authenticated users shouldn't be able to register\n       if (!Yii::app()->user->isGuest)\n       $this->redirect($this->createUrl('timeline/index'));\n\n       $form = new RegistrationForm;\n       if (isset($_POST['RegistrationForm']))\n       {\n          $form->attributes = $_POST['RegistrationForm'];\n\n          // Attempt to save the user's information\n          if ($form->save())\n          {\n             // Try to automagically log the user in, if we fail though just redirect them to the login page\n             $model = new LoginForm;\n             $model->attributes = array(\n                'username' => $form->email,\n                'password' => $form->password\n             );\n\n             if ($model->login())\n             {\n                // Set a flash message associated to the new Yii::app()->user\n                Yii::app()->user->setFlash('sucess', 'You successfully registred an account!');\n\n                // Then redirect to their timeline\n                $this->redirect($this->createUrl('timeline/index'));\n             }\n             else\n                $this->redirect($this->createUrl('site/login'));\n          }\n       }\n\n       $this->render('register', array('user' => $form));\n    }\n    ```", "```php\n    public function actionActivate($id=NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(400, 'Activation ID is missing');\n\n       $user = User::model()->findByAttributes(array('activation_key' => $id));\n\n       if ($user == NULL)\n          throw new CHttpException(400, 'The activation ID you supplied is invalid');\n\n       // Don't allow activations of users who have a password reset request OR have a change email request in\n       // Email Change Requests and Password Reset Requests require an activated account\n       if ($user->activated == -1 || $user->activated == -2)\n          throw new CHttpException(400, 'There was an error fulfilling your request');\n\n       $user->activated = 1;\n       $user->password = NULL;           // Don't reset the password\n       $user->activation_key = NULL;     // Prevent reuse of their activation key\n\n       if ($user->save())\n       {\n          $this->render('activate');\n          Yii::app()->end();\n       }\n\n       throw new CHttpException(500, 'An error occurring activating your account. Please try again later');\n    }\n    ```", "```php\npublic function actionIndex()\n{\n   if (!Yii::app()->user->isGuest)\n      $this->redirect($this->createUrl('timeline/index'));\n\n   $this->layout = 'main';\n   $this->render('index', array('loginform' => new LoginForm, 'user' => new RegistrationForm));\n}\n```", "```php\n<?php class ForgotForm extends CFormModel {}\n```", "```php\n    public $email;\n    public function attributeLabels()\n    {\n       return array(\n          'email' => 'Your Email Address'\n       );\n    }\n    ```", "```php\n    private $_user;\n    ```", "```php\n    public function rules()\n    {\n       return array(\n          array('email', 'required'),\n          array('email', 'email'),\n          array('email', 'checkUser'),\n       );\n    }\n\n    public function checkUser($attribute,$params)\n    {\n       $this->_user = User::model()->findByAttributes(array('email' => $this->email));\n\n       if ($this->_user == NULL)\n       {\n          $this->addError('email', 'There is no user in our system with that email address.');\n          return false;\n       }\n\n       return true;\n    }\n    ```", "```php\n    public function save()\n    {\n       if (!$this->validate())\n          return false;\n\n       // Set the activation details\n       $this->_user->generateActivationKey();\n       $this->_user->activated = -1;\n\n       if ($this->_user->save())\n       {\n          $sendgrid = new SendGrid(Yii::app()->params['includes']['sendgrid']['username'], Yii::app()->params['includes']['sendgrid']['password']);\n          $email    = new SendGrid\\Email();\n\n          $email->setFrom(Yii::app()->params['includes']['sendgrid']['from'])\n             ->addTo($this->_user->email)\n             ->setSubject('Reset Your Socialii Password')\n             ->setText('Reset Your Socialii Password')\n             ->setHtml(Yii::app()->controller->renderPartial('//email/forgot', array('user' => $this->_user), true));\n\n          // Send the email\n          $sendgrid->send($email);\n\n          return true;\n       }\n       else\n          $this->addError('email', 'Unable to send reset link. This is likely a temporary error. Please try again in a few minutes.');\n\n       return false;\n    }\n    ```", "```php\n    public function actionForgot()\n    {\n       $form = new ForgotForm;\n\n       if (isset($_POST['ForgotForm']))\n       {\n          $form->attributes = $_POST['ForgotForm'];\n\n          if ($form->save())\n          {\n             $this->render('forgot_success');\n             Yii::app()->end();\n          }\n       }\n\n       $this->render('forgot', array('forgotform' => $form));\n    }\n    ```", "```php\n<?php class PasswordResetForm extends CFormModel {}\n```", "```php\n    public $password;\n    public $pasword_repeat;\n    public $user;\n    ```", "```php\n    public function rules()\n    {\n       return array(\n          array('password', 'length', 'min' => 8),\n          array('password, password_repeat, user', 'required'),\n          array('password', 'compare', 'compareAttribute' => 'password_repeat'),\n       );\n    }\n    ```", "```php\n    public function save()\n    {\n       if (!$this->validate())\n          return false;\n\n       $this->user->password = $this->password;\n\n       // Verify that this activation key can't be used again\n       $this->user->activated = 1;\n       $this->user->activation_key = NULL;\n\n       if ($this->user->save())\n          return true;\n\n       return false;\n    }\n    ```", "```php\n    public function actionResetPassword($id = NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(400, 'Missing Password Reset ID');\n\n       $user = User::model()->findByAttributes(array('activation_key' => $id));\n\n       if ($user == NULL)\n          throw new CHttpException(400, 'The password reset id you supplied is invalid');\n\n       $form = new PasswordResetForm;\n\n       if (isset($_POST['PasswordResetForm']))\n       {\n          $form->attributes = array(\n             'user' => $user,\n             'password' => $_POST['PasswordResetForm']['password'],\n             'password_repeat' => $_POST['PasswordResetForm']['password_repeat']\n          );\n\n          if ($form->save())\n          {\n             $this->render('resetpasswordsuccess');\n             Yii::app()->end();\n          }\n       }\n\n       $this->render('resetpassword', array(\n          'passwordresetform' => $form,\n          'id' => $id\n       ));\n    }\n    ```", "```php\n    <?php class ProfileForm extends CFormModel {}\n    ```", "```php\n    public $email;\n    public $password;\n    public $name;\n    public $newpassword = NULL;\n    public $newpassword_repeat = NULL;\n    private $_user;\n    public function attributeLabels()\n     {\n        return array(\n           'email'               => 'Your New Email Address',\n           'password'            => 'Your Current Password',\n           'name'                => 'Your Name',\n           'newpassword'         => 'Your NEW password',\n           'newpassword_repeat'  => 'Your NEW password (again)'\n        );\n     }\n    ```", "```php\n    public function rules()\n    {\n       return array(\n          array('email, name, password', 'required'),\n          array('newpassword', 'length', 'min' => 8),\n          array('email', 'email'),\n          array('password', 'verifyPassword'),\n          array('newpassword', 'compare', 'compareAttribute' => 'newpassword_repeat')\n       );\n    }\n    ```", "```php\n    public function verifyPassword($attribute,$params)\n    {\n       // Only allow change requests from the currently logged inuser\n       $this->_user = User::model()->findByPk(Yii::app()->user->id);\n\n       // User doesn't exist. Something bad has happened\n       if ($this->_user == NULL)\n          return false;\n\n       // NULL the new password if it isn't set\n       if ($this->newpassword == '' || $this->newpassword == NULL)\n          $this->newpassword == NULL;\n\n       // Validate the password\n       if (!password_verify($this->password, $this->_user->password))\n       {\n          $this->addError('password', 'The password you entered is invalid');\n          return false;\n       }\n       return true;\n    }\n    ```", "```php\n    public function save()\n    {\n       if (!$this->validate())\n          return false;\n\n       // Set the user attributes\n       $this->_user->attributes = array(\n          // If the email submitted is different than the current email, change the new_email field\n          'new_email' => $this->email == $this->_user->email ? NULL : $this->email,\n\n          // Set the new password if validation passes\n          'password' => $this->newpassword == NULL ? NULL : $this->newpassword,\n          'name' => $this->name\n       );\n\n       // Save the user's information\n       if ($this->_user->save())\n       {\n          // If the user's password has changed, send the user an email so that they can be aware of it\n          if ($this->newpassword != NULL && $this->password != $this->newpassword)\n             $this->sendPasswordChangeNotification();\n\n          // If the user entered a NEW email address, and we haven't already sent them a change email notification\n          // Send them a change email notification\n          if ($this->email != $this->_user->_oldAttributes['email'] && $this->_user->activated != -2)\n             $this->sendEmailChangeNotification();\n\n          return true;\n       }\n\n       return false;\n    }\n    ```", "```php\n    private function sendPasswordChangeNotification()\n    {\n       $sendgrid = new SendGrid(Yii::app()->params['includes']['sendgrid']['username'], Yii::app()->params['includes']['sendgrid']['password']);\n       $email    = new SendGrid\\Email();\n\n       $email->setFrom(Yii::app()->params['includes']['sendgrid']['from'])\n          ->addTo($this->_user->email)\n          ->setSubject(\"Your Socialii Password Has Been Changed\")\n          ->setText('Your Socialii Password Has Been Changed')\n          ->setHtml(Yii::app()->controller->renderPartial('//email/passwordchange', array('user' => $this->_user), true));\n\n       // Send the email\n       return $sendgrid->send($email);\n    }\n    ```", "```php\n    private function sendEmailChangeNotification()\n    {\n       // Change the user's activation status for the verification link\n       $this->_user->activated = -2;\n       $this->_user->activation_key = $this->_user->generateActivationKey();\n\n       // Save the user's information\n       if ($this->_user->save())\n       {\n          $sendgrid = new SendGrid(Yii::app()->params['includes']['sendgrid']['username'], Yii::app()->params['includes']['sendgrid']['password']);\n          $email    = new SendGrid\\Email();\n\n          $email->setFrom(Yii::app()->params['includes']['sendgrid']['from'])\n             ->addTo($this->_user->new_email)\n             ->setSubject(\"Verify Your New Email Address\")\n             ->setText('Verify Your New Email Address')\n             ->setHtml(Yii::app()->controller->renderPartial('//email/verify', array('user' => $this->_user), true));\n\n          // Send the email\n          return $sendgrid->send($email);\n       }\n\n       return false;\n    }\n    ```", "```php\n    public function actionIndex()\n    {\n       $user = User::model()->findByPk(Yii::app()->user->id);\n       $form = new ProfileForm;\n       if (isset($_POST['ProfileForm']))\n       {\n          $form->attributes = $_POST['ProfileForm'];\n          $form->newpassword_repeat = $_POST['ProfileForm']['newpassword_repeat'];\n\n          if ($form->save())\n             Yii::app()->user->setFlash('success', 'Your information has been successfully changed');\n          else\n             Yii::app()->user->setFlash('danger', 'There was an error updating your information');\n       }\n\n       $this->render('index', array(\n          'user' => $user,\n          'profileform' => $form\n       ));\n    }\n    ```", "```php\npublic function actionVerify($id=NULL)\n{\n   if ($id == NULL)\n      throw new CHttpException(400, 'Activation ID is missing');\n\n   $user = User::model()->findByAttributes(array('activation_key' => $id));\n\n   if ($user == NULL)\n   throw new CHttpException(400, 'The verification ID you supplied is invalid');\n\n   $user->attributes = array(\n      'email' => $user->new_email,\n      'new_email' => NULL,\n      'activated' => 1,\n      'activation_key' => NULL\n   );\n\n   // Save the information\n   if ($user->save())\n   {\n      $this->render('verify');\n      Yii::app()->end();\n   }\n\n   throw new CHttpException(500, 'There was an error processing your request. Please try again later');\n}\n```", "```php\npublic function actionFollow($id=NULL)\n{\n   if ($id == NULL)\n      throw new CHttpException(400, 'You must specify the user you wish to follow');\n\n   if ($id == Yii::app()->user->id)\n      throw new CHttpException(400, 'You cannot follow yourself');\n\n   $follower = new Follower;\n   $follower->attributes = array(\n      'follower_id' => Yii::app()->user->id,\n      'followee_id' => $id\n   );\n\n   if ($follower->save())\n      Yii::app()->user->setFlash('success', 'You are now  following ' . User::model()->findByPk($id)->name);\n\n   // Redirect back to where they were before\n   $this->redirect(Yii::app()->request->urlReferrer);\n}\n\npublic function actionUnFollow($id=NULL)\n{\n   if ($id == NULL)\n   throw new CHttpException(400, 'You must specify the user you wish to unfollow');\n\n   if ($id == Yii::app()->user->id)\n      throw new CHttpException(400, 'You cannot unfollow yourself');\n\n   $follower = Follower::model()->findByAttributes(array('follower_id' => Yii::app()->user->id, 'followee_id' => $id));\n\n   if ($follower != NULL)\n   {\n      if ($follower->delete())\n         Yii::app()->user->setFlash('success', 'You are no longer following ' . User::model()->findByPk($id)->name);\n   }\n\n   // Redirect back to where they were before\n   $this->redirect(Yii::app()->request->urlReferrer);\n}\n```", "```php\npublic function accessRules()\n{\n   return array(\n   array('allow',\n      'actions' => array('register', 'forgot', 'verify', 'activate', 'resetpassword'),\n      'users' => array('*')\n      ),\n      array('allow',\n         'actions' => array('index', 'follow', 'unfollow'),\n         'users'=>array('@'),\n      ),\n      array('deny',  // deny all users\n         'users'=>array('*'),\n      ),\n   );\n}\n```", "```php\npublic function actionIndex($id = NULL)\n{\n   // If the ID is not set, set this to the currently logged in user.\n   if ($id == NULL)\n   {\n      if (Yii::app()->user->isGuest)\n         $this->redirect($this->createUrl('site/login'));\n\n      $id = Yii::app()->user->username;\n   }\n\n   // Get the user's information\n   $user = User::model()->findByAttributes(array('username' => $id));\n   if ($user == NULL)\n      throw new CHttpException(400, 'Unable to find a user with that ID');\n\n   $this->render('index', array(\n      'user' => $user,\n      'share' => new Share,\n      'id' => $user->id\n   ));\n}\n```", "```php\n<?php if (Yii::app()->user->isGuest): ?>\n   <?php echo CHtml::link('Login to follow ' . $user->name, $this->createUrl('site/login'), array('class' => 'btn btn-primary')); ?>\n      <br /><br />\n   <?php else: ?>\n      <?php if (!User::isFollowing($id)): ?>\n         <?php echo CHtml::link('Follow This User', $this->createUrl('user/follow/', array('id' => $id)), array('class' => 'btn btn-success')); ?>\n      <?php else: ?>\n         <?php echo CHtml::link('Stop Following This User', $this->createUrl('user/unfollow/', array('id' => $id)), array('class' => 'btn btn-danger')); ?>\n   <?php endif; ?>\n<?php endif; ?>\n```", "```php\n<a type=\"button\" class=\"btn btn-primary\" disabled>Followers: <?php echo $user->followeesCount; ?></a>\n<a type=\"button\" class=\"btn btn-primary\" disabled>Following: <?php echo $user->followersCount; ?></a>\n<a type=\"button\" class=\"btn btn-primary\" disabled>Shares: <span class=\"share-count\"><?php echo $user->sharesCount; ?></span></a>\n```", "```php\n<?php Yii::app()->clientScript->registerScript('loadshares', '$.get(\"' . $this->createUrl('share/getshares', array('id' => $id)) . '\", function(data) { $(\".shares\").html(data); }); '); ?>\n```", "```php\npublic function actionGetShares($id=NULL) {}\n```", "```php\n       $this->layout = false;\n    ```", "```php\n       if ($id == NULL)\n       {\n          if (Yii::app()->user->isGuest)\n             throw new CHttpException(400, 'Cannot retrieve shares for that user');\n\n          $id = Yii::app()->user->id;\n       }\n    ```", "```php\n       $myFollowers = array();\n\n       // CListView for showing shares\n       $shares = new Share('search');\n       $shares->unsetAttributes();\n\n       if(isset($_GET['Share']))\n          $shares->attributes=$_GET['Share'];\n    ```", "```php\n       // If this is NOT the current user, then only show stuff that belongs to this user\n       if ($id != Yii::app()->user->id)\n          $shares->author_id = $id;\n       else\n       {\n          // Alter the criteria to do a search of everyone the current user is following\n          $myFollowers[] = Yii::app()->user->id;\n\n          $followers = Follower::model()->findAllByAttributes(array('follower_id' => Yii::app()->user->id));\n          if ($followers != NULL)\n          {\n             foreach ($followers as $follower)\n             $myFollowers[] = $follower->followee_id;\n          }\n       }\n\n       $this->render('getshares', array('shares' => $shares, 'myFollowers' => $myFollowers));\n    }\n    ```", "```php\n    <?php $this->widget('zii.widgets.CListView', array(\n        'dataProvider'=>$shares->search($myFollowers),\n        'itemView'=>'share',\n        'emptyText' => '<div class=\"center\">This user hasn\\'t shared anything yet!</div>',\n        'template' => '{items}{pager}',\n        'afterAjaxUpdate' => 'js:function() { init(); }\n        ',\n        'pager' => array(\n            'header' => ' ',\n            'selectedPageCssClass' => 'active',\n            'htmlOptions' => array('class' => 'pagination')\n        )\n    ));\n\n    Yii::app()->clientScript->registerScript('init', '\n    function init() {\n        $(\".fa-heart\").click(function() {\n            var id = $(this).parent().parent().parent().attr(\"data-attr-id\");\n            var self = this;\n            $.post(\"' . $this->createUrl('share/like') . '/\" + id, function(data) {\n                $(self).toggleClass(\"liked\");\n            });\n        });\n\n        $(\".fa-mail-forward\").click(function() {\n            var id = $(this).parent().parent().parent().attr(\"data-attr-id\");\n            var self = this;\n            $.post(\"' . $this->createUrl('share/re-share') . '/\" + id, function(data) {\n                $(self).toggleClass(\"liked\");\n            });\n        });\n    }\n\n    init();\n    ');\n    ```", "```php\n    public function search($items = array())\n    {\n       $criteria=new CDbCriteria;\n\n       $criteria->compare('id',$this->id);\n       $criteria->compare('text',$this->text,true);\n       $criteria->compare('reply_id',$this->reply_id);\n       $criteria->compare('created',$this->created);\n\n       if (empty($items))\n     $criteria->compare('author_id',$this->author_id);\n     else\n     $criteria->addInCondition('author_id', $items);\n\n       $criteria->order = 'created DESC';\n       return new CActiveDataProvider($this, array(\n          'criteria' => $criteria,\n       ));\n    }\n    ```", "```php\n<?php\n   $data->text = preg_replace(\"/#([A-Za-z0-9\\/\\.]*)/\", \"<a target=\\\"_new\\\" href=\\\"\" . Yii::app()->controller->createAbsoluteUrl('timeline/search') .\"?q=$1\\\">#$1</a>\", $data->text);\n   $data->text = preg_replace(\"/@([A-Za-z0-9\\/\\.]*)/\", \"<a href=\\\"\" . Yii::app()->controller->createAbsoluteUrl('timeline/index'). \"/$1\\\">@$1</a>\", $data->text);\n   $md = new CMarkdownParser;\n   echo $md->safeTransform($data->text);\n```", "```php\npublic function actionCreate()\n{\n   $share = new Share;\n\n   if (isset($_POST['Share']))\n   {\n      $share->attributes = array(\n         'text' => $_POST['Share']['text'],\n         'reply_id' => isset($_POST['Share']['reply_id']) ? $_POST['Share']['reply_id'] : NULL,\n         'author_id' => Yii::app()->user->id\n      );\n\n      // Share the content\n      if ($share->save())\n      {\n         $this->renderPartial('share', array('data' => $share));\n         Yii::app()->end();\n      }\n   }\n\n   throw new CHttpException(500, 'There was an error sharing your content');\n}\n```", "```php\npublic function afterSave()\n{\n   preg_match_all('/@([A-Za-z0-9\\/\\.]*)/', $this->text, $matches);\n   $mentions = implode(',', $matches[1]);\n\n   if (!empty($matches[1]))\n   {\n      $criteria = new CDbCriteria;\n      $criteria->addInCondition('username', $matches[1]);\n      $users = User::model()->findAll($criteria);\n\n      foreach ($users as $user)\n      {\n         $sendgrid = new SendGrid(Yii::app()->params['includes']['sendgrid']['username'], Yii::app()->params['includes']['sendgrid']['password']);\n         $email    = new SendGrid\\Email();\n\n         $email->setFrom(Yii::app()->params['includes']['sendgrid']['from'])\n            ->addTo($user->email)\n            ->setSubject(\"You've Been @mentioned!\")\n            ->setText(\"You've Been @mentioned!\")\n            ->setHtml(Yii::app()->controller->renderPartial('//email/mention', array('share' => $this, 'user' => $user), true));\n\n         // Send the email\n         $sendgrid->send($email);\n      }\n   }\n\n   return parent::afterSave();\n}\n```", "```php\nprivate function loadModel($id=NULL)\n{\n    if ($id == NULL)\n        throw new CHttpException(400, 'Missing Share ID');\n\n    return Share::model()->findByPk($id);\n}\n```", "```php\npublic function actionReshare($id=NULL)\n{\n   // Load the share model\n   $share = $this->loadModel($id);\n\n   // You can't reshare your own stuff\n   if ($share->author_id == Yii::app()->user->id)\n   return false;\n\n   // You can't reshare stuff you've already reshared\n   $reshare = Share::model()->findByAttributes(array(\n      'author_id' => Yii::app()->user->id,\n      'reshare_id' => $id\n   ));\n\n   if ($reshare !== NULL)\n   return false;\n\n   // Create a new Share as a reshare\n   $model = new Share;\n\n   // Assign the shared attributes\n   $model->attributes = $share->attributes;\n\n   // Set the reshare other to the current user\n   $model->author_id = Yii::app()->user->id;\n\n   // Propogate the reshare if this isn't original\n   if ($model->reshare_id == 0 || $model->reshare_id == NULL)\n   $model->reshare_id = $share->id;\n\n   // Then save the reshare, return the response. Yii will set a 200 or 500 response code automagically if false\n   return $model->save();\n}\n```", "```php\npublic function actionLike($id=NULL)\n{\n   $share = $this->loadModel($id);\n   if ($share->isLiked())\n      return $share->unlike();\n\n   return $share->like();\n}\n```", "```php\npublic function isLiked()\n{\n   $like = Like::model()->findByAttributes(array(\n      'user_id' => Yii::app()->user->id,\n      'share_id' => $this->id\n   ));\n\n   return $like != NULL;\n}\n```", "```php\npublic function like()\n{\n   $like = Like::model()->findByAttributes(array(\n      'user_id' => Yii::app()->user->id,\n      'share_id' => $this->id\n   ));\n\n   // Share is already liked, return true\n   if ($like != NULL)\n      return true;\n\n   $like = new Like;\n   $like->attributes = array(\n      'share_id' => $this->id,\n      'user_id' => Yii::app()->user->id\n   );\n\n   // Save the like\n   return $like->save();\n}\n```", "```php\npublic function unlike()\n{\n   $like = Like::model()->findByAttributes(array(\n      'user_id' => Yii::app()->user->id,\n      'share_id' => $this->id\n   ));\n\n   // Item is not already liked, return true\n   if ($like == NULL)\n      return true;\n\n   // Delete the Like\n   return $like->delete();\n}\n```", "```php\npublic function actionView($id=NULL)\n{\n   $share = $this->loadModel($id);\n\n   if ($share == NULL)\n      throw new CHttpException(400, 'No share with that ID was found');\n\n   $this->render('view', array(\n      'share' => $share,\n      'replies' => Share::model()->findAllByAttributes(array('reply_id' => $id), array('order' => 'created DESC')),\n      'reply' => new Share\n   ));\n}\n```", "```php\n    public function actionSearch() {}\n    ```", "```php\n    $query = isset($_GET['q']) ? $_GET['q'] : NULL;\n    $users = $shares = NULL;\n    ```", "```php\n    if ($query != NULL)\n    {\n       $userCriteria = new CDbCriteria;\n       $searchCriteria = new CDbCriteria;\n    }\n    ```", "```php\n       preg_match_all('/@([A-Za-z0-9\\/\\.]*)/', $query, $matches);\n       $mentions = implode(',', $matches[1]);\n    ```", "```php\n       if (!empty($matches[1]))\n       {\n          $userCriteria->addInCondition('username', $matches[1]);\n          $users = User::model()->findAll($userCriteria);\n          foreach ($matches[1] as $u)\n             $query = str_replace('@'.$u,'',$query);\n       }\n    ```", "```php\n    $searchCriteria->addSearchCondition('text', $query);\n    $searchCriteria->limit = 30;\n    $shares = Share::model()->findAll($searchCriteria);\n    ```", "```php\n    $this->render('search', array(\n       'users' => $users,\n       'shares' => $shares\n    ));\n    ```", "```php\n\"hybridauth/hybridauth\": \"2.2.0.*@dev\"\n```", "```php\n    composer update\n\n    ```", "```php\n    Loading composer repositories with package information\n    Updating dependencies (including require-dev)\n     - Installing hybridauth/hybridauth (2.2.0.x-dev 5774600)\n     Cloning 57746000e5b2f96469b229b366e56eb70ab7bf20\n\n    Writing lock file\n    Generating autoload files\n\n    ```", "```php\n    'hybridauth' => array(\n       'baseUrl' => '',\n       'base_url' => '',\n       'providers' => array(\n          'Twitter' => array(\n             'enabled' => true,\n             'keys' => array(\n                'key' => '<twiter_key>',\n                'secret' => '<twitter_secret>'\n             )\n          )\n       )\n    )\n    ```", "```php\n    array('allow',\n       'actions' => array('create', 'reshare', 'like', 'delete', 'hybrid'),\n       'users' => array('@')\n    ),\n    ```", "```php\n    public function actionHybrid($id=NULL) {}\n    ```", "```php\n    if (isset($_GET['hauth_start']) || isset($_GET['hauth_done']))\n        Hybrid_Endpoint::process();\n    ```", "```php\n    try {\n    } catch (Exception $e) {\n        $this->redirect($this->createUrl('timeline/index'));\n    }\n    ```", "```php\n    $config = Yii::app()->params['includes']['hybridauth'];\n    $config['baseUrl'] = $config['base_url'] = $this->createAbsoluteUrl('share/hybrid');\n    ```", "```php\n    $hybridauth = new Hybrid_Auth($config, array());\n    ```", "```php\n    $adapter = $hybridauth->authenticate('Twitter');\n    ```", "```php\n    if ($adapter->isUserConnected()) {}\n    ```", "```php\n    $share = $this->loadModel($id);\n    ```", "```php\n    $response = $adapter->setUserStatus($share->text . ' | #Socialii ' . $this->createAbsoluteUrl('share/view', array('id' => $id)));\n    Yii::app()->user->setFlash('success', 'Your status has been shared to Twitter');\n    $this->redirect(Yii::app()->user->returnUrl);\n    ```"]