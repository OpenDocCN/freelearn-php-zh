["```php\n<?\n//class.emailer.php\nclass Emailer\n{\n  private $sender;\n  private $recipients;\n  private $subject;\n  private $body;\n\n  function __construct($sender)\n  {\n    $this->sender = $sender;\n    $this->recipients = array();\n  }\n\n  public function addRecipients($recipient)\n  {\n    array_push($this->recipients, $recipient);\n  }\n\n  public function setSubject($subject)\n  {\n    $this->subject = $subject;\n  }\n\n  public function setBody($body)\n  {\n    $this->body = $body;\n  }\n\n  public function sendEmail()\n  {\n  foreach ($this->recipients as $recipient)\n  {\n    $result = mail($recipient, $this->subject, $this->body, \n                              \"From: {$this->sender}\\r\\n\");\n    if ($result) echo \"Mail successfully sent to {$recipient}<br/>\";\n    }\n  }\n}\n?>\n```", "```php\n  public function setBody($body)\n  {\n    $this->body = $body;\n  }\n```", "```php\n<?\n$emailerobject = new Emailer(\"hasin@pageflakes.com\");\n$emailerobject->addRecipients(\"hasin@somewherein.net\");\n$emailerobject->setSubject(\"Just a Test\");\n$emailerobject->setBody(\"Hi Hasin, How are you?\");\n$emailerobject->sendEmail();\n?>\n```", "```php\n$emailerobject = new Emailer(\"hasin@pageflakes.com\");\n```", "```php\n<?\n$emailer = new emailer();\n?>\n```", "```php\nWarning: Missing argument 1 for emailer::__construct(), \ncalled in C:\\OOP with PHP5\\Codes\\ch1\\class.emailer.php on line 42 \nand defined in <b>C:\\OOP with PHP5\\Codes\\ch1\\class.emailer.php</b> \non line <b>9</b><br />\n```", "```php\n<?\ninclude_once(\"class.emailer.php\");\n$emobject = new Emailer(\"hasin@somewherein.net\");\n$emobject->subject = \"Hello world\";\n?>\n```", "```php\n<b>Fatal error</b>: Cannot access private property emailer::$subject\n in <b>C:\\OOP with PHP5\\Codes\\ch1\\class.emailer.php</b> on line \n<b>43</><br />\n```", "```php\nprotected $sender\n```", "```php\n<?\nclass ExtendedEmailer extends emailer \n{\nfunction  __construct(){}\n   public function setSender($sender)\n  {\n    $this->sender = $sender;\n  }\n}\n?>\n```", "```php\n<?\ninclude_once(\"class.emailer.php\");\ninclude_once(\"class.extendedemailer.php\");\n$xemailer = new ExtendedEmailer();\n$xemailer->setSender(\"hasin@pageflakes.com\");\n$xemailer->addRecipients(\"hasin@somewherein.net\");\n$xemailer->setSubject(\"Just a Test\");\n$xemailer->setBody(\"Hi Hasin, How are you?\");\n$xemailer->sendEmail();\n?> \n```", "```php\n<?\ninclude_once(\"class.emailer.php\");\ninclude_once(\"class.extendedemailer.php\");\n$xemailer = new ExtendedEmailer();\n$xemailer->sender = \"hasin@pageflakes.com\";\n?>\n```", "```php\n<b>Fatal error</b>:  Cannot access protected property \nextendedEmailer::$sender in <b>C:\\OOP with \nPHP5\\Codes\\ch1\\test.php</b> on line <b>5</b><br />\n\n```", "```php\n<?\n//class.factorial.php\nclass factorial\n{\n  private $result = 1;// you can initialize directly outside\n  private $number;\n  function __construct($number)\n  {\n    $this->number = $number;\n    for($i=2; $i<=$number; $i++)\n    {\n      $this->result *= $i;\n    }\n  }\n  public function showResult()\n  {\n    echo \"Factorial of {$this->number} is {$this->result}. \";\n  }\n}\n?>\n```", "```php\n<?\n//class.factorial.php\nclass Factorial\n{\n  private $result = 1;\n  private $number;\n\n  function __construct($number)\n  {\n    $this->number = $number;\n    for($i=2; $i<=$number; $i++)\n    {\n      $this->result*=$i;\n    }\n    echo \"__construct() executed. \";\n  }\n\n  function factorial($number)\n  {\n\n    $this->number = $number;\n    for($i=2; $i<=$number; $i++)\n    {\n      $this->result*=$i;\n    }\n    echo \"factorial() executed. \";\n  }\n\n  public function showResult()\n  {\n    echo \"Factorial of {$this->number} is {$this->result}. \";\n  }\n}\n?>\n```", "```php\n<?\ninclude_once(\"class.factorial.php\");\n$fact = new Factorial(5);\n$fact->showResult();\n?>\n```", "```php\n__construct() executed. Factorial of 5 is 120\n```", "```php\nfunction __destruct()\n{\n  echo \" Object Destroyed.\";\n}\n```", "```php\n__construct() executed. Factorial of 5 is 120\\. Object Destroyed.\n\n```", "```php\n<?\nclass WordCounter\n{\n  const ASC=1;  //you need not use $ sign before Constants\n  const DESC=2;\n  private $words;\n\n  function __construct($filename)\n  {\n    $file_content = file_get_contents($filename);\n    $this->words = \n         (array_count_values(str_word_count(strtolower\n                                           ($file_content),1)));\n  }\n\n  public function count($order)\n  {\n    if ($order==self::ASC)\n    asort($this->words);\n    else if($order==self::DESC)\n    arsort($this->words);\n    foreach ($this->words as $key=>$val)\n    echo $key .\" = \". $val.\"<br/>\";\n  }\n}\n?>\n```", "```php\n<?\ninclude_once(\"class.wordcounter.php\");\n$wc = new WordCounter(\"words.txt\");\n$wc->count(WordCounter::DESC);\n?>\n```", "```php\nwords.txt\nWordpress is an open source blogging engine. If you are not familiar\n with blogging, it is something like keeping a diary on the web. \nA blog stands for web log. Wordpress is totally free and \nreleased under the GPL.\n```", "```php\nis = 3\na = 2\nblogging = 2\nweb = 2\nwordpress = 2\nstands = 1\nblog = 1\nin = 1\ndiary = 1\nfor = 1\nfree = 1\nunder = 1\ngpl = 1\nreleased = 1\nand = 1\ntotally = 1\nlog = 1\nsomething = 1\nif = 1\nyou = 1\nengine = 1\nsource = 1\nan= 1\nopen = 1\nare = 1\nnot = 1\n√Ø = 1\nlike = 1\nit = 1\nwith = 1\nfamiliar = 1\nkeeping = 1\n```", "```php\n<?\nclass HtmlEmailer extends emailer\n{\n  public function sendHTMLEmail()\n  {\n    foreach ($this->recipients as $recipient)\n    {\n      $headers  = 'MIME-Version: 1.0' . \"\\r\\n\";\n      $headers .= 'Content-type: text/html; charset=iso-8859-1' . \n                                                           \"\\r\\n\";\n      $headers .= 'From: {$this->sender}' . \"\\r\\n\";\n      $result = mail($recipient, $this->subject, $this->body, \n                                                       $headers);\n      if ($result) echo \"HTML Mail successfully sent to \n                                              {$recipient}<br/>\";\n    }\n  }\n}\n?>\n```", "```php\n<?\ninclude_once(\"class.htmlemailer.php\");\n$hm = new HtmlEmailer();\n//.... do other things\n$hm->sendEmail();\n$hm->sendHTMLEmail();\n?>\n```", "```php\n<?\nclass SuperClass\n{\n  public final function someMethod()\n  {\n    //..something here\n  }\n}\n\nclass SubClass extends SuperClass \n{\n  public function someMethod()\n  {\n    //..something here again, but it wont run\n  }\n}\n?>\n```", "```php\n<?\nfinal class aclass\n{\n}\n\nclass bclass extends aclass \n{\n}\n?>\n```", "```php\n<b>Fatal error</b>:  Class bclass may not inherit from final class \n(aclass) in <b>C:\\OOP with PHP5\\Codes\\ch1\\class.aclass.php</b> on \nline <b>8</b><br />\n```", "```php\n<?\ninclude(\"class.emailer.php\");\ninclude(\"class.extendedemailer.php\");\ninclude(\"class.htmlemailer.php\");\n\n$emailer = new Emailer(\"hasin@somewherein.net\");\n$extendedemailer = new ExtendedEmailer();\n$htmlemailer = new HtmlEmailer(\"hasin@somewherein.net\");\nif ($extendedemailer instanceof emailer  )\necho \"Extended Emailer is Derived from Emailer.<br/>\";\nif ($htmlemailer instanceof emailer  )\necho \"HTML Emailer is also Derived from Emailer.<br/>\";\nif ($emailer instanceof htmlEmailer )\necho \"Emailer is Derived from HTMLEmailer.<br/>\";\nif ($htmlemailer instanceof extendedEmailer  )\necho \"HTML Emailer is Derived from Emailer.<br/>\";\n?>\n```", "```php\nExtended Emailer is Derived from Emailer.\nHTML Emailer is also Derived from Emailer.\n```", "```php\n<?\n//interface.dbdriver.php\ninterface DBDriver\n{\n  public function connect();\n  public function execute($sql);\n}\n?>\n```", "```php\n<?\n//class.mysqldriver.php\ninclude(\"interface.dbdriver.php\");\nclass MySQLDriver implements DBDriver \n{\n\n}\n?>\n```", "```php\n<b>Fatal error</b>: Class MySQLDriver contains 2 abstract methods \nand must therefore be declared abstract or implement the remaining \nmethods (DBDriver::connect, DBDriver::execute) in <b>C:\\OOP with \nPHP5\\Codes\\ch1\\class.mysqldriver.php</b> on line <b>5</b><br />\n```", "```php\n<?\ninclude(\"interface.dbdriver.php\");\nclass MySQLDriver implements DBDriver \n{\n  public function connect()\n  {\n    //connect to database\n  }\n  public function execute()\n  {\n    //execute the query and output result\n  }\n}\n?>\n```", "```php\n<b>Fatal error</b>:  Declaration of MySQLDriver::execute() must be \ncompatible with that of DBDriver::execute() in <b>C:\\OOP with \nPHP5\\Codes\\ch1\\class.mysqldriver.php</b> on line <b>3</b><br />\n```", "```php\n<?\ninclude(\"interface.dbdriver.php\");\nclass MySQLDriver implements DBDriver \n{\n  public function connect()\n  {\n    //connect to database\n  }\n  public function execute($query)\n  {\n    //execute the query and output result\n  }\n}\n?>\n```", "```php\n<?\n//abstract.reportgenerator.php\nabstract class ReportGenerator\n{\n  public function generateReport($resultArray)\n  {\n    //write code to process the multidimensional result array and \n    //generate HTML Report\n  }\n}\n?>\n```", "```php\n<?\ninclude(\"interface.dbdriver.php\");\ninclude(\"abstract.reportgenerator.php\");\nclass MySQLDriver extends ReportGenerator implements DBDriver \n{\n  public function connect()\n  {\n    //connect to database\n  }\n  public function execute($query)\n  {\n    //execute the query and output result\n  }\n  // You need not declare or write the generateReport method here \n  //again as it is extended from the abstract class directly.\"\n}\n?>\n```", "```php\nabstract public function connectDB();\n```", "```php\n<?\n//class.dbmanager.php\nclass DBManager\n{\n  public static function getMySQLDriver()\n  {\n    //instantiate a new MySQL Driver object and return\n  }\n\n  public static function getPostgreSQLDriver()\n  {\n    //instantiate a new PostgreSQL Driver object and return\n  }\n\n  public static function getSQLiteDriver()\n  {\n    //instantiate a new MySQL Driver object and return\n  }\n}\n?>\n```", "```php\n<?\n//test.dbmanager.php\ninclude_once(\"class.dbmanager.php\");\n$dbdriver = DBManager::getMySQLDriver();\n//now process db operation with this $dbdriver object\n?>\n```", "```php\n<?\n//class.statictester.php\nclass StaticTester\n{\n  private static $id=0;\n\n  function __construct()\n  {\n    self::$id +=1;\n  }\n\n  public static function checkIdFromStaticMehod()\n  {\n    echo \"Current Id From Static Method is \".self::$id.\"\\n\";\n  }\n\n  public function checkIdFromNonStaticMethod()\n  {\n    echo \"Current Id From Non Static Method is \".self::$id.\"\\n\";\n  }\n}\n\n$st1 = new StaticTester();\nStaticTester::checkIdFromStaticMehod();\n$st2 = new StaticTester();\n$st1->checkIdFromNonStaticMethod(); //returns the val of $id as 2\n$st1->checkIdFromStaticMehod();\n$st2->checkIdFromNonStaticMethod();\n$st3 = new StaticTester();\nStaticTester::checkIdFromStaticMehod();\n?>\n```", "```php\nCurrent Id From Static Method is 1\nCurrent Id From Non Static Method is 2\nCurrent Id From Static Method is 2\nCurrent Id From Non Static Method is 2\nCurrent Id From Static Method is 3\n```", "```php\n<?\nclass Student\n{\n  private $name;\n  private $roll;\n  public function setName($name)\n  {\n    $this->name= $name;\n  }\n  public function setRoll($roll)\n  {\n    $this->roll =$roll;\n  }\n\n  public function getName()\n  {\n    return $this->name;\n  }\n  public function getRoll()\n  {\n    return $this->roll;\n  }\n}\n?>\n```", "```php\n<?\n//class.student.php\nclass Student\n{\n  private $properties = array();\n  function __get($property)\n  {\n    return $this->properties[$property];\n  }\n\n  function __set($property, $value)\n  {\n    $this->properties[$property]=\"AutoSet {$property} as: \".$value;\n  }\n\n}\n?>\n```", "```php\n<?\n$st = new Student();\n$st->name = \"Afif\";\n$st->roll=16;\necho $st->name.\"\\n\";\necho $st->roll;\n?>\n```", "```php\nAutoSet name as: Afif\nAutoSet roll as: 16\n```", "```php\n<?\nclass Overloader\n{\n  function __call($method, $arguments)\n  {\n    echo \"You called a method named {$method} with the following \n                                                arguments <br/>\";\n    print_r($arguments);\n    echo \"<br/>\";\n  }\n}\n\n$ol = new Overloader();\n$ol->access(2,3,4);\n$ol->notAnyMethod(\"boo\");\n?>\n```", "```php\nYou called a method named access with the following arguments \nArray\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n)\n\nYou called a method named notAnyMethod with the following arguments \nArray\n(\n    [0] => boo\n)\n```"]