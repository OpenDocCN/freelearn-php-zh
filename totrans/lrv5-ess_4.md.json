["```php\n$ php artisan app:model Cat\n\n```", "```php\n<?php namespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Cat extends Model {\n  //\n}\n```", "```php\nclass Cat extends Model {\n  protected $table = 'cats';\n}\n```", "```php\nuse App\\Cat;\n$cats = Cat::all();\n```", "```php\n$cat = Cat::find(1);\n```", "```php\nuse App\\Order;\n\n$orderCount    = Order::count();\n$maximumTotal  = Order::max('amount');\n$minimumTotal  = Order::min('amount');\n$averageTotal  = Order::avg('amount');\n$lifetimeSales = Order::sum('amount');\n```", "```php\n$cat = Cat::where('id', '=', 1)->first();\n```", "```php\nuse App\\User;\n\n$users = User::where('gender', '=', 'Male')\n  ->where('birth_date', '>', '1989-02-12')\n  ->all();\n```", "```php\nuse App\\User;\nuse Carbon\\Carbon;\n\n$users = User::where('birth_date', '<', Carbon::now()- >subYears(21))\n  ->all();\n```", "```php\n$women = User::where('gender', '=', 'Female')->take(5)->get();\n```", "```php\n$women = User::where('gender', '=', 'Female')->take(5)->skip(10)->get();\n```", "```php\nSELECT * FROM users WHERE gender = 'Female' OFFSET 10 LIMIT 5\n```", "```php\n$rankings = Team::orderBy('rating', 'asc')->get();\n```", "```php\nSELECT * FROM teams ORDER BY rating ASC\n```", "```php\n$cat = Cat::find(1);\nprint $cat->name;\n```", "```php\n$cat->name = 'Garfield';\n\n```", "```php\n$cat->name = 'Garfield';\n$cat->save();\n\n```", "```php\n$data = [\n  'name' => 'Garfield',\n  'birth_date' => '1978-06-19',\n  'breed_id' => 1,\n];\n\n$cat->create($data);\n```", "```php\nclass Cat extends Model {\n\n  protected $table = 'cats';\n  protected $fillable = [\n 'name',\n 'birth_date',\n 'breed_id',\n ];\n}\n```", "```php\n$cat = Cat::find(1);\n$cat->delete();\n```", "```php\nCat::destroy(1);\nCat::destroy(1, 2, 3, 4, 5);\n```", "```php\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nclass Cat extends Model {\n  use SoftDeletes;\n protected $dates = ['deleted_at'];\n}\n```", "```php\npublic function up() {\n  $table->softDeletes();\n}\n```", "```php\n$cats = Cat::withTrashed()->get();\n```", "```php\n$cats = Cat::onlyTrashed()->get();\n```", "```php\n$cat->restore();\n```", "```php\n$cat->forceDelete();\n```", "```php\nclass User extends Model {\n\n public function scopeOver21($query)\n {\n $date = Carbon::now()->subYears(21);\n return $query->where('birth_date', '<', $date);\n }\n}\n```", "```php\n$usersOver21 = User::over21()->get();\n```", "```php\n$malesOver21 = User::male()->over21()->get();\n```", "```php\nclass Cat extends Model {\n  public function scopeOfBreed($query, $breedId)\n {\n return $query->where('breed_id', '=', $breedId);\n }\n}\n```", "```php\n$tabbyCats = Cat::ofBreed(1)->get();\n```", "```php\nclass User extends Model {\n\n  public function profile()\n {\n return $this->hasOne('App\\Profile');\n }\n}\n```", "```php\nclass Profile extends Model {\n\n  public function user()\n {\n return $this->belongsTo('App\\User');\n }\n}\n```", "```php\n$profile = User::find(1)->profile;\n```", "```php\nclass User extends Model {\n  public function roles()\n {\n return $this->belongsToMany('App\\Role');\n }\n}\n\nclass Role extends Model {\n  public function users()\n {\n return $this->belongsToMany('App\\User');\n }\n}\n```", "```php\n$roles = User::find(1)->roles;\n```", "```php\n$admins = Role::find(1)->users;\n```", "```php\n$user = User::find(1);\n$user->roles()->attach($roleId);\n```", "```php\n$user->roles()->detach($roleId);\n```", "```php\n$user->roles()->sync(1, 2, 3, 4, 5);\n```", "```php\n$user->groups()->attach(1, ['is_moderator' => true]);\n```", "```php\n$user->groups()->sync([1 => ['is_moderator' => true]]);\n```", "```php\nclass Product extends Model {\n\n  public function orders()\n {\n return $this->hasManyThrough('App\\Order', 'App\\OrderItem');\n }\n}\n```", "```php\n$product = Product::find(1);\n$orders = $product->orders;\n```", "```php\nclass Image extends Model {\n\n  public function imageable()\n {\n return $this->morphTo();\n }\n}\n```", "```php\nclass Article extends Model {\n  public function images()\n {\n $this->morphMany('App\\Image', 'imageable');\n }\n}\n```", "```php\n$article = Article::find(1);\n\nforeach ($article->images as $image) {\n  // Do something with image\n}\n```", "```php\n$table->morphs('imageable');\n```", "```php\nclass Article extends Model {\n  public function images()\n {\n return $this->morphedByMany('App\\Image', 'imageable');\n }\n}\n```", "```php\nclass Image extends Model {\n  public function articles()\n {\n return $this->morphToMany('App\\Article', 'imageable');\n }\n public function products()\n {\n return $this->morphToMany('App\\Product', 'imageable');\n }\n // And any other relations\n}\n```", "```php\npublic function boot(DispatcherContract $events)\n{\n  parent::boot($events);\n\n  User::creating(function($user)\n {\n // Do something\n });\n}\n```", "```php\nuse Illuminate\\Contracts\\Bus\\Dispatcher as DispatcherContract;\n```", "```php\nArticle::saving(function($article)\n{\n  $article->slug = Str::slug($article->headline);\n});\n```", "```php\nuse Illuminate\\Support\\Str;\n\nclass ArticleObserver {\n  public function saving($article)\n  {\n    $article->slug = Str::slug($article->headline);\n  }\n}\n```", "```php\npublic function boot(DispatcherContract $events)\n{\n  parent::boot($events);\n  Article::observe(new ArticleObserver);\n}\n```", "```php\n$users = User::all();\nif ($users->contains($userId))\n{\n  // Do something\n}\n```", "```php\n$user = User::find(1);\nif ($user->roles->contains($roleId))\n{\n  // Do something\n}\n```", "```php\n<?php namespace App;\nuse Illuminate\\Database\\Eloquent\\Collection as EloquentCollection;\nclass RoleCollection extends EloquentCollection {\n  public function containsAdmin()\n {\n return $this->contains(1);\n }\n}\n```", "```php\nuse App\\RoleCollection;\n\nclass Role extends Model {\n  public function newCollection(array $models = array())\n {\n return new RoleCollection($models);\n }\n}\n```", "```php\n$user = User::find(1);\n\nif ($user->roles->containsAdmin())\n{\n  // Let user administrate something\n}\nelse\n{\n // User does not have administrator role\n}\n```"]