["```php\n// User.php\n\nnamespace app\\models;\n\nuse yii\\base\\Object;\nuse yii\\web\\IdentityInterface;\n\nclass User extends Object implements IdentityInterface\n{\n    // ...\n```", "```php\nuse Yii;\n\n// check the user is logged in\nif (!Yii::$app->user->isGuest) {\n    // do something\n}\n```", "```php\n$ ../vendor/bin/codecept generate:phpunit unit models/UserTest\nTest was created in /var/www/vhosts//htdocs/tests/unit/UserTest.php\n\n```", "```php\n// tests/codeception/unit/UserTest.php\nnamespace tests\\codeception\\unit\\models;\n\nuse yii\\codeception\\TestCase;\n\nclass UserTest extends TestCase\n{\n}\n```", "```php\n// tests/codeception/unit/models/UserTest.php\n\npublic function testValidateReturnsFalseIfParametersAreNotSet() {\n    $user = new User;\n    $this->assertFalse($user->validate(), \"New User should not validate\");\n}\n\npublic function testValidateReturnsTrueIfParametersAreSet() {\n    $configurationParams = [\n        'username' => 'a valid username',\n        'password' => 'a valid password',\n        'authkey' => 'a valid authkey'\n    ];\n    $user = new User($configurationParams);\n    $this->assertTrue($user->validate(), \"User with set parameters should validate\");\n}\n```", "```php\n/**\n * @expectedException yii\\base\\InvalidParamException\n */\npublic function \ntestValidatePasswordThrowsInvalidParamExceptionIfPasswordIsIncorrect() {\n    $user = new User;\n    $user->password = 'some password';\n\n    $user->validatePassword('some other password');\n}\n```", "```php\n/**\n * @expectedException yii\\base\\NotSupportedException\n */\npublic function testFindIdentityByAccessTokenReturnsTheExpectedObject()\n{\n    User::findIdentityByAccessToken('anyAccessToken');\n}\n```", "```php\npublic function testGetIdReturnsTheExpectedId() {\n    $user = new User();\n    $user->id = 2;\n\n    $this->assertEquals($expectedId, $user->getId());\n}\n```", "```php\npublic function testFindIdentityReturnsTheExpectedObject() {\n    $expectedAttrs = [\n        'username' => 'someone',\n        'password' => 'else',\n        'authkey' => 'random string'\n    ];\n    $user = new User($expectedAttrs);\n\n    $this->assertTrue($user->save());\n\n    $expectedAttrs['id'] = $user->id;\n    $user = User::findIdentity($expectedAttrs['id']);\n\n    $this->assertNotNull($user);\n    $this->assertInstanceOf('yii\\web\\IdentityInterface', $user);\n    $this->assertEquals($expectedAttrs['username'], $user->username);\n    $this->assertEquals($expectedAttrs['password'], $user->password);\n    $this->assertEquals($expectedAttrs['authkey'], $user->authkey);\n}\n```", "```php\npublic function testFindIdentityReturnsNullIfUserIsNotFound() {\n    $this->assertNull(User::findIdentity(-1));\n}\n```", "```php\n/**\n * @dataProvider nonExistingIdsDataProvider\n */\npublic function testFindIdentityReturnsNullIfUserIsNotFound(\n    $invalidId\n) {\n    $this->assertNull(User::findIdentity($invalidId));\n}\n\npublic function nonExistingIdsDataProvider() {\n    return [[-1], [null], [30]];\n}\n```", "```php\n// tests/codeception/unit/models/UserTest.php\n\nprotected function setUp()\n{\n    parent::setUp();\n    // cleanup the User db\n    User::deleteAll();\n}\n```", "```php\ntests\\codeception\\unit\\models\\UserTest::setUpBeforeClass();\n   tests\\codeception\\unit\\models\\UserTest::_before();\n      tests\\codeception\\unit\\models\\UserTest::setUp();\n         tests\\codeception\\unit\\models\\UserTest::testSomething();\n      tests\\codeception\\unit\\models\\UserTest::tearDown();\n   tests\\codeception\\unit\\models\\UserTest::_after();\ntests\\codeception\\unit\\models\\UserTest::tearDownAfterClass();\n```", "```php\n// tests/codeception/unit/models/UserTest\n/** @var User */\nprivate $_user = null;\n\nprotected function setUp()\n{\n    parent::setUp();\n    // setup global User\n    $this->_user = new User;\n    // cleanup the User db\n    User::deleteAll();\n}\n```", "```php\n// tests/codeception/unit/fixtures/UserFixture.php\nnamespace app\\codeception\\tests\\unit\\fixtures;\n\nuse yii\\test\\ActiveFixture;\nclass UserFixture extends ActiveFixture\n{\n    public $modelClass = 'app\\models\\User';\n}\n```", "```php\n// tests/codeception/unit/fixtures/data/user.php\n\nreturn [\n    'admin' => [\n        'id' => 1,\n        'username' => 'admin',\n        'password' => Yii::$app->getSecurity()->generatePasswordHash('admin'),\n        'authkey' => 'valid authkey'\n    ]\n];\n```", "```php\n// tests/codeception/unit/models/UserTest.php\n\npublic function fixtures() {\n    return [\n        'user' => UserFixture::className(),\n    ];\n}\n```", "```php\npublic function fixtures()\n{\n    return [\n        'user' => [\n            'class' => UserFixture::className(),\n            'dataFile' => '@app/tests/codeception/unit/fixtures/data/userModels.php'\n        ]\n    ];\n}\n```", "```php\npublic function testFindIdentityReturnsTheExpectedObject() {\n    $expectedAttrs = $this->user['admin'];\n\n    /** @var User $user */\n    $user = User::findIdentity($expectedAttrs['id']);\n\n    $this->assertNotNull($user);\n    $this->assertInstanceOf('yii\\web\\IdentityInterface', $user);\n    $this->assertEquals($expectedAttrs['id'], $user->id);\n    $this->assertEquals($expectedAttrs['username'], $user->username);\n    $this->assertEquals($expectedAttrs['password'], $user->password);\n    $this->assertEquals($expectedAttrs['authkey'], $user->authkey);\n}\n```", "```php\nprotected function setUp()\n{\n    parent::setUp();\n    $this->_user = new User;\n}\n```", "```php\n$ cd tests\n$ ../vendor/bin/codecept run unit\n\n```", "```php\nPHP Fatal error:  Call to undefined method app\\models\\User::tableName()\n\n```", "```php\n$ ./yii migrate/create table_create_user\nYii Migration Tool (based on Yii v2.0.0-dev)\n\nCreate new migration '/var/www/vhosts/htdocs/migrations/m140906_172836_table_create_user.php'? (yes|no) [no]:yes\nNew migration created successfully.\n$\n\n```", "```php\n// migrations/m140906_172836_table_create_user.php\n\nclass m140906_172836_table_create_user extends Migration\n{\n    public function up()\n    {\n        $this->createTable('user', [\n            'id' => 'pk',\n            'username' => 'varchar(24) NOT NULL',\n            'password' => 'varchar(128) NOT NULL',\n            'authkey' => 'varchar(255) NOT NULL',\n            'accessToken' => 'varchar(255)'\n        ]);\n\n        $this->insert('user', [\n            'username' => 'admin',\n            'password' => Yii::$app->getSecurity()->generatePasswordHash('admin'),\n            'authkey' => uniqid()\n        ]);\n    }\n\n    public function down()\n    {\n        $this->dropTable('user');\n    }\n}\n```", "```php\n$ ./yii migrate/up\nYii Migration Tool (based on Yii v2.0.0-dev)\n\nCreating migration history table \"migration\"...done.\nTotal 1 new migration to be applied:\n m140906_172836_table_create_user\nApply the above migration? (yes|no) [no]:yes\n*** applying m140906_172836_table_create_user\n > create table user ... done (time: 0.022s)\n > insert into user ... done (time: 0.008s)\n*** applied m140906_172836_table_create_user (time: 0.585s)\nMigrated up successfully.\n\n```", "```php\n// config/web.php\n\nif (YII_ENV_DEV) {\n    // ...\n    $config['bootstrap'][] = 'gii';\n    $config['modules']['gii'] = [\n        'class' => 'yii\\gii\\Module',\n        'allowedIPs' => ['127.0.0.1', '::1', '192.168.56.*'],\n    ];\n}\n```", "```php\n// models/User.php\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse yii\\web\\IdentityInterface;\n\nclass User extends ActiveRecord implements IdentityInterface\n{\n```", "```php\n// models/User.php\n\n/**\n * @inheritdoc\n */\npublic static function findIdentity($id) {\n    return self::findOne($id);\n}\n```", "```php\npublic static function findIdentityByAccessToken($token, $type = null) {\n    throw new NotSupportedException('Login by access token not supported.');\n}\n```", "```php\npublic function getId() {\n    return $this->id;\n}\n\npublic function getAuthKey() {\n    return $this->authkey;\n}\n\npublic function validateAuthKey($authKey) {\n    return $this->authkey === $authKey;\n}\n```", "```php\n/**\n * Finds user by username\n *\n * @param  string      $username\n * @return static|null\n */\npublic static function findByUsername($username)\n{\n    return self::findOne(['username' => $username]);\n}\n```", "```php\n/**\n * Validates password\n *\n * @param  string  $password password to validate\n * @return boolean if password provided is valid for current user\n */\npublic function validatePassword($password)\n{\n    return Yii::$app->getSecurity()->validatePassword($password, $this->password);\n}\n```", "```php\n$ ../vendor/bin/codecept run unit models/UserTest.php\nCodeception PHP Testing Framework v2.0.6\nPowered by PHPUnit 4.4-dev by Sebastian Bergmann.\n\nUnit Tests (14) -----------------------------\nTrying to test validate returns false if parameters are not set (tests\\codeception\\unit\\models\\UserTest::testValidateReturnsFalseIfParametersAreNotSet)                              Ok\n[snip]\n\nTime: 3.61 seconds, Memory: 28.75Mb\n\nOK (27 tests, 53 assertions)\n\n```", "```php\nThere was 1 error:\n\n---------\n1) tests\\unit\\models\\LoginFormTest::testLoginCorrect | user should be able to login with correct credentials\nyii\\base\\InvalidParamException: Hash is invalid.\n\nFAILURES! \nTests: 31, Assertions: 64, Errors: 1.\n\n```", "```php\n// tests/codeception/unit/fixtures/data/user.php\n\nreturn [\n    'admin' => [\n        'id' => 1,\n        'username' => 'admin',\n        'password' => Yii::$app->getSecurity()->generatePasswordHash('admin'),\n        'authkey' => 'valid authkey'\n    ]\n];\n```", "```php\nreturn [\n    'user_basic' => [\n        'username' => '-=[ valid username ]=-',\n        'password' => 'This is a valid password!!!',\n        'authkey' => '00%am|%lk;@P .'\n    ],\n    'user_accessToken' => [\n        'username' => '-=[ valid username ]=-',\n        'password' => 'This is another valid password!!! :) <script></script>',\n        'authkey' => uniqid()\n    ],\n    'user_id' => [\n        'id' => 4,\n        'username' => '-=[ valid username ]=-',\n        'password' => 'This is another valid password!!! :)',\n        'authkey' => uniqid()\n    ],\n];\n```", "```php\n// tests/codeception/unit/models/LoginFormTest.php\n\npublic function globalFixtures()\n{\n    return [\n        'user' => UserFixture::className(),\n    ];\n}\n```", "```php\n// tests/codeception/unit/models/UserTest.php\n\npublic function globalFixtures()\n{\n    return [\n        'user' => UserFixture::className(),\n    ];\n}\n\npublic function fixtures()\n{\n    return [\n        'user' => [\n            'class' => UserFixture::className(),\n            'dataFile' => '@app/tests/codeception/unit/fixtures/data/userModels.php'\n        ]\n    ];\n}\n```"]