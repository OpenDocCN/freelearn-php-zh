- en: Feeding the Masses – RSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at what a feed is and how to create one. In fact,
    we will create two! Here are the topics we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Why you would want to provide a feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding what content to include in a feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying content to enable feed selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A brief overview of the Views module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Views module to create feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a block of feed links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why feeds?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a *feed*? **RSS** stands for **Rich Site Summary**. The word "feed"
    has many meanings. In our context, the meaning to consider is the one that you've
    probably heard in regards to broadcast television. For example, there could be
    an event happening outside London that is being covered by a local network. That
    network then allows other networks and stations to tap into their continuous broadcast,
    when desired. That continuous broadcast is referred to as a *feed*, in that it
    is "food" for another to consume. On the internet, a feed is much the same. A
    site provides its content in a stream that is pulled (requested) by a site that
    wants to use that content. That stream is a feed.
  prefs: []
  type: TYPE_NORMAL
- en: Some feeds provide news content. Some are e-commerce feeds that provide products
    that any registered e-commerce site can sell for a commission. Some simply provide
    articles on topics of interest to the readers of sites that consume the feeds.
  prefs: []
  type: TYPE_NORMAL
- en: So, why would you want to provide a feed for your site?
  prefs: []
  type: TYPE_NORMAL
- en: Exposure. Providing a feed makes it possible for other sites to consume it and
    expose your site's content to those who might otherwise never see it.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting content for a feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if some of your site content is secure, or available only to premium subscribers? No
    problem! We're going to look at a way to filter the content selected for the feed,
    or, conversely, filter out content that you do not want selected.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to create three feeds. The first thing we need to decide upon is
    what content the feed will contain...which means determining the selection criteria.
  prefs: []
  type: TYPE_NORMAL
- en: One of our feeds is destined for the pet-loving community. It will contain any
    of our articles related to pets.
  prefs: []
  type: TYPE_NORMAL
- en: Our second feed is for travelers. It will contain any of our articles related
    to travel.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, our third feed will contain any article that not included in the first
    two feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying content for feed selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, we know what criteria we have for our feeds, but how will Drupal know which
    content meets that criteria? Let's discuss two possible methods.
  prefs: []
  type: TYPE_NORMAL
- en: Pick-me flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A *pick-me* flag is a content field that's purpose is to highlight the fact
    that the content applies to something specific, and so is the flag for selecting
    it. It is represented by a Boolean field, which contains `True (-1)` or `False
    (0)`, so that you can think of it as either on or off. It is typically represented
    by a checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: So, for our use, we could add a field called Pets to our article content type,
    and check the box when creating an article if the article touches on pets, and
    the same with a Travel checkbox for travel content.
  prefs: []
  type: TYPE_NORMAL
- en: This makes sense, and is an easy way to determine what content to select, but
    there is one kink in that plan. Every time a new criterion arises, it would mean
    adding yet another field to the content type. Things could get messy quickly.
  prefs: []
  type: TYPE_NORMAL
- en: A pick-me flag works best for a standalone need, such as when an article is
    marked as Published. Fortunately, there is another method available to us.
  prefs: []
  type: TYPE_NORMAL
- en: Tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as content is kept in an entity called a *node*, Drupal also has an entity
    type called *taxonomy*, which is a scientific word for classification. Just as
    nodes are represented by content, taxonomy is represented by vocabularies containing
    terms.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal comes with a taxonomy vocabulary, called Tags. The intended use of tags
    is to categorize content. Additional vocabularies can also be created to hold
    tags for specific use, such as one for travel-related terms, or one for Spanish-language
    terms, but for the purpose of assigning categories applicable to the content,
    this is what the Tags vocabulary was designed for, and it will work for us.
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to go back and edit the article *A Moment in the Life of My Dog*,
    and in the *Tags* field, which currently contains `Sasha` and `donuts`, I'm going
    to add one more, `pets`, and save it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, I will add two additional pieces of content, both related to travel,
    and will tag them with travel, as well as tags specific to the travel type and
    destination, as shown in the following screenshots. The following screenshot is
    related to Iceland:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0aec6292-af37-401d-be2e-ed4d08e357dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the other is related to the Caribbean:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7cddc26f-1db3-4b58-ba9a-e6177a1a5b76.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we need one final piece of content for the third of our feeds. The tag
    for this content will be *leftovers*, since the feed is for any content not tagged
    as pets or travel.
  prefs: []
  type: TYPE_NORMAL
- en: Having created some content for testing our feed, let's look at how we're going
    to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views is a very popular Drupal module. It used to be a contributed module, but
    is now part of Drupal's core code.
  prefs: []
  type: TYPE_NORMAL
- en: Views provides many features, and so resists a single-sentence description.
    Rather than trying to describe what it is for, let me give you a simple description
    of how it works, from which you can infer many of its potential uses.
  prefs: []
  type: TYPE_NORMAL
- en: Views retrieves data from Drupal based on selection criteria and data relationships,
    arranges it, and outputs it in any number of ways, whether as a component of a
    Drupal page, as an external file, or as a feed – which is meaningful for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, navigate to Extend (`/admin/modules`) and enable both Views
    and Views UI. The former is the module that provides the services for each view
    to run, while the latter provides a visual tool for creating views.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the container view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we are going to be creating three feeds. The output choices and displays
    of the Views module includes both feeds and blocks, and a single view can act
    as a container for multiple displays. Although we will be creating three view
    displays, they will all be contained in one view. Let''s create it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Structure | Views (`/admin/structure/views`) and click the +Add
    view button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the View name text box, we'll enter **Custom RSS Feeds**. I am naming it
    this way to differentiate it from the predefined RSS view included with the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Below the name is a checkbox for Description. Let's check it, and in the text
    box that appears, enter `Tutorial examples`. This description will appear in the
    list of views at */admin/structure/views*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The remainder of the page allows us to provide information in an easy manner
    that will be carried forward to the Views UI, where we can still enter it but
    with a little more effort. However, we are focusing on creating feeds, and the
    feed display type is not offered here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Save and edit button to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the Pets feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now on the Views UI form for our view. The following screen will look
    slightly different than what you will see, because I have opened the Advanced
    column on the right so that you can see the entire form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7df0b34e-136f-4744-bb9b-3a1caf8f9ce0.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, the only display that exists for our view is the Master display,
    which acts like a template. Settings made in it are carried forward to any displays
    added to the view. Since we will be creating more than one type of display, feeds,
    and a block, we won't enter the settings on the Master.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is select the type of display we want. Most often,
    this will be a page or a block, but we want to create a feed. Click the +Add button
    at the top and select Feed from the list. Now that a display has been added, the
    Master display will be hidden and replaced with Feed. The asterisk is present
    because the display has been modified but not yet saved.
  prefs: []
  type: TYPE_NORMAL
- en: Let's work our way through the settings, one panel at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Display name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The display name is currently Feed, which would be fine if we were to only have
    one in the view. Since we will be having three, we'll make the name more specific.
    Click the word Feed and enter `Pets Feed` in the popup, and then click Apply*.*
  prefs: []
  type: TYPE_NORMAL
- en: Title
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to add a title, so click None, and in the popup, enter `D8QuickStart
    Pets Feed`, and then click Apply*.*
  prefs: []
  type: TYPE_NORMAL
- en: Format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want the format to be an RSS feed, so that can be left as is. Click the Settings
    link and enter the same string that we used for the feed title, that is, D8QuickStart
    Pets Feed. We don't have to use the same one, but it provides a descriptive title
    that also works to describe the RSS content. Click the Apply button.
  prefs: []
  type: TYPE_NORMAL
- en: Feed settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm going out of order for a moment. The reason for this is that Views provides
    a live preview area that shows what the view output will be based on what settings
    have been entered. This preview is at the bottom of the page, but if you scroll
    down, you will just see an error telling you that the feed should have a path,
    but none has been supplied. As long as an error is present, no preview will be
    generated, so let's get rid of the error.
  prefs: []
  type: TYPE_NORMAL
- en: We'll make our path `/pets/feed`. Click Path and enter that into the text box
    in the popup, click Apply, and click Save at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Scrolling down to the Preview area, you will now see a preview of the feed.
    It might look a bit strange, but an RSS reader will know what to do with it. But
    all of our content is there...not just articles about pets. Let's address that
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering the criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're skipping the Fields pane because we're not going to be specifying specific
    fields. We'll let Views parse our article content itself.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding Content Published, there may be circumstances where unpublished content
    should be included in the feed, but this isn't one of those times. Views has set
    this to **Yes** to show only published content.
  prefs: []
  type: TYPE_NORMAL
- en: The next filter we want to put in place will be to limit the select to Articles.
    Click the Add button and type **Content type** in the Search text box. The list
    of filter criteria will be filtered to just that one, and we'll check the box
    next to it.
  prefs: []
  type: TYPE_NORMAL
- en: While we're at it, let's also enter the criterion that will allow us to select
    only articles about pets. Clear the Search text box and enter `Tax`. From the
    resulting list, check the box for Has taxonomy term, and then click the Add and
    configure filter criteria button.
  prefs: []
  type: TYPE_NORMAL
- en: The first popup is for specifying what content types we want included in our
    feed. Since we only want Articles, we'll check that box, then click Apply and
    continue.
  prefs: []
  type: TYPE_NORMAL
- en: The next popup is used to select the taxonomy vocabulary that will contain the
    term(s) to which we will limit the content. Since Tags is the only vocabulary
    we have, it is already selected. Click Apply and continue. In the subsequent popup,
    enter `pets` into the text box and click Apply.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we scroll down to the Preview area, the only content present is the
    *A Moment in the Life of My Dog* article.
  prefs: []
  type: TYPE_NORMAL
- en: Sort criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one criterion present, but it is the one we want. The content
    will be ordered based on its creation date, with the most recent coming first.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that, we''ve completed our first feed. To test it, you will need to have
    a RSS feed reader installed in your browser. Given that, and entering `/pets/feed`,
    we can see that the feed works as it should:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bd7296e-67a2-4cfa-ac1e-84fa27357873.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's click Save and move on to our next feed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Travel feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Travel feed will be much like the Pets feed. One thing we would like to
    do differently is have the feed include the image that is part of the content,
    because travel consuming sites are very visually focused.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have already created a feed display, we can clone it and make the changes
    we need rather than starting from scratch. Find the drop-down that reads View
    Pets Feed and click the arrow, and then click *Duplicate Pets Feed*.
  prefs: []
  type: TYPE_NORMAL
- en: You will note that we now have two Pets Feed listings in the Displays pane.
    The highlighted one is the new one. Let's quickly change its name before we get
    confused by both having the same name. Click the link for Pets Feed beside Display
    name and change the name to `Travel Feed` before clicking Apply.
  prefs: []
  type: TYPE_NORMAL
- en: Title
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will make the same change to the Title, changing Pets to `Travel`, but before
    clicking Apply, ensure that you change the drop-down from *All displays* to *This
    feed (override)*, which will change the text of the *Apply* button to *Apply (this
    display)*, otherwise you will change both feeds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb9eb42c-d406-4499-8fd0-59c5f8a68e6d.png)'
  prefs: []
  type: TYPE_IMG
- en: When working with more than one display, be careful when making settings changes
    to ensure that the change is configured properly, either for only the display
    you are currently editing, or for all displays, if that is your intention. Accidentally
    applying a change to all displays (the default) can result in a lot of extra work.
    The easiest way to remember this is to always note what the Apply button says.
  prefs: []
  type: TYPE_NORMAL
- en: Feed settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm going out of order again. This time, we need to change the path, which has
    been copied from the Pets feed.
  prefs: []
  type: TYPE_NORMAL
- en: We'll make our path `/travel/feed`. Click *Path* and enter that into the text
    box in the popup, and click *Apply*.
  prefs: []
  type: TYPE_NORMAL
- en: Format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make the same change under Settings in the Format section, by changing **Pets**
    to **Travel**. You will notice that this setting does not offer the choices that
    we just discussed. Some settings apply only to a single display.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to change things up somewhat in order to accommodate our need for
    having the content image included in the feed. Let's tell Drupal that we want
    the feed to be in a different format than the default, the output of which you
    saw for the Pets feed.
  prefs: []
  type: TYPE_NORMAL
- en: Beside *Show*, click *Use site default RSS settings* and from the popup select
    *Teaser*. A content teaser typically contains text and an image—if the content
    contains one—and that is what we want. Click the *Apply* button.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're skipping the Fields pane because we're not going to be specifying specific
    fields. We'll let Views parse our article content itself.
  prefs: []
  type: TYPE_NORMAL
- en: Only one setting from the Pets feed needs to be changed. Click the *Has taxonomy
    term (= pets)* link. In the subsequent popup, enter `travel` into the text box,
    select *This feed (override)* in the dropdown at the top, and click *Apply (this
    display)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we scroll down to the Preview area, we will be able to see our feed
    with teasers of our travel content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f23274d-cd7f-4da6-9ca7-c58ab148830b.png)'
  prefs: []
  type: TYPE_IMG
- en: Two down and one to go!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Leftovers feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will clone the Pets feed, since it doesn't include images and neither will this
    one. Click the Pets Feed button in Displays to switch to it from the Travel Feed.
    Find the drop-down that reads *View Pets Feed* and click the arrow, and then click
    *Duplicate Pets Feed*.
  prefs: []
  type: TYPE_NORMAL
- en: You will note that we now have two *Pets Feed* listings in the *Display**s*
    pane. The highlighted one is the new one. Let's quickly change its name before
    we get confused by both having the same name. Click the link for *Pets Feed* beside
    *Display name* and change the name to `Leftovers Feed` before clicking *Apply*.
  prefs: []
  type: TYPE_NORMAL
- en: Title
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will make the same change to the *Title*, changing Pets to `Leftovers`, but before
    clicking *Apply*, ensure that you change the drop-down from *All displays* to
    *This feed (override)*, which will change the text of the *Apply* button to *Apply
    (this display)*, otherwise you will change all feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Feed settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll make our path `/leftovers/feed`. Click *Path* and enter that into the
    text box in the popup, and then click *Apply*.
  prefs: []
  type: TYPE_NORMAL
- en: Format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make the same change under Settings in the Format section, changing Pets to
    `Travel`.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click the *Has taxonomy term (= pets)* link. In the subsequent popup, change
    *Is one of* to *Is none of*. Enter **travel** into the text box after **pets**,
    separating them with a comma, select *This feed (override)* in the drop-down at
    the top, and click *Apply (this display)*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we scroll down to the Preview area, we will see our final feed containing
    all content other than the content that was used for the first two feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Great! We've finished with our view. Let's create the menu block!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Feed Links block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our feeds won''t be of much use if site visitors can''t find them, so we will
    create a means for them to do so. We''re not going to be using Views for this.
    You might wonder why, since Views can create a block display. Views is made to
    select items (rows of data) and create an output for each, whether that be feed
    items, pages of articles, or a bulleted list. Our links are going to be HTML text
    unrelated to rows. In other words, this is one block of text without any regard
    to a selection of article content or any other content. Because of that, the easiest
    approach is to create a custom block to act as a feed menu on the home page, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to *Structure* | *Block layout* (`/admin/structure/block`) and click
    the tab for *Custom block library*. Then, click the *+Add custom block* button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the *Block description*, enter `RSS feeds`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the *Body*, click Source in the toolbar, and then enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Click Source again, then click Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned what RSS feeds are and how they are used, and
    how to create content meant for a feed. We have learned about the Views module
    and what views are, how to create a view with multiple feed displays, and how
    to create a block menu.
  prefs: []
  type: TYPE_NORMAL
- en: In our final chapter, we will put everything together in a home page, including
    making use of the block we created in this chapter.
  prefs: []
  type: TYPE_NORMAL
