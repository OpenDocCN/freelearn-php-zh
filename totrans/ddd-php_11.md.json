["```php\nnamespace Lw\\Application\\Service\\User;\n\nclass SignUpUserRequest\n{\n    private $email;\n    private $password;\n\n    public function __construct($email, $password)\n    {\n        $this->email = $email;\n        $this->password = $password;\n    }\n\n    public function email()\n    {\n        return $this->email;\n    }\n\n    public function password()\n    {\n        return $this->password;\n    }\n}\n\n```", "```php\n// ...\nclass UsersController extends Controller\n{\n    /**\n     * @Route('/signup', name = 'signup')\n     * @param Request $request\n     * @return Response\n     */\n    public function signUpAction(Request $request)\n    {\n        // ...\n        $signUpUserRequest = new SignUpUserRequest(\n            $request->get('email'),\n            $request->get('password')\n        );\n        // ...\n    }\n// ...\n\n```", "```php\n// ...\n$app->match('/signup', function (Request $request) use ($app) {\n    $form = $app['sign_up_form'];\n    $form->handleRequest($request);\n\n    if ($form->isValid()) {\n        $data = $form->getData();\n\n        try {\n            $app['sign_in_user_application_service']->execute(\n                new SignUpUserRequest(\n                     $data['email'],\n                     $data['password']\n                )\n            );\n\n            return $app->redirect(\n                $app['url_generator']->generate('login')\n            );\n        } catch (UserAlreadyExistsException $e) {\n            $form\n                ->get('email')\n                ->addError(\n                    new FormError(\n                        'Email is already registered by another user'\n                    )\n                );\n        } catch (Exception $e) {\n            $form\n                ->addError(\n                    new FormError(\n                      'There was an error, please get in touch with us'\n                    )\n                );\n        }\n    }\n\n    return $app['twig']->render('signup.html.twig', [\n        'form' => $form->createView(),\n    ]);\n});\n\n```", "```php\nnamespace Lw\\Application\\Service\\User;\n\nuse Ddd\\Application\\Service\\ApplicationService;\nuse Lw\\Domain\\Model\\User\\User;\nuse Lw\\Domain\\Model\\User\\UserAlreadyExistsException;\nuse Lw\\Domain\\Model\\User\\UserRepository;\n\nclass SignUpUserService\n{\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository) \n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function execute(SignUpUserRequest $request)\n    {\n        $email = $request->email();\n        $password = $request->password();\n\n        $user = $this->userRepository->ofEmail($email);\n        if ($user) {\n            throw new UserAlreadyExistsException();\n        }\n\n        $this->userRepository->add(\n            new User(\n                $this->userRepository->nextIdentity(),\n                $email ,\n                $password\n            )\n        );\n    }\n}\n\n```", "```php\n$redisClient = new Predis\\Client([\n    'scheme' => 'tcp',\n    'host' => '10.0.0.1',\n    'port' => 6379\n]);\n\n$userRepository = new RedisUserRepository($redisClient);\n$signUp = new SignUpUserService($userRepository);\n$signUp->execute(new SignUpUserRequest(\n    'user@example.com',\n    'password'\n));\n\n```", "```php\n$app = new \\Silex\\Application();\n$app['redis_parameters'] = [\n     'scheme' => 'tcp',\n     'host' => '127.0.0.1',\n     'port' => 6379\n];\n\n$app['redis'] = $app->share(function ($app) {\n    return new Predis\\Client($app['redis_parameters']);\n});\n\n$app['user_repository'] = $app->share(function($app) {\n    return new RedisUserRepository(\n        $app['redis']\n    );\n});\n\n$app['sign_up_user_application_service'] = $app->share(function($app) {\n    return new SignUpUserService(\n        $app['user_repository']\n    );\n});\n\n// ...\n\n$app->match('/signup' ,function (Request $request) use ($app) {\n    // ...\n    $app['sign_up_user_application_service']->execute(\n        new SignUpUserRequest(\n            $request->get('email'),\n            $request->get('password')\n        )\n    );\n    // ...\n});\n\n```", "```php\n<?xml version=\" 1.0\" ?>\n<container \n\n    xsi:schemaLocation=\"\n        http://symfony.com/schema/dic/services\n        http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <services>\n        <service\n            id=\"sign_up_user_application_service\"\n            class=\"SignUpUserService\">\n            <argument type=\"service\" id=\"user_repository\" />\n        </service>\n\n        <service\n            id=\"user_repository\"\n            class=\"RedisUserRepository\">\n            <argument type=\"service\">\n                <service class=\"Predis\\Client\" />\n            </argument>\n        </service>\n    </services> \n</container>\n\n```", "```php\nclass SignUpUserService \n{ \n    // ...\n    public function execute(SignUpUserRequest $request)\n    {\n       // ...\n    }\n}\n\n```", "```php\nclass UserService\n{\n    // ...\n    public function signUp(SignUpUserRequest $request)\n    {\n        // ...\n    }\n\n    public function signIn(SignUpUserRequest $request)\n    {\n        // ...\n    }\n\n    public function logOut(LogOutUserRequest $request)\n    {\n        // ...\n    }\n}\n\n```", "```php\nclass SignUpUserService\n{\n    // ...\n\n    public function execute(SignUpUserRequest $request)\n    {\n        $user = new User(\n            $this->userRepository->nextIdentity(),\n            $email,\n            $password\n        );\n\n        $this->userRepository->add($user);\n\n        return $user;\n    }\n}\n\n```", "```php\n$app-> match( '/signup' , function (Request $request) use ($app) {\n   // ...\n   $user = $app['sign_up_user_application_service']->execute(\n       new SignUpUserRequest(\n           $request->get('email'),\n           $request->get('password'))\n   );\n   $user->updateEmailAddress('shouldnotupdate@email.com');\n   // ...\n});\n\n```", "```php\nclass UserDTO\n{\n    private $email ;\n    // ...\n\n    public function __construct(User $user)\n    {\n        $this->email = $user->email ();\n        // ...\n    }\n\n    public function email ()\n    {\n        return $this->email ;\n    }\n}\n\n```", "```php\nclass SignUpUserService\n{\n    public function execute(SignUpUserRequest $request)\n    {\n        // ...\n\n        $user = // ...\n\n        return new UserDTO($user);\n    }\n}\n\n```", "```php\n$app->match('/signup' , function (Request $request) use ($app) {\n    /**\n     * @var UserDTO $user\n     */\n    $userDto=$app['sign_up_user_application_service']->execute(\n        new SignUpUserRequest(\n            $request->get('email'),\n            $request->get('password')\n        )\n    );\n\n    // ...\n});\n\n```", "```php\nclass SignUpUserService\n{\n    private $userDtoAssembler;\n\n    public function __construct(\n        UserRepository $userRepository,\n        UserDTOAssembler $userDtoAssembler\n    ) {\n        $this->userRepository = $userRepository;\n        $this->userDtoAssembler = $userDtoAssembler;\n    }\n\n    public function execute(SignUpUserRequest $request)\n    {\n        $user = // ...\n\n        return $this->userDtoAssembler->assemble($user);\n    }\n}\n\n```", "```php\ninterface UserDataTransformer\n{\n    public function write(User $user);\n\n    /**\n     * @return mixed\n     */\n    public function read();\n}\n\n```", "```php\nclass JsonUserDataTransformer implements UserDataTransformer\n{\n    private $data;\n\n    public function write(User $user)\n    {\n        // More complex logic could be placed here\n        // As using JMSSerializer, native json, etc.\n        $this->data = json_encode($user);\n    }\n\n    /**\n     * @return string\n     */\n    public function read()\n    {\n        return $this->data;\n    }\n}\n\n```", "```php\nclass SignUpUserService\n{\n    private $userRepository;\n    private $userDataTransformer;\n\n    public function __construct(\n        UserRepository $userRepository,\n        UserDataTransformer $userDataTransformer\n    ) {\n        $this->userRepository = $userRepository;\n        $this->userDataTransformer = $userDataTransformer;\n    }\n\n    public function execute(SignUpUserRequest $request)\n    {\n        $user = // ...\n        $this->userDataTransformer()->write($user);\n    }\n\n    /**\n     * @return UserDataTransformer\n     */\n    public function userDataTransformer()\n    {\n        return $this->userDataTransformer;\n    } \n}\n\n```", "```php\nclass SignUpUserServiceTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n     * @var \\Lw\\Domain\\Model\\User\\UserRepository\n     */\n    private $userRepository;\n\n    /**\n     * @var SignUpUserService\n     */\n    private $signUpUserService;\n\n    public function setUp()\n    {\n        $this->userRepository = new InMemoryUserRepository();\n        $this->signUpUserService = new SignUpUserService(\n            $this->userRepository\n        );\n    }\n\n    /**\n     * @test\n     * @expectedException   \n     *     \\Lw\\Domain\\Model\\User\\UserAlreadyExistsException\n     */\n    public function alreadyExistingEmailShouldThrowAnException()\n    {\n        $this->executeSignUp();\n        $this->executeSignUp();\n    }\n\n    private function executeSignUp()\n    {\n        return $this->signUpUserService->execute(\n            new SignUpUserRequest(\n                'user@example.com',\n                'password'\n            )\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function afterUserSignUpItShouldBeInTheRepository()\n    {\n        $user = $this->executeSignUp();\n\n        $this->assertSame(\n            $user,\n            $this->userRepository->ofId($user->id())\n        );\n    }\n}\n\n```", "```php\nclass SignUpUserServiceTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @test\n     */\n    public function itShouldPublishUserRegisteredEvent()\n    {\n        $subscriber = new SpySubscriber();\n        $id = DomainEventPublisher::instance()->subscribe($subscriber);\n\n        $user = $this->executeSignUp();\n        $userId = $user->id();\n\n        DomainEventPublisher::instance()->unsubscribe($id);\n        $this->assertUserRegisteredEventPublished(\n            $subscriber, $userId\n        );\n    }  \n\n    private function assertUserRegisteredEventPublished(\n        $subscriber, $userId\n    ) {\n        $this->assertInstanceOf(\n            'UserRegistered', $subscriber->domainEvent\n        );\n        $this->assertTrue(\n            $subscriber->domainEvent->userId()->equals($userId)\n        );\n    }\n}\n\nclass SpySubscriber implements DomainEventSubscriber\n{\n    public $domainEvent;\n\n    public function handle($aDomainEvent)\n    {\n        $this->domainEvent = $aDomainEvent;\n    }\n\n    public function isSubscribedTo($aDomainEvent)\n    {\n        return true;\n    }\n}\n\n```", "```php\ninterface TransactionalSession\n{\n    /**\n     * @return mixed\n     */\n    public function executeAtomically(callable $operation);\n}\n\n```", "```php\nclass DoctrineSession implements TransactionalSession\n{\n    private $entityManager;\n\n    public function __construct(EntityManager $entityManager)\n    {\n        $this->entityManager = $entityManager;\n    }\n\n    public function executeAtomically(callable $operation)\n    {\n        return $this->entityManager->transactional($operation);\n    }\n}\n\n```", "```php\n/** @var EntityManager $em */\n$nonTxApplicationService = new SignUpUserService(\n    $em->getRepository('BoundedContext\\Domain\\Model\\User\\User')\n);\n\n$txApplicationService = new TransactionalApplicationService(\n    $nonTxApplicationService,\n    new DoctrineSession($em)\n);\n\n$response = $txApplicationService->execute(\n    new SignUpUserRequest(\n        'user@example.com',\n        'password'\n    )\n);\n\n```", "```php\nclass TransactionalApplicationService implements ApplicationService\n{\n    private $session;\n    private $service;\n\n    public function __construct(\n        ApplicationService $service, TransactionalSession $session\n    ) {\n        $this->session = $session;\n        $this->service = $service;\n    }\n\n    public function execute(BaseRequest $request)\n    {\n        $operation = function () use ($request) {\n            return $this->service->execute($request);\n        };\n\n        return $this->session->executeAtomically($operation);\n    }\n}\n\n```", "```php\n// ...\n$subscriber = new SpySubscriber();\nDomainEventPublisher::instance()->subscribe($subscriber);\n\n$applicationService = // ...\n$applicationService->execute(...);\n\n```", "```php\n// You build a simple message object like this:\nclass PurchaseProductCommand\n{\n    protected $productId;\n    protected $userId;\n\n    // ...and constructor to assign those properties...\n}\n\n// And a Handler class that expects it:\nclass PurchaseProductHandler\n{\n    public function handle(PurchaseProductCommand $command)\n    {\n        // use command to update your models, etc\n    }\n}\n// And then in your Controllers, you can fill in the command using your favorite\n// form or serializer library, then drop it in the CommandBus and you're done!\n$command = new PurchaseProductCommand(42, 29);\n$commandBus->handle($command);\n\n```"]