- en: Chapter 8. Programming phpBB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve learned a lot about installing phpBB, configuring it, and customizing
    it to suit our community’s needs. It’s now time for the last, most advanced chapter
    of the book, describing what you need to know in order to program new custom phpBB
    features.
  prefs: []
  type: TYPE_NORMAL
- en: PHP programming knowledge and some SQL knowledge are pre-requisites for a good
    understanding of the chapter, but even if you’re not familiar with PHP, you can
    still skim through the examples, if only to whet your programming appetite. Who
    knows, maybe you’ll like what you see and decide to learn some more PHP.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is not a comprehensive guide to the phpBB programming experience,
    but instead will concentrate on the most used phpBB libraries and functions. The
    chapter starts with a simple "Hello phpBB World" script and slowly moves on to
    include more complicated examples. At the end of the chapter, you’ll develop an
    all-new phpBB script called "What’s Up?", which displays the recent topics from
    all the forums in your board on a single screen, while respecting the user-specific
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the "Hello phpBB World!" script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using phpBB messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: phpBBs multi-language system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using phpBB templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other handy phpBB functions and coding standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together to create a new phpBB add-on script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello phpBB World!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s a tradition when you start learning a new programming language or technology;
    the first thing you learn to do is how to write a simple application that just
    displays "Hello World!". Let’s see how to do this in phpBB.
  prefs: []
  type: TYPE_NORMAL
- en: First off, just to give you an idea of what the goal is, here’s the result of
    executing the Hello World script, displayed in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello phpBB World!](img/1132_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here’s the code to produce the result in the screenshot above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In order to reproduce this on your board, you just need to create a new blank
    text file named, for example, `helloBB.php`, type the earlier code into the file,
    save it, and copy it to your board’s root folder. You can then access the newly
    created script with your preferred browser (if your board is located at [http://www.yourdomain.com/forum](http://www.yourdomain.com/forum),
    you can go to [http://www.yourdomain.com/forum/helloBB.php](http://www.yourdomain.com/forum/helloBB.php)
    to access this script.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code for this file (and for all the examples in the chapter) can
    be downloaded from [http://www.packtpub.com](http://www.packtpub.com).
  prefs: []
  type: TYPE_NORMAL
- en: Before reading the explanations, take a look at the code; take the time to read
    it and see if you can figure out what’s happening in the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script is divided into *five code blocks* delimited by empty lines. The
    actual work of the script is done in the *fourth* block—that’s where the "Hello"
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the script is setting up the phpBB environment for the actual work
    to be performed. Every script that you write should have the same flow, so you
    can use this script as a prototype for all your future scripts and just replace
    the "working" part with the functionality you require. This being said, you don’t
    really need to know what’s happening outside the fourth block but if you’re curious,
    here’s some more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what’s happening in the *first* block:'
  prefs: []
  type: TYPE_NORMAL
- en: On the first line, a constant called `IN_PHPBB` is defined. This is a security
    measure that will be discussed in a bit more detail later in the chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then the phpBB root directory is defined, which in this case is the current
    directory since the script is located in the phpBB root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then a simple file called `extension.inc` is included. It only defines the extension
    of the PHP files on the server. Most likely the extension will be `.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last line of the first block, a really important file—`common.php`—is
    included. This script is responsible for the most of the phpBB environment setup
    and configuration. You can look into its source for more details, but just to
    have a general idea, this script is responsible for initializing the forum configuration,
    establishing a database connection, and including the other libraries and functions
    that phpBB cannot do without.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The *second* block of code is responsible for calling two functions that deal
    with the session data and user preferences. The *third* and the *fifth* blocks
    are including respectively the header and the footer of the phpBB graphical user
    interface. The header is everything you see on the screenshot that is *before*
    the `Hello, phpBB World!` line, and the footer is everything *after* that. If
    you program a special script, for example a pop-up window script, you may not
    necessarily need the header and the footer.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the basic structure of a phpBB script, let’s move ahead and
    retrieve some data from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The database connectivity in phpBB is an important topic, so it needs special
    attention. This section gives you some background information about the database
    abstraction used in phpBB, and some examples of its use to retrieve data from
    your database.
  prefs: []
  type: TYPE_NORMAL
- en: Database Abstraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you know already, phpBB can work with different databases. To achieve this
    result without re-coding the whole system, phpBB employs a programming technique
    called **database abstraction**. This simply means that there are several scripts
    (classes), specific for each supported database system that in a different way
    achieve the same result. In this case, the other phpBB scripts don’t need to know
    anything about the specific database system, they just call the functions (class
    methods) of the database abstraction class and it does the work on the specific
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to execute an SQL query on a MySQL database, PHP scripts use the
    `mysql_query()` function. To do the same on an MS Access database, `odbc_exec()`
    is used. So, as part of the database abstraction mechanism, phpBB is defining
    individual classes that work on different database systems: one class for MySQL,
    one for MS Access, and so on for the other supported RDBMS. The classes have different
    implementations, but share the same "public interface", meaning all classes have
    the same set of functions (methods). So when you want to execute an SQL query,
    all you need to do is use the `sql_query()` method from the phpBB database abstraction
    layer without having to understand how this method is implemented and what underlying
    database system is used. Abstracting and concentrating on the more important stuff,
    while leaving other classes responsible for some details—that’s the beauty of
    the object-oriented programming!'
  prefs: []
  type: TYPE_NORMAL
- en: In the `common.php` script (which we mentioned earlier) a database connection
    is established for you and the `$db` variable is defined, containing an object
    of the appropriate database class. Again, you don’t care what type of database
    system is used; you only need to know the programming interface of the phpBB abstraction
    layer. This may sound like we’re going into more trouble learning additional functions
    and how they work, but this is in fact a good thing, because this way you code
    once and then reuse your code on any database supported by phpBB.
  prefs: []
  type: TYPE_NORMAL
- en: One last thing about the database abstraction—the use of standard SQL commands.
    If you use any SQL commands or functions specific to a particular RDBMS, then
    be aware that this functionality may not exist in other systems. This shouldn’t
    be a problem in general, because you don’t just switch between different databases
    every day, but it’s still something you should know.
  prefs: []
  type: TYPE_NORMAL
- en: Database Abstraction Working
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s take a look at an example of how the phpBB database abstraction layer
    works. You’ll create a script that shows a counter of how many words were used
    on the board forums so far. phpBB has a full text search system that stores all
    the used words into a database table. So for the purposes of the example, all
    you need to do is count the number of rows in this table.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help visualize what you’re aiming at, here’s the result of the script execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Database Abstraction Working](img/1132_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the source code used to achieve it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save this code into a file called `phpBBdb.php` (or get it from the book’s code
    download), copy the file to your phpBB root, and give it a try in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this script follows the structure of the previous one, only
    the "working" part was changed. Let’s discuss this part a bit.
  prefs: []
  type: TYPE_NORMAL
- en: First we start with a SQL query to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this query, `SEARCH_WORD_TABLE` is a constant that defines the name of the
    table that contains the full-text search data. If you remember, during the installation
    you could specify a table prefix for all the tables in the database. Using constants
    (such as `SEARCH_WORD_TABLE, POSTS_TABLE`, and so on) instead of hard-coded table
    names allows phpBB to offer this feature. You can see how all database-related
    constants (as well as other constants) are defined by looking at the `includes/constants.php`
    script. By default, the table prefix is `phpbb_`, so after the constant is replaced
    with its value, the query will look like `SELECT COUNT(*) FROM phpbb_search_wordlist`;.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s take a look at the next the next line of code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This line executes the SQL query calling the `sql_query()` method of the instance
    of the appropriate DB abstraction class (which you didn’t need to worry about).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is followed by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These lines check whether the query was executed successfully. If not, an error
    message is displayed (you’ll find out more about the messages in a bit). After
    the query is successfully executed, it’s time to get the results of the execution.
    (The phpBB abstraction layer offers a variety of ways to do that, which will be
    discussed later.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This line gets a row of results as an array and assigns it to a variable called
    `$row`. In this case, only one row (record), actually only one field, is returned.
    So `$row[0]` will contain the value that we want. The zero stands for offset zero
    in the row of returned results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The last thing left is to display the value using `echo`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using the phpBB Database Abstraction Layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We mentioned that there are several ways to retrieve data from the result of
    a query execution, after the query has been executed using `sql_query()`. Let’s
    see the options.
  prefs: []
  type: TYPE_NORMAL
- en: Option 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The example here used the `sql_fetchrow()` method. This method returns the
    results as both enumerated and associative array. The keys of the associative
    array are the field names in the result set—the same result as above could have
    been achieved by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Clearly, the above is not very typing-friendly. A better option would be to
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will work if the query is slightly modified to use `words` as an alias
    to `COUNT(*)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Option 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another way to get results from an executed query is by using the `sql_fetchrowset()`
    method. It works like `sql_fetchrow()`, except that it returns the data for all
    the records matched by a query. If you use `sql_fetchrow()`, you have to call
    this method in a loop until you reach the end of the result set, while `sql_fetchrowset()`
    returns all results and you loop through an array of results. The second option
    is somewhat friendlier, but consumes more memory because it requires copying the
    result set into the memory as an array. It’s thus not recommended for use with
    queries that will return huge result sets, but is OK for smaller "everyday" queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the difference, you can `print_r()` the results of both functions.
    From `sql_fetchrow()`, you’ll get something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '.. and from `sql_fetchrowset()`, you’ll get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Option 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to get the result from an executed query is by using `sql_fetchfield()`,
    which returns the result from one field only, and this field is referenced by
    name. To get the expected result from the previous example, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t know the field name, but know its offset in the result-set row,
    you can use the `sql_fieldname()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here again zero is the offset of the field you’re interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Using phpBB Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, you already saw how phpBB messages are used. Now it’s
    time to take a closer look at those messages and test them in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to see a phpBB message in action, you can simply use the previous
    example, but this time, introduce an invalid command in the SQL string; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you save the file that you’ve just modified as `phpBBmessage.php` and preview
    it in your browser, you’ll see an error message caused by the invalid SQL string.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using phpBB Messages](img/1132_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This message was caused by the following piece of code from the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here the `message_die()` function available in phpBB was used. You see all
    the details of the error because the forum runs in debug mode. When in production
    (when your forum is live) it’s a good idea to have the debug mode turned off.
    You can do this by changing a line in the `constants.php` script, located in the
    `includes` folder. The debug setup code is located at the very top of the `constants.php`
    script. Make sure the `DEBUG` constant is set to `0`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If the debug mode is disabled, the above message will be much less verbose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using phpBB Messages](img/1132_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `message_die()` phpBB function can be used for purposes other than for
    error messages. For instance, it can be used to display much nicer results from
    the database example discussed in the previous section of this chapter (`helloBBdb.php`).
    In this database example, change the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `helloBBmessage2.php` and view it in your browser. The result
    will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using phpBB Messages](img/1132_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s some information about the six function parameters you can use when
    calling `message_die()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Message type**: Can be `GENERAL_MESSAGE, CRITICAL_MESSAGE, GENERAL_ERROR`,
    or `CRITICAL_ERROR`, depending on the severity of the message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message text**: Can be anything you want to communicate to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message title**: If you dont supply it, a default title will be used based
    on the message type. In the last example, the title was **Word count**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error line** (for debug mode only): This contains the line in the script
    where the error occurred. The way to pass this parameter is just to use the `__LINE__`
    PHP core constant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error file**: (for debug mode only): This is the filename of the script that
    caused the error. As with the previous parameter, just use `__FILE__` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL**: SQL string (if any) related to the error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Of all the function parameters, only the first (message type) is a required
    parameter: the rest are optional.'
  prefs: []
  type: TYPE_NORMAL
- en: Using phpBB’s Multi-Language System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous examples, a few texts were displayed to the user. The problem
    with these texts was that they were in English only, and might not be understood
    by visitors who browse your forums in a language other than English. To offer
    multi-lingual support your custom scripts, you can make use of phpBB’s multi-language
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The language folder of your phpBB installation contains sub-folders for each
    installed language, like `lang_english, lang_spanish`, etc. These folders have
    a number of files, but the one you’ll be interested in the most, is called `lang_main.php`.
    This file contains static texts, defined as elements of an associative array called
    `$lang`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of this file (before the "That’s `all, Folks!"` comment) you can
    add your texts as new array elements. In the previous example (`helloBBmessage2.php`)
    two texts were used: `Word count` and `Hey, did you know that` *(number of words
    here)* `words were used in my board so far!?`. You can define them in `lang_main.php`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`%d` is used as a placeholder for the actual number of words, and it’s to be
    replaced in your script. You can use anything as a replaceable placeholder, but
    phpBB team has adopted the usage of the PHP `printf()` function. For details on
    how `printf()` and `sprintf()` work, you can consult the PHP manual entries at
    [http://php.net/printf](http://php.net/printf) and [http://php.net/sprintf](http://php.net/sprintf).'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve probably spotted a slight change in the text of the message. Well, just
    to make the message a bit different and at the same time to test how HTML is supported,
    the word count value `%d` was enclosed with the `<strong>` HTML tags to emphasize
    the number of words.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that your texts are in the `lang_main.php` file, they will be initialized
    automatically every time your script is accessed. So you can use them in your
    script by changing the call to `message_die()` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here’s a complete listing of the modified script. You can save it as `helloBBlangs.php`
    and test it on your board. Don’t forget the changes to `lang_main.php` and, if
    your board uses multiple languages, don’t forget that you need to translate the
    texts and add them to the `lang_main.php` script in the corresponding languages’
    directories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the result of executing `helloBBlangs.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using phpBB’s Multi-Language System](img/1132_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using phpBB Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous examples, there wasn’t much graphical user interface work involved,
    but normally there will be, if you’re developing new phpBB scripts or extending
    existing ones. Separating the programming code from the user interface is generally
    a good programming practice, often referred to as a "separation of logic from
    presentation". For web applications such as phpBB, this means having the PHP code
    and logic separated from the HTML code that is used to present the results to
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is normally achieved by using the so called **templating systems** (templating
    engines), which consist of two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Static HTML template files that contain the rules of displaying the content;
    "rules" mean formatting, layout, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP logic to "fill-in the blanks" in the HTML templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a templating engine allows for changing the face of a bulletin board completely,
    by changing the static HTML files only and not dealing with the programming logic,
    database access, and so on. Creating new templates was discussed in detail in
    [Chapter 4](ch04.html "Chapter 4. Customizing Your Forum").
  prefs: []
  type: TYPE_NORMAL
- en: phpBB has its own templating engine, which is discussed here in order to give
    you a basic understanding on how to use it in your scripts.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the template library script (`template.php`) in the `includes`
    folder. This file contains the definition (the code) for a class called `Template`
    and you can see its implementation if you’re interested. For the purposes of coding
    phpBB scripts, you only need to know how to use the library and not how it’s actually
    coded (remember, that’s the beauty of the object-oriented coding approach).
  prefs: []
  type: TYPE_NORMAL
- en: In order to use the template class, an instance (an object) of that class needs
    to be created. There is such an object created for you as part of the phpBB environment
    setup. As soon as you include the page header script, a variable called `$template`
    is initialized and it contains an object of the `Template` class.
  prefs: []
  type: TYPE_NORMAL
- en: A Simple Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is time to create a brand new, simple template. Create (or copy from the
    book code download) the following file (call it `wordcount.tpl` and place it in
    the `templates/subSilver` directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Before proceeding with the PHP code, take a look at the following screenshot;
    it shows the result of executing the example.
  prefs: []
  type: TYPE_NORMAL
- en: '![A Simple Example](img/1132_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The template specified earlier is responsible only for the following part of
    the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Simple Example](img/1132_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The rest is displayed by the default header and footer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how to achieve this result. There are three parts to using the templating
    functionality in your scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: First you specify the filename(s) that contain the static HTML, using `$template->set_filenames()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then you use PHP to replace the template variables with data by calling `$template->assign_vars()`
    or `$template->assign_block_vars()`. Having read [Chapter 4](ch04.html "Chapter 4. Customizing
    Your Forum"), youre already familiar with the template variables and their syntax;
    they are enclosed by curly brackets and capitalized, like `{I_AM_A_VAR}`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally you call the `$template->pparse()` method to display the result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s the PHP code that uses the `wordcount.tpl` template listed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: There are two more template variables that were displayed in the result but
    were not assigned values using `$template->assign_vars()`—`U_INDEX` and `L_INDEX`.
    The reason you don’t need to worry about them is that they were already assigned
    when the page header was processed. For more information and a full listing of
    the behind-the-scenes processed variables, open the `includes/page_header.php`
    script and scroll down to near the bottom of the file where the template variables
    are assigned.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the example, create a `helloBBtemplates.php` file with the following
    code and navigate to it in your browser (don’t forget to also copy the `wordcount.tpl`
    template into the `templates/subSilver` directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Using Loops in phpBB Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, assigning static template variables is not enough; you’ll need the ability
    to perform dynamic assignments like using loops within a template (for example,
    listing all topics in a forum is performing a loop, listing all replies to a topic
    is also a loop, and so on). Let’s consider an example to see how you can use loops.
  prefs: []
  type: TYPE_NORMAL
- en: The example displays the numbers from one to ten. To set up the loop in the
    template, use the **block variable** syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here `number_loop` is the name of the block and `NUMBER` is a variable. Note
    the dotted syntax to refer to a variable within a loop like `{number_loop.NUMBER}`.
    To make it a bit more interesting and to understand the difference between a variable
    within a block and outside a block, add another `{NUMBER}` variable, but this
    time not related to the loop. It will have a constant value during the loop iterations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the listing of the template (save it to a file called `example2.tpl`
    and place it in `templates/subSilver)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the PHP script (`helloBBtemplates2.php`) to parse the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of executing `helloBBtemplates2.php` in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Loops in phpBB Templates](img/1132_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Conditions in phpBB Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes you’ll want to display data to the user conditionally, depending on
    some "if" case (a "switch"). To do this using the phpBB templating engine, use
    the same **block variables** as when working with loops.
  prefs: []
  type: TYPE_NORMAL
- en: The next example is quite similar to the previous one; it lists the numbers
    from one to ten. But it uses an "if" case for even numbers in order to display
    them in bold font.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the template. Save it as `example3.tpl` in `templates/subSilver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Because you have nested blocks (a switch block within a loop block), when you
    reference a variable from the inner block, you need to specify both blocks’ names,
    separated by a dot, like `{number_loop.odd_switch.NUMBER}`. Also note that there
    is no separate test for the even case—you simply use `else` to introduce an alternative
    block of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the listing of the PHP script (save it as `helloBBtemplates3.php` in
    your root phpBB folder):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the script in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Conditions in phpBB Templates](img/1132_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To round off your knowledge on the phpBB templating engine, there is a comprehensive
    knowledge-base article at [http://www.phpbb.com/kb/article.php?article_id=200](http://www.phpbb.com/kb/article.php?article_id=200).
  prefs: []
  type: TYPE_NORMAL
- en: User Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you develop new scripts or extend existing ones, it’s likely that you’ll
    need a way to verify a user’s privileges (in other words, check if a user is allowed
    to do or view what your script provides); for example, if you develop a script
    to display postings from a hidden forum, you’ll need to make sure that only users
    that are allowed access to this forum can see the postings.
  prefs: []
  type: TYPE_NORMAL
- en: There is one important user authentication function that is defined in `includes/auth.php`—the
    `auth()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `auth()` function returns an associative array that contains information
    about the privileges that are checked. You can check for individual privileges
    (permission types), like permission to view, read, post, vote, and so on; you
    can even check for all permission types at once. You can also check for privileges
    in a specific forum or in all forums.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three required parameters when you use the `auth()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permission type**: The possible values are the constants `AUTH_VIEW, AUTH_READ,
    AUTH_POST, AUTH_REPLY, AUTH_EDIT, AUTH_DELETE, AUTH_STICKY, AUTH_ANNOUNCE, AUTH_VOTE,
    AUTH_POLLCREATE`, or (to check for all permission types) `AUTH_ALL`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forum ID**: If you want to check for privileges in a specific forum, you
    specify its ID. To check for permissions in all forums, you use the `AUTH_LIST_ALL`
    constant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User data**: An array of user information. You dont need to worry about this;
    there is a `$userdata` variable defined at the beginning of every script, in the
    session management part. So you just need to pass this variable as is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `auth()` function returns the results as associative arrays. Let’s look
    at a few examples of how `auth()` can be used in order to get a better idea of
    the return values.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Authentication Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the following code to play around and test how the authentication
    function works and what types of values it returns. Save this code as `helloBBauth.php`
    and load it in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This script contains a call to the `auth()` function and then displays the results
    of the execution. You can start changing the parameters you pass to the `auth()`
    function and see how the return values are changed. You can also log in as a normal
    user, then log in as a moderator or an administrator, and then log out and see
    how the return values change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say your forum has a forum ID equal to 1, and this forum is set up as
    a **registered** forum, meaning that in the **Administration Panel | Forum Admin
    | Permissions**, its permissions were set to **Registered** using **Simple Mode**.
    This means that a user has to register and log in to be able to post. In this
    case to check the user privileges you can change the call to the `auth()` function
    in the previous example to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you save the modified script as `helloBBauth2.php` and load it in your browser,
    you’ll see the return value as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This result is displayed when you’re not logged in. You see that only the `auth_view`
    and `auth_read` indices in the return value are set to `1`, the rest are `0`.
    This means that when you’re not logged in, you only have the privilege to see
    that this forum exists and to read it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you log in as a regular user and visit `helloBBauth2.php` again, you’ll
    see different return values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, now the only permission types set to `0` are `auth_mod, auth_sticky`,
    and `auth_announce`, because being logged as a regular user, you cannot moderate
    the forum or post stickies or announcements.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for Poll-Creation Privileges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If all these associative array return values are giving you a headache, here’s
    a friendlier way of displaying results from the calls to the `auth()` function.
    This example (`helloBBauth3.php`) tells you whether you can create polls in the
    forum with forum ID equal to 1\. Test it when you’re logged in and then when you’re
    logged out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re logged in when you visit `helloBBauth3.php`, you’ll see the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking for Poll-Creation Privileges](img/1132_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you log out and come to the same page again, you’ll see a changed message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking for Poll-Creation Privileges](img/1132_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some code comments that serve as documentation on how the `auth()` function
    can be used; you can find these code comments before the function definition,
    at the top of the `includes/auth.php` file in your phpBB installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section describes some other phpBB functions that may come in handy. The
    functions listed are of two types: general functions (mostly contained in `includes/functions.php`),
    and posting-related functions that deal with processing BB code and smilies (these
    functions are defined in `includes/bbcode.php`). At the end of this section, there
    are some phpBB-specific coding guidelines and standards.'
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are some general-purpose functions that are shipped with phpBB.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Board Statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use this function to retrieve some board statistics data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The type of data this function returns depends of the parameter passed to it.
    This function can take only one of four pre-defined strings as a parameter. Here
    are the parameters, along with the returned values from the function (the last
    two options will give the stats for all forums, including hidden ones):'
  prefs: []
  type: TYPE_NORMAL
- en: '`usercount`: When this parameter is passed, the function will return the total
    number of registered users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`newestuser`: When this is passed, the function will return an array with keys
    `username` and `user_id` containing the most recent registered user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcount`: This will give you the total number of posts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`topiccount`: This will give you the total number of topics created in your
    forums.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an example usage of this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Board Statistics](img/1132_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Retrieving User Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use this function for an array of information about a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: It will return all the fields from the user’s entry in the database table as
    an array with both associative and enumerated values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try the following piece of code into a script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display an array that starts like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Replace the `2` in the function call with any user ID or username you like.
    This function can take either a numeric ID or a username as a string.
  prefs: []
  type: TYPE_NORMAL
- en: If you pass the second parameter with value `TRUE`, the first parameter should
    be a *username*, and not an *ID*.
  prefs: []
  type: TYPE_NORMAL
- en: Encoding and Decoding IP Addresses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: phpBB encodes all IP addresses it stores into the database. `encode_ip()` and
    `decode_ip()` are the two functions that serve this purpose. The first one takes
    a properly formatted IP address like `127.0.0.1` and returns an encoded representation
    of it. The second function takes an encoded string and returns the original IP
    address.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try these functions by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Encoding and Decoding IP Addresses](img/1132_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can find the script to display this output in the book’s code download,
    named `misc_encode_decode_ip.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Dates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the following phpBB function to display a formatted date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: It’s not only a wrapper around the `gmdate` PHP function (see [http://php.net/gmdate](http://php.net/gmdate)
    for details), but also takes care of translating the date (months and weekdays)
    and takes account of the user’s time zone and date format preferences set in the
    profile page.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample usage of the function would be to print the current date and time,
    using the user’s preferred format and time zone. You can do that by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return a string like: **Mon Mar 14, 2005 8:56 am**.'
  prefs: []
  type: TYPE_NORMAL
- en: The book’s code download has a script called `misc_create_date.php`, which shows
    how to use this function. You can also see the function used in the custom "What’s
    Up" script at the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a List of Censored Words
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following function retrieves the list of censored words and their replacement
    words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The function accepts two parameters passed by reference. This basically means
    that you pass two empty arrays to this function and it populates these arrays
    with values.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the word censoring as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Don’t forget to use this functionality to filter not only post texts, but also
    topic titles, poll questions and answers, and anything else where you feel the
    need.
  prefs: []
  type: TYPE_NORMAL
- en: Preserving the Session in the Hyperlinks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following function helps you preserve the user session by passing the session
    identifier in the URL for users that have their cookies disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to call this function every time you create a link to other pages in
    the forum, otherwise you’ll lose the session ID of the user’s visit and phpBB
    will create a new session for every page visited.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter of the function is optional; if it’s `true`, the function
    will use "&" and not the correct HTML value "&amp;" when constructing URL’s parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Be careful if you use "#" (named anchors) in your URL; you need to add them
    *after* the call to `append_sid()` or otherwise the session ID will not be passed
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the incorrect way of doing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'And the correct way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: If you’re interested in more details of the implementation of this function,
    look into the source file `includes/sessions.php`.
  prefs: []
  type: TYPE_NORMAL
- en: IN_PHPBB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`IN_PHPBB` is a constant, not a function. It was mentioned earlier and you
    have probably noticed that it’s defined at the top of every script.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a security measure that doesn’t allow include scripts to be accessed
    directly via a browser. In every include script, phpBB checks (and your script
    should too) if `IN_PHPBB` is defined. If it is not, this means somebody was trying
    to access the include scripts directly in the browser. They’ll get an error message
    saying **Hack attempt** and won’t be allowed to proceed further.
  prefs: []
  type: TYPE_NORMAL
- en: Postings-Related Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following functions help you out when displaying a posting text.
  prefs: []
  type: TYPE_NORMAL
- en: Create Links Automatically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following function will take any text and will make clickable all the strings
    that look like URLs or e-mails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'An example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This snippet will output the following HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Processing Smilies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `smilies_pass($text)` function will replace all the smilie codes in a text
    with the HTML code for the corresponding image tags. See the following section
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a Posting Body
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to properly display a posting text you need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Parse the BB code and convert it into HTML code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace smilies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make links clickable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace filtered words
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert new lines to HTML breaks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at the following example (it assumes that you have an array called `$row`
    that contains a database record from the posting texts table). Note that you need
    the **BB Code UID**, which is the key to transforming BB code into HTML.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that in order for this piece of code to work, you need to include the
    `includes/bbcode.php` file in your script. This is normally done in the beginning
    of the script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Coding Guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Coding standards and guidelines are always a good thing to have and follow.
    So it’s a good idea to familiarize yourself with the phpBB coding standards and
    code your extensions following those standards. It’s not mandatory (your code
    will still run even it does not adhere to the standards), but following pre-set
    standards can improve the maintainability of the code that you write. According
    to Sun Microsystems, "80% of the lifetime cost of a piece of software goes to
    maintenance" (source: *Code Conventions for the Java Programming Language* at
    [http://java.sun.com/docs/codeconv/](http://java.sun.com/docs/codeconv/)) and
    maintenance is much easier when coding conventions are employed. This is true
    even if you are the maintainer of your own code.'
  prefs: []
  type: TYPE_NORMAL
- en: The idea behind using code conventions is to minimize the individual "handwriting"
    of a programmer, unifying how functions and variables are named, how code is indented,
    etc. When all programmers working on a project use the same style, one can easily
    read code written by another, because it looks consistent with the way you would
    have written it.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the current phpBB coding standards and guidelines in the phpBB.com
    development area at [http://area51.phpbb.com/](http://area51.phpbb.com).
  prefs: []
  type: TYPE_NORMAL
- en: Recent Postings MOD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This final section of the chapter is about creating a custom phpBB script called
    "Recent Postings" (or "What’s Up") MOD. This script uses the techniques discussed
    earlier in this chapter and is designed to wrap up your knowledge on phpBB programming
    and the use of templates.
  prefs: []
  type: TYPE_NORMAL
- en: The Challenge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script we’re about to create will list the 15 most recent postings in all
    forums of the board. It can be very useful for you and the other forum junkies
    to have an overview page of what’s happening in the board, without having to browse
    each forum individually. The same goes for moderators and administrators, the
    people that need to be up to speed with everything that’s going on in the board.
  prefs: []
  type: TYPE_NORMAL
- en: The recent postings listing will respect user privileges, meaning that if a
    user doesn’t have read access to a certain forum, the postings from this forum
    won’t be present in the listing when viewed by this user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you a more visual idea, here is a screenshot of the script in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Challenge](img/1132_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If users with moderator privileges in a certain forum are logged in and are
    viewing this page, they’ll have a link to the moderator control panel for this
    forum, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Challenge](img/1132_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are two icons after the username in the right column. Clicking the first
    one takes the user to the posting, located in the **View topic** page (`viewtopic.php`).
    Clicking the second one doesn’t load a new page, but expands the area below the
    posting title and shows the posting here in the same screen, with the BB code
    and the smilies processed properly. This is shown on the next illustration.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Challenge](img/1132_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking the same icon again (once a posting is expanded) collapses the additional
    area and hides the posting.
  prefs: []
  type: TYPE_NORMAL
- en: This is a convenient way to read the latest 15 posting in all forums, without
    leaving the page. To keep it simple, this script is not introducing new texts
    or graphics.
  prefs: []
  type: TYPE_NORMAL
- en: The Recent Postings MOD you’re about to create consists of a PHP script and
    a template file. The PHP script is named `whatsup.php` and is hosted in the phpBB
    root, so if your board is installed in [http://www.yourdomain.com/forum/](http://www.yourdomain.com/forum/),
    the scripts will be accessible at [http://www.yourdomain.com/forum/whatsup.php](http://www.yourdomain.com/forum/whatsup.php).
  prefs: []
  type: TYPE_NORMAL
- en: The Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The template for the script is named `whatsup.tpl` and is located in `templates/subSilver`
    directory. Here’s its listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: There’s nothing too specific for the template, it contains a table with three
    columns for **Forum**, **Topic**, and **Author** respectively. A loop block encloses
    two table rows (`<tr> ... </tr>`); the first one is the row that contains the
    forum name, the topic and the author information and links. The second one contains
    the posting. It’s hidden by default (having `style="display:none"`) and gets shown/hidden
    on user request by a JavaScript linked to the second small icon (![The Template](img/1132_08_18.jpg)).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also one nested block within the `row` block. It’s called `is_mod_switch`
    and serves the purpose of handling an "if" case. The case is if the user has moderator
    privileges in the forum currently being listed. If yes, the link to the moderator
    control panel is displayed. This portion of the template is listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s take a look at `whatsup.php`. The implementation starts like all
    other scripts discussed in the chapter, with a small difference: an additional
    file, `bbcode.php`, is included. It contains the necessary functions to work with
    the BBCode and the smilies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'After including the required files comes the session management, which is similar
    to all the other scripts in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then comes the user authorization and privileges check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'This check verifies the user’s read privileges for all the board’s forums.
    Right after this there is a loop through the results of the authorization, so
    that an array of forum IDs is compiled. The array contains the IDs of the forums
    the user is allowed to read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'After the privileges are checked, we need some data from the database, for
    which we need to execute an SQL string. It is quite long as it joins five tables
    in order to retrieve the required information. The logic of the query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The most recent 15 entries from the **postings** table are selected. The way
    to get the most recent is to sort descending on the posting auto-increment ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the topic ID from the postings table, the **topics** table is joined
    to retrieve topic data such as title and topic type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the forum ID from the postings table, the **forums** table is joined
    to retrieve forum data such as the name, and also to filter the allowed forums
    using the `$allowed_forum_ids` array that was already compiled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the post ID from the postings table, the **posting texts** table is
    joined in order to retrieve the posting body.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally based on the user ID from the postings table, the **users** table is
    joined as it contains the username of the poster, which is displayed in the listing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the SQL query is assembled, it’s executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: After successful query execution, it’s time to loop through the results and
    replace some template variables. Before the loop, we retrieve the list of censored
    words and their replacements. Remember that the filters were set up in the Admin
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The results loop starts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: The first thing to do in the loop is to compile the "go to" links. These are
    the links like the ones shown in the following illustration.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Code](img/1132_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The code to retrieve these types of links is borrowed from a phpBB core script
    (`search.php`) without modifications—a good example of how you can learn from
    the phpBB application.
  prefs: []
  type: TYPE_NORMAL
- en: Next follows a check for some topic attributes—is this topic a sticky or an
    announcement and does it contain a poll? A `$topic_type` variable is assigned
    a value; this variable’s value will be displayed before the topic name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Next the parsing of the posting body follows. It consists of processing the
    BB code, replacing the smilies codes with images, replacing any filtered words,
    and making clickable all strings that look like links or e-mail addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, all the data is retrieved and processed/compiled as necessary.
    It’s now time to display it. So this is where the assignment of template variables
    within the `row` template block starts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: What you may find interesting in this piece of code is the use of the phpBB
    functions `append_sid()` (for keeping the session ID in hyperlinks) and `create_date()`
    (for formatting the date). Their usage was already described earlier in the *Tips
    and Tricks* section of this chapter, but here you can see them in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the `is_mod_switch`, providing moderators with a link to the forum’s
    moderator control panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The loop through the results is now completed. All that remains to be done
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: Include the page header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign the template file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign some global template variables ("global" meaning "outside the `row` loop")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse and output the compiled template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the page footer (tail)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is how it’s done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'And... that’s it! This is how a completely new phpBB script is built from scratch.
    The following is the complete source code listing for the new phpBB feature, the
    `whatsup.php` script (included in the code download). Copy this to your board’s
    root and you’re done! And don’t forget: `whatsup.tpl` should be copied to `templates/subSilver`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This last chapter introduced you to the new and exciting world of phpBB programming.
    The chapter described in detail how to use different phpBB functions, how to use
    the phpBB database abstraction layer, the phpBB templating engine, and how to
    properly parse and display postings. Now you have the basic knowledge to start
    coding your own extensions to the phpBB core features. A number of examples were
    given, which are all available in the book’s code download.
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good idea to start experimenting with the examples; tweak them a bit,
    and see how the results change. By doing so, you’ll get a better understanding
    of how the different functions work, and probably some ideas will start taking
    shape as to how you can customize and extend the phpBB functionality. Happy phpBB-ing!
  prefs: []
  type: TYPE_NORMAL
