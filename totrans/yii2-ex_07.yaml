- en: Chapter 7. Working on the User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will discover how powerful Gii is as a tool. It provides
    support for CRUD actions, as well as creating a controller and its respective
    views.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics related to the user interface in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Gii to generate create, read, update, and delete (CRUD) actions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example – using CRUD to manage rooms, reservations, and customers using
    Gii
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Customizing JavaScript and CSS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example – using JavaScript and CSS to display advertising columns that disappear
    if there is not enough space available
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using AJAX:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example: reservation details loaded from customers'' drop-down lists'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the Bootstrap widget:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example – using datepicker
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Viewing multiple models in the same view:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example – saving multiple customers at the same time
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Saving linked models in the same view:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example – creating a customer and reservation in the same view
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It is now time for you to learn what Yii2 supports in order to customize the
    JavaScript and CSS parts of web pages. A recurrent use of JavaScript is to handle
    AJAX calls, that is, to manage widgets and compound controls (such as a dependent
    drop-down list) from jQuery and Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will employ jQuery to dynamically create more models from the same
    class in the form, which will be passed to the controller in order to be validated
    and saved.
  prefs: []
  type: TYPE_NORMAL
- en: Using Gii to generate CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We introduced Gii in [Chapter 5](ch05.html "Chapter 5. Developing a Reservation
    System"), *Developing a Reservation System*, to generate models. Now we want to
    use Gii to create CRUD actions with a controller and views.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `http://hostname/basic/web/gii` in your browser to return to the Gii welcome
    page. Click on the **Start** button of the **CRUD** section. We have to fill out
    four fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model Class**: This is the ActiveRecord class associated with the table where
    CRUD will be built; this class should be provided using the fully qualified namespaced
    path, for example: `app\models\ModelClass`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search Model Class**: This is the name of the search model class to be generated
    and extended from the model class; this class will provide useful methods and
    extensions to be used when searching the record. This should be provided using
    the fully qualified namespaced path, for example: `app\models\ModelClassSearch`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller Class**: This is the name of the controller class to be generated;
    this class should be provided using the fully qualified namespaced path and the
    CamelCase format for the name, starting with an uppercase letter, for example:
    `app\controller\MyCustomController`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Path**: This is the directory where the view created from the controller
    actions will be stored. We can use path, alias `@app/views`, to indicate the base
    path for the views file, for example: `@app/views/myCustom` to indicate the base
    path of the `MyCustomController` views, that will be filled by default to `@app/views/controller-id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we can customize `BaseControllerClass`, the widget used in the index page,
    to enable the state of I18N and the code template, but it is okay to leave them
    with the default values.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we check **Enable I18N**, we must then look after the translations in app
    messages for each attribute label. This will be covered in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Example – using CRUD to manage rooms, reservations, and customers using Gii
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will create complete CRUD actions to manage rooms, reservations,
    and customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the earlier chapter, we dealt with Gii CRUD actions to create a form. We
    must now repeat these instructions for all three models: the room, reservation,
    and customer model class. To distinguish files created with Gii from files created
    manually in the previous chapters, we will append the Gii suffix to the controller''s
    class name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to the Gii welcome page at `http://hostname/basic/web/gii`, click on
    the **Start** button in the **CRUD** section, and fill out the fields with the
    following values to create CRUD actions for the `Room` model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model Class**: `app\models\Room`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search Model Class**: `app\models\RoomSearch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller Class**: `app\controllers\RoomsWithGiiController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Path**: `@app/views/rooms-with-gii`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, repeat this operation for the `Reservation` model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model Class**: `app\models\Reservation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search Model Class**: `app\models\ReservationSearch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller Class**: `app\controllers\ReservationsWithGiiController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Path**: `@app/views/reservations-with-gii`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, repeat them for the `Customer` model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model Class**: `app\models\Customer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search Model Class**: `app\models\CustomerSearch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller Class**: `app\controllers\CustomersWithGiiController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Path**: `@app/views/customers-with-gii`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that the View Path has a slash (`/`) in the path and not a backslash
    (`\`) as the namespaced path in the model class, search model class, and controller
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows the fields filled out to generate CRUD actions
    for the `Room` model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – using CRUD to manage rooms, reservations, and customers using Gii](img/B04656_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CRUD Generator from Gii
  prefs: []
  type: TYPE_NORMAL
- en: While navigating in the folder structure, you will see that Gii has created
    three new files in `basic/controllers`, named `RoomsWithGiiController.php`, `ReservationsWithGiiController.php`,
    and `CustomersWithGiiController.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of these files contains five actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`actionCreate()`: This action is used to create a new model object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actionView()`: This action is used to view the details of a model object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actionUpdate()`: This action is used to update an existing model object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actionDelete()`: This action is used to delete an existing model object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actionIndex()`: This action is used to display, using the grid layout, a list
    of model objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `basic/models` folder and you will find three new files: `RoomSearch.php`,
    `ReservationSearch.php` (which should already exist), and `CustomerSearch.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: Each of these files basically contains a `search()` method, which returns the
    ActiveDataProvider to be used to display data in GridView, passing some filter
    conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, open the `basic/views` folder and you will find three new folders:
    `roomsWithGii`, `reservationsWithGii`, and `customersWithGii`; each one containing
    six files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_form.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_search.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View files that start with an underscore are considered by default in Yii2 as
    subviews, or rather views that are called by other views.
  prefs: []
  type: TYPE_NORMAL
- en: The first two files start with an underscore; effectively if we open `create.php`
    and `update.php`, we will notice that, at the end of these files, the `render()`
    method is called using the `_form.php` view. Both the create and update view will
    use the same `_form` view to display the form to edit fields.
  prefs: []
  type: TYPE_NORMAL
- en: The last four files, `create.php`, `index.php`, `update.php`, and `view.php`
    are views that refer to the same actions in the controller. By default, they all
    have a breadcrumb and a title for each page.
  prefs: []
  type: TYPE_NORMAL
- en: Make some tests that browse, for example, to `http://hostname/basic/web/rooms-with-gii/index`
    or `http://hostname/basic/web/rooms-with-gii/index`, to see some excellent works
    made by Gii.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the index action result of `RoomsWithGiiController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – using CRUD to manage rooms, reservations, and customers using Gii](img/B04656_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The output of the RoomsWithGiiController index action
  prefs: []
  type: TYPE_NORMAL
- en: Customize JavaScript and CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned before, in this chapter, you will discover how to use frontend
    interaction. Using JavaScript and CSS is fundamental to customize frontend output.
  prefs: []
  type: TYPE_NORMAL
- en: Differently from Yii1, where calling JavaScript and CSS scripts and files was
    done using the `Yii::app()` singleton, in the new framework version, Yii2, this
    task is part of the `yii\web\View` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to call JavaScript or CSS: either directly passing the code
    to be executed or passing the path file.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When passing the code directly to be executed, we will use the Heredoc syntax
    provided by PHP to avoid handling strings escaping.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `registerJs()` function allows us to execute the JavaScript code with three
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is the JavaScript code block to be registered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the position where the JavaScript tag should be inserted
    (the header, the beginning of the body section, the end of the body section, enclosed
    within the jQuery `load()` method, or enclosed within the jQuery `document.ready()`
    method, which is the default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third and last parameter is a key that identifies the JavaScript code block
    (if it is not provided, the content of the first parameter will be used as the
    key)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the other hand, the `registerJsFile()` function allows us to execute a JavaScript
    file with three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is the path file of the JavaScript file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the HTML attribute for the script tag, with particular
    attention given to the depends and position values, which are not treated as tag
    attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter is a key that identifies the JavaScript code block (if it's
    not provided, the content of the first parameter will be used as the key)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS, similar to JavaScript, can be executed using the code or by passing the
    path file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `registerCss()` function allows us to execute CSS code with three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one is the CSS code block to be registered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one is the HTML attributes for the `style` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third and last parameter is a key that identifies the JavaScript code block
    (if it is not provided, the content of the first parameter will be used as the
    key)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `registerCssFile()` function allows us instead to execute a CSS file with
    three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one is the path file of the CSS file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the HTML attribute for the link tag, with particular
    attention given to the depends value, which is not treated as a tag attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter is a key that identifies the JavaScript code block (if it's
    not provided, the content of the first parameter will be used as the key)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally, JavaScript or CSS files are published in the `basic/web` folder,
    which is accessible without restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: So, when we have to use custom JavaScript or CSS files, it is recommended to
    put them in a subfolder of the `basic/web` folder, which can be named as `css`
    or `js`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the folder for CSS files `basic/web/css` should already exist. But
    we still need to create `basic/web/js` for JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: In some circumstances, we might be required to add a new CSS or JavaScript file
    for all web application pages. The most appropriate place to put these entries
    is `AppAsset.php`, a file located in `basic/assets/AppAsset.php`. In it we can
    add CSS and JavaScript entries required in web applications, even using dependencies
    if we need to.
  prefs: []
  type: TYPE_NORMAL
- en: Example – using JavaScript and CSS to display advertising columns that disappear
    if not enough space is available
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This sample is suitable if you need to use JavaScript and CSS customizations
    together.
  prefs: []
  type: TYPE_NORMAL
- en: Think about the layout built as three vertical columns, typical of a blog system.
    One column of 200 pixels on the left (usually for advertising), one central column
    of 1000 pixels (usually for content) and one of 200 pixels on the right (usually
    again for advertising).
  prefs: []
  type: TYPE_NORMAL
- en: If the browser size is at least 1,400 pixels wide, we want all three columns
    to be shown (the content and two columns for advertising).
  prefs: []
  type: TYPE_NORMAL
- en: If there is not enough space for all the columns and the browser's width size
    is between 1,200 and 1,400 pixels, only the left and central columns will be shown
    (only a column for advertising and one for the content. Finally, if the browser's
    width size is under 1,200 pixels, only the central column with content will be
    shown).
  prefs: []
  type: TYPE_NORMAL
- en: Also, our goal is to ensure that these columns are always centered in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new controller class in `basic/controllers/ThreeColumnsController.php`,
    to handle the action to render the view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, create a new `view` folder in `basic/views/three-columns` and insert
    `index.php` file in it to store view content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, this is the content necessary to build a three column layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The CSS class column will only be used to enhance cells' visibility with a black
    border around them.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we will center the layout and fix the columns'' width using
    the `registerCss()` method at the top of the view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Point your browser to `http://hostname/basic/web/three-columns/index` and you
    will get the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – using JavaScript and CSS to display advertising columns that disappear
    if not enough space is available](img/B04656_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Content width split into three columns
  prefs: []
  type: TYPE_NORMAL
- en: We must handle the resize browser event through JavaScript to manage the columns
    visualization using the dimension rules defined at the start of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `registerJs()` method, passing only the code to be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Refresh your browser to `http://hostname/basic/web/three-columns/index` and
    resize it to the desired width, and the columns visualization should change depending
    on the available space in the specific width.
  prefs: []
  type: TYPE_NORMAL
- en: Using AJAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 provides appropriate attributes for some widgets to make AJAX calls; sometimes,
    however, writing a JavaScript code in these attributes will make code hard to
    read, especially if we are dealing with complex codes.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, to make an AJAX call, we will use external JavaScript code executed
    by `registerJs()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a template of the AJAX class using the `GET` or `POST` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: An AJAX call is usually the effect of a user interface event (such as a click
    on a button, a link, and so on). So, most of the time an AJAX call is directly
    connected to the `.on()` event of jQuery on the HTML elements (anchors, buttons,
    and so on). For this reason, it is important to remember how Yii2 renders the
    `name` and `id` attributes of input fields.
  prefs: []
  type: TYPE_NORMAL
- en: When we call `Html::activeTextInput($model, $attribute)` or in the same way
    use `<?= $form->field($model, $attribute)->textInput() ?>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `name` and `id` attributes of the input text field will be rendered as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` : The model class name separated with a dash by the attribute name in
    lowercase; for example, if the model class name is `Room` and the attribute is
    `floor`, the `id` attribute will be `room-floor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The model class name that encloses the attribute name, for example,
    if the model class name is `Reservation` and the attribute is `price_per_day`,
    the name attribute will be `Reservation[price_per_day]`; so every field owned
    by the `Reservation` model will be enclosed all in a single array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – reservation details loaded from the customers' drop-down lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, there are two drop-down lists and a detail box. The two drop-down
    lists refer to customers and reservations; when user clicks on a customer list
    item, the second drop-down list of reservations will be filled out according to
    their choice.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when a user clicks on a reservation list item, a details box will be
    filled out with data about the selected reservation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new action in `basic/controllers/ReservationsController.php` named
    `actionDetailDependentDropdown()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this action, we will get the `customer_id` and `id` parameters from a form
    based on the `Reservation` model data and if it are filled out, the data will
    be used to search for the correct reservation model to be passed to the view.
  prefs: []
  type: TYPE_NORMAL
- en: There is a flag called `$showDetail` that displays the reservation details content
    if the `id` attribute of the model is received.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `ReservationsController`, there is also an action that will be called using
    AJAX when the user changes the customer selection in the drop-down list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This action will return the `<option>` HTML tags filled out with reservations
    data filtered by the customer ID passed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at the view in `basic/views/reservations/detailDependentDropdown.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: At the top of the view, there are handlers for changes in the customers and
    reservations drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: If the customer drop-down list is changed, the `detail` div will be hidden,
    an AJAX call will get all the reservations filtered by `customer_id`, and the
    result will be passed as content to the reservations drop-down list. If the reservations
    drop-down list is changed, a form will be submitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next in the form declaration, we can find first of all the customer drop-down
    list and then the reservations list, which uses a closure to get the value from
    the `ArrayHelper::map()` methods. We could add a new property in the `Reservation`
    model by creating a function starting with the prefix `get`, such as `getDescription()`,
    and put in it the content of the closure, or rather:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we could use a short syntax to get data from `ArrayHelper::map()` in this
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Finally, if `$showDetail` is flagged, a simple details box with only the price
    per day of the reservation will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Point your browser to `http://hostname/basic/web/reservations/detail-dependent-dropdown`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – reservation details loaded from the customers'' drop-down lists](img/B04656_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dynamic reservation details being loaded from the customer drop-down list
  prefs: []
  type: TYPE_NORMAL
- en: Using the Bootstrap widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 supports Bootstrap as a core feature. Bootstrap framework CSS and JavaScript
    files are injected by default in all pages and we could even use this feature
    to only apply CSS classes or call our own JavaScript function provided by Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: However, Yii2 embeds Bootstrap as a widget, and we can access this framework's
    capabilities like any other widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most used are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\bootstrap\Alert` | This class renders an alert Bootstrap component |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\bootstrap\Button` | This class renders a Bootstrap button |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\bootstrap\Dropdown` | This class renders a Bootstrap drop-down menu
    component |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\bootstrap\Nav` | This class renders a `nav` HTML component |'
  prefs: []
  type: TYPE_TB
- en: '| `yii\bootstrap\NavBar` | This class renders a `navbar` HTML component |'
  prefs: []
  type: TYPE_TB
- en: For example, `yii\bootstrap\Nav` and `yii\bootstrap\NavBar` are used in the
    default main template.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an extract from the main layout view (in `basic/views/layouts/main.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Example: using datepicker'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yii2 also supports, by itself, many jQuery UI widgets through the JUI extension
    for Yii2, `yii2-jui`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we do not have the `yii2-jui` extension in the `vendor` folder, we can get
    it from Composer using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we will discuss the two most used widgets: `datepicker` and
    `autocomplete`. First let''s have a look at the `datepicker` widget. This widget
    can be initialized using a model attribute or by filling out a value property.
    The following is an example made using a model instance and one of its attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is a sample of the value property''s use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a new controller named `JuiWidgetsController` in `basic/controllers/JuiWidgetsController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this action, we define the `$reservation` model, picking from the reservations
    database table with `id` 1.
  prefs: []
  type: TYPE_NORMAL
- en: When data is sent via POST, the `date_from` and `date_to` fields will be converted
    from the d/m/y to the y-m-d format to make it possible for the database to save
    data. Then the model object is updated through the `save()` method. Using the
    Bootstrap widget, an alert box will be displayed in the view after updating the
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `datePicker` view in `basic/views/jui-widgets/datePicker.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The view is split into two columns, left and right. The left column simply displays
    a `DataPicker` example from the value (fixed to the current date). The right column
    displays an alert box if the `$reservation` model has been updated and the next
    two kinds of widget declaration too; the first one without using `$form` and the
    second one using `$form`, both outputting the same HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: In either case, the `DatePicker` date output format is set to dd/MM/yyyy through
    the `dateFormat` property and the language is set to Italian through the `language`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Point your browser to `http://hostname/basic/web/jui-widgets/date-picker` to
    see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example: using datepicker](img/B04656_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using datepicker
  prefs: []
  type: TYPE_NORMAL
- en: Multiple models in the same view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, we can find many models of same or different class in a single view.
    First of all, remember that Yii2 encapsulates all the views' form attributes in
    the same container, named the same as the model class name. Therefore, when the
    controller receives the data, these will all be organized in a key of the `$_POST`
    array named the same as the model class name.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the model class name is `Customer`, every form input name attribute will
    be `Customer[attributeA_of_model]` This is built with: `$form->field($model, ''attributeA_of_model'')->textInput()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of multiple models of the same class, the container will again
    be named as the model class name but every attribute of each model will be inserted
    in an array, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'These are built with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that the array key information is inserted in the attribute name!
  prefs: []
  type: TYPE_NORMAL
- en: So, when data is passed to the controller, `$_POST['Customer']` will be an array
    composed by the `Customer` models and every key of this array, for example, `$_POST['Customer'][0]`
    is a model of the `Customer` class.
  prefs: []
  type: TYPE_NORMAL
- en: Example – saving multiple customers at the same time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's see how to save three customers at once. We will create three containers,
    one for each model class that will contain some fields of the `Customer` model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a view in `basic/views/customers/createMultipleModels.php` that contains
    a block of input fields repeated for every model passed from the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: For each model all the fields will have the same validator rules of the `Customer`
    class, and every single model object will be validated separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next create a new action in the customers controller in `basic/controllers/CustomersController.php`,
    named `actionCreateMultipleModels`. If the `$_POST[''Customer'']` content is set,
    and if they are all validated and finally redirected to the grid action, it will
    save them all together; otherwise it will create three models of the `Customer`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It can be useful to create models in the controller because a large number of
    them and other validation checks are configured here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to `http://hostname/basic/web/customers/create-multiple-models` to see
    the complete page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – saving multiple customers at the same time](img/B04656_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multiple models in the same view
  prefs: []
  type: TYPE_NORMAL
- en: Saving linked models in the same view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It could be convenient to save different kind of models in the same view. This
    approach allows us to save time and to navigate from every single detail until
    a final item that merges all data is created. Handling different kind of models
    linked to each other it is not so different from what we have seen so far. The
    only point to take care of is the link (foreign keys) between models, which we
    must ensure is valid.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the controller action will receive the `$_POST` data encapsulated
    in the model's class name container; if we are thinking, for example, of the customer
    and reservation models, we will have two arrays in the `$_POST` variable, `$_POST['Customer']`
    and `$_POST['Reservation']`, containing all the fields about the customer and
    reservation models.
  prefs: []
  type: TYPE_NORMAL
- en: Then all data must be saved together. It is advisable to use a database transaction
    while saving data because the action can be considered as ended only when all
    the data has been saved.
  prefs: []
  type: TYPE_NORMAL
- en: Using database transactions in Yii2 is incredibly simple! A database transaction
    starts with calling `beginTransaction()` on the database connection object and
    finishes with calling the `commit()` or `rollback()` method on the database transaction
    object created by `beginTransaction()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit a transaction, to save all the database activities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Rollback a transaction, to clear all the database activities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: So, if a customer was saved and the reservation was not (for any possible reason),
    our data would be partial and incomplete. Using a database transaction, we will
    avoid this danger.
  prefs: []
  type: TYPE_NORMAL
- en: Example – creating a customer and reservation in the same view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now want to create both the customer and reservation models in the same view
    in a single step. In this way, we will have a box containing the customer model
    fields and a box with the reservation model fields in the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a view in `basic/views/reservations/createCustomerAndReservation.php`,
    with the fields from the customer and reservation models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We have created two blocks in the form to fill out the fields for the customer
    and the reservation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new action named `actionCreateCustomerAndReservation` in `ReservationsController`
    in `basic/controllers/ReservationsController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure you pay attention to these two matters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$reservation->customer_id = 0`: With this code, we avoid the validation error
    relating to the `customer_id` requirement that appears when `$reservation` is
    validated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database transaction will be committed only if the customer model and reservation
    model's save action are completed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Browse to `http://hostname/basic/web/reservations/create-customer-and-reservation`
    to see the complete page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – creating a customer and reservation in the same view](img/B04656_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A customer and reservation created together
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed about the user interface and how Yii helps us
    with its core functionalities. The first important tool that Yii provides is Gii,
    which facilitates CRUD actions and views' creation, which we used in Gii to manage
    rooms, reservations, and customers, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Next we saw how to embed JavaScript and CSS in a layout and views, with file
    content or an inline block. This was applied to an example that showed you how
    to change the number of columns displayed based on the browser's available width;
    this is typically a task for websites or web apps that display advertising columns.
  prefs: []
  type: TYPE_NORMAL
- en: Again on the subject of JavaScript, you learned how to implement direct AJAX
    calls, taking an example where the reservation detail was dynamically loaded from
    the customers drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: Next we looked at Yii's core user interface library, which is built on Bootstrap
    and we illustrated how to use the main Bootstrap widgets natively, together with
    DatePicker (probably the most commonly used jQuery UI widget).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the last topics covered were multiple models of the same and different
    classes. We looked at two examples on these topics: the first one to save multiple
    customers at the same time and the second to create a customer and reservation
    in the same view.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explain how to set up login authentication and
    authorization, and will reach these goals from scratch.
  prefs: []
  type: TYPE_NORMAL
