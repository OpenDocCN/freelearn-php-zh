["```php\n    <?php \n    $name = $_GET['movieName'];\n    $star = $_GET['movieStar'];\n    $year = $_GET['movieYear'];\n    ?>\n    ```", "```php\n    movies.php\n    8      <head>\n    9          <meta charset=\"UTF-8\">\n    10         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    11         <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    12         <title><?php echo $name; ?></title>\n    13     </head>\n    14     <body>\n    15         <div>\n    16             <h1>Information about <?php  echo $name; ?></h1>\n    17             <p>\n    28             Based on the input, here is the information so far:\n    19             <br>\n    20             <?php echo $star . ' starred in the movie ' . $name .'                  which was released in year ' . $year; ?>\n    21             </p>\n    22         </div>\n    23     </body>\n    https://packt.live/2P3sZ75\n    ```", "```php\n    php -S localhost:8085\n    ```", "```php\n    <?php\n    $name = 'Joe';\n    ```", "```php\n    $weightKg = 80;\n    $heightCm = 180;\n    ```", "```php\n    $heightMeters = $heightCm/100;\n    ```", "```php\n    $heightSquared = $heightMeters * $heightMeters;\n    ```", "```php\n    $bmi = $weightKg / ($heightSquared);\n    ```", "```php\n    echo \"<p>Hello $name, your BMI is $bmi</p>\";\n    ```", "```php\n    php -S localhost:8085\n    ```", "```php\n    <?php\n    $directors = [\n    \"Steven Spielberg\" => [\"The Terminal\", \"Minority Report\", \"Catch Me If You Can\", \"Lincoln\", \"Bridge of Spies\"],\n    \"Christopher Nolan\" => [\"Dunkirk\", \"Interstellar\", \"The Dark Knight Rises\", \"Inception\", \"Memento\"],\n    \"Martin Scorsese\" => [\"Silence\", \"Hugo\", \"Shutter Island\", \"The Departed\", \"Gangs of New York\"],\n    \"Spike Lee\" => [\"Do the Right Thing\", \"Malcolm X\", \"Summer of Sam\", \"25th Hour\", \"Inside Man\"],\n    \"Lynne Ramsey\" => [\"Ratcatcher\", \"Swimmer\", \"Morvern Callar\", \"We Need To Talk About Kevin\", \"You Were Never Really Here\"]\n                     ];\n    ```", "```php\n    foreach ($directors as $director => $movies) {\n            echo \"$director's movies: \" . PHP_EOL;\n            foreach ($movies as $movie) {\n                    echo \" > $movie \" . PHP_EOL;\n            }\n    }\n    ```", "```php\n    php activity-movies.php\n    ```", "```php\n    php activity_movies.php 3 2\n    ```", "```php\n    <?php\n    $directorsLimit = $argv[1] ?? 5;\n    $moviesLimit = $argv[2] ?? 5;\n    ```", "```php\n    $directorsCounter = 1;\n    foreach ($directors as $director => $movies) {\n            if ($directorsCounter > $directorsLimit) {\n                    break;\n            }\n            echo \"$director's movies: \" . PHP_EOL;\n            $moviesCounter = 1;\n            foreach ($movies as $movie) {\n                    if ($moviesCounter > $moviesLimit) {\n                            break;\n                    }\n                    echo \" > $movie \" . PHP_EOL;\n                    $moviesCounter++;\n            }\n            $directorsCounter++;\n    }\n    ```", "```php\n    php activity_movies.php 2 1\n    ```", "```php\n    php activity-movies.php 2\n    ```", "```php\n    <?php\n    declare(strict_types=1);\n    ```", "```php\n    activity.php\n    13 function factorial(int $number): float\n    14 {\n    15     $factorial = $number;\n    16     while ($number > 2) {\n    17         $number--;\n    18         $factorial *= $number;\n    19     }\n    20     return $factorial;\n    21 }\n    https://packt.live/31nkK8E\n    ```", "```php\n    /**\n     * Return the sum of its inputs. Give as many inputs as you like.\n     *\n     * @return float\n     */\n    function sum(): float\n    {\n        return array_sum(func_get_args());\n    }\n    ```", "```php\n    activity.php\n    41 function prime(int $number): bool\n    42 {\n    43     // everything equal or smaller than 2 is not a prime number\n    44     if (2 >= $number) {\n    45         return false;\n    46     }\n    47     for ($i = 2; $i <= sqrt($number); $i++) {\n    48         if ($number % $i === 0) {\n    49             return false;\n    50         }\n    51     }\n    52     return true;\n    53 }\n    https://packt.live/2OYdEox\n    ```", "```php\n    activity.php\n    59 function performOperation(string $operation)\n    60 {\n    61     switch ($operation) {\n    62         case 'factorial':\n    63             // get the second parameter, it must be an int.\n    64             // we will cast it to int to be sure\n    65             $number = (int) func_get_arg(1);\n    66             return factorial($number);\n    67         case 'sum':\n    68             // get all parameters\n    69             $params = func_get_args();\n    70             // remove the first parameter, because it is the operation\n    71             array_shift($params);\n    72             return call_user_func_array('sum', $params);\n    73         case 'prime':\n    74             $number = (int) func_get_arg(1);\n    75             return prime($number);\n    76     }\n    77 }\n    https://packt.live/31s2YB2\n    ```", "```php\n    echo performOperation(\"factorial\", 3) . PHP_EOL;\n    echo performOperation('sum', 2, 2, 2) . PHP_EOL;\n    echo (performOperation('prime', 3)) ? \"The number you entered was prime.\"   . PHP_EOL : \"The number you entered was not prime.\" . PHP_EOL;\n    ```", "```php\n    <?php\n    namespace Student;\n    class Student\n    {\n        public $name;\n        public $title = 'student';\n        function __construct(string $name)\n    {\n            $this->name = $name;\n        }\n    }\n    ```", "```php\n    <?php\n    namespace Professor;\n    class Professor\n    {\n        public $name;\n        public $title = 'Prof.';\n        private $students = array();\n        function __construct(string $name, array $students)\n        {\n            $this->name = $name;\n        }\n    }\n    ```", "```php\n    <?php\n    namespace Professor;\n    use Student\\Student;\n    ```", "```php\n        function __construct(string $name, array $students)\n    {\n            $this->name = $name;\n\n            foreach ($students as $student) {\n                if ($student instanceof Student) {\n                    $this->students[] = $student;\n                }\n            }\n        }\n    ```", "```php\n        public function setTitle(string $title)\n    {\n            $this->title = $title;\n        }\n    ```", "```php\n        public function printStudents()\n    {\n            echo \"$this->title $this->name's students (\" .count($this-          >students). \"): \" . PHP_EOL;\n            $serial = 1;\n            foreach ($this->students as $student) {\n                echo \" $serial. $student->name \" . PHP_EOL;\n                $serial++;\n            }\n        }\n    ```", "```php\n    <?php\n    spl_autoload_register();\n    ```", "```php\n    $professor = new Professor\\Professor('Charles Kingsfield', array(\n                        new Student\\Student('Elwin Ransom'),\n                        new Student\\Student('Maurice Phipps'),\n                        new Student\\Student('James Dunworthy'),\n                        new Student\\Student('Alecto Carrow')\n                ));\n    ```", "```php\n    $professor->setTitle('Dr.');\n    ```", "```php\n    $professor->printStudents();\n    ```", "```php\n    <?php\n    spl_autoload_register();\n    $professor = new Professor\\Professor('Charles Kingsfield', array(\n                        new Student\\Student('Elwin Ransom'),\n                        new Student\\Student('Maurice Phipps'),\n                        new Student\\Student('James Dunworthy'),\n                        new Student\\Student('Alecto Carrow')\n                ));\n    $professor->setTitle('Dr.');\n    $professor->printStudents(); \n    ```", "```php\n    php activity-classes.php\n    ```", "```php\n    Login.php\n    37 private function getUserData(string $username): ?array\n    38 {\n    39     $users = [\n    40         'vip' => [\n    41             'level' => 'VIP',\n    42             'password' => '$2y$10$JmCj4KVnBizmy6WS3I/bXuYM/yEI3dRg/IYkGdqHrBlOu4FKOliMa'                  // \"vip\" password hash\n    43         ],\n    https://packt.live/2VWoRqU\n    ```", "```php\n    $username = 'admin';\n    $passwordHash = '$2y$10$Y09UvSz2tQCw/454Mcuzzuo8ARAjzAGGf8OPGeBloO7j47Fb2v.  lu'; // \"admin\" password hash\n    $formError = [];\n    $userData = $this->getUserData($formUsername);\n    if (!$userData) {\n        $formError = ['username' => sprintf('The username [%s] was not       found.', $formUsername)];\n    } elseif (!password_verify($formPassword, $userData['password'])) {\n        $formError = ['password' => 'The provided password is invalid.'];\n    } else {\n        $_SESSION['username'] = $formUsername;\n        $_SESSION['userdata'] = $userData;\n        $this->requestRedirect('/profile');\n        return '';\n    }\n    ```", "```php\n    <div class=\"text-center mb-4\">\n        <h1 class=\"h3 mb-3 mt-5 font-weight-normal\">Authenticate</h1>\n    </div>\n    ```", "```php\n    <div class=\"row\">\n        <div class=\"my-5 alert alert-secondary w-100\">\n            <h3>Welcome, <?= $username ?>!</h3>\n            <p class=\"mb-0\"><a href=\"/logout\">Logout</a></p>\n        </div>\n    </div>\n    ```", "```php\n    <div class=\"row\">\n        <div class=\"col-sm-6\">...</div>\n        <div class=\"col-sm-6\">...</div>\n    </div>\n    ```", "```php\n    profile.php\n    15 <div class=\"form-label-group mb-3\">\n    16     <label for=\"name\">Name:</label>\n    17     <input type=\"text\" name=\"name\" id=\"name\"\n    18            class=\"form-control <?= isset($formErrors['name']) ?                 'is-invalid' : ''; ?>\"\n    19            value=\"<?= htmlentities($_POST['name'] ?? ''); ?>\">\n    20     <?php if (isset($formErrors['name'])) {\n    21         echo sprintf('<div class=\"invalid-feedback\">%s</div>',              htmlentities($formErrors['name']));\n    22     } ?>\n    23 </div>\n    https://packt.live/33NQZ2b\n    ```", "```php\n    <?php if (isset($formErrors['form'])) { ?>\n        <div class=\"alert alert-danger\"><?= $formErrors['form']; ?></div>\n    <?php } ?>\n    ```", "```php\n    <input type=\"hidden\" name=\"csrf-token\" value=\"<?= $formCsrfToken ?>\">\n    ```", "```php\n    <button type=\"submit\" name=\"do\" value=\"get-support\" class=\"btn btn-lg   btn-primary\">Send</button>\n    ```", "```php\n    <?php foreach ($sentForms as $item) { ?>\n        <div class=\"card mb-2\">\n            <div class=\"card-body\">\n                <h5 class=\"card-text\"><?= htmlentities($item['form']              ['message']) ?></h5>\n                <h6 class=\"card-subtitle mb-2 text-muted\">\n                    <strong>Added:</strong> <?=                   htmlentities($item['timeAdded']) ?></h6>\n                <h6 class=\"card-subtitle mb-2 text-muted\">\n                    <strong>Reply-to:</strong> <?= sprintf('%s &lt;%s&gt;',                   htmlentities($item['form']['name']),                   htmlentities($item['form']['email'])) ?>\n                </h6>\n            </div>\n        </div>\n    <?php } ?>\n    ```", "```php\n    $formErrors = $this->processContactForm($_POST);\n    ```", "```php\n    if (!count($formErrors)) {\n        $this->requestRefresh();\n        return '';\n    }\n    ```", "```php\n    return (new \\Components\\Template('profile'))->render([\n        'username' => $_SESSION['username'],\n        'formErrors' => $formErrors ?? null,\n        'sentForms' => $_SESSION['sentForms'] ?? [],\n        'formCsrfToken' => $this->getCsrfToken(),\n    ]);\n    ```", "```php\n    private function getCsrfToken(): string\n    {\n        if (!isset($_SESSION['csrf-token'])) {\n            $_SESSION['csrf-token'] = bin2hex(random_bytes(32));\n        }\n        return $_SESSION['csrf-token'];\n    }\n    ```", "```php\n    list($form, $errors) = $this->validateForm($data);\n    ```", "```php\n    $_SESSION['sentForms'][] = [\n        'dateAdded' => date('Y-m-d'),\n        'timeAdded' => date(DATE_COOKIE),\n        'form' => $form,\n    ];\n    ```", "```php\n    if (!isset($data['csrf-token']) || $data['csrf-token'] !==   $this->getCsrfToken()) {\n        $errors['form'] = 'Invalid token, please refresh the page and try       again.';\n    }\n    ```", "```php\n    if (($_SESSION['userdata']['level'] === 'STANDARD')\n        && $this->hasSentFormToday($_SESSION['sentForms'] ?? [])\n    ) {\n        $errors['form'] = 'You are only allowed to send one form per day.';\n    }\n    ```", "```php\n    $name = trim($data['name'] ?? '');\n    if (empty($name)) {\n        $errors['name'] = 'The name cannot be empty.';\n    }\n    ```", "```php\n    if (empty($data['email'] ?? '')) {\n        $errors['email'] = 'The email cannot be empty.';\n    } elseif (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        $errors['email'] = 'The email address is invalid.';\n    }\n    ```", "```php\n    $message = trim($data['message'] ?? '');\n    if (!$message) {\n        $errors['message'] = 'The message cannot be empty.';\n    }\n    if (strlen($message) <= 40) {\n        $errors['message'] = 'The message is too short.';\n    }\n    ```", "```php\n    $form = [\n        'name' => $name,\n        'email' => $data['email'],\n        'message' => $message,\n    ];\n    return [$form, $errors];\n    ```", "```php\n    private function hasSentFormToday(array $sentForms): bool\n    {\n        $today = date('Y-m-d');\n        foreach ($sentForms as $sentForm) {\n            if ($sentForm['dateAdded'] === $today) {\n                return true;\n            }\n        }\n        return false;\n    }\n    ```", "```php\n    private function requestRefresh()\n    {\n        $this->requestRedirect($_SERVER['REQUEST_URI']);\n    }\n    ```", "```php\n    <?php \n    declare(strict_types=1);\n    namespace Models;\n    use DateTime;\n    class User\n    {\n        /** @var int */\n        private $id;\n        /** @var string */\n        private $username;\n        /** @var string */\n        private $password;\n        /** @var DateTime */\n        private $signupTime;\n    ```", "```php\n    User.php\n    21     public function __construct(array $input)\n    22     {\n    23         $this->id = (int)($input['id'] ?? 0);\n    24         $this->username = (string)($input['username'] ?? '');\n    25         $this->password = (string)($input['password'] ?? '');\n    26         $this->signupTime = new DateTime($input['signup_time'] ?? 'now',              new \\DateTimeZone('UTC'));\n    27     }\n    28 \n    29     public function getId(): int\n    30     {\n    31         return $this->id;\n    32     }\n    https://packt.live/2Br0x7k\n    ```", "```php\n        public function passwordMatches(string $formPassword): bool\n        {\n            return password_verify($formPassword, $this->password);\n        }\n    }\n    ```", "```php\n    <?php declare(strict_types=1);\n    namespace Components;\n    use DateTime;\n    use Models\\User;\n    class Auth\n    {\n        public static function userIsAuthenticated(): bool\n        {\n            return isset($_SESSION['userid']);\n        }\n        public static function getLastLogin(): DateTime\n        {\n            return DateTime::createFromFormat('U',           (string)($_SESSION['loginTime'] ?? ''));\n        }\n    ```", "```php\n        public static function getUser(): ?User\n        {\n            if (self::userIsAuthenticated()) {\n                return Database::getUserById((int)$_SESSION['userid']);\n            }\n            return null;\n        }\n    ```", "```php\n        public static function authenticate(int $id)\n        {\n            $_SESSION['userid'] = $id;\n            $_SESSION['loginTime'] = time();\n        }\n        public static function logout()\n        {\n            if (session_status() === PHP_SESSION_ACTIVE) {\n                session_regenerate_id(true);\n                session_destroy();\n            }\n        }\n    }\n    ```", "```php\n    <?php declare(strict_types=1);\n    namespace Components;\n    use Models\\User;\n    use PDO;\n    use PDOStatement;\n    ```", "```php\n    class Database\n    {\n        public $pdo;\n        private function __construct()\n        {\n            $dsn = \"mysql:host=mysql-host;port=3306;dbname=app;charset=utf           8mb4\";\n            $options = [\n                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n            ];\n            $this->pdo = new PDO($dsn, \"php-user\", \"php-pass\", $options);\n        }\n    ```", "```php\n    public static function instance()\n        {\n            static $instance;\n            if (is_null($instance)) {\n                $instance = new static();\n            }\n            return $instance;\n        }\n    ```", "```php\n    public function addUser(string $username, string $password): PDOStatement\n        {\n            $stmt = $this->pdo->prepare(\"INSERT INTO users ('username',           'password') values (:user, :pass)\");\n            $stmt->execute([\n                ':user' => $username,\n                ':pass' => password_hash($password, PASSWORD_BCRYPT),\n            ]);\n            return $stmt;\n        }\n    ```", "```php\n    Database.php\n    41     public function getUserByUsername(string $formUsername): ?User\n    42     {\n    43         $stmt = $this->pdo->prepare(\"SELECT * FROM users WHERE username =              :username\");\n    44         if ($stmt->execute([':username' => $formUsername]) && ($data =              $stmt->fetch(PDO::FETCH_ASSOC))) {\n    45             return new User($data);\n    46         }\n    47         return null;\n    48     }\n    https://packt.live/2pz4AMh\n    ```", "```php\n    if (stmt->execute()) { // evaluation\n      $data = $stmt->fetch(PDO::FETCH_ASSOC); // assignment\n      if ($data) { // evaluation\n       /* ... */\n     }\n    }\n    ```", "```php\n        public function getOwnContacts(int $uid): PDOStatement\n        {\n            $stmt = $this->pdo->prepare(\"SELECT * FROM contacts WHERE user_id           = :uid\");\n            $stmt->bindParam(':uid', $uid, PDO::PARAM_INT);\n            $stmt->execute();\n            return $stmt;\n        }\n    ```", "```php\n        public function getOwnContactById(int $ownerId, int $contactId):       ?array\n        {\n            $stmt = $this->pdo->prepare(\"SELECT * FROM contacts WHERE           id = :cid and user_id = :uid\");\n            $stmt->bindParam(':cid', $contactId, PDO::PARAM_INT);\n            $stmt->bindParam(':uid', $ownerId, PDO::PARAM_INT);\n            if ($stmt->execute() && ($data = $stmt->fetch(PDO::FETCH_ASSOC)))\n            {\n                return $data;\n            }\n            return null;\n        }\n    ```", "```php\n    Database.php\n    79    public function addContact(\n    80         int $ownerId,\n    81         string $name,\n    82         string $email,\n    83         string $phone,\n    84         string $address\n    85     ): PDOStatement\n    86     {\n    87         $stmt = $this->pdo->prepare(\"INSERT INTO contacts (user_id,           'name', phone, email, address) \" .\n    88             \"VALUES (:uid, :name, :phone, :email, :address)\");\n    https://packt.live/31rQoll\n    ```", "```php\n    Database.php\n    98     public function updateContact(\n    99         int $contactId,\n    100         int $ownerId,\n    111         string $name,\n    112         string $email,\n    113         string $phone,\n    114         string $address\n    115     ): PDOStatement\n    https://packt.live/31oY47W\n    ```", "```php\n        public function deleteOwnContactById(int $ownerId, int $contactId):       PDOStatement\n        {\n            $stmt = $this->pdo->prepare(\"DELETE FROM contacts WHERE id = :cid           and user_id = :uid\");\n            $stmt->bindParam(':cid', $contactId, PDO::PARAM_INT);\n            $stmt->bindParam(':uid', $ownerId, PDO::PARAM_INT);\n            $stmt->execute();\n            return $stmt;\n        }\n    ```", "```php\n    Router.php\n    1  <?php declare(strict_types=1);\n    2 \n    3  namespace Components;\n    4 \n    5  use Handlers\\Contacts;\n    6  use Handlers\\Signup;\n    7  use Handlers\\Login;\n    8  use Handlers\\Logout;\n    9  use Handlers\\Profile;\n    10 use Handlers\\Signup;\n    https://packt.live/2MTj4OR\n    ```", "```php\n    Router.php\n    21             case '/profile':\n    22                 return new Profile();\n    23             case '/login':\n    24                 return new Login();\n    25             case '/logout':\n    26                 return new Logout();\n    27             case '/':\n    28                 return new class extends Handler\n    29                 {\n    30                     public function __invoke(): string\n    31                     {\n    32                         if (Auth::userIsAuthenticated()) {\n    33                             $this->requestRedirect('/profile');\n    34                         }\n    https://packt.live/2BrvFn6\n    ```", "```php\n    <?php declare(strict_types=1);\n    namespace Handlers;\n    use Components\\Auth;\n    use Components\\Database;\n    use Components\\Template;\n    class Contacts extends Handler\n    {\n    ```", "```php\n        public function handle(): string\n        {\n            if (!Auth::userIsAuthenticated()) {\n                return (new Login)->handle();\n            }\n            $user = Auth::getUser();\n    ```", "```php\n            $formError = [];\n            $formData = [];\n    ```", "```php\n            if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n                $formError = $this->processForm();\n                if (!$formError) {\n                    $this->requestRedirect('/contacts');\n                    return '';\n                }\n                $formData = $_POST;\n            }\n    ```", "```php\n    if (!empty($_GET['edit'])) {\n                $formData = Database::instance()->getOwnContactById               ($user->getId(), (int)$_GET['edit']);\n            }\n    ```", "```php\n    if (!empty($_GET['delete'])) {\n                Database::instance()->deleteOwnContactById($user->getId(),               (int)$_GET['delete']);\n                $this->requestRedirect('/contacts');\n                return '';\n            }\n    ```", "```php\n            return (new Template('contacts'))->render([\n                'user' => $user,\n                'contacts' => Database::instance()->getOwnContacts               ($user->getId()),\n                'formError' => $formError,\n                'formData' => $formData,\n            ]);\n    ```", "```php\n    Contacts.php\n    46     private function processForm(): array\n    47     {\n    48         $formErrors = [];\n    49         if (empty($_POST['name'])) {\n    50             $formErrors['name'] = 'The name is mandatory.';\n    51         } elseif (strlen($_POST['name']) < 2) {\n    52             $formErrors['name'] = 'At least two characters are required                  for name.';\n    53         }\n    54         if (!filter_var($_POST['email'] ?? '', FILTER_VALIDATE_EMAIL)) {\n    55             $formErrors['email'] = 'The email is invalid.';\n    56         }\n    https://packt.live/2pxEYiQ\n    ```", "```php\n        if (!$formErrors) {\n            if (!empty($_POST['id']) && ($contactId = (int)$_POST['id'])) {\n                Database::instance()->updateContact($contactId,               Auth::getUser()->getId(), $_POST['name'], $_POST['email'],               $_POST['phone'] ?? '', $_POST['address'] ?? '');\n            } else {\n                Database::instance()->addContact(Auth::getUser()->getId(),               $_POST['name'], $_POST['email'], $_POST['phone'] ?? '',               $_POST['address'] ?? '');\n            }\n        }\n        return $formErrors;\n    }\n    ```", "```php\n    Signup.php\n    1 <?php \n    2 declare(strict_types=1);\n    3 \n    4 namespace Handlers;\n    5 \n    6 use Components\\Auth;\n    7 use Components\\Database;\n    8 use Components\\Template;\n    https://packt.live/2W2TWJS\n    ```", "```php\n    Signup.php\n    32     private function handleSignup(): ?array\n    33     {\n    34         $formError = null;\n    35         $formUsername = trim($_POST['username'] ?? '');\n    36         $formPassword = trim($_POST['password'] ?? '');\n    37         $formPasswordVerify = $_POST['passwordVerify'] ?? '';\n    38         if (!$formUsername || strlen($formUsername) < 3) {\n    39             $formError = ['username' => 'Please enter an username of at                  least 3 characters.'];\n    40         } elseif (!ctype_alnum($formUsername)) {\n    41             $formError = ['username' => 'The username should contain only                  numbers and letters.'];\n    42         } elseif (!$formPassword) {\n    43             $formError = ['password' => 'Please enter a password of at                  least 6 characters.'];\n    44         } elseif ($formPassword !== $formPasswordVerify) {\n    45             $formError = ['passwordVerify' => 'The passwords doesn\\'t                  match.'];\n    46         } else {\n    47             $stmt = Database::instance()                 ->addUser(strtolower($formUsername), $formPassword);\n    https://packt.live/32pPGX7\n    ```", "```php\n    <?php\n    declare(strict_types=1);\n    namespace Handlers;\n    use Components\\Auth;\n    use Components\\Template;\n    class Profile extends Handler\n    {\n        public function handle(): string\n        {\n            if (!Auth::userIsAuthenticated()) {\n                return (new Login)->handle();\n            }\n            return (new Template('profile'))->render();\n        }\n    }\n    ```", "```php\n    <?php\n    declare(strict_types=1);\n    namespace Handlers;\n    use Components\\Auth;\n    class Logout extends Handler\n    {\n        public function handle(): string\n        {\n            Auth::logout();\n            $this->requestRedirect('/');\n            return '';\n        }\n    }\n    ```", "```php\n    Login.php\n    1  <?php\n    2  declare(strict_types=1);\n    3 \n    4  namespace Handlers;\n    5 \n    6  use Components\\Auth;\n    7  use Components\\Database;\n    8  use Components\\Template;\n    9 \n    10 class Login extends Handler\n    11 {\n    12     public function handle(): string\n    13     {\n    14         if (Auth::userIsAuthenticated()) {\n    15             $this->requestRedirect('/profile');\n    16             return '';\n    17         }\n    https://packt.live/2JjzX4z\n    ```", "```php\n    index.php\n    1  <?php\n    2  declare(strict_types=1);\n    3 \n    4  use Components\\Router;\n    5  use Components\\Template;\n    6 \n    7  const WWW_PATH = __DIR__;\n    8  \n    9  require_once __DIR__ . '/../src/components/Auth.php';\n    10 require_once __DIR__ . '/../src/components/Database.php';\n    11 require_once __DIR__ . '/../src/components/Template.php';\n    12 require_once __DIR__ . '/../src/components/Router.php';\n    13 require_once __DIR__ . '/../src/handlers/Handler.php';\n    14 require_once __DIR__ . '/../src/handlers/Login.php';\n    15 require_once __DIR__ . '/../src/handlers/Logout.php';\n    https://packt.live/2P1f7ud\n    ```", "```php\n    main.php\n    1 <?php use Components\\Auth; ?>\n    2 <!doctype html>\n    3 <html lang=\"en\">\n    4 <head>\n    5     <meta charset=\"utf-8\">\n    6     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    8     <title><?= ($title ?? '(no title)') ?></title>\n    https://packt.live/2VU7zuG\n    ```", "```php\n    <div class=\"jumbotron\">\n        <h1 class=\"display-4\">Hello!</h1>\n        <p class=\"lead\"><a href=\"/signup\">Sign up</a> to start creating your       contacts list.</p>\n        <p class=\"lead\">Already have an account? <a href=\"/login\">Login here</a>.</p>\n    </div>\n    ```", "```php\n    login-form.php\n    1 <?php\n    2 /** @var array $formError */\n    3 /** @var string $formUsername */\n    4 ?>\n    5 <div class=\"d-flex justify-content-center\">\n    6     <form action=\"/login\" method=\"post\" style=\"width: 100%; max-width: 420px;\">\n    7         <div class=\"text-center mb-4\">\n    8             <h1 class=\"h3 mb-3 mt-5 font-weight-normal\">Authenticate</h1>\n    9         </div>\n    https://packt.live/2MYqXTr\n    ```", "```php\n    signup-form.php\n    1 <?php\n    2 /** @var array $formError */\n    3 /** @var string $formUsername */\n    4 ?>\n    5 <div class=\"d-flex justify-content-center\">\n    6     <form action=\"/signup\" method=\"post\" style=\"width: 100%; max-width: 420px;\">\n    7         <div class=\"text-center mb-4\">\n    8             <h1 class=\"h3 mb-3 mt-5 font-weight-normal\">Sign up</h1>\n    9         </div>\n    https://packt.live/2MXzeXo\n    ```", "```php\n    profile.php\n    1  <?php\n    2 \n    3  use Components\\Auth;\n    4 \n    5  $user = Auth::getUser();\n    6  ?>\n    7 \n    8  <section class=\"my-5\">\n    9      <h3>Welcome, <?= $user->getUsername() ?>!</h3>\n    10 </section>\n    https://packt.live/2BmQRL0\n    ```", "```php\n    contacts.php\n    1 <?php\n    2 /** @var \\PDOStatement $contacts */\n    3 /** @var array $formError */\n    4 /** @var array $formData */\n    5 ?>\n    6 <section class=\"my-5\">\n    7     <h3>Contacts</h3>\n    8 </section>\n    https://packt.live/2pDdjwF\n    ```", "```php\ncontacts.php\n33 <div class=\"col-12 col-lg-4\">\n34         <h4 class=\"mb-3\">Add contact:</h4>\n35         <form method=\"post\">\n36             <div class=\"form-row\">\n37                 <div class=\"form-group col-6\">\n38                     <label for=\"contactName\">Name</label>\n39                     <input type=\"text\" class=\"form-control <?=                          isset($formError['name']) ? 'is-invalid' : ''; ?>\"\n40                            id=\"contactName\" placeholder=\"Enter name\"                                 name=\"name\"\n41                            value=\"<?= htmlentities($formData['name'] ??                                 '') ?>\">\nhttps://packt.live/2VU7UgW\n```", "```php\n    $exceptionHandler = function (Throwable $e) {\n        static $fh;\n        if (is_null($fh)) {\n            $fh = fopen(__DIR__ . '/app.log', 'a');\n            if (!$fh) {\n                echo 'Unable to access the log file.', PHP_EOL;\n                exit(1);\n            }\n        }\n    ```", "```php\n        $message = sprintf('%s [%d]: %s', get_class($e), $e->getCode(),       $e->getMessage());\n        $msgLength = mb_strlen($message);\n        $line = str_repeat('-', $msgLength);\n        $logMessage = sprintf(\n            \"%s\\n%s\\n> File: %s\\n> Line: %d\\n> Trace: %s\\n%s\\n\",\n            $line,\n            $message,\n            $e->getFile(),\n            $e->getLine(),\n            $e->getTraceAsString(),\n            $line\n        );\n        fwrite($fh, $logMessage);\n    };\n    ```", "```php\n    $errorHandler = function (int $code, string $message, string $file,   int $line) use ($exceptionHandler) {\n        $exception = new ErrorException($message, $code, $code, $file, $line);\n        $exceptionHandler($exception);\n        if (in_array($code, [E_ERROR, E_RECOVERABLE_ERROR, E_USER_ERROR])) {\n            exit(1);\n        }\n    };\n    ```", "```php\n    set_error_handler($errorHandler);\n    set_exception_handler($exceptionHandler);\n    ```", "```php\n    class NotANumber extends Exception {}\n    class DecimalNumber extends Exception {}\n    class NumberIsZeroOrNegative extends Exception {}\n    ```", "```php\n    function printError(string $message): void\n    {\n        echo '(!) ', $message, PHP_EOL;\n    }\n    ```", "```php\n    function calculateFactorial($number): int\n    {\n        if (!is_numeric($number)) {\n            throw new NotANumber(sprintf('%s is not a number.', $number));\n        }\n        $number = $number * 1;\n        if (is_float($number)) {\n            throw new DecimalNumber(sprintf('%s is decimal; integer is           expected.', $number));\n        }\n        if ($number < 1) {\n            throw new NumberIsZeroOrNegative(sprintf('Given %d while higher           than zero is expected.', $number));\n        }\n    ```", "```php\n        $factorial = 1;\n        for ($i = 2; $i <= $number; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    }\n    ```", "```php\n    $arguments = array_slice($argv, 1);\n    if (!count($arguments)) {\n        printError('At least one number is required.');\n    ```", "```php\n    } else {\n        foreach ($arguments as $argument) {\n            try {\n                $factorial = calculateFactorial($argument);\n                echo $argument, '! = ', $factorial, PHP_EOL;\n    ```", "```php\n            } catch (NotANumber | DecimalNumber | NumberIsZeroOrNegative $e) {\n                printError(sprintf('[%s]: %s', get_class($e),               $e->getMessage()));\n    ```", "```php\n            } catch (Throwable $e) {\n                printError(\"Unexpected error occured for [$argument]               input number.\");\n                $exceptionHandler($e);\n            }\n        }\n    }\n    ```", "```php\n    php factorial.php; \n    ```", "```php\n    composer require ramsey/uuid\n    ```", "```php\n    ls -lart vendor\n    ```", "```php\n    Example.php\n    1  <?php\n    2 \n    3  namespace Packt;\n    4 \n    5  use Monolog\\Logger;\n    6  use Ramsey\\Uuid\\Uuid;\n    7 \n    8  class Example\n    9  {\n    10     protected $logger;\n    11     public function __construct(Logger $logger)\n    12     {\n    13         $this->logger = $logger;\n    14     }\n    https://packt.live/33Hk6Ev\n    ```", "```php\n    <?php\n    require 'vendor/autoload.php';\n    use Monolog\\Logger;\n    use Monolog\\Handler\\StreamHandler;\n    use Packt\\Example;\n    $logger = new Logger('application_log');\n    $logger->pushHandler(new StreamHandler('.logs/app.log', Logger::INFO));\n    $e = new Example($logger);\n    $e->doSomething();\n    $e->printUuid();\n    ```", "```php\n    <?php\n    require 'vendor/autoload.php';\n    use GuzzleHttp\\Client;\n    ```", "```php\n    $client = new Client(['base_uri'=>'http://httpbin.org/']);\n    ```", "```php\n    try\n    {\n        $response=$client->request('POST', '/response-headers',[\n            'headers'=>[\n                'Accept'=>'application-json'\n            ]\n            'query'=> [\n                'first'=>'John',\n                'last'=>'Doe'\n            ]\n        ]);\n    ```", "```php\n        if ($response->getStatusCode()!==200){\n            throw new Exception(\"Status code was {$response->getStatusCode()},           not 200\");\n        }\n    ```", "```php\n        $responseObject=json_decode($response->getBody()->getContents());\n    ```", "```php\n        echo \"The web service responded with {$responseObject->first}       {$responseObject->last}\".PHP_EOL;\n    }\n    catch(Exception $ex)\n    {\n        echo \"An error occurred: \".$ex->getMessage().PHP_EOL;\n    }\n    ```"]