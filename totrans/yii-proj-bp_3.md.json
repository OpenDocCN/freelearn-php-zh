["```php\nID INTEGER PRIMARY KEY\nemail STRING\npassword STRING\ncreated INTEGER\nupdated INTEGER\n```", "```php\nID INTEGER PRIMARY KEY\nuser_id INTEGER\ntitle STRING\ndata TEXT\ntime INTEGER\ncreated INTEGER\nupdated INTEGER\n```", "```php\nID INTEGER PRIMARY KEY\nevent_id INTEGER\ntitle STRING\noffset INTEGER\ntime INTEGER\ncreated INTEGER\nupdated INTEGER\n```", "```php\nCREATE USER 'ch3_reminders'@'localhost' IDENTIFIED BY 'ch3_reminders';\nCREATE DATABASE IF NOT EXISTS `ch3_reminders`;\nGRANT ALL PRIVILEGES ON `ch3\\_reminders` . * TO 'ch3_reminders'@'localhost';\n```", "```php\n<?php return array(\n   'basePath'=>dirname(__FILE__).DIRECTORY_SEPARATOR.'..',\n   'name'=>'Scheduled Reminders',\n   'import'=>array(\n      'application.models.*',\n   ),\n   'components'=>array(\n\n      'errorHandler'=>array(\n            'errorAction'=>'site/error',\n        ),\n       'urlManager'=>array(\n         'urlFormat'=>'path',\n         'showScriptName'=>false,\n         'rules'=>array(\n            '/' => 'event/index',\n            'event/date/<date:[\\w-]+>' => 'event/index', '<controller:\\w+>/<action:\\w+>/<id:\\d+>'=>'<controller>/<action>', <controller:\\w+>/<action:\\w+>'=>'<controller>/<action>')\n      )\n   )\n);\n```", "```php\n'db' => array(\n    'class' => 'CDbConnection',\n    'connectionString' => 'mysql:host=127.0.0.1;dbname=ch3_reminders',\n    'emulatePrepare' => true,\n    'username' => 'ch3_reminders',\n    'password' => 'ch3_reminders',\n    'charset' => 'utf8',\n    'schemaCachingDuration' => '3600'\n),\n```", "```php\n'params' => array(\n    'smtp' => require __DIR__ . '/params.php'\n)\n```", "```php\n<?php return array(\n   'host' => '',\n   'username' => '',\n   'password' => '',\n   'from' => '',\n   'port' => ''\n);\n```", "```php\n{\n   \"minimum-stability\" : \"dev\",\n   \"require\": {\n       \"phpmailer/phpmailer\": \"dev-master\"\n\t   \"ircmaxell/password-compat\": \"dev-master\"\n   }\n}\n```", "```php\ncd /path/to/project\nphp /path/to/composer.phar\n\n```", "```php\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\n - Installing phpmailer/phpmailer (dev-master f9d229a)\n Cloning f9d229af549d28d4c9fdd3273bf6525cde3bc472\nGenerating autoload files\n\n```", "```php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n```", "```php\n$this->createTable('users', array(\n   'id'           => 'pk',\n   'email'        => 'string',\n   'password'     => 'string',\n   'created'      => 'integer',\n   'updated'      => 'integer'\n));\n```", "```php\n$this->createIndex('email_index', 'users', 'email', true);\n```", "```php\n$this->dropTable('users');\n```", "```php\n    $this->createTable('events', array(\n       'id'        => 'pk',\n       'user_id'   => 'integer',\n       'title'     => 'string',\n       'data'      => 'text',\n       'time'      => 'integer',\n       'created'   => 'integer',\n       'updated'   => 'integer'\n    ));\n    ```", "```php\n    $this->addForeignKey('event_users', 'events', 'user_id', 'users', 'id', NULL, 'CASCADE', 'CASCADE');\n    ```", "```php\n       $this->createTable('reminders', array(\n       'id'          => 'pk',\n       'event_id'    => 'integer',\n       'offset'      => 'integer',\n       'time'        => 'integer',\n       'created'     => 'integer',\n       'updated'     => 'integer'\n    ));\n    ```", "```php\n    $this->addForeignKey('reminder_events', 'reminders', 'event_id', 'events', 'id', NULL, 'CASCADE', 'CASCADE');\n    ```", "```php\n$this->dropForeignKey('event_users', 'events');\n$this->dropForeignKey('reminder_events', 'reminders');\n$this->dropTable('events');\n$this->dropTable('reminders');\n```", "```php\npublic function behaviors()\n{\n   return array(\n      'CTimestampBehavior' => array(\n         'class' => 'zii.behaviors.CTimestampBehavior',\n         'createAttribute'    => 'created',\n         'updateAttribute'    => 'updated',\n         'setUpdateOnCreate' => true\n      )\n   );\n}\n```", "```php\npublic function relations()\n{\n   return array(\n      'events' => array(self::HAS_MANY, 'Events', 'user_id'),\n   );\n}\n```", "```php\nprivate $_oldAttributes = array();\n```", "```php\npublic function afterFind()\n{\n   if ($this !== NULL)\n      $this->_oldAttributes = $this->attributes;\n   return parent::afterFind();\n}\n```", "```php\npublic function beforeSave()\n{\n   if ($this->password == NULL)\n      $this->password = $this->_oldAttributes['password'];\n   else\n      $this->password = password_hash($this->password, PASSWORD_BCRYPT, array('cost' => 13));\n\n   return parent::beforeSave();\n}\n```", "```php\npublic function relations()\n{\n   return array(\n      'event' => array(self::BELONGS_TO, 'Events', 'event_id'),\n   );\n}\n```", "```php\npublic function beforeValidate()\n{\n   $this->time = (int)strtotime($this->time);\n   $this->offset = ($this->offset*60 + $this->time);\n\n   return parent::beforeValidate();\n}\n```", "```php\n    public function relations()\n    {\n       return array(\n          'user' => array(self::BELONGS_TO, 'Users', 'user_id'),\n          'reminders' => array(self::HAS_MANY, 'Reminders', 'event_id'),\n       );\n    }\n    ```", "```php\n    public function beforeValidate()\n    {\n       $this->time = (int)strtotime($this->time);\n\n       // Set the user_id to be the current user\n       $this->user_id = Yii::app()->user->id;\n\n       return parent::beforeValidate();\n    }\n    ```", "```php\n    private function getDate()\n    {\n        if (isset($_GET['date']))\n           return $_GET['date'];\n\n        return gmdate(\"Y-m-d\");\n    }\n    ```", "```php\n    public function search($between = false)\n    ```", "```php\n    if ($between)\n        $criteria->addBetweenCondition('time', strtotime($this->getDate() . ' 00:00:00'), strtotime($this->getDate() . ' 23:59:59'));\n    ```", "```php\n'event/date/<date:[\\w-]+>' => 'event/index',\n```", "```php\n<?php class EventController extends CController{}\n```", "```php\n    public function actionIndex()\n    {\n        $model = new Events('search');\n        $model->unsetAttributes();\n\n        if (isset($_GET['Events']))\n            $model->attributes = $_GET['Events'];\n\n        $model->user_id = Yii::app()->user->id;\n\n        $this->render('index', array('model' => $model));\n    }\n    ```", "```php\n    private function loadModel($id)\n    {\n       if ($id == NULL)\n          throw new CHttpException(400, 'Bad Request');\n\n       $model = Events::model()->findByPk($id);\n\n       if ($model == NULL)\n          throw new CHttpException(404, 'No model with that ID was found');\n\n       return $model;\n    }\n    ```", "```php\n    public function actionDetails($id = NULL)\n    {\n       if (Yii::app()->request->isAjaxRequest)\n       {\n          $model = $this->loadModel($id);\n\n          $this->renderPartial('details', array('model' => $model));\n          Yii::app()->end();\n       }\n        Throw new CHttpException(400, 'Bad Request');\n    }\n    ```", "```php\n    public function actionSave($id = NULL)\n    {\n       if ($id != NULL)\n          $model = $this->loadModel($id);\n       else\n          $model = new Events;\n\n       if (isset($_POST['Events']))\n       {\n          $model->attributes = $_POST['Events'];\n\n          if ($model->save())\n             $this->redirect($this->createUrl('/event/save', array('id' => $model->id)));\n       }\n\n       $this->render('save', array('model' => $model));\n    }\n    ```", "```php\n    public function actionDelete($id = NULL)\n    {\n       $model = $this->loadModel($id);\n\n       if ($model->delete())\n          $this->redirect($this->createUrl('/event'));\n\n       throw new CHttpException(400, 'Bad Request');\n    }\n    ```", "```php\n    public function beforeAction($action)\n    {\n       if (!Yii::app()->request->isPostRequest)\n          throw new CHttpException(400, 'Bad Request');\n\n       return parent::beforeAction($action);\n    }\n    ```", "```php\n    private function loadEvent($event_id)\n    {\n       $event = Events::model()->findByPk($event_id);\n       if ($event == NULL)\n          return false;\n\n       if ($event->user_id != Yii::app()->user->id)\n          return false;\n\n       return true;\n    }\n\n    private function loadModel($id)\n    {\n       if ($id == NULL)\n          throw new CHttpException(400, 'Bad Request');\n\n       $model = Reminders::model()->findByPk($id);\n\n       if ($model == NULL)\n          throw new CHttpException(404, 'No model with that ID was found');\n\n       return $model;\n    }\n    ```", "```php\n    public function actionDelete($id = NULL)\n    {\n       $model = $this->loadModel($id);\n\n       if (!$this->loadEvent($model->event_id))\n          return false;\n\n       if ($model->delete())\n          return true;\n\n       throw new CHttpException(400, 'Bad Request');\n    }\n    ```", "```php\n    public function actionSave($id = NULL)\n    {\n       if ($id != NULL)\n          $model = $this->loadModel($id);\n       else\n          $model = new Reminders;\n\n       if (isset($_POST['Reminders']))\n       {\n          $model->attributes = $_POST['Reminders'];\n\n          if (!$this->loadEvent($model->event_id))\n             return false;\n\n          if ($model->save())\n             return true;\n          else\n             throw new CHttpException(400, print_r($model->getErrors(), true));\n       }\n\n       return true;\n    }\n    ```", "```php\n    <?php echo CHtml::link('Create New Event', $this->createUrl('/event/save'), array('class' => 'pull-right btn btn-primary')); ?>\n    <div class=\"clearfix\"></div>\n    ```", "```php\n    <?php $this->widget('application.components.EventListView', array(\n    ```", "```php\n        'dataProvider'=>$model->search(true),\n    ```", "```php\n        'template' => '{items}',\n        'itemsTagName' => 'ul',\n    ```", "```php\n        'enableSorting' => true,\n        'sortableAttributes' => array(\n           'time',\n           'title'\n        ),\n    ```", "```php\n        'itemView'=>'_event'\n    ));\n    ```", "```php\nYii::app()->clientScript->registerCssFile(Yii::app()->baseUrl . '/css/calendar.css');\n```", "```php\n<li class=\"event\" data-attr-id=\"<?php echo $data->id; ?>\">\n   <div class=\"time\"><?php echo gmdate(\"H:i\", $data->time); ?></div>\n   <h2 class=\"title\"><?php echo CHtml::encode($data->title); ?></h2>\n</li>\n```", "```php\n    <?php\n    Yii::import('zii.widgets.CListView');\n    class EventListView extends CListView {}\n    ```", "```php\n    public function getDate()\n    {\n        if (isset($_GET['date']))\n           return $_GET['date'];\n\n        return gmdate(\"Y-m-d\");\n    }\n    ```", "```php\n    public function renderItems()\n    {\n       echo CHtml::openTag('div', array('class' => 'event_container'));\n       echo CHtml::closeTag('div');\n    }\n    ```", "```php\n    echo CHtml::openTag('div', array('class' => 'month_year_picker'));\n       echo CHtml::link(NULL, $this->controller->createUrl('/event', array('date' => gmdate(\"Y-m-d\", strtotime($this->date .\" previous year\")))), array('class' => 'fa fa-angle-double-left pull-left'));\n       echo CHtml::link(NULL, $this->controller->createUrl('/event', array('date' => gmdate(\"Y-m-d\", strtotime($this->date .\" previous month\")))), array('class' => 'fa fa-angle-left pull-left'));\n       echo CHtml::tag('span', array(), date('M Y', strtotime($this->date)));\n       echo CHtml::link(NULL, $this->controller->createUrl('/event', array('date' => gmdate(\"Y-m-d\", strtotime($this->date .\" next year\")))), array('class' => 'fa fa-angle-double-right pull-right'));\n       echo CHtml::link(NULL, $this->controller->createUrl('/event', array('date' => gmdate(\"Y-m-d\", strtotime($this->date .\" next month\")))), array('class' => 'fa fa-angle-right pull-right'));\n    echo CHtml::closeTag('div');\n    ```", "```php\n    echo CHtml::openTag('div', array('class' => 'day_picker'));\n       echo CHtml::openTag('ul');\n          $this->renderDays(gmdate('Y-m-d', strtotime($this->date . ' -15 days')), $this->date);\n          $this->renderDays($this->date, gmdate('Y-m-d', strtotime($this->date . ' +15 days')));\n       echo CHtml::closeTag('ul');\n    echo CHtml::closeTag('div');\n    ```", "```php\n    private function renderDays($start, $end)\n    {\n       $start    = new DateTime($start);\n       $end      = new DateTime($end);\n       $interval = new DateInterval('P1D');\n       $period   = new DatePeriod($start, $interval, $end);\n\n       foreach ($period as $dt)\n          $this->renderDay($dt->format('Y-m-d'));\n    }\n    ```", "```php\n    private function renderDay($date)\n    {\n       $class = 'day';\n       if ($this->date == $date)\n          $class .= ' selected';\n       echo CHtml::openTag('li', array('class' => $class));\n          echo CHtml::tag('span', array('class' => 'day_string'), gmdate('D', strtotime($date)));\n          echo CHtml::link(date('d', strtotime($date)), $this->controller->createUrl('/event', array('date' => gmdate('Y-m-d', strtotime($date)))), array('class' => 'day_date'));\n       echo CHtml::closeTag('li');\n    }\n    ```", "```php\necho CHtml::openTag('div', array('class' => 'outer_container'));\n   echo CHtml::openTag('div', array('class' => 'inner_container'));\n      echo CHtml::openTag('div', array('class' => 'selected_date'));\n         echo CHtml::tag('span', array('class' => 'selected_date_date'), gmdate(\"l F d Y\", strtotime($this->date)));\n      echo CHtml::closeTag('div');\n      $this->renderSorter();\n      parent::renderItems();\n   echo CHtml::closeTag('div');\n\n   // Details container is populated via Ajax Request\n   echo CHtml::tag('div', array('class' => 'details'), NULL);\n   echo CHtml::tag('div', array('class' => 'clearfix'), NULL);\necho CHtml::closeTag('div');\n```", "```php\nYii::app()->clientScript->registerScript('li_click', '\n   $(\".items li\").click(function() {\n      var id = $(this).attr(\"data-attr-id\");\n      $.get(\"/event/details/\" + id, function(data) {\n         $(\".details\").replaceWith(data);\n\n         $(\".fa-times\").click(function() {\n            var id = $(this).parent().attr(\"id\");\n            var self = $(this).parent();\n            $.post(\"/reminder/delete/id/\" + id, function() {\n               $(self).remove();\n            })\n         });\n      });\n   });\n');\n```", "```php\n    <h3><?php echo $model->isNewRecord ? 'Create New' : 'Update'; ?> Event</h3>\n    <?php $form=$this->beginWidget('CActiveForm', array(\n       'id'=>'project-form',\n       'htmlOptions' => array(\n          'class' => 'form-horizontal',\n          'role' => 'form'\n       )\n    )); ?>\n       <?php echo $form->errorSummary($model); ?>\n\n       <div class=\"form-group\">\n          <?php echo $form->labelEx($model,'title', array('class' => 'col-sm-2 control-label')); ?>\n          <div class=\"col-sm-10\">\n             <?php echo $form->textField($model,'title', array('class' => 'form-control')); ?>\n          </div>\n       </div>\n\n       <div class=\"form-group\">\n          <?php echo $form->labelEx($model,'data', array('class' => 'col-sm-2 control-label')); ?>\n          <div class=\"col-sm-10\">\n             <?php echo $form->textArea($model,'data', array('class' => 'form-control')); ?>\n          </div>\n       </div>\n\n       <div class=\"form-group\">\n          <?php echo $form->labelEx($model,'time', array('class' => 'col-sm-2 control-label')); ?>\n          <div class=\"col-sm-10\">\n             <div class=\"input-append date\">\n                <?php echo $form->textField($model, 'time', array('value' => $model->isNewRecord ? NULL : gmdate('Y-m-d H:i:s', $model->time), 'class' => 'form-control')); ?>\n             </div>\n          </div>\n       </div>\n    ```", "```php\n    <?php if (!$model->isNewRecord): ?>\n       <input type=\"hidden\" id=\"event_id\" value=\"<?php echo $model->id; ?>\" />\n       <hr />\n       <h3>Reminders</h3>\n       <div class=\"reminders_container\">\n          <?php foreach ($model->reminders as $reminder): ?>\n             <div class=\"form-group\">\n                <?php echo CHtml::tag('label', array('class' => 'col-sm-2 control-label'), 'Reminder'); ?>\n                <div class=\"col-sm-9\">\n                   <?php echo CHtml::tag('input', array(\n                      'id' => $reminder->id,\n                      'name' => 'Reminders[' . $reminder->id . '][time]',\n                      'class' => 'form-control',\n                      'value' => gmdate('Y-m-d H:i:s', $reminder->time)\n                   ), NULL); ?>\n                </div>\n                <span class=\"fa fa-times\"></span>\n             </div>\n          <?php endforeach; ?>\n       </div>\n    <?php endif; ?>\n    ```", "```php\n    <div class=\"form-group template\" style=\"display:none\">\n       <?php echo CHtml::tag('label', array('class' => 'col-sm-2 control-label'), 'Reminder'); ?>\n       <div class=\"col-sm-9\">\n          <?php echo CHtml::tag('input', array(\n             'id' => NULL,\n             'name' => 'Reminders[0][time]',\n             'class' => 'form-control'\n          ), NULL); ?>\n       </div>\n    </div>\n    ```", "```php\n    <div class=\"row buttons\">\n       <?php echo CHtml::submitButton($model->isNewRecord ? 'Create' : 'Save', array('class' => 'btn btn-primary pull-right col-md-offset-1')); ?>\n\n       <?php if (!$model->isNewRecord): ?>\n          <?php echo CHtml::link('Delete Event', $this->createUrl('/event/delete', array('id' => $model->id)), array('class' => 'btn btn-danger pull-right col-md-offset-1')); ?>\n          <?php echo CHtml::link('Add Reminder', '#', array('class' => 'btn btn-success pull-right', 'id' => 'add_reminder')); ?>\n       <?php endif; ?>\n    </div>\n    <?php $this->endWidget(); ?>\n    ```", "```php\ngit clone https://github.com/smalot/bootstrap-datetimepicker \n\n```", "```php\n<?php Yii::app()->clientScript->registerCssFile(Yii::app()->baseUrl . '/js/bootstrap-datetimepicker/css/bootstrap-datetimepicker.min.css'); ?>\n<?php Yii::app()->clientScript->registerScriptFile(Yii::app()->baseUrl . '/js/bootstrap-datetimepicker/js/bootstrap-datetimepicker.js', CCLientScript::POS_END); ?>\n```", "```php\n<?php class UserCommand extends CConsoleCommand {}\n```", "```php\npublic function actionCreateUser($email, $password)\n{\n   $model = new Users;\n   $model->attributes = array(\n      'email' => $email,\n      'password' => $password\n   );\n\n   if (!$model->validate())\n      echo \"Missing Required Attribute\\n\";\n   else\n   {\n      try {\n         if ($model->save())\n            echo \"User Created\\n\";\n         else\n            print_r($model->getErrors);\n         return;\n      } catch (Exception $e) {\n         print_r($e->getMessage());\n      }\n   }\n}\n```", "```php\nphp protected/yiic.php user createuser --email=test@test.com --password=password123\n\n```", "```php\npublic function actionDeleteUser($email)\n{\n   $model = Users::model()->findByAttributes(array('email' => $email));\n   if ($model == NULL)\n   {\n      echo \"No user with that email was found.\\n\";\n      return 0;\n   }\n\n   if ($model->delete())\n      echo \"User has been deleted.\\n\";\n   else\n      echo \"User could not be deleted.\\n\";\n}\n```", "```php\nphp protected/yiic.php user deleteuser --email=test@test.com\n\n```", "```php\npublic function actionChangePassword($email, $oldPassword, $newPassword)\n{\n   $model = Users::model()->findByAttributes(array('email' => $email));\n\n   if ($model == NULL)\n   {\n      echo \"No user with that email was found.\\n\";\n      return 0;\n   }\n\n   if (password_verify($oldPassword, $model->password))\n   {\n      $model->password = password_hash($newPassword, PASSWORD_BCRYPT, array('cost' => 13));\n\n      if ($model->save())\n         echo \"Password has been changed.\\n\";\n      else\n         echo \"Password could not be changed.\\n\";\n   }\n   else\n      echo \"Unable to Verify Old Password.\\n\";\n}\n```", "```php\nif (password_verify($oldPassword, $model->password))\n```", "```php\n$model->password = password_hash($newPassword, PASSWORD_BCRYPT, array('cost' => 13));\n```", "```php\nphp protected/yiic.php user changepassword --email=test@test.com --oldpassword=password123 --newpassword=newsecurepassword\n\n```", "```php\nclass UserIdentity extends CUserIdentity {}\n```", "```php\n    private $_id;\n    ```", "```php\n    public function getId()\n    {\n       return $this->_id;\n    }\n    ```", "```php\n    public function authenticate() {}\n    ```", "```php\n    $record = Users::model()->findByAttributes(array('email'=>$this->username));\n    ```", "```php\n    if ($record == NULL)\n        $this->errorCode = self::ERROR_UNKNOWN_IDENTITY;\n    ```", "```php\n    else if (password_verify($this->password, $record->password))\n    {\n       $this->errorCode = self::ERROR_NONE;\n       $this->_id        = $record->id;   \n    }\n    ```", "```php\n    else\n       $this->errorCode = self::ERROR_UNKNOWN_IDENTITY;\n    ```", "```php\n    return !$this->errorCode;\n    ```", "```php\npublic function filters()\n{\n   return array(\n        'accessControl',\n   );\n}\n\npublic function accessRules()\n{\n   return array(\n        array('allow',\n            'users'=>array('@'),\n        ),\n        array('deny',  // deny all users\n            'users'=>array('*'),\n        ),\n    );\n}\n```", "```php\nclass RemindersCommand extends CConsoleCommand\n{\n   public function actionSendReminders($interval) {}\n}\n```", "```php\n$time = time();\n$start = $time - ($time % $interval * 60);\n$end = $start + (($interval *60) - 1));\n```", "```php\n$criteria = new CDbCriteria;\n$criteria->addBetweenCondition('offset', $start, $end);\n$reminders = Reminders::model()->findAll($criteria);\n```", "```php\nforeach ($reminders as $reminder)\n{\n   // Load the PHPMailer Class\n   $mail = new PHPMailer;\n\n   // Tell PHP Mailer to use SMTP with authentication\n   $mail->isSMTP();\n   $mail->SMTPAuth = true;\n\n      // Specify the Host and Port we should connect to\n   $mail->Host = Yii::app()->params['smtp']['host'];\n   $mail->Port = Yii::app()->params['smtp']['port'];\n\n   // Specify the username and password we should use\n   // (if required by our SMTP server)\n   $mail->Username = Yii::app()->params['smtp']['username'];\n   $mail->Password = Yii::app()->params['smtp']['password'];\n\n   // Set the security type of required\n   $mail->SMTPSecure = 'tls';\n\n   // Set the from and to addresses\n   $mail->from = Yii::app()->params['smtp']['from'];\n   $mail->addAddress($reminder->event->user->email);\n\n   // This should be an HTML email\n   $mail->isHTML(true);\n\n   // Set the subject and body\n   $mail->Subject ='Reminder from Scheduled Reminders';\n   $mail->Body = 'This is a reminder that '.$reminder->event->title.' is due on '. gmdate(\"Y-m-d H:i UTC\", $reminder->offset) . '. This event has the following details:<br />' . $reminder->event->data;\n\n   // Then send the email\n   if (!$mail->send())\n        echo $mail->ErrorInfo . \"\\n\";\n   else\n        echo \".\";\n}\n```", "```php\nphp protected/yiic.php reminders sendreminder --interval=5\n\n```"]