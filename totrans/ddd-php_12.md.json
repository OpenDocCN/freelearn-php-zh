["```php\nnamespace AppBundle\\Controller;\n\nuse FOS\\RestBundle\\Controller\\Annotations as Rest;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\n\nclass UsersController extends FOSRestController\n{\n    /**\n     * @ApiDoc(\n     *     resource = true,\n     *     description = \"Finds a user given a user ID\",\n     *     statusCodes = {\n     *         200 = \"Returned when the user have been found\",\n     *         404 = \"Returned when the user could not be found\"\n     *     }\n     * )\n     *\n     * @Rest\\View(\n     *     statusCode = 200\n     * )\n     */\n    public function getUserAction($id)\n    {\n        $repo = $this->get('es.manager.default.user');\n        $user = $repo->find($id);\n\n        if (!$user) {\n            throw $this->createNotFoundException(\n                sprintf(\n                    'A user with an ID of %s does not exist',\n                    $id\n                )\n            );\n        }\n        return $user;\n    }\n}\n\n```", "```php\n{\n    \"id\": \"c3c587c6-610a-42df\",\n    \"points\": 0,\n    \"_links\": {\n        \"self\": {\n            \"href\":\n            \"http://gamification.ctx/api/users/c3c587c6-610a-42df\"\n        }\n    }\n}\n\n```", "```php\nnamespace Lw\\Domain\\Model\\User;\n\ninterface UserService\n{\n    public function badgesFrom(UserId $id);\n}\n\n```", "```php\nnamespace Lw\\Infrastructure\\Service;\n\nuse Lw\\Domain\\Model\\User\\UserId;\nuse Lw\\Domain\\Model\\User\\UserService;\n\nclass TranslatingUserService implements UserService\n{\n    private $userAdapter;\n\n    public function __construct(UserAdapter $userAdapter)\n    {\n        $this->userAdapter = $userAdapter;\n    }\n\n    public function badgesFrom(UserId $id)\n    {\n        return $this->userAdapter->toBadges($id);\n    }\n}\n\n```", "```php\nnamespace Lw\\Infrastructure\\Service;\n\nuse GuzzleHttp\\Client;\n\nclass HttpUserAdapter implements UserAdapter\n{\n    private $client;\n\n    public function __construct(Client $client)\n    {\n        $this->client = $client;\n    }\n\n    public function toBadges( $id)\n    {\n        $response = $this->client->get(\n            sprintf('/users/%s', $id),\n            [\n                'allow_redirects' => true,\n                'headers' => [\n                    'Accept' => 'application/hal+json'\n                ]\n            ]\n        );\n\n        $badges = [];\n        if (200 === $response->getStatusCode()) {\n            $badges = \n                (new UserTranslator())\n                    ->toBadgesFromRepresentation(\n                        json_decode(\n                            $response->getBody(),\n                            true\n                        )\n                    );\n        }\n        return $badges;\n    }\n}\n\n```", "```php\nnamespace Lw\\Infrastructure\\Service;\n\nuse Lw\\Infrastructure\\Domain\\Model\\User\\FirstWillMadeBadge;\nuse Symfony\\Component\\PropertyAccess\\PropertyAccess;\n\nclass UserTranslator\n{\n    public function toBadgesFromRepresentation($representation)\n    {\n        $accessor = PropertyAccess::createPropertyAccessor();\n        $points = $accessor->getValue($representation, 'points');\n        $badges = [];\n        if ($points > 3) {\n            $badges[] = new FirstWillMadeBadge();\n        }\n        return $badges;\n    }\n}\n\n```", "```php\nnamespace AppBundle\\Infrastructure\\Messaging\\PhpAmqpLib;\n\nuse Lw\\Gamification\\Command\\SignupCommand;\nuse OldSound\\RabbitMqBundle\\RabbitMq\\ConsumerInterface;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nclass PhpAmqpLibLastWillUserRegisteredConsumer\n    implements ConsumerInterface\n{\n    private $commandBus;\n\n    public function __construct($commandBus)\n    {\n        $this->commandBus = $commandBus;\n    }\n\n    public function execute(AMQPMessage $message)\n    {\n        $type = $message->get('type');\n\n        if('Lw\\Domain\\Model\\User\\UserRegistered' === $type) {\n            $event = json_decode($message->body);\n            $eventBody = json_decode($event->event_body);\n\n            $this->commandBus->handle(\n                new SignupCommand($eventBody->user_id->id)\n            );\n            return true;\n        }\n        return false;\n    }\n}\n\n```", "```php\nnamespace AppBundle\\Infrastructure\\Messaging\\PhpAmqpLib;\n\nuse Lw\\Gamification\\Command\\RewardUserCommand;\nuse Lw\\Gamification\\Domain\\Model\\AggregateDoesNotExist; \nuse OldSound\\RabbitMqBundle\\RabbitMq\\ConsumerInterface;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nclass PhpAmqpLibLastWillWishWasMadeConsumer implements ConsumerInterface\n{\n    private $commandBus;\n\n    public function __construct($commandBus)\n    {\n        $this->commandBus = $commandBus;\n    }\n\n    public function execute(AMQPMessage $message)\n    {\n        $type = $message->get('type');\n\n        if ('Lw\\Domain\\Model\\Wish\\WishWasMade' === $type) {\n            $event = json_decode($message->body);\n            $eventBody = json_decode($event->event_body);\n\n            try {\n                $points = 5;\n                $this->commandBus->handle(\n                    new RewardUserCommand(\n                        $eventBody->user_id->id,\n                        $points\n                    )\n                );\n            } catch (AggregateDoesNotExist $e) {\n                // Noop\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n}\n\n```", "```php\nservices:\n    last_will_user_registered_consumer:\n        class:\n            AppBundle\\Infrastructure\\Messaging\\\n                PhpAmqpLib\\PhpAmqpLibLastWillUserRegisteredConsumer\n        arguments:\n            - @tactician.commandbus\n\n    last_will_wish_was_made_consumer:\n        class:\n            AppBundle\\Infrastructure\\Messaging\\\n                PhpAmqpLib\\PhpAmqpLibLastWillWishWasMadeConsumer\n        arguments:\n            - @tactician.commandbus\n\nold_sound_rabbit_mq:\n    connections:\n         default:\n              host: \" %rabbitmq_host%\"\n              port: \" %rabbitmq_port%\"\n              user: \" %rabbitmq_user%\"\n              password: \" %rabbitmq_password%\"\n              vhost: \" %rabbitmq_vhost%\"\n              lazy: true\n\n    consumers:\n        last_will_user_registered:\n            connection: default\n            callback: last_will_user_registered_consumer\n\n            exchange_options:\n                name: last-will\n                type: fanout\n\n            queue_options:\n                name: last-will\n\n        last_will_wish_was_made:\n            connection: default\n            callback: last_will_wish_was_made_consumer\n\n            exchange_options:\n                name: last-will\n                type: fanout\n\n            queue_options:\n                name: last-wil\n\n```", "```php\n> php app/console rabbitmq:consumer --messages=1000 last_will_user_registered\n> php app/console rabbitmq:consumer --messages=1000 last_will_wish_was_made\n\n```"]