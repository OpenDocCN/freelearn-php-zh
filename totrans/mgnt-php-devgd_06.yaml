- en: Chapter 6. Testing and Quality Assurance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 测试与质量保证
- en: 'So far, we have covered all the steps required to create a Magento extension:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了创建Magento扩展所需的全部步骤：
- en: Magento fundamentals
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Magento基础知识
- en: Frontend development
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端开发
- en: Backend development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端开发
- en: Extending and working with APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展和使用API
- en: 'However, we omitted a critical step in the development of any extension or
    custom code: testing and quality assurance. Despite the fact that Magento is a
    complex platform, it lacks any out-of-the-box testing.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们在任何扩展或自定义代码的开发中遗漏了一个关键步骤：测试和质量保证。尽管Magento是一个复杂的平台，但它缺乏任何即插即用的测试。
- en: For this reason, proper testing and quality assurance is often overlooked by
    most of the Magento developers, either due to a lack of information, or because
    of the large overhead of some of the testing tools, and while there are not many
    tools available for running a proper test with Magento, the ones that exist are
    of very high quality.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，大多数的Magento开发者往往忽略了适当的测试和质量保证，要么是因为缺乏信息，要么是因为一些测试工具的高额开销，尽管可用于在Magento上运行适当测试的工具不多，但现有的工具质量非常高。
- en: In this chapter, we will take a look at the different options available to test
    our Magento code, and we will also build some very basic tests for our custom
    extension.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨可用于测试我们的Magento代码的不同选项，我们还将为我们的自定义扩展构建一些非常基本的测试。
- en: 'So, let''s go over the topics covered in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们回顾一下本章涵盖的主题：
- en: The different testing frameworks and tools available for Magento
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用于Magento的不同的测试框架和工具
- en: The importance of testing our Magento code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试我们Magento代码的重要性
- en: How to set up, install, and use Ecomdev PHPUnit extension
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置、安装和使用Ecomdev PHPUnit扩展
- en: How to set up, install, and use Magento Mink to run functional tests
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置、安装和使用Magento Mink来运行功能测试
- en: Testing Magento
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Magento
- en: Before we start writing any test, it is important that we understand the concepts
    related to testing and, more particularly, to each of the available methodologies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写任何测试之前，了解与测试相关的概念，尤其是每个可用的方法论，是非常重要的。
- en: Unit testing
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: The idea behind unit testing is to write tests for certain areas (units) of
    our code, so that we can verify that the code works as expected and the function
    is returning expected values.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试背后的理念是为我们的代码的某些区域（单元）编写测试，以便我们可以验证代码按预期工作，并且函数返回预期的值。
- en: '|   | *" In computer programming, unit testing is a method by which individual
    units of source code, sets of one or more computer program modules together with
    associated control data, usage procedures, and operating procedures, are tested
    to determine if they are fit for use."* |   |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | *"在计算机编程中，单元测试是一种方法，通过这种方法，可以测试单个源代码单元、一组一个或多个计算机程序模块及其相关的控制数据、使用程序和操作程序，以确定它们是否适合使用。"*
    |   |'
- en: '|   | --*Wikipedia* |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | --*维基百科* |'
- en: Another advantage of writing unit tests is that by doing this, we are more likely
    to write code that is easier to test.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试的另一个优点是，通过这样做，我们更有可能编写出易于测试的代码。
- en: This means that our code tends to be broken down into smaller but more specialized
    functions. As we continue to write more and more tests, we start building a test
    suite that can be run against our codebase every time we introduce any changes
    or functionalities; this is known as **regression testing**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的代码倾向于被分解成更小但更专业的函数。随着我们继续编写更多的测试，我们开始构建一个测试套件，每次我们引入任何更改或功能时都可以运行我们的代码库；这被称为**回归测试**。
- en: Regression testing
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回归测试
- en: Regression testing mostly refers to the practice of rerunning existing test
    suites after making code changes to verify that a new functionality is not introducing
    new bugs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 回归测试主要是指在对现有测试套件进行代码更改后重新运行现有测试套件，以验证新功能没有引入新的错误。
- en: '|   | *"Regression testing is a type of software testing that seeks to uncover
    new software bugs, or regressions, in existing functional and non-functional areas
    of a system after changes, such as enhancements, patches or configuration changes,
    have been made to them."* |   |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | *"回归测试是一种软件测试类型，旨在在系统经过更改（如增强、补丁或配置更改）后，揭示现有功能和非功能区域中的新软件错误或回归。"* |  
    |'
- en: '|   | --*Wikipedia* |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | --*维基百科* |'
- en: In the particular case of a Magento store or any e-commerce site, we want to
    perform regression testing on critical features of the store, such as checkout,
    customer registration, adding to the cart, and so on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定情况下，对于Magento商店或任何电子商务网站，我们希望对商店的关键功能进行回归测试，例如结账、客户注册、添加到购物车等。
- en: Functional testing
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能测试
- en: Functional testing is more concerned with testing and verifying that the application
    returns the appropriated output based on a specific input rather than what happens
    internally.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试更关注于测试和验证应用程序根据特定输入返回适当的输出，而不是内部发生的事情。
- en: '|   | *"Functional testing is a type of black box testing that bases its test
    cases on the specifications of the software component under test. Functions are
    tested by feeding them input and examining the output, and internal program structure
    is rarely considered."* |   |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | *"功能测试是一种黑盒测试，其测试用例基于正在测试的软件组件的规范。通过提供输入并检查输出来测试功能，很少考虑程序内部结构。"* |  
    |'
- en: '|   | --*Wikipedia* |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | --*维基百科* |'
- en: This is especially important for e-commerce websites like ours, where we want
    to test the site as the customer would experience it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于我们这样的电子商务网站尤为重要，我们希望像顾客一样测试网站。
- en: Test-driven development
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: A testing methodology that has gained popularity in recent years and is now
    coming to Magento is known as **TDD** or **test-driven development**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来获得流行并即将进入Magento的测试方法被称为**TDD**或**测试驱动开发**。
- en: '|   | *"Test-driven development (TDD) is a software development process that
    relies on the repetition of a very short development cycle: first the developer
    writes an (initially failing) automated test case that defines a desired improvement
    or new function, then produces the minimum amount of code to pass that test and
    finally refactors the new code to acceptable standards."* |   |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | *"测试驱动开发（TDD）是一种软件开发过程，它依赖于非常短的开发周期的重复：首先，开发者编写一个（最初失败的）自动化测试用例，该测试用例定义了期望的改进或新功能，然后生成最小的代码来通过该测试，最后将新代码重构到可接受的标准。"*
    |   |'
- en: '|   | --*Wikipedia* |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | --*维基百科* |'
- en: The basic concept behind TDD is to first write a failing test, and then write
    only enough code to pass the test; this generates very short development cycles
    and helps streamline the code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: TDD背后的基本概念是首先编写一个失败的测试，然后只编写足够的代码来通过测试；这产生了非常短的开发周期，有助于简化代码。
- en: 'A more complete approach is often referred to as the **red-green-refactor cycle**.
    The idea behind it is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更完整的方法通常被称为**红-绿-重构循环**。其背后的理念如下：
- en: '**Red**: This writes a small amount of test code—often, no more than a few
    lines'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**红色**：这会编写一小段测试代码——通常不超过几行'
- en: '**Green**: This writes a small amount of production code—only enough code to
    make sure the test passes'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绿色**：这会编写一小段生产代码——仅足够确保测试通过'
- en: '**Refactor**: This cleans up the mess and improves the code. Now that we have
    a working test, we can make changes with confidence.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：这清理了混乱并改进了代码。现在我们有了工作的测试，我们可以有信心地进行更改。'
- en: 'An illustration of the red-green-refactor cycle is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 红绿重构循环的示意图如下：
- en: '![Test-driven development](img/4195OS_06_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![测试驱动开发](img/4195OS_06_01.jpg)'
- en: Ideally, you want to start the development of your modules and extensions using
    TDD in Magento. We omitted this in previous chapters due the fact that it would
    add unnecessary complexity and confuse the reader.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，您希望使用TDD在Magento中开发模块和扩展。我们之前省略了这一点，因为这将增加不必要的复杂性并使读者困惑。
- en: For a complete tutorial on TDD with Magento from scratch, refer to [http://magedevguide.com/getting-started-with-tdd](http://magedevguide.com/getting-started-with-tdd).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个从零开始的完整TDD与Magento教程，请参阅[http://magedevguide.com/getting-started-with-tdd](http://magedevguide.com/getting-started-with-tdd)。
- en: Tools and testing frameworks
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具和测试框架
- en: 'As mentioned previously, there are several frameworks and tools available to
    test PHP and Magento code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，有几种框架和工具可用于测试PHP和Magento代码：
- en: '`Ecomdev_PHPUnit`: This extension is just amazing. The developers at Ecomdev
    created an extension that integrates PHPUnit with Magento and also adds Magento-specific
    assertions to PHPUnit without having to modify core files or affect the database.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ecomdev_PHPUnit`：这个扩展非常出色。Ecomdev的开发者创建了一个扩展，它将PHPUnit与Magento集成，并在不修改核心文件或影响数据库的情况下添加了针对Magento的特定断言。'
- en: '`Magento_Mink`: Mink is a PHP library for the Behat framework that allows you
    to write functional and acceptance tests; Mink also allows you to write tests
    that simulate user behavior and browser interaction.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento_Mink`：Mink是Behat框架的PHP库，允许你编写功能性和验收测试；Mink还允许你编写模拟用户行为和浏览器交互的测试。'
- en: '`Magento_TAF`: This stands for **Magento Test Automation Framework** and is
    the official testing tool provided by Magento. It includes over 1,000 functional
    tests and is very powerful. Unfortunately, it has a major drawback; it has a large
    overhead and a steep learning curve.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento_TAF`：这代表**Magento测试自动化框架**，是Magento提供的官方测试工具。它包括超过1000个功能测试，非常强大。不幸的是，它有一个主要的缺点；它有较大的开销和陡峭的学习曲线。'
- en: Unit testing with PHPUnit
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用PHPUnit进行单元测试
- en: Before `Ecomdev_PHPUnit`, testing Magento with PHPUnit was problematic and really
    not very practical. Out of the different methods that were available, almost all
    required core code modifications or made developers jump through hoops to set
    up basic PHPUnits.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Ecomdev_PHPUnit`之前，使用PHPUnit测试Magento存在问题，并且实际上并不实用。在可用的不同方法中，几乎都需要核心代码修改或让开发者跳过许多步骤来设置基本的PHPUnits。
- en: Installing Ecomdev_PHPUnit
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Ecomdev_PHPUnit
- en: 'The easiest way to install `Ecomdev_PHPUnit` is to grab a copy directly from
    the GitHub repository. Let''s write the following command on our console:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`Ecomdev_PHPUnit`的最简单方法是直接从GitHub仓库获取副本。让我们在我们的控制台写下以下命令：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, copy the file to your Magento root folder.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将文件复制到您的Magento根目录。
- en: Composer and Modman are alternative options available for installation; for
    more information on each, refer to [http://magedevguide.com/module-managers](http://magedevguide.com/module-managers).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Composer和Modman是可用的替代安装选项；有关每个选项的更多信息，请参阅[http://magedevguide.com/module-managers](http://magedevguide.com/module-managers)。
- en: Finally, we need to set the configuration to instruct the PHPUnit extension
    which database is to be used; `local.xml.phpunit` is a new file added by `Ecomdev_PHPUnit`,
    and it holds all the extension-specific configurations and specifies the name
    of the test database.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要设置配置以指示PHPUnit扩展使用哪个数据库；`local.xml.phpunit`是`Ecomdev_PHPUnit`添加的新文件，它包含所有扩展特定的配置并指定测试数据库的名称。
- en: 'The file location is `app/etc/local.xml.phpunit`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/etc/local.xml.phpunit`：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will need to create a new database to run tests, and replace the example
    configuration values in the `local.xml.phpunit` file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要创建一个新的数据库来运行测试，并替换`local.xml.phpunit`文件中的示例配置值。
- en: By default, this extension does not allow you to run the test on the same database.
    Keeping the test database separate from the development and production allows
    us to run our test with confidence.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此扩展不允许你在同一数据库上运行测试。将测试数据库与开发和生产数据库分开，使我们能够有信心地运行测试。
- en: Setting up the configuration for our extension
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置我们扩展的配置
- en: 'Now that we have the PHPUnit extension installed and set up, we need to prepare
    our gift registry extension to run unit tests. This can be done by performing
    the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并设置了PHPUnit扩展，我们需要准备我们的礼品注册扩展以运行单元测试。这可以通过执行以下步骤来完成：
- en: Open the `Giftregistry` extension of the `config.xml` file.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config.xml`文件中的`Giftregistry`扩展。
- en: 'Add the following code to this file located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到位于`app/code/local/Mdg/Giftregistry/etc/config.xml`的此文件中：
- en: '[PRE2]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This new configuration node allows the PHPUnit extension to recognize the extension
    and run the matching tests.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的配置节点允许PHPUnit扩展识别扩展并运行匹配的测试。
- en: We also need to create a new directory called `Test` alongside the module directory
    that we will use to place all our test files. One of the advantages of using `Ecomdev_PHPUnit`
    as compared to previous methods is that this extension follows the Magento standards.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在模块目录旁边创建一个名为`Test`的新目录，我们将使用它来放置所有测试文件。与之前的方法相比，使用`Ecomdev_PHPUnit`的一个优点是，此扩展遵循Magento标准。
- en: 'This means that we have to keep the same module directory structure inside
    the `Test` folder:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们必须在`Test`文件夹内保持相同的模块目录结构：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Based on the naming convention for each test case, the class would be named
    as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 根据每个测试用例的命名约定，类将被命名为以下形式：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Each test class must extend one of the following three base test classes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试类必须扩展以下三个基类之一：
- en: '`EcomDev_PHPUnit_Test_Case`: This is used to test helpers, models, and blocks'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EcomDev_PHPUnit_Test_Case`：用于测试助手、模型和块'
- en: '`EcomDev_PHPUnit_Test_Case_Config`: This is used to test the module configuration'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EcomDev_PHPUnit_Test_Case_Config`：这是用来测试模块配置的'
- en: '`EcomDev_PHPUnit_Test_Case_Controller`: This is used to test the layout rendering
    process and the controller logic'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EcomDev_PHPUnit_Test_Case_Controller`：这是用来测试布局渲染过程和控制器逻辑的'
- en: A reference is available at [http://www.ecomdev.org/wp-content/uploads/2011/05/EcomDev_PHPUnit-0.2.0-Manual.pdf](http://www.ecomdev.org/wp-content/uploads/2011/05/EcomDev_PHPUnit-0.2.0-Manual.pdf).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参考信息可在[http://www.ecomdev.org/wp-content/uploads/2011/05/EcomDev_PHPUnit-0.2.0-Manual.pdf](http://www.ecomdev.org/wp-content/uploads/2011/05/EcomDev_PHPUnit-0.2.0-Manual.pdf)找到。
- en: The anatomy of a test case
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试用例的结构
- en: 'Before jumping ahead and trying to create our first test, let''s break down
    one of the examples provided by `Ecomdev_PHPUnit`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试创建我们的第一个测试之前，让我们先分解一下`Ecomdev_PHPUnit`提供的示例之一：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first important thing to notice in the example test class is the comment
    annotations:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例测试类中，首先要注意的是注释：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These annotations are used by the PHPUnit extension to identify which class
    functions are tests, and also allow us to set up specific settings to run each
    test. Let''s take a look at some of the available annotations:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注释由PHPUnit扩展用于识别哪个类函数是测试，并允许我们为每个测试设置特定的设置。让我们看看一些可用的注释：
- en: '`@test`: This identifies a class function as a PHPUnit test'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@test`：这标识了一个类函数作为PHPUnit测试'
- en: '`@loadFixture`: This specifies the use of fixtures'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@loadFixture`：这指定了固定数据的用法'
- en: '`@loadExpectation`: This specifies the use of expectations'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@loadExpectation`：这指定了期望的用法'
- en: '`@doNotIndexAll`: By adding this annotation, we are telling PHPUnit test that
    it should not run any index after loading the fixtures'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@doNotIndexAll`：通过添加这个注释，我们告诉PHPUnit测试在加载固定数据后不应运行任何索引'
- en: '`@doNotIndex [index_code]`: By adding this annotation, we can instruct PHPUnit
    not to run a specific index'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@doNotIndex [index_code]`：通过添加这个注释，我们可以指示PHPUnit不要运行特定的索引'
- en: So now, you are probably a bit confused. Fixtures? Expectations? What are these?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在，你可能有点困惑。固定数据？期望？这些都是什么？
- en: '**Fixtures** are **Yet Another Markup Language** (**YAML**) files that represent
    databases or configuration entities.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**固定数据**是代表数据库或配置实体的**另一种标记语言**（**YAML**）文件。'
- en: '**Expectations** are useful if we don''t want to have hardcoded values in our
    tests and are also specified in YAML values.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**期望**在不想在测试中硬编码值并且也在YAML值中指定时是有用的。'
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about the YAML markup, refer to [http://magedevguide.com/yaml](http://magedevguide.com/yaml).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于YAML标记的信息，请参阅[http://magedevguide.com/yaml](http://magedevguide.com/yaml)。
- en: So, as we can see, fixtures provide the data for to be processed by the tests,
    and expectations are used to check whether the results returned by the test are
    what we are expecting to see.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如我们所看到的，固定数据为测试提供数据，而期望用于检查测试返回的结果是否是我们期望看到的。
- en: Fixtures and expectations are stored inside each `Test` type directory. By following
    the preceding example, we would have a new directory called `Product/`. Inside
    it, we need a new directory for expectations and one for our fixtures.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 固定数据和期望存储在每个`Test`类型目录中。按照前面的示例，我们会有一个名为`Product/`的新目录。在里面，我们需要为期望和我们的固定数据创建一个新的目录。
- en: 'Let''s take a look at the revised folder structure:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看修改后的文件夹结构：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following illustration demonstrates the use of fixtures, expectations,
    and test cases:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的插图展示了固定数据、期望和测试用例的使用：
- en: '![The anatomy of a test case](img/4195OS_06_02.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![测试用例的结构](img/4195OS_06_02.jpg)'
- en: Creating a unit test
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建单元测试
- en: For our first unit test, let's create a very basic test that allows us to test
    the gift registry models that we previously created.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个单元测试，让我们创建一个非常基础的测试，以便我们可以测试我们之前创建的礼品登记模型。
- en: 'As we mentioned earlier, `Ecomdev_PHPUnit` uses a separate database to run
    all the tests. For this, we need to create a new fixture that will provide all
    the data for our test case:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，`Ecomdev_PHPUnit`使用一个单独的数据库来运行所有测试。为此，我们需要创建一个新的固定数据，它将为我们的测试用例提供所有数据：
- en: Open the `Test/Model` folder.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Test/Model`文件夹。
- en: Create a new folder called `Registry`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Registry`的新文件夹。
- en: Inside the `Registry` folder, create a new folder called `fixtures`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Registry`文件夹内，创建一个名为`fixtures`的新文件夹。
- en: 'Create a new file called `registryList.yaml` at `app/code/local/Mdg/Giftregistry/Test/Model/fixtures/registryList.yaml`
    and paste the following code in it:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/code/local/Mdg/Giftregistry/Test/Model/fixtures/registryList.yaml`创建一个名为`registryList.yaml`的新文件，并将以下代码粘贴进去：
- en: '[PRE8]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This might not look like it, but we are adding a lot of information with this
    fixture, and are creating the following fixture data:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来不像，但我们通过这个固定数据添加了很多信息，并创建了以下固定数据：
- en: A website scope
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网站范围
- en: A store group
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个商店组
- en: A store view
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个商店视图
- en: A customer record
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个客户记录
- en: Two gift registries
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个礼品登记
- en: Using fixtures, we are creating data on the fly that will be available for our
    test case. This gives us the consistency to run the test multiple times against
    the same data and the flexibility to easily change it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用固定数据，我们正在动态创建数据，这些数据将可用于我们的测试用例。这使我们能够在相同的数据上多次运行测试，并具有轻松更改它的灵活性。
- en: Now, you might be wondering how the PHPUnit extension knows how to pair a test
    case with a specific fixture.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想知道PHPUnit扩展是如何知道如何将测试用例与特定的固定数据配对的。
- en: 'There are two ways in which the extension loads fixtures: one is by specifying
    the fixture inside the comment annotations, and if the fixture name is not specified,
    the extension searches a fixture with the same name as the test case function
    being executed.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展加载固定数据有两种方式：一种是在注释中指定固定数据，如果没有指定固定数据名称，扩展会搜索与正在执行的测试用例函数同名的一个固定数据。
- en: 'With this knowledge, let''s create our first test case:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这些知识，让我们创建我们的第一个测试用例：
- en: Navigate to the `Test/Model` folder.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Test/Model`文件夹。
- en: Create a new test class called `Registry.php`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Registry.php`的新测试类。
- en: 'Add the following base code to this file located at `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下基础代码添加到位于`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`的此文件中：
- en: '[PRE9]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We just created the base function, but we have not added any logic yet. Before
    we do that, let's take a look at what actually constitutes a test case.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了基础函数，但还没有添加任何逻辑。在我们这样做之前，让我们看看实际上构成测试用例的是什么。
- en: 'Test cases work using assertions to evaluate and test our code. Assertions
    are special functions that our test cases inherit from the parent `TestCase` class.
    Among the default assertions available, we have:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例通过断言来评估和测试我们的代码。断言是测试用例从父`TestCase`类继承的特殊函数。在可用的默认断言中，我们有：
- en: '`assertEquals()`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEquals()`'
- en: '`assertGreaterThan()`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertGreaterThan()`'
- en: '`assertGreaterThanOrEqual()`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertGreaterThanOrEqual()`'
- en: '`assertLessThan()`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertLessThan()`'
- en: '`assertLessThanOrEqual()`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertLessThanOrEqual()`'
- en: '`assertTrue()`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTrue()`'
- en: Now, these default assertions are great if we want to check variables' values,
    search for an array key, check attributes, and so on. However, testing Magento
    code using only this type of assertions can prove difficult or even impossible.
    This is where `Ecomdev_PHPUnit` comes to the rescue.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想检查变量的值、搜索数组键、检查属性等，这些默认断言是非常好的。然而，仅使用这种类型的断言来测试Magento代码可能会很困难，甚至不可能。这就是`Ecomdev_PHPUnit`发挥作用的地方。
- en: 'Not only has this extension integrated PHPUnit with Magento cleanly and by
    following their standards, but it also adds Magento-specific assertions to the
    PHPUnit tests. Let''s take a look at some of the assertions added by the extension:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅这个扩展干净地集成了PHPUnit与Magento，并遵循他们的标准，而且还向PHPUnit测试中添加了Magento特定的断言。让我们看看扩展添加的一些断言：
- en: '`assertEventDispatched()`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEventDispatched()`'
- en: '`assertBlockAlias()`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertBlockAlias()`'
- en: '`assertModelAlias()`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertModelAlias()`'
- en: '`assertHelperAlias()`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertHelperAlias()`'
- en: '`assertModuleCodePool()`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertModuleCodePool()`'
- en: '`assertModuleDepends()`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertModuleDepends()`'
- en: '`assertConfigNodeValue()`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertConfigNodeValue()`'
- en: '`assertLayoutFileExists()`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertLayoutFileExists()`'
- en: These are only a few of the assertions available, and as you can see, they give
    a lot of power to build comprehensive tests.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是可用的断言中的一部分，正如你所见，它们为我们构建全面的测试提供了很多功能。
- en: 'Now that we know a little more about how PHPUnit test cases work, let''s proceed
    to create our first Magento `TestCase` class:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对PHPUnit测试用例的工作方式有了更多的了解，让我们继续创建我们的第一个Magento `TestCase`类：
- en: Navigate to the `Registry.php` test case class that we created earlier.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们之前创建的`Registry.php`测试用例类。
- en: Add the following code to the `registryList()` function.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`registryList()`函数中。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`：
- en: '[PRE10]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a very basic test; the only thing that we are doing is loading a registry
    collection—in this case, all the registries available—and then running an assertion
    to check whether the collection count matches.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常基础的测试；我们唯一做的事情是加载一个登记集合——在这种情况下，所有可用的登记——然后运行一个断言来检查集合计数是否匹配。
- en: 'However, this is not very useful. It would be even better if we were able to
    load only the registries that belong to a specific user (our test user) and check
    the collection size. That said, let''s change the code a little bit in the file
    located at `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不很有用。如果我们能够只加载属于特定用户（我们的测试用户）的注册表，并检查集合大小，那就更好了。因此，让我们在位于`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`的文件中稍微更改一下代码：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Just by changing a few lines of code, we created a test that allows us to verify
    that our registry collections are working properly, and are correctly linked to
    a customer record.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 只需更改几行代码，我们就创建了一个测试，可以验证我们的注册集合是否正常工作，并且正确地链接到客户记录。
- en: 'Run the following command in your shell:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的shell中运行以下命令：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If everything went as expected, we should see the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切如预期进行，我们应该看到以下输出：
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can also run `$ phpunit –colors` for a nicer output.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以运行`$ phpunit –colors`以获得更美观的输出。
- en: 'Now, we only need a test to verify that the registry items are working properly:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要一个测试来验证注册项是否正常工作：
- en: Navigate to the `Registry.php` test case class that we created earlier.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们之前创建的`Registry.php`测试用例类。
- en: 'Add the following code to the `registryItemsList()` function to the Registry.php
    file located at `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到位于`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`的`registryItemsList()`函数中：
- en: '[PRE14]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will also need a new fixture for our new test case:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为我们的新测试用例创建一个新的固定值：
- en: Navigate to the `Test/Model` folder.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Test/Model`文件夹。
- en: Open the `Registry` folder.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`注册表`文件夹。
- en: 'Create a new file called `registryItemsList.yaml` located at `app/code/local/Mdg/Giftregistry/Test/Model/fixtures/
    registryItemsList.yaml`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/code/local/Mdg/Giftregistry/Test/Model/fixtures`下创建一个名为`registryItemsList.yaml`的新文件：
- en: '[PRE15]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s run our test suite:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行我们的测试套件：
- en: '[PRE16]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We should see both tests pass:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到两个测试都通过：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, let's replace our hardcoded variables with proper expectations.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们用适当的期望值替换我们的硬编码变量。
- en: Navigate to the module `Test/Model` folder.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Test/Model`模块文件夹。
- en: Open the `Registry` folder.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`注册表`文件夹。
- en: Inside the `Registry` folder, create a new folder called `expectations`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Registry`文件夹内，创建一个名为`expectations`的新文件夹。
- en: 'Create a new file called `registryList.yaml` at `app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryList.yaml`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryList.yaml`下创建一个名为`registryList.yaml`的新文件：
- en: '[PRE18]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Wasn''t that easy? Well, it was so easy that we will do it again for the `registryItemsList`
    test case:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 难道不是很容易吗？嗯，它太容易了，我们将再次为`registryItemsList`测试用例做同样的事情：
- en: Navigate to the module `Test/Model` folder.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Test/Model`模块文件夹。
- en: Open the `Registry` folder.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`注册表`文件夹。
- en: Create a new file called `registryItemsList.yaml` inside the `expectations`
    folder.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`expectations`文件夹内创建一个名为`registryItemsList.yaml`的新文件。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryItemsList.yaml`:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryItemsList.yaml`：
- en: '[PRE19]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, the last thing that we need to do is update our test case class to
    use the expectations. Make sure that the update file located at `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`
    has the following code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要做的最后一件事是更新我们的测试用例类以使用期望。确保位于`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`的更新文件包含以下代码：
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The only change here is that we are replacing the hardcoded value inside our
    assertions with the expectations values. If we ever need to make any changes,
    we don't need to change our code; we can just update the expectations and fixtures.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的改变是我们正在用期望值替换断言中的硬编码值。如果我们需要做出任何更改，我们不需要更改我们的代码；我们只需更新期望和固定值。
- en: Functional testing with Mink
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能测试使用Mink
- en: So far, we have learned how to run unit tests against our code. While unit tests
    are great to test individual parts of our code and the logic, when it comes to
    large applications such as Magento, it is important to test from the user perspective.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何运行针对我们代码的单元测试。虽然单元测试对于测试我们代码的各个部分和逻辑非常棒，但当涉及到像Magento这样的大型应用程序时，从用户的角度进行测试非常重要。
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Functional testing mostly involves black box testing, and is not concerned about
    the source code of the application.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试主要涉及黑盒测试，并不关心应用程序的源代码。
- en: 'In order to perform functional testing, we can use **Mink**. Mink is a simple
    PHP library that can virtualize a web browser. Mink works using different drivers;
    it supports the following drivers out of the box:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行功能测试，我们可以使用 **Mink**。Mink 是一个简单的 PHP 库，可以虚拟化一个网络浏览器。Mink 使用不同的驱动程序工作；它支持以下驱动程序：
- en: '`GoutteDriver`: Goutte is a pure-php headless browser, written by the creator
    of the Symfony framework'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GoutteDriver`：Goutte 是一个纯 PHP 无头浏览器，由 Symfony 框架的创建者编写'
- en: '`SahiDriver`: Sahi is a new JS browser controller that is quickly replacing
    Selenium'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SahiDriver`：Sahi 是一个新的 JS 浏览器控制器，它正在迅速取代 Selenium'
- en: '`ZombieDriver`: This is a browser emulator written in Node.js, and is currently
    limited to only one browser (Chromium)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ZombieDriver`：这是一个用 Node.js 编写的浏览器模拟器，目前仅限于一个浏览器（Chromium）'
- en: '`SeleniumDriver`: This is currently the most popular browser driver; the original
    version relies on a third-party server to run the tests'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SeleniumDriver`：这是目前最受欢迎的浏览器驱动程序；原始版本依赖于第三方服务器来运行测试'
- en: '`Selenium2Driver`: The current version of Selenium is fully supported in Python,
    Ruby, Java, and C#'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selenium2Driver`：当前版本的 Selenium 在 Python、Ruby、Java 和 C# 中完全受支持'
- en: Magento Mink installation and setup
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Magento Mink 安装和设置
- en: Using Mink with Magento is extremely easy, thanks to Johann Reinke, who created
    a Magento extension that facilitates Mink's integration with Magento.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Mink 与 Magento 结合非常简单，这要归功于 Johann Reinke，他创建了一个 Magento 扩展，该扩展简化了 Mink 与
    Magento 的集成。
- en: We will install this extension using `modgit`, a module manager inspired by
    Modman. Modgit allow us to deploy Magento extensions directly from a GitHub repository
    without creating symlinks.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `modgit`，一个受 Modman 启发的模块管理器来安装此扩展。Modgit 允许我们直接从 GitHub 仓库部署 Magento
    扩展，而无需创建符号链接。
- en: 'Installing modgit can be achieved with three lines of commands:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用三条命令即可安装 modgit：
- en: '[PRE21]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Wasn''t that easy? Now, we can proceed to install Magento Mink, which is even
    easier thanks to modgit:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 难道不是很容易吗？现在，我们可以继续安装 Magento Mink，这要归功于 modgit，甚至更容易：
- en: Navigate to the Magento root directory.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Magento 根目录。
- en: 'Run the following commands:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE22]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: That's it; modgit will take care of installing the file for us directly from
    the GitHub repository.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样；modgit 将直接从 GitHub 仓库为我们安装文件。
- en: Creating our first test
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个测试
- en: 'Mink tests are also stored in the `Test` folder; let''s create the base skeleton
    of our Mink test class:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Mink 测试也存储在 `Test` 文件夹中；让我们创建我们的 Mink 测试类的基骨架：
- en: Navigate to the `Test` folder in our module root.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们的模块根目录中的 `Test` 文件夹。
- en: Create a new directory called `Mink`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Mink` 的新目录。
- en: Inside the `Mink` directory, create a new PHP class called `Registry.php`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Mink` 目录中，创建一个新的 PHP 类，名为 `Registry.php`。
- en: 'Copy the following code at the `Registry.php` file, located at `app/code/local/Mdg/Giftregistry/Test/Mink/Registry.php`:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/code/local/Mdg/Giftregistry/Test/Mink/Registry.php` 文件中复制以下代码，位于 `Registry.php`
    文件：
- en: '[PRE23]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Just at first glance, you can tell that this functional test is quite different
    from the unit tests that we built previously. Although it seems like a lot of
    code it is quite simple, the previous test is even broken down in code blocks.
    Let''s break down what the previous test is doing:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 只需第一眼就能看出，这个功能测试与我们之前构建的单元测试相当不同。尽管代码看起来很多，但实际上非常简单，之前的测试甚至被分解成代码块。让我们分析一下之前的测试做了什么：
- en: Set up the browser driver and the current store.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置浏览器驱动程序和当前商店。
- en: Go to the home page and check for a valid category link.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往主页并检查有效的分类链接。
- en: Try to log in as a test user.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试以测试用户身份登录。
- en: Go to a `category` page.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往一个 `分类` 页面。
- en: Open the first product in that category.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开该分类中的第一个产品。
- en: Try to add the product to the customer gift registry.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将产品添加到客户礼品登记中。
- en: This test makes a few assumptions and expects a valid customer with an existing
    gift registry.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试做出了一些假设，并期望有一个有效的客户和现有的礼品登记。
- en: 'There are some considerations that we have to keep in mind when creating Mink
    tests:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Mink 测试时，我们必须注意以下几点：
- en: Each test class must extend `JR_Mink_Test_Mink`
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个测试类都必须扩展 `JR_Mink_Test_Mink`
- en: Each test function must start with the `test` keyword
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个测试函数都必须以 `test` 关键字开头
- en: 'Finally, the only thing that we have to do is run our tests. We can do this
    by going to the command line and running the following command:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们唯一要做的就是运行我们的测试。我们可以通过进入命令行并运行以下命令来完成此操作：
- en: '[PRE24]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If everything was successful, we should see a something similar to the following
    output:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到以下类似输出：
- en: '[PRE25]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went over the basics of Magento testing. The purpose of
    this chapter was not to build complex tests or dive too deep, but get our feet
    wet and get a clear idea of what we can do to test our extensions.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Magento 测试的基础知识。本章的目的不是构建复杂的测试或深入研究，而是让我们有所尝试，并对我们可以如何测试我们的扩展有一个清晰的认识。
- en: We covered several important topics in this chapter and learned that having
    proper test suites and tools can save us from future headaches and improve the
    quality of our code.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了几个重要主题，并了解到拥有适当的测试套件和工具可以让我们避免未来的麻烦，并提高代码质量。
