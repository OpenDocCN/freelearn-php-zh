- en: Chapter 6. Testing and Quality Assurance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have covered all the steps required to create a Magento extension:'
  prefs: []
  type: TYPE_NORMAL
- en: Magento fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frontend development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending and working with APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, we omitted a critical step in the development of any extension or
    custom code: testing and quality assurance. Despite the fact that Magento is a
    complex platform, it lacks any out-of-the-box testing.'
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, proper testing and quality assurance is often overlooked by
    most of the Magento developers, either due to a lack of information, or because
    of the large overhead of some of the testing tools, and while there are not many
    tools available for running a proper test with Magento, the ones that exist are
    of very high quality.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the different options available to test
    our Magento code, and we will also build some very basic tests for our custom
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s go over the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The different testing frameworks and tools available for Magento
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of testing our Magento code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up, install, and use Ecomdev PHPUnit extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up, install, and use Magento Mink to run functional tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Magento
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start writing any test, it is important that we understand the concepts
    related to testing and, more particularly, to each of the available methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea behind unit testing is to write tests for certain areas (units) of
    our code, so that we can verify that the code works as expected and the function
    is returning expected values.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *" In computer programming, unit testing is a method by which individual
    units of source code, sets of one or more computer program modules together with
    associated control data, usage procedures, and operating procedures, are tested
    to determine if they are fit for use."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Wikipedia* |'
  prefs: []
  type: TYPE_TB
- en: Another advantage of writing unit tests is that by doing this, we are more likely
    to write code that is easier to test.
  prefs: []
  type: TYPE_NORMAL
- en: This means that our code tends to be broken down into smaller but more specialized
    functions. As we continue to write more and more tests, we start building a test
    suite that can be run against our codebase every time we introduce any changes
    or functionalities; this is known as **regression testing**.
  prefs: []
  type: TYPE_NORMAL
- en: Regression testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regression testing mostly refers to the practice of rerunning existing test
    suites after making code changes to verify that a new functionality is not introducing
    new bugs.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Regression testing is a type of software testing that seeks to uncover
    new software bugs, or regressions, in existing functional and non-functional areas
    of a system after changes, such as enhancements, patches or configuration changes,
    have been made to them."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Wikipedia* |'
  prefs: []
  type: TYPE_TB
- en: In the particular case of a Magento store or any e-commerce site, we want to
    perform regression testing on critical features of the store, such as checkout,
    customer registration, adding to the cart, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Functional testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functional testing is more concerned with testing and verifying that the application
    returns the appropriated output based on a specific input rather than what happens
    internally.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Functional testing is a type of black box testing that bases its test
    cases on the specifications of the software component under test. Functions are
    tested by feeding them input and examining the output, and internal program structure
    is rarely considered."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Wikipedia* |'
  prefs: []
  type: TYPE_TB
- en: This is especially important for e-commerce websites like ours, where we want
    to test the site as the customer would experience it.
  prefs: []
  type: TYPE_NORMAL
- en: Test-driven development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A testing methodology that has gained popularity in recent years and is now
    coming to Magento is known as **TDD** or **test-driven development**.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Test-driven development (TDD) is a software development process that
    relies on the repetition of a very short development cycle: first the developer
    writes an (initially failing) automated test case that defines a desired improvement
    or new function, then produces the minimum amount of code to pass that test and
    finally refactors the new code to acceptable standards."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Wikipedia* |'
  prefs: []
  type: TYPE_TB
- en: The basic concept behind TDD is to first write a failing test, and then write
    only enough code to pass the test; this generates very short development cycles
    and helps streamline the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A more complete approach is often referred to as the **red-green-refactor cycle**.
    The idea behind it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Red**: This writes a small amount of test code—often, no more than a few
    lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Green**: This writes a small amount of production code—only enough code to
    make sure the test passes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Refactor**: This cleans up the mess and improves the code. Now that we have
    a working test, we can make changes with confidence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An illustration of the red-green-refactor cycle is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test-driven development](img/4195OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ideally, you want to start the development of your modules and extensions using
    TDD in Magento. We omitted this in previous chapters due the fact that it would
    add unnecessary complexity and confuse the reader.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete tutorial on TDD with Magento from scratch, refer to [http://magedevguide.com/getting-started-with-tdd](http://magedevguide.com/getting-started-with-tdd).
  prefs: []
  type: TYPE_NORMAL
- en: Tools and testing frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned previously, there are several frameworks and tools available to
    test PHP and Magento code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ecomdev_PHPUnit`: This extension is just amazing. The developers at Ecomdev
    created an extension that integrates PHPUnit with Magento and also adds Magento-specific
    assertions to PHPUnit without having to modify core files or affect the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Magento_Mink`: Mink is a PHP library for the Behat framework that allows you
    to write functional and acceptance tests; Mink also allows you to write tests
    that simulate user behavior and browser interaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Magento_TAF`: This stands for **Magento Test Automation Framework** and is
    the official testing tool provided by Magento. It includes over 1,000 functional
    tests and is very powerful. Unfortunately, it has a major drawback; it has a large
    overhead and a steep learning curve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with PHPUnit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before `Ecomdev_PHPUnit`, testing Magento with PHPUnit was problematic and really
    not very practical. Out of the different methods that were available, almost all
    required core code modifications or made developers jump through hoops to set
    up basic PHPUnits.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ecomdev_PHPUnit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The easiest way to install `Ecomdev_PHPUnit` is to grab a copy directly from
    the GitHub repository. Let''s write the following command on our console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, copy the file to your Magento root folder.
  prefs: []
  type: TYPE_NORMAL
- en: Composer and Modman are alternative options available for installation; for
    more information on each, refer to [http://magedevguide.com/module-managers](http://magedevguide.com/module-managers).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to set the configuration to instruct the PHPUnit extension
    which database is to be used; `local.xml.phpunit` is a new file added by `Ecomdev_PHPUnit`,
    and it holds all the extension-specific configurations and specifies the name
    of the test database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/etc/local.xml.phpunit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You will need to create a new database to run tests, and replace the example
    configuration values in the `local.xml.phpunit` file.
  prefs: []
  type: TYPE_NORMAL
- en: By default, this extension does not allow you to run the test on the same database.
    Keeping the test database separate from the development and production allows
    us to run our test with confidence.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the configuration for our extension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have the PHPUnit extension installed and set up, we need to prepare
    our gift registry extension to run unit tests. This can be done by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Giftregistry` extension of the `config.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to this file located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This new configuration node allows the PHPUnit extension to recognize the extension
    and run the matching tests.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to create a new directory called `Test` alongside the module directory
    that we will use to place all our test files. One of the advantages of using `Ecomdev_PHPUnit`
    as compared to previous methods is that this extension follows the Magento standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that we have to keep the same module directory structure inside
    the `Test` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the naming convention for each test case, the class would be named
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Each test class must extend one of the following three base test classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EcomDev_PHPUnit_Test_Case`: This is used to test helpers, models, and blocks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EcomDev_PHPUnit_Test_Case_Config`: This is used to test the module configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EcomDev_PHPUnit_Test_Case_Controller`: This is used to test the layout rendering
    process and the controller logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reference is available at [http://www.ecomdev.org/wp-content/uploads/2011/05/EcomDev_PHPUnit-0.2.0-Manual.pdf](http://www.ecomdev.org/wp-content/uploads/2011/05/EcomDev_PHPUnit-0.2.0-Manual.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: The anatomy of a test case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before jumping ahead and trying to create our first test, let''s break down
    one of the examples provided by `Ecomdev_PHPUnit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The first important thing to notice in the example test class is the comment
    annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'These annotations are used by the PHPUnit extension to identify which class
    functions are tests, and also allow us to set up specific settings to run each
    test. Let''s take a look at some of the available annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@test`: This identifies a class function as a PHPUnit test'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@loadFixture`: This specifies the use of fixtures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@loadExpectation`: This specifies the use of expectations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@doNotIndexAll`: By adding this annotation, we are telling PHPUnit test that
    it should not run any index after loading the fixtures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@doNotIndex [index_code]`: By adding this annotation, we can instruct PHPUnit
    not to run a specific index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So now, you are probably a bit confused. Fixtures? Expectations? What are these?
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixtures** are **Yet Another Markup Language** (**YAML**) files that represent
    databases or configuration entities.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Expectations** are useful if we don''t want to have hardcoded values in our
    tests and are also specified in YAML values.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the YAML markup, refer to [http://magedevguide.com/yaml](http://magedevguide.com/yaml).
  prefs: []
  type: TYPE_NORMAL
- en: So, as we can see, fixtures provide the data for to be processed by the tests,
    and expectations are used to check whether the results returned by the test are
    what we are expecting to see.
  prefs: []
  type: TYPE_NORMAL
- en: Fixtures and expectations are stored inside each `Test` type directory. By following
    the preceding example, we would have a new directory called `Product/`. Inside
    it, we need a new directory for expectations and one for our fixtures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the revised folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following illustration demonstrates the use of fixtures, expectations,
    and test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The anatomy of a test case](img/4195OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a unit test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For our first unit test, let's create a very basic test that allows us to test
    the gift registry models that we previously created.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned earlier, `Ecomdev_PHPUnit` uses a separate database to run
    all the tests. For this, we need to create a new fixture that will provide all
    the data for our test case:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder called `Registry`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Registry` folder, create a new folder called `fixtures`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `registryList.yaml` at `app/code/local/Mdg/Giftregistry/Test/Model/fixtures/registryList.yaml`
    and paste the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This might not look like it, but we are adding a lot of information with this
    fixture, and are creating the following fixture data:'
  prefs: []
  type: TYPE_NORMAL
- en: A website scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A store group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A store view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A customer record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two gift registries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using fixtures, we are creating data on the fly that will be available for our
    test case. This gives us the consistency to run the test multiple times against
    the same data and the flexibility to easily change it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you might be wondering how the PHPUnit extension knows how to pair a test
    case with a specific fixture.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways in which the extension loads fixtures: one is by specifying
    the fixture inside the comment annotations, and if the fixture name is not specified,
    the extension searches a fixture with the same name as the test case function
    being executed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this knowledge, let''s create our first test case:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new test class called `Registry.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following base code to this file located at `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We just created the base function, but we have not added any logic yet. Before
    we do that, let's take a look at what actually constitutes a test case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test cases work using assertions to evaluate and test our code. Assertions
    are special functions that our test cases inherit from the parent `TestCase` class.
    Among the default assertions available, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertEquals()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertGreaterThan()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertGreaterThanOrEqual()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertLessThan()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertLessThanOrEqual()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertTrue()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, these default assertions are great if we want to check variables' values,
    search for an array key, check attributes, and so on. However, testing Magento
    code using only this type of assertions can prove difficult or even impossible.
    This is where `Ecomdev_PHPUnit` comes to the rescue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not only has this extension integrated PHPUnit with Magento cleanly and by
    following their standards, but it also adds Magento-specific assertions to the
    PHPUnit tests. Let''s take a look at some of the assertions added by the extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertEventDispatched()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertBlockAlias()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertModelAlias()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertHelperAlias()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertModuleCodePool()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertModuleDepends()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertConfigNodeValue()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertLayoutFileExists()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are only a few of the assertions available, and as you can see, they give
    a lot of power to build comprehensive tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know a little more about how PHPUnit test cases work, let''s proceed
    to create our first Magento `TestCase` class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Registry.php` test case class that we created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following code to the `registryList()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a very basic test; the only thing that we are doing is loading a registry
    collection—in this case, all the registries available—and then running an assertion
    to check whether the collection count matches.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this is not very useful. It would be even better if we were able to
    load only the registries that belong to a specific user (our test user) and check
    the collection size. That said, let''s change the code a little bit in the file
    located at `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Just by changing a few lines of code, we created a test that allows us to verify
    that our registry collections are working properly, and are correctly linked to
    a customer record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in your shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything went as expected, we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can also run `$ phpunit –colors` for a nicer output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we only need a test to verify that the registry items are working properly:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Registry.php` test case class that we created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `registryItemsList()` function to the Registry.php
    file located at `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also need a new fixture for our new test case:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Registry` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `registryItemsList.yaml` located at `app/code/local/Mdg/Giftregistry/Test/Model/fixtures/
    registryItemsList.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s run our test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see both tests pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's replace our hardcoded variables with proper expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the module `Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Registry` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Registry` folder, create a new folder called `expectations`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `registryList.yaml` at `app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryList.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wasn''t that easy? Well, it was so easy that we will do it again for the `registryItemsList`
    test case:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the module `Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Registry` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `registryItemsList.yaml` inside the `expectations`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryItemsList.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the last thing that we need to do is update our test case class to
    use the expectations. Make sure that the update file located at `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`
    has the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The only change here is that we are replacing the hardcoded value inside our
    assertions with the expectations values. If we ever need to make any changes,
    we don't need to change our code; we can just update the expectations and fixtures.
  prefs: []
  type: TYPE_NORMAL
- en: Functional testing with Mink
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have learned how to run unit tests against our code. While unit tests
    are great to test individual parts of our code and the logic, when it comes to
    large applications such as Magento, it is important to test from the user perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functional testing mostly involves black box testing, and is not concerned about
    the source code of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to perform functional testing, we can use **Mink**. Mink is a simple
    PHP library that can virtualize a web browser. Mink works using different drivers;
    it supports the following drivers out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GoutteDriver`: Goutte is a pure-php headless browser, written by the creator
    of the Symfony framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SahiDriver`: Sahi is a new JS browser controller that is quickly replacing
    Selenium'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ZombieDriver`: This is a browser emulator written in Node.js, and is currently
    limited to only one browser (Chromium)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SeleniumDriver`: This is currently the most popular browser driver; the original
    version relies on a third-party server to run the tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Selenium2Driver`: The current version of Selenium is fully supported in Python,
    Ruby, Java, and C#'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magento Mink installation and setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using Mink with Magento is extremely easy, thanks to Johann Reinke, who created
    a Magento extension that facilitates Mink's integration with Magento.
  prefs: []
  type: TYPE_NORMAL
- en: We will install this extension using `modgit`, a module manager inspired by
    Modman. Modgit allow us to deploy Magento extensions directly from a GitHub repository
    without creating symlinks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing modgit can be achieved with three lines of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Wasn''t that easy? Now, we can proceed to install Magento Mink, which is even
    easier thanks to modgit:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Magento root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it; modgit will take care of installing the file for us directly from
    the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mink tests are also stored in the `Test` folder; let''s create the base skeleton
    of our Mink test class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Test` folder in our module root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `Mink`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Mink` directory, create a new PHP class called `Registry.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code at the `Registry.php` file, located at `app/code/local/Mdg/Giftregistry/Test/Mink/Registry.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Just at first glance, you can tell that this functional test is quite different
    from the unit tests that we built previously. Although it seems like a lot of
    code it is quite simple, the previous test is even broken down in code blocks.
    Let''s break down what the previous test is doing:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the browser driver and the current store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the home page and check for a valid category link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to log in as a test user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to a `category` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the first product in that category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to add the product to the customer gift registry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This test makes a few assumptions and expects a valid customer with an existing
    gift registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some considerations that we have to keep in mind when creating Mink
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Each test class must extend `JR_Mink_Test_Mink`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each test function must start with the `test` keyword
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the only thing that we have to do is run our tests. We can do this
    by going to the command line and running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything was successful, we should see a something similar to the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went over the basics of Magento testing. The purpose of
    this chapter was not to build complex tests or dive too deep, but get our feet
    wet and get a clear idea of what we can do to test our extensions.
  prefs: []
  type: TYPE_NORMAL
- en: We covered several important topics in this chapter and learned that having
    proper test suites and tools can save us from future headaches and improve the
    quality of our code.
  prefs: []
  type: TYPE_NORMAL
