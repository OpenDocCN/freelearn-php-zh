- en: Chapter 8. Optimizing Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Caching, and when to cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding and using storage plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a caching system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a society where we want our data now, it is important to make sure that our
    websites and applications also deliver it as soon as possible. When we rule out
    any obvious cause of slow downs, such as network infrastructure or server configuration,
    we can start looking at caching. This chapter is all about what to cache and how
    to cache, making our lives a lot faster.
  prefs: []
  type: TYPE_NORMAL
- en: Caching and when to Cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caching, everyone knows about it, everybody talks about it, but what is it?
    In its purest essence caching is all about serving your application as quickly
    as possible to the user. That's what we will talk in this recipe when and how
    to cache.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be working with the Zend Framework skeleton application again, so it
    would be wise to have that set up.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When developing an application, caching might not be something that immediately
    comes up in the design, and most probably this will come up when the application
    goes live and after a while you find your application responding slower than when
    you first put it live.
  prefs: []
  type: TYPE_NORMAL
- en: That is the perfect (well not perfect, as that would be during the design phase,
    obviously) time to consider implementing a cache.
  prefs: []
  type: TYPE_NORMAL
- en: When we talk about caching, a common misunderstanding is that we are solely
    talking about caching an HTML output. Nothing could be further from the truth,
    as we have several powerful methods of caching in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list is a collection of some methods available to us to cache
    different sections of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Caching the ZF2 configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching the rendered output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching the class map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will now go in further detail of the methods named in the preceding list.
  prefs: []
  type: TYPE_NORMAL
- en: Caching configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Probably the most static bit of code in your application will be the configuration.
    Oh but how we need configuration to properly load our application, but in the
    meantime we might hate it for all the merging it needs to do before we end up
    with the final version of the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'But fear not, as we can simply cache the merged configuration so that your
    application doesn''t have to parse through the lot anymore! This is actually such
    a simple process, that it is almost hilarious to give the example for it (`/config/application.config.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: And that's it. Nothing fancy is needed to make this work as everything that
    is required to make this work is already built in Zend Framework 2.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very effective way to start caching everything that is static, and
    although it probably doesn't give the application an enormous speed boost (unless
    we have literally dozens of modules) it will be a method that shouldn't be forgotten.
  prefs: []
  type: TYPE_NORMAL
- en: Caching output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Caching output is useful when we have a lot of static files that normally don't
    or rarely change. When we talk about content that doesn't change a lot we can
    think of blog posts or news items as those usually get generated once and put
    live indefinitely. There are obviously more output types that are useful to cache,
    but we will just give an example to show how easy it is to cache output that we
    deem static.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to create the configuration in our module to make sure the caching
    is enabled in our `ServiceManager` (`/module/SomeModule/config/module.config.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we created the configuration, let''s continue to control the caching
    in our `/module/SomeModule/Module.php` file''s `onBootstrap` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now every time we go to our application the route event will check if we might
    have a cache of the specific route, and if we do, it will return the cache (if
    not expired, of course). If the route hasn't been cached yet it will do so if
    necessary once the rendered event is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Credit for this example goes to *Jurian Sluiman* (*jurian-sluiman*) who is a
    user on the [stackoverflow.com](http://stackoverflow.com) website and a significant
    contributor to Zend Framework 2.
  prefs: []
  type: TYPE_NORMAL
- en: Caching the class map
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The class map file is one of those files that are just big, and basically static
    after the application has done merging it. That it is static and is obviously
    a great opportunity for us so we can cache it and take a bit of the load from
    the applications merging away. As for the first method of our caching, this one
    also only requires us to add a couple of properties in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get this example started (`/config/application.config.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Again, although this might not be a significant improvement on the overall performance,
    we can be sure that every little bit helps, and it will certainly help lighten
    the load for the autoloader process.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All that caching does is speeding up the application by keeping everything ready
    for when it is needed within a certain time (the `ttl` or also called time-to-live)
    period. It speeds up the application because it gives the application the data
    it requires without the application needing to make the connection to the database,
    or recompiling templates for example.
  prefs: []
  type: TYPE_NORMAL
- en: Caching is usually done on the filesystem, as it is considered to be a very
    fast option instead of going through a database for example. However, technically
    the fastest option for caching would be in-memory (this is because the memory
    or RAM is the closest data storage for the CPU and therefore the fastest). Although
    memory caching is a great method of caching, it can also become the worst kind
    if there is just too much to cache.
  prefs: []
  type: TYPE_NORMAL
- en: It is therefore wise to think about different caching methods (filesystem cache,
    for example, only with blog posts and application configuration, for example,
    in memory cache) before just generally using a method.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and using storage plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of customizing everything, Zend Framework 2 provides an excellent interface
    that can manipulate the storing, removing, and retrieving of cache data by using
    storage plugins.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storage plugins are used to compliment the storage adapters whenever a developer
    feels that they need more functionality added to the adapter without necessarily
    making a custom adapter. Therefore, plugins are the handiest tool to use when
    we want to modify the way our storage adapters handle the cache.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of storage plugins readily available in Zend Framework 2,
    so let's get cracking on and explain them a bit further.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ClearExpiredByFactor plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ClearExpiredByFactor` plugin clears the expired cache items once in a while,
    which are determined by a set factor. The higher the factor integer is, the less
    likely it will be that the cache will clear its expired items. But don't forget;
    this being a (pseudo) random process and all chances could be that it will be
    called every single time. We understand that this is incredibly counterintuitive,
    so maybe this code snippet taken from the plugin will clear things up.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We should also note that this plugin is only fired when there is cache to be
    written, it does not fire when cache is read.
  prefs: []
  type: TYPE_NORMAL
- en: '`PluginOptions` that can be set is `setClearingFactor`, which sets the clearing
    factor.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This plugin requires the storage adapter to be an instance of `ClearExpiredInterface`,
    otherwise it will not do anything (and we would never know as it doesn't log this
    error). Only the Filesystem and Memory Storage adapters support this interface.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ExceptionHandler plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ExceptionHandler` plugin catches any exceptions that are thrown when getting/setting
    the cache and forwards it to a developer defined callback.
  prefs: []
  type: TYPE_NORMAL
- en: '`PluginOptions` that can be set are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setExceptionCallback`: This is a callback function to call when an exception
    occurs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setThrowExceptions`: This is a Boolean (default `true`) value that tells the
    plugin to re-throw exceptions that it caught'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the IgnoreUserAbort plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `IgnoreUserAbort` plugin makes sure that the script isn't aborted before
    the writing has finished to the cache. This way we can be sure we won't get any
    corrupted data in our cache.
  prefs: []
  type: TYPE_NORMAL
- en: '`PluginOptions` that can be set is `setExitOnAbort`, which is a Boolean (default
    `true`) value that tells us if we can abort the script whenever we want, or if
    we need to wait until we are done writing.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the OptimizeByFactor plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You wanted to clear by factor? I am sure you also want to optimize by factor
    then! This plugin (pseudo) randomly optimizes the cache. The factor determines
    the chance it has of actually optimizing, the lower the number (between 1 and
    a high number) the greater chance, the higher the number the lower the chance.
    We understand that this is incredibly counterintuitive, so maybe this code snippet
    taken from the plugin will clear things up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We should also note that this plugin is only fired when there is cache to be
    removed, it does not fire when the cache is read or written.
  prefs: []
  type: TYPE_NORMAL
- en: '`PluginOptions` that can be set is `setOptimizingFactor`, which sets the optimizing
    factor.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This plugin only works on storage adapters with an instance of `OptimizableInterface`.
    If this is not available it will not throw an error, so we will never know. The
    adapters currently supporting this interface are Dba and Filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Serializer plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Serializer` plugin will serialize and unserialize the data when setting
    and getting it from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: '`PluginOptions` that can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setSerializer`: This sets the serializer we want to use, it needs to be an
    class that implements the `Zend\Serializer\Adapter\AdapterInterface` class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setSerializerOptions`: If a string is given at the `setSerializer` option
    (the full class name as a string) then the instantiation options need to be set
    in this option'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using any plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fortunately plugins are easy to use, and all we have to do is add them to the
    storage adapter to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that there are several ways of instantiating plugins, but we will just
    display one method to show off how it basically works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That's all that needs configuring to make it all work together nicely. In a
    MVC application (which we probably will use Zend Framework 2 for) plugin can be
    on very different locations. Normally though we want to configure this in the
    configuration or in the bootstrap event if we will use it constantly throughout
    the application, as that will save time compared to instantiating it more than
    once.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plugins are attached to storage adapters and work because they attach themselves
    to events of the storage adapters. When these events get triggered, the functionality
    gets triggered as well. It is really as simple as that, and there is no real further
    explanation needed for this.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a caching system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good example on how to do it is always the best way to learn a new technique
    quickly. That is why we will show you how to implement a caching system on different
    parts of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we will show off a simple system that makes use of caching. We
    will also show off some benchmarks so that we can clearly see the differences
    between a system without caching and a system with caching. The code for this
    project can also be found with the book, which contain a couple of sample classes
    so that we can measure the performance a bit better. We will not discuss any of
    the sample classes (which all can be found in the `/module/Application/src/Application`
    directory), but we will refer to them in some of the examples.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up a simple caching system is easy enough, but the question most of
    the time is, where to begin.
  prefs: []
  type: TYPE_NORMAL
- en: Benchmarking our application before cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the benchmark we will use an application called `ab`, which is short for
    ApacheBench. This is a tool which comes standard with the Apache web server on
    both the Microsoft Windows as the Linux version; for our recipe we will be using
    the Linux version of the benchmarking tool, don't worry though as both versions
    do exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our benchmark, we will use no caching at all and we will use the following
    code in `Application\Controller\IndexController` (`/module/Application/src/Application/Controller/IndexController.php`)
    to generate our ridiculously long output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This action will output a very long string, which is overly complicated, but
    we don't really care about that as we just want to measure how long it takes to
    create such a string. We can now commence with the first benchmark.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will be used to do the benchmarking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The command stands for a concurrency of four (`-c 4`) and we want to run the
    test ten times (`-n 10`) on the `localhost` as our website. This means that a
    total of 40 times our page will be visited, which will give us quite a clear view
    on the average in response times.
  prefs: []
  type: TYPE_NORMAL
- en: The following is a review of the most important result of the benchmark. Obviously
    the rest of the result is also somewhat interesting, but we are just interested
    in the response time at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We will use the 18.111 seconds as the base to compare all the other results
    with.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing configuration/class map cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First we are going to implement the configuration cache as that is the basis
    of all caching (at least I like to think so).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do that by adding the following configuration to the `/config/application.config.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We now enabled the configuration/class map caching, which should get us a very
    (very) small increase in response time. Naturally, this will be a bigger difference
    when we have a larger application with more modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do our benchmark again to see what the difference is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As we can see our result has been significantly different, a staggering 14.2
    percent faster actually. We should not forget, however, that our application is
    incredibly small and this percentage may actually be a lot smaller if our application
    grows larger in the future. Still, this is a clear sign that caching our configuration
    and class mapping is a good practice.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A little bug in the configuration caching system we should wary about is that
    we cannot use closures (also called anonymous functions). If we do we get a PHP
    fatal error saying something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the class caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because we have this incredibly long output, it is interesting to use the `ClassCache`
    adapter to cache the output of the single method that generates this output. And
    we also know our `LongOutput` model has no output that changes, we can safely
    cache the output.
  prefs: []
  type: TYPE_NORMAL
- en: For this caching method to work we need to make sure that the configuration
    cache has been turned off, otherwise it will end up in a PHP error.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to change `module.config.php` in the `Application` module first
    to initialize our cache storage adapter first. After that we will change the `Application\Controller\IndexController`
    so that we can use our pattern. We can just add the following code to `/module/Application/config/module.config.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have initialized our cache, we need to make sure our output is cached
    as well. This will be done in `IndexController` (`/module/Application/src/Application/Controller/IndexController.php`)
    of our `Application` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now take a look at the benchmarking, we can see that the following caching
    has resulted in the following performance improvement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As we can see this is almost a 17.4 percent improvement on the original benchmark,
    which obviously is a fantastic improvement. It is also a 3.2 percent response
    increase in comparison to the configuration/class map caching. We know that this
    doesn't sound too impressive, and we understand your disappointment. However,
    do understand that in real life a database call or a service call can take a lot
    longer than this, and the percentage of improvement therefore would be much more!
  prefs: []
  type: TYPE_NORMAL
- en: There is only one slight issue with this method; and that is we won't be able
    to cache the configuration/class map this way. Because we want to optimize our
    application the best we can, this is obviously not good practice. Don't panic,
    however, there is a solution to this issue, and it comes in the form of `StorageCacheFactory`!
  prefs: []
  type: TYPE_NORMAL
- en: We didn't immediately discuss this because it is always best to see more than
    one way of coding, at least that is my personal choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we''ll do is strip the configuration we just added in `/module/Application/config/module.config.php`
    and add the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If we now turn back on the configuration and class map caching and do a benchmark,
    we get the following result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As we can see this time with both caching systems enabled, we get a 21 percent
    speed increase in comparison to the original.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is always good to cache the things we use regularly and are sure about their
    persistence. If we know a class's output doesn't change, but for example merely
    does some calculations we know that it will be a strong candidate to use for caching.
    Don't forget that caching methods which rely on third party input, such as databases,
    are harder to cache as they require a certain time-to-live in which the cache
    knows the data they have cached is out-of-date.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to look out for is to cache too much, that way your application
    actually slows down instead of speeding up as the cache is too busy refreshing/getting
    and setting the cache instead of actually outputting it. A good way of auto-cleaning
    and auto-optimizing however, is by setting up a periodic `cron` (much like scheduled
    tasks for Windows users) process that runs periodically.
  prefs: []
  type: TYPE_NORMAL
