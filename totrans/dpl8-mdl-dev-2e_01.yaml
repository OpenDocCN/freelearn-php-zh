- en: Developing for Drupal 8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Drupal 8开发
- en: Drupal is a web-based **Content Management System** (**CMS**). While it is useful
    out of the box, it is designed with developers in mind. The purpose of this book
    is to explain how Drupal can be extended in many ways and for many purposes. To
    this end, the version we will use will be the latest one at the time of writing
    this book—Drupal 8.7.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal是一个基于Web的**内容管理系统**（**CMS**）。虽然它自带功能强大，但它是为开发者设计的。本书的目的是解释Drupal可以以多种方式扩展，用于许多目的。为此，我们将使用本书撰写时的最新版本——Drupal
    8.7。
- en: In this book, we will cover a wide range of development topics. We'll discuss
    how to create a Drupal 8 module, and as we go through the chapters, many concepts
    and tips that will help you build what you need. The goal is not only to explain
    how things work but also to go through some examples in order to demonstrate them.
    Since no book can contain everything, I hope that after reading this book, you'll
    be able to expand on this knowledge on your own using the resources I reference
    and by looking into the Drupal core code itself. As helpful as such a book can
    be for learning any kind of software development, if you really want to progress,
    you will need to apply the knowledge you learned and explore the source code yourself.
    Only by doing this will you be able to understand complex systems with many dependencies
    and layers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将涵盖一系列的开发主题。我们将讨论如何创建一个Drupal 8模块，随着我们阅读章节，许多概念和技巧将帮助你构建你所需要的内容。目标是不仅解释事物是如何工作的，还要通过一些示例来演示它们。由于没有一本书可以包含一切，我希望在阅读这本书之后，你能够利用我引用的资源以及查看Drupal核心代码本身来扩展这些知识。尽管这样的书对于学习任何类型的软件开发都非常有帮助，但如果你真的想进步，你需要应用你所学的知识并亲自探索源代码。只有通过这样做，你才能理解具有许多依赖和层的复杂系统。
- en: This chapter introduces the terminology, tools, and processes for developing
    Drupal 8\. While subsequent chapters focus on code, this chapter focuses on concepts.
    We'll talk about the architecture of Drupal and how you can hook into Drupal at
    strategic places to extend it for accomplishing new tasks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了开发Drupal 8所需的术语、工具和流程。虽然后续章节侧重于代码，但本章侧重于概念。我们将讨论Drupal的架构以及你如何在战略位置挂钩Drupal以扩展它以完成新任务。
- en: 'The following are the major topics we will be covering in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: An introduction to Drupal development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal开发的简介
- en: Drupal 8 architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal 8架构
- en: The major subsystems of Drupal
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal的主要子系统
- en: Tools for developing in Drupal
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal开发工具
- en: By the end of this chapter, you will understand the architectural aspects of
    Drupal and be ready to start writing code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将了解Drupal的架构方面，并准备好开始编写代码。
- en: Introducing Drupal (for developers)
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal简介（面向开发者）
- en: 'Out of the box, Drupal traditionally has all the standard functions of a web-based
    content management system:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal传统上具有基于Web的内容管理系统（CMS）的所有标准功能：
- en: Visitors can view published information on the site, navigate through menus,
    view listings, and individual pages and so on
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问者可以查看网站上发布的信息，浏览菜单，查看列表和单个页面等
- en: Users can create accounts and leave comments
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以创建账户并留下评论
- en: Administrators can manage the site configuration and control the permissions
    of users
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员可以管理网站配置并控制用户的权限
- en: Editors can create, preview, and then publish content when it is ready
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑员可以在内容准备好后创建、预览并发布内容
- en: Content can be syndicated to RSS, where feed readers can pick up new articles
    as they are published
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容可以同步到RSS，其中新闻阅读器可以在发布时获取新文章
- en: With several built-in themes, even the look and feel of the site can be easily
    changed
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过几个内置主题，甚至可以轻松更改网站的外观和感觉
- en: However, Drupal 8 improved on these and introduced some more powerful capabilities.
    For example, advanced multilingual support, content moderation, layout building,
    REST API and many other features are now available out of the box.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Drupal 8在这些方面进行了改进并引入了一些更强大的功能。例如，高级多语言支持、内容审核、布局构建、REST API以及许多其他功能现在都是自带功能。
- en: Developing for Drupal 8
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Drupal 8开发
- en: As fantastic as these features are, they will certainly not satisfy the needs
    of all users. To that end, Drupal's capabilities can be easily extended with modules,
    themes, and installation profiles. Take a look at Drupal's main website, ([http://drupal.org](http://drupal.org)),
    and you will find thousands of modules that provide new features and thousands
    of themes that transform the look and feel of the application or website.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些功能很棒，但它们肯定无法满足所有用户的需求。为此，Drupal的功能可以通过模块、主题和安装配置文件轻松扩展。查看Drupal的主网站（[http://drupal.org](http://drupal.org)），您将找到数千个提供新功能的模块和数千个可以改变应用程序或网站外观和感觉的主题。
- en: The flexible way Drupal can be extended and transformed through the module and
    theme mechanisms has led many to claim that Drupal isn't just a CMS, but a **Content
    Management Framework** (**CMF**) capable of being re-tooled to specific needs
    and functional requirements. This is particularly the case with Drupal 8—the latest
    version of Drupal and the focus of this book—as great progress has been made on
    the extensibility front as well.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal可以通过模块和主题机制灵活扩展和转换的方式，导致许多人声称Drupal不仅仅是一个CMS，而是一个**内容管理框架**（**CMF**），能够根据特定需求和功能要求进行重新配置。这尤其适用于Drupal
    8——这是Drupal的最新版本，也是本书的重点，因为在可扩展性方面取得了巨大进步。
- en: Establishing whether Drupal is rightly called a CMS or CMF is beyond our purpose
    here, but it is certain that Drupal's most tremendous asset is its extensibility.
    Want to use a directory server for authentication? There's a Drupal module for
    that. Want to export data to **Comma-separated Version** (**CSV**) files? There
    are several modules for that (depending on what data you want to export). Interested
    in Facebook support, integration with Twitter, or adding a Share This button?
    Yup, there are modules for those too—all of which are available on Drupal.org
    and provided by developers like you.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 判断Drupal是否正确地被称为CMS或CMF超出了我们在这里的目的，但可以肯定的是，Drupal最巨大的资产是其可扩展性。想要使用目录服务器进行身份验证？有Drupal模块可以做到这一点。想要将数据导出到**逗号分隔值**（**CSV**）文件？有多个模块可以做到这一点（取决于您想要导出哪些数据）。对Facebook支持、与Twitter集成或添加“分享此内容”按钮感兴趣？是的，也有模块可以做到这些——所有这些模块都在Drupal.org上提供，由像您这样的开发者提供。
- en: Want to integrate Drupal with that custom tool you wrote to solve your special
    business needs? There may not be a module for that, but with a little bit of code,
    you can write your own. In fact, that is the subject of this book—providing you
    with the knowledge and tools to achieve your own goals.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 想要将Drupal与您编写的用于解决特殊业务需求的定制工具集成？可能没有现成的模块可以做到这一点，但通过一点代码，您可以自己编写。实际上，这正是本书的主题——为您提供知识和工具，以实现您自己的目标。
- en: In summary, the purpose of this book is to get you ramped up (as quickly as
    possible) for Drupal 8 module development. As we move chapter by chapter, we will
    cover the APIs and tools that you will use to build custom Drupal sites, and we
    won't stick to theory. Most chapters provide working, practically-oriented example
    code designed to show you how to implement the concepts we will be talking about.
    We will follow Drupal coding conventions and utilize Drupal design patterns in
    an effort to illustrate the correct way to write code within the Drupal development
    context.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，本书的目的是让您尽快熟悉Drupal 8模块开发。随着我们逐章推进，我们将介绍您将用于构建自定义Drupal站点的API和工具，并且不会局限于理论。大多数章节都提供了实际操作、面向实践示例代码，旨在向您展示如何实现我们将要讨论的概念。我们将遵循Drupal编码规范，并利用Drupal设计模式，以展示在Drupal开发环境中编写代码的正确方式。
- en: While I certainly can't write the exact code to meet your needs, my hope is
    that the code mentioned in these chapters can serve as a foundation for your bigger
    and better applications.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我当然无法编写满足您需求的精确代码，但我希望这些章节中提到的代码可以作为您更大、更好的应用的基石。
- en: So let's get started with a few preliminary matters to better understand Drupal.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始一些初步事项，以便更好地理解Drupal。
- en: Technologies that drive Drupal
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推动Drupal发展的技术
- en: Installing Drupal 8 in the traditional way is documented both on [Drupal.org](http://Drupal.org)
    and in the `INSTALL.txt` file found inside the `/core` folder of the installation,
    so I won't go into it here. I will, however, mention that a better way of installing
    Drupal 8, especially for developers, is by using the accepted Composer template
    for Drupal 8 projects found on GitHub ([https://github.com/drupal-composer/drupal-project](https://github.com/drupal-composer/drupal-project)).
    However, the instructions for setting up your site are well covered there as well.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Drupal.org](http://Drupal.org)和安装目录中的`INSTALL.txt`文件中都有关于以传统方式安装Drupal 8的文档，所以这里我就不详细说明了。然而，我会提到，对于开发者来说，一种更好的安装Drupal
    8的方式是使用GitHub上提供的Drupal 8项目的标准Composer模板（[https://github.com/drupal-composer/drupal-project](https://github.com/drupal-composer/drupal-project)）。不过，设置网站的说明在那里也得到了很好的覆盖。
- en: Instead, let's talk a bit about the technologies that power (or are needed by)
    Drupal 8.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们来谈谈推动（或需要）Drupal 8的技术。
- en: PHP
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP
- en: Drupal is written in the PHP programming language. PHP is a widely supported,
    multiplatform, and web-centric scripting language. Since Drupal is written in
    PHP, this book will largely feature code written in PHP, albeit with Drupal standard
    practices being kept in mind.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal是用PHP编程语言编写的。PHP是一种广泛支持的、多平台和以网络为中心的脚本语言。由于Drupal是用PHP编写的，因此本书将主要介绍PHP代码，尽管会考虑到Drupal的标准实践。
- en: It is very important to note that the minimum version of PHP required for Drupal
    8 to run (and install via Composer) is 7.1\. Therefore PHP 5 is no longer supported,
    neither by Drupal nor by the PHP community at large. By the time you read this
    book, you should probably be running Drupal on PHP 7.3 or at least 7.2
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是要注意，Drupal 8运行（以及通过Composer安装）所需的最小PHP版本是7.1。因此，PHP 5不再由Drupal或整个PHP社区支持。在你阅读这本书的时候，你可能会在PHP
    7.3或至少7.2上运行Drupal。
- en: Regarding the style of PHP, a very important change compared to Drupal 7 is
    the heavy use of object-oriented code and design patterns. Granted, many procedural
    style approaches remain throughout the Drupal 8 code base, but the use of a good
    number of popular external libraries (such as Symfony components) has pushed the
    overall Drupal code to be more modern. For this reason, it is also quite important
    that you have at least some basic understanding of **Object-Oriented Programming**
    (**OOP**), especially PHP-related, if you want to do Drupal 8 development.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关于PHP的风格，与Drupal 7相比，一个非常重要的变化是大量使用面向对象的代码和设计模式。诚然，在Drupal 8代码库中仍然存在许多过程式风格的实现方法，但大量使用流行的外部库（如Symfony组件）已经推动了Drupal代码的整体现代化。因此，如果你想要进行Drupal
    8开发，至少应该对**面向对象编程**（**OOP**），尤其是PHP相关的，有一些基本的了解。
- en: Databases and MySQL
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库和MySQL
- en: In the past, Drupal has supported two databases—MySQL and PostgreSQL. Drupal
    7 and 8 have moved beyond this. Drupal now uses the powerful **PHP Data Objects**
    (**PDO**) library that is standard in PHP 7\. This library is an abstraction layer
    that allows developers to support numerous databases, including MySQL, PostgreSQL,
    SQLite, and MariaDB.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，Drupal支持两种数据库——MySQL和PostgreSQL。Drupal 7和8已经超越了这一点。现在，Drupal使用的是PHP 7标准库中的强大**PHP数据对象**（**PDO**）库。这个库是一个抽象层，允许开发者支持包括MySQL、PostgreSQL、SQLite和MariaDB在内的多种数据库。
- en: 'The minimum database versions for Drupal 8.7 are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8.7所需的最小数据库版本如下：
- en: MySQL 5.5.3/MariaDB 5.5.20/Percona Server 5.5.8 or higher with PDO and an InnoDB-compatible
    primary storage engine
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 5.5.3/MariaDB 5.5.20/Percona Server 5.5.8或更高版本，需要PDO和兼容InnoDB的主存储引擎
- en: PostgreSQL 9.1.2 or higher with PDO SQLite 3.7.11 or higher
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 9.1.2或更高版本，配合PDO SQLite 3.7.11或更高版本
- en: SQLite 3.7.11 or higher
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite 3.7.11或更高版本
- en: Additionally, Drupal provides a powerful database API along with SQL coding
    conventions that make it easy to interact with your database—which, combined,
    allow you to write safe and portable SQL. However, more and more abstractions
    have been made at different levels, removing the need for SQL writing almost completely.
    However, we will still see some examples just so your toolbox does not miss anything,
    as well as cover all the tools at your disposal for querying your database.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Drupal提供了一个强大的数据库API以及SQL编码规范，这使得与数据库交互变得容易——结合这些，可以让你编写安全且可移植的SQL。然而，在不同层面上已经做了越来越多的抽象，几乎完全消除了编写SQL的需求。但是，我们仍将看到一些示例，以确保你的工具箱不遗漏任何东西，同时也会介绍你可用于查询数据库的所有工具。
- en: The web server
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络服务器
- en: Apache has long been the predominant web server, but it is by no means the only
    server. While Drupal was originally written with Apache in mind, many other web
    servers (including IIS, Lighttpd, and NGINX) can run Drupal.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Apache长期以来一直是主导的网络服务器，但绝非唯一的服务器。虽然Drupal最初是为Apache编写的，但许多其他网络服务器（包括IIS、Lighttpd和NGINX）也可以运行Drupal。
- en: We do not explicitly cover the web server layer anywhere in this book, primarily
    because development rarely requires working at that low level. However, Drupal
    expects a fair amount of processing from the web server layer, including the handling
    of URL rewriting. For more information on what you can expect, you can consult
    the relevant documentation page at [https://www.drupal.org/docs/8/system-requirements/web-server](https://www.drupal.org/docs/8/system-requirements/web-server).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们没有明确涵盖任何关于网络服务器层的部分，主要是因为开发很少需要在这个低级别工作。然而，Drupal期望网络服务器层进行相当多的处理，包括URL重写处理。有关您可以期待的内容的更多信息，您可以查阅相关文档页面[https://www.drupal.org/docs/8/system-requirements/web-server](https://www.drupal.org/docs/8/system-requirements/web-server)。
- en: HTML, CSS, and JavaScript
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML、CSS和JavaScript
- en: The de facto web data format is HTML styled with **Cascading Style Sheets** (**CSS**).
    Client-side interactive components are scripted with JavaScript. As Drupal developers,
    we will encounter all three of these technologies in this book. Although you don't
    need to be a JavaScript ninja to understand the code here, you will get the most
    from this book if you are comfortable with these three technologies.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上的网络数据格式是带有**层叠样式表**（**CSS**）的HTML。客户端交互组件是用JavaScript编写的。作为Drupal开发者，我们将在本书中遇到这三种技术。虽然您不需要成为JavaScript忍者就能理解这里的代码，但如果您对这三种技术感到舒适，您将能从本书中获得最大收益。
- en: Drupal architecture
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal架构
- en: In the preceding section, we introduced the technologies that drive Drupal.
    However, how do they all fit together? How is Drupal code organized? In this section,
    we provide an overview of Drupal's architecture, with a focus on Drupal 8.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了驱动Drupal的技术。然而，它们是如何相互配合的呢？Drupal代码是如何组织的？在本节中，我们提供了Drupal架构的概述，重点关注Drupal
    8。
- en: Drupal core, modules, and themes
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal核心、模块和主题
- en: 'From an architectural standpoint, we can break up Drupal into three pieces:
    its core, modules and themes.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从建筑学的角度来看，我们可以将Drupal分解为三个部分：其核心、模块和主题。
- en: When we discuss Drupal 8 core, we can interpret it in two ways. A more restrictive
    interpretation sees it as the functionality covered by all the code it ships with,
    excluding modules and themes. The more widespread interpretation sees it as the
    total code base it ships with (*out of the box*).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论Drupal 8的核心时，我们可以有两种解释。一种较为严格的解释认为它是指它所附带的所有代码所覆盖的功能，不包括模块和主题。而更为普遍的解释则认为它是指它所附带的总代码库（即**开箱即用**）。
- en: Although the most widespread interpretation is the latter (not least because
    it differentiates all the functionalities its standard installation contains versus
    all others provided by contributed modules and themes), it is interesting to consider
    the first one as well, even if just for a minute. Because in doing so we can distinguish,
    architecturally speaking, the base code from the modules and themes that provide
    various functionalities and layouts. And why is this distinction interesting?
    Because at the bridge between the two comes into play the hooks and events that
    will also allow us to inject ties to our own functionality.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最普遍的解释是后者（至少因为它区分了其标准安装包含的所有功能与所有其他由贡献的模块和主题提供的功能），但考虑第一种解释也很有趣，即使只是片刻。因为这样做，我们可以从架构上区分基本代码与提供各种功能和布局的模块和主题。这种区分为什么有趣呢？因为在这两者之间的桥梁上发挥作用的是钩子和事件，这也会允许我们注入对我们自己功能的联系。
- en: The core libraries are made up of code belonging to the Drupal project and those
    from the wider PHP community, which Drupal borrows under open source licensing.
    This latter approach is new in Drupal 8 and has been regarded by many as a positive
    shift toward getting off the Drupal island and embracing outside libraries, frameworks,
    and communities.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 核心库由属于Drupal项目及其从更广泛的PHP社区借用的代码组成，Drupal在开源许可下借用这些代码。这种后一种方法在Drupal 8中是新的，并且被许多人视为朝着离开Drupal孤岛和拥抱外部库、框架和社区的积极转变。
- en: Essentially, the core libraries provide the functions and services used throughout
    Drupal. For example, helpers for interacting with the database, translating between
    languages, sanitizing user data, building forms, encoding data, and many such
    utilities are found in Drupal's core libraries.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，核心库提供了Drupal中使用的函数和服务。例如，与数据库交互的辅助工具、语言之间的翻译、用户数据清理、构建表单、编码数据和许多此类实用工具都可在Drupal的核心库中找到。
- en: The modules (both core and contributed) are where most of the actual business
    logic is encapsulated. If enabled, they can provide functionality or extend the
    existing one. Most of the core modules are needed and cannot be disabled due to
    their importance in the standard Drupal installation. However, contributed ones
    can be installed and uninstalled as needed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模块（包括核心模块和贡献模块）是实际业务逻辑封装的主要地方。如果启用，它们可以提供功能或扩展现有功能。大多数核心模块都是必需的，不能禁用，因为它们在标准Drupal安装中的重要性。然而，贡献模块可以根据需要安装和卸载。
- en: The themes (both core and contributed) are an important part of the theme system
    and are used by the presentation layer. They provide HTML templates within which
    content and data can be rendered to the user, as well as CSS styling and even
    client-side scripting for some nice visual interactions. Themes can extend other
    themes and can also contain some PHP logic to process the data before being rendered.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 主题（包括核心主题和贡献主题）是主题系统的重要组成部分，并由表示层使用。它们提供HTML模板，内容和数据可以在其中渲染给用户，以及CSS样式甚至一些客户端脚本，以实现一些美观的交互。主题可以扩展其他主题，也可以包含一些PHP逻辑来处理在渲染之前的数据。
- en: Hooks, plugins, and events
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 钩子、插件和事件
- en: Now that we have seen what the core libraries, modules, and themes do, let's
    talk briefly about hooks and events to understand how they are all connected.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了核心库、模块和主题的作用，让我们简要谈谈钩子和事件，以了解它们是如何相互关联的。
- en: Hooks are a very typical Drupal procedural concept that allows Drupal core and
    modules to gather data from other modules and themes (or expose it). By doing
    this, the latter can provide new functionality or alter existing ones. It is the
    responsibility of the code that *invokes* the hook to make use of whatever the
    hook *implementations* return. The format for whatever the latter need to return
    is usually described in the hook documentation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 钩子是Drupal非常典型的过程式概念，允许Drupal核心和模块从其他模块和主题（或暴露它们）收集数据。通过这样做，后者可以提供新的功能或修改现有功能。使用钩子实现返回的内容的责任在于调用钩子的代码。后者需要返回的格式通常在钩子文档中描述。
- en: Concretely, hooks work by scanning installed modules and themes and looking
    for a function that follows a specific naming pattern (in other words, a *hook
    implementation*). This is, in most cases, in the following format—`module_name_hook_name`.
    Additionally, there are also *alter* hooks, which have the word alter tacked on
    the end of the function name and are used to change data passed as a reference
    to the hook implementation. We will see examples of hooks later in the book.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，钩子通过扫描已安装的模块和主题，寻找遵循特定命名模式的函数（换句话说，一个*钩子实现*）。在大多数情况下，格式如下—`module_name_hook_name`。此外，还有*alter*钩子，它们在函数名末尾附加了“alter”一词，用于更改传递给钩子实现的引用数据。我们将在本书后面的章节中看到钩子的示例。
- en: Developers with a background in OOP or with a strong knowledge of design patterns
    might recognize this as being similar to the event handling paradigm captured
    in the Passive Observer pattern. When some particular event occurs, Drupal allows
    modules the opportunity to respond to that event.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有OOP背景或对设计模式有深入了解的开发者可能会认识到这与被动观察者模式中捕获的事件处理范例相似。当某个特定事件发生时，Drupal允许模块有机会对此事件做出响应。
- en: In previous versions of Drupal, hooks were KING. Yes, I wrote this in capital
    letters; my *Caps Lock* did not get stuck. This is because they were the way to
    add or extend functionality in modules. As such, they were the single most important
    aspect of Drupal programming. In Drupal 8, however, although still important,
    they took a backseat to new concepts, such as plugins and events.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal的早期版本中，钩子（hooks）是王者。是的，我用大写字母写了这句话；我的*Caps Lock*并没有卡住。这是因为它们是向模块中添加或扩展功能的方式。因此，它们是Drupal编程最重要的一个方面。然而，在Drupal
    8中，尽管仍然很重要，但它们让位于新的概念，如插件和事件。
- en: In Drupal 8, I dare to say that plugins are king. Much of the logic that used
    to be tied to Drupal via hooks is now added in through **plugins** (not to be
    confused with WordPress plugins). Drupal 8 plugins are discoverable bits of the
    functionality centralized by a manager and that are used for certain tasks and
    features. We will see more about plugins and provide many examples later in the
    book.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 8中，我敢说插件是王。许多曾经通过钩子与Drupal关联的逻辑现在都通过**插件**（不要与WordPress插件混淆）添加进来。Drupal
    8插件是由管理者集中管理的功能块，用于执行特定任务和功能。我们将在本书的后面部分更多地了解插件并提供许多示例。
- en: A third extension point introduced in Drupal 8 is the event system. Unlike the
    first two, however, this is not specific to Drupal, but is, in fact, the actual
    Symfony `EventDispatcher` component ([http://symfony.com/doc/current/components/event_dispatcher.html](http://symfony.com/doc/current/components/event_dispatcher.html)).
    Events are primarily used in Drupal to intercept certain actions or flows in order
    to either stop or modify them. Many *request to response* tasks that were handled
    via hooks in the past are now being handled by dispatching events to check whether
    any modules are interested in, for example, delivering the response to the user.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8引入的第三个扩展点是事件系统。然而，与前面两个不同，这并不是Drupal特有的，实际上它是实际的Symfony `EventDispatcher`组件([http://symfony.com/doc/current/components/event_dispatcher.html](http://symfony.com/doc/current/components/event_dispatcher.html))。事件主要用于Drupal中拦截某些动作或流程，以便停止或修改它们。许多过去通过钩子处理的`请求到响应`任务现在通过派发事件来处理，以检查是否有模块对，例如，向用户提供响应感兴趣。
- en: Services and the dependency injection container
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务和依赖注入容器
- en: Another architecturally important element of Drupal 8 is the Symfony dependency
    injection component ([http://symfony.com/doc/current/components/dependency_injection.html](http://symfony.com/doc/current/components/dependency_injection.html)),
    specifically represented by the service container.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8的另一个重要的架构元素是Symfony依赖注入组件([http://symfony.com/doc/current/components/dependency_injection.html](http://symfony.com/doc/current/components/dependency_injection.html))，具体由服务容器表示。
- en: This component is a staple of modern OOP PHP programming and as such has become
    foundational to Drupal 8\. It allows us to create *services* that can be injected
    in various places of our code in order to handle certain functional (and oftentimes
    swappable) tasks. Additionally, they can also be used as an extension point because
    the service container is able to group services that have very specific responsibilities
    and use them for that automatically. In other words, simply by defining a simple
    service, we can provide our own functionality or even change existing logic.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件是现代OOP PHP编程的基石，因此已经成为Drupal 8的基础。它允许我们在代码的各个地方创建*服务*，以便处理某些功能（通常是可替换的）任务。此外，它们也可以用作扩展点，因为服务容器能够将具有非常特定职责的服务分组，并自动使用它们。换句话说，仅仅通过定义一个简单的服务，我们就可以提供自己的功能，甚至改变现有的逻辑。
- en: We will encounter many services, and we will see how we can declare our own
    later in this book.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遇到许多服务，我们将在本书的后面部分看到我们如何声明自己的服务。
- en: From request to response
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从请求到响应
- en: 'Now that we have listed the most important architectural pieces of Drupal,
    let''s briefly see how these are used in delivering responses to the requests
    a user makes on a Drupal 8 website. To this end, we will analyze a simplified
    example of a request as it is handled on a Drupal 8 website:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经列出了Drupal最重要的架构组件，让我们简要地看看这些组件是如何在处理用户在Drupal 8网站上提出的请求时被使用的。为此，我们将分析一个简化的请求示例，看看它在Drupal
    8网站上的处理方式：
- en: A user accesses the `http://example.com/node/123` URL in a web browser.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在网页浏览器中访问了`http://example.com/node/123` URL。
- en: The browser contacts the web server at `example.com` and requests the resource
    at `/node/123`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器联系`example.com`上的Web服务器，并请求`/node/123`资源。
- en: The web server recognizes that the request must be handled by PHP and starts
    up (or contacts) a PHP environment to handle the request.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web服务器识别出请求必须由PHP处理，并启动（或联系）一个PHP环境来处理请求。
- en: PHP executes Drupal's front controller file (`index.php`), which then creates
    a new `Request` object from the resource that was requested.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PHP执行Drupal的前端控制器文件(`index.php`)，然后从请求的资源中创建一个新的`Request`对象。
- en: Symfony's HTTPKernel handles this request object by dispatching a number of
    events, such as `kernel.request`, `kernel.controller`, `kernel.response`, and
    `kernel.view`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Symfony的HTTPKernel通过派发一系列事件来处理这个请求对象，例如`kernel.request`、`kernel.controller`、`kernel.response`和`kernel.view`。
- en: The route that maps to that request is identified through the `kernel.request`
    event.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `kernel.request` 事件识别映射到该请求的路由。
- en: The route controller is identified, and the `kernel.controller` event is used
    to perform any alterations on the responsible controller, as well as to resolve
    the arguments that need to be passed to it. In our case, this route is registered
    by the Node module through the main Entity system, which identifies the entity
    ID, loads it, and builds the markup to be returned as part of the response.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由控制器被识别，并使用 `kernel.controller` 事件对负责的控制器进行任何修改，以及解决需要传递给它的参数。在我们的情况下，这个路由是通过主实体系统由节点模块注册的，该系统识别实体
    ID，加载它，并构建作为响应一部分返回的标记。
- en: If the respective controller (or handler) returns something other than a response
    object, the `kernel.view` event is dispatched to check whether there is any code
    that can transform that into a Response object. In most cases, in Drupal 8, we
    typically return render arrays, which are transformed into Response objects.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果相应的控制器（或处理器）返回的不是响应对象，则触发 `kernel.view` 事件以检查是否有任何代码可以将它转换成响应对象。在 Drupal 8
    中，在大多数情况下，我们通常返回渲染数组，这些数组被转换成响应对象。
- en: Once a Response is created, the front controller returns it to the browser and
    terminates the request.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建响应，前端控制器将其返回给浏览器并终止请求。
- en: In this context, as Drupal 8 module developers, we spend most of our time inside
    controllers and services, trying to figure out what we need to return to the page.
    We then rely on Drupal to transform our render array into a proper response to
    the user, but we can also return one ourselves directly. Moreover, the theme system
    comes into play here, as well as the block system, because our content gets wrapped
    into a block that is placed in a region surrounded by other regions that contain
    other blocks. If it sounds complicated now, don't worry; we will cover in detail
    all these aspects with examples, and it will become clear in no time.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个背景下，作为 Drupal 8 模块开发者，我们大部分时间都在控制器和服务内部，试图弄清楚我们需要返回给页面的内容。然后我们依赖 Drupal 将我们的渲染数组转换成对用户适当的响应，但我们也可以直接返回一个响应。此外，主题系统和块系统也在这里发挥作用，因为我们的内容被包裹在一个块中，这个块被放置在由其他包含块的区域所环绕的区域中。如果现在听起来很复杂，请不要担心；我们将通过示例详细解释所有这些方面，很快就会变得清晰易懂。
- en: Drupal's major subsystems
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal 的主要子系统
- en: In the previous  we took a bird's-eye view of Drupal's architecture. Now, we
    will refine our perspective a bit. We will walk through the major subsystems that
    Drupal 8 has to offer.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的内容中，我们以鸟瞰的方式了解了 Drupal 的架构。现在，我们将稍微调整我们的视角。我们将遍历 Drupal 8 提供的主要子系统。
- en: Routing
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: It all starts with a route, doesn't it? Most interactions with a Drupal 8 website
    begin with a user (or system) accessing a certain path (or resource). This translates
    into a route, which maps that resource to a flow that (hopefully) returns a successful
    response back or at least a graceful failure.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这一切都始于一个路由，不是吗？与 Drupal 8 网站的几乎所有交互都是从用户（或系统）访问某个路径（或资源）开始的。这转化为一个路由，将那个资源映射到一个流程，该流程（希望）返回一个成功的响应，或者至少是一个优雅的失败。
- en: The Drupal 8 routing system is a major shift away from how it used to be in
    its previous versions. In Drupal 7 and before, the routing system was a very Drupal-specific
    thing (a *drupalism*, if you will). Many of us remember `hook_menu` as a staple
    hook each Drupal developer had to know very well. All of that has been abandoned
    in Drupal 8 in favor of the Symfony Routing component ([http:/](http://symfony.com/doc/current/components/routing.html)[/](http://symfony.com/doc/current/components/routing.html)[symfony.](http://symfony.com/doc/current/components/routing.html)[com/](http://symfony.com/doc/current/components/routing.html)[doc/](http://symfony.com/doc/current/components/routing.html)[current/](http://symfony.com/doc/current/components/routing.html)[components/](http://symfony.com/doc/current/components/routing.html)[routing.](http://symfony.com/doc/current/components/routing.html)[html](http://symfony.com/doc/current/components/routing.html)).
    Also, since I mentioned `hook_menu`, I will also mention that its other main functions
    have also been taken over in Drupal 8 by other subsystems, such as plugins.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8的路由系统与之前版本相比发生了重大转变。在Drupal 7及之前版本中，路由系统是一个非常具有Drupal特色的特性（如果你愿意，可以称之为*Drupal主义*）。我们许多人还记得`hook_menu`是一个每个Drupal开发者都必须非常熟悉的钩子。所有这些都已经在Drupal
    8中被遗弃，转而采用Symfony路由组件([http:/](http://symfony.com/doc/current/components/routing.html)[/](http://symfony.com/doc/current/components/routing.html)[symfony.](http://symfony.com/doc/current/components/routing.html)[com/](http://symfony.com/doc/current/components/routing.html)[doc/](http://symfony.com/doc/current/components/routing.html)[current/](http://symfony.com/doc/current/components/routing.html)[components/](http://symfony.com/doc/current/components/routing.html)[routing.](http://symfony.com/doc/current/components/routing.html)[html](http://symfony.com/doc/current/components/routing.html))。此外，既然我提到了`hook_menu`，我还会提到它的其他主要功能也已经在Drupal
    8中被其他子系统所取代，例如插件。
- en: In [Chapter 2](601b4dd0-c521-459e-9342-2645a109642c.xhtml), *Creating Your First
    Module*, we will see how we can define our own route and map it to a controller
    that will render our page. We will cover a few of the more important route options
    and take a look at how we can control access to these routes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二章](601b4dd0-c521-459e-9342-2645a109642c.xhtml)，*创建您的第一个模块*中，我们将了解如何定义我们自己的路由并将其映射到将渲染我们页面的控制器。我们将介绍一些更重要的路由选项，并查看我们如何控制对这些路由的访问。
- en: Entities
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体
- en: Progressively, entities have become a very powerful way of modeling data and
    content in Drupal. The most famous type of entity has always been the Node, and
    it has been historically the cornerstone of content storage and display. In Drupal
    8, the entire entity system has been revamped to make other entity types potentially
    just as important. They have been brought to the forefront and have been properly
    connected with other systems.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 逐渐地，实体已经成为在Drupal中建模数据和内容的一种非常强大的方式。最著名的实体类型始终是节点，它一直是内容存储和显示的基础。在Drupal 8中，整个实体系统已经进行了全面改革，使其他实体类型可能同样重要。它们被推到了前台，并且与其他系统进行了适当的连接。
- en: All entity types can have multiple `bundles`, which are different *variations*
    of the same entity type and can have different fields on them (while sharing some
    base fields).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所有实体类型都可以有多个`bundle`，它们是同一实体类型的不同*变体*，并且可以在它们上具有不同的字段（同时共享一些基本字段）。
- en: Drupal core still ships with the Node entity type, with a few bundles such as
    Basic Page and Article in its standard installation profile. In addition, it comes
    with a few other entity types, such as `User`, `Comment`, and `File`. However,
    creating your own entity type in Drupal 8 has become much more standardized compared
    to Drupal 7 where contributed modules had to be brought into play.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal核心仍然附带节点实体类型，包括在其标准安装配置文件中的几个bundle，如基本页面和文章。此外，它还附带了一些其他实体类型，如`User`、`Comment`和`File`。然而，在Drupal
    8中创建自己的实体类型已经比Drupal 7更加标准化，在Drupal 7中，需要引入贡献模块才能实现这一点。
- en: These are not the only types of entities we have in Drupal 8\. The aforementioned examples are
    all content entity types. Drupal 8, however, also introduced the configuration
    entity types. The former are for modeling content, but in reality, they are for
    anything that holds data that can be stored in the database and is specific to
    that environment. They are not used for storing configuration, though. Users and
    content are great examples, as they do not need to be (usually) deployable from
    one environment to another. The latter, on the other hand, are exportable items
    of configuration, of which there can be more than one. For example, a content
    entity *bundle* is a great example because there can be more than one bundle for
    a certain entity type; they have some metadata and information stored that can
    differ from bundle to bundle, and they need to be deployed on all environments.
    That is, they are fundamental to the correct functioning of the site.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些并不是我们在Drupal 8中拥有的唯一类型的实体。前面提到的例子都是内容实体类型。然而，Drupal 8还引入了配置实体类型。前者用于建模内容，但实际上，它们用于任何可以存储在数据库中并且特定于该环境的数据。尽管如此，它们并不用于存储配置。用户和内容是很好的例子，因为它们通常不需要（通常）从一个环境部署到另一个环境。另一方面，后者是可导出的配置项，可能不止一个。例如，内容实体*包*是一个很好的例子，因为对于某种实体类型，可能存在多个包；它们存储了一些可以不同包而不同的元数据和信息，并且需要在所有环境中部署。也就是说，它们是网站正确运行的基础。
- en: Understanding the entity system is indispensable for doing development in Drupal
    8 because it provides a powerful way to model custom data and content. Nodes are
    not the only tool for the job and in my opinion, they were used in previous Drupal
    versions way past their purpose due to the lack of a proper entity architecture.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 8中进行开发时，理解实体系统是必不可少的，因为它提供了一种强大的方式来建模自定义数据和内容。节点并不是完成这项工作的唯一工具，在我看来，在之前的Drupal版本中，由于缺乏适当的实体架构，它们被过度使用了。
- en: Fields
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字段
- en: Now that we have an idea of what entities are, let's take a look at how data
    is actually stored on these entities.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了实体是什么，让我们来看看数据实际上是如何在这些实体上存储的。
- en: I have alluded in the preceding section to how certain entity bundles can have
    various fields. This means that each entity type bundle can have any number of
    fields that are responsible for holding data. Additionally, each entity type itself
    can have fields for storing data. Okay, but what? Let's break this down.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我已经提到了某些实体包可以具有各种字段。这意味着每个实体类型包都可以有任意数量的字段来存储数据。此外，每个实体类型本身也可以有用于存储数据的字段。好吧，那么呢？让我们来分解一下。
- en: There are two types of fields in Drupal 8—base fields and configurable fields.
    The former are fields that are defined in the code for each entity type, whereas
    the latter are usually created and configured in the UI and attached to a *bundle*
    of that entity type (and exported via configuration).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8中有两种类型的字段——基本字段和可配置字段。前者是在代码中为每种实体类型定义的字段，而后者通常在UI中创建和配置，并附加到该实体类型的*包*（并通过配置导出）。
- en: Fields can also be of multiples types, depending on the data they store. You
    can have string (or text) fields, numeric fields, date fields, email fields, and
    so on. As developers, we can create our own field types if the existing ones are
    not good enough for our data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 字段也可以有多种类型，这取决于它们存储的数据。您可以拥有字符串（或文本）字段、数字字段、日期字段、电子邮件字段等等。作为开发者，如果现有的字段类型不足以满足我们的数据需求，我们可以创建自己的字段类型。
- en: In this book, we will take a look at how we can define base fields on a certain
    entity type and create our own field type with its own data input widget and output
    formatter. Site builders can then use this field type on any entity type.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将探讨如何定义特定实体类型上的基本字段，并创建我们自己的字段类型，它有自己的数据输入小部件和输出格式化程序。然后，网站构建者可以在任何实体类型上使用这种字段类型。
- en: Menus
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单
- en: Any site needs some sort of navigation, right? Drupal not only maintains content,
    but also provides details about how the site itself is organized. That is, it
    keeps a structure of how content is related.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 任何网站都需要某种形式的导航，对吧？Drupal不仅维护内容，还提供了有关网站自身组织方式的详细信息。也就是说，它保持了一个内容之间关系结构的结构。
- en: The principal way that it does this is through the menu subsystem. The latter
    provides APIs to generate, retrieve, and modify elements that describe the site
    structure. Put in common parlance, it handles the system's navigational menus.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 它主要通过菜单子系统来完成这项工作。后者提供了生成、检索和修改描述网站结构的元素的API。用通俗的话来说，它处理系统的导航菜单。
- en: Menus are hierarchical, that is, they have a tree-like structure. A menu item
    can have multiple children, each of which may have their own children, and so
    on. In this way, we can use the menu system to structure our site into sections
    and subsections.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单是分层的，也就是说，它们具有树状结构。一个菜单项可以有多个子项，每个子项也可以有自己的子项，依此类推。这样，我们可以使用菜单系统来将我们的网站结构化为章节和子章节。
- en: In this book, we will see how we can work programmatically with menus and menu
    links.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将看到如何以编程方式与菜单和菜单链接一起工作。
- en: Views
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图
- en: Listing content and data is always an important capability content management
    systems covet; and this is what Views does in Drupal 8\. And it does it well.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 列出内容和数据一直是内容管理系统所渴望的重要功能；这正是Drupal 8中视图所做的事情。而且它做得很好。
- en: If you've been building (not even necessarily developing) sites in previous
    versions of Drupal, you'll understand everything with this simple phrase—Views
    is now in Drupal core.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前使用过Drupal的早期版本来构建（甚至不一定开发）网站，那么你只需用这个简单的短语就能理解一切——视图现在已经是Drupal核心的一部分了。
- en: If you haven't, Views has always been a staple Drupal contributed module used
    on probably all Drupal installations (to a certain extent) and is an indispensable
    tool for site builders and even developers.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，视图一直是Drupal贡献模块中的基本模块，可能在所有Drupal安装（在一定程度上）上都得到了使用，并且是网站构建者和甚至开发者的不可或缺的工具。
- en: The purpose of the Views module is to expose data and content in a way that
    allows the creation of configurable listings. It includes things such as filters,
    sorts, display options, and many other features. As developers, we often find
    a need to write our own field or filter plugin to work with Views or expose data
    from our custom entities or external data sources.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 视图模块的目的是以允许创建可配置列表的方式暴露数据和内容。它包括过滤器、排序、显示选项以及许多其他功能。作为开发者，我们经常发现需要编写自己的字段或过滤器插件来与视图一起工作，或者从我们的自定义实体或外部数据源中暴露数据。
- en: Views is a core Drupal 8 module tied to the general architecture and used for
    most list pages (especially, admin pages) provided by Drupal core. Although it's
    a very site building-oriented tool, in this book, we will take a look at how we
    can create plugins that extend its capabilities to offer site builders even more.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是核心Drupal 8模块，与通用架构绑定，用于Drupal核心提供的多数列表页面（特别是管理页面）。尽管它是一个非常以网站构建为导向的工具，但在本书中，我们将探讨如何创建插件来扩展其功能，为网站构建者提供更多功能。
- en: Forms
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单
- en: Unless your site has three pages and five paragraphs of text, the likelihood
    that you will need to capture user input via some type of form is very high. Also,
    if you've been coding PHP applications you know how forms have always been a pain
    from the point of view of securely and efficiently rendering and processing the
    submitted data. As soon as you use a PHP framework such as Symfony or Laravel,
    you will note that an API is in place to take much of that load off your shoulders.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你的网站只有三页和五段文字，否则你很可能需要通过某种形式的表单来捕获用户输入。此外，如果你曾经编写过PHP应用程序，你就会知道从安全有效地渲染和处理提交数据的角度来看，表单一直是个头疼的问题。一旦你使用像Symfony或Laravel这样的PHP框架，你就会注意到有一个API可以帮你减轻很多负担。
- en: The same goes with Drupal 8 and its powerful Form API. Historically, it has
    been a great abstraction over having to output your own form elements and deal
    with posted values. It allows you to define your own form definition in OOP and
    handle validation and submission in a logical way. Its rendering and processing
    is taken care of by Drupal securely, so you don't have to worry about any of that.
    In Drupal 8, theming form elements has become much easier than in previous versions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这同样适用于Drupal 8及其强大的表单API。从历史上看，它是在输出自己的表单元素和处理提交值方面的一个很好的抽象。它允许你以面向对象的方式定义自己的表单定义，并以逻辑方式处理验证和提交。其渲染和处理由Drupal安全地处理，因此你不必担心任何这些问题。在Drupal
    8中，主题化表单元素比以前版本要容易得多。
- en: In this book, we will encounter some forms and see how they actually work in
    practice.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将遇到一些表单，并了解它们在实际中的工作方式。
- en: Configuration
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: One of the major pet-peeves of Drupal developers (and developers of other popular
    CMSes for that matter) has always been the way configuration is handled and deployed
    from one environment to the next. Drupal 7 stored most of its configuration in
    the database, so various solutions had to be concocted by developers to get that
    moved up the ladder as development progressed.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal开发者（以及其他流行CMS的开发者）的一大烦恼始终是配置的处理和部署方式，从一种环境到另一种环境。Drupal 7将大部分配置存储在数据库中，因此随着开发进程的推进，开发者不得不想出各种解决方案来提升这一过程。
- en: In Drupal 8, great advancements have been made in this respect with the introduction
    of a centralized configuration system. Although it stores all configuration in
    the database, it allows it all to be exported into YML files (and then reimported).
    So, from a development point of view, we have a much better experience if certain
    features depend on configuration (for example, a new field).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 8中，通过引入集中式配置系统，在这方面取得了重大进步。尽管它将所有配置存储在数据库中，但它允许所有配置导出到YML文件中（然后重新导入）。因此，从开发角度来看，如果某些功能依赖于配置（例如，一个新的字段），我们将拥有更好的体验。
- en: Configuration is also of two kinds—simple and complex (configuration entities
    we noted in the *Entities* section). The difference between the two is that the
    former is always singular. In other words, there is only one instance of itself.
    For example, the site name and email address are stored inside such a configuration
    item. You wouldn't expect the need for more than one instance of it. However,
    in the case of the latter, you would. For example, a View definition is such a
    configuration entity because it follows a certain schema and we can have multiple
    View definitions. Makes sense doesn't it?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 配置也有两种类型——简单和复杂（我们在*实体*部分提到的配置实体）。两者的区别在于前者始终是单一的。换句话说，只有一个实例。例如，网站名称和电子邮件地址存储在这样一个配置项中。你不会期望需要超过一个实例。然而，在后者的情况下，你会。例如，视图定义就是这样一种配置实体，因为它遵循一定的模式，我们可以有多个视图定义。这说得通吗？
- en: Plugins
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件
- en: Plugins are new to Drupal 8 and are an elegant solution to an important problem—
    encapsulating functionality. Right off the bat, you should not confuse them with
    things such as the WordPress plugins, which are more akin to Drupal modules. Instead,
    you should think of plugins as components of reusable code that can be used and
    managed by a central system. Typically, they are used when a system handles a
    task in a certain way (plugin A) but allows other modules to provide different
    ways to handle that task (plugin B or C).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是Drupal 8的新功能，是对一个重要问题的优雅解决方案——封装功能。一开始，你不应该将它们与WordPress插件等混淆，后者更像是Drupal模块。相反，你应该将插件视为可由中央系统使用和管理的可重用代码组件。通常，当系统以某种方式（插件A）处理任务时，它允许其他模块提供不同的处理该任务的方式（插件B或C）。
- en: 'You can also look at plugins as being opposite to entities: not used for data
    storage, but for functionality. Instead of creating a type of data that gets stored,
    you create a type of functionality that is used. The two usually work hand in
    hand, especially when it comes to manipulating the data in different ways.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将插件视为与实体相反：不是用于数据存储，而是用于功能。你创建的不是一种存储的数据类型，而是一种使用的功能类型。这两种通常协同工作，尤其是在以不同方式操作数据时。
- en: An important aspect of how they work is their discoverability. Most plugin types
    (but definitely not all) are discovered via something called *Annotations*. Annotations
    are a form of DocBlock comments, borrowed from the Doctrine library ([http:/](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[/](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[docs.](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[doctrine-](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[project.](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[org/](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[projects/](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[doctrine-](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[common/](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[en/](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[latest/](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[reference/](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[annotations.](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)[html](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)),
    by which we can describe classes, methods, and even properties with certain metadata.
    This metadata is then read to determine what that item is without the need for
    instantiating the class. In Drupal 8, we use annotations only at a class level
    to denote that it is a plugin implementation with certain characteristics. That
    is how most plugins are discovered in Drupal 8.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的工作方式的一个重要方面是它们的可发现性。大多数插件类型（但肯定不是全部）都是通过一种称为*注释*的东西来发现的。注释是一种DocBlock注释的形式，借鉴自Doctrine库（[http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html](http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html)），通过它我们可以用某些元数据来描述类、方法和甚至属性。然后读取这些元数据来确定该项是什么，而不需要实例化该类。在Drupal
    8中，我们只在类级别使用注释来表示它是一个具有某些特性的插件实现。这就是大多数插件在Drupal 8中是如何被发现的。
- en: The second most common discoverability method for plugins is via a YAML file,
    and a popular example of those are menu links (as we will see later in the book).
    However, for now, you should know that plugins are very widely used, and we will
    create quite a few plugins in this book.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的第二种最常见发现方法是通过YAML文件，其中最受欢迎的例子是菜单链接（正如我们将在本书后面看到的那样）。然而，现在你应该知道插件被非常广泛地使用，在这本书中我们将创建相当多的插件。
- en: Plugins are a great new extension point for developers to add their own functionality
    and are a critical subsystem in Drupal 8\. Every Drupal 8 developer needs to be
    comfortable with the plugin system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是开发者添加他们自己功能的一个很好的新扩展点，也是Drupal 8的一个关键子系统。每个Drupal 8开发者都需要熟悉插件系统。
- en: The theme system
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题系统
- en: The responsibility for theming a given piece of data is spread out over the
    Drupal core, modules, and the themes themselves. So, as a module developer, it
    is important to know that both modules and themes can theme data or content.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定数据主题化的责任分散在Drupal核心、模块和主题本身上。因此，作为一个模块开发者，了解模块和主题都可以主题化数据或内容是很重要的。
- en: In this book, we will focus on the aspects that happen at the module level.
    We will not concern ourselves with styling, but work primarily with theming definitions
    and templates that are needed within the module. Typically, it is best practice
    to ensure that modules are able to theme their data. If done right, themes can
    then come into play to style the output or override that theming to change the
    presentation altogether.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将关注模块级别的方面。我们不会关注样式，但主要与模块内所需的主题定义和模板一起工作。通常，确保模块能够主题化其数据是最佳实践。如果做得正确，主题就可以发挥作用来样式化输出或覆盖主题以完全改变展示方式。
- en: A major shift in Drupal 8 compared to older versions is the move to the open
    source Twig templating system ([https:/](https://twig.sensiolabs.org/)[/](https://twig.sensiolabs.org/)[twig.](https://twig.sensiolabs.org/)[sensiolabs.](https://twig.sensiolabs.org/)[org/](https://twig.sensiolabs.org/)).
    This makes the separation of logic from a presentation that much clearer and makes
    frontend developers jobs much easier, not to mention more secure.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与旧版本相比，Drupal 8 的一大转变是转向开源的 Twig 模板系统 ([https:/](https://twig.sensiolabs.org/)[/](https://twig.sensiolabs.org/)[twig.](https://twig.sensiolabs.org/)[sensiolabs.](https://twig.sensiolabs.org/)[org/](https://twig.sensiolabs.org/))。这使得逻辑与展示的分离更加清晰，使得前端开发者的工作更加容易，更不用说更加安全了。
- en: Caching
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存
- en: The last major subsystem that I will include here is the caching layer. Drupal
    8 has gone to great lengths to improve the performance of building pages and rendering
    data. To this end, the caching system has become an important part to consider
    whenever we either do complex or heavy calculations or render content.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下面包括的最后一个主要子系统是缓存层。Drupal 8 付出了巨大的努力来提高构建页面和渲染数据的表现力。为此，缓存系统已成为在执行复杂或重量级计算或渲染内容时必须考虑的重要部分。
- en: From a module developer's perspective, there are two main pillars of the caching
    system. The first one provides developers with a cache backend to store the results
    of complex data calculations. This can be read in the next requests to avoid the
    need for reprocessing that task. This goes hand in hand with the cache invalidation
    that happens when something in the system changes that would require the calculations
    to be redone. The second pillar is the render cache, which allows developers to
    wrap their output with metadata that describes when the cache of that output needs
    to be invalidated.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 从模块开发者的角度来看，缓存系统有两个主要支柱。第一个为开发者提供了一个缓存后端来存储复杂数据计算的结果。这些结果可以在后续请求中读取，以避免重新处理该任务的需要。这与当系统中发生变化需要重新计算时发生的缓存失效密切相关。第二个支柱是渲染缓存，它允许开发者用描述何时需要使该输出的缓存失效的元数据包装他们的输出。
- en: We will see these in action in a later chapter dedicated to caching.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续的缓存章节中看到这些工具的实际应用。
- en: Other subsystems
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他子系统
- en: There are other subsystems in Drupal 8 of varying importance. I chose to include
    the previous ones because I deemed them to be the most important to be introduced
    up front and especially from the point of view of a module developer. However,
    as we progress through the book, we will definitely encounter others.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 中还有其他不同重要性的子系统。我选择包括前面提到的那些，因为我认为它们是最重要的，尤其是在模块开发者的视角下。然而，随着我们继续阅读本书，我们肯定会遇到其他系统。
- en: Tools for developing in Drupal
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal 开发工具
- en: Drupal is a sophisticated platform, and from the glimpse provided in this chapter,
    we can already see that there are numerous systems and structures to keep track
    of. In this section, I will provide tools that simplify or streamline the development
    process.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 是一个复杂的平台，从本章提供的窥视中，我们已能看出有许多系统和结构需要跟踪。在本节中，我将提供简化或优化开发过程的工具。
- en: Going forward, I assume that you have your own web server stack and your own
    PHP development tools. However, if you are just getting started, you may want
    to look at Acquia Dev Desktop from Acquia ([http:/](http://acquia.com/)[/](http://acquia.com/)[acquia.](http://acquia.com/)[com](http://acquia.com/)).
    It offers entire application stacks to get you started on Windows, Linux, or macOS
    X. Alternatively, if you are even just a bit more advanced, you can consider the
    Drupal VM ([https:/](https://www.drupalvm.com/)[/](https://www.drupalvm.com/)[www.](https://www.drupalvm.com/)[drupalvm.](https://www.drupalvm.com/)[com/](https://www.drupalvm.com/)),
    a Vagrant and Ansible-based local development environment ready for Drupal.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 今后，我假设你已经有了自己的 Web 服务器堆栈和自己的 PHP 开发工具。然而，如果你是刚开始，你可能想看看 Acquia Dev Desktop（来自
    Acquia [http://acquia.com/](http://acquia.com/)）。它提供了整个应用程序堆栈，让你在 Windows、Linux
    或 macOS X 上开始。或者，如果你更加先进一些，你可以考虑 Drupal VM（[https://www.drupalvm.com/](https://www.drupalvm.com/)），这是一个基于
    Vagrant 和 Ansible 的本地开发环境，适用于 Drupal。
- en: 'Finally, the most flexible development environment in my opinion is the Docker-based
    one. You can easily get started with a pre-made and well documented stack here:
    [https://github.com/wodby/docker4drupal](https://github.com/wodby/docker4drupal).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我看来，最灵活的开发环境是基于 Docker 的。你可以很容易地从这里开始使用一个预先制作且文档齐全的堆栈：[https://github.com/wodby/docker4drupal](https://github.com/wodby/docker4drupal)。
- en: As for a code editor, I personally use PhpStorm (as many others do), but you
    are free to use whatever IDE you want because Drupal itself doesn't require anything
    special. Do, however, use some sort of an IDE because it will make your life much
    easier.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 至于代码编辑器，我个人使用 PhpStorm（正如许多人一样），但你完全可以选择你想要的任何 IDE，因为 Drupal 本身并不需要任何特殊的东西。然而，确实使用某种
    IDE，因为它会使你的生活更加容易。
- en: Additionally, while running a PHP debugger is certainly not necessary, you may
    find running Xdebug or the Zend Debugger to be useful. I personally recommend
    a PHP debugger wholeheartedly, not only for debugging itself, but also for understanding
    the processes that happen under the hood.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然运行 PHP 调试器绝对不是必要的，但你可能会发现运行 Xdebug 或 Zend Debugger 是有用的。我个人强烈推荐 PHP 调试器，不仅因为调试本身，还因为可以理解底层的运行过程。
- en: Version control
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: Any software development needs to happen through a version-controlled environment.
    By now, Drupal is universally using Git. So, you should make sure that you have
    Git installed locally, even if just to be able to check out the code examples
    we write in this book, which are hosted on GitHub.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 任何软件开发都需要通过版本控制的环境进行。到目前为止，Drupal 已经普遍使用 Git。因此，你应该确保你已经在本地安装了 Git，即使只是为了能够检出我们在这本书中编写的代码示例，这些代码示例托管在
    GitHub 上。
- en: Composer
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer
- en: As I alluded to earlier, installing Drupal 8 is best done via the Composer template
    project. However, you may also install it straight from Git by checking out the
    latest tag or commit in the [Drupal.org](http://Drupal.org) Git repository ([https://www.drupal.org/project/drupal/git-instructions](https://www.drupal.org/project/drupal/git-instructions)).
    If you do this, you will need to install its dependencies via Composer, and Drupal
    has many.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所提到的，安装 Drupal 8 最好是使用 Composer 模板项目。然而，你也可以直接从 Git 安装，通过检出 [Drupal.org](http://Drupal.org)
    Git 仓库中的最新标签或提交（[https://www.drupal.org/project/drupal/git-instructions](https://www.drupal.org/project/drupal/git-instructions)）。如果你这样做，你需要通过
    Composer 安装其依赖项，而 Drupal 有很多依赖项。
- en: To this end, you will need to have Composer available on your development environment
    and have a basic understanding of how to use it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到这个目的，你需要在你的开发环境中安装 Composer，并且对如何使用它有一个基本的了解。
- en: The API site and coding standards
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 站点和编码标准
- en: A lot of background knowledge is required for writing good Drupal code. Of course,
    the aim of a book such as this is to try to provide as much of that background
    knowledge as possible. However, self-documentation and research still remain key,
    and there are a number of resources that a Drupal developer should have on-hand.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 编写好的 Drupal 代码需要大量的背景知识。当然，这本书的目的是尽可能提供这些背景知识。然而，自我文档和调研仍然至关重要，Drupal 开发者应该手头上有一些资源。
- en: The first is the official online API documentation. Just about every function
    in Drupal is documented using inline code documentation. The Doxygen program is
    then used to extract that documentation and format it. You can access the full
    API documentation online at [http://api.drupal.org](http://api.drupal.org).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 第一份资源是官方的在线API文档。Drupal中的几乎所有功能都使用内联代码文档进行记录。然后使用Doxygen程序提取这些文档并格式化。您可以在[http://api.drupal.org](http://api.drupal.org)在线访问完整的API文档。
- en: Along with using the Drupal APIs, we strive to comply with Drupal's coding conventions.
    Best practices in software development include keeping code clean, consistent,
    and readable. One aspect of this is removing nuances in code formatting by following
    a fixed standard.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用Drupal API，我们还努力遵守Drupal的编码规范。软件开发的最佳实践包括保持代码整洁、一致和可读。这其中的一个方面是通过遵循固定标准来消除代码格式的细微差别。
- en: This is particularly important on a platform such as Drupal, where thousands
    of developers all contribute to the code. Without coding standards, the code would
    become a cluttered mishmash of styles, and valuable development time will be spent
    merely deciphering code instead of working on it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 Drupal 这样的平台上，这一点尤为重要，因为数千名开发者都在贡献代码。如果没有编码标准，代码将变成一团糟的样式混合体，宝贵的开发时间将浪费在仅仅解码代码而不是实际工作上。
- en: The Drupal site has a manual on coding standards that each Drupal developer
    needs to become familiar with ([https://www.drupal.org/docs/develop/standards/coding-standards](https://www.drupal.org/docs/develop/standards/coding-standards)).
    It won't happen overnight; you will get better with experience, but you can also
    configure your IDE to, for instance, flag any issues with your code formatting.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal网站有一份关于编码标准的指南，每个Drupal开发者都需要熟悉([https://www.drupal.org/docs/develop/standards/coding-standards](https://www.drupal.org/docs/develop/standards/coding-standards))。这不会一夜之间发生；您会随着经验而变得更好，但您也可以配置您的IDE，例如，标记任何与您的代码格式相关的问题。
- en: A third resource for developers new to Drupal 8, but who have experience with
    Drupal 7, is the change records database ([https://www.drupal.org/list-changes/drupal](https://www.drupal.org/list-changes/drupal)).
    On this page, you'll find an inventory of the most important API and usage changes
    with some handy explanations that will be extremely helpful for Drupal 7 developers
    looking up how certain functions have been changed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新接触Drupal 8但已有Drupal 7经验的开发者来说，第三个资源是变更记录数据库([https://www.drupal.org/list-changes/drupal](https://www.drupal.org/list-changes/drupal))。在这个页面上，您可以找到最重要的API和用法变更清单，以及一些实用的解释，这将极大地帮助那些查找某些函数如何变更的Drupal
    7开发者。
- en: The developer (Devel) module
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者（Devel）模块
- en: On your development environment, you can install a handy module called Devel
    ([http://drupal.org/project/devel](http://drupal.org/project/devel)), which provides
    several sophisticated tools designed to help developers create and debug Drupal
    code.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的开发环境中，您可以安装一个名为Devel([http://drupal.org/project/devel](http://drupal.org/project/devel))的实用模块，它提供了一些旨在帮助开发者创建和调试Drupal代码的复杂工具。
- en: 'The following are a few of the features of this module:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个模块的一些功能：
- en: Functions used for dumping objects and arrays into formatted Drupal output
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于将对象和数组输出到格式化Drupal输出的函数
- en: Tools for analyzing database usage and performance
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析数据库使用和性能的工具
- en: A content generator for quickly populating your site with testing content
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于快速填充测试内容的生成器
- en: Drush (the Drupal shell)
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drush（Drupal外壳）
- en: Sometimes, it is much easier to run some tasks with a single command in a console.
    Drush ([http://drupal.org/project/drush](http://drupal.org/project/drush)) provides
    a command-line Drupal interface and it can be used to execute tasks with a few
    keystrokes at the console.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在控制台中用一条命令运行一些任务要容易得多。Drush([http://drupal.org/project/drush](http://drupal.org/project/drush))提供了一个命令行Drupal界面，可以在控制台中通过几个按键执行任务。
- en: When developing, we often have to clear caches, run specific tasks, or deploy
    data to a remote server. Drush can help accomplish tasks like these. Additionally,
    we can write our own Drush commands that perform various custom tasks, for example,
    to be used in cron jobs. So having Drush installed is a must for any serious Drupal
    developer.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们经常需要清除缓存、运行特定任务或将数据部署到远程服务器。Drush可以帮助完成这些任务。此外，我们还可以编写自己的Drush命令来执行各种自定义任务，例如用于cron作业的任务。因此，对于任何严肃的Drupal开发者来说，安装Drush是必须的。
- en: Drupal Console
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Drupal控制台
- en: If Drush is a tool that has been around for many years, the Drupal Console ([https://drupalconsole.com/](https://drupalconsole.com/))
    project is new to Drupal 8\. Its purpose is similar to that of Drush, and in this
    way, it complements it, if at times even overlaps with it. However, one thing
    is clear—its scope is much broader, especially in its handy commands that generate
    boilerplate code, which can get quite lengthy.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Drush是一个存在多年的工具，那么Drupal Console ([https://drupalconsole.com/](https://drupalconsole.com/))
    项目对于Drupal 8来说则是新的。它的目的与Drush类似，并且以这种方式补充了它，有时甚至与之重叠。然而，有一点很清楚——它的范围要广泛得多，尤其是在它方便的命令生成样板代码方面，这些代码可能会相当长。
- en: Although we won't be using this tool in this book, it's recommended that you
    install it as you progress with learning Drupal 8 module development and start
    generating certain code structures faster. That being said, I advise caution in
    using it at the expense of actually understanding what the code it generates actually
    does. Always strive to understand what you are doing, and never give in to blindly
    copying and pasting code from Stack Overflow or any other resource without grasping
    fully what it does.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在这本书中不会使用这个工具，但建议你在学习Drupal 8模块开发并开始快速生成某些代码结构时安装它。但在此前提下，我建议在使用它时要谨慎，实际上要理解它生成的代码实际上做什么。始终努力理解你在做什么，并且永远不要盲目复制粘贴Stack
    Overflow或其他资源中的代码，而不完全了解它的作用。
- en: Developer settings
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者设置
- en: While doing local development, it's beneficial to (sometimes) disable things
    such as caching in order to be quicker. Drupal 8 takes caching to a whole new
    level, so many hook implementations, for example, get cached. To circumvent this,
    we can use some local settings that disable caching, prevent CSS and JavaScript
    file aggregation, and do similar things.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行本地开发时，禁用缓存（有时）以加快速度是有益的。Drupal 8将缓存提升到了一个新的水平，因此许多钩子实现都得到了缓存。为了避免这种情况，我们可以使用一些本地设置来禁用缓存，防止CSS和JavaScript文件聚合，以及做类似的事情。
- en: These settings are found inside the `example.settings.local.php` file in the
    `/sites` folder of the installation. To benefit from these, you will need to make
    sure that they are included in your main `settings.php` file (either by copying
    them inside or including a file such as this).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置位于安装目录中`/sites`文件夹内的`example.settings.local.php`文件中。为了从中受益，你需要确保它们包含在你的主要`settings.php`文件中（通过复制它们或包含一个类似此文件的方式）。
- en: A word of caution—do keep in mind that by developing with caching disabled at
    all times, you run the risk of overlooking certain aspects that won't work properly
    with caching enabled (such as invalidations). So, do try to toggle these settings
    on or off to ensure a production-like environment will work just as well as under
    your development conditions.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 警告——请务必记住，始终禁用缓存进行开发，你可能会忽略某些在启用缓存时无法正常工作的方面（例如无效化）。因此，请尝试切换这些设置以确保生产环境与开发条件下的工作效果一样好。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has been an overview of Drupal 8 for developers. We saw what technologies
    Drupal uses. We took a look at Drupal's architecture. We took a cursory glance
    at several prominent subsystems of Drupal. We also got a feel for which developer-oriented
    tools are to be used while working with Drupal.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为开发者概述了Drupal 8。我们了解了Drupal使用的技术。我们审视了Drupal的架构。我们简要地浏览了Drupal的几个突出子系统。我们还感受到了在处理Drupal时应该使用哪些面向开发者的工具。
- en: Starting with the next chapter, we will be working with code. In fact, each
    of the subsequent chapters will focus on practical aspects of working with Drupal.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 从下一章开始，我们将开始处理代码。实际上，接下来的每一章都将侧重于与Drupal一起工作的实际方面。
- en: In the next chapter, we will create our first Drupal 8 module with the obligatory
    Hello World example.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用必选的Hello World示例创建我们的第一个Drupal 8模块。
