- en: Chapter 10. Going Further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will try to cover a few things that we didn't use in this
    book. In April 2015, Phalcon released version 2.0\. You don't have to worry about
    it because it is perfectly compatible with what you have learned so far.
  prefs: []
  type: TYPE_NORMAL
- en: The big difference is that version 2.0 was completely rewritten in the Zephir
    language ([http://www.zephir-lang.com/](http://www.zephir-lang.com/)). You can
    upgrade to version 2.0.* if you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files with Phalcon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Annotation router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading files with Phalcon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Uploading files with Phalcon is a piece of cake. We just need to check whether
    the request object has files and move them to our upload directory. Let''s create
    the following controller in the `Backoffice` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `uploadAction()` method first checks whether the request object has a file
    and the request method is `POST`. We assign the path to the upload directory to
    the `$upload_dir` variable. Then we check whether this directory exists in public,
    otherwise we create it. Next, we move each uploaded file to `public/uploads/`.
    You can find the forms and the views for this example in the source code for this
    chapter. The `file` object has some built-in methods that are very helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$file->getSize();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$file->getRealType();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$file->getName()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using these methods, we can implement a simple validator for an image. Let''s
    assume that we only accept JPEG files that are no larger than 1 MB. This is what
    an improved version of the `uploadAction()` method can look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Phalcon also supports image manipulation. Unfortunately, this is not documented,
    but you can take a look at the official repository at [https://github.com/phalcon/cphalcon/tree/master/ext/phalcon/image](https://github.com/phalcon/cphalcon/tree/master/ext/phalcon/image)
    to find out the available methods, or the source code for the IDE stubs at [https://github.com/phalcon/phalcon-devtools/tree/master/ide/1.3.4/Phalcon/Image](https://github.com/phalcon/phalcon-devtools/tree/master/ide/1.3.4/Phalcon/Image).
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example of image manipulation can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can also use an external library, such as [https://github.com/avalanche123/Imagine](https://github.com/avalanche123/Imagine),
    which you will find very well documented at [http://imagine.readthedocs.org/en/latest/usage/introduction.html](http://imagine.readthedocs.org/en/latest/usage/introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Annotation router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, we used a configuration file for the router. If you come from
    Symfony, for example, you might want to use annotations. For this, you need to
    change the router information in the DI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you must modify `ArticlesController` to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about the Annotation router at [http://docs.phalconphp.com/en/latest/reference/routing.html#annotations-router](http://docs.phalconphp.com/en/latest/reference/routing.html#annotations-router).
    If you need/want, you can also develop your own router, implementing `Phalcon\Mvc\RouterInterface`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how we can upload files with Phalcon. Also, we saw how
    to use the Annotation router.
  prefs: []
  type: TYPE_NORMAL
- en: Phalcon is a completely decoupled framework. There are no real "best practices",
    so you, as a developer, can build your own conduit. I also recommend that you
    take a look at Vegas CMF for Phalcon at [https://github.com/vegas-cmf](https://github.com/vegas-cmf),
    especially if you are going to work with a big team.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading this book, and I really hope that it was helpful. You
    can now start developing your own application.
  prefs: []
  type: TYPE_NORMAL
