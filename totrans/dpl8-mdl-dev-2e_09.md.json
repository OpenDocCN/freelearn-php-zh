["```php\n$fields['name'] = BaseFieldDefinition::create('string') \n  ->setLabel(t('Name')) \n  ->setDescription(t('The name of the Product.')) \n  ->setSettings([ \n    'max_length' => 255, \n    'text_processing' => 0, \n  ]) \n  ->setDefaultValue('') \n  ->setDisplayOptions('view', [ \n    'label' => 'hidden', \n    'type' => 'string', \n    'weight' => -4, \n  ]) \n  ->setDisplayOptions('form', [ \n    'type' => 'string_textfield', \n    'weight' => -4, \n  ]) \n  ->setDisplayConfigurable('form', TRUE) \n  ->setDisplayConfigurable('view', TRUE);\n\n```", "```php\nnamespace Drupal\\license_plate\\Plugin\\Field\\FieldType; \n\nuse Drupal\\Core\\Field\\FieldItemBase; \nuse Drupal\\Core\\StringTranslation\\StringTranslationTrait; \n\n/** \n * Plugin implementation of the 'license_plate_type' field type. \n * \n * @FieldType( \n *   id = \"license_plate\", \n *   label = @Translation(\"License plate\"), \n *   description = @Translation(\"Field for creating license plates\"), \n *   default_widget = \"default_license_plate_widget\", \n *   default_formatter = \"default_license_plate_formatter\" \n * ) \n */ \nclass LicensePlateItem extends FieldItemBase { \n  use StringTranslationTrait; \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function defaultStorageSettings() { \n  return [ \n    'number_max_length' => 255, \n    'code_max_length' => 5, \n  ] + parent::defaultStorageSettings(); \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function storageSettingsForm(array &$form, FormStateInterface $form_state, $has_data) { \n  $elements = []; \n\n  $elements['number_max_length'] = [ \n    '#type' => 'number', \n    '#title' => $this->t('Plate number maximum length'), \n    '#default_value' => $this->getSetting('number_max_length'), \n    '#required' => TRUE, \n    '#description' => $this->t('Maximum length for the plate number in characters.'), \n    '#min' => 1, \n    '#disabled' => $has_data, \n  ]; \n\n  $elements['code_max_length'] = [ \n    '#type' => 'number', \n    '#title' => $this->t('Plate code maximum length'), \n    '#default_value' => $this->getSetting('code_max_length'), \n    '#required' => TRUE, \n    '#description' => $this->t('Maximum length for the plate code in characters.'), \n    '#min' => 1, \n    '#disabled' => $has_data, \n  ]; \n\n  return $elements + parent::storageSettingsForm($form, $form_state, $has_data); \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function schema(FieldStorageDefinitionInterface $field_definition) { \n  $schema = [ \n    'columns' => [ \n      'number' => [ \n        'type' => 'varchar', \n        'length' => (int) $field_definition->getSetting('number_max_length'), \n      ], \n      'code' => [ \n        'type' => 'varchar', \n        'length' => (int) $field_definition->getSetting('code_max_length'), \n      ], \n    ], \n  ]; \n\n  return $schema; \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function propertyDefinitions(FieldStorageDefinitionInterface $field_definition) { \n  $properties['number'] = DataDefinition::create('string') \n    ->setLabel(t('Plate number')); \n\n  $properties['code'] = DataDefinition::create('string') \n    ->setLabel(t('Plate code')); \n\n  return $properties; \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function getConstraints() { \n  $constraints = parent::getConstraints(); \n  $constraint_manager = \\Drupal::typedDataManager()->getValidationConstraintManager(); \n  $number_max_length = $this->getSetting('number_max_length'); \n  $code_max_length = $this->getSetting('code_max_length'); \n  $constraints[] = $constraint_manager->create('ComplexData', [ \n    'number' => [ \n      'Length' => [ \n        'max' => $number_max_length, \n        'maxMessage' => $this->t('%name: may not be longer than @max characters.', [ \n          '%name' => $this->getFieldDefinition()->getLabel() . ' (number)', \n          '@max' => $number_max_length \n        ]), \n      ], \n    ], \n    'code' => [ \n      'Length' => [ \n        'max' => $code_max_length, \n        'maxMessage' => $this->t('%name: may not be longer than @max characters.', [ \n          '%name' => $this->getFieldDefinition()->getLabel() . ' (code)', \n          '@max' => $code_max_length \n        ]), \n      ], \n    ], \n  ]); \n\n  return $constraints; \n}   \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function generateSampleValue(FieldDefinitionInterface $field_definition) { \n  $random = new Random(); \n  $values['number'] = $random->word(mt_rand(1, $field_definition->getSetting('number_max_length'))); \n  $values['code'] = $random->word(mt_rand(1, $field_definition->getSetting('code_max_length'))); \n  return $values; \n} \n\n/** \n * {@inheritdoc} \n */ \npublic function isEmpty() { \n  // We consider the field empty if either of the properties is left empty. \n  $number = $this->get('number')->getValue(); \n  $code = $this->get('code')->getValue(); \n  return $number === NULL || $number === '' || $code === NULL || $code === ''; \n} \n```", "```php\nuse Drupal\\Component\\Utility\\Random; \nuse Drupal\\Core\\Field\\FieldDefinitionInterface; \nuse Drupal\\Core\\Field\\FieldStorageDefinitionInterface; \nuse Drupal\\Core\\Form\\FormStateInterface; \nuse Drupal\\Core\\TypedData\\DataDefinition; \n```", "```php\nfield.storage_settings.license_plate_type: \n  type: mapping \n  label: 'License plate storage settings' \n  mapping: \n    number_max_length: \n      type: integer \n      label: 'Max length for the number' \n    code_max_length: \n      type: integer \n      label: 'Max length for the code' \n```", "```php\nnamespace Drupal\\license_plate\\Plugin\\Field\\FieldWidget; \n\nuse Drupal\\Core\\StringTranslation\\StringTranslationTrait; \n\n/** \n * Plugin implementation of the 'default_license_plate_widget' widget. \n * \n * @FieldWidget( \n *   id = \"default_license_plate_widget\", \n *   label = @Translation(\"Default license plate widget\"), \n *   field_types = { \n *     \"license_plate\" \n *   } \n * ) \n */ \nclass DefaultLicensePlateWidget extends WidgetBase { \n\n  use StringTranslationTrait; \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function defaultSettings() { \n  return [ \n    'number_size' => 60, \n    'code_size' => 5, \n    'fieldset_state' => 'open', \n    'placeholder' => [ \n      'number' => '', \n      'code' => '', \n    ], \n  ] + parent::defaultSettings(); \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function settingsForm(array $form, FormStateInterface $form_state) { \n  $elements = []; \n\n  $elements['number_size'] = [ \n    '#type' => 'number', \n    '#title' => $this->t('Size of plate number textfield'), \n    '#default_value' => $this->getSetting('number_size'), \n    '#required' => TRUE, \n    '#min' => 1, \n    '#max' => $this->getFieldSetting('number_max_length'), \n  ]; \n\n  $elements['code_size'] = [ \n    '#type' => 'number', \n    '#title' => $this->t('Size of plate code textfield'), \n    '#default_value' => $this->getSetting('code_size'), \n    '#required' => TRUE, \n    '#min' => 1, \n    '#max' => $this->getFieldSetting('code_max_length'), \n  ]; \n\n  $elements['fieldset_state'] = [ \n    '#type' => 'select', \n    '#title' => $this->t('Fieldset default state'), \n    '#options' => [ \n      'open' => $this->t('Open'), \n      'closed' => $this->t('Closed') \n    ], \n    '#default_value' => $this->getSetting('fieldset_state'), \n    '#description' => $this->t('The default state of the fieldset which contains the two plate fields: open or closed') \n  ]; \n\n  $elements['placeholder'] = [ \n    '#type' => 'details', \n    '#title' => $this->t('Placeholder'), \n    '#description' => $this->t('Text that will be shown inside the field until a value is entered. This hint is usually a sample value or a brief description of the expected format.'), \n  ]; \n\n  $placeholder_settings = $this->getSetting('placeholder'); \n  $elements['placeholder']['number'] = [ \n    '#type' => 'textfield', \n    '#title' => $this->t('Number field'), \n    '#default_value' => $placeholder_settings['number'], \n  ]; \n  $elements['placeholder']['code'] = [ \n    '#type' => 'textfield', \n    '#title' => $this->t('Code field'), \n    '#default_value' => $placeholder_settings['code'], \n  ]; \n\n  return $elements; \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function settingsSummary() { \n  $summary = []; \n\n  $summary[] = $this->t('License plate size: @number (for number) and @code (for code)', ['@number' => $this->getSetting('number_size'), '@code' => $this->getSetting('code_size')]); \n  $placeholder_settings = $this->getSetting('placeholder'); \n  if (!empty($placeholder_settings['number']) && !empty($placeholder_settings['code'])) { \n    $placeholder = $placeholder_settings['number'] . ' ' . $placeholder_settings['code']; \n    $summary[] = $this->t('Placeholder: @placeholder', ['@placeholder' => $placeholder]); \n  } \n  $summary[] = $this->t('Fieldset state: @state', ['@state' => $this->getSetting('fieldset_state')]); \n\n  return $summary; \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) { \n  $element['details'] = [ \n    '#type' => 'details', \n    '#title' => $element['#title'], \n    '#open' => $this->getSetting('fieldset_state') == 'open' ? TRUE : FALSE, \n    '#description' => $element['#description'], \n  ] + $element; \n\n  $placeholder_settings = $this->getSetting('placeholder'); \n  $element['details']['code'] = [ \n    '#type' => 'textfield', \n    '#title' => $this->t('Plate code'), \n    '#default_value' => isset($items[$delta]->code) ? $items[$delta]->code : NULL, \n    '#size' => $this->getSetting('code_size'), \n    '#placeholder' => $placeholder_settings['code'], \n    '#maxlength' => $this->getFieldSetting('code_max_length'), \n    '#description' => '', \n    '#required' => $element['#required'], \n  ]; \n\n  $element['details']['number'] = [ \n    '#type' => 'textfield', \n    '#title' => $this->t('Plate number'), \n    '#default_value' => isset($items[$delta]->number) ? $items[$delta]->number : NULL, \n    '#size' => $this->getSetting('number_size'), \n    '#placeholder' => $placeholder_settings['number'], \n    '#maxlength' => $this->getFieldSetting('number_max_length'), \n    '#description' => '', \n    '#required' => $element['#required'], \n  ]; \n\n  return $element; \n}  \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function massageFormValues(array $values, array $form, FormStateInterface $form_state) { \n  foreach ($values as &$value) { \n    $value['number'] = $value['details']['number']; \n    $value['code'] = $value['details']['code']; \n    unset($value['details']); \n  } \n\n  return $values; \n}  \n```", "```php\n$values = [ \n  'number' => 'My number', \n  'code' => 'My code' \n];   \n```", "```php\n$node->set('field_license_plate', ['code' => 'NY', 'number' => '63676']);  \n```", "```php\nuse Drupal\\Core\\Field\\FieldItemListInterface; \nuse Drupal\\Core\\Form\\FormStateInterface;  \n```", "```php\nfield.widget.settings.default_license_plate_widget: \n  type: mapping \n  label: 'Default license plate widget settings' \n  mapping: \n    number_size: \n      type: integer \n      label: 'Number size' \n    code_size: \n      type: integer \n      label: 'Code size' \n    fieldset_state: \n      type: string \n      label: 'The state of the fieldset which contains the two fields: open/closed' \n    placeholder: \n      type: mapping \n      label: 'The placeholders for the two fields' \n      mapping: \n        number: \n          type: string \n          label: 'The placeholder for the number field' \n        code: \n          type: string \n          label: 'The placeholder for the code field' \n```", "```php\n<span class=\"license-plate—code\">{{ code }}</span> <span class=\"license-plate—number\">{{ number }}</span>  \n```", "```php\n<span class=\"license-plate\">{{ code }} {{ number }}</span>  \n```", "```php\nnamespace Drupal\\license_plate\\Plugin\\Field\\FieldFormatter; \n\nuse Drupal\\Core\\Field\\FormatterBase; \nuse Drupal\\Core\\StringTranslation\\StringTranslationTrait; \n\n/** \n * Plugin implementation of the 'default_license_plate_formatter' formatter. \n * \n * @FieldFormatter( \n *   id = \"default_license_plate_formatter\", \n *   label = @Translation(\"Default license plate formatter\"), \n *   field_types = { \n *     \"license_plate\" \n *   } \n * ) \n */ \nclass DefaultLicensePlateFormatter extends FormatterBase { \n\n  use StringTranslationTrait; \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function defaultSettings() { \n  return [ \n    'concatenated' => 1, \n  ] + parent::defaultSettings(); \n}  \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function settingsForm(array $form, FormStateInterface $form_state) { \n  return [ \n    'concatenated' => [ \n      '#type' => 'checkbox', \n      '#title' => $this->t('Concatenated'), \n      '#description' => $this->t('Whether to concatenate the code and number into a single string separated by a space. Otherwise the two are broken up into separate span tags.'), \n      '#default_value' => $this->getSetting('concatenated'), \n    ] \n  ] + parent::settingsForm($form, $form_state); \n} \n```", "```php\n /** \n   * {@inheritdoc} \n   */ \n  public function settingsSummary() { \n    $summary = []; \n    $summary[] = t('Concatenated: @value', ['@value' => (bool) $this->getSetting('concatenated') ? 'Yes' : 'No']); \n    return $summary; \n  } \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function viewElements(FieldItemListInterface $items, $langcode) { \n  $elements = []; \n\n  foreach ($items as $delta => $item) { \n    $elements[$delta] = $this->viewValue($item); \n  } \n\n  return $elements; \n} \n\n/** \n * Generate the output appropriate for one field item. \n * \n * @param \\Drupal\\Core\\Field\\FieldItemInterface $item \n *   One field item. \n * \n * @return array \n */ \nprotected function viewValue(FieldItemInterface $item) { \n  $code = $item->get('code')->getValue(); \n  $number = $item->get('number')->getValue(); \n  return [ \n    '#theme' => 'license_plate', \n    '#code' => $code, \n    '#number' => $number, \n    '#concatenated' => $this->getSetting('concatenated') \n  ]; \n} \n```", "```php\n$properties['number'] = DataDefinition::create('string') \n  ->setLabel(t('Plate number'));  \n```", "```php\nreturn [ \n  '#markup' => $code . ' ' . $number, \n];  \n```", "```php\n/** \n * Implements hook_theme(). \n */ \nfunction license_plate_theme($existing, $type, $theme, $path) { \n  return [ \n    'license_plate' => [ \n      'variables' => ['code' => NULL, 'number' => NULL, 'concatenated' => TRUE], \n    ], \n  ]; \n} \n```", "```php\n{% if concatenated %} \n  <span class=\"license-plate\">{{ code }} {{ number }}</span> \n{% else %} \n  <span class=\"license-plate—code\">{{ code }}</span> <span class=\"license-plate—number\">{{ number }}</span> \n{% endif %} \n```", "```php\nfield.formatter.settings.default_license_plate_formatter: \n  type: mapping \n  label: 'Default license plate formatter settings' \n  mapping: \n    concatenated: \n      type: boolean \n      label: 'Whether to concatenate the two fields into one single span tag' \n```", "```php\nuse Drupal\\Core\\Field\\FieldItemInterface; \nuse Drupal\\Core\\Field\\FieldItemListInterface; \nuse Drupal\\Core\\Form\\FormStateInterface;  \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function defaultFieldSettings() { \n  return [ \n      'codes' => '', \n    ] + parent::defaultFieldSettings(); \n} \n```", "```php\n/**\n * {@inheritdoc}\n */\npublic function fieldSettingsForm(array $form, FormStateInterface $form_state) {\n  $element = [];\n\n  $element['codes'] = [\n    '#title' => $this->t('License plate codes'),\n    '#type' => 'textarea',\n    '#default_value' => $this->getSetting('codes'),\n    '#description' => t('If you want the field to be have a select list with license plate codes instead of a textfield, please provide the available codes. Each code on a new line.')\n  ];\n\n  return $element;\n}\n```", "```php\nfield.field_settings.license_plate_type: \n  type: mapping \n  label: 'License plate field settings' \n  mapping: \n    codes: \n      type: string \n      label: 'Codes'  \n```", "```php\n$this->addCodeField($element, $items, $delta, $placeholder_settings);  \n```", "```php\n/** \n * Adds the license plate code field to the form element. \n * \n * @param $element \n * @param \\Drupal\\Core\\Field\\FieldItemListInterface $items \n * @param $delta \n * @param $placeholder_settings \n */ \nprotected function addCodeField(&$element, FieldItemListInterface $items, $delta, $placeholder_settings) { \n  $element['details']['code'] = [ \n    '#title' => t('Plate code'), \n    '#default_value' => isset($items[$delta]->code) ? $items[$delta]->code : NULL, \n    '#description' => '', \n    '#required' => $element['#required'], \n  ]; \n\n  $codes = $this->getFieldSetting('codes'); \n  if (!$codes) { \n    $element['details']['code'] += [ \n      '#type' => 'textfield', \n      '#placeholder' => $placeholder_settings['code'], \n      '#maxlength' => $this->getFieldSetting('code_max_length'), \n      '#size' => $this->getSetting('code_size'), \n    ]; \n    return; \n  } \n\n  $codes = explode(\"\\r\\n\", $codes); \n  $element['details']['code'] += [ \n    '#type' => 'select', \n    '#options' => array_combine($codes, $codes), \n  ]; \n} \n```", "```php\n$fields['plate'] = BaseFieldDefinition::create('license_plate') \n  ->setLabel(t('License plate')) \n  ->setDescription(t('Please provide your license plate number.')) \n  ->setSettings([ \n    'number_max_length' => 255, \n    'code_max_length' => 5, \n    'codes' => implode(\"\\r\\n\", ['NY', 'FL', 'IL']), \n  ]) \n  ->setDisplayOptions('view', [ \n    'label' => 'above', \n    'type' => 'default_license_plate_formatter', \n    'weight' => 5, \n    'settings' => [ \n      'concatenated' => 0, \n    ] \n  ]) \n  ->setDisplayOptions('form', [ \n    'type' => 'default_license_plate_widget', \n    'weight' => 5, \n    'settings' => [ \n      'number_size' => 60, \n      'code_size' => 5, \n      'fieldset_state' => 'open', \n      'placeholder' => [ \n        'number' => '', \n        'code' => '', \n      ], \n    ] \n  ]) \n  ->setDisplayConfigurable('form', TRUE) \n  ->setDisplayConfigurable('view', TRUE); \n```"]