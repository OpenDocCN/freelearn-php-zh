- en: Chapter 8. Working with Themes and Add-ons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including the concrete5 required scripts and styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining editable content areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating page type templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using elements for repeated portions of HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing system pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom add-on package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the package controller to execute custom code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 is a little different from other content management systems. Of course,
    it has world-class inline editing capabilities and a powerful development framework,
    but it also is incredibly easy to create custom themes and add-ons. Developers
    and designers can even sell their creations in the concrete5 marketplace. In this
    chapter, we will learn how to create a very basic theme and also how to create
    a simple add-on package. Though each of these recipes has its own purpose, it
    might be useful for beginners to run through the recipes in order to make sure
    all of the required knowledge is attained.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Themes are an essential part of any content management system, and for good
    reason. Nobody wants their site to look just like all of the other websites out
    there. concrete5 comes with a handful of decent-looking themes, but many times
    you or your clients will want a custom theme developed. The subject of creating
    themes can actually become quite lengthy and there have been entire books dedicated
    to this (the book *Creating concrete5 Themes*, by Remo Laubacher, Packt Publishing
    is highly recommended). In this recipe, we will only demonstrate the minimum requirements
    to create a custom theme in concrete5.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The complete basic theme code for this recipe is available for free on the website
    for this book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating a custom theme are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory in `/themes` called `basic_theme`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file in `basic_theme` called `description.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the title of the theme on the first line of the description file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Place a short description of the theme on the second line of the text file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the `description.txt` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file in `/themes/basic_theme` called `default.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following basic HTML code in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `default.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `view.php` and keep it empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the themes area of your site's dashboard at `http://example.com/dashboard/pages/themes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Install** button of your new theme. The page will look like the
    following screenshot:![How to do it...](img/4548OS_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Activate** and then on **OK** to apply the theme to all of the pages
    in your site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You website should now look like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/4548OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 only requires that the files `description.txt`, `default.php`, and
    `view.php` need to exist in a theme. The file `description.txt` contains the themes
    title and description.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obviously this would be unusable for real-life use. There's nowhere to put content!
    Where's the concrete5 edit bar? The next few recipes will expand on this simple
    theme to make it a real concrete5 theme.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Including the concrete5 required scripts and styles* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using elements for repeated portions of HTML* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining editable content areas* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including the concrete5 required scripts and styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noticed that after creating the extremely simple theme in the previous
    recipe, the concrete5 edit bar that normally appears at the top of the screen,
    has gone away. This is because the theme did not include the required collection
    of JavaScript and CSS files, that concrete5 needs to do its job. In this recipe,
    we will add the necessary code to include those components in our simple theme.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will build upon the code of the simple theme from the previous recipe.
    Feel free to download the source code from the book's website to catch up, or
    adapt this recipe to fit your own theme.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for including the concrete5 required scripts and styles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `/themes/basic_theme/default.php` file where our theme's HTML was stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `<title>` tag, as we will not need it any longer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just before the closing `</head>` tag, add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Just before the closing `</body>` tag, add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By calling `Loader::element`, we are actually injecting a partial template of
    PHP code into our theme. This code contains JavaScript and CSS files, as well
    as additional markup.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the edit bar visible, there are still no ways to add content
    to our simple theme. The next recipe will show how to add an editable area to
    the theme.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom theme* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining editable content areas* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining editable content areas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One great feature of concrete5's theme conventions is the ability to specify
    exactly where site editors are allowed to edit content. This prevents users from
    messing up the design and structure of the site, but still enables them to make
    edits to all the necessary content. In this recipe, we will add an editable area
    to the simple theme that we created earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will expand on the theme created in the previous recipes. If you would like
    to catch up, the source code for this chapter is available for free on the book's
    website. You could also adapt this recipe to your own theme, if you'd like.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for defining editable content areas are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/themes/basic_theme/default.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the current `<h1>` tag with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The screens will appear as shown in the following two screenshots:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/4548OS_08_03.jpg)![How to do it...](img/4548OS_08_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The snippet of code that we added in this recipe essentially tells concrete5
    that this is the place where blocks can be added.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The snippet defining content areas can be placed anywhere in your site's HTML
    between the `<body>` tags. Imagine adding an area for the sidebar, and another
    area for the page's header. The only thing to note is that the name of the area
    (in this example, `content`) needs to be different in each place where it is used
    on a page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom theme* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including the required concrete5 scripts and styles* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating page type templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 allows designers to create unlimited page templates for the pages
    in the website. These templates allow for different layouts, such as a sidebar,
    or may be a three-column layout. In this recipe, we will add a new page type template
    that shows a footer with a copyright statement to our existing basic theme.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be building upon the basic theme that was created in the first recipe
    of this chapter. The code for this chapter is freely available on the book's website,
    so feel free to download that for a starting point. Or, as always, you can adapt
    the recipe to fit your own website and theme's needs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating page type templates are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file in your theme directory (/`themes/basic_theme` for our current
    example) called `with_footer.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file and paste the contents of `default.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a footer to the page, displaying the copyright symbol, the current year,
    and the copyright holder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will use this template for all page types that have a handle of `with_footer`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the page type has not been added through the concrete5 dashboard interface,
    this template cannot be used (page types can be added by visiting `/dashboard/pages/types`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we have a new template, but we have violated one of the most important
    rules of programming: **don''t repeat yourself** (**DRY**). We copied the complete
    HTML from the default template and pasted it into the new one. If something changes
    in the template and we want the change to be reflected on both of these templates,
    the developer would need to remember to update both the locations. The next recipe
    will cover the solution to this problem.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom theme* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using elements for repeating portions of HTML* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using elements for repeated portions of HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the fundamental rules for writing good code is summed up in the acronym,
    DRY. When creating themes, developers and designers will recognize that there
    are certain bits of code that get repeated on every page, such as a header or
    footer. In this recipe, we will learn how to use elements to safely repeat code
    between pages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are continuing to work on the very basic theme that was created in the first
    recipe of this chapter. The code for this chapter is available for free on the
    book's website if you'd like to use that as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for using elements for repeated portions of HTML are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory in your `themes` folder called `elements`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file in `elements/` called `header.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following code into `header.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file in `elements/` called `footer.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following code into `footer.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `default.php` from the `themes` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the header and footer code with the following code snippet, so that
    the entire file looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat the preceding steps for any page type templates that have been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By storing the header and footer HTML in separate files, we can then tell concrete5
    to include them in all of the templates that use them. This allows us to make
    edits to these elements in only one place and keep our template code clean.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom theme* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing system pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 makes it easy to create themes, but out of the box it does not apply
    themes to system pages, such as the login page. For most websites, this is fine,
    since only site editors will see the login page. On sites where site readers can
    log in and leave comments, or post in forums, it would be nice to have the login
    page match everything else. In this recipe, we will make the login page use the
    same theme as the rest of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue working with the custom theme that we built at the beginning
    of this chapter. As always, the code for this recipe is available to download
    for free from the website for this book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for customizing system pages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_theme_paths.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code in the `site_theme_paths.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `/themes/basic_theme/view.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code in `view.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 comes with the `site_theme_paths.php` configuration file, but all
    of the configuration settings are commented out by default. This file lets you
    set the theme of any page on the site, and in this example, we tell it to use
    our basic theme for the login page.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also notice that the `view.php` page was empty in our theme up until
    this point. This file is the template that concrete5 uses for single pages that
    do not have their own template defined. The `$innerContent` variable contains
    all of the PHP and HTML for the single page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom theme* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom add-on package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 allows developers to create modular components that can be reused
    and installed on any concrete5 website. These modules are called add-ons and are
    similar to plugins and modules in other content management systems. In this recipe,
    we will create a basic add-on that installs a single page to the concrete5 dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The complete code for this recipe is available for free from the book's website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating a custom add-on package are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory in `/packages` called `basic_addon`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `controller.php` in `/packages/basic_addon`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the package class in `controller.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the member variables to the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the function to return the package's name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a function to return the package's description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Overwrite the `install` function, telling the package controller to also install
    a new single page on the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a directory in `basic_addon/` called `single_pages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory called `dashboard` in `single_pages/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `hello.php` in `/packages/basic_addon/single_pages/dashboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the following code in `hello.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In your web browser, visit the add-ons installation page in concrete5 at `/dashboard/extend/install/`.
    The page will look like the following screenshot:![How to do it...](img/4548OS_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Install** button by the new add-on that you have created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit `/dashboard/hello` in your web browser to see the single page that got
    created by the package installer. The page will look like the following screenshot:![How
    to do it...](img/4548OS_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only required file in a package is `controller.php`. This file contains
    a class that provides methods for concrete5 to get the name and description of
    the add-on. We also modify the package installer by having it also add a new single
    page to the dashboard. By visiting `http://example.com/dashboard/hello`, we will
    see the HTML from the single page that we created.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The structure of a package directory is very similar to the overall directory
    of a normal concrete5 site. Since we wanted to bundle a single page with our package,
    we simply had to create it and store it in a directory much like we would normally
    in concrete5\. You can see how a package would be structured if it had to contain
    blocks, controllers, helpers, or any other type of file that concrete5 uses.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the package controller to execute custom code* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the package controller to execute custom code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A unique and advanced feature of the package controller is the ability to run
    code automatically whenever a page is accessed. This can give add-on developers
    tremendous potential to tap into system events, hook into site HTTP requests,
    and more. In this recipe, we will show how easy it is to automatically run code
    from our package whenever a page is visited by redirecting all requests containing
    a special parameter to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the simple add-on package that was created in the previous recipe
    for this example. The code for this recipe and all others is available for download
    on the book's website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for using the package controller to execute custom code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the package controller file, located at `/packages/basic_addon/controller.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a function called `on_start` that will redirect anyone that enters the parameter
    `redirect_me` in the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test it out by adding `?redirect_me` to the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 automatically runs the function `on_start` whenever a page is loaded,
    so any code that you place there in your package will get automatically run. Our
    example in this case is pretty useless, but you can see where the opportunities
    are nearly endless for developers (automatically parsing page requests, intercepting
    form submissions, adding CSS or JavaScript to pages, and more).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom add-on package* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
