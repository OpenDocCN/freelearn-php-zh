- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up and Running with Drupal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will walk through how to create a new Drupal site and the
    system requirements for running Drupal. We’ll also walk through running the Drupal
    site locally using modern local development tools based on Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we’ll cover adding and managing module and theme extensions with the site
    running, as well as managing your Drupal code base in Git version control and
    finally deploying that Drupal site. By the end of this chapter, you will know
    how to create a Drupal site, run it locally on your machine, and add modules and
    themes to that Drupal site. You will also understand how to manage the Drupal
    code base in version control and deploy the Drupal site. This chapter will lay
    the foundations for working with the rest of the chapters in this book, and experimenting
    on your own with Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Drupal code base for a new site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a Drupal site locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Drush to manage Drupal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and managing modules and themes with Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using version control with your Drupal code base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Successfully deploying your Drupal site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will help you start working with Drupal locally on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP 8.1 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker and DDEV installed on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composer, the PHP package management tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker, for running local environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An editor, such as Visual Studio Code or PhpStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Composer documentation to learn how to install Composer globally on
    your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux/Unix/macOS: [https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows: [https://getcomposer.org/doc/00-intro.md#installation-windows](https://getcomposer.org/doc/00-intro.md#installation-windows
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Drupal site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new Drupal site using the **Composer** project template and run the
    **Quick Start** command to create a preview site. The instructions provided in
    this section are based on the recommended installation instructions at [https://www.drupal.org/download](https://www.drupal.org/download).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Quick Start** command uses SQLite as the database for Drupal. With most
    operating system PHP installations, this is readily available and installed. If
    SQLite is not available, the installation script will error. If this happens,
    that is okay! In *Running your Drupal site locally*, we will run Drupal using
    a local development environment with a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal also requires several PHP extensions. These are typically available
    with most PHP distributions. The up-to-date list of required PHP extensions can
    be found online: [https://www.drupal.org/docs/system-requirements/php-requirements#extensions](https://www.drupal.org/docs/system-requirements/php-requirements#extensions).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal and navigate where you would like to create your new Drupal
    site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `create-project` command to create a new Drupal site in the `mysite`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If your PHP installation is missing any required extensions for Drupal, this
    command will fail. The `Composer` command output will explain what extensions
    are missing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move into the newly created `mysite` directory, which contains the Drupal site’s
    code base:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the **Quick Start** command to install a sample Drupal site using the **Umami**
    **Maganize** demo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the installation script has finished, your browser will open your Drupal
    site. If your browser does not open, a login link will be printed in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Output from running the Quick Start command](img/Figure_1.1_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Output from running the Quick Start command
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl* + *C* to exit the **Quick Start** server at any time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open `web/sites/default/settings.php` in your editor. We will modify this
    file to modify the configuration synchronization directory and add local setting
    overrides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the configuration synchronization directory (where Drupal’s site configuration
    can be exported) to `../config`. The path is relative to the web directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The installer from the **Quick Start** command will have generated a default
    value. At the bottom of your file, find a line similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This ensures your exported Drupal configuration is not within the `web` document
    root folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of your file, add the following snippet of code to allow the
    creation of a `settings.local.php` file to override the settings in the `settings.php`
    file in different environments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This checks whether there is also a `settings.local.php` file alongside your
    `settings.php` file and includes it if it exists. By using local settings files,
    you can add sensible defaults to your Drupal settings file but have per-environment
    configurations and database connection settings.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have set up a Drupal code base and a sample development site
    that we will use throughout this chapter and the rest of this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Composer allows developers to create new projects from existing packages. The
    Drupal community provides the `drupal/recommended-project` package as scaffolding
    for a Drupal site. When running `create-project`, it copies the `drupal/recommended-project`
    package and installs our dependencies for us, making our copy of the package to
    use on our own.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal has a configuration management system that allows exporting and importing
    configuration. This allows you to make configuration changes locally and push
    them up into production, without having to make changes on your live site. That
    is what `config_sync_directory` is for; it will be covered in more detail in the
    *Managing your Drupal code with version control* and *Successfully deploying your
    Drupal* *site* recipes.
  prefs: []
  type: TYPE_NORMAL
- en: The **Quick Start** command was added in **Drupal 8.6** to create a development
    environment for Drupal for new developers quickly. It installs Drupal programmatically,
    starts PHP’s built-in web server, and uses SQLite for database access.
  prefs: []
  type: TYPE_NORMAL
- en: The **Quick Start** command is also re-entrant. If you rerun the command, it
    will use the existing SQLite database file. This allows you to run a development
    environment with one command quickly. We will cover running a full-fledged environment
    in the *Running your Drupal site* *locally* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While `drupal/recommended-project` is the primary way to create a new Drupal
    site, there are other options. Other project templates include a community alternative
    and various distribution templates, and various agencies that work with Drupal
    have provided their own (internally and publicly.)
  prefs: []
  type: TYPE_NORMAL
- en: Community Composer project template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before `drupal/recommended project`, Drupal did not have a standard Composer
    project template. The community drove this initiative forward and still maintains
    a more opinionated Drupal project template. The project can be found at [https://github.com/drupal-composer/drupal-project](https://github.com/drupal-composer/drupal-project).
  prefs: []
  type: TYPE_NORMAL
- en: 'The project adds the following enhancements:'
  prefs: []
  type: TYPE_NORMAL
- en: Support for environment files and environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patching support for dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drush (while a de facto tool, it is not provided by the recommended project
    template)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drupal distribution templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Drupal has a concept of installation profiles, often referred to as distributions.
    They are referred to as distributions because they provide an opinionated build
    of Drupal. There are several distribution projects templates available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open Social** is a community engagement software built on top of Drupal:
    [https://github.com/goalgorilla/social_template/](https://github.com/goalgorilla/social_template/
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commerce Kickstart**, a preconfigured eCommerce store built on top of Drupal
    with Commerce: [https://github.com/centarro/commerce-kickstart-project](https://github.com/centarro/commerce-kickstart-project
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contenta CMS**, an API-first decoupled CMS built on top of Drupal: [https://github.com/contentacms/contenta_jsonapi_project](https://github.com/contentacms/contenta_jsonapi_project
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Composer documentation: [https://getcomposer.org/doc/](https://getcomposer.org/doc/
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your Drupal site locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with Drupal, you need to have a local development environment. The local
    development environment should be able to help you mimic your production environments,
    such as having access to specific PHP versions, database versions, Redis, and
    other services.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we will be using **Docker**. We will not be interacting directly
    with Docker but through a tool called **DDEV**. DDEV is an abstraction on top
    of Docker that provides sensible defaults for running a Drupal site locally yet
    the flexibility to extend and add additional services.
  prefs: []
  type: TYPE_NORMAL
- en: DDEV is similar to **Laravel’s Sail** but supports various PHP projects that
    originated from the Drupal community.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to install Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: 'macOS and Windows require the use of Docker Desktop since containers do not
    run natively on either operating system: [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux runs Docker natively; it is best to see DDEV’s curated installation steps:
    [https://ddev.readthedocs.io/en/stable/users/docker_installation/#linux-installation-docker-and-docker-compose](https://ddev.readthedocs.io/en/stable/users/docker_installation/#linux-installation-docker-and-docker-compose
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, you can install DDEV:'
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS and Linux**: Installation is done through the Homebrew package manager:
    [https://ddev.readthedocs.io/en/stable/#homebrew-macoslinux](https://ddev.readthedocs.io/en/stable/#homebrew-macoslinux
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**: Windows requires WSL2 and has detailed instructions: [https://ddev.readthedocs.io/en/stable/#installation-or-upgrade-windows-wsl2](https://ddev.readthedocs.io/en/stable/#installation-or-upgrade-windows-wsl2
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The DDEV installation guide covers how to install Docker and itself for each
    operating system in depth: [https://ddev.readthedocs.io/en/stable/#installation](https://ddev.readthedocs.io/en/stable/#installation).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure Docker is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal and navigate to your Drupal code base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `config` command to begin the setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first prompt is to choose a project name. Use the default name, inferred
    from the current directory name, or provide a custom one. Press *Enter* to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the document root for the Drupal site. DDEV’s default value is automatically
    detected. Press *Enter* to use the default value of `web`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next prompt is for the project type. DDEV provides platform detection and
    defaults to `drupal10`. Press *Enter* to select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The DDEV setup is now complete! We can start the local environment by using
    the **Start** command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the Drupal site with the `launch` command, which will bring us to the
    interactive site installer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finish installing Drupal by pressing **Save and continue** on the first two
    forms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation has finished, fill out the site’s configuration form and
    press **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your Drupal site is now running!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DDEV allows you to build a customizable local development environment without
    having to be a Docker pro but still allows you to leverage Docker specifics. DDEV
    is a layer above the Docker Compose tool and is used to run multi-container Docker
    applications. It generates the Compose file and runs `docker-compose` commands
    for you. This makes it perfect for sharing with teams, as it takes away any intricacies
    of Docker.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration for your DDEV site is located in the `config.yaml` file in
    the `.ddev` directory of your Drupal directory. The PHP version, database type,
    version, and more can be customized in this configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'When running Composer or other commands, you will need to SSH into the web
    application container. This can be achieved with the `ssh` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By SSHing into the web application, you can run commands directly in your local
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multiple options can be changed with DDEV and other tools that are similar to
    DDEV.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the site’s PHP version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To modify the PHP version used on your project, edit `.ddev/config.yaml` and
    change the `php_version` property. The **Drupal 10** project type defaults to
    **PHP 8.1**, which is the minimum required PHP version for Drupal. But you may
    choose to use newer PHP versions as they are released and supported by Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the database version or type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'DDEV supports MySQL and MariaDB databases, but it does not support Postgres
    (although it is supported by Drupal). By default, DDEV uses **MariaDB 10.3**:'
  prefs: []
  type: TYPE_NORMAL
- en: To change your MariaDB version, edit `.ddev/config.yaml` and change the `mariadb_version`
    property to your desired version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use MySQL instead of MariaDB, edit `.ddev/config.yaml` and replace the `mariadb_version`
    property with `mysql_version: "8.0"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot change database types or downgrade database versions once there is
    data in the database. You must first delete the project’s database using `ddev
    delete`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the online documentation to learn what versions of each database type
    are supported: [https://ddev.readthedocs.io/en/stable/users/extend/database_types/](https://ddev.readthedocs.io/en/stable/users/extend/database_types/).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DDEV allows you to add custom services by writing Docker Compose files in the
    `.ddev` directory. DDEV will aggregate all Docker Compose files in the `.ddev`
    directory that follow the naming convention of `docker-compose.*.yml`, where `*`
    is a unique word.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to add Redis, we would create a file called `docker-compose.redis.yaml`
    in the `.ddev` directory. It would contain the following Docker Compose manifest,
    which defines the Redis service and links it to the web application service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The documentation for additional services can be found at [https://ddev.readthedocs.io/en/stable/users/extend/additional-services/](https://ddev.readthedocs.io/en/stable/users/extend/additional-services/).
  prefs: []
  type: TYPE_NORMAL
- en: Running Composer with DDEV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DDEV allows you to run Composer inside of the web application container. This
    is beneficial if you have a different version of PHP on your host machine or have
    missing extensions required by the project that exists in the web application
    container.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run Composer commands, use `ddev composer`. For example, the following would
    add a new module to a Drupal site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can provide any Composer commands and arguments.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Awesome DDEV**: A collection of blogs, tutorials, tips, and tricks for DDEV:
    [https://github.com/drud/awesome-ddev](https://github.com/drud/awesome-ddev )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DDEV Config**: A collection of contributed recipes and snippets for customizing
    DDEV sites: [https://github.com/drud/ddev-contrib](https://github.com/drud/ddev-contrib
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Official local development** **guide**: [https://www.drupal.org/docs/official_docs/en/_local_development_guide.html](https://www.drupal.org/docs/official_docs/en/_local_development_guide.html
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Drush command-line tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Drush** is a command-line tool that interacts with Drupal to perform actions
    such as installing Drupal or performing various maintenance tasks. In this recipe,
    we will add Drush to our Drupal site and use it to install the Drupal site.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This example uses commands that will cause data loss if you have an existing
    installed site.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using DDEV, you must SSH into the web application container using `ddev
    ssh` to interact with Drush.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal and navigate to your Drupal code base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `require` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `site:install` command to install Drupal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the installation has finished, use the `user:login` command to generate
    a one-time login link to access the Drupal site. Your browser should automatically
    open if you do not click the returned link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `pm:enable` command. Press *Enter* to confirm this to install **Layout
    Builder** and its dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild Drupal’s caches using the `cache:rebuild` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Drush** has been part of the Drupal community since **Drupal 4.7** and has
    become a must-have tool for every Drupal developer. The project can bootstrap
    Drupal on the command line and perform interactions with a site.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drush has a plethora of commands, which can be found by running the `list`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Modules can provide their own Drush commands as well. As you add modules to
    your Drupal sites, new commands may be available. In the *Extending Drupal with
    custom code* recipe, we will cover creating your own Drush command.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a plethora of Drush commands and ways that Drush can make working with
    your Drupal site much easier.
  prefs: []
  type: TYPE_NORMAL
- en: Running Drush with DDEV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'DDEV provides a way to run Drush without using the `ssh` command to SSH into
    the web application container, just like it does for Composer. To run Drush commands
    with DDEV, use `ddev drush`. For example, the following command would generate
    a link to log into your Drupal site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You can provide any Drush command and arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Checking whether there are pending security updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is important to keep your installed modules and themes up to date, especially
    if there are security releases. Drush provides the `pm:security` command, which
    checks for any pending security releases for installed modules or themes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Exporting or importing a SQL file to your Drupal database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Drush has a variety of SQL commands for interacting with your database directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sql:dump` command allows you to create a database dump that can be imported
    into another database. By default, the SQL statements are printed unless the `--result-file`
    option is passed. The file path is relative to Drupal’s document root (the `web`
    directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`sql:cli` allows you to execute SQL statements, including importing a SQL dump
    file. For example, you can use this command to import a SQL dump from your production
    Drupal database into your local development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drush home page: [https://www.drush.org/latest/](https://www.drush.org/latest/
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and managing module and theme extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal is extremely versatile due to its composable design and its large ecosystem
    of contributed modules and themes. Composer is used for installing and upgrading
    extensions on your Drupal site using its `require` and `update` commands. In this
    recipe, we will add the popular **Pathauto** module ([https://www.drupal.org/project/pathauto](https://www.drupal.org/project/pathauto))
    and the **Barrio** theme ([https://www.drupal.org/project/bootstrap_barrio](https://www.drupal.org/project/bootstrap_barrio)),
    a Bootstrap 5 theme.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal and navigate to your Drupal code base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we will add the `Pathauto` module using the `require` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Composer will output some data as it begins resolving the `Pathauto` package.
    You will notice that the module dependencies for `Pathauto` were also downloaded:
    `Token` and `Chaos Tools`.'
  prefs: []
  type: TYPE_NORMAL
- en: The modules will be installed into the `web/modules/contrib` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the Barrio theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will download the Barrio theme and place it into the `web/themes/contrib`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will install the `Pathauto` module using the Drush `pm:enable` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This Drush command will prompt us to install `Pathauto` with the required module
    dependencies (`Chaos Tools` and `Token`) as well, with a default option of `yes`.
    Hit *Enter* to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command will return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will enable the Barrio theme using the Drush `theme:enable` command
    and set it as the default theme using the `config:set` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This only enables the theme; it does not make it the default theme used by
    your Drupal site. To make it the default theme, we need to modify the site’s configuration
    with the `config:set` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This modifies the `system.theme` config so that it uses Barrio as the `default`
    theme setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume there was a new release of `Pathauto` that we needed to update.
    We can use the `update` command to update our package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will update the `Pathauto` module to the next version. However, it will
    not update its dependencies – that is, `Chaos Tools` or `Token`. Using the `--with-dependencies`
    option ensures direct dependencies for `Pathauto` are also updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will cover removing modules that we have added to the Drupal site.
    First, we must *uninstall* the module from Drupal before we remove it from the
    code base:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice how `Chaos Tools` and `Token` are added as arguments? These modules were
    added to our code base and installed as dependencies for `Pathauto`. We need to
    uninstall these modules as well before removing `Pathauto`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can use the `remove` command to remove `Pathauto` from the code base:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, Composer can only add packages available on `drupal/` namespace.
    The Drupal project template adds the Composer template’s `composer.json` so that
    these packages become available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Drupal follows a pattern of having projects downloaded from `Drupal.org` go
    into a `contrib` directory and `custom` code go into a custom directory.
  prefs: []
  type: TYPE_NORMAL
- en: Once modules and themes have been added to a Drupal code base, they still need
    to be installed. Having the code present does not make them immediately activated.
    This also means that removing modules from your code base must be a two-part process.
    Drupal will throw errors if you remove a module’s code before it is uninstalled.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal is a project that was created before Composer and only recently became
    **Composer** compatible halfway through the Drupal 8 life cycle. There are some
    additional items to cover.
  prefs: []
  type: TYPE_NORMAL
- en: Composer Library Installer and Drupal extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Composer will install packages to the `vendor` directory by default. The **Composer
    Library Installer** is a package that frameworks can use to modify the installation
    paths of specific package types.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `composer/installers` package is added as part of Drupal’s project template
    and supports the following package types and their destinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`drupal-core`: The package type used for Drupal’s core code base. It is installed
    in the `web/core` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drupal-module`: The package type used for modules. It is installed in the
    `web/modules/contrib` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drupal-theme`: The package type used for themes. It is installed in the `web/themes
    /``contrib` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drupal-profile`: The package type used for profiles. It is installed in the
    `web/modules/profiles` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drupal-library`: A special package type used to help download frontend libraries
    to the `web/libraries` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These mappings can be found in the `composer.json` file for your Drupal project.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Drupal core
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updating the core Drupal code base is a bit more involved than updating the
    `drupal/core-recommended` package. As stated, Drupal has recently added support
    for true Composer build support. There is also the `drupal/core-composer-scaffold`
    package, which copies over the required files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Composer allows us to use wildcards to update dependencies. The easiest way
    to upgrade Drupal core is by using a wildcard and the `-``with-dependencies` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The apostrophes are used to escape the `*` character. This command will update
    `drupal/core-recommended` and `drupal/core-composer-scaffold` at the same time,
    as well as all of Drupal core’s dependency packages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The official documentation for using Composer to download and update files:
    [https://www.drupal.org/docs/user_guide/en/install-composer.html](https://www.drupal.org/docs/user_guide/en/install-composer.html
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The official documentation for downloading and installing a theme from Drupal.org:
    [https://www.drupal.org/docs/user_guide/en/extend-theme-install.html](https://www.drupal.org/docs/user_guide/en/extend-theme-install.html
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing your Drupal code with version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a Drupal code base, it is time to put that code into version
    control with Git. We will also export our Drupal site’s configuration to YAML
    files that allow us to track the site configuration in version control.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking your code in version control makes it easier to collaborate with other
    developers, track changes, and integrate with continuous integration and deployment
    tools. It is highly recommended, even if you are the only developer working on
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe requires that you have Git on your machine. If you do not already
    have Git, see the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git official downloads page: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub’s *Install Git* guide: [https://github.com/git-guides/install-git](https://github.com/git-guides/install-git
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal and navigate to your Drupal code base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new Git repository with the `init` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see a message about an initialized empty repository, similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Before we add files to Git to be tracked in version control, we must create
    a `.gitignore` file to specify files we do not want to be tracked. Create a `.gitignore`
    file in your project’s root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We want to ignore directories that contain code that is managed by Composer,
    user-managed files (such as uploads), and sensitive directories. Add the following
    to your `.``gitignore` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This excludes all the directories where Composer may install dependencies, local
    override settings, and the file uploads directory. We do not exclude `web/sites/default/settings.php`
    but ensure we exclude `settings.local.php` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can add our files to be tracked by Git using the `add` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use a period (`.`) for the `add` command’s argument to add all files within
    the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the files were added to be tracked by Git by using the `status`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see multiple lines of files colored green. Green means the files
    are staged to be tracked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Output from the status command, with green files representing
    items tracked in Git](img/Figure_1.2_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Output from the status command, with green files representing items
    tracked in Git
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it is time to commit the changes using the `commit` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `commit` command records changes to the repository. Commits require a commit
    message. The `-m` flag allows you to provide a message.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our code now tracked in Git, we want to export Drupal’s configuration
    and track that as well. We can do this with the `config:export` command from Drush:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the first import, all configurations will be exported. Afterward, you will
    be prompted to export the configuration as it will overwrite the existing files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the exported configuration files to Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may use `git status` to verify that the files were staged for commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit the configuration files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your Drupal site is now managed in Git and can be pushed to a GitHub or GitLab
    repository!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Git** is a free and open-source version control system. In this recipe, we
    created a new Git repository for the files that make up our Drupal site. When
    files are added to a Git repository, they are tracked to monitor changes to the
    files. Changes are then committed and create a new revision in the version control
    history. The Git repository can then be added to GitHub, GitLab, or other services
    to host the project code.'
  prefs: []
  type: TYPE_NORMAL
- en: Version control is beneficial as it makes it easy to work with other developers
    without creating conflicting code changes. It also makes the code transportable.
    The Drupal site code does not live just on your machine, but also on the remote
    repository (GitHub, GitLab, or another service).
  prefs: []
  type: TYPE_NORMAL
- en: Nearly all **Platform-as-a-Service** (**PaaS**) hosting providers that provide
    continuous integration and deployment for Drupal sites require code to exist in
    a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Git docs: [https://git-scm.com/docs](https://git-scm.com/docs )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drupal.org documentation for Git: [https://www.drupal.org/docs/develop/git](https://www.drupal.org/docs/develop/git
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Successfully deploying your Drupal site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have created a Drupal code base, set up a local development environment,
    and put our code base into version control. Now, it is time to cover deploying
    your Drupal site to a server.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your Drupal site involves more than just copying over the code files
    as you may need to run schema updates and configuration imports. In this recipe,
    we will use **rsync**, an efficient file transfer tool, to copy our Drupal site
    code base to a server and use Drush to create a successful Drupal deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe requires access to a virtual machine over **SSH** that has a **Linux,
    Apache, MySQL, and PHP** (**LAMP**) stack installed. Many cloud providers, such
    as **Digital Ocean** and AWS **Lightsail**, have one-click installations for LAMP
    stack virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: A virtual machine with 1 GB of memory and one CPU will suffice, usually the
    lowest virtual machine tier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must be able to access the virtual machine using SSH key-based authentication
    or password authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe uses the `root` user, which is not the best security practice. Server
    security practices and management are outside the scope of this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe uses an IP address of `167.71.255.26` for accessing the server.
    Replace `167.71.255.26` with the IP address for your server.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the MySQL PHP library does not support the new `caching_sha2_authentication`
    authentication implemented by MySQL. You will need a user that has access to the
    database with the `mysql_native_password` authentication method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a summary of the SQL commands for creating a `drupaldb` database that
    is accessible to the `dbuser` user with a password of `dbpass`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal and navigate to your Drupal code base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an ignore file for `rsync` to exclude directories named `.rsyncignore`
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be used to reduce the number of files transferred to the production
    server, including developer tool configuration, local development files, and any
    SQL dumps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will deploy our Drupal code base to the remote server using `rsync`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `rzCE` flags control how files are copied to the remote server. `r` is for
    recursive copying, `z` compresses files during transfer, `C` uses a checksum to
    see if files have been modified and should be copied, `E` preserves the executability
    of files, and `l` preserves links. The `E` and `l` flags are important for Composer’s
    vendor/bin executables.
  prefs: []
  type: TYPE_NORMAL
- en: '`.` represents our current working directory as the source, where `root@167.71.255.26:/var/www/html`
    is our destination. Replace `root@167.71.255.26` with your virtual machine’s user
    and IP address.'
  prefs: []
  type: TYPE_NORMAL
- en: The `exclude-from` option uses our `.rsyncignore` file to skip files from being
    uploaded, while `delete` removes old files from the destination that are no longer
    valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to create a database SQL dump for a one-time import using the
    `sql:dump` command from Drush:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also copy it over to the server for import later on using, **secure
    file copy** (**SFC**). We will upload it to the home directory of the user, not
    the Drupal directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'To finish setting up, SSH into your virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After copying the files, we also need to make sure writeable directories are
    accessible to the web server, such as writing CSS and JS aggregated files and
    compiled **Twig** templates. This is a one-time operation when setting up the
    Drupal site after the first file transfer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This ensures the `web/sites/default/files` directory is owned by the web server
    user so that it can write files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to update the document root used by Apache, which defaults to
    `/var/www/html`. The new document root is `/var/www/html/web`. We will use the
    `sed` command to replace the value for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `sed` command stands for stream editor and makes finding and replacing text
    in files very easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make Apache aware of our configuration changes. Use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will reload the Apache service’s configuration and make it aware of the
    new document root.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we set up our site, we will need to create our `settings.local.php`
    file on the server so that Drupal knows how to connect to the database. We will
    use the `nano` command-line editor to create and edit the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to your `settings.local.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Be sure to change the database credentials so that they match the ones created
    with your server. Drupal will also try to create the database for you if it does
    not exist.
  prefs: []
  type: TYPE_NORMAL
- en: Save the file by using *CTRL* + *X*, then *Y*, and finally clicking *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the database connection settings using Drush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The database credentials should match what you added to `settings.local.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to populate our database. We will use the `sql:cli` command to
    import our initial database from the local development environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can go through the deployment steps with Drush by using the `deploy`
    command to run any schema updates and configuration imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may now access your Drupal site and view it!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe involved various components: a virtual server to host our code
    and serve our Drupal site, the `rsync` tool for transferring files, and Drush
    to perform the required deployment steps.'
  prefs: []
  type: TYPE_NORMAL
- en: A benefit of using rsync over FTP or even scp, another command-line-based file
    transfer tool, is that rsync works incrementally. If a file has not been modified,
    rsync will not transfer that file. It will also ensure that deleted files are
    also deleted on the remote server, something other file transfer tools do not
    do.
  prefs: []
  type: TYPE_NORMAL
- en: The `deploy` command from Drush ensures that your Drupal site’s database and
    configuration are up to date. It is a command that operates various processes
    in a best-practice fashion. The command runs all of Drupal’s update hooks to ensure
    they are executed (schema updates and state changes provided by modules), and
    that configuration is synchronized from the exported configuration files. The
    `deploy` command should always be run, just as you would run migrations for a
    Symfony or Laravel application.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we will cover more about hosting and deploying your Drupal sites.
  prefs: []
  type: TYPE_NORMAL
- en: Platform-as-a-service hosting provider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can avoid this process completely by leveraging one of the PaaS hosting
    providers for Drupal (listed alphabetically):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Acquia Cloud: [https://www.acquia.com/products/drupal-cloud/cloud-platform/drupal-hosting](https://www.acquia.com/products/drupal-cloud/cloud-platform/drupal-hosting
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pantheon: [https://pantheon.io/product/drupal-hosting](https://pantheon.io/product/drupal-hosting
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Platform.sh: [https://platform.sh/marketplace/drupal/](https://platform.sh/marketplace/drupal/
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating deployments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using continuous integration, this deployment process can be automated in GitHub
    Actions, GitLab CI, or other continuous integration providers with your repository
    on commit. You will need to configure an additional set of private keys that are
    added to your continuous integration tool so that the service can SSH into your
    server.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hosting partners on Drupal.org: [https://www.drupal.org/hosting](https://www.drupal.org/hosting
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation for the Drush `deploy` command: [https://www.drush.org/latest/deploycommand/](https://www.drush.org/latest/deploycommand/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
