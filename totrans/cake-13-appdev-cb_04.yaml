- en: Chapter 4. Validation and Behaviors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding multiple validation rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom validation rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using callbacks in behaviors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using behaviors to add new fields for saving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Sluggable behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding addresses with the Geocodable behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter deals with two aspects of CakePHP models that are fundamental
    to most applications: validation, and behaviors.'
  prefs: []
  type: TYPE_NORMAL
- en: When we are saving information to a data source, such as a database, CakePHP
    will automatically ensure that the data is quoted in order to prevent attacks,
    SQL injection being the most common one. If we also need to ensure that the data
    follows a certain format, for example, that a phone number is valid, we use validation
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: There are also times where we need to do more than just validate the data we
    are working with. In some cases, we need to set values for fields that the end
    user can't specify but are part of our application logic. CakePHP's behaviors
    allow us to extend the functionality provided by a model, using callbacks to manipulate
    the data before it's saved, or after it's fetched.
  prefs: []
  type: TYPE_NORMAL
- en: The third recipe shows us how to use model callbacks (such as `beforeFind` and
    `afterFind`) in behaviors, while the fourth recipe shows how to use behaviors
    to add additional field values when a `save` operation is being undertaken.
  prefs: []
  type: TYPE_NORMAL
- en: The last two recipes in this chapter give examples on how to use the `Sluggable`
    behavior for creating SEO friendly URLs, and the `Geocodable` behavior to add
    geocoding support to an `Address` model.
  prefs: []
  type: TYPE_NORMAL
- en: Adding multiple validation rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to not only use some basic validation rules provided by
    CakePHP, but also how to use more than one of these rules per field.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `profiles` using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We proceed now to create the required model. Create the model `Profile` in
    a file named `profile.php` and place it in your `app/models` folder with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create its appropriate controller `ProfilesController` in a file named `profiles_controller.php`
    and place it in your `app/controllers` folder with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `profiles` in your `app/views` folder. Create the view
    to hold the form in a file named `add.ctp`, and place it in your `app/views/profiles`
    folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We already have basic validation rules set for the `email` and `name` fields,
    which guarantee that none of these fields can be empty. We now want to add another
    validation rule to ensure that the email entered is always a valid e-mail address.
    Edit the `Profile` model and change the defined validation rule as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now browse to `http://localhost/profiles/add` and click the **Create**
    button without entering any information, we should see the customized error message
    for the `email` field and the default error message for the `name` field as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we instead specify an invalid e-mail address, the validation message should
    change to the one specified in the view.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each field specified in the model's `validate` property can contain any number
    of validation rules. When we specify more than one rule, we wrap them in an array,
    indexing it with a descriptive key to help us identify which rule failed. Therefore,
    we chose to index the `notEmpty` rule with a `required` key, and the `email` rule
    with a `valid` key.
  prefs: []
  type: TYPE_NORMAL
- en: When we specify more than one validation rule, CakePHP will evaluate each rule
    in the order we used when adding them to the `validate` property. If more than
    one validation rule fails for a field, the last rule that failed is the one that
    is used to trigger the error message. In our case, the first rule is `valid`,
    and the second one `required`. Therefore if both rules fail, the field is set
    to have failed the `required` rule.
  prefs: []
  type: TYPE_NORMAL
- en: If we wanted to ensure that a particular rule is executed after all others have,
    we use the `last` rule setting. Setting it to `true` will ensure that a particular
    rule is executed after all others. In our example, we could have defined the `required`
    validation first in the list of rules for the `email` field and set its `last`
    setting to `true`, which would have the same result as defining the `required`
    rule after all others.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used the model to specify what error message is shown for
    each failing rule. We could instead choose to do it in the view.
  prefs: []
  type: TYPE_NORMAL
- en: Using the indexes that identify each rule, we can specify which error message
    should be shown whenever one of these rules fails validation. We do so by setting
    the `error` option in the field definition to an array of error messages, each
    indexed by a matching validation rule key (in our case, one of `required` and
    `valid` for the `email` field).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `app/views/profiles/add.ctp` file and change the `email` field definition
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Internationalizing model validation messages* in the *Internationalizing applications*
    chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom validation rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CakePHP provides a handful of validation rules out of the box, which together
    covers the need for most applications. The following table lists the built-in
    validation rules (found in CakePHP's `Validation` class.)
  prefs: []
  type: TYPE_NORMAL
- en: '| Rule | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `_alphaNumeric` | Checks that the value contains only integers or letters.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `_between` | Checks that the string length of the value is within the specified
    range. |'
  prefs: []
  type: TYPE_TB
- en: '| `_blank` | Succeeds if the value is empty, or consists of only spaces (whitespaces,
    tabs, newlines, and so on). |'
  prefs: []
  type: TYPE_TB
- en: '| `_boolean` | Checks if value can be interpreted as a Boolean. |'
  prefs: []
  type: TYPE_TB
- en: '| `_cc` | Validates a credit card number. |'
  prefs: []
  type: TYPE_TB
- en: '| `_comparison` | Compares the value to a given value, using the specified
    operator. |'
  prefs: []
  type: TYPE_TB
- en: '| `_custom` | Validates the value using a custom regular expression. |'
  prefs: []
  type: TYPE_TB
- en: '| `_date` | Validates the value as a date, using the given format or regular
    expression. |'
  prefs: []
  type: TYPE_TB
- en: '| `_decimal` | Succeeds if value is a valid decimal number. |'
  prefs: []
  type: TYPE_TB
- en: '| `_email` | Validates an e-mail address. |'
  prefs: []
  type: TYPE_TB
- en: '| `_equalTo` | Succeeds if the value is equal to the given value. |'
  prefs: []
  type: TYPE_TB
- en: '| `_extension` | Interprets the value as a file name and checks for the given
    extension. |'
  prefs: []
  type: TYPE_TB
- en: '| `_inList` | Checks that the value is within a list of allowed values. |'
  prefs: []
  type: TYPE_TB
- en: '| `_ip` | Validates an IP address. |'
  prefs: []
  type: TYPE_TB
- en: '| `_maxLength` | Checks that the length of the string value does not exceed
    a certain number of characters. |'
  prefs: []
  type: TYPE_TB
- en: '| `_minLength` | Similar to maxLength, but ensures that the string value has
    at least the given number of characters. |'
  prefs: []
  type: TYPE_TB
- en: '| `_money` | Checks that the value is a valid monetary amount. |'
  prefs: []
  type: TYPE_TB
- en: '| `_multiple` | Validates a multiple select against a set of options. |'
  prefs: []
  type: TYPE_TB
- en: '| `_numeric` | Succeeds if the value is numeric. |'
  prefs: []
  type: TYPE_TB
- en: '| `_phone` | Checks a phone number. |'
  prefs: []
  type: TYPE_TB
- en: '| `_postal` | Validates a postal code. |'
  prefs: []
  type: TYPE_TB
- en: '| `_range` | Succeeds if the value is within a numeric range. |'
  prefs: []
  type: TYPE_TB
- en: '| `_ssn` | Checks a social security/national identity number. |'
  prefs: []
  type: TYPE_TB
- en: '| `_time` | Validates the value as a time (24 hours format). |'
  prefs: []
  type: TYPE_TB
- en: '| `_uuid` | Validates the value as a UUID. |'
  prefs: []
  type: TYPE_TB
- en: '| `_url` | Succeeds if the value is a valid URL. |'
  prefs: []
  type: TYPE_TB
- en: However, there are times where we require a custom validation, or where we need
    to change the way an existing validation works.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create our custom validation rule to check
    the validity of a given twitter user name.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need some sample models to work with. Follow the *Getting ready* section
    of the recipe *Adding multiple validation rules*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `Profile` model by opening your `app/models/profile.php` file and
    make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now browse to `http://localhost/profiles/add` and click the `Create`
    button after entering a Nonexistent Twitter account, we should see the error message
    for the `twitter` field shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we instead specify a valid account, or leave it empty, there will be no error
    message displayed for the `twitter` field.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we set the `rule` validate option to the name of a method that is available
    in the model (`validateTwitter()` in our example), CakePHP calls that method when
    the field needs to be validated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method `validateTwitter()`, like any custom validation method, receives
    an array in its first argument. This array is indexed by the field name, and the
    value is set to the value entered by the user. In the example shown in the previous
    screenshot, the `data` argument comes in as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The validation method needs to return a Boolean value to indicate success:
    `true` if the validation succeeded, `false` if it failed. If we don''t set the
    `allowEmpty` option to `true`, then the validation method will also be called
    when the field value is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the custom validation method returns a string, the field is marked to have
    failed validation, and the returned string is used as the error message.
  prefs: []
  type: TYPE_NORMAL
- en: The method `validateTwitter()` first checks to see if an instance of the CakePHP
    `HttpSocket` class is already set. We use a static instance to make sure the class
    is initialized only once, thus avoiding unnecessary processing if the method is
    called several times for the same process.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the `HttpSocket` instance, we get the value to be validated (first
    value set in the array, as shown above), and we use it to fetch the contents of
    a twitter URL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We could have used an [http://twitter.com/$account](http://twitter.com/$account)
    URL, which returns the HTML containing the user latest tweets. However we chose
    to use a `JSON` request, and limit the number of tweets to `1`, to reduce bandwidth
    usage from our server
  prefs: []
  type: TYPE_NORMAL
- en: This publicly available Twitter URL is used to get the timeline for a Twitter
    account, which returns an HTTP status of `404` when the account is not registered
    with Twitter. If the status is indeed `404`, we consider the Twitter account to
    be nonexistent, thus failing validation. Any other status code will result in
    a successful validation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some custom validation methods need more than just the value to be validated
    to be able to tell if validation succeeded. Fortunately, CakePHP not only sends
    us an array of options utilized to perform the validation in the second argument,
    but also provides an easy way to add parameters to our validation methods. Using
    our example, we now want to be able to provide a different URL to use when checking
    the Twitter account.
  prefs: []
  type: TYPE_NORMAL
- en: 'To utilize the array of options, edit the `Profile` model by opening your `app/models/profile.php`
    file and make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If instead of utilizing the array of options, we want to utilize the ability
    to use extra parameters, we simply add arguments to our validation method, and
    pass those argument values as elements of the `validate` definition. To do so,
    edit the `Profile` model by opening your `app/models/profile.php` file and make
    the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding multiple validation rules*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using callbacks in behaviors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CakePHP behaviors are a great way to not only extend model functionality, but
    also share that functionality across different models, and applications. Using
    behaviors, we can keep our model code concise and to the point, extracting code
    that may not be directly related to our business logic, but still affect how our
    models behave.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe we will learn how to use model callbacks to automatically retrieve
    each profile's latest tweets, and how to add a custom validation method to the
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need some sample models to work with. Follow the *Getting ready* section
    of the recipe *Adding multiple validation rules*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need a method to list all profiles. Edit your `app/controllers/profiles_controller.php`
    file and add the following `index()` method to the `ProfilesController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the respective view in a file named `app/views/profiles/index.ctp`,
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a class named `TwitterAccountBehavior` in a file named `twitter_account.php`
    and place it in your `app/models/behaviors` folder, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have created the behavior with its `setup()` method implemented
    and a helper `timeline()` method to obtain tweets from a Twitter account, we can
    proceed to add the required validation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following custom validation method to the TwitterAccountBehavior class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let us now attach the behavior to the `Profile` model, and add the validation
    for the `twitter` field. Open your `app/models/profile.php` file and add the following
    `actsAs` property and the `twitter` field validation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just like the recipe *Creating a custom validation rule*, entering a nonexistant
    Twitter account should display the error message for the `twitter` field shown
    in the following screenshot:![How to do it...](img/1926_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let us now use other callbacks to get a certain number of tweets for each profile
    after a find operation is performed. Add the following `beforeFind()` and `afterFind()`
    methods to the `TwitterAccountBehavior` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `app/views/profiles/index.ctp` view and make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After adding a valid Twitter account, browsing to `http://localhost/profiles`
    would generate a listing, such as the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started with the skeleton for our `TwitterAccountBehavior`, implementing
    the `setup()` method, called automatically by CakePHP whenever the behavior is
    attached to a model, and the `timeline()` method, which is nothing more than the
    `validateTwitter()` method shown in the recipe *Create a custom validation rule*
    optimized for reutilization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `beforeFind` callback is triggered by CakePHP whenever a find operation
    is about to be executed, and we used it to check the existence of the custom `tweets`
    find setting. We use this setting to allow the developer to either disable the
    fetch of tweets, by setting it to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'or specify how many tweets should be obtained. For example, if we wanted to
    obtain only the latest tweet, we would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `afterFind` callback is executed after a find operation is executed, and
    gives us an opportunity to modify the results. Therefore we check to make sure
    we are told to obtain the tweets, and if so we use the `timeline()` method to
    obtain the specified number of tweets. We then append each tweet's basic information
    into the index `Tweet` for each profile.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One thing that is clear in our implementation is that, unless we set the `tweets`
    find option to `false`; we are obtaining tweets for each profile record on every
    `find` operation performed against the `Profile` model. Adding caching support
    would greatly improve the performance of our `find` operations, since we would
    only obtain the tweets when the cached information is no longer valid.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about caching through CakePHP's Cache class can be obtained
    at [http://book.cakephp.org/view/1511/Cache](http://book.cakephp.org/view/1511/Cache).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will allow the developer to specify what cache configuration to use when
    caching tweets. Open the `TwitterAccountBehavior` class and make the following
    modifications to its `setup()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'While editing the `TwitterAccountBehavior` class, make the following modifications
    to its `afterFind()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the following `beforeDelete` and `afterDelete` callback implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Using `beforeDelete()` we are storing the tweet that is to be deleted. If indeed
    the profile was deleted, the `afterDelete()` method will remove its cached tweets.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding multiple validation rules*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Create a custom validation rule*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using behaviors to add new fields for saving*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using behaviors to add new fields for saving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the recipe *Using callbacks in behaviors* we learnt how to implement different
    model callbacks to perform some tasks automatically. In this recipe we will continue
    that process and we will learn how to automatically save data that may not be
    provided in a `save` operation.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the Twitter example we have been using in this chapter, so that
    when a profile is saved, its Twitter URL and its last tweet are saved when creating
    a new record, or when updating an existing one.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a working `TwitterAccountBehavior` together with its controllers, models,
    and views. Follow the recipe *Using callbacks in behaviors* (there's no need to
    enable caching in the behavior, so you can omit the *There's more* section).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add two fields to the profiles table, `url` and `last_tweet`, by issuing the
    following SQL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit your `app/models/behaviors/twitter_account.php` file and add the following
    `beforeSave` implementation to the `TwitterAccountBehavior` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Whenever we create a new profile with a valid Twitter account, both the `url`
    and `last_tweet` fields will be automatically populated. If we are instead modifying
    a profile, the `last_tweet` field will be updated to reflect the latest tweet
    from the relevant account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `beforeSave` callback is triggered before a save operation is performed
    on a model, giving us the chance to add new fields to the set of fields that are
    about to be saved, or modify other field values.
  prefs: []
  type: TYPE_NORMAL
- en: We started by determining which Twitter account is linked to the profile being
    saved. If no Twitter account is specified in the data that is about to be saved,
    and if we are modifying an existing record (we use `$model->exists()` for this
    check), we obtain the account specified in its `twitter` field. If instead there's
    an account specified in the data to be saved, we use that instead.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the type of save operation that is about to be performed (creating
    or updating a record), we set the `last_tweet` field to the last tweet published
    by the specific Twitter account. However, we set the `url` field to the appropriate
    URL-based, on the Twitter account only when we are creating a new record.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have set the data to be saved in the `$data` array, we append that data
    to the `$model->data` property that contains all the information that will be
    saved. We then use the behavior's `_addToWhitelist()` method, defined in CakePHP's
    `ModelBehavior` class from which our behavior extends, so that if the developer
    has chosen to limit the save operation to only a specific set of fields, then
    our fields are guaranteed to be saved regardless of this restriction.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Using callbacks in behaviors*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Sluggable behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main concerns most applications have is optimizing their content
    for search engines, so that their sites rank as high as possible on most engines.
    Among several recommendations found in most SEO (Search Engine Optimization) guides,
    building URLs that include relevant keywords is one of the most effective ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are building a content-based site, this is achievable by making sure
    that permanent links to each item include most of the words that are part of the
    item title. As an example, if we have a post whose title is *Top 10 CakePHP Behaviors*,
    an SEO-friendly URL could be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/articles/view/top-10-cakephp-behaviors`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `top-10-cakephp-behaviors` part is commonly known as a *slug*, a part of
    the URL that uses relevant keywords. In this recipe, we will learn how to use
    the publicly available `Sluggable` behavior to automatically add slugs to our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Sluggable` behavior is one of the many classes I released as open source
    to help fellow CakePHP developers. Feel free to send me any feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe, we need a sample table to work with. Create a table
    named `posts`, using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We proceed now to create the required model. Create the model `Post` in a file
    named `post.php` and place it in your `app/models` folder, with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create its appropriate controller `PostsController` in a file named `posts_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `posts` in your `app/views` folder, then create the view
    to hold the form in a file named `add.ctp` and place it in your `app/views/posts`
    folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we need to download the Syrup plugin for CakePHP. Go to [http://github.com/mariano/syrup/downloads](http://github.com/mariano/syrup/downloads)
    and download the latest release. Uncompress the downloaded file into your `app/plugins`
    folder. You should now have a directory named `syrup` inside `app/plugins`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by attaching the `Sluggable` behavior to the `Post` model. Edit your
    `app/models/post.php` file and add the `$actsAs` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s create an action to list posts. Add the following method to the `PostsController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view `views/posts/index.ctp` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the action to view a post by slug. Add the following method to
    the PostsController class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view `views/posts/view.ctp` with the following contents:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After creating some posts using the form at `http://localhost/posts`, the list
    of posts could look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_04_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'If you hover over the links, you should see SEO-friendly links. For example,
    for the post entitled *Automatic tasks with CakePHP*, its URL would be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clicking on this URL would show the details for the post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Sluggable` behavior implements the `beforeSave` callback to automatically
    add the generated slug on the specified field. It ensures that all generated slugs
    are unique, and provides a full set of options to modify how a slug is generated.
    The following options can be specified when attaching the behavior to a model:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ignore` | List of words that should not be part of a slug. Optional, and
    defaults to: `and, for, is, of`, and `the`. |'
  prefs: []
  type: TYPE_TB
- en: '| `label` | Field name (string), or list of field names (in an array) that
    are used to create the slug. Defaults to a single field named `title`. |'
  prefs: []
  type: TYPE_TB
- en: '| `length` | Maximum length of the generated slug. Defaults to `100`. |'
  prefs: []
  type: TYPE_TB
- en: '| `overwrite` | If set to `true`, the slug is generated even when modifying
    a record that already has a slug. Defaults to `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `real` | If set to `true`, it will ensure that the field names defined in
    the `label` option exists in the table. Defaults to `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `separator` | Character to use when separating words in the slug. Defaults
    to `-`. |'
  prefs: []
  type: TYPE_TB
- en: '| `slug` | Name of the field where the slug is stored. Defaults to `slug`.
    |'
  prefs: []
  type: TYPE_TB
- en: Geocoding addresses with the Geocodable behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the introduction of Google Maps and other location services, a broad set
    of possibilities are open to web applications, allowing geographical information
    to be used for building services.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to use the Geocode plugin to add location information
    to our own `Address` model, allowing us to search address records by proximity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Geocode` plugin is another open source project I released. More information
    about it can be obtained at [http://github.com/mariano/geocode](http://github.com/mariano/geocode).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `addresses`, using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We proceed now to create the required model. Create the model `Address` in
    a file named `address.php` and place it in your `app/models` folder with the following
    contents (we are only specifying a few states for readability):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create its appropriate controller `AddressesController` in a file named `addresses_controller.php`
    and place it in your `app/controllers` folder. With the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `addresses` in your `app/views` folder, then create the
    view to hold the form in a file named `add.ctp` and place it in your `app/views/addresses`
    folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We need to download the Geocode plugin for CakePHP. Go to [http://github.com/mariano/geocode/downloads](http://github.com/mariano/geocode/downloads)
    and download the latest release. Uncompress the downloaded file into your `app/plugins`
    folder. You should now have a directory named `geocode` inside `app/plugins`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to sign up for a Google Maps API key. To do so, go to [http://code.google.com/apis/maps/signup.html](http://code.google.com/apis/maps/signup.html)
    and follow the instructions given.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Geocode plugin also supports Yahoo maps. If you wish to use Yahoo Maps instead,
    follow the instructions shown on the plugin homepage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit your `app/config/bootstrap.php` file and place the following statement
    right before the closing PHP statement, replacing the string `APIKEY` with your
    own Google Maps API key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now make our `Address` model extend the skeleton model provided by
    the plugin. Edit your `app/models/address.php` file and make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By extending `GeoAddress`, the `Geocodable` behavior is automatically attached
    to our model. We can now use the form at `http://localhost/addresses/add` to add
    new addresses. After adding quite a few, we are ready to implement a paginated
    listing with support to finding addresses that are near a certain location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To simplify this operation, we will force the point of origin in our controller
    action, instead of letting the user specify the address. With this in mind, add
    the following action to the `AddressesController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create the view `app/views/addresses/index.ctp`, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you inserted sample addresses that are near the specified address, the output
    could be similar to that shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started by downloading the plugin and configuring it by setting our own Google
    Maps API key in the `bootstrap.php` configuration file. We then made our `Address`
    model inherit from the `GeoAddress` model provided by the plugin, which makes
    our model use the `Geocodable` behavior, and implements the `near` custom find
    type.
  prefs: []
  type: TYPE_NORMAL
- en: Since our `Address` model is now attached to the `Geocodable` behavior, every
    time we create new address records the plugin will use the Google Maps API to
    save the appropriate location in the `latitude` and `longitude` fields.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `near` custom find type, we can easily find addresses that are near
    a certain address, and we can also see what distance separates each of those addresses
    from the point of origin.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Geocode plugin is quite flexible, and even includes a helper to show addresses
    in a visual map. To find out all it has to offer, go to its website at [http://github.com/mariano/geocode](http://github.com/mariano/geocode).
  prefs: []
  type: TYPE_NORMAL
