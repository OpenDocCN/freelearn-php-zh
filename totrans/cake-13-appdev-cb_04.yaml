- en: Chapter 4. Validation and Behaviors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章：验证和行为
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Adding multiple validation rules
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加多个验证规则
- en: Creating a custom validation rule
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义验证规则
- en: Using callbacks in behaviors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行为中使用回调
- en: Using behaviors to add new fields for saving
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用行为添加新的字段以保存
- en: Using the Sluggable behavior
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Sluggable 行为
- en: Geocoding addresses with the Geocodable behavior
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Geocodable 行为进行地址地理编码
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'This chapter deals with two aspects of CakePHP models that are fundamental
    to most applications: validation, and behaviors.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了 CakePHP 模型中两个对大多数应用程序至关重要的方面：验证和行为。
- en: When we are saving information to a data source, such as a database, CakePHP
    will automatically ensure that the data is quoted in order to prevent attacks,
    SQL injection being the most common one. If we also need to ensure that the data
    follows a certain format, for example, that a phone number is valid, we use validation
    rules.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将信息保存到数据源（如数据库）时，CakePHP 会自动确保数据被引号包围，以防止攻击，SQL 注入是最常见的一种。如果我们还需要确保数据遵循某种格式，例如，电话号码是有效的，我们使用验证规则。
- en: There are also times where we need to do more than just validate the data we
    are working with. In some cases, we need to set values for fields that the end
    user can't specify but are part of our application logic. CakePHP's behaviors
    allow us to extend the functionality provided by a model, using callbacks to manipulate
    the data before it's saved, or after it's fetched.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们不仅需要验证我们正在处理的数据。在某些情况下，我们需要为最终用户无法指定的字段设置值，但这些字段是我们应用程序逻辑的一部分。CakePHP
    的行为允许我们通过回调在数据保存之前或之后操作数据来扩展模型提供的功能。
- en: The third recipe shows us how to use model callbacks (such as `beforeFind` and
    `afterFind`) in behaviors, while the fourth recipe shows how to use behaviors
    to add additional field values when a `save` operation is being undertaken.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个食谱展示了如何在行为中使用模型回调（如 `beforeFind` 和 `afterFind`），而第四个食谱展示了如何在使用 `save` 操作时使用行为添加额外的字段值。
- en: The last two recipes in this chapter give examples on how to use the `Sluggable`
    behavior for creating SEO friendly URLs, and the `Geocodable` behavior to add
    geocoding support to an `Address` model.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后两个食谱给出了如何使用 `Sluggable` 行为创建 SEO 友好 URL 的示例，以及如何使用 `Geocodable` 行为为 `Address`
    模型添加地理编码支持的示例。
- en: Adding multiple validation rules
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加多个验证规则
- en: This recipe shows how to not only use some basic validation rules provided by
    CakePHP, but also how to use more than one of these rules per field.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何不仅使用 CakePHP 提供的一些基本验证规则，而且还展示了如何为每个字段使用多个这些规则。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `profiles` using the following SQL statement:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一个样本表来工作。使用以下 SQL 语句创建一个名为 `profiles` 的表：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We proceed now to create the required model. Create the model `Profile` in
    a file named `profile.php` and place it in your `app/models` folder with the following
    contents:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在继续创建所需的模型。在 `app/models` 文件夹中创建名为 `Profile` 的模型，文件名为 `profile.php`，内容如下：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create its appropriate controller `ProfilesController` in a file named `profiles_controller.php`
    and place it in your `app/controllers` folder with the following contents:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `app/controllers` 文件夹中创建相应的控制器 `ProfilesController`，文件名为 `profiles_controller.php`，内容如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a folder named `profiles` in your `app/views` folder. Create the view
    to hold the form in a file named `add.ctp`, and place it in your `app/views/profiles`
    folder, with the following contents:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `app/views` 文件夹中创建一个名为 `profiles` 的文件夹。创建一个名为 `add.ctp` 的视图来保存表单，并将其放置在你的
    `app/views/profiles` 文件夹中，内容如下：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We already have basic validation rules set for the `email` and `name` fields,
    which guarantee that none of these fields can be empty. We now want to add another
    validation rule to ensure that the email entered is always a valid e-mail address.
    Edit the `Profile` model and change the defined validation rule as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为 `email` 和 `name` 字段设置了基本的验证规则，这保证了这些字段中的任何一个都不能为空。现在我们想要添加另一个验证规则，以确保输入的电子邮件始终是有效的电子邮件地址。编辑
    `Profile` 模型，并按以下方式更改定义的验证规则：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we now browse to `http://localhost/profiles/add` and click the **Create**
    button without entering any information, we should see the customized error message
    for the `email` field and the default error message for the `name` field as shown
    in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在浏览到`http://localhost/profiles/add`并点击**创建**按钮而不输入任何信息，我们应该看到`email`字段的定制错误消息和`name`字段的默认错误消息，如下面的截图所示：
- en: '![How to do it...](img/1926_04_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_04_01.jpg)'
- en: If we instead specify an invalid e-mail address, the validation message should
    change to the one specified in the view.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定了一个无效的电子邮件地址，验证消息应该更改为视图中指定的消息。
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each field specified in the model's `validate` property can contain any number
    of validation rules. When we specify more than one rule, we wrap them in an array,
    indexing it with a descriptive key to help us identify which rule failed. Therefore,
    we chose to index the `notEmpty` rule with a `required` key, and the `email` rule
    with a `valid` key.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 模型`validate`属性中指定的每个字段都可以包含任意数量的验证规则。当我们指定多个规则时，我们将它们包裹在一个数组中，并用描述性键对其进行索引，以帮助我们识别哪个规则失败了。因此，我们选择用`required`键索引`notEmpty`规则，用`valid`键索引`email`规则。
- en: When we specify more than one validation rule, CakePHP will evaluate each rule
    in the order we used when adding them to the `validate` property. If more than
    one validation rule fails for a field, the last rule that failed is the one that
    is used to trigger the error message. In our case, the first rule is `valid`,
    and the second one `required`. Therefore if both rules fail, the field is set
    to have failed the `required` rule.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们指定多个验证规则时，CakePHP将按照我们添加到`validate`属性时的顺序评估每个规则。如果一个字段有多个验证规则失败，则最后失败的规则将用于触发错误消息。在我们的例子中，第一个规则是`valid`，第二个是`required`。因此，如果两个规则都失败了，该字段将被设置为失败`required`规则。
- en: If we wanted to ensure that a particular rule is executed after all others have,
    we use the `last` rule setting. Setting it to `true` will ensure that a particular
    rule is executed after all others. In our example, we could have defined the `required`
    validation first in the list of rules for the `email` field and set its `last`
    setting to `true`, which would have the same result as defining the `required`
    rule after all others.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要确保某个规则在所有其他规则之后执行，我们使用`last`规则设置。将其设置为`true`将确保特定规则在所有其他规则之后执行。在我们的例子中，我们可以在`email`字段的规则列表中首先定义`required`验证，并将其`last`设置设置为`true`，这将产生与在所有其他规则之后定义`required`规则相同的结果。
- en: There's more...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: In this recipe, we used the model to specify what error message is shown for
    each failing rule. We could instead choose to do it in the view.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用了模型来指定对于每个失败的规则显示哪个错误消息。我们也可以选择在视图中这样做。
- en: Using the indexes that identify each rule, we can specify which error message
    should be shown whenever one of these rules fails validation. We do so by setting
    the `error` option in the field definition to an array of error messages, each
    indexed by a matching validation rule key (in our case, one of `required` and
    `valid` for the `email` field).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标识每个规则的索引，我们可以指定在验证失败时应该显示哪个错误消息。我们通过在字段定义中将`error`选项设置为错误消息数组来实现，每个错误消息都通过匹配的验证规则键（在我们的情况下，是`email`字段的`required`和`valid`之一）进行索引。
- en: 'Edit the `app/views/profiles/add.ctp` file and change the `email` field definition
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`app/views/profiles/add.ctp`文件，并按以下方式更改`email`字段定义：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Internationalizing model validation messages* in the *Internationalizing applications*
    chapter.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*国际化应用程序*章节中*国际化模型验证消息*。
- en: Creating a custom validation rule
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义验证规则
- en: CakePHP provides a handful of validation rules out of the box, which together
    covers the need for most applications. The following table lists the built-in
    validation rules (found in CakePHP's `Validation` class.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP提供了一些内置的验证规则，这些规则一起满足了大多数应用程序的需求。以下表格列出了内置的验证规则（位于CakePHP的`Validation`类中。）
- en: '| Rule | Purpose |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 规则 | 目的 |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `_alphaNumeric` | Checks that the value contains only integers or letters.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `_alphaNumeric` | 检查值是否只包含整数或字母。 |'
- en: '| `_between` | Checks that the string length of the value is within the specified
    range. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `_between` | 检查值的字符串长度是否在指定的范围内。 |'
- en: '| `_blank` | Succeeds if the value is empty, or consists of only spaces (whitespaces,
    tabs, newlines, and so on). |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `_blank` | 如果值是空的，或者只包含空格（空白字符、制表符、换行符等），则成功。 |'
- en: '| `_boolean` | Checks if value can be interpreted as a Boolean. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `_boolean` | 检查值是否可以解释为布尔值。 |'
- en: '| `_cc` | Validates a credit card number. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `_cc` | 验证信用卡号码。|'
- en: '| `_comparison` | Compares the value to a given value, using the specified
    operator. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `_comparison` | 使用指定的运算符将值与给定的值进行比较。|'
- en: '| `_custom` | Validates the value using a custom regular expression. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `_custom` | 使用自定义正则表达式验证值。|'
- en: '| `_date` | Validates the value as a date, using the given format or regular
    expression. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `_date` | 使用给定的格式或正则表达式将值验证为日期。|'
- en: '| `_decimal` | Succeeds if value is a valid decimal number. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `_decimal` | 如果值是有效的十进制数，则成功。|'
- en: '| `_email` | Validates an e-mail address. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `_email` | 验证电子邮件地址。|'
- en: '| `_equalTo` | Succeeds if the value is equal to the given value. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `_equalTo` | 如果值等于给定的值，则成功。|'
- en: '| `_extension` | Interprets the value as a file name and checks for the given
    extension. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `_extension` | 将值解释为文件名并检查给定的扩展名。|'
- en: '| `_inList` | Checks that the value is within a list of allowed values. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `_inList` | 检查值是否在允许值的列表中。|'
- en: '| `_ip` | Validates an IP address. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `_ip` | 验证IP地址。|'
- en: '| `_maxLength` | Checks that the length of the string value does not exceed
    a certain number of characters. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `_maxLength` | 检查字符串值的长度不超过一定数量的字符。|'
- en: '| `_minLength` | Similar to maxLength, but ensures that the string value has
    at least the given number of characters. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `_minLength` | 与 `maxLength` 类似，但确保字符串值至少有给定数量的字符。|'
- en: '| `_money` | Checks that the value is a valid monetary amount. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `_money` | 检查值是否是有效的货币金额。|'
- en: '| `_multiple` | Validates a multiple select against a set of options. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `_multiple` | 验证多选与一组选项。|'
- en: '| `_numeric` | Succeeds if the value is numeric. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `_numeric` | 如果值是数字，则成功。|'
- en: '| `_phone` | Checks a phone number. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `_phone` | 检查电话号码。|'
- en: '| `_postal` | Validates a postal code. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `_postal` | 验证邮政编码。|'
- en: '| `_range` | Succeeds if the value is within a numeric range. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `_range` | 如果值在数值范围内，则成功。|'
- en: '| `_ssn` | Checks a social security/national identity number. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `_ssn` | 检查社会保障/国家身份号码。|'
- en: '| `_time` | Validates the value as a time (24 hours format). |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `_time` | 将值验证为时间（24小时格式）。|'
- en: '| `_uuid` | Validates the value as a UUID. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `_uuid` | 验证值是否为UUID。|'
- en: '| `_url` | Succeeds if the value is a valid URL. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `_url` | 如果值是有效的URL，则成功。|'
- en: However, there are times where we require a custom validation, or where we need
    to change the way an existing validation works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时我们需要自定义验证，或者我们需要更改现有验证的方式。
- en: In this recipe, we will learn how to create our custom validation rule to check
    the validity of a given twitter user name.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何创建自定义验证规则来检查给定Twitter用户名的有效性。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We need some sample models to work with. Follow the *Getting ready* section
    of the recipe *Adding multiple validation rules*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些样本模型来工作。遵循菜谱“添加多个验证规则”中的“准备就绪”部分。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `Profile` model by opening your `app/models/profile.php` file and
    make the following changes:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开你的 `app/models/profile.php` 文件来编辑 `Profile` 模型，并做出以下更改：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we now browse to `http://localhost/profiles/add` and click the `Create`
    button after entering a Nonexistent Twitter account, we should see the error message
    for the `twitter` field shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在浏览到 `http://localhost/profiles/add` 并在输入一个不存在的Twitter账号后点击“创建”按钮，我们应该会看到以下截图所示的“twitter”字段的错误信息：
- en: '![How to do it...](img/1926_04_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1926_04_02.jpg)'
- en: If we instead specify a valid account, or leave it empty, there will be no error
    message displayed for the `twitter` field.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定一个有效的账号，或者将其留空，则不会为“twitter”字段显示错误信息。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: When we set the `rule` validate option to the name of a method that is available
    in the model (`validateTwitter()` in our example), CakePHP calls that method when
    the field needs to be validated.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 `rule` 验证选项设置为模型中可用的方法名称（在我们的例子中是 `validateTwitter()`）时，CakePHP会在字段需要验证时调用该方法。
- en: 'The method `validateTwitter()`, like any custom validation method, receives
    an array in its first argument. This array is indexed by the field name, and the
    value is set to the value entered by the user. In the example shown in the previous
    screenshot, the `data` argument comes in as:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`validateTwitter()` 方法，像任何自定义验证方法一样，其第一个参数接收一个数组。这个数组按字段名称索引，值设置为用户输入的值。在前一个截图所示的例子中，`data`
    参数如下所示：'
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The validation method needs to return a Boolean value to indicate success:
    `true` if the validation succeeded, `false` if it failed. If we don''t set the
    `allowEmpty` option to `true`, then the validation method will also be called
    when the field value is empty.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 验证方法需要返回一个布尔值来指示成功：如果验证成功，则返回 `true`；如果失败，则返回 `false`。如果我们没有将 `allowEmpty` 选项设置为
    `true`，那么当字段值为空时，验证方法也会被调用。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the custom validation method returns a string, the field is marked to have
    failed validation, and the returned string is used as the error message.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果自定义验证方法返回一个字符串，则字段会被标记为验证失败，并使用返回的字符串作为错误信息。
- en: The method `validateTwitter()` first checks to see if an instance of the CakePHP
    `HttpSocket` class is already set. We use a static instance to make sure the class
    is initialized only once, thus avoiding unnecessary processing if the method is
    called several times for the same process.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`validateTwitter()` 方法首先检查 CakePHP 的 `HttpSocket` 类的实例是否已经设置。我们使用静态实例来确保类只初始化一次，从而避免在相同过程中多次调用该方法时进行不必要的处理。'
- en: Once we have the `HttpSocket` instance, we get the value to be validated (first
    value set in the array, as shown above), and we use it to fetch the contents of
    a twitter URL.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了 `HttpSocket` 实例，我们就获取要验证的值（如上所示，数组中设置的第一个值），并使用它来获取推特 URL 的内容。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We could have used an [http://twitter.com/$account](http://twitter.com/$account)
    URL, which returns the HTML containing the user latest tweets. However we chose
    to use a `JSON` request, and limit the number of tweets to `1`, to reduce bandwidth
    usage from our server
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以使用 `[http://twitter.com/$account](http://twitter.com/$account)` URL，该 URL
    返回包含用户最新推文的 HTML。然而，我们选择使用 `JSON` 请求，并将推文数量限制为 `1`，以减少服务器带宽的使用。
- en: This publicly available Twitter URL is used to get the timeline for a Twitter
    account, which returns an HTTP status of `404` when the account is not registered
    with Twitter. If the status is indeed `404`, we consider the Twitter account to
    be nonexistent, thus failing validation. Any other status code will result in
    a successful validation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个公开可用的推特 URL 用于获取推特账户的时间线，当账户未在推特上注册时，返回 HTTP 状态码 `404`。如果状态码确实是 `404`，我们认为推特账户不存在，从而验证失败。任何其他状态码都将导致验证成功。
- en: There's more...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Some custom validation methods need more than just the value to be validated
    to be able to tell if validation succeeded. Fortunately, CakePHP not only sends
    us an array of options utilized to perform the validation in the second argument,
    but also provides an easy way to add parameters to our validation methods. Using
    our example, we now want to be able to provide a different URL to use when checking
    the Twitter account.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一些自定义验证方法需要除了要验证的值之外的信息才能判断验证是否成功。幸运的是，CakePHP 不仅通过第二个参数发送用于执行验证的选项数组，还提供了一个简单的方法来向我们的验证方法添加参数。使用我们的示例，我们现在希望能够提供在检查推特账户时使用的一个不同的
    URL。
- en: 'To utilize the array of options, edit the `Profile` model by opening your `app/models/profile.php`
    file and make the following changes:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用选项数组，通过打开 `app/models/profile.php` 文件编辑 `Profile` 模型，进行以下更改：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If instead of utilizing the array of options, we want to utilize the ability
    to use extra parameters, we simply add arguments to our validation method, and
    pass those argument values as elements of the `validate` definition. To do so,
    edit the `Profile` model by opening your `app/models/profile.php` file and make
    the following changes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要利用额外的参数能力，而不是使用选项数组，我们只需向验证方法添加参数，并将这些参数值作为 `validate` 定义中的元素传递。为此，通过打开
    `app/models/profile.php` 文件编辑 `Profile` 模型，进行以下更改：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Adding multiple validation rules*'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加多个验证规则*'
- en: Using callbacks in behaviors
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在行为中使用回调
- en: CakePHP behaviors are a great way to not only extend model functionality, but
    also share that functionality across different models, and applications. Using
    behaviors, we can keep our model code concise and to the point, extracting code
    that may not be directly related to our business logic, but still affect how our
    models behave.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 行为不仅是一种扩展模型功能的好方法，还可以在不同模型和应用程序之间共享该功能。使用行为，我们可以使模型代码简洁明了，提取与我们的业务逻辑不直接相关但仍然影响模型行为的代码。
- en: In this recipe we will learn how to use model callbacks to automatically retrieve
    each profile's latest tweets, and how to add a custom validation method to the
    behavior.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用模型回调自动检索每个配置文件的最新推文，以及如何向行为添加自定义验证方法。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need some sample models to work with. Follow the *Getting ready* section
    of the recipe *Adding multiple validation rules*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些示例模型来工作。遵循食谱*添加多个验证规则*中的*准备就绪*部分。
- en: 'We will also need a method to list all profiles. Edit your `app/controllers/profiles_controller.php`
    file and add the following `index()` method to the `ProfilesController` class:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个列出所有配置文件的方法。编辑您的`app/controllers/profiles_controller.php`文件，并将以下`index()`方法添加到`ProfilesController`类中：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create the respective view in a file named `app/views/profiles/index.ctp`,
    with the following contents:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`app/views/profiles/index.ctp`的文件中创建相应的视图，内容如下：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a class named `TwitterAccountBehavior` in a file named `twitter_account.php`
    and place it in your `app/models/behaviors` folder, with the following contents:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`twitter_account.php`的文件中创建一个名为`TwitterAccountBehavior`的类，并将其放置在您的`app/models/behaviors`文件夹中，内容如下：
- en: '[PRE12]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that we have created the behavior with its `setup()` method implemented
    and a helper `timeline()` method to obtain tweets from a Twitter account, we can
    proceed to add the required validation.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个具有实现`setup()`方法和用于从Twitter账户获取推文的辅助`timeline()`方法的动作，我们可以继续添加所需的验证。
- en: 'Add the following custom validation method to the TwitterAccountBehavior class:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将以下自定义验证方法添加到`TwitterAccountBehavior`类中：
- en: '[PRE13]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let us now attach the behavior to the `Profile` model, and add the validation
    for the `twitter` field. Open your `app/models/profile.php` file and add the following
    `actsAs` property and the `twitter` field validation:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在将行为附加到`Profile`模型，并为`twitter`字段添加验证。打开您的`app/models/profile.php`文件，并添加以下`actsAs`属性和`twitter`字段验证：
- en: '[PRE14]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Just like the recipe *Creating a custom validation rule*, entering a nonexistant
    Twitter account should display the error message for the `twitter` field shown
    in the following screenshot:![How to do it...](img/1926_04_02.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像在*创建自定义验证规则*的食谱中一样，输入不存在的Twitter账户应该显示以下截图所示的`twitter`字段的错误消息：![如何操作...](img/1926_04_02.jpg)
- en: 'Let us now use other callbacks to get a certain number of tweets for each profile
    after a find operation is performed. Add the following `beforeFind()` and `afterFind()`
    methods to the `TwitterAccountBehavior` class:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在使用其他回调在执行查找操作后为每个配置文件获取一定数量的推文。将以下`beforeFind()`和`afterFind()`方法添加到`TwitterAccountBehavior`类中：
- en: '[PRE15]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Edit the `app/views/profiles/index.ctp` view and make the following changes:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`app/views/profiles/index.ctp`视图，并做出以下更改：
- en: '[PRE16]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After adding a valid Twitter account, browsing to `http://localhost/profiles`
    would generate a listing, such as the one shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加有效的Twitter账户后，浏览到`http://localhost/profiles`将生成一个列表，如下面的截图所示：
- en: '![How to do it...](img/1926_04_03.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_04_03.jpg)'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We started with the skeleton for our `TwitterAccountBehavior`, implementing
    the `setup()` method, called automatically by CakePHP whenever the behavior is
    attached to a model, and the `timeline()` method, which is nothing more than the
    `validateTwitter()` method shown in the recipe *Create a custom validation rule*
    optimized for reutilization.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从我们的`TwitterAccountBehavior`的骨架开始，实现了由CakePHP在行为附加到模型时自动调用的`setup()`方法，以及`timeline()`方法，这仅仅是*创建自定义验证规则*食谱中显示的`validateTwitter()`方法，经过优化以供重用。
- en: 'The `beforeFind` callback is triggered by CakePHP whenever a find operation
    is about to be executed, and we used it to check the existence of the custom `tweets`
    find setting. We use this setting to allow the developer to either disable the
    fetch of tweets, by setting it to `false`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeFind`回调在CakePHP即将执行查找操作时触发，我们使用它来检查自定义的`tweets`查找设置的是否存在。我们使用此设置允许开发者通过将其设置为`false`来禁用推文的获取：'
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'or specify how many tweets should be obtained. For example, if we wanted to
    obtain only the latest tweet, we would do:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 或者指定要获取的推文数量。例如，如果我们只想获取最新的推文，我们会这样做：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `afterFind` callback is executed after a find operation is executed, and
    gives us an opportunity to modify the results. Therefore we check to make sure
    we are told to obtain the tweets, and if so we use the `timeline()` method to
    obtain the specified number of tweets. We then append each tweet's basic information
    into the index `Tweet` for each profile.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`afterFind`回调在执行查找操作后执行，并给我们一个修改结果的机会。因此，我们检查是否被告知要获取推文，如果是，我们使用`timeline()`方法获取指定数量的推文。然后我们将每条推文的基本信息追加到每个配置文件的索引`Tweet`中。'
- en: There's more...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One thing that is clear in our implementation is that, unless we set the `tweets`
    find option to `false`; we are obtaining tweets for each profile record on every
    `find` operation performed against the `Profile` model. Adding caching support
    would greatly improve the performance of our `find` operations, since we would
    only obtain the tweets when the cached information is no longer valid.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实现中，有一件事是明确的，除非我们将 `tweets` 查找选项设置为 `false`，否则我们将在对 `Profile` 模型执行的每个 `find`
    操作中获取每个资料记录的推文。添加缓存支持将大大提高我们 `find` 操作的性能，因为我们只有在缓存信息不再有效时才会获取推文。
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about caching through CakePHP's Cache class can be obtained
    at [http://book.cakephp.org/view/1511/Cache](http://book.cakephp.org/view/1511/Cache).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 关于通过 CakePHP 的 Cache 类获取更多缓存信息的详细信息，请参阅 [http://book.cakephp.org/view/1511/Cache](http://book.cakephp.org/view/1511/Cache)。
- en: 'We will allow the developer to specify what cache configuration to use when
    caching tweets. Open the `TwitterAccountBehavior` class and make the following
    modifications to its `setup()` method:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将允许开发者指定在缓存推文时使用什么缓存配置。打开 `TwitterAccountBehavior` 类，并对其 `setup()` 方法进行以下修改：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'While editing the `TwitterAccountBehavior` class, make the following modifications
    to its `afterFind()` method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑 `TwitterAccountBehavior` 类时，对其 `afterFind()` 方法进行以下修改：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, add the following `beforeDelete` and `afterDelete` callback implementations:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加以下 `beforeDelete` 和 `afterDelete` 回调实现：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Using `beforeDelete()` we are storing the tweet that is to be deleted. If indeed
    the profile was deleted, the `afterDelete()` method will remove its cached tweets.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `beforeDelete()` 我们存储要删除的推文。如果确实删除了资料，`afterDelete()` 方法将删除其缓存的推文。
- en: See also
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Adding multiple validation rules*'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加多个验证规则*'
- en: '*Create a custom validation rule*'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义验证规则*'
- en: '*Using behaviors to add new fields for saving*'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用行为为保存添加新字段*'
- en: Using behaviors to add new fields for saving
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用行为为保存添加新字段
- en: In the recipe *Using callbacks in behaviors* we learnt how to implement different
    model callbacks to perform some tasks automatically. In this recipe we will continue
    that process and we will learn how to automatically save data that may not be
    provided in a `save` operation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *在行为中使用回调* 的配方中，我们学习了如何实现不同的模型回调来自动执行一些任务。在这个配方中，我们将继续这个过程，并学习如何自动保存可能不在 `save`
    操作中提供的资料。
- en: We will use the Twitter example we have been using in this chapter, so that
    when a profile is saved, its Twitter URL and its last tweet are saved when creating
    a new record, or when updating an existing one.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中一直在使用的 Twitter 示例，这样当保存资料时，其 Twitter URL 和最后一条推文将在创建新记录或更新现有记录时保存。
- en: Getting ready
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need a working `TwitterAccountBehavior` together with its controllers, models,
    and views. Follow the recipe *Using callbacks in behaviors* (there's no need to
    enable caching in the behavior, so you can omit the *There's more* section).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个工作的 `TwitterAccountBehavior` 以及其控制器、模型和视图。遵循 *在行为中使用回调* 的配方（在行为中不需要启用缓存，因此可以省略
    *还有更多* 部分）。
- en: 'Add two fields to the profiles table, `url` and `last_tweet`, by issuing the
    following SQL command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下 SQL 命令向用户资料表添加两个字段，`url` 和 `last_tweet`：
- en: '[PRE22]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit your `app/models/behaviors/twitter_account.php` file and add the following
    `beforeSave` implementation to the `TwitterAccountBehavior` class:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `app/models/behaviors/twitter_account.php` 文件，并将以下 `beforeSave` 实现添加到 `TwitterAccountBehavior`
    类中：
- en: '[PRE23]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Whenever we create a new profile with a valid Twitter account, both the `url`
    and `last_tweet` fields will be automatically populated. If we are instead modifying
    a profile, the `last_tweet` field will be updated to reflect the latest tweet
    from the relevant account.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当我们创建一个新的具有有效 Twitter 账户的资料时，`url` 和 `last_tweet` 字段将自动填充。如果我们正在修改资料，则 `last_tweet`
    字段将更新以反映相关账户的最新推文。
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `beforeSave` callback is triggered before a save operation is performed
    on a model, giving us the chance to add new fields to the set of fields that are
    about to be saved, or modify other field values.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在对模型执行保存操作之前，`beforeSave` 回调会被触发，这给了我们机会向即将保存的字段集合中添加新字段，或者修改其他字段的值。
- en: We started by determining which Twitter account is linked to the profile being
    saved. If no Twitter account is specified in the data that is about to be saved,
    and if we are modifying an existing record (we use `$model->exists()` for this
    check), we obtain the account specified in its `twitter` field. If instead there's
    an account specified in the data to be saved, we use that instead.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先确定与要保存的配置文件链接的Twitter账户。如果即将保存的数据中没有指定Twitter账户，并且如果我们正在修改现有记录（我们使用`$model->exists()`进行检查），则从其`twitter`字段中获取指定的账户。如果数据中指定了账户，则使用该账户。
- en: Regardless of the type of save operation that is about to be performed (creating
    or updating a record), we set the `last_tweet` field to the last tweet published
    by the specific Twitter account. However, we set the `url` field to the appropriate
    URL-based, on the Twitter account only when we are creating a new record.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 无论即将进行的保存操作类型（创建或更新记录）如何，我们都将`last_tweet`字段设置为特定Twitter账户发布的最后一条推文。然而，只有在我们创建新记录时，我们才将`url`字段设置为基于Twitter账户的适当URL。
- en: Once we have set the data to be saved in the `$data` array, we append that data
    to the `$model->data` property that contains all the information that will be
    saved. We then use the behavior's `_addToWhitelist()` method, defined in CakePHP's
    `ModelBehavior` class from which our behavior extends, so that if the developer
    has chosen to limit the save operation to only a specific set of fields, then
    our fields are guaranteed to be saved regardless of this restriction.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将要保存的数据设置到`$data`数组中，我们就将该数据追加到包含所有将要保存信息的`$model->data`属性中。然后我们使用行为中定义的`_addToWhitelist()`方法，该方法在CakePHP的`ModelBehavior`类中定义，我们的行为是从该类扩展的，这样如果开发者选择仅将保存操作限制在特定字段集，那么我们的字段将保证被保存，不受此限制的影响。
- en: See also
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Using callbacks in behaviors*'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在行为中使用回调*'
- en: Using the Sluggable behavior
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sluggable行为
- en: One of the main concerns most applications have is optimizing their content
    for search engines, so that their sites rank as high as possible on most engines.
    Among several recommendations found in most SEO (Search Engine Optimization) guides,
    building URLs that include relevant keywords is one of the most effective ones.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序的主要关注点之一是优化其内容以适应搜索引擎，以便在大多数搜索引擎上获得尽可能高的排名。在大多数SEO（搜索引擎优化）指南中找到的几项建议中，构建包含相关关键词的URL是最有效的一项。
- en: 'If we are building a content-based site, this is achievable by making sure
    that permanent links to each item include most of the words that are part of the
    item title. As an example, if we have a post whose title is *Top 10 CakePHP Behaviors*,
    an SEO-friendly URL could be:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在构建一个基于内容的网站，这可以通过确保每个项目的永久链接包含项目标题中的大多数单词来实现。例如，如果我们有一个标题为*Top 10 CakePHP
    Behaviors*的文章，一个SEO友好的URL可以是：
- en: '`http://localhost/articles/view/top-10-cakephp-behaviors`.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/articles/view/top-10-cakephp-behaviors`。'
- en: The `top-10-cakephp-behaviors` part is commonly known as a *slug*, a part of
    the URL that uses relevant keywords. In this recipe, we will learn how to use
    the publicly available `Sluggable` behavior to automatically add slugs to our
    application.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`top-10-cakephp-behaviors`部分通常被称为*slug*，它是URL的一部分，使用了相关关键词。在这个食谱中，我们将学习如何使用公开可用的`Sluggable`行为自动为我们应用程序添加slugs。'
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Sluggable` behavior is one of the many classes I released as open source
    to help fellow CakePHP developers. Feel free to send me any feedback.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sluggable`行为是我发布为开源的许多类之一，旨在帮助其他CakePHP开发者。请随时向我提供任何反馈。'
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through this recipe, we need a sample table to work with. Create a table
    named `posts`, using the following SQL statement:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，我们需要一个样本表来操作。使用以下SQL语句创建一个名为`posts`的表：
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We proceed now to create the required model. Create the model `Post` in a file
    named `post.php` and place it in your `app/models` folder, with the following
    contents:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在继续创建所需的模型。在名为`post.php`的文件中创建模型`Post`，并将其放置在您的`app/models`文件夹中，内容如下：
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create its appropriate controller `PostsController` in a file named `posts_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`posts_controller.php`的文件中创建相应的控制器`PostsController`，并将其放置在您的`app/controllers`文件夹中，内容如下：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a folder named `posts` in your `app/views` folder, then create the view
    to hold the form in a file named `add.ctp` and place it in your `app/views/posts`
    folder, with the following contents:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`app/views`文件夹中创建一个名为`posts`的文件夹，然后创建一个名为`add.ctp`的视图来保存表单，并将其放置在您的`app/views/posts`文件夹中，内容如下：
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Finally, we need to download the Syrup plugin for CakePHP. Go to [http://github.com/mariano/syrup/downloads](http://github.com/mariano/syrup/downloads)
    and download the latest release. Uncompress the downloaded file into your `app/plugins`
    folder. You should now have a directory named `syrup` inside `app/plugins`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要下载Syrup插件。访问[http://github.com/mariano/syrup/downloads](http://github.com/mariano/syrup/downloads)并下载最新版本。将下载的文件解压缩到你的`app/plugins`文件夹中。现在你应该在`app/plugins`中有一个名为`syrup`的目录。
- en: How to do it...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We start by attaching the `Sluggable` behavior to the `Post` model. Edit your
    `app/models/post.php` file and add the `$actsAs` property:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先将`Sluggable`行为附加到`Post`模型上。编辑你的`app/models/post.php`文件并添加`$actsAs`属性：
- en: '[PRE28]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s create an action to list posts. Add the following method to the `PostsController`
    class:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个列出帖子的操作。将以下方法添加到`PostsController`类中：
- en: '[PRE29]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create the view `views/posts/index.ctp` with the following contents:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图`views/posts/index.ctp`，内容如下：
- en: '[PRE30]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, create the action to view a post by slug. Add the following method to
    the PostsController class:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，创建一个通过slug查看帖子的操作。将以下方法添加到`PostsController`类中：
- en: '[PRE31]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create the view `views/posts/view.ctp` with the following contents:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建视图`views/posts/view.ctp`，内容如下：
- en: '[PRE32]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After creating some posts using the form at `http://localhost/posts`, the list
    of posts could look like the following screenshot:'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用`http://localhost/posts`上的表单创建了一些帖子后，帖子的列表可能看起来像以下截图：
- en: '![How to do it...](img/1926_04_04.jpg)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1926_04_04.jpg)'
- en: 'If you hover over the links, you should see SEO-friendly links. For example,
    for the post entitled *Automatic tasks with CakePHP*, its URL would be:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你悬停在链接上，你应该能看到SEO友好的链接。例如，对于标题为*使用CakePHP自动任务*的帖子，其URL将是：
- en: '[PRE33]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Clicking on this URL would show the details for the post.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此URL将显示帖子的详细信息。
- en: How it works...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `Sluggable` behavior implements the `beforeSave` callback to automatically
    add the generated slug on the specified field. It ensures that all generated slugs
    are unique, and provides a full set of options to modify how a slug is generated.
    The following options can be specified when attaching the behavior to a model:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sluggable`行为实现了`beforeSave`回调，以自动在指定的字段上添加生成的slug。它确保所有生成的slug都是唯一的，并提供了一整套选项来修改slug的生成方式。在将行为附加到模型时可以指定以下选项：'
- en: '| Option | Purpose |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 目的 |'
- en: '| --- | --- |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ignore` | List of words that should not be part of a slug. Optional, and
    defaults to: `and, for, is, of`, and `the`. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `ignore` | 不应包含在slug中的单词列表。可选，默认为：`and, for, is, of`和`the`。 |'
- en: '| `label` | Field name (string), or list of field names (in an array) that
    are used to create the slug. Defaults to a single field named `title`. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `label` | 用于创建slug的字段名称（字符串），或字段名称列表（数组中）。默认为一个名为`title`的单个字段。 |'
- en: '| `length` | Maximum length of the generated slug. Defaults to `100`. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `length` | 生成的slug的最大长度。默认为`100`。 |'
- en: '| `overwrite` | If set to `true`, the slug is generated even when modifying
    a record that already has a slug. Defaults to `false` |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `overwrite` | 如果设置为`true`，则在修改已经具有slug的记录时也会生成slug。默认为`false` |'
- en: '| `real` | If set to `true`, it will ensure that the field names defined in
    the `label` option exists in the table. Defaults to `true`. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `real` | 如果设置为`true`，将确保在`label`选项中定义的字段名称存在于表中。默认为`true`。 |'
- en: '| `separator` | Character to use when separating words in the slug. Defaults
    to `-`. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `separator` | 在slug中分隔单词时使用的字符。默认为`-`。 |'
- en: '| `slug` | Name of the field where the slug is stored. Defaults to `slug`.
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `slug` | 存储slug的字段名称。默认为`slug`。 |'
- en: Geocoding addresses with the Geocodable behavior
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Geocodable行为进行地址地理编码
- en: Since the introduction of Google Maps and other location services, a broad set
    of possibilities are open to web applications, allowing geographical information
    to be used for building services.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Google Maps和其他位置服务推出以来，网络应用打开了一系列可能性，允许使用地理信息来构建服务。
- en: This recipe shows how to use the Geocode plugin to add location information
    to our own `Address` model, allowing us to search address records by proximity.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱展示了如何使用Geocode插件将位置信息添加到我们自己的`Address`模型中，使我们能够通过邻近性搜索地址记录。
- en: Note
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: The `Geocode` plugin is another open source project I released. More information
    about it can be obtained at [http://github.com/mariano/geocode](http://github.com/mariano/geocode).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`Geocode`插件是我发布的另一个开源项目。更多关于它的信息可以在[http://github.com/mariano/geocode](http://github.com/mariano/geocode)找到。'
- en: Getting ready
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `addresses`, using the following SQL statement:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一个用于工作的示例表。使用以下 SQL 语句创建一个名为 `addresses` 的表：
- en: '[PRE34]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We proceed now to create the required model. Create the model `Address` in
    a file named `address.php` and place it in your `app/models` folder with the following
    contents (we are only specifying a few states for readability):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在继续创建所需的模型。在 `app/models` 文件夹中创建名为 `Address` 的模型，在名为 `address.php` 的文件中放置以下内容（我们只指定了几个状态以提高可读性）：
- en: '[PRE35]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create its appropriate controller `AddressesController` in a file named `addresses_controller.php`
    and place it in your `app/controllers` folder. With the following contents:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 创建相应的控制器 `AddressesController`，在名为 `addresses_controller.php` 的文件中，并将其放置在 `app/controllers`
    文件夹中。内容如下：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create a folder named `addresses` in your `app/views` folder, then create the
    view to hold the form in a file named `add.ctp` and place it in your `app/views/addresses`
    folder, with the following contents:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `app/views` 文件夹中创建一个名为 `addresses` 的文件夹，然后创建一个名为 `add.ctp` 的视图文件来保存表单，并将其放置在
    `app/views/addresses` 文件夹中，内容如下：
- en: '[PRE37]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We need to download the Geocode plugin for CakePHP. Go to [http://github.com/mariano/geocode/downloads](http://github.com/mariano/geocode/downloads)
    and download the latest release. Uncompress the downloaded file into your `app/plugins`
    folder. You should now have a directory named `geocode` inside `app/plugins`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要下载 CakePHP 的 Geocode 插件。请访问 [http://github.com/mariano/geocode/downloads](http://github.com/mariano/geocode/downloads)
    并下载最新版本。将下载的文件解压缩到您的 `app/plugins` 文件夹中。现在您应该在 `app/plugins` 文件夹内有一个名为 `geocode`
    的目录。
- en: Finally, we need to sign up for a Google Maps API key. To do so, go to [http://code.google.com/apis/maps/signup.html](http://code.google.com/apis/maps/signup.html)
    and follow the instructions given.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要注册一个 Google Maps API 密钥。为此，请访问 [http://code.google.com/apis/maps/signup.html](http://code.google.com/apis/maps/signup.html)
    并遵循给出的说明。
- en: Note
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Geocode plugin also supports Yahoo maps. If you wish to use Yahoo Maps instead,
    follow the instructions shown on the plugin homepage.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Geocode 插件也支持 Yahoo 地图。如果您希望使用 Yahoo 地图而不是 Google 地图，请遵循插件主页上的说明。
- en: How to do it...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Edit your `app/config/bootstrap.php` file and place the following statement
    right before the closing PHP statement, replacing the string `APIKEY` with your
    own Google Maps API key:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的 `app/config/bootstrap.php` 文件，并在关闭 PHP 语句之前放置以下语句，将字符串 `APIKEY` 替换为您自己的
    Google Maps API 密钥：
- en: '[PRE38]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We will now make our `Address` model extend the skeleton model provided by
    the plugin. Edit your `app/models/address.php` file and make the following changes:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将使我们的 `Address` 模型继承插件提供的骨架模型。编辑您的 `app/models/address.php` 文件并做出以下更改：
- en: '[PRE39]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: By extending `GeoAddress`, the `Geocodable` behavior is automatically attached
    to our model. We can now use the form at `http://localhost/addresses/add` to add
    new addresses. After adding quite a few, we are ready to implement a paginated
    listing with support to finding addresses that are near a certain location.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过扩展 `GeoAddress`，`Geocodable` 行为会自动附加到我们的模型上。现在我们可以使用 `http://localhost/addresses/add`
    上的表单来添加新的地址。添加了相当多的地址后，我们就准备好实现一个支持查找特定位置附近地址的分页列表。
- en: 'To simplify this operation, we will force the point of origin in our controller
    action, instead of letting the user specify the address. With this in mind, add
    the following action to the `AddressesController` class:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了简化这个操作，我们将在控制器操作中强制指定起点，而不是让用户指定地址。考虑到这一点，向 `AddressesController` 类中添加以下操作：
- en: '[PRE40]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now create the view `app/views/addresses/index.ctp`, with the following contents:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建视图 `app/views/addresses/index.ctp`，内容如下：
- en: '[PRE41]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If you inserted sample addresses that are near the specified address, the output
    could be similar to that shown in the following screenshot:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您插入了靠近指定地址的示例地址，输出可能类似于以下截图所示：
- en: '![How to do it...](img/1926_04_05.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/1926_04_05.jpg)'
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We started by downloading the plugin and configuring it by setting our own Google
    Maps API key in the `bootstrap.php` configuration file. We then made our `Address`
    model inherit from the `GeoAddress` model provided by the plugin, which makes
    our model use the `Geocodable` behavior, and implements the `near` custom find
    type.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先下载了插件，并通过在 `bootstrap.php` 配置文件中设置我们自己的 Google Maps API 密钥来配置它。然后，我们使我们的
    `Address` 模型继承插件提供的 `GeoAddress` 模型，这使得我们的模型使用 `Geocodable` 行为，并实现了 `near` 自定义查找类型。
- en: Since our `Address` model is now attached to the `Geocodable` behavior, every
    time we create new address records the plugin will use the Google Maps API to
    save the appropriate location in the `latitude` and `longitude` fields.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的`地址`模型现在附加了`可地理编码`行为，每次我们创建新的地址记录时，插件将使用谷歌地图API在`纬度`和`经度`字段中保存适当的位置。
- en: Using the `near` custom find type, we can easily find addresses that are near
    a certain address, and we can also see what distance separates each of those addresses
    from the point of origin.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`near`自定义查找类型，我们可以轻松地找到靠近某个地址的地址，我们还可以看到每个地址与起点之间的距离。
- en: There's more...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Geocode plugin is quite flexible, and even includes a helper to show addresses
    in a visual map. To find out all it has to offer, go to its website at [http://github.com/mariano/geocode](http://github.com/mariano/geocode).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 地理编码插件非常灵活，甚至包括一个显示地址在可视地图中的辅助工具。要了解它提供的一切，请访问其网站[http://github.com/mariano/geocode](http://github.com/mariano/geocode)。
