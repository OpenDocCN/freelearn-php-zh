- en: Chapter 10. Working with Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing ImageMagick on MAC with Cactuslab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading images with CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating thumbnails – resizing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cropping images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding watermarks with text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding watermarks with image overlays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting a form with CodeIgniter CAPTCHA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter has a useful array of tools to help you manipulate and amend images
    in the form of the image manipulation class; it's not Photoshop, but it's good
    enough for most of what you'll need to do in your day-to-day web development.
    It has functionalities to help you upload images, resize them, create thumbnails,
    add watermarks, crop, and rotate—all very useful things and exactly what you'll
    be after in a development environment. Here's how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing ImageMagick on MAC with Cactuslab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the features of the CodeIgniter image manipulation class require GD2,
    however, other features require ImageMagick. If you're using MAMP on MAC, then
    the chances are that you won't have it installed by default. Cactuslab have produced
    an installer that does the job for you.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the URL [http://www.cactuslab.com/imagemagick](http://www.cactuslab.com/imagemagick).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the installer. At the time of writing this, the latest version is ImageMagick
    6.8.6-3 for Mac OS X 10.5 - 10.8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the installer, and if all goes well, you should now have ImageMagick installed.
    You''ll need to set the `$config[''library_path'']` value to `/opt/ImageMagick/bin`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The installer takes care of everything for you: it''s voodoo!'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading images with CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is similar to the file upload recipe mentioned earlier in the book; however,
    it differs from it, as we're making CodeIgniter upload images (rather than upload
    any file type) and perform specific tasks on images, which wouldn't be relevant
    to the other upload example in the book. Hence, consider this as a separate upload
    script. This script is the base script for the other recipes (apart from the CAPTCHA
    recipe) in this chapter—that is to say that the rotating, watermarking, resizing
    recipes and so on require this base recipe to function.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/upload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/upload/upload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller file, `upload.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/views/upload/upload.php` file
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the `upload` controller is run in the browser the user is presented with
    the form (which is in the view file `views/ipload/upload.php`). The user selects
    an image and presses the **Submit** button public function `do_upload()` is then
    called. We immediately define some settings which the image being uploaded is
    checked against, such as allowed image types, maximum size and dimensions, these
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If the image being uploaded meets these requirements, the image can be moved
    to the location specified in `$config['upload_path']` where it is stored, ready
    should you need it.
  prefs: []
  type: TYPE_NORMAL
- en: Generating thumbnails – resizing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously having the functionality to generate thumbnails is a useful thing
    to do. Most web developers have had the requirement to create thumbnails of images
    they are currently uploading, or images previously uploaded, from time to time.
    Usually that processing would have been done directly with PHP or whichever programming
    language you may have been using; but CodeIgniter gives you the ability to create
    thumbnails easily, and this is how you do it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that the `Image_manip` library class is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also ensure that you have the image library, GD2, installed and that you have
    this chapter's "base" recipe—that is *Uploading images with CodeIgniter*—already
    copied and ready to go, as this recipe uses the code from *Uploading images with
    CodeIgniter* as a base recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re going to amend the following files from the previous recipe, *Uploading
    images with CodeIgniter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/upload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alter the `do_upload()` function, changing it to reflect the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the `image_manip` library to add the following function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the `upload` controller is run in the browser the user is presented with
    the form (which is in the view file `views/ipload/upload.php`). The user selects
    an image and presses the **Submit** button after which `public function do_upload()`
    is called. We immediately define some settings against which the image being uploaded
    is checked, such as allowed image types, maximum size and dimensions - just as
    we would in the *Uploading images with CodeIgniter* recipe. Assuming that the
    upload was successful and there were no errors we call the `resize_image()`function
    in the `image_manip` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `resize_image()` function grabs the main CodeIgniter object in `$CI` and
    loads its own `image_lib` library, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `image_lib` library will be used by CodeIgniter to perform the changes on
    the image using the parameters we provided in the `$data` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'We call `$CI->image_lib->resize()`, testing for a returned `TRUE` value. If
    it returns `FALSE`, we then return any error messages from the operation. Otherwise,
    a thumbnail has been created, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Rotating images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter allows for the rotation of images; this is useful if you need to
    flip something vertically or in any other direction. Here's how it's done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that the `image_manip` library class is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also ensure that you have the image library, ImageMagik, installed that you
    have this chapter's "base" recipe—that is *Uploading images with CodeIgniter*—already
    copied and ready to go, as this recipe uses the code from *Uploading images with
    CodeIgniter* as a base recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to amend the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/upload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following function to the `image_manip.php` library file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alter the `do_upload()` function, changing it to reflect the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the upload controller is run in the browser the user is presented with
    the form (which is in the view `views/ipload/upload.php` file) . The user selects
    an image and presses the **Submit** button, `public function do_uplaod()` is then
    called. We immediately define some settings against which the image being uploaded
    is checked, such as allowed image types, maximum size, and dimensions—just as
    we would in the *Uploading images with CodeIgniter* recipe. Assuming that the
    upload was successful and there were no errors, we fetch `full_path` from the
    upload data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Assign it as a local variable `$original_image`. We then define an array (`$data`)
    with all the configuration settings which CodeIgniter requires to crop the image
    (be sure to get the `library_path` correct). We pass this `$data` array to the
    library function, `rotate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This performs the rotate operation on the image.
  prefs: []
  type: TYPE_NORMAL
- en: Cropping images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is going to be most useful and relevant when coupled with a frontend mechanic,
    allowing the user to select an area of an image; however, I'm including the code
    here as you may need it. You never know!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that the `image_manip` library class is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also ensure that you have the image library, ImageMagik, installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're using MAMP on a MAC, chances are that you don't have ImageMagick installed
    by default. There is a process to installing ImageMagick on MAMP; however, there's
    a quicker way. There's an installer available from Cactuslab at [http://www.cactuslab.com/imagemagick](http://www.cactuslab.com/imagemagick),
    and it works like a charm. The *Installing ImageMagick on MAC with Cactuslab*
    recipe is also available in this chapter explaining the installation process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ensure that you have this chapters 'base' recipe that is *Uploading images with
    CodeIgniter* already copied and ready to go as this recipe uses the code from
    *Uploading images with CodeIgniter* as a base recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to amend the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/upload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alter the do_upload() function, changing it to reflect the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the following function in the `image_manip` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the `upload` controller is run in the browser the user is presented with
    the form (which is in the view `views/ipload/upload.php` file). The user selects
    an image and presses the **Submit** button, `public function do_uplaod()` is then
    called. We immediately define some settings against which the image being uploaded
    is checked, such as allowed image types, maximum size, and dimensions—just as
    we would in the *Uploading images with CodeIgniter* recipe. Assuming that the
    upload was successful and there were no errors we fetch the `full_path` from the
    upload data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We assign it as a local variable, `$original_image`. We then define an array
    (`$data`) with all the configuration settings which CodeIgniter requires to crop
    the image (be sure to get the `library_path` variable correct). We pass this `$data`
    array to the library function, `crop_image`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This performs the cropping operation on the image.
  prefs: []
  type: TYPE_NORMAL
- en: Potential errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may see some or all (or perhaps entirely different) error messages while
    coding this recipe. The following are some of those errors and possible solutions
    (if all else fails, Google it):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Error**: Image processing failed. Please verify that your server supports
    the chosen protocol and that the path to your image library is correct.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Possible Solution**: It may be that the path to your image library is incorrect
    or that the configuration settings for the image library are wrong. Verify that
    you have the correct library installed and that the path is correct. To do this,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type `cd /usr/X11R6/bin` in your terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then type `ls` (or `dir` on Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the ImageMagick library there. If you cannot see it, then it's probably
    not installed, and you'll need to install it to be able to perform the cropping
    operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you install ImageMagick? Well, there are many instructions and tutorials
    on the Internet which can help. However, if you're using MAMP, go to the *Installing
    ImageMagick on MAC with Cactuslab* recipe in this chapter and use the installer
    to help that can install ImageMagick and do the leg work of the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: However be aware that the library path won't be `/use/X11R6/bin/` (with the
    trailing slash) like it is in the CodeIgniter documentation; it will be `/opt/ImageMagick/bin`
    (without the trailing slash).
  prefs: []
  type: TYPE_NORMAL
- en: Adding watermarks with text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding a watermark can be a useful way to tag images with your copyright (just
    make sure you're the copyright owner). CodeIgniter comes with an easy method to
    apply a watermark to an image. Watermarks can be either text or an image overlay
    and can be positioned on an original image at any position you wish. The following
    is a description of how to add text watermarks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that the `image_manip` library class is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also ensure that you have the image library, GD2, installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have this chapters base recipe that is *Uploading images with
    CodeIgniter* already copied and ready to go as this recipe uses the code from
    *Uploading images with CodeIgniter* as a base recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to amend the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/uplod.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following function to the `image_manip.php` library file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alter the `do_upload()` function, changing it to reflect the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the `upload` controller is run in the browser the user is presented with
    the form (which is in the view file `views/ipload/upload.php`). The user selects
    an image and presses the **Submit** button, `public function do_uplaod()` is then
    called. We immediately define some settings against which the image being uploaded
    is checked, such as allowed image types, maximum size and dimensions just as we
    would in the *Uploading images with CodeIgniter* recipe. Assuming that the upload
    was successful and there were no errors we fetch the `full_path` from the upload
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Assign it as a local variable, `$original_image`. Next, we''ll define an array
    (`$data`) with all the necessary settings to allow CodeIgniter to perform a watermark
    overlay on our uploaded image. There are a couple of interesting settings I''ll
    go through in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Setting | Options | How we''re applying it |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_type` | `text`, `overlay` | In this recipe, it''s set to text, which
    tells CodeIgniter that it has to write text over the image, rather than call an
    image as the overlay. In the next recipe, we''ll look at overlay watermarking.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `wn_vrt_alignment` | `top`, `middle`, `bottom` | We''re telling CodeIgniter
    that it should place the text towards the middle of the uploaded image. |'
  prefs: []
  type: TYPE_TB
- en: '| `wn_hor_alignment` | `left`, `center`, `right` | We''re telling CodeIgniter
    that it should place the text towards the left of the uploaded image. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_font_color` | Any hexadecimal value (see the following tip for a useful
    URL) | We''re writing the text as white for no other reason than the image I used
    to test this code on was quite dark—a romantic sunset (ahh)—but you can of course
    change it to any hexadecimal value you wish. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_font_path` | `./system/fonts/texb.ttf` | This is the font which comes
    with CodeIgniter; it''s a bit industrial and you may want to change it for another,
    either copy a different true type font into the `./system/fonts/` directory, or
    link to one outside that directory. |'
  prefs: []
  type: TYPE_TB
- en: 'The following URL has a list of hexadecimal color values: [http://www.w3schools.com/html/html_colors.asp](http://www.w3schools.com/html/html_colors.asp).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding watermarks with image overlays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter can add watermarks with text as detailed in the preceding recipe,
    but CodeIgniter can also by overlaying a watermark image on top of a base image.
    Here's how it's done…
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to use a library of our own for this. If you haven''t already
    done so (in the other recipes in this chapter), create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that the `image_manip` library class is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This recipe is based on the *Adding watermarks with text* recipe. Make sure
    you have followed that recipe first. We're going to make a few code changes to
    it to help us with watermark overlays.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to amend the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/uplod.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/image_manip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following function to the library file `image_manip.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line (in bold) to the constructor so that the entire constructor
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alter the `do_upload()` function, changing it to reflect the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the same basic functionality as the *Adding watermarks with text* recipe.
    However, instead of the `wm_type` being `text`, we have set it to `overlay`. We
    have added the config array item, `wm_overlay_path`, and set it to where we have
    the overlay image stored (in this case, we have placed the overlay image in the
    same folder as the uploads; of course, you can move it anywhere on your system,
    but it's here to keep it simple). We have also removed the array item, `wm_text`,
    which is now not needed (however, you can keep it if you wish, it'll not interfere
    with the image overlay).
  prefs: []
  type: TYPE_NORMAL
- en: Submitting a form with CodeIgniter CAPTCHA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is sometimes necessary to add a little more security to a form other than
    escaping and validating user input; sometimes you may wish to ensure that a human
    and not some script or bot is entering data and submitting your form.
  prefs: []
  type: TYPE_NORMAL
- en: A tried and tested way of doing this is **CAPTCHA**. There are alternatives
    to CAPTCHA; for example, a mathematic question (what's 10 + 7, for example) is
    fairly easy to construct in your application. A new method is getting your users
    to play a short game. Based on how they do, they are assessed as being either
    a human or a bot; [areyouahuman.com](http://areyouahuman.com) is a good resource
    for this. But for now, we'll concentrate on CodeIgniter's CAPTCHA functionality
    to make a CAPTCHA protected form for us.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to store the CAPTCHA information CodeIgniter generates for us
    in a table in the database. To do that, we first need to create that table. The
    following is the MySQL code to do that. Copy the following into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to make the following four files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/comments.php`: This is a controller
    which helps in processing a name, e-mail address, and comment from the user, and
    it also calls a helper to process the CAPTCHA data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/helpers/make_captcha_helper.php`: This helper
    contains the code necessary for generating a CAPTCHA image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/captcha_model.php`: This model is
    used to check the CAPTCHA value from the user against that stored in the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/comments/post_form.php`: This view
    file will display the form (name, e-mail, comments, and so on) and the CAPTCHA
    image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `controllers/comments.php` controller file and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next create the `helpers/make_captcha_helper.php` helper file and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '`img_path` and `img_url` are two interesting settings here. `img_path` should
    be the path to the image folder on the file system, and `img_url` should be the
    path of your image as it would be displayed in a web browser. CodeIgniter uses
    `img_url` to build a HTML `img` tag, and it is this that is sent to the `post_form`
    as `$data[''img'']`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `models/captcha_model.php` model file and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create the `comments/post_form.php` view file and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The comments controller loads `public function index()`, which sets the validation
    environment for when or if the user submits the form. As `$this->form_validation->run()`
    will equal `FALSE` (as the form hasn''t been submitted yet), the `make_captcha_helper`
    function, `make_captcha()`, is called, sending it''s returned values to the `comments/post_form`
    view, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The `make_captcha_helper` function, `make_captcha()`, will grab the main CodeIgniter
    object, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'It defines the values necessary to build the CAPTCHA image, as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'These values are stored in the `$data` array, which is passed to the CodeIgniter
    helper, `captcha`, which returns to us the `$cap` array. `$cap` is passed to the
    database function, `insert_string()`, so the CAPTCHA information can be saved
    to the database, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We'll use this row in the database for comparison with the data entered by the
    user when they submit the form.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `make_captcha` helper returns an HTML `img` tag string to our comments
    controller. This is saved in the `$data` array and passed to the `post_form` view
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The user is then shown the HTML form, with name, e-mail, comments inputs, as
    well as an image of the CAPTCHA and a textbox in which to type the CAPTCHA string
    they see. The user then completes the form, carefully entering their data along
    with the string from the CAPTCHA image, and clicks on the **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming validation is passed (there were no form errors), the comments controller
    will then begin to compare the CAPTCHA string inputted by the user to the one
    in the database created by the `make_captcha` helper.
  prefs: []
  type: TYPE_NORMAL
- en: 'It starts this process by first cleaning the database of old CAPTCHA rows (in
    this example, old is anything older than two hours); it does this by defining
    the current time (as a unix time stamp) minus two hours (or `7200` seconds), this
    is set as the `$expiration` time, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Captcha_model` function, `delete_expired()`, is called, passing the expiration
    to it. This model function will delete rows in the database whose `captcha_time`
    is less than the expiration time, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Once old CAPTCHAS are removed from the database, a `$data` array is created
    and populated with the user's CAPTCHA input, their IP address, and again, the
    `$expiration` time (the one we made to remove old rows). This `$data` array is
    passed to the `Captcha_model` function, `does_exist()`. This model function will
    check whether the CAPTCHA string entered by the user exists in the database, and
    if so, is valid (that is, less than two hours old and matching the provided IP
    address). The model function returns the number of rows found, as shown in the
    following code snippet
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: If zero rows exist, then `$data['errors']` is given an error message. `make_captcha()`
    is called again, a new CAPTCHA image is generated and sent to the `post_form`
    view, and the error message is displayed to the user above the new CAPTCHA image.
    The system then waits for the user to fill in the form again and have another
    go.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the result wasn't zero, then the CAPTCHA string entered by the user
    was correct, so we display a quick message to them and echo out their input. In
    reality, you can do what you like here, such as process their message and save
    it to a blog feed, or redirect them to another area on the site, whatever you
    wish.
  prefs: []
  type: TYPE_NORMAL
