- en: Chapter 7. Creating a Secure User Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Escaping user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing cross-site request forgery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escaping data – for a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTTPS with CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, a disclaimer: no method or system can ever be entirely foolproof and
    secure all the time, and you should be aware of the correct security measures
    that you should apply for the programming task or context in which you are coding.
    I will put some links to other information resources at the end of this chapter.
    Having said that, CodeIgniter offers some useful techniques for reducing the chance
    that something can go wrong, for example, in this chapter are several recipes
    that can help reduce the chances of something untoward--however, you should always
    remain vigilant and ensure that you''re building securely.'
  prefs: []
  type: TYPE_NORMAL
- en: Escaping user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CodeIgniter security class function, `xss_clean()`, attempts to clean input
    from the `POST` or `COOKIE` data to mitigate against techniques that can allow
    for the injection of code into a website. For example, it would seek to prevent
    JavaScript code from being executed if it is included in a blog post submitted
    by a user, or look at the data submitted in a text input field and escape disallowed
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can apply this to any controller you''re creating, or if you''ve extended
    using `MY_Controller`, you can add it to that if you wish. You can also autoload
    the security helper by adding it to `$autoload[''helper''] = array()` in the `/path/to/codeigniter/application/config/autoload.php`
    file. To be explicitly clear, here we''re loading the security helper in the constructor
    of the controller (that is, any controller you have):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two ways to do this, globally (CodeIgniter does it every time it encounters
    the `POST` or `COOKIE` data), and individually (CodeIgniter lets you define when
    to call the clean `COOKIE` or `POST` data).
  prefs: []
  type: TYPE_NORMAL
- en: Globally
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CodeIgniter can call xss_clean() automatically each time it encounters the
    POST or COOKIE data without you needing to explicitly call xss_clean(). To do
    this, you''ll need to amend the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/config/config.php`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the value of `$config[''global_xss_filtering'']` to `TRUE`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: However, be aware that there is a computational overhead in doing so and it
    may not always be necessary for you to run this all the time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Individually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ensure that `$config[''global_xss_filtering'']` is set to `FALSE`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will turn off global XSS filtering. When you wish to use `xss_cean()`,
    enter the following code into your controller or model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In either example, you're calling the same CodeIgniter method; one is being
    called automatically and the other is calling it on a case-by-case basis. The
    code in question can be found at `/path/to/codeigniter/system/core/Security.php`
    (find the function, `xss_clean()`).
  prefs: []
  type: TYPE_NORMAL
- en: Preventing cross-site request forgery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A cross-site request forgery is where an attacker pretends to be a user that
    the website recognizes (such as a logged-in user), and the attacker is then able
    to access a logged-in user's profile as though they were the genuine user. There
    is a wealth of technical information available, such as websites, books, and so
    on, on how that happens, which is why we're not going to look into that here.
    Instead, we're going to look at how CodeIgniter mitigates against cross-site request
    forgeries.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to amend one file and create two files by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to amend some configuration items. To do that, we''ll need to
    open the following file: `/path/to/codeigniter/application/config/config.php`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the following configuration options and make the amendments as listed
    in the table:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Configuration Item | Default Value | Change to/Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''csrf_protection'']` | `TRUE` | Specifies whether to turn request
    forgery protection on or off |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''csrf_token_name'']` | `csrf_test_name` | Specifies the name of
    the hidden form element used in a form (see the *How it works...* section) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''csrf_cookie_name'']` | `csrf_cookie_name` | Specifies the name
    of the cookie that is set on the user''s machine |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''csrf_expire'']` | `7200` | The number of seconds that a single
    token is allowed to exist for; after this time, if a form is submitted, CodeIgniter
    will throw an error |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Next, we create the following two files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/csrf.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/csrf/csrf.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following code into the, `csrf.php` controller. This controller will
    load the required helpers and display the simple form in the `views/csrf/csrf.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code into the, `csrf.php` view file. This view will create
    the HTML form. We''re using CodeIgniter''s `form_open()` facility to do the work
    for us so that we don''t have to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you load the controller in the web browser and view the HTML source of the
    page, you should see the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Take a close look at the highlighted line. CodeIgniter has added a hidden form
    element named `csrf_test_name`. We set the name in the configuration file, `config.php`
    (details explained earlier) The actual value of this field will be different every
    time you run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what happens when you click on the **Submit** button? Well, CodeIgniter
    compares the value set in the cookie on the user''s machine (set as `csrf_cookie_name`
    in `config.php`) to the value set in the hidden form element (set as `csrf_test_name`
    in `config.php`). If the two values do not match, CodeIgniter assumes that there
    is a problem and throws an error, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see this yourself by adjusting the `csrf_exipre` value from the default,
    `7200` seconds, to something a little easier to wait for, such as `10` seconds.
    Then load the controller in a browser, wait for the new set value of seconds,
    and click on the **Submit** button. You'll see the preceding error. Remember to
    put this value back to `7200` (or whatever you wish) after you have finished.
  prefs: []
  type: TYPE_NORMAL
- en: This CSRF check enables CodeIgniter to mitigate against CSRF as the cookie set
    on a user's machine is unlikely to be guessed and imitated by an attacker on another
    machine who can then set that value in `csrf_cookie_name` and `csrf_test_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CSRF protection in CodeIgniter is unsuitable for AJAX forms.
  prefs: []
  type: TYPE_NORMAL
- en: Escaping data – for a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's never a good idea to trust any information or data that comes the user;
    you should always consider any data from the user to be untrustworthy and potentially
    dangerous. You are strongly advised to ensure that you escape any data coming
    in from the user, and never trust any data from the user unless you have passed
    it through various processes that should make that data safe enough to work with.
    One of these techniques is **escaping data**. This recipe demonstrates the escaping
    of variables in a database query.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we''ll need to create a database table. For this example, let''s assume
    the database table is named `escape`. Enter the following SQL into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve created the database table, we''ll begin escaping input from
    the user. We''re going to create the following three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/escape.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/escape_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/escape/escape.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the, `/path/to/codeigniter/application/controllers/escape.php` file,
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the, `/path/to/codeigniter/application/views/escape/escape.php` file,
    and add the following code to it. The `escape.php` controller will display a simple
    form to the user asking them to enter their first and last name, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the, `/path/to/codeigniter/application/models/escape_model.php` file,
    and add the following code to it. As we''re explicitly typing the query, we''re
    going to use `$this->db->escape()` to do the escaping for us as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, if you load the controller in your browser, you''ll see the form. This
    form asks the user to enter their first file name and last () name, so let''s
    enter `Rob''s` as the first name and `Foster` as the last name. You''ll notice
    that there''s an apostrophe at the end of word *Rob*, go ahead and click on the
    **Submit** button. The form should submit to the `escape.php` controller, which
    will package up the post input into an array and send to the model. This is where
    the work begins; take a look at the highlighted text in the preceding model script,
    check out the lines, `$this->db->escape($data[''firstname''])` and `$this->db->escape($data[''lastname''])`,
    the CodeIgniter function is escaping the input passed to it, and inserting it
    safely into the database. You can see this by looking in the database; to do this,
    run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can, for the sake of demonstration, remove `$this->db->escape()` from the
    model query and see what happens. Amend the code in the model to reflect the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see a database error, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see from the preceding error that the values for first name and last
    name haven't been properly escaped. In fact, the apostrophe in *Rob* (`Rob's`)
    is treated as SQL query syntax rather than an actual variable. You can see how
    `$this->db->escape()` works for you to make queries safer and easier.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two more escaping functions you should be aware of, these are `escape_str()`
    and `escape_like_str()`. Their use is identical to `escape()`; however, you would
    call each function with `$this->db->escape_str()` and `$this->db->escape_like_str()`
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: What are they for? Well, `escape_str()` will still escape data passed to it
    like the `escape()` function does, but it can also escape data other than just
    strings (which `escape()` is limited to). `escape_like_str()` can be used when
    you're relying on wildcards to narrow down query results. For more information,
    go to [http://ellislab.com/codeigniter/user-guide/database/queries.html](http://ellislab.com/codeigniter/user-guide/database/queries.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using HTTPS with CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using SSL is a huge topic, as is online security in general; therefore, I strongly
    recommend you read widely about web security (because this recipe isn't really
    a security primer). However, if you specifically wish to protect certain pages
    with an SSL certificate, there is an easy way to do it. We can create a CodeIgniter
    helper file to toggle SSL support on or off. Let's see how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I'm sure you know of the benefits of requiring certain pages in a website to
    be protected with an SSL certificate. The sight of that green address bar and
    little padlock can go a long way in allaying a user's concerns with entering data
    in a website. CodeIgniter doesn't come with SSL support built-in; however, it
    is perfectly easy to implement using a simple helper. Obviously, SSL support isn't
    the be-all and end-all of website security, and should always be implemented alongside
    other security measures to mitigate against unwanted visitors.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to create a recipe that enables a user to view a page that isn't
    secured behind a HTTPS connection, and have them click on a link that will redirect
    them to a page that is secured behind a HTTPS connection. The parts of the code
    that implement the HTTPS connection and check whether a page is being viewed via
    HTTPS are highlighted, so you can quickly get into the bones of what's happening.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to create the following five files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/https/with_https.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/https/without_https.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/with_https.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/without_https.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/helpers/ssl_helper.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the, `/path/to/codeigniter/application/views/https/with_https.php` file,
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/views/https/without_https.php`
    file, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/controllers/with_https.php` file.
    This controller will load the `ssl_helper` and set support to `on.`It will also
    display a link to the `without_https` controller. Add the following code to the
    `With_https` controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/controllers/without_https.php`
    file, and add the following code to it. This controller will load the `ssl_helper`
    and set SSL support to `off`. It will also display a link to the `with_https`
    controller. Add the following code to the `Without_https` controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/helpers/ssl_helper.php` file.
    This helper will take one function argument passed to it by the calling controllers
    and alter the `base_url` value depending on whether we need SSL support or not.
    Add the following code to the helper, `ssl_helper`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Port 443 is the default HTTPS port; however, this might not always be the case,
    and the SSL port may be configured differently on your environment and it may
    be another number on the system you're developing on or developing for. Remember
    to use the correct port in your environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Whichever controller we load (`with_https` or `without_https`), one of the
    first things done in the constructor is to load the helper, `ssl_helper`, with
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see this line highlighted in each controller. We then need to call
    the helper function, `toggle_ssl(string)`, passing a string of either `on` or
    `off to it`. Obviously, `on` will enforce SSL and `off` will remove it. When the
    `ssl_helper` is called, it immediately calls (by reference: using `&` to copy
    by reference) the main CodeIgniter super object. We can see it being called by
    reference by inclusion of the ampersand character before the PHP function, `get_instance()`.
    The object is then stored for us to use in the helper as the variable, `$CI,`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on the value passed to it, the helper will do one of the following
    three things:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the value is `on`, then we wish to turn on SSL support. Using the PHP function,
    `str_replace`, we swap the `http://` part of the `base_url` value to `https://`,
    saving that on the fly as CodeIgniter''s new `base_url` value as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the value is `off`, we do exactly the same but in reverse. We swap the `https://`
    part of the current `base_url` value to `http://` as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After both preceding `str_replace`, we test the current value of the `$_SERVER`
    array element, `SERVER_PORT;`, redirecting accordingly.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the value passed to `toggle_ssl` isn't either `on` or `off`, then the default
    action will set SSL support to `off`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of you may not be familiar with setting up SSL on your machine. Setting
    SSL up is out of the scope of this book; however, it's quite simple to do. There's
    a great link from the Apache Foundation in the following section that details
    how to set up an SSL certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up HTTPS on localhost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible to set up HTTPS on localhost (assuming that's what you're developing
    on). I've found an URL that's particularly helpful in getting a self-certified
    SSL certificate on localhost.
  prefs: []
  type: TYPE_NORMAL
- en: 'A self-certified SSL certificate is just an SSL certificate which you''ve made
    yourself. It''s going to be just as good as one you purchase; however, if you
    push it to a live production environment and an actual user visits. Their browser
    will tell them the issuing authority is unknown (because you made it yourself),
    the user will probably think that this means that the site is dangerous and leave.
    Therefore, for a live site, you''ll need a certificate from a recognized issuing
    authority while for testing, you can make one yourself. The following links will
    help you make one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html](http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.verisign.com](https://www.verisign.com )'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.globalsign.co.uk/](https://www.globalsign.co.uk/)'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if you have managed hosting a lot, your package or product from
    the host providing company will come with an SSL certificate, or it is likely
    that the host provider will be able to set one up for you (check the terms of
    the contract).
  prefs: []
  type: TYPE_NORMAL
