["```php\nID INTEGER PRIMARY KEY\nuser_id INTEGER\nkey STRING\nvalue STRING\ncreated INTEGER\nupdated INTEGER\n```", "```php\nID INTEGER PRIMARY KEY\ntitle STRING\nbody TEXT\npublished INTEGER\nauthor_id INTEGER\ncategory_id INTEGER\nslug STRING\ncreated INTEGER\nupdated INTEGER\n```", "```php\nID INTEGER PRIMARY KEY\ncontent_id INTEGER\nkey STRING\nvalue STRING\ncreated INTEGER\nupdated INTEGER\n```", "```php\nID INTEGER PRIMARY KEY\nname STRING\ndescription TEXT\nslug STRING\ncreated INTEGER\nupdated INTEGER\n```", "```php\n    Composer install\n\n    ```", "```php\n    php protected/yiic.php migrate up --interactive=0\n    psql ch6_cms -f protected/data/postgres.sql\n\n    ```", "```php\n    'sendgrid' => array(\n    'username' => '<username>',\n       'password' => '<password>',\n       'from' => 'noreply@ch6.home.erianna.net'\n    )\n    ```", "```php\nclass CMSActiveRecordCMSActiveRecord extends CActiveRecord\n{\n   public $_oldAttributes = array();\n\n   public function behaviors()\n   {\n      return array(\n         'CTimestampBehavior' => array(\n            'class'          => 'zii.behaviors.CTimestampBehavior',\n            'createAttribute'    => 'created',\n            'updateAttribute'    => 'updated',\n            'setUpdateOnCreate' => true\n         )\n      );\n   }\n\n   public function afterFind()\n   {\n      if ($this !== NULL)\n         $this->_oldAttributes = $this->attributes;\n      return parent::afterFind();\n   }\n}\n```", "```php\nclass CMSSLugActiveRecord extends CMSActiveRecord\n{\n   public function validateSlug($attributes, $params)\n   {\n      // Fetch any records that have that slug\n      $content = Content::model()->findByAttributes(array('slug' => $this->slug));\n      $category = Category::model()->findByAttributes(array('slug' => $this->slug));\n\n      $class = strtolower(get_class($this));\n\n      if ($content == NULL && $category == NULL)\n         return true;\n      else if (($content == NULL && $category != NULL) || ($content != NULL && $category == NULL))\n      {\n         $this->addError('slug', 'That slug is already in use');\n         return false;\n      }\n      else\n      {\n         if ($this->id == $$class->id)\n            return true;\n      }\n\n      $this->addError('slug', 'That slug is already in use');\n      return false;\n   }\n}\n```", "```php\nclass CMSController extends CController\n{\n   public function beforeAction($action)\n   {\n      Yii::app()->setTheme('main');\n      return parent::beforeAction($action);\n   }\n}\n```", "```php\n    'urlManager' => array(\n             'class'          => 'application.components.CMSUrlManager',\n            'urlFormat'      => 'path',\n            'showScriptName' => false\n    )\n    ```", "```php\n    class CMSUrlManager extends CUrlManager {}\n    ```", "```php\n    public $defaultRules    = array(\n       '/sitemap.xml'           => '/content/sitemap',\n       '/search/<page:\\d+>'     => '/content/search',\n       '/search'                => '/content/search',\n       '/blog/<page:\\d+>'       => '/content/index',\n       '/blog'                  => '/content/index',\n       '/'                      => '/content/index',\n       '/hybrid/<provider:\\w+>' => '/hybrid/index',\n    );\n    ```", "```php\n    protected function processRules() {}\n    ```", "```php\n    $this->rules = !YII_DEBUG ? Yii::app()->cache->get('Routes') : array();\n    ```", "```php\n    if ($this->rules == false || empty($this->rules))\n    {\n       $this->rules = array();\n       $this->rules = $this->generateClientRules();\n       $this->rules = CMap::mergearray($this->addRssRules(), $this->rules);\n\n       Yii::app()->cache->set('Routes', $this->rules);\n    }        \n\n    $this->rules['<controller:\\w+>/<action:\\w+>/<id:\\w+>'] = '<controller>/<action>';\n    $this->rules['<controller:\\w+>/<action:\\w+>'] = '<controller>/<action>';\n\n    return parent::processRules();\n    ```", "```php\n    private function generateClientRules()\n    {\n       $rules = CMap::mergeArray($this->defaultRules, $this->rules);\n       return CMap::mergeArray($this->generateRules(), $rules);\n    }\n\n    private function generateRules()\n    {\n       return CMap::mergeArray($this->generateContentRules(), $this->generateCategoryRules());\n    }\n    ```", "```php\n    array(\n        '<slug>' => '<controller>/<action>/id/<id>'\n    )\n    ```", "```php\n    private function generateContentRules()\n    {\n       $rules = array();\n       $criteria = new CDbCriteria;\n       $criteria->addCondition('published = 1');\n\n       $content = Content::model()->findAll($criteria);\n       foreach ($content as $el)\n       {\n          if ($el->slug == NULL)\n             continue;\n\n          $pageRule = $el->slug.'/<page:\\d+>';\n          $rule = $el->slug;\n\n          if ($el->slug == '/')\n             $pageRule = $rule = '';\n\n          $pageRule = $el->slug . '/<page:\\d+>';\n       $rule = $el->slug;\n\n       $rules[$pageRule] = \"content/view/id/{$el->id}\";\n       $rules[$rule] = \"content/view/id/{$el->id}\";\n       }\n\n       return $rules;\n    }\n    ```", "```php\n    private function generateCategoryRules()\n    {\n       $rules = array();\n       $categories = Category::model()->findAll();\n       foreach ($categories as $el)\n       {\n          if ($el->slug == NULL)\n             continue;\n\n          $pageRule = $el->slug.'/<page:\\d+>';\n          $rule = $el->slug;\n\n          if ($el->slug == '/')\n             $pageRule = $rule = '';\n\n          $pageRule = $el->slug . '/<page:\\d+>';\n       $rule = $el->slug;\n\n       $rules[$pageRule] = \"category/index/id/{$el->id}\";\n       $rules[$rule] = \"category/index/id/{$el->id}\";\n       }\n\n       return $rules;\n    }\n    ```", "```php\n    private function addRSSRules()\n    {\n       $categories = Category::model()->findAll();\n       foreach ($categories as $category)\n          $routes[$category->slug.'.rss'] = \"category/rss/id/{$category->id}\";\n\n       $routes['blog.rss'] = '/category/rss';\n       return $routes;\n    }\n    ```", "```php\nclass ContentController extends CMSController {}\n```", "```php\npublic $layout = 'default';\n\npublic function filters()\n{\n   return array(\n      'accessControl',\n   );\n}\n\npublic function accessRules()\n{\n   return array(\n      array('allow',\n         'actions' => array('index', 'view', 'search'),\n         'users' => array('*')\n      ),\n      array('allow',\n         'actions' => array('admin', 'save', 'delete'),\n         'users'=>array('@'),\n         'expression' => 'Yii::app()->user->role==2'\n      ),\n      array('deny',  // deny all users\n         'users'=>array('*'),\n      ),\n   );\n}\n```", "```php\npublic function actionSitemap() {}\n```", "```php\n    Yii::app()->log->routes[0]->enabled = false;\n    ```", "```php\n    ob_end_clean();\n    header('Content-type: text/xml; charset=utf-8');\n    $this->layout = false;\n    ```", "```php\n    $content = Content::model()->findAllByAttributes(array('published' => 1));\n    $categories = Category::model()->findAll();\n\n    $this->renderPartial('sitemap', array(\n       'content'      => $content,\n       'categories'   => $categories,\n       'url'          => 'http://'.Yii::app()->request->serverName . Yii::app()->baseUrl\n    ));\n    ```", "```php\n    <?php echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'; ?>\n    <urlset >\n       <?php foreach ($content as $v): ?>\n          <url>\n             <loc><?php echo $url .'/'. htmlspecialchars(str_replace('/', '', $v['slug']), ENT_QUOTES, \"utf-8\"); ?></loc>\n             <lastmod><?php echo date('c', strtotime($v['updated']));?></lastmod>\n             <changefreq>weekly</changefreq>\n             <priority>1</priority>\n          </url>\n       <?php endforeach; ?>\n       <?php foreach ($categories as $v): ?>\n          <url>\n             <loc><?php echo $url .'/'. htmlspecialchars(str_replace('/', '', $v['slug']), ENT_QUOTES, \"utf-8\"); ?></loc>\n             <lastmod><?php echo date('c', strtotime($v['updated']));?></lastmod>\n             <changefreq>weekly</changefreq>\n             <priority>0.7</priority>\n          </url>\n       <?php endforeach; ?>\n    </urlset>\n    ```", "```php\n    return new CActiveDataProvider($this, array(\n    'criteria'    =>$criteria,\n    'pagination'  => array(\n    'pageSize'    => 5,\n    'pageVar'     =>'page'\n    )\n    ));\n    ```", "```php\n    public function actionIndex($page=1)\n    {\n       // Model Search without $_GET params\n       $model = new Content('search');\n       $model->unsetAttributes();\n       $model->published = 1;\n\n       $this->render('//content/all', array(\n          'dataprovider' => $model->search()\n       ));\n    }\n    ```", "```php\n    <?php $this->widget('zii.widgets.CListView', array(\n        'dataProvider'=>$dataprovider,\n        'itemView'=>'//content/list',\n        'summaryText' => '',\n        'pager' => array(\n           'htmlOptions' => array(\n              'class' => 'pager'\n           ),\n           'header' => '',\n           'firstPageCssClass'=>'hide',\n           'lastPageCssClass'=>'hide',\n           'maxButtonCount' => 0\n        )\n    ));\n    ```", "```php\npublic function actionView($id=NULL)\n{\n   // Retrieve the data\n   $content = Content::model()->findByPk($id);\n   // beforeViewAction should catch this\n   if ($content == NULL || !$content->published)\n      throw new CHttpException(404, 'The article you specified does not exist.');\n   $this->render('view', array(\n      'id'   => $id,\n      'post' => $content\n   ));\n}\n```", "```php\nprivate function beforeViewAction($id=NULL)\n{\n   // If we do not have an ID, consider it to be null, and throw a 404 error\n   if ($id == NULL)\n      throw new CHttpException(404,'The specified post cannot be found.');\n\n   // Retrieve the HTTP Request\n   $r = new CHttpRequest();\n\n   // Retrieve what the actual URI\n   $requestUri = str_replace($r->baseUrl, '', $r->requestUri);\n\n   // Retrieve the route\n   $route = '/' . $this->getRoute() . '/' . $id;\n   $requestUri = preg_replace('/\\?(.*)/','',$requestUri);\n\n   // If the route and the uri are the same, then a direct access attempt was made, and we need to block access to the controller\n   if ($requestUri == $route)\n      throw new CHttpException(404, 'The requested post cannot be found.');\n\n    return str_replace($r->baseUrl, '', $r->requestUri);\n}\n```", "```php\nYii::app()->user->setReturnUrl($this->beforeViewAction($id));\n```", "```php\n    'disqus' => array(\n        'shortname' => 'ch6disqusexample',\n    )\n    ```", "```php\n    class DisqusWidget extends CWidget {}\n    ```", "```php\n    public $shortname = NULL;\n\n    public $identifier = NULL;\n\n    public $url = NULL;\n\n    public $title = NULL;\n    ```", "```php\n    public function init()\n    {\n       parent::init();\n       if ($this->shortname == NULL)\n          throw new CHttpException(500, 'Disqus shortname is required');\n\n       echo \"<div id='disqus_thread'></div>\";\n       Yii::app()->clientScript->registerScript('disqus', \"\n           var disqus_shortname = '{$this->shortname}';\n           var disqus_identifier = '{$this->identifier}';\n           var disqus_url = '{$this->url}';\n           var disqus_title = '{$this->title}';\n\n            /* * * DON'T EDIT BELOW THIS LINE * * */\n            (function() {\n                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n            })();\n       \");\n    }\n    ```", "```php\n    <?php $this->widget('DisqusWidget', array(\n          'shortname'  => Yii::app()->params['includes']['disqus']['shortname'],\n          'url'        => $this->createAbsoluteUrl('/'.$post->slug),\n          'title'     => $post->title,\n          'identifier' => $post->id\n       )); ?>\n    ```", "```php\npublic function actionSearch()\n{\n    $param = Yii::app()->request->getParam('q');\n\n    $criteria = new CDbCriteria;\n\n    $criteria->addSearchCondition('title',$param,'OR');\n    $criteria->addSearchCondition('body',$param,'OR');\n\n    $dataprovider = new CActiveDataProvider('Content', array(\n        'criteria'=>$criteria,\n        'pagination' => array(\n            'pageSize' => 5,\n            'pageVar'=>'page'\n        )\n    ));\n\n    $this->render('//content/all', array(\n      'dataprovider' => $dataprovider\n   ));\n}\n```", "```php\n    private function loadModel($id=NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       $model = Content::model()->findByPk($id);\n\n       if ($model == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       return $model;\n    }\n\n    public function actionDelete($id)\n    {\n       $this->loadModel($id)->delete();\n\n       $this->redirect($this->createUrl('content/admin'));\n    }\n    ```", "```php\n    public function actionAdmin()\n    {\n       $model = new Content('search');\n\n       $model->unsetAttributes();\n\n       if (isset($_GET['Content']))\n          $model->attributes = $_GET;\n\n       $this->render('admin', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n    public function actionSave($id=NULL)\n    {\n       if ($id == NULL)\n          $model = new Content;\n       else\n          $model = $this->loadModel($id);\n\n       if (isset($_POST['Content']))\n       {\n          $model->attributes = $_POST['Content'];\n\n          $model->author_id = Yii::app()->user->id;\n\n          if ($model->save())\n          {\n             Yii::app()->user->setFlash('info', 'The articles was saved');\n             $this->redirect($this->createUrl('content/admin'));\n          }\n       }\n\n       $this->render('save', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\npublic $layout = 'default';\n\npublic function filters()\n{\n   return array(\n      'accessControl',\n   );\n}\n\npublic function accessRules()\n{\n   return array(\n      array('allow',\n         'actions' => array('index', 'view', 'rss'),\n         'users' => array('*')\n      ),\n      array('allow',\n         'actions' => array('admin', 'save', 'delete'),\n         'users'=>array('@'),\n         'expression' => 'Yii::app()->user->role==2'\n      ),\n      array('deny',  // deny all users\n         'users'=>array('*'),\n      ),\n   );\n}\n```", "```php\npublic function actionIndex($id=1, $page=1)\n{\n   $category = $this->loadModel($id);\n\n   // Model Search without $_GET params\n   $model = new Content('search');\n   $model->unsetAttributes();\n\n   $model->attributes = array(\n      'published' => 1,\n      'category_id' => $id\n   );\n\n   $_GET['page'] = $page;\n\n   $this->render('//content/all', array(\n      'dataprovider' => $model->search()\n   ));\n}\n```", "```php\npublic function actionRss($id=NULL)\n{\n   Yii::app()->log->routes[0]->enabled = false;\n\n   ob_end_clean();\n   header('Content-type: text/xml; charset=utf-8');\n\n   $this->layout = false;\n\n   $criteria = new CDbCriteria;\n\n   if ($id != NULL)\n      $criteria->addCondition(\"category_id = \" . $id);\n\n   $criteria->order = 'created DESC';\n   $data = Content::model()->findAll($criteria);\n\n   $this->renderPartial('rss', array(\n      'data'   => $data,\n      'url'   => 'http://'.Yii::app()->request->serverName . Yii::app()->baseUrl\n   ));\n}\n```", "```php\n<?php echo '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>'; ?>\n<rss version=\"2.0\" >\n   <channel>\n      <atom:link href=\"<?php echo $url.Yii::app()->request->requestUri; ?>\" rel=\"self\" type=\"application/rss+xml\" />\n      <title><?php echo Yii::app()->name; ?></title>\n      <link><?php echo $url; ?></link>\n      <description><?php echo Yii::app()->name; ?> Blog</description>\n      <language>en-us</language>\n      <pubDate><?php echo date('D, d M Y H:i:s T'); ?></pubDate>\n      <lastBuildDate><?php echo date('D, d M Y H:i:s T'); ?></lastBuildDate>\n      <docs>http://blogs.law.harvard.edu/tech/rss</docs>\n\n      <?php foreach ($data as $k=>$v): ?>\n         <item>\n            <title><?php echo htmlspecialchars(str_replace('/', '', $v['title']), ENT_QUOTES, \"utf-8\"); ?></title>\n            <link><?php echo $url.'/'.htmlspecialchars(str_replace('/', '', $v['slug']), ENT_QUOTES, \"utf-8\"); ?></link>\n            <description>\n               <?php\n                  $md = new CMarkdownParser;\n                  echo htmlspecialchars(strip_tags($md->transform($v['body'])), ENT_QUOTES, \"utf-8\");\n               ?>\n            </description>\n            <category><?php echo htmlspecialchars(Category::model()->findByPk($v['category_id'])->name,  ENT_QUOTES, \"utf-8\"); ?></category>\n            <author><?php echo User::model()->findByPk($v['author_id'])->email; ?> (<?php echo User::model()->findByPk($v['author_id'])->username; ?>)</author>\n            <pubDate><?php echo date('D, d M Y H:i:s T', strtotime($v['created'])); ?></pubDate>\n            <guid><?php echo $url.'/'.htmlspecialchars(str_replace('/', '', $v['slug']), ENT_QUOTES, \"utf-8\"); ?></guid>\n         </item>\n      <?php endforeach; ?>\n   </channel>\n</rss>\n```", "```php\n    public function actionDelete($id)\n    {\n       $this->loadModel($id)->delete();\n\n       $this->redirect($this->createUrl('content/admin'));\n    }\n\n    public function loadModel($id=NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       $model = Category::model()->findByPk($id);\n\n       if ($model == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       return $model;\n    }\n    ```", "```php\n    public function actionAdmin()\n    {\n       $model = new Category('search');\n       $model->unsetAttributes();\n\n       if (isset($_GET['Category']))\n          $model->attributes = $_GET;\n\n       $this->render('admin', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n    public function actionSave($id=NULL)\n    {\n       if ($id == NULL)\n          $model = new Category;\n       else\n          $model = $this->loadModel($id);\n\n       if (isset($_POST['Category']))\n       {\n          $model->attributes = $_POST['Category'];\n\n          if ($model->save())\n          {\n             Yii::app()->user->setFlash('info', 'The category was saved');\n             $this->redirect($this->createUrl('category/admin'));\n          }\n       }\n\n       $this->render('save', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n'hybridauth' => array(\n   'providers' => array(\n      'Twitter' => array(\n         'enabled' => true,\n         'keys' => array(\n            'key' => '<key>',\n            'secret' => '<secret>\n         )\n      )\n   )\n)\n```", "```php\n    class RemoteRegistrationForm extends RegistrationForm {}\n    ```", "```php\n    public $adapter;\n\n    public $provider;\n\n    public function rules()\n    {\n        return CMap::mergeArray(parent::rules(), array(\n            array('adapter, provider', 'required')\n        ));\n    }\n    ```", "```php\n    public function save()\n    {\n        // If the parent form saved and validated\n        if (parent::save())\n        {\n            // Then bind the identity to this user permanently\n            $meta = new UserMetadata;\n            $meta->attributes = array(\n                'user_id' => $this->_user->id,\n                'key' => $this->provider.'Provider',\n                'value' => (string)$this->adapter->identifier\n            );\n\n            // Save the associative object\n            return $meta->save();\n        }\n\n        return false;\n    }\n    ```", "```php\n    class RemoteLinkAccountForm extends CFormModel {}\n    ```", "```php\n    public $password;\n\n    public $adapter;\n\n    public $provider;\n\n    private $_user;\n\n    public function rules()\n    {\n        return array(\n            array('password, adapter, provider', 'required'),\n            array('password', 'validateUserPassword')\n        );\n    }\n    ```", "```php\n    public function validateUserPassword($attributes, $params)\n    {\n        $this->_user = User::model()->findByPk(Yii::app()->user->id);\n\n        if ($this->_user == NULL)\n        {\n            $this->addError('password', 'Unable to identify user.');\n            return false;\n        }\n\n        $result = password_verify($this->password, $this->_user->password);\n\n        if ($result == false)\n        {\n            $this->addError('password', 'The password you entered is invalid.');\n            return false;\n        }\n\n        return true;\n    }\n    ```", "```php\n    public function save()\n    {\n        if (!$this->validate())\n            return false;\n\n        $meta = new UserMetadata;\n        $meta->attributes = array(\n            'user_id' => $this->_user->id,\n            'key' => $this->provider.'Provider',\n            'value' => (string)$this->adapter->identifier\n        );\n\n        // Save the associative object\n        return $meta->save();\n    }\n    ```", "```php\n    class RemoteIdentityForm extends CFormModel {}\n    ```", "```php\n    public $adapter;\n\n    public $provider;\n\n    private $_identity;\n\n    public $_user;\n    ```", "```php\n    public function rules()\n    {\n        return array(\n            array('adapter, provider', 'required'),\n            array('adapter', 'validateIdentity')\n        );\n    }\n\n    public function validateIdentity($attributes, $params)\n    {\n        // Search the database for a user with that information\n        $metadata = UserMetadata::model()->findByAttributes(array(\n            'key' => $this->provider.'Provider',\n            'value' => (string)$this->adapter->identifier\n        ));\n\n        // Return an error if we didn't find them\n        if ($metadata == NULL)\n        {\n            $this->addError('adapter', 'Unable to determine local user for identity');\n            return false;\n        }\n\n        // Otherwise load that user\n        $this->_user = User::model()->findByPk($metadata->user_id);\n        if ($this->_user == NULL)\n        {\n            $this->addError('adapter', 'Unable to determine local user for identity');\n            return false;\n        }\n\n        // And return true\n        return true;\n    }\n    ```", "```php\n    public function authenticate()\n    {\n        if (!$this->validate())\n            return false;\n\n        // Load the RemoteUserIdentity model, and return if we successfully could authenticate against it\n        $this->_identity = new RemoteUserIdentity($this->adapter, $this->provider, $this->_user);\n        return $this->_identity->authenticate();\n    }\n    ```", "```php\n    public function login()\n    {\n        if (!$this->authenticate())\n            return false;\n\n        if($this->_identity->errorCode===RemoteUserIdentity::ERROR_NONE)\n       {\n          $duration = 3600*24*30;\n            Yii::app()->user->allowAutoLogin = true;\n            Yii::app()->user->login($this->_identity,$duration);\n            return true;\n       }\n       else\n          return false;\n    }\n    ```", "```php\n    class RemoteUserIdentity extends CUserIdentity {}\n    ```", "```php\n    public $adapter;\n\n    public $provider;\n\n    public $_user;\n\n    public function __construct($adapter, $provider, $user)\n    {\n        $this->adapter  = $adapter;\n        $this->provider = $provider;\n        $this->_user    = $user;\n    }\n    ```", "```php\n    private $_id;\n\n    public function getId()\n    {\n        return $this->_id;\n    }\n    ```", "```php\n    public function authenticate($force=false)\n    {\n        // Set the error code first\n        this->errorCode = self::ERROR_UNKNOWN_IDENTITY;\n\n        // Check that the user isn't NULL, or that they're not in a locked state\n        if ($this->_user == NULL)\n            $this->errorCode = Yii_DEBUG ? self::ERROR_USERNAME_INVALID : self::ERROR_UNKNOWN_IDENTITY;\n\n        // The user has already been provided to us, so immediately log the user in using that information\n        $this->errorCode = self::ERROR_NONE;\n\n        $this->_id       = $this->_user->id;\n        $this->setState('email', $this->_user->email);\n        $this->setState('role', $this->_user->role_id);\n\n        return !$this->errorCode;\n    }\n    ```", "```php\n    class HybridController extends CMSController {}\n    ```", "```php\n    protected $_provider;\n\n    private $_adapter = NULL;\n\n    private $_userProfile = NULL;\n    ```", "```php\n    public function setAdapter($adapter)\n    {\n        return $this->_adapter = $adapter;\n    }\n\n    public function getAdapter()\n    {\n        return $this->_adapter;\n    }\n    ```", "```php\n    public function getUserProfile()\n    {\n        if ($this->_userProfile == NULL)\n            $this->_userProfile = $this->getAdapter()->getUserProfile();\n\n        return $this->_userProfile;\n    }\n    ```", "```php\n    public function setProvider($provider=NULL)\n    {\n        // Prevent the provider from being NULL\n        if ($provider == NULL)\n            throw new CException(\"You haven't supplied a provider\");\n\n        // Set the property\n        $this->_provider = $provider;\n\n        return $this->_provider;\n    }\n\n    public function getProvider()\n    {\n        return $this->_provider;\n    }\n    ```", "```php\n    public function getConfig()\n    {\n        return array(\n            'baseUrl' => Yii::app()->getBaseUrl(true),\n            'base_url' => Yii::app()->getBaseUrl(true) . '/hybrid/callback', // URL for Hybrid_Auth callback\n            'debug_mode' => YII_DEBUG,\n            'debug_file' => Yii::getPathOfAlias('application.runtime.hybridauth').'.log',\n            'providers' => Yii::app()->params['includes']['hybridauth']['providers']\n        );\n    }\n    ```", "```php\n    public function actionIndex($provider=NULL)\n    {\n        // Set the provider\n        $this->setProvider($provider);\n\n        if (isset($_GET['hauth_start']) || isset($_GET['hauth_done']))\n            Hybrid_Endpoint::process();\n\n        try {\n           $this->hybridAuth();\n        } catch (Exception $e) {\n            throw new CHttpException(400, $e->getMessage());\n        }\n    }\n    ```", "```php\n    private function hybridAuth()\n    {\n        // Preload some configuration options\n        if (strtolower($this->getProvider()) == 'openid')\n       {\n          if (!isset($_GET['openid-identity']))\n             throw new CException(\"You chose OpenID but didn't provide an OpenID identifier\");\n          else\n             $params = array(\"openid_identifier\" => $_GET['openid-identity']);\n       }\n       else\n          $params = array();\n\n       $hybridauth = new Hybrid_Auth($this->getConfig());\n\n        if (!$this->adapter)\n            $this->setAdapter($hybridauth->authenticate($this->getProvider(),$params));\n    }\n    ```", "```php\n    if ($this->adapter->isUserConnected())\n    {\n        // We'll add our actions here...\n    }\n    else\n        throw new CHttpException(403, 'Failed to establish remote identity');\n    ```", "```php\n    if ($this->authenticate())\n    {\n        Yii::app()->user->setFlash('success', 'You have been successfully logged in!');\n\n        $this->redirect(Yii::app()->getBaseUrl(true));\n    }\n    else\n    {\n        if (!Yii::app()->user->isGuest)\n            $this->renderLinkForm();\n        else\n            $this->renderRegisterForm();\n    }\n    ```", "```php\n    private function authenticate()\n    {\n        $form = new RemoteIdentityForm;\n        $form->attributes = array(\n            'adapter'  => $this->getUserProfile(),\n            'provider' => $this->getProvider()\n        );\n\n        return $form->login();\n    }\n    ```", "```php\n    private function renderLinkForm()\n    {\n        $form = new RemoteLinkAccountForm;\n\n        if (Yii::app()->request->getParam('RemoteLinkAccountForm'))\n        {\n            // Populate the model\n            $form->Attributes = Yii::app()->request->getParam('RemoteLinkAccountForm');\n            $form->provider   = $this->getProvider();\n            $form->adapter    = $this->getUserProfile();\n\n            if ($form->save())\n            {\n                if ($this->authenticate())\n                {\n                    Yii::app()->user->setFlash('success', 'You have been successfully logged in');\n                    $this->redirect($this->createAbsoluteUrl('content/index'));\n                }\n            }\n        }\n\n        // Reuse the register form\n        $this->render('//user/linkaccount', array('model' => $form));\n    }\n    ```", "```php\n    private function renderRegisterForm()\n    {\n        $form = new RemoteRegistrationForm;\n\n        if (Yii::app()->request->getParam('RemoteRegistrationForm'))\n        {\n            // Populate the model\n            $form->attributes = Yii::app()->request->getParam('RemoteRegistrationForm');\n            $form->provider   = $this->getProvider();\n            $form->adapter    = $this->getUserProfile();\n\n            if ($form->save())\n            {\n                if ($this->authenticate())\n                {\n                    Yii::app()->user->setFlash('success', 'You have been successfully logged in');\n                    $this->redirect($this->createUrl('content/index'));\n                }\n            }\n        }\n\n        // Reuse the register form\n        $this->render('//user/register', array('user' => $form));\n    }\n    ```"]