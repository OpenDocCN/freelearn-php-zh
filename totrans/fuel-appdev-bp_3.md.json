["```php\n'always_load'  => array(\n    'packages'  => array(\n        'orm',\n        'auth',\n    ),\n),\n```", "```php\n'driver' => 'Simpleauth',\n```", "```php\n'driver' => 'Ormauth',\n```", "```php\nphp oil generate admin post title:string slug:string small_description:string[200] content:text category_id:int user_id:int\n\n```", "```php\nCreating controller: APPPATH/classes/controller/base.php\nCreating controller: APPPATH/classes/controller/admin.php\nCreating views: APPPATH/views/admin/template.php\nCreating views: APPPATH/views/admin/dashboard.php\nCreating views: APPPATH/views/admin/login.php\nCreating migration: APPPATH/migrations/001_create_posts.php\nCreating model: APPPATH/classes/model/post.php\nCreating controller: APPPATH/classes/controller/admin/post.php\nCreating view: APPPATH/views/admin/post/index.php\nCreating view: APPPATH/views/admin/post/view.php\nCreating view: APPPATH/views/admin/post/create.php\nCreating view: APPPATH/views/admin/post/edit.php\nCreating view: APPPATH/views/admin/post/_form.php\nCreating view: APPPATH/views/template.php\n\n```", "```php\nphp oil refine migrate\n\n```", "```php\nphp oil refine migrate --packages=auth\n\n```", "```php\nphp oil refine migrate -all\n\n```", "```php\n'module_paths' => array(\n    APPPATH.'modules'.DS\n),\n```", "```php\nphp oil generate module blog â€“folders=classes/controller/admin,classes/model,config,migrations,views/admin\n\n```", "```php\nphp oil refine migrate:down\n\n```", "```php\nphp oil r moveScaffoldToModule -scaffold=post -module=blog\n\n```", "```php\nCreating controller: BLOGPATH/classes/controller/admin/post.php\nDeleting controller: APPPATH/classes/controller/admin/post.php\nCreating model: BLOGPATH/classes/model/post.php\nDeleting model: APPPATH/classes/model/post.php\nCreating view: BLOGPATH/views/admin/post/create.php\nCreating view: BLOGPATH/views/admin/post/edit.php\nCreating view: BLOGPATH/views/admin/post/index.php\nCreating view: BLOGPATH/views/admin/post/view.php\nCreating view: BLOGPATH/views/admin/post/_form.php\nDeleting views: APPPATH/views/admin/post\nCreating migration: BLOGPATH/migrations/001_create_posts.php\nDeleting migration: APPPATH/migrations/001_create_posts.php\n\n```", "```php\nphp oil refine migrate --modules=blog\n\n```", "```php\n<?php\n    $files = new GlobIterator(APPPATH.'classes/controller/admin/*.php');\nforeach($files as $file)\n    {\n        $section_segment = $file->getBasename('.php');\n        $section_title = Inflector::humanize($section_segment);\n        ?>\n<li class=\"<?php echo Uri::segment(2) == $section_segment ? 'active' : '' ?>\">\n<?php echo Html::anchor('admin/'.$section_segment, $section_title) ?>\n</li>\n<?php\n    }\n?>\n```", "```php\n<?php\n// Get the navigation bar's links from an helper. We moved\n// the code there because it is a bit long.\n$links = Helper::get_navigation_bar_links();\n\nforeach ($links as $link) {\n    // A link will be active if the current url starts with\n    // its url. For instance, we want the post link to be\n    // active when requesting these urls:\n    // http://myblog.app/blog/admin/post\n    // http://myblog.app/blog/admin/post/create\n    // http://myblog.app/blog/admin/post/view/1\n    // ...\n    $active = Str::starts_with(\n        Uri::current(),\n        Uri::base().$link['url']\n    );\n    ?>\n<li class=\"<?php echo $active ? 'active' : '' ?>\">\n<?php echo Html::anchor(\n            $link['url'],\n            $link['title']\n        ) ?>\n</li>\n<?php\n}\n?>\n```", "```php\n<?php\nclass Helper {\n    static function get_navigation_bar_links() {\n        // This method will return a list of links. Each\n        // link will contain a title and a url.\n        $links = array();\n\n        // For all admin controllers of our application\n        $files = new GlobIterator(\n            APPPATH.'classes/controller/admin/*.php'\n        );\n        foreach($files as $file)\n        {\n            // Url and title are deducted from the file\n            // basename\n            $section_segment = $file->getBasename('.php');\n            $links[] = array(\n                'title' => Inflector::humanize(\n                    $section_segment\n                ),\n                'url' => 'admin/'.$section_segment,\n            );\n        }\n\n        // Currently, only one path is defined:\n        // APPPATH/module. But this could to change.\n        $module_paths = \\Config::get('module_paths');\n        foreach ($module_paths as $module_path) {\n            // For each admin controller of each module\n            $files = new GlobIterator(\n                $module_path\n                .\n                '*/classes/controller/admin/*.php'\n            );\n            foreach($files as $file)\n            {\n                // We get the module name from the path...\n                $exploded_path = explode(\n                    '/',\n                    $file->getPath()\n                );\n                $module = $exploded_path[\n                    count($exploded_path) - 4\n                ];\n                $section_segment = $file->getBasename('.php');\n                $links[] = array(\n                    'title' => Inflector::humanize(\n                        $section_segment\n                    ),\n                    'url' => $module.'/admin/'.$section_segment,\n                );\n            }\n        }\n\n        return $links;\n    }\n}\n```", "```php\nphp oil generate admin/orm category name:string -s\n\n```", "```php\nCreating migration: APPPATH/migrations/002_create_categories.php\nCreating model: APPPATH/classes/model/category.php\nCreating controller: APPPATH/classes/controller/admin/category.php\nCreating view: APPPATH/views/admin/category/index.php\nCreating view: APPPATH/views/admin/category/view.php\nCreating view: APPPATH/views/admin/category/create.php\nCreating view: APPPATH/views/admin/category/edit.php\nCreating view: APPPATH/views/admin/category/_form.php\n\n```", "```php\nphp oil r moveScaffoldToModule -scaffold=category -module=blog\n\n```", "```php\nCreating controller: BLOGPATH/classes/controller/admin/category.php\nDeleting controller: APPPATH/classes/controller/admin/category.php\nCreating model: BLOGPATH/classes/model/category.php\nDeleting model: APPPATH/classes/model/category.php\nCreating view: BLOGPATH/views/admin/category/create.php\nCreating view: BLOGPATH/views/admin/category/edit.php\nCreating view: BLOGPATH/views/admin/category/index.php\nCreating view: BLOGPATH/views/admin/category/view.php\nCreating view: BLOGPATH/views/admin/category/_form.php\nDeleting views: APPPATH/views/admin/category\nCreating migration: BLOGPATH/migrations/002_create_categories.php\nDeleting migration: APPPATH/migrations/002_create_categories.php\n\n```", "```php\nphp oil refine migrate --modules=blog\n\n```", "```php\nphp oil generate admin/orm comment name:string email:string content:text status:string post_id:integer -s\n\n```", "```php\nCreating migration: APPPATH/migrations/002_create_comments.php\nCreating model: APPPATH/classes/model/comment.php\nCreating controller: APPPATH/classes/controller/admin/comment.php\nCreating view: APPPATH/views/admin/comment/index.php\nCreating view: APPPATH/views/admin/comment/view.php\nCreating view: APPPATH/views/admin/comment/create.php\nCreating view: APPPATH/views/admin/comment/edit.php\nCreating view: APPPATH/views/admin/comment/_form.php\n\n```", "```php\nphp oil r moveScaffoldToModule -scaffold=comment -module=blog\n\n```", "```php\nCreating controller: BLOGPATH/classes/controller/admin/comment.php\nDeleting controller: APPPATH/classes/controller/admin/comment.php\nCreating model: BLOGPATH/classes/model/comment.php\nDeleting model: APPPATH/classes/model/comment.php\nCreating view: BLOGPATH/views/admin/comment/create.php\nCreating view: BLOGPATH/views/admin/comment/edit.php\nCreating view: BLOGPATH/views/admin/comment/index.php\nCreating view: BLOGPATH/views/admin/comment/view.php\nCreating view: BLOGPATH/views/admin/comment/_form.php\nDeleting views: APPPATH/views/admin/comment\nCreating migration: BLOGPATH/migrations/003_create_comments.php\nDeleting migration: APPPATH/migrations/002_create_comments.php\n\n```", "```php\n'status' => array('constraint' => 11, 'type' => 'int'),\n```", "```php\n'status' => array(\n    'constraint' => \"'not_published','pending','published'\",\n    'type' => 'enum',\n    'default' => 'pending'\n),\n```", "```php\nphp oil refine migrate --modules=blog\n\n```", "```php\nphp oil generate scaffold/orm post title:string slug:string small_description:string[200] content:text category_id:int user_id:int\n\n```", "```php\nCreating migration: APPPATH/migrations/002_create_posts.php\nCreating model: APPPATH/classes/model/post.php\nCreating controller: APPPATH/classes/controller/post.php\nCreating view: APPPATH/views/post/index.php\nCreating view: APPPATH/views/post/view.php\nCreating view: APPPATH/views/post/create.php\nCreating view: APPPATH/views/post/edit.php\nCreating view: APPPATH/views/post/_form.php\n\n```", "```php\nphp oil r moveScaffoldToModule -scaffold=post -module=blog\n\n```", "```php\nCreating controller: BLOGPATH/classes/controller/post.php\nDeleting controller: APPPATH/classes/controller/post.php\nDeleting model: APPPATH/classes/model/post.php\nCreating view: BLOGPATH/views/post/create.php\nCreating view: BLOGPATH/views/post/edit.php\nCreating view: BLOGPATH/views/post/index.php\nCreating view: BLOGPATH/views/post/view.php\nCreating view: BLOGPATH/views/post/_form.php\nDeleting views: APPPATH/views/post\nDeleting migration: APPPATH/migrations/002_create_posts.php\n\n```", "```php\n'Orm\\\\Observer_Slug',\n```", "```php\n$val->add_field('slug', 'Slug', 'required|max_length[255]');\n```", "```php\n'slug' => Input::post('slug'),\n```", "```php\n$post->slug = Input::post('slug');\n```", "```php\n$post->slug = $val->validated('slug');\n```", "```php\n<?php echo Form::input('small_description', ... ); ?>\n```", "```php\n<?php\necho Form::textarea(\n    'small_description',\n    Input::post(\n        'small_description',\nisset($post) ? $post->small_description : ''\n    ),\n    array(\n        'class' => 'col-md-4 form-control',\n        'placeholder' => 'Small description',\n        'rows' => 4,\n        'maxlength' => 200,\n    )\n);\n?>\n```", "```php\n'//tinymce.cachefly.net/4.1/tinymce.min.js'\n```", "```php\n// Transforms textareas with the wysiwyg class to wysiwygs\ntinymce.init({selector:'textarea.wysiwyg'});\n```", "```php\n'class' => 'col-md-8 form-control'\n```", "```php\n'class' => 'col-md-8 form-control wysiwyg'\n```", "```php\n<?php\n/*\nLoading the list of all categories here, since it doesn't\ndepend on the post being created / edited. (Temporary)\n*/\n$categories = \\Blog\\Model_Category::find('all');\n\n$options = array();\nforeach ($categories as $category) {\n    $options[$category->id] = $category->name;\n}\necho Form::select('category_id', $category_id, $options);\n```", "```php\nForm::label('Category id', 'category_id'\n```", "```php\nForm::label('Category', 'category_id'\n```", "```php\n<?php echo Form::input('category_id', ... ) ?>\n```", "```php\n<div>\n<?php\n$select_box = \\View::forge('admin/category/selector');\n\n// Other way to set a view parameter; sets the $category_id\n// variable.\n$select_box->set(\n    'category_id',\n    Input::post(\n        'category_id',\n        isset($post) ? $post->category_id : null\n    )\n);\n\necho $select_box;\n?>\n</div>\n```", "```php\n<?php\nnamespace Blog;\n\nclass Presenter_Admin_Category_Selector extends \\Presenter\n{\n    public function view()\n    {\n        $this->categories = Model_Category::find('all');\n    }\n}\n```", "```php\n$select_box = \\View::forge('admin/category/selector');\n```", "```php\n$select_box = \\Presenter::forge('admin/category/selector');\n```", "```php\n$categories = \\Blog\\Model_Category::find('all');\n```", "```php\nprotected static $_belongs_to = array('category');\n```", "```php\nprotected static $_has_many = array('posts');\n```", "```php\n'author' => array(\n    'model_to'          => 'Auth\\Model\\Auth_User',\n    'key_from'          => 'user_id',\n    'key_to'            => 'id',\n    'cascade_save'      => true,\n    'cascade_delete'    => false,\n),\n```", "```php\n<?php echo Form::label('User id', ... ); ?>\n```", "```php\n<?php echo Form::label('Author'); ?>\n```", "```php\n<?php echo Form::input('user_id', ... ); ?>\n```", "```php\n<div>\n<?php\n/*\nThis field is not editable, so we simply display the author.\ncurrent_user is a global variable that defines the current\nlogged user.\n*/\n$author = isset($post) ? $post->author : $current_user;\necho $author->username;\n?>\n</div>\n```", "```php\n'user_id' => Input::post('user_id'),\n```", "```php\n'user_id' => $this->current_user->id,\n```", "```php\n$post->user_id = Input::post('user_id');\n```", "```php\n$post->user_id = $val->validated('user_id');\n```", "```php\n$val->add_field('user_id', ... );\n```", "```php\n<?php echo Html::anchor(..., 'View'); ?> |\n```", "```php\n<th>Slug</th>\n<th>Small description</th>\n<th>Content</th>\n```", "```php\n<td><?php echo $item->slug; ?></td>\n<td><?php echo $item->small_description; ?></td>\n<td><?php echo $item->content; ?></td>\n```", "```php\n<th>Category id</th>\n```", "```php\n<th>Category</th>\n```", "```php\n<th>User id</th>\n```", "```php\n<th>Author</th>\n```", "```php\n<td><?php echo $item->category_id; ?></td>\n```", "```php\n<td><?php echo $item->category->name; ?></td>\n```", "```php\n<td><?php echo $item->user_id; ?></td>\n```", "```php\n<td><?php echo $item->author->username; ?></td>\n```", "```php\n$data['posts'] = Model_Post::find('all');\n```", "```php\n$data['posts'] = Model_Post::find(\n    'all',\n    array(\n        'related' => array(\n            'category',\n            'author',\n        ),\n    )\n);\n```", "```php\n<?php echo Html::anchor(..., 'View'); ?> |\n```", "```php\n<?php echo Html::anchor(..., 'View'); ?> |\n```", "```php\n<?php echo Html::anchor(..., 'View'); ?> |\n```", "```php\n<th>Name</th>\n```", "```php\n<th>Number of posts</th>\n```", "```php\n<td><?php echo $item->name; ?></td>\n```", "```php\n<td><?php /* Depends on solution */ ?></td>\n```", "```php\n<td><?php /* Depends on solution */ ?></td>\n```", "```php\n<td>\n<?php\necho \\Blog\\Model_Post::count(\n    array(\n        'where' => array(\n            array('category_id' => $item->id)\n        )\n    )\n);\n?>\n</td>\n```", "```php\n$data['categories'] = Model_Category::find('all');\n```", "```php\n$data['categories'] = Model_Category::find(\n    'all',\n    array(\n        'related' => array(\n            'posts',\n        ),\n    )\n);\n```", "```php\n<td><?php /* Depends on solution */ ?></td>\n```", "```php\n<td><?php echo count($item->posts); ?></td>\n```", "```php\n$data['categories'] = Model_Category::find('all');\n```", "```php\n$data['categories'] = Model_Category::find_all_with_nb_posts();\n```", "```php\npublic static function find_all_with_nb_posts() {\n    return \\DB::query(\n        'SELECT\n            `categories`.*,\n            count(`posts`.`id`) as nb_posts\n        FROM `categories`\n        LEFT JOIN `posts` ON (\n            `posts`.`category_id` = `categories`.`id`\n        )\n        GROUP BY `categories`.id'\n    )\n    ->as_object('\\Blog\\Model_Category')\n    ->execute()\n    ->as_array();\n}\n```", "```php\n<td><?php /* Depends on solution */ ?></td>\n```", "```php\n<td><?php echo $item->nb_posts ?></td>\n```", "```php\n<?php echo Html::anchor(..., 'View'); ?> |\n```", "```php\n<?php echo Html::anchor(..., 'Add new Comment', ...); ?>\n```", "```php\n<th>Email</th>\n<th>Content</th>\n```", "```php\n<td><?php echo $item->email; ?></td>\n<td><?php echo $item->content; ?></td>\n```", "```php\n<th>Post id</th>\n```", "```php\n<th>Post</th>\n```", "```php\n<td><?php echo $item->post_id; ?></td>\n```", "```php\n<td>\n<?php\necho $item->post ? $item->post->title : '<i>Post deleted</i>';\n?>\n</td>\n```", "```php\nprotected static $_has_many = array('comments');\n```", "```php\nprotected static $_belongs_to = array('post');\n```", "```php\n$data['comments'] = Model_Comment::find('all');\n```", "```php\n$data['comments'] = Model_Comment::find(\n    'all',\n    array(\n        'related' => array('post'),\n        // display last comments first\n        'order_by' => array('id' => 'DESC'),\n    )\n);\n```", "```php\n<?php echo Form::input('status', ...); ?>\n```", "```php\n<div>\n<?php\necho Form::select(\n    'status',\n    $comment->status,\n    array(\n        'not_published' => 'not_published',\n        'pending' => 'pending',\n        'published' => 'published',\n    )\n);\n?>\n</div>\n```", "```php\n<?php echo Form::label('Post id', ...); ?>\n```", "```php\n<?php\necho Form::label(\n    'Post',\n    null, // No associated input\n    array('class' => 'control-label')\n);\n?>\n```", "```php\n<?php echo Form::input('post_id', ...); ?>\n```", "```php\n<div><?php echo $comment->post ? $comment->post->title : '<i>Post deleted</i>'; ?></div>\n```", "```php\n$comment->post_id = Input::post('post_id');\n```", "```php\n$comment->post_id = $val->validated('post_id');\n```", "```php\n$val->add_field('post_id', ...);\n```", "```php\n<?php echo Html::anchor(..., 'View'); ?> |\n```", "```php\n<html>\n    <head>\n        <title>My attack</title>\n    </head>\n    <body>\n        <img src=\"img/1\" />\n    </body>\n</html>\n```", "```php\n'blog/admin/post/delete/'.$item->id\n```", "```php\n'blog/admin/post/delete/'.$item->id.\n'?'.\\Config::get('security.csrf_token_key').\n'='.\\Security::fetch_token()\n```", "```php\nif ($post = Model_Post::find($id))\n```", "```php\nif (($post = Model_Post::find($id)) and \\Security::check_token())\n```", "```php\n<?php echo Form::csrf(); ?>\n```", "```php\n<?php echo Form::open(array(\"class\"=>\"form-horizontal\")); ?>\n```", "```php\n<input name=\"fuel_csrf_token\" value=\"2411b0a6b942105fb80aa0cb1aaf89ca91e0ea715f5641bbfbb5ded23221fcecbbfe7016c8dbd922a19b12274989e67f71d266300ad14ebd9730c3ec604ec4f5\" type=\"hidden\" id=\"form_fuel_csrf_token\" />\n```", "```php\nif ($post and $post->save())\n```", "```php\nif (\\Security::check_token() and $post and $post->save())\n```", "```php\nif ($post->save())\n```", "```php\nif (\\Security::check_token() && $post->save())\n```", "```php\n<?php if ($posts): ?>\n<?php foreach ($posts as $item): ?>\n<div class=\"post\" id=\"post_<?php echo $item->id; ?>\">\n<h2>\n<?php\necho Html::anchor('blog/post/view/'.$item->id, $item->title);\n?>\n</h2>\n<?php\n/*\nAs we will display the same information when visualizing a\npost, we will implement different views in order\nto easily reuse them later in BLOGPATH/views/post/view.php\n*/\necho \\View::forge(\n    'post/small_description',\n    array('post' => $item)\n);\necho \\View::forge(\n    'post/additional_informations',\n    array('post' => $item)\n);\n?>\n</div>\n<?php endforeach; ?>\n<?php else: ?>\n<p>No Posts.</p>\n<?php endif; ?>\n```", "```php\n<div class=\"post_small_description\">\n<?php\necho \\Markdown::parse($post->small_description) \n?>\n</div>\n```", "```php\n<div class=\"post_date\">\n<?php\necho \\Date::forge($post->created_at)->format('us_full');\n?>\n</div>\n<div class=\"post_category\">\n    Category:\n<?php echo $post->category->name ?>\n</div>\n<div class=\"post_author\">\n    By\n<?php echo $post->author->username ?>\n</div>\n```", "```php\n$data['posts'] = Model_Post::find('all');\n```", "```php\n$data['posts'] = Model_Post::find(\n    'all',\n    array(\n        'related' => array(\n            'author',\n            'category',\n        ),\n    )\n);\n```", "```php\n// Pagination configuration\n$config = array(\n    'total_items'    => Model_Post::count(),\n    'per_page'       => 10,\n    'uri_segment'    => 'page',\n);\n\n// Create a pagination instance named 'posts'\n$pagination = \\Pagination::forge('posts', $config);\n```", "```php\n $data['posts'] = Model_Post::find(...);\n```", "```php\n$data['posts'] = Model_Post::find(\n    'all',\n    array(\n        'related' => array(\n            'author',\n            'category',\n        ),\n        'rows_offset' => $pagination->offset,\n        'rows_limit' => $pagination->per_page,\n    )\n);\n```", "```php\n$this->template->content->set('pagination', $pagination);\n```", "```php\n<?php endforeach; ?>\n```", "```php\n<?php echo $pagination; ?>\n```", "```php\n$this->template->content->set('pagination', $pagination);\n```", "```php\n$this->template->content->set('pagination', $pagination, false);\n```", "```php\necho Html::anchor('blog/post/view/'.$item->id, $item->title);\n```", "```php\necho Html::anchor(\n    'blog/post/view/'.$item->slug,\n    $item->title\n);\n```", "```php\npublic function action_view($id = null)\n```", "```php\npublic function action_view($slug = null)\n```", "```php\nis_null($slug) and Response::redirect('blog/post');\n\n$data['post'] = Model_Post::find(\n    'first',\n    array(\n        'where' => array(\n            array('slug' => $slug),\n        ),\n    )\n);\nif ( ! $data['post'])\n{\n    Session::set_flash(\n        'error',\n        'Could not find post with slug: '.$slug\n    );\n    Response::redirect('blog/post');\n}\n\n$this->template->title = \"Post\";\n$this->template->content = View::forge('post/view', $data);\n```", "```php\n<?php echo $post->category->name ?>\n```", "```php\n<?php\necho Html::anchor(\n    'blog/post/category/'.$post->category->id,\n    $post->category->name\n);\n?>\n```", "```php\n<?php\nreturn array(\n    'blog/post/category/:category_id' => 'blog/post/index',\n);\n```", "```php\n$config = array(...);\n```", "```php\n$config = array(\n    'per_page'       => 10,\n    'uri_segment'    => 'page',\n);\n\n// Get the category_id route parameter\n$category_id = $this->param('category_id');\nif (is_null($category_id)) {\n    $config['total_items'] = Model_Post::count();\n} else {\n    $config['total_items'] = Model_Post::count(\n        array(\n            'where' => array(\n                array('category_id' => $category_id),\n            ),\n        )\n    );\n}\n```", "```php\n$data['posts'] = Model_Post::find(...);\n```", "```php\n$data['posts'] = Model_Post::query()\n    ->related(array('author', 'category'))\n    ->rows_offset($pagination->offset)\n    ->rows_limit($pagination->per_page);\n\nif (!is_null($category_id)) {\n    $data['posts']->where('category_id', $category_id);\n}\n\n$data['posts'] = $data['posts']->get();\n```", "```php\n<?php\n\nnamespace Fuel\\Migrations;\n\nclass Create_indexes\n{\n  public function up()\n  {\n        // For optimizing relations\n        \\DBUtil::create_index('comments', 'post_id');\n        \\DBUtil::create_index('posts', 'category_id');\n        \\DBUtil::create_index('posts', 'user_id');\n\n        // For optimizing slug retrieval\n        \\DBUtil::create_index('posts', 'slug');\n  }\n  public function down()\n  {\n        \\DBUtil::drop_index('comments', 'post_id');\n        \\DBUtil::drop_index('posts', 'category_id');\n        \\DBUtil::drop_index('posts', 'user_id');\n        \\DBUtil::drop_index('posts', 'slug');\n  }\n}\n```", "```php\n<div class=\"post_view\">\n<h2>\n<?php echo $post->title; ?>\n</h2>\n\n<?php\n// Reusing views we created earlier\necho \\View::forge(\n    'post/small_description',\n    array('post' => $post)\n);\n?>\n<div class=\"post_content\">\n<?php echo $post->content; ?>\n</div>\n<?php\necho \\View::forge(\n    'post/additional_informations',\n    array('post' => $post)\n);\n?>\n</div>\n<?php echo Html::anchor('blog/post', 'Back'); ?>\n```", "```php\n$this->template->content->set(\n'post_content',\n$data['post']->content,\nfalse\n);\n```", "```php\n$this->template->content->set(\n    'post_content',\n    $data['post']->content,\n    false\n);\n```", "```php\n<?php echo $post->content; ?>\n```", "```php\n<?php echo \\Security::xss_clean($post_content); ?>\n```", "```php\n<h3>Add a comment</h3>\n<?php echo Form::open(array(\"class\"=>\"form-horizontal\")); ?>\n\n  <fieldset>\n    <div class=\"form-group\">\n<?php\necho Form::label(\n    'Name',\n    'name',\n    array('class' => 'control-label')\n);\n\necho Form::input(\n    'name',\n    Input::post(\n        'name',\n    isset($comment) ? $comment->name : ''\n    ),\n    array(\n        'class' => 'col-md-4 form-control',\n        'placeholder' => 'Name'\n    )\n);\n?>\n\n    </div>\n    <div class=\"form-group\">\n<?php\necho Form::label(\n    'Email',\n    'email',\n    array('class' => 'control-label')\n);\n\necho Form::input(\n    'email',\n    Input::post(\n        'email',\n        isset($comment) ? $comment->email : ''\n    ),\n    array(\n        'class' => 'col-md-4 form-control',\n        'placeholder' => 'Email'\n    )\n);\n?>\n\n   </div>\n    <div class=\"form-group\">\n<?php\necho Form::label(\n    'Content',\n    'content',\n    array('class' => 'control-label')\n);\n\necho Form::textarea(\n    'content',\n    Input::post(\n        'content',\n        isset($comment) ? $comment->content : ''\n    ),\n    array(\n        'class' => 'col-md-8 form-control',\n        'rows' => 8,\n        'placeholder' => 'Content'\n    )\n);\n?>\n\n    </div>\n    <div class=\"form-group\">\n      <label class='control-label'>&nbsp;</label>\n<?php\necho Form::submit(\n    'submit',\n    'Save',\n    array('class' => 'btn btn-primary')\n);\n?>\n</div>\n  </fieldset>\n<?php echo Form::close(); ?>\n```", "```php\n<?php echo View::forge('comment/_form'); ?>\n```", "```php\n$this->template->title = \"Post\";\n```", "```php\n// Is the user sending a comment? If yes, process it.\nif (Input::method() == 'POST')\n{\n    $val = Model_Comment::validate('create');\n\n    if ($val->run())\n    {\n        $comment = Model_Comment::forge(array(\n            'name' => Input::post('name'),\n            'email' => Input::post('email'),\n            'content' => Input::post('content'),\n            'status' => 'pending',\n            'post_id' => $data['post']->id,\n        ));\n\n        if ($comment and $comment->save())\n        {\n            Session::set_flash(\n                'success',\n                e('Your comment has been saved, it will'.\n                 ' be reviewed by our administrators')\n            );\n        }\n\n        else\n        {\n            Session::set_flash(\n                'error',\n                e('Could not save comment.')\n            );\n        }\n    }\n    else\n    {\n        Session::set_flash('error', $val->error());\n    }\n}\n```", "```php\n$val->add_field('status', 'Status', 'required|max_length[255]');\n```", "```php\n// We require status only if we are editing the comment (thus\n// we are on the administration panel).\nif ($factory == 'edit') {\n    $val->add_field(\n        'status',\n        'Status',\n        'required|max_length[255]'\n    );\n}\n```", "```php\n'published_comments' => array(\n    'model_to'          => '\\Blog\\Model_Comment',\n    'conditions' => array(\n        'where' => array(\n            array('status' => 'published'),\n        ),\n    ),\n),\n```", "```php\n<?php echo View::forge('comment/_form'); ?>\n```", "```php\n<div class=\"comments\">\n<?php\nforeach ($post->published_comments as $comment):\n    echo \\View::forge(\n        'comment/item',\n        array('comment' => $comment)\n    );\nendforeach;\n?>\n</div>\n```", "```php\n<div class=\"comment\">\n<div class=\"comment_content\">\n<?php echo $comment->content; ?>\n</div>\n<div class=\"comment_date\">\n<?php\necho \\Date::forge($comment->created_at)->format('us_full');\n?>\n</div>\n<div class=\"comment_name\">\n        By\n<?php echo $comment->name; ?>\n</div>\n</div>\n```", "```php\nSession::set_flash('success', ...);\n```", "```php\n// Manually loading the Email package\n\\Package::load('email');\n\n$email = \\Email::forge();\n\n// Setting the to address\n$email->to(\n    $data['post']->author->email,\n    $data['post']->author->username\n);\n\n// Setting a subject\n$email->subject('New comment');\n\n// Setting the body and using a view since the message is long\n$email->body(\n    \\View::forge(\n        'comment/email',\n        array(\n            'comment' => $comment,\n        )\n    )->render()\n);\n\n// Sending the email\n$email->send();\n```", "```php\nHi,\n\nA new comment has been posted.\n\nAuthor: <?php echo $comment->name; ?>\n\nEmail: <?php echo $comment->email; ?>\n\nContent:\n<?php echo $comment->content; ?>\n\nGo to the administration panel to accept / reject it.\n<?php echo Uri::base().'admin' ?>\n\nThanks,\n```", "```php\nphp oil generate task clearComments\n\n```", "```php\nNo tasks actions have been provided, the TASK will only create default task.\n Preparing task method [Index]\nCreating tasks: APPPATH/tasks/clearcomments.php\n\n```", "```php\n<?php\nnamespace Fuel\\Tasks;\n\nclass Clearcomments\n{\n    // ...\n  public function run($args = NULL)\n  {\n    // ...\n  }\n\n    // ...\n  public function index($args = NULL)\n  {\n    // ...\n  }\n}\n```", "```php\nphp oil refine clearComments:run\n\n```", "```php\nphp oil refine clearComments:index\n\n```", "```php\nphp oil refine clearComments:my_method\n\n```", "```php\nphp oil refine clearComments\n\n```", "```php\nphp oil refine clearComments:run param_1 param_2\n\n```", "```php\npublic function run()\n{\n    \\DB::query(\n        'DELETE FROM comments WHERE status=\"not_published\";'\n    )->execute();\n    return 'Rejected comments deleted.';\n}\n```", "```php\nphp oil refine clearComments\n\n```"]