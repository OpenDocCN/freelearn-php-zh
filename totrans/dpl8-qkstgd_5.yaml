- en: Making Drupal Even More Useful
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we learned how to create content, the mainstay of the
    Drupal website. Creating content can be accomplished using a simple build-in process. Drupal
    is fully usable out-of-the-box as a content management without the requirement
    of any customization. However, your site or business model can call for additional
    functionality. Perhaps you want to schedule events, or accept payments, or display
    a product catalog. For this reason, there is a galaxy of add-on features available
    that can be greatly increase its utility and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps you have added functionality to your browser by way of a browser plugin,
    or to your smartphone by way of an app. With Drupal, feature expansion is also
    accomplished by pieces of add-on code, called modules. A module is arranged in
    a folder that contains program code and other files that, when placed in the correct
    location within the Drupal folder, provide a feature or service above and beyond
    those included with Drupal. As is the case with Drupal itself, modules are open
    source and free of charge, though some serve the purpose of connecting Drupal
    to a paid, third-party service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modules come from one of three sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core**: Included with Drupal, sometimes being optional to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contributed**: Not part of the core Drupal package, but typically made available
    from Drupal''s module library at [https://drupal.org/project/project_module](https://drupal.org/project/project_module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom**: Typically developed specifically for the site on which the module
    is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The modules cover a cornucopia of categories, features, and services, from
    social media integration to image editing and appointment scheduling. This chapter
    explores a few of the more popular modules that extend Drupal''s usefulness for
    users focused on content. Custom modules are not within the scope of this book. The
    modules that we will use and look at in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pathauto (contributed, but included with Drupal)**: Automatically generates
    URI/path aliases for content based on rules created by you'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paragraphs (contributed)**: Provides an easy way to add pre-formatted pieces
    of content to your larger content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content moderation (core)**: Facilitates a process for approving content
    before it can be published'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pathauto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to install modules, and all require some administrative
    capability. The installation of the contributed module is outside the scope of
    this book. We'll start from the point of the module files being in the correct
    place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the pathauto module is included with Drupal, the files certainly will
    be present. We can verify this by navigating to Extend on the admin menu, or `/admin/modules`. Once
    there, enter pathauto in the filter text box at the top of the page. You should
    see the following entry listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d036bc19-3618-48ae-8883-2641df3b1b6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check the box beside it and click the Install button. Depending on what
    other modules have been enabled on your site, you might receive the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e115b72e-ca85-4b2b-b8b4-c75f97286781.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you do receive this message, or a similar one when you are installing a
    module, it is because the module is dependent on other modules, and one or more
    of them isn''t enabled. If the necessary modules are present, Drupal will offer
    to enable them as well. Simply click Continue. In this case, if all goes well,
    you will receive a status message at the top of the reloaded page stating that
    three modules have been enabled: pathauto, Chaos tools, and Token.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we can configure Pathauto. Most modules have a configuration
    page, but not all. Scroll down to the Pathauto entry, or use the filter text box
    to find it, and click the arrow just to the left of the module description. An
    accordion control will open and reveal a configuration link, among other things.
    Click it, and you will be redirected to Pathauto's configuration page at `/admin/config/search/path/patterns`.
    The page will be sparse, because no pattern exists yet. Let's create one.
  prefs: []
  type: TYPE_NORMAL
- en: Click the +Add Pathauto pattern button. The resulting page, with the same title
    as the button that you just clicked, contains a dropdown selection that offers
    various entity types that are suitable for path patterns. Initially, the option
    are Content, Taxonomy, Term, and User. For any of those, a path pattern can be
    specified for creating meaningful URLs. We are going to create a pattern for Content,
    and select the same.
  prefs: []
  type: TYPE_NORMAL
- en: Our selection causes the page to change a bit, as each content type is now listed.
    You can check the box for Article, as we are creating a pattern for it.
  prefs: []
  type: TYPE_NORMAL
- en: We need to define the pattern that we want to use. There are many possibilities.
    We will choose a simple pattern. We'll have article URLs containing the word "content"
    and the article title in the form `content/my-article-title`. How will we get
    the article title to be used too? Click the link to Browse available tokens.
  prefs: []
  type: TYPE_NORMAL
- en: Tokens are placeholders that will make a specific type of value available at
    the proper time. A pop-up will appear that contains a number of token categories.
    We are interested in *Nodes*, so click the arrow beside it. An expanded list will
    appear, and in it you will find *Title*, referring to the title of the node, or
    in this case, the article title. To the right of that is a link containing the
    token for the node title, [node:title]. Click inside the pattern text box, and
    then click the link for the token. It will appear in the text box. Now, place
    your cursor to the left of the token and type `content/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, type *articles* in the Label text box to identify this pattern. The
    form should look similar to the following screenshot, though your content type
    list might vary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/986aaba5-3a59-4a6b-ac43-fd697565273a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Save to save your pattern, and you will be returned to the pattern list,
    which will now have one entry. Let's test it by creating an article. Navigate
    to `/node/add/article`.
  prefs: []
  type: TYPE_NORMAL
- en: Add whatever title and body text you'd like. I'm naming my article *My New Article*.
    The magic comes when you save it. When I do, instead of having a URL like `*http://d8quickstart/node/5*`,
    I have `*http://d8quickstart/content/my-new-article*`. Note that the original
    URL will still exist and can still be used. The Pathauto list at /admin/config/search/path
    lists both the alias based on the pattern and the original URL for each node.
    In my case, the node I created has a node ID of 2, and so I could still enter
    `http://d8quickstart/node/2` as the URL if I so desired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that Pathauto automatically converted the article title to a URL-friendly
    string by replacing spaces with hyphens and making the title lower case. The settings
    for this can be controlled under the Settings tab on the Pathauto config page.
    There is an addition tab there that is very important: Bulk generate. Let''s say
    that you create a pattern *after* a number of nodes have already been created.
    Rather than editing each and changing the URL to match your pattern, you can instruct
    Drupal to generate a patterned URL for every existing article.'
  prefs: []
  type: TYPE_NORMAL
- en: Paragraphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Paragraphs is a contributed module, which means that it was developed by someone
    in the Drupal community and was contributed back to Drupal.org. It provides a
    way to create pre-formatted content that can be easily reused.
  prefs: []
  type: TYPE_NORMAL
- en: Once the files have been deposited in the correct folder, which is typically
    in `/modules/contrib`, we will enable it as we did Pathauto, via the Extend page
    at `/admin/modules`. You may receive a message indicating that the *Entry Reference
    Revisions* module must be enabled as well. Simply click Continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to Structure (`/admin/structure`) and you will see a new entry at
    the bottom of the list: Paragraph types. Click on it, which will bring you to
    the Paragraph types page at `/admin/structure/paragraphs_type`. You will see a
    message where a list would normally be indicating that there isn''t a Paragraph
    type yet. So, let''s create one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the *+Add paragraph type* button. We''re going to create a paragraph
    type for an image and text, so in the *Label* text box let''s enter `Image and
    text`, and then click Save and manage fields. We will need to create two fields
    for our Paragraph type: one to contain the image, and another for the text.'
  prefs: []
  type: TYPE_NORMAL
- en: Click the +Add field button. From the select list, choose Image. You can enter
    `Image` as the label, or any value you would prefer. Click Save and continue.
    Leave the settings on the page that follows as is, and click Save field settings.
    On the next settings page, leave those as is too, and click the Save settings
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Click the +Add field button once more. Choose Text (formatted, long) from the
    select list, and enter body text for the label. Click the Save and continue button,
    and the on the following page, click the Save field settings button. Finally,
    click the Save settings button. We now have our paragraph type defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list page will look something like it does in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5155faa-10f7-430c-a64c-e91efbcc4d8e.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, we have defined a paragraph type. Now, we need to add it to a
    content type so that users creating that type of content can use the paragraph
    type. Let's navigate to Structure | Content types (`/admin/structure/types`) and
    click Manage fields beside the Article content type.
  prefs: []
  type: TYPE_NORMAL
- en: Click +Add field and from the Add a new field select list, choose Paragraph.
    For the label, let's enter `Paragraph type`, and click Save and continue. Leave
    the settings on the following page as is, though make certain that the Type of
    item to reference field has Paragraph selected. Click Save field settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next page, Paragraph type settings, in the REFERENCE TYPE section, we
    identify which paragraph type(s) should be offered as choices to the content creator.
    By default, checking a box in the TYPE subsection will indicate the inclusion
    of that type. We also have the option of indicating that any checked box be a
    type that we want *excluded* from the choices provided to the user. We will use
    the default method of inclusion, and check the one box available to us, given
    that we created only a single paragraph type, that is, Image and text, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/def4b49f-3d50-466e-a5b4-627268542fb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Save Settings. Now, let's create an article at Content| Create content|
    Article (`/node/add/article`). Give the article a title. Scroll down and you will
    see that a *PARAGRAPH TYPE* section has been added, containing the Image and text
    Paragraph type that we created. If we had created additional paragraph types,
    and marked them to be included as options, they would also be present. In that
    case, had we decided in creating this article that we wanted to use more than
    one of the paragraph types, the handle to the left of the type name could be used
    to drag the types into the order in which they should appear within the content.
  prefs: []
  type: TYPE_NORMAL
- en: Click the Choose file button for *Image* and browse to an image to include.
    Remember to provide alternative text for the image. Then, enter the text that
    will go with this image into the body text box. Note that this field has a WYSIWYG
    editor available for formatting.
  prefs: []
  type: TYPE_NORMAL
- en: Below the image and text that we've entered is a button that we can use to add
    another paragraph. If we only wanted the user to be able to add one instance of
    a paragraph type within a piece of content, we could have changed Unlimited to
    1 instance in the field settings when creating the field.
  prefs: []
  type: TYPE_NORMAL
- en: Click the Save button. When we look at the rendered article, it doesn't look
    quite like what we had in mind when creating the paragraph type. My image is massive,
    and both fields have their titles showing. Let's do something about this.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Structure|Paragraphs types (`/admin/structure/paragraphs_type`)
    and select Manage display from the select field. Click the settings gear on the
    right-hand side of the Image row. In the select field for Label, select Hidden,
    and select Medium (220x220) from the one for Image style.
  prefs: []
  type: TYPE_NORMAL
- en: You can create additional image styles at `admin/config/media/image-styles`.
  prefs: []
  type: TYPE_NORMAL
- en: Click the Update button to save your changes. Then, in the row for body text,
    selectHidden from the Label select field. Click the Save button.
  prefs: []
  type: TYPE_NORMAL
- en: That takes care of the display settings for the fields *in* the paragraph, but
    we also want to change a setting for the Paragraph field, itself. It, too, displayed
    its field name, which isn't the behavior we want. So, navigate to Structure |
    Content types (`/admin/structure/types`) and select Manage display from the select
    field beside *Article*. For the *Paragraph type* field, change the Label setting
    to Hidden, and then click Save.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we look at the preview, it is what we had expected: an image on the
    left with text on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/adaf81c3-0b2c-49f4-ae13-6832800fe85d.png)'
  prefs: []
  type: TYPE_IMG
- en: Had we wanted it the other way around, we could edit the Paragraph type and
    swap the order of the image and text fields within it. There is virtually no limit
    to the number of fields that can be contained with a Paragraph type, nor the number
    of Paragraph types that can be created.
  prefs: []
  type: TYPE_NORMAL
- en: When you enabled the Paragraphs module, another module listed just below it
    was Paragraphs library. Enabling that module will enable you to store your created
    paragraph types in a library of types so that it can be easily selected and reused
    for other content types.
  prefs: []
  type: TYPE_NORMAL
- en: Having successfully created, edited, and used our Paragraph type, let's move
    on to the final example in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Content moderation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, an organization requires the path to published content to be indirect.
    Rather than the author being able to publish the piece, it must first be moderated,
    whether by a supervisor, peer, or editor. The *Content Moderation* module introduces
    the ability to inject moderation into the process of publishing content.
  prefs: []
  type: TYPE_NORMAL
- en: '*Content Moderation* is a module *in core*, meaning that it is included in
    the main programming code that defines Drupal. Navigate back to the Extend page
    (`/admin/modules`) and enable Content moderation. You will receive a message that
    states in order to do so, *Workflows* must also be enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s configure the module. Having enabled it, there is now a new section
    on the Configuration page (`/admin/config`): Workflows. Click that, or navigate
    directly to `/admin/config/workflow/workflows`. Here, you will see a content moderation
    workflow that was created when you enabled the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29beecaf-c36c-4f9e-ab73-ceb24db4c85d.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Edit; here, we will take a detailed look at the sections of a workflow.
  prefs: []
  type: TYPE_NORMAL
- en: States
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The term *state* is lacking in context here and therefore can be somewhat ambiguous.
    For example, if I decide to walk to the store from my home, there are three states:'
  prefs: []
  type: TYPE_NORMAL
- en: Being at home
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walking to the store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arriving at the store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, state, in the context of workflows, isn''t necessarily the same. The
    default context is that state is synonymous with *static* state. Let''s take another
    look at my example, this time with the states described with further precision:'
  prefs: []
  type: TYPE_NORMAL
- en: Being at home - static
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walking to the store - transitional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arriving at the store - static
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: States 1 and 3 represent static states – milestones and plateaus – that have
    been achieved and can remain as such. State 2 is transitional, in that it describes
    an activity that is occurring to lead from one static state to the next.
  prefs: []
  type: TYPE_NORMAL
- en: 'In looking at the states, as shown in the following screenshot, all three are
    static states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Draft**: The content has been, or is in the process of being, created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Published**: The content is marked as published and is available to those
    user roles with permission to view published content of this type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Archived**: The content has been published but is now removed from what is
    considered current material and may or may not be still available for viewing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b6331415-4999-4a2a-9404-562fe429854e.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the Archived state has a select dropdown, while Draft and Published
    do not. That is because the former is an optional state, which can be deleted
    using the dropdown, but Draft and Published are not optional.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the three states are static. That said, were a transitional
    state to be needed, it could be created by using the Add a new state link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at what constitutes a state. Click on the Edit link
    for Published. The name, Published, can be changed if there is a more fitting
    term for your implementation. The two checkboxes that follow are important:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Published**: Whether this term is used for the state, or another if you were
    to change the State label, checking this box means that when this state is reached,
    the content is considered published, and the permissions given to each user role
    with regards to published content apply, typically and particularly in that the
    content will be available for viewing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default revision**: In Drupal, if the content type being used has been configured
    to allow revisions, each time the content is (re)saved, a new revision is created,
    and anyone with the proper permission can revert the content to an earlier version.
    If this box is checked, the current version when the state of the content reaches
    published will be considered the active version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next come the transitions. Let's look at Create new draft, as its inclusion
    hear is probably not intuitive. Click on the Edit link for it. Again, the label
    is editable should you have one more suited for your process.
  prefs: []
  type: TYPE_NORMAL
- en: Below the label, you see choices for the *From*, source, state and the *To*,
    target, state.  The target state for this transition is Draft and is not changeable,
    though were you to create your own transition, it would be. In either case, only
    one target state can be defined, since *the content can only be in one state at
    any time*.
  prefs: []
  type: TYPE_NORMAL
- en: 'More than source state can be selected. The two source states selected might
    not seem to make sense, given that the target is Draft. However, what events these
    choices account for are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing a draft and saving, with it remaining a draft, so Draft ⇒ Draft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing published content and saving it, but now as unpublished content needing
    moderation again, so Published ⇒ Draft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A similar peculiarity is true for the transitions of the Publish transition,
    because you might be (re)publishing already published content, or publishing draft
    content.
  prefs: []
  type: TYPE_NORMAL
- en: A benefit to this architecture is that while an article is published, a new
    version of it can be created as a draft and passed through the moderation states
    until it gets published, becoming the new default—and viewable—version.
  prefs: []
  type: TYPE_NORMAL
- en: Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen the Edit page for a transition, but this section is still
    worth looking at. You will note that there are multiple transitions defined with
    the source state being Published, as well as for the source state being Archived.
    Were you to add a few states, and if each of them could interact with multiple
    other states, this list of permutations could become lengthy. Not that this is
    a reason to not define additional states, but simply a mention that more planning
    might be in order than you might have otherwise thought.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A workflow such as this one needs to have something to act upon. At the moment,
    this does not apply to any of the content structures available for moderation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96ed7a44-9be1-443d-a419-53516b42b3b0.png)'
  prefs: []
  type: TYPE_IMG
- en: For our purposes, this workflow should apply to all articles, so let's click
    the Select button for Content types. In the resulting pop-up, check the box beside
    Articles and click Save. Then, click Save for this workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you create an article now, you might have the option to save it as Draft
    or Published, as select options at the bottom of the page. If so, this is because
    you are an administrator or have been given this permission. Otherwise, you will
    only be able to save the content as draft. Those given the permission to moderate
    this content or to view it, unpublished, will see the following screenshot when
    viewing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23a23d71-0529-4ca0-8733-bd3508db86f4.png)'
  prefs: []
  type: TYPE_IMG
- en: This form allows the moderator to change the state of the content and add a
    log comment about the transition.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned what modules are and their utility, their sources,
    and how to enable them. We have looked at an example of using each of three popular
    modules to provide capabilities that are not present otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at expanding the audience for our content
    by making it and our site's UI available in more languages via some of the internationalization
    features of Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: ¡Hasta la vista!
  prefs: []
  type: TYPE_NORMAL
