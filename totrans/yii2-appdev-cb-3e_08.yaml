- en: Chapter 8. Extending Yii
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating model behaviors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating reusable controller actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating reusable controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating CLI commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom view renderer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multilanguage application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making extensions distribution-ready
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will show you not only how to implement your own Yii extension,
    but also how to make your extension reusable and useful for the community. In
    addition, we will focus on many things you should do in order to make your extension
    as efficient as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Creating helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of built-in framework helpers such as `StringHelper` in the
    `yii\helpers` namespace. These contain sets of helpful static methods for manipulating
    strings, files, arrays, and other subjects.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, for additional behavior you can create a own helper and put any
    static function into one. For example, we implement the number helper in this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer package manager
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the `helpers` directory in your project and write the `NumberHelper`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `actionNumbers` method to `SiteController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `views/site/numbers.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the action. You should see the following result:![How to do it…](img/image00443.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In other cases, you can specify another count of decimal numbers. Observe the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any helper in Yii2 is just a set of functions, implemented as static methods
    in the corresponding classes.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a helper for implementing any different formats of output, for manipulations
    with values of any variables, and for other cases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually, static helpers are lightweight clean functions with a small count of
    arguments. Avoid putting your business logic and other complicated manipulations
    into helpers. Use widgets or other components instead of helpers in other cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about helpers, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-helper-overview.html](http://www.yiiframework.com/doc-2.0/guide-helper-overview.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For examples of built-in helpers, refer to sources in the `helpers` directory
    of framework. For the framework, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2/tree/master/framework/helpers](https://github.com/yiisoft/yii2/tree/master/framework/helpers).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating model behaviors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many similar solutions in today's web applications. Leading products
    such as Google's Gmail are defining nice UI patterns. One of these is soft delete.
    Instead of a permanent deletion with tons of confirmations, Gmail allows us to
    immediately mark messages as deleted and then easily undo it. The same behavior
    can be applied to any object such as blog posts, comments, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a behavior that will allow marking models as deleted, restoring
    models, selecting not yet deleted models, deleted models, and all models. In this
    recipe, we'll follow a test-driven development approach to plan the behavior and
    test if the implementation is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two databases for working and for tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure Yii to use the first database in your primary application in `config/db.php`.
    Make sure the test application uses the second database in `tests/codeception/config/config.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the migration to both the working and test databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Post` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s prepare a test environment first starting with defining fixtures for
    the `Post` model. Create the `tests/codeception/unit/fixtures/PostFixture.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a fixture data file to `tests/codeception/unit/fixtures/data/post.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we need to create a test case, `tests/codeception/unit/MarkdownBehaviorTest.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the unit tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to implement behavior, attach it to the model, and make sure the
    test passes. Create a new directory, `behaviors`. Under this directory, create
    a `MarkdownBehavior` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s attach the behavior to the Post model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the test and make sure it passes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it. We've created a reusable behavior and can use it for all future projects
    by just connecting it to a model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the test case. Since we want to use a set of models, we are
    defining fixtures. A fixture set is put into the "database" each time the test
    method is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We prepare unit tests for specifying how the behavior must work:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we are testing a processing of a new model content. The behavior must
    convert the Markdown text from the source attribute to HTML and store the second
    one to the target attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, we are testing to update the content of the existing model. After changing
    the Markdown content and saving the model, we must get the updated HTML content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let''s move to the interesting implementation details. In behavior, we
    can add our own methods, which will be mixed into the model that the behavior
    is attached to. Also, we can subscribe to the owner component events. We are using
    it to add an own listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can implement this listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In all the methods, we can use the `owner` property to get the object the behavior
    is attached to. In general, we can attach any behavior to our models, controllers,
    applications, and other components that extend the `yii\base\Component` class.
    Also, we can attach one behavior repeatedly to the model for processing different
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Besides, we can extend the `yii\base\AttributeBehavior` class like `yii\behaviors\TimestampBehavior`
    for updating specified attributes for any events.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about behaviors and events, refer to the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-concept-events.html](http://www.yiiframework.com/doc-2.0/guide-concept-events.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about the Markdown syntax, refer to [http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/).
  prefs: []
  type: TYPE_NORMAL
- en: Also, refer to the *Making extensions distribution-ready* recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have some code that looks like it can be reused but you don't know if
    it's a behavior, widget, or something else, most probably it's a component. A
    component should be inherited from the `yii\base\Component` class. Later on, the
    component can be attached to the application and configured using the `components`
    section of the configuration file. That's the main advantage compared with using
    just a plain PHP class. Additionally, we are getting behavior, event, getter,
    and setter support.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we'll implement a simple Exchange application component that
    will be able to get currency rates from the [http://fixer.io](http://fixer.io)
    site, attach it to the application, and use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For getting the currency rates, our component should send a HTTP GET query to
    a service URL such as [http://api.fixer.io/2016-05-14?base=USD](http://api.fixer.io/2016-05-14?base=USD).
  prefs: []
  type: TYPE_NORMAL
- en: 'The service must return all supported rates on the nearest working day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The component should extract needle currency from the response in JSON format
    and return a target rate:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `components` directory in your application structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the component class example with the following interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `component` functional:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Attach the component to your `config/console.php` or `config/web.php` configuration
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right now, we can use a new component directly or via the `get` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a demonstration console controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now try to run any command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As a result, you must see the rate values in the success cases or specific exceptions
    in the error ones. Besides creating your own components, you can do more.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding existing application components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of the time, there will be no need to create your own application components
    since other types of extension such as widgets or behaviors, cover almost all
    types of reusable codes. However, overriding core framework components is a common
    practice and can be used to customize the framework's behavior for your specific
    needs without hacking into the core.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to be able to format numbers using the `Yii::app()->formatter->asNumber($value)`
    method instead of our `NumberHelper::format` method from the *Creating helpers*
    recipe, you can follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Extend the `yii\i18n\Formatter` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the class of the built-in `formatter` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right now, we can use this method directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, it can be used as a new format for the `GridView` and `DetailView`
    widgets:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, you can extend every existing component without overwriting its source
    code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be able to attach a component to an application, it can be extended from
    the `yii\base\Component` class. Attaching is as simple as adding a new array to
    the components section of configuration. There, a class value specifies the component's
    class, and all other values are set to a component through the corresponding component's
    public properties and setter methods.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation itself is very straightforward; we are wrapping the [http://api.fixer.io](http://api.fixer.io)
    calls into a comfortable API with validators and caching. We can access our class
    by its component name using `Yii::$app`. In our case, it will be `Yii::$app->exchange`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For official information about components, refer to [http://www.yiiframework.com/doc-2.0/guide-concept-components.html](http://www.yiiframework.com/doc-2.0/guide-concept-components.html).
  prefs: []
  type: TYPE_NORMAL
- en: For the `NumberHelper` class sources, refer to the *Creating helpers* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating reusable controller actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Common actions such as deleting the AR model by the primary key or getting data
    for AJAX autocomplete could be moved into reusable controller actions and later
    attached to controllers as needed.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a reusable delete action that will delete the
    specified AR model by its primary key.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new database and configure it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create and apply the following migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate models for posts and comments using Gii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the standard CRUD controller `app\controllers\PostController` in Gii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that CRUD properly works:![Getting ready](img/image00519.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a success case, add a set of example posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the actions directory and add the `DeleteAction` standalone action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to attach it to the `controllers/PostController.php` controller.
    Remove the controller''s `actionDelete` and `behaviors` methods and attach your
    own action in the `action` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is it. Ensure that the delete operation still works correctly, and after
    the deletion, you will be redirected to a corresponding index action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create an external controller action, you need to extend your class from
    `yii\base\Action`. The only mandatory method to implement is `run`. In our case,
    it accepts the parameter named `$id` from `$_GET` using the automatic parameter
    binding feature of Yii and tries to delete a corresponding model.
  prefs: []
  type: TYPE_NORMAL
- en: To make it customizable, we've created two public properties configurable from
    the controller. These are `modelName`, which holds the name of the model we are
    working with, and `redirectTo` that specifies a route the user will be redirected
    to.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration itself is done by implementing the actions method in your
    controller. There, you can attach the action once or multiple times and configure
    its public properties.
  prefs: []
  type: TYPE_NORMAL
- en: You can access the original controller object via the controller property if
    you need it to redirect to another action or render a specific view.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about controllers and actions refer, to [http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html](http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating reusable controllers* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating reusable controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Yii, you can create reusable controllers. If you are creating a lot of applications
    or controllers that are of the same type, moving all common code into a reusable
    controller will save you a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we try to create a common `CleanController`, which will clear
    temporary directories and flush cached data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create reusable controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `cleaner` directory and add the standalone `CleanController` controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `cleaner/views/index.php` view file for the `actionIndex` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Attach the controller to application via the `controllerMap` section of the
    `config/web.php` configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new item to the main menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the controller and clear the assets:![How to do it…](img/image00385.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In case you use the yii2-app-advanced application template, just specify the
    correct paths in the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can attach the controller to any application.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are running an application and passing a route such as `clean/index`,
    prior to executing `CleanController::actionIndex`, Yii checks if there is `controllerMap`
    defined. Since we have a clean controller defined there, Yii executes it instead
    of going the usual way.
  prefs: []
  type: TYPE_NORMAL
- en: In the controller itself we defined the `assetPaths`, `runtimePaths`, and `caches`
    properties to be able to connect the controller to applications with different
    directory and cache structures. We are setting it when attaching the controller.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about controllers and about the controllers map, refer
    to [http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html](http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating reusable controllers* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A widget is a reusable part of a view that not only renders some data but also
    does it according to some logic. It can even get data from models and use its
    own views, so it is like a reduced reusable version of a module.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a widget that will draw a pie chart using Google APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the `widgets` directory and add the `ChartWidget` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `widgets/views/chart.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create a `ChartController` controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `views/chart/index.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now try to run the index action of the controller. You should see a pie chart
    like the following:![How to do it…](img/image00512.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can show any chart with different sizes and data sets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in every other type of extension, we are creating some public properties
    we can configure when calling a widget using its `widget` method. In this case,
    we are configuring the title, data set, and data labels.
  prefs: []
  type: TYPE_NORMAL
- en: The main method of a widget is `run()`. In our widget, we are generating a URL
    and rendering the widget view, which uses the Google charting API for printing
    the `<img>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about widgets, refer to [http://www.yiiframework.com/doc-2.0/guide-structure-widgets.html](http://www.yiiframework.com/doc-2.0/guide-structure-widgets.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Making extensions distribution-ready* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating CLI commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii has good command-line support and allows creating reusable console commands.
    Console commands are faster to create than web GUIs. If you need to create some
    kind of utility for your application that will be used by developers or administrators,
    console commands are the right tool.
  prefs: []
  type: TYPE_NORMAL
- en: To show how to create a console command, we'll create a simple command that
    will clean up various things, such as assets and temp directories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create CLI commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `commands/CleanController.php` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can use our own console controller with default settings. Just run the
    `yii` shell script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Look for own `clean` commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right now run asset cleaning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See the process report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to use this controller in the `yii2-app-advanced` application,
    just specify the custom working paths:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All console commands should be extended from the `yii\console\Controller` class.
    Since all console commands are run in `yii\console\Application` instead of `yii\web\Application`,
    we don't have a way to determine the value of the `@webroot` alias. Also, in the
    `yii2-app-advanced` template we have backend, frontend, and console subdirectories
    by default. For this purpose, we are creating configurable public properties called
    `assetPaths` and `runtimePaths`.
  prefs: []
  type: TYPE_NORMAL
- en: The console command structure itself is like a typical controller. We are defining
    several actions we can run via `yii <console command>/<command action>`.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are no views used, so we can focus on programming tasks
    instead of design, markup, and so on. Still, you need to provide some useful output
    so that users will know what is going on. This is done through simple PHP echo
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your command is relatively complex such as message or migrate bundled with
    Yii, it''s a good decision to provide some extra description of the available
    options and actions. It can be done by overriding the `getHelp` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the full output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, when we run the shell command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We have seen simplified description of all commands in the output list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This description will be taken from comments before class and actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: It is optional to add descriptions for your classes. You must not do it for
    your own CLI commands.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating reusable controllers* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Making extensions distribution-ready* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A filter is a class that can run before/after an action is executed. It can
    be used to modify execution context or decorate output. In our example, we'll
    implement a simple access filter that will allow the user to see private content
    only after accepting the **User agreement**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the agreement form model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the agreement checker service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It encapsulates work with the agreement cookies.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `filter` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the content controller and attach the filter to its behaviors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `views/content/index.php` view with private content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `views/content/agreement.php` view with the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the main menu item to the `views/layouts/main.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try to open the content page. The filter must redirect you to the agreement
    page:![How to do it…](img/image00374.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only after accepting the rules can you see the private content:![How to do it…](img/image00514.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, you can attach the filter to other controllers or modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A filter should extend the `yii\base\ActionFilter` class, which extends `yii\base\Behavior`.
    We can override the `beforeAction` or `afterAction` method if we want to do post-
    and pre-filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can check user access and throw corresponding HTTP-exceptions
    in a fail case. In this recipe, we redirect the user to the agreement page if
    the specific cookie value does not exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'You can attach filters to any controller or module. To specify the list of
    necessary routes, just use the `only` or `except` options. For example, we apply
    our filter only for the index action of the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not forget to return a `true` value in the success case from the `beforeAction`
    method. Otherwise, the controller action will not be executed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about filters, refer to [http://www.yiiframework.com/doc-2.0/guide-structure-filters.html](http://www.yiiframework.com/doc-2.0/guide-structure-filters.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'For build-in cache and access control filters, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-caching-http.html](http://www.yiiframework.com/doc-2.0/guide-caching-http.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-securityauthorization.html](http://www.yiiframework.com/doc-2.0/guide-securityauthorization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating model behaviors* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have created a complex application part and want to use it with some
    degree of customization in your next project, most probably you need to create
    a module. In this recipe, we will see how to create an application log view module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's do some planning first.
  prefs: []
  type: TYPE_NORMAL
- en: In `yii2-app-basic` with default configuration, all log entries are stored in
    the `runtime/logs/app.log` file. We can extract all messages from this file with
    help of regular expressions and display them on the **GridView** widget. Besides,
    we must allow the user to configure the path to the custom log file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `modules/log` directory and create the `Module` class with the new
    file option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a simple model for transferring rows from the log file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a log file reader class that will parse file rows, reverse its order,
    and return array of instances of the `LogRow` models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a helper for displaying pretty HTML-badges for the log levels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a module controller that will get an array of rows from the reader and
    pass them into `ArrayDataProvider`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the `modules/log/default/index.php` view file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Attach the module to your application in the `config/web.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a link to the controller in the `views/layouts/main.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to `url /index.php?r=lo``g` and ensure that the module works:![How to do
    it…](img/image00376.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can group your controllers, models, views, and other components by separated
    modules and attach them into your application. You can generate a module template
    with the help of Gii or make it manually.
  prefs: []
  type: TYPE_NORMAL
- en: Each module contains a main module class where we can define configurable properties,
    define change paths, attach controllers, and so on. By default, a module generated
    with Gii runs the `index` action of the default controller.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about modules and about best practices, refer to [http://www.yiiframework.com/doc-2.0/guide-structure-modules.html](http://www.yiiframework.com/doc-2.0/guide-structure-modules.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Making extensions distribution-ready* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom view renderer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many PHP template engines out there. Yii2 only offers native PHP templates.
    If you want to use one of the existing template engines or create your own one,
    you have to implement it—of course, if it's not yet implemented by the Yii community.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe we'll re-implement the Smarty templates support.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the Smarty library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps for creating a custom view renderer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `smarty/ViewRenderer.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to connect the view renderer to the application. In `config/web
    php`, we need to add renderers of the view component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s test it. Create a new `SmartyController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to create the `views/smarty/index.tpl` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now try running the controller. In a success case, you should get the following
    as output:![How to do it…](img/image00412.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A view renderer is a child of the `yii\base\ViewRenderer` abstract class that
    implements only one method, called `render`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore, we are getting a view component, file path, and render variables.
    We need to process the file and return the rendered result. In our case, processing
    itself is done by the Smarty template engine, so we need to properly initialize
    it and call its processing methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: It is a good practice to store Yii temporary files in the application runtime
    directory. That is why we are setting the `compile` directory, where Smarty stores
    its templates compiled into PHP, to `runtime/smarty/compile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rendering itself is a bit simpler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: All data set via `$this->render` is passed to the Smarty template as it is.
    Also, we are creating special Smarty template variables named `app` and `this`
    that point to `Yii::$app` and `Yii::$app->view` and allow us to get application
    properties inside a template.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we are rendering the templates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can get ready to use Smarty view renderer with plugins and configuration
    support at [https://github.com/yiisoft/yii2-smarty](https://github.com/yiisoft/yii2-smarty).
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about Smarty and view renderers in general, refer to the following
    URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.smarty.net](http://www.smarty.net)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-templateengines.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-templateengines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-structure-views.html](http://www.yiiframework.com/doc-2.0/guide-structure-views.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multilanguage application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every day, we meet more and more international companies, software products,
    and information resources that publish content on multiple languages. Yii2 provides
    built-in i18n support for making multilanguage applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are translating the application interface to different languages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the composer, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change the main menu labels in the `views/layouts/main.php` file to use the
    `Yii::t(''app/nav'', ''...'')` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change all your titles and breadcrumbs to use the common `Yii::t(''app, ''...'')`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, change all the labels of your buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change other hard-coded messages as well:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the attribute labels of your `ContactForm` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, change the attribute labels of the `LoginForm` model:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It will output translated labels for the current language instead of originals.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To prepare translations, create the `messages` directory. Right now, we can
    create translation files for all needed languages. We can do it manually, but
    there is a helpful crawler that can scan all project files and extract all messages
    from `Yii::t()` constructions. Let's use it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Generate the configuration file for the message scanner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the configuration file and set the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run crawler while passing this configuration file to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the process, we must get the following directory structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For example, the `messages/de/app/contact` file contains the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is a plain PHP array with original sentences in keys and translated messages
    in values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just put in the values needed to translate messages from Deutsch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Attach these translations to the `i18n` component of application in the `config/web.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the login page with the default language:![How to do it…](img/image00372.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch the application language to `de`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then refresh the login page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00503.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The built-in frameworks messages and default validation errors will be translated
    automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yii2 provides the `Yii::t()` method for translating interface messages via the
    `i18n` component, which supports different types of sources. In this recipe, we
    use `yii\i18n\hpMessageSource`, which stores translated messages in plain PHP
    files.
  prefs: []
  type: TYPE_NORMAL
- en: The framework does not have artificial intelligence and does not translate messages
    by itself. You must put prepared translations in files or in the database and
    framework to get the needed message from this message source.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set the current language manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of setting the language in the configuration file, you can switch the
    application language in runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you store the user language in the `lang` field of the `User`
    model, you can create the language loader:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Register this class in the bootstrapping list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Now, every authenticated user will see the interface in their own language.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can override the `yii\web\UrlManager` class for passing the current
    language as a GET parameter or as a prefix of a URL. Also, as an alternative you
    can store selected languages in browser cookies.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you generate models and another code with Gii, you can check the following
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00522.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All labels in the generated code will be embraced into the `Yii::t()` calls.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We did not cover the translating of model content in this recipe. However, for
    example, you can store translated texts in separate tables (such as the `post_lang`
    table for post model table) in a database and use the value of the `Yii::$app->language`
    property to get the current language and extract needed content for your models
    by the value.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about internationalization in Yii2, refer to [http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html).
  prefs: []
  type: TYPE_NORMAL
- en: Making extensions distribution-ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create various types of Yii extensions.
    Now we'll talk about how to share your results with people and why it's important.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s form a checklist for a good extension first. A good programming product
    should follow these points:'
  prefs: []
  type: TYPE_NORMAL
- en: Good coding style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: People should be able to find it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A consistent, easy to read, and easy to use API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extension should apply to the most common use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should be maintained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well-tested code, ideally with unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to provide support for it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, having all these requires a lot of work, but these are necessary
    to create a good product.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every modern PHP product must follow the PSR4 standards of autoloading and the
    PSR1 and PSR2 standards of the coding style from the [http://www.php-fig.org/psr/](http://www.php-fig.org/psr/)
    guide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's review our list in more detail, starting with the API. The API should
    be consistent, easy to read, and easy to use. Consistent means that the overall
    style should not change, so no different variable naming, no inconsistent names
    such as `isFlag1()` and `isNotFlag2()`, and so on. Everything should obey the
    rules you've defined for your code. This allows less checking of documentation
    and allows you to focus on coding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A code without any documentation is almost useless. An exception is a relatively
    simple code, but even if it's only a few lines, it doesn't feel right if there
    is not a single word about how to install and use it. What makes good documentation?
    The purpose of the code and its pros should be as visible as possible and should
    be written loud and clear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A code is useless if developers don't know where to put it and what should be
    in the application configuration. Don't expect that people know how to do framework-specific
    things. The installation guide should be verbose. A step-by-step form is preferred
    by a majority of developers. If the code needs SQL schema to work, provide it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even if your API methods and properties are named properly, you still need to
    document them with PHPDoc comments specifying argument types and return types,
    providing a brief description for each method. Don't forget protected and private
    methods and properties since sometimes it's necessary to read these to understand
    the details of how code works. Also, consider listing public methods and properties
    in documentation so it can be used as a reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide use case examples with well-commented code. Try to cover the most common
    ways of extension usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In an example, don't try to solve multiple problems at a time since it can be
    confusing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's important to make your code flexible so it will apply to many use cases.
    However, since it's not possible to create code for every possible use case, try
    to cover the most common ones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's important to make people feel comfortable. Providing a good documentation
    is a first step. The second is providing a proof that your code works as expected
    and will work with further updates. The best way to do it is a set of unit tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extension should be maintained, at least until it's stable and there are no
    more feature requests and bug reports. So expect questions and reports, and reserve
    some time to work on the code further. If you can't devote more time to maintain
    extensions, but it's very innovative and no one did it before, it's still worth
    sharing. If the community likes it, someone will definitely offer his or her help.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you need to make extensions available. Create the Composer package
    from your extension, push it on GitHub or other shared repository storage, and
    publish it on the [https://packagist.org](https://packagist.org) site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each extension should have a version number and a change log. It will allow
    the community to check if they have the latest version and check what is changed
    before upgrading. We recommend to follow the **Semantic Versioning** rules from
    the [http://semver.org](http://semver.org) site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even if your extension is relatively simple and documentation is good, there
    could be questions, and for the first time, the only person who can answer them
    is you. Typically, questions are asked at official forums, so it is better to
    create a topic where people can discuss your code and provide a link at the extension
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to share an extension with the community and be sure it will be
    useful and popular, you need to do more than just write code. Making extensions
    distribution-ready is much more work to do. It can be even more than creating
    an extension itself. So, why is it good to share extensions with the community
    in the first place?
  prefs: []
  type: TYPE_NORMAL
- en: Making the code you use in your own projects open source has its pros. You are
    getting people, a lot more people than you can get to test your closed source
    project. People who are using your extension are testing it, giving valuable feedback,
    and reporting bugs. If your code is popular, there will be passionate developers
    who will try to improve your code, to make it more extensive, more stable, and
    reusable. Moreover, it just feels good because you are doing a good thing.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered the most important things. Still, there are more things to check
    out. Try existing extensions before writing your own. If an extension almost fits,
    try contacting the extension author and contributing ideas you have. Reviewing
    existing code helps you find out useful tricks, dos, and don'ts. Also, check wiki
    articles and the official forum from time to time; there is a lot of useful information
    about creating extensions and developing using Yii in general.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For modern information about PHP coding standards, refer to [http://www.php-fig.org/psr/](http://www.php-fig.org/psr/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about semantic versioning, refer to [http://semver.org](http://semver.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
