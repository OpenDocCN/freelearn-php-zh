- en: Chapter 11. Performance Optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the limits of a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the database and MySQL configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the Apache web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuning the Magento configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring APC and Memcached
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the PHP configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the page speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For athletes, seconds, milliseconds, or hundredths of seconds decide if they
    will win a competition or not. Every small aspect that improves the performance
    is a step in the right direction to win the competition.
  prefs: []
  type: TYPE_NORMAL
- en: For websites, it is the same. The faster your Magento store is, the better it
    is. Magento is not one of the most efficient systems when it comes to performance.
    Especially when you are working with a lot of products and attributes, a good
    setup improves the performance of your webshop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The performance of a website has a lot of impact on your visitors. Some facts
    about this statement are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The page speed has a significant influence on the page ranking in search engines
    such as Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On an e-commerce site, every second costs 1 percent of the sales total
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You get more visitors from search engines when you reduce the page size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, performance is a key part to improve the SEO of your website.
    Customers will leave your website when it does not show a good performance.
  prefs: []
  type: TYPE_NORMAL
- en: Since you have finished the development, it is time to take a look at the performance
    of the whole system. In this chapter, we will explore, detect, and fix performance
    leaks in a Magento webshop by using many tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some tools are delivered by Magento as standard, but we have to look at the
    whole picture. Two identical Magento installations can have different page speed
    results that are caused by the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device of the client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the limits of a website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things you need to know are the limits of the current website.
    How much capacity has my website got? What is slowing down my site? We have to
    get an overview of all these aspects to arrive at a conclusion of which optimizations
    will have the most effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will see some tools that help to create a view of the performance.
    Some of the tools are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ApacheBench
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Siege
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magento Profiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YSlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PageSpeed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GTmetrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebPagetest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will do some tests with all these tools to work out the pitfalls of a Magento
    store. With these results, we can find out what kind of optimizations have the
    most effect.
  prefs: []
  type: TYPE_NORMAL
- en: Some optimizations are very easy and can have a large effect. Other optimizations
    are difficult and can have less effect. It is on you to decide what you want.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start, it is recommended to install the following tools to do some performance
    tests on a Magento installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ApacheBench** (**ab**): This tool is automatically installed with the Apache
    web server. When you have access to the command line interface, you can run the
    following command on a Linux server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Siege**: We will do some performance tests with Siege that is installed on
    the same server as Magento. To see if it is installed, you can run the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, make sure that `V` is uppercase. When Siege is installed, you will see
    its version number as shown in the following screenshot:![Getting ready](img/3329OS_11_01.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If it is not installed, you can run the following command when you are using
    a Debian-based Linux distribution:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'A second option is to download the installation file and install it by performing
    the following procedure:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To download the archive, run the following command:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'To extract the archive, run the following command:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Move the folder to the preferred location and change the directory.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Siege with the following command:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Magento Profile**: This is a standard feature in Magento. You can enable
    it in your system''s configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YSlow**: This is a Firefox plugin that you can download and install from
    the Add-ons store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because **GTMetrix** and **WebPagetest** are online tools, we don't have to
    install them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get an idea of the response time under a load of concurrent users, we can
    use ApacheBench. We will perform a test with the following command and save the
    results to a CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the previous command, we did a load test with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-c`: This parameter represents the number of concurrent users. In this test,
    there were always 10 requests running at the same time.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n`: This parameter represents the number of requests. In this case it is
    50, so we will have 50 results in the file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-e`: This parameter represents the output file. The output is written to the
    given CSV file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `-g` option means the same as `-e` but `-g` will generate a **.tsv** (**tab
    separated value**) file, also known as a gnuplot file.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: When you run the command, an output screen with the results will be printed
    as shown in the following screenshot:![How to do it...](img/3329OS_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This report shows the general statistics of the test. The specific results are
    saved in the CSV file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you run the `ab -h` command, you will see all the available options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load testing with Siege.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Siege is another load testing tool like ApacheBench. The difference between
    Siege and ApacheBench is that Siege has more functions than ApacheBench. It is
    designed to do a stress test with a number of concurrent users. It has the ability
    to work with HTTP authentication, cookies, sessions, and more. When you write
    a good script, you can simulate a real stress situation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a load test with Siege, we will use a text file, where we will set some
    URLs that will be used during the Siege load test. Doing a test with different
    URLs is better because you will test more pages on your website, which means that
    you can find more pitfalls. Create a `siege_url.txt` file and paste the following
    content in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/bkg_body.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/logo.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/ph_callout_left_top.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/ph_callout_left_rebel.jpg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/home_main_callout.jpg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/electronics.html`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/electronics.html?cat=12`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/checkout/cart/add/product/46/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/checkout/cart/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/i_shipping.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/i_discount.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/btn_trash.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/bkg_th.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/i_msg-success.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/btn_checkout.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/checkout/onepage/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/js/varien/accordion.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/base/default/js/opcheckout.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/opc-ajax-loader.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/skin/frontend/default/default/images/cvv.gif`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/checkout/onepage/progress/?toStep=billing`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/electronics/cameras/accessories/universal-camera-case`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/tag/product/list/tagId/185/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/tag/product/list/tagId/27/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/index.php/customer/account/login/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can change the URLs so that they match your Magento configuration. Make
    sure that the domain matches your configuration and that the URLs exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to start the load test with 50 concurrent users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The period for which this script will run depends on the webshop''s performance.
    The output of the command is shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the Siege `-h` command, you can see all the available options.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We continue with the configuration of Magento Profiler. To enable the Magento
    Profiler, open the backend and navigate to **System** | **Configuration** | **Advanced**
    | **Developer** | **Debug**. Configure the **Profiler** field as shown in the
    following screenshot:![How to do it...](img/3329OS_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To see some more statistics, uncomment the following line in the `index.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you reload the frontend, you will see a grid as shown in the following
    screenshot:![How to do it...](img/3329OS_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshot, you can see the execution time and memory that is
    used for each function that is executed. This can help you to find a performance
    leak.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will install YSlow in Firefox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: YSlow is a Firefox plugin that is installed with Firebug
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To open YSlow, open Firebug by pressing *F12* or by clicking on the icon in
    the Add-ons bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After Firebug starts, open the YSlow tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the **Ruleset** dropdown is set to **YSlow(V2)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the test by clicking on the **Run Test** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'YSlow performs some tests and then displays the results of these tests as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started with ApacheBench, which is a tool that is installed with the Apache
    web server. This tool is designed to benchmark the HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: We performed a test with a number of concurrent users. When you test with a
    load of 10 concurrent users, you will simulate a continuous load of 10 requests
    during the time of the test. When a request is finished, a new one is fired, so
    there are always 10 processes running.
  prefs: []
  type: TYPE_NORMAL
- en: When you limit the time of the test to 30 seconds, you can see how many successful
    requests your Apache server has finished during that time. This can give you a
    good idea of the capacity your web server has.
  prefs: []
  type: TYPE_NORMAL
- en: Siege is a tool similar to ApacheBench. The main difference is that Siege has
    more options than ApacheBench. In this recipe, we did a load test with a list
    of URLs. In this list, you can add products to the cart by creating POST requests
    to simulate a human flow on the webshop. Mostly, product pages are cached but
    session-specific flows, such as the checkout, can't be cached and will generate
    more load on your server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With ApacheBench and Siege, you can create load on a website. While doing this
    on a remote website, it is possible that you will be blocked by a firewall because
    many requests from the same host appear like an attack.
  prefs: []
  type: TYPE_NORMAL
- en: The performance of a web page depends on many factors. YSlow has bundled the
    most important factors and runs a test with these factors. The parameters are
    bundled in rulesets. The ruleset we used is the YSlow (V2) that contains most
    of the checks. You can choose some others or create your own.
  prefs: []
  type: TYPE_NORMAL
- en: When the test runs, YSlow will check all the factors that are in the ruleset.
    For every factor, it will give a score. The average of all scores is multiplied
    by the weight of each factor. The weight depends on the impact of every factor
    on the performance of a website.
  prefs: []
  type: TYPE_NORMAL
- en: In the report generated by YSlow, suggestions are made to get a better score
    on every specific part. It is up to you to decide which option you will choose
    to optimize your site.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When your site is on a public URL, you can use some online tools to show a
    report of your site''s performance. These tools will look at your site and generate
    a report on it. It will make some suggestions just like YSlow does:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WebPagetest**: This tool can be found at [http://www.webpagetest.org/](http://www.webpagetest.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GTmetrix**: This tool can be found at [http://gtmetrix.com/](http://gtmetrix.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the database and MySQL configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When scaling a Magento website, you will have one part that will be a hard job
    and that is the MySQL database. You can scale your shop with multiple servers
    but the database is a central storage of all the data of the website, which is
    not so easy to scale because everything needs to be in sync. In this recipe, we
    will optimize the Magento MySQL database and the MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in to phpMyAdmin and navigate to the next page that shows the information
    about the database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to optimize the table structures of the Magento database.
    Take a look at the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: When you are in phpMyAdmin, click on the Magento database, and you will see
    the table overview.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of this page, click on the **check all** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click on the drop-down list, you can repair the table and optimize
    it, as shown in the following screenshot:![How to do it...](img/3329OS_11_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you run this action for all the tables in the Magento database. It
    could happen that the list is separated and presented in multiple pages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you have repaired and optimized everything, your MySQL database is optimized.
    You can also replicate the database with the Master/Slave setup as we have done
    in the *Configuring a Master/Slave setup* recipe in [Chapter 5](ch05.html "Chapter 5. Database
    Concepts"), *Database Concepts*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second step is the optimization of the MySQL server. Perform the following
    steps to optimize the MySQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: A good server configuration starts with good hardware and the right operating
    system. To run Magento, it is recommended to use a dedicated server or a VPS.
    When you use a shared environment, the RAM and CPU load is shared among other
    users. With a VPS or dedicated server, you have a fixed number of CPUs and a fixed
    amount of RAM available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When your server is equipped with enough RAM, you can turn off the swapped devices.
    Sometimes, the swap option will be automatically used even if enough memory is
    available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `my.cnf` file, under the `[mysqld]` section, use the `skip-external-locking`
    parameter to avoid external locking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following command is used to set the right value for `key_buffer` in the
    `MyISAM` tables. To see the configuration, run the following command on the MySQL
    prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will set the key buffer size to 512 MB. We can do this by running the following
    command on the MySQL prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will do the following optimization settings in the `my.cnf` file. This is
    the main configuration file of the MySQL server that is located in the `app/etc/mysql`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file and paste the following configuration under the `[mysqld]` section:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file and restart your MySQL server. You can do this by running the
    following command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While optimizing a MySQL server, you have to know the capabilities of your server
    and the traffic you expect. With these parameters, you can calculate a good value
    for the `key_buffer`, `query_cache`, and `table_cache`. Also, think about the
    `skip-external-locking` parameter. With this parameter, you can deny external
    locking.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following commands, you can view the MySQL server status:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | More information |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| mysql> SHOW STATUS; | This command shows the current status of the MySQL
    server. This command is available in MySQL 5.0 and higher, and is the standard
    to show all the global variables. |'
  prefs: []
  type: TYPE_TB
- en: '| mysql> SHOW VARIABLES; | All the MySQL variables are shown with this command.
    |'
  prefs: []
  type: TYPE_TB
- en: '| mysql> SHOW INNODB STATUS; | This command lets you find out the current `INNODB`
    status. |'
  prefs: []
  type: TYPE_TB
- en: '| mysql> SHOW GLOBAL STATUS; | This command shows the values of the load on
    the database server for all connections. |'
  prefs: []
  type: TYPE_TB
- en: '| mysql> SHOW LOCAL STATUS; | This is the same as the `SHOW GLOBAL STATUS`
    command, but the values are calculated on the current connection. |'
  prefs: []
  type: TYPE_TB
- en: '| mysql> mysqladmin extended -i100 -r | Use this command to view what is happening
    currently with the MySQL server. |'
  prefs: []
  type: TYPE_TB
- en: The database optimization is one of the key aspects to tune your Magento webshop.
    The database optimization amounts to 50 percent of a page load.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the Apache web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento recommends the use of Apache web server when you run a Magento website.
    There are some other web servers on the market, such as Nginx, but initially Magento
    was optimized to run on Apache.
  prefs: []
  type: TYPE_NORMAL
- en: The performance of the web server depends mostly on the hardware on which the
    server is running. Network card, RAM, disk, OS, and CPU are important hardware
    to think about when you are choosing a server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing to think about is the OS on which the web server will run. It
    is highly recommended to use a Linux distribution. In the recipes of this book,
    we used an Ubuntu server (a Debian-based Linux distribution).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't use a Windows server to run Magento. It will work but it is less efficient
    and can lead to issues with file permissions, code, and more.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Update the OS to the latest stable version because the update software is faster
    and safer. Use Apache2 instead of the Apache1 series. Apache2 uses fewer CPU resources
    while delivering static content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install only the required services on the web server. When a lot of services
    are installed, you will have background tasks that will use the resources of the
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use XFS and ReiserFS as the filesystem for a better disk I/O.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to configure the web server so that it never has to swap. When your
    web server begins to swap, all requests will be served slower. The first thing
    is to compare the volume of RAM on the server with the average memory load of
    a request and the number of requests. The second thing you can do is to configure
    the `MaxClients` setting. This setting controls the number of child processes
    when the server swaps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the `HostnameLookups` setting and check if this is configured with the
    `Off` value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is not recommended to use the `SymLinksIfOwnerMatch` setting. It is better
    to use `Options` `+FollowSymLinks` `+SymLinksIfOwnerMatch` for specified directories.
    For other locations, use the `Options` `+FollowSymLinks` setting to prevent that
    the system calls `lstat(2)`. The `lstat()` system calls are never cached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Don''t use a wildcard syntax in the `DirectoryIndex` setting. The setting is
    shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is better to use `index.php` only because Magento uses `index.php` as the
    default index. This setting is shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the `deflate` and `header` Apache modules with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `.htaccess` file in the Magento root and go to the `mod_deflate` configuration
    tag. Uncomment some lines so that the block looks like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When you get an internal server error after the change, it is possible that
    the Apache `headers` module is not enabled. Run the `sudo a2enmod header` command
    and restart the server to fix this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Take a look at the `KeepAlive` setting of your Apache server. When this is on,
    the Apache server can serve multiple requests through the same TCP connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the **MPM** (**Multi-Processing Modules**) for your case. The values
    of these configurations depend on the resources and load that you expect on your
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you run some load tests again, you can compare the obtained results with
    the results before the optimization. Usually, you will see some differences.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The performance of a web server depends on many factors. The key parts are the
    application, the hardware, the OS, and the network.
  prefs: []
  type: TYPE_NORMAL
- en: '**Application**: The first thing is to ensure that your application is working
    efficiently with the resources of the server. If your application expects a lot
    of resources for a request, you can optimize it here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hardware**: The second thing is the hardware of the server. You have to make
    sure that the resources of a server are high enough to serve the expected load
    and peaks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: The third thing is the OS and web server. Use a Linux server for Magento
    with an Apache or Nginx web server on it. Always use the latest version of the
    software because it is mostly faster and more secured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network**: The last thing is the network. The web server sends the response
    through the network to the client. When that network is slow, the download time
    of a request will be long. Host your web server with a good network connection
    and host it in the same region as that of the target audience of your webshop.
    For example, host your website in Italy for an Italian website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize the configurations of the system you are using. In this recipe, we
    did some optimizations to tweak the Apache web server by defining custom settings
    in the `.htaccess` file.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing is the geographic location of your web server. It is better to
    locate your web server in the region where your target audience lives. Also, limit
    the size and number of HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Tuning the Magento configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento has some standard features for a better performance, such as caching
    and compilation. In this recipe, we will configure these features for a better
    performance of the setup.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in to the admin panel and navigate to the configuration page at **System**
    | **Configuration**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you perform the following steps, your Magento installation will run a
    bit faster:'
  prefs: []
  type: TYPE_NORMAL
- en: Uninstall or disable the extensions that you are not using.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable all caching systems that Magento has. They are located at **System**
    | **Cache Management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When all caches are enabled, make sure you clear them when you are developing
    the code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Compile your Magento installation. You can do this by clicking on **Run Compilation
    Process** on the compilation page at **System** | **Tools** | **Compilation**.
    When the compilation is enabled, all the Magento classes are built in one directory
    where they will be loaded faster. Compilation can increase the speed by 25 to
    50 percent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable the unused modules. You can do this by disabling the frontend output
    by navigating to **System** | **Configuration** | **Advanced** | **Disable Modules
    Output**. When you're not using the `Mage_Poll` module, you can disable it here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable some developer features because you don't need them on a live site.
    Go to **System** | **Configuration** | **Advanced** | **Developers** and configure
    it as shown in the following screenshot:![How to do it...](img/3329OS_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Catalog** | **Attributes** | **Manage Attributes**. When you click on
    an attribute, you can see the **Frontend Properties** section. Set only those
    configuration parameters that you want to use in the frontend to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **System** | **Configuration** | **Catalog** and enable the flat catalog
    product and flat catalog category settings, as shown in the following screenshot.
    When enabled, a part of the EAV system will be converted to flat tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more information about the flat catalog settings in the *Working
    with EAV tables* recipe of [Chapter 5](ch05.html "Chapter 5. Database Concepts"),
    *Database Concepts*.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The standard Magento configurations are not the best configurations for an optimal
    performance. Every option you enable has some impact on the flexibility of development
    and compatibility with platforms and modules.
  prefs: []
  type: TYPE_NORMAL
- en: When caching is enabled, you will have a better performance. However, you have
    to keep in mind that you will have to clear it frequently while developing the
    code, to see your changes in action.
  prefs: []
  type: TYPE_NORMAL
- en: Development features are useful when developing code because it contains interesting
    information. However, when your site is live, you don't need these features as
    it will slow down your website. It is recommended that you disable this.
  prefs: []
  type: TYPE_NORMAL
- en: Compilation is a process where Magento will copy all the classes from the `app/code`
    folder into the `includes` folder. When all the classes are located in one folder,
    it is faster to load a class instead of looking into all the different module's
    folders to load a class.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of compilation is that your site will be faster but a disadvantage
    is that you have to run the compilation process after every change in the code.
    When you use a module that doesn't follow the Magento standards, it can lead to
    errors when compilation is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing is to enable the flat catalog product and flat catalog category.
    When you enable these features, Magento will use a flat table for loading products
    and categories instead of looking in the different EAV tables.
  prefs: []
  type: TYPE_NORMAL
- en: The disadvantages of using this is that you have to sync the data from the EAV
    tables to the flat tables. When working with a large amount of products and categories,
    the index process that syncs the data runs for a very long duration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring APC and Memcached
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The cache system in Magento is based on cache parts of the HTML output and some
    configuration files. In this recipe, we will configure caching on the PHP level
    that you can do with APC and Memcached. APC will cache PHP files, while Memcached
    will cache objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When configuring APC and Memcached for our Magento store, we have to make sure
    that APC is installed on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install APC, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Debian-based Linux distribution, you can install APC with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow the installer and APC will be available in your PHP configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install Memcached, you can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test if the extensions are correctly installed, you can use the `phpinfo()`
    command. This command gives you a graphical representation of all the available
    PHP settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To see `phpinfo`, create a `phpinfo.php` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you search on APC and Memcached, you will see a block that contains all
    the settings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will discuss the APC and Memcached configuration
    in Magento:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure APC and Memcached are installed on the server. This is described in
    the previous section of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `app/code/local.xml` file and add a `<cache>` block as a child of
    the `<global>` tag. Your `local.xml` file looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear all the Magento caches and restart your Apache server. When you do a
    load test with ApacheBench, you will see that there is a big improvement in the
    performance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The previous configuration enables the APC configuration for Magento. With
    the next configuration, we enable Memcached. We do this by adding a `<cache>`
    tag as a child of the `<global>` tag. With Memcached, the `local.xml` file will
    look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last thing is to store the `var/cache` folder in memory. We can do this
    by mounting the folder using TMPFS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**APC** (**Alternative PHP Cache**) is an open source caching framework that
    optimizes the PHP code, compiles it, and caches it in the shared memory. Executing
    a precompiled code is faster than loading all the scripts. A common problem with
    APC is that you have to clear the APC cache before you see any code changes because
    some parts of the old code are cached.'
  prefs: []
  type: TYPE_NORMAL
- en: Memcached is another caching system in PHP. Memcached will cache objects that
    will be used in the application later. Examples are database objects, sessions,
    and API calls. Memcached runs on a server, that is, in this example, the same
    server as the web server. By setting the Magento configuration, we connect to
    the local Memcached server that runs on port 11211.
  prefs: []
  type: TYPE_NORMAL
- en: In Magento, Memcached increases the performance. In the frontend, there is some
    effect but the largest effect is in the backend where Magento itself caches very
    few things.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing was to mount the Magento `cache` folder in the memory. When enough
    memory is available, it is faster to store the cache files in the RAM memory.
    When they are located in the RAM, it is faster to load a cache file instead of
    reading it from the disk.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the PHP configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are not using an APC such as an accelerator, think about using a PHP
    accelerator; we will see how in this recipe. When a PHP script is requested, the
    script will be read and then it will be compiled in binary, which is called opcode.
    This compiled code will be executed by the PHP engine.
  prefs: []
  type: TYPE_NORMAL
- en: An opcode cache is simply a caching mechanism that saves the compiled code so
    that the code doesn't have to be compiled every time the script will run. In this
    recipe, we will optimize the `php.ini` settings for the best performance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a lot of PHP accelerators on the market, such as APC, eAccelerator,
    XCache, Zend Accelerator, and Zend Platform. At the following URLs, you can find
    out more information about these accelerators:'
  prefs: []
  type: TYPE_NORMAL
- en: '**APC**: This PHP accelerator can be found at [http://pecl.php.net/package/APC](http://pecl.php.net/package/APC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eAccelerator**: This PHP accelerator can be found at [http://eaccelerator.net/](http://eaccelerator.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XCache**: This PHP accelerator can be found at [http://xcache.lighttpd.net/](http://xcache.lighttpd.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe some measures that you can take to improve the
    PHP configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Use an efficient process manager, such as php-fpm, that runs on an impressive
    speed on FastCGI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `realpath_cache_size` configuration setting to configure the size of
    the real path cache in PHP. On systems where PHP opens and closes a lot of files,
    this value needs to be increased. You can use the following setting for Magento:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The settings in the following table can improve the performance of the PHP
    settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Setting | Description | Recommended value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `max_execution_time` | This setting sets the maximum time (in seconds) for
    which a process can live. | 120 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `max_input_time` | This property sets the time (in seconds) for which a script
    will wait for input data. | 240 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `memory_limit` | With this setting, you can set the amount of memory a process
    can consume. | For Magento, it is recommended to use 216 MB. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `output_buffering` | With this setting, you can set the amount of bytes to
    buffer before sending the response to the client. | 4096 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'The last thing is to disable some error reporting levels when your site is
    live. This can be done by using the following setting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The values in the `php.ini` configuration depend mostly on the application that
    you are running and the load that the application will have on your system. If
    your application has some processes that will run for a long time (this is possible
    with the re-index process when you have a large number of products), it is required
    to increase the values of `max_execution_time` and `max_input_time`. This is the
    same for the `memory_limit` parameter where the recommended value for Magento
    is 216 MB.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling the error reporting on a production system is recommended for warnings
    and notices but critical errors need to be reported because this information is
    required when solving the bug.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the page speed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: YSlow is a tool that analyzes the speed for a web page. It is a plugin that
    you can install in Firebug. While running a report, the site will be tested on
    some parameters. A report will be shown with an overall score of your website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The test is based on a ruleset. You have the YSlow (V2) and YSlow (V1) ruleset.
    We will use the YSlow(V2) ruleset for this recipe, which has 22 rules. The complete
    page load (including images and static content) can be increased by 25 to 50 percent
    if you adhere to the following 22 rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Minimize HTTP requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a Content Delivery Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid empty `src` or `href`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an expires header or a cache-control header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Gzip for components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put stylesheets at the top
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put scripts at the bottom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid CSS expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make JavaScript and CSS external
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce DNS lookups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minify JavaScript and CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid redirects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove duplicate scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure ETags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make AJAX cacheable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use GET for AJAX requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the number of DOM elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No 404 errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the cookie size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use cookie-free domains for components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not scale images in HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make `favicon.ico` small and cacheable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to see what we can do with a YSlow result:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the YSlow test on the current web page. On a standard Magento webshop, the
    test normally returns an overall C score.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first thing is to make fewer HTTP requests. You can fix this by enabling
    CSS and JS merging. For an optimal score, it is recommended to use sprites so
    that you have only one background image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To optimize the background image, you can use an image optimization tool such
    as Yahoo's Smush.it. When you upload the `images` folder of your theme and run
    it, you can download the optimized version as shown in the following screenshot:![How
    to do it...](img/3329OS_11_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can download the optimized images and replace them in the `skin` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next bad point in the test is adding the expires header. We can fix this
    by modifying some rules in the `.htaccess` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code shows how to add the `expire` headers to the static content
    of the website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the following code, we will compress some file types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last step is to use a CDN network to host your static images. You can use
    an existing CDN provider to host the static files of your site, but you can create
    a subdomain `static.magento-dev.local`, which also points to the Magento root
    and configures Magento to use this subdomain for static content. You can do this
    in the backend by navigating to **System** | **Configuration** | **General** |
    **Web**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The documentation of all the 22 rules of YSlow is available on their website.
    If you want more information about a rule, visit the following page that contains
    all the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.yahoo.com/performance/rules.html](http://developer.yahoo.com/performance/rules.html)'
  prefs: []
  type: TYPE_NORMAL
