- en: Chapter 5. Managing Data In and Out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Sending different data to multiple views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sticky form elements in CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying errors next to form items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading files from the filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing files to the filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and downloading ZIP files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading files with CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and using validation callbacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the language class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the language class – switching a language on the fly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confirming cookie acceptance from the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing data is an important subject covering not only the format of output
    data, database structure, and access methods but also security; any discussion
    of data and managing that data will obviously feature discussions of security
    and the protection of your system and its data. As such, there will be some cross-over
    with the security chapter and I recommend that you also read that chapter alongside
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Sending different data to multiple views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Someone recently asked me if they could send different data to different views
    in the same browser page and have the data displayed in its own section. Luckily,
    this can be done easily; you can pass more than one array of data to more than
    one view at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: This can be really useful if your web page is split into sections with each
    section displaying its own data. For example, you may want a section displaying
    most read articles with another displaying most shared articles.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we''re going to be pulling data from a database we will need to ensure that
    a few `config` variables are set to allow us to do this. Open up the `/path/to/codeigniter/application/config/database.php`
    file and find the following settings. Then, amend them to match your requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option Name | Valid Options | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$db[''default''][''hostname'']` | Usually localhost | This is the server
    on which the database sits |'
  prefs: []
  type: TYPE_TB
- en: '| `$db[''default''][''username'']` | ? | The database access username |'
  prefs: []
  type: TYPE_TB
- en: '| `$db[''default''][''password'']` | ? | The password for the database |'
  prefs: []
  type: TYPE_TB
- en: '| `$db[''default''][''database'']` | ? | The name of the database |'
  prefs: []
  type: TYPE_TB
- en: 'Now that we''ve configured CodeIgniter to connect to a database, copy the following
    code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create four files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/articles.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/content_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/articles/left.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/articles/right.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/articles.php` file
    and copy the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/models/content_model.php` file
    and copy the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/views/articles/left.php` file
    and copy the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/views/articles/right.php` file
    and copy the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`public function index()` loads the `content_model` by `$this->load->model(''content_model'');`
    and calls the two model functions `get_main_article()` and `get_article_list()`.
    The `get_main_article()` function fetches the row for the left-hand view and stores
    it in the `$left_data` array and `get_article_list()` fetches results for the
    right-hand view and stores it in the `$right_data` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Both left and right views are called and both the arrays (`$left_data` and
    `$right_data`) passed to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Each view will then loop through the specific array outputting the fields we
    want.
  prefs: []
  type: TYPE_NORMAL
- en: Validating user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validating user input allows you to set rules against which input coming in
    from the user can be judged. For example, you may wish to enforce certain conditions
    on an e-mail field, most obviously checking for a valid e-mail syntax, but also
    the minimum and maximum length, and whether it is required. CodeIgniter can even
    look into a database and check for duplicate values. In this recipe, we're going
    to build a controller and view, which together will allow the user to input data
    and have it validated against rules that will be set; errors, if any, will be
    reported back to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You''ll need to be aware of a few things before getting started. The following
    is a table of all available CodeIgniter validation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Rule | Parameter | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| required | No | It specifies if the specific form element must have data
    when submitted by the user. It will return `FALSE` if empty. |'
  prefs: []
  type: TYPE_TB
- en: '| matches | Yes | It compares the data between two form elements to see if
    they match. It will return `FALSE` if they don''t match and `TRUE` if they do.
    Example use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| is_unique | Yes | It queries a database to see if the value of a table record
    item matches the value of the form element being submitted. It will return `FALSE`
    if the form element is not unique. Example use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| min_length | Yes | It checks the length of the value in the form element
    to see if it is less than the parameter specified. It will return `FALSE` if the
    form element is smaller than the value specified. Example use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| max_length | Yes | It is the reverse of min_length; it checks if the length
    of the value in the form element is greater than the parameter specified. It will
    return `FALSE` if the form element is greater than the value specified. Example
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| exact_length | Yes | It checks if the length of the value in the form element
    is the exact value as compared to the specified parameter. It will return `FALSE`
    if the form element is anything other than what is specified. Example use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| greater_than | Yes | It checks if the value in the form element is greater
    than a supplied parameter. It will return `FALSE` if the form element is less
    than the parameter value or that value is not numeric. Example use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| less_than | Yes | It is the reverse of greater_than. It checks if the value
    in the form element is less than a supplied parameter. It will return `FALSE`
    if the form element is greater than the parameter value or that value is not numeric.
    Example use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| alpha | No | It checks if the value in the form element contains alphabetical
    characters only. It will return `FALSE` if the form element value is anything
    other than that. |'
  prefs: []
  type: TYPE_TB
- en: '| alpha_numeric | No | It checks if the value in the form element contains
    alphabetical and integer values only. It will return `FALSE` if the form element
    value is anything other than that. |'
  prefs: []
  type: TYPE_TB
- en: '| alpha_dash | No | It checks if the value of the form element contains anything
    other than alpha-numeric characters, underscores or dashes. It will return `FALSE`
    if it contains any other value. |'
  prefs: []
  type: TYPE_TB
- en: '| numeric | No | It checks if the value of the form element contains anything
    other than numeric characters. It will return `FALSE` if the form element contains
    anything other than that. |'
  prefs: []
  type: TYPE_TB
- en: '| integer | No | It checks if the value of the form element contains anything
    other than integer values. It will return `FALSE` if the form element contains
    anything other than that. |'
  prefs: []
  type: TYPE_TB
- en: '| decimal | Yes | It checks if the value of the form element contains a decimal
    value, that is a number separated with a decimal point (`.`), otherwise it will
    return `FALSE`. |'
  prefs: []
  type: TYPE_TB
- en: '| is_natural | No | It checks if the value of the form element contains anything
    other than natural numbers—that is to say anything other than 1, 2, 3, 4, 5, and
    so on. It will return `FALSE` if the form element contains anything other than
    that. |'
  prefs: []
  type: TYPE_TB
- en: '| is_natural_no_zero | No | It checks if the value of the form element contains
    anything other than natural numbers, which are greater than zero. It will return
    `FALSE` if the value is anything other than natural numbers or zero. |'
  prefs: []
  type: TYPE_TB
- en: '| valid_email | No | It checks if the value of the form element contains a
    valid e-mail as calculated by Regular Expression within CodeIgniter. It will return
    `FALSE` if the form element does not contain a valid e-mail address. |'
  prefs: []
  type: TYPE_TB
- en: '| valid_emails | No | It checks if the value of the form element contains valid
    e-mail addresses as calculated by Regular Expression within CodeIgniter. It will
    return `FALSE` if the form element does not contain a valid e-mail address. |'
  prefs: []
  type: TYPE_TB
- en: '| valid_ip | No | It checks if the supplied IP address is valid. |'
  prefs: []
  type: TYPE_TB
- en: '| valid_base64 | No | It returns `FALSE` if the supplied string contains anything
    other than valid Base64 characters. |'
  prefs: []
  type: TYPE_TB
- en: There are also some basic config changes we'll need to make before we start
    working through our recipes. We're going to amend the `path/to/codeigniter/application/config/config.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '| Config Item | Change to Value | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''global_xrsf_filtering'']` | TRUE | It specifies whether CodeIgniter
    always filters for Cross-Site Scripting. For security purposes it is recommended
    that this is set to `TRUE`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''csrf_protection'']` | TRUE | It specifies whether to use Cross-Site
    Request Forgery protection. For security purposes it is recommended that this
    is set to `TRUE`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''csrf_token_name'']` | Your own string | It specifies that if the
    user closes his/her browser the session becomes void. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''csrf_cookie_name'']` | Another string of your choice | It specifies
    whether the cookie should be encrypted on the user''s computer. For security purposes
    this should be set to `TRUE`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''csrf_expire'']` | 7200 | It specifies the length of time in seconds.
    |'
  prefs: []
  type: TYPE_TB
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the following files in your CodeIgniter install:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/form.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/new_record.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following code into the `path/to/codeigniter/application/controllers/form.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code into the `path /to/codeigniter/application/views/new_record.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CodeIgniter will first run `public function index()`, which will immediately
    redirect to `public function submit_form()`.The `submit_form()` function will
    set our error delimiters with the line `$this->form_validation->set_error_delimiters('''',
    ''<br />'');` and then list the validation rules for each form element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As the form is being run for the first time `$this->form_validation->run()`
    will return `FALSE` and so load the view file `$this->load->view(''new_record'');`,
    which will render the form to the user. The user can then enter his/her details
    into the form. Once the user clicks on the **Submit** button, CodeIgniter again
    loads public function `submit_form()`, but this time, as the form is being submitted
    the validation rules are applied to the data being submitted. CodeIgniter will
    compare the data submitted against the rules and return `FALSE` if that data fails
    to match the rules in validation. If those rules are not met, the user will see
    error messages in the view. The following code checks if there are any validation
    errors, if so it will display them one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Preparing user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The validation rules can also be used to prepare input for you. For example,
    you can `trim()` whitespace from the input or apply `htmlspecialchars()`. Any
    PHP function can be used, as long as that function accepts one parameter as an
    argument by default.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s assume that we want to `trim()` whitespaces from the beginning and end
    of the input and generate an `md5` hash of the input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Sticky form elements in CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is good for user experience to offer feedback; we do this in the preceding
    sections with `validation_errors()`, but it is also useful to keep user data in
    form elements to save them having to re-type everything, should there be an error.
    To do this, we need to use CodeIgniter's `set_value()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you load `$this->load->helper('form');` from within the `__constructor()`
    of the controller; however, you can always autoload the helper from `/path.to/codeigniter/application/config/autoload.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to edit the `/path/to/codeigniter/application/views/new_record.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amend the file to show the following (changes in bold):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Essentially, it is exactly the same functionality as the *Validating User Input*
    recipe, except that now the CodeIgniter function, `set_value()`, populates the
    form element value with the data submitted previously by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying errors next to form items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, we displayed errors one by one at the top of the HTML
    page; however, you may wish to display each individual error closer to the form
    element to which it refers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to amend the `/path/to/codeigniter/application/views/new_record.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amend the code to reflect the following (changes in bold):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Essentially, it's exactly the same validation functionality as the preceding
    recipe; the only change is how we're displaying the errors. We have removed the
    line `<p><?php echo validation_errors(); ?></p>`, as we're not listing the errors
    one by one. We have added the CodeIgniter's `form_error()` statement, passing
    it the name of the HTML form element so that if CodeIgniter's validation class
    discovers that the posted form data does not meet the parameters assigned to it
    as validation rules, an error will be displayed above the form element.
  prefs: []
  type: TYPE_NORMAL
- en: Reading files from the filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although you're probably going to be writing and reading data in a database
    you will certainly come in contact with the requirement to write something to
    the disk, and read from files stored on it. CodeIgniter can support several methods
    for interacting with files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are no configuration options to change here, but ensure that you load
    the file helper in your controller constructor (and also the `url` helper):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to read files from the disk and display details about them to
    a view. Firstly, we''re going to create two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/file.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/file/view_file.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following code into `/path/to/codeigniter/application/controllers/file.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code into `/path/to/codeigniter/application/views/files/view_file.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The business end of this is the controller, `function view_all_files()`. We're
    doing three things. First, is setting the target directory with which we wish
    to read the line `$data['dir'] = '/full/path/to/read';` obviously replacing '`/full/path/to/read'`
    with the actual path.
  prefs: []
  type: TYPE_NORMAL
- en: We then pass `$data['dir']` to the CodeIgniter function, which does the heavy
    lifting for us, `get_dir_file_info()` returns an array for every item in the target
    directory. We store this in `$data['files']`.
  prefs: []
  type: TYPE_NORMAL
- en: '`$this->load->view(''files/view_file'', $data);` calls the HTML template, passing
    to it the files array, which in turn loops through the `$files` array, outputting
    to an HTML table.'
  prefs: []
  type: TYPE_NORMAL
- en: We also use the PHP function `is_dir()` to test whether an item is a directory
    or not; if it is, we make it bold in the HTML code—for no other reason than it's
    good to know what you're looking at.
  prefs: []
  type: TYPE_NORMAL
- en: It would be a great idea to move much of this functionality to a library or
    helper so that it can be more easily shared by other parts of your application
    if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Writing files to the filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're reading from a disk (as we have seen previously), you'll probably
    want to write to a disk. Now, we'll look at creating several types of files and
    writing them to a location on the disk.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to amend the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/write_file.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amend `/path/to/codeigniter/application/controllers/file/file.php` to reflect
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `public function write()` function sets the `$data_to_write` variable to
    a string; however, this could be amended to accept user input, database results,
    and so on. The `$path` array is also defined, this should be the full path with
    the file extension. The destination directory should have enough permissions to
    allow CodeIgniter to write to it. Then, we test for the return result of the CodeIgniter
    function, `write_file()`. If there was an error, we display a short message; however,
    you can amend this, perhaps report to the error log. If successful it displays
    a success message; again this can also be amended to other behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and downloading ZIP files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may wish to generate ZIP folders from your application and force a download
    for your users; for example, if you have a group of files, such as a press pack,
    which you wish to be kept together, or a set of CSV files. Saving them into a
    ZIP file and allowing a download is a great way to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create a new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/zip.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And copy the following code into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is actually quite simple, we start by declaring a `$file_name`. This is
    a string, you'll notice that the filename also contains a folder name `my_zipped_files_folder`—you
    don't have to include a folder but if you do CodeIgniter will automatically create
    a folder in the ZIP archive.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create some data—in this case it is written as a string of text; however,
    it could easily be output from a database. For example, we could change the `$data`
    line to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: After we create our `$data` we then create the date, which we'll use in the
    filename for our ZIP. The line `$this->zip->add_data($file_name, $data);` takes
    as argument the filename and data we created earlier and creates a file inside
    the ZIP file and fills it with the string in `$data`. `$this->zip->archive('/path/to/your/zip/folder/'.$date.'.zip');`
    will write the ZIP to the disc using `$date` as the ZIP filename. `$this->zip->download($date.'.zip');`
    forces the ZIP file to open in the client browser and `$this->zip->clear_data();`
    will clear the ZIP file from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files with CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter comes with very good file uploading support, which can take a lot
    of the hassle out of writing upload functions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are some settings you should be aware of which you''ll probably need
    to change for your environment. Firstly, ensure that you load the upload library
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a table of settings that should be placed in the `$config`
    array in the controller you are using, such as the following `Fileupload` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Setting | Default | Change to | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `upload_path` | None | None | It specifies the path to the folder where the
    uploaded file should go. Ensure that you have set the correct permissions to enable
    CodeIgniter to write to it. |'
  prefs: []
  type: TYPE_TB
- en: '| `allowed_types` | None | None | It specifies the allowed mime types, which
    are allowed in the upload. This can be useful as it allows you to white list uploaded
    file types; that is, it allows you to define only allowed types. You should separate
    each type with a pipe (`&#124;`). For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `file_name` | None | Desired file name | If this value is set, CodeIgniter
    will attempt to rename the file to this value on upload. |'
  prefs: []
  type: TYPE_TB
- en: '| `overwrite` | FALSE | TRUE/FALSE | CodeIgniter looks in the upload destination
    folder to see if a file with a matching file name already exists. If this is set
    to `TRUE` that file will be overwritten; if it is set to `FALSE`, a number will
    be appended to the file name. |'
  prefs: []
  type: TYPE_TB
- en: '| `max_size` | 0 | None | It specifies the maximum size in kilobytes that the
    file is allowed to be. Setting it to zero will tell CodeIgniter that there is
    no limit. |'
  prefs: []
  type: TYPE_TB
- en: '| `max_width` | 0 | None | It specifies the maximum width in pixels. Setting
    it to zero will tell CodeIgniter that there is no limit. |'
  prefs: []
  type: TYPE_TB
- en: '| `max_height` | 0 | None | It specifies the maximum height in pixels. Setting
    it to zero will tell CodeIgniter that there is no limit. |'
  prefs: []
  type: TYPE_TB
- en: '| `max_filename` | 0 | None | It specifies the maximum character file name
    length of the uploaded file. Setting it to zero will tell CodeIgniter that there
    is no limit. |'
  prefs: []
  type: TYPE_TB
- en: '| `encrypt_name` | FALSE | TRUE/FALSE | It tells CodeIgniter that you wish
    to encrypt the file name of the image on upload. |'
  prefs: []
  type: TYPE_TB
- en: '| `remove_spaces` | TRUE | TRUE/FALSE | It specifies if you want whitespace
    removed from the filename on upload. |'
  prefs: []
  type: TYPE_TB
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/fileupload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/upload/upload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following code into the file `/path/to/codeigniter/application/controllers/fileupload.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code into the file `/path/to/codeigniter/application/views/upload.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is thankfully very simple; when `Fileupload` is run `function index()`
    will `redirect()` to `function upload()`, which will in turn load the HTML upload
    form. Once a user has submitted that form `function upload()` will run again and
    attempt to upload the file with the CodeIgniter function, `do_upload()`. The `do_upload()`
    function will perform the task of uploading the file and preparing it for writing
    to the filesystem such as checking that the file size, file type, and so on match
    your settings, ensuring that the upload destination directory exists and is writable,
    and finally using the PHP function `move_uploaded_file()` it'll complete the task
    of uploading the file.
  prefs: []
  type: TYPE_NORMAL
- en: The `if` statement catches the result of this; if `TRUE` the file is uploaded
    successfully and the success form is displayed, the `$data` array is populated
    with the output of the CodeIgniter function `$this->upload->data()`.
  prefs: []
  type: TYPE_NORMAL
- en: However, if `do_upload()` returned `FALSE`, the HTML upload form is displayed
    again, this time with an error message to the user.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You''ll probably get a few errors the first time you try this, usually because
    you have an incorrect upload path, or that destination folder could have the wrong
    permissions assigned to it. It''ll take a little tweaking to get it right. The
    following are some of the more common errors you''ll get:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The upload path does not appear to be valid**: This means you''ve put the
    wrong value in `$config[''upload_path'']`, check that you have the correct path
    to your uploads folder. Ensure that you have a trailing slash / at the end of
    your path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The upload destination folder does not appear to be writable**: This means
    the directory you want to upload doesn''t have write permissions; usually this
    can be fixed on the command line by `chmod 777 -R [dir _name]` where `[dir_name]`
    is the path to the directory you want to upload to. Naturally, having a folder
    with permissions of `777` might cause you a headache later on, so ensure that
    the upload folder is outside of the web root.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and using validation callbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Callbacks are used when you want to validate data in a way that may not be supported
    by the CodeIgniter's validation class. The benefit of using callbacks is that
    posted data can be easily validated by a custom function you define, and errors,
    if any, are passed into the error reporting functions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to amend the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/form.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amend that file to show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is actually very simple, especially if you have used callbacks in other
    applications. When the user submits the form, CodeIgniter validates the form as
    it would do normally, except that when CodeIgniter comes to validate the user's
    e-mail, the function, `callback_email_check($email)`, is run. This function can
    perform any test and return `TRUE` or `FALSE`, and if `FALSE` a message too.
  prefs: []
  type: TYPE_NORMAL
- en: Using the language class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most useful features of CodeIgniter is its language class and support.
    It allows you to store content and set that content to belong to various languages;
    it is then possible to switch between languages to display different text in the
    same place holders in the view files. It's really easy to set up and this is how
    you do it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A little information about language files. You'll need to know the rules for
    naming them. Language files are stored at `/path/to/codeigniter/application/system/language/[language_name]/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where `[language_name]` is the name of the language you wish to support. So,
    for example, if you want to support English, French, and German you will create
    three file names:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/english/en_lang.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/french/fr_lang.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/german/de_lang.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see above that the three files are named 'en', 'fr', and 'de'. Appended
    to the names is `_lang.php`; you must append each file with `_lang.php` so that
    CodeIgniter knows it is a language file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, in order to create an English language file create the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/system/language/english/en_lang.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/lang.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/lang/english.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the following code into `/path/to/codeigniter/application/controllers/lang.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the following code into `/path/to/codeigniter/application/views/lang/form.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the following code into `/path/to/codeigniter/language/english/en_lang.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the constructor of the controller `/path/to/codeigniter/application/controllers/lang.php`
    we''re loading helpers, such as form and URL, but we''re also doing two language-related
    things, loading the language helper and setting the language to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Where `'en'` is the language and `'English'` is the folder we're storing all
    English-related content in.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re loading the language helper and declaring the language filename and
    the language to be used, specifically the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Here, the first parameter is the name of the language file minus the `_lang.php`
    (so en_lang.php will be just `'en'`, `fr_lang.php` will just be `'fr'` and so
    on). The second parameter is the language (in this case, it is the folder in the
    `/path/to/codeigniter/application/language/` folder).
  prefs: []
  type: TYPE_NORMAL
- en: Once we have loaded the language class and defined the correct language and
    filename, we can then begin to pull out items in the `$lang` array. The way we
    pull items out of the `$lang` array is by echoing `$this->lang->line(array_element_name);`
    so, to pull out the form title we would write echo `$this->lang->line('form_title');`
  prefs: []
  type: TYPE_NORMAL
- en: Confirming cookie acceptance from the user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Various states and regions now require websites to ask their users if they approve
    of that website writing cookies to their computer. There is some debate as to
    how this can be provisioned by the website and what constitutes approval from
    the user. You may have noticed that recently websites display a notice to the
    user requesting approval. Something called Implied Consent is the current thinking;
    a notice is shown informing the user that if they continue to use the site they
    are happy with the cookies being written.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe does just that; and a notice is shown to the user that
    will disappear if they click on a link indicating they are happy with cookies
    being written.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to make sure some config variables are set for us to be able to read
    and write cookies to a user’s computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/path/to/codeigniter/application/config/config.php` file and make
    the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| $config array items | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[‘cookie_prefix’] = “”;` | It specifies if you wish for a character
    to be there before the cookie name; for example, `$config[‘cookie_prefix’] = “thisprefix_”;`
    will produce a cookie called `thisprefix_cookie_con`’ (`cookie_conf` being the
    example cookie, in your application you will replace it with the cookie name you
    are working with). |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[‘cookie_domain’] = “”;` | It specifies the domain of the server;
    if you are developing on local host, it is best to leave this value as blank,
    replacing with the domain name and path once you move out of a localhost environment.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[‘cookie_path’] = “/”;` | It specifies the path to the cookie—chances
    are you’ll want this to remain `/`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[‘cookie_secure’] = FALSE;` | It specifies if you wish to encrypt
    the cookie value, TRUE if you want it to be encrypted and FALSE if not. |'
  prefs: []
  type: TYPE_TB
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re going to create two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/cookie_conf.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/cookie_conf/cookie_conf.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the file `/path/to/codeigniter/application/controllers/cookie_conf.php`
    and copy the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `/path/to/codeigniter/application/views/cookie_conf/cookie_conf.php`
    and copy the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few things going on here but essentially it’s quite simple. Take
    a look at the following flowchart, it gives a pretty good overview of what is
    happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We start with the page being loaded. Does the cookie exist? The following code
    is from the `cookie_conf` controller. It checks to see if a cookie named `cookie_conf`
    already exists and if not will create that cookie with a value of `cookie-conf-unconfirmed`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The following code is also from `cookie_conf`. After checking for an existence
    of a cookie (creating one if it doesn’t exist), the controller then looks at the
    value of that cookie. If the cookie does not exist or contains the value `cookie-conf-unconfirmed`,
    `$data[‘display_cookie_conf’]` is set to `TRUE`, otherwise it is set to `FALSE`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`cookie_conf` then loads the view. In the view is some PHP code, which checks
    if `$display_cookie_conf` is set and if so looks at its value. If it is `FALSE`,
    the code is skipped over; however, if it is `TRUE`, the HTML code is displayed.
    The user is given two options, one to agree with the cookie policy and the other
    to disagree.'
  prefs: []
  type: TYPE_NORMAL
- en: If the user disagrees, you’ll have to implement your own action on this event.
    The preceding code will respond by echoing out the text `‘You don’t agree to the
    cookie’`; but in real situations you’ll have to decide how you want to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: If the user agrees, the `cookie-conf-container` will slide up and `public function
    agree()` in the `Cookie_conf` controller is called by AJAX, setting the value
    of the cookie from `cookie-cong’unconfirmed’` to `‘confirmed’`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Any subsequent visit will make `cookie_conf` look for that cookie, and as long
    as it exists and contains the value `‘confirmed’` the `‘cookie-cong-container’`
    will not be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I want to mention a couple of gotchas which you might experience while implementing
    the cookie authorization recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '**Localhost and Cookies**: Firstly, the domain attribute. If you are developing
    on localhost, you should leave this value blank. Reason being that web browsers
    often have trouble with implementing cookies if domain is set to local host. Why?
    Because browsers are programmed to expect at least two items in the domain attribute
    those being the domain name and a tld, so the browser is expecting something similar
    to domain.com—localhost obviously doesn’t look like that. So for developing in
    localhost, leave the domain attribute blank, replacing with the correct domain
    and path once you move out of the localhost environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expire value**: Make sure that you define the expire value as an integer
    rather than a string; so don’t put the expire value in single or double quotes,
    you want this: 12345, and not this: ‘12345’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
