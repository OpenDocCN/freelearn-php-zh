["```php\n$user->password = $this->request->getPost(\"password\");\n```", "```php\n$password = $this->request->getPost(\"password\");\n$user->password = $this->security->hash($password);\n```", "```php\npublic function loginAction() {\n\n        if ($this->request->isPost()) {\n            $username = $this->request->getPost('username');\n            $password = $this->request->getPost('password');\n\n            $user = Users::findFirstByUsername($username);\n            if ($user && $this->security->checkHash($password, $user->password)) {\n                $this->session->set(\"user_id\", $user->id);\n                $this->cookies->set('user_id', $user->id);\n                $this->session->set('auth', array(\n                    'id' => $user->id,\n                    'name' => $user->name\n                ));\n                $this->flash->success(\"Welcome \" . $user->name);\n            }else{\n                $this->flash->error(\"Username and Password combination not found\");\n            }\n        }\n        return $this->dispatcher->forward(\n            array(\n                \"controller\" => \"posts\",\n                \"action\" => \"index\"\n            )\n        );\n    }\n```", "```php\n{{ text_field(\"password\", \"size\" : 30) }}\n```", "```php\n{{ password_field(\"password\", \"size\" : 30) }}\n```", "```php\n<title>Phalcon Blog</title>\n```", "```php\n{{ get_title() }}\n```", "```php\npublic function initialize() {\n        $this->tag->setTitle(\"Phalcon Blog\");\n}\n```", "```php\n$this->tag->prependTitle($post->title . \" - \");\n```", "```php\n$this->tag->setDoctype(\\Phalcon\\Tag::HTML5);\n```", "```php\n<!DOCTYPE html>\n```", "```php\n{{ get_doctype() }}\n```", "```php\n{{ stylesheet_link(\"css/bootstrap/bootstrap.min.css\") }}\n{{ stylesheet_link(\"css/bootstrap/bootstrap-responsive.min.css\") }}\n```", "```php\n{{ javascript_include(\"js/jquery.min.js\") }}\n{{ javascript_include(\"js/bootstrap.min.js\") }}\n```", "```php\n[application]\ncontrollersDir = /home/eristoddle/Dropbox/xampp/htdocs/phalconBlog/app/controllers/\nmodelsDir = /home/eristoddle/Dropbox/xampp/htdocs/phalconBlog/app/models/\nviewsDir = /home/eristoddle/Dropbox/xampp/htdocs/phalconBlog/app/views/\npluginsDir = ../app/plugins/\nlibraryDir = ../app/library/\nbaseUri = /phalconBlog/\ncacheDir = ../app/cache/\nencryptKey = 2tx6]GD}532q4x_\n```", "```php\n$di->set(\n    'crypt', function () use ($config) {\n        $crypt = new Phalcon\\Crypt();\n        $crypt->setKey($config->application->encryptKey);\n        return $crypt;\n    }\n);\n```", "```php\n$this->cookies->set('user_id', $user->id);\n```", "```php\n$this->session->set(\"user_id\", $user->id);\n```", "```php\nif ($this->cookies->has('user_id')) {\n            $this->session->set('user_id', $this->cookies->get('user_id'));\n        }\n        if ($this->session->has(\"user_id\")) {\n            return $this->dispatcher->forward(\n                array(\n                    \"controller\" => \"users\",\n                    \"action\" => \"search\"\n                )\n            );\n        }\n```", "```php\n$loader->registerDirs(\n    array(\n        $config->application->controllersDir,\n        $config->application->modelsDir,\n        $config->application->pluginsDir\n    )\n)->register();\n```", "```php\n<?php\n\nuse Phalcon\\Events\\Event,\n    Phalcon\\Mvc\\User\\Plugin,\n    Phalcon\\Mvc\\Dispatcher,\n    Phalcon\\Acl;\n\nclass Security extends Plugin {\n\n    public function __construct($dependencyInjector) {\n        $this->_dependencyInjector = $dependencyInjector;\n    }\n```", "```php\n    public function getAcl() {\n        if (!isset($this->persistent->acl)) {\n\n            $acl = new Phalcon\\Acl\\Adapter\\Memory();\n            $acl->setDefaultAction(Phalcon\\Acl::DENY);\n\n            $roles = array(\n                'users' => new Phalcon\\Acl\\Role('Users'),\n                'guests' => new Phalcon\\Acl\\Role('Guests')\n            );\n            foreach ($roles as $role) {\n                $acl->addRole($role);\n            }\n\n            $private = array(\n                'comments' => array('index', 'edit', 'delete', 'save'),\n                'posts' => array('new', 'edit', 'save', 'create', 'delete'),\n                'users' => array('search', 'new', 'edit', 'save', 'create', 'delete', 'logout')\n            );\n            foreach ($private as $resource => $actions) {\n                $acl->addResource(new Phalcon\\Acl\\Resource($resource), $actions);\n            }\n\n            $public = array(\n                'index' => array('index'),\n                'posts' => array('index', 'search', 'show', 'comment'),\n                'users' => array('login', 'index')\n            );\n            foreach ($public as $resource => $actions) {\n                $acl->addResource(new Phalcon\\Acl\\Resource($resource), $actions);\n            }\n\n            foreach ($roles as $role) {\n                foreach ($public as $resource => $actions) {\n                    foreach ($actions as $action) {\n                        $acl->allow($role->getName(), $resource, $action);\n                    }\n                }\n            }\n\n            foreach ($private as $resource => $actions) {\n                foreach ($actions as $action) {\n                    $acl->allow('Users', $resource, $action);\n                }\n            }\n\n            $this->persistent->acl = $acl;\n        }\n\n        return $this->persistent->acl;\n    }\n```", "```php\n    public function beforeDispatch(Event $event, Dispatcher $dispatcher) {\n\n        $user = $this->session->get('user_id');\n        if (!$user) {\n            $role = 'Guests';\n        } else {\n            $role = 'Users';\n        }\n\n        $controller = $dispatcher->getControllerName();\n        $action = $dispatcher->getActionName();\n        $acl = $this->getAcl();\n\n        $allowed = $acl->isAllowed($role, $controller, $action);\n        if ($allowed != Acl::ALLOW) {\n            $this->flash->error(\"You don't have access to this module\");\n            $dispatcher->forward(\n                array(\n                    'controller' => 'index',\n                    'action' => 'index'\n                )\n            );\n            return false;\n        }\n\n    }\n\n}\n```", "```php\n$di->set('dispatcher', function() use ($di) {\n    $eventsManager = $di->getShared('eventsManager');\n    $security = new Security($di);\n    $eventsManager->attach('dispatch', $security);\n    $dispatcher = new Phalcon\\Mvc\\Dispatcher();\n    $dispatcher->setEventsManager($eventsManager);\n    return $dispatcher;\n});\n```", "```php\n<div class=\"comments\">\n    <h3>Comments</h3>\n    <div class=\"comment\">\n    {% for comments in post.comments if comments.publish == true %}\n        <div>{{ comments.body }}</div>\n        <div><a href=\"{{ comments.url }}\">{{ comments.name }}</a></div>\n    {% endfor %}\n    </div>\n    <h3>Leave a Comment</h3>\n    <div>\n        {{ form(\"posts/comment\", \"method\":\"post\") }}\n        {{ hidden_field(\"posts_id\", \"value\" : post.id) }}\n        <div>\n            <label for=\"title\">Comment</label>\n            {{ text_area(\"body\") }}\n        </div>\n        <div>\n            <label for=\"title\">Name</label>\n            {{ text_field(\"name\") }}\n        </div>\n        <div>\n            <label for=\"title\">Email</label>\n            {{ text_field(\"email\") }}\n        </div>\n        <div>\n            <label for=\"title\">Website</label>\n            {{ text_field(\"url\") }}\n        </div>\n        {{ submit_button(\"Comment\", \"class\" : \"btn\") }}\n        {{ end_form() }}\n    </div>\n</div>\n```", "```php\npublic function commentAction(){\n        $comment = new Comments();\n        $comment->posts_id = $this->request->getPost(\"posts_id\");\n        $comment->body = $this->request->getPost(\"body\");\n        $comment->name = $this->request->getPost(\"name\");\n        $comment->email = $this->request->getPost(\"email\");\n        $comment->url = $this->request->getPost(\"url\");\n        $comment->submitted = date(\"Y-m-d H:i:s\");\n        $comment->publish = 0;\n        $comment->save();\n\n        $this->flash->success(\"Your comment has been submitted.\");\n\n        return $this->dispatcher->forward(\n            array(\n                \"controller\" => \"posts\",\n                \"action\" => \"show\",\n                \"params\" => array($comment->posts_id)\n            )\n        );\n}\n```", "```php\nuse Phalcon\\Paginator\\Adapter\\Model as Paginator;\n```", "```php\nclass CommentsController extends ControllerBase {\n  //Actions will go here\n}\n```", "```php\n    public function indexAction() {\n        $numberPage = $this->request->getQuery(\"page\", \"int\", 1);\n\n        $comments = Comments::query()\n            ->order(\"submitted DESC\")\n            ->execute();\n\n        $paginator = new Paginator(array(\n            \"data\" => $comments,\n            \"limit\" => 10,\n            \"page\" => $numberPage\n        ));\n\n        $this->view->page = $paginator->getPaginate();\n    }\n```", "```php\n    public function editAction($id) {\n\n        if (!$this->request->isPost()) {\n\n            $comment = Comments::findFirstByid($id);\n            if (!$comment) {\n                $this->flash->error(\"comment was not found\");\n                return $this->dispatcher->forward(\n                    array(\n                        \"controller\" => \"comments\",\n                        \"action\" => \"index\"\n                    )\n                );\n            }\n\n            $this->view->id = $comment->id;\n\n            $this->tag->setDefault(\"id\", $comment->id);\n            $this->tag->setDefault(\"body\", $comment->body);\n            $this->tag->setDefault(\"name\", $comment->name);\n            $this->tag->setDefault(\"email\", $comment->email);\n            $this->tag->setDefault(\"url\", $comment->url);\n            $this->tag->setDefault(\"submitted\", $comment->submitted);\n            $this->tag->setDefault(\"publish\", $comment->publish);\n            $this->tag->setDefault(\"posts_id\", $comment->posts_id);\n\n        }\n    }\n```", "```php\n    public function saveAction() {\n\n        if (!$this->request->isPost()) {\n            return $this->dispatcher->forward(\n                array(\n                    \"controller\" => \"comments\",\n                    \"action\" => \"index\"\n                )\n            );\n        }\n\n        $id = $this->request->getPost(\"id\");\n\n        $comment = Comments::findFirstByid($id);\n        if (!$comment) {\n            $this->flash->error(\"comment does not exist \" . $id);\n            return $this->dispatcher->forward(\n                array(\n                    \"controller\" => \"comments\",\n                    \"action\" => \"index\"\n                )\n            );\n        }\n\n        $comment->id = $this->request->getPost(\"id\");\n        $comment->body = $this->request->getPost(\"body\");\n        $comment->name = $this->request->getPost(\"name\");\n        $comment->email = $this->request->getPost(\"email\", \"email\");\n        $comment->url = $this->request->getPost(\"url\");\n        $comment->publish = $this->request->getPost(\"publish\");\n\n        if (!$comment->save()) {\n\n            foreach ($comment->getMessages() as $message) {\n                $this->flash->error($message);\n            }\n\n            return $this->dispatcher->forward(\n                array(\n                    \"controller\" => \"comments\",\n                    \"action\" => \"edit\",\n                    \"params\" => array($comment->id)\n                )\n            );\n        }\n\n        $this->flash->success(\"comment was updated successfully\");\n        return $this->dispatcher->forward(\n            array(\n                \"controller\" => \"comments\",\n                \"action\" => \"index\"\n            )\n        );\n\n    }\n```", "```php\n    public function deleteAction($id) {\n\n        $comment = Comments::findFirstByid($id);\n        if (!$comment) {\n            $this->flash->error(\"comment was not found\");\n            return $this->dispatcher->forward(\n                array(\n                    \"controller\" => \"comments\",\n                    \"action\" => \"index\"\n                )\n            );\n        }\n\n        if (!$comment->delete()) {\n\n            foreach ($comment->getMessages() as $message) {\n                $this->flash->error($message);\n            }\n\n            return $this->dispatcher->forward(\n                array(\n                    \"controller\" => \"comments\",\n                    \"action\" => \"search\"\n                )\n            );\n        }\n\n        $this->flash->success(\"comment was deleted successfully\");\n        return $this->dispatcher->forward(\n            array(\n                \"controller\" => \"comments\",\n                \"action\" => \"index\"\n            )\n        );\n    }\n```", "```php\n{{ content() }}\n<h1>Comments</h1>\n<table class=\"browse\" align=\"center\">\n    <thead>\n        <tr>\n            <th>Body</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Url</th>\n            <th>Submitted</th>\n            <th>Publish</th>\n         </tr>\n    </thead>\n    <tbody>\n    {% if page.items is defined %}\n    {% for comment in page.items %}\n        <tr>\n            <td>{{ comment.body }}</td>\n            <td>{{ comment.name }}</td>\n            <td>{{ comment.email }}</td>\n            <td>{{ comment.url }}</td>\n            <td>{{ comment.submitted }}</td>\n            <td>{{ comment.publish }}</td>\n            <td>{{ link_to(\"comments/edit/\"~comment.id, \"Edit\") }}</td>\n            <td>{{ link_to(\"comments/delete/\"~comment.id, \"Delete\") }}</td>\n        </tr>\n    {% endfor %}\n    {% endif %}\n    </tbody>\n    <tbody><tr><td colspan=\"2\" align=\"right\">\n        <table align=\"center\">\n            <tr>\n                <td>{{ link_to(\"comments/search\", \"First\") }}</td>\n                <td>{{ link_to(\"comments/search?page=\"~page.before, \"Previous\") }}</td>\n                <td>{{ link_to(\"comments/search?page=\"~page.next, \"Next\") }}</td>\n                <td>{{ link_to(\"comments/search?page=\"~page.last, \"Last\") }}</td>\n                <td>{{ page.current~\"/\"~page.total_pages }}</td>\n            </tr>\n        </table>\n    </td></tr></tbody>\n</table>\n```", "```php\n{{ content() }}\n{{ link_to(\"comments\", \"Go Back\") }}\n\n<div align=\"center\">\n    <h1>Edit comments</h1>\n</div>\n\n<div>\n    {{ form(\"comments/save\", \"method\":\"post\") }}\n        <label for=\"body\">Body</label>{{ text_area(\"body\") }}\n        <label for=\"name\">Name</label>{{ text_field(\"name\") }}\n        <label for=\"email\">Email</label>{{ text_field(\"email\") }}\n        <label for=\"url\">Url</label>{{ text_field(\"url\") }}\n        <label for=\"publish\">Publish</label>\n        {{ radio_field(\"publish\", \"value\" : 1) }} Yes\n        {{ radio_field(\"publish\", \"value\" : 0) }} No\n        {{ hidden_field(\"id\") }}\n        {{ submit_button(\"Save\", \"class\" : \"btn\") }}\n    {{ end_form() }}\n</div>\n```", "```php\npublic function feedAction() {\n    $posts = Posts::find(\n        array(\n            'order' => 'published DESC',\n            'limit' => 10\n        )\n    );\n\n    $rss_posts = array();\n    foreach ($posts as $post){\n        $post->rss_date = date(\"D, d M Y H:i:s O\", strtotime($post->published));\n        $rss_posts[] = $post;\n    }\n    $this->view->posts = $rss_posts;\n\n    $this->view->setRenderLevel(Phalcon\\Mvc\\View::LEVEL_ACTION_VIEW);\n}\n```", "```php\n{{'<?xml version=\"1.0\" encoding=\"UTF-8\" ?>'}}\n\n<rss version=\"2.0\">\n    <channel>\n        <title>{{ config.blog.title }}</title>\n        <description>This is a demonstration of the Phalcon framework</description>\n        <link>{{ config.blog.url }}</link>\n        {% for post in posts %}\n            <item>\n                <title>{{ post.title|e }}</title>\n                <description>{{ post.excerpt|e }}</description>\n                <link>{{ config.blog.url }}{{ url(\"posts/show/\"~post.id) }}</link>\n                <guid>{{ config.blog.url }}{{ url(\"posts/show/\"~post.id) }}</guid>\n                <pubDate>{{ post.rss_date }}</pubDate>\n            </item>\n        {% endfor %}\n    </channel>\n</rss>\n```", "```php\n{{ tag_html(\n            \"link\",\n            [\n                \"rel\": \"alternate\",\n                \"type\": \"application/rss+xml\",\n                \"title\": \"RSS Feed for Phalcon Blog\",\n                \"href\": config.application.baseUri~\"posts/feed\"\n            ],\n             true,\n             true,\n             true)\n }}\n```", "```php\n[blog]\ntitle = Phalcon Blog\nurl = http://localhost\n\n```", "```php\n$di->set('config', $config);\n```", "```php\n$this->tag->setTitle($this->config->blog->title);\n```", "```php\nprivate function sendPings(){\n        $request = '<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n                    <methodCall>\n                    <methodName>weblogUpdates.ping</methodName>\n                    <params>\n                     <param>\n                      <value>\n                       <string>'.$this->config->blog->title.'</string>\n                      </value>\n                     </param>\n                     <param>\n                      <value>\n                       <string>'.$this->config->blog->url.$this->url->get('posts/feed').'</string>\n                      </value>\n                     </param>\n                    </params>\n                    </methodCall>';\n\n        $ping_urls = array(\n            'http://blogsearch.google.com/ping/RPC2',\n            'http://rpc.weblogs.com/RPC2',\n            'http://ping.blo.gs/'\n        );\n        foreach($ping_urls as $ping_url){\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $ping_url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true );\n            curl_setopt($ch, CURLOPT_POST, true );\n            curl_setopt($ch, CURLOPT_POSTFIELDS, trim($request));\n            $results = curl_exec($ch);\n        }\n        curl_close($ch);\n    }\n```", "```php\n$this->flash->success(\"post was created successfully\");\n```", "```php\n$this->sendPings();\n```", "```php\nlogsDir = ../app/logs/\n```", "```php\n//Logging\n$di->set(\n    'pingLogger', function () use ($config){\n        $logger = new \\Phalcon\\Logger\\Adapter\\File($config->application->logsDir.'ping.log');\n        return $logger;\n    }\n);\n```", "```php\n$result = curl_exec($ch);\nif($result === false){\n       $result = \"Curl Error\";\n}\n$this->pingLogger->log($ping_url.PHP_EOL.$result);\n```", "```php\n<div class=\"span3\">\n    <div class=\"well\">\n        {{ form(\"posts/search\", \"method\":\"post\", \"autocomplete\" : \"off\", \"class\" : \"form-inline\") }}\n            <div class=\"input-append\">\n                {{ text_field(\"body\", \"class\" : \"input-medium\") }}\n                {{ submit_button(\"Search\", \"class\" : \"btn\") }}\n            </div>\n        {{ end_form() }}\n    </div>\n</div>\n```", "```php\n{{ partial(\"partials/sidebar\") }}\n```", "```php\n{{ partial(\"partials/navbar\") }}\n```", "```php\n$di->set(\n    'viewCache', function () use ($config) {\n\n        //Cache for one day\n        $frontCache = new \\Phalcon\\Cache\\Frontend\\Data(array(\n            \"lifetime\" => 86400\n        ));\n\n        //Set file cache\n        $cache = new Phalcon\\Cache\\Backend\\File($frontCache, array(\n            \"cacheDir\" => $config->application->cacheDir\n        ));\n\n        return $cache;\n    }\n);\n```", "```php\npublic function createKey($controller, $action, $parameters = array())\n{\n        return urlencode($controller.$action.serialize($parameters));\n}\n```", "```php\n$cache = $this->di->get(\"viewCache\");\n```", "```php\n$key = $this->createKey('posts', 'show', array($id));\n$post = $cache->get($key);\n```", "```php\nif ($post === null) {\n            $post = Posts::findFirstByid($id);\n            $cache->save($key, $post);\n}\n```", "```php\n$this->tag->prependTitle($post->title . \" - \");\n$this->view->post = $post;\n```", "```php\n$di->set(\n    'router', function () {\n        $router = new Router();\n        $router->add(\n            \"/\", array(\n                'controller' => 'posts',\n                'action' => 'index',\n            )\n        );\n        return $router;\n    }\n);\n```", "```php\n<?php\n\n$app = new Phalcon\\Mvc\\Micro();\n\n$app->get(\n    '/user/{name}', function ($name) {\n        echo \"<h1>Hi $name!</h1>\";\n    }\n);\n\n$app->get(\n    '/api/user/{name}', function ($name) {\n        echo json_encode(array(\"message\" => \"Hi \". $name));\n    }\n);\n\n$app->handle();\n```", "```php\napp/\n  tasks/\n  cli.php\n```", "```php\n<?php\n\nuse Phalcon\\DI\\FactoryDefault\\CLI as CliDI,\n    Phalcon\\CLI\\Console as ConsoleApp;\n\n//Using the CLI factory default services container\n$di = new CliDI();\n\n// Define the application path\ndefined('APPLICATION_PATH')\n  || define('APPLICATION_PATH', realpath(dirname(__FILE__)));\n\n//Register the autoloader\n$loader = new \\Phalcon\\Loader();\n$loader->registerDirs(\n    array(\n        APPLICATION_PATH . '/tasks'\n    )\n);\n$loader->register();\n\n// Load the config\n$config = include APPLICATION_PATH . '/config/config.ini';\n$di->set('config', $config);\n\n//Create a console application\n$console = new ConsoleApp();\n$console->setDI($di);\n\n//Process console arguments\n$arguments = array();\n$params = array();\n\nforeach($argv as $k => $arg) {\n    if($k == 1) {\n        $arguments['task'] = $arg;\n    } elseif($k == 2) {\n        $arguments['action'] = $arg;\n    } elseif($k >= 3) {\n        $params[] = $arg;\n    }\n}\nif(count($params) > 0) {\n    $arguments['params'] = $params;\n}\n\n// define global constants for the current task and action\ndefine('CURRENT_TASK', (isset($argv[1]) ? $argv[1] : null));\ndefine('CURRENT_ACTION', (isset($argv[2]) ? $argv[2] : null));\n\ntry {\n    // handle incoming arguments\n    $console->handle($arguments);\n}\ncatch (\\Phalcon\\Exception $e) {\n    echo $e->getMessage();\n    exit(255);\n}\n```", "```php\n<?php\n\nclass mainTask extends \\Phalcon\\CLI\\Task\n{\n\n    public function mainAction() {\n        echo \"I am a task that doesn't do much\";\n    }\n\n    public function anotherAction(array $params) {\n        foreach($params as $p){\n            echo \"Hi, my name is \".$p.PHP_EOL;\n        }\n    }\n}\n```", "```php\nphp app/cli.php\n\n```", "```php\nphp app/cli.php main another tom dick harry\n\n```", "```php\nHi, my name is tom\nHi, my name is dick\nHi, my name is harry\n\n```"]