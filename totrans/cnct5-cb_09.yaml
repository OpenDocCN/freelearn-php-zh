- en: Chapter 9. System Events and Advanced Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring advanced configuration variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling events in concrete5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening to system events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing parameters to event handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a page type event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending an e-mail when a user creates an account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending an e-mail when a file has been uploaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom scheduled job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your add-on translation ready
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebranding concrete5 as a white label CMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the dashboard background image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 contains a lot of miscellaneous advanced functionality for developers.
    Earlier in the book, we have touched on the concept of events in concrete5\. In
    this chapter, we will explore recipes to listen for system events and act upon
    them, as well as create customized configuration settings and even change the
    concrete5 branding to white label the CMS as your own.
  prefs: []
  type: TYPE_NORMAL
- en: About the code in this chapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter will sometimes place code in places, such as `/config/site_post.php`,
    which can sometimes interrupt the normal operation of the website. Make sure you
    perform these recipes on a development server!
  prefs: []
  type: TYPE_NORMAL
- en: Declaring advanced configuration variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 comes with a bunch of "secret" advanced configuration variables that
    developers can set to augment the behavior of concrete5\. In this recipe, we will
    set a hypothetical configuration setting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for declaring advanced configuration variables are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the site configuration file, located at `/config/site.php` in your preferred
    code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a new constant variable called `FOO` and set its value to `BAR`, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the `site.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 simply loads this file at the beginning of every page request. By
    defining configuration settings here, developers can override default concrete5
    settings and also create their own constant variables. If a developer were to
    dump the contents of the constant `FOO`, they would see the string `BAR`.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling events in concrete5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 comes with a publish/subscribe event model that makes it easy for
    developers to have their code respond to system events. If developers wish to
    declare events in `/config/site_events.php` (which we do in this chapter), they
    must be enabled in `site.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to enable events are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the file `/config/site.php` and open it in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following configuration setting to `config.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the concrete5 cache by visiting `/dashboard/system/optimization/clear_cache/`
    and clicking on the **Clear Cache** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before concrete5 allows developers to register event listeners in `/config/site_events.php`,
    it will check to see if this configuration setting is present and set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In later concrete5 versions (Versions 5.5 and above) this step can be ignored,
    though this author's personal preference is to put the configuration in place
    anyway, so that events can be enabled or disabled (by setting the value to `false`)
    with ease.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Declaring advanced configuration variables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listening to system events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening to system events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once events have been enabled in concrete5, developers can write their own code
    to respond to the different events. In this recipe, we will create a basic "Hello
    World!" event that runs immediately when a page is visited and outputs a message
    to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can register an event in `site_events.php`, concrete5 must be configured
    to enable the events system. Refer to the previous recipe to see how to enable
    events.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file in `/config` called `site_events.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `site_events.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following code to listen to the `on_start` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file in `/libraries` called `my_class.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a new class called `MyClass` in `my_class.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a method to `MyClass` called `onStartFired`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `onStartFired`, use the `die` function to output **hello world!**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit any page on your site. You will see a white screen with the words **hello
    world!** as shown in the following screenshot:![How to do it...](img/4548OS_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feel free to comment out the `die` statement in the `onStartFired` function
    of `MyClass` to restore your site to proper working order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will automatically check for the presence of the `/config/site_events.php`
    file and execute any code contained within it while the site is loading (much
    like how `/config/site_post.php` behaves). This is the perfect place to experiment
    with our event registrations. When we call `Event::extend()`, we pass in arguments
    that specify which event we want to listen to, the class name that our event handler
    resides in (`MyClass`, in this example), the method within that class that will
    be executed when the event is fired (`onStartFired`, in this case), and finally
    the path to the file containing our handler class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Enabling events in concrete5* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Passing parameters to event handlers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing parameters to event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Event handlers are the functions that concrete5 executes when events are fired.
    In the previous recipe, we used the custom class `MyClass` and its function `onStartFired`
    as the event handler. concrete5 allows developers to actually pass parameters
    to these handlers as well. In this recipe, we build upon the event handler from
    the previous recipe and pass a message to the `onStartFired` handler, which will
    output that message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code that we created in the previous recipe as the base
    for this one. Also, make sure that you have enabled events as described in the
    first recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for passing parameters to event handlers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `site_events.php` file located in `/config` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new argument to the event registration code, so it looks like the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `/libraries/my_class.php` and change `onStartFired` so that it looks like
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will now be able to see the new message when you refresh your website as
    shown in the following screenshot:![How to do it...](img/4548OS_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feel free to comment out the `die` statement to allow your site to function
    as normal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By adding a fifth parameter to the `Events::extend()` function call, we can
    send parameters to the event handler function. This new parameter needs to be
    an array, which contains the various parameters that we wish to send to the handler.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that our handler function, `onStartFired`, has two parameters
    (`$view` and `$message`), when we only specified the message parameter. This is
    because concrete5 provides the current `View` object to the handler as a bit of
    context, which can be useful. If you are ever unsure of which parameters have
    been applied to your function, dump the result of the `func_get_args()` function
    of PHP to see an array of all of the parameters that have been sent, as they can
    vary between events.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Enabling events in concrete5* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listening to system events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a page type event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to providing a variety of events that developers can hook into,
    concrete5 also provides an events system at the page type level. We discussed
    page types in detail in the first chapter of this book, but now we can add a custom
    event to our page types. In this recipe, we will create a page type called `blog_post`
    and hook into the `on_page_add` event for that page type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Page types and how to work with them are described in much more detail in [Chapter
    1](ch01.html "Chapter 1. Pages and Page Types"), *Pages and Page Types*. Make
    sure events are enabled in concrete5 and that your `/config/site_events.php` file
    exists.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for defining a page type event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the event handler in `/config/site_events.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, create a new page type file in `/page_types` called `blog_post.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the controller file for the page type in `/controllers/page_types/blog_post.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the controller class, extending the core `Controller` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to the controller class called `on_page_add`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `on_page_add` function, create a simple `die` statement so we know that
    this event is working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install the page type by visiting `/dashboard/pages/types`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add a Page Type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the page type a name and make sure the handle is set to `blog_post`.![How
    to do it...](img/4548OS_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now visit the sitemap, located at `/dashboard/sitemap/full/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new page to the site, choose blog post as the page type.![How to do it...](img/4548OS_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a blog post as shown in the following screenshot:![How to do it...](img/4548OS_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the page is added, you will see the message that you created in the event
    handler, as shown in the following screenshot:![How to do it...](img/4548OS_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to remove the `die` statement from your event handler so that your
    website returns to normal functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When adding events to page types, concrete5 removes the need for developers
    to manually specify the class name, function name, and file location of the event
    handler. Because page types follow a specific convention (the controller name
    is called `BlogPostPageTypeController`) and are usually located in the `/controllers/page_types`
    directory, concrete5 can automatically determine which file and class should be
    loaded to handle the event.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Parameters can be passed to page type event handlers just like they are in
    regular event handlers. Simply add a third parameter to the event declaration,
    an array containing each of the parameters to be passed onto the handler function
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The new parameter can then be accessed from the handler function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Enabling events in concrete5* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listening to system events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Passing parameters to event handlers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending an e-mail when a user creates an account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered a number of recipes pertaining to events in concrete5 so far
    in this chapter. Now we can try out a common real-world example of using system
    events to execute custom code. In this recipe, we will send an e-mail to a site
    administrator whenever a user registers on the website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sending e-mails can be tricky business in PHP, as a lot of it can depend on
    individual server configuration. We will be using concrete5's Mail helper (discussed
    in more detail in [Chapter 4](ch04.html "Chapter 4. Using the Core Helpers"),
    Using the *Core Helpers*), which helps a little bit, but misconfigured servers
    can still have problems. We will assume that your server (development or otherwise)
    is capable of sending e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure that events are enabled in concrete5 as described in the *Declaring
    advanced configuration variables* recipe of this chapter!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for sending an e-mail when a user creates an account, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare the event listener in `/config/site_events.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `user_emailer.php` file mentioned in the event registration in /libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a new class in `user_emailer.php` called `UserEmailer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to `UserEmailer` called `newAccountCreated`, which accepts one
    parameter, a `UserInfo` object called `$user`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `newAccountCreated` function, load the Mail helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the subject of the e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the body of the e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the destination address of the e-mail (set this to an e-mail that you own,
    so you can make sure that it works):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `from` address to something appropriate for your own website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test that this event works by adding a new user to your website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit `/dashboard/users/add/` of your concrete5 website to add a new user.![How
    to do it...](img/4548OS_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the user has been added, you should receive an e-mail.![How to do it...](img/4548OS_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the event listener gets defined in `site_events.php`, concrete5 will remember
    to execute the provided function when the relevant event is fired. In this case,
    concrete5 fires the `on_user_add` event once a new user is added to the database,
    thereby running our custom code that we created. Using the Mail helper, we are
    able to programmatically generate an e-mail and send it immediately.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Sending e-mails with the Mail helper* recipe in [Chapter 4](ch04.html "Chapter 4. Using
    the Core Helpers"), *Using the Core Helpers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listening to system events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending an e-mail when a file has been uploaded
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to play around with sending e-mails again; this time we will send
    someone an e-mail whenever a file gets added to the file manager. The e-mail will
    contain a link to download the file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for sending an e-mail when a file has been uploaded, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up the event listener in `/config/site_events.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new library in `/libraries/file_emailer.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the new `FileEmailer` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to the class called `fileUploaded`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the Mail helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the subject of the message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the body of the message, including a link to download the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the recipient''s e-mail address (change this to an e-mail address that
    you have access to):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the return address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit your website's file manager at `/dashboard/files/search`.![How to do it...](img/4548OS_09_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will receive an e-mail containing a link to download the new file as shown
    in the following screenshot:![How to do it...](img/4548OS_09_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a file gets uploaded, concrete5 automatically fires off the `on_file_add`
    event, which we registered a listener for in `/config/site_events.php`. concrete5
    passes `File` and `FileVersion` objects as the two parameters in the event callback.
    The `FileVersion` object contains the method to get the download URL.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Sending an e-mail when a user creates an account* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom scheduled job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 allows developers to create special jobs to run automatically via
    scheduled tasks on the server. These jobs can be any sort of action that you wish
    to perform automatically on a regular basis. In this recipe, we will write a job
    that will send a good morning e-mail to every user on the website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It probably should go without saying, but please make sure to perform this recipe
    on a test server with test users and e-mail addresses. You don't want to annoy
    your entire user base with silly e-mails every morning.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating a custom scheduled job are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file at `/jobs/email_everyone.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a new class called `EmailEveryone`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method in the class to return the job''s name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another method to return the job''s description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function called `run`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the `UserList` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the `UserList` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get an array of all of the users on the website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the loop, load the Mail helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the subject of the e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the reply address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the destination address to the current user in the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the body of the e-mail, including the user''s username:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return a message to display on the dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit the **Automated Jobs** page of the dashboard, located at `/dashboard/system/optimization/jobs/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see your new job at the bottom of the list as shown in the following
    screenshot.![How to do it...](img/4548OS_09_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Install** button as shown in the preceding screenshot.![How to
    do it...](img/4548OS_09_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the triangle play icon to run your job. You will see a message showing
    how many users were mailed.![How to do it...](img/4548OS_09_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will receive an e-mail in your inbox (if your e-mail address is assigned
    to one of the site members) as shown in the following screenshot:![How to do it...](img/4548OS_09_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will asynchronously run the new task once the "play" button is clicked.
    The task simply loads a list of all of the users on the site, and e-mails each
    of them. In production use, this is inefficient for a large amount of members
    and can even get your server blacklisted for spam.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may be wondering how to automatically run something like this. The answer
    lies within server automated tasks. On most Linux web servers, site administrators
    will use the `cron` scheduler to manage automatic tasks, and possibly the `curl`
    command to send an HTTP request to the task runner. To run this task automatically,
    create a scheduled task to ping the URL listed at the bottom of the jobs page.
    This URL contains a token that will allow your system to access concrete5 without
    logging in. Make sure to keep this URL and its token private, otherwise unauthorized
    users could trigger your site's automated tasks.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on creating scheduled tasks on your Linux-based web server,
    see [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).
  prefs: []
  type: TYPE_NORMAL
- en: Making your add-on translation ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 allows developers to take advanced steps to make sure that their code
    is compatible with concrete5 translations. In this recipe, we will show how to
    prepare a string for translation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for making add-on translation ready are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a string for testing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the translation function to output your string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 makes use of the Zend translation library. concrete5 defines the global
    `t()` function as a shortcut to make strings available to various translations.
    Translators then will prepare translation files using a tool such as Poedit to
    assist with translating these strings. To learn more about Poedit and creating
    translation files, see [http://www.poedit.net](http://www.poedit.net).
  prefs: []
  type: TYPE_NORMAL
- en: Rebranding concrete5 as a white label CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 allows developers to change the logo, title, and general branding
    information of the CMS to whatever they would prefer. Often larger organizations
    like to white label their products like this, and concrete5 makes it easy. In
    this recipe, we will white label concrete5 by changing the logo in the edit bar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need an image of your logo that is 49 x 49 pixels. We are using a sample
    logo in this recipe, which is included with the code download from this book's
    website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Upload your new logo to your site. In this example, our logo is located at `/images/new-logo.png`
    (you may need to create the images directory)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `/config/site.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following configuration to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file. You will now see the new logo in the edit bar as shown in the
    following screenshot:![How to do it...](img/4548OS_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 checks for the presence of this configuration variable and changes
    the logo source if that is present. concrete5 will also add a **Powered by concrete5**
    message to the edit bar if the logo has been changed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few more white labeling aspects that are available for developers.
    There is a great list available at [http://www.concrete5.org/documentation/how-tos/developers/white-labelling/](http://www.concrete5.org/documentation/how-tos/developers/white-labelling/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Declaring advanced configuration variables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the dashboard background image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, concrete5 displays big and bright photographs in the background
    of every dashboard page. These images are powered by a feed running on concrete5's
    official servers, and the image changes every day.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the dashboard background image](img/4548OS_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's a fun effect and brings a lot of color into the dashboard, but some clients
    and agencies might not like showing random photos on their site, especially if
    it is used for business. Fortunately, concrete5 makes it easy to change the background
    image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a new image to use for the background, with a size of at least
    1024 x 768 pixels. In this example, we will be using a subtle dark gradient that
    can be quickly created in Adobe Photoshop, but you can use any image you like.
    The background image is available with the code download of this book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for changing the background image of dashboard are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `/config/site.php` file in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following configuration to the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file. The background of the dashboard will now be changed.![How to
    do it...](img/4548OS_09_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 simply checks for the `WHITE_LABEL_DASHBOARD_BACKGROUND_SRC` configuration
    setting and replaces the daily image with the new background that you have provided.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developers can get rid of the background picture entirely by setting the background
    source to "none".
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Declaring advanced configuration variables* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
