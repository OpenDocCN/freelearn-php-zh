["```php\n    yii\\base\\Module::$controllerMap = [\n      'account' => 'app\\controllers\\UserController',\n      // Different syntax for the previous example\n      //'account' => [\n      //   'class' => 'app\\controllers\\AccountController'\n      //],\n    ]\n    ```", "```php\n[\n    // index action of main controller\n    'defaultRoute' => 'main/index' \n]\n```", "```php\n[\n    // Display a maintenance message\n    'catchAll' => 'site/maintenance'\n]\n```", "```php\n[\n    'posts' => 'content/index', \n    'post/<id:\\d+>' => 'content/view',\n]\n```", "```php\nclass ContentController extends yii\\web\\Controller\n{\n    // Responds to content/index and /posts\n    public function actionIndex() {}\n\n    // Responds to content/view/id/<id> or /post/<id>\n    public function actionView($id) {}\n}\n```", "```php\n// Creates a route that includes the year, month, and date of a post\n// eg: https://www.example.com/posts/2015/09/01\n[\n'posts/<year:\\d{4}>/<month:\\d{2}>/<day:\\d{2}>' => 'content/index',\n]\n```", "```php\n// Routes to posts/2014/09/01\nUrl::to(['posts/index', 'year' => 2015, 'month' => 09, 'day' => 01]);\n```", "```php\n[\n    'https://dashboard.example.com/login' => 'dashboard/default/login',\n    'https://www.example.com/login' => 'site/login'\n]\n```", "```php\n[\n    '<controller:(content|comment)>/<id:\\d+>/<action:(create|list|delete)>' => '<controller>/<action>',\n]\n```", "```php\n[\n    // ...other rules...\n    [\n        // :\\d+ is a regular expression for integers\n        'pattern' => 'content/<page:\\d+>/<name>',\n        'route' => 'content/index',\n        'defaults' => ['page' => 1, 'name' => NULL],\n    ],\n]\n```", "```php\n[\n    [\n        'pattern' => 'posts',\n        'route' => 'content/index',\n        'suffix' => '.xml',\n    ],\n]\n```", "```php\n[\n    'PUT,POST users/<id:\\d+>' => 'users/create',\n    'DELETE users/<id:\\d+>' => 'users/delete',\n    'GET users/<id:\\d+>' => 'users/view',\n]\n```", "```php\n<?php\n\nnamespace app\\components;\n\nuse yii\\web\\UrlRuleInterface;\nuse yii\\base\\Object;\n\nclass BookUrlRule extends Object implements UrlRuleInterface\n{\n\n    public function createUrl($manager, $route, $params)\n    {\n        if ($route === 'book/index')\n        {\n            if (isset($params['author'], $params['book']))\n                return $params['author'] . '/' . $params['book'];\n            else if (isset($params['author']))\n                return $params['author'];\n        }\n        return false;\n    }\n\n    public function parseRequest($manager, $request)\n    {\n        $pathInfo = $request->getPathInfo();\n        if (preg_match('%^(\\w+)(/(\\w+))?$%', $pathInfo, $matches))\n        {\n            // If the parameterized identified in $matches[] matches a database value\n            // Set $params['author'] and $params['book'] to those attributes, then pass\n            // those arguments to your route\n            // return ['author/index', $params]\n        }\n\n        return false;\n    }\n}\n```", "```php\n[\n    // [...],\n    [\n        // Reuslts in URL's like https://www.example.com/charlesportwodii/mastering-yii\n        'class' => 'app\\components\\BookUrlRule'\n    ],\n    // [...],\n]\n```", "```php\npublic function bootstrap($app)\n{\n    $app->getUrlManager()->addRules([\n        // Add new rules here\n    ], false);\n}\n```", "```php\n$request = \\Yii::$app->request;\n\n// Retrieve all of the $_GET parameters\n// similar to $get = $_GET\n$get = $request->get();\n// Retrieve all of the $_POST parameters\n$post = $request->post();\n```", "```php\n// Retrieves the name $_GET parameter, $_GET['id']\n// https://www.example.com/controller/action/id/5\n// https://www.example.com/controller/action?id=5\n$id = $request->get('id');\n\n// Retrieves the named $_POST parameter\n$name = $request->post('name');\n```", "```php\n// Default to 1 if ID is not set\n$id = $request->get('id', 1);\n\n// Default to 'Guest' if name is not set\n$name = $request->post('name', 'Guest');\n```", "```php\n$request = Yii::$app->request;\n\n$allParamns = $request->bodyParams;\n\n$name = $request->getBodyParam('name');\n\n$manyParams = $request->getBodyParams(['name', 'age', 'gender']); \n```", "```php\n// $headers is an object of yii\\web\\HeaderCollection \n$headers = Yii::$app->request->headers;\n\n// If the header has 'X-Auth-Token', retrieve it.\nif ($headers->has('X-Auth-Token'))\n    $authToken = $headers->get('X-Auth-Token');\n```", "```php\n\\Yii::$app->response->statusCode = 200;\n```", "```php\nthrow new \\yii\\web\\HttpException(409);\n```", "```php\nyii\\web\\HeaderCollection\n$headers = Yii::$app->response->headers;\n\n// Add two headers\n$headers->add('X-Auth-Token', 'SADFLJKBQ43O7AGB28948QT');\n$headers->add('Pragma', 'No-Cache');\n\n// Remove a header\n$headers->remove('Pragma');\n```", "```php\npublic function actionIndex()\n{\n    return $this->render('index');\n}\n```", "```php\npublic function actionIndex()\n{\n    \\Yii::$app->response->format = \\yii\\web\\Response::FORMAT_JSON;\n    return [\n        'message' => 'Index Action',\n        'code' => 200,\n    ];\n}\n```", "```php\n{\n    \"message\": \"Index Action\",\n    \"code\": 200\n}\n```", "```php\npublic function actionIndex()\n{\n    return \\Yii::createObject([\n        'class' => 'yii\\web\\Response',\n        'format' => \\yii\\web\\Response::FORMAT_JSON,\n        'data' => [\n            'message' => 'Index Action',\n            'code' => 100,\n        ],\n    ]);\n}\n```", "```php\n$response = \\Yii::$app->response;\n$response->format = yii\\web\\Response::FORMAT_JSON;\n$response->data = [\n    'message' => 'Index Action',\n    'code' => 100\n]; \n```", "```php\npublic function actionIndex()\n{\n    return $this->redirect('https://www.example.com/index2');\n}\n```", "```php\n\\Yii::$app->response->redirect('https://www.example.com/index2', 301)->send();\n```", "```php\n    public function actionReport()\n    {\n        return \\Yii::$app->response->sendFile('path/to/report.csv');\n    }\n    ```", "```php\n\\Yii::$app->response->sendFile('path/to/report.csv')->send();\n```", "```php\n$thing = new app\\Thing;\n$thing->on(Thing::EVENT_NAME, 'php_function_name');\n```", "```php\n$thing->on(Thing::EVENT_NAME, [$object, 'method']);\n$thing->on(Thing::EVENT_NAME, ['app\\components\\Thing ', 'doThing']);\n```", "```php\n$thing->on(Thing::EVENT_NAME, function($event) {\n    // Handle the event\n});\n```", "```php\n$thing->on(Thing::EVENT_NAME, function($event) {\n    echo $event->data['foo']; // bar\n}, ['foo' => 'bar']);\n```", "```php\n$thing->on(Thing::EVENT_NAME, function($event) {\n    // Handle the event\n    $event->handled = true;\n}, $data);\n```", "```php\n$thing->on(Thing::EVENT_NAME, function($event) {\n    // Handle the event\n}, [], false);\n```", "```php\n$thing->off(Thing::EVENT_NAME);\n```", "```php\n$this->trigger(Thing::EVENT_NAME);\n```", "```php\n$thing->on(Thing::EVENT_NAME, ['app\\components\\Thing, 'doThing']);\n```", "```php\n<?php\nnamespace app\\components;\n\nuse yii\\base\\Component;\nuse yii\\base\\Event;\n\nclass Thing extends Component\n{\n    const EVENT_NAME = 'name';\n\n    public function doThing()\n    {\n        // This is the event handler\n    }\n}\n```", "```php\n<?php\n\nnamespace app\\components;\n\nuse yii\\base\\Component;\nuse yii\\base\\Event;\n\nclass LogEvent extends Event\n{\n    public $message;\n}\n\nclass Logger extends Component\n{\n    const EVENT_LOG = 'log_event';\n\n    /**\n     * Log with $message\n     * @param string $message\n     */\n    public function log($message)\n    {\n        $event = new LogEvent;\n        $event->message = $message;\n        $this->trigger(self::EVENT_LOG, $event);\n    }\n}\n```", "```php\n<?php\n\nuse Yii;\nuse yii\\base\\Event;\nuse yii\\db\\ActiveRecord;\n\nEvent::on(ActiveRecord::className(), ActiveRecord::EVENT_AFTER_DELETE, function ($event) {\n    Yii::trace(get_class($event->sender) . ' deleted a record.');\n});\n```", "```php\n<?php\nuse Yii;\nuse yii\\base\\Event;\nuse app\\components\\Foo;\n\nYii::$app->on('thing', function ($event) {\n    echo get_class($event->sender);\n});\n\nYii::$app->trigger('thing', new Event(['sender' => new Thing]));\n```"]