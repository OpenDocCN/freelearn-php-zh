["```php\n    docker-compose up\n    ```", "```php\n    docker-compose exec php bash restore.sh\n    ```", "```php\n<?php\nnamespace App\\Import\\Operators;\nuse Pimcore\\DataObject\\Import\\ColumnConfig\\Operator\\AbstractOperator;\nuse Pimcore\\Model\\DataObject\\ClassDefinition;\nclass SelectOperator extends AbstractOperator{\nprotected $additionalData;\n    public function __construct(\\stdClass $config, $context = null){\nparent::__construct($config, $context);\n        $this->additionalData = json_decode($config->additionalData, true);\n    }\n    public function process($element, &$target, array &$rowData, $colIndex, array &$context = array()) {  \n        $value = $rowData[$colIndex];\n        $field = $this->additionalData[\"field\"];\n        $target->set($field, $this->getValueByDisplayName($target->getClass(), $field, $value));\n    }\n    public function getValueByDisplayName(ClassDefinition $class, $field, $displayName){\n        $fieldDefinition = $class->getFieldDefinition($field);\n        if(in_array($fieldDefinition->getFieldtype(), array(\"select\", \"multiselect\"))){\n            $options = $fieldDefinition->getOptions();\n            $option = array_search(strtolower($displayName), array_map('strtolower', array_column($options, \"key\")));\n            return $option !== false ? $options[$option][\"value\"] : null;\n        }\n        return null;\n    }\n}\n```", "```php\npostOpenObject: function (object, type) {\n    if (object.data.general.o_type === 'folder') {\nobject.toolbar.add({\n            text: t('Export'),\niconCls: 'pimcore_icon_download',\n            scale: 'medium',\n            handler: function (obj) {\npimcore.helpers.download(\"/admin/export-objects?folderId=\" + object.id);\n}.bind(this, object)\n        });\nobject.toolbar.add({\n            text: t('Import'),\niconCls: 'pimcore_icon_upload',\n            scale: 'medium',\n            handler: function (obj) {\npimcore.helpers.uploadDialog(\"/admin/import-objects?folderId=\" + object.id, \"Filedata\", function (response) {\npimcore.layout.refresh();\nobject.reload();\n}.bind(this), function () {\nExt.MessageBox.alert(t(\"error\"), t(\"error\"));\n                });\n}.bind(this, object)\n        });\npimcore.layout.refresh();\n    }\n}\n```", "```php\n<?php\nnamespace App\\Controller;\nuse Pimcore\\Bundle\\AdminBundle\\Controller;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\n/** @Route(\"/admin\") */\nclass AdminController extends Controller\\AdminController {\n    /** @Route(\"/export-objects\") */\n    public function exportObjectsAction(Request $request) {\n        $folderId = $request->get(\"folderId\");\n        //Add business logic here\n        $response = new Response();\n        $response->setContent($jsonResponse);\n        $disposition = $response->headers->makeDisposition(\nResponseHeaderBag::DISPOSITION_ATTACHMENT,\n            \"export_\".date(\"YmdHis\").\".json\";\n        );\n        $response->headers->set('Content-Type', 'application/json');\n        $response->headers->set('Content-Disposition', $disposition);\n        return $response;\n    }\n    /** @Route(\"/import-objects\", methods={\"POST\"}) */\n    public function importObjectsAction(Request $request) {\n        $folderId = $request->get(\"folderId\");\n        $tmpName = $_FILES['Filedata']['tmp_name'];\n        $fileContent = file_get_contents($tmpName);\n        //Add business logic here\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n        return $response;\n    }\n} \n```", "```php\n<?php\nnamespace App\\Command;\nuse Pimcore\\Console\\AbstractCommand;\nuse Pimcore\\Console\\Dumper;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nclass ImportCommand extends AbstractCommand\n{\n    const IMPORT_FOLDER = PIMCORE_PROJECT_ROOT.\"/var/imports\";\n    protected function configure() {\n        $this->setName('import-file')\n            ->setDescription('Import a file in background');\n        $this->addOption(\"filename\", null, InputOption::VALUE_REQUIRED, \"The name of the file to import\");\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        $this->dump(\"The execution is starting!\",  Dumper::NEWLINE_AFTER);\n        $filename = $input->getOption(\"filename\");\n        $fileContent = file_get_contents(self::IMPORT_FOLDER.\"/\".$filename);\n        //Add business logic here\n        $this->writeError('Please implement this command with business logic...');\n    }\n}\n```", "```php\nservices:\nApp\\Command\\ImportCommand:\n        tags:\n            - { name: 'console.command', command: 'import-file' }\n```", "```php\nphp bin/console import-file --filename=my-import-file.csv\n```", "```php\ndocker-compose exec php bash\ncomposer require pimcore/data-importer\n./bin/console pimcore:bundle:enable PimcoreDataImporterBundle\n```", "```php\n    cron execution, as shown previously, will let Pimcore check which import configurations must be run every minute. These configurations will be run according to the cron definition of every single configuration.\n    ```"]