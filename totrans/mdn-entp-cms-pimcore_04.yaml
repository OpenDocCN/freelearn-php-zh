- en: '*Chapter 4*: Creating Documents in Pimcore'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 4 章*：在 Pimcore 中创建文档'
- en: In the first three chapters, we provided an introduction to Pimcore and explained
    how to move around the admin interface. They were necessary steps because we now
    have the basics required to start learning how to use Pimcore for creating beautiful
    websites and solve all the digital innovation problems we introduced in the first
    chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前三个章节中，我们提供了 Pimcore 的介绍，并解释了如何浏览管理界面。这些步骤是必要的，因为我们现在有了开始学习如何使用 Pimcore 创建精美网站和解决我们在第一章中介绍的所有数字创新问题的基础知识。
- en: Now it is time to start facing some practical elements of Pimcore. We are going
    to introduce many topics throughout the coming chapters, with growing complexity,
    to master the entire Pimcore platform. In this chapter specifically, we will learn,
    step by step, how to create web pages using Pimcore.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始面对 Pimcore 的实际元素了。在接下来的章节中，我们将介绍许多主题，难度逐渐增加，以掌握整个 Pimcore 平台。在本章中，我们将逐步学习如何使用
    Pimcore 创建网页。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a document?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是文档？
- en: Creating a document
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文档
- en: Creating a template
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模板
- en: Editing a document
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑文档
- en: Inheriting documents
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承文档
- en: Learning about Pimcore documents will help you when it comes to building a simple
    website by defining your page format and designs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 了解 Pimcore 文档将有助于您在构建简单网站时定义页面格式和设计。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: If you followed the instructions in [*Chapter 2*](B17073_02_ePub_RK.xhtml#_idTextAnchor044)*,
    Setting Up Your Pimcore Development Environment*, you should have a copy of the
    source code related to this book on your local machine.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循了 [*第 2 章*](B17073_02_ePub_RK.xhtml#_idTextAnchor044)*，设置您的 Pimcore 开发环境*
    中的说明，您应该在您的本地机器上有一份与本书相关的源代码副本。
- en: So, all you need to do to run the demo connected with this chapter is clone
    the source code, navigate to the `4\. Creating documents in Pimcore` folder, and
    start a Docker environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您要运行与本章相关的演示，只需克隆源代码，导航到 `4\. 在 Pimcore 中创建文档` 文件夹，并启动 Docker 环境。
- en: 'You can find all the code files for this chapter on GitHub here: [https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/4.%20Creating%20documentes%20in%20Pimcore](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/4.%20Creating%20documentes%20in%20Pimcore).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到本章的所有代码文件：[https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/4.%20Creating%20documentes%20in%20Pimcore](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/4.%20Creating%20documentes%20in%20Pimcore)。
- en: 'To start the code on your PC, just navigate to folder `4.` `Creating` `documents`
    `in` `Pimcore` and follow these instructions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的 PC 上开始编写代码，只需导航到文件夹 `4.` `在 Pimcore 中创建` `文档`，并按照以下说明操作：
- en: 'Run Docker with the following command:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行 Docker：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, to restore all the settings from on your local, type this:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为了从您的本地恢复所有设置，请输入以下内容：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Navigate to [http://localhost/admin](http://localhost/admin) and log in with
    your admin/pimcore credentials.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 [http://localhost/admin](http://localhost/admin) 并使用您的管理员/pimcore 凭据登录。
- en: Now you are ready to play with the demo related to this chapter!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经准备好玩与本章相关的演示了！
- en: What is a document?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是文档？
- en: Generally speaking, everybody uses documents every day. We deal with document
    specifications for our boss or our customer, we write documents to keep track
    of the changes in our software… but what is a document in Pimcore? In the context
    of information science, we are not referring to a paper sheet, but to a digital
    asset that contains unstructured information; in our case, a web page is a **document**.
    Documents are organized into a **document tree** that creates a hierarchy between
    elements. This structure of documents will represent the structure of the website.
    This may seem complicated to read, but it is very easy to put into practice.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，每个人每天都在使用文档。我们处理文档规范以供我们的老板或客户使用，我们编写文档以跟踪我们软件中的变化……但在 Pimcore 中，什么是文档？在信息科学领域，我们不是指纸张，而是指包含非结构化信息的数字资产；在我们的案例中，网页就是一个**文档**。文档被组织成一个**文档树**，在元素之间创建了一个层次结构。这种文档结构将代表网站的架构。这看起来可能很复杂，但实际操作起来非常简单。
- en: 'In the following example, we have a simple website composed of a tree web:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们有一个由一个树状网页组成的简单网站：
- en: '![Figure 4.1: The document list'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1：文档列表'
- en: '](img/Figure_4.01_B17073.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.01_B17073.jpg)'
- en: 'Figure 4.1: The document list'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：文档列表
- en: These are the pages we will create during this chapter and that will show all
    the document features.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将创建这些页面，并将展示所有文档功能。
- en: We told you that a document could be any type of unstructured data container.
    Such containers can be very different, based on the kind of information found
    within them. To represent each document with the right amount of information,
    we need to classify documents using document types.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉您，文档可以是任何类型的非结构化数据容器。这些容器可以根据其中找到的信息类型非常不同。为了以适当的信息量表示每个文档，我们需要使用文档类型对文档进行分类。
- en: 'Pimcore offers many different document types that let you manage most of the
    use case you will face without any problems:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore 提供了许多不同的文档类型，让您可以轻松管理您将面临的大多数用例：
- en: '**Page**: This is the typical web page. The path in the document tree defines
    the final URL.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面**：这是典型的网页。文档树中的路径定义了最终的 URL。'
- en: '**Snippet**: As the word suggests, snippets are pieces of the document that
    can be embedded into pages for content reuse. We can also add snippets to snippets.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**片段**：正如其名所示，片段是文档的片段，可以嵌入到页面中进行内容重用。我们还可以将片段添加到片段中。'
- en: '**Link**: This is a raw web link that can be used inside a navigation tree.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接**：这是一个可以在导航树内部使用的原始网页链接。'
- en: '**Email**: This is a document that produces HTML content, such as pages, but
    also supports the sending of transactional emails, allowing you to define a sender
    and recipient.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件**：这是一个生成 HTML 内容的文档，如页面，但也支持发送交易性电子邮件，允许您定义发件人和收件人。'
- en: '**Newsletter**: Very similar to email content but has some extra features to
    support usage as a newsletter (for instance, mass sending).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新闻通讯**：与电子邮件内容非常相似，但有一些额外功能以支持作为新闻通讯的使用（例如，群发）。'
- en: '**Hardlink**: Allows you to create internal links and alter the regular structure
    of the document.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬链接**：允许您创建内部链接并更改文档的常规结构。'
- en: '**Folder**: Like a folder on the filesystem of your PC, Pimcore folders contain
    multiple documents.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件夹**：类似于您 PC 文件系统中的文件夹，Pimcore 文件夹包含多个文档。'
- en: '**PrintPage**: Pages with some extra features for printing purposes, such as
    a **Generate PDF** button.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打印页面**：为了打印目的，具有一些额外功能，例如**生成 PDF**按钮。'
- en: '**PrintContainer**: A container that organizes pages into a group to create
    a multi-page document that''s ready for printing.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打印容器**：一个将页面组织成组以创建一个多页文档并准备打印的容器。'
- en: Not only does Pimcore come with document types out of the box, but you can also
    create your own.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore 不仅自带文档类型，您还可以创建自己的。
- en: In this first section of the chapter, we learned what documents in Pimcore are.
    This was useful for understanding what we are going to do next, as we will learn
    how to create a new document and implement a simple web page.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一节中，我们学习了 Pimcore 中的文档是什么。这有助于我们理解接下来将要做什么，因为我们将学习如何创建一个新的文档并实现一个简单的网页。
- en: Creating a document
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文档
- en: 'In this section, we will see how to create a document using Pimcore CMS. To
    do this, follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用 Pimcore CMS 创建文档。为此，请按照以下步骤操作：
- en: Navigate to the document tree and right-click to activate the context menu.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到文档树并右键单击以激活上下文菜单。
- en: 'Select **Add page** and then **Blank** (to create an empty page):![Figure 4.2:
    Adding a page in Pimcore'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**添加页面**然后**空白**（以创建一个空页面）![图 4.2：在 Pimcore 中添加页面
- en: '](img/Figure_4.02_B17073.jpg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 4.2：B17073.jpg](img/Figure_4.02_B17073.jpg)'
- en: 'Figure 4.2: Adding a page in Pimcore'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.2：在 Pimcore 中添加页面
- en: 'A modal popup called **Add page** will appear, with three parameters for you
    to complete. The **Title** parameter is the title of the page, the **Navigation**
    parameter is the name that will be used in the navigation menu, and **Key** is
    a unique key that you choose for the document:![Figure 4.3: Entering data for
    the page that we are creating'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个名为**添加页面**的模态弹出窗口，有三个参数供您填写。**标题**参数是页面的标题，**导航**参数是在导航菜单中使用的名称，**键**是您为文档选择的唯一键：![图
    4.3：输入我们正在创建的页面的数据
- en: '](img/Figure_4.03_B17073.jpg)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 4.3：B17073.jpg](img/Figure_4.03_B17073.jpg)'
- en: 'Figure 4.3: Entering data for the page that we are creating'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.3：输入我们正在创建的页面的数据
- en: 'Click **OK** and you will see your **Home** page added to the menu tree:![Figure
    4.4: The page added in the tree menu'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**，您将看到您的**主页**已添加到菜单树中：![图 4.4：树菜单中添加的页面
- en: '](img/Figure_4.04_B17073.jpg)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 4.4：B17073.jpg](img/Figure_4.04_B17073.jpg)'
- en: 'Figure 4.4: The page added in the tree menu'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.4：树菜单中添加的页面
- en: 'Click your newly created page, **Home**, and the page element will open the
    page in a new tab. The next figure shows the page editor:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你新创建的页面，**首页**，页面元素将在新标签页中打开。下一张图显示了页面编辑器：
- en: '![Figure 4.5: The web page'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5：网页'
- en: '](img/Figure_4.05_B17073.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.05_B17073.jpg)'
- en: 'Figure 4.5: The web page'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：网页
- en: This page tells us that we have created a web page, but the site is empty because
    we don't have a template. This message may seem a little bit frustrating because,
    after all those steps, you are still not able to enter content without creating
    an HTML template. This may seem quite odd if you are used to ready-to-use solutions
    such as WordPress, where anybody can add content without needing to write a single
    line of code. This is because of the Pimcore philosophy, where there isn't any
    superstructure between you and the tool.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面告诉我们我们已经创建了一个网页，但网站是空的，因为我们还没有模板。这个信息可能有点令人沮丧，因为经过所有这些步骤，你仍然不能创建 HTML 模板而不输入内容。如果你习惯了像
    WordPress 这样的现成解决方案，这可能会显得相当奇怪，在那里任何人都可以添加内容而无需编写一行代码。这是因为 Pimcore 的哲学，其中你与工具之间没有超结构。
- en: In the next section, we will learn how to create a simple template. For now,
    we can be satisfied that we have learned how to create web pages using documents.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何创建一个简单的模板。目前，我们可以满意的是我们已经学会了如何使用文档创建网页。
- en: Creating a template
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模板
- en: The purpose of this chapter is to give you the basics for rendering a document
    properly. This is only one small part of Pimcore's rendering capabilities, and
    we go deeper into this topic in [*Chapter 10*](B17073_10_ePub_RK.xhtml#_idTextAnchor188)*,*
    *Creating Pimcore Bricks*, to discover all the secrets of rendering custom data.
    For now, we will focus only on the information we need to create simple websites.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是为你提供正确渲染文档的基础知识。这仅仅是 Pimcore 渲染能力的一小部分，我们将在[*第 10 章*](B17073_10_ePub_RK.xhtml#_idTextAnchor188)*，*创建
    Pimcore 砖块*中深入探讨这个主题，以发现渲染自定义数据的所有秘密。目前，我们将只关注我们创建简单网站所需的信息。
- en: The Pimcore page design process
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pimcore 页面设计过程
- en: The first concepts to introduce are templates and layouts. The **layout** is
    a generic page prototype where you can leave some placeholders that will be filled
    by **templates**. For example,you can have a layout page with two columns and
    two placeholders, one per column. On each page, you will be able to fill the content
    inside each placeholder. Such placeholders are called **Blocks** in Twig syntax,
    and you can define how many blocks you want.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要介绍的概念是模板和布局。**布局**是一个通用的页面原型，你可以在其中留下一些占位符，这些占位符将由**模板**填充。例如，你可以有一个有两列和两个占位符的布局页面，每列一个。在每一页上，你都将能够填写每个占位符内的内容。这样的占位符在
    Twig 语法中被称为**块**，你可以定义你想要的块的数量。
- en: 'In the following figure, you can see how the web page design process works:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，你可以看到网页设计过程是如何工作的：
- en: '![Figure 4.6: The template engine in action'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6：模板引擎在行动'
- en: '](img/Figure_4.06_B17073.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.06_B17073.jpg)'
- en: 'Figure 4.6: The template engine in action'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6：模板引擎在行动
- en: 'Let''s take a look at each stage:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看每个阶段：
- en: The first step is to define a **Layout**. This step must be done by a developer
    or someone that has mastered the HTML, CSS, and Twig templating languages. It
    is not complicated but requires you to access the source code and write down a
    file, and typically it cannot be done by the final user. At this stage, we will
    define the structure of the page; in the example, the number of rows/the common
    page parts are defined.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步是定义一个**布局**。这一步必须由开发者或精通 HTML、CSS 和 Twig 模板语言的人来完成。这并不复杂，但需要你访问源代码并写下文件，通常最终用户无法完成。在这个阶段，我们将定义页面的结构；在示例中，定义了行数/常见页面部分。
- en: Inside the layout, a space for the page implementation is left empty for the
    **Template**. Inside the template, the designer or the developer can add input
    that we filled by the user. In this manner, you can create the product page prototype
    and then the content manager can create many product pages.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在布局内部，为**模板**留出一个用于页面实现的空白空间。在模板内部，设计师或开发者可以添加用户填写的内容。通过这种方式，你可以创建产品页面原型，然后内容管理员可以创建许多产品页面。
- en: As the last step, the user will be able to enter data into the template placeholder.
    In this example, the user can enter a title, fill out the body text, and add images.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为最后一步，用户将能够将数据输入到模板占位符中。在这个例子中，用户可以输入标题，填写正文内容，并添加图片。
- en: Note
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Pimcore supports Twig or PHP templates. As stated in the official documentation,
    PHP templates are deprecated and will be retired with Pimcore X. That's why, even
    though many parts of the official Pimcore documentation show only PHP examples,
    we decided to base this book on the Twig template. We are aware that most PHP
    developers have been more comfortable with the plain PHP template, but it was
    hard to base a book on a deprecated feature.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Pimcore支持Twig或PHP模板。如官方文档所述，PHP模板已被弃用，并将随着Pimcore X的发布而退役。这就是为什么，尽管官方Pimcore文档中只展示了PHP示例，但我们决定以Twig模板为基础编写这本书。我们意识到，大多数PHP开发者可能更习惯于纯PHP模板，但基于已弃用的功能编写一本书是困难的。
- en: In this section, we had an overview of Pimcore's templates; now it's time to
    learn how to create a template starting from scratch.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们对Pimcore的模板进行了概述；现在是时候学习如何从头开始创建一个模板了。
- en: Implementing a simple layout
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现简单布局
- en: 'In this section, we will implement a simple layout that can be used to create
    web pages and build a website. As you will see, the process is easy and requires
    just a few steps to get a working template:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现一个简单的布局，可用于创建网页和构建网站。正如您将看到的，这个过程很简单，只需几个步骤就可以得到一个可工作的模板：
- en: 'Firstly, we need to tell the system to use Twig files instead of the PHP template.
    Navigate to `/src/Controller` and open `DefaultController.php`. You just need
    to add an annotation to the `defaultAction` method inside the controller using
    `Template()`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要告诉系统使用Twig文件而不是PHP模板。导航到`/src/Controller`并打开`DefaultController.php`。您只需在控制器中的`defaultAction`方法上添加一个`@Template()`注解：
- en: '[PRE2]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the next steps, we will learn how the layout engine works and how you can
    create templates for your Pimcore websites. This is very simple, as we need just
    some knowledge of HTML, CSS, and PHP to create structured websites.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将学习布局引擎的工作原理以及如何为您的Pimcore网站创建模板。这非常简单，因为我们只需要一些HTML、CSS和PHP的知识来创建结构化的网站。
- en: 'At this point, we are ready to start creating a template. Navigate to `/templates`
    and create a file named `layout.html.twig`. The template engine behind Pimcore
    is Symfony, so most things that are valid for a generic Symphony project are also
    true for Pimcore. In the following example, we have a snippet of code that implements
    a Pimcore layout. You can copy this snippet into the `layout.html.twig` file or
    check the file provided in our demo:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经准备好开始创建模板。导航到`/templates`并创建一个名为`layout.html.twig`的文件。Pimcore背后的模板引擎是Symfony，因此对于通用Symphony项目有效的多数事物对于Pimcore也是适用的。在下面的示例中，我们有一个实现Pimcore布局的代码片段。您可以将此代码片段复制到`layout.html.twig`文件中，或者检查我们提供的演示文件：
- en: '[PRE3]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see in the previous code, a Pimcore layout is just an HTML file
    (or a Twig template) where you add the following snippet to create a place where
    the user will put content:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您在前面的代码中所见，Pimcore布局只是一个HTML文件（或Twig模板），在其中您添加以下代码片段以创建用户放置内容的位置：
- en: '[PRE4]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inside the template, you want to add all the common parts of your websites,
    such as menus, footers, and the page structure. Of course, you can use multiple
    layouts across different pages, even for the same website (for instance, tree
    columns versus a two-column layout).
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在模板内部，您想要添加您网站的所有常见部分，例如菜单、页脚和页面结构。当然，您可以在不同页面中使用多个布局，甚至是同一网站（例如，树形列与两列布局）。
- en: 'The layout cannot be used by the final user, as it contains only the page structure
    definition. So, we will have to define a template. A template is another Twig
    file where you implement the blocks left empty in the layout. Navigate to `/templates`
    and create a folder named `Default` that contains a file named `default.html.twig`.
    Here, you have to extend the layout that we created in the previous step. To do
    so, add a simple template with a title, a subtitle, and a page body:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 布局不能被最终用户使用，因为它只包含页面结构定义。因此，我们必须定义一个模板。模板是另一个Twig文件，在其中您实现布局中留下的空白块。导航到`/templates`并创建一个名为`Default`的文件夹，其中包含一个名为`default.html.twig`的文件。在这里，您必须扩展我们在上一步中创建的布局。为此，添加一个包含标题、副标题和页面主体的简单模板：
- en: '[PRE5]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '{% block content %}'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{% block content %}'
- en: '[PRE6]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, mixed with HTML, we have some special directives that allow the user to
    put content inside the template. Our goal is to remove any dependency from the
    developer during the editing (in other words, the user must be able to enter data
    by themselves). This can be done easily by using Pimcore `headline`, in this case.
    Then we can have many parameters; in this case, we use a fixed width during the
    editing.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，混合使用HTML，我们有一些特殊的指令，允许用户在模板中放置内容。我们的目标是消除编辑过程中对开发者的任何依赖（换句话说，用户必须能够自行输入数据）。在这种情况下，可以通过使用Pimcore的`headline`指令轻松实现。然后我们可以有许多参数；在这种情况下，我们在编辑过程中使用固定宽度。
- en: 'To add HTML text, we do the same, but using a **What You See Is What You Get**
    (**WYSIWYG**) interface. This is quite similar to the previous case, as you can
    see in the next code snippet:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要添加HTML文本，我们做的是相同的，但使用**所见即所得**（**WYSIWYG**）界面。这与前一个案例非常相似，如下一代码片段所示：
- en: '[PRE7]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we are able to edit documents! In the next section, we will learn how to
    put data inside a template and how to iterate this process to implement a real
    website.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够编辑文档了！在下一节中，我们将学习如何将数据放入模板以及如何迭代此过程以实现真正的网站。
- en: Editing a document
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑文档
- en: 'In this section, we will learn how to create and edit a document. As we told
    you, a document can be any of your CMS web pages, so just from this simple lesson,
    you will be able to create any kind of website. The process of editing a document
    is very easy, and we will explore it by completing some simple steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建和编辑文档。正如我们告诉您的，文档可以是您的CMS网页中的任何一种，所以仅仅从这个简单的课程中，您就能创建任何类型的网站。编辑文档的过程非常简单，我们将通过完成一些简单的步骤来探讨它：
- en: 'Open the admin panel and find **Home**, the page we created in the *What is
    a document?* section. By selecting it, you will open the web page in the main
    frame of the admin. As you can see in the next figure, we are going to edit the
    web page directly, and we will be using a mode called WYSIWYG, which is very useful
    because it makes the editor aware of what they are doing during the editing:![Figure
    4.7: The web page editor'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开管理面板并找到**主页**，这是我们之前在*什么是文档？*部分创建的页面。通过选择它，您将在管理的主框架中打开网页。如下一图所示，我们将直接编辑网页，并使用一种称为WYSIWYG的模式，这非常有用，因为它使编辑器在编辑过程中意识到他们正在做什么：![图4.7：网页编辑器
- en: '](img/Figure_4.07_B17073.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.07_B17073.jpg)'
- en: 'Figure 4.7: The web page editor'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.7：网页编辑器
- en: As you can see in the previous figure, we have some dotted areas, which are
    the placeholders that we added to the Twig template. These placeholders work like
    regular input boxes, so all you need to do is click on them and start entering
    text. In Pimcore, such items are called editables (as mentioned earlier).
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前图所示，我们有一些虚线区域，这些是我们添加到Twig模板中的占位符。这些占位符就像常规输入框一样工作，所以您只需点击它们并开始输入文本。在Pimcore中，这样的项目被称为可编辑项（如前所述）。
- en: 'Click the larger placeholder and type the words **Home Page**; you will see
    the editor being filled in while you are typing the characters. In the next figure,
    you can see the final result of filling in the **Title** field:![Figure 4.8: Writing
    the title'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击较大的占位符并输入单词**主页**；您将在输入字符的同时看到编辑器被填充。在下一张图中，您可以看到填写**标题**字段的最终结果：![图4.8：编写标题
- en: '](img/Figure_4.08_B17073.jpg)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.08_B17073.jpg)'
- en: 'Figure 4.8: Writing the title'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.8：编写标题
- en: 'Click the second placeholder (the one just below the title). As in the previous
    case, clicking the editor will unlock the ability for you to write any text. The
    difference is that the **Title** field is a single-line editable box, whereas
    this field is an HTML editor; you can select text and then apply styles as you
    would in any word processor. In the next figure, you can see this in action:![Figure
    4.9: HTML editor in action'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第二个占位符（位于标题下方的一个）。与上一个案例一样，点击编辑器将解锁您写入任何文本的能力。不同之处在于**标题**字段是一个单行可编辑框，而此字段是一个HTML编辑器；您可以选择文本，然后像在任何文字处理程序中一样应用样式。在下一张图中，您可以看到这一功能的使用情况：![图4.9：HTML编辑器使用情况
- en: '](img/Figure_4.09_B17073.jpg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.09_B17073.jpg)'
- en: 'Figure 4.9: HTML editor in action'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.9：HTML编辑器使用情况
- en: The previous figure shows the HTML text and the contextual menu that allows
    style settings for the text.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前一张图显示了HTML文本和允许设置文本样式的上下文菜单。
- en: Once we have filled the editable parts of the document, the web page is done.
    We can publish it using the **Save and Publish** button in the toolbar.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们填写了文档的可编辑部分，网页就完成了。我们可以使用工具栏中的**保存并发布**按钮来发布它。
- en: 'Then, to view a preview of the page, just click the **Preview** button. In
    the next figure, we can see the preview tool in action. As you can see in the
    figure, we can choose the device to use for rendering the page (in this example,
    we are emulating a phone):![Figure 4.10: Document preview'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，要查看页面的预览，只需点击**预览**按钮。在下一张图中，我们可以看到预览工具的实际应用。如图所示，我们可以选择用于渲染页面的设备（在这个例子中，我们正在模拟一部手机）：![图4.10：文档预览
- en: '](img/Figure_4.10_B17073.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.10_B17073.jpg)'
- en: 'Figure 4.10: Document preview'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.10：文档预览
- en: 'Finally, we have to take care of search engine settings. Click the **SEO &
    Settings** tab to enter the panel where we can edit these settings. Here we can
    add a title, a description, and any metatags we want:![Figure 4.11: SEO & Settings
    panel'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须注意搜索引擎设置。点击**SEO & 设置**标签以进入我们可以编辑这些设置的面板。在这里，我们可以添加标题、描述以及我们想要的任何元标签：![图4.11：SEO
    & 设置面板
- en: '](img/Figure_4.11_B17073.jpg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.11_B17073.jpg)'
- en: 'Figure 4.11: SEO & Settings panel'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.11：SEO & 设置面板
- en: On the same page, you can see a Google preview of your web page, so you can
    be aware of how it will look for the user searching for your web page. In the
    last editable component, you can define a custom URL for the page. This setting
    overrides the normal page structure, so it is an absolute URL.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在同一页面上，你可以看到你网页的Google预览，这样你就可以知道用户搜索你的网页时会看到什么。在最后一个可编辑组件中，你可以为页面定义一个自定义URL。此设置覆盖了正常页面结构，因此它是一个绝对URL。
- en: 'Finally, click the **Version** tab. You will see the history of a document,
    as shown in the following figure. Within the **Version** panel, you can access
    the history of the web pages and recover old versions in the case of errors:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**版本**标签。你将看到文档的历史记录，如下所示。在**版本**面板中，你可以访问网页的历史记录，并在出错的情况下恢复旧版本：
- en: '![Figure 4.12: Version panel'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.12：版本面板'
- en: '](img/Figure_4.12_B17073.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.12_B17073.jpg)'
- en: 'Figure 4.12: Version panel'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12：版本面板
- en: Editing documents enables us to create simple websites. This is easy by simply
    defining a template and then putting information into it. We have learned that
    we can create document instances by creating different templates, and the user
    can autonomously manage them using a web interface. Replicating what we have done
    so far is enough for building simple websites.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑文档使我们能够创建简单的网站。这很简单，只需定义一个模板，然后将信息放入其中。我们已经了解到，我们可以通过创建不同的模板来创建文档实例，并且用户可以使用网络界面自主管理它们。复制我们迄今为止所做的一切就足以构建简单的网站。
- en: However, things can get a bit more complicated. For example, let's say you want
    to create a website catalog containing a set of products to sell. Using what we
    have learned so far, you can create a catalog by adding a document template for
    the product page; then, you can create a product page and fill in the data. Now,
    imagine that each product had a variety of variants; these (child) variants share
    a lot of information with the original (parent) product. Creating multiple pages
    for these variants using the process we just covered would be time-consuming.
    Plus, if you copied and pasted data that is similar across all the product variants
    and then one piece of information changed, you would have to update each page
    individually. This example shows us how replicating data by copying and pasting
    information can lead to a website that is hard to maintain.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事情可能会变得稍微复杂一些。例如，假设你想创建一个包含一系列要出售的产品目录的网站。使用我们迄今为止所学到的知识，你可以通过为产品页面添加文档模板来创建目录；然后，你可以创建一个产品页面并填写数据。现在，想象一下每个产品都有各种变体；这些（子）变体与原始（父）产品共享大量信息。使用我们刚才介绍的过程为这些变体创建多个页面将会很耗时。此外，如果你复制粘贴了所有产品变体中相似的数据，然后其中一条信息发生了变化，你就必须逐个更新每个页面。这个例子告诉我们，通过复制粘贴信息来复制数据会导致难以维护的网站。
- en: In the next section, we will learn how to reuse the content of a document to
    avoid data replication using document inheritance.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何通过文档继承来重用文档内容，以避免数据复制。
- en: Inheriting documents
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承文档
- en: Document inheritance is a feature that lets you create a pre-filled document
    where you can override just the section you need. Think of this feature as a "template
    in a template." This feature is activated by setting the **Content Master Document**
    property in the document settings. This feature applies to every document type,
    and it is very useful for repetitive content, such as newsletters or technical
    documentation.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 文档继承是一个功能，允许你创建一个预先填充的文档，你可以只覆盖你需要覆盖的部分。将此功能想象为“模板中的模板”。此功能通过在文档设置中设置**内容主文档**属性来激活。此功能适用于所有文档类型，对于重复性内容（如通讯或技术文档）非常有用。
- en: In the following steps, we will see how to take advantage of inheritance for
    reusing content and organizing website content better. We will create a simple
    product catalog with a product (here, t-shirts) with multiple variants (one variant
    per color), and each variant will have its web page.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将了解如何利用继承来重复使用内容并更好地组织网站内容。我们将创建一个简单的产品目录，其中包含一个产品（在这里是T恤）和多个变体（每个颜色一个变体），每个变体都将有自己的网页。
- en: 'Follow these steps to do this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行操作：
- en: 'First of all, we have to create a template for a product page. So, let''s create
    a file called `product.html.twig` inside `/templates/Default`. The process is
    very similar to the one followed in the *Editing a document* section, but this
    time we will have a more complex layout. In fact, we have to display product data,
    so we have to add more input. The next layout fragment displays the relevant part
    of the layout file:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须为产品页面创建一个模板。因此，让我们在`/templates/Default`中创建一个名为`product.html.twig`的文件。这个过程与*编辑文档*部分中遵循的过程非常相似，但这次我们将有一个更复杂的布局。实际上，我们必须显示产品数据，因此我们必须添加更多的输入。下一个布局片段显示了布局文件的相应部分：
- en: '[PRE8]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a page in the tree menu. In our example, we will create a page for t-shirts
    with some variants, so the page title will be **TShirt**. In our case, we created
    this page inside a **Products** menu item that is the root of our catalog. Then,
    you have to iterate the process, creating a sub-page for each color variant (**TShirt-Red**,
    **TShirt-Green**, and **TShirt-Yellow**). The final result is shown in the next
    figure:![Figure 4.13: The menu with products'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在树菜单中创建一个页面。在我们的例子中，我们将为一些变体（T恤）创建一个页面，因此页面标题将是**TShirt**。在我们的情况下，我们在这个**产品**菜单项中创建了此页面，它是我们目录的根。然后，你必须迭代这个过程，为每个颜色变体（**TShirt-Red**、**TShirt-Green**和**TShirt-Yellow**）创建一个子页面。最终结果如图所示：![图
    4.13：产品菜单
- en: '](img/Figure_4.13_B17073.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.13_B17073.jpg)'
- en: 'Figure 4.13: The menu with products'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.13：产品菜单
- en: Now double-click on the parent page, **TShirt**, and open the document.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在双击父页面**TShirt**并打开文档。
- en: 'Now hit **SEO & Settings**. Click on the **Template** dropdown and select **Default/default.html.twig**:![Figure
    4.14: Selecting the product template'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**SEO & 设置**。点击**模板**下拉菜单并选择**默认/default.html.twig**：![图 4.14：选择产品模板
- en: '](img/Figure_4.14_B17073.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.14_B17073.jpg)'
- en: 'Figure 4.14: Selecting the product template'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.14：选择产品模板
- en: Repeat the previous step for all the child pages.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为所有子页面重复前面的步骤。
- en: 'Enter data for each field we added in the template. The result should be something
    similar to what you see in the following figure:![Figure 4.15: Editing the t-shirt
    product'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们在模板中添加的每个字段输入数据。结果应该类似于以下图所示：![图 4.15：编辑 T 恤产品
- en: '](img/Figure_4.15_B17073.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.15_B17073.jpg)'
- en: 'Figure 4.15: Editing the t-shirt product'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.15：编辑 T 恤产品
- en: Before editing a variant for the product that we created with these documents,
    we will assume that most of the information entered for this product will be the
    same for all the children. In fact, all products are just the same t-shirt, except
    for the color. Let's see in the next steps how to avoid data replication.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在编辑我们使用这些文档创建的产品变体之前，我们将假设为该产品输入的大部分信息将适用于所有子项。事实上，所有产品只是相同的T恤，只是颜色不同。让我们在接下来的步骤中看看如何避免数据重复。
- en: 'Open the **TShirt** page and click on **SEO & Settings**. Then, drag and drop
    the **TShirt** page from the document tree to the **Content-Master Document**
    field:![Figure 4.16: Drag and drop the parent document'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**TShirt**页面并点击**SEO & 设置**。然后，将**TShirt**页面从文档树拖放到**内容-主文档**字段：![图 4.16：拖放父文档
- en: '](img/Figure_4.16_B17073.jpg)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.16_B17073.jpg)'
- en: 'Figure 4.16: Drag and drop the parent document'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.16：拖放父文档
- en: 'After you click **Apply**, you will be prompted with the message: **Are you
    sure? All content will be lost**. When you confirm the operation, all the existing
    content on your page will be overridden from the inherited ones. Since the operation
    is completed, you now have all the editable components disabled. In the next figure,
    we can see how the page looks. As you can see, the placeholders are filled in
    automatically with the values from the parent page. You can see that the editable
    components are now disabled, and when you move the mouse over an editable area,
    a **Click right to overwrite** message appears:![Figure 4.17: Overwriting an inherited
    property'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**应用**后，你会收到提示信息：**您确定吗？所有内容都将丢失**。当你确认操作时，你页面上现有的所有内容将被继承的内容覆盖。由于操作已完成，你现在拥有所有可编辑组件已禁用。在下一张图中，我们可以看到页面看起来如何。正如你所见，占位符已自动填充来自父页面的值。你可以看到，可编辑组件现在已禁用，当你将鼠标移至可编辑区域时，会出现**右键单击以覆盖**的消息：![图
    4.17：覆盖继承属性
- en: '](img/Figure_4.17_B17073.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.17_B17073.jpg)'
- en: 'Figure 4.17: Overwriting an inherited property'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.17：覆盖继承属性
- en: 'Right-click on the disabled editable; in this case, right-click **A T-Shirt**.
    This step unlocks the field and lets you change the default values for this page
    instance. In this case, we entered **A Red T-Shirt**:![Figure 4.18: After overwriting,
    the text is editable'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击禁用的可编辑区域；在这种情况下，右键单击**一件T恤**。这一步将解锁字段，并允许你更改此页面实例的默认值。在这种情况下，我们输入了**一件红色T恤**：![图
    4.18：覆盖后，文本可编辑
- en: '](img/Figure_4.18_B17073.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_4.18_B17073.jpg)'
- en: 'Figure 4.18: After overwriting, the text is editable'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.18：覆盖后，文本可编辑
- en: In the previous figure, you can see that the product name was replaced. All
    the fields that are not inherited will reflect the changes from the parent document;
    so, if you change the price, this field will be updated in all the child pages.
    In that way, all common fields are entered once, and you replicate information
    only when you really need to.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上一张图中，你可以看到产品名称已被替换。所有非继承的字段将反映来自父文档的更改；因此，如果你更改价格，此字段将在所有子页面上更新。这样，所有常用字段只需输入一次，你只在真正需要时复制信息。
- en: Now, replicate *steps 6-8* for all the children of the **T-shirt** page tree.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为**T恤**页面树中的所有子页面复制*步骤 6-8*。
- en: In this section, we learned how to create a document by inheriting some data
    from a parent. This Pimcore feature lets us reuse information across a website.
    Using this inheritance feature, we avoided replicating common fields in the product
    hierarchy. This feature is another option for managing unstructured data in a
    more convenient way and avoiding data replication.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何通过从父文档继承一些数据来创建文档。这个 Pimcore 功能让我们能够在整个网站上重用信息。使用这个继承功能，我们避免了在产品层次结构中复制常用字段。这个功能是管理非结构化数据的一种更方便的选项，并避免数据重复。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create documents and how this feature enables
    us to create and manage very simple websites. The first thing we discovered, with
    respect to other CMS solutions, is that we don't have anything that's ready to
    use. Just to create the first web page, we needed to define some templates. This
    may seem like a waste of time, but it is in fact the opposite. Templates force
    you to work in a structured way from the beginning of the process. They force
    you to create editable web pages where the final user will be able to edit data
    without breaking the layout. This allows non-developers to master their content.
    It is what we called a detached approach in the first chapter.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建文档以及这个功能如何使我们能够创建和管理非常简单的网站。我们首先发现，与其他 CMS 解决方案相比，我们没有现成可用的东西。仅仅为了创建第一个网页，我们需要定义一些模板。这看起来可能像是一种浪费时间的行为，但实际上正好相反。模板迫使你在整个过程中以结构化的方式工作。它们迫使你创建可编辑的网页，最终用户将能够编辑数据而不会破坏布局。这允许非开发者掌握他们的内容。这就是我们在第一章中提到的分离方法。
- en: If you have some experience in web development, you are probably wondering how
    far you can go with editables. Their flexibility can help you implement a huge
    amount of web pages, and you could theoretically go on and manage complex websites
    with them. The only limitation to this approach is that we are working with plain
    documents. Do you remember when we gave the definition of documents? We said that
    they are containers of unstructured information. That's the limitation. We can
    structure how information is distributed across the page, but this doesn't allow
    us to query or reuse data. We can create thousands of blogs or product pages with
    ease, but this is not enough. In fact, we will need to be more dynamic, by listing
    products on a category page or group blog articles by tag. You may want to implement
    these features using documents, but in spite of the power of Pimcore, in most
    cases, it will require a lot of effort, and you'll get a poor result. In fact,
    documents are good for rendering web pages but don't quite suit structured data
    or interactive content.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一些网络开发经验，你可能想知道你可以用可编辑的内容走多远。它们的灵活性可以帮助你实现大量的网页，理论上你可以继续使用它们来管理复杂的网站。这种方法的唯一限制是我们正在处理的是纯文档。你还记得我们给出的文档定义吗？我们说它们是无结构化信息的容器。这就是限制。我们可以结构化信息在页面上的分布方式，但这并不允许我们查询或重用数据。我们可以轻松地创建成千上万的博客或产品页面，但这还不够。事实上，我们需要更加动态，比如在分类页面上列出产品或按标签分组博客文章。你可能想使用文档来实现这些功能，但尽管Pimcore功能强大，在大多数情况下，这将需要大量的努力，而且结果可能不尽如人意。事实上，文档适合渲染网页，但并不完全适合结构化数据或交互式内容。
- en: So, if you are wondering how to handle structured data, don't worry. In the
    next chapter, we will describe what data objects are and how to represent information
    in a structured way. This will be the basis for starting to manage data properly
    and render it without any duplication of content or source code.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你在思考如何处理结构化数据，请不要担心。在下一章中，我们将描述数据对象是什么以及如何以结构化的方式表示信息。这将是我们开始正确管理数据并避免内容或源代码重复的基础。
