["```php\n// behaviorSubject_01.php  \nuse Rx\\Subject\\BehaviorSubject; \n\n$subject = new BehaviorSubject(42); \n$subject->subscribe(new DebugSubject()); \n\n```", "```php\n$ php behaviorSubject_01.php\n15:11:54 [] onNext: 42 (integer)\n\n```", "```php\n// replaySubject_01.php \nuse Rx\\Subject\\ReplaySubject; \n$subject = new ReplaySubject(3); \n\nObservable::range(1, 8) \n    ->subscribe($subject); \n\n$subject->subscribe(new DebugSubject()); \n\n```", "```php\n$ php replaySubject_01.php \n15:46:30 [] onNext: 6 (integer)\n15:46:30 [] onNext: 7 (integer)\n15:46:30 [] onNext: 8 (integer)\n15:46:30 [] onCompleted\n\n```", "```php\n// asyncSubject_01.php \nuse Rx\\Subject\\AsyncSubject; \n$subject = new AsyncSubject(); \n$subject->subscribe(new DebugSubject()); \n\nObservable::range(1, 8) \n    ->subscribe($subject); \n\n```", "```php\n$ php asyncSubject_01.php \n16:00:46 [] onNext: 8 (integer)\n16:00:46 [] onCompleted\n\n```", "```php\n// multicast_01.php  \n$observable = Rx\\Observable::defer(function() { \n        printf(\"Observable::defer\\n\"); \n        return Observable::range(1, 3); \n    }) \n    ->multicast(new Subject()); \n\n$observable->subscribe(new DebugSubject('1')); \n$observable->subscribe(new DebugSubject('2')); \n$observable->connect(); \n\n```", "```php\n$ php multicast_01.php \nObservable::defer\n10:43:42 [1] onNext: 1 (integer)\n10:43:42 [2] onNext: 1 (integer)\n10:43:42 [1] onNext: 2 (integer)\n10:43:42 [2] onNext: 2 (integer)\n18:12:16 [1] onNext: 3 (integer)\n18:12:16 [2] onNext: 3 (integer)\n10:43:42 [1] onCompleted\n10:43:42 [2] onCompleted\n\n```", "```php\n// multicastObservable_01.php \n$source = Rx\\Observable::defer(function() { \n    printf(\"Observable::defer\\n\"); \n    return Observable::range(1, 3); \n}); \n\n$observable = new MulticastObservable($source, function() { \n    return new Subject(); \n}, function (ConnectableObservable $connectable) { \n    return $connectable->startWith('start'); \n}); \n\n$observable->subscribe(new DebugSubject('1')); \n$observable->subscribe(new DebugSubject('2')); \n\n```", "```php\n$ php multicastObservable_01.php \n12:54:20 [1] onNext: start (string)\nObservable::defer\n12:54:20 [1] onNext: 1 (integer)\n12:54:20 [1] onNext: 2 (integer)\n12:54:20 [1] onNext: 3 (integer)\n12:54:20 [1] onCompleted\n12:54:20 [2] onNext: start (string)\nObservable::defer\n12:54:20 [2] onNext: 1 (integer)\n12:54:20 [2] onNext: 2 (integer)\n12:54:20 [2] onNext: 3 (integer)\n12:54:20 [2] onCompleted\n\n```", "```php\n// subject_01.php \n$subject = new Subject(); \n\n$subject->subscribe(new DebugSubject('1')); \n$subject->onNext(1); \n$subject->onNext(2); \n$subject->onNext(3); \n$subject->onCompleted(); \n\n$subject->subscribe(new DebugSubject('2')); \n$subject->onNext(4); \n$subject->onCompleted(); \n\n```", "```php\n$ php subject_01.php \n13:15:00 [1] onNext: 1 (integer)\n13:15:00 [1] onNext: 2 (integer)\n13:15:00 [1] onNext: 3 (integer)\n13:15:00 [1] onCompleted\n13:15:00 [2] onCompleted\n\n```", "```php\n// multicast_02.php  \nuse Rx\\Observable; \nuse Rx\\Subject\\Subject; \n\n$subject = new Subject(); \n$source = Observable::range(1, 3) \n    ->multicast($subject, function($connectable) { \n        return $connectable->concat(Observable::just('start')); \n    }) \n    ->concat(Observable::just('concat')); \n\n$source->subscribe(new DebugSubject()); \n$source->subscribe(new DebugSubject()); \n\n```", "```php\nfunction multicast($subject, $selector=null, $scheduler=null){ \n  return $selector ? \n    new MulticastObservable($this, function () use ($subject) { \n      return $subject; \n    }, $selector) : \n    new ConnectableObservable($this, $subject, $scheduler); \n} \n\n```", "```php\n$ php multicast_02.php\n13:41:23 [] onNext: start (string)\n13:41:23 [] onNext: 1 (integer)\n13:41:23 [] onNext: 2 (integer)\n13:41:23 [] onNext: 3 (integer)\n13:41:23 [] onNext: concat (string)\n13:41:23 [] onCompleted\n13:41:23 [] onNext: start (string)\n13:41:23 [] onNext: concat (string)\n13:41:23 [] onCompleted\n\n```", "```php\n// multicastWithSelector_01.php  \n$source = Observable::range(1, 3) \n    ->multicastWithSelector(function() { \n        return new Subject(); \n    }, function(ConnectableObservable $connectable) { \n        return $connectable->concat(Observable::just('concat')); \n    }); \n\n$source->subscribe(new DebugSubject()); \n$source->subscribe(new DebugSubject()); \n\n```", "```php\n$ php multicastWithSelector_01.php \n15:05:56 [] onNext: 1 (integer)\n15:05:56 [] onNext: 2 (integer)\n15:05:56 [] onNext: 3 (integer)\n15:05:56 [] onNext: concat (string)\n15:05:56 [] onCompleted\n15:05:56 [] onNext: 1 (integer)\n15:05:56 [] onNext: 2 (integer)\n15:05:56 [] onNext: 3 (integer)\n15:05:56 [] onNext: concat (string)\n15:05:56 [] onCompleted\n\n```", "```php\n// refCount_01.php  \n$source = Observable::create(function($observer) { \n    $observer->onNext(1); \n    $observer->onNext(2); \n    $observer->onNext(3); \n}); \n$conn = new Observable\\ConnectableObservable($source); \n$conn->subscribe(new DebugSubject('1')); \n$conn->subscribe(new DebugSubject('2')); \n$conn->connect(); \n\n```", "```php\n$ php refCount_01.php \n17:20:41 [1] onNext: 1 (integer)\n17:20:41 [2] onNext: 1 (integer)\n17:20:41 [1] onNext: 2 (integer)\n17:20:41 [2] onNext: 2 (integer)\n17:20:41 [1] onNext: 3 (integer)\n17:20:41 [2] onNext: 3 (integer)\n\n```", "```php\n// refCount_02.php  \n$source = Rx\\Observable::create(function($observer) { \n    $observer->onNext(1); \n    $observer->onNext(2); \n    $observer->onNext(3); \n}); \n$conn = (new Rx\\Observable\\ConnectableObservable($source)) \n    ->refCount(); \n\n$conn->subscribe(new DebugSubject('1')); \n$conn->subscribe(new DebugSubject('2')); \n\n```", "```php\n$ php refCount_02.php \n17:52:05 [1] onNext: 1 (integer)\n17:52:05 [1] onNext: 2 (integer)\n17:52:05 [1] onNext: 3 (integer)\n\n```", "```php\n// refCount_03.php \n// ... \n$sub = $conn->subscribe(new DebugSubject('1')); \n$sub->dispose(); \n$conn->subscribe(new DebugSubject('2')); \n\n```", "```php\n$ php refCount_03.php \n17:53:29 [1] onNext: 1 (integer)\n17:53:29 [1] onNext: 2 (integer)\n17:53:29 [1] onNext: 3 (integer)\n17:53:29 [2] onNext: 1 (integer)\n17:53:29 [2] onNext: 2 (integer)\n17:53:29 [2] onNext: 3 (integer)\n\n```", "```php\n// publish_01.php  \nuse Rx\\Observable; \n$observable = Observable::defer(function() { \n        printf(\"Observable::defer\\n\"); \n        return Observable::range(1, 3); \n    }) \n    ->publish(); \n\n$observable->subscribe(new DebugSubject('1')); \n$observable->subscribe(new DebugSubject('2')); \n$observable->connect(); \n\n```", "```php\n// share_01.php  \nuse Rx\\Observable; \n$observable = Observable::defer(function() { \n        printf(\"Observable::defer\\n\"); \n        return Observable::range(1, 3); \n    }) \n    ->share(); \n\n$observable->subscribe(new DebugSubject('1')); \n$observable->subscribe(new DebugSubject('2')); \n\n```", "```php\n$ php share_01.php \nObservable::defer\n18:17:12 [1] onNext: 1 (integer)\n18:17:12 [1] onNext: 2 (integer)\n18:17:12 [1] onNext: 3 (integer)\n18:17:12 [1] onCompleted\n18:17:12 [2] onCompleted\n\n```", "```php\n// publishValue_01.php  \n$source = Observable::defer(function() { \n        printf(\"Observable::defer\\n\"); \n        return Observable::range(1, 3); \n    }) \n    ->publishValue('default'); \n\n$source->subscribe(new DebugSubject()); \n$source->subscribe(new DebugSubject()); \n$source->connect(); \n\n```", "```php\n$ php publishValue_01.php \n18:47:17 [] onNext: default (string)\n18:47:17 [] onNext: default (string)\nObservable::defer\n18:47:17 [] onNext: 1 (integer)\n18:47:17 [] onNext: 1 (integer)\n18:47:17 [] onNext: 2 (integer)\n18:47:17 [] onNext: 2 (integer)\n18:47:17 [] onNext: 3 (integer)\n18:47:17 [] onNext: 3 (integer)\n18:47:17 [] onCompleted\n18:47:17 [] onCompleted\n\n```", "```php\n$ pecl install pthreads\n\n```", "```php\n$ brew install php70-pthreads\n\n```", "```php\n// threads_01.php  \nclass MyThread extends Thread { \n    protected $i; \n    public function __construct($i) { \n        $this->i = $i; \n    } \n    public function run() { \n        sleep(rand(1, 5)); \n        printf(\"%d: done\\n\", $this->i); \n    } \n} \n\n$threads = []; \nforeach (range(0, 5) as $i) { \n    $thread = new MyThread($i); \n    $thread->start(); \n    $threads[] = $thread; \n} \n\nforeach ($threads as $thread) { \n    $thread->join(); \n} \necho \"All done\\n\"; \n\n```", "```php\n$ php threads_01.php \n0: done\n2: done\n1: done\n5: done\n3: done\n4: done\nAll done\n\n```", "```php\n// references_01.php  \n$obj = new stdClass(); \n$obj->prop = 'foo'; \n\n$obj2 = $obj; \nprintf(\"%d\\n\", $obj === $obj2); \n\nclass TestClass { \n    public $obj; \n    public $objCopy; \n\n    public function copyObj() { \n        $this->objCopy = $this->obj; \n        $this->objCopy->prop2 = 'bar'; \n    } \n} \n\n$testObj = new TestClass(); \n$testObj->obj = $obj; \n$testObj->copyObj(); \nprintf(\"%d\\n\", $obj === $testObj->objCopy); \nprint_r($obj); \n\n```", "```php\n$ php7 references_01.php \n1\n1\nstdClass Object (\n [prop] => foo\n [prop2] => bar\n)\n\n```", "```php\n// threads_02.php  \nclass MyThread extends Thread { \n    public $obj; \n    public $objCopy; \n\n    public function run() { \n        $this->objCopy = $this->obj; \n        $this->objCopy->prop2 = 'bar'; \n        printf(\"%d\\n\", $this->obj === $this->obj); \n    } \n} \n\n$obj = new stdClass(); \n$obj->prop = 'foo'; \n\n$thread = new MyThread($obj); \n$thread->obj = $obj; \n$thread->start(); \n$thread->join(); \n\nprintf(\"%d\\n\", $obj === $thread->objCopy); \nprint_r($obj); \n\n```", "```php\n$ php threads_02.php \n0\n0\nstdClass Object (\n [prop] => foo\n)\n\n```", "```php\n// threads_08.php  \nclass MyThread extends Thread { \n    protected $i; \n    public $result; \n\n    public function __construct($i) { \n        $this->i = $i; \n    } \n\n    public function run() { \n        sleep(rand(1, 5)); \n        printf(\"%d: done\\n\", $this->i); \n        $this->result = pow($this->i, 2); \n    } \n} \n\n$threads = []; \nforeach (range(5, 7) as $i) { \n    $thread = new MyThread($i); \n    $thread->start(); \n    $threads[] = $thread; \n} \n\nforeach ($threads as $i => $thread) { \n    $thread->join(); \n    printf(\"%d: %d\\n\", $i, $thread->result); \n} \necho \"All done\\n\"; \n\n```", "```php\n$ php threads_08.php \n7: done\n5: done\n6: done\n0: 25\n1: 36\n2: 49\nAll done\n\n```", "```php\n// threads_03.php  \n\nclass MyThread extends Thread { \n    protected $i; \n    public $result; \n\n    public function __construct($i) { \n        $this->i = $i; \n    } \n\n    public function run() { \n        sleep(rand(1, 5)); \n        printf(\"%d: done\\n\", $this->i); \n        $this->result = pow($this->i, 2); \n    } \n} \n\n$worker = new Worker(); \n$threads = []; \nforeach (range(1, 4) as $i) { \n    $thread = new MyThread($i); \n    $worker->stack($thread); \n    $threads[] = $thread; \n} \n\n$worker->start(); \necho \"Starting worker\\n\"; \n\n// Add another task after the worker has started \n$thread = new MyThread(42); \n$worker->stack($thread); \n$threads[] = $thread; \n$worker->shutdown(); \n\nforeach ($threads as $i => $thread) { \n    printf(\"%d: %d\\n\", $i, $thread->result); \n} \necho \"All done\\n\"; \n\n```", "```php\n$ php7 threads_03.php \nStarting worker\n5: done\n6: done\n7: done\n42: done\n0: 25\n1: 36\n2: 49\n3: 1764\nAll done\n\n```", "```php\nclass MyWorker extends Worker { \n    public function run() { \n        // ... Initialize this Worker and its context. \n    } \n} \n\n```", "```php\n// threads_04.php \nclass MyWorker extends Worker { \n    public function run() { \n        printf(\"%s: starting worker\\n\", date('H:i:s')); \n    } \n} \nclass Task extends Threaded { \n    public function run() { \n        sleep(3); \n        printf(\"%s: done\\n\", date('H:i:s')); \n    } \n} \nprintf(\"%s: start\\n\", date('H:i:s')); \n$pool = new Pool(3, MyWorker::class); \n\nforeach (range(0, 5) as $i) { \n    $pool->submit(new Task()); \n} \n\n$pool->shutdown(); \necho \"All done\\n\"; \n\n```", "```php\n$ php threads_04.php\n22:50:51: start\n22:50:51: starting worker\n22:50:51: starting worker\n22:50:51: starting worker\n22:50:54: done\n22:50:54: done\n22:50:54: done\n22:50:57: done\n22:50:57: done\n22:50:57: done\nAll done \n\n```", "```php\n// threads_12.php \nclass MyThread extends Thread { \n    protected $i; \n    public $result; \n    public function __construct($i) { \n        $this->i = $i; \n    } \n    public function run() { \n        $this->result = pow($this->i, 2); \n    } \n} \n\n$pool = new Pool(3); \n$threads = []; \nforeach (range(1, 7) as $i) { \n    $thread = new MyThread($i); \n    $pool->submit($thread); \n    $threads[] = $thread; \n} \n$pool->shutdown(); \n\n$results = []; \nforeach ($threads as $thread) { \n    $results[] = $thread->result; \n} \nprint_r($results); \n\n```", "```php\n// threads_10.php  \n$pool = new Pool(3); \n\nwhile (@$i++ < 6) { \n    $pool->submit(new class($i) extends Thread { \n        public $id; \n        private $garbage; \n\n        public function __construct($id) { \n            $this->id = $id; \n        } \n        public function run() { \n            sleep(1); \n            printf(\"Hello World from %d\\n\", $this->id); \n            $this->setGarbage(); \n        } \n        public function setGarbage() { \n            $this->garbage = true; \n        } \n        public function isGarbage(): bool { \n            return $this->garbage; \n        } \n    }); \n} \nwhile ($pool->collect(function(Collectable $work){ \n    printf(\"Collecting %d\\n\", $work->id); \n    return $work->isGarbage(); \n})) continue; \n\n$pool->shutdown(); \n\n```", "```php\n$ php threads_10.php \nHello World from 1\nCollecting 1\nHello World from 2\nCollecting 2\nHello World from 3\nCollecting 3\nHello World from 4\nHello World from 5\nHello World from 6\n\n```", "```php\n// threads_05.php \nclass Task extends Thread { \n  public $result; \n  private $i; \n\n  public function __construct($i, Volatile $results) { \n    $this->i = $i; \n    $this->results = $results; \n  } \n  public function run() { \n    sleep(1); \n    $result = pow($this->i, 2); \n    printf(\"%s: done %d\\n\", date('H:i:s'), $result); \n\n    $this->results->synchronized(function($results,$result){ \n      $results[] = (array)['id' => $this->i,'result' => $result]; \n      $results->notify(); \n    }, $this->results, $result); \n  } \n} \n\n$pool = new Pool(2); \n$results = new Volatile(); \nforeach (range(0, 3) as $i) { \n  $pool->submit(new Task($i, $results)); \n} \n\n$results->synchronized(function() use ($results) { \n  while (count($results) != 4) { \n    $results->wait(); \n  } \n}); \n\nwhile ($pool->collect()) continue; \n$pool->shutdown(); \nprint_r($results); \necho \"All done\\n\"; \n\n```", "```php\n$ php threads_05.php \n17:21:42: done 0\n17:21:42: done 1\n17:21:43: done 9\n17:21:43: done 4\nVolatile Object (\n [0] => Array(\n [id] => \n [result] => 0\n )\n [1] => Array(\n [id] => \n [result] => 1\n )\n [2] => Array(\n [id] => \n [result] => 9\n )\n [3] => Array(\n [id] => \n [result] => 4\n )\n)\nAll done\n\n```", "```php\n$results[] = (array)['id' => $this->i, 'result' => $result]; \n\n```", "```php\n// threads_13.php\n$pool = new Pool(3);\n// populate $pool with 6 tasks...\n$remaining = 6;\nwhile ($remaining !== 0) {\n  $pool->collect(function(Collectable $work) use (&$remaining) {\n    $done = $work->isGarbage();\n    if ($done) {\n      printf(\"Collecting %d\\n\", $work->id);\n      $remaining--;\n    }\n    return $done;\n  });\n}\n\n```", "```php\n $ php threads_13.php \nHello World from 1\nCollecting 1\nHello World from 2\nCollecting 2\nHello World from 3\nCollecting 3\nHello World from 4\nHello World from 5\nHello World from 6\nCollecting 6\nCollecting 4\nCollecting 5 \n\n```"]