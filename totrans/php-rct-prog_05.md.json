["```php\n// do_01.php \nuse Rx\\Observable; \nuse Rx\\ObserverInterface; \n\nObservable::create(function(ObserverInterface $obs) { \n        $obs->onNext(1); \n        $obs->onNext(2); \n        $obs->onError(new \\Exception(\"it's broken\")); \n    }) \n    ->doOnError(function(\\Exception $value) { \n        echo $value->getMessage() . \"\\n\"; \n    }) \n    ->subscribeCallback(function($value) { \n        echo \"$value\\n\"; \n    }, function() {}); \n\n```", "```php\n$ php do_01.php \n1\n2\ndoOnError: it's broken\n\n```", "```php\ncomposer require phpunit/phpunit\n\n```", "```php\ncomposer global require phpunit/phpunit\n\n```", "```php\n// phpunit_01.php \nuse PHPUnit\\Framework\\TestCase; \n\nclass DemoTest extends TestCase { \n    public function testFirstTest() { \n        $expectedVar = 5; \n        $this->assertTrue(5 == $expectedVar); \n        $this->assertEquals(5, $expectedVar); \n\n        $expectedArray = [1, 2, 3]; \n        $this->assertEquals([1, 2, 3], $expectedArray); \n        $this->assertContains(2, $expectedArray); \n    } \n} \n\n```", "```php\n$ ln -s vendor/bin/phpunit ./phpunit\n$ ln -s vendor/autoload.php ./autoload.php\n\n```", "```php\n$ ./phpunit --bootstrap autoload.php phpunit_01.php\nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\n.                                   1 / 1 (100%)\nTime: 72 ms, Memory: 4.00MB\nOK (1 test, 4 assertions)\n\n```", "```php\n$ ./phpunit --testdox --bootstrap autoload.php phpunit_01.php \nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\nDemo\n [x] First test\n\n```", "```php\nclass DemoTest extends TestCase { \n    // ... \n    public function testFails() { \n        $this->assertEquals(5, 6); \n        $this->assertContains(2, [1, 3, 4]); \n    } \n\n    /** \n     * @depends testFails \n     */ \n    public function testDepends() { \n        $this->assertTrue(true); \n    } \n} \n\n```", "```php\n$ ./phpunit --testdox --bootstrap autoload.php phpunit_01.php \nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\nDemo\n [x] First test\n [ ] Fails\n\n```", "```php\n// phpunit_async_01.php \nuse PHPUnit\\Framework\\TestCase; \n\nfunction asyncPowIterator($num, callable $callback) { \n    foreach (range(1, $num - 1) as $i) { // intentional \n        $callback($i, pow($i, 2)); \n    } \n} \n\nclass AsyncDemoTest extends TestCase { \n    public function testBrokenAsync() { \n        $callback = function($i, $pow) use (&$count) { \n            $this->assertEquals(pow($i, 2), $pow); \n        }; \n    } \n} \n\n```", "```php\n$ ./phpunit --testdox --bootstrap autoload.php phpunit_async_01.php \nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\nAsyncDemo\n [x] Broken async\n\n```", "```php\nclass AsyncDemoTest extends TestCase { \n    public function testBrokenAsync() { \n        $count = 0; \n        $callback = function($i, $pow) use (&$count) { \n            $this->assertEquals(pow($i, 2), $pow); \n            $count++; \n        }; \n        asyncPowIterator(5, $callback); \n        $this->assertEquals(5, $count); \n    } \n} \n\n```", "```php\n$ ./phpunit --bootstrap autoload.php phpunit_async_01.php \nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\nF                                          1 / 1 (100%)\nTime: 57 ms, Memory: 4.00MB\nThere was 1 failure:\n1) AsyncDemoTest::testBrokenAsync\nFailed asserting that 4 matches expected 5.\n/path/Chapter 05/phpunit_async_01.php:22\nFAILURES!\nTests: 1, Assertions: 5, Failures: 1.\n\n```", "```php\n// virtual_time_scheduler_01.php \nuse Rx\\Scheduler\\VirtualTimeScheduler; \n\n$scheduler = new VirtualTimeScheduler(0, function($a, $b) { \n    return $a - $b; \n}); \n\n$scheduler->schedule(function() { \n    print(\"1\\n\"); \n}, 300); \n$scheduler->schedule(function() { \n    print(\"2\\n\"); \n}, 0); \n$scheduler->schedule(function() { \n    print(\"3\\n\"); \n}, 150); \n$scheduler->start(); \n\n```", "```php\n$ php virtual_time_scheduler_01.php\n2\n3\n1\n\n```", "```php\n$loop = new React\\EventLoop\\StreamSelectLoop(); \n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop); \n\nRx\\Observable::interval(1000, $scheduler) \n    ->subscribe(...); \n$loop->run(); \n\n```", "```php\n// virtual_time_scheduler_02.php \nuse Rx\\Scheduler\\VirtualTimeScheduler; \nuse Rx\\Observable; \nuse Rx\\Observer\\CallbackObserver;  \n$scheduler = new VirtualTimeScheduler(0, function($a, $b) { \n    return $a - $b; \n}); \n$observer = new CallbackObserver(function($val) { \n    print(\"$val\\n\"); \n}); \n\n$observable = Observable::fromArray([1,2,3,4]); \n$observable->subscribe($observer, $scheduler); \n$scheduler->start(); \n\n```", "```php\n$ php virtual_time_scheduler_02.php \n1\n2\n3\n4\n\n```", "```php\n// hot_observable_01.php \nuse Rx\\Scheduler\\VirtualTimeScheduler; \nuse Rx\\Testing\\HotObservable;  \nuse Rx\\Testing\\Recorded; \nuse Rx\\Notification\\OnNextNotification; \n\n$scheduler = new VirtualTimeScheduler(0, function($a, $b) { \n    return $a - $b; \n}); \n$observable = new HotObservable($scheduler, [ \n    new Recorded(100, new OnNextNotification(3)), \n    new Recorded(150, new OnNextNotification(1)), \n    new Recorded(80, new OnNextNotification(2)), \n]); \n$observable->subscribeCallback(function($val) { \n    print(\"$val\\n\"); \n}); \n$scheduler->start(); \n\n```", "```php\n$ php hot_observable_01.php\n2\n3\n1\n\n```", "```php\n// mock_observer_01.php \nuse Rx\\Testing\\MockObserver; \nuse Rx\\Scheduler\\VirtualTimeScheduler; \nuse Rx\\Testing\\HotObservable; \nuse Rx\\Testing\\Recorded; \nuse Rx\\Notification\\OnNextNotification;  \nuse Rx\\Notification\\OnCompletedNotification; \n\n$scheduler = new VirtualTimeScheduler(0, function($a, $b) { \n    return $a - $b; \n}); \n$observer = new MockObserver($scheduler); \n\n(new HotObservable($scheduler, [ \n    new Recorded(100, new OnNextNotification(3)), \n    new Recorded(150, new OnNextNotification(1)), \n    new Recorded(80, new OnNextNotification(2)), \n    new Recorded(140, new OnCompletedNotification()), \n]))->subscribe($observer); \n$scheduler->start(); \n\nforeach ($observer->getMessages() as $message) { \n    printf(\"%s: %s\\n\", $message->getTime(), $message->getValue()); \n} \n\n```", "```php\n$ php mock_observer_01.php \n80: OnNext(2)\n100: OnNext(3)\n140: OnCompleted()\n150: OnNext(1)\n\n```", "```php\n$scheduler = new TestScheduler(); \n$observer = $scheduler \n    ->startWithCreate(function() use ($scheduler) { \n        return new HotObservable($scheduler, [ \n            new Recorded(200, new OnNextNotification(3)), \n            new Recorded(250, new OnNextNotification(1)), \n            new Recorded(180, new OnNextNotification(2)), \n            new Recorded(240, new OnCompletedNotification()), \n            new Recorded(1200, new OnNextNotification(4)), \n        ]); \n}); \n\n$expected = [ \n    new Recorded(200, new OnNextNotification(3)), \n    new Recorded(240, new OnCompletedNotification()), \n    new Recorded(250, new OnNextNotification(1)), \n]; \n\n$actual = $observer->getMessages(); \nprintf(\"Count match: %d\\n\", count($actual) == count($expected)); \nforeach ($actual as $i => $message) { \n    printf(\"%s: %d\\n\", $message->getTime(), \n        $message->equals($expected[$i])); \n} \n\n```", "```php\n$ php mock_observer_02.php \nCount match: 1\n200: 1\n240: 1\n250: 1\n\n```", "```php\n// SumOperator.php \nclass SumOperator implements OperatorInterface  { \n  private $sum = 0; \n\n  function __invoke($observable, $observer, $scheduler=null) { \n    $observable->subscribe(new CallbackObserver( \n      function($value) use ($observer) { \n        if (is_int($value)) { \n          $this->sum += $value; \n        } else { \n          $observer->onError(new Exception()); \n        } \n      }, \n      [$observer, 'onError'], \n      function() use ($observer) { \n        $observer->onNext($this->sum); \n        $observer->onCompleted(); \n      } \n    )); \n  } \n} \n\n```", "```php\n{ \n  \"name\": \"rxphp_unittesting_demo\", \n  ... \n  \"require\": { \n    \"reactivex/rxphp\": \"^1.5\", \n    \"phpunit/phpunit\": \"^5.6\", \n    ... \n  }, \n  \"autoload\": { \n    \"psr-4\": { \n      \"Rx\": \"vendor/reactivex/rxphp/test/Rx\" \n    }, \n    \"files\": [ \n      \"vendor/reactivex/rxphp/test/helper-functions.php\" \n    ] \n  } \n} \n\n```", "```php\n$ composer update\n\n```", "```php\n// SumOperatorTest.php \nuse Rx\\Functional\\FunctionalTestCase; \n\nclass SumOperatorTest extends FunctionalTestCase { \n  public function testSumSuccess() { \n    $observer = $this->scheduler->startWithCreate(function () { \n      return $this->createHotObservable([ \n        onNext(150, 3), \n        onNext(210, 2), \n        onNext(450, 7), \n        onCompleted(460), \n        onNext(500, 4), \n      ])->lift(function() { \n        return new SumOperator(); \n      }); \n    }); \n\n    $this->assertMessages([ \n      onNext(460, 9), \n      onCompleted(460) \n    ], $observer->getMessages()); \n  } \n} \n\n```", "```php\n$ ./phpunit --bootstrap ./vendor/autoload.php SumOperatorTest.php\nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\n.                                         1 / 1 (100%)\nTime: 84 ms, Memory: 4.00MB\nOK (1 test, 1 assertion)\n\n```", "```php\nclass SumOperatorTest extends FunctionalTestCase { \n  // ... \n  public function testSumFails() { \n    $observer = $this->scheduler->startWithCreate(function () { \n      return $this->createHotObservable([ \n        onNext(150, 3), \n        onNext(250, 'abc'), \n        onNext(300, 2), \n        onCompleted(460) \n      ])->lift(function() { \n        return new SumOperator(); \n      }); \n    }); \n\n    $this->assertMessages([ \n      onError(250, new Exception()), \n    ], $observer->getMessages()); \n  } \n} \n\n```", "```php\n$ ./phpunit --testdox --bootstrap autoload.php SumOperatorTest \nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\nSumOperator\n [x] Sum success\n [x] Sum fails\n\n```", "```php\n// fork_join_test_01.php \nuse Rx\\Observable; \n\n(new ForkJoinObservable([ \n    Observable::fromArray([1, 2, 3, 4]), \n    Observable::fromArray([7, 6, 5]), \n    Observable::fromArray(['a', 'b', 'c']), \n]))->subscribeCallback(function($values) { \n    print_r($values); \n}); \n\n```", "```php\n$ php fork_join_test_01.php \nArray\n(\n [0] => 4\n [1] => 5\n [2] => c\n)\n\n```", "```php\n// ForkJoinObservable.php \nclass ForkJoinObservable extends Observable { \n  private $observables; \n  private $lastValues = []; \n  private $completed = []; \n\n  public function __construct($observables) { \n    $this->sources = $observables; \n  } \n\n  public function subscribe($observer, $sched = null) { \n    $disp = new CompositeDisposable(); \n\n    if (null == $sched) { \n      $sched = new ImmediateScheduler(); \n    } \n\n    foreach ($this->observables as $i => $obs) { \n      $inDisp = $obs->subscribeCallback(function($v) use ($i) { \n          $this->lastValues[$i] = $v; \n        }, function($e) use ($observer) { \n          $observer->onError($e); \n        }, function() use ($i, $observer) { \n          $this->completed[$i] = true; \n\n          $completed = count($this->completed); \n          if ($completed == count($this->observables)) { \n            $observer->onNext($this->lastValues); \n            $observer->onCompleted(); \n          } \n        } \n      ); \n      $disp->add($inDisp); \n    } \n    return $disp; \n  } \n} \n\n```", "```php\n// ForkJoinObservableTest.php \nclass ForkJoinObservableTest extends FunctionalTestCase { \n\n  public function testJoinObservables() { \n    $observer = $this->scheduler->startWithCreate(function () { \n      return new ForkJoinObservable([ \n        $this->createHotObservable([ \n          onNext(200, 1), \n          onNext(300, 2), \n          onNext(400, 3), \n          onCompleted(500), \n          onNext(600, 4), \n        ]), \n        $this->createHotObservable([ \n          onNext(200, 8), \n          onNext(300, 7), \n          onNext(400, 6), \n          onCompleted(800), \n        ]) \n      ]); \n    }); \n\n    $this->assertMessages([ \n        onNext(800, [3, 6]), \n        onCompleted(800) \n    ], $observer->getMessages()); \n  } \n} \n\n```", "```php\n$ ./phpunit --testdox --bootstrap autoload.php  \n    ForkJoinObservableTest\nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\nForkJoinObservable\n [x] Join observables\n\n```", "```php\npublic function testJoinObservablesNeverCompletes() { \n  $observer = $this->scheduler->startWithCreate(function () { \n    return new ForkJoinObservable([ \n      $this->createHotObservable([ \n        onNext(200, 1), \n        onNext(300, 2), \n        onCompleted(500), \n      ]), \n      $this->createHotObservable([ \n        onNext(200, 8), \n        onNext(300, 7), \n      ]) \n    ]); \n  }); \n\n  $this->assertMessages([], $observer->getMessages()); \n} \n\n```"]