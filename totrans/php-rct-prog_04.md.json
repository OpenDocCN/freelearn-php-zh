["```php\n(new CURLObservable('https://example.com')) \n    ->subscribeCallback(null, function($e) { ... }); \n\n```", "```php\n(new CURLObservable('https://example.com')) \n    ->retry(3) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n// snippet from Rx\\Operator\\MapOperator class \ntry { \n    $value = call_user_func_array($this->selector, [$nextValue]); \n} catch (\\Exception $e) { \n    $observer->onError($e); \n} \n\n```", "```php\n// retry_01.php \nObservable::range(1, 6) \n    ->map(function($val) { \n        if ($val == 3) { \n            throw new \\Exception('error'); \n        } \n        return $val; \n    }) \n    ->retry(3) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php retry_01.php\n09:18:32 [] onNext: 1 (integer)\n09:18:32 [] onNext: 2 (integer)\n09:18:32 [] onNext: 1 (integer)\n09:18:32 [] onNext: 2 (integer)\n09:18:32 [] onNext: 1 (integer)\n09:18:32 [] onNext: 2 (integer)\n09:18:32 [] onError (Exception): error\n\n```", "```php\n// retry_05.php \n$count = 0; \nRx\\Observable::range(1, 6) \n    ->map(function($val) use (&$count) { \n        if (++$count == 3) { \n            throw new \\Exception('error'); \n        } \n        return $count; \n    }) \n    ->retry(3) \n    ->takeWhile(function($val) { \n        return $val <= 6; \n    }) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php retry_05.php\n14:18:01 [] onNext: 1 (integer)\n14:18:01 [] onNext: 2 (integer)\n14:18:01 [] onNext: 4 (integer)\n14:18:01 [] onNext: 5 (integer)\n14:18:01 [] onNext: 6 (integer)\n14:18:01 [] onCompleted\n\n```", "```php\n// retry_04.php \nRx\\Observable::defer(function() { \n        echo \"Observable::defer\\n\"; \n        return new CurlObservable('https://example.com123'); \n    }) \n    ->retry(3) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php retry_04.php \nObservable::defer()\nObservable::defer()\nObservable::defer()\n13:14:20 [] onError (Exception): Unable to download https://ex...\n\n```", "```php\n// retry_when_01.php \n$loop = new \\React\\EventLoop\\StreamSelectLoop(); \n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop); \n\n(new CURLObservable('https://example.com123')) \n    ->retryWhen(function($errObs) use ($scheduler) { \n        $notificationObs = $errObs \n            ->delay(1000, $scheduler) \n            ->map(function() { \n                echo \"\\$notificationObs\\n\"; \n                return true; \n            }); \n        return $notificationObs; \n    }) \n    ->subscribe(new DebugSubject(), $scheduler); \n\n$scheduler->start(); \n\n```", "```php\n$ php retry_when_01.php\nonNext\nonNext\nonNext\n...\n\n```", "```php\n$errors = new Subject(); \n$when = call_user_func($callable, $errors->asObservable()); \n\n$subscribe = function() use ($observable, $observer, $errors) { \n    $observable->subscribe(new CallbackObserver( \n        [$observer, 'onNext'], \n        function() use ($errors) { \n            $errors->onNext($errors); \n        }), \n        [$observer, 'onCompleted'] \n    ); \n}; \n$when->subscribe(new CallbackObserver(function() use ($subscribe){ \n    $subscribe(); \n})); \n\n$subscribe(); \n\n```", "```php\n// retry_when_02.php \nuse Rx\\Observable; \n$loop = new \\React\\EventLoop\\StreamSelectLoop(); \n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop); \n\n(new CURLObservable('https://example.com123')) \n    ->retryWhen(function($errObs) use ($scheduler) { \n        echo \"retryWhen\\n\"; \n        $i = 1; \n        $notificationObs = $errObs \n            ->delay(1000, $scheduler) \n            ->map(function(Exception $val) use (&$i) { \n                echo \"attempt: $i\\n\"; \n                if ($i == 3) { \n                    throw $val; \n                } \n                $i++; \n                return $val; \n            }); \n\n        return $notificationObs; \n    }) \n    ->subscribe(new DebugSubject(), $scheduler); \n\n$loop->run(); \n\n```", "```php\n$ php retry_when_02.php\nretryWhen\nattempt: 1\nattempt: 2\nattempt: 3\n14:36:13 [] onError (Exception): Unable to download https://ex...\n\n```", "```php\n// retry_when_03.php \n... \n$notificationObs = $errObs \n    ->delay(1000, $scheduler) \n    ->map(function(Exception $val) use (&$i) { \n        echo \"attempt: $i\\n\"; \n        $i++; \n        return $val; \n    }) \n    ->take(3); \n... \n\n```", "```php\n$ php retry_when_03.php \nretryWhen\nattempt: 1\nattempt: 2\nattempt: 3\n15:30:01 [] onCompleted\n\n```", "```php\nuse Rx\\Observable; \nObservable::range(1,6) \n    ->map(function($val) { \n        if ($val == 3) { \n            throw new Exception(); \n        } \n        return $val; \n    }) \n    ->catchError(function(Exception $e, Observable $sourceOb) { \n        return Observable::just(42); \n    }) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php catch_01.php \n06:43:04 [] onNext: 1 (integer)\n06:43:04 [] onNext: 2 (integer)\n06:43:04 [] onNext: 42 (integer)\n06:43:04 [] onCompleted\n\n```", "```php\n// merge_01.php \nuse Rx\\Observable; \n$loop = new \\React\\EventLoop\\StreamSelectLoop(); \n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop); \n\n$merge = Observable::interval(100) \n    ->map(function($value) { \n        return 'M' . $value; \n    }) \n    ->take(3); \n\n$source = Observable::interval(300) \n    ->map(function($value) { \n        return 'S' . $value; \n    }) \n    ->take(3) \n    ->merge($merge) \n    ->subscribe(new DebugSubject(), $scheduler); \n\n$loop->run(); \n\n```", "```php\n$ php merge_01.php\n22:00:28 [] onNext: M0 (string)\n22:00:28 [] onNext: M1 (string)\n22:00:28 [] onNext: S0 (string)\n22:00:28 [] onNext: M2 (string)\n22:00:29 [] onNext: S1 (string)\n22:00:29 [] onNext: S2 (string)\n22:00:29 [] onCompleted\n\n```", "```php\n// concat_01.php \nuse Rx\\Observable; \n$loop = new \\React\\EventLoop\\StreamSelectLoop(); \n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop); \n\n$concat = Observable::interval(100) \n    ->map(function($value) { \n        return 'C' . $value; \n    }) \n    ->take(3); \n\n$source = Observable::interval(300) \n    ->map(function($value) { \n        return 'S' . $value; \n    }) \n    ->take(3) \n    ->concat($concat) \n    ->subscribe(new DebugSubject(), $scheduler); \n\n$loop->run(); \n\n```", "```php\n$ php concat_01.php \n22:25:45 [] onNext: S0 (string)\n22:25:45 [] onNext: S1 (string)\n22:25:46 [] onNext: S2 (string)\n22:25:46 [] onNext: C0 (string)\n22:25:46 [] onNext: C1 (string)\n22:25:46 [] onNext: C2 (string)\n22:25:46 [] onCompleted\n\n```", "```php\n// concat_map_01.php \nuse Rx\\Observable; \n\nfunction createCURLObservable($num) { \n    $url = 'http://httpbin.org/get?num=' . $num; \n    echo \"$url\\n\"; \n    return (new CURLObservable($url)) \n        ->filter(function($response) { \n            return is_string($response); \n        }); \n} \n\n$source = Observable::emptyObservable() \n    ->concat(createCURLObservable(rand(1, 100))) \n    ->concatMap(function($response) { \n        $json = json_decode($response, true); \n        return createCURLObservable(2 * $json['args']['num']); \n    }) \n    ->concatMap(function($response) { \n        $json = json_decode($response, true); \n        return createCURLObservable(2 * $json['args']['num']); \n    }) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php concat_map_01.php\nhttp://httpbin.org/get?num=51\nhttp://httpbin.org/get?num=102\nhttp://httpbin.org/get?num=204\n22:54:37 [] onNext: {\n \"args\": {\n \"num\": \"204\"\n }, \n \"headers\": {\n \"Accept\"... (string)\n22:54:37 [] onCompleted\n\n```", "```php\n$ composer require symfony/event-dispatcher\n\n```", "```php\n// event_dispatcher_01.php  \nuse Symfony\\Component\\EventDispatcher\\EventDispatcher; \nuse Symfony\\Component\\EventDispatcher\\Event; \n\n$dispatcher = new EventDispatcher(); \n$dispatcher->addListener('my_action', function() { \n    echo \"Listener #1\\n\"; \n}); \n$dispatcher->addListener('other_action', function() { \n    echo \"Other listener\\n\"; \n}); \n$dispatcher->addListener('my_action', function() { \n    echo \"Listener #2\\n\"; \n}); \n\n$dispatcher->dispatch('my_action'); \n\n```", "```php\n$ php event_dispatcher_01.php  \nListener #1 \nListener #2 \n\n```", "```php\n$dispatcher->dispatch('foo_my_action'); \n\n```", "```php\n// event_dispatcher_02.php  \n$dispatcher = new EventDispatcher(); \n\n$dispatcher->addListener('my_action', function(Event $event) { \n    echo \"Listener #1\\n\"; \n}); \n$dispatcher->addListener('my_action', function(Event $event) { \n    echo \"Listener #2\\n\"; \n    $event->stopPropagation(); \n}, 1); \n\n$dispatcher->dispatch('my_action', new Event()); \n\n```", "```php\n$ php event_dispatcher_02.php\nListener #2\n\n```", "```php\n// MyEvent.php \nuse Symfony\\Component\\EventDispatcher\\Event; \n\nclass MyEvent extends Event { \n  private $name; \n  private $counter = 0; \n\n  public function __construct($name = null, $counter = 0) { \n    $this->name = $name; \n    $this->counter = $counter; \n  } \n  public function getCounter() { \n    return $this->counter; \n  } \n  public function inc() { \n    $this->counter++; \n  } \n  public function __toString() { \n    return sprintf('%s (%d)', $this->name, $this->counter); \n  } \n} \n\n```", "```php\n// MyEventSubscriber.php \nuse Symfony\\Component\\EventDispatcher\\EventDispatcher; \nuse Symfony\\Component\\EventDispatcher\\Event; \nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface; \n\nclass MyEventSubscriber implements EventSubscriberInterface { \n  public static function getSubscribedEvents() { \n    return [ \n      'my_action' => [ \n        ['onMyActionA'], \n        ['onMyActionAgain', 1], \n      ], \n      'other_action' => 'onOtherAction', \n    ]; \n  } \n\n  public function onMyActionA(MyEvent $event) { \n    $event->inc(); \n    echo sprintf('Listener [onMyAction]: %s\\n', $event); \n  } \n\n  public function onMyActionAgain(MyEvent $event) { \n    $event->inc(); \n    echo sprintf('Listener [onMyActionAgain]: %s\\n', $event); \n  } \n\n  public function onOtherAction(Event $event) { } \n} \n\n```", "```php\n$dispatcher = new EventDispatcher(); \n$dispatcher->addSubscriber(new MyEventSubscriber()); \n$dispatcher->dispatch('my_action', new MyEvent('my-event')); \n\n```", "```php\n$ php event_dispatcher_03.php \nListener [onMyActionAgain]: my-event (1)\nListener [onMyAction]: my-event (2)\n\n```", "```php\n// snippet from Symfony\\Component\\EventDispatcher\\EventDispatcher \nforeach ($listeners as $listener) { \n    if ($event->isPropagationStopped()) { \n        break; \n    } \n    call_user_func($listener, $event, $eventName, $this); \n} \n\n```", "```php\n$dispatcher->addListener('my_action', function() { \n    echo \"Listener #1\\n\"; \n}); \n$dispatcher->addListener('my_action', function() { \n    echo \"Listener #2\\n\"; \n}); \n\n```", "```php\n// reactive_dispatcher_03.php \n$subject = new Subject(); \n\n$tail = $subject->filter(function(Event $event) { \n    return !$event->isPropagationStopped(); \n}); \n$tail->subscribe(new CallbackObserver(function(Event $event) { \n    echo \"Listener #1\\n\"; \n    $event->stopPropagation(); \n})); \n\n$tail = $tail->filter(function(Event $event) { \n    return !$event->isPropagationStopped(); \n}); \n$tail->subscribe(new CallbackObserver(function(Event $event) { \n    echo \"Listener #2\\n\"; \n})); \n\n$subject->onNext(new Event()); \n\n```", "```php\n// ReactiveEventDispatcher.php \nclass ReactiveEventDispatcher extends EventDispatcher { \n  /** \n   * @var Subject[]; \n   */ \n  private $subjects = []; \n\n  public function dispatch($eventName, Event $event = null) {} \n\n  public function addListener($eventName, $listener, $prio=0) {} \n\n  public function addObservable($eventName, $create, $prio=0) {} \n\n  public function addSubscriber($subscriber) {} \n\n  private function observerFromListener($listener) {} \n\n  private function getSubject($eventName) {} \n} \n\n```", "```php\n\n// ReactiveEventDispatcher.php \nclass ReactiveEventDispatcher extends EventDispatcher { \n  /** \n   * @param string $eventName \n   * @param callable|ObserverInterface $listener \n   * @param int $prio \n   * @throws Exception \n   */ \n  public function addListener($eventName, $listener, $prio = 0) { \n    $observer = $this->observerFromListener($listener); \n    parent::addListener($eventName, $observer, $prio); \n    unset($this->subjects[$eventName]); \n  } \n\n  /** \n   * @param callable|ObserverInterface $listener \n   * @return ObserverInterface \n   */ \n  private function observerFromListener($listener) { \n    if (is_callable($listener)) { \n      return new CallbackObserver($listener); \n    } elseif ($listener instanceof ObserverInterface) { \n      return $listener; \n    } else { \n      throw new \\Exception(); \n    } \n  } \n\n  /* rest of the class */ \n} \n\n```", "```php\nclass ReactiveEventDispatcher extends EventDispatcher { \n  /** \n   * @param string $evtName \n   * @param callable $create \n   * @param int $prio \n   */ \n  public function addObservable($evtName, $create, $prio=0) { \n    $subject = new Subject(); \n    $create($subject->asObservable()); \n    $this->addListener($evtName, $subject, $prio); \n  } \n\n  /* rest of the class */ \n} \n\n```", "```php\n$dispatcher->addObservable('my_action', function($observable) { \n  $observable \n    ->map(function($value) { return $value; }) \n    ->filter(function($value) { return true; }) \n    ->subscribe(new DebugSubject()); \n}); \n\n```", "```php\n// EventObservableSubscriberInterface.php \nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface; \n\ninterface EventObservableSubscriberInterface extends  \n    EventSubscriberInterface { \n  public static function getSubscribedEventsObservables(); \n} \n\n```", "```php\nuse EventObservableSubscriberInterface as RxEventSubscriber; \nclass ReactiveEventDispatcher extends EventDispatcher { \n  /** \n   * @param EventSubscriberInterface $subscriber The subscriber \n   */ \n  public function addSubscriber(EventSubscriberInterface $sub) { \n    parent::addSubscriber($sub); \n\n    if ($sub instanceof RxEventSubscriber) { \n      $events = $sub->getSubscribedEventsObservables(); \n      foreach ($events as $evt => $params) { \n        if (is_callable($params)) { \n          $this->addObservable($evt, $params); \n        } else { \n          foreach ($params as $listener) { \n            $prio = isset($listener[1]) ? $listener[1] : 0; \n            $this->addObservable($evt, $listener[0], $prio); \n          } \n        } \n      } \n    } \n  } \n\n  /* rest of the class */ \n} \n\n```", "```php\n// MyObservableEventSubscriber.php \nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface; \nuse Rx\\Observable; \nrequire_once __DIR__ . '/MyEventSubscriber.php'; \n\nclass MyObservableEventSubscriber extends MyEventSubscriber  \n    implements EventObservableSubscriberInterface { \n\n  public static function getSubscribedEventsObservables() { \n    return [ \n      'my_action' => [ \n        [ \n          function(Observable $observable) { \n            $observable->subscribe(new DebugSubject()); \n          }, 10 \n        ], [ \n          function(Observable $observable) { \n            $observable \n              ->subscribe(new DebugSubject()); \n          } \n        ] \n      ], \n      'other_action' => function(Observable $observable) { \n        $observable->subscribe(new DebugSubject()); \n      } \n    ] \n  } \n} \n\n```", "```php\nclass ReactiveEventDispatcher extends EventDispatcher { \n  /** \n   * @param string $eventName \n   * @return Subject \n   */ \n  private function getSubject($eventName) { \n    if (isset($this->subjects[$eventName])) { \n      return $this->subjects[$eventName]; \n    } \n\n    $subject = new Subject(); \n    $this->subjects[$eventName] = $subject; \n    $tail = $subject->asObservable(); \n\n    foreach ($this->getListeners($eventName) as $listener) { \n      $newTail = $tail->filter(function (Event $event) { \n        return !$event->isPropagationStopped(); \n      }); \n      $newTail->subscribe($listener); \n      $tail = $newTail; \n    } \n    return $subject; \n  } \n\n  /* rest of the class */ \n} \n\n```", "```php\nclass ReactiveEventDispatcher extends EventDispatcher { \n  public function dispatch($eventName, Event $event = null) { \n    if (null === $event) { \n      $event = new Event(); \n    } \n    $subject = $this->getSubject($eventName); \n    $subject->onNext($event); \n    return $event; \n  } \n\n  /* rest of the class */ \n} \n\n```", "```php\n// reactive_dispatcher_02.php \n$disp = new ReactiveEventDispatcher(); \n$disp->addListener(' my.action ', function(Event $event) { \n  echo \"Listener #1\\n\"; \n}); \n$disp->addListener(' my.action ', new CallbackObserver(function($e) { \n  echo \"Listener #2\\n\"; \n}), 1); \n$disp->dispatch(' my.action ', new Event()); \n\n```", "```php\n$ php reactive_dispatcher_02.php\nListener #2\nListener #1\n\n```", "```php\n// reactive_dispatcher_04.php \n$dispatcher = new ReactiveEventDispatcher(); \n$dispatcher->addSubscriber(new MyEventSubscriber()); \n$dispatcher->dispatch('my_action', new MyEvent()); \n\naddListener() as well.\n```", "```php\n// reactive_dispatcher_05.php \n$dispatcher = new ReactiveEventDispatcher(); \n$dispatcher->addListener('my_action', function(MyEvent $event) { \n  echo \"Listener #1\\n\"; \n}); \n$dispatcher->addObservable('my_action', function($observable) { \n  $observable \n    ->map(function(MyEvent $event) { \n      $event->inc(); \n      return $event; \n    }) \n    ->doOnNext(function(MyEvent $event) { \n      if ($event->getCounter() % 2 === 0) { \n        $event->stopPropagation(); \n      } \n    }) \n    ->subscribe(new DebugSubject()); \n}, 1); \n\nforeach (range(0, 5) as $i) { \n  $dispatcher->dispatch('my_action', new MyEvent('my-event', $i)); \n} \n\n```", "```php\n$ php reactive_dispatcher_05.php \n23:27:08 [] onNext: my-event (1) (MyEvent)\nListener #1\n23:27:08 [] onNext: my-event (2) (MyEvent)\n23:27:08 [] onNext: my-event (3) (MyEvent)\nListener #1\n23:27:08 [] onNext: my-event (4) (MyEvent)\n23:27:08 [] onNext: my-event (5) (MyEvent)\nListener #1\n23:27:08 [] onNext: my-event (6) (MyEvent)\n\n```", "```php\n// reactive_dispatcher_06.php \n$dispatcher = new ReactiveEventDispatcher(); \n$dispatcher->addSubscriber(new MyObservableEventSubscriber()); \n$dispatcher->dispatch('my_action', new MyEvent('my-event')); \n\n```", "```php\n$ php reactive_dispatcher_06.php\n11:14:01 [] onNext: my-event (0) (MyEvent)\nListener [onMyActionAgain]: my-event (1)\nListener [onMyAction]: my-event (2)\n11:14:01 [] onNext: my-event (2) (MyEvent)\n\n```"]