["```php\nphp oil generate scaffold/crud item name:string\n\n```", "```php\nCreating migration: APPPATH/migrations/001_create_items.php\nCreating model: APPPATH/classes/model/item.php\nCreating controller: APPPATH/classes/controller/item.php\nCreating view: APPPATH/views/item/index.php\nCreating view: APPPATH/views/item/view.php\nCreating view: APPPATH/views/item/create.php\nCreating view: APPPATH/views/item/edit.php\nCreating view: APPPATH/views/item/_form.php\nCreating view: APPPATH/views/template.php\n\n```", "```php\nphp oil refine migrate\n\n```", "```php\nphp oil package install recaptcha\n```", "```php\n<div class=\"form-group\">\n<?php\necho Form::label('Please verify that you are human');\n\n// It is how we display the recaptcha form as you can read\n// in the package readme file.\necho ReCaptcha::instance()->get_html();\n?>\n</div>\n```", "```php\nPackage::load('fuel-recaptcha');\n```", "```php\n$val = Model_Item::validate(/* 'create' or 'edit' */);\n\nif ($val->run())\n// And the following if else statement content\n```", "```php\nif (static::is_captcha_correct())\n{\n    // Code to be surrounded\n} else {\n    Session::set_flash(\n        'error',\n        'You have entered an invalid value for the CAPTCHA'\n    );\n}\n```", "```php\npublic static function is_captcha_correct() {\n    // This is how a CAPTCHA is checked according to the\n    // package readme file.\n    return ReCaptcha::instance()\n        ->check_answer(\n            Input::real_ip(),\n            Input::post('recaptcha_challenge_field'),\n            Input::post('recaptcha_response_field')\n    );\n}\n```", "```php\nphp oil generate package captcha\n\n```", "```php\nCreating file: PKGPATH/captcha/classes/captcha.php\nCreating file: PKGPATH/captcha/config/captcha.php\nCreating file: PKGPATH/captcha/bootstrap.php\n\n```", "```php\n<?php\nnamespace Captcha;\n\nclass CaptchaException extends \\FuelException {}\n\nclass Captcha\n{\n    // ...\n    protected static $_defaults = array();\n    // ...\n    protected $config = array();\n    // ...\n    public static function _init()\n    {\n        \\Config::load('captcha', true);\n    }\n    // ...\n    public static function forge($config = array())\n    {\n        $config = \\Arr::merge(\n            static::$_defaults,\n            \\Config::get('captcha', array()),\n            $config\n        );\n        $class = new static($config);\n        return $class;\n    }\n    // ...\n    public function __construct(array $config = array())\n    {\n        $this->config = $config;\n    }\n    // ...\n    public function get_config($key, $default = null)\n    {\n        return \\Arr::get($this->config, $key, $default);\n    }\n    // ...\n    public function set_config($key, $value)\n    {\n        \\Arr::set($this->config, $key, $value);\n        return $this;\n    }\n}\n```", "```php\n<?php\n\nAutoloader::add_core_namespace('Captcha');\n\nAutoloader::add_classes(array(\n  'Captcha\\\\Captcha' => __DIR__ . '/classes/captcha.php',\n  'Captcha\\\\CaptchaException' => __DIR__ . '/classes/captcha.php',\n\n)); \n```", "```php\nphp oil generate model captcha_answer expected_value:int created_at:int --crud\n\n```", "```php\nCreating model: APPPATH/classes/model/captcha/answer.php\nCreating migration: APPPATH/migrations/002_create_captcha_answers.php\n\n```", "```php\nnamespace Captcha;\n```", "```php\nprotected static $_created_at = 'created_at';\n```", "```php\n    'Captcha\\\\Model_Captcha_Answer' => __DIR__ . '/classes/model/captcha/answer.php',\n```", "```php\nphp oil refine migrate --packages=captcha\n\n```", "```php\npublic function check_answer($id, $answer) {\n    return true;\n}\n\npublic function get_html() {\n    return '<div>Will be implemented in the next section</div>';\n}\n```", "```php\n<div class=\"form-group\">\n<?php\necho Form::label('Please verify that you are human');\n\n// Displaying the captcha form\necho Captcha::forge()->get_html();\n?>\n</div>\n```", "```php\nPackage::load('captcha');\n```", "```php\n$val = Model_Item::validate(/* 'create' or 'edit' */);\n\nif ($val->run())\n// And the following if else statement content\n```", "```php\nif (static::is_captcha_correct())\n{\n    // Code to be surrounded\n} else {\n    Session::set_flash(\n        'error',\n        'You have entered an invalid value for the captcha'\n    );\n}\n```", "```php\npublic static function is_captcha_correct() {\n    // Checking the captcha\n    return Captcha::forge()\n        ->check_answer(\n            Input::post('captcha_id'),\n            Input::post('captcha_answer')\n    );\n}\n```", "```php\n/**\n* Returns the CAPTCHA form\n* \n* @return string the CAPTCHA form html code\n*/\npublic function get_html() {\n\n    // Getting configuration\n    $min_number = $this->get_config('min_number');\n    $max_number = $this->get_config('max_number');\n\n    // Generating two random numbers\n    $number_1 = rand($min_number, $max_number);\n    $number_2 = rand($min_number, $max_number);\n\n    // Computing the correct answer\n    $answer = $number_1 + $number_2;\n\n    // Saving the expected answer\n    $captcha_answer = Model_Captcha_Answer::forge();\n    $captcha_answer->expected_value = $answer;\n    $captcha_answer->save();\n\n    return \\View::forge(\n        'captcha',\n        array(\n            'number_1' => $number_1,\n            'number_2' => $number_2,\n            'captcha_answer' => $captcha_answer,\n        )\n    )->render();\n}\n```", "```php\n<div class=\"captcha_area\">\n    <div class=\"captcha_instruction\">\n        <?php echo $number_1; ?> + <?php echo $number_2; ?> ?\n    </div>\n    <div class=\"captcha_fields\">\n        <input type=\"hidden\" name=\"captcha_id\"\n               value=\"<?php echo $captcha_answer->id; ?>\" />\n        <input type=\"text\" name=\"captcha_answer\"\n               value=\"\" class=\"col-md-4 form-control\" />\n    </div>\n</div>\n```", "```php\n<?php\n\nreturn array(\n    'min_number' => 1,\n    'max_number' => 9,\n);\n```", "```php\n/**\n* Check if the captcha is valid\n* \n* @param int $id id of the CAPTCHA answer\n* @param string $answer answer given by the visitor\n* @return boolean is the answer correct ?\n*/\npublic function check_answer($id, $answer) {\n    // Model::find_by_pk finds an instance by its\n    // Primary Key (in our case, id).\n    $captcha_answer = Model_Captcha_Answer::find_by_pk(\n        intval($id)\n    );\n    $correct = $captcha_answer->expected_value == $answer;\n\n    // The answer has been checked, so no need to keep the\n    // expected answer\n    $captcha_answer->delete();\n\n    return $correct;\n}\n```", "```php\n/**\n* Clean the old captchas\n*/\npublic function clean_old_captchas() {\n    \\DB::query('\n        DELETE FROM `captcha_answers`\n        WHERE `created_at` < '.\n       intval(\\Date::forge()->get_timestamp()\n        - $this->get_config('captcha_expiration'))\n        .';')\n        ->execute();\n}\n```", "```php\n$this->clean_old_captchas();\n```", "```php\n    // Captcha are expired 4 hours after generation\n    'captcha_expiration' => 3600 * 4,\n```"]