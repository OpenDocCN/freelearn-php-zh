- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Displaying Content through Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Views** module in Drupal is a visual query builder that enables you to
    build dynamic content displays without writing any code. We will walk through
    how to create a page to list blogs and a companion block to display five of the
    most recent blogs. Then, we will move into creating exposed filters to allow end
    users to control the view results. You will also learn some more advanced topics
    using contextual filters and custom entity reference widget output. Finally, we
    will cover how to use the **Charts** module to output a chart of data with Views.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a blog landing page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a block of recent blogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing filters and sorts to users to control listings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contextual filters for filtering by path parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding related data in a view with relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing an entity reference result view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying charts using Views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a blog landing page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Views module does one thing, and it does it well – listing content. The
    power behind the Views module is the amount of configurable power it gives to
    end users to display content in various forms. This recipe will cover the process
    of how to create a content listing and link it to the main menu. We will use the
    **Article** content type to create a blog landing page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go to **Structure** and then **Views**. This will bring you to the administrative
    overview of all the views created. Click on **Add view** to create a new view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The Views listing overview](img/Figure_3.01_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – The Views listing overview
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to provide the view name of **Blog**, which will serve as
    the administrative and (by default) displayed title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will modify the **View settings** section. We want to display **Content**
    of the **Article** type and leave the **tagged with** field empty. This will force
    the view to only show content of the **Article** content type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the **Create a page** option. The **Page title** and **Path** fields
    will be automatically populated based on the view name and can be modified as
    desired. For now, leave the display and other settings at their default values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Overview of the view creation form](img/Figure_3.02_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Overview of the view creation form
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save and edit** to continue modifying your new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the middle column, under the **Page Settings** section, we will change the
    **Menu item** settings. Click on **No menu** to change the menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Normal menu entry**. Provide a menu link title and an optional description.
    Set **Parent** to **<****Main Navigation>**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The menu settings form for the view](img/Figure_3.03_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – The menu settings form for the view
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Apply** at the bottom of the form in the dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to save your view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your view has been saved, click on **Back to site** from the administrative
    menu. You will now see the link in your Drupal site’s main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step for creating a view involves selecting the type of data you will
    be displaying. This is referred to as the base table, which can be any type of
    entity or data specifically exposed to Views.
  prefs: []
  type: TYPE_NORMAL
- en: Content and nodes
  prefs: []
  type: TYPE_NORMAL
- en: '**Nodes** are labeled as **Content** in Views, and you will find this interchanged
    terminology throughout Drupal.'
  prefs: []
  type: TYPE_NORMAL
- en: When creating a Views page, we add a menu path that can be accessed. It tells
    Drupal to invoke Views to render the page, which will load the view you created
    and render it. Then, the Views module registers that path as a route in Drupal’s
    routing system to a controller provided by itself, which renders the view display.
  prefs: []
  type: TYPE_NORMAL
- en: There are display style and row plugins that format the data to be rendered.
    Our recipe used the unformatted list style to wrap each row in a simple `div`
    element. We could have changed this into a table for a formatted list. The row
    display controls how each row is outputted.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Views module is one of the most versatile and used modules in Drupal core.
    In the following section, we will dive further into some components of Views.
  prefs: []
  type: TYPE_NORMAL
- en: Views and displays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When working with Views, you will see some different terminologies. One of
    the key concepts to be grasped is what a display is. A view can contain multiple
    displays. Each display is of a certain type. The Views module comes with the following
    display types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attachment**: This is a display that becomes attached to another display
    in the same view. These are placed in the Header or Footer sections of another
    view display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block**: This allows you to place the view as a block on your Drupal site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embed**: The display is meant to be embedded programmatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entity Reference**: This allows Views to provide results for an entity reference
    field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feed**: This display returns an XML-based feed that can be attached to another
    display to render a feed icon so that users can subscribe to the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page**: This allows you to display the view from a specific path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each display can have its own configuration, too. However, each display will
    share the same base table (content, files, and more). This allows you to take
    the same data and present it in different ways within the same view.
  prefs: []
  type: TYPE_NORMAL
- en: Format style plugins – style and row
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Within Views, there are two types of style plugins that represent how your
    data is displayed: **style** and **row**:'
  prefs: []
  type: TYPE_NORMAL
- en: The style plugin represents the overall format of the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The row plugin represents the format of each row in the results for the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, the **Responsive Grid** style will output the results in a grid
    using CSS grids and make it responsive for different screen sizes. At the same
    time, the Table style creates a tabular output with field labels used as table
    headings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Row** plugins define how to render the row. The default type of **Content**
    will render the entity using a selected view mode. If you choose **Fields**, you
    can manually select which fields will be included in your view display results
    and the field formatters to use for each field.'
  prefs: []
  type: TYPE_NORMAL
- en: Each **style** plugin has a corresponding Twig template that is used to theme
    the output. Refer to the *Using Twig templates* section in your theme recipe of
    [*Chapter 10*](B18548_10.xhtml#_idTextAnchor319), *Theming and Frontend Development*,
    to learn more about Twig templates.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Embed display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each of the available display types has a method to expose itself through the
    user interface, except for Embed. Often, contributed and custom modules use Views
    to render displays instead of manually writing queries and rendering the output.
    Drupal provides a special display type to simplify this.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to add an **Embed** display to the view created in the recipe, we
    could use the following render array in custom code to output our view programmatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When rendered, the `#type` key tells Drupal that this is a view element. We
    then point it to our new display, `embed_1`. The **Embed** display type has no
    special functionality; it is a simplistic display plugin. The benefit of this
    is that it does not conduct additional operations for the sake of performance.
  prefs: []
  type: TYPE_NORMAL
- en: Using an **Embed** display is beneficial when you want to use a view in a custom
    page, block, or even form. For example, Drupal Commerce uses this pattern for
    its shopping cart block and the order summary at the checkout. A view is used
    to display the order information within a custom block and form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a block of recent blogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last recipe, we created a page using the Views module to list articles
    in the Drupal site to build a blog. A view can contain multiple displays. Each
    display inherits defaults, such as its style and row format, filters, sorts, pager,
    and more. Each display type might have unique settings, such as the page settings
    where the menu link was configured in the previous recipe. In this recipe, we
    will add a block display so that we can list the five most recent articles by
    title anywhere on the site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Structure** and then **Views**. This will bring you to the administrative
    overview of all the views that are created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **Blog** view that was created in the previous recipe and click on
    **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under **Displays**, where it says **Page**, click on the **Add** button and
    select **Block** from the drop-down menu. This will create a new block display,
    which we can configure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The menu for adding a new display](img/Figure_3.04_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – The menu for adding a new display
  prefs: []
  type: TYPE_NORMAL
- en: In the **Format** section, click on **Content** (next to **Show**) to configure
    the row format used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog that opens, we need to make sure we only modify the row format
    for this display. In the **For** drop-down menu, select **This block (override)**
    so that the changes are only for this display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Fields** option from the radio buttons and click on **Apply (this
    display)** to set the row format to use individual fields instead of display modes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The style format form dialog](img/Figure_3.05_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The style format form dialog
  prefs: []
  type: TYPE_NORMAL
- en: A new dialog will appear that allows you to configure options for this row format.
    Use the defaults and click on **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Changing to using the **Fields** row format will automatically add the **Title**
    field, which has been configured to link to the piece of content.
  prefs: []
  type: TYPE_NORMAL
- en: We only want this block to display the five most recent blogs. Under the **Pager**
    section, click on the field next to **Use Pager** to launch the dialog for configuring
    the pager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just like the row format, select **This block (override)** from the **For**
    select list. Then, choose the **Display a specified number of items** option.
    Click on **Apply (****this display)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – The pager selection form dialog](img/Figure_3.06_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – The pager selection form dialog
  prefs: []
  type: TYPE_NORMAL
- en: In the next dialog, which allows you to configure the pager settings, change
    **Items to display** to **5**. Click on **Apply** to finish changing the pager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to save your changes to the view and create the block display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Structure** and **Block layout** to place the block on your Drupal site.
    Click on **Place block** for the **Sidebar** **first** region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Filter the list by typing in your view’s name: **Blog**. Click on **Place block**
    to add your view’s block to the block layout.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We do not want this block to display on our blog landing page. In the `/blog`
    to the **Pages** textbox. Change the radio option to **Hide for the** **listed
    pages**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This prevents the block from being displayed in the `/blog` path, which is our
    view for the list of articles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Save** block to commit your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Blocks**, in Drupal, are a type of plugin. These blocks can be embedded into
    the site layout and can be shown or hidden based on a variety of visibility settings.
    The Views module integrates with the block module to allow view displays to be
    placed as blocks. This empowers Drupal site builders to create dynamic content
    displays that can be used throughout a site.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will explore some of the other ways in which Views interacts with blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Usage with Layout Builder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B18548_02.xhtml#_idTextAnchor059), *Content Building Experience*,
    in the *Using layouts to build landing pages* recipe, we used Layout Builder to
    place blocks that contained field values for content. You could place any kind
    of block using Layout Builder, including block displays in your view. Content
    creators can create landing pages using dynamic content provided by views.
  prefs: []
  type: TYPE_NORMAL
- en: Exposing filters and sorts to users to control listings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Views module supports exposing filters and sorts on a view display for users
    to interact with to adjust the results. This can be done to allow users to filter
    by text or adjust the ordering of the results. In this recipe, we will modify
    the view used to create a blog page. We will add an exposed search filter and
    allow the user to sort articles from newest or oldest.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Structure** and then **Views**. This will bring you to an administrative
    overview of all the views that have been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **Blog** view that was created in the first recipe and click on **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add** in the **Filter criteria** section of the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog that opens, we need to make sure we only modify the row format
    for this display. In the **For** drop-down menu, select **This page (override)**
    so that the changes are only for this page display and not the block display created
    in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Title** in the **Content** category and click on **Add (****this display)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The add filter form dialog](img/Figure_3.07_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – The add filter form dialog
  prefs: []
  type: TYPE_NORMAL
- en: Check the **Expose this filter to visitors, to allow them to change it** checkbox
    to make this an exposed filter. In the exposed filter configuration form, change
    **Operator** from **Is equal to** to **Contains**. This will allow for more flexible
    searching. Click on **Apply (this display)** to add the new filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Sort** criteria section, click on **Content: Authored on (desc)**.
    Select **This page (override)** from the **For** select list.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Expose this sort to visitors, to allow them to change it** checkbox
    to make this an exposed sort.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Apply (this display)** to update the sorting configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to save your changes to the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, when you view `/blog`, you can search the articles and change their sort
    order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.8 – The Blog landing page with exposed filters and sorts](img/Figure_3.08_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – The Blog landing page with exposed filters and sorts
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a filter or sort is exposed, the Views module attaches a form to the view
    display. This form is controlled by the `\Drupal\views\Form\ViewsExposedForm`
    class. This reads query parameter values from the URL and maps them to known exposed
    filters and sorts. It applies the values to the filter and sort handlers, overriding
    their default values so that the query is adjusted.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now explore the extra options that are available when using exposed
    filters and sorts.
  prefs: []
  type: TYPE_NORMAL
- en: Exposed versus non-exposed filters and sorts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Filters allow you to narrow the scope of the data displayed in a view. Filters
    can either be exposed or not; by default, a filter is not exposed. An example
    would be using the **Content: Publishing status** option set to **Yes (published)**
    to ensure that a view always contains published content. This is an item you would
    configure to display content to site visitors. However, if it were for an administrative
    display, you might want to expose that filter. This way, content editors can easily
    view what content has not been published yet or has been unpublished.'
  prefs: []
  type: TYPE_NORMAL
- en: All filter and sort criteria can be marked as exposed.
  prefs: []
  type: TYPE_NORMAL
- en: Filter identifiers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exposed filters work by parsing query parameters in the URL. On our blog page,
    when you search by title and submit the exposed form, the URL will now have a
    query parameter for `title`, `sort_by`, and `sort_order`.
  prefs: []
  type: TYPE_NORMAL
- en: Exposed filters have a **Filter identifier** option that can change the URL
    component. This can be modified when editing your filter or sort.
  prefs: []
  type: TYPE_NORMAL
- en: Exposed forms as blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your view utilizes exposed filters, you have the option to place the exposed
    form in a block. With this option enabled, you could place the block anywhere
    on the page, even pages not for your view.
  prefs: []
  type: TYPE_NORMAL
- en: An example of using an exposed form in a block is for a search result view.
    You can add an exposed filter for keywords that control the search results. With
    the exposed filters in a block, you can easily place them within your site’s header.
    When an exposed filter block is submitted, it will direct users to your view’s
    display. In this recipe, it will allow users to search for articles without having
    to be on the `/``blog` page.
  prefs: []
  type: TYPE_NORMAL
- en: To enable the exposed filters as a block, first, you must expand the **Advanced**
    section on the right-hand side of the Views edit form. Click on the **Exposed
    form in block** option from the **Advanced** section. In the options modal that
    opens, select the **Yes** radio button, and click on **Apply**. You can then place
    the block from the **Block** **layout** form.
  prefs: []
  type: TYPE_NORMAL
- en: Contextual filters for filtering by path parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views can be configured to accept contextual filters, also known as arguments.
    Contextual filters allow you to provide a dynamic or fixed argument that modifies
    the view’s query. Think of it as the root condition in the query. By default,
    the value is expected to be provided from the URL; otherwise, a default operation
    can be chosen if it is not present.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new page called `/user/{user_id}/content` path.
    The value of `{user_id}` will be any user ID that is available in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Structure** and then **Views**. This will bring you to an administrative
    overview of all the views that have been created. Click on **Add view** to create
    a new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **View name** to **My Content**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will modify the **View settings** section. We want to show **Content**
    of the **All** type and leave the **tagged with** field empty. This will allow
    all content types to be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the `user/%user/content`. Click on **Save and edit** to move to the next
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Page settings with path variable](img/Figure_3.09_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Page settings with path variable
  prefs: []
  type: TYPE_NORMAL
- en: Percentages in the path
  prefs: []
  type: TYPE_NORMAL
- en: When there is a percentage sign used in a view page display path, the Views
    module understands this as a placeholder for a value that will be used as a contextual
    filter. For example, given the `/user/1234/content` path, the value of `%user`
    will be `1234`.
  prefs: []
  type: TYPE_NORMAL
- en: Toggle the **Advanced** portion of the form on the right-hand side of the page.
    Click on **Add** in the **Contextual** **filters** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Authored by** from the **Content** category and then click on the **Add
    and configure contextual** **filters** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the default value of **When the filter value is not in the URL** to
    **Display “Access denied”** to prevent all content from being displayed with an
    incorrect route value. Click on **Apply** to add the contextual filter and close
    the dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.10 – The contextual filter settings](img/Figure_3.10_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – The contextual filter settings
  prefs: []
  type: TYPE_NORMAL
- en: Under **Page settings**, the default access is for the **View published content**
    permission. Click on **View published content** to change the permission to **View
    user information**. Click on **Apply** to set the permissions for the page display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will add the page as a menu tab on the user page. Click on **No Menu**
    from the **Menu** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Menu tab** and provide a **Menu link** title, such as **My Content**.
    Click on **Apply** to change the menu settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Configured view overview](img/Figure_3.11_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Configured view overview
  prefs: []
  type: TYPE_NORMAL
- en: Then, click on **Save** to save the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `/user/1/content`, and you will see the content created by the first user.
    It will also be listed as a tab next to **View** and **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Contextual filters are similar to using route parameters in Drupal’s routing
    system, built on top of the routing component from Symfony. Route parameters are
    represented by percentage signs as placeholders in the view’s page display path.
    Views will match up each placeholder with the contextual filters by order of their
    placement. This allows you to have multiple contextual filters, so you just need
    to ensure they are ordered properly.
  prefs: []
  type: TYPE_NORMAL
- en: Using contextual filters on other display types
  prefs: []
  type: TYPE_NORMAL
- en: When using other display types, such as blocks, you will need to use the **Provide
    a default** **value** option.
  prefs: []
  type: TYPE_NORMAL
- en: Most fields that can be used as regular filters are allowed as contextual filters.
    The benefit of this is that they can receive dynamic values without forcing them
    to be exposed filters to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will explore the extra options available when using contextual filters.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing with contextual filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You are still able to preview a view from the edit form. You can simply add
    the contextual filter values to the text form concatenated by a forward slash
    (`/`). In this recipe, you could replicate navigating to `/user/1/content` by
    simply inputting `1` into the preview form and updating the preview.
  prefs: []
  type: TYPE_NORMAL
- en: Providing a default value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is an option to provide a default value when the filter value is not available.
    For instance, a fixed value could be provided as a fallback, or the view can try
    to get the content ID from the current URL or use the currently logged-in user.
    Some of the options are always available, and some will differ based on the data
    being displayed in the view.
  prefs: []
  type: TYPE_NORMAL
- en: When using a view with a block display, the default value option allows you
    to leverage contextual filters without a path being available to provide the parameter
    value. This is especially useful when creating landing pages with Layout Builder.
  prefs: []
  type: TYPE_NORMAL
- en: Altering the page title
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With contextual filters, you can manipulate the current page’s title. You can
    check the **Override title** option in the **When the filter value is present
    in the URL or a default is** **provided** section.
  prefs: []
  type: TYPE_NORMAL
- en: This textbox allows you to enter a new title that will be displayed. The **Replacement
    patterns** section contains tokens that could be used for dynamic title content.
  prefs: []
  type: TYPE_NORMAL
- en: Validation of contextual filter arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Contextual filters can have validation requirements attached. Without specifying
    extra validation, the Views module will take the expected argument and try to
    make it just work. You can add validation to help limit this scope and filter
    out invalid route parameters.
  prefs: []
  type: TYPE_NORMAL
- en: You can enable validation by checking **Specify validation criteria** from the
    **When the filter value is in the URL or a default is provided** section. The
    default is set to **Basic validation**, which allows you to specify how the view
    should react if the data becomes invalid. Based on our recipe, this would be if
    the user for the ID in the route parameter is not found.
  prefs: []
  type: TYPE_NORMAL
- en: The list of **Validator** options is not filtered by the contextual filter item
    you selected. So, some might not be applicable. For our recipe, you might want
    the **User ID** option. This validator would make sure that the user ID exists.
  prefs: []
  type: TYPE_NORMAL
- en: This gives you granular control over how the view operates and executes its
    query when using contextual filters.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple arguments and exclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might configure the contextual filter to allow `AND` or `OR` operations,
    along with using the context filter value for exclusion rather than inclusion.
    These options are under the **More** section when adding or editing a contextual
    filter.
  prefs: []
  type: TYPE_NORMAL
- en: The `AND` or `OR` operations. If the contextual filter argument contains a series
    of values concatenated by plus (`+`) signs, it acts as an `OR` operation. If the
    values are concatenated by commas (`,`) it acts like an `AND` operation.
  prefs: []
  type: TYPE_NORMAL
- en: When the `Exclude` option has been checked, the value will be excluded from
    the results rather than limiting results based on that value. For example, with
    the user ID provided in this recipe, we could exclude content created by that
    user to display content created by all other users.
  prefs: []
  type: TYPE_NORMAL
- en: Adding related data in a view with relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated at the beginning of the chapter, Views is a visual query builder.
    When you first create a view, a base table is specified from which to pull data.
    The Views module automatically knows how to join tables for field data, such as
    body text or custom-attached fields.
  prefs: []
  type: TYPE_NORMAL
- en: When using an entity reference field, you can display the value as the identifier,
    the referenced entity’s label, or the entire rendered entity. However, if you
    add a relationship based on a reference field, you will have access to display
    any of that entity’s available fields.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will update the **Files** view, used for administering files,
    to display the username of the user who uploaded the file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Structure** and then **Views**. This will bring you to the administrative
    overview of all the views that have been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the **Files** view and click on **Edit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.12 – The Files view in the Views listing](img/Figure_3.12_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – The Files view in the Views listing
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Advanced** to expand the section and then click on **Add**, which
    is next to **Relationships**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **User**. Select the **User who uploaded** relationship option and
    click on **Apply (****this display)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will be presented with a configuration form for the relationship. Click
    on **Apply (this display)** to use the defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new field by clicking on **Add** in the **Fields** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for **Name** and select the **Name** field from the **User** category.
    Then, click on **Apply (****all displays)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.13 – The Name field from the User category](img/Figure_3.13_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – The Name field from the User category
  prefs: []
  type: TYPE_NORMAL
- en: This view uses aggregation, which presents a new configuration form when you
    first add a field. Click on **Apply and continue** to use the aggregation defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the default field settings that will provide the label **Name**
    and format as the username and link to the user’s profile. Click on **Apply (****all
    displays)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to finish editing the view and commit your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When viewing the files list in `/admin/content/files`, the username of the user
    that uploaded the file will now be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal stores data in a normalized format. In short, database normalization
    involves the organization of data in specifically related tables. Each entity
    type has its own database table, and all fields have their own database table.
    When you create a view and specify what kind of data will be shown, you are specifying
    a base table in the database that Views will query. Views will automatically associate
    fields that belong to the entity and its relationship to those tables for you.
  prefs: []
  type: TYPE_NORMAL
- en: When an entity has an entity reference field, you can add a relationship to
    the referenced entity type’s table. This is an explicit definition, whereas fields
    are implicit. When the relationship is explicitly defined, all the referenced
    entity type’s fields come into scope. The fields on the referenced entity type
    can then be displayed, filtered, and sorted.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using relationships in Views allows you to create some powerful displays. Now
    we will discuss additional information about relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Relationships provided by entity reference fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Views module uses a series of hooks to retrieve data that it then uses to
    represent ways to interact with the database. One of these is the `hook_field_views_data`
    hook, which processes a field storage configuration entity and registers its data
    with Views. The Views module implements this on behalf of the Drupal core to add
    relationships and reverse relationships, for Entity reference fields.
  prefs: []
  type: TYPE_NORMAL
- en: Since Entity reference fields have set schema information, Views can dynamically
    generate these relationships by understanding the field’s table name, the destination
    entity’s table name, and the destination entity’s identifier column.
  prefs: []
  type: TYPE_NORMAL
- en: Relationships provided through custom code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are times when you will need to define a relation in the database with
    your own custom code. One example of exposing a database table to the Views module
    is in the `hook_views_data` hook to expose information about its database to the
    Views module.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, the `dblog_schema` hook implementation returns a `uid` column
    for the watchdog database table. This is a foreign key to the user table to associate
    the log with a user. That column is then exposed to Views using the following
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This array tells Views that the `watchdog` table has a column named `uid`. It
    is numeric in nature for its display, filtering capabilities, and sorting capabilities.
    The relationship key is an array of information that instructs Views how to use
    this to provide a relationship (`LEFT JOIN`) on the `users` table. The user entity
    uses the `users` table and has a primary key of `uid`.
  prefs: []
  type: TYPE_NORMAL
- en: Providing an entity reference result view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Entity reference fields allow you to reference other entities. Often, this is
    used with content to reference taxonomy terms or related content. By default,
    the entity reference will display all the available entities that can be referenced.
    However, using the Views module and its entity reference view display type, you
    can provide a more controlled result.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create an entity reference view that filters references
    based on content created by the current author. We will then add a field to the
    user account form, allowing users to select their favorite contributed content.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Structure** and then **Views**. This will bring you to the administrative
    overview of all the views that have been created. Click on **Add view** to create
    a new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **View name** to **My Content Reference View** and keep the current **View**
    **settings** configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not choose to create a page or block. Click on **Save and edit** to continue
    working on your view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add** button to create a new display. Select the **Entity Reference**
    option to create the new display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.14 – The Add a display drop-down menu](img/Figure_3.14_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – The Add a display drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: The style format will automatically be set to `Settings` next to **Entity Reference
    List** to modify the style format settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For **Search Fields**, check the **Content: Title** option and then click on
    **Apply**. This is what the field will perform the autocomplete search on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Entity reference style options](img/Figure_3.15_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Entity reference style options
  prefs: []
  type: TYPE_NORMAL
- en: We will then use a contextual filter to limit the results to the currently logged-in
    user. Click on **Add** from **Contextual filters** in the **Advanced** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Authored by** option in the **Content** category and click on **Add
    and configure** **contextual filters**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **When the filter value is not available** setting to **Provide
    a default value**. Select **User ID from the logged in user** from the **Type**
    select list. Click on **Apply** to add the contextual filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.16 – User contextual filter with the default value provided](img/Figure_3.16_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – User contextual filter with the default value provided
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save** to save the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Configuration** in the administrative toolbar, then **Account settings**
    to click on **Manage Fields** to configure fields on user accounts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new **Reference** field that references **Content**. Call it **Highlighted
    Contributions** and allow it to have unlimited values. Click on the **Save field**
    **settings** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Reference type** method to use **View: Filter by an entity reference
    view** and select the view we have just created. Click on the **Save** **settings**
    button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when a user edits their account, they can only reference content that they
    have created as values for this reference field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The entity reference field definition provides selection plugins. The Views
    module provides an entity reference selection plugin. This allows entity reference
    to gather data into a view to receive available results.
  prefs: []
  type: TYPE_NORMAL
- en: The display type for Views requires you to select which fields will be used
    to search against when using the autocomplete widget. If you are not using the
    autocomplete widget and instead use the select list or checkboxes and radio buttons,
    then it will return the view display’s entire results.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying charts using Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the **Charts** module to create graphs using the
    Views module. The Charts module integrates different graphing libraries with the
    Views module. The view created in this recipe will display a graph based on statistics
    generated from the Statistic modules to graph visits to content on the Drupal
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Leverage the Charts module to create a view that renders a chart of data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires having enough data available to put into a graph. We will
    be using data available from the Statistics module, which tracks content page
    views. To generate content and view statistics, we will use the **Devel** (for
    Development) module. This module provides the means of generating sample content
    and populating statistics.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `Devel` to generate content, we must add it with Composer and install
    it with **Drush**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can generate content. Log in to your Drupal site and visit `/admin/config/development/generate/content`.
    Check the checkbox for **Article** to generate articles. Ensure the **Add statistics
    for each node (node_counter table)** checkbox is checked so that statistics are
    generated. Press **Generate** to generate the sample content.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we must add the Charts module to the Drupal site using Composer and
    install it along with its Google Charts submodule with `Drush`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to **Structure** and then **Views**. This will bring you to the administrative
    overview of all the views that have been created. Click on **Add view** to create
    a new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **View name** to **Content Statistics** and keep the default **View** **settings**
    values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the **Create a page** checkbox to create a page. Use the default values
    provided. Under **Page display settings**, change the display format to **Chart**
    of **fields**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Page settings for the chart view](img/Figure_3.17_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Page settings for the chart view
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save and edit** to continue working on your view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Fields** section, click on **Add**. Search for **Total views** under
    the **Content statistics** category. Click on **Add and configure fields** to
    continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create a label** checkbox and set the **Label** to **Total views**.
    Click on **Apply** to finish adding the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to configure the chart to use our **Total views** field as the
    data for the chart. In the **Format** section, click on **Settings** next to **Chart**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Google** from the **Charting library** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep the **Label field** option set to **Content: Title**. In the **Provides
    data** column, check the **totalcount** checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Chart style settings](img/Figure_3.18_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Chart style settings
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Apply** to set the chart settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to save your view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit `/content-statistics` to see the chart of usage statistics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Charts module provides an API to integrate with various charting libraries
    such as Google Charts, Highcharts, and more. Developers can create charts with
    custom code, but one of the greatest features is its integration with Views.
  prefs: []
  type: TYPE_NORMAL
- en: The Charts module allows you to display values as various chart types. It also
    allows you to provide multiple data types to create advanced graphs. Each chart
    library has various settings that can be configured.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Charts module project page on Drupal.org: [https://www.drupal.org/project/charts](https://www.drupal.org/project/charts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Charts module documentation: [https://www.drupal.org/docs/contributed-modules/charts](https://www.drupal.org/docs/contributed-modules/charts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
