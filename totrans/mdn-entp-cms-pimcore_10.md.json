["```php\n    docker-compose up\n    ```", "```php\n    docker-compose exec php bash restore.sh\n    ```", "```php\n\"autoload\": {\n    \"psr-4\": {\n      \"App\\\\\": \"src/\",\n      \"BlogBundle\\\\\": \"bundles/BlogBundle/\",\n      \"Pimcore\\\\Model\\\\DataObject\\\\\": \"var/classes/DataObject\",\n      \"Pimcore\\\\Model\\\\Object\\\\\": \"var/classes/Object\",\n      \"Website\\\\\": \"legacy/website/lib\"\n    }\n  },\n```", "```php\n     docker-compose exec php bash\n    ```", "```php\n    composer require pimcore/bundle-generator\n    ```", "```php\n    <?php\n    use Pimcore\\Bundle\\BundleGeneratorBundle\\\n    PimcoreBundleGeneratorBundle;\n    return [\n        PimcoreBundleGeneratorBundle::class => ['all' =>     true],\n    ];\n    ```", "```php\n     bin/console pimcore:generate:bundle BlogBundle\n    ```", "```php\n    \"psr-4\": {\n          \"App\\\\\": \"src/\",\n          \"BlogBundle\\\\\": \"bundles/BlogBundle/\",\n          …\n        }\n    ```", "```php\nclass MyBrick extends AbstractTemplateAreabrick\n{\n    public function getName()\n    {\n        return 'The Brick Name';\n    }\n    public function getDescription()\n    {\n        return 'The Brick description';\n    }\n     public function getTemplateSuffix()\n     {\n          return static::TEMPLATE_SUFFIX_TWIG;\n     }\n}\n```", "```php\n    templates/views/Areas/{BrickID}/view.html.(php|twig)\n    ```", "```php\n    {BundleLocation}/Resources/views/Areas/iframe/view.html.(php|twig)\n    ```", "```php\n    src/Document/Areabrick/{BrickID}\n    ```", "```php\n    {BundleLocation}/Document/Areabrick/{BrickID}\n    ```", "```php\n    class Header extends AbstractTemplateAreabrick\n    {\n        public function getName()\n        {\n            return 'Header';\n        }\n        public function getDescription()\n        {\n            return 'A component for rendering a Header';\n        }\n        public function getTemplateLocation()\n        {\n            return static::TEMPLATE_LOCATION_BUNDLE;\n        }\n    }\n    ```", "```php\n    {% if editmode %}\n    {{pimcore_select('style', {\n                \"store\" : [\n                    ['h1', 'H1'],\n                    ['h2', 'H2'],\n                    ['h3', 'H3']\n                ],\n                \"defaultValue\" : \"h1\"\n    })}}\n    {{pimcore_input('text')}}\n\n    {% else %}\n    <{{pimcore_select('style')}}>{{pimcore_input('text')}}<{{pimcore_select('style')}}>\n    {% endif %}\n    ```", "```php\n    {{ pimcore_areablock(\"header\")}}\n    ```", "```php\n    class ContactForm extends AbstractTemplateAreabrick\n    {\n        public function getName()\n        {\n            return 'ContactForm';\n        }\n        public function getDescription()\n        {\n            return 'ContactForm';\n        }\n        public function getTemplateLocation()\n        {\n            return static::TEMPLATE_LOCATION_BUNDLE;\n        }\n    }\n    ```", "```php\n    class ContactForm extends AbstractTemplateAreabrick implements EditableDialogBoxInterface\n    {\n      public function   getEditableDialogBoxConfiguration(Document\\Editable   $area, ?Info $info): EditableDialogBoxConfiguration\n        {\n            $config = new EditableDialogBoxConfiguration();\n\n            $config->setItems([\n                'type' => 'tabpanel',\n                'items' => [\n                    [\n                        'type' => 'panel',\n                        'title' => 'Contact Form Settings',\n                        'items' => [\n                            [\n                                'type' => 'input',\n                                'label' => 'Email Recipient',\n                                'name' => 'recipient'\n                            ]\n\n                ]\n                ]\n            ]]);\n            return $config;\n        }\n    }\n    ```", "```php\n    $recipient=$this->getDocumentEditable($info->getDocument(), 'input', 'recipient')->getData();\n    ```", "```php\n    {% if alert is defined %}\n      {{ alert }}\n     {% endif%}\n\n    <form id=\"contact-form\" name=\"contact-form\" method=\"POST\">\n       <input type=\"hidden\" name=\"sendEmail\" value=\"true\"/>\n       <input type=\"text\" id=\"name\" name=\"name\" >\n       <input type=\"text\" id=\"email\" name=\"email\" >\n       <input type=\"text\" id=\"subject\" name=\"subject\" >\n       <textarea type=\"text\" id=\"message\" name=\"message\" >\n       </textarea>\n       <input type=\"submit\" value=\"submit\" />\n    </form>\n    ```", "```php\n    public function action(Info $info)\n    {  \n         $request=$info->getRequest();\n         $id= $info->getEditable()->getName();\n         $info->setParam('id', $id);\n         $sendEmail=$request->get(\"sendEmail\");\n         if($sendEmail==$id)\n         {\n              $name=$request->get(\"name\");\n              $email=$request->get(\"email\");\n              $subject=$request->get(\"subject\");\n              $message=$request->get(\"message\");\n\n              //send an email here\n              $sent= $this->sendEmail($name,$email,\n              $subject,$message, $recipient);\n              if($sent)\n              {\n                   $alert=\"the message is sent!\";\n              }\n              else\n              {\n                   $alert=\"there was an error, try later\";\n              }\n              $info->setParam('name',$name);\n              $info->setParam('email',$email);\n              $info->setParam('subject',$subject);\n              $info->setParam('message',$message);\n              $info->setParam('alert',$alert);\n\n         }\n         $recipient=$this->getDocumentEditable($info->\n         getDocument(), 'input', 'recipient')->getData();\n         $info->setParam('recipient',$recipient);        \n\n    }\n    ```", "```php\n    $info->setParam('recipient',$recipient);  \n    ```", "```php\n    …\n    $id= $info->getEditable()->getName();\n    $sendEmail=$request->get(\"cf-sendEmail\");\n    if($sendEmail==$id)\n    {\n    …\n    ```", "```php\n    <input type=\"hidden\" name=\"cf-sendEmail\" value=\"{{id}}\"/>\n    ```", "```php\n    {{\n         pimcore_renderlet('myGallery', {\n               \"controller\" : \"BlogBundle\\\\Controller\\\\\n               SlideShowController::galleryAction\",\n               \"title\" : \"Drag an asset folder here to get \n               a gallery\",\n               \"height\" : 400\n         })\n    }}\n    ```", "```php\n    <?php\n    namespace BlogBundle\\Controller;\n    use Pimcore\\Controller\\FrontendController;\n    use Symfony\\Component\\HttpFoundation\\Request;\n    use Symfony\\Component\\HttpFoundation\\Response;\n    use Symfony\\Component\\Routing\\Annotation\\Route;\n    use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\n    use Pimcore\\Model\\Asset;\n    class SlideShowController extends FrontendController\n    {\n    }\n    ```", "```php\n    public function galleryAction(Request $request)\n    {\n         $result=array();\n         if ('asset' === $request->get('type')) {\n              $asset = Asset::getById($request->\n              get('id'));\n              if ('folder' === $asset->getType()) {\n                 $result['assets'] = $asset->\n                  getChildren();\n              }\n         }\n         return $result;\n    }\n    ```", "```php\n    <div id=\"carouselExampleControls\" ...>\n      ... omitted bootstrap tags  \n      {% if assets %}\n         {% set active ='active' %}\n         {% for asset in assets %}\n              {% if asset is instanceof('\\\\Pimcore\\\\\n              Model\\\\Asset\\\\Image') %}\n                   <div class=\"carousel-item  {{ active \n                    }}\">\n                      <img srcfor loop that prints images following the bootstrap carousel standard. The image thumbnail is extracted from the original image using the getThumbnail('SlideShow') function. The title and subtitle fields are read from the asset properties using the asset.getProperty method. \n    ```", "```php\n    <?php\n    namespace BlogBundle\\Document\\Areabrick;\n    class Container extends AbstractTemplateAreabrick implements EditableDialogBoxInterface\n    {\n        public function getName()\n        {\n            return 'Container';\n        }\n        public function getDescription()\n        {\n            return 'Container';\n        }\n    }\n    ```", "```php\n    public function getEditableDialogBoxConfiguration(Document\\Editable $area, ?Info $info): EditableDialogBoxConfiguration\n        {\n            $config = new EditableDialogBoxConfiguration();\n            $config->setWidth(600);\n            $config->setItems([\n                'type' => 'tabpanel',\n                'items' => [\n                    [\n                        'type' => 'panel',\n                        'title' => 'Column settings',\n                        'items' => [\n                            [\n                                'type' => 'select',\n                                'label' => 'Layout',\n                                'name' => 'layout',\n                                'config' => [\n                                    'store' => [\n                                        ['one.html.twig',                                     'One column'],\n                                        ['two-50-50.html.                                    twig', 'Two column                                     50-50'],\n                                        ['two-30-70.html.                                    twig', 'Tre column                                     30-70'],\n                                    ]\n                                ]\n                            ]\n\n                ]\n                ]\n            ]]);\n            return $config;\n        }\n    ```", "```php\n    public function action(Info $info)\n    {       \n         $layout=$this->getDocumentEditable($info->\n         getDocument(), 'select', 'layout')->getData(); \n         $info->setParam('layout',\"@Blog/areas/\n         container/templates/$layout\");        \n    }\n    ```", "```php\n    <div class=\"container blog-container\">\n    {% include layout %}\n    {% if editmode %}\n        <div class=\"blog-container-footer\">\n                CONTAINER\n        <div>\n    {% endif %}\n    </div>\n    ```", "```php\n    <div class=\"row\">\n        <div class=\"col-6 blog-col\">\n            {{ pimcore_areablock(\"content_50501\")}}        \n        </div>\n         <div class=\"col-6 blog-col\">\n            {{ pimcore_areablock(\"content_50502\")}}        \n        </div>\n    </div>\n    ```", "```php\n    {# SETTING THE IMAGE URL#}\n    {% set imageurl=null %}\n    {% if not editmode %}\n     {% set image =pimcore_relation(\"image\")%}\n      {% if  image.getElement() is defined and  image.  getElement() != null %}\n        {% set imageurl= image.getElement().    getThumbnail(\"SlideShow\") %}\n      {% endif %} \n    {% endif %}\n    {# PRINT HEADER#}\n    <header class=\"masthead\" style=\"background-image: url({{imageurl}})\">\n        <div class=\"overlay\"></div>\n        <div class=\"container\">\n          <div class=\"row\">\n            <div class=\"col-lg-8 col-md-10 mx-auto\">\n              <div class=\"site-heading\">\n                <h1> {{ pimcore_input('headline', {'width':             540}) }}</h1>\n                <span class=\"subheading\"> {{ pimcore_            input('subheading', {'width': 700}) }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n    {# IMAGE INPUT #}\n    {% if editmode %}\n    {{  pimcore_relation(\"image\",{\n        \"types\": [\"asset\"],\n        \"subtypes\": {\n            \"asset\": [ \"image\"],\n        },\n        \"classes\": [\"person\"]\n    }) }}\n    {% endif %}\n    ```", "```php\n    {% extends 'BlogBundle:Layout:layout.html.twig' %}\n    {% block content %}\n     {% include 'BlogBundle:Layout:header.html.twig' %}\n        {{ pimcore_areablock(\"content\", {'allowed':['container']})}}\n    {% endblock %}\n    ```"]