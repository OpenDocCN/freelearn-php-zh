["```php\n{\n   \"status\": <integer::http_status_code>,\n   \"message\": \"<string::null_or_error_message>\",\n   \"response\": <mixed::boolean_string_or_array_response\"\n}\n```", "```php\n    api/\n       components/\n       config/\n       controllers/\n    ```", "```php\n    <?php\n\n    class ApiModule extends CWebModule\n    {\n       public function init()\n       {\n          // import the module-level models and components\n          $this->setImport(array(\n             'api.components.*',\n          ));\n\n          Yii::app()->log->routes[0]->enabled = false;\n\n          Yii::app()->setComponents(array(\n                'errorHandler' => array(\n                   'errorAction'  => 'api/default/error',\n               )\n            ));\n       }\n    }\n    ```", "```php\n    <?php return array(\n       '/api/<controller:\\w+>/<action:\\w+>' => '/api/<controller>/<action>',\n       '/api/<controller:\\w+>/<action:\\w+>/<id:\\w+>' => '/api/<controller>/<action>'\n    );\n    ```", "```php\n    <?php\n    class ApiInlineAction extends CInlineAction\n    {\n        protected function runWithParamsInternal($object, $method, $params)\n        {\n            $ps=array();\n            foreach($method->getParameters() as $i=>$param)\n            {\n                $name=$param->getName();\n                if(isset($params[$name]))\n                {\n                    if($param->isArray())\n                        $ps[]=is_array($params[$name]) ? $params[$name] : array($params[$name]);\n                    elseif(!is_array($params[$name]))\n                        $ps[]=$params[$name];\n                    else\n                        return false;\n                }\n                elseif($param->isDefaultValueAvailable())\n                    $ps[]=$param->getDefaultValue();\n                else\n                    return false;\n            }\n\n            return $method->invokeArgs($object,$ps);\n        }\n    }\n    ```", "```php\n    <?php class ApiController extends CMSController {}\n    ```", "```php\n    private $_action;\n    public $status = 200;\n    public $message = null;\n    ```", "```php\n    public function runAction($action)\n    {\n       $response = null;\n        $priorAction=$this->_action;\n        $this->_action=$action;\n\n        if($this->beforeAction($action))\n        {\n           $response = $action->runWithParams($this->getActionParams());\n            if($response===false)\n                $this->invalidActionParams($action);\n            else\n                $this->afterAction($action);\n        }\n\n        $this->_action=$priorAction;\n\n        $this->renderOutput($response);\n    }\n    ```", "```php\n    public function renderOutput($response = array(), $status=NULL, $message=NULL) {}\n    ```", "```php\n    header(\"Access-Control-Allow-Origin: *\");\n    header(\"Access-Control-Allow-Headers: x-auth-token, x-auth-email\");\n    header('Access-Control-Allow-Methods: PUT, PATCH, DELETE, POST, GET, OPTIONS');\n    ```", "```php\n    $data = array(\n        'status' => $status != NULL ? $status : $this->status,\n        'message' => $message != NULL ? $message : ($this->message == NULL ? 'Your request was successfully fulfilled' : $this->message),\n        'response' => $response\n    );\n    ```", "```php\n    $format = Yii::app()->request->getParam('format', 'json');\n    if ($format == 'xml')\n    {\n        header (\"Content-Type:text/xml\");\n        echo $this->renderXML($data);\n    }\n    else\n        echo $this->renderJSON($data);\n    Yii::app()->end();\n    ```", "```php\n    private function renderJSON($data)\n    {\n        header('Content-Type: application/json');\n        return CJSON::encode($data);\n    }\n    ```", "```php\n    private function renderXML($array, $level=1)\n    {\n        $xml = '';\n        if ($level==1)\n            $xml .= '<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>'.\"\\n<data>\\n\";\n\n        foreach ($array as $key=>$value)\n        {\n            $key = strtolower($key);\n            if (is_array($value))\n            {\n                $multi_tags = false;\n                foreach($value as $key2=>$value2)\n                {\n                    if (is_array($value2))\n                    {\n                        $xml .= str_repeat(\"\\t\",$level).\"<$key>\\n\";\n                        $xml .= $this->renderXML($value2, $level+1);\n                        $xml .= str_repeat(\"\\t\",$level).\"</$key>\\n\";\n                        $multi_tags = true;\n                    }\n                    else\n                    {\n                        if (trim($value2)!='')\n                        {\n                            if (htmlspecialchars($value2)!=$value2)\n                                $xml .= str_repeat(\"\\t\",$level).\"<$key><![CDATA[$value2]]>\".\"</$key>\\n\";\n                            else\n                                $xml .= str_repeat(\"\\t\",$level).\"<$key>$value2</$key>\\n\";\n                        }\n\n                        $multi_tags = true;\n                    }\n                }\n\n                if (!$multi_tags and count($value)>0)\n                {\n                    $xml .= str_repeat(\"\\t\",$level).\"<$key>\\n\";\n                    $xml .= $this->renderXML($value, $level+1);\n                    $xml .= str_repeat(\"\\t\",$level).\"</$key>\\n\";\n                }\n\n            }\n            else\n            {\n                if (trim($value)!='')\n                {\n                    if (htmlspecialchars($value)!=$value)\n                        $xml .= str_repeat(\"\\t\",$level).\"<$key>\".\"<![CDATA[$value]]></$key>\\n\";\n                    else\n                        $xml .= str_repeat(\"\\t\",$level).\"<$key>$value</$key>\\n\";\n                }\n            }\n        }\n\n        if ($level==1)\n            $xml .= \"</data>\\n\";\n\n        return $xml;\n    }\n    ```", "```php\npublic function createAction($actionID)\n{\n    if($actionID==='')\n        $actionID=$this->defaultAction;\n\n    if (Yii::app()->request->getRequestType() != 'GET' && $actionID != 'error')\n        $actionID .= Yii::app()->request->getRequestType();\n\n    if(method_exists($this,'action'.$actionID) && strcasecmp($actionID,'s')) // we have actions method\n        return new ApiInlineAction($this,$actionID);\n    else\n    {\n        $action=$this->createActionFromMap($this->actions(),$actionID,$actionID);\n        if($action!==null && !method_exists($action,'run'))\n            throw new CException(Yii::t('yii', 'Action class {class} must implement the \"run\" method.', array('{class}'=>get_class($action))));\n        return $action;\n    }\n}\n```", "```php\n    public $xauthtoken = null;\n    public $xauthemail = null;\n    public $user = null;\n    ```", "```php\n    public function filters()\n    {\n        return array(\n            array(\n                'CHttpCacheFilter',\n                'cacheControl'=>'public, no-store, no-cache, must-revalidate',\n            ),\n            'accessControl'\n        );\n    }\n    ```", "```php\n    public function accessRules()\n    {   \n        return array(\n            array('allow',\n                'actions' => array('error')\n            ),\n            array('deny')\n        );\n    }\n    ```", "```php\n    public function filterAccessControl($filterChain) {}\n    ```", "```php\n    $this->xauthtoken = isset($_SERVER['HTTP_X_AUTH_TOKEN']) ? $_SERVER['HTTP_X_AUTH_TOKEN'] : NULL;\n    $this->xauthemail =isset($_SERVER['HTTP_X_AUTH_EMAIL']) ? $_SERVER['HTTP_X_AUTH_EMAIL'] : NULL;\n    ```", "```php\n    if ($this->xauthemail != NULL)\n    {\n        // If a user exists with that email address\n        $user = User::model()->findByAttributes(array('email' => $this->xauthemail));\n        if ($user != NULL)\n        {\n            $q = new CDbCriteria();\n            $q->addCondition('t.key LIKE :key');\n            $q->addCondition('value = :value');\n            $q->addCondition('user_id = :user_id');\n            $q->params = array(\n                ':user_id' => $user->id,\n                ':value' => $this->xauthtoken,\n                ':key' => 'api_key'\n            );\n\n            $meta = UserMetadata::model()->find($q);\n\n            // And they have an active XAuthToken, set $this->user = the User object\n            if ($meta != NULL)\n                $this->user = $user;\n        }\n    }\n    ```", "```php\n    $filter=new ApiAccessControlFilter;\n    $filter->user = $this->user;\n    $filter->setRules($this->accessRules());\n    $filter->filter($filterChain);\n    ```", "```php\n    <?php class ApiAccessControlFilter extends CAccessControlFilter {}\n    ```", "```php\n    public $user;\n    private $_rules;\n    ```", "```php\n    protected function preFilter($filterChain)\n    {\n        $app=Yii::app();\n        $request=$app->getRequest();\n        $user=$this->user;\n        $verb=$request->getRequestType();\n        $ip=$request->getUserHostAddress();\n\n        foreach($this->getRules() as $rule)\n        {\n            if(($allow=$rule->isUserAllowed($user,$filterChain->controller,$filterChain->action,$ip,$verb))>0) // allowed\n                break;\n            elseif($allow<0) // denied\n            {\n                if(isset($rule->deniedCallback))\n                    call_user_func($rule->deniedCallback, $rule);\n                else\n                    $this->accessDenied($user,$this->resolveErrorMessage($rule));\n                return false;\n            }\n        }\n\n        return true;\n    }\n    ```", "```php\n    public function getRules()\n    {\n        return $this->_rules;\n    }\n\n    public function setRules($rules)\n    {\n        foreach($rules as $rule)\n        {\n            if(is_array($rule) && isset($rule[0]))\n            {\n                $r=new ApiAccessRule;\n                $r->allow=$rule[0]==='allow';\n                foreach(array_slice($rule,1) as $name=>$value)\n                {\n                    if($name==='expression' || $name==='roles' || $name==='message' || $name==='deniedCallback')\n                        $r->$name=$value;\n                    else\n                        $r->$name=array_map('strtolower',$value);\n                }\n                $this->_rules[]=$r;\n            }\n        }\n    }\n    ```", "```php\n    protected function accessDenied($user,$message=NULL)\n    {\n        http_response_code(403);\n        Yii::app()->controller->renderOutput(array(), 403, $message);\n    }\n    ```", "```php\n    class ApiAccessRule extends CAccessRule\n    {\n        public function isUserAllowed($user,$controller,$action,$ip,$verb)\n        {\n            if($this->isActionMatched($action)\n                && $this->isIpMatched($ip)\n                && $this->isVerbMatched($verb)\n                && $this->isControllerMatched($controller)\n                && $this->isExpressionMatched($user))\n                return $this->allow ? 1 : -1;\n            else\n                return 0;\n        }\n    }\n    ```", "```php\npublic function beforeAction($action)\n{\n    // If content was sent as application/x-www-form-urlencoded, use it. Otherwise, assume raw JSON was sent and convert it into\n    // the $_POST variable for ease of use\n    if (Yii::app()->request->rawBody != \"\" && empty($_POST))\n    {\n        // IF the rawBody is malformed, throw an HTTP 500 error. Use json_encode so that we can get json_last_error\n        $_POST = json_decode(Yii::app()->request->rawBody);\n        if (json_last_error() != JSON_ERROR_NONE)\n        {\n            header('HTTP/1.1 400 Bad Request');\n            $this->status = 400;\n            $this->message = 'Request payload not properly formed JSON.';\n            return null;\n        }\n\n        $_POST = CJSON::decode(Yii::app()->request->rawBody);\n    }\n\n    return parent::beforeAction($action);\n}\n```", "```php\npublic function actionError()\n{\n    if($error=Yii::app()->errorHandler->error)\n    {\n        $this->status = $error['code'];\n        $this->message = $error['message'];\n    }\n}\n```", "```php\npublic function returnError($status, $message = NULL, $response)\n{\n    header('HTTP/1.1 '. $status);\n    $this->status = $status;\n\n    if ($message === NULL)\n        $this->message = 'Failed to set model attributes.';\n    else\n        $this->message = $message;\n\n    return $response;\n}\n```", "```php\nclass DefaultController extends ApiController\n{\n    public function accessRules()\n    {\n        return array(\n            array('allow',\n                'actions' => array('index', 'error')\n            ),\n            array('deny')\n        );\n    }\n\n    public function actionIndex()\n    {\n        return \"test\";\n    }\n}\n```", "```php\n{\n    \"status\":200,\n    \"message\":\"Your request was successfully fulfilled\",\n    \"response\":\"test\"\n}\n```", "```php\n<data>\n    <status>200</status>\n    <message>Your request was successfully fulfilled</message>\n    <response>test</response>\n</data>\n```", "```php\n{\n   \"email\": \"user@example.com\",\n   \"password\": \"<example_password>\"\n}\n```", "```php\n    <?php class UserController extends ApiController {}\n    ```", "```php\n    public function accessRules()\n    {\n        return array(\n           array('allow',\n              'actions' => array('tokenPost'),\n           ),\n            array('deny')\n        );\n    }\n    ```", "```php\n    public function actionTokenPost() {}\n    ```", "```php\n    $model = new LoginForm;\n    $model->username = Yii::app()->request->getParam('email', NULL);\n    $model->password = Yii::app()->request->getParam('password', NULL);\n    ```", "```php\n    if ($model->login()) {}\n    ```", "```php\n    $user = User::model()->findByAttributes(array('email' => $model->username));\n    ```", "```php\n    $token = UserMetadata::model()->findByAttributes(array(\n        'user_id' => $user->id,\n        'key' => 'api_key'\n    ));\n\n    if ($token == NULL)\n        $token = new UserMetadata;\n\n    $token->attributes = array(\n       'user_id' => $user->id,\n       'key' => 'api_key',\n       'value' => $user->generateActivationKey() // Reuse this method for cryptlib\n    );\n    ```", "```php\n    if ($token->save())\n        return $token->value;\n    ```", "```php\n    return $this->returnError(401, $model->getErrors(), null);\n    ```", "```php\n    {\n        \"email\": \"user1@example.com\",\n        \"password\": \"test\"\n    }\n    ```", "```php\n    {\n        \"status\": 200,\n        \"message\": \"Your request was successfully fulfilled\",\n        \"response\": \"aRwfTYyKlMm2SDaK\"\n    }\n    ```", "```php\n    array('allow',\n       'actions' => array('tokenDelete'),\n       'expression' => '$user!=NULL'\n    )\n    ```", "```php\n    public function actionTokenDelete()\n    {\n       $model = UserMetadata::model()->findByAttributes(array('user_id' => $this->user->id, 'value' => $this->xauthtoken));\n\n       if ($model === NULL)\n          throw new CHttpException(500, 'An unexpected error occured while deleting the token. Please re-generate a new token for subsequent requests.');\n       return $model->delete();\n    }\n    ```", "```php\nX-Auth-Email: user1@example.com\nX-Auth-Token: aRwfTYyKlMm2SDaK\n```", "```php\n{\n    \"status\": 200,\n    \"message\": \"Your request was successfully fulfilled\",\n    \"response\": true\n}\n```", "```php\n{\n    \"status\": 403,\n    \"message\": \"You are not authorized to perform this action.\",\n    \"response\": []\n}\n```", "```php\nprivate function loadModel($id=NULL)\n{\n    if ($id == NULL)\n        throw new CHttpException(400, 'Missing ID');\n\n    $model = User::model()->findByPk($id);\n\n    if ($model == NULL)\n        throw new CHttpException(400, 'User not found');\n\n    return $model;\n}\n```", "```php\n    array('allow',\n        'actions' => array('indexDelete'),\n        'expression' => '$user!=NULL&&$user->role->id==2'\n    )\n    ```", "```php\n    public function actionIndexDelete($id=NULL)\n    {\n        if ($id == $this->user->id)\n             return $this->returnError(401, 'You cannot delete yourself', null);\n\n         return $this->loadModel($id)->delete();\n    }\n    ```", "```php\n    array('allow',\n        'actions' => array('index'),\n        'expression' => '$user!=NULL&&($user->role->id==2||Yii::app()->request->getParam(\"id\")==$user->id)'\n    )\n    ```", "```php\n    public function actionIndex($id=NULL) {}\n    ```", "```php\n    array('allow',\n        'actions' => array('index', 'indexPost'),\n        'expression' => '$user!=NULL&&($user->role->id==2||Yii::app()->request->getParam(\"id\")==$user->id)'\n    if ($id !== NULL)\n    {\n        if ($this->user->role->id != 2 && $this->user->id != $id)\n           throw new CHttpException(403, 'You do not have access to this resource');\n\n        return $this->loadModel($id)->getApiAttributes(array('password'), array('role', 'metadata'));\n    }\n    ```", "```php\n    if ($this->user->role->id != 2)\n        throw new CHttpException(403, 'You do not have access to this resource');\n    ```", "```php\n    $model = new User('search');\n    $model->unsetAttributes();  // clear any default values\n    if(isset($_GET['User']))\n        $model->attributes = $_GET['User'];\n    ```", "```php\n    $dataProvider = $model->search();\n    $dataProvider->pagination = array(\n        'pageVar' => 'page'\n    );\n    ```", "```php\n    if ($dataProvider->totalItemCount == 0 || ($dataProvider->totalItemCount / ($dataProvider->itemCount * Yii::app()->request->getParam('page', 1))) < 1)\n        throw new CHttpException(404, 'No results found');\n    ```", "```php\n    $response = array();\n\n    foreach ($dataProvider->getData() as $user)\n        $response[] = $user->getAPIAttributes(array('password'), array('role', 'metadata'));\n    ```", "```php\n    return $response;\n    ```", "```php\n    array('allow',\n        'actions' => array('index', 'indexPost'),\n        'expression' => '$user!=NULL&&($user->role->id==2||Yii::app()->request->getParam(\"id\")==$user->id)'\n    )\n    ```", "```php\n    public function actionIndexPost($id=NULL)\n    {\n        if ($id == NULL)\n            return $this->createUser();\n        else\n            return $this->updateUser($id);\n    }\n    ```", "```php\n    private function createUser()\n    {\n        if ($this->user->role->id != 2)\n            throw new CHttpException(403, 'You do not have access to this resource');\n\n        $model = new User;\n        $model->attributes = $_POST;\n\n        if ($model->save())\n            return User::model()->findByPk($model->id)->getApiAttributes(array('password'), array('role', 'metadata'));\n        else\n            return $this->returnError(400, $model->getErrors(), null);\n    }\n    ```", "```php\n    private function updateUser($id=NULL)\n    {\n        if ($this->user->role->id != 2 && $this->user->id != $id)\n            throw new CHttpException(403, 'You do not have permission to modify this user');\n\n        $model = $this->loadModel($id);\n\n        $model->attributes = $_POST;\n\n        if ($model->save())\n             return User::model()->findByPk($model->id)->getApiAttributes(array('password'), array('role', 'metadata'));\n        else\n            return $this->returnError(400, $model->getErrors(), null);\n    }\n    ```", "```php\npublic function actionRegisterPost()\n{\n    $form = new RegistrationForm;\n    $form->attributes = $_POST;\n\n    if ($form->save())\n        return true;\n    else\n        return $this->returnError(400, $form->getErrors(), null);\n}\n```"]