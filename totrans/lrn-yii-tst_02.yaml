- en: Chapter 2. Tooling up for Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 为测试做准备
- en: In this chapter, we're going to have an overview of Yii 2, what has changed
    since the last version, with which you might have become comfortable its new directory
    structure and organization, as well as its new features and niceties.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述 Yii 2，自上一版本以来有哪些变化，以及你可能已经熟悉的新目录结构和组织方式，以及其新特性和优点。
- en: We cannot introduce Yii 2 without looking at **Composer**, a new way to organize
    and extend your projects in PHP.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能不介绍 **Composer**，这是在 PHP 中组织和扩展项目的新方法。
- en: 'Once we have had a look at all the basic tools we''re going to use, let''s
    review our plan and consider what we will be working on in the rest of this book:
    user authentication REST interface and user login from a modal window.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们查看完所有我们将要使用的基本工具，让我们回顾我们的计划，并考虑在这本书的其余部分我们将要做什么：用户身份验证 REST 接口和从模态窗口进行用户登录。
- en: In order to start working on our features, we need to step aside and review
    our plan from a project management and quality assurance point of view, that is,
    introduce the master test plan. In other words, we need to consider what we are
    going to test and how much before undertaking the actual implementation work.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的功能开发，我们需要暂时退一步，从项目管理和质量保证的角度回顾我们的计划，也就是说，引入主测试计划。换句话说，我们需要考虑在开始实际实施工作之前，我们将要测试什么以及测试多少。
- en: 'We will be working through the following steps:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤进行操作：
- en: Downloading and installing Yii 2
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装 Yii 2
- en: Finding your way around Yii 2
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Yii 2 中找到你的位置
- en: Defining our working strategy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义我们的工作策略
- en: Introducing testing for our purposes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的目的引入测试
- en: Downloading and installing Yii 2
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装 Yii 2
- en: If you've worked with Yii in the past, be prepared. The new version of Yii 2
    can be considered as a brand new framework, modern and robust.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前使用过 Yii，请做好准备。Yii 2 的新版本可以被视为一个全新的框架，现代且稳健。
- en: Yii 2 takes a long-awaited step forward in the right direction. It is the result
    of several years of work, done collaboratively on the Internet, mostly on GitHub
    ([https://github.com/yiisoft/yii2](https://github.com/yiisoft/yii2)), by developers
    from different parts of the world.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 2 在正确的方向上迈出了期待已久的一大步。这是多年来共同努力的结果，主要在互联网上协作完成，主要在 GitHub ([https://github.com/yiisoft/yii2](https://github.com/yiisoft/yii2))
    上，由来自世界各地的开发者完成。
- en: 'As a user of Yii, you can collaborate too, by simply filing bug reports, feature
    requests at [https://github.com/yiisoft/yii2/issues](https://github.com/yiisoft/yii2/issues),
    polishing off the documentation and translations, and creating new extensions
    and features for review and inclusion on the project. There are also many other
    non-officially supported subprojects that can benefit from your support: some
    already there for you to use, and some that you may have written yourself.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Yii 的用户，你也可以通过简单地提交错误报告、功能请求在 [https://github.com/yiisoft/yii2/issues](https://github.com/yiisoft/yii2/issues)，完善文档和翻译，以及创建新的扩展和功能以供审查和包含到项目中来进行协作。还有许多其他非官方支持的项目可以从你的支持中受益：一些已经为你准备好了使用，还有一些可能是你自己编写的。
- en: Environment and workflow
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境和工作流程
- en: As a developer, you will have your own environment with which you need to feel
    confident enough, and which can actually help you writing the code without many
    worries. If you do feel that there's a gap between writing the code and seeing
    the actual result, then there's something you need to fix.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，你将拥有自己的环境，你需要对其有足够的信心，并且实际上它可以帮助你在编写代码时无需过多担忧。如果你确实觉得在编写代码和看到实际结果之间存在差距，那么你需要修复某些问题。
- en: It's quite important for the purpose of this book to outline my optimal environment
    that I will use throughout the upcoming chapters and code samples that you will
    find.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书的目的来说，概述我将贯穿整个后续章节和代码示例中的最佳环境非常重要。
- en: I will, of course, note when the environment might make a difference, but be
    wary that, if your environment is different, you may need to check the developer's
    documentation or reach out to anyone who might know the answer, in case something
    is not working.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我会注意环境可能产生的影响，但请注意，如果你的环境不同，你可能需要检查开发者的文档或联系可能知道答案的任何人，以防某些事情不起作用。
- en: 'My personal development environment is composed of the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我的个人开发环境由以下组成：
- en: 'A robust **Integrated Development Environment** (**IDE**), such as IntelliJ
    PHPStorm, rather than a simple code editor (for example, VIM): You get some additional
    benefits from it, for example, an integrated debugger, a syntax checker, a code
    hinting system, and so forth.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个强大的 **集成开发环境** （**IDE**），例如 IntelliJ PHPStorm，而不是一个简单的代码编辑器（例如，VIM）：您可以从它那里获得一些额外的优势，例如，集成的调试器、语法检查器、代码提示系统等等。
- en: 'A modern version control system (for example, GIT): Commit always and often.
    It''s the only way for you to understand the history and control the changes in
    your project in a sensible way. Head over to [http://git-scm.com/doc](http://git-scm.com/doc)
    if you need more information and learn by visually experimenting with it at [http://pcottle.github.io/learnGitBranching/](http://pcottle.github.io/learnGitBranching/).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个现代的版本控制系统（例如，GIT）：经常提交。这是您理解项目历史和以合理方式控制项目变更的唯一方法。如果您需要更多信息，请访问 [http://git-scm.com/doc](http://git-scm.com/doc)，并在
    [http://pcottle.github.io/learnGitBranching/](http://pcottle.github.io/learnGitBranching/)
    通过视觉实验来学习它。
- en: '**Linux Apache MariaDB PHP** (**LAMP**) box packaged as a virtual machine:
    I''ve passed through the stage of having my own machine acting as my LAMP box,
    but this has proved to be too unreliable for many reasons. Mostly because after
    a while, you will end up confusing experimental plugins and tools that are not
    meant to be used on certain projects, potentially messing up your work.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux Apache MariaDB PHP** （**LAMP**）虚拟机：我已经经历过将我的机器作为 LAMP 机器的阶段，但这已经证明由于许多原因而过于不可靠。主要原因是过一段时间后，您可能会混淆那些本不应该用于某些项目的实验性插件和工具，这可能会弄乱您的工作。'
- en: A development or testing environment is usually quite simple to set up as it
    won't require an extensive configuration, as it would do in a critical or production
    environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 开发或测试环境通常设置起来很简单，因为它不会像在关键或生产环境中那样需要广泛的配置。
- en: 'One of the reasons in favor of having such an environment setup, in particular
    with reference to the LAMP box, is the ability to configure it as you wish based
    on the project you''re working on, and in particular being able to replicate the
    live/production environment as close as possible. This has a clear advantage when
    it comes to the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有这样一个环境设置的理由之一，特别是针对 LAMP 机器，就是您可以根据正在工作的项目来配置它，特别是能够尽可能接近地复现实时/生产环境。这在以下方面具有明显的优势：
- en: Working within a team with more than one developer
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个拥有多个开发者的团队中工作
- en: Replicating bugs occurring on any environment (for example, test, stage, or
    live)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何环境中（例如，测试、预发布或生产）复现出现的错误
- en: Vagrant is probably the tool you're looking for if you want to start easy (see
    [http://www.vagrantup.com/](http://www.vagrantup.com/)), and if it convinces you,
    it might be worth giving the book, *Creating Development Environments with Vagrant*,
    *Michael Peacock*, *Packt Publishing*, a shot ([http://www.packtpub.com/creating-development-environments-with-vagrant/book](http://www.packtpub.com/creating-development-environments-with-vagrant/book)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想轻松开始，Vagrant 可能是您需要的工具（见 [http://www.vagrantup.com/](http://www.vagrantup.com/)），如果您被说服了，那么尝试一下由
    Michael Peacock 编写、Packt Publishing 出版的书籍《Creating Development Environments with
    Vagrant》可能是个不错的选择（[http://www.packtpub.com/creating-development-environments-with-vagrant/book](http://www.packtpub.com/creating-development-environments-with-vagrant/book)）。
- en: 'PHP does not need major adjustments, and I believe a default PHP installation
    will suffice to get you started as this is the only constraint for running Yii
    2\. Be sure to have a version equal to or above 5.4, and have a CLI PHP available
    on the command line, by issuing the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 不需要做重大调整，我相信默认的 PHP 安装就足够您开始使用，因为这是运行 Yii 2 的唯一约束。请确保您有一个等于或高于 5.4 的版本，并在命令行上有一个可用的
    CLI PHP，通过以下命令执行：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding output is from a Vagrant machine running Ubuntu 12.04 with PHP
    5.5 installed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出来自一个运行着 Ubuntu 12.04 且已安装 PHP 5.5 的 Vagrant 机器。
- en: The dollar sign (`$`) means the command can be run by a user and you won't need
    administrative permissions to run it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 美元符号 (`$`) 表示该命令可以被用户运行，您不需要管理员权限来运行它。
- en: If you get a `command not found` error, be sure to refer to your distribution/OS
    vendor for support on how to install it. Most of the distributions provide it
    by default, while others require additional configuration parameters or packages.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到“找不到命令”的错误，请务必参考您的发行版/操作系统供应商以获取有关如何安装它的支持。大多数发行版默认提供它，而其他则需要额外的配置参数或软件包。
- en: Introducing Composer
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Composer
- en: As you might well know, Yii 1 was (initially) shipped as a standalone library
    that needed installation on the target environment, and from there you could use
    its CLI interface to create your web app. After that, the library would be sitting
    somewhere in your filesystem to be directly called by the web app upon loading
    it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，Yii 1最初是以独立库的形式发布的，需要在目标环境中安装，然后你可以使用它的CLI界面来创建你的Web应用。之后，库将位于你的文件系统中，以便Web应用在加载时直接调用。
- en: When Yii started, this was common practice; there wasn't a way to keep the code
    self-contained and you could easily get into several problems whenever you needed
    to ship the code to shared hosting environments (I'm looking at you Plesk/OpenBaseDir
    restriction).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Yii 开始时，这是一种常见的做法；当时没有一种方法可以保持代码自包含，而且每次你需要将代码发送到共享主机环境时（我指的是 Plesk/OpenBaseDir
    限制），你很容易遇到几个问题。
- en: Secondly, system-wide packages and dependencies were often restricting the developers
    to embrace new features and work around existing bugs, without even counting that
    these were (too) often overlooked. If you've been working on the web with PHP
    for quite a while, I'm pretty sure you've experienced the sense of lagging behind
    other big frameworks on the development scene (and not just in PHP-land).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，系统范围内的包和依赖通常限制了开发者采用新特性并解决现有问题，甚至不考虑这些（过于）经常被忽视。如果你用PHP做Web开发有一段时间了，我相当肯定你体验过落后于其他大型框架在开发场景的感觉（不仅仅是在PHP领域）。
- en: Composer ([http://getcomposer.org](http://getcomposer.org)) solves the problem
    under many aspects, and thanks to the efforts of Nils Adermann, Jordi Boggiano,
    and many community contributions, it was first released in 2012.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Composer ([http://getcomposer.org](http://getcomposer.org))从许多方面解决了问题，多亏了Nils
    Adermann、Jordi Boggiano以及许多社区贡献者的努力，它于2012年首次发布。
- en: Composer takes inspiration from Node.js' **npm** and Ruby's **bundler**. It
    provides a way to define and install dependencies (that is, libraries), and install
    web applications that are available from Packagist ([https://packagist.org/](https://packagist.org/))
    on a per-project basis.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Composer从Node.js的**npm**和Ruby的**bundler**中汲取灵感。它提供了一种定义和安装依赖项（即库）的方法，并按项目安装从Packagist
    ([https://packagist.org/](https://packagist.org/))提供的Web应用。
- en: Installing and using it
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和使用它
- en: 'Let''s start by following the installation guide proposed on the Composer website
    ([https://getcomposer.org/doc/00-intro.md#installation-nix](https://getcomposer.org/doc/00-intro.md#installation-nix)).
    Consider the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从遵循 Composer 网站上提出的安装指南开始（[https://getcomposer.org/doc/00-intro.md#installation-nix](https://getcomposer.org/doc/00-intro.md#installation-nix)）。考虑以下命令：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding command we are using `curl` to download the installer and `php`
    to parse it and output an executable PHP file called `composer.phar`. Be mindful
    that the installation under a different OS (in case you don't have a Linux box
    to play with) varies, for example, under OS X, Composer is part of the `homebrew-php`
    project at [https://github.com/Homebrew/homebrew-php](https://github.com/Homebrew/homebrew-php).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们使用`curl`下载安装程序，使用`php`解析它并输出一个名为`composer.phar`的可执行PHP文件。请注意，在不同的操作系统下安装可能会有所不同（如果你没有Linux环境可以玩），例如，在OS
    X下，Composer是`homebrew-php`项目的一部分，可以在[https://github.com/Homebrew/homebrew-php](https://github.com/Homebrew/homebrew-php)找到。
- en: 'At this point, you can simply call Composer directly using a relative or absolute
    path, as shown in the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可以直接使用相对或绝对路径调用Composer，如下所示：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Or move it into a more appropriate position for easier invocation, as you will
    see next.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者将其移动到更合适的位置以便更容易调用，正如你接下来将要看到的。
- en: 'If you can run sudo or log in as root, move it into a system wide `bin` folder,
    as shown in the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以运行sudo或以root身份登录，将其移动到系统范围的`bin`文件夹，如下所示：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If the preceding option does not apply, you can install it in user-space, for
    example, `~/bin/`, and then add the path to your `PATH` environment variable,
    as shown in the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的选项不适用，你可以在用户空间中安装它，例如，`~/bin/`，然后按照以下示例将路径添加到你的`PATH`环境变量中：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The last command is adding the path to your terminal environment, so it can
    be invoked from anywhere you are in the filesystem. This specific command would
    need to be issued every time you open a terminal.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令是将路径添加到你的终端环境，这样你就可以在任何文件系统位置调用它。每次你打开终端时，都需要发出这个特定的命令。
- en: 'Otherwise, you can add it permanently, as shown in the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，你可以永久添加它，如下所示：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By adding the `export` statement to your `.bashrc` (`>> ~/.bashrc` appends the
    output of `echo` to the end of the `.bashrc` file), you are simply making the
    directory searchable automatically every time you log in, given you are using
    BASH as shell interpreter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`export`语句添加到你的`.bashrc`文件中（`>> ~/.bashrc`将`echo`的输出追加到`.bashrc`文件的末尾），你只是在每次登录时自动使目录可搜索，前提是你使用的是BASH作为shell解释器。
- en: 'If you''re unsure which shell you''re on, you can check using the following
    command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定你使用的是哪个shell，你可以使用以下命令来检查：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, while this will work on most shells and it''s quite easy to remember,
    it won''t work if your shell is CSH, in which case, use the more complex but also
    more portable `ps` invocation, as shown in the following: command'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管这在大多数shell上都能正常工作，而且很容易记住，但如果你的shell是CSH，则不会工作，在这种情况下，使用更复杂但更便携的`ps`调用，如下所示：命令
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have installed Composer, you can simply invoke it using the following
    command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了Composer，你可以简单地使用以下命令来调用它：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The composer.json and composer.lock files
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: composer.json和composer.lock文件
- en: 'Composer works by reading the `composer.json` file found in the root of your
    project, which will contain all the requirements and dependencies:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Composer通过读取位于项目根目录下的`composer.json`文件来工作，该文件将包含所有需求和依赖项：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding snippet is quite clear: it''s defining a dependency of our project
    on Twig ([http://twig.sensiolabs.org/](http://twig.sensiolabs.org/)). This is
    a template engine with a clear and compact syntax. It''s also defining a specific
    dependency on any version of Twig starting with 1.16.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述片段非常清晰：它定义了我们的项目对Twig的依赖（[http://twig.sensiolabs.org/](http://twig.sensiolabs.org/)）。这是一个具有清晰和紧凑语法的模板引擎。它还定义了对从1.16版本开始的任何版本的Twig的特定依赖。
- en: 'Modifying the `composer.json` file by hand can be prone to human errors, and
    sometimes it might be necessary, as we will see later on, to add the packages
    to your `require` or `require-dev` section via the command line using the following
    command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 手动修改`composer.json`文件可能会出现人为错误，有时，正如我们稍后将看到的，可能需要通过命令行使用以下命令将软件包添加到你的`require`或`require-dev`部分：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This way the `composer.json` file will be automatically created if it does
    not already exist, and the package with its dependencies will be installed for
    you. Alternatively, if you''ve created the file yourself or if you''ve received
    the file as part of a project, you can invoke the `install` command as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果`composer.json`文件不存在，它将自动创建，并且将为你安装带有其依赖项的软件包。或者，如果你自己创建了该文件，或者作为项目的一部分接收了该文件，你可以按照以下方式调用`install`命令：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The normal behavior of the preceding command is to fetch the required packages
    as archives (called dist in composer jargon) for stable sources, or via repository
    if either the dist is not available or if the package is in some stage that is
    not stable (for example, beta or dev).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的正常行为是从稳定源获取所需的软件包作为存档（在Composer术语中称为dist），或者如果dist不可用或软件包处于某些非稳定阶段（例如beta或dev），则通过仓库获取。
- en: You can change this behavior by using the `--prefer-dist` option to force searching
    for the dist even for development packages, or `--prefer-source` to force the
    checkout from repository rather than dist for stable packages.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`--prefer-dist`选项强制搜索dist，即使对于开发软件包也是如此，或者使用`--prefer-source`强制从仓库而不是dist检查稳定软件包来更改此行为。
- en: 'As you will see by listing the content of the directory, Composer will install
    all libraries into your project folder under the `/vendor` directory and create
    a `composer.lock` file in the root folder that will hold a snapshot of the current
    state of the installation, locking the installed libraries to the specific version
    defined in the lock file, as shown in the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如你通过列出目录内容所看到的，Composer会将所有库安装到你的项目文件夹中的`/vendor`目录下，并在根目录下创建一个`composer.lock`文件，该文件将保存安装的当前状态快照，将安装的库锁定到锁文件中定义的特定版本，如下所示：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When sharing your code, you need to commit the `composer.lock` file, so everyone
    in your team and any other environment you will deploy to will run exactly the
    same version of the dependencies you have, mitigating the risk of bugs affecting
    only some environments. Composer will look for the lock file first before deciding
    to use the JSON file to download a more up-to-date version based on the definitions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你分享代码时，你需要提交`composer.lock`文件，这样你团队中的每个人以及你将要部署的任何其他环境都将运行你拥有的依赖的确切版本，从而降低仅影响某些环境的bug风险。Composer会首先查找锁文件，然后再决定使用JSON文件下载基于定义的更新版本。
- en: 'On the other hand, it is not recommended to commit the `/vendor` directory
    to your VCS as it can cause several problems, such as the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，不建议将`/vendor`目录提交到你的版本控制系统中，因为它可能会引起几个问题，如下所示：
- en: Difficulty in handling revisions and updates
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理修订和更新的困难
- en: Increased size of the repository without any benefit
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库规模增加但没有带来任何好处
- en: In Git, it could cause problems if you're adding packages checked out via Git,
    as it will show them as submodules, while they're not.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Git中，如果你正在添加通过Git签出的包，可能会引起问题，因为它将它们显示为子模块，而实际上它们不是。
- en: This heavily depends on your deployment policy, but, in general, it will be
    better to have your environments and team mates run the `composer install` command
    on their own.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这在很大程度上取决于你的部署策略，但一般来说，让你的环境和团队成员各自运行`composer install`命令会更好。
- en: 'If you ever need to update the dependencies, you can simply issue the following
    command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更新依赖项，你可以简单地发出以下命令：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or to update a specific package, the command will be the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 或者要更新特定的包，命令将是以下：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `[...]` means you can add as many packages to be updated with a single command.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`[...]` 表示你可以使用单个命令添加多个要更新的包。'
- en: Packages and Packagist
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包和Packagist
- en: By creating the `composer.json` file, you are also defining your project as
    a package. This is a package that depends on other packages. The only difference
    is that your project is without a name, yet.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建`composer.json`文件，你也在定义你的项目作为一个包。这是一个依赖于其他包的包。唯一的区别是，你的项目还没有名字。
- en: 'Composer can help you here in defining your project/package in a more consistent
    and clear way. Consider the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Composer可以帮助你以更一致和清晰的方式定义你的项目/包。考虑以下命令：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will start by asking you for some basic information regarding your project,
    including the requirements that you want for your project, and then create (or
    overwrite) the `composer.json` file, as shown in the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将首先询问你一些关于你的项目的基本信息，包括你希望为你的项目设置的要求，然后创建（或覆盖）`composer.json`文件，如下所示：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Among these, the one worth noticing is the `Minimum Stability` option: it provides
    a way to control the stability of the packages. By omitting it, it defaults to
    stable. This option combined with `"prefer-stable": true` (or `false` if you want
    to have the dev versions of your dependencies) will give you enough power to decide
    the policy of stability of the dependencies where this is not explicitly defined.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '在这些中，值得注意的一个是`Minimum Stability`选项：它提供了一种控制包稳定性的方法。通过省略它，它默认为稳定。此选项与`"prefer-stable":
    true`（或如果你想有依赖项的开发版本，则为`false`）结合使用，将为你提供足够的权力来决定依赖项的稳定性策略，其中没有明确定义。'
- en: 'It will then move into setting the dependencies interactively, as shown in
    the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将进入设置依赖项的交互式过程，如下所示：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The search can be anything, and it works the same way as you would by searching
    on the website ([https://packagist.org](https://packagist.org)). If you want to
    have a more clear idea of what you''re going to install, you probably want to
    have a look at the website: you need to be aware of the dependencies and browse
    the code to check it does what it says on the tin.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索可以是任何内容，它的工作方式与你通过网站搜索相同（[https://packagist.org](https://packagist.org)）。如果你想对你将要安装的内容有一个更清晰的认识，你可能想看看网站：你需要了解依赖关系并浏览代码以检查它是否如它所说的那样工作。
- en: 'Knowing how to use the version constraints can be quite important in any project
    with just a few dependencies. According to [https://getcomposer.org/doc/01-basic-usage.md#package-versions](https://getcomposer.org/doc/01-basic-usage.md#package-versions),
    the following are the possible keywords you need to be aware of:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 知道如何使用版本约束在只有少量依赖的项目中可能非常重要。根据[https://getcomposer.org/doc/01-basic-usage.md#package-versions](https://getcomposer.org/doc/01-basic-usage.md#package-versions)，以下是你需要了解的可能的关键词：
- en: '**Exact version**: For example, `1.0.23`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精确版本**：例如，`1.0.23`'
- en: '**Range**: For example, `>=1.2` or `>=1.0,<2.0` or use the pipe as a logical
    OR as `>=1.0,<2.0 | >=3.0`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**：例如，`>=1.2` 或 `>=1.0,<2.0` 或使用管道作为逻辑或，如`>=1.0,<2.0 | >=3.0`'
- en: '**Wildcard**: For example, `1.2.*`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通配符**：例如，`1.2.*`'
- en: '**Tilde operator**: Here, `~1.2` is the same as `>=1.2,<2.0`; `~1.2.3` is the
    same as `>=1.2.3,<1.3` (semantically: `[[[[...]c.]b.]a.]x`, where `x` is the only
    variable)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**波浪号运算符**：在这里，`~1.2` 等同于 `>=1.2,<2.0`；`~1.2.3` 等同于 `>=1.2.3,<1.3`（语义上：`[[[[...]c.]b.]a.]x`，其中
    `x` 是唯一的变量）'
- en: Composer provides further granularity when selecting specific packages, specifically
    you can filter by stability by adding `@dev` (or `alpha`, `beta`, `RC` or `stable`).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 在选择特定包时提供了更细粒度的控制，特别是你可以通过添加 `@dev`（或 `alpha`、`beta`、`RC` 或 `stable`）来按稳定性进行筛选。
- en: Sometimes, you are forced to use an unstable version, either because of the
    lack of a stable version or because the stable version ships with a bug that has
    been fixed in the master (dev)!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你被迫使用一个不稳定版本，要么是因为没有稳定版本，要么是因为稳定版本中包含了一个在 master（dev）分支中已修复的 bug！
- en: 'Together with `require`, which defines the list of fundamental packages that
    are a direct dependency, `require-dev` defines instead the secondary packages
    used for development, such as libraries for running tests, performing debugging,
    and so on. However, these are not fundamental for the application to work, as
    shown in the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与定义直接依赖的基本包列表的 `require` 相反，`require-dev` 定义了用于开发的次要包，例如用于运行测试、执行调试等的库。然而，这些对于应用程序的正常运行不是基本的，如下所示：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also skip adding packages for `require`, and then add them later using
    the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以跳过为 `require` 添加包，然后使用以下命令稍后添加它们：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: While for `require-dev`, at least with the version I've got installed at the
    time of writing this book, you need to add them manually as seen at the beginning.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `require-dev`，至少在我撰写这本书的时候安装的版本，你需要手动添加它们，如开头所示。
- en: 'At this point of the process, you''ll be able to review the JSON that will
    be written before confirming it, as shown in the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程的这个阶段，你将能够审查在确认之前将要写入的 JSON，如下所示：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Once you've got your `composer.json` file created, you can edit it and tweak
    it to your liking. There are many other options that can be specified. Refer to
    [https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了 `composer.json` 文件，你就可以编辑它并根据自己的喜好进行调整。还有许多其他可以指定的选项。请参阅 [https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)。
- en: By compiling your `composer.json` file, you are actually creating a package
    yourself that could be shared on Packagist with other developers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编译你的 `composer.json` 文件，你实际上是在创建一个可以与其他开发者共享在 Packagist 上的包。
- en: The process itself is not particularly difficult, as you just need to add a
    few additional options, as defined in the JSON schema documentation ([https://getcomposer.org/doc/04-schema.md#the-composer-json-schema](https://getcomposer.org/doc/04-schema.md#the-composer-json-schema)),
    and publish your code using a Git, subversion or mercurial repository. You can
    also decide to publish just a dist package. Refer to the documentation at [https://getcomposer.org/doc/](https://getcomposer.org/doc/)
    for more information if you want to take a step in this direction.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程本身并不特别困难，你只需添加一些额外的选项，如 JSON 模式文档中定义的那样（[https://getcomposer.org/doc/04-schema.md#the-composer-json-schema](https://getcomposer.org/doc/04-schema.md#the-composer-json-schema)），然后使用
    Git、subversion 或 mercurial 仓库发布你的代码。你也可以选择只发布一个 dist 包。如果你想在这个方向上迈出一步，请参阅 [https://getcomposer.org/doc/](https://getcomposer.org/doc/)
    中的文档以获取更多信息。
- en: 'Once you''ve created your `composer.json` file, you can start installing all
    the dependencies as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了 `composer.json` 文件，你就可以开始按照以下方式安装所有依赖项：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Composer lets you decide how to fetch all the requirements and, in this particular
    case, we gave preference to dist files when available. The result is the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 允许你决定如何获取所有需求，在这个特定的情况下，我们优先选择了可用的 dist 文件。结果是以下内容：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating your first web app
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个 Web 应用
- en: At this point, you should have gained enough confidence with Composer to be
    able to undertake the next step. But before doing this, forget what you've learned!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你应该已经对 Composer 有足够的信心，可以开始进行下一步。但在这样做之前，忘记你所学的吧！
- en: Creating a `composer.json` file and requiring a bunch of packages can be done
    by anyone. With Composer, you can create a project from a given package. This
    means that the package will be extracted into a specified directory (not `/vendor`
    anymore). This new project will have all its dependencies checked out and saved
    within its scope, that is, within its own directory.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `composer.json` 文件并添加一系列包，任何人都可以做到。使用 Composer，你可以从一个给定的包创建一个项目。这意味着该包将被提取到指定的目录中（不再是
    `/vendor`）。这个新项目将检查并保存其所有依赖项在其作用域内，即在其自己的目录中。
- en: 'The syntax for the command we''re going to use to install Yii 2 and start working
    with it is the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用的命令的语法来安装 Yii 2 并开始使用它是以下内容：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, `vendor/project` is the Packagist name of the project, in our case, the
    name will be `yiisoft/yii2-app-basic,` as we will see later, and `target-directory`
    is where you want to install it. This command won't create a `composer.json` file,
    so you can run it from anywhere in your environment, just be sure to specify the
    correct target path.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`vendor/project` 是项目的 Packagist 名称，在我们的例子中，名称将是 `yiisoft/yii2-app-basic`，正如我们稍后将会看到的，而
    `target-directory` 是你想要安装它的位置。这个命令不会创建 `composer.json` 文件，所以你可以在你的环境中的任何地方运行它，只需确保指定正确的目标路径。
- en: 'Yii 2 developers have shared two packages that contain an initial application
    you can start working with: a *basic* and an *advanced* one.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 2 开发者分享了两个包含你可以开始工作的初始应用的包：一个 *基本* 的和一个 *高级* 的。
- en: The difference between the two is the type of dependencies and what's already
    been implemented.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 两个之间的区别在于依赖的类型以及已经实现的内容。
- en: 'Both projects come with a `README.md` file in Markdown format, which you can
    read to understand the details. To keep it short:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个项目都附带了一个 Markdown 格式的 `README.md` 文件，你可以阅读它来了解详细信息。为了简洁起见：
- en: '**Basic**: As the name says, it''s a basic implementation, very close to what
    you would get by installing Yii 1, ready to be used with a default Apache or Nginx
    installation.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本**：正如其名，这是一个基本的实现，非常接近通过安装 Yii 1 得到的结果，可以与默认的 Apache 或 Nginx 安装一起使用。'
- en: '**Advanced**: This is a very basic configuration if you need to build a multitiered
    application. The one you will get with the advanced app consists of a frontend,
    a backend, and a console application, all as separate Yii applications with some
    common components. It would require a specific initialization, so refer to the
    `README.md` file for details.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级**：如果你需要构建多层应用，这是一个非常基本的配置。你将得到的高级应用程序包括一个前端、一个后端和一个控制台应用，所有这些都是作为单独的 Yii
    应用程序，并带有一些共同组件。它需要一个特定的初始化，所以请参考 `README.md` 文件以获取详细信息。'
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The advanced application features an additional script called `init,` which
    wraps Composer and enables or disables the installation of `require-dist`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 高级应用程序包含一个名为 `init` 的附加脚本，它包装 Composer 并启用或禁用 `require-dist` 的安装。
- en: For a more detailed guide, check out the documentation at [http://www.yiiframework.com/doc-2.0/guide-tutorial-advanced-app.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-advanced-app.html).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更详细的指南，请查看[http://www.yiiframework.com/doc-2.0/guide-tutorial-advanced-app.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-advanced-app.html)上的文档。
- en: 'Consider the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下命令：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We are now installing into `/basic` the `yiisoft/yii2-app-basic` package. There
    are other ways to get you started, but this is definitely the most clean way I
    can think of, as you won't be tied to a repository nor anything else.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在正在将 `yiisoft/yii2-app-basic` 包安装到 `/basic`。有其他方法可以让你开始，但这绝对是我能想到的最干净的方法，因为你不会受到仓库或其他任何事物的限制。
- en: There is no interaction required after this command, as it would carry on installing
    the required packages including `require-dev`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令之后不需要交互，因为它将继续安装所需的包，包括 `require-dev`。
- en: It might be that at this point, Composer will fail in installing some dependencies,
    or you can fall in some runtime errors later on, so it's probably better if you
    check your requirements are met by opening the requirement script in your browser,
    which will check that everything is all right. The file is found in the root of
    the project and it's called `requirements.php`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可能在这个时候，Composer 会失败安装一些依赖项，或者你可能会在稍后遇到一些运行时错误，所以最好检查你的需求是否满足，方法是打开浏览器中的需求脚本，这将检查一切是否正常。该文件位于项目的根目录中，名为
    `requirements.php`。
- en: In Ubuntu, there are some packages you might want to install, which are going
    to be needed, such as `php5-mcrypt`, `php5-xsl`, and `php5-xdebug`. Each Linux
    distribution ships these PHP extensions in different ways and their naming might
    be different; please consult your Linux distro documentation if you're having
    problems on how to find, install, or configure them.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上，你可能需要安装一些包，这些包是必需的，例如 `php5-mcrypt`、`php5-xsl` 和 `php5-xdebug`。每个
    Linux 发行版以不同的方式提供这些 PHP 扩展，它们的命名可能也不同；如果你在如何查找、安装或配置它们方面遇到问题，请咨询你的 Linux 发行版文档。
- en: 'At the end of the installation process, you will note some additional work
    being done, as shown in the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程结束时，你会注意到一些额外的工作正在进行，如下所示：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you had memory of the previous version of Yii, this was something many were
    looking for.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得 Yii 的上一个版本，这可能是许多人都在寻找的东西。
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that these steps need to be replicated manually if you're running
    Composer on a freshly checked out application, or you would need to run the `init`
    tool if you've got the advanced application installed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你在刚刚检出应用时运行Composer，这些步骤需要手动复制，或者如果你已经安装了高级应用，你需要运行`init`工具。
- en: The CLI command line
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CLI命令行
- en: 'In Yii 2, Composer is used both as a way to install the basic skeleton of your
    web app, something you would have done with Yii 1 using the CLI interface instead,
    as shown in the following sequence of commands, and as a way to manage the dependencies
    of your projects:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii 2中，Composer既被用作安装你的Web应用基本骨架的方式，这在Yii 1中你会使用CLI界面来完成，如下所示的一系列命令，也被用作管理项目依赖的方式：
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can imagine, the scope and functionality of the command line is now quite
    different and has been expanded.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，命令行的范围和功能现在已经相当不同，并且已经得到了扩展。
- en: 'First of all, the CLI is now found in the root of the project and it''s called
    `yii`, as shown here:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，CLI现在位于项目根目录，被称为`yii`，如下所示：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'By just running the preceding command, you will get a list of possible commands,
    as shown in the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行前面的命令，你将得到一个可能的命令列表，如下所示：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The ones you will recognize from Yii 1 are `migrate` and `message`, which accomplish
    the same operations you were used to, albeit some have been improved. The only
    real difference is the way you'll be calling its specific actions (for example,
    `migrate/create`).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你会从Yii 1中认出的有`migrate`和`message`，它们完成了你习惯的操作，尽管一些已经得到了改进。唯一的真正区别是你将如何调用其特定操作（例如，`migrate/create`）。
- en: The shell and web app commands have now been replaced with a cache management
    tool called `cache`, a fixtures creation tool called `fixture,` which we'll see
    later on, and a demo command called `hello`, which you can use as inspiration
    to code one yourself (for example, to create cronjob tasks).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在shell和Web应用命令已被一个名为`cache`的缓存管理工具、一个名为`fixture`的固定数据创建工具（我们稍后会看到）和一个名为`hello`的演示命令所取代，你可以用它作为编写自己代码的灵感（例如，创建cron作业任务）。
- en: Finding your way around Yii 2
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Yii 2中寻找方向
- en: Now you should have everything you need installed on your box, so let's start
    looking around and see how Yii 2 is organized so that we will know where to put
    our hands when needed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经在你盒子上安装了所有你需要的东西，所以让我们开始四处看看，了解Yii 2是如何组织的，这样我们就会知道在需要的时候把手放在哪里。
- en: 'Remember, there''s always a `README.md` file you can consult: in the advanced
    application, it will show you the structure and use of the various directories.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，总有一个可以咨询的`README.md`文件：在高级应用中，它将向您展示各种目录的结构和使用方法。
- en: 'By just listing the content of the root of the project, you will immediately
    spot a big difference:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 只需列出项目根目录的内容，你将立即发现一个很大的不同：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: I've willingly excluded the files from the output of `tree` and displayed only
    the directories.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经自愿从`tree`命令的输出中排除了文件，只显示了目录。
- en: It seems like all the content of what once was in `/protected` have been dropped
    outside of the document root.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来，曾经位于`/protected`中的所有内容现在都已移出文档根目录之外。
- en: The project structure is now very similar to what could be a Django or a Ruby
    on Rails application; the project root contains all the code, which is organized
    the same way as it was in the `protected` folder (for example, controllers, modules,
    config, and so on), some additional directories, such as for widgets, and the
    document root for your web server.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 项目结构现在与Django或Ruby on Rails应用非常相似；项目根目录包含所有代码，其组织方式与`protected`文件夹中的方式相同（例如，控制器、模块、配置等），一些额外的目录，例如用于小部件的目录，以及你的Web服务器的文档根目录。
- en: 'The directory you will need to configure Apache to use is called `web`, and
    it''s used by Yii to ship only the static files, assets, and the entry scripts,
    as shown in the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要配置Apache使用的目录被称为`web`，Yii使用它来仅发送静态文件、资产和入口脚本，如下所示：
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: I tend to prefer this organization as it gives the user the immediate idea of
    the organization of the code by lowering down the nesting levels of the directories.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我倾向于喜欢这种组织方式，因为它通过降低目录的嵌套级别，立即使用户对代码的组织有了直观的了解。
- en: If you are keen on using Nginx, that's not a problem, and you will find the
    required answers in the official documentation, which can be found at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html#configuring-web-servers](http://www.yiiframework.com/doc-2.0/guide-start-installation.html#configuring-web-servers).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: The only two directories that require a bit of explanation are `mail`, which
    is used to store the HTML template(s) for the e-mails (see documentation at [http://www.yiiframework.com/doc-2.0/guide-tutorial-mailing.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-mailing.html)),
    and, possibly, `tests`, which you will be learning soon.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Structure of the default web application
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic application is composed of a `SiteController` with a couple of modules
    and a login system.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: The configuration files should be quite straightforward to understand and can
    be found in the `/config` directory. We will be touching on them every now and
    then in order to configure certain aspects and extensions we're going to use.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of whether you are using the manually installed basic application
    or the Composer-driven method explained earlier, you will be required to set up
    the database on your environment and configure the application.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: In the configuration file `web.php`, be sure to have set up the `cookieValidationKey`,
    and while in `db.php`, set up the DSN of your database as described in the documentation
    at [http://www.yiiframework.com/doc-2.0/guide-start-databases.html#configuring-a-db-connection](http://www.yiiframework.com/doc-2.0/guide-start-databases.html#configuring-a-db-connection).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also note the following at the end of the `web.php` file:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: By default, Yii 2 will provide you with a `YII_DEBUG` global constant definition,
    and an environment `YII_ENV_<ENVIRONMENT>` definition, which could come handy
    in certain conditions. Be aware that its use should be limited to specific cases
    where an alternative and more portable solution cannot be found, either by revisiting
    the implementation or the initial requirements. In a production environment, `YII_DEBUG`
    should be set to `false` and `YII_ENV` to `prod`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Documentation and sample code
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this version, Yii is now following more strict standards in the way that
    the code is written and distributed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Documentation and readability of the code is essential and is mainly dictated
    by the PSR-1 and PSR-2 coding style guide (note that PSR-2 is explicitly depending
    on PSR-1), published by PHP-FIG ([http://www.php-fig.org](http://www.php-fig.org)).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'In PHPStorm, it is quite easy to set up the code style. Alternatively, you
    can use PHP_Codesniffer ([https://github.com/squizlabs/PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer))
    to accomplish the same task and validate your code:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to browse the code and check what it does. It's not massively different
    to what Yii 1 sample application did, apart from the use of PHP 5.4 syntactic
    sugar.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Defining our working strategy
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we know most of our tools that we are going to use, but we still don't know
    what we're going to do with them.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了我们将要使用的多数工具，但我们仍然不知道我们将如何使用它们。
- en: Let's have a look at the features we want to implement into Yii Playground,
    and let's analyze the end-to-end structure of the final application and how we
    should meet our quality assurance requirements.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们想要实现到Yii Playground中的功能，并分析最终应用程序的端到端结构以及我们如何满足我们的质量保证要求。
- en: Key features to be implemented
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要实现的关键功能
- en: Given what we've seen in the previous sections, the base web app provided by
    Yii contains just a basic infrastructure with which you can start playing around.
    For the purpose of this book, we're going to add several features that in a real-world
    environment would normally be requested by the client or stakeholders on the project
    through a brief, discussed and analyzed by the internal teams and scheduled to
    be developed.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前几节所看到的，Yii提供的基座Web应用仅包含一个基本的基础设施，你可以从中开始尝试。为了本书的目的，我们将添加一些在现实世界中通常会被客户或项目利益相关者通过简报、讨论和分析后，由内部团队安排开发的功能。
- en: We are going to follow these steps and outline the necessary work needed in
    order to meet the desired level of quality assurance for the resulting application.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循这些步骤，概述为满足预期质量保证水平所需进行的必要工作。
- en: As previously said, the aim of testing is first and foremost to ensure that
    the code we produce matches the desired requirements. Anything else outside our
    code is not normally tested, but here exceptions apply and it really boils down
    to what the third-party code is doing, its overall quality, and reliability.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，测试的目标首先是确保我们产生的代码符合预期的需求。通常情况下，我们不会测试代码之外的内容，但这里存在例外，这实际上归结为第三方代码的行为、整体质量和可靠性。
- en: We are going to aim to change the basic app in order to be able to login from
    a modal window.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是修改基本应用，以便能够从模式窗口登录。
- en: Once you've got the business requirements in place, we would break this feature
    down into subfeatures, if needed.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了业务需求，如果需要，我们会将这个功能分解为子功能。
- en: In fact, the path we will take on how to implement the modal window and the
    underlying infrastructure is quite important.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们将采取的路径，关于如何实现模式窗口及其底层基础设施，相当重要。
- en: The code controlling the window from the client-side perspective needs to communicate
    with the backend to validate and authenticate the user. On a very basic level,
    this can be achieved by just adjusting the already existing controller that deals
    with the login process.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 从客户端视角控制窗口的代码需要与后端通信以验证和认证用户。在非常基本的层面上，这可以通过调整已经存在的处理登录过程的控制器来实现。
- en: But we can do better. We can decide to roll our new login system without changing
    the existing one, thus avoiding introducing a breaking change that can affect
    our users. If for some reason a bug will slip past our control, we can just disable
    the new feature, while still letting the users log into the system.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以做得更好。我们可以决定在不改变现有系统的情况下推出新的登录系统，从而避免引入可能影响用户的破坏性变更。如果由于某种原因，一个错误滑过了我们的控制，我们只需禁用新功能，同时仍然允许用户登录系统。
- en: This specific feature is also bringing up a series of implicit requirements,
    such as security and portability of our code, and integration with the existing
    and upcoming functionality. We want the user login application that sits on the
    client side to be self-contained and reusable as much as possible. Same goes for
    the backend authentication system.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定功能还引发了一系列隐含的要求，例如我们代码的安全性、可移植性以及与现有和即将到来的功能的集成。我们希望客户端的用户登录应用尽可能自包含和可重用。后端认证系统也是如此。
- en: 'The proposed approach is then the following, together with the high-level assurance
    criteria we need to satisfy, which will outline the scope of the work in much
    more detail when implementing it and, on the other side, will help us create the
    required tests:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的方法如下，包括我们需要满足的高级保证标准，这将更详细地概述实施工作时的工作范围，另一方面，将帮助我们创建所需的测试：
- en: User REST interface to authenticate the user.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户REST接口用于认证用户。
- en: Modal login window.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模式登录窗口。
- en: User authentication REST interface
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户认证REST接口
- en: The REST interface will define some entry points to our application that will
    be easy to use. The URLs will then have a syntax of `/resource/id/operation`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: REST接口将定义一些易于使用的应用程序入口点。然后URL将具有`/resource/id/operation`的语法。
- en: A GET retrieves information, a POST will store information. For example, POST
    user/login to log in, POST user/logout to log out, POST user/update to update
    some fields once if the user is logged in, and GET user/details to display user
    information.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: GET操作检索信息，POST操作将存储信息。例如，通过POST user/login进行登录，通过POST user/logout进行注销，如果用户已登录，通过POST
    user/update更新一些字段，以及通过GET user/details显示用户信息。
- en: The communication will work using JSON where needed.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的通信将使用JSON进行。
- en: User login from a modal window
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从模态窗口进行用户登录
- en: Now let's piece together what we've done with the REST interface and code the
    JavaScript code that will open the modal window, validate the form, communicate
    the login credentials to the backend, and keep the user logged in until the browser
    window is closed.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将我们用REST接口所做的工作拼凑起来，并编写打开模态窗口、验证表单、将登录凭据传达给后端以及保持用户登录直到浏览器窗口关闭的JavaScript代码。
- en: As previously said, the code needs to be self-contained and portable, and for
    security reasons, it will not deal with any sensible information at any point,
    like the actual authentication.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，代码需要是自包含和可移植的，出于安全原因，它将在任何时刻都不会处理任何敏感信息，如实际的认证。
- en: Introducing testing for our purposes
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的目的引入测试
- en: Now that we have defined what to do, we need to discuss what kind of testing
    is needed and how much of it we want to test, based on the approaches we have
    outlined in [Chapter 1](ch01.html "Chapter 1. The Testing Mindset"), *The Testing
    Mindset*.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了要做什么，我们需要讨论需要什么样的测试以及我们想要测试多少，这基于我们在[第1章](ch01.html "第1章。测试心态")中概述的方法，即《测试心态》。
- en: 'We''re going to cover the following areas of testing:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下测试领域：
- en: '**Unit tests**: This is to achieve isolated components testing'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：这是为了实现隔离组件测试'
- en: '**Integration tests**: This is to ensure the various components are working
    well together'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：这是为了确保各个组件能良好地协同工作'
- en: '**Acceptance tests**: These are the most relevant types of tests from the user
    perspective, as they try to meet the right requirements defined at the beginning'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试**：这些是从用户角度最相关的测试类型，因为它们试图满足最初定义的正确要求。'
- en: Clearly, without knowing how our application is structured, it is hard to understand
    what kind of work we're going to endure.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果我们不知道应用程序的结构，就很难理解我们将要承受什么样的工作。
- en: So, before getting into defining the actual tests, we need to start breaking
    down our application into several modules, and overseeing the structure from an
    architectural point of view.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在定义实际测试之前，我们需要开始将应用程序分解成几个模块，并从架构的角度来审视其结构。
- en: There are many ways to perform an architectural breakdown, some might be stricter
    and more detailed, using a textual list, while others might end up being a rough
    sketch using a diagram. This heavily depends on the size and complexity of your
    application, and, in our case, a diagram seems to fit our purposes.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 进行架构分解有许多方法，有些可能更严格和详细，使用文本列表，而有些可能最终只是一个使用图表的粗略草图。这很大程度上取决于应用程序的大小和复杂性，在我们的情况下，一个图表似乎更适合我们的目的。
- en: We need to remember that we always want to balance the effort and the time spent
    on these initial phases with the amount of detail required at any given point.
    For instance, we might not know exactly how the modal window login will interact
    with the rest of the application, whether we need to develop a user model that
    is more complex than the one we will start with or even split it into different
    components so as to provide a different functionality to the frontend, or whether
    this is out of scope with the work we want to do and we can do it in a self-contained
    way.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要记住，我们始终希望平衡在这些初始阶段投入的努力和时间与任何给定时刻所需的详细程度。例如，我们可能不知道模态窗口登录将如何与应用程序的其余部分交互，我们是否需要开发一个比我们开始时更复杂的用户模型，或者将其拆分成不同的组件以提供前端的不同功能，或者这超出了我们想要做的工作范围，我们可以以自包含的方式完成它。
- en: Moreover, the diagram can miss small bits, which we might forget to test or
    consider when evaluating our test plan. For example, the JavaScript side of our
    application might include several small sets of utility functions that should
    be considered as separate modules for manageability and reuse.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，图表可能会遗漏一些小细节，我们可能会忘记测试或在评估我们的测试计划时考虑。例如，我们应用程序的JavaScript部分可能包括几个小型实用函数集，这些函数集应被视为独立的模块，以便于管理和重用。
- en: '![Introducing testing for our purposes](img/B03646_02_01.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![介绍我们目的的测试](img/B03646_02_01.jpg)'
- en: Partial view of the structure of our application
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序结构的部分视图
- en: As a solution to these problems, it is always advisable to revisit the structure
    of the software module and its own breakdown when approaching the development
    of the specific feature. This is something we will see in detail in the next chapters.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决这些问题的方法，在接近特定功能的开发时，重新审视软件模块的结构及其自身的分解总是明智的。这一点我们将在下一章中详细看到。
- en: 'In the preceding diagram, we can see that our application comprises essentially
    three main areas, starting from the bottom: a data storage system (database),
    a model representing the data, and a functional part (the view/controller part
    of the application). On top of everything sits our main interaction bit given
    by the user browser. This is not representative of the whole application, rather
    just the specific areas where we''re going to work on.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们可以看到我们的应用程序主要由三个主要区域组成，从底部开始：数据存储系统（数据库）、表示数据的模型和功能部分（应用程序的视图/控制器部分）。在所有这些之上是我们的主要交互部分，即用户浏览器。这并不代表整个应用程序，而只是我们将要工作的特定区域。
- en: 'As we''ve already seen, the **unit tests** are aimed at testing an atomic bit
    of the application, such as a class or a small set of related functions: their
    purpose is to be *small* and *isolate*, meaning they should have no external dependencies.
    Keep in mind that totally isolated tests in web development are difficult to achieve,
    and we are in fact not allowed to touch parts of our infrastructure, for instance,
    the database interaction. These tests are actually called **small tests** in Google''s
    internal terminology , which immediately indicates their scope and the time they
    will take to run.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，**单元测试**的目标是测试应用程序的原子部分，例如一个类或一组相关的函数：它们的目的是要**小**和**隔离**，这意味着它们应该没有外部依赖。请记住，在Web开发中实现完全隔离的测试是困难的，实际上我们不允许触及我们基础设施的某些部分，例如数据库交互。这些测试在谷歌的内部术语中实际上被称为**小型测试**，这立即表明了它们的范围和运行所需的时间。
- en: Note
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Google is currently one of the publicly known companies that have made testing
    one of their core values. Their approach makes constant use of adjectives to distinguish
    between types of tests.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌是目前公开知名的公司之一，它们将测试视为其核心价值观之一。他们的方法不断使用形容词来区分测试的类型。
- en: To read more about Google's way of testing, you might be interested in *How
    Google Tests Software*, *Addison Wesley*, *James Whittaker*, *Jason Arbon,* and
    *Jeff Carollo*.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于谷歌测试方式的信息，你可能对《如何谷歌测试软件》这本书感兴趣，作者为*Addison Wesley*，作者是*James Whittaker*、*Jason
    Arbon*和*Jeff Carollo*。
- en: 'In our application, the unit test can be represented in the following way:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，单元测试可以表示如下：
- en: '![Introducing testing for our purposes](img/B03646_02_02.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![介绍我们目的的测试](img/B03646_02_02.jpg)'
- en: Graphical representation of unit testing coverage
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试覆盖率的图形表示
- en: A practical example is the user model we're going to create, and, as stated
    before, we might have other unit tests that we might want to write, for instance,
    in our JavaScript layer in the frontend, in case we were dealing with a client-side
    application where part of the business logic lives in the user browser.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一个实际的例子是我们将要创建的用户模型，正如之前所述，我们可能还有其他单元测试想要编写，例如在前端JavaScript层中，如果我们处理的是一个客户端应用程序，其中部分业务逻辑位于用户浏览器中。
- en: Just remember, the tests covering the user model shouldn't make any use of external
    dependencies (for example, external helpers, such as the security module) and,
    secondly, they can avoid touching parts of the framework over which we don't have
    any control, specifically those that have potentially already been covered by
    other tests.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住，覆盖用户模型的测试不应使用任何外部依赖（例如，外部助手，如安全模块），其次，它们可以避免触及我们没有控制的框架的部分，特别是那些可能已经被其他测试覆盖的部分。
- en: When focusing a bit more on the global picture, we can now see how things stack
    up and interact with each other. With **integration tests**, we might be required
    to use mocks and fakes anyway, but this is not highly recommended as it would
    be used for unit tests. In Google's terminology, these tests are called **medium
    tests**, as they take a bit more when executed and are also trivial to develop
    in certain situations.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当更多地关注全局图景时，我们现在可以看到事物是如何堆叠和相互作用的。在**集成测试**中，我们可能需要使用模拟和伪造，但这并不强烈推荐，因为它们通常用于单元测试。在谷歌的术语中，这些测试被称为**中等测试**，因为它们在执行时需要更多的时间，并且在某些情况下也容易开发。
- en: '![Introducing testing for our purposes](img/B03646_02_03.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![介绍我们目的的测试](img/B03646_02_03.jpg)'
- en: Graphical representation of integration tests coverage.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试覆盖率的图形表示。
- en: 'The last pieces of the jigsaw are the acceptance tests, as shown in the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的拼图碎片是验收测试，如下所示：
- en: '![Introducing testing for our purposes](img/B03646_02_04.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![介绍我们目的的测试](img/B03646_02_04.jpg)'
- en: Graphical overview of acceptance tests.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 验收测试的图形概述。
- en: '**Acceptance tests** are similar to system tests (or end-to-end tests), but
    they target the user rather than the consistency of the overall system from an
    engineering point of view. Acceptance tests are close to what could be a real-world
    use: these tests are required to ensure that all components are working well together,
    and meet the acceptance criteria defined at the beginning, as specific actions
    that outline the user interaction with the application.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**验收测试**类似于系统测试（或端到端测试），但它们针对的是用户，而不是从工程角度整体系统的一致性。验收测试接近于可能的真实世界使用：这些测试需要确保所有组件都能良好地协同工作，并满足最初定义的验收标准，即具体行动，概述用户与应用程序的交互。'
- en: 'Acceptance criteria are those we have defined previously when outlining our
    features: the user should be able to log in using a modal window.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 验收标准是我们之前在概述我们的功能时定义的：用户应该能够使用模态窗口登录。
- en: I've intentionally avoided to use a business domain language, as we want to
    keep it as wide as possible for this initial part, instead we're going to dive
    into that later on.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意避免使用业务领域语言，因为我们希望在这个初始部分尽可能保持广泛，相反，我们将在稍后深入探讨。
- en: At Google, acceptance (and end-to-end) tests are also called **large** or **enormous
    tests** because they will take a lot more to implement and to execute. They also
    require an infrastructure that could mimic a real-world scenario, which may not
    be trivial to set up. Because of this, creating corner cases can be quite difficult
    as this means that we're going to test only the defined scenarios and any specific
    case we think to be meaningful to the area that we're testing.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在谷歌，验收（和端到端）测试也被称为**大型**或**巨大测试**，因为它们需要更多的时间和资源来实现和执行。它们还需要一个能够模拟真实世界场景的基础设施，这可能并不容易设置。正因为如此，创建边缘情况可能相当困难，因为这意味着我们将只测试定义的场景和我们认为对我们正在测试的区域有意义的任何特定案例。
- en: In our case, this might be something along the lines of "The user will receive
    an error when using wrong credentials."
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这可能是“当用户使用错误的凭据时，将收到错误信息。”
- en: Again, we will specifically dig into these details later on in this book.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们将在本书的后面部分具体探讨这些细节。
- en: Using a top-down approach versus a bottom-up approach
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自上而下方法与自下而上方法的比较
- en: It's important to reiterate that BDD has been created as an improvement over
    TDD and quite an important one at that. It provides a better and more flexible
    language to define acceptance criteria, which will also help define the scope
    of the testing needed.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要重申，行为驱动开发（BDD）是为了改进测试驱动开发（TDD）而创建的，而且是一个相当重要的改进。它提供了一个更好、更灵活的语言来定义验收标准，这也有助于定义所需的测试范围。
- en: 'We have two ways to define our testing strategy and our test plan: using either
    a bottom-up (or *outside-in*) or a top-down (or *inside-out*) approach, as shown
    in the following diagram:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种方式来定义我们的测试策略和测试计划：使用自下而上（或*外部-内部*）或自上而下（或*内部-外部*）的方法，如下面的图所示：
- en: '![Using a top-down approach versus a bottom-up approach](img/B03646_02_05.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![自上而下方法与自下而上方法的比较](img/B03646_02_05.jpg)'
- en: Comparison of different size of tests and their benefit.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 不同尺寸测试及其益处的比较。
- en: It's not new for agencies and startups when trying to build up and improve their
    QA to start from the bottom, implementing unit tests and trying to get a good
    amount of coverage.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 对于机构和初创公司来说，在试图建立和改进他们的质量保证（QA）时，从底部开始，实现单元测试并试图获得良好的覆盖率，这并不新鲜。
- en: The use of TDD is encouraged and it's actually the first step in getting into
    the *testing mentality*, by writing tests first and then going through the *red,
    green, and refactor* phases. But its sole focus relies on the code, and the responsibility
    to implement and ensure they're covering the right amount of code rests with the
    developer.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励使用TDD（测试驱动开发），实际上它是进入*测试心态*的第一步，通过先编写测试，然后经历*红色、绿色和重构*阶段。但它的唯一焦点在于代码，而确保它们覆盖正确数量的代码的责任则落在开发者身上。
- en: Unit tests will help you focus on small and atomic parts of your application,
    and the tests, by being rather quick to be executed, will help you discover bugs
    frequently and improve the quality of the code developed. Your architectural and
    design skills will also improve significantly.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试将帮助你专注于应用程序的小而原子化的部分，而测试由于执行速度较快，将帮助你频繁地发现错误并提高开发代码的质量。你的架构和设计技能也将显著提高。
- en: At a certain point, you will find yourself knowing that there's still something
    that is not touched by tests. While the project grows, the amount of manual and
    exploratory testing grows with it.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，你会发现还有一些东西没有被测试到。随着项目的增长，手动和探索性测试的数量也会随之增长。
- en: 'Integration tests can help you alleviate this problem, but please refrain yourself
    from spawning an incredible amount of integration tests: these can quickly become
    brittle and unmaintainable, especially when the external dependencies can become
    out-of-sync.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试可以帮助你减轻这个问题，但请避免产生大量的集成测试：这些测试可能会迅速变得脆弱且难以维护，尤其是在外部依赖可能变得不同步的情况下。
- en: Acceptance tests are going to keep everything together and eliminate the need
    for the repetitive tasks you can perform when doing manual tests. Again, acceptance
    tests are not a replacement for exploratory testing and should instead focus on
    the acceptance criteria defined.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 接受测试将保持一切井然有序，并消除在手动测试时可以执行的重复性任务的需求。再次强调，接受测试不是探索性测试的替代品，而应专注于定义的接受标准。
- en: 'As you can imagine, the top-down approach gives you the following advantages:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，自上而下的方法给你以下优势：
- en: A complete solution with a good enough coverage
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个完整的解决方案，具有足够的覆盖率
- en: A clear panoramic of the testing infrastructure
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对测试基础设施的清晰全景图
- en: A good balance between effort, development, and tests
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 努力与开发、测试之间的良好平衡
- en: Most of all, the *confidence* that your system is solid, if not rock-solid
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最重要的是，对系统稳固性的**信心**，如果不是坚如磐石的话。
- en: What to test and what not to test
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要测试什么，不要测试什么
- en: The distribution of test coverage could end up being distributed as 100 percent–20
    percent–10 percent, for unit, integration, and acceptance tests, respectively.
    The percentage for integration and acceptance can grow quite a fair bit in user-facing
    projects.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 测试覆盖率的分布可能会是100%、20%、10%，分别对应单元测试、集成测试和接受测试。在面向用户的项目中，集成和接受测试的百分比可能会相当高。
- en: In this context, it is particularly important to understand what **code coverage**
    means.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个背景下，理解**代码覆盖率**的含义尤为重要。
- en: If you haven't already, you will probably find some software engineer that will
    convince you that 100 percent coverage is essential and not reaching it is some
    sort of shame you have to wear for the rest of the project, looking down at the
    ground for you're not a respectable developer.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有，你可能会遇到一些软件工程师，他们会说服你100%的覆盖率是必不可少的，没有达到它是一种你必须在整个项目中承担的耻辱，低头看着地面因为你不是一个值得尊敬的开发者。
- en: Reaching full coverage is a noble aim, and that's where we will try to get,
    but we need also to be realists and, as highlighted before, understand that there
    are many situations where this is not possible at all.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 实现全面覆盖是一个崇高的目标，这正是我们试图达到的目标，但我们也需要现实主义者，正如之前所强调的，理解在许多情况下这是不可能的。
- en: The "what to test" question, or in other words the scope of the testing, is
    defined by our acceptance criteria for each feature we are going to develop.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: “要测试什么”的问题，或者说测试的范围，由我们将要开发的每个功能的接受标准来定义。
- en: Using the top-down approach, we will also be able to highlight which bits are
    important to be integration tested, while trying to achieve 100 percent for units.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自上而下的方法，我们还将能够突出哪些部分需要集成测试，同时试图实现单元测试的100%。
- en: The master test plan
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主测试计划
- en: At the end of this initial planning work, you will have everything needed to
    define your master test plan.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项初步规划工作的最后，你将拥有定义主测试计划所需的一切。
- en: The master test plan is a unified way to document the scope and details of what
    needs to be tested and how.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to be formal, and there's no specific requirement or procedure
    to follow, unless you're working for a big company where it's considered a deliverable
    at the beginning of the project to be signed off by the stakeholders.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, it will be roughly defined by the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'User API implementation:'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit test as much as possible (aim for 100 percent, but 60 percent to 70 percent
    is considered acceptable on a case-by-case basis)
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional tests to cover all the entry points of the application
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Well defined corner-cases—bad parameters and/or requests (for example, GET instead
    of POST) as client-side errors, and server-side errors handling (50* errors and
    similar)
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User login from modal window:'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional tests to ensure we are getting the right markup
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Well defined corner cases—for example, no e-mail specified, e-mail with no Gravatar
    setup
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Acceptance tests—user clicks on the login button, modal is displayed, user logs
    in, user sees him/her as logged in; user is logged in, click on the logout button,
    the user sees him/her as logged out
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can imagine, the test plan should be a document that lives together with
    the project, being expanded and amended upon necessity when introducing new features
    or changing others. This requirement determines some constraints that should be
    respected if you want to keep having a specification document that is simple enough
    to be updated in a short time (10 minutes top) and, at a glance, lets you know
    what the implied risk and importance of each component and feature is.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: If you want to understand more of the topic, I would strongly suggest you read
    more starting from **Attributes-Components-Capabilities** (**ACC**) at [https://code.google.com/p/test-analytics/wiki/AccExplained](https://code.google.com/p/test-analytics/wiki/AccExplained).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: The ACC goes together with risk analysis and mitigation. By putting your components,
    their relative capabilities (or features), and the attributes they should provide,
    such as "secure", "stable", "elegant", and so on in a grid, you can immediately
    understand where you should focus your testing attentions. For each row, you can
    give a risk value, relative to the other features. We want to keep the value relative
    to avoid making it too difficult to compute and also because it is meaningful
    only in this context.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During this chapter, you saw many important things, which are the base of what
    we''re going to work on in the next chapters and the base of testing from a wider
    perspective: you learned the importance of our workflow and environment setup,
    you saw how to use Composer and use it to install Yii, and, finally, we''ve picked
    up the concepts detailed in [Chapter 1](ch01.html "Chapter 1. The Testing Mindset"),
    *The Testing Mindset*, and made them concrete, applying them to our specific application
    and the features that we''re going to implement.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Now, before we dive into the actual implementation of the application, we need
    to get first into the testing suite **Codeception**, the jargon it uses, and the
    various features that it will provide, which we're going to use in the upcoming
    chapters.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们深入实际应用实现之前，我们首先需要了解测试套件**Codeception**，它所使用的术语，以及它将提供的各种功能，这些功能我们将在接下来的章节中使用。
