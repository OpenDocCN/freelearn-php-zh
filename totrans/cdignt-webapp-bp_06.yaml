- en: Chapter 6. Creating an Authentication System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter doesn't come with a user authentication system out of the box (urgh,
    that phrase), but nevertheless it doesn't. If you want to manage users and sessions,
    there are several options open to you. You can install an auth Spark, or you can
    develop your own solution—which is what we will do here.
  prefs: []
  type: TYPE_NORMAL
- en: One of the irritations I have with other "third-party" plugins (whatever their
    purpose) is that the code is almost always difficult, making maintenance and integration
    difficult. This authentication system is as simple as I can make it, and hopefully,
    it will be easy for you to adapt and extend it for your purposes.
  prefs: []
  type: TYPE_NORMAL
- en: The authentication system provided in this chapter will allow you to create
    and manage users, password resets, user e-mail notifications, user logins, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create this app, we will create five controllers: one to handle signing
    in to sessions, one to handle admin functions (CRUD operations), one for user
    password management, one to allow a user to register, and one to offer functionality
    to a user once they are logged in.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll also create a language file to store text, allowing you to have multiple
    language support should that be required.
  prefs: []
  type: TYPE_NORMAL
- en: We will make amends to the `config.php` file to allow for encryption support
    necessary for sessions and password support.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create all the necessary view files and even a CSS file to help Bootstrap
    with some of the views.
  prefs: []
  type: TYPE_NORMAL
- en: However, this app along with all the others in this book, relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you might already
    have, please keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So without further ado, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, before we start building, we should as always take a look at what
    we plan to build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, a brief description of our intent: we plan to build an app that will
    provide the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: An admin can manage all users within the system and also allow individual users
    to edit and update their own data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can reset passwords if they have forgotten them; e-mails confirming this
    will be sent to these users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New users are able to register and become part of the system; a password will
    be generated and sent to them in an e-mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also look at how to implement code to check for a users' access level.
    You can use this code in your projects to limit users from specific controllers
    and controller functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a better idea of what''s happening, let''s take a look at the following
    site map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design and wireframes](img/7093OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, that''s the site map; now, let''s go over each item and get a brief idea
    of what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Signin**: Imagine this as the start point. The user will be able to sign
    in at this point. Depending on the value in `users.usr_access_level`, they will
    either be directed to `me` or `users` controllers. The `me` controller is a place
    for normal users to edit and update their details, while the `users` controller
    offers a place for an admin to manage all users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Me**: This currently displays a form to the user; however, consider this
    area a dashboard area for users who are not admins. Admins have their `users.usr_access_level`
    value set to `1`. Currently, the `me` controller will load the `index` function,
    which will allow the user to edit their details—speaking of which, let''s see
    the next block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit My Details**: This will display a form to the current user. The form
    will allow the user to change and save their contact data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Users**: The `users` controller handles admin functions such as all CRUD
    operations for users, password resets, and password scramble (for all users).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View All**: This lists all users and their current status in the database.
    The users are displayed in a table. Those users who are active (`users.usr_is_active
    = 1`) have no background color to their row, while users who are inactive (`users.usr_is_active
    = 0`) have an orange background color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create**: As the name suggests, this will display the `users/new_user` view
    that contains a form, allowing an admin to create a user within the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit**: This displays a form similar to the previous one, except that it
    is prepopulated with details of the current logged in user. This is loaded when
    the admin presses the Edit link in the View All page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: This displays a confirmation page, asking the admin to confirm
    whether they wish to delete the user. This is loaded when the admin presses the
    Edit link in the View All page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forgot Password**: This displays a form to the user. The user is invited
    to enter their e-mail address in a form text field and press Submit. If the e-mail
    address exists in the database, then an e-mail is sent to the e-mail address with
    a URL in the body. This URL is the reset URL for this auth system. Appended to
    the URL is a unique code that is used by the system to verify that a password
    reset request is genuine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Register**: This displays a form to the user, inviting them to enter their
    first name, last name, and e-mail address. Once successfully submitted (there
    were no validation errors), the new user is added to the system and an e-mail
    is sent to the new user informing them of their password; their password was generated
    automatically by the system on their registration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  prefs: []
  type: TYPE_NORMAL
- en: Me – editing details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from the Edit My Details item
    discussed in the site map. The normal user (not an admin user) can view their
    details in an HTML form and by pressing Save, they can then update these details.
  prefs: []
  type: TYPE_NORMAL
- en: '![Me – editing details](img/7093OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Viewing all users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from the View All item in the
    site map. The admin user is able to see all users within the system in a table
    grid. Users are listed and have Edit and Delete options, which the admin user
    can use.
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing all users](img/7093OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **6** (the Create
    User item) in the site map. It displays a form that contains text fields, allowing
    an admin to enter a user's details. Notice that user access levels can be set
    here; level `1` is treated in the system as an admin, so the user will be able
    to have admin rights assigned to them, whereas higher numbers are normal users.
    Currently, only level `2` (as a normal user) is understood by the system; the
    dropdown has as many as five levels—you can apply these in your adaptation of
    this project as you see fit or even add more should you wish. Setting the user
    as active (`users.usr_is_active = 1`) or inactive (`users.usr_is_active = 0`)
    will restrict the user at login. An active user will have their login request
    processed by the `signin` script, whereas an inactive user won't.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating users](img/7093OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Editing the user details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The form to edit user details is similar to the New User functionality discussed
    in the previous section. It is accessed through point **5** (the View Users functionality)
    of the site map when an admin user clicks on the Edit link (in the `/views/users/view_all_users.php`
    view file) next to a person's name. The interesting difference here is the Other
    Options panel with the Reset Password Email option. This will reset the user's
    password and send them an e-mail informing them of their new password.
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing the user details](img/7093OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deleting a user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a final confirmation page that asks for permission to delete a user.
    It is accessed through point **5** (the View Users functionality) in the site
    map. An admin clicks on the Edit link to view the Edit User page. Clicking on
    Delete will remove the user from the `users` table, whereas `Cancel` will return
    the admin to point **5** (the View Users item).
  prefs: []
  type: TYPE_NORMAL
- en: '![Deleting a user](img/7093OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sign in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you the plan for the signing-in page. The user
    can enter their username and password and press the Login button. Validation errors
    are displayed above the form (however, validation errors are not shown in the
    following screenshot). There is also a link for someone to initiate a process
    to reset password. The **Forgot Password** link will display a new form, allowing
    that person to enter an e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sign in](img/7093OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Register
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The register functionality allows a nonuser to register with the system. The
    potential user is prompted to enter their first name, last name, and e-mail address.
    We use their first and last name in a welcome e-mail that will be sent to the
    e-mail address entered at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: '![Register](img/7093OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create quite a few files for this project, 23 files in all,
    and they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/core/MY_Controller.php`: This acts as a parent
    class to child classes such as the `users.php` controller. It provides common
    resources such as commonly used helpers, libraries, and error delimiters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/password_model.php`: This provides
    read/write access to the database—particularly around the `users` table—focusing
    on password specific operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/signin_model.php`: This provides methods
    that are specific to the sign-in process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/users_model.php`: This provides methods
    that are specific to the `users` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/model/register_model.php`: This provides
    methods that assist in a user being added to the `users` table without an admin
    creating them first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/new_user.php`: This allows an
    admin to create a new user. The user is saved to the `users` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/view_all_users.php`: This allows
    an admin to view a list of all users in the `users` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/delete_user.php`: This allows
    an admin to delete a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/edit_user.php`: This allows an
    admin to edit the details of a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/forgot_password.php`: This allows
    someone who is not logged in to reset their password. This view contains a simple
    form that asks a user to enter their e-mail address. An e-mail is sent to this
    address with a unique code. This code is used to ensure that the change password
    request is genuine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/me.php`: This allows a user who
    is not an admin to edit their details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/new_password.php`: This allows
    a user who is not logged in to enter a new password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/register.php`: This allows someone
    who is not already a user (a record in the `users` table) to sign in and generate
    a new row in the `users` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/signin.php`: This shows a simple
    login form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/users/change_password.php`: This allows
    someone who is signed in to reset their password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/email_scripts/welcome.txt`: This contains
    simple welcome text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/email_scripts/new_password.txt`: This
    contains a simple instruction to click on a link to open the `password/new_password`
    controller function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/email_scripts/reset_password.txt`:
    This contains a simple message that informs a user that their password has been
    changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The file structure of the preceding 23 files is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note the last item in the list, which is `signin.css`. This sits in the `bootstrap/css/`
    folder, which is at the same level as CodeIgniter's `application` folder. We installed
    Twitter Bootstrap in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared
    Project Resources"), *Introduction and Shared Project Resources*. In this chapter,
    we will go through how to place the `bootstrap` folder at the proper folder level
    and location.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources*, in mind. However, it's not the end of the world if you haven't—the
    code can easily be applied to other situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we''ll build the database. Copy the following MySQL code into your
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You'll see that the first table we create is `ci_sessions`. We need this to
    allow CodeIgniter to manage sessions, specifically logged in users. However, it
    is just the standard session table available from *CodeIgniter User Guide*, so
    I'll not include a description of that table as it's not technically specific
    to this application. However, if you're interested, there's a description at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Right, let''s take a look at each item in each table and see what it means:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: users |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `acc_id` | Should you wish to associate users with specific accounts (or
    group users together under a sort of umbrella), `acc_id` (for account ID) can
    be a hook that enables you to do that. You''ll need to create an `accounts` table
    to do this, however. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_fname` | This is the user''s first name. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_lname` | This is the user''s last name. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_uname` | This is the an option for a username. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_email` | This is the user''s e-mail address. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_hash` | This is a hash of the user''s password. The value in `users.usr_hash`
    is generated in two ways. The first is when someone manually changes their password
    (perhaps by the "forgot password" process). The `$this->encrypt->sha1($this->input->post(''usr_password1''));`
    CodeIgniter function contains the new password from the user.The second way a
    password is created is when a password is generated by the system and is e-mailed
    to the user, for example, when an admin creates a new user manually. This way,
    the admin doesn''t know what the password of the new user is.To achieve this,
    CodeIgniter uses the same `sha1()` encryption function; however, instead of a
    password being supplied from a user through `$POST`, it is made by creating a
    random string and passing it to `sha1()`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `usr_add1` | This is the first line of a person''s address. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_add2` | This is the second line of a person''s address. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_add3` | This is the third line of a person''s address. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_town_city` | This is the town or city of their address. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_zip_pcode` | This is the postal code or zip code of the person''s address.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_access_level` | This is the indicates the permission level of the user.
    The permission level can govern what actions a user is allowed to perform. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_is_active` | This is the indicates whether the user is active (`1`)
    or inactive (`0`)—inactive means that a user cannot log in. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_created_at` | This is the MySQL timestamp that is created when the record
    is created. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_pwd_change_code` | This is a unique code that''s generated when a person
    wishes to change their password. This unique code is generated and sent in an
    e-mail to the user who wishes to change their password. The code is appended to
    a URL in the body of the e-mail. The user clicks on this link and is redirected
    to the auth system. The system looks at that code to check whether it is valid
    and matches the e-mail. If it matches, the user can follow onscreen instructions
    to create a new password for them. |'
  prefs: []
  type: TYPE_TB
- en: We'll also need to make amends to the `config/database.php` file, namely setting
    the database access details, username password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/database.php` file and find the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Edit the values in the preceding lines, ensuring you substitute these values
    with ones that are more specific to your setup and situation; so, enter your username,
    password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the config.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few settings in this file that we''ll need to configure to support
    sessions and encryption. So, open the `config/config.php` file and make the following
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to set an encryption key; both sessions and CodeIgniter''s encryption
    functionalities require an encryption key to be set in the `$config` array, so
    find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, change it to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, obviously don't actually change this value to literally a-random-string-of-alphanum-characters
    but change it to, er, a random string of alphanum characters instead—if that makes
    sense? Yeah, you know what I mean.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, find the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, change it to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adjusting the routes.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to redirect the user to the `signin` controller rather than default
    CodeIgniter `welcome` controller. We will need to amend the default controller
    settings in the `routes.php` file to reflect this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Firstly, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    this; instead, we want the default controller to be `signin`. So, find the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four models in this project, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`models/password_model.php`: This contains functions that are specific to creating
    and resetting passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models/register_model.php`: This contains functions that are specific to registering
    a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models/signin_model.php`: This contains functions that are specific to signing
    a user into the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models/users_model.php`: This contains the main bulk of the model functions
    for this project, specifically CRUD operations to be performed on users and various
    other admin functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So that's an overview of the models for this project; now, let's go and create
    each model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/password_model.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `does_code_match()` function will check whether the code supplied in the
    URL matches that in the database. If it does, it returns `true` or `false` if
    it doesn''t. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/models/register_model.php` model
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `register` model contains just one function, which is `register_user()`.
    It simply uses the CodeIgniter Active Record `insert()` class to insert the contents
    of the `$data` array into the `users` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/users_model.php` model
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let's look at the `make_code()` function. This function creates a unique code
    and saves it to the user's record. This code is sent out at the end of a URL in
    an e-mail to the user. If this code in the URL matches the code in the database,
    then chances are that it's a genuine password change as it is unlikely that someone
    would have accurately guessed the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the PHP construct `do…while`—it looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: So, this means *do something while a condition is met*. With that in mind, think
    about our problem; we have to assign `users.usr_pwd_change_code` with a value
    that doesn't exist in the database already. The code should be a unique value
    to ensure that someone else doesn't have his or her password changed by mistake.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `do…while` construct as a means to create code that is unique in
    the database by first creating the code and then looking through the `users` table
    for another occurrence of that code. If it is found, then the number of rows returned
    will be greater or equal to one. Then, another code is generated and another search
    for the `users` table happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will repeat until a code that cannot be found in the `users` table is
    generated. This unique code is then returned as `$url_code`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `update_user_password()` function accepts an array of data containing
    the user''s primary key and a new password. The array is provided the `new_password()`
    function of `password_model`. The user''s ID (`users.usr_id`) is from the session
    (as they''re logged in) and the new password is from the form that `new_password()`
    loads (`views/users/new_password.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/models/signin_model.php` model
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This model contains only one function other than `__construct()`, that is, `does_user_exist($email)`.
    This function takes an e-mail address submitted by the user from the sign-in view
    and returns the active record query.
  prefs: []
  type: TYPE_NORMAL
- en: 'The query is evaluated in the `signin` controller with the CodeIgniter database
    function `num_rows()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If there is a single match, then the `signin` controller loops over the Active
    Record result and attempts to log the user in.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are quite a few view files and e-mail template files in this project—in
    fact, we're going to create 10 view files, three e-mail scripts, and one header
    file each specific to logging in and amending a navigation file. Right, let's
    get to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the standard view files used in this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/new_user.php`: This displays a
    form to the admin user, allowing them to create a user. The new user is sent an
    e-mail that welcomes them to the system and informs them of their password. The
    e-mail script is `/views/email_scripts/welcome.txt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/view_all_users.php`: This displays
    a list of users currently in the system. Admin users are able to edit or delete
    a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/delete_user.php`: This displays
    a confirmation page to the admin user. This is displayed if the admin user presses
    Delete in the `view_all_users/php` view. The confirmation page asks whether the
    admin user really wishes to delete the selected user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/edit_user.php`: This displays
    a form to the admin user. This is displayed if the admin user presses Edit in
    the `view_all_users.php` view. The form is similar to the `new_user.php` file,
    except that there is a panel where the admin user can send an e-mail to the user
    to reset their password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/forgot_password.php`: This displays
    a form to anyone asking for an e-mail address. If this e-mail address is in the
    system, an e-mail will be sent to them with instructions on how to reset their
    password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/me.php`: This displays a form
    to the current logged in user. The form is similar to `edit_user.php`. It allows
    the current logged in user to edit and amend their account details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/new_password.php`: This displays
    a form to anyone, inviting then to enter their e-mail address—the code generated
    earlier from the forgotten password process is already a hidden form element.
    The code and e-mail address are compared, and if the code matches, a new password
    is generated for the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/register.php`: This displays a
    form to the user, allowing them to enter their first and last names and e-mail
    addresses. They are then added to the database and a password is generated for
    them. This password is sent to them in an e-mail along with a welcome message.
    The text for this e-mail is in `/views/email_scripts/welcome.txt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/signin.php`: This displays a form.
    The form allows a user (normal or admin) to sign in to the system with their username
    and password; remember that their password isn''t stored in the `users` table,
    only a hash of that password is stored. To support this hashing, we''ll need to
    alter the encryption key in the config file. We discussed this in the *Adjusting
    the config.php file* section of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/change_password.php`: This displays
    a form to anyone who is logged in. The form allows a user (normal or admin) to
    change their password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the e-mail scripts used in this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/email_scripts/welcome.txt`: This contains
    the text for the welcome e-mail that is sent to a new user when they are either
    added by an admin from the `new_user.php` form or when they create an account
    themselves with the form in the `register.php` view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/email_scripts/new_password.txt`: This
    file contains the text informing the user of a password change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/email_scripts/reset_password.txt`: This
    contains a URL that a user can click on to begin the reset password process. The
    URL contains a unique code that the system uses to ensure that it is a genuine
    password change request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the login header and navigation views:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/common/login_header.php`: The css requirements
    of the login form are different from that of the standard `/views/common/header.php`
    view. Specifically, it needs the `signin.css` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/nav/top_nav.php`: This contains navigation
    options that allow admins and normal users to open various pages, and it also
    contains a logout link that allows a user to terminate their session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right, these were the view files, both standard HTML and TXT files for e-mails,
    and so on. Let's go over each file in turn and create them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/register.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This displays a form to a potential user in the system. It requires the user
    to enter a first name, last name, and an e-mail address. The form is submitted
    to `register/index`, which will validate the data inputted by the user. If there
    were no errors, then the user is added to the `users` table, a password is generated
    for them, and a hash is generated and stored as `users.usr_hash` and e-mailed
    to them. The e-mail template is `welcome.txt`, which is given next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/email_scripts/welcome.txt`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the text for the welcome e-mail sent to users when they register. Notice
    that there are three strings of text enclosed in a percent sign (`%`). These are
    strings of text that will be identified by the signup process and replaced using
    the `str_replace()` PHP function with their true values. For example, assume that
    I register with the site. My name is Robert Foster and my e-mail might be `rob-foster@domain.com`.
    The e-mail sent to `rob-foster@domain.com` would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/views/users/forgot_password.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `forgot_password.php` view file provides a short form to any user to begin
    the process of resetting their password. The user can enter their e-mail address
    and press the Go button. The form is submitted to the `password` controller's
    `forgot_password()` function, where it is validated.
  prefs: []
  type: TYPE_NORMAL
- en: If the e-mail address passes validation, then the `forgot_password()` function
    checks to see whether the e-mail address exists in the `users` table. If it exists,
    then a unique code is generated and stored in `users.usr_pwd_change_code`. If
    the code does not exist, then the user is just redirected to the `forgot_password()`
    function to try again.
  prefs: []
  type: TYPE_NORMAL
- en: This code is also appended to a URL and sent in the body of an e-mail to the
    user. The user is instructed to click on the link in the e-mail that will direct
    them to the `password` controller's `new_password()` function. The `new_password()`
    function will load the `users/new_password.php` view file, which will ask the
    user to enter their e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: This e-mail address is validated and `new_password()` will look in the `users`
    table to see whether the e-mail address exists. If it exists, it will check to
    see whether the value of the code in the URL matches the value stored in `users.usr_pwd_change_code`.
    If it does, then it is likely to be genuine and a new password is generated. This
    password is e-mailed to the user. A hash is created using the password and stored
    in `users.usr_hash`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/signin.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The `signin` view is quite simple: a standard sign-in interface. The user can
    enter their e-mail address and password to sign in. Validation errors are echoed
    above the form if there were any errors, and a **Forgot Password** link allows
    the user to use a method to begin the process of resetting their password.'
  prefs: []
  type: TYPE_NORMAL
- en: The error messages are contained in a `div` element with the `alert alert-danger`
    Bootstrap class; I prefer a big red error message rather than one of those limp-wristed
    orange jobbies; however, you can change it to something softer, such as `alert
    alert-warning`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/view_all_users.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `view_all_users.php` view file displays all users within the system in a
    table at any one time. Only admin users are able to see this list.
  prefs: []
  type: TYPE_NORMAL
- en: The table has options for editing and deleting, allowing the user to edit a
    user (loading the `users` controller's `edit_user()` function) and delete a user
    (loading the `users` controller's `delete_user()` function).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/new_user.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `new_user.php` view file displays a form to an admin user, allowing them
    to create a user in the system. The form is submitted to the `users` controller's
    `new_user()` function. Validation errors are displayed above the form. On a successful
    submission (no validation errors), the `new_user()` function will create a password
    for the user and a hash value based on the password. The password will be sent
    to the user in an e-mail. The text of this e-mail is in the `/views/email_scripts/welcome.txt`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/edit_user.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `edit_user.php` view file displays a form to an admin user, allowing them
    to edit a user in the system. The form is accessed when an admin user clicks on
    Edit from the `views/users/list_all_users.php` view file. The form is submitted
    to the `users` controller's `edit_user()` function. Validation errors are displayed
    above the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/me.php` file and add
    the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Again, like the forms in `new_user` and `edit_user` views, this form is similar;
    however, it includes a Reset Email link, which will run the `me` controller's
    `pwd_email()` function to create a new password and e-mail it to the current user.
    The password isn't stored in the database; only a hash value is stored (`users.usr_hash`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/register.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `register.php` view file displays a form to a person wishing to become a
    user within the system. The user is invited to enter a first name and last name
    as well as their e-mail address. They then press the Register button.
  prefs: []
  type: TYPE_NORMAL
- en: The form is submitted to the `register` controller's `index()` function. The
    `index()` function will perform validation, and any errors are displayed above
    the form.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that there were no errors and the form was submitted without problems,
    the `index()` function will attempt to write them to the `users` table. A password
    is generated and sent to the user in the form of an e-mail. The contents of the
    e-mail are stored in the `views/email_scripts/welcome.txt` view file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/signin.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `signin.php` view file displays a form to a user. The user is invited to
    enter their e-mail address and password. The form is submitted to the `signin`
    controller's `index()` function, which will validate the input, and assuming there
    were no errors, attempt to process the sign-in request.
  prefs: []
  type: TYPE_NORMAL
- en: Only users who are active can sign in (`users.usr_is_active = 1`) and admin
    users (`users.usr_accss_level = 1`) will see options that are only available to
    admins. The normal users (`users.usr_access_level = 2`) will be directed to the
    `me` controller.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can, of course, adapt this behavior to any other controller. Instructions
    on how to do this are discussed in the *Ensuring correct access* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/users/change_password.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This view file displays an HTML form to the user, allowing them to enter two
    new passwords for their account. The form is submitted to the `me` controller's
    `change_password()` function, which validates the two passwords supplied and checks
    whether they match each other, apart from various other validation checks. If
    validation is passed, then a hash is created from the supplied passwords and that
    hash is saved to the user's record in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, there are six controllers, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/core/MY_Controller.php`: This is the parent controller class that contains
    common resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/controllers/password.php`: This contains functions that allow the user to
    request a new password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/controllers/me.php`: This provides a location for a normal (that is, not
    an admin) user to alter their account settings: name, e-mail, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/controllers/register.php`: This contains functions that allow a new user
    to sign up and have their details recorded in the `users` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/controllers/signin.php`: This provides a method for users to log in to their
    account and to start a session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/controllers/users.php`: This provides functions for an admin to manage users
    who have signed up and whose records are in the `users` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are our six controllers (one to extend and five that are extended); let's
    go over each one and create them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/core/MY_Controller.php` controller
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `core/MY_Controller.php` controller acts as an overarching parent controller
    for all controllers that require the user to be logged in before they're accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/password.php` controller
    file and add the following code to it. As this controller need not be accessed
    by a logged-in user, we''re not extending it with the `MY_Controller`, but only
    the default `CI_Controller`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The **Reset Password page** provides a form to the user, allowing them to enter
    their e-mail address. Once the user has submitted the form, a code is generated
    and prepended to a URL link. This link is sent in an e-mail to the e-mail address
    provided. The unique code in the URL is used by the `password` controller's next
    function, which is `new_password()`, but we'll go into that later.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define the validation rules for the form in the `users/forgot_password.php`
    view file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If the form is being viewed for the first time or has failed the preceding
    validation rules, then the `$this->form_validation()` CodeIgniter function returns
    `FALSE`, loading the `users/forgot_password.php` view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user''s e-mail passes validation, then we will try to generate a unique
    code and send them an e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we look to see whether the e-mail address supplied in the form actually
    exists in the database. If not, then `$num_res` will not equal `1`. If this is
    the case, then we redirect the user to the `forgot_password()` function. If, however,
    it exists, then we continue to process the request with an if statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We call the `make_code()` function of `Users_model`, which will generate a
    unique code for us and return it as the `$code` variable. This `$code` variable
    is added to the `$data` array and sent to the `update_user_code()` function of
    `Users_model`, which will write the unique code that was just generated to `users.usr_pwd_change_code`
    in preparation for the `new_password()` function shown here (`new_password()`
    is run when the user clicks on the URL in the e-mail we will soon send them):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Right, the code has been created and saved to the correct account in the database,
    and we''re now ready to start with the e-mail. Let''s define the link that will
    go in the e-mail. For this example, it is `http://www.domain.com/password/new_password/UNIQUE-CODE-HERE`;
    however, you''ll need to change this to reflect the path and domain on your servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to load the `reset_password.txt` file. This file contains the template
    text for the body of the e-mail we''ll send. Again, you''ll need to change the
    file path of this file to that on your system. We pass the filename to the `read_file()`
    CodeIgniter function that will open the file and return its contents. The contents
    of this file, that is, the text in the file, is stored as a string in the `$file`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `str_replace()` PHP function, we''ll replace the variables in the
    `$file` variable with the correct values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''re ready to send the e-mail to the user. We''re using PHP''s `mail()`
    function to send the e-mail for us. If the e-mail was sent, then we will redirect
    the user to the sign-in page. If not, then we just reload the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `new_password()` function is accessed when a user clicks on the URL in the
    e-mail they were sent during the execution of the previous function—`forgot_password()`.
    It displays a form to the user, allowing them to enter their new password.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we define the validation rules for the form in the `users/new_password.php`
    view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If the form is being viewed for the first time or has failed the preceding
    validation rules, then the `$this->form_validation()` CodeIgniter function returns
    `FALSE`, loading the `users/new_password.php` view file. The view file contains
    three form elements: one for a user''s email and two for their new password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If the form has passed validation, then we will try to match the code in the
    URL with an account using the e-mail address as a search term:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `does_code_match()` function of `Users_model` returns a false value,
    then there is no record in the database that has the e-mail address and code that
    matches the e-mail address supplied in the form and the code in the URL. If that''s
    the case, we redirect them to the `forgot_password()` function to start the process
    again. If, however, it matches, then this is obviously a genuine request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'As this is most likely a genuine request and the e-mail and unique code have
    matched, let''s create a hash value from the supplied password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We can store this hash in the `$data` array along with the supplied e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s take this e-mail and hash and pass to the `update_user_password()`
    function of `Users_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the user has updated their password, let''s send them an e-mail confirming
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to load the `new_password.txt` file. This file contains the template
    text for the body of the e-mail we''ll send. Again, you''ll need to change the
    file path of this file to that on your system. We pass the filename to the `read_file()`
    CodeIgniter function that will open the file and return its contents. The contents
    of this file, that is, the text in the file, is stored as a string in the `$file`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `str_replace()` PHP function, we''ll replace the variables in the
    `$file` variable with the correct values. Once this e-mail is sent, we redirect
    them to the `signin` controller where they can log in using their new password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/controllers/me.php` controller
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The `me` controller is to be used by users who are not admins—in other words,
    users whose value of `users.usr_access_level` is set to `2` or above.
  prefs: []
  type: TYPE_NORMAL
- en: 'This project allows the user to change their details, name, e-mail address,
    and so on. However, you can adapt the `me` controller to display any number of
    things. Or, using the following code in the `__construct()` function of another
    controller, you can provide functions for specific levels of users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: We will go through this in more detail later on in the *Putting it all together*
    section of this chapter; however, let's quickly mention it here anyway. The preceding
    code checks to see whether the user is logged in and then checks the users' access
    level (`users.usr_access_level`).
  prefs: []
  type: TYPE_NORMAL
- en: If the `users.usr_access_level` value is not greater than or equal to `2` (which
    is the level of a normal user), then it will redirect them to `signin` or `signout`—in
    other words, it will log them out and terminate their session.
  prefs: []
  type: TYPE_NORMAL
- en: 'By adjusting the value that is compared (for example `1`, `2`, `3`, and so
    on), you can ensure that users with a specific value can only access this controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index()` function allows a normal user to update their details in the
    database. First, we set our validation rules for the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If the form is being viewed for the first time or has failed the preceding
    validation rules, then the `$this->form_validation()` CodeIgniter function returns
    `FALSE`, loading the `users/me.php` view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Here, we define the setting for the HTML form items to be displayed in the `users/me.php`
    view file. As we are editing a user who is already logged in, we'll need to grab
    their details from the database in order to prepopulate the form elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We call the `get_user_details()` function of `Users_model`, passing to it the
    user ID fetched from the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have fetched the users details and saved them to local variables, we
    apply them to the form items. To do this, we use the `set_value()` CodeIgniter
    function, the first parameter being the name of the form element (for example,
    `<input type="text" name="this-is-the-name" />`) and the second parameter being
    the actual value of the form element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that validation has passed, we''ll save the posted data to the `$data`
    array in preparation to save it to the `process_update_user()` function of `Users_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The `me` controller also contains the `change_password()` function. This allows
    the user who is accessing the controller to change their password. Once accessed,
    the `/views/users/change_password.php` view file displays a simple form that asks
    for a new password. Once the form is submitted and validated successfully, a hash
    is created using the new password provided and saved to the logged-in user''s
    record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/controllers/register.php` controller
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The `index()` function displays a small form to a new user. This form allows
    them to enter basic information such as the e-mail address and name. Once the
    user presses the Register button and for form is successfully validated, the user
    is sent a welcome e-mail and is added to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we set the validation rules for the form in `views/users/register.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the form is successfully validated, we create an e-mail for them. This
    is done by using the `random_string()` CodeIgniter function. We generate an eight-character
    string of alphanumeric digits. This is stored in the `$password` variable—we''ll
    need this to create the hash (which will be stored in `users.usr_hash`) and to
    send it to the user in an e-mail (otherwise they won''t know what their password
    is):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'After we create their password, we create a hash value of it. This is done
    by passing `$password` to `$this->encrypt->sha1()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we save everything to the `$data` array in preparation of writing to the
    database. This is done by calling the `register_user()` function of `Register_model`
    and passing it the `$data` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `register_user()` function returns `true`, then we send the user an
    e-mail, otherwise we send them back to the `register` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/controllers/signin.php` controller
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The `index()` function displays a form to the user, allowing them to enter their
    e-mail address and password. It also handles any validation from the sign-in form.
  prefs: []
  type: TYPE_NORMAL
- en: 'First off, the `index()` function checks to see whether the user is already
    logged in—after all, there''s no point in someone trying to log in when they''re
    already logged in. So, we check for the value of the `logged_in` userdata item.
    If this exists and equals `TRUE`, then they must already be logged in. If this
    is the case, then we work out their user level to see whether they are a normal
    user or an admin. If they are an admin, they''re redirected to the admin area,
    that is, the `users` controller; if they are not an admin user, they are redirected
    to the `me` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'If they get to this point in the code, then they are not logged in, which means
    that we have to display a form so they can log in. Now, we define the validation
    rules for the sign-in form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming that the validation has passed, we store their e-mail and password
    in local variables, load `Signin_model`, and call the `does_user_exist()` function,
    passing to it the e-mail address supplied by the user. If anything other than
    one record is found, then the form redirects to the `signin` controller for the
    user to try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If, however, exactly one record is found, then we will try to log them in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We generate a hash from the password supplied by the user and compare it to
    the hash value in the database result object returned by the `does_user_exist()`
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user gets to this part in the code, then it means that the hash values
    didn''t match, so we''ll display the sign-in view with an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if the user gets here then the hash values match, the password supplied
    by the user must be correct. So, we package a few items into the `$data` array,
    which they will find useful once they are logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a session for them with `$this->session->set_userdata()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we work out what controller to redirect them to. If they are an admin
    user (`users.usr_access_level = 1`), they will be directed to `users`; if they
    are a normal user (`users.usr_access_level = 2`), they will be directed to the
    `me` controller; however, if `users.usr_access_level` is anything other than `1`
    or `2`, then they are also directed to the `me` controller by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: What comes up must come down, or something like that; anyway. what's logged
    in must be logged out (dreadful!) anyway—`signout()` is a quick function that
    destroys the session and redirects the user to the `signin` controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `signin` controller is called when a user (admin or otherwise) clicks on
    the Logout link in the `top_nav.php` view. Once redirected, the `signin` controller
    will recognize they are no longer logged in and display the sign-in form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/controllers/users.php` controller
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, the first thing to notice is the `__construct()` function. We test the
    user''s access level (`users.usr_access_level`)—if it is not equal to `1` at least,
    then they are not an admin user—so, we redirect them out of the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's take a look at the preceding function. The `index()` function loads
    the `get_all_users()` function of `Users_model` that, as the name suggests, gets
    all users in the `users` table. The result of this is stored in the `$data` array's
    `query` item and is then passed to the `views/users/view_all_users.php` view file.
    This view file will display all users in a table format with two options for editing
    and deleting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `new_user()` function handles the creation of users within the system.
    Initially, the `new_user()` function sets the validation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'After we set the validation rules (shown in the preceding code), we then test
    for the return value of `$this->form_validation()`. If it''s the first time the
    page is accessed or any form item fails validation, then `FALSE` is returned,
    and the following code is run. Here, we define the settings for the HTML form
    elements displayed in the `views/users/new_user.php` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Assuming that the form data has passed validation, we begin to create a password
    for the user. We use the `random_string()` CodeIgniter function to generate an
    alphanumeric string of characters 8 digits in length.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then generate a hash from this password using the `$this->encrypt->sha1()`
    CodeIgniter function, as shown in the following snippet. Later on in the code,
    we send the password to the user in an e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'We save the form input and `$hash` to the `$data` arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it is stored in the `$data` array, we attempt to save the hash to the
    database with the `process_create_user()` function of `Users_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Should the admin user choose to edit a user's details, they can click on Edit
    against the user's name when they're viewing the full user list, as described
    earlier for the `index()` function. If they do press Edit, then the `edit_user()`
    function is called—this is a basic function that uses the form validation functionality
    to validate the user's details should the form be submitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, we begin by defining the form validation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'The user''s primary key (`users.usr_id`) is appended to the Edit link and passed
    to the `edit_user()` function. This is used to look up the user in the `users`
    table. The `get_user_details($id)` function of `Users_model` takes one parameter—the
    value of `$id` (as passed in the Edit link or posted using `$_POST` if the form
    is submitted)—and looks for the user. Once found, the details of the query are
    written to local variables and saved to the `$data` array. This, in turn, is passed
    to the `edit_user.php` view where it is used to populate the form items with the
    correct data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'After we set the validation rules, we test for the return value of `$this->form_validation()`.
    If it''s the first time the page is accessed or any form item fails validation,
    then `FALSE` is returned, and the following code is run. Here, we define the settings
    for the HTML form elements displayed in the `views/users/edit_user.php` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'We build the HTML form elements here, defining their settings in the `$data`
    array, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming that the form input passed validation, we save the new user information
    to the `$data` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Once everything is added to the `$data` array, we try to update the user''s
    details using the `process_update_user()` function of `Users_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'By pressing the Delete link in the `views/users/view_all_users.php` file, the
    `users` controller''s `delete_user()` function is called. Like the `edit_user()`
    function, `delete_user()` uses the `users_usr_id` primary key appended to the
    end of the Delete link URL and passes it to the `delete_user($id)` function of
    `Users_model`. This model function takes one parameter—the `$id` (as passed in
    the Delete link or posted using `$_POST` if the form is submitted)—and deletes
    the user from the `users` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Creating the language file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, so that's the code. Now, let's take a look at some ways in which it can
    be used—this will help us get a good idea about how it all interacts with each
    other.
  prefs: []
  type: TYPE_NORMAL
- en: User registration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the sequence of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: A user opens the `register` controller in their browser and is prompted to enter
    their first name, last name, and e-mail address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user submits the form and the form is posted to the `index()` register function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `register` controller saves the user's details to the `users` table and
    generates a password for them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is sent to them in an e-mail and is sent to the email address submitted
    earlier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can then log back in to the system and amend their details as they
    wish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring correct access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to allocate controllers and even certain functions to be accessed
    by users with a specific access level only. We touched on this earlier in the
    chapter; however, we're going to discuss it here as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following code snippet, specifically, the parts in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: This function can be placed into any controller or function as you wish; doing
    so will protect this code block from access to users without the correct access
    level. The first part checks whether a user is logged in (that is, if a session
    exists), but the second comparison looks at the user access level set at the sign-in.
    By adjusting the value checked for, you can tailor access to specific users, user
    groups, or access levels.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So there you are—a simple auth system using Twitter Bootstrap as a frontend.
    It should be simple to adapt and amend to suit your needs but still enable you
    to do the basics.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will look at creating a simple e-commerce site that will
    allow you to have a simple shop and a look at options on how you can extend it.
  prefs: []
  type: TYPE_NORMAL
