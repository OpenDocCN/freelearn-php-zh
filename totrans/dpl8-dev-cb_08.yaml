- en: Multilingual and Internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes to make sure that your
    site is multilingual and internationalized:'
  prefs: []
  type: TYPE_NORMAL
- en: Translating administrative interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multilingual views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover the multilingual and internationalization features of
    Drupal 8, which have been greatly enhanced since Drupal 7\. The preceding version
    of Drupal required many extra modules to provide internationalization efforts,
    but now the majority is provided by Drupal core.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal core provides the following multilingual modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Language**: This provides you with the ability to detect and support multiple
    languages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface translation**: This takes installed languages and translates strings
    that are presented through the user interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration translation**: This allows you to translate configuration entities,
    such as date formats and views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content translation**: This brings the power of providing content in different
    languages and displaying it according to the current language of the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each module serves a specific purpose in creating the multilingual experience
    for your Drupal site. Behind the scenes, Drupal supports the language code for
    all entities and cache contexts. These modules expose the interfaces to implement
    and deliver internationalized experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Translating administrative interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interface translation module provides a method to translate strings found
    in the Drupal user interface. Harnessing the Language module, interface translations
    are automatically downloaded from the Drupal translation server. By default, the
    interface language is loaded through the language code as a path prefix. With
    the default **Language** configuration, paths will be prefixed with the default
    language.
  prefs: []
  type: TYPE_NORMAL
- en: Interface translations are based on strings provided in the code that are passed
    through the internal translation functions.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will enable Spanish, import the language files, and review
    the translated interface strings to provide missing or custom translations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 provides an automated installation process of translation files. For
    this to work, your web server must be able to communicate with [https://localize.drupal.org/](https://localize.drupal.org/).
    If your web server cannot automatically download the files from the translation
    server, you can refer to the manual installation instructions, which will be covered
    in the *There's more...* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Extend and install the Interface Translation module. It will prompt you
    to enable the Language, File, and Field modules to be installed, if they are not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the module is installed, click on Configuration. Go to the Languages page
    under the Regional and Language section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Add language in the languages overview table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bd4bb6fc-208b-47d9-8323-489ac9f7244c.png)'
  prefs: []
  type: TYPE_IMG
- en: The Add language page provides a select list of all available languages that
    the interface can be translated to. Select Spanish, and then click on Add language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A batch process will run, install the translation language files, and import
    them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The INTERFACE TRANSLATION column specifies the percentage of active translatable
    interface strings that have a matching translation. Clicking on the link allows
    you to view the User interface translation form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08b05839-9e92-4b83-9770-cbb6820f87d5.png)'
  prefs: []
  type: TYPE_IMG
- en: The Filter Translatable Strings form allows you to search for translated strings
    or untranslated strings. Select Only untranslated strings from the Search in list
    and click on Filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the textbox on the right-hand side of the screen, a custom translation
    can be added to Only untranslated strings. Type in a translation for the item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/281b1f93-81c5-43a9-8378-485bd8144cb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save translations to save the modification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `/es/node/add`, and you will note that the **Basic page** content type
    description will now match your translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interface translation module provides `\Drupal\locale\LocaleTranslation`,
    which implements `\Drupal\Core\StringTranslation\Translator\TranslatorInterface`.
    This class is registered under the `string_translation` service as an available
    lookup method.
  prefs: []
  type: TYPE_NORMAL
- en: When the `t` function or the `\Drupal\Core\StringTranslation\StringTranslationTrait::t`
    method is invoked, the `string_translation` service is called to provide a translated
    string. The `string_translation` service will iterate through the available translators
    and return a translated string, if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Developers need to note that this is a key reason to ensure that module strings
    are passed through translation functions. It allows you to identify strings that
    need to be translated.
  prefs: []
  type: TYPE_NORMAL
- en: The translator provided in the interface translation will then attempt to resolve
    the provided string against known translations for the current language. If a
    translation has been saved, it will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will explore ways to install other languages, check translation statuses,
    and do much more in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Manually installing language files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Translation files can be manually installed by downloading them from the Drupal.org
    translation server and uploading them through the language interface. You can
    also use the import interface to upload custom **gettext portable object** (**.po**)
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal core and most contributed projects have `.po` files available at the
    Drupal translations site, [https://localize.drupal.org](https://localize.drupal.org).
    On the site, click on Download to download a `.po` file for Drupal core in all
    available languages. Additionally, clicking on a language will provide more translations
    for a specific language across projects, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fb6a0ef-184e-4ad0-b2d7-1466a4a53ba4.png)'
  prefs: []
  type: TYPE_IMG
- en: You can import a `.po` file by going to the `User interface translation` form
    and selecting the `Import` tab. You will need to select the `.po` file and then
    the appropriate language. You can treat the uploaded files as custom-created translations.
    This is recommended if you are providing a custom translation file that was not
    provided by Drupal.org. If you are updating Drupal.org translations manually,
    make sure that you check the box that overwrites existing noncustom translations.
    The final option allows you to replace customized translations if the `.po` file
    provides them. This can be useful if you have translated missing strings that
    might now be provided by the official translation file.
  prefs: []
  type: TYPE_NORMAL
- en: Checking translation status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you add new modules, the available translations will grow. The `Interface
    translation` module provides a translation status report that is accessible from
    the `Reports` page. This will check the default translation server for the project
    and check whether there is a `.po` available or if it has changed. In the event
    of a custom module, you can provide a custom translation server, which is covered
    in *P**roviding translations for a custom module*.
  prefs: []
  type: TYPE_NORMAL
- en: If an update is available, you will be alerted. You can then import the translation
    file updates automatically or download and manually import them.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `User interface translation` form, there is an `Export` tab. This form
    will provide a `Gettext Portable Object` (`.po`) file. You can export all the
    available source text that is discovered in your current Drupal site without translations.
    This will provide a base `.po` for translators to work on.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can download a specific language. Specific language downloads
    can include uncustomized translations, customized translations, and missing translations.
    Downloading customized translations can be used to help make contributions to
    the multilingual and internationalization efforts of the Drupal community.
  prefs: []
  type: TYPE_NORMAL
- en: Interface translation permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interface translation module provides a single permission called **Translate
    interface text**. This permission grants users the permission to interact with
    all the module's capabilities. It is flagged with a security warning, as it allows
    users with this permission to customize all the output text presented to them.
  prefs: []
  type: TYPE_NORMAL
- en: However, it does allow you to provide a role for translators and limits their
    access to just translation interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Using interface translation to customize default English strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interface translation module is useful beyond its typical multilingual purposes.
    You can use it to customize strings in the interface that are not available to
    be modified through typical hook methods, or if you are not a developer.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, you will need to edit the English language from the Languages screen.
    Check the checkbox for Enable interface translation for English and click on Save
    language. You will now have the ability to customize existing interface strings.
  prefs: []
  type: TYPE_NORMAL
- en: This is only recommended for areas of the interface that cannot already be customized
    through the normal user interface or provided API mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Interface text language detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Language` module provides detection and selection rules. By default, the
    module will detect the current language based on the URL, with the language code
    acting as a prefix to the current path. For example, `/es/node` will display the
    node listing page in Spanish, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca433927-a762-48ce-b330-5a14973db728.png)'
  prefs: []
  type: TYPE_IMG
- en: You can have multiple detection options enabled at once and use the ordering
    to decide which takes precedence. This can allow you to use the language code
    in the URL first, but, if they are missing, a fallback to the language is specified
    by the user's browser.
  prefs: []
  type: TYPE_NORMAL
- en: Some detection methods have settings. For instance, the URL detection method
    can be based on the default path prefix or subdomains.
  prefs: []
  type: TYPE_NORMAL
- en: Providing translations for a custom module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules can provide custom translations in their directories or point to a remote
    file. These definitions are added to the module's `info.yml` file. First, you
    will need to specify the `interface translation project` key if it differs from
    the project's machine name.
  prefs: []
  type: TYPE_NORMAL
- en: You will then need to specify a server pattern through the `interface translation
    server pattern` key. This can be a relative path to Drupal's root, such as `modules/custom/mymodule/translation.po`,
    or a remote file URL at `http://example.com/files/translations/mymodule/translation.po`.
  prefs: []
  type: TYPE_NORMAL
- en: Distributions (or other modules) can implement `hook_locale_translation_projects_alter`
    to provide this information on behalf of modules or to alter defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'The server pattern accepts the following different tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%core`: Indicates the version of a course (for example, 8.x)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%project`: Indicates the project''s name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%version`: Indicates the current version string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%language`: Indicates the language code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information on the interface translation keys and variables can be found
    in the `local.api.php` document file located in the interface translation module's
    base folder.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the Drupal translation server at [https://localize.drupal.org/translate/drupal8](https://localize.drupal.org/translate/drupal8%20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can contribute using the localization server at [https://www.drupal.org/node/302194](https://www.drupal.org/node/302194)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the `locale.api.php` documentation at [https://api.drupal.org/api/drupal/core%21modules%21locale%21locale.api.php/8](https://api.drupal.org/api/drupal/core%21modules%21locale%21locale.api.php/8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to PO and POT files at [https://www.drupal.org/node/1814954](https://www.drupal.org/node/1814954)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Configuration translation** module provides an interface to translate
    configurations with interface translation and language as dependencies. This module
    allows us to translate configuration entities. The ability to translate configuration
    entities adds an extra level of internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: Interface translation allows us to translate strings provided in our Drupal
    site's code base. Configuration translation allows us to translate importable
    and exportable configuration items that we created, such as site title or date
    formats.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will translate date format configuration entities. We will
    provide localized date formats for Danish to provide a more internationalized
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your Drupal site needs to have two languages enabled in order to use Configuration
    Translation. Install Danish from the Languages interface.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Extend and install the Configuration Translation module. It will prompt
    you to enable the Interface Translation, Language, File, and Field modules to
    be installed, if they are not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the module is installed, go to Configuration. Then, go to the Configuration
    translation page under the Regional and Language section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the list for the Date format option in the configuration entity option
    table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89c4343e-febd-4b52-9a1c-4764915fea71.png)'
  prefs: []
  type: TYPE_IMG
- en: We will translate the Default long date format to represent the Danish format.
    Click on the Translate for the Default long date format row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Add to create a Danish translation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4888dbe3-8322-445a-9160-0018adb68ad8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For Danish, we will provide the following PHP date format: `l j. F, Y - H.i`.
    This will display the day of the week, the day of the month, the month, the full
    year, and the 24-hour notation for the time.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever a user is browsing your Drupal site with Danish as their language,
    the date format will now be localized for their experience.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Configuration Translation module requires Interface Translation; however,
    it does not work in the same fashion. The module modifies all entity types that
    extend the `\Drupal\Core\Config\Entity\ConfigEntityInterface` interface. It adds
    a new handler under the `config_translation_list` key. This is used to build a
    list of available configuration entities and their bundles.
  prefs: []
  type: TYPE_NORMAL
- en: The module alters the configuration schema in Drupal, and updates the default
    configuration element definitions to use a specified class under `\Drupal\config_translation\Form`.
    This allows `\Drupal\config_translation\Form\ConfigTranslationFormBase` and its
    child classes to properly save translated configuration data, which can then be
    modified through the configuration translation screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the configuration is saved, it is identified as being part of a collection.
    The collection is identified as `language.LANGCODE`, and all translated configuration
    entities are saved and loaded by this identifier. The following is an example
    of how the configuration items are stored in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/beb3fb72-cc08-45b7-a0f7-3ca8cf64e5ee.png)'
  prefs: []
  type: TYPE_IMG
- en: When browsing the site in the `es` language code, the appropriate `block.block.bartik_account_menu`
    configuration entity will be loaded. If you are using the default site, or no
    language code, the configuration entity with an empty collection will be used.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration entities and the ability to translate them are a big part of Drupal
    8's multilingual capabilities. We'll explore them in detail in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Altering configuration translation info definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modules can invoke the `hook_config_translation_info_alter` hook to alter discovered
    configuration mappers. For instance, the **Node** module does this to modify the
    `node_type` configuration entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This updates the `node_type` definition to use the `\Drupal\node\ConfigTranslation\NodeTypeMapper`
    custom mapper class. This class adds the node type's title as a configurable translation
    item.
  prefs: []
  type: TYPE_NORMAL
- en: Translating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views are configuration entities. When the Configuration translation module
    is enabled, it is possible to translate Views. This will allow you to translate
    display titles, exposed form labels, and other items. Refer to the `Creating a
    multilingual view` recipe in this chapter for more information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Creating a Multilingual View* recipe of [*Chapter 8*](459ccdb8-7d36-44a8-b476-e34649e310a2.xhtml),
    *Multilingual and Internationalization.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The content translation module provides a method to translate content entities,
    such as nodes and blocks. Each content entity needs to have translation enabled,
    which allows you to granularly decide what properties and fields are translated.
  prefs: []
  type: TYPE_NORMAL
- en: Content translations are duplications of the existing entity, but are flagged
    with a proper language code. When a visitor uses a language code, Drupal attempts
    to load content entities using that language code. If a translation is not present,
    Drupal will render the default untranslated entity.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your Drupal site needs to have two languages enabled to use Content translation.
    Install Spanish from the Languages interface.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Extend and install the Content translation module. It will prompt you
    to enable the Language modules to be installed, if they are not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the module is installed, go to Configuration and then to the Content language
    and translation page under the Regional and Language section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the checkbox next to Content to expose settings for the current content
    types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the content translation for the Basic page and keep the provided default
    settings that enable translation for each field. Click on Save configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f612655-ee3e-476d-9140-b4dd0a74a218.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new Basic page node. We will create this in the site's default language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When viewing the new node, click on the Translate tab. From the Spanish language
    row, click on Add to create a translated version of the node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/06703719-0a07-444d-841c-44fa2a355cc2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The content will be prepopulated with the default language''s content. Replace
    the title and body with the translated text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26d04112-75f2-43eb-96d0-ffcd9abf118f.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save and keep published (this translation) to save the new translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Content translation module works by utilizing language code flags. All content
    entities and field definitions have a language code key. A content entity has
    a language code column, which specifies what language the content entity is for.
    Field definitions also have a language code column, which is used to identify
    the translation for the content entity. Content entities can provide handler definitions
    to handle translations, or else the Content translation module will provide its
    own.
  prefs: []
  type: TYPE_NORMAL
- en: Each entity and field record is saved with the proper language code to use.
    When an entity is loaded, the current language code is taken into consideration
    to ensure that the proper entity is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are additional operations to translate content; we will cover them in
    the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Flagging translations as outdated
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Content translation module provides a mechanism to flag translated entities
    as possibly being outdated. The Flag other translations as outdated flag provides
    a way to make a note of entities that will need updated translations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3687cf10-3325-4832-b750-468d5feb86e8.png)'
  prefs: []
  type: TYPE_IMG
- en: This flag does not change any data, but rather provides a moderation tool. This
    makes it easy for translators to identify content, which has been changed and
    requires updating. The translation tab for the content entity will highlight all
    translations, which are still marked as outdated. As they are changed, the editor
    can uncheck the flag.
  prefs: []
  type: TYPE_NORMAL
- en: Translating content links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mostly, Drupal menus contain links to nodes. Menu links are not translated by
    default, and the Custom menu links option must be enabled under Content translation.
    You will need to translate node links manually from the menu administration interface.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling a menu link from the node create and edit form will not work with translations.
    If you edit the menu settings from a translation, it will edit the untranslated
    menu link.
  prefs: []
  type: TYPE_NORMAL
- en: Defining translation handlers for entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Content translation module requires entity definitions to provide information
    about translation handlers. If this information is missing, it will provide its
    own defaults. The *Entity API* is covered in [*Chapter 10*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml),
    *The Entity API*, but we will quickly discuss how the content translation module
    interacts with the Entity API.
  prefs: []
  type: TYPE_NORMAL
- en: Content entity definitions can provide a `translation` handler. If not provided,
    it will default to `\Drupal\content_translation\ContentTranslationHandler`. A
    node provides this definition and uses it to place the content translation information
    into the vertical tabs.
  prefs: []
  type: TYPE_NORMAL
- en: The `content_translation_metadata` key defines how to interact with translation
    metadata information, such as flagging other entities as outdated. The `content_translation_deletion`
    key provides a form class to handle entity translation deletion.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, as of 8.0.1, no core modules provide implementations that override
    the default `content_translation_metadata` or `content_translation_deletion`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [*Chapter 10*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml), *The Entity
    API*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multilingual views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views, being configuration entities, are available for translation. However,
    the power of multilingual views does not lie just in configuration translation.
    Views allow you to build filters that react to the current language code. This
    ensures that the content, which has been translated into the user's language,
    is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a multilingual view that provides a block showing
    recent articles. If there is no content, we will display a translated `no results`
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your Drupal site needs to have two languages enabled in order to use Content
    Translation. Install Spanish from the Languages interface. Enable content translation
    for Articles. You will also need to have some translated content.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Views from Structure, and click on Add view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a view name, such as `Recent articles`, and change the type of content
    to Article. Mark that you would like to Create a block and then click on Save
    and edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new Filter criteria. Search for Translation language and add the filter
    for the Content category. Click on Add and configure filter criteria. Set the
    filter to check the Interface text language selected for page. This will only
    display that the content that has been translated or the base language is the
    current language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80007260-af25-43f2-bbe9-f23b94cc27a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Add next to No Results and search for Text area. Check the checkbox
    and click on Add and configure no results behavior. Provide some sample text,
    such as `Currently no recent articles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Translate view tab. Click on Add for the Spanish row to translate
    the view for the language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the Master display settings and then the Recent articles display options
    fieldsets. Modify the Display title option to provide a translated title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c3cc463-801a-42a0-9f6a-8764e8cac093.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Expand No results behavior to modify the text on the right-hand side of the
    screen using the textbox on the left-hand side of the screen as the source for
    the original text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10c296fb-ea80-41f0-9b87-958b3c44bb3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the block on your Drupal site by going to Structure and then to Block
    Layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the site through `/es` and note the translated `Views` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3b2996d-189e-4a06-a092-0c6936577bff.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views provide the Translation language filter that builds off this element.
    The Views plugin systems provide a mechanism to gather and display all available
    languages. These will be saved as a token internally and then substituted with
    the actual language code when the query is executed. If a language code is no
    longer available, the `Content language for selected` page and views will fall
    back to the current language when viewed.
  prefs: []
  type: TYPE_NORMAL
- en: You will come across this option when editing views provided by Drupal core
    or contributed modules. Although this is not an option in the user interface,
    it is a default practice to add a language filter defined as `***LANGUAGE_language_content***`,
    which will force the view to be multilingual.
  prefs: []
  type: TYPE_NORMAL
- en: The filter tells Views to query based on the language code of the entity and
    its fields.
  prefs: []
  type: TYPE_NORMAL
- en: Views are configuration entities. The Configuration translation module allows
    you to translate views. Views can be translated from the main Configuration translation
    screens from the `Configuration` area or by editing individual views.
  prefs: []
  type: TYPE_NORMAL
- en: Most translation items will be under the Master display settings tab unless
    overridden in specific displays. Each display type will also have its own specific
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even more can be done to translate your views; we will discuss in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Translating exposed form items and filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each view can translate the exposed form from the `Exposed Form` section. This
    does not translate the labels on the form but the form elements. You can translate
    the `submit` button text, `reset` button label, `sort` label, and `ascending`
    or `descending` .
  prefs: []
  type: TYPE_NORMAL
- en: You can translate the labels for exposed filters from the `Filters` section.
    Each exposed filter will show up as a collapsible fieldset, allowing you to configure
    the administrative label and front-facing label.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41784ca9-6035-4b2a-8b52-18d18e479de6.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, available translations need to be imported through the global interface
    translation context.
  prefs: []
  type: TYPE_NORMAL
- en: Translating display and row format items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some display formats have translatable items. These can be translated in each
    display mode''s section. For example, the following items can be translated with
    their display format:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Table` format allows you to translate the table summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RSS feed` format allows you to translate the feed description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Page` format allows you to translate the page's title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Block` format allows you to translate the block's title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating page display menu items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Custom menu links can be translated through the Content translation module.
    Views which use a page display do not create custom menu link entities. So it
    must be translated through the View itself. The `Views` module takes all views
    with a page display and registers their paths into the routing system directly
    as if defined in a module''s `routing.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0b187c4-b6ec-43d3-a43d-118776ae5d9d.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, the **People** view that lists all users can be translated to have
    an updated tab name and link description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [*Chapter 3*](2015063a-2e03-45d2-822d-892e87f10e41.xhtml), *Displaying
    Content through Views*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
