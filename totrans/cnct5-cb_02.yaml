- en: Chapter 2. Working with Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom block type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using block controller callback functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending variables from the controller to the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding items to the page header and footer from the block controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom block templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including JavaScript in block forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including JavaScript in the block view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including CSS in the block view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a block type by its handle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a block to a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the blocks from an area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blocks in concrete5 are small, modular pieces of visual presentation, which
    can add virtually any type of content to your website. Blocks can contain text
    content, HTML code, images, videos, an interactive map, or anything else you could
    think of. When you edit content on your concrete5 website, you are editing an
    instance of the content block type. Blocks get added to pages in special areas
    that get specified in theme layouts. concrete5 comes with a wide variety of different
    block types out of the box, and it is easy to create your own custom block types,
    enabling you to add unlimited potential to your website.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create a custom block type from scratch. This block
    type will just display some text that the user can edit through the **CMS** interface,
    and will serve as a basic "Hello World" example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom block type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating block types is a great way to add custom functionality to a website.
    This is the preferred way to add things like calendars, dealer locators, or any
    other type of content that is visible and repeatable on the frontend of the website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code for this recipe is available to download from the book's website for
    free. We are going to create a fully functioning block type that will display
    content on our website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating a custom block type are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you will need to create a directory in your website's root `/blocks`
    directory. The name of the directory should be underscored and will be used to
    refer to the block throughout the code. In this case, we will create a new directory
    called `/hello_world`.![How to do it...](img/4548OS_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have created the `hello_world` directory, you will need to create
    the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`controller.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edit.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view.css`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we will add code to each of the files. First, we need to set up the `controller`
    file. The `controller` file is what powers the block. Since this is a very basic
    block, our controller only will contain information to tell concrete5 some details
    about our block, such as its name and description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to `controller.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that the class name is `HelloWorldBlockController`. concrete5 conventions
    dictate that you should name your block controllers with the same name as the
    `block` directory in camel case (for example: CamelCase) form, and followed by
    `BlockController`. The `btTable` class variable is important, as it tells concrete5
    what database table should be used for this block. It is important that this table
    doesn''t already exist in the database, so it''s a good idea to give it a name
    of `bt` (short for "block type") plus the camel cased version of the block name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the controller is set up, we need to set up the `db.xml` file. This
    file is based off of the ADOXMLS format, which is documented at [http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema).
    This XML file will tell concrete5 which database tables and fields should be created
    for this new block type (and which tables and fields should get updated when your
    block type gets updated).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following XML code to your `db.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'concrete5 blocks typically have both an `add.php` and `edit.php` file, both
    of which often do the same thing: show the form containing the block''s settings.
    Since we don''t want to repeat code, we will enter our form HTML in a third file,
    `form.php`, and include that file in both `add.php` and `edit.php`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once that is all set, add this line of code to both `add.php` and `edit.php`
    to have this HTML code appear when users add and edit the block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following HTML to your `view.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, for a little visual appeal, add the following code to `view.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now all of the files have been filled with the code to make our Hello World
    block function. Now we need to install this block in concrete5 so we can add it
    to our pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To install the new block, you will need to sign into your concrete5 website
    and navigate to `/dashboard/blocks/types/`. If you happen to get a PHP fatal error
    here, clear your concrete5 cache by visiting `/dashboard/system/optimization/clear_cache`
    (it is always a good idea to disable the cache while developing in concrete5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the **Block Types** screen, you should see your **Hello World**
    block, ready to install. Click on the **Install** button.![How to do it...](img/4548OS_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the block is installed and ready to add to your site!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's go through the code that we just wrote, step-by-step.
  prefs: []
  type: TYPE_NORMAL
- en: In `controller.php`, there are a few protected variables at the top of the class.
    The `$btTable` variable tells concrete5 which table in the database holds the
    data for this block type. The `$btInterfaceWidth` and `$btInterfaceHeight` variables
    determine the initial size of the dialog window that appears when users add your
    block to a page on their site.
  prefs: []
  type: TYPE_NORMAL
- en: We put the block's description and name in special `getter` functions for one
    reason, to potentially support for translations down the road. It's best practice
    to wrap any strings that appear in concrete5 in the global `t()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `db.xml` file tells concrete5 what database tables should be created when
    this block gets installed. This file uses the ADOXMLS format to generate tables
    and fields. In this file, we are telling concrete5 to create a table called `btHelloWorld`.
    That table should contain three fields, an `ID` field, the `title` field, and
    the `content` field. The names of these fields should be noted, because concrete5
    will require them to match up with the names of the fields in the HTML form.
  prefs: []
  type: TYPE_NORMAL
- en: In `form.php`, we are setting up the settings form that users will fill out
    to save the block's content. We are using the Form Helper to generate the HTML
    for the various fields. Notice how we are able to use the `$title` and `$content`
    variables without them being declared yet. concrete5 automatically exposes those
    variables to the form whenever the block is added or edited. We then include this
    form in the `add.php` and `edit.php` files.
  prefs: []
  type: TYPE_NORMAL
- en: The `view.php` file is a template file that contains the HTML that the end users
    will see on the website. We are just wrapping the title in an `<h1>` tag and the
    content in a `<div>` with a class of `.content`.
  prefs: []
  type: TYPE_NORMAL
- en: concrete5 will automatically include `view.css` (and `view.js`, if it happens
    to exist) if they are present in your block's directory. Also, if you include
    an `auto.js` file, it will automatically be included when the block is in edit
    mode. We added some basic styling to the `.content` class and concrete5 takes
    care of adding this CSS file to your site's `<head>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Sending variables from the controller to the view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding items to the page header and footer from the block controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including CSS in the block view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including JavaScript in the block view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using block controller callback functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The block controller class contains a couple of special functions that get automatically
    called at different points throughout the page load process. You can look into
    these callbacks to power different functionalities of your block type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, you will need a block type created and installed. See the previous
    recipe for a lesson on creating a custom block type. We will be adding some methods
    to `controller.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for using block controller callback functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your block's `controller.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new function called `on_start()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a `die` statement that will get fired when the controller is loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh any page containing the block type. The page should stop rendering before
    it is complete with your debug message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure to remove the `die` statement, otherwise your block won't work anymore!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will call the various callback functions at different points during
    the page load process. The `on_start()` function is the first to get called. It
    is a good place to put things that you want to happen before the block is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: The next function that gets called depends on how you are interacting with the
    block. If you are just viewing it on a page, the `view()` function gets called.
    If you are adding or editing the block, then the `add()` or `edit()` functions
    will get called as appropriate. These functions are a good place to send variables
    to the view, which we will show how to do in the next recipe. The `save()` and
    `delete()` functions also get called automatically at this point, if the block
    is performing either of those functions.
  prefs: []
  type: TYPE_NORMAL
- en: After that, concrete5 will call the `on_before_render()` function. This is a
    good time to add items to the page header and footer, since it is before concrete5
    renders the HTML for the page. We will be doing this later on in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `on_page_view()` function is called. This is actually run once
    the page is being rendered, so it is the last place where you have the code executed
    in your block controller. This is helpful when adding HTML items to the page.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following functions can be added to your controller class and they will
    get called automatically at different points throughout the block's loading process.
  prefs: []
  type: TYPE_NORMAL
- en: '`on_start`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`on_before_render`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`on_page_view`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a complete list of the callback functions available, check out the source
    for the block controller library, located in `/concrete/core/libraries/block_controller.php`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Sending variables from the controller to the view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding items to the page header and footer from the block controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending variables from the controller to the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common task in MVC programming is the concept of setting variables from a
    controller to a view. In concrete5, blocks follow the same principles. Fortunately,
    setting variables to the view is quite easy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will use the block type that was created in the first recipe of
    this chapter. Feel free to adapt this code to work in any block controller, though.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your block''s controller, use the `set()` function of the `controller` class
    to send a variable and a value to the view. Note that the view doesn''t necessarily
    have to be the `view.php` template of your block. You can send variables to `add.php`
    and `edit.php` as well. In this recipe, we will send a variable to `view.php`.
    The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your block's `controller.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a function called `view()` if it doesn''t already exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set a variable called `name` to the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `view.php` in your block's directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the value of the name variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using block controller callback functions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding items to the page header and footer from the block controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of block development is being able to add JavaScript and CSS
    files to the page in the appropriate places. Consider a block that is using a
    jQuery plugin to create a slideshow widget. You will need to include the plugin's
    JavaScript and CSS files in order for it to work.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will add a CSS `<link>` tag to the page's `<head>` element,
    and a JavaScript `<script>` tag to bottom of the page (just before the closing
    `</body>` tag).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will continue working with the block that was created in the first
    recipe of this chapter. If you need to download a copy of that block, it is included
    with the code samples from this book's website.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also makes a reference to a CSS file and a JavaScript file. Those
    files are available for download in the code on this book's website as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for adding items to the page header and footer from the block controller
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your block's `controller.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a CSS file in `/css` called `test.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a rule to change the background color of the site to black.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a JavaScript file in `/js` called `test.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an alert message in the JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `controller.php`, create a new function called `on_page_view()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the HTML helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a CSS file to the page header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a JavaScript file to the page footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit a page on your site that contains this block. You should see your JavaScript
    alert as well as a black background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned in the *Using block controller callback function* recipe, the ideal
    place to add items to the header (the page's `<head>` tag) and footer (just before
    the closing `</body>` tag) is the `on_before_render()` callback function. The
    `addHeaderItem` and `addFooterItem` functions are used to place strings of text
    in those positions of the web document. Rather than type out `<script>` and `<link>`
    tags in our PHP, we will use the built-in HTML helper to generate those strings.
    The files should be located in the site's root `/css` and `/js` directories.
  prefs: []
  type: TYPE_NORMAL
- en: Since it is typically best practice for CSS files to get loaded first and for
    JavaScript files to get loaded last, we place each of those items in the areas
    of the page that make the most sense.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Using the Core Helpers"), *Using the Core
    Helpers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using block controller callback functions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom block templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All blocks come with a default view template, `view.php`. concrete5 also supports
    alternative templates, which users can enable through the concrete5 interface.
    You can also enable these alternative templates through your custom PHP code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a block type created and installed already. In this recipe, we
    are going to add a template to the block type that we created at the beginning
    of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating custom block templates are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your block's directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory in your block's directory called `templates/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `no_title.php` in `templates/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `no_title.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Activate the template by visiting a page that contains this block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter edit mode on the page and click on the block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/4548OS_02_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Choose "No Title" and save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can specify alternative templates right from the block controller, so you
    can automatically render a different template depending on certain settings, conditions,
    or just about anything you can think of. Simply use the `render()` function in
    a callback that gets called before the view is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This will use the `no_title.php` file instead of `view.php` to render the block.
    Notice that adding the `.php` file extension is not required. Just like the block's
    regular `view.php` file, developers can include `view.css` and `view.js` files
    in their template directories to have those files automatically included on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using block controller callback functions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a custom block type* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including JavaScript in block forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When adding or editing blocks, it is often desired to include more advanced
    functionality in the form of client-side JavaScript. concrete5 makes it extremely
    easy to automatically add a JavaScript file to a block's editor form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be working with the block that was created in the first recipe of this
    chapter. If you need to catch up, feel free to download the code from this book's
    website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for including JavaScript in block forms are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your block's directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `auto.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a basic alert function to `auto.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit a page that contains your block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter edit mode and edit the block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see your alert message appear as shown in the following screenshot:![How
    to do it...](img/4548OS_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 automatically looks for the `auto.js` file when it enters add or edit
    mode on a block. Developers can use this to their advantage to contain special
    client-side functionality for the block's edit mode.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Including JavaScript in the block view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including CSS in the block view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including JavaScript in the block view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to being able to include JavaScript in the block's add and edit
    forms, developers can also automatically include a JavaScript file when the block
    is viewed on the frontend. In this recipe, we will create a simple JavaScript
    file that will create an alert whenever the block is viewed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue working with the block that was created in the first recipe
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for including JavaScript in the block view are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your block's directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `view.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an alert to `view.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit the page containing your block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the new alert appear.![How to do it...](img/4548OS_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Much like the `auto.js` file discussed in the previous recipe, concrete5 will
    automatically include the `view.js` file if it exists. This allows developers
    to easily embed jQuery plugins or other client-side logic into their blocks very
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Including JavaScript in block forms* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including CSS in the block view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including CSS in the block view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers and designers working on custom concrete5 block types can have a
    CSS file automatically included. In this recipe, we will automatically include
    a CSS file that will change our background to black.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are still working with the block that was created earlier in the chapter.
    Please make sure that block exists, or adapt this recipe to suit your own concrete5
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for including CSS in the block view are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your block's directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `view.css`, if it doesn't exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a rule to change the background color of the site to black:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit the page containing your block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The background should now be black!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like it does with JavaScript, concrete5 will automatically include `view.css`
    in the page's header if it exists in your block directory. This is a great way
    to save some time with styles that only apply to your block.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Including JavaScript in block forms* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including JavaScript in the block view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a block type by its handle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Block types are objects in concrete5 just like most things. This means that
    they have IDs in the database, as well as human-readable handles. In this recipe,
    we will load the instance of the block type that we created in the first recipe
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need a place to run some arbitrary code. We will rely on `/config/site_post.php`
    once again to execute some random code. This recipe also assumes that a block
    with a handle of `hello_world` exists in your concrete5 site. Feel free to adjust
    that handle as needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for loading a block type by its handle are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the handle of the block to load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the block by its handle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Dump the contents of the block to make sure it loaded correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will simply query the database for you when a handle is provided.
    It will then return a `BlockType` object that contains several methods and properties
    that can be useful in development.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a block to a page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users can use the intuitive concrete5 interface to add blocks to the various
    areas of pages on the website. You can also programmatically add blocks to pages
    using the concrete5 API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code in this chapter can be run anywhere that you would like to create a
    block. To keep things simple, we are going to use the `/config/site_post.php`
    file to run some arbitrary code.
  prefs: []
  type: TYPE_NORMAL
- en: This example assumes that a page with a path of `/about` exists on your concrete5
    site. Feel free to create that page, or adapt this recipe to suit your needs.
    Also, this recipe assumes that `/about` has a content area called `content`. Again,
    adapt according to your own website's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the block that was created at the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for adding a block to a page are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the page that you would like to add a block to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the block by its handle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the data that will be sent to the block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the block to the page''s content area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First you need to get the target page. In this recipe, we get it by its path,
    but you can use this function on any `Page` object. Next, we need to load the
    block type that we are adding. In this case, we are using the one that was created
    earlier in the chapter. The block type handle is the same as the directory name
    for the block.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `$data` variable to pass in the block's configuration options.
    If there are no options, you will need to pass in an empty array, as concrete5
    does not allow that parameter to be blank. Finally, you will need to know the
    name of the content area; in this case, the content area is called "content".
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom block type* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading a block type by its handle* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting a page by its path* recipe in [Chapter 1](ch01.html "Chapter 1. Pages
    and Page Types"), *Pages and Page Types*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the blocks from an area
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 pages can have several different areas where blocks can be added.
    Developers can programmatically get an array of all of the block objects in an
    area. In this recipe, we will load a page and get a list of all of the blocks
    in its main content area.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using `/config/site_post.php` to run some arbitrary code here. You
    can place this code wherever you find appropriate, though.
  prefs: []
  type: TYPE_NORMAL
- en: This example assumes the presence of a page with a path of `/about`, and with
    a content area called `content`. Make the necessary adjustments in the code as
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for getting the blocks from an area are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the page by its path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the array of blocks in the page's content area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Loop through the array, printing each block's handle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Exit the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will return an array of block objects for every block that is contained
    within a content area. Developers can then loop through this array to manipulate
    or read the block objects.
  prefs: []
  type: TYPE_NORMAL
