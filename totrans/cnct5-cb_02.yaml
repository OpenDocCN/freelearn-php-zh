- en: Chapter 2. Working with Blocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 与块一起工作
- en: 'In this chapter we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Creating a custom block type
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义块类型
- en: Using block controller callback functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用块控制器回调函数
- en: Sending variables from the controller to the view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从控制器向视图发送变量
- en: Adding items to the page header and footer from the block controller
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从块控制器向页面页眉和页脚添加项目
- en: Creating custom block templates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义块模板
- en: Including JavaScript in block forms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在块表单中包含 JavaScript
- en: Including JavaScript in the block view
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在块视图中包含 JavaScript
- en: Including CSS in the block view
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在块视图中包含 CSS
- en: Loading a block type by its handle
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过其句柄加载块类型
- en: Adding a block to a page
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将块添加到页面
- en: Getting the blocks from an area
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从区域获取块
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Blocks in concrete5 are small, modular pieces of visual presentation, which
    can add virtually any type of content to your website. Blocks can contain text
    content, HTML code, images, videos, an interactive map, or anything else you could
    think of. When you edit content on your concrete5 website, you are editing an
    instance of the content block type. Blocks get added to pages in special areas
    that get specified in theme layouts. concrete5 comes with a wide variety of different
    block types out of the box, and it is easy to create your own custom block types,
    enabling you to add unlimited potential to your website.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 中的块是小型、模块化的视觉展示组件，可以几乎添加任何类型的内容到您的网站。块可以包含文本内容、HTML 代码、图片、视频、交互式地图或您能想到的任何其他内容。当您编辑
    concrete5 网站的页面内容时，您正在编辑内容块类型的一个实例。块被添加到页面的特殊区域，这些区域在主题布局中指定。concrete5 默认附带了许多不同的块类型，并且创建您自己的自定义块类型很容易，这使您能够为您的网站添加无限的可能性。
- en: In this chapter, we will create a custom block type from scratch. This block
    type will just display some text that the user can edit through the **CMS** interface,
    and will serve as a basic "Hello World" example.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从头开始创建一个自定义块类型。此块类型将仅显示一些用户可以通过 **CMS** 界面编辑的文本，并将作为一个基本的 "Hello World"
    示例。
- en: Creating a custom block type
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义块类型
- en: Creating block types is a great way to add custom functionality to a website.
    This is the preferred way to add things like calendars, dealer locators, or any
    other type of content that is visible and repeatable on the frontend of the website.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建块类型是向网站添加自定义功能的好方法。这是添加像日历、经销商定位器或任何其他在网站前端可见且可重复的内容的首选方式。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The code for this recipe is available to download from the book's website for
    free. We are going to create a fully functioning block type that will display
    content on our website.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该食谱的代码可以从本书的网站上免费下载。我们将创建一个完全功能性的块类型，该类型将在我们的网站上显示内容。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for creating a custom block type are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义块类型的步骤如下：
- en: First, you will need to create a directory in your website's root `/blocks`
    directory. The name of the directory should be underscored and will be used to
    refer to the block throughout the code. In this case, we will create a new directory
    called `/hello_world`.![How to do it...](img/4548OS_02_01.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要在您网站的根目录 `/blocks` 中创建一个目录。目录的名称应该是下划线，并且将在整个代码中用来引用块。在这种情况下，我们将创建一个名为
    `/hello_world` 的新目录。![如何操作...](img/4548OS_02_01.jpg)
- en: 'Once you have created the `hello_world` directory, you will need to create
    the following files:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您创建了 `hello_world` 目录，您需要创建以下文件：
- en: '`controller.php`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controller.php`'
- en: '`db.xml`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.xml`'
- en: '`form.php`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form.php`'
- en: '`add.php`'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add.php`'
- en: '`edit.php`'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit.php`'
- en: '`view.php`'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view.php`'
- en: '`view.css`'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view.css`'
- en: Now, we will add code to each of the files. First, we need to set up the `controller`
    file. The `controller` file is what powers the block. Since this is a very basic
    block, our controller only will contain information to tell concrete5 some details
    about our block, such as its name and description.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为每个文件添加代码。首先，我们需要设置 `controller` 文件。`controller` 文件是驱动块的动力所在。由于这是一个非常基础的块，我们的控制器将只包含一些信息，以告诉
    concrete5 关于我们块的一些细节，例如它的名称和描述。
- en: 'Add the following code to `controller.php`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `controller.php` 文件中：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notice that the class name is `HelloWorldBlockController`. concrete5 conventions
    dictate that you should name your block controllers with the same name as the
    `block` directory in camel case (for example: CamelCase) form, and followed by
    `BlockController`. The `btTable` class variable is important, as it tells concrete5
    what database table should be used for this block. It is important that this table
    doesn''t already exist in the database, so it''s a good idea to give it a name
    of `bt` (short for "block type") plus the camel cased version of the block name.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，类名是`HelloWorldBlockController`。concrete5约定规定，你应该使用与`block`目录相同的名称来命名你的块控制器，并以驼峰式（例如：CamelCase）形式，后面跟`BlockController`。`btTable`类变量很重要，因为它告诉concrete5应该使用哪个数据库表来处理此块。重要的是，这个表在数据库中尚未存在，所以给它取名为`bt`（代表“块类型”）加上块名称的驼峰式版本是一个好主意。
- en: Now that the controller is set up, we need to set up the `db.xml` file. This
    file is based off of the ADOXMLS format, which is documented at [http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema).
    This XML file will tell concrete5 which database tables and fields should be created
    for this new block type (and which tables and fields should get updated when your
    block type gets updated).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在控制器已设置，我们需要设置`db.xml`文件。此文件基于ADOXMLS格式，该格式在[http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema)有文档说明。此XML文件将告诉concrete5应该为新的块类型创建哪些数据库表和字段（以及当您的块类型更新时，哪些表和字段应该更新）。
- en: 'Add the following XML code to your `db.xml` file:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下XML代码添加到您的`db.xml`文件中：
- en: '[PRE1]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'concrete5 blocks typically have both an `add.php` and `edit.php` file, both
    of which often do the same thing: show the form containing the block''s settings.
    Since we don''t want to repeat code, we will enter our form HTML in a third file,
    `form.php`, and include that file in both `add.php` and `edit.php`.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: concrete5块通常都有`add.php`和`edit.php`文件，这两个文件通常做同样的事情：显示包含块设置的表单。由于我们不希望重复代码，我们将我们的表单HTML输入到第三个文件`form.php`中，并在`add.php`和`edit.php`中包含该文件。
- en: '[PRE2]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once that is all set, add this line of code to both `add.php` and `edit.php`
    to have this HTML code appear when users add and edit the block:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪后，将以下代码行添加到`add.php`和`edit.php`中，以便在用户添加和编辑块时显示此HTML代码：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following HTML to your `view.php` file:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML添加到您的`view.php`文件中：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, for a little visual appeal, add the following code to `view.css`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了增加一点视觉吸引力，将以下代码添加到`view.css`中：
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now all of the files have been filled with the code to make our Hello World
    block function. Now we need to install this block in concrete5 so we can add it
    to our pages.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在所有文件都已填充了使我们的Hello World块工作的代码。现在我们需要在concrete5中安装此块，以便我们可以将其添加到我们的页面上。
- en: To install the new block, you will need to sign into your concrete5 website
    and navigate to `/dashboard/blocks/types/`. If you happen to get a PHP fatal error
    here, clear your concrete5 cache by visiting `/dashboard/system/optimization/clear_cache`
    (it is always a good idea to disable the cache while developing in concrete5).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装新块，您需要登录到您的concrete5网站，并导航到`/dashboard/blocks/types/`。如果您在这里遇到PHP致命错误，请通过访问`/dashboard/system/optimization/clear_cache`来清除您的concrete5缓存（在concrete5中开发时禁用缓存总是一个好主意）。
- en: At the top of the **Block Types** screen, you should see your **Hello World**
    block, ready to install. Click on the **Install** button.![How to do it...](img/4548OS_02_03.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**块类型**屏幕的顶部，您应该看到您的**Hello World**块，准备安装。点击**安装**按钮。![如何操作...](img/4548OS_02_03.jpg)
- en: Now the block is installed and ready to add to your site!
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在块已安装并准备好添加到您的网站中！
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's go through the code that we just wrote, step-by-step.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地回顾一下我们刚才编写的代码。
- en: In `controller.php`, there are a few protected variables at the top of the class.
    The `$btTable` variable tells concrete5 which table in the database holds the
    data for this block type. The `$btInterfaceWidth` and `$btInterfaceHeight` variables
    determine the initial size of the dialog window that appears when users add your
    block to a page on their site.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller.php`中，类顶部有几个受保护的变量。`$btTable`变量告诉concrete5数据库中哪个表包含此块类型的数据。`$btInterfaceWidth`和`$btInterfaceHeight`变量确定当用户将您的块添加到他们网站上的页面时出现的对话框窗口的初始大小。
- en: We put the block's description and name in special `getter` functions for one
    reason, to potentially support for translations down the road. It's best practice
    to wrap any strings that appear in concrete5 in the global `t()` function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将块描述和名称放入特殊的`getter`函数中，原因之一是为了支持未来的翻译。将任何出现在concrete5中的字符串包装在全局`t()`函数中是最佳实践。
- en: The `db.xml` file tells concrete5 what database tables should be created when
    this block gets installed. This file uses the ADOXMLS format to generate tables
    and fields. In this file, we are telling concrete5 to create a table called `btHelloWorld`.
    That table should contain three fields, an `ID` field, the `title` field, and
    the `content` field. The names of these fields should be noted, because concrete5
    will require them to match up with the names of the fields in the HTML form.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`db.xml`文件告诉concrete5在安装此块时应创建哪些数据库表。此文件使用ADOXMLS格式生成表和字段。在此文件中，我们告诉concrete5创建一个名为`btHelloWorld`的表。该表应包含三个字段，一个`ID`字段，一个`title`字段和一个`content`字段。应记录这些字段的名称，因为concrete5将需要它们与HTML表单中的字段名称匹配。'
- en: In `form.php`, we are setting up the settings form that users will fill out
    to save the block's content. We are using the Form Helper to generate the HTML
    for the various fields. Notice how we are able to use the `$title` and `$content`
    variables without them being declared yet. concrete5 automatically exposes those
    variables to the form whenever the block is added or edited. We then include this
    form in the `add.php` and `edit.php` files.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`form.php`中，我们正在设置用户将填写以保存块内容的设置表单。我们使用表单助手生成各种字段的HTML。注意我们如何能够在变量尚未声明的情况下使用`$title`和`$content`变量。concrete5会自动将这些变量暴露给表单，无论何时添加或编辑块。然后我们在`add.php`和`edit.php`文件中包含这个表单。
- en: The `view.php` file is a template file that contains the HTML that the end users
    will see on the website. We are just wrapping the title in an `<h1>` tag and the
    content in a `<div>` with a class of `.content`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`view.php`文件是一个模板文件，其中包含最终用户将在网站上看到的HTML。我们只是在`<h1>`标签中包装标题，并在具有`.content`类的`<div>`中包装内容。'
- en: concrete5 will automatically include `view.css` (and `view.js`, if it happens
    to exist) if they are present in your block's directory. Also, if you include
    an `auto.js` file, it will automatically be included when the block is in edit
    mode. We added some basic styling to the `.content` class and concrete5 takes
    care of adding this CSS file to your site's `<head>` tag.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们存在于你的块目录中，concrete5将自动包含`view.css`（如果存在，还包括`view.js`）。此外，如果你包含一个`auto.js`文件，它将在块处于编辑模式时自动包含。我们向`.content`类添加了一些基本样式，concrete5会负责将此CSS文件添加到你的网站的`<head>`标签中。
- en: See also
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Sending variables from the controller to the view* recipe
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从控制器向视图发送变量的食谱
- en: The *Adding items to the page header and footer from the block controller* recipe
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从块控制器添加项目到页面页眉和页脚的食谱
- en: The *Including CSS in the block view* recipe
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在块视图中包含CSS的食谱
- en: The *Including JavaScript in the block view* recipe
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在块视图中包含JavaScript的食谱
- en: Using block controller callback functions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用块控制器回调函数
- en: The block controller class contains a couple of special functions that get automatically
    called at different points throughout the page load process. You can look into
    these callbacks to power different functionalities of your block type.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 块控制器类包含一些在页面加载过程中的不同点自动调用的特殊函数。你可以查看这些回调来为你的块类型提供不同的功能。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started, you will need a block type created and installed. See the previous
    recipe for a lesson on creating a custom block type. We will be adding some methods
    to `controller.php`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，你需要创建并安装一个块类型。查看前面的食谱，了解创建自定义块类型的课程。我们将向`controller.php`添加一些方法。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The steps for using block controller callback functions are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用块控制器回调函数的步骤如下：
- en: Open your block's `controller.php` file.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的块的`controller.php`文件。
- en: 'Add a new function called `on_start()`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`on_start()`的新函数：
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Write a `die` statement that will get fired when the controller is loaded.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个在控制器加载时触发的`die`语句。
- en: '[PRE7]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Refresh any page containing the block type. The page should stop rendering before
    it is complete with your debug message.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新包含块类型的任何页面。页面应该在完成之前停止渲染，显示你的调试信息。
- en: Be sure to remove the `die` statement, otherwise your block won't work anymore!
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一定要删除`die`语句，否则你的块将不再工作！
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 will call the various callback functions at different points during
    the page load process. The `on_start()` function is the first to get called. It
    is a good place to put things that you want to happen before the block is rendered.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 会在页面加载过程中的不同点调用各种回调函数。`on_start()` 函数是第一个被调用的。这是一个在块渲染之前放置你想要发生的事情的好地方。
- en: The next function that gets called depends on how you are interacting with the
    block. If you are just viewing it on a page, the `view()` function gets called.
    If you are adding or editing the block, then the `add()` or `edit()` functions
    will get called as appropriate. These functions are a good place to send variables
    to the view, which we will show how to do in the next recipe. The `save()` and
    `delete()` functions also get called automatically at this point, if the block
    is performing either of those functions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个被调用的函数取决于你如何与块交互。如果你只是在页面上查看它，则调用 `view()` 函数。如果你正在添加或编辑块，则将根据情况调用 `add()`
    或 `edit()` 函数。这些函数是向视图发送变量的好地方，我们将在下一个菜谱中展示如何做到这一点。`save()` 和 `delete()` 函数也会在这个时候自动调用，如果块正在执行这些功能之一。
- en: After that, concrete5 will call the `on_before_render()` function. This is a
    good time to add items to the page header and footer, since it is before concrete5
    renders the HTML for the page. We will be doing this later on in the chapter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，concrete5 将调用 `on_before_render()` 函数。这是一个在 concrete5 为页面渲染HTML之前添加页面页眉和页脚的好时机。我们将在本章后面做这件事。
- en: Finally, the `on_page_view()` function is called. This is actually run once
    the page is being rendered, so it is the last place where you have the code executed
    in your block controller. This is helpful when adding HTML items to the page.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用 `on_page_view()` 函数。这实际上是在页面渲染后运行的，所以这是你在块控制器中执行代码的最后一个地方。当向页面添加HTML项目时，这很有帮助。
- en: There's more...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The following functions can be added to your controller class and they will
    get called automatically at different points throughout the block's loading process.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数可以添加到你的控制器类中，它们将在块加载过程中的不同点自动被调用。
- en: '`on_start`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_start`'
- en: '`on_before_render`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_before_render`'
- en: '`view`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view`'
- en: '`add`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add`'
- en: '`edit`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit`'
- en: '`on_page_view`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_page_view`'
- en: '`save`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save`'
- en: '`delete`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete`'
- en: For a complete list of the callback functions available, check out the source
    for the block controller library, located in `/concrete/core/libraries/block_controller.php`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取可用回调函数的完整列表，请查看位于 `/concrete/core/libraries/block_controller.php` 的块控制器库的源代码。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Sending variables from the controller to the view* recipe
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从控制器向视图发送变量* 菜谱'
- en: The *Adding items to the page header and footer from the block controller* recipe
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从块控制器向页面页眉和页脚添加项目* 菜谱'
- en: Sending variables from the controller to the view
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从控制器向视图发送变量
- en: A common task in MVC programming is the concept of setting variables from a
    controller to a view. In concrete5, blocks follow the same principles. Fortunately,
    setting variables to the view is quite easy.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: MVC编程中的一个常见任务是控制器到视图设置变量的概念。在 concrete5 中，块遵循相同的原理。幸运的是，将变量设置到视图相当简单。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will use the block type that was created in the first recipe of
    this chapter. Feel free to adapt this code to work in any block controller, though.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将使用本章第一个菜谱中创建的块类型。你可以自由地调整这段代码以在任何块控制器中工作。
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'In your block''s controller, use the `set()` function of the `controller` class
    to send a variable and a value to the view. Note that the view doesn''t necessarily
    have to be the `view.php` template of your block. You can send variables to `add.php`
    and `edit.php` as well. In this recipe, we will send a variable to `view.php`.
    The steps are as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的块控制器中，使用 `controller` 类的 `set()` 函数将变量和值发送到视图。注意，视图不一定是你的块的 `view.php` 模板。你也可以将变量发送到
    `add.php` 和 `edit.php`。在这个菜谱中，我们将向 `view.php` 发送一个变量。步骤如下：
- en: Open your block's `controller.php` file.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的块的 `controller.php` 文件。
- en: 'Add a function called `view()` if it doesn''t already exist:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不存在，添加一个名为 `view()` 的函数：
- en: '[PRE8]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Set a variable called `name` to the view.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个名为 `name` 的变量设置到视图中。
- en: '[PRE9]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Open `view.php` in your block's directory.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的块的目录中打开 `view.php`。
- en: Output the value of the name variable.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出名称变量的值。
- en: '[PRE10]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using block controller callback functions* recipe
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用块控制器回调函数* 菜谱'
- en: Adding items to the page header and footer from the block controller
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从块控制器向页面页眉和页脚添加项目
- en: An important part of block development is being able to add JavaScript and CSS
    files to the page in the appropriate places. Consider a block that is using a
    jQuery plugin to create a slideshow widget. You will need to include the plugin's
    JavaScript and CSS files in order for it to work.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 块开发的一个重要部分是能够在适当的位置向页面添加JavaScript和CSS文件。考虑一个使用jQuery插件创建幻灯片小部件的块。为了使其工作，您需要包含插件的JavaScript和CSS文件。
- en: In this recipe, we will add a CSS `<link>` tag to the page's `<head>` element,
    and a JavaScript `<script>` tag to bottom of the page (just before the closing
    `</body>` tag).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将向页面`<head>`元素添加一个CSS `<link>`标签，并在页面底部（在关闭`</body>`标签之前）添加一个JavaScript
    `<script>`标签。
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will continue working with the block that was created in the first
    recipe of this chapter. If you need to download a copy of that block, it is included
    with the code samples from this book's website.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将继续使用本章第一个配方中创建的块。如果您需要下载该块的副本，它包含在此书的网站上的代码示例中。
- en: This recipe also makes a reference to a CSS file and a JavaScript file. Those
    files are available for download in the code on this book's website as well.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方还引用了CSS文件和JavaScript文件。这些文件可以在本书的网站上提供的代码中下载。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for adding items to the page header and footer from the block controller
    are as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从块控制器向页面页眉和页脚添加项的步骤如下：
- en: Open your block's `controller.php` file.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的块的`controller.php`文件。
- en: Create a CSS file in `/css` called `test.css`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/css`目录下创建一个名为`test.css`的CSS文件。
- en: Set a rule to change the background color of the site to black.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置规则以将网站的背景颜色更改为黑色。
- en: '[PRE11]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create a JavaScript file in `/js` called `test.js`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/js`目录下创建一个名为`test.js`的JavaScript文件。
- en: Create an alert message in the JavaScript file.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JavaScript文件中创建一个警告消息。
- en: '[PRE12]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In `controller.php`, create a new function called `on_page_view()`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controller.php`中创建一个名为`on_page_view()`的新函数。
- en: '[PRE13]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Load the HTML helper:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载HTML辅助工具：
- en: '[PRE14]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add a CSS file to the page header:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将CSS文件添加到页面页眉：
- en: '[PRE15]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add a JavaScript file to the page footer:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将JavaScript文件添加到页面页脚：
- en: '[PRE16]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Visit a page on your site that contains this block. You should see your JavaScript
    alert as well as a black background.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问包含此块的网站页面。你应该能看到你的JavaScript警告以及黑色背景。
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As mentioned in the *Using block controller callback function* recipe, the ideal
    place to add items to the header (the page's `<head>` tag) and footer (just before
    the closing `</body>` tag) is the `on_before_render()` callback function. The
    `addHeaderItem` and `addFooterItem` functions are used to place strings of text
    in those positions of the web document. Rather than type out `<script>` and `<link>`
    tags in our PHP, we will use the built-in HTML helper to generate those strings.
    The files should be located in the site's root `/css` and `/js` directories.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如在*使用块控制器回调函数*配方中所述，将项添加到页眉（页面的`<head>`标签）和页脚（在关闭`</body>`标签之前）的理想位置是`on_before_render()`回调函数。`addHeaderItem`和`addFooterItem`函数用于在Web文档的这些位置放置文本字符串。我们不会在PHP中键入`<script>`和`<link>`标签，而是将使用内置的HTML辅助工具生成这些字符串。这些文件应位于网站的根目录`/css`和`/js`目录中。
- en: Since it is typically best practice for CSS files to get loaded first and for
    JavaScript files to get loaded last, we place each of those items in the areas
    of the page that make the most sense.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于通常最佳实践是首先加载CSS文件，最后加载JavaScript文件，因此我们将每个项目放置在页面中最合理的位置。
- en: See also
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: '[Chapter 4](ch04.html "Chapter 4. Using the Core Helpers"), *Using the Core
    Helpers*'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章。使用核心辅助工具")，*使用核心辅助工具*'
- en: The *Using block controller callback functions* recipe
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用块控制器回调函数*配方'
- en: Creating custom block templates
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义块模板
- en: All blocks come with a default view template, `view.php`. concrete5 also supports
    alternative templates, which users can enable through the concrete5 interface.
    You can also enable these alternative templates through your custom PHP code.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 所有块都附带一个默认视图模板，`view.php`。concrete5还支持替代模板，用户可以通过concrete5界面启用这些模板。您也可以通过自定义PHP代码启用这些替代模板。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need a block type created and installed already. In this recipe, we
    are going to add a template to the block type that we created at the beginning
    of the chapter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要已经创建并安装了一个块类型。在此配方中，我们将向本章开头创建的块类型添加一个模板。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for creating custom block templates are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义块模板的步骤如下：
- en: Open your block's directory.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的块目录。
- en: Create a new directory in your block's directory called `templates/`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的块目录中创建一个名为`templates/`的新目录。
- en: Create a file called `no_title.php` in `templates/`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`templates/`中创建一个名为`no_title.php`的文件。
- en: 'Add the following HTML code to `no_title.php`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到`no_title.php`：
- en: '[PRE17]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Activate the template by visiting a page that contains this block.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问包含此块的页面来激活模板。
- en: Enter edit mode on the page and click on the block.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面上进入编辑模式并点击块。
- en: '[PRE18]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![How to do it...](img/4548OS_02_04.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/4548OS_02_04.jpg)'
- en: Choose "No Title" and save your changes.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“无标题”并保存您的更改。
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: You can specify alternative templates right from the block controller, so you
    can automatically render a different template depending on certain settings, conditions,
    or just about anything you can think of. Simply use the `render()` function in
    a callback that gets called before the view is rendered.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接在块控制器中指定替代模板，因此您可以根据某些设置、条件或几乎任何您能想到的东西自动渲染不同的模板。只需在视图渲染之前被调用的回调中使用`render()`函数即可。
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will use the `no_title.php` file instead of `view.php` to render the block.
    Notice that adding the `.php` file extension is not required. Just like the block's
    regular `view.php` file, developers can include `view.css` and `view.js` files
    in their template directories to have those files automatically included on the
    page.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用`no_title.php`文件而不是`view.php`来渲染块。请注意，添加`.php`文件扩展名不是必需的。就像块的常规`view.php`文件一样，开发人员可以在他们的模板目录中包含`view.css`和`view.js`文件，以便自动将这些文件包含在页面上。
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Using block controller callback functions* recipe
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用块控制器回调函数* 的配方'
- en: The *Creating a custom block type* recipe
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义块类型* 的配方'
- en: Including JavaScript in block forms
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在块表单中包含JavaScript
- en: When adding or editing blocks, it is often desired to include more advanced
    functionality in the form of client-side JavaScript. concrete5 makes it extremely
    easy to automatically add a JavaScript file to a block's editor form.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加或编辑块时，通常希望以客户端JavaScript的形式包含更高级的功能。concrete5使自动将JavaScript文件添加到块的编辑表单变得极其简单。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be working with the block that was created in the first recipe of this
    chapter. If you need to catch up, feel free to download the code from this book's
    website.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章第一个配方中创建的块进行工作。如果您需要赶上进度，请随时从本书的网站上下载代码。
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for including JavaScript in block forms are as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在块表单中包含JavaScript的步骤如下：
- en: Open your block's directory.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的块目录。
- en: Create a new file called `auto.js`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`auto.js`的新文件。
- en: 'Add a basic alert function to `auto.js`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将基本警报函数添加到`auto.js`：
- en: '[PRE20]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Visit a page that contains your block.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问包含您的块的页面。
- en: Enter edit mode and edit the block.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入编辑模式并编辑块。
- en: You should see your alert message appear as shown in the following screenshot:![How
    to do it...](img/4548OS_02_06.jpg)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该会看到您的警报消息如以下截图所示：![如何操作...](img/4548OS_02_06.jpg)
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: concrete5 automatically looks for the `auto.js` file when it enters add or edit
    mode on a block. Developers can use this to their advantage to contain special
    client-side functionality for the block's edit mode.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5在进入块的添加或编辑模式时会自动查找`auto.js`文件。开发人员可以利用这一点来包含块编辑模式特有的客户端功能。
- en: See also
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Including JavaScript in the block view* recipe
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在块视图中包含JavaScript* 的配方'
- en: The *Including CSS in the block view* recipe
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在块视图中包含CSS* 的配方'
- en: Including JavaScript in the block view
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在块视图中包含JavaScript
- en: In addition to being able to include JavaScript in the block's add and edit
    forms, developers can also automatically include a JavaScript file when the block
    is viewed on the frontend. In this recipe, we will create a simple JavaScript
    file that will create an alert whenever the block is viewed.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够在块的添加和编辑表单中包含JavaScript之外，开发人员还可以在块在前端查看时自动包含一个JavaScript文件。在这个配方中，我们将创建一个简单的JavaScript文件，每当块被查看时都会创建一个警报。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue working with the block that was created in the first recipe
    of this chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用本章第一个配方中创建的块进行工作。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for including JavaScript in the block view are as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在块视图中包含JavaScript的步骤如下：
- en: Open your block's directory.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的块目录。
- en: Create a new file called `view.js`.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`view.js`的新文件。
- en: 'Add an alert to `view.js`:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将警报添加到`view.js`：
- en: '[PRE21]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Visit the page containing your block.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问包含您的块的页面。
- en: You should see the new alert appear.![How to do it...](img/4548OS_02_07.jpg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到新的警告出现。![如何操作...](img/4548OS_02_07.jpg)
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Much like the `auto.js` file discussed in the previous recipe, concrete5 will
    automatically include the `view.js` file if it exists. This allows developers
    to easily embed jQuery plugins or other client-side logic into their blocks very
    easily.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在先前的配方中讨论的 `auto.js` 文件一样，如果存在，concrete5 将自动包含 `view.js` 文件。这允许开发者非常容易地将 jQuery
    插件或其他客户端逻辑嵌入到他们的块中。
- en: See also
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Including JavaScript in block forms* recipe
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在块表单中包含JavaScript* 的配方'
- en: The *Including CSS in the block view* recipe
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在块视图中包含CSS* 的配方'
- en: Including CSS in the block view
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在块视图中包含CSS
- en: Developers and designers working on custom concrete5 block types can have a
    CSS file automatically included. In this recipe, we will automatically include
    a CSS file that will change our background to black.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者和设计师在自定义 concrete5 块类型上工作时，可以自动包含一个CSS文件。在这个配方中，我们将自动包含一个CSS文件，将我们的背景变为黑色。
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are still working with the block that was created earlier in the chapter.
    Please make sure that block exists, or adapt this recipe to suit your own concrete5
    environment.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍在处理本章早期创建的块。请确保该块存在，或者根据你的 concrete5 环境调整此配方。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for including CSS in the block view are as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在块视图中包含CSS的步骤如下：
- en: Open your block's directory.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的块目录。
- en: Create a new file called `view.css`, if it doesn't exist.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不存在，创建一个名为 `view.css` 的新文件。
- en: 'Add a rule to change the background color of the site to black:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个规则来更改网站的背景颜色为黑色：
- en: '[PRE22]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Visit the page containing your block.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问包含你的块的页面。
- en: The background should now be black!
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 背景现在应该是黑色的！
- en: How it works...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Just like it does with JavaScript, concrete5 will automatically include `view.css`
    in the page's header if it exists in your block directory. This is a great way
    to save some time with styles that only apply to your block.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 就像对JavaScript所做的那样，如果存在于你的块目录中，concrete5 将自动在页面的头部包含 `view.css`。这是一个节省时间的好方法，因为只有你的块需要这些样式。
- en: See also
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Including JavaScript in block forms* recipe
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在块表单中包含JavaScript* 的配方'
- en: The *Including JavaScript in the block view* recipe
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在块视图中包含JavaScript* 的配方'
- en: Loading a block type by its handle
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过其句柄加载块类型
- en: Block types are objects in concrete5 just like most things. This means that
    they have IDs in the database, as well as human-readable handles. In this recipe,
    we will load the instance of the block type that we created in the first recipe
    of this chapter.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 块类型在 concrete5 中是对象，就像大多数事物一样。这意味着它们在数据库中有ID，以及可读的句柄。在这个配方中，我们将加载我们在本章第一个配方中创建的块类型的实例。
- en: Getting ready
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need a place to run some arbitrary code. We will rely on `/config/site_post.php`
    once again to execute some random code. This recipe also assumes that a block
    with a handle of `hello_world` exists in your concrete5 site. Feel free to adjust
    that handle as needed.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个运行一些任意代码的地方。我们将再次依靠 `/config/site_post.php` 来执行一些随机代码。这个配方还假设在你的 concrete5
    网站中存在一个句柄为 `hello_world` 的块。请随意根据需要调整该句柄。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for loading a block type by its handle are as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 通过句柄加载块类型的步骤如下：
- en: Open `/config/site_post.php` in your preferred code editor.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你偏好的代码编辑器中打开 `/config/site_post.php`。
- en: 'Define the handle of the block to load:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要加载的块的句柄：
- en: '[PRE23]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Load the block by its handle:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过句柄加载块：
- en: '[PRE24]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Dump the contents of the block to make sure it loaded correctly:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出块的内容以确保它已正确加载：
- en: '[PRE25]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 will simply query the database for you when a handle is provided.
    It will then return a `BlockType` object that contains several methods and properties
    that can be useful in development.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5将在提供句柄时简单地查询数据库。然后，它将返回一个包含几个在开发中可能有用的方法和属性的 `BlockType` 对象。
- en: Adding a block to a page
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将块添加到页面中
- en: Users can use the intuitive concrete5 interface to add blocks to the various
    areas of pages on the website. You can also programmatically add blocks to pages
    using the concrete5 API.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用直观的 concrete5 界面将块添加到网站页面的各个区域。你还可以使用 concrete5 API 以编程方式将块添加到页面。
- en: Getting ready
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The code in this chapter can be run anywhere that you would like to create a
    block. To keep things simple, we are going to use the `/config/site_post.php`
    file to run some arbitrary code.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码可以在你想要创建块的地方运行。为了保持简单，我们将使用 `/config/site_post.php` 文件来运行一些任意代码。
- en: This example assumes that a page with a path of `/about` exists on your concrete5
    site. Feel free to create that page, or adapt this recipe to suit your needs.
    Also, this recipe assumes that `/about` has a content area called `content`. Again,
    adapt according to your own website's configuration.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例假设在你的 concrete5 网站上存在一个路径为 `/about` 的页面。你可以自由创建该页面，或者根据你的需求调整此菜谱。同样，此菜谱假设
    `/about` 有一个名为 `content` 的内容区域。再次根据你自己的网站配置进行调整。
- en: We will be using the block that was created at the beginning of this chapter.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章开头创建的块。
- en: How to do it...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for adding a block to a page are as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 将块添加到页面的操作步骤如下：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `/config/site_post.php`。
- en: 'Load the page that you would like to add a block to:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载你想要添加块的页面：
- en: '[PRE26]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Load the block by its handle:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过句柄加载块：
- en: '[PRE27]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Define the data that will be sent to the block:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义将发送到块的 数据：
- en: '[PRE28]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the block to the page''s content area:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将块添加到页面的内容区域：
- en: '[PRE29]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First you need to get the target page. In this recipe, we get it by its path,
    but you can use this function on any `Page` object. Next, we need to load the
    block type that we are adding. In this case, we are using the one that was created
    earlier in the chapter. The block type handle is the same as the directory name
    for the block.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要获取目标页面。在这个菜谱中，我们通过其路径获取它，但你可以在任何 `Page` 对象上使用这个函数。接下来，我们需要加载我们正在添加的块类型。在这种情况下，我们使用本章早期创建的一个。块类型句柄与块的目录名相同。
- en: We are using the `$data` variable to pass in the block's configuration options.
    If there are no options, you will need to pass in an empty array, as concrete5
    does not allow that parameter to be blank. Finally, you will need to know the
    name of the content area; in this case, the content area is called "content".
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `$data` 变量传递块的配置选项。如果没有选项，你需要传递一个空数组，因为 concrete5 不允许该参数为空。最后，你需要知道内容区域的名称；在这种情况下，内容区域名为
    "content"。
- en: See also
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating a custom block type* recipe
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义块类型* 菜单'
- en: The *Loading a block type by its handle* recipe
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过句柄加载块类型* 菜单'
- en: The *Getting a page by its path* recipe in [Chapter 1](ch01.html "Chapter 1. Pages
    and Page Types"), *Pages and Page Types*
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。页面和页面类型")中的 *通过路径获取页面* 菜单，*页面和页面类型*'
- en: Getting the blocks from an area
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从区域获取块
- en: concrete5 pages can have several different areas where blocks can be added.
    Developers can programmatically get an array of all of the block objects in an
    area. In this recipe, we will load a page and get a list of all of the blocks
    in its main content area.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 页面可以有多个不同的区域，可以在其中添加块。开发者可以编程方式获取一个区域中所有块对象的数组。在这个菜谱中，我们将加载一个页面并获取其主内容区域中所有块列表。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using `/config/site_post.php` to run some arbitrary code here. You
    can place this code wherever you find appropriate, though.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `/config/site_post.php` 在这里运行一些任意代码。尽管如此，你可以将此代码放置在认为合适的位置。
- en: This example assumes the presence of a page with a path of `/about`, and with
    a content area called `content`. Make the necessary adjustments in the code as
    needed.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例假设存在一个路径为 `/about` 的页面，并且有一个名为 `content` 的内容区域。根据需要，在代码中进行必要的调整。
- en: How to do it...
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for getting the blocks from an area are as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 从区域获取块的操作步骤如下：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `/config/site_post.php`。
- en: 'Load the page by its path:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过路径加载页面：
- en: '[PRE30]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Get the array of blocks in the page's content area.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取页面内容区域中的块数组。
- en: '[PRE31]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Loop through the array, printing each block's handle.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历数组，打印每个块的句柄。
- en: '[PRE32]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Exit the process.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出进程。
- en: '[PRE33]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 will return an array of block objects for every block that is contained
    within a content area. Developers can then loop through this array to manipulate
    or read the block objects.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 将为每个包含在内容区域内的块返回一个块对象数组。开发者可以遍历这个数组来操作或读取块对象。
