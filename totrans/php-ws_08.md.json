["```php\nini_set('display_errors', 'Off');\n```", "```php\nerror_reporting=E_ALL\ndisplay_errors=On\nlog_errors=Off\nerror_log=NULL\n```", "```php\nPHP Notice: Undefined variable: iDontExist in Command line code on line 1\n```", "```php\nset_error_handler(callable $error_handler [, int $error_types = E_ALL |   E_STRICT ])\n```", "```php\nhandler(int $errno, string $errstr [, string $errfile [, int $errline [, array   $errcontext]]]): bool\n```", "```php\n    <?php\n    $errorHandler = function (int $code, string $message, string $file,   int $line) {\n        echo date(DATE_W3C), \" :: $message, in [$file] on line [$line]       (error code $code)\", PHP_EOL;\n    };\n    ```", "```php\n    set_error_handler($errorHandler, E_ALL);\n    ```", "```php\n    echo $width / $height, PHP_EOL;\n    ```", "```php\n    php custom-handler.php\n    ```", "```php\n    <?php\n    $errorHandler = function (int $code, string $message, string $file, int $line) {\n        static $stream;\n        if (is_null($stream)) {\n            $stream = fopen(__DIR__ . '/app.log', 'a');\n        }\n        fwrite(\n            $stream,\n            date(DATE_W3C) . \" :: $message, in [$file] on line [$line] (error code $code)\" . PHP_EOL\n        );\n    };\n    ```", "```php\n    set_error_handler($errorHandler, E_ALL);\n    echo $width / $height, PHP_EOL;\n    ```", "```php\n    php log-handler.php\n    ```", "```php\ntrigger_error( string $error_msg [, int $error_type = E_USER_NOTICE ] ): bool\n```", "```php\n<?php\n$errorHandler = function (int $code, string $message, string $file, int $line) {\n    echo date(DATE_W3C), \" :: $message, in [$file] on line [$line] (error code       $code)\", PHP_EOL;\n    if ($code === E_USER_ERROR) {\n        exit(1);\n    }\n};\nset_error_handler($errorHandler, E_ALL);\nreturn $errorHandler;\n```", "```php\n    <?php\n    require_once 'error-handler.php';\n    if (!array_key_exists(1, $argv)) {\n        trigger_error('This script requires a number as first argument',       E_USER_ERROR);\n    }\n    $input = $argv[1];\n    ```", "```php\n    if (!is_numeric($input)) {\n        trigger_error(sprintf('A number is expected, got %s', $input),       E_USER_ERROR);\n    }\n    ```", "```php\n    if (is_float($input * 1)) {\n        $input = round($input);\n        trigger_error(\n            sprintf(\n                'Decimal numbers are not allowed for this operation. Will use               the rounded integer value [%d]',\n                $input\n            ),\n            E_USER_WARNING\n        );\n    }\n    ```", "```php\n    if ($input < 0) {\n        $input = abs($input);\n        trigger_error(\n            sprintf(\n                'A negative number is not allowed for this operation. Will use               the absolute value [%d].',\n                $input\n            ),\n            E_USER_WARNING\n        );\n    }\n    ```", "```php\n    echo sprintf('sqrt(%d) = ', $input), sqrt((float)$input), PHP_EOL;\n    ```", "```php\n    php sqrt.php; \n    ```", "```php\n    php sqrt.php nine;\n    ```", "```php\n    php sqrt.php -81.3; \n    ```", "```php\nregister_shutdown_function( callable $callback [, mixed $... ] ): void\n```", "```php\nregister_shutdown_function(\n    function (string $file, int $line) {\n        echo \"I was registered in $file at line $line\", PHP_EOL;\n    },\n    __FILE__,\n    __LINE__\n);\n```", "```php\nerror_get_last(): array\n```", "```php\n    <?php\n    $errorHandler = require_once 'error-handler.php';\n    ```", "```php\n    if ($error = error_get_last()) {\n        if (in_array($error['type'], [E_ERROR, E_RECOVERABLE_ERROR], true)) {\n    ```", "```php\n    $errorHandler(\n        $error['type'],\n        $error['message'],\n        $error['file'],\n        $error['line']\n    );\n    ```", "```php\n         register_shutdown_function(\n        function () use ($errorHandler) {\n            if ($error = error_get_last()) {\n                if (in_array($error['type'], [E_ERROR, E_RECOVERABLE_ERROR],               true)) {\n                    $errorHandler(\n                        $error['type'],\n                        $error['message'],\n                        $error['file'],\n                        $error['line']\n                    );\n                }\n            }\n        }\n    }\n    }\n    );\n    ```", "```php\n    new UnknownClass();\n    ```", "```php\ntry {\n    if (!isset($argv[1])) {\n        throw new Exception('Argument #1 is required.');\n    }\n} catch (Exception $e) {\n    echo $e->getMessage(), PHP_EOL;\n} finally {\n    echo \"Done.\", PHP_EOL;\n}\n```", "```php\n    <?php\n    echo 'SCRIPT START.', PHP_EOL;\n    ```", "```php\n    try {\n        echo 'Run TRY block.', PHP_EOL;\n    ```", "```php\n        if (!isset($argv[1])) {\n            echo 'NO ARGUMENT: Will throw exception.', PHP_EOL;\n            throw new LogicException('Argument #1 is required.');\n        }\n    ```", "```php\n        echo 'ARGUMENT: ', $argv[1], PHP_EOL;\n        var_dump(new $argv[1]);\n    ```", "```php\n    } catch (Exception $e) {\n        echo 'EXCEPTION: ', sprintf('%s in %s at line %d', $e->getMessage(),       $e->getFile(), $e->getLine()), PHP_EOL;\n    ```", "```php\n    } finally {\n        echo \"FINALLY block gets executed.\\n\";\n    ```", "```php\n    echo \"Outside TRY-CATCH.\\n\";\n    echo 'SCRIPT END.', PHP_EOL;\n    ```", "```php\n     php basic-try.php; \n    ```", "```php\n    } catch (Error $e) {\n        echo 'ERROR: ', sprintf('%s in %s at line %d', $e->getMessage(),       $e->getFile(), $e->getLine()), PHP_EOL;\n    ```", "```php\n     php basic-try-all.php DateTimeZone; \n    ```", "```php\n    <?php\n    class InvalidEmail extends Exception\n    {\n        private $context = [];\n        public function setContext(array $context)\n        {\n            $this->context = $context;\n        }\n        public function getContext(): array\n        {\n            return $this->context;\n        }\n    }\n    ```", "```php\n    function validateEmail(array $input)\n    {\n        if (!isset($input[1])) {\n            throw new InvalidArgumentException('No value to check.');\n        }\n        $testInput = $input[1];\n        if (!filter_var($testInput, FILTER_VALIDATE_EMAIL)) {\n            $error = new InvalidEmail('The email validation has failed.');\n            $error->setContext(['testValue' => $testInput]);\n            throw $error;\n        }\n    }\n    ```", "```php\n    try {\n        validateEmail($argv);\n        echo 'The input value is valid email.', PHP_EOL;\n    } catch (Throwable $e) {\n        echo sprintf(\n                'Caught [%s]: %s (file: %s, line: %s, context: %s)',\n                get_class($e),\n                $e->getMessage(),\n                $e->getFile(),\n                $e->getLine(),\n                $e instanceof InvalidEmail ? json_encode($e->getContext()) :               'N/A'\n            ) . PHP_EOL;\n    }\n    ```", "```php\n     php validate-email.php; \n    ```", "```php\n    php validate-email.php john.doe; \n    ```", "```php\n     php validate-email.php john.doe@mail.com; \n    ```", "```php\nset_exception_handler (callable $exception_handler): callable\n```", "```php\n    <?php\n    set_exception_handler(function (Throwable $e) {\n        $msgLength = mb_strlen($e->getMessage());\n        $line = str_repeat('-', $msgLength);\n        echo $line, PHP_EOL;\n        echo $e->getMessage(), PHP_EOL;\n        echo '> File: ', $e->getFile(), PHP_EOL;\n        echo '> Line: ', $e->getLine(), PHP_EOL;\n        echo '> Trace: ', PHP_EOL, $e->getTraceAsString(), PHP_EOL;\n        echo $line, PHP_EOL;\n    });\n    ```", "```php\n    require_once 'exception-handler.php';\n    ```", "```php\n    php basic-try-handler.php DateTimeZone; \n    ```", "```php\npublic __construct (string $message = \"\", int $code = 0, int $severity = E_ERROR, string $filename = __FILE__, int $lineno = __LINE__, Exception $previous = NULL)\n```", "```php\n    <?php\n    $exceptionHandler = function (Throwable $e) {\n        $msgLength = mb_strlen($e->getMessage());\n        $line = str_repeat('-', $msgLength);\n        echo $line, PHP_EOL;\n        echo get_class($e), sprintf(' [%d]: ', $e->getCode()),       $e->getMessage(),      PHP_EOL;\n        echo '> File: ', $e->getFile(), PHP_EOL;\n        echo '> Line: ', $e->getLine(), PHP_EOL;\n        echo '> Trace: ', PHP_EOL, $e->getTraceAsString(), PHP_EOL;\n        echo $line, PHP_EOL;\n    };\n    ```", "```php\n    $errorHandler = function (int $code, string $message, string $file, int   $line) use ($exceptionHandler) {\n        $exception = new ErrorException($message, $code, $code, $file, $line);\n        $exceptionHandler($exception);\n        if (in_array($code , [E_ERROR, E_RECOVERABLE_ERROR, E_USER_ERROR])) {\n            exit(1);\n        }\n    };\n    ```", "```php\n    set_error_handler($errorHandler);\n    set_exception_handler($exceptionHandler);\n    ```", "```php\n    <?php\n    require_once 'error-handler.php'; // removed\n    require_once 'all-errors-handler.php'; // added\n    ```", "```php\n    php sqrt-all.php\n    php sqrt-all.php s5\n    php sqrt-all.php -5\n    php sqrt-all.php 9\n    ```", "```php\n    <?php\n    require_once 'all-errors-handler.php';\n    class Disposable extends Exception\n    {\n    }\n    ```", "```php\n    function handle(array $input)\n    {\n        if (!isset($input[1])) {\n            throw new Disposable('A function/class name is required as the           first argument.');\n        }\n    ```", "```php\n        $calleeName = $input[1];\n        $calleeArguments = array_slice($input, 2);\n    ```", "```php\n        if (function_exists($calleeName)) {\n            return call_user_func_array($calleeName, $calleeArguments);\n    ```", "```php\n        } elseif (class_exists($calleeName)) {\n            return new $calleeName(...$calleeArguments);\n    ```", "```php\n        } else {\n            throw new Disposable(sprintf('The [%s] function or class does not           exist.', $calleeName));\n        }\n    }\n    ```", "```php\n    try {\n        $output = handle($argv);\n        echo 'Result: ', $output ? print_r($output, true) :       var_export($output, true), PHP_EOL;\n    ```", "```php\n    } catch (Disposable $e) {\n        echo '(!) ', $e->getMessage(), PHP_EOL;\n        exit(1);\n    }\n    ```", "```php\n    php run.php substr 'PHP Essentials' 0 3; \n    ```", "```php\n    php run.php substr 'PHP Essentials' 0 0; \n    ```", "```php\n    php run.php substr 'PHP Essentials';\n    ```", "```php\n    php run.php DateTime; \n    ```", "```php\n    php run.php DateTime '1 day ago' UTC; \n    ```", "```php\n    <?php\n    require_once 'all-errors-handler.php';\n    class Disposable extends Exception\n    {\n    }\n    ```", "```php\n    function handle(array $input)\n    {\n        if (!isset($input[1])) {\n            throw new Disposable('A class name is required as the first           argument (one of DateTime or DateTimeImmutable).');\n        }\n    ```", "```php\n        $calleeName = $input[1];\n        if (!in_array($calleeName, [DateTime::class,       DateTimeImmutable::class])) {\n            throw new Disposable('One of DateTime or DateTimeImmutable is           expected.');\n        }\n    ```", "```php\n        $time = $input[2] ?? 'now';\n        $timezone = $input[3] ?? 'UTC';\n    ```", "```php\n        try {\n            $dateTimeZone = new DateTimeZone($timezone);\n        } catch (Exception $e) {\n            throw new Disposable(sprintf('Unknown/Bad timezone: [%s]',           $timezone));\n        }\n        try {\n            $dateTime = new $calleeName($time, $dateTimeZone);\n        } catch (Exception $e) {\n            throw new Disposable(sprintf('Cannot build date from [%s]',           $time));\n        }\n    ```", "```php\n        return $dateTime;\n    }\n    ```", "```php\n    try {\n        $output = handle($argv);\n        echo 'Result: ', print_r($output, true);\n    ```", "```php\n    } catch (Disposable $e) {\n        echo '(!) ', $e->getMessage(), PHP_EOL;\n        exit(1);\n    }\n    ```", "```php\n    php date.php DateTimeImmutable midnight; \n    ```", "```php\n    php date.php DateTimeImmutable yesterday Europe/Paris \n    ```"]