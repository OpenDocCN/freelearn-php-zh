- en: '*Chapter 14*: Data Integration'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第14章*：数据集成'
- en: In the previous chapter, you learned about the concept of **Master Data Management**
    (**MDM**), and how to expose Pimcore objects to third-party applications using
    the **Datahub** Pimcore bundle. After defining how to install and activate that
    bundle and how to configure it, you learned how to perform GraphQL queries to
    retrieve object data and to create, update, or delete objects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了关于**主数据管理**（**MDM**）的概念，以及如何使用**Datahub** Pimcore插件将Pimcore对象暴露给第三方应用程序。在定义了如何安装和激活该插件以及如何配置它之后，你学习了如何执行GraphQL查询以检索对象数据以及创建、更新或删除对象。
- en: In this chapter, you will learn how to perform data integration in Pimcore through
    standard import and export functionalities, when these standards are supposed
    to be used, and, otherwise, when the implementation of custom solutions is necessary.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何在Pimcore中通过标准导入和导出功能进行数据集成，当这些标准应该被使用时，以及当需要实现自定义解决方案时。
- en: 'The chapter is organized as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的组织结构如下：
- en: Importing Data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入数据
- en: Exporting Data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出数据
- en: Limitations of Standard Functionalities
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准功能的限制
- en: Implementing Custom Solutions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现自定义解决方案
- en: Configuring the Data Importer
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置数据导入器
- en: We'll start by presenting how to perform simple CSV data importing and exporting
    using standard solutions. Then, we will explain the limitations you may encounter
    on using these standard solutions for importing and exporting, and we will explain
    how to implement a custom data operator that can be used in import configuration.
    Later in this chapter, we will present how to implement custom solutions for importing
    and exporting.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从展示如何使用标准解决方案进行简单的CSV数据导入和导出开始。然后，我们将解释在使用这些标准解决方案进行导入和导出时可能遇到的限制，并解释如何实现一个自定义数据操作符，该操作符可以用于导入配置。在本章的后面部分，我们将展示如何实现导入和导出的自定义解决方案。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As you have done in previous chapters, all you need to do is run the demo connected
    to this chapter by navigating to the `14\. Data Integration` folder of the official
    book repository and start a Docker environment.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如同你在前面的章节中所做的那样，你所需要做的就是通过导航到官方书库中的`14\. 数据集成`文件夹并启动Docker环境来运行与本章相关的演示。
- en: 'To do so, just follow these instructions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，只需遵循以下说明：
- en: 'Run Docker with the following command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行Docker：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, to restore all the settings on your local machine, just open a new shell
    and type the following:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为了在本地机器上恢复所有设置，只需打开一个新的shell并输入以下命令：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Navigate to [http://localhost/admin](http://localhost/admin) and log in with
    your admin/pimcore credentials.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[http://localhost/admin](http://localhost/admin)并使用你的admin/pimcore凭据登录。
- en: 'You can access the official book repository to get the source code through
    the following link:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下链接访问官方书库以获取源代码：
- en: '[https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/14.%20Data%20Integration](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/14.%20Data%20Integration)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/14.%20Data%20Integration](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore/tree/main/14.%20Data%20Integration)'
- en: Now you are ready to navigate the demo to discover all the aspects related to
    this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好导航到演示，以发现与本章相关的所有方面。
- en: Importing Data
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入数据
- en: In this section, you will learn how to import data through a standard Pimcore
    CSV import. We will see how to configure the import of a simple CSV file, looking
    at the details of each step of the configuration, and how to save this configuration
    to use it in future imports.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何通过标准Pimcore CSV导入来导入数据。我们将查看如何配置简单CSV文件的导入，查看配置的每个步骤的详细信息，以及如何保存此配置以供将来导入使用。
- en: Although this feature is deprecated in PimcoreX, we must consider that the Pimcore
    6 version still has widespread usage, so the explanation of this feature is still
    quite important. In the *Configuring the Data Importer* section of this chapter,
    we will then explain how to configure the new Pimcore Data Importer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个功能在PimcoreX中已被弃用，但我们必须考虑到Pimcore 6版本仍然被广泛使用，因此这个功能的解释仍然非常重要。因此，在本章的*配置数据导入器*部分，我们将解释如何配置新的Pimcore数据导入器。
- en: To start a new CSV import, just right-click on the folder in which you want
    to import the objects, select **CSV Import**, and select the object class of the
    objects you want to import. This operation will open an **Upload** dialog, through
    which you can upload the CSV file to import.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Once the file is uploaded, a new modal will be opened, and you can start to
    configure the import. In the following sections, we will analyze each step of
    this configuration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: CSV File Preview
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first panel of the imported configuration, a preview of the uploaded
    CSV file is shown. In the following screenshot, you can see how this panel looks:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1: CSV File Preview'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.01_B17073.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.1: CSV File Preview'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, the CSV file rows are rendered as
    a table. If the checkbox at the top is enabled, the first CSV row is intended
    to contain the headers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to perform column configuration, to associate
    every CSV column with the corresponding class attribute.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Column Configuration
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the **Column Configuration** panel, we can associate every CSV column to
    the corresponding class attribute, so that for each CSV import, we can affect
    only a subset of the class fields. You can see how this panel looks in the following
    screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2: Column Configuration'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.02_B17073.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.2: Column Configuration'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, in this panel there are two distinct
    areas. In the left region, you will find the class attributes, and you can drag
    and drop each attribute to the corresponding CSV columns, which are disposed of
    in the right region.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'In the left region, you can also see the **Operators** section. These operators
    can be used to change the way the data is processed. Let''s describe how each
    of these operators works:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '**Operator Base64**: This operator performs a Base64 encode or decode on the
    CSV data.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator Ignore**: This operator just lets the importer skip the corresponding
    CSV column.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator Iterator**: This operator lets you import the same CSV cell to multiple
    class attributes, by dragging and dropping these attributes as operator children.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator Locale Switcher**: This operator is useful to select the language
    for each localized field, allowing the import of text in different languages within
    the same CSV file.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator ObjectBrick Setter**: This operator lets you import a specific attribute
    of an **ObjectBrick**.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator PHP Code**: This operator type does not do anything on its own.
    It requires you to develop a PHP class to manage the CSV data, and pass the class
    namespace as a parameter of the operator. You will learn how to create a custom
    PHP operator in the *Creating a Custom Operator* section of this chapter.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator Published**: This operator just lets you publish or unpublish the
    imported objects, based on the CSV column value.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator Splitter**: This operator can be used to split the value of the
    CSV column into multiple attributes, given the separator character.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作符拆分器**：此操作符可以用于根据分隔符字符将 CSV 列的值拆分为多个属性。'
- en: Now that we have defined how to map each object attribute, in the next section
    we will show the criteria that permits us to resolve each row, to recognize whether
    each object already exists.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了如何映射每个对象属性，在下一节中，我们将展示允许我们解析每一行、识别每个对象是否已经存在的标准。
- en: Resolver Settings
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析器设置
- en: 'In the following screenshot, you can see how the **Resolver Settings** panel
    looks:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您可以查看 **解析器设置** 面板的外观：
- en: '![Figure 14.3: Resolver Settings'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.3：解析器设置'
- en: '](img/Figure_14.03_B17073.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.03_B17073.jpg)'
- en: 'Figure 14.3: Resolver Settings'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3：解析器设置
- en: 'As you can see in the previous screenshot, there is a set of properties to
    configure, which we are going to describe here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中看到的，有一组属性可以配置，我们将在这里进行描述：
- en: '**Skip head row**: Defines whether the first row must be skipped. This must
    be checked if the first row of the CSV contains column headers.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跳过标题行**：定义是否必须跳过第一行。如果 CSV 的第一行包含列标题，则必须勾选此选项。'
- en: '**Language**: The language of the import. All the values for localized fields
    will be imported for the specified language. If you need to import localized values
    for different languages within the same CSV import, you must use a **Locale Switcher**
    operator.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**：导入的语言。将导入指定语言的所有本地化字段值。如果您需要在同一 CSV 导入中导入不同语言的本地化值，您必须使用 **区域设置切换器**
    操作符。'
- en: '`Pimcore\DataObject\Import\Resolver\AbstractResolver` class and passes the
    class namespace as an attribute.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pimcore\DataObject\Import\Resolver\AbstractResolver` 类，并将类命名空间作为属性传递。'
- en: '**Column**: This property lets you select the CSV column that contains the
    value that must be used by the resolver strategy.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列**：此属性允许您选择包含解析器策略必须使用的值的 CSV 列。'
- en: '**Type**: This property lets you define whether the imported rows must be objects
    or variants. It''s possible to force this type, to let the importer keep the current
    type, or to dynamically set the type for each row, specifying the **Type column**
    property.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：此属性允许您定义导入的行必须是对象还是变体。可以强制此类型，让导入器保持当前类型，或为每一行动态设置类型，指定 **类型列** 属性。'
- en: '**Create on demand**: If checked, not existing objects will be created.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按需创建**：如果选中，将创建不存在的对象。'
- en: '**Create parents**: If checked, subfolders on the object path will be created
    if they don''t exist.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建父级**：如果选中，如果对象路径上不存在子文件夹，则将创建它们。'
- en: '**Skip row if exists**: If checked, the row is skipped if the object already
    exists.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果存在则跳过行**：如果选中，如果对象已存在，则跳过该行。'
- en: Now that we have seen how to set up the resolver strategy, in the next section
    we will see how to change the CSV settings.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何设置解析器策略，在下一节中，我们将看到如何更改 CSV 设置。
- en: CSV Settings
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSV 设置
- en: 'Here, you can see how the **CSV Settings** panel looks:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以查看 **CSV 设置** 面板的外观：
- en: '![Figure 14.4: CSV Settings'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.4：CSV 设置'
- en: '](img/Figure_14.04_B17073.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.04_B17073.jpg)'
- en: 'Figure 14.4: CSV Settings'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4：CSV 设置
- en: As you can see in the previous screenshot, in this panel you can change the
    CSV parsing settings, which include **Delimiter**, **Quote Character**, and so
    on. These settings are automatically detected during the file upload, but you
    can change them manually. After having changed these values, you must click on
    the **Reload column configuration** button to apply the changes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中看到的，在这个面板中，您可以更改 CSV 解析设置，包括 **分隔符**、**引号字符**等。这些设置在文件上传期间自动检测，但您可以手动更改它们。更改这些值后，您必须单击
    **重新加载列配置** 按钮以应用更改。
- en: In the next section, we will see how to save and share the defined configuration.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何保存和分享定义的配置。
- en: Save & Share
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存 & 分享
- en: 'In the following screenshot, you can see what the **Save & Share** panel looks
    like:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您可以查看 **保存 & 分享** 面板的外观：
- en: '![Figure 14.5: Save & Share'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.5：保存 & 分享'
- en: '](img/Figure_14.05_B17073.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.05_B17073.jpg)'
- en: 'Figure 14.5: Save & Share'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5：保存 & 分享
- en: As you can see in the previous screenshot, you can set the configuration name,
    and click on the **Save** button to save the configuration in the database. All
    the saved configurations can be restored by clicking the **Load** button and selecting
    the chosen configuration. The import configurations can be shared globally to
    all users, or to a restricted set of users and roles.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，你可以设置配置名称，然后点击**保存**按钮将配置保存在数据库中。所有保存的配置都可以通过点击**加载**按钮并选择所选配置来恢复。导入配置可以全局共享给所有用户，或者共享给一组受限的用户和角色。
- en: 'Once the configuration is done, you can run the import by clicking the **Import**
    button. In the following screenshot, you can see the **Import Report** panel:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成配置，你可以通过点击**导入**按钮来运行导入。在下面的截图中，你可以看到**导入报告**面板：
- en: '![Figure 14.6: Import Report'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.6：导入报告'
- en: '](img/Figure_14.06_B17073.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.06_B17073.jpg)'
- en: 'Figure 14.6: Import Report'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：导入报告
- en: As you can see in the previous screenshot, for each row we can see whether the
    row was imported successfully and, if not, the error message for the row. For
    each imported row, the imported object can be opened.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，对于每一行，我们可以看到该行是否成功导入，如果没有，则会显示该行的错误消息。对于每一行导入的对象，都可以打开。
- en: To summarize, in this section you learned how to configure and run CSV imports.
    In the following section, you will learn how to export data in Pimcore.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在本节中，你学习了如何配置和运行CSV导入。在下一节中，你将学习如何在Pimcore中导出数据。
- en: Exporting Data
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出数据
- en: In the previous section, you learned how to configure and run CSV imports. In
    this section, you will learn how to export data. Similar to what we saw in the
    previous section on data importing, we can set up and save export configurations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你学习了如何配置和运行CSV导入。在本节中，你将学习如何导出数据。与上一节中关于数据导入的内容类似，我们可以设置并保存导出配置。
- en: The first step to start a data export is to open an object grid by clicking
    on an object folder. When the grid is opened, the grid will contain only the class
    attributes that were marked as **Visible in Grid View** in the class configuration,
    as you learned in [*Chapter 5*](B17073_05_ePub_RK.xhtml#_idTextAnchor093), *Exploring
    Objects and Classes*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 开始数据导出的第一步是通过点击对象文件夹来打开对象网格。当网格打开时，网格将只包含在类配置中标记为**在网格视图中可见**的类属性，正如你在[*第5章*](B17073_05_ePub_RK.xhtml#_idTextAnchor093)，“探索对象和类”中所学到的。
- en: 'To add or remove the fields that are shown in the grid, you must click on the
    **Grid Options** button to open the configuration modal. You can see how this
    configuration modal looks in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加或删除在网格中显示的字段，你必须点击**网格选项**按钮来打开配置模式。你可以在下面的截图中看到这个配置模式的外观：
- en: '![Figure 14.7: Grid Options Configuration'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.7：网格选项配置'
- en: '](img/Figure_14.07_B17073.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.07_B17073.jpg)'
- en: 'Figure 14.7: Grid Options Configuration'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7：网格选项配置
- en: As you can see in the previous screenshot, the configuration modal structure
    is quite similar to the one that we saw in the column configuration panel of the
    import configuration.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，配置模式结构与我们在导入配置的列配置面板中看到的是相当相似的。
- en: In the left region, you can find the list of the class attributes and some sets
    of operators to format, render, and transform object data and to extract values
    from object relations. We can drag and drop class attributes and the operators
    in the right region so that these attributes will be shown in the grid.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧区域，你可以找到类属性列表和一些用于格式化、渲染和转换对象数据以及从对象关系提取值的操作符集合。我们可以将类属性和操作符从右侧区域拖放到网格中，以便这些属性在网格中显示。
- en: In the previous screenshot, you may note that we used **Operator Any Getter**
    to extract a specific property from a relation. To do this, we just need to drag
    and drop the relation attribute as a child of the operator and specify the property
    that we want to extract for that relation.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个截图中，你可能注意到我们使用了**任何获取器操作符**来从一个关系中提取特定的属性。为此，我们只需要将关系属性作为操作符的子项拖放到操作符中，并指定我们想要从该关系提取的属性。
- en: Once the grid configuration is completed, you can click on the **Apply** button
    to confirm the changes, and you can also save the configuration to reuse it in
    the future by clicking the **Save Copy & Share** button.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成网格配置，你可以点击**应用**按钮来确认更改，你也可以通过点击**保存副本并共享**按钮将配置保存以供将来重用。
- en: 'In the following screenshot, you can see how the object grid looks after the
    changes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，你可以看到更改后的对象网格看起来如何：
- en: '![Figure 14.8: Object Grid'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.8：对象网格'
- en: '](img/Figure_14.08_B17073.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.08_B17073.jpg](img/Figure_14.08_B17073.jpg)'
- en: 'Figure 14.8: Object Grid'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8：对象网格
- en: As you can see in the previous screenshot, in the object grid the previously
    defined columns are shown. In the screenshot, you can also see that, if we open
    the **Grid Options** submenu, we can switch from different configurations, save
    a copy of the current configuration, set that configuration as favorite, or delete
    the current configuration.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前一个屏幕截图中所见，在对象网格中显示了之前定义的列。在屏幕截图中，您还可以看到，如果我们打开**网格选项**子菜单，我们可以切换到不同的配置，保存当前配置的副本，将该配置设置为收藏夹，或者删除当前配置。
- en: 'The object grid shows all the objects and variants created inside the opened
    folder and, eventually, in existing subfolders. If you want to limit the objects
    shown to the first level of the hierarchy, you can enable the **just direct children**
    checkbox, as you can see in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对象网格显示了在打开的文件夹内以及最终在现有子文件夹内创建的所有对象和变体。如果您想限制显示的对象仅限于层次结构的第一个级别，您可以通过启用**仅直接子项**复选框来实现，正如您可以在以下屏幕截图中看到的那样：
- en: '![Figure 14.9: Object Grid'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.9：对象网格'
- en: '](img/Figure_14.09_B17073.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.09_B17073.jpg](img/Figure_14.09_B17073.jpg)'
- en: 'Figure 14.9: Object Grid'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9：对象网格
- en: As you can see in the previous screenshot, only direct children objects are
    shown. The objects in the grid can be exported both in CSV and in XLSX files.
    For CSV exports, you will be asked to choose the delimiter character.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前一个屏幕截图中所见，仅显示直接子项对象。网格中的对象可以导出为CSV和XLSX文件。对于CSV导出，您将被要求选择分隔符字符。
- en: To summarize, in this section you learned how to configure object grids, and
    how to perform data export. In the following section, you will discover which
    limitations you may encounter using standard import and export functionalities,
    and how to create custom operators for importing.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在本节中您学习了如何配置对象网格以及如何执行数据导出。在下一节中，您将发现使用标准导入和导出功能可能会遇到哪些局限性，以及如何创建用于导入的自定义运算符。
- en: Limitations of Standard Functionalities
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准功能局限性
- en: In the previous sections, you learned how to perform data importing and exporting
    through standard functionalities. As you learned, these functionalities are easy
    to configure and work well for simple scenarios.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，您学习了如何通过标准功能执行数据导入和导出。如您所知，这些功能易于配置，并且对于简单场景工作良好。
- en: In this section, you will learn what the main limitations of these standard
    functionalities are, and you will learn how to implement a custom PHP operator
    to be used in CSV importing. Let's start by presenting the limitations of the
    previously seen export functionality.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解这些标准功能的主要局限性，以及您将学习如何实现一个自定义PHP运算符，用于CSV导入。让我们首先介绍之前看到的导出功能局限性。
- en: Limitations of Data Export
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据导出局限性
- en: 'In the *Exporting data* section, you learned how to configure object grids
    to export object data. When using these configurations, you may encounter the
    following limitations:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在**导出数据**部分，您学习了如何配置对象网格以导出对象数据。当使用这些配置时，您可能会遇到以下局限性：
- en: '`Fieldcollections` attributes. The `Fieldcollections` can present a different
    cardinality for each object class, and it''s very difficult to represent these
    kinds of attributes in a flat structure such as a CSV or an XLSX file.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fieldcollections`属性。`Fieldcollections`可以为每个对象类提供不同的基数，并且很难在像CSV或XLSX文件这样的平面结构中表示这些类型的属性。'
- en: '**Parent-child relation** **redundancy**: Another limitation given by the file
    format is the fact that the parent-child relations cannot be explained without
    avoiding data redundancy because each object variant will be placed in a different
    row, and in the exported file there will not be any information about the fact
    that a row represents an object or a variant.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**父子关系** **冗余**：文件格式给出的另一个局限性是，由于每个对象变体将放置在不同的行中，因此无法在不避免数据冗余的情况下解释父子关系，在导出的文件中不会有任何关于一行代表对象或变体的信息。'
- en: '**Excluding variants**: In the previous section, in terms of data filtering,
    you learned that you can use the **just direct children** checkbox to filter objects
    only and exclude object variants. This works only in the case that all the objects
    are directly created inside the opened folder, because if objects are created
    in subfolders, they will be skipped by clicking the checkbox. The only way to
    filter just for objects is to add a direct SQL condition, as you can see in the
    following screenshot:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排除变体**：在前一节中，在数据过滤方面，您了解到可以使用**仅直接子项**复选框来过滤对象并排除对象变体。这仅在所有对象都直接在打开的文件夹内创建的情况下有效，因为如果对象是在子文件夹中创建的，则点击复选框时会跳过它们。仅过滤对象的唯一方法是添加直接SQL条件，如下一个截图所示：'
- en: '![Figure 14.10: Direct SQL query'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.10：直接SQL查询'
- en: '](img/Figure_14.10_B17073.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.10_B17073.jpg)'
- en: 'Figure 14.10: Direct SQL query'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10：直接SQL查询
- en: As you can see in the previous screenshot, clicking on the **Direct SQL query**
    icon will open a textual input in which you can write a valid SQL condition. This
    is quite useful, but it requires knowing the database structure.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，点击**直接SQL查询**图标将打开一个文本输入框，在其中您可以编写有效的SQL条件。这非常有用，但需要了解数据库结构。
- en: '**Server timeout**: Last but not least, there could be a problem related to
    timings. The export operation is done through an HTML call to a controller, so
    for thousands of objects to export, this operation may require a lot of time,
    and there could be a timeout depending on the server settings.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器超时**：最后但同样重要的是，可能存在与时间相关的問題。导出操作是通过HTML调用控制器来完成的，因此对于要导出的成千上万的对象，此操作可能需要很长时间，并且可能会根据服务器设置出现超时。'
- en: Now that you have learned about the limitations of the standard data export,
    let's see which limitations you may encounter on data import.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了标准数据导出的限制，让我们看看在数据导入过程中您可能会遇到哪些限制。
- en: Limitations of Data Import
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据导入限制
- en: 'The main problem with importing CSV files is the standard required format for
    the different types of attributes. For example, for the following kinds of fields,
    we have the following limitations:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 导入CSV文件的主要问题是不同类型属性所需的标准格式。例如，对于以下类型的字段，我们有以下限制：
- en: '**QuantityValue**: To import the value for this kind of field, you have to
    put the numeric value in the CSV cell, followed by the unit of measure.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数量值**：要导入此类字段的值，您必须在CSV单元格中放置数值，后跟计量单位。'
- en: '**Select**: The CSV cell must contain a valid value for the selection and not
    the option label. This can be a problem in cases in which the created select has
    numeric IDs or, in general, not mnemonic values.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择**：CSV单元格必须包含选择的有效值，而不是选项标签。这在创建的选择具有数字ID或通常不是记忆值的情况下可能是一个问题。'
- en: '**Multiselect**: Different values on multiselect fields must be only separated
    by the comma character.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多选**：多选字段上的不同值必须仅由逗号字符分隔。'
- en: '`object:/` prefix, followed by the full path of the related object.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:/`前缀，后跟相关对象的完整路径。'
- en: '**Advanced Relation**: Metadata for advanced relations cannot be imported.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级关系**：高级关系的元数据无法导入。'
- en: '**Fieldcollection**: Values for Fieldcollection cannot be imported.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fieldcollection**：Fieldcollection的值无法导入。'
- en: '**Media**: Images and videos cannot be attached to objects through a CSV import.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**媒体**：无法通过CSV导入将图片和视频附加到对象上。'
- en: These limitations make the compilation of CSV files quite complex because it's
    difficult for non-expert users to create a CSV file that respects all the format
    rules. These limitations can be circumvented by creating custom PHP operators,
    as we will see in the following section, but of course, we will lose the advantage
    of importing data without the need to write any lines of code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这些限制使得CSV文件的编译相当复杂，因为非专家用户很难创建一个符合所有格式规则的CSV文件。这些限制可以通过创建自定义PHP运算符来规避，我们将在下一节中看到，但当然，我们将失去无需编写任何代码即可导入数据的优势。
- en: Another limitation related to CSV files is the format itself. Although the CSV
    format is a widespread standard, there could be dated external applications that
    cannot produce exports in the CSV format. That said, to import any other kind
    of file, a custom solution must be developed.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 与CSV文件相关的另一个限制是格式本身。尽管CSV格式是一个广泛的标准，但可能存在过时的外部应用程序无法以CSV格式生成导出。话虽如此，要导入任何其他类型的文件，必须开发自定义解决方案。
- en: As for what concerns the importation process itself, the whole process cannot
    be run as a background process. Once the import is started, the import modal cannot
    be closed until the end of the import process because closing the modal will cause
    the import to be stopped. For each imported line, the frontend interface is refreshed,
    and for thousands of rows to be imported, the entire process can last some hours.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 至于导入过程本身，整个过程不能作为后台进程运行。一旦开始导入，导入模态直到导入过程结束都不能关闭，因为关闭模态会导致导入停止。对于每条导入的行，前端界面都会刷新，对于要导入的数千行，整个过程可能需要数小时。
- en: Due to these timings, it is not possible to schedule an automatic importation
    flow between external software and Pimcore because, as said, the import cannot
    be run as a background process and requires maintaining an open browser for a
    lot of hours.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些时间限制，无法在外部软件和 Pimcore 之间安排自动导入流程，因为如前所述，导入不能作为后台进程运行，需要保持浏览器长时间开启。
- en: Now that you have learned about the limitations of a standard data import, let's
    see how to create a custom PHP operator to be used on CSV imports. The use of
    these PHP operators can circumvent some of the previously mentioned limitations.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了标准数据导入的限制，让我们看看如何创建一个用于 CSV 导入的自定义 PHP 操作符。使用这些 PHP 操作符可以绕过之前提到的一些限制。
- en: Creating a Custom Operator
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义操作符
- en: In the previous section, you learned which limitations you may encounter in
    the standard data import process. One of these limitations is the strict format
    required for some attribute types. This limitation can be circumvented by creating
    custom operators to manage CSV cell data.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个章节中，你学习了在标准数据导入过程中可能会遇到哪些限制。这些限制之一是某些属性类型所需的严格格式。通过创建自定义操作符来管理 CSV 单元格数据，可以绕过这种限制。
- en: 'In this section, you will learn how to create these custom operators, and how
    to use them within CSV imports. In particular, we will see an example operator
    that will search for the option of a select field by the option label and not
    by its value. In the following code snippet, you can see how this operator can
    be created:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何创建这些自定义操作符，以及如何在 CSV 导入中使用它们。特别是，我们将看到一个示例操作符，该操作符将根据选项标签而不是其值搜索选择字段的选项。在下面的代码片段中，你可以看到如何创建此操作符：
- en: '[PRE2]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see in the previous code snippet, the operator must extend the `AbstractOperator`
    class. In the class constructor, we can parse the additional data that is defined
    in the operator configuration, and the implementation of the business logic must
    be done in the `process` function, which will be automatically called by the import
    flow.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个代码片段所示，操作符必须扩展 `AbstractOperator` 类。在类构造函数中，我们可以解析在操作符配置中定义的附加数据，并且业务逻辑的实现必须在
    `process` 函数中完成，该函数将由导入流程自动调用。
- en: In this specific example, we use the `getFieldDefinition` method of the object's
    class to retrieve the field definition. If the field is a select or a multiselect
    attribute, we can use the `getOptions` function to retrieve the select options
    and search the value that corresponds to the given label.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的例子中，我们使用对象的类中的 `getFieldDefinition` 方法来检索字段定义。如果字段是一个选择或多项选择属性，我们可以使用
    `getOptions` 函数来检索选择选项并搜索与给定标签对应的值。
- en: 'Once the operator is created, we must use it on CSV import configurations.
    To do this, just drag and drop the **Operator PHP Code** operator in the CSV column
    to which you want to apply the operator to. In the operator configuration panel,
    you must put the operator namespace, as you can see in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建操作符，我们必须在 CSV 导入配置中使用它。为此，只需将 **操作符 PHP 代码** 操作符拖放到你想要应用操作符的 CSV 列中。在操作符配置面板中，你必须放置操作符命名空间，如以下屏幕截图所示：
- en: '![Figure 14.11: Operator PHP Code'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.11：操作符 PHP 代码'
- en: '](img/Figure_14.11_B17073.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.11：操作符 PHP 代码](img/Figure_14.11_B17073.jpg)'
- en: 'Figure 14.11: Operator PHP Code'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.11：操作符 PHP 代码
- en: As you can see in the previous screenshot, in the operator configuration we
    must put the PHP class namespace in the **PHP Class** input. Then, in the **Additional
    Data** text area, we can put some data to pass to the operator. In our example,
    we are passing this additional information as JSON, which will be parsed by the
    operator.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，在操作符配置中，我们必须在 **PHP 类** 输入中放置 PHP 类命名空间。然后，在 **附加数据** 文本区域中，我们可以放置一些要传递给操作符的数据。在我们的例子中，我们以
    JSON 格式传递这些附加信息，该信息将由操作符解析。
- en: To summarize, in this section you learned about which limitations you may encounter
    on performing standard import and export processes. Then, you learned how to create
    custom PHP operators that can be used on the CSV import processes. In the following
    section, you will learn how to implement custom solutions for importing and exporting.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在本节中，您学习了在执行标准导入和导出过程中可能遇到的限制。然后，您学习了如何创建自定义 PHP 操作符，这些操作符可以在 CSV 导入过程中使用。在下一节中，您将学习如何实现导入和导出的自定义解决方案。
- en: Implementing Custom Solutions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现自定义解决方案
- en: In the previous section, you learned about the limitations of standard import
    and export functionalities. Then, you learned how to create a custom operator
    to be used on CSV import processes.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您学习了标准导入和导出功能性的限制。然后，您学习了如何创建一个自定义操作符，用于 CSV 导入过程。
- en: In this section, you will learn how to implement custom solutions for importing
    and exporting. In particular, you will learn how to add additional buttons to
    the object and folder editor in the Pimcore backend interface, which will call
    custom controllers on clicking, and how to create commands that could be scheduled
    and run as a background process.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何实现导入和导出的自定义解决方案。特别是，您将学习如何向 Pimcore 后端界面中的对象和文件夹编辑器添加额外的按钮，这些按钮在点击时将调用自定义控制器，以及如何创建可以计划并作为后台进程运行的命令。
- en: Adding custom buttons
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加自定义按钮
- en: In this section, you will learn how to add custom buttons to the Pimcore backend
    interface, and how to let these buttons call for custom controllers to perform
    imports and exports.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何向 Pimcore 后端界面添加自定义按钮，以及如何让这些按钮调用自定义控制器以执行导入和导出。
- en: 'To add these buttons, we need to implement the `postOpenObject` function inside
    the `Resources/js/Pimcore/startup.js` file of a previously created Pimcore bundle.
    In the following code snippet, you can see an example of how to create two buttons
    to upload and download files:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加这些按钮，我们需要在之前创建的 Pimcore 包的 `Resources/js/Pimcore/startup.js` 文件中实现 `postOpenObject`
    函数。在下面的代码片段中，您可以看到一个如何创建两个按钮来上传和下载文件的示例：
- en: '[PRE3]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see in the previous code snippet, we first check whether the opened
    object is a folder, to add two different buttons in the folder editor toolbar.
    For each button, the `handler` function is the one that is called when the object
    is clicked.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的代码片段中所见，我们首先检查打开的对象是否为文件夹，以便在文件夹编辑工具栏中添加两个不同的按钮。对于每个按钮，`handler` 函数是在对象被点击时被调用的函数。
- en: In the first button, we are using the `pimcore.helpers.download` function to
    let the browser download the file returned in the response. In the second button,
    the use of `pimcore.helpers.uploadDialog` will render an upload modal; the uploaded
    file will be passed to the controller.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个按钮中，我们使用 `pimcore.helpers.download` 函数让浏览器下载响应中返回的文件。在第二个按钮中，使用 `pimcore.helpers.uploadDialog`
    将渲染一个上传模态框；上传的文件将被传递到控制器。
- en: 'Let''s now have a look at how to implement the controller actions that will
    be called by the created buttons. In the following code snippet, you can see an
    example of controller implementation:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看如何实现将被创建的按钮调用的控制器动作。在下面的代码片段中，您可以看到一个控制器实现的示例：
- en: '[PRE4]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see in the previous code snippet, a specific function is created
    for each controller action. The HTTP request object is passed as an input argument
    for each action, and the request attribute values can be accessed by the `get`
    function.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的代码片段中所见，为每个控制器动作创建了一个特定的函数。每个动作都将 HTTP 请求对象作为输入参数传递，并且可以通过 `get` 函数访问请求属性值。
- en: On the `exportObjectsAction` function, we have configured the response to accept
    the download of a JSON file by setting the response header properly. The chosen
    file format is just an example and can be changed to the required one. On the
    `importObjectsAction` function, we read the uploaded file content from the `$_FILES`
    global variable, so that depending on the business logic, we can import the objects.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `exportObjectsAction` 函数中，我们已通过正确设置响应头来配置响应以接受 JSON 文件的下载。所选的文件格式只是一个示例，可以更改为所需的格式。在
    `importObjectsAction` 函数中，我们从 `$_FILES` 全局变量中读取上传文件的文件内容，这样根据业务逻辑，我们可以导入对象。
- en: To summarize, in this section you learned how to add custom buttons to the Pimcore
    backend interface, and how to specifically realize controllers to import and export
    files. In the following section, you will learn how to create a command that can
    be invoked by the Pimcore console and that, eventually, can be scheduled to be
    executed as a background process.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Creating Pimcore Commands
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, you learned how to create custom controllers to perform
    imports and exports of any kind of file, by creating additional buttons to place
    in the Pimcore backend interface. In this section, you will learn how to create
    commands that can be invoked by the Pimcore console.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new command, you just need to create a class that extends the `Pimcore\Console\AbstractCommand`
    class, as you can see in the following code snippet:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see in the previous code snippet, in the command configuration you
    can specify a name and a description for the command, and a list of optional or
    required arguments and options for the command.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: The business logic for the command must be implemented in the `execute` function.
    We can use command native functions such as `dump` and `writeError` to print messages
    in the console.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the command is developed, it must be declared as a service, as is shown
    in the following code snippet:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You may note that, in the previous code snippet, the `command` tag reports
    the name of the created command. To invoke the command, you just need to run the
    following instruction:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When running the command, the filename must be specified as an attribute. You
    can see the command result in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12: Command execution'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.12_B17073.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.12: Command execution'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, messages and errors are dumped in
    the console.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, in the first part of this section you learned how to add custom
    buttons to the Pimcore backend interface, and how to let these buttons call for
    controller actions to upload and download files. Then, you learned how to create
    and run Pimcore commands through the Pimcore console.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to configure the new Pimcore Data Importer,
    which will let you import data from different sources and schedule imports in
    the background.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Data Importer
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you learned how to implement custom solutions, and
    in particular, how to add custom buttons to the object interface and how to create
    executable commands.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn how to install and configure the new Pimcore
    Data Importer, which in the PimcoreX version will replace the standard CSV import
    that we described in the *Importing Data* section.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'The Data Importer plugin is an extension of the Datahub bundle, which we described
    in [*Chapter 13*](B17073_13_ePub_RK.xhtml#_idTextAnchor228), *Implementing Master
    Data Management*. To install Data Importer, you just need to run the following
    script:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see in the preceding script, the Data Importer can be downloaded
    through Composer and can be enabled like every other Pimcore bundle, with the
    `pimcore:bundle:enable` command.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have enabled the bundle, you can open the **Datahub** configuration
    panel by accessing the **Settings** | **Datahub Config** option in the Pimcore
    menu. To create a new import configuration, you just need to click on the **Add
    Configuration** button, as you can see in the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13: Add import configuration'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.13_B17073.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.13: Add import configuration'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, in addition to the GraphQL configuration,
    you can select the **Data Objects Importer** option and fill in the configuration
    name.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure and run the import, you must follow these steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **General** tab, enable the **Active** checkbox and add an optional
    description, as you can see in the following screenshot:![Figure 14.14: General
    settings'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.14_B17073.jpg)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.14: General settings'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, the defined configuration name is
    shown in the settings.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `POST` call to the generated URL.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have defined the data source, you can specify the file format, choosing
    from CSV, JSON, XLSX, and XML, and fill in the specific configurations.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **Import Settings** panel, configure the resolver and the mapping for
    each field in the uploaded file. In the following screenshot, you will see how
    to configure the resolver:![Figure 14.16: Import Resolver'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.16_B17073.jpg)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.16: Import Resolver'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, you can define the class involved
    in the import and the loading strategy, choosing from **Path**, **Id**, **Attribute**,
    or **No Loading**. This last option will let the importer always create new objects,
    without looking at these objects' existence. Then, you can choose where created
    and updated objects must be located, by defining an existing folder path, and
    how the published status must be affected.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Processing Settings** tab, you can define whether the configured import
    can be run multiple times in parallel or whether every importation run must be
    sequential.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **Mappings** tab, define a mapping for each attribute of the uploaded
    file that you want to import. In the following screenshot, you will see how to
    add a new mapping and how to map a simple text field:![Figure 14.17: Import Mappings'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.17_B17073.jpg)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.17: Import Mappings'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, you can add a new field mapping by
    clicking on the **Add** button. To map a simple text field, you just need to select
    the correct field from the auto-detected source attributes and select the corresponding
    class field in the **Field Name** picklist.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For different kinds of fields, you may need to add one or more transformations
    using the **Transformation Pipeline**. You can see an example in the following
    screenshot:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.18: Import Mappings'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_14.18_B17073.jpg)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.18: Import Mappings'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, for **QuantityValue** attributes
    we can add a specific transformation. This requires selecting two source attributes,
    one containing the value and one containing the unit of measure.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These pipelines can be used to import dates and numeric fields, or mode complex
    fields such as, for example, images and other kinds of assets, or the relation
    with other objects.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the left panel, you can see that the already defined fields are highlighted.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **Execution** panel, run the import that you have configured. You can
    manually run the import by clicking on the **Start** button, as you can see in
    the following screenshot:![Figure 14.19: Import Execution'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.19_B17073.jpg)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.19: Import Execution'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, the import status is shown in the
    progress bar, and you can stop the import at any time.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you want to schedule the import to be run in the background, you just need
    to fill in the **Cron Definition** rule.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To enable the `cron` execution, you just need to schedule the execution command
    as shown in the following script:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To summarize, in this section you learned how to install and enable the Data
    Importer plugin. Through a step-by-step configuration, you learned how to create
    and execute an import configuration.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to import and export data using the standard
    Pimcore functionalities, which let you import and export CSV files after having
    defined the respective import and export configurations.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: After having described how to properly set up these configurations, you learned
    which limitations you might encounter when performing these standard functionalities,
    and how to implement a custom operator to be used in the CSV import process.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, you learned how to implement custom solutions for importing
    and exporting. In particular, you learned how to add custom buttons to the Pimcore
    backend interface, which lets you upload and download files, and how to create
    commands that can be invoked by the Pimcore console and, eventually, scheduled
    as background processes.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: In the last section, you finally learned how to enable the Data Importer plugin
    to create import configurations from different kinds of sources, which you can
    execute manually or schedule to be executed in the background.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: As this is the last chapter, let's try to summarize the whole book's content.
    In the first part of the book, we talked about the Pimcore basics, introducing
    Pimcore and its features, showing how to set up a development environment, how
    to move inside the Pimcore menus and functionalities, and how to administrate
    Pimcore sites.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: In the second part, you learned how to implement a blog, step by step, using
    the Pimcore CMS engine, starting by learning how to create custom CMS pages and
    how to render data for the blog, and then how to create reusable components and
    how to finalize the website.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分，你学习了如何逐步使用Pimcore CMS引擎实现一个博客，从学习如何创建自定义CMS页面以及如何为博客渲染数据开始，然后是如何创建可重用组件以及如何最终完成网站。
- en: In the last chapters, we described how to use Pimcore for enterprise solutions,
    with a focus on the PIM and MDM Pimcore features and the data integration processes,
    providing concrete examples of how to connect Pimcore to external systems.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们描述了如何使用Pimcore进行企业解决方案，重点关注PIM和MDM的Pimcore功能以及数据集成过程，提供了如何将Pimcore连接到外部系统的具体示例。
- en: Now that you have reached the end of this book, we hope it has been an inspiring
    read, and that this book will be a useful guide for you to develop your projects
    with Pimcore.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经读完了这本书的结尾，我们希望它对你来说是一次鼓舞人心的阅读，并且这本书将成为你使用Pimcore开发项目的有用指南。
