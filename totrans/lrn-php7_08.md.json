["```php\n{\n//...\n    \"require\": {\n        \"monolog/monolog\": \"^1.17\",\n        \"twig/twig\": \"^1.23\"\n    },\n \"require-dev\": {\n \"phpunit/phpunit\": \"5.1.3\"\n },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Bookstore\\\\\": \"src\"\n        }\n    }\n}\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"false\"\n bootstrap=\"vendor/autoload.php\"\n>\n<testsuites>\n<testsuite name=\"Bookstore Test Suite\">\n<directory>./tests/</directory>\n</testsuite>\n</testsuites>\n<filter>\n<whitelist>\n<directory>./src</directory>\n</whitelist>\n</filter>\n</phpunit>\n```", "```php\n<?php\n\nnamespace Bookstore\\Utils;\n\ntrait Unique {\n    protected $id;\n\n    public function setId(int $id) {\n        $this->id = $id;\n    }\n\n    public function getId(): int {\n        return $this->id;\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests\\Domain\\Customer;\n\nuse Bookstore\\Domain\\Customer\\Basic;\nuse PHPUnit_Framework_TestCase;\n\nclass BasicTest extends PHPUnit_Framework_TestCase {\n    public function testAmountToBorrow() {\n        $customer = new Basic(1, 'han', 'solo', 'han@solo.com');\n\n $this->assertSame(\n            3,\n            $customer->getAmountToBorrow(),\n            'Basic customer should borrow up to 3 books.'\n        );\n    }\n}\n```", "```php\n/**\n * @test\n */\npublic function thisIsATestToo() {\n  //...\n}\n```", "```php\npublic function testFail() {\n    $customer = new Basic(1, 'han', 'solo', 'han@solo.com');\n\n    $this->assertSame(\n        4,\n        $customer->getAmountToBorrow(),\n        'Basic customer should borrow up to 3 books.'\n    );\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests\\Domain\\Customer;\n\nuse Bookstore\\Domain\\Customer\\Basic;\nuse PHPUnit_Framework_TestCase;\n\nclass BasicTest extends PHPUnit_Framework_TestCase {\n    private $customer;\n\n public function setUp() {\n $this->customer = new Basic(\n 1, 'han', 'solo', 'han@solo.com'\n );\n }\n\n    public function testAmountToBorrow() {\n        $this->assertSame(\n            3,\n            $this->customer->getAmountToBorrow(),\n            'Basic customer should borrow up to 3 books.'\n        );\n    }\n}\n```", "```php\npublic function testIsExemptOfTaxes() {\n $this->assertFalse(\n $this->customer->isExemptOfTaxes(),\n 'Basic customer should be exempt of taxes.'\n );\n}\n```", "```php\n$this->assertSame(\n    $this->customer->isExemptOfTaxes(),\n    false,\n    'Basic customer should be exempt of taxes.'\n);\n```", "```php\npublic function testGetMonthlyFee() {\n $this->assertSame(\n 5,\n $this->customer->getMonthlyFee(),\n 'Basic customer should pay 5 a month.'\n );\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests\\Domain\\Customer;\n\nuse Bookstore\\Domain\\Customer\\CustomerFactory;\nuse PHPUnit_Framework_TestCase;\n\nclass CustomerFactoryTest extends PHPUnit_Framework_TestCase {\n    public function testFactoryBasic() {\n        $customer = CustomerFactory::factory(\n            'basic', 1, 'han', 'solo', 'han@solo.com'\n        );\n\n $this->assertInstanceOf(\nBasic::class,\n $customer,\n 'basic should create a Customer\\Basic object.'\n );\n    }\n}\n```", "```php\n$expectedBasicCustomer = new Basic(1, 'han', 'solo', 'han@solo.com');\n\n$this->assertSame(\n    $customer,\n    $expectedBasicCustomer,\n    'Customer object is not as expected.'\n);\n```", "```php\n$expectedBasicCustomer = new Basic(1, 'han', 'solo', 'han@solo.com');\n\n$this->assertEquals(\n    $customer,\n    $expectedBasicCustomer,\n    'Customer object is not as expected.'\n);\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests\\Domain\\Customer;\n\nuse Bookstore\\Domain\\Sale;\nuse PHPUnit_Framework_TestCase;\n\nclass SaleTest extends PHPUnit_Framework_TestCase {\n    public function testNewSaleHasNoBooks() {\n        $sale = new Sale();\n\n $this->assertEmpty(\n $sale->getBooks(),\n 'When new, sale should have no books.'\n );\n    }\n\n    public function testAddNewBook() {\n        $sale = new Sale();\n        $sale->addBook(123);\n\n $this->assertCount(\n 1,\n $sale->getBooks(),\n 'Number of books not valid.'\n );\n $this->assertArrayHasKey(\n 123,\n $sale->getBooks(),\n 'Book id could not be found in array.'\n );\n        $this->assertSame(\n            $sale->getBooks()[123],\n            1,\n            'When not specified, amount of books is 1.'\n        );\n    }\n}\n```", "```php\n$this->assertSame(\n    [123 => 1],\n    $sale->getBooks(),\n    'Books array does not match.'\n);\n```", "```php\npublic function testAddMultipleBooks() {\n    $sale = new Sale();\n    $sale->addBook(123, 4);\n    $sale->addBook(456, 2);\n    $sale->addBook(456, 8);\n\n    $this->assertSame(\n        [123 => 4, 456 => 10],\n        $sale->getBooks(),\n        'Books are not as expected.'\n    );\n}\n```", "```php\n/**\n * @expectedException \\InvalidArgumentException\n * @expectedExceptionMessage Wrong type.\n */\npublic function testCreatingWrongTypeOfCustomer() {\n    $customer = CustomerFactory::factory(\n        'deluxe', 1, 'han', 'solo', 'han@solo.com'\n\n   );\n}\n```", "```php\n/**\n * @expectedException \\InvalidArgumentException\n */\npublic function testCreatingCorrectCustomer() {\n    $customer = CustomerFactory::factory(\n        'basic', 1, 'han', 'solo', 'han@solo.com'\n    );\n}\n```", "```php\npublic function providerFactoryValidCustomerTypes() {\n    return [\n        'Basic customer, lowercase' => [\n            'type' => 'basic',\n            'expectedType' => '\\Bookstore\\Domain\\Customer\\Basic'\n        ],\n        'Basic customer, uppercase' => [\n            'type' => 'BASIC',\n            'expectedType' => '\\Bookstore\\Domain\\Customer\\Basic'\n        ],\n        'Premium customer, lowercase' => [\n            'type' => 'premium',\n            'expectedType' => '\\Bookstore\\Domain\\Customer\\Premium'\n        ],\n        'Premium customer, uppercase' => [\n            'type' => 'PREMIUM',\n            'expectedType' => '\\Bookstore\\Domain\\Customer\\Premium'\n        ]\n    ];\n}\n\n/**\n * @dataProvider providerFactoryValidCustomerTypes\n * @param string $type\n * @param string $expectedType\n */\npublic function testFactoryValidCustomerTypes(\n string $type,\n string $expectedType\n) {\n    $customer = CustomerFactory::factory(\n        $type, 1, 'han', 'solo', 'han@solo.com'\n    );\n    $this->assertInstanceOf(\n        $expectedType,\n        $customer,\n        'Factory created the wrong type of customer.'\n    );\n}\n```", "```php\n$di->set('BookModel', new BookModel($di->get('PDO')));\n```", "```php\npublic function borrow(int $bookId): string {\n $bookModel = $this->di->get('BookModel');\n\n    try {\n//...\n```", "```php\n\"autoload\": {\n    \"psr-4\": {\n \"Bookstore\\\\Tests\\\\\": \"tests\",\n        \"Bookstore\\\\\": \"src\"\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests;\n\nuse PHPUnit_Framework_TestCase;\nuse InvalidArgumentException;\n\nabstract class AbstractTestCase extends PHPUnit_Framework_TestCase {\n    protected function mock(string $className) {\n        if (strpos($className, '\\\\') !== 0) {\n            $className = '\\\\' . $className;\n        }\n\n        if (!class_exists($className)) {\n            $className = '\\Bookstore\\\\' . trim($className, '\\\\');\n\n            if (!class_exists($className)) {\n                throw new InvalidArgumentException(\n                    \"Class $className not found.\"\n                );\n            }\n        }\n\n        return $this->getMockBuilder($className)\n            ->disableOriginalConstructor()\n            ->getMock();\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests;\n\nuse Bookstore\\Utils\\DependencyInjector;\nuse Bookstore\\Core\\Config;\nuse Monolog\\Logger;\nuse Twig_Environment;\nuse PDO;\n\nabstract class ControllerTestCase extends AbstractTestCase {\n    protected $di;\n\n    public function setUp() {\n        $this->di = new DependencyInjector();\n        $this->di->set('PDO', $this->mock(PDO::class));\n        $this->di->set('Utils\\Config', $this->mock(Config::class));\n        $this->di->set(\n            'Twig_Environment',\n            $this->mock(Twig_Environment::class)\n        );\n        $this->di->set('Logger', $this->mock(Logger::class));\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests\\Controllers;\n\nuse Bookstore\\Controllers\\BookController;\nuse Bookstore\\Core\\Request;\nuse Bookstore\\Exceptions\\NotFoundException;\nuse Bookstore\\Models\\BookModel;\nuse Bookstore\\Tests\\ControllerTestCase;\nuse Twig_Template;\n\nclass BookControllerTest extends ControllerTestCase {\n    private function getController(\n        Request $request = null\n    ): BookController {\n        if ($request === null) {\n            $request = $this->mock('Core\\Request');\n        }\n        return new BookController($this->di, $request);\n    }\n\n    public function testBookNotFound() {\n        $bookModel = $this->mock(BookModel::class);\n $bookModel\n ->expects($this->once())\n ->method('get')\n ->with(123)\n ->will(\n $this->throwException(\n new NotFoundException()\n )\n );\n        $this->di->set('BookModel', $bookModel);\n\n        $response = \"Rendered template\";\n        $template = $this->mock(Twig_Template::class);\n $template\n ->expects($this->once())\n ->method('render')\n ->with(['errorMessage' => 'Book not found.'])\n ->will($this->returnValue($response));\n $this->di->get('Twig_Environment')\n ->expects($this->once())\n ->method('loadTemplate')\n ->with('error.twig')\n ->will($this->returnValue($template));\n\n        $result = $this->getController()->borrow(123);\n\n        $this->assertSame(\n            $result,\n            $response,\n            'Response object is not the expected one.'\n        );\n    }\n}\n```", "```php\nprotected function mockTemplate(\n    string $templateName,\n    array $params,\n    $response\n) {\n    $template = $this->mock(Twig_Template::class);\n    $template\n        ->expects($this->once())\n        ->method('render')\n        ->with($params)\n        ->will($this->returnValue($response));\n    $this->di->get('Twig_Environment')\n        ->expects($this->once())\n        ->method('loadTemplate')\n        ->with($templateName)\n        ->will($this->returnValue($template));\n}\n\npublic function testNotEnoughCopies() {\n    $bookModel = $this->mock(BookModel::class);\n    $bookModel\n        ->expects($this->once())\n        ->method('get')\n        ->with(123)\n        ->will($this->returnValue(new Book()));\n $bookModel\n ->expects($this->never())\n ->method('borrow');\n    $this->di->set('BookModel', $bookModel);\n\n    $response = \"Rendered template\";\n    $this->mockTemplate(\n        'error.twig',\n        ['errorMessage' => 'There are no copies left.'],\n        $response\n    );\n\n    $result = $this->getController()->borrow(123);\n\n    $this->assertSame(\n        $result,\n        $response,\n        'Response object is not the expected one.'\n    );\n}\n\npublic function testErrorSaving() {\n    $controller = $this->getController();\n    $controller->setCustomerId(9);\n\n    $book = new Book();\n    $book->addCopy();\n    $bookModel = $this->mock(BookModel::class);\n    $bookModel\n        ->expects($this->once())\n        ->method('get')\n        ->with(123)\n        ->will($this->returnValue($book));\n    $bookModel\n        ->expects($this->once())\n        ->method('borrow')\n        ->with(new Book(), 9)\n        ->will($this->throwException(new DbException()));\n    $this->di->set('BookModel', $bookModel);\n\n    $response = \"Rendered template\";\n    $this->mockTemplate(\n        'error.twig',\n        ['errorMessage' => 'Error borrowing book.'],\n        $response\n    );\n\n    $result = $controller->borrow(123);\n\n    $this->assertSame(\n        $result,\n        $response,\n        'Response object is not the expected one.'\n    );\n}\n```", "```php\npublic function testBorrowingBook() {\n    $controller = $this->getController();\n    $controller->setCustomerId(9);\n\n    $book = new Book();\n    $book->addCopy();\n    $bookModel = $this->mock(BookModel::class);\n    $bookModel\n        ->expects($this->once())\n        ->method('get')\n        ->with(123)\n        ->will($this->returnValue($book));\n    $bookModel\n        ->expects($this->once())\n        ->method('borrow')\n        ->with(new Book(), 9);\n    $bookModel\n        ->expects($this->once())\n        ->method('getByUser')\n        ->with(9)\n        ->will($this->returnValue(['book1', 'book2']));\n    $this->di->set('BookModel', $bookModel);\n\n    $response = \"Rendered template\";\n    $this->mockTemplate(\n        'books.twig',\n        [\n            'books' => ['book1', 'book2'],\n            'currentPage' => 1,\n            'lastPage' => true\n        ],\n        $response\n    );\n\n    $result = $controller->borrow(123);\n\n    $this->assertSame(\n        $result,\n        $response,\n        'Response object is not the expected one.'\n    );\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests;\n\nuse Bookstore\\Core\\Config;\nuse PDO;\n\nabstract class ModelTestCase extends AbstractTestCase {\n    protected $db;\n    protected $tables = [];\n\n    public function setUp() {\n        $config = new Config();\n\n        $dbConfig = $config->get('db');\n        $this->db = new PDO(\n            'mysql:host=127.0.0.1;dbname=bookstore',\n            $dbConfig['user'],\n            $dbConfig['password']\n        );\n        $this->db->beginTransaction();\n        $this->cleanAllTables();\n    }\n\n    public function tearDown() {\n        $this->db->rollBack();\n    }\n\n    protected function cleanAllTables() {\n        foreach ($this->tables as $table) {\n            $this->db->exec(\"delete from $table\");\n        }\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests\\Models;\n\nuse Bookstore\\Models\\BookModel;\nuse Bookstore\\Tests\\ModelTestCase;\n\nclass BookModelTest extends ModelTestCase {\n    protected $tables = [\n        'borrowed_books',\n        'customer',\n        'book'\n    ];\n    protected $model;\n\n    public function setUp() {\n        parent::setUp();\n\n        $this->model = new BookModel($this->db);\n    }\n}\n```", "```php\nprotected function buildBook(array $properties): Book {\n    $book = new Book();\n    $reflectionClass = new ReflectionClass(Book::class);\n\n    foreach ($properties as $key => $value) {\n        $property = $reflectionClass->getProperty($key);\n        $property->setAccessible(true);\n        $property->setValue($book, $value);\n    }\n\n    return $book;\n}\n\nprotected function addBook(array $params) {\n    $default = [\n        'id' => null,\n        'isbn' => 'isbn',\n        'title' => 'title',\n        'author' => 'author',\n        'stock' => 1,\n        'price' => 10.0,\n    ];\n    $params = array_merge($default, $params);\n\n    $query = <<<SQL\ninsert into book (id, isbn, title, author, stock, price)\nvalues(:id, :isbn, :title, :author, :stock, :price)\nSQL;\n    $this->db->prepare($query)->execute($params);\n}\n\nprotected function addCustomer(array $params) {\n    $default = [\n        'id' => null,\n        'firstname' => 'firstname',\n        'surname' => 'surname',\n        'email' => 'email',\n        'type' => 'basic'\n    ];\n    $params = array_merge($default, $params);\n\n    $query = <<<SQL\ninsert into customer (id, firstname, surname, email, type)\nvalues(:id, :firstname, :surname, :email, :type)\nSQL;\n    $this->db->prepare($query)->execute($params);\n}\n```", "```php\n/**\n * @expectedException \\Bookstore\\Exceptions\\DbException\n */\npublic function testBorrowBookNotFound() {\n    $book = $this->buildBook(['id' => 123]);\n    $this->model->borrow($book, 123);\n}\n\n/**\n * @expectedException \\Bookstore\\Exceptions\\DbException\n */\npublic function testBorrowCustomerNotFound() {\n    $book = $this->buildBook(['id' => 123]);\n    $this->addBook(['id' => 123]);\n\n    $this->model->borrow($book, 123);\n}\n\npublic function testBorrow() {\n    $book = $this->buildBook(['id' => 123, 'stock' => 12]);\n    $this->addBook(['id' => 123, 'stock' => 12]);\n    $this->addCustomer(['id' => 123]);\n\n    $this->model->borrow($book, 123);\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Tests\\Domain;\n\nuse Bookstore\\Domain\\Sale;\nuse PHPUnit_Framework_TestCase;\n\nclass SaleTest extends PHPUnit_Framework_TestCase {\n    public function testCanCreate() {\n        $sale = new Sale();\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\nclass Sale {\n}\n```", "```php\npublic function testWhenCreatedBookListIsEmpty() {\n    $sale = new Sale();\n\n    $this->assertEmpty($sale->getBooks());\n}\n```", "```php\npublic function getBooks(): array {\nreturn [];\n}\n```", "```php\npublic function testWhenAddingABookIGetOneBook() {\n    $sale = new Sale();\n    $sale->addBook(123);\n\n    $this->assertSame(\n        $sale->getBooks(),\n        [123 => 1]\n    );\n}\n```", "```php\nclass Sale {\n    private $books = [];\n\n    public function getBooks(): array {\n        return $this->books;\n    }\n\n    public function addBook(int $bookId) {\n        $this->books[123] = 1;\n    }\n}\n```", "```php\npublic function testSpecifyAmountBooks() {\n    $sale = new Sale();\n    $sale->addBook(123, 5);\n\n    $this->assertSame(\n        $sale->getBooks(),\n        [123 => 5]\n    );\n}\n```", "```php\npublic function addBook(int $bookId, int $amount = 1) {\n    $this->books[123] = $amount;\n}\n```", "```php\npublic function testAddMultipleTimesSameBook() {\n    $sale = new Sale();\n    $sale->addBook(123, 5);\n    $sale->addBook(123);\n    $sale->addBook(123, 5);\n\n    $this->assertSame(\n        $sale->getBooks(),\n        [123 => 11]\n    );\n}\n```", "```php\npublic function addBook(int $bookId, int $amount = 1) {\n    if (!isset($this->books[123])) {\n        $this->books[123] = 0;\n    }\n    $this->books[123] += $amount;\n}\n```", "```php\npublic function testAddDifferentBooks() {\n    $sale = new Sale();\n    $sale->addBook(123, 5);\n    $sale->addBook(456, 2);\n    $sale->addBook(789, 5);\n\n    $this->assertSame(\n        $sale->getBooks(),\n        [123 => 5, 456 => 2, 789 => 5]\n    );\n}\n```", "```php\npublic function addBook(int $bookId, int $amount = 1) {\n    if (!isset($this->books[$bookId])) {\n        $this->books[$bookId] = 0;\n    }\n    $this->books[$bookId] += $amount;\n}\n```"]