["```php\n    name: Nutrition Information\n    type: module\n    description: 'Defines a nutrition information field type based on the Microdata spec at http://schema.org/NutritionInformation '\n    package: Fields\n    core: '8.x'\n    ```", "```php\n    <?php\n\n    /**\n     * @file\n     * Contains \\Drupal\\telephone\\Plugin\\Field\\FieldType\\TelephoneItem.\n     */\n\n    namespace Drupal\\telephone\\Plugin\\Field\\FieldType;\n\n    use Drupal\\Core\\Field\\FieldDefinitionInterface;\n    use Drupal\\Core\\Field\\FieldItemBase;\n    use Drupal\\Core\\Field\\FieldStorageDefinitionInterface;\n    use Drupal\\Core\\TypedData\\DataDefinition;\n\n    /**\n     * Plugin implementation of the 'telephone' field type.\n     *\n     * @FieldType(\n     *   id = \"telephone\",\n     *   label = @Translation(\"Telephone number\"),\n     *   description = @Translation(\"This field stores a telephone number in the database.\"),\n     *   category = @Translation(\"Number\"),\n     *   default_widget = \"telephone_default\",\n     *   default_formatter = \"basic_string\"\n     * )\n     */\n    class TelephoneItem extends FieldItemBase {\n\n      /**\n       * {@inheritdoc}\n       */\n      public static function schema(FieldStorageDefinitionInterface $field_definition) {\n        return array(\n          'columns' => array(\n            'value' => array(\n              'type' => 'varchar',\n              'length' => 256,\n            ),\n          ),\n        );\n      }\n\n      /**\n       * {@inheritdoc}\n       */\n      public static function propertyDefinitions(FieldStorageDefinitionInterface $field_definition) {\n        $properties['value'] = DataDefinition::create('string')\n          ->setLabel(t('Telephone number'))\n          ->setRequired(TRUE);\n\n        return $properties;\n      }\n\n      /**\n       * {@inheritdoc}\n       */\n      public function isEmpty() {\n        $value = $this->get('value')->getValue();\n        return $value === NULL || $value === '';\n      }\n\n      /**\n       * {@inheritdoc}\n       */\n      public function getConstraints() {\n        $constraint_manager = \\Drupal::typedDataManager()->getValidationConstraintManager();\n        $constraints = parent::getConstraints();\n\n        $max_length = 256;\n        $constraints[] = $constraint_manager->create('ComplexData', array(\n          'value' => array(\n            'Length' => array(\n              'max' => $max_length,\n              'maxMessage' => t('%name: the telephone number may not be longer than @max characters.', array('%name' => $this->getFieldDefinition()->getLabel(), '@max' => $max_length)),\n            )\n          ),\n        ));\n\n        return $constraints;\n      }\n\n      /**\n       * {@inheritdoc}\n       */\n      public static function generateSampleValue(FieldDefinitionInterface $field_definition) {\n        $values['value'] = rand(pow(10, 8), pow(10, 9)-1);\n        return $values;\n      }\n\n    }\n    ```", "```php\n      namespace Drupal\\nutritioninfo\\Plugin\\Field\\FieldType;\n    use Drupal\\Core\\Field\\FieldItemBase;\n    use Drupal\\Core\\Field\\FieldStorageDefinitionInterface;\n    use Drupal\\Core\\TypedData\\DataDefinition;\n    ```", "```php\n    <?php\n    /**\n     * @file\n     * Contains \\Drupal\\custom_field\\Plugin\\Field\\FieldType\\NutritioninfoItem.\n     */\n\n    namespace Drupal\\nutritioninfo\\Plugin\\Field\\FieldType;\n\n    use Drupal\\Core\\Field\\FieldItemBase;\n    use Drupal\\Core\\Field\\FieldStorageDefinitionInterface;\n    use Drupal\\Core\\TypedData\\DataDefinition;\n\n    /**\n     * Plugin implementation of the 'nutritioninfo' field type.\n     *\n     * @FieldType(\n     *   id = \"nutritioninfo\",\n     *   label = @Translation(\"Nutrition Information\"),\n     *   description = @Translation(\"A field type used for storing \n     nutrition information as defined by the Microdata spec at \n     http://schema.org/ NutritionInformation.\"),\n     *   default_widget = \"nutritioninfo_standard\",\n     *   default_formatter = \"nutritioninfo_default\"\n     * )\n     */\n\n    class NutritioninfoItem extends FieldItemBase\n    {\n\n    }\n    ```", "```php\n       /**\n         * {@inheritdoc}\n         */\n        public static function \n        schema(FieldStorageDefinitionInterface $field)\n        {\n            return array(\n                'columns' => array(\n                    'calories' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'carbohydrate_content' => array(\n                        'type' => 'text',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'cholesterol_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'fat_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'fiber_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'protein_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'saturated_fat_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'serving_size' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'sodium_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'sugar_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'trans_fat_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n                    'unsaturated_fat_content' => array(\n                        'type' => 'varchar',\n                        'length' => 256,\n                        'not null' => FALSE,\n                    ),\n\n                ),\n            );\n        }\n    ```", "```php\n       /**\n         * {@inheritdoc}\n         */\n        public function isEmpty()\n        {\n            $calories = $this->get('calories')->getValue();\n            $carbohydrate_content = $this\n            ->get('carbohydrate_content')->getValue();\n            $cholesterol_content = $this\n            ->get('cholesterol_content')->getValue();\n            $fat_content = $this->get('fat_content')->getValue();\n            $fiber_content = $this->get('fiber_content')\n            ->getValue();\n            $protein_content = $this->get('protein_content')\n            ->getValue();\n            $saturated_fat_content = $this\n            ->get('saturated_fat_content')->getValue();\n            $serving_size = $this->get('serving_size')->getValue();\n            $sodium_content = $this->get('sodium_content')\n            ->getValue();\n            $sugar_content = $this->get('sugar_content')\n            ->getValue();\n            $trans_fat_content = $this->get('trans_fat_content')\n            ->getValue();\n            $unsaturated_fat_content = $this\n            ->get('unsaturated_fat_content')->getValue();\n\n            //the nutrition field is empty if all of its properties \n           are empty\n            return empty($calories)\n            && empty($carbohydrate_content)\n            && empty($cholesterol_content)\n            && empty($fat_content)\n            && empty($fiber_content)\n            && empty($protein_content)\n            && empty($saturated_fat_content)\n            && empty($serving_size)\n            && empty($sodium_content)\n            && empty($sugar_content)\n            && empty($trans_fat_content)\n            && empty($unsaturated_fat_content);\n        }\n    ```", "```php\n    /**\n         * {@inheritdoc}\n         */\n        public static function \n        propertyDefinitions(FieldStorageDefinitionInterface \n        $field_definition)\n        {\n            $properties['calories'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Calories'))\n                ->setDescription(t('The number of calories.'));\n\n            $properties['carbohydrate_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Carbohydrate Content'))\n                ->setDescription(t('The number of grams of \n                carbohydrates.'));\n\n            $properties['cholesterol_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Cholesterol Content'))\n                ->setDescription(t('The number of milligrams of \n                cholesterol.'));\n\n            $properties['fat_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Fat Content'))\n                ->setDescription(t('The number of grams of fat.'));\n\n            $properties['fiber_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Fiber Content'))\n                ->setDescription(t('The number of grams of \n                fiber.'));\n\n            $properties['protein_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Protein Content'))\n                ->setDescription(t('The number of grams of \n                protein.'));\n\n            $properties['saturated_fat_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Saturated Fat Content'))\n                ->setDescription(t('The number of grams of \n                saturated fat.'));\n\n            $properties['serving_size'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Serving Size'))\n                ->setDescription(t('The serving size, in terms of \n                the number of volume or mass.'));\n\n            $properties['sodium_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Sodium Content'))\n                ->setDescription(t('The number of milligrams of \n                sodium.'));\n\n            $properties['sugar_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Sugar Content'))\n                ->setDescription(t('The number of grams of \n                sugar.'));\n\n            $properties['trans_fat_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Trans Fat Content'))\n                ->setDescription(t('The number of grams of trans \n                fat.'));\n\n            $properties['unsaturated_fat_content'] = \n            DataDefinition::create('string')\n                ->setLabel(t('Unsaturated Fat Content'))\n                ->setDescription(t('The number of grams of \n                unsaturated fat.'));\n\n            return $properties;\n        }\n    ```", "```php\n    <?php\n    /**\n     * @file\n     * Contains \\Drupal\\custom_field\\Plugin\\Field\\FieldWidget\\NutritioninfoDefaultWidget.\n     */\n\n    namespace Drupal\\nutritioninfo\\Plugin\\Field\\FieldWidget;\n\n    use Drupal\\Core\\Field\\FieldItemListInterface;\n    use Drupal\\Core\\Field\\WidgetBase;\n    use Drupal\\Core\\Form\\FormStateInterface;\n\n    /**\n     * Plugin implementation of the 'nutritioninfo_default' widget.\n     *\n     * @FieldWidget(\n     *   id = \"nutritioninfo_default\",\n     *   label = @Translation(\"Nutrition Field Widget\"),\n     *   field_types = {\n     *     \"nutritioninfo\"\n     *   }\n     * )\n     */\n    class NutritioninfoDefaultWidget extends WidgetBase {\n\n    }\n    ```", "```php\n    $element['calories'] = array(\n                '#title' => t('Calories'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->calories) ? $items[$delta]->calories : NULL,\n              );\n    ```", "```php\n       /**\n         * {@inheritdoc}\n         */\n        public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {\n          $element['calories'] = array(\n                '#title' => t('Calories'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->calories) ? $items[$delta]->calories : NULL,\n              );\n          $element['carbohydrate_content'] = array(\n                '#title' => t('Carbohydrate Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->carbohydrate_content) ? $items[$delta]->carbohydrate_content : NULL,\n              );\n          $element['cholesterol_content'] = array(\n                '#title' => t('Cholesterol Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->cholesterol_content) ? $items[$delta]->cholesterol_content : NULL,\n              );\n\n            $element['fat_content'] = array(\n                '#title' => t('Fat Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->fat_content) ? $items[$delta]->fat_content : NULL,\n            );\n\n            $element['fiber_content'] = array(\n                '#title' => t('Fiber Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->fiber_content) ? $items[$delta]->fiber_content : NULL,\n            );\n\n            $element['protein_content'] = array(\n                '#title' => t('Protein Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->protein_content) ? $items[$delta]->protein_content : NULL,\n            );\n\n            $element['saturated_fat_content'] = array(\n                '#title' => t('Saturated Fat Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->saturated_fat_content) ? $items[$delta]->saturated_fat_content : NULL,\n            );\n\n            $element['serving_size'] = array(\n                '#title' => t('Serving Size'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->serving_size) ? $items[$delta]->serving_size : NULL,\n            );\n\n            $element['sodium_content'] = array(\n                '#title' => t('sodium Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->sodium_content) ? $items[$delta]->sodium_content : NULL,\n            );\n\n            $element['sugar_content'] = array(\n                '#title' => t('Sugar Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->sugar_content) ? $items[$delta]->sugar_content : NULL,\n            );\n\n            $element['trans_fat_content'] = array(\n                '#title' => t('Trans Fat Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->trans_fat_content) ? $items[$delta]->trans_fat_content : NULL,\n            );\n\n            $element['unsaturated_fat_content'] = array(\n                '#title' => t('Unsaturated Fat Content'),\n                '#type' => 'textfield',\n                '#default_value' => isset($items[$delta]->unsaturated_fat_content) ? $items[$delta]->unsaturated_fat_content : NULL,\n            );\n\n            return $element;\n        }\n    ```", "```php\n    <?php\n    /**\n     * @file\n     * Contains \\Drupal\\custom_field\\Plugin\\field\\formatter\\NutritioninfoDefaultFormatter.\n     */\n\n    namespace Drupal\\nutritioninfo\\Plugin\\Field\\FieldFormatter;\n\n    use Drupal\\Core\\Field\\FormatterBase;\n    use Drupal\\Core\\Field\\FieldItemListInterface;\n\n    /**\n     * Plugin implementation of the 'nutritioninfo_default' formatter.\n     *\n     * @FieldFormatter(\n     *   id = \"nutritioninfo_default\",\n     *   label = @Translation(\"Nutritioninfo Formatter\"),\n     *   field_types = {\n     *      \"nutritioninfo\"\n     *   }\n     * )\n     */\n    class NutritioninfoDefaultFormatter extends FormatterBase\n    {\n\n    }\n    ```", "```php\n       /**\n         * {@inheritdoc}\n         */\n        public function viewElements(FieldItemListInterface $items)\n\n        {\n            $rows = array();\n            foreach ($items as $delta => $item) {\n                $rows[] = array(\n                    'data' => array(\n                        $item->calories,\n                        $item->carbohydrate_content,\n                        $item->cholesterol_content,\n                        $item->fat_content,\n                        $item->fiber_content,\n                        $item->protein_content,\n                        $item->saturated_fat_content,\n                        $item->serving_size,\n                        $item->sodium_content,\n                        $item->sugar_content,\n                        $item->trans_fat_content,\n                        $item->unsaturated_fat_content\n                    )\n\n                );\n\n            }\n\n            $headers = array(\n                t('Calories'),\n                t('Carbohydrate Content'),\n                t('Cholesterol Content'),\n                t('Fat Content'),\n                t('Fiber Content'),\n                t('Protein Content'),\n                t('Saturated Fat Content'),\n                t('Serving Size'),\n                t('Sodium Content'),\n                t('Sugar Content'),\n                t('Trans Fat Content'),\n                t('Unsaturated Fat Content'),\n            );\n\n            $table = array(\n                '#type' => 'table',\n                '#header' => $headers,\n                '#rows' => $rows,\n                '#empty' => t('No calories information available'),\n                '#attributes' => array('id' => 'nutrition-info'),\n            );\n\n            return $elements = array('#markup' => drupal_render($table));\n\n        }\n    ```"]