- en: Chapter 9. Building Better with MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In chapter 4 we learned how design patterns can simplify your daily programming
    life by providing you with common approaches for solving problems. One of the
    popular design patterns used for application architecture is **Model-View-Controller,**
    which is also known as **MVC**. In RAD (Rapid Application Development) for PHP,
    MVC frameworks play a vital role. These days several MVC frameworks have gained
    public interest and many of them are enterprise-ready. For example, **symfony**
    framework has been used in developing Yahoo bookmarks, CakePHP is being developed
    in refactoring Mambo, CodeIgniter is used by many big applications showcased on
    their site. Also there are popular MVC frameworks like Zend Framework, which is
    used by IBM and also used to develop the Magento open-source ecommerce solution.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, nowadays, writing code from scratch and fine tuning it is obsolete,
    and if you are doing this, you should really avoid it. In this chapter, we will
    discuss the basic structure of MVC frameworks and then introduce you to some of
    these popular frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: What is MVC?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name implies, MVC consists of three components. The first one is Model,
    the second one is View, and the third one is Controller. This doesn't make any
    sense if we just list the names. To begin with, Model is an object, which interacts
    with a database. All business logics are usually written inside the model. A controller
    is a piece of code, which takes user inputs and based on that initializes models
    and other objects, and finally invokes all of them. Finally, the View is a component,
    which displays the result generated by controller with the help of model.
  prefs: []
  type: TYPE_NORMAL
- en: So for good practice, you should never implement any business logic in view
    or controller. Similarly, you should never process the output results in a model.
    And you should never produce any output directly from controller (instead use
    the view).
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections we will be creating a very small MVC.
  prefs: []
  type: TYPE_NORMAL
- en: Planning for the Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For successfully developing any application you must have a clear target. Whenever
    the architecture of an application is robust, stable, and foolproof, you will
    get a huge number of users using your application. The MVC framework we are going
    to develop in this chapter will serve the following issues successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: Small footprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy loading of components, libraries, helpers, and models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nice and flexible syntax for developing view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excellent support with popular database servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will not be resource extensive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to integrate with other component frameworks like Pear, ezComponents, and
    so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout support like RubyOnRails for easy design of your web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A native gzip compressor for JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ajax support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing the Bootstrap File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The bootstrap is a file, which just prepares the environment for successful
    execution and integration of controllers, models, and views. Basically a bootstrap
    file initializes the environment, the router, the object loader, and passes all
    the input parameters to the controller. We will design the bootstrap file, which
    will receive all the parameters of a successful request URL with the help of `mod_rewrite`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`mod_rewrite` is an apache module, which helps to redirect a request defined
    by a pattern (regular expression) to another request URL. It is an essential module
    for almost every web application designed. If you are interested in studying more
    on it, you can go to: [http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable `mod_rewrite` you can follow the following details. Firstly, open
    `httpd.conf` and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We have to place the following code in an `.htaccess` file and place it inside
    our application root.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code will just redirect every request to `index.php`, which will be our
    bootstrap file. This bootstrap file will receive any requested URL and then split
    it into different parts like controller, action and parameters. For example, the
    format will be `http://our_application/controller/action/param/param..../param`.
    The bootstrap will analyze the URL with the help of a router and then with the
    help of dispatcher it will invoke controller and action with all the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code of our bootstrap file (`index.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the above code you see that there is an object called `loader`. The main
    purpose of this is to load objects for us, but via the Singleton pattern. This
    will help us to minimize the load. Using this loader we will load an object named
    `router`. There is also an object called `dispatcher`, which will finally dispatch
    the web request with the help of router.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check the code of `core/ini.php`, which is a helper to help easy inclusion
    of class files from different directories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here goes the `initializer` file (`core/main/initializer.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you take a look at the code of the `initializer` file, you will find that
    it actually just extends the include path.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code of our `loader` file (`core/main/loader.php`), which will load
    different components via the Singleton pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Loader uses another `config` file (`core/main/config.php`), which actually
    loads different `configs` from under `config/configs.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you wonder how our `configs.php` will look, here it goes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Well, if you look at the code of `loader.php` there is a section like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: So `$config->debug` actually returns the value of `$configs['debug']` with the
    help of `__get()` `magic` method in `config.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In loader there is a method named `base::backtrace()`. `base` is a static object
    declared in `core/libraries/base.php`. It contains some useful functions to use
    throughout the framework. This is in `core/libraries/base.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Therefore `base::backtrace()` actually prints `debug_backtrace` for easy tracing
    exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far we haven''t seen the code of `router.php` and `dispatcher.php`. Router
    and dispatcher are the main part of the whole application. Here is the code of
    `router.php` (`core/main/router.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: What router actually does is find the controller, action, and parameters from
    a request URL. If the controller name is not found, it uses the default controller
    name and if default controller name is not found in `config` file, it will use
    `index` as the default controller.
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding to dispatcher, we must look at the view engine, which will
    be used for template engine, so that anyone from controller can set variables
    like this `$this->view->set(varname,` `value)`. After that, anyone can access
    the variable as `$varname` in our view file.
  prefs: []
  type: TYPE_NORMAL
- en: 'So here comes the view engine (`core/main/view.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here comes the dispatcher, the core part of our framework (`core/main/dispatcher.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here's what dispatcher mainly does (as seen from the highlighted section of
    the above code). It takes a router object as parameter then finds controller,
    action, and parameters from router. If the controller file is available, it loads
    that and then initializes the controller. After initializing, it just accesses
    the action.
  prefs: []
  type: TYPE_NORMAL
- en: After that, dispatcher initializes the current view object using loader. As
    it is coming via Singleton, all variables set to it are still in scope. Dispatcher
    then passes the view template file, variables to a function named `_loadTemplate`
    in base.
  prefs: []
  type: TYPE_NORMAL
- en: So what is the purpose of `$uselayout`? It just indicates whether a layout file
    should be appended to our template. This is more fun when we see it in practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `base::_loadTemplate()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are confused about placing these files, here is the directory structure
    to help you understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the Bootstrap File](img/2561_09_00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Why are there other files like `jsm.php`, `benchmark.php`, `unittest.php`, `helper.php`,
    `model.php`, `library.php`, `cache.php`, and `db.php`?
  prefs: []
  type: TYPE_NORMAL
- en: 'These files will help us for the following sections:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jsm.php`: Helps to load JavaScript with automatic gzip compression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.php`: For connecting to different database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library.php`: Helps to load library files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unittest.php`: Will help to automate unit testing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model.php`: Will help to load models for database access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let's see what our `model` and `library` are doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here comes `core/main/model.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Whenever a form is submitted, we want to populate any model right after initializing
    it. Therefore, we have kept a configuration variable named `auto_model_association`
    for it. If you set it to true, models will be automatically associated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here comes the library loader `(core/main/library.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`library.php` helps only to load libraries via a Singleton.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we will see the JavaScript loader, which by default delivers each library
    with gzip compression. These days every browser supports gzip compression for
    faster loading of any object. We are also distributing distributing our framework
    with built-in support for prototype, jQuery and script.aculo.us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is `core/libraries/jsm.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you take a look at the code you will find that it loads every JavaScript
    file via `gzip.php`, which is actually responsible for compressing the content.
    So here is the code of `gzip.php` (`core/js/gzip.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you have other libraries to load, you can modify this library and add them
    in the following line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we have another file, which helps us writing a unit test during the
    developing of our application. `unittest.php` is responsible for that and there
    is also a Boolean configuration flag for this: `unit_test_enabled`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is `core/main/unittest.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We must keep a built-in support for benchmarking our code to help profiling.
    Therefore, we have `benchmark.php` (`core/main/benchmark.php`) which performs
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Adding Database Support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our framework must have a data abstraction layer to facilitate database operations
    painlessly. We are going to provide support to three popular databases: SQLite,
    PostgreSQL, and MySQL. Here is the code of our data abstraction layer in `core/main/db.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'It uses an abstract driver object to ensure the extensibility and consistency
    of the driver objects. In the future, if any third-party developer wants to introduce
    new drivers he must extend it in `core/main/dbdrivers/abstract.dbdriver.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Drivers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now here comes the trickiest part; the drivers. Let''s take a look at SQLite
    driver file `core/main/dbdrivers/sqlitedriver.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you take a look at the code, you will find that we just implemented all the
    functions described in `abstractdbdriver` object in `abstractdbdriver.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here comes the driver file for MySQL, `core/main/dbdrivers/mysqldriver.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, here comes the PostgreSQL driver, `core/main/dbdrivers/postgresql.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now our framework is done. In the coming sections, we will see how to build
    applications over this framework.
  prefs: []
  type: TYPE_NORMAL
- en: Building Applications over our Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now is the colourful moment. So far, we have done so many things to ease developing
    applications over our framework. So now in this section we will develop a basic
    blog application and discuss how to take advantage of our framework.
  prefs: []
  type: TYPE_NORMAL
- en: For those unfamiliar with Blogs, they are simply web-based publishing systems,
    where people are allowed to write anything and publish it. In this application
    we will allow users to write articles, display them, and also allow users to publish
    comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a MySQL database named `packtblog` with three tables; `Users`,
    `Posts`, and `Comments`. Here is the database schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Authentication Controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s design our main controller with users who, will be able to register,
    or log into, their system. The code in the `app/controllers/auth.php` file is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the views for authentication controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication Controller](img/2561_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication Controller](img/2561_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication Controller](img/2561_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now comes the controller which will handle the blog operations
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the `app/controllers/blog.php` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And here are the views of our blog controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication Controller](img/2561_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And last but not the least here comes the `config` file. Place it in `app/config/configs.php`
    or `core/config/configs.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the rapid development of PHP applications, frameworks play a very important
    role. That is why today there are so many enterprise-level frameworks in the market
    and you have so many choices. We have learnt how to build a framework in this
    chapter which will also help to understand object loading, data abstraction layers,
    and the importance of separation. Finally, we took a closer look at how applications
    are done.
  prefs: []
  type: TYPE_NORMAL
