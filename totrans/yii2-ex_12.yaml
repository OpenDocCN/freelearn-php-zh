- en: Chapter 12. Create a Console Application to Automate the Periodic Task
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 创建控制台应用程序以自动化周期性任务
- en: In this chapter, we will learn how to write a console application and will discover
    the main differences between web and console apps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何编写控制台应用程序，并会发现Web应用程序和控制台应用程序之间的主要区别。
- en: Then, we will create our first console controller, using a practical example
    to illustrate how to update a database table.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建我们的第一个控制台控制器，使用一个实际示例来说明如何更新数据库表。
- en: 'In the final paragraphs, we will see how to set output colors and text formats
    and how to implement a complete periodic task, such as sending an e-mail with
    daily reservations. We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后几段中，我们将看到如何设置输出颜色和文本格式，以及如何实现一个完整的周期性任务，例如使用每日预订发送电子邮件。在本章中，我们将涵盖以下主题：
- en: Interacting with console applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与控制台应用程序交互
- en: Creating a console controller
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制台控制器
- en: Example – setting an alarm flag for expired reservation
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 为已过期的预订设置警报标志
- en: Formatting the output from the console
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化控制台输出
- en: Implementing and executing cron jobs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施和执行cron作业
- en: Example – sending an e-mail with new reservations of the day
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 发送包含当日新预订的电子邮件
- en: Interacting with console applications
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与控制台应用程序交互
- en: The console is the third application installed by default with the advanced
    template.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台是高级模板默认安装的第三个应用程序。
- en: This app is configured to launch commands through a console access, and it has
    the same application structure of those already seen in the previous chapters.
    Therefore, in this section, we require a console access to the host.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序配置为通过控制台访问启动命令，并且它具有与之前章节中看到的相同的应用程序结构。因此，在本节中，我们需要对主机进行控制台访问。
- en: Compared to the web and API applications used until now, there are some differences.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与到目前为止使用的Web和API应用程序相比，有一些区别。
- en: The `public` properties of a controller, in fact, are visible from the command
    line as `option`. It is required to extend the `option()` method of the controller
    to make those properties available. Also, based on specific action, action parameters
    are passed as arguments of the command line.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的`public`属性实际上在命令行上作为`option`可见。需要扩展控制器的`option()`方法以使这些属性可用。此外，根据特定操作，操作参数作为命令行参数传递。
- en: Finally, a console controller action can return an exit code, a number where
    0 indicates that everything is OK, a best practice for console application development.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，控制台控制器操作可以返回一个退出代码，这是一个数字，其中0表示一切正常，这是控制台应用程序开发的最佳实践。
- en: 'Here is a typical usage of the console application starting from a shell:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个从shell开始使用控制台应用程序的典型用法：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The elements of the preceding code are explained as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的元素解释如下：
- en: '`route`: This indicates the `controller/action` path to be called'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`route`：这表示要调用的`controller/action`路径'
- en: '`option`: This indicates the accessible `public` properties of the controller
    for that specific action; we can access only the public properties returned by
    the `options()` method of the controller'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`option`：这表示控制器针对该特定操作的`public`属性的可访问性；我们只能访问控制器`options()`方法返回的公共属性'
- en: '`argument`: This indicates the arguments to be passed to the controller action'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument`：这表示要传递给控制器操作的参数'
- en: Note
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is an option always available, `appconfig`, to indicate which path of
    the configuration files you must use. If it is not set, the default configuration
    file will be adopted.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总有一个始终可用的选项，`appconfig`，用于指示必须使用哪个配置文件路径。如果没有设置，将采用默认配置文件。
- en: Yii provides a set of core console applications, which we can access by calling
    the `help` controller (being a web application, the default action will be `index`),
    so as to display everything concerning the list of available console controllers
    or details about a single controller or action controller.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Yii提供了一套核心控制台应用程序，我们可以通过调用`help`控制器（作为一个Web应用程序，默认操作将是`index`）来访问它们，以便显示有关可用控制台控制器列表或单个控制器或操作控制器详细信息的所有内容。
- en: 'Let''s consider an example; open the command line (in this case, a Linux shell)
    and type the following from the project root:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个示例；打开命令行（在这种情况下，Linux shell）并从项目根目录输入以下内容：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will display an output similar to the following (partially displayed):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示类似于以下内容的输出（部分显示）：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, the first grouping level represents the controller names (with relative
    descriptions on the right), and the second level includes the actions of the relative
    controller. We will require a more deep response when passing the name of controller
    to help it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，第一级分组表示控制器名称（右侧有相对描述），第二级包括相关控制器的操作。当我们传递控制器名称时，我们将需要更详细的信息来帮助它：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To display the controller description and the list of the actions, we can also
    require help about the complete route (controller/action) typing:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示控制器描述和操作列表，我们还可以通过输入完整路由（控制器/操作）来获取有关完整路由的帮助：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This returns an output containing the description of the action, its usage,
    and the options available:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回了一个包含操作描述、用法和可用选项的输出：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a console controller
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制台控制器
- en: A console controller is totally similar to the web controllers that we created
    earlier. It extends the `\yii\console\Controller` base class and can return an
    integer value indicating the status response of the action (0 stands for successful
    execution of the action), also named `exit code`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台控制器与之前创建的 Web 控制器完全相同。它扩展了 `\yii\console\Controller` 基类，并可以返回一个整数值，表示操作的响应状态（0
    表示操作成功执行），也称为 `退出码`。
- en: The `public` properties of the controller can be made available as an option
    only if their names are returned by the `options()` method that accepts `actionID`
    as the parameter; so the response can be customized according to `actionID`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当控制器的 `public` 属性名称由接受 `actionID` 作为参数的 `options()` 方法返回时，它们才能作为选项提供；因此，响应可以根据
    `actionID` 进行定制。
- en: The response of the `options()` method is an array of text string that represents
    the public property names of the controller.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`options()` 方法的响应是一个表示控制器公共属性名的文本字符串数组。'
- en: 'Starting from the advanced template application that we previously installed
    in the `yiiadv` folder, let''s create a new console controller named `MyExampleController`
    in `console/controllers/MyExampleController.php` with the following content:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们之前在 `yiiadv` 文件夹中安装的高级模板应用程序开始，让我们在 `console/controllers/MyExampleController.php`
    中创建一个名为 `MyExampleController` 的新控制台控制器，其内容如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This controller contains two public properties, but only `option1` will be
    usable from the console, since it is returned by the `options()` method. We will
    display the result of the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此控制器包含两个公共属性，但只有 `option1` 可以从控制台使用，因为它是由 `options()` 方法返回的。我们将显示以下命令的结果：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding command will return the following output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将返回以下输出：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we need other details about the `test` action, we can launch the preceding
    command specifying the complete route:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要有关 `test` 操作的其他详细信息，我们可以通过指定完整路由来启动前面的命令：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, try to launch the command with the route `my-example/test`, without any
    parameter:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试使用路由 `my-example/test` 启动命令，不添加任何参数：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will receive an error about missing `param1`. The following is the correct
    syntax:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将收到一个关于缺少 `param1` 的错误。以下是正确的语法：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding command will return the following output without any value for
    `option1`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将返回以下输出，没有 `option1` 的值：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also pass the value `option1` by appending `--option1` to the command,
    as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过在命令后附加 `--option1` 来传递值 `option1`，如下所示：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding command will return a complete output, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将返回完整的输出，如下所示：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Example – setting an alarm flag for expired reservation
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 为已过期的预订设置警报标志
- en: Now, let's consider an example to illustrate how to use console commands to
    execute maintenance operations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个示例来说明如何使用控制台命令来执行维护操作。
- en: In console controllers, we can access all the models, components, and extensions
    available in the project, as well as what we have done in the web application.
    Therefore, we will manipulate data in the same way as we should do for a web application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台控制器中，我们可以访问项目中所有可用的模型、组件和扩展，以及我们在 Web 应用程序中所做的。因此，我们将以与 Web 应用程序相同的方式操作数据。
- en: Starting from the reservation database table used in the previous chapters,
    we will add a new Boolean field, named expired, to set which reservations are
    out of the end date.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从前几章中使用的预订数据库表开始，我们将添加一个新的布尔字段，命名为 expired，用于设置哪些预订已超出结束日期。
- en: 'This is the structure of the `reservation` table to store data in the MySQL
    Server:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是存储在 MySQL 服务器中的 `reservation` 表的结构：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, let's insert some records to make a simulation. We will update the `expired`
    field with value `1` if today is after `date_to value`; otherwise, it will be
    `0`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们插入一些记录以进行模拟。如果今天是 `date_to value` 之后，我们将更新 `expired` 字段的值为 `1`；否则，它将是
    `0`。
- en: 'These are the records to insert in the `reservation` database table:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是要插入到 `reservation` 数据库表中的记录：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that users exist in user database table
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 确保用户存在于用户数据库表中
- en: 'Now, create a new console controller in `console/controllers/ReservationsController.php`
    with the following content:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `console/controllers/ReservationsController.php` 中创建一个新的控制台控制器，内容如下：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In `actionUpdateExpired`, we display for each model some data to the console,
    such as `id`, `date_to`, and `status`. Then, we will set for each model the value
    of the `expired` field, based on the `date_to` value.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `actionUpdateExpired` 中，我们向控制台显示每个模型的一些数据，例如 `id`、`date_to` 和 `status`。然后，我们将根据
    `date_to` 值为每个模型设置 `expired` 字段的值。
- en: 'Finally, we will launch this command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将运行以下命令：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will return the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下输出：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Formatting the output from the console
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化来自控制台的输出
- en: The base class console controller `yii\console\Controller` supports methods
    to display colored and formatted output.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 基础类控制台控制器 `yii\console\Controller` 支持显示彩色和格式化输出的方法。
- en: 'There are two standard methods to display the output, which are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种标准方法来显示输出，具体如下：
- en: '`stdout`: This prints a string to `STDOUT`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stdout`：这会将字符串打印到 `STDOUT`'
- en: '`strerr`: This prints a string to `STDERR`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strerr`：这会将字符串打印到 `STDERR`'
- en: 'Both these methods support more parameters: the first is the text string to
    be displayed, and the other includes the formatting options that can be passed
    to make a pretty output.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都支持更多参数：第一个是要显示的文本字符串，另一个包括可以传递的格式化选项，以生成美观的输出。
- en: There are formatting options for colors and typing; these are defined by constants
    from `\yii\helpers\Console`; for example, `BG_CYAN` for cyan background color,
    `BG_RED` for red background color, and `UNDERLINE` for underlined text.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有颜色和打字格式的格式化选项；这些是由 `\yii\helpers\Console` 中的常量定义的；例如，`BG_CYAN` 用于青色背景，`BG_RED`
    用于红色背景，`UNDERLINE` 用于下划线文本。
- en: 'Let''s see an example using the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下代码看看一个例子：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will display `Hello?` (with a carriage return) with bold font. Sometimes,
    it could be possible that no effect will be displayed, since our terminal does
    not support colors.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示 `Hello?`（带有回车符），字体加粗。有时，可能不会显示任何效果，因为我们的终端不支持颜色。
- en: 'In this case, a method of the console controller will help us verify our terminal
    capabilities: `isColorEnabled()` returns a Boolean indicating whether the terminal
    supports ANSI colors.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台控制器的一个方法将帮助我们验证我们的终端功能：`isColorEnabled()` 返回一个布尔值，指示终端是否支持 ANSI 颜色。
- en: Both the methods `strout` and `strerr` are applied to the whole text string
    and are passed as the first parameter. If we want to apply some features only
    to a single part of the text, we must use the `ansiFormat` method that returns
    an ANSI-formatted string.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法 `strout` 和 `strerr` 都应用于整个文本字符串，并且作为第一个参数传递。如果我们只想将一些功能应用于文本的某个部分，我们必须使用返回
    ANSI 格式化字符串的 `ansiFormat` 方法。
- en: Let's take an example. Create a controller to check whether the console supports
    ANSI or not, and try to print the colored text if this feature is supported.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个例子。创建一个控制器来检查控制台是否支持 ANSI，并尝试打印彩色文本，如果这个功能被支持。
- en: 'Then, create a new controller named `ColorController` in `console/controllers/ColorController.php`
    with this content:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `console/controllers/ColorController.php` 中创建一个名为 `ColorController` 的新控制器，内容如下：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We call launch to check if client supports ANSI colors or not:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用 `launch` 来检查客户端是否支持 ANSI 颜色：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And to display colored text (if the client supports it):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 并且为了显示彩色文本（如果客户端支持的话）：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `Console` class under `\yii\helpers\` contains many other useful methods
    to format text and output, such as `confirm()` or `prompt()` to get input from
    the user, or progress to create a progress bar to display the execution state.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`\yii\helpers\` 下的 `Console` 类包含许多其他有用的方法来格式化文本和输出，例如 `confirm()` 或 `prompt()`
    从用户获取输入，或者 `progress` 创建进度条以显示执行状态。'
- en: Implementing and executing cron jobs
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现和执行 cron 作业
- en: The main usage of console applications consists in the execution of periodic
    tasks using cron job (on Linux or Unix machines).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台应用程序的主要用途在于使用 cron 作业（在 Linux 或 Unix 机器上）执行周期性任务。
- en: We can use console applications to send massive e-mails to perform system maintenance
    or to check a specific status of the application.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用控制台应用程序发送大量电子邮件以执行系统维护或检查应用程序的特定状态。
- en: In the next example, we will see how to send an e-mail with a summary of the
    reservations made in the current date.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将看到如何发送包含当日预订摘要的电子邮件。
- en: Example – sending an e-mail with new reservations of the day
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 发送包含当日新预订的电子邮件
- en: This example illustrates how to send an e-mail with a summary of new daily reservations.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例说明了如何发送包含新每日预订摘要的电子邮件。
- en: First of all, let's configure the `mailer` component in `console/config/main.php`,
    if it is not already configured.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在`console/config/main.php`中配置`mailer`组件，如果尚未配置。
- en: 'It is enough to pass a few parameters to the component:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 只需传递几个参数给组件：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `class` parameter indicates the class that handles the component, `viewPath`,
    which indicates where views of the e-mail, or rather e-mail templates, are stored;
    the last parameter `useFileTransport` indicates the e-mail sending method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`class`参数表示处理组件的类，`viewPath`参数表示电子邮件或电子邮件模板的视图存储位置；最后一个参数`useFileTransport`表示电子邮件发送方法。'
- en: 'Now, in `ReservationsController`, under `console/controllers/ReservationsController.php`,
    add the method, `actionReservationsOfTheDay`, which sends the content of daily
    reservations:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`ReservationsController`中，在`console/controllers/ReservationsController.php`下添加方法`actionReservationsOfTheDay`，该方法发送每日预订的内容：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is advisable to put the `from` e-mail parameter, for example, in a `params.php`
    file, which contains all the global parameters available in the whole application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将`from`电子邮件参数，例如，放在`params.php`文件中，该文件包含整个应用程序中可用的所有全局参数。
- en: This method simply gets the `currentDate` parameter from the input so that we
    can change the evaluation date as we need; the action body finds reservations
    for the input date and passes them to the e-mail view `reservationsOfTheDay` in
    the `html` and `text` format.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法简单地从输入中获取`currentDate`参数，以便我们可以根据需要更改评估日期；动作体找到输入日期的预订并将它们传递给`html`和`text`格式的电子邮件视图`reservationsOfTheDay`。
- en: 'Now, we must create the content of the e-mail format, creating two files in
    `common/mail`: `reservationsOfTheDay-html.php` and `reservationsOfTheDay-text.php`.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须在`common/mail`中创建电子邮件格式的內容，创建两个文件：`reservationsOfTheDay-html.php`和`reservationsOfTheDay-text.php`。
- en: 'This is the content of the HTML version:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是HTML版本的內容：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is the corresponding content in text format (not required for the HTML
    e-mail client):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文本格式的对应内容（对于HTML电子邮件客户端不是必需的）：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The command can be executed by launching:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过启动以下命令来执行：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can also call the pass date parameter to change the date to check, for example,
    to check the reservations made on `2015-08-05`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以调用传递日期参数来更改要检查的日期，例如，检查`2015-08-05`的预订：
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The last thing to do is to attach that command to a periodic task scheduler
    according to the operating system, for instance, cron in the Linux or Unix environment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，根据操作系统，将此命令附加到周期性任务调度程序，例如Linux或Unix环境中的cron。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have discussed the third kind of default application installed
    with Yii's advanced template, the console application.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了与Yii的高级模板一起安装的第三种默认应用程序，即控制台应用程序。
- en: We have seen the primary differences between console and web applications, and
    we have learned how to create our first console controller, handling options and
    parameters to pass to the actions. Then, we have applied a console application
    with a concrete example, such as making maintenance operation to the reservation
    table in order to update the status of the reservations to expired.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了控制台应用程序和Web应用程序之间的主要区别，我们学习了如何创建我们的第一个控制台控制器，处理传递给动作的选项和参数。然后，我们通过一个具体的示例应用了控制台应用程序，例如对预订表进行维护操作，以更新预订的状态为已过期。
- en: Then, we focused on how the console application can make pretty outputs, using
    colors and text formatting features.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们关注了控制台应用程序如何使用颜色和文本格式化功能生成漂亮的输出。
- en: Finally, we have mastered how to create a complete periodic task with a console
    controller action to send a daily summary e-mail containing reservations made
    in current date.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们掌握了如何使用控制台控制器动作创建一个完整的周期性任务，以发送包含当日预订的每日总结电子邮件。
- en: In the final chapter, we will see the final stage of our development, where
    we have to make the code reusable but, especially, maintainable.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章，我们将看到我们发展的最终阶段，在这个阶段我们必须使代码可重用，但尤其是可维护的。
