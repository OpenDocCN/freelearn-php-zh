- en: Chapter 12. Create a Console Application to Automate the Periodic Task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to write a console application and will discover
    the main differences between web and console apps.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will create our first console controller, using a practical example
    to illustrate how to update a database table.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final paragraphs, we will see how to set output colors and text formats
    and how to implement a complete periodic task, such as sending an e-mail with
    daily reservations. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with console applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a console controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – setting an alarm flag for expired reservation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting the output from the console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and executing cron jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – sending an e-mail with new reservations of the day
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with console applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The console is the third application installed by default with the advanced
    template.
  prefs: []
  type: TYPE_NORMAL
- en: This app is configured to launch commands through a console access, and it has
    the same application structure of those already seen in the previous chapters.
    Therefore, in this section, we require a console access to the host.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the web and API applications used until now, there are some differences.
  prefs: []
  type: TYPE_NORMAL
- en: The `public` properties of a controller, in fact, are visible from the command
    line as `option`. It is required to extend the `option()` method of the controller
    to make those properties available. Also, based on specific action, action parameters
    are passed as arguments of the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a console controller action can return an exit code, a number where
    0 indicates that everything is OK, a best practice for console application development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a typical usage of the console application starting from a shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The elements of the preceding code are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`route`: This indicates the `controller/action` path to be called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`option`: This indicates the accessible `public` properties of the controller
    for that specific action; we can access only the public properties returned by
    the `options()` method of the controller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`argument`: This indicates the arguments to be passed to the controller action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There is an option always available, `appconfig`, to indicate which path of
    the configuration files you must use. If it is not set, the default configuration
    file will be adopted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Yii provides a set of core console applications, which we can access by calling
    the `help` controller (being a web application, the default action will be `index`),
    so as to display everything concerning the list of available console controllers
    or details about a single controller or action controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider an example; open the command line (in this case, a Linux shell)
    and type the following from the project root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display an output similar to the following (partially displayed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the first grouping level represents the controller names (with relative
    descriptions on the right), and the second level includes the actions of the relative
    controller. We will require a more deep response when passing the name of controller
    to help it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To display the controller description and the list of the actions, we can also
    require help about the complete route (controller/action) typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns an output containing the description of the action, its usage,
    and the options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating a console controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A console controller is totally similar to the web controllers that we created
    earlier. It extends the `\yii\console\Controller` base class and can return an
    integer value indicating the status response of the action (0 stands for successful
    execution of the action), also named `exit code`.
  prefs: []
  type: TYPE_NORMAL
- en: The `public` properties of the controller can be made available as an option
    only if their names are returned by the `options()` method that accepts `actionID`
    as the parameter; so the response can be customized according to `actionID`.
  prefs: []
  type: TYPE_NORMAL
- en: The response of the `options()` method is an array of text string that represents
    the public property names of the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from the advanced template application that we previously installed
    in the `yiiadv` folder, let''s create a new console controller named `MyExampleController`
    in `console/controllers/MyExampleController.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This controller contains two public properties, but only `option1` will be
    usable from the console, since it is returned by the `options()` method. We will
    display the result of the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need other details about the `test` action, we can launch the preceding
    command specifying the complete route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, try to launch the command with the route `my-example/test`, without any
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will receive an error about missing `param1`. The following is the correct
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will return the following output without any value for
    `option1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also pass the value `option1` by appending `--option1` to the command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will return a complete output, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Example – setting an alarm flag for expired reservation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's consider an example to illustrate how to use console commands to
    execute maintenance operations.
  prefs: []
  type: TYPE_NORMAL
- en: In console controllers, we can access all the models, components, and extensions
    available in the project, as well as what we have done in the web application.
    Therefore, we will manipulate data in the same way as we should do for a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from the reservation database table used in the previous chapters,
    we will add a new Boolean field, named expired, to set which reservations are
    out of the end date.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the structure of the `reservation` table to store data in the MySQL
    Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's insert some records to make a simulation. We will update the `expired`
    field with value `1` if today is after `date_to value`; otherwise, it will be
    `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the records to insert in the `reservation` database table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that users exist in user database table
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new console controller in `console/controllers/ReservationsController.php`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In `actionUpdateExpired`, we display for each model some data to the console,
    such as `id`, `date_to`, and `status`. Then, we will set for each model the value
    of the `expired` field, based on the `date_to` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will launch this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Formatting the output from the console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The base class console controller `yii\console\Controller` supports methods
    to display colored and formatted output.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two standard methods to display the output, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`stdout`: This prints a string to `STDOUT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strerr`: This prints a string to `STDERR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both these methods support more parameters: the first is the text string to
    be displayed, and the other includes the formatting options that can be passed
    to make a pretty output.'
  prefs: []
  type: TYPE_NORMAL
- en: There are formatting options for colors and typing; these are defined by constants
    from `\yii\helpers\Console`; for example, `BG_CYAN` for cyan background color,
    `BG_RED` for red background color, and `UNDERLINE` for underlined text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will display `Hello?` (with a carriage return) with bold font. Sometimes,
    it could be possible that no effect will be displayed, since our terminal does
    not support colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, a method of the console controller will help us verify our terminal
    capabilities: `isColorEnabled()` returns a Boolean indicating whether the terminal
    supports ANSI colors.'
  prefs: []
  type: TYPE_NORMAL
- en: Both the methods `strout` and `strerr` are applied to the whole text string
    and are passed as the first parameter. If we want to apply some features only
    to a single part of the text, we must use the `ansiFormat` method that returns
    an ANSI-formatted string.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example. Create a controller to check whether the console supports
    ANSI or not, and try to print the colored text if this feature is supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, create a new controller named `ColorController` in `console/controllers/ColorController.php`
    with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We call launch to check if client supports ANSI colors or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And to display colored text (if the client supports it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `Console` class under `\yii\helpers\` contains many other useful methods
    to format text and output, such as `confirm()` or `prompt()` to get input from
    the user, or progress to create a progress bar to display the execution state.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and executing cron jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main usage of console applications consists in the execution of periodic
    tasks using cron job (on Linux or Unix machines).
  prefs: []
  type: TYPE_NORMAL
- en: We can use console applications to send massive e-mails to perform system maintenance
    or to check a specific status of the application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we will see how to send an e-mail with a summary of the
    reservations made in the current date.
  prefs: []
  type: TYPE_NORMAL
- en: Example – sending an e-mail with new reservations of the day
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example illustrates how to send an e-mail with a summary of new daily reservations.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, let's configure the `mailer` component in `console/config/main.php`,
    if it is not already configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is enough to pass a few parameters to the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `class` parameter indicates the class that handles the component, `viewPath`,
    which indicates where views of the e-mail, or rather e-mail templates, are stored;
    the last parameter `useFileTransport` indicates the e-mail sending method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in `ReservationsController`, under `console/controllers/ReservationsController.php`,
    add the method, `actionReservationsOfTheDay`, which sends the content of daily
    reservations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is advisable to put the `from` e-mail parameter, for example, in a `params.php`
    file, which contains all the global parameters available in the whole application.
  prefs: []
  type: TYPE_NORMAL
- en: This method simply gets the `currentDate` parameter from the input so that we
    can change the evaluation date as we need; the action body finds reservations
    for the input date and passes them to the e-mail view `reservationsOfTheDay` in
    the `html` and `text` format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we must create the content of the e-mail format, creating two files in
    `common/mail`: `reservationsOfTheDay-html.php` and `reservationsOfTheDay-text.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of the HTML version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the corresponding content in text format (not required for the HTML
    e-mail client):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The command can be executed by launching:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also call the pass date parameter to change the date to check, for example,
    to check the reservations made on `2015-08-05`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The last thing to do is to attach that command to a periodic task scheduler
    according to the operating system, for instance, cron in the Linux or Unix environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed the third kind of default application installed
    with Yii's advanced template, the console application.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen the primary differences between console and web applications, and
    we have learned how to create our first console controller, handling options and
    parameters to pass to the actions. Then, we have applied a console application
    with a concrete example, such as making maintenance operation to the reservation
    table in order to update the status of the reservations to expired.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we focused on how the console application can make pretty outputs, using
    colors and text formatting features.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have mastered how to create a complete periodic task with a console
    controller action to send a daily summary e-mail containing reservations made
    in current date.
  prefs: []
  type: TYPE_NORMAL
- en: In the final chapter, we will see the final stage of our development, where
    we have to make the code reusable but, especially, maintainable.
  prefs: []
  type: TYPE_NORMAL
