- en: Chapter 7. Creating a Management Module for the CMS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 创建CMS的管理模块
- en: For our next project, we will be expanding upon the content management system
    we built in [Chapter 6](ch06.html "Chapter 6. Building a Content Management System"),
    *Building a Content Management System*, by migrating the management functionality
    into a module. Moving this functionality into a module will decouple administrative
    behaviors from the presentation layer of our application. This change will also
    enable us to develop and deploy administrative changes without having to make
    changes to our main application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的下一个项目，我们将基于我们在[第6章](ch06.html "第6章. 构建内容管理系统")中构建的内容管理系统进行扩展，*构建内容管理系统*，通过将管理功能迁移到模块中。将此功能迁移到模块中将使管理行为与应用程序的表示层解耦。此更改还将使我们能够在不修改主应用程序的情况下开发和部署管理更改。
- en: 'Our finished project will look as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成的项目将如下所示：
- en: '![Creating a Management Module for the CMS](img/7734OS_07_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![创建CMS的管理模块](img/7734OS_07_01.jpg)'
- en: Prerequisites
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: Since we'll expanding upon the work we did in [Chapter 6](ch06.html "Chapter 6. Building
    a Content Management System"), *Building a Content Management System*, the only
    prerequisite for this chapter is the completed source code from the previous chapter.
    You can either build the project yourself, or you can use the completed source
    code available in the project resources folder from the previous chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将扩展我们在[第6章](ch06.html "第6章. 构建内容管理系统")中完成的工作，*构建内容管理系统*，本章的唯一先决条件是前一章的完成源代码。您可以自己构建项目，或者可以使用前一章项目资源文件夹中提供的完成源代码。
- en: What are modules?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是模块？
- en: In Yii, modules are self-contained packages that operate independently of a
    Yii application but must reside within an existing application or module. Modules
    can additionally have as much or as little integration with our core application
    as we desire. In many aspects, modules are identical to Yii applications in that
    they have controllers, models, views, configurations, and components. This functionality
    allows us to deploy and manage code independently of our main application. It
    also provides us with greater usability if we choose to reuse our module across
    multiple projects. For our application, we'll be using our modules solely to separate
    the management of our application from the presentation layer and to independently
    deploy our application without having to make changes to our main application
    code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，模块是独立的包，它们独立于Yii应用程序运行，但必须位于现有应用程序或模块中。模块还可以根据我们的需求与核心应用程序进行不同程度的集成。在许多方面，模块与Yii应用程序相同，因为它们都有控制器、模型、视图、配置和组件。这种功能使我们能够独立于主应用程序部署和管理代码。如果我们在多个项目中重用模块，这也为我们提供了更高的可用性。对于我们的应用程序，我们将使用模块仅将应用程序的管理与表示层分离，并独立部署我们的应用程序，而无需修改主应用程序代码。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about Yii modules can be found in the official Yii guide located
    at [http://www.yiiframework.com/doc/guide/1.1/en/basics.module](http://www.yiiframework.com/doc/guide/1.1/en/basics.module).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Yii模块的信息可以在官方Yii指南中找到，位于[http://www.yiiframework.com/doc/guide/1.1/en/basics.module](http://www.yiiframework.com/doc/guide/1.1/en/basics.module)。
- en: Describing the project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述项目
- en: 'Our dashboard module can be broken down into several components:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的仪表板模块可以分解为几个组件：
- en: Initializing and configuring the dashboard module
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化和配置仪表板模块
- en: Enabling custom routing for our module
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用模块的自定义路由
- en: Moving the management functionality out of our application and into the module
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将管理功能从我们的应用程序移出并放入模块中
- en: Adding file upload capabilities
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加文件上传功能
- en: Module deployment
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块部署
- en: Initializing the module
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化模块
- en: The first component of this project will consist of creating and configuring
    our module so that it integrates with our primary application. We'll accomplish
    this by making several changes to our main configuration file as well as creating
    the basic structure for the module that we'll be using. We'll also go over managing
    our module assets independently of our main application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的第一个组件将是创建和配置我们的模块，使其与我们的主要应用程序集成。我们将通过修改主配置文件以及创建我们将使用的模块的基本结构来实现这一点。我们还将介绍如何独立于主应用程序管理我们的模块资源。
- en: Routing with a module
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块进行路由
- en: In the Yii framework, the default routes are defined by the name of the module
    combined with the default routes that are specified within `CUrlManager`. Unfortunately,
    Yii does not natively provide the functionality to define our own custom routes
    for a module without modifying the routes specified in `CUrlManager`. To get around
    this restriction, we'll be modifying our `CMSURLManager`, which we defined in
    [Chapter 6](ch06.html "Chapter 6. Building a Content Management System"), *Building
    a Content Management System*, in order to allow us to store and configure routes
    independently of our main application. When completed, we'll have a `routes.php`
    file in the `protected/modules/<module>/config/` file; this will contain all the
    custom routes for our module and will integrate with our main application without
    altering the application's behavior.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii 框架中，默认路由是通过模块名称与在 `CUrlManager` 中指定的默认路由组合来定义的。不幸的是，Yii 并没有提供原生功能来定义我们自己的自定义路由，而无需修改
    `CUrlManager` 中指定的路由。为了绕过这个限制，我们将修改我们定义在 [第 6 章](ch06.html "第 6 章。构建内容管理系统")，*构建内容管理系统*，中的
    `CMSURLManager`，以便我们可以独立于我们的主应用程序存储和配置路由。完成之后，我们将在 `protected/modules/<module>/config/`
    文件中有一个 `routes.php` 文件；这将包含我们模块的所有自定义路由，并且将与我们的主应用程序集成，而不会改变应用程序的行为。
- en: Moving the management functionality into the module
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将管理功能移入模块
- en: The third component of this project will entail moving the management functionality
    from our controls to the module's controllers. This will additionally involve
    moving the presentation layers out of the theme we created in the previous chapter
    and into the module itself. For additional security and user experience, we'll
    also be modifying how our module handles errors for both unauthenticated and unauthorized
    users.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的第三个组成部分将涉及将管理功能从我们的控件移动到模块的控制器中。这还将包括将上一章创建的主题中的表示层移动到模块本身中。为了增加安全性和用户体验，我们还将修改我们的模块如何处理未认证用户和未经授权用户的错误。
- en: Adding file upload capabilities
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加文件上传功能
- en: To make our content management system more versatile, we'll also be adding a
    file upload capability that will allow us to upload files from our content page
    and store them in our database. We'll also implement the functionality necessary
    to view these files in a file manager and additionally, to delete them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的内容管理系统更加灵活，我们还将添加一个文件上传功能，这将允许我们从内容页面上传文件并将它们存储在我们的数据库中。我们还将实现必要的功能，以便在文件管理器中查看这些文件，以及删除它们。
- en: Deploying modules
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块部署
- en: Finally, we'll go over the different deployment options that we can use to easily
    deploy our module independently of our main application. Using a combination of
    both Git and Composer, we can deploy our module in a way that makes the most sense
    for the type of project we are using.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将介绍不同的部署选项，我们可以使用这些选项轻松独立于主应用程序部署我们的模块。通过结合使用 Git 和 Composer，我们可以以对我们所使用的项目类型最有意义的方式部署我们的模块。
- en: Initializing the project
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化项目
- en: 'For this project, we''ll be starting where we left off in the previous chapter,
    [Chapter 6](ch06.html "Chapter 6. Building a Content Management System"), *Building
    a Content Management System*. For your convenience, a skeleton project has been
    included in the project resources folder for this chapter that contains the foundation
    that we''ll be starting with. Begin by copying the source code over to a new folder,
    and make sure that it is available at a different URL. In this chapter, I''ll
    be using `http://chapter7.example.com` as our example URL. After importing the
    database and updating the database configuration using the instructions provided
    in the previous chapter, you should see the home page of our blog:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将从上一章，[第 6 章](ch06.html "第 6 章。构建内容管理系统")，*构建内容管理系统*，结束的地方开始。为了您的方便，本章的项目资源文件夹中包含了一个骨架项目，其中包含我们将开始的基础。首先，将源代码复制到一个新文件夹中，并确保它可以在不同的
    URL 上访问。在本章中，我将使用 `http://chapter7.example.com` 作为我们的示例 URL。按照上一章提供的说明导入数据库并更新数据库配置后，您应该能看到我们博客的首页：
- en: '![Initializing the project](img/7734OS_07_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![初始化项目](img/7734OS_07_02.jpg)'
- en: Creating the module
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模块
- en: 'Now that our application is set up, we can begin to create our module. We''ll
    start by creating the basic folder structure within our `protected/modules` directory:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了应用程序，我们可以开始创建我们的模块。我们将从在 `protected/modules` 目录中创建基本文件夹结构开始：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, the basic structure of our module looks identical to that of
    our main application. With our folder structure in place, we now need to create
    the `DashboardModule` class that we''ll later tell Yii about so that it knows
    what to load. The steps are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们模块的基本结构与我们的主应用程序相同。有了我们的文件夹结构，我们现在需要创建`DashboardModule`类，这样我们就可以告诉Yii它需要加载什么。步骤如下：
- en: 'Start by creating a new file, called `DashboardModule.php`, within `protected/modules/dashboard`
    with the following definition:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`protected/modules/dashboard`目录下创建一个名为`DashboardModule.php`的新文件，并包含以下定义：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, create an `init()` method for the module:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为模块创建一个`init()`方法：
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within the module, we''ll want to set the `layoutPath` so that our module knows
    what layout to provide our views with:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块中，我们希望设置`layoutPath`，这样我们的模块就知道为我们的视图提供什么布局：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll also want to tell our module to automatically import the contents of
    the `components` directory in which we''ll be storing classes later:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望告诉我们的模块自动导入我们将存储类的`components`目录的内容：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will tell Yii's autoloader to automatically load classes in the `components`
    folder. This is the same behavior that is used within Yii to load the classes
    registered in the import section of our `protected/config/main.php` file.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将告诉Yii的自动加载器自动加载`components`文件夹中的类。这是Yii在加载`protected/config/main.php`文件导入部分注册的类时所使用的相同行为。
- en: 'Finally, we''ll want to set a few custom components for our module—mainly the
    error handler—so that we can handle errors that occur within our module in a different
    manner from the errors that occur within our main application:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们希望为我们的模块设置一些自定义组件——主要是错误处理器——这样我们就可以以不同于主应用程序中发生错误的方式处理模块内的错误：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''ll then need to create two new classes; the first will be a controller
    component that all controllers within our module will extend from, and the second
    will be the default controller that will be accessed when no routes are specified.
    Within `protected/modules/dashboard/components/`, create a new file called `DashboardController.php`
    with the following definition. We''ll be adding more information to this component
    once we''ve registered our module with Yii:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要创建两个新的类；第一个将是一个控制器组件，我们模块中的所有控制器都将从这个组件扩展，第二个将是一个默认控制器，当没有指定路由时将会被访问。在`protected/modules/dashboard/components/`目录下，创建一个名为`DashboardController.php`的新文件，并包含以下定义。一旦我们将模块注册到Yii中，我们将会向这个组件添加更多信息：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, create `DefaultController.php` inside `protected/modules/dashboard/controllers`.
    We''ll also specify our `actionIndex()` method so that, once we register our module
    with Yii, we can see something:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`protected/modules/dashboard/controllers`目录下创建`DefaultController.php`。我们还将指定我们的`actionIndex()`方法，这样一旦我们将模块注册到Yii中，我们就可以看到一些内容：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Registering the module with Yii
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Yii中注册模块
- en: 'Before we can see anything in our module, we first need to tell Yii about our
    module. For this, we simply need to specify the module name within the modules
    section of our `main.php` file at `protected/config/`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能在我们的模块中看到任何内容之前，我们首先需要告诉Yii我们的模块。为此，我们只需在`protected/config/main.php`文件中的模块部分指定模块名称：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, if you navigate to `http://chapter7.example.com/dashboard`, you should
    see the text **Hello World** displayed. This is the simplest way to register a
    module with Yii. Unfortunately, this method requires us to make a change to our
    configuration file every time we want to use a new module, which in turn means
    we have to change the application code every time we use a new module. Another
    method of loading our module is to create a `protected/config/modules.php` file
    that we register in the modules section, instead. This allows us to simply change
    a cache setting outside our application without having to modify the code within
    our configuration file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您导航到`http://chapter7.example.com/dashboard`，您应该看到显示的文本**Hello World**。这是在Yii中注册模块的最简单方法。不幸的是，这种方法要求我们每次想要使用新模块时都要更改我们的配置文件，这意味着每次我们使用新模块时都必须更改应用程序代码。另一种加载我们的模块的方法是创建一个`protected/config/modules.php`文件，并在模块部分注册它。这允许我们简单地更改应用程序外部的缓存设置，而无需修改配置文件中的代码。
- en: 'For this, first change the modules section of `main.php` at `protected/config/`
    so that it looks as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，首先更改`protected/config/`目录下的`main.php`文件中的模块部分，使其看起来如下：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, create a `modules.php` file at `protected/config/`. We''ll start by declaring
    where the `modules` directory is located, and the location where our generated
    configuration file should be cached:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `protected/config/` 中创建一个 `modules.php` 文件。我们将首先声明 `modules` 目录的位置，以及我们的生成配置文件应该缓存的地点：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''ll then check to see whether a cached file already exists. If it does,
    we''ll simply return it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将检查是否已存在缓存文件。如果存在，我们将直接返回它：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If a cached file doesn''t exist, we''ll iterate through all the folders in
    the `protected/modules` directory to retrieve all the module names and push them
    to an array. Since some Yii modules require additional configuration, we''ll tell
    our loader to inject anything in `main.php` at `protected/modules/<module>/config/`
    as options for the module to use. When we''ve compiled a list of all the modules
    we''re going to load, we''ll write that out as a serialized array to a file within
    our `protected/runtime` directory:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果缓存文件不存在，我们将遍历 `protected/modules` 目录中的所有文件夹，以检索所有模块名称并将它们推送到一个数组中。由于一些 Yii
    模块需要额外的配置，我们将告诉我们的加载器将 `protected/modules/<module>/config/` 中的 `main.php` 中的任何内容注入为模块使用的选项。当我们已经编译出所有要加载的模块列表时，我们将将其作为序列化数组写入我们
    `protected/runtime` 目录中的一个文件：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The resulting file that is generated then looks as follows and is returned
    all the way up to our `main.php` file at `protected/config/`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件如下所示，并返回到我们的 `protected/config/main.php` 文件：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we ever want to add a new module, we simply need to delete the `module.config.php`
    file at `protected/runtime/`. The first request to hit the system will immediately
    regenerate the updated file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想添加一个新模块，我们只需删除 `protected/runtime/` 中的 `module.config.php` 文件。第一次请求系统时，将立即重新生成更新后的文件。
- en: While slightly more expensive in terms of disk operation, this method of loading
    modules enables us to dynamically load modules with Yii just by adding them to
    the `modules` directory. It also eliminates any changes we need to make to our
    application in order to add a new module, which in turn means that we'll be less
    likely to introduce new behaviors or bugs to our main application while adding
    a new module.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在磁盘操作方面稍微昂贵一些，但这种方法加载模块使我们能够通过将它们添加到 `modules` 目录中，仅通过添加到 `modules` 目录来动态加载
    Yii 的模块。它还消除了我们需要对应用程序进行的任何更改，以便添加新模块，这意味着在添加新模块时，我们不太可能向主应用程序引入新的行为或错误。
- en: Adding custom routes to a module
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向模块添加自定义路由
- en: 'While Yii will perform a lot of module routing for free, we have to add our
    routes to our `CUrlManager` configuration in `main.php` at `protected/config/`
    in order for our module to have any custom routing. While it''s easy to execute,
    this method does not keep our module and application configurations sufficiently
    separated. To get around this limitation in Yii, we need to modify the `CMSUrlManager`
    class that we created in the previous chapter in order to retrieve custom module
    routes that we define. This enables us to write routes as part of our module rather
    than as part of our application. The steps are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Yii 会免费执行很多模块路由，但我们必须将我们的路由添加到 `protected/config/main.php` 中的 `CUrlManager`
    配置中，以便我们的模块有任何自定义路由。虽然执行起来很容易，但这种方法并没有充分地将模块和应用程序配置分离。为了克服 Yii 中的这个限制，我们需要修改我们在上一章中创建的
    `CMSUrlManager` 类，以检索我们定义的自定义模块路由。这使得我们可以将路由作为模块的一部分而不是作为应用程序的一部分来编写。步骤如下：
- en: 'Start by creating a new file, `routes.php`, in `protected/modules/dashboard/config/`,
    that contains the following. For this module, we''ll define a custom route for
    our save actions to be loaded from:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在 `protected/modules/dashboard/config/` 中创建一个新的文件，名为 `routes.php`，其中包含以下内容。对于此模块，我们将定义一个自定义路由，以便我们的保存操作可以从以下位置加载：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example is purely to illustrate how to add custom routing to a module,
    since Yii does not support it natively.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个例子纯粹是为了说明如何向模块添加自定义路由，因为 Yii 本身不支持它。
- en: 'With our custom route defined, we''ll next update `CMSUrlManager` to automatically
    import these rules. Open `CMSUrlManager.php` at `protected/components/`, and add
    the following to the `if` block of the `processRules()` method:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义了自定义路由后，我们将更新 `CMSUrlManager` 以自动导入这些规则。打开 `CMSUrlManager.php` 文件，位于 `protected/components/`，并将以下内容添加到
    `processRules()` 方法的 `if` 块中：
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We''ll finally define a `addModuleRules()` method that will search all of our
    installed modules for a `routes.php` file at `config/` and register them with
    Yii:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们最终将定义一个 `addModuleRules()` 方法，它将在所有已安装的模块中搜索 `config/` 下的 `routes.php` 文件，并将它们注册到
    Yii 中：
- en: '[PRE16]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, our dashboard module will be able to handle nonstandard routes without
    having to update a configuration file within our main application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的仪表板模块将能够处理非标准路由，而无需更新主应用程序内的配置文件。
- en: Creating the controllers
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: 'Now that we have registered our application with Yii and defined our custom
    routes, we can start working on our controllers. First, we should work on our
    `DashboardController` component so that our controllers automatically inherit
    some common behaviors. The steps are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将应用程序注册到 Yii 并定义了自定义路由，我们可以开始处理控制器。首先，我们应该处理 `DashboardController` 组件，以便我们的控制器自动继承一些常见的行为。步骤如下：
- en: 'Within our `DashboardController.php` component, we should first define our
    `accessRules()` method. This will ensure that only administrators have access
    to the dashboard:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `DashboardController.php` 组件中，我们首先应该定义我们的 `accessRules()` 方法。这将确保只有管理员可以访问仪表板：
- en: '[PRE17]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we''ll define the `default` layout that we''ll want to use throughout
    the module:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义我们将在整个模块中使用的 `default` 布局：
- en: '[PRE18]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we''ll create a custom error action that will prevent both unauthenticated
    users and unauthorized users from accessing our module. By default, if Yii encounters
    an unauthorized error, it will simply return a 403 error. Our error action will
    improve the user experience by redirecting unauthenticated users to the login
    page with a next `$_GET` parameter so that they can be returned to the exact page
    they wanted to go to after they have been authenticated. If a user is simply unauthorized,
    on the other hand, it will display the appropriate error and deny them access:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个自定义错误操作，这将阻止未经认证的用户和未经授权的用户访问我们的模块。默认情况下，如果 Yii 遇到未经授权的错误，它将简单地返回一个
    403 错误。我们的错误操作将通过将未经认证的用户重定向到登录页面（带有下一个 `$_GET` 参数，以便他们在认证后可以返回他们想要去的确切页面）来提高用户体验。另一方面，如果用户只是未经授权，它将显示适当的错误并拒绝他们访问：
- en: '[PRE19]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To complete this, redirect the `$_GET` parameter. We also need to make a change
    to our `SiteController.php` file at `protected/controllers/` so that it knows
    how to handle the parameter. Simply replace the redirect with the following:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成这个任务，请重定向 `$_GET` 参数。我们还需要修改位于 `protected/controllers/` 的 `SiteController.php`
    文件，以便它知道如何处理该参数。只需将重定向替换为以下内容：
- en: '[PRE20]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we need to implement a way to manage our assets independently of our
    main application. Many module implementations simple add assets to a globally
    available `assets` folder. This implementation makes it very difficult to ensure
    that all traces of a module have been removed. An easier way of managing assets
    for modules is to create a folder for all of our module-specific assets to reside
    in, and then, publish that folder using `CAssetManager` independently of our application.
    This way, if we make any changes to our module assets, they won''t affect our
    main application. In our `SiteController`, we should define the following method:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要实现一种独立于主应用程序管理我们资产的方法。许多模块实现简单地将资产添加到全局可用的 `assets` 文件夹中。这种实现方式使得确保所有模块痕迹都被移除变得非常困难。管理模块资产的一个更简单的方法是为所有我们的模块特定资产创建一个文件夹，然后，使用
    `CAssetManager` 独立于我们的应用程序发布该文件夹。这样，如果我们对模块资产进行任何更改，它们都不会影响我们的主应用程序。在我们的 `SiteController`
    中，我们应该定义以下方法：
- en: '[PRE21]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Since this method is a getter and since it returns the path where the assets
    are published, we can call it from our layout file as follows (using the `dashboard.css`
    file that should be copied from the project resources folder to your module''s
    `assets` folder):'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此方法是一个获取器，并且它返回资产发布的路径，因此我们可以从布局文件中调用它，如下所示（使用应从项目资源文件夹复制到模块 `assets` 文件夹的
    `dashboard.css` 文件）：
- en: '[PRE22]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Migrating the functionality to the module
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将功能迁移到模块
- en: 'Now that our module is set up, we can start by moving the functionality from
    our application controllers and theme into our dashboard module. We''ll go over
    everything that is needed for each model: Categories, Content, and Users.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了模块，我们可以开始将应用程序控制器和主题中的功能移动到仪表板模块中。我们将讨论每个模型所需的所有内容：分类、内容和用户。
- en: Migrating content management
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迁移内容管理
- en: 'In this next section, we will migrate all of the management functionalities
    we built in the previous chapter into our new module:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把上一章中构建的所有管理功能迁移到我们的新模块中：
- en: Starting with our `ContentController`, we first want to remove the `actionAdmin()`,
    `actionSave()`, and `actionDelete()` methods from the `ContentController.php`
    file at `protected/controllers/`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们的`ContentController`开始，我们首先希望从`protected/controllers/`中的`ContentController.php`文件中删除`actionAdmin()`、`actionSave()`和`actionDelete()`方法。
- en: 'Next, we should remove the access control properties for the actions we just
    deleted from our `ContentController`. The restored `accessRules()` method should
    look as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该从我们的`ContentController`中删除我们刚刚删除的操作的访问控制属性。恢复的`accessRules()`方法应如下所示：
- en: '[PRE23]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With our `ContentController` stripped of our administrative behaviors, we can
    begin moving the functionality into our `DefaultController.php` file at `protected/modules/dashboard/controllers/`,
    which we''ll be using as our `ContentController`. We''ll start by adding our `accessRules()`
    method to our `DefaultController`. Since we want to inherit the rules defined
    in `DashboardController.php` at `components/`, we''ll use `CMap::mergeArray()`
    to merge the parent rules with our newly defined rules:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`ContentController`去除了管理行为之后，我们可以开始将功能移动到`protected/modules/dashboard/controllers/`中的`DefaultController.php`文件，我们将使用它作为我们的`ContentController`。我们将首先将我们的`accessRules()`方法添加到`DefaultController`中。由于我们希望继承在`components/`中定义的`DashboardController.php`中的规则，我们将使用`CMap::mergeArray()`来合并父规则与我们的新定义的规则：
- en: Note
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do the naming conventions have you confused? If you don't want to store the
    content-related functionality in `DefaultController`, you can set the `$defaultController`
    property in `DashboardModule` to `content`. This will override Yii's default behavior.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名约定让你感到困惑吗？如果你不想在`DefaultController`中存储与内容相关的功能，你可以在`DashboardModule`中设置`$defaultController`属性为`content`。这将覆盖Yii的默认行为。
- en: '[PRE24]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, we''ll redefine our `loadModel()` method:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将重新定义我们的`loadModel()`方法：
- en: '[PRE25]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, we''ll define our `actionDelete()` method:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将定义我们的`actionDelete()`方法：
- en: '[PRE26]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then we''ll write an index method to display all of the content entries on
    our database:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将编写一个索引方法来显示数据库中的所有内容条目：
- en: '[PRE27]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, we''ll write a method to both create new content entries and edit
    existing content entries:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将编写一个方法来创建新的内容条目和编辑现有内容条目：
- en: '[PRE28]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Next, we should copy our `save.php` file located at `protected/modules/dashboard/views/default/`
    from our project resources folder into our module. If you haven't done so already,
    copy the `default.php` layout file located at `protected/modules/dashboard/views/layouts/`
    into your project.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该将位于`protected/modules/dashboard/views/default/`的`save.php`文件从我们的项目资源文件夹复制到我们的模块中。如果你还没有这样做，请将位于`protected/modules/dashboard/views/layouts/`的`default.php`布局文件复制到你的项目中。
- en: 'Finally, we need to make sure that our `index` view file is properly updated
    so that it links to the appropriate controller actions. If you were simply to
    copy the view from the theme file, you''d notice that none of the links work.
    To correct these links, we need to update our `createUrl` calls to point to the
    `save()` method our module''s `DefaultController`, and update the `CButtonColumn`
    links to point to our module:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要确保我们的`index`视图文件已正确更新，以便它链接到适当的控制器操作。如果你只是简单地从主题文件中复制视图，你会注意到没有任何链接是有效的。为了纠正这些链接，我们需要更新我们的`createUrl`调用，使其指向我们模块的`DefaultController`中的`save()`方法，并更新`CButtonColumn`链接，使其指向我们的模块：
- en: '[PRE29]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that we''re finished, we''ll be able to view all the articles in our CMS,
    delete them, edit them, and navigate to the frontend view—all from a single interface,
    as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成，我们将能够从单个界面查看我们CMS中的所有文章，删除它们，编辑它们，并导航到前端视图，如下面的截图所示：
- en: '![Migrating content management](img/7734OS_07_03.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![迁移内容管理](img/7734OS_07_03.jpg)'
- en: Migrating categories
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分类迁移
- en: 'The changes for our users and categories controllers are going to be very similar—let''s
    work through them. The steps are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用户和分类控制器的更改将非常相似——让我们逐一处理。步骤如下：
- en: Starting with our `CategoryController`, we first want to remove the `actionAdmin()`,
    `actionSave()`, and `actionDelete()` methods from the `CategoryController.php`
    file at `protected/controllers/`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们的`CategoryController`开始，我们首先希望从`protected/controllers/`中的`CategoryController.php`文件中删除`actionAdmin()`、`actionSave()`和`actionDelete()`方法。
- en: 'Next, we should remove the access control properties for the actions we just
    deleted from our `CategoryController`. The restored `accessRules()` method should
    look as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该从我们的`CategoryController`中删除我们刚刚删除的操作的访问控制属性。恢复的`accessRules()`方法应如下所示：
- en: '[PRE30]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Our new `accessRules()` method for our `CategoryController.php` file at `protected/modules/dashboard/controllers/`
    will then look as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`protected/modules/dashboard/controllers/`目录下的`CategoryController.php`文件中的新`accessRules()`方法将如下所示：
- en: '[PRE31]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, we''ll reimplement all of the management actions with updated redirects,
    starting with our `actionIndex()` method:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用更新的重定向重新实现所有管理操作，从我们的`actionIndex()`方法开始：
- en: '[PRE32]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We''ll then re-implement the save method and modify it to work in our module:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将重新实现保存方法并修改它以在我们的模块中工作：
- en: '[PRE33]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We''ll then reimplement the delete method in our module and update the redirects:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在我们的模块中重新实现删除方法并更新重定向：
- en: '[PRE34]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, we''ll update the `loadModel()` method so that it works without our
    module:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将更新`loadModel()`方法，使其在没有我们的模块的情况下也能工作：
- en: '[PRE35]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Then copy the view files' `index.php` located at `protected/modules/dashboard/views/category/`
    and `save.php` located at `protected/modules/dashboard/views/category/` from the
    project resources folder into our module.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将位于`protected/modules/dashboard/views/category/`的`index.php`视图文件和位于`protected/modules/dashboard/views/category/`的`save.php`视图文件从项目资源文件夹复制到我们的模块中。
- en: 'Notice once again that we''ve updated our `CButtonColumn` links to point to
    our module rather than to the home page routes we had defined earlier:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，我们再次更新了我们的`CButtonColumn`链接，使其指向我们的模块而不是之前定义的首页路由：
- en: '[PRE36]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Our final category management interface will look as follows and will behave
    identically to how our content management interface behaves:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的分类管理界面将如下所示，并且其行为将与我们的内容管理界面完全相同：
- en: '![Migrating categories](img/7734OS_07_04.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![迁移分类](img/7734OS_07_04.jpg)'
- en: Implementing user management
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现用户管理
- en: 'In the previous chapter, we didn''t implement a UI for user management; let''s
    go ahead and implement that functionality now so that our dashboard module fully
    encompasses all the management functionality. The steps are as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们没有实现用户管理的UI；现在让我们继续实现这个功能，以便我们的仪表板模块完全包含所有管理功能。步骤如下：
- en: 'Begin by creating a new controller, `UserController.php`, in `protected/modules/dashboard/controllers`
    with the following definition:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`protected/modules/dashboard/controllers`中创建一个新的控制器`UserController.php`，其定义如下：
- en: '[PRE37]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, we''ll define our `accessRules()` method for this controller:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为这个控制器定义我们的`accessRules()`方法：
- en: '[PRE38]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, we''ll implement a `loadModel()` utility method:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将实现一个`loadModel()`实用方法：
- en: '[PRE39]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, we''ll update our delete action so that it redirects properly within
    our module:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将更新我们的删除操作，使其在我们的模块内正确重定向：
- en: '[PRE40]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then we''ll reimplement the index action to display a listing of all of our
    users:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将重新实现索引操作，以显示所有用户的列表：
- en: '[PRE41]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, we''ll migrate our save method into our module. Since we''ve already
    implemented all the core functionality of how our users behave into our User model
    class, the implementation of our `actionSave()` method is straightforward:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将我们的保存方法迁移到我们的模块中。由于我们已经将用户行为的核心功能实现到了我们的`User`模型类中，因此我们的`actionSave()`方法的实现非常直接：
- en: '[PRE42]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Finally, copy the `index.php` view file located at `protected/modules/dashboard/views/user/`
    and the `save.php` view file located at `protected/modules/dashboard/views/user/`
    from the project resources folder into your application. Once again, we're left
    with an interface that is identical to our content and category management interfaces:![Implementing
    user management](img/7734OS_07_05.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将位于`protected/modules/dashboard/views/user/`的`index.php`视图文件和位于`protected/modules/dashboard/views/user/`的`save.php`视图文件从项目资源文件夹复制到您的应用程序中。再次强调，我们得到的界面与我们的内容和分类管理界面完全相同：![实现用户管理](img/7734OS_07_05.jpg)
- en: Uploading files
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: The final component that we'll be adding to our module is a file manager with
    file upload capabilities. For this component, we'll be creating a dedicated controller
    to view all of our uploaded files in paginated format, several new classes to
    handle the actual file upload, and a few view changes to our content save view
    so that we can associate files with a particular article.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的模块添加的最后一个组件是一个具有文件上传功能的文件管理器。对于这个组件，我们将创建一个专门的控制器来以分页格式查看所有上传的文件，创建几个新类来处理实际的文件上传，并对内容保存视图进行一些修改，以便我们可以将文件与特定的文章关联起来。
- en: Rather than bundling all of this functionality into our `FileController` that
    we'll be building, we'll start by building three different components to handle
    the various aspects of uploading a file. The first class `File` will represent
    a `$_FILES['file']` object and will provide the functionality for saving the file.
    The second class, `FileUpload`, will be our call point for uploading our file
    and will return the appropriate database to us. The final class, `FileUploader`,
    will handle the interactions between the `File` and `FileUpload` class. These
    three classes will ensure that our `FileController` class is clean and will make
    working with the file upload extremely easy.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会将所有这些功能打包到我们将要构建的 `FileController` 中，而是先构建三个不同的组件来处理上传文件的不同方面。第一个类 `File`
    将代表 `$_FILES['file']` 对象，并提供保存文件的函数。第二个类 `FileUpload` 将是我们上传文件的调用点，并将适当的数据库返回给我们。最后一个类
    `FileUploader` 将处理 `File` 和 `FileUpload` 类之间的交互。这三个类将确保我们的 `FileController` 类保持简洁，并将使文件上传变得极其容易。
- en: Creating the File class
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 File 类
- en: 'We''ll start by creating the `File` class, a simple object that represents
    `$_FILES[''file'']`, that we''ll be sending via a `POST` request. Create the `File.php`
    file in `protected/modules/dashboard/components/`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建 `File` 类，这是一个简单的对象，代表 `$_FILES['file']`，我们将通过 `POST` 请求发送它。在 `protected/modules/dashboard/components/`
    中创建 `File.php` 文件：
- en: '[PRE43]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: For simplicity, we'll be storing all of our files in the root directory of our
    main application called `/uploads`. Go ahead and create this folder now, and make
    sure that your web server has write access to it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们将把所有文件存储在我们的主应用程序根目录下的 `/uploads` 目录中。现在就创建这个文件夹，并确保您的 web 服务器有写入权限。
- en: Creating the FileUploader class
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 FileUploader 类
- en: 'The next class we''ll be building out is the `FileUploader` class. This class
    will handle the validation and will call the `File` class that we just created
    in order to save the file to the uploads directory. The steps are as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要构建的类是 `FileUploader` 类。这个类将处理验证，并调用我们刚刚创建的 `File` 类，以便将文件保存到上传目录。步骤如下：
- en: 'Start with the class definition in `FileUploader.php` located at `protected/modules/dashboard/components/`:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `FileUploader.php` 文件开始，该文件位于 `protected/modules/dashboard/components/`：
- en: '[PRE44]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, define some private attributes to be used as validators:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一些私有属性作为验证器使用：
- en: '[PRE45]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, we''ll create a constructor for this new object that will set some basic
    variables for the validator later on and will also create the `File` object using
    the `$_FILES[''file'']` array:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为这个新对象创建一个构造函数，该构造函数将为验证器设置一些基本变量，并使用 `$_FILES['file']` 数组创建 `File` 对象：
- en: '[PRE46]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, we''ll create the `checkServerSettings()` method that we defined earlier.
    This will ensure that we don''t try to upload files that are larger than what
    is defined in our `php.ini` file:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建之前定义的 `checkServerSettings()` 方法。这将确保我们不会尝试上传大于我们 `php.ini` 文件中定义的文件：
- en: '[PRE47]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Finally, we''ll create the validators that will validate that the file meets
    the restrictions we put in place earlier. This class will ultimately return an
    array to our `FileUpload` class that we''ll be creating next:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将创建验证器，以确保文件符合我们之前设置的限制。这个类最终将返回一个数组到我们即将创建的 `FileUpload` 类：
- en: '[PRE48]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Creating the FileUpload class
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 FileUpload 类
- en: 'The last component that we''ll create is the `FileUpload` class that will act
    as an intermediary between our `FileUploader` class and our `FileController` class:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的最后一个组件是 `FileUpload` 类，它将在我们的 `FileUploader` 类和 `FileController` 类之间充当中间件：
- en: 'Begin by creating the `FileUpload.php` file in `protected/modules/dashboard/components/`
    with the following definition:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始创建 `FileUpload.php` 文件，位于 `protected/modules/dashboard/components/`，以下定义：
- en: '[PRE49]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Then, declare a few properties and the constructor:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，声明一些属性和构造函数：
- en: '[PRE50]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We''ll then create our `_uploadFile()` method that we called in our constructor.
    This method will instantiate a `FileUploader` object and will perform the upload
    before passing it off to our `ContentMetadata` object, where we''ll store the
    reference to the file:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建我们构造函数中调用过的 `_uploadFile()` 方法。这个方法将实例化一个 `FileUploader` 对象，并在将其传递给我们的
    `ContentMetadata` 对象（我们将在此对象中存储文件的引用）之前执行上传操作：
- en: '[PRE51]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Finally, we''ll create the `_handleResourceUpload()` method. This method will
    take the response object returned by the `FileUploader` object and, if the file
    was successfully uploaded, will store the filename of the uploaded file in our
    database so that we can manage it easily. It will also link a particular file
    to a given article:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将创建 `_handleResourceUpload()` 方法。此方法将接收 `FileUploader` 对象返回的响应对象，如果文件成功上传，将上传文件的文件名存储到我们的数据库中，以便我们轻松管理。它还将特定文件链接到给定文章：
- en: '[PRE52]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Creating the controller for the file manager
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文件管理器的控制器
- en: 'Now that we have the functionality in place to upload a file, we need to create
    the controller actions to manage it. We''ll be creating three separate actions:
    an `index` action where all files and their associations can be viewed; a `delete`
    action; and an `upload` action. The steps are as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了上传文件的功能，我们需要创建管理它的控制器动作。我们将创建三个单独的动作：一个 `index` 动作，其中可以查看所有文件及其关联；一个
    `delete` 动作；以及一个 `upload` 动作。步骤如下：
- en: 'Begin by creating the `FileController` class in `protected/modules/dashboard/controllers`
    with the following definition:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 `protected/modules/dashboard/controllers` 中创建名为 `FileController` 的类，其定义如下：
- en: '[PRE53]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We''ll then define the `accessRules()` method:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将定义 `accessRules()` 方法：
- en: '[PRE54]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Next, we''ll define our `index` action that will allow us to view all files
    uploaded into our CMS. Since our `ContentMetadata` table might contain other attributes,
    we''ll only be searching against items that have a key of upload:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义我们的 `index` 动作，这将允许我们查看上传到我们 CMS 的所有文件。由于我们的 `ContentMetadata` 表可能包含其他属性，我们只会在具有上传键的项上进行搜索：
- en: '[PRE55]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Then, we''ll create an `upload` action that will call our `FileUpload` class.
    After uploading the file or having an error, the action will redirect the user
    to where they came from with either the relative URI to the file, or a useful
    error message generated from our `FileUploader` class:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个 `upload` 动作，该动作将调用我们的 `FileUpload` 类。在上传文件或出现错误后，该动作将使用相对 URI 或来自我们的
    `FileUploader` 类的实用错误消息将用户重定向到他们原来的位置：
- en: '[PRE56]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then we''ll create a `loadModel()` method and a `delete` action to remove files
    from our database:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个 `loadModel()` 方法和删除动作来从我们的数据库中删除文件：
- en: '[PRE57]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We''ll then move on to creating the views for our file manager. The first view
    we''ll create will be an index view, which will consist of a `CListView` container
    that will allow us to easily browse through our images. Add the following to `index.php`
    located at `protected/modules/dashboard/views/file/`:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将继续创建文件管理器的视图。我们将首先创建一个索引视图，它将包含一个 `CListView` 容器，使我们能够轻松浏览我们的图片。将以下内容添加到位于
    `protected/modules/dashboard/views/file/` 的 `index.php`：
- en: '[PRE58]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We''ll also create the corresponding `itemView` file called `_file.php` located
    at `protected/modules/dashboard/views/file/`:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将创建位于 `protected/modules/dashboard/views/file/` 的相应 `itemView` 文件，名为 `_file.php`：
- en: '[PRE59]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Finally, we''ll need to update `save.php` at `protected/modules/dashboard/views/default/`
    with a file upload form so that files can be uploaded:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要更新 `protected/modules/dashboard/views/default/` 中的 `save.php`，以便添加文件上传表单，以便上传文件：
- en: '[PRE60]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now, if you upload a file from the content save screen, the URL of the file
    will be returned back to you for you to add it to your article:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您从内容保存屏幕上传文件，文件 URL 将返回给您，以便您将其添加到您的文章中：
- en: '![Creating the controller for the file manager](img/7734OS_07_07.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![创建文件管理器的控制器](img/7734OS_07_07.jpg)'
- en: 'Additionally, if you want to view all files uploaded to the CMS, or if you
    want to delete a file, you can navigate to `http://chapter7.example.com/dashboard/files`
    in your web browser or add a link to the sidebar in your `default.php` file at
    `protected/modules/dashboard/views/layouts/`, as shown in the following screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您想查看上传到 CMS 的所有文件，或者您想删除一个文件，您可以在您的网页浏览器中导航到 `http://chapter7.example.com/dashboard/files`，或者在
    `protected/modules/dashboard/views/layouts/` 中的 `default.php` 文件侧边栏中添加一个链接，如下面的截图所示：
- en: '![Creating the controller for the file manager](img/7734OS_07_08.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![创建文件管理器的控制器](img/7734OS_07_08.jpg)'
- en: Strategies for deploying our application
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署我们应用程序的策略
- en: The last topic we should discuss is how we want to deploy our new module alongside
    our application. There are several different deployment strategies that we can
    make use of, each of which has its own advantages and disadvantages. In the next
    section, we'll go over the benefits and downfalls of a few different strategies.
    When the time comes to deploy your module alongside your application, be sure
    to give careful thought to how you want your module and application to be integrated.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该讨论的最后一个话题是我们希望如何将我们的新模块与应用程序一起部署。我们可以使用几种不同的部署策略，每种策略都有其自身的优缺点。在下一节中，我们将讨论几种不同策略的利弊。当您准备将模块与应用程序一起部署时，请务必仔细考虑您希望模块和应用程序如何集成。
- en: Deploying as the application
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为应用程序部署
- en: The simplest deployment strategy we can use is to simply commit our module's
    source code directly to our main application. When the time comes to deploy our
    application, our module is automatically included. While incredibly simple and
    basic, this strategy has several disadvantages.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的最简单的部署策略是将我们的模块源代码直接提交到我们的主应用程序。当部署应用程序的时间到来时，我们的模块会自动包含在内。虽然这种方法非常简单和基本，但它有几个缺点。
- en: First and foremost, it binds the state of our module to our application, which
    makes it more likely that we'll unintentionally introduce bugs or incomplete features
    when we deploy our application. The second disadvantage is that it tightly couples
    our module's state at any given time to our application. The final disadvantage
    is that it makes it very difficult to deploy a module update independently of
    our application.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 首先也是最重要的，它将我们的模块状态与应用程序的状态绑定在一起，这使得我们在部署应用程序时无意中引入错误或不完整的特性的可能性更大。第二个缺点是它将我们的模块在任何给定时间的状态紧密耦合到我们的应用程序上。最后一个缺点是它使得独立于我们的应用程序部署模块更新变得非常困难。
- en: Deploying as a submodule
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为子模块部署
- en: The second deployment strategy is to commit our module code to a completely
    separate repository and include it in our project as a submodule. This method
    not only ensures that our project retrieves the latest code, but it also ensures
    that our module code and application code are properly separated. The alternative
    to using a submodule is to simply clone the module repository into the `protected/modules`
    directory every time we want to run a deployment. While this method is simple,
    it does increase the complexity of our application and requires us to have a detailed
    understanding of Git submodules. Additionally, it is difficult to automate while
    ensuring that deployments don't result in downtime.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种部署策略是将我们的模块代码提交到一个完全独立的仓库，并将其作为子模块包含到我们的项目中。这种方法不仅确保我们的项目获取到最新的代码，而且还确保我们的模块代码和应用代码得到适当的分离。使用子模块的替代方案是，每次我们想要运行部署时，简单地将模块仓库克隆到`protected/modules`目录。虽然这种方法很简单，但它确实增加了我们应用程序的复杂性，并要求我们深入了解Git子模块。此外，在确保部署不会导致停机的情况下，自动化此过程比较困难。
- en: Deploying as a Composer dependency
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为Composer依赖项部署
- en: A third strategy is to create a completely separate repository for our module,
    include it into our project as a Composer dependency, and use the `composer/installers`
    package to ensure that the module is placed in the correct directory. While it
    is significantly more complex than the other strategies, this strategy has the
    advantage of ensuring that our module and application code remain separated. It
    also has the advantage of moving deployment-related tasks back to the application
    rather than the module.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个策略是为我们的模块创建一个完全独立的仓库，将其作为Composer依赖项包含到我们的项目中，并使用`composer/installers`包确保模块被放置在正确的目录。虽然这种方法比其他策略复杂得多，但它确保我们的模块和应用代码保持分离。它还有将部署相关任务移回应用程序而不是模块的优点。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered a lot of information on working with modules and overcoming some
    of the limitations that they have. We discussed how to create a module, how to
    integrate it with our application, how to handle custom routing for modules, how
    to migrate the management functionality from a regular Yii application into our
    module, and we also added a file manager and upload capabilities to our CMS. Additionally,
    we covered different strategies for deploying our module alongside our application.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了大量关于模块操作和克服它们的一些限制的信息。我们讨论了如何创建模块，如何将其与我们的应用程序集成，如何处理模块的自定义路由，如何将管理功能从常规的Yii应用程序迁移到我们的模块，我们还向我们的CMS添加了文件管理和上传功能。此外，我们还讨论了将我们的模块与应用程序一起部署的不同策略。
- en: In the next chapter, we will create an API module for our application that will
    allow for web services and native applications to connect to our CMS. We'll expand
    upon the topics covered in this chapter, and we'll also cover how we can override
    several core Yii components to make our API flexible and easy to develop with.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为我们的应用程序创建一个API模块，该模块将允许网络服务和本地应用程序连接到我们的CMS。我们将扩展本章所涵盖的主题，同时也会介绍如何覆盖几个核心Yii组件，使我们的API更加灵活且易于开发。
- en: Before continuing to the next chapter, be sure to review the Yii Class Reference
    at [http://www.yiiframework.com/doc/api/](http://www.yiiframework.com/doc/api/)
    and review all the classes that we used in this chapter.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一章之前，请务必查阅[http://www.yiiframework.com/doc/api/](http://www.yiiframework.com/doc/api/)上的Yii类参考，并回顾本章中我们使用到的所有类。
