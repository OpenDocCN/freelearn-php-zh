["```php\n    mkdir -p src/Plugin/Block\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Block;\n    ```", "```php\n    use Drupal\\Core\\Block\\BlockBase;\n    ```", "```php\n    class Copyright extends BlockBase {\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Block;\n    ```", "```php\n    use Drupal\\Core\\Block\\BlockBase;\n    ```", "```php\n    /**\n    ```", "```php\n     * @Block(\n    ```", "```php\n     *   id = \"copyright_block\",\n    ```", "```php\n     *   admin_label = @Translation(\"Copyright\"),\n    ```", "```php\n     *   category = @Translation(\"Custom\"),\n    ```", "```php\n     * )\n    ```", "```php\n    */\n    ```", "```php\n    class Copyright extends BlockBase {\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Block;\n    ```", "```php\n    use Drupal\\Core\\Block\\BlockBase;\n    ```", "```php\n    /**\n    ```", "```php\n     * @Block(\n    ```", "```php\n     * id = \"copyright_block\",\n    ```", "```php\n     * admin_label = @Translation(\"Copyright\"),\n    ```", "```php\n     * category = @Translation(\"Custom\")\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class Copyright extends BlockBase {\n    ```", "```php\n      /**\n    ```", "```php\n       * {@inheritdoc}\n    ```", "```php\n       */\n    ```", "```php\n      public function build() {\n    ```", "```php\n        $date = new \\DateTime();\n    ```", "```php\n        return [\n    ```", "```php\n          '#markup' => t('Copyright @year&copy; My\n    ```", "```php\n            Company', [\n    ```", "```php\n            '@year' => $date->format('Y'),\n    ```", "```php\n          ]),\n    ```", "```php\n        ];\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    php vendor/bin/drush cr\n    ```", "```php\n/**\n * Implements hook_block_alter().\n */\nfunction mymodule_block_alter(&$definitions) {\n  $definitions['user_login_block']['admin_label'] =\n    t('Login');\n}\n```", "```php\n/**\n * Implements hook_block_build_alter().\n */\nfunction mymodule_block_build_alter(\n  array &$build,\n  \\Drupal\\Core\\Block\\BlockPluginInterface $block\n) {\n  // Add the 'url' cache the block per URL.\n  if ($block->id() == 'myblock') {\n    $build['#cache']['contexts'][] = 'url';\n  }\n}\n```", "```php\n/**\n * Implements hook_block_view_alter().\n */\nfunction mymodule_block_view_alter(\n  array &$build,\n  \\Drupal\\Core\\Block\\BlockPluginInterface $block\n) {\n  // Remove the contextual links on all blocks that provide\n    them.\n  if (isset($build['#contextual_links'])) {\n    unset($build['#contextual_links']);\n  }\n}\n```", "```php\n  /**\n   * {@inheritdoc}\n   */\n  public function defaultConfiguration() {\n    return [\n      'company_name' => '',\n    ];\n  }\n  /**\n   * {@inheritdoc}\n   */\n  public function blockForm($form,\n    \\Drupal\\Core\\Form\\FormStateInterface $form_state) {\n    $form['company_name'] = [\n      '#type' => 'textfield',\n      '#title' => t('Company name'),\n      '#default_value' => $this->configuration\n         ['company_name'],\n    ];\n    return $form;\n  }\n```", "```php\n  /**\n   * {@inheritdoc}\n   */\n  public function blockSubmit($form, \\Drupal\n    \\Core\\Form\\FormStateInterface $form_state) {\n    $this->configuration['company_name'] =\n    $form_state->getValue('company_name');\n  }\n```", "```php\n  /**\n   * {@inheritdoc}\n   */\n  public function build()\n  {\n    $date = new \\DateTime();\n    return [\n      '#markup' => t('Copyright @year&copy; @company', [\n        '@year' => $date->format('Y'),\n        '@company' => $this->configuration['company_name'],\n      ]),\n    ];\n  }\n```", "```php\n/**\n * {@inheritdoc}\n */\nprotected function blockAccess(AccountInterface $account) {\n  $route_name = $this->routeMatch->getRouteName();\n  if ($account->isAnonymous() && !in_array($route_name,\n     ['user.login', 'user.logout'])) {\n    return AccessResult::allowed()\n      ->addCacheContexts(['route.name',\n        'user.roles:anonymous']);\n  }\n  return AccessResult::forbidden();\n}\n```", "```php\n/**\n * Implements hook_block_access().\n */\nfunction mymodule_block_access(\n  \\Drupal\\block\\Entity\\Block $block,\n  $operation,\n  \\Drupal\\Core\\Session\\AccountInterface $account\n) {\n  // Example code that would prevent displaying the\n    Copyright' block in\n  // a region different from the footer.\n  if ($operation == 'view' && $block->getPluginId() ==\n    'copyright') {\n    return\n      \\Drupal\\Core\\Access\\AccessResult::forbiddenIf($block-\n        >getRegion() != 'footer');\n  }\n  // No opinion.\n  return \\Drupal\\Core\\Access\\AccessResult::neutral();\n}\n```", "```php\n    mkdir -p src/Plugin/Field/FieldType\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Field\\FieldType;\n    ```", "```php\n    use Drupal\\Core\\Field\\FieldItemBase;\n    ```", "```php\n    use Drupal\\Core\\Field\\FieldStorageDefinitionInterface;\n    ```", "```php\n    use Drupal\\Core\\TypedData\\DataDefinition;\n    ```", "```php\n    class RealName extends FieldItemBase {\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Field\\FieldType;\n    ```", "```php\n    use Drupal\\Core\\Field\\FieldItemBase;\n    ```", "```php\n    use Drupal\\Core\\Field\\FieldStorageDefinitionInterface;\n    ```", "```php\n    use Drupal\\Core\\TypedData\\DataDefinition;\n    ```", "```php\n    /**\n    ```", "```php\n     * Plugin implementation of the 'realname' field type.\n    ```", "```php\n     *\n    ```", "```php\n     * @FieldType(\n    ```", "```php\n     *   id = \"realname\",\n    ```", "```php\n     *   label = @Translation(\"Real name\"),\n    ```", "```php\n     *   description = @Translation(\"This field stores a\n    ```", "```php\n            first and last name.\"),\n    ```", "```php\n     *   category = @Translation(\"General\"),\n    ```", "```php\n     *   default_widget = \"string_textfield\",\n    ```", "```php\n     *   default_formatter = \"string\"\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class RealName extends FieldItemBase {\n    ```", "```php\n    }\n    ```", "```php\n      /**\n    ```", "```php\n       * {@inheritdoc}\n    ```", "```php\n       */\n    ```", "```php\n      public static function schema(FieldStorage\n    ```", "```php\n        DefinitionInterface $field_definition)  {\n    ```", "```php\n        return [\n    ```", "```php\n          'columns' => [\n    ```", "```php\n            'first_name' => [\n    ```", "```php\n              'description' => 'First name.',\n    ```", "```php\n              'type' => 'varchar',\n    ```", "```php\n              'length' => '255',\n    ```", "```php\n              'not null' => TRUE,\n    ```", "```php\n              'default' => '',\n    ```", "```php\n            ],\n    ```", "```php\n            'last_name' => [\n    ```", "```php\n              'description' => 'Last name.',\n    ```", "```php\n              'type' => 'varchar',\n    ```", "```php\n              'length' => '255',\n    ```", "```php\n              'not null' => TRUE,\n    ```", "```php\n              'default' => '',\n    ```", "```php\n            ],\n    ```", "```php\n          ],\n    ```", "```php\n          'indexes' => [\n    ```", "```php\n            'first_name' => ['first_name'],\n    ```", "```php\n            'last_name' => ['last_name'],\n    ```", "```php\n          ],\n    ```", "```php\n        ];\n    ```", "```php\n      }\n    ```", "```php\n      /**\n    ```", "```php\n       * {@inheritdoc}\n    ```", "```php\n       */\n    ```", "```php\n      public static function propertyDefinitions\n    ```", "```php\n         (FieldStorageDefinitionInterface\n    ```", "```php\n            $field_definition) {\n    ```", "```php\n        $properties['first_name'] =\n    ```", "```php\n            DataDefinition::create('string')\n    ```", "```php\n          ->setLabel(t('First name'));\n    ```", "```php\n        $properties['last_name'] =\n    ```", "```php\n            DataDefinition::create('string')\n    ```", "```php\n          ->setLabel(t('Last name'));\n    ```", "```php\n        return $properties;\n    ```", "```php\n      }\n    ```", "```php\n      /**\n    ```", "```php\n       * {@inheritdoc}\n    ```", "```php\n       */\n    ```", "```php\n      public static function mainPropertyName() {\n    ```", "```php\n        return 'first_name';\n    ```", "```php\n      }\n    ```", "```php\n    php vendor/bin/drush cr\n    ```", "```php\n    mkdir -p src/Plugin/Field/FieldWidget\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Field\\FieldWidget;\n    ```", "```php\n    use Drupal\\Core\\Field\\FieldItemListInterface;\n    ```", "```php\n    use Drupal\\Core\\Field\\WidgetBase;\n    ```", "```php\n    use Drupal\\Core\\Form\\FormStateInterface;\n    ```", "```php\n    class RealNameDefaultWidget extends WidgetBase {\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Field\\FieldWidget;\n    ```", "```php\n    use Drupal\\Core\\Field\\FieldItemListInterface;\n    ```", "```php\n    use Drupal\\Core\\Field\\WidgetBase;\n    ```", "```php\n    use Drupal\\Core\\Form\\FormStateInterface;\n    ```", "```php\n    /**\n    ```", "```php\n     * Plugin implementation of the 'realname_default'\n    ```", "```php\n        widget.\n    ```", "```php\n     *\n    ```", "```php\n     * @FieldWidget(\n    ```", "```php\n     *   id = \"realname_default\",\n    ```", "```php\n     *   label = @Translation(\"Real name\"),\n    ```", "```php\n     *   field_types = {\n    ```", "```php\n     *     \"realname\"\n    ```", "```php\n     *   }\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class RealNameDefaultWidget extends WidgetBase {\n    ```", "```php\n    }\n    ```", "```php\n      /**\n    ```", "```php\n       * {@inheritdoc}\n    ```", "```php\n       */\n    ```", "```php\n      public function formElement(\n    ```", "```php\n        FieldItemListInterface $items,\n    ```", "```php\n        $delta,\n    ```", "```php\n        array $element,\n    ```", "```php\n        array &$form,\n    ```", "```php\n        FormStateInterface $form_state\n    ```", "```php\n      ) {\n    ```", "```php\n        $element['first_name'] = [\n    ```", "```php\n          '#type' => 'textfield',\n    ```", "```php\n          '#title' => t('First name'),\n    ```", "```php\n          '#default_value' => '',\n    ```", "```php\n          '#size' => 25,\n    ```", "```php\n          '#required' => $element['#required'],\n    ```", "```php\n        ];\n    ```", "```php\n        $element['last_name'] = [\n    ```", "```php\n          '#type' => 'textfield',\n    ```", "```php\n          '#title' => t('Last name'),\n    ```", "```php\n          '#default_value' => '',\n    ```", "```php\n          '#size' => 25,\n    ```", "```php\n          '#required' => $element['#required'],\n    ```", "```php\n        ];\n    ```", "```php\n        return $element;\n    ```", "```php\n      }\n    ```", "```php\n    /**\n    ```", "```php\n     * Plugin implementation of the 'realname' field type.\n    ```", "```php\n     *\n    ```", "```php\n     * @FieldType(\n    ```", "```php\n     *   id = \"realname\",\n    ```", "```php\n     *   label = @Translation(\"Real name\"),\n    ```", "```php\n     *   description = @Translation(\"This field stores a\n    ```", "```php\n            first and last name.\"),\n    ```", "```php\n     *   category = @Translation(\"General\"),\n    ```", "```php\n     *   default_widget = \"realname_default\",\n    ```", "```php\n     *   default_formatter = \"string\"\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class RealName extends FieldItemBase {\n    ```", "```php\n    php vendor/bin/drush cr\n    ```", "```php\n    mkdir -p src/Plugin/Field/FieldFormatter\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Field\\FieldFormatter;\n    ```", "```php\n    use Drupal\\Core\\Field\\FormatterBase;\n    ```", "```php\n    use Drupal\\Core\\Field\\FieldItemListInterface;\n    ```", "```php\n    class RealNameFormatter extends FormatterBase {\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\Field\\FieldFormatter;\n    ```", "```php\n    use Drupal\\Core\\Field\\FormatterBase;\n    ```", "```php\n    use Drupal\\Core\\Field\\FieldItemListInterface;\n    ```", "```php\n    /**\n    ```", "```php\n     * Plugin implementation of the 'realname_one_line'\n    ```", "```php\n        formatter.\n    ```", "```php\n     *\n    ```", "```php\n     * @FieldFormatter(\n    ```", "```php\n     *   id = \"realname_one_line\",\n    ```", "```php\n     *   label = @Translation(\"Real name (one line)\"),\n    ```", "```php\n     *   field_types = {\n    ```", "```php\n     *     \"realname\"\n    ```", "```php\n     *   }\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class RealNameFormatter extends FormatterBase {\n    ```", "```php\n    }\n    ```", "```php\n      /**\n    ```", "```php\n       * {@inheritdoc}\n    ```", "```php\n       */\n    ```", "```php\n      public function viewElements(\n    ```", "```php\n        FieldItemListInterface $items,\n    ```", "```php\n        $langcode\n    ```", "```php\n      ) {\n    ```", "```php\n        $element = [];\n    ```", "```php\n        foreach ($items as $delta => $item) {\n    ```", "```php\n          $element[$delta] = [\n    ```", "```php\n            '#markup' => $this->t('@first @last', [\n    ```", "```php\n              '@first' => $item->first_name,\n    ```", "```php\n              '@last' => $item->last_name,\n    ```", "```php\n            ]),\n    ```", "```php\n          ];\n    ```", "```php\n        }\n    ```", "```php\n        return $element;\n    ```", "```php\n      }\n    ```", "```php\n    /**\n    ```", "```php\n     * Plugin implementation of the 'realname' field type.\n    ```", "```php\n     *\n    ```", "```php\n     * @FieldType(\n    ```", "```php\n     *   id = \"realname\",\n    ```", "```php\n     *   label = @Translation(\"Real name\"),\n    ```", "```php\n     *   description = @Translation(\"This field stores a\n    ```", "```php\n            first and last name.\"),\n    ```", "```php\n     *   category = @Translation(\"General\"),\n    ```", "```php\n     *   default_widget = \"realname_default\",\n    ```", "```php\n     *   default_formatter = \"realname_one_line\"\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class RealName extends FieldItemBase {\n    ```", "```php\n    php vendor/bin/drush cr\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule;\n    ```", "```php\n    use Drupal\\Core\\Plugin\\DefaultPluginManager;\n    ```", "```php\n    use Drupal\\Core\\Cache\\CacheBackendInterface;\n    ```", "```php\n    use Drupal\\Core\\Extension\\ModuleHandlerInterface;\n    ```", "```php\n    class GeoLocatorManager extends DefaultPluginManager {\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule;\n    ```", "```php\n    use Drupal\\Core\\Plugin\\DefaultPluginManager;\n    ```", "```php\n    use Drupal\\Core\\Cache\\CacheBackendInterface;\n    ```", "```php\n    use Drupal\\Core\\Extension\\ModuleHandlerInterface;\n    ```", "```php\n    class GeoLocatorManager extends DefaultPluginManager {\n    ```", "```php\n      public function __construct(\n    ```", "```php\n        \\Traversable $namespaces,\n    ```", "```php\n        CacheBackendInterface $cache_backend,\n    ```", "```php\n        ModuleHandlerInterface\n    ```", "```php\n        $module_handler\n    ```", "```php\n      ) {\n    ```", "```php\n        parent::__construct(\n    ```", "```php\n          'Plugin/GeoLocator',\n    ```", "```php\n          $namespaces,\n    ```", "```php\n          $module_handler,\n    ```", "```php\n          'Drupal\\mymodule\\Plugin\\GeoLocator\n    ```", "```php\n            \\GeoLocatorInterface',\n    ```", "```php\n          'Drupal\\mymodule\\Annotation\\GeoLocator'\n    ```", "```php\n        );\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    services:\n    ```", "```php\n      plugin.manager.geolocator:\n    ```", "```php\n        class: Drupal\\mymodule\\GeoLocatorManager\n    ```", "```php\n        parent: default_plugin_manager\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Annotation;\n    ```", "```php\n    use Drupal\\Component\\Annotation\\Plugin;\n    ```", "```php\n    /**\n    ```", "```php\n     * @Annotation\n    ```", "```php\n     */\n    ```", "```php\n    class GeoLocator extends Plugin\n    ```", "```php\n    {\n    ```", "```php\n      /**\n    ```", "```php\n       * The human-readable name.\n    ```", "```php\n       *\n    ```", "```php\n       * @var \\Drupal\\Core\\Annotation\\Translation\n    ```", "```php\n       *\n    ```", "```php\n       * @ingroup plugin_translatable\n    ```", "```php\n       */\n    ```", "```php\n      public $label;\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\GeoLocator;\n    ```", "```php\n    use Symfony\\Component\\HttpFoundation\\Request;\n    ```", "```php\n    interface GeoLocatorInterface {\n    ```", "```php\n      /**\n    ```", "```php\n       * Get the plugin's label.\n    ```", "```php\n       *\n    ```", "```php\n       * @return string\n    ```", "```php\n       *   The geolocator label\n    ```", "```php\n       */\n    ```", "```php\n      public function label();\n    ```", "```php\n      /**\n    ```", "```php\n       * Performs geolocation on an address.\n    ```", "```php\n       *\n    ```", "```php\n       * @param Request $request\n    ```", "```php\n       *   The request.\n    ```", "```php\n       *\n    ```", "```php\n       * @return string|NULL\n    ```", "```php\n       *   The geolocated country code, or NULL if not\n    ```", "```php\n            found.\n    ```", "```php\n       */\n    ```", "```php\n      public function geolocate(Request $request):\n    ```", "```php\n        ?string;\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\GeoLocator;\n    ```", "```php\n    use Drupal\\Core\\Plugin\\PluginBase;\n    ```", "```php\n    use Symfony\\Component\\HttpFoundation\\Request;\n    ```", "```php\n    /**\n    ```", "```php\n     * @GeoLocator(\n    ```", "```php\n     *   id = \"cloudflare\",\n    ```", "```php\n     *   label = \"Cloudflare\"\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class Cloudflare extends PluginBase implements\n    ```", "```php\n        GeoLocatorInterface {\n    ```", "```php\n      public function label() {\n    ```", "```php\n        return $this->pluginDefinition['label'];\n    ```", "```php\n      }\n    ```", "```php\n      public function geolocate(Request $request): ?string {\n    ```", "```php\n        return $request->headers->get('CF-IPCountry');\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\GeoLocator;\n    ```", "```php\n    use Drupal\\Core\\Plugin\\PluginBase;\n    ```", "```php\n    use Symfony\\Component\\HttpFoundation\\Request;\n    ```", "```php\n    /**\n    ```", "```php\n     * @GeoLocator(\n    ```", "```php\n     *   id = \"cloudfront\",\n    ```", "```php\n     *   label = \"CloudFront\"\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class CloudFront extends PluginBase implements\n    ```", "```php\n        GeoLocatorInterface {\n    ```", "```php\n      public function label() {\n    ```", "```php\n        return $this->pluginDefinition['label'];\n    ```", "```php\n      }\n    ```", "```php\n      public function geolocate(Request $request): ?string {\n    ```", "```php\n        return $request->headers->get('CloudFront-Viewer-\n    ```", "```php\n            Country');\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\Plugin\\GeoLocator;\n    ```", "```php\n    use Drupal\\Core\\Plugin\\PluginBase;\n    ```", "```php\n    use Symfony\\Component\\HttpFoundation\\Request;\n    ```", "```php\n    /**\n    ```", "```php\n     * @GeoLocator(\n    ```", "```php\n     *   id = \"request_query\",\n    ```", "```php\n     *   label = \"Request query\"\n    ```", "```php\n     * )\n    ```", "```php\n     */\n    ```", "```php\n    class RequestQuery extends PluginBase implements\n    ```", "```php\n        GeoLocatorInterface {\n    ```", "```php\n      public function label() {\n    ```", "```php\n        return $this->pluginDefinition['label'];\n    ```", "```php\n      }\n    ```", "```php\n      public function geolocate(Request $request): ?string {\n    ```", "```php\n        return $request->query->get('countryCode');\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    /**\n    ```", "```php\n     * Implements hook_page_top().\n    ```", "```php\n     */\n    ```", "```php\n    function mymodule_page_top() {\n    ```", "```php\n      $request = \\Drupal::request();\n    ```", "```php\n      /** @var \\Drupal\\mymodule\\GeoLocatorManager $manager\n    ```", "```php\n        */\n    ```", "```php\n      $manager = \\Drupal::service\n    ```", "```php\n        ('plugin.manager.geolocator');\n    ```", "```php\n      foreach ($manager->getDefinitions() as $plugin_id =>\n    ```", "```php\n        $definition) {\n    ```", "```php\n        /** @var \\Drupal\\mymodule\\Plugin\\GeoLocator\n    ```", "```php\n            \\GeoLocatorInterface */\n    ```", "```php\n        $instance = $manager->createInstance($plugin_id);\n    ```", "```php\n        $country_code = $instance->geolocate($request);\n    ```", "```php\n        if ($country_code) {\n    ```", "```php\n          \\Drupal::messenger()->addStatus(\"Country:\n    ```", "```php\n            $country_code\");\n    ```", "```php\n          break;\n    ```", "```php\n        }\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n  public function __construct(\n    \\Traversable $namespaces,\n    CacheBackendInterface $cache_backend,\n    ModuleHandlerInterface\n    $module_handler\n  ) {\n    parent::__construct(\n      'Plugin/GeoLocator',\n      $namespaces,\n      $module_handler,\n      'Drupal\\mymodule\\Plugin\\GeoLocator\n        \\GeoLocatorInterface',\n      'Drupal\\mymodule\\Annotation\\GeoLocator'\n    );\n    // Specify the alter hook.\n    $this->alterInfo('geolocator_info');\n  }\n```", "```php\n$this->setCacheBackend($cache_backend,\n    'geolocator_plugins');\n```"]