- en: Chapter 9. Extending the Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Using CodeIgniter Sparks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating PDFs with the DOMPDF Spark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Hooks in CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearing dead sessions from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending your controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading a file with FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your own configuration files and using the settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating libraries and giving them access to CodeIgniter resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the language class – switching languages on the go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter does pretty much most of what you need it to do right out of the
    box; but there are going to be times when you have to extend or alter the standard
    setup—whether it's creating Hooks so you don't have to hack the core (you really
    don't want to hack the core), or installing Sparks to add extra functionality
    and scope for new features—there are many ways to extend and build on CodeIgniter
    to get more out of it.
  prefs: []
  type: TYPE_NORMAL
- en: Using CodeIgniter Sparks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not too long ago, if you wanted to install an extension or some external software
    for CodeIgniter, you had to hunt it down. You'd need to search for what you were
    looking for on the Internet and if you were lucky, you would find a blog or someone's
    personal site, perhaps even a GitHub account or Google code repository where you
    could download and install a package. Sometimes it worked, sometimes it didn't
    and whatever you downloaded it almost always needed some level of editing or re-writing.
  prefs: []
  type: TYPE_NORMAL
- en: Fast forward to, now! Thankfully, we have Sparks. Think of Sparks as extensions
    you can use with CodeIgniter. They're kept in one place (so you don't have to
    hunt them down across the Internet) at [http://www.getsparks.org](http://www.getsparks.org).
  prefs: []
  type: TYPE_NORMAL
- en: We touched on Sparks in [Chapter 1](ch01.html "Chapter 1. CodeIgniter Basics"),
    *CodeIgniter Basics*, however, let's go into more detail and get you to install
    and use a couple of Sparks which I have found useful over time.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you haven't installed it until now, install Sparks in your CodeIgniter
    instance. Either go to [Chapter 1](ch01.html "Chapter 1. CodeIgniter Basics"),
    *CodeIgniter Basics*, for instructions on how to do this, or follow the instructions
    on the GetSparks website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you need to navigate to the top level (or root) of your CodeIgniter directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using MAC or Linux, download CodeIgniter Sparks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the command line, navigate to the root of your CodeIgniter application,
    and type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will download and install CodeIgniter Sparks to your specific CodeIgniter
    instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you are using Windows, then you will need to download Sparks and unpack
    manually. To do follow these instructions or check out the instructions on the
    GetSparks website for the latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder named `tools` in the top level (root) of your CodeIgniter directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the following URL: [http://getsparks.org/install](http://getsparks.org/install).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Normal Installation** section and download the Sparks package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unpack the download into the `tools` folder you created in step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the `Loader` class extension from: [http://getsparks.org/static/install/MY_Loader.php.txt](http://getsparks.org/static/install/MY_Loader.php.txt).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `MY_Loader.php.txt` file, to `MY_Loader.php`, and move it to the
    `application/core/MY_Loader.php` directory in your CodeIgniter application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sparks is downloaded to the `/path/to/codeigniter/tools` folder of your CodeIgniter
    instance ready for use. You can install any Spark you wish by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `[version]` is the specific version of the Spark. It is optional, and
    if you omit it, Sparks will automatically select the latest version. `spark-name`
    is the name of the Spark you wish to download.
  prefs: []
  type: TYPE_NORMAL
- en: Creating PDFs with the DOMPDF Spark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DOMPDF Spark is a great bit of kit; it's simple to set up and can handle
    most things. It works by grabbing the output of a HTML template file (which you
    previously created)—you can pass variables to the HTML just as you would with
    a normal view file—and DOMPDF will create a PDF file from that formatted HTML
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As this recipe requires the DOMPDF Spark, we''ll need to install that into
    our CodeIgniter instance before we do anything else. To install it, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Grab the DOMPDF Spark from [getsparks.org](http://getsparks.org) and install
    it. Open a terminal window, navigate to your CodeIgniter application directory,
    and type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That will download the DOMPDF Spark. The DOMPDF Spark may have been downloaded,
    but you'll need to do some installation to get it going.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `/path/to/codeigniter/sparks/dompdf/[version-number]/helpers` folder
    (where `[version-number]` is the version of the Spark), there is a folder and
    a file. These are as follows (in bold):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/sparks/dompdf/0.5.3/helpers/dompdf/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/sparks/dompdf/0.5.3/helpers/dompdf_helper.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy this folder and file into the `helpers` folder of your CodeIgniter application
    (`/path/to/codeigniter/application/helpers`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''re also going to need a database table in order for our model to work,
    so go ahead, and type the following code into your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/makepdf.php`: This controller
    will load the DOMPDF extension and output our PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/makepdf_model.php`: We''ll use this
    model to get information from the database that is necessary to pass to the view
    file `view_all_users`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/makepdf/view_all_users.php`: This file
    contains the HTML and markup for how we wish the PDF to look. It also contains
    some PHP code, which echoes out some data gathered from the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First add the following code to the `makepdf` controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add the following code to the `makepdf_model` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following code to the `makepdf/view_all_users.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the constructor of our `makepdf` controller, we load the `dompdf` helper.
    We place the `dompdf_helper.php` file and the `dompdf` folder in the `helpers`
    folder of our CodeIgniter application installed earlier on in the *Getting ready*
    section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '`private function index()` then calls the `Makepdf_model` function, `get_all_users()`.
    This model function runs a simple select operation on the users table and stores
    it in the `$data[''query'']` array, we will come back to this in a moment. The
    `$filename` variable is assigned the string `List-of-users`, but if you wanted,
    you could change this to anything you wanted, you can even add today''s date if
    required, which would look like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Anyway, back to the story. We then use the standard CodeIgniter method a view
    file and pass the `$data` array to it: $html = $this->load->view(''makepdf/view_all_users'',
    $data, true). Remember this `$data` array contains our database query of users.
    Instead of letting CodeIgniter render the view as it would normally, we catch
    the now processed HTML to a `$html` variable, which is passed to the `dompdf`
    function, `pdf_createalong`, with the `$filename` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: If you load the controller in your browser, you should automatically be prompted
    to download the PDF.
  prefs: []
  type: TYPE_NORMAL
- en: You can see how this can easily be adapted to output a wide and varied HTML
    designs, from invoices to, purchase orders to, address contacts. Just amend the
    model query to pull out what you need to know from the database and alter the
    HTML to display that information, and there you go.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Hooks in CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There you are, quite happily using some framework or CMS to run a website, and
    you've just been asked to get it to do something which it was not originally designed.
    You begrudgingly agreed and start to work out how to implement what's been asked.
    You decide that you'll amend the core system files of whatever platform you've
    been stuck with because it's quick and easy, and because your boss used terms
    such as "quick wins" and "cost efficient".
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, the requested functionality works and everyone's happy—except the poor
    person (that may still be you) who comes along a few months later to upgrade the
    platform to the latest version and…*BANG*! That amendment you made to the system
    core, forget it! It's been lost by overwriting it with the new files from the
    upgrade. Now, that crazy thing you were asked to implement no longer works and
    you're left trying to remember what you did to get it working. Then before anyone
    notices, it's missing, and you're left thinking. "oh God why can't I just go home!"
  prefs: []
  type: TYPE_NORMAL
- en: Well cheer up! You're using CodeIgniter and that should never happen to you
    (providing you use Hooks of course). You can still hack the core if you wish—go
    ahead, hack away, see if I care—but you'll kick yourself when you have to upgrade.
    I'm only thinking about your stress levels.
  prefs: []
  type: TYPE_NORMAL
- en: Hooks allow you to override the behavior of CodeIgniter at specific points at
    its execution without the need to make changes to the CodeIgniter core files.
    Fantastic! That means that with CodeIgniter, you can implement any number of ludicrous
    management change requests and it won't affect you on upgrade day one bit. Hooks
    work in a specific order. What does that mean? Well, it means that CodeIgniter
    works in a specific order, that is to say, when CodeIgniter runs, it loads specific
    parts of itself in a set order. This order is always the same, and you can set
    a Hook to execute at any one of the steps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you need to tell CodeIgniter that it should allow Hooks to run. Open
    the `/application/config/config.php` file and ensure that the setting for `enable_hooks`
    is `TRUE`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll also have to decide the best time for your Hook to run. There are seven
    points in the execution of CodeIgniter where you can set your Hook to run, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pre_system`: This is the earliest place you can set a Hook to run. Only Benchmarking
    and Hooks are brought into play at this stage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pre_controller`: This is executed before any of your controllers are called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post_controller_constructor`: This makes your Hooks run after a controller
    constructor but before any controller functions are called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post_controller`: This makes your Hook run after the controller has finished
    executing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display_override`: This will override the CodeIgniter `display()` function--this
    is when CodeIgniter tried to render view files or other output to screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_override`: This overrides the `_display_cache()` function,you can use
    this if you wanted to implement custom caching functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post_system`: This is to be called once the normal operation has finished
    (that is, after the system has finished its execution of the current request)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Define an execution point for your hook. Once you've decided the point to run
    your Hook, you'll need to tell CodeIgniter when to run the hook. You do this,
    by defining the correct information in the `$hook` array in the `config/hooks.php`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The key of the `$hook` array specifies the execution point --that is when you
    want the hook to run (see the list mentioned in the Getting ready section of this
    recipe). In the following example, the array key is `post_controller`, which means
    that the hook is executed after the controller has finished executing. The `$hook`
    array now looks like the following.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So what does all the preceding code mean then? Let'' have a look at the following
    table to understand the preceding code better:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Array element | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `class` | It is the name of the class, which is in the file defined in the
    `filename` element. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `function` | It is the name of the function in the class. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `filename` | It is the name of the file which contains the class. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `filepath` | This is the location of the file defined in the array element
    `filename`, normally the folder `hooks`, but you can add subfolders or move it
    to a different location if you wish. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `params` | They are any arguments you wish to pass to the `function` element
    of your `Hook` class. Separate each argument by a comma. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'You then need to create your hook class, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You put the code for your hook in this class, obviously change `Class_name`
    to something more useful for you, and the function `function_name()` is obviously
    an example--change this name too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Should you need to gain access to CodeIgniter resources in your hook, you can
    do so by accessing the main CodeIgniter object, using the CodeIgniter get_instance()
    function shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, `thing_to_load` is the name of your model, or library, and so on. There
    you have it--hooks are simple really, decide on an execution point, create a class
    to contain the code for your hook, and away you go!
  prefs: []
  type: TYPE_NORMAL
- en: Clearing dead sessions from the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have found that CodeIgniter sometimes does not successfully remove sessions
    from the sessions table in the database. Unused sessions are instead cleared of
    their `user_data field`, but that the row remains in the sessions table.
  prefs: []
  type: TYPE_NORMAL
- en: I have often had to write specific database queries to clear sessions. I usually
    put these queries in the `My_Controller` class(refer to the *Extending your controllers*
    recipe in this chapter); however, I have recently begun to use Hooks to perform
    this. Then it's always working in the background and I don't need to think about
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to amend the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/config/config.php`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/application/config/config.php` file and ensure that the setting
    for `enable_hooks` is `TRUE`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going create and amend the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/hooks/clear_sessions.php`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the preceding file and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We're using the default CodeIgniter sessions table name, that is, `ci_sessions`.
    In your application, you'll need to substitute this value with the name of your
    sessions table (assuming you've changed it from `ci_sessions`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `/path/to/codeigniter/application/config/hooks.php` file and add the
    following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have defined a class (`Clear_sessions`) in the `clear_sessions.php` file
    into which we''ll put all the logic we need for the Hook to perform its task.
    Within that class, we have the `clear_now()` function. CodeIgniter knows that
    it is to run the `clear_now()` function, in the `Clear_sessions` class, in the
    `clear_sessions.php` file, because we defined this in the `hooks.php config` file,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We told CodeIgniter the location of the `clear_sessions.php` file with the `filepath`
    element of the preceding array. CodeIgniter will run this Hook at the `post_controller`
    stage of execution, that is to say, after a controller has been run. So, that's
    how CodeIgniter knows what hook to execute and when; but what of the function
    of the hook? What does that do?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us access to the main CodeIgniter object, which is defined as `$CI`
    (for CodeIgniter). Using this object, we have access to the database functions
    and settings. We''ll use this `$CI` object to run a database query, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code line deletes any sessions from the table (named here as the
    default CodeIgniter sessions table ci_sessions) whose `user_data` is empty (*not*
    not null just empty).
  prefs: []
  type: TYPE_NORMAL
- en: All spent sessions that CodeIgniter hasn't cleaned up properly should now be
    gone from the sessions table, leaving active sessions alone.
  prefs: []
  type: TYPE_NORMAL
- en: Extending your controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inheritance is a wonderful thing; allowing you to define conceptual layers,
    or levels within an application, that is, allowing child classes to share traits
    and attributes of parent classes allows applications to model real-world examples
    more accurately and intuitively than standard procedural programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'In CodeIgniter, the default design structure for your application is that the
    controller you create extends the main CodeIgniter controller. For example, in
    the following code, we have a `Signin` controller, which extends the main CodeIgniter
    controller, `CI_Controller`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `Signin` controller will inherit the properties of the `CI_Controller`.
    However, CodeIgniter also allows you to parachute in a stage between the `CI_Controller`
    and the controller you create, you can slot in a middle layer. This middle step
    is named `My_Controller`. The new MY_Controller will extend the CI_Controller
    (inheriting everything as it goes) and any normal application-specific controller
    you create (users, login, invoice, and so on) will inherit from the new MY_Controller.
    It is defined as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your `Signin` class must be amended to inherit from your `MY_Controller`
    rather than CodeIgniter''s `CI_Controller` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/core/MY_Controller.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/days.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/core/MY_Controller.php` file and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `/path/to/codeigniter/application/controllers/days.php` file
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is mostly Inheritance. Your child classes are inheriting attributes from
    parent classes. However, specifically here, we are demonstrating how to load the
    array helper in the `MY_Controller class` and have the `Days` controller inherit
    the helper resource in order to execute the array helper function, `random_element()`.
  prefs: []
  type: TYPE_NORMAL
- en: There are so many uses for this, for example, you could check to see if the
    user was logged in your `MY_Controller Class`, this would mean that you would
    only have to write this once rather than in every controller. Or you could go
    further and have an authenticated controller and unauthenticated controller extending
    `MY_Controller`. The `MY_Controller` file would call any files and perform any
    tasks common to authenticated and unauthenticated users, While, the authenticated
    controller would perform login checks, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a file with FTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every now and again, you'll be asked to generate a file—perhaps from a database
    export, or maybe some system logs. Most of the time, you'll be asked to e-mail
    that file to some location, but sometimes, you'll be asked to upload it to an
    FTP folder the client has access to. We're going to take a recipe from a previous
    chapter (*Generating a CSV from a database result* from [Chapter 6](ch06.html
    "Chapter 6. Working with Databases"), *Working with Databases*), and adapt it
    so that it uploads to an FTP location rather than stream an output.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to be pulling some values from a database. To do that, we''ll
    need a table to pull data from. The following is the schema for that table. Copy
    the following into your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to [Chapter 6](ch06.html "Chapter 6. Working with Databases"), *Working with
    Databases*, and copy out the code from the *Generating a CSV from a database result*
    recipe; then return here for further instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to amend one file from the *Generating a CSV from a database result*
    recipe, that is, `/path/to/codeigniter/application/controllers/export.php`. This
    is the export controller from [Chapter 6](ch06.html "Chapter 6. Working with Databases"),
    *Working with Databases*. We're going to use it as the basis for this recipe.
    It will grab some data from the database that eventually generates a CSV for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `export.php` for editing and amend it to reflect the following code snippet
    (changes are highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There are some variables here that you should change to reflect the settings
    of your FTP environment such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '...and the string `dir_on_ftp` in:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you would expect from a new recipe, there are some changes in the normal
    export controller that we've used in [Chapter 6](ch06.html "Chapter 6. Working
    with Databases"), *Working with Databases*. These changes are necessary to support
    the FTP helper in its job of uploading a file to an FTP server. Let's take a look
    at what's going on.
  prefs: []
  type: TYPE_NORMAL
- en: First, we load the helpers we'll need--url, file, and FTP--in the Exporter controllers
    constructor to ensure that this export controller has the right support necessary
    to make the file transfer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Everything then follows the functionality of the previous controller (from [Chapter
    6](ch06.html "Chapter 6. Working with Databases"), *Working with Databases*) ,that
    is, fetching a result set from the database table and using the CodeIgniter `dbutil`
    function, `csv_from_result()`, to generate a file for us. It's placed on the server
    by `write_file()` using the location defined in `$path`.
  prefs: []
  type: TYPE_NORMAL
- en: Then the FTP functionality kicks in. We define the login settings for the FTP
    server we want to write the file to--you can and probably should put these in
    your own config file (also explained in this chapter, see the *Making your own
    configuration files and using the settings* recipe), but for now, we'll define
    them here as it's easier to explain one thing at a time. The settings are fairly
    obvious until you see the `$config['debug']` array setting. `debug` allows error
    reports to be displayed to you, the developer. Obviously, in a live production
    environment, you definitely want that set to be `FALSE` to prevent any sensitive
    and important information being shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyways, using the login settings that we have defined in our `$config` array,
    we attempt to connect to the FTP server and try to upload a file, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, the file should be uploaded to your server. Log in with an
    FTP client and take a look to see if it''s there--if it''s not check that you''re
    using the correct FTP settings and that the path you''re writing to on the FTP
    server is writable and actually exists, that is, that the path defined here in
    bold exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'An interesting point is the two function arguments at the end of the preceding
    `upload()` function: `ascii` and `0755`. These state that we''re encoding the
    file transfer as `ascii` (which is plain text) and setting its file permissions
    to `0755`. This can also be defined in the config array if you wish.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating libraries and giving them access to CodeIgniter resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CodeIgniter allows you to create your own libraries and helpers in circumstances
    where you don''t want or need to place code in controllers or models. Why would
    you place code in a library and not a helper? Well, some people become quite agitated
    by the reasoning for this and I''m sure that if you thought hard enough about
    it, you could come up with some strict rules that defines when a bit of code is
    a helper or a library. But life is far too short. As long as the code is well
    documented and is maintainable, stable, and secure, you can do whatever you like.
    However, as a general rule of thumb:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A library is for code which requires access to other resources, such as needing
    access to a database, or to an external system (perhaps through cURL), whereas
    a helper is a smaller bit of code which performs a specific task (such as checking
    a string being a valid e-mail or* for a valid *URL, for example).*'
  prefs: []
  type: TYPE_NORMAL
- en: I'm sure there are better definitions, but this one works for me; and I'm sure
    there will be times when you may want a helper to have access to a database or
    other resource; and I'm sure there will be times when a library doesn't need access
    to these resources. My point is, just make sure the code is documented and maintainable
    and don't get bogged down in conceptual design augments.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, let's look at creating a library and giving it access to CodeIgniter
    resources (because, by default, it won't).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to access a database through a library; however, to do that we''ll
    need a database to access (of course), so copy the following code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/call_lib.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/libraries/lib_to_call.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/lib_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `call_lib.php` controller and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `lib_to_call.php` library and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create the `lib_model.php` model and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In looking at how to give your libraries access to CodeIgniter resources, we're
    going to run through the preceding recipe. It's connecting to a model; however,
    it can be any type of CodeIgniter resource such as a Hook or a helper, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the `call_lib.php` controller loads in its constructor the `lib_to_call`
    library, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This makes the library available to the entire controller.
  prefs: []
  type: TYPE_NORMAL
- en: We then call `public function index()`, which calls the library function, `get_users()`,
    storing the returned results in the `$result` variable. Let's look at what the
    library function, `get_users()`, is doing, this is where we allow the library
    to get access to CodeIgniter resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following highlighted lines in the `lib_to_call` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re using the PHP function, `get_instance()`, to get our hands on a copy
    by reference (that means we''re using the initial object rather than a copy of
    it) or the CodeIgniter object. This object has access to the entire CodeIgniter
    system and its resources. We store this object in a local variable named `$CI`
    (standing for CodeIgniter). We can now call any CodeIgniter resource we like,
    just as we would from a controller, except that instead of using `$this` (as we
    would in a controller), we use `$CI`. So, to call a model or helper in a controller,
    we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'But to call helpers and models in the library, we now do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The model we''ve now loaded will query the database with Active Record, returning
    all rows in the table to the library, which in turn returns it to the controller
    for processing. In this case (to demonstrate that it worked), we `var_dump()`
    the result. If all goes well, this recipe should output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding recipe access a database as a means of demonstrating how to gain
    access to a CodeIgniter super object from within a library. However, helpers,
    Hooks, and other elements can also be accessed. By using `$CI =& get_instance()`,
    we can gain access to the main CodeIgniter object. By using `$CI` rather than
    `$this`, this will give us access to all of CodeIgniter''s resources, as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Making your own configuration files and using the settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's a great idea to have configuration settings in the same file—the benefits
    are obvious—so rather than having settings hidden in controllers, modules, helpers,
    libraries, or (God forbid) in views, you can put them in one location and refer
    to them from there. CodeIgniter comes with its own configuration files in the
    `config` folder; however, you can add your own files to the `config` folder and
    refer to them in your code. It's pretty handy and easy to do; let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/config_settings.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/config/my_config_file.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `config_settings.php` controller, open it for editing, and add the
    following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the config file, `my_config_file.php`, open it for editing, and add
    the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be honest, there are so many situations where putting information in a config
    file is useful that make it pointless writing a specific recipe for you, as the
    chances of it being the recipe you need are slim to none. So, this is just a proof
    of concept; it is there for you as a guide of the basic two files: a config file
    and another file (a controller) to grab information from it.'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the constructor in the controller, `Config_settings`. This is
    where we define the name of the config file. You can call it whatever you like
    (as long as the name isn't already taken by another config file). Here, I've called
    it `my_config_file`; it's a bit 1995, but it's good enough for the explanation
    and I'm sure you get the idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing to happen is that `public function index()` is executed, which
    does two things: prints out a string of text (the text is set in our config file)
    and iterates through a `for()` loop, only stopping when it reaches the value specified
    in our `my_config_file`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These two approaches show you how to work with config values: either echoing
    out to screen or using that value in some sort of structure.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the language class – switching language on the go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have developed your site to accommodate multiple languages, you'll
    obviously want to allow people to switch between them. For example, to switch
    from English to French, or French to German, or whatever region or language you're
    developing for. This can be handled in several ways, but in this example, we're
    going to use the CodeIgniter `Session` class to swap from one language to another.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to use the `Session` class to store the user's language preference,
    which means, we'll need to use CodeIgniter sessions. This will require some configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be editing the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/config/config.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/config/database.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the config settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the following config values in the `path/to/codeigniter/application/config/config.php`
    file and amend them to reflect the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Config Item | Data Type | Change to Value | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_cookie_name'']` | `String` | `ci_session` | This is the name
    of the cookie written to the user''s computer. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_expiration'']` | `Integer` | `7200` | This is the number
    of seconds a session should remain active, after no user activity, before becoming
    void. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_expire_on_close'']` | `Boolean (True/False)` | `TRUE` | This
    specifies that if the user closes their browser the session becomes void. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_encrypt_cookie'']` | `Boolean (True/False)` | `TRUE` | This
    specifies if the cookie should be encrypted on the user''s computer. For security
    purposes this should be set to `TRUE`. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_use_database'']` | `Boolean (True/False)` | `TRUE` | This
    specifies weather or not to store sessions in the database. For security purposes
    this should be set to `TRUE`. You will also need to create the session table,
    the code for which can be found in the upcoming page. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_table_name'']` | `String` | `sessions` | This specifies the
    name of the database table used to store session data. In this recipe, I have
    called the sessions table simple sessions; however, you can keep the original
    i_sessions--just make sure you amend the SQL accordingly. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_match_ip'']` | `Boolean (True/False)` | `TRUE` | This specifies
    whether CodeIgniter should monitor the IP address of requests and against that
    of the `session_id`. If the IP of an incoming request doesn''t match the previous
    values, the session is disallowed. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_match_useragent'']` | `Boolean (True/False)` | `TRUE` | This
    specifies whether CodeIgniter should monitor the user agent address of requests
    and against that of the `session_id`. If the user agent of an incoming request
    doesn''t match the previous values, the session is disallowed. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Find the following config values in the `path/to/codeigniter/application/config/database.php`
    file and amend them to reflect the correct settings to enable you to connect to
    your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Config Item | Data Type | Change to Value | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$db[''default''][''hostname'']` | `String` | `localhost` | The hostname
    of your database. This is usually either `localhost` or an IP address |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$db[''default''][''username'']` | `String` |   | The username you wish to
    use to connect to your database |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$db[''default''][''password'']` | `String` |   | The password used to connect
    to your database |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$db[''default''][''database'']` | `String` |   | The name of the database
    which you wish to connect to |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'We will be storing the user''s language preference in the session, and the
    sessions are stored in the database table, `sessions`. The following is the schema
    for the sessions table. Using a method of your choice (command line, `phpMyAdmin`,
    and so on), enter the following MySQL schema into your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following language file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/french/fr_lang.php`'
  prefs: []
  type: TYPE_NORMAL
- en: '...and amend the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/lang.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/lang/lang.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amend `/path/to/codeigniter/application/controllers/lang.php` to reflect the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend `/path/to/codeigniter/application/views/lang/lang.php` to reflect the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code into the `/path/to/codeigniter/application/system/language/french/fr_lang.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following code into the `/path/to/codeigniter/application/system/language/engligh/en_lang.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is an extension of the earlier language recipe. The only thing we're doing
    different is adding support for switching values in `$this->lang->load('', '');`.
    We're using CodeIgniter's session functionality to store the switched values.
    Thus, as we're passing the required language as a value in the URL, we'll want
    to use the CodeIgniter security method, `xss_clean()`, to mitigate against cross-site
    scripting.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the constructor, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This will look to see whether there are any language variables set in a session.
    If there are not, we define the language in the `$change_lang` array and pass
    it to the `$this->lang->load('''', '''');` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: From there, `public function index()` is loaded and immediately redirects to
    `public function submit()`, which displays the HTML form.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve amended the HTML form, adding the following two anchor tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: If a user clicks on either one of these links (French or English) in their browser,
    `public function change_language()` is run. We then grab and sanitize the third
    parameter of the URL with `$lang = xss_clean($this->uri->segment(3));` and pass
    it through a PHP Switch/Case statement, looking for either `en` or `fr`, assigning
    the `$language` and `$filename` variables as we go with the correct details (the
    default loads English).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we load the `$language` and `$filename` variables into the `$change_lang`
    array and write to the session with `$this->session->set_userdata($change_lang);`.
    We finish by redirecting back to `public function index()`, which will send us
    back to the beginning with a new language loaded.
  prefs: []
  type: TYPE_NORMAL
