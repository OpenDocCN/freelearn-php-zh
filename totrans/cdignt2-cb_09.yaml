- en: Chapter 9. Extending the Core
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章. 扩展核心
- en: 'In this chapter, you will learn:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Using CodeIgniter Sparks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter Sparks
- en: Creating PDFs with the DOMPDF Spark
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 DOMPDF Spark 创建 PDF
- en: Creating Hooks in CodeIgniter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CodeIgniter 中创建钩子
- en: Clearing dead sessions from the database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中清除无效会话
- en: Extending your controllers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展你的控制器
- en: Uploading a file with FTP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FTP 上传文件
- en: Making your own configuration files and using the settings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自己的配置文件并使用设置
- en: Creating libraries and giving them access to CodeIgniter resources
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建库并为它们提供对 CodeIgniter 资源的访问
- en: Using the language class – switching languages on the go
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用语言类 – 在路上切换语言
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: CodeIgniter does pretty much most of what you need it to do right out of the
    box; but there are going to be times when you have to extend or alter the standard
    setup—whether it's creating Hooks so you don't have to hack the core (you really
    don't want to hack the core), or installing Sparks to add extra functionality
    and scope for new features—there are many ways to extend and build on CodeIgniter
    to get more out of it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter 几乎可以做到你需要的所有事情，直接从盒子里出来；但总会有时候你必须扩展或更改标准设置——无论是创建钩子以便你不必修改核心（你真的不想修改核心），还是安装
    Sparks 以添加额外的功能和新特性——有许多方法可以扩展和构建 CodeIgniter 以获得更多功能。
- en: Using CodeIgniter Sparks
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter Sparks
- en: Not too long ago, if you wanted to install an extension or some external software
    for CodeIgniter, you had to hunt it down. You'd need to search for what you were
    looking for on the Internet and if you were lucky, you would find a blog or someone's
    personal site, perhaps even a GitHub account or Google code repository where you
    could download and install a package. Sometimes it worked, sometimes it didn't
    and whatever you downloaded it almost always needed some level of editing or re-writing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不久以前，如果你想为 CodeIgniter 安装一个扩展或一些外部软件，你必须四处寻找。你需要在互联网上搜索你想要的东西，如果你很幸运，你可能会找到一个博客或某个人的个人网站，也许甚至是一个
    GitHub 账户或 Google 代码仓库，你可以从中下载并安装一个包。有时它有效，有时则无效，而且你下载的几乎总是需要某种程度的编辑或重写。
- en: Fast forward to, now! Thankfully, we have Sparks. Think of Sparks as extensions
    you can use with CodeIgniter. They're kept in one place (so you don't have to
    hunt them down across the Internet) at [http://www.getsparks.org](http://www.getsparks.org).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 快进到现在！幸运的是，我们有 Sparks。将 Sparks 视为可以与 CodeIgniter 一起使用的扩展。它们被保存在一个地方（这样你就不必在互联网上四处寻找），在
    [http://www.getsparks.org](http://www.getsparks.org)。
- en: We touched on Sparks in [Chapter 1](ch01.html "Chapter 1. CodeIgniter Basics"),
    *CodeIgniter Basics*, however, let's go into more detail and get you to install
    and use a couple of Sparks which I have found useful over time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 1 章](ch01.html "第 1 章. CodeIgniter 基础")，*CodeIgniter 基础*中提到了 Sparks，但是，让我们更深入地探讨，并指导你安装和使用一些我在一段时间内发现很有用的
    Sparks。
- en: So, if you haven't installed it until now, install Sparks in your CodeIgniter
    instance. Either go to [Chapter 1](ch01.html "Chapter 1. CodeIgniter Basics"),
    *CodeIgniter Basics*, for instructions on how to do this, or follow the instructions
    on the GetSparks website.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你之前还没有安装它，现在就在你的 CodeIgniter 实例中安装 Sparks。你可以前往[第 1 章](ch01.html "第 1 章.
    CodeIgniter 基础")，*CodeIgniter 基础*，获取如何操作的说明，或者查看 GetSparks 网站上的说明。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, you need to navigate to the top level (or root) of your CodeIgniter directory.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要导航到你的 CodeIgniter 目录的顶级（或根）目录。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'If you are using MAC or Linux, download CodeIgniter Sparks as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 MAC 或 Linux，按照以下方式下载 CodeIgniter Sparks：
- en: 'On the command line, navigate to the root of your CodeIgniter application,
    and type:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，导航到你的 CodeIgniter 应用程序的根目录，然后输入：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will download and install CodeIgniter Sparks to your specific CodeIgniter
    instance.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将下载并安装 CodeIgniter Sparks 到你的特定 CodeIgniter 实例。
- en: 'If you are using Windows, then you will need to download Sparks and unpack
    manually. To do follow these instructions or check out the instructions on the
    GetSparks website for the latest version:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows，那么你需要手动下载并解压 Sparks。请按照以下说明操作，或者查看 GetSparks 网站上的说明以获取最新版本：
- en: Create a folder named `tools` in the top level (root) of your CodeIgniter directory.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 CodeIgniter 目录的顶级（根）目录下创建一个名为 `tools` 的文件夹。
- en: 'Go to the following URL: [http://getsparks.org/install](http://getsparks.org/install).'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问以下 URL：[http://getsparks.org/install](http://getsparks.org/install)。
- en: Go to the **Normal Installation** section and download the Sparks package.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**常规安装**部分，下载 Sparks 包。
- en: Unpack the download into the `tools` folder you created in step 1.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的内容解压到你在第一步中创建的 `tools` 文件夹中。
- en: 'Download the `Loader` class extension from: [http://getsparks.org/static/install/MY_Loader.php.txt](http://getsparks.org/static/install/MY_Loader.php.txt).'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载 `Loader` 类扩展：[http://getsparks.org/static/install/MY_Loader.php.txt](http://getsparks.org/static/install/MY_Loader.php.txt)。
- en: Rename the `MY_Loader.php.txt` file, to `MY_Loader.php`, and move it to the
    `application/core/MY_Loader.php` directory in your CodeIgniter application.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `MY_Loader.php.txt` 文件重命名为 `MY_Loader.php`，并将其移动到你的 CodeIgniter 应用程序的 `application/core/MY_Loader.php`
    目录中。
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Sparks is downloaded to the `/path/to/codeigniter/tools` folder of your CodeIgniter
    instance ready for use. You can install any Spark you wish by issuing the following
    command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Sparks 已下载到你的 CodeIgniter 实例的 `/path/to/codeigniter/tools` 文件夹中，准备使用。你可以通过以下命令安装任何你想要的
    Spark：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `[version]` is the specific version of the Spark. It is optional, and
    if you omit it, Sparks will automatically select the latest version. `spark-name`
    is the name of the Spark you wish to download.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`[version]` 是 Spark 的特定版本。它是可选的，如果你省略它，Sparks 将自动选择最新版本。`spark-name` 是你想要下载的
    Spark 的名称。
- en: Creating PDFs with the DOMPDF Spark
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 DOMPDF Spark 创建 PDF
- en: The DOMPDF Spark is a great bit of kit; it's simple to set up and can handle
    most things. It works by grabbing the output of a HTML template file (which you
    previously created)—you can pass variables to the HTML just as you would with
    a normal view file—and DOMPDF will create a PDF file from that formatted HTML
    code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: DOMPDF Spark 是一个非常好的工具；它设置简单，可以处理大多数事情。它通过获取 HTML 模板文件的输出（你之前创建的）来工作——你可以像使用普通视图文件一样向
    HTML 传递变量——DOMPDF 将从格式化的 HTML 代码创建一个 PDF 文件。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'As this recipe requires the DOMPDF Spark, we''ll need to install that into
    our CodeIgniter instance before we do anything else. To install it, perform the
    following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个菜谱需要 DOMPDF Spark，我们在做其他任何事情之前需要将其安装到我们的 CodeIgniter 实例中。要安装它，请执行以下步骤：
- en: 'Grab the DOMPDF Spark from [getsparks.org](http://getsparks.org) and install
    it. Open a terminal window, navigate to your CodeIgniter application directory,
    and type the following code:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [getsparks.org](http://getsparks.org) 获取 DOMPDF Spark 并安装它。打开一个终端窗口，导航到你的
    CodeIgniter 应用程序目录，并输入以下代码：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That will download the DOMPDF Spark. The DOMPDF Spark may have been downloaded,
    but you'll need to do some installation to get it going.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将下载 DOMPDF Spark。DOMPDF Spark 可能已经被下载，但你需要做一些安装才能使其运行。
- en: 'In the `/path/to/codeigniter/sparks/dompdf/[version-number]/helpers` folder
    (where `[version-number]` is the version of the Spark), there is a folder and
    a file. These are as follows (in bold):'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `/path/to/codeigniter/sparks/dompdf/[version-number]/helpers` 文件夹中（其中 `[version-number]`
    是 Spark 的版本），有一个文件夹和一个文件。具体如下（加粗）：
- en: '`/path/to/codeigniter/sparks/dompdf/0.5.3/helpers/dompdf/`'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/sparks/dompdf/0.5.3/helpers/dompdf/`'
- en: '`/path/to/codeigniter/sparks/dompdf/0.5.3/helpers/dompdf_helper.php`'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/sparks/dompdf/0.5.3/helpers/dompdf_helper.php`'
- en: Copy this folder and file into the `helpers` folder of your CodeIgniter application
    (`/path/to/codeigniter/application/helpers`).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件夹和文件复制到你的 CodeIgniter 应用程序的 `helpers` 文件夹中（`/path/to/codeigniter/application/helpers`）。
- en: 'We''re also going to need a database table in order for our model to work,
    so go ahead, and type the following code into your database:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要一个数据库表，以便我们的模型能够工作，所以请继续，并在你的数据库中输入以下代码：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following three files:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下三个文件：
- en: '`/path/to/codeigniter/application/controllers/makepdf.php`: This controller
    will load the DOMPDF extension and output our PDF.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/makepdf.php`：此控制器将加载 DOMPDF 扩展并输出我们的
    PDF。'
- en: '`/path/to/codeigniter/application/models/makepdf_model.php`: We''ll use this
    model to get information from the database that is necessary to pass to the view
    file `view_all_users`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/makepdf_model.php`：我们将使用此模型从数据库获取传递给视图文件
    `view_all_users` 所必需的信息。'
- en: '`/path/to/codeigniter/application/views/makepdf/view_all_users.php`: This file
    contains the HTML and markup for how we wish the PDF to look. It also contains
    some PHP code, which echoes out some data gathered from the model.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/makepdf/view_all_users.php`：此文件包含我们希望
    PDF 看起来的 HTML 和标记。它还包含一些 PHP 代码，这些代码会输出从模型收集的一些数据。'
- en: 'First add the following code to the `makepdf` controller:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先添加以下代码到 `makepdf` 控制器中：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then add the following code to the `makepdf_model` model:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将以下代码添加到 `makepdf_model` 模型中：
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, add the following code to the `makepdf/view_all_users.php` view:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下代码添加到`makepdf/view_all_users.php`视图中：
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In the constructor of our `makepdf` controller, we load the `dompdf` helper.
    We place the `dompdf_helper.php` file and the `dompdf` folder in the `helpers`
    folder of our CodeIgniter application installed earlier on in the *Getting ready*
    section of this recipe.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`makepdf`控制器构造函数中，我们加载了`dompdf`辅助工具。我们将`dompdf_helper.php`文件和`dompdf`文件夹放置在我们之前在“准备就绪”部分安装的CodeIgniter应用程序的`helpers`文件夹中。
- en: '`private function index()` then calls the `Makepdf_model` function, `get_all_users()`.
    This model function runs a simple select operation on the users table and stores
    it in the `$data[''query'']` array, we will come back to this in a moment. The
    `$filename` variable is assigned the string `List-of-users`, but if you wanted,
    you could change this to anything you wanted, you can even add today''s date if
    required, which would look like the following code snippet:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`private function index()`然后调用`Makepdf_model`函数，`get_all_users()`。这个模型函数在用户表上运行一个简单的选择操作，并将其存储在`$data[''query'']`数组中，我们稍后会回到这一点。`$filename`变量被分配字符串`List-of-users`，但如果你愿意，你可以将其更改为任何你想要的，你甚至可以添加今天的日期，代码片段如下：'
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Anyway, back to the story. We then use the standard CodeIgniter method a view
    file and pass the `$data` array to it: $html = $this->load->view(''makepdf/view_all_users'',
    $data, true). Remember this `$data` array contains our database query of users.
    Instead of letting CodeIgniter render the view as it would normally, we catch
    the now processed HTML to a `$html` variable, which is passed to the `dompdf`
    function, `pdf_createalong`, with the `$filename` variable.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，回到故事中。我们然后使用标准的CodeIgniter方法一个视图文件，并将`$data`数组传递给它：`$html = $this->load->view('makepdf/view_all_users',
    $data, true)`。记住这个`$data`数组包含我们的用户数据库查询。我们不是让CodeIgniter像通常那样渲染视图，而是将现在处理过的HTML捕获到`$html`变量中，该变量被传递到`dompdf`函数`pdf_createalong`，以及`$filename`变量。
- en: If you load the controller in your browser, you should automatically be prompted
    to download the PDF.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将控制器加载到浏览器中，你应该会自动提示下载PDF。
- en: You can see how this can easily be adapted to output a wide and varied HTML
    designs, from invoices to, purchase orders to, address contacts. Just amend the
    model query to pull out what you need to know from the database and alter the
    HTML to display that information, and there you go.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这可以很容易地适应输出各种广泛的HTML设计，从发票到采购订单，再到地址联系人。只需修改模型查询，从数据库中提取你需要知道的信息，并更改HTML以显示这些信息，然后就可以完成了。
- en: Creating Hooks in CodeIgniter
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CodeIgniter中创建钩子
- en: There you are, quite happily using some framework or CMS to run a website, and
    you've just been asked to get it to do something which it was not originally designed.
    You begrudgingly agreed and start to work out how to implement what's been asked.
    You decide that you'll amend the core system files of whatever platform you've
    been stuck with because it's quick and easy, and because your boss used terms
    such as "quick wins" and "cost efficient".
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你就在那里，快乐地使用某个框架或CMS来运行一个网站，现在有人要求你让它做它最初没有设计的事情。你很不情愿地同意了，并开始研究如何实现所要求的功能。你决定修改你所遇到的任何平台的系统核心文件，因为它既快又简单，而且你的老板使用了诸如“快速胜利”和“成本效益”之类的术语。
- en: Anyway, the requested functionality works and everyone's happy—except the poor
    person (that may still be you) who comes along a few months later to upgrade the
    platform to the latest version and…*BANG*! That amendment you made to the system
    core, forget it! It's been lost by overwriting it with the new files from the
    upgrade. Now, that crazy thing you were asked to implement no longer works and
    you're left trying to remember what you did to get it working. Then before anyone
    notices, it's missing, and you're left thinking. "oh God why can't I just go home!"
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，请求的功能是有效的，每个人都感到高兴——除了那个可怜的人（可能就是你）几个月后回来升级平台到最新版本时……*砰*！你对该系统核心所做的修改已经丢失，因为升级时被新文件覆盖了。现在，你被要求实现的那件疯狂的事情不再工作，你只能试图回忆你是如何让它工作的。然后，在任何人注意到之前，它就消失了，你只能想着。“哦，上帝，我为什么就不能回家！”
- en: Well cheer up! You're using CodeIgniter and that should never happen to you
    (providing you use Hooks of course). You can still hack the core if you wish—go
    ahead, hack away, see if I care—but you'll kick yourself when you have to upgrade.
    I'm only thinking about your stress levels.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，振作起来！你正在使用CodeIgniter，这种情况永远不会发生在你身上（当然，前提是你使用钩子）。如果你愿意，你仍然可以修改核心——去做吧，随意修改，看看我是否在乎——但当你需要升级时，你会后悔的。我只是在考虑你的压力水平。
- en: Hooks allow you to override the behavior of CodeIgniter at specific points at
    its execution without the need to make changes to the CodeIgniter core files.
    Fantastic! That means that with CodeIgniter, you can implement any number of ludicrous
    management change requests and it won't affect you on upgrade day one bit. Hooks
    work in a specific order. What does that mean? Well, it means that CodeIgniter
    works in a specific order, that is to say, when CodeIgniter runs, it loads specific
    parts of itself in a set order. This order is always the same, and you can set
    a Hook to execute at any one of the steps.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Hooks 允许你在 CodeIgniter 执行的特定点覆盖其行为，而无需修改 CodeIgniter 核心文件。太棒了！这意味着使用 CodeIgniter，你可以实现任何数量的荒谬的管理变更请求，而且升级当天一点也不会受到影响。Hooks
    按特定顺序工作。这意味着什么？也就是说，CodeIgniter 按特定顺序工作，也就是说，当 CodeIgniter 运行时，它会按顺序加载其特定的部分。这个顺序始终相同，并且你可以设置一个
    Hook 在任何一步执行。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, you need to tell CodeIgniter that it should allow Hooks to run. Open
    the `/application/config/config.php` file and ensure that the setting for `enable_hooks`
    is `TRUE`, as shown in the following code snippet:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要告诉 CodeIgniter 它应该允许 Hooks 运行。打开 `/application/config/config.php` 文件，确保
    `enable_hooks` 的设置是 `TRUE`，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You''ll also have to decide the best time for your Hook to run. There are seven
    points in the execution of CodeIgniter where you can set your Hook to run, as
    follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须决定你的 Hook 运行的最佳时间。在 CodeIgniter 的执行过程中有七个点可以设置你的 Hook 运行，如下所示：
- en: '`pre_system`: This is the earliest place you can set a Hook to run. Only Benchmarking
    and Hooks are brought into play at this stage'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre_system`：这是你可以设置 Hook 运行的最早位置。在这个阶段，只有基准测试和 Hooks 被引入'
- en: '`pre_controller`: This is executed before any of your controllers are called'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre_controller`：这在你调用任何控制器之前执行'
- en: '`post_controller_constructor`: This makes your Hooks run after a controller
    constructor but before any controller functions are called'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_controller_constructor`：这使你的 Hooks 在控制器构造函数之后但调用任何控制器函数之前运行'
- en: '`post_controller`: This makes your Hook run after the controller has finished
    executing'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_controller`：这使得你的 Hook 在控制器执行完毕后运行'
- en: '`display_override`: This will override the CodeIgniter `display()` function--this
    is when CodeIgniter tried to render view files or other output to screen'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_override`：这将覆盖 CodeIgniter 的 `display()` 函数--这是 CodeIgniter 尝试将视图文件或其他输出渲染到屏幕上的时候'
- en: '`cache_override`: This overrides the `_display_cache()` function,you can use
    this if you wanted to implement custom caching functionality'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache_override`：这覆盖了 `_display_cache()` 函数，如果你想要实现自定义缓存功能，可以使用这个'
- en: '`post_system`: This is to be called once the normal operation has finished
    (that is, after the system has finished its execution of the current request)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_system`：这是在正常操作完成后要调用的（即，在系统完成当前请求的执行后）'
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Define an execution point for your hook. Once you've decided the point to run
    your Hook, you'll need to tell CodeIgniter when to run the hook. You do this,
    by defining the correct information in the `$hook` array in the `config/hooks.php`
    file.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的 Hook 定义一个执行点。一旦你决定了运行 Hook 的点，你将需要告诉 CodeIgniter 何时运行钩子。你通过在 `config/hooks.php`
    文件中定义 `$hook` 数组中的正确信息来完成此操作。
- en: The key of the `$hook` array specifies the execution point --that is when you
    want the hook to run (see the list mentioned in the Getting ready section of this
    recipe). In the following example, the array key is `post_controller`, which means
    that the hook is executed after the controller has finished executing. The `$hook`
    array now looks like the following.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$hook` 数组的键指定了执行点--即你希望钩子运行的时候（参见本食谱中“准备工作”部分提到的列表）。在下面的示例中，数组键是 `post_controller`，这意味着钩子在控制器执行完毕后执行。现在的
    `$hook` 数组看起来如下。'
- en: '[PRE9]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So what does all the preceding code mean then? Let'' have a look at the following
    table to understand the preceding code better:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那么，前面的所有代码意味着什么呢？让我们看一下下面的表格，以更好地理解前面的代码：
- en: '| Array element | Description |'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 数组元素 | 描述 |'
- en: '| --- | --- |'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `class` | It is the name of the class, which is in the file defined in the
    `filename` element. |'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `class` | 它是 `filename` 元素中定义的文件中的类的名称。|'
- en: '| `function` | It is the name of the function in the class. |'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `function` | 它是类中函数的名称。|'
- en: '| `filename` | It is the name of the file which contains the class. |'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `filename` | 它是包含类的文件的名称。|'
- en: '| `filepath` | This is the location of the file defined in the array element
    `filename`, normally the folder `hooks`, but you can add subfolders or move it
    to a different location if you wish. |'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `filepath` | 这是数组元素`filename`中定义的文件的路径，通常是`hooks`文件夹，但如果你愿意，可以添加子文件夹或将它移动到不同的位置。|'
- en: '| `params` | They are any arguments you wish to pass to the `function` element
    of your `Hook` class. Separate each argument by a comma. |'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `params` | 这是你要传递给`Hook`类`function`元素的任何参数。用逗号分隔每个参数。|'
- en: 'You then need to create your hook class, as shown in the following code snippet:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要创建你的钩子类，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You put the code for your hook in this class, obviously change `Class_name`
    to something more useful for you, and the function `function_name()` is obviously
    an example--change this name too.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将你的钩子代码放在这个类中，显然需要将`Class_name`改为对你更有用的名称，而函数`function_name()`显然是一个示例——这个名称也需要更改。
- en: 'Should you need to gain access to CodeIgniter resources in your hook, you can
    do so by accessing the main CodeIgniter object, using the CodeIgniter get_instance()
    function shown in the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在钩子中访问CodeIgniter资源，你可以通过使用以下代码中的CodeIgniter get_instance()函数来访问主CodeIgniter对象：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `thing_to_load` is the name of your model, or library, and so on. There
    you have it--hooks are simple really, decide on an execution point, create a class
    to contain the code for your hook, and away you go!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`thing_to_load`是你的模型、库等的名称。在那里，你就可以看到钩子实际上很简单，确定一个执行点，创建一个包含你的钩子代码的类，然后就可以开始了！
- en: Clearing dead sessions from the database
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中清除无效会话
- en: You may have found that CodeIgniter sometimes does not successfully remove sessions
    from the sessions table in the database. Unused sessions are instead cleared of
    their `user_data field`, but that the row remains in the sessions table.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能发现CodeIgniter有时无法成功从数据库中的会话表中删除会话。未使用的会话会清除其`user_data`字段，但行仍然保留在会话表中。
- en: I have often had to write specific database queries to clear sessions. I usually
    put these queries in the `My_Controller` class(refer to the *Extending your controllers*
    recipe in this chapter); however, I have recently begun to use Hooks to perform
    this. Then it's always working in the background and I don't need to think about
    it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常需要编写特定的数据库查询来清除会话。我通常将这些查询放在`My_Controller`类中（参考本章中的*扩展你的控制器*配方）；然而，我最近开始使用钩子来完成这个任务。这样它总是在后台运行，我无需再考虑它。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to amend the following file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要修改以下文件：
- en: '`/path/to/codeigniter/application/config/config.php`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/config/config.php`'
- en: 'Open the `/application/config/config.php` file and ensure that the setting
    for `enable_hooks` is `TRUE`, as shown in the following code snippet:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`/application/config/config.php`文件，确保`enable_hooks`的设置是`TRUE`，如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going create and amend the following file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建并修改以下文件：
- en: '`/path/to/codeigniter/application/hooks/clear_sessions.php`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/hooks/clear_sessions.php`'
- en: 'Create the preceding file and add the following code to it:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建前面的文件，并向其中添加以下代码：
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We're using the default CodeIgniter sessions table name, that is, `ci_sessions`.
    In your application, you'll need to substitute this value with the name of your
    sessions table (assuming you've changed it from `ci_sessions`).
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用的是默认的CodeIgniter会话表名称，即`ci_sessions`。在你的应用程序中，你需要将这个值替换为你会话表的名称（假设你已经将其从`ci_sessions`更改了）。
- en: 'Open the `/path/to/codeigniter/application/config/hooks.php` file and add the
    following code to it:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`/path/to/codeigniter/application/config/hooks.php`文件，并向其中添加以下代码：
- en: '[PRE14]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We have defined a class (`Clear_sessions`) in the `clear_sessions.php` file
    into which we''ll put all the logic we need for the Hook to perform its task.
    Within that class, we have the `clear_now()` function. CodeIgniter knows that
    it is to run the `clear_now()` function, in the `Clear_sessions` class, in the
    `clear_sessions.php` file, because we defined this in the `hooks.php config` file,
    as shown in the following code snippet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`clear_sessions.php`文件中定义了一个类（`Clear_sessions`），我们将把所有需要用于钩子执行任务的逻辑放入这个类中。在这个类中，我们有一个`clear_now()`函数。CodeIgniter知道它需要在`clear_sessions.php`文件中的`Clear_sessions`类中运行`clear_now()`函数，因为我们已经在`hooks.php`配置文件中定义了这一点，如下面的代码片段所示：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We told CodeIgniter the location of the `clear_sessions.php` file with the `filepath`
    element of the preceding array. CodeIgniter will run this Hook at the `post_controller`
    stage of execution, that is to say, after a controller has been run. So, that's
    how CodeIgniter knows what hook to execute and when; but what of the function
    of the hook? What does that do?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过前一个数组中的`filepath`元素告诉CodeIgniter`clear_sessions.php`文件的路径。CodeIgniter将在执行`post_controller`阶段运行此钩子，也就是说，在运行控制器之后。因此，这就是CodeIgniter知道何时执行什么钩子；但钩子的功能是什么？它做了什么？
- en: 'Let''s look at the following code line:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码行：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This gives us access to the main CodeIgniter object, which is defined as `$CI`
    (for CodeIgniter). Using this object, we have access to the database functions
    and settings. We''ll use this `$CI` object to run a database query, as shown in
    the following code snippet:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够访问主CodeIgniter对象，该对象定义为`$CI`（代表CodeIgniter）。使用此对象，我们可以访问数据库功能和设置。我们将使用此`$CI`对象来运行数据库查询，如下所示代码片段所示：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code line deletes any sessions from the table (named here as the
    default CodeIgniter sessions table ci_sessions) whose `user_data` is empty (*not*
    not null just empty).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码会删除表中（在此处命名为默认的CodeIgniter会话表ci_sessions）任何`user_data`为空的会话（*不是*非空，而是空）。
- en: All spent sessions that CodeIgniter hasn't cleaned up properly should now be
    gone from the sessions table, leaving active sessions alone.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所有CodeIgniter未正确清理的已消耗会话现在应从会话表中消失，而留下活跃的会话。
- en: Extending your controllers
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展您的控制器
- en: Inheritance is a wonderful thing; allowing you to define conceptual layers,
    or levels within an application, that is, allowing child classes to share traits
    and attributes of parent classes allows applications to model real-world examples
    more accurately and intuitively than standard procedural programming.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是一件美妙的事情；它允许您定义概念层或应用程序中的级别，也就是说，允许子类共享父类的特性和属性，这使得应用程序能够比标准过程式编程更准确、更直观地模拟现实世界的例子。
- en: 'In CodeIgniter, the default design structure for your application is that the
    controller you create extends the main CodeIgniter controller. For example, in
    the following code, we have a `Signin` controller, which extends the main CodeIgniter
    controller, `CI_Controller`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在CodeIgniter中，您应用程序的默认设计结构是您创建的控制器扩展主CodeIgniter控制器。例如，在以下代码中，我们有一个`Signin`控制器，它扩展了主CodeIgniter控制器`CI_Controller`：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Your `Signin` controller will inherit the properties of the `CI_Controller`.
    However, CodeIgniter also allows you to parachute in a stage between the `CI_Controller`
    and the controller you create, you can slot in a middle layer. This middle step
    is named `My_Controller`. The new MY_Controller will extend the CI_Controller
    (inheriting everything as it goes) and any normal application-specific controller
    you create (users, login, invoice, and so on) will inherit from the new MY_Controller.
    It is defined as shown in the following code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`Signin`控制器将继承`CI_Controller`的属性。然而，CodeIgniter还允许您在`CI_Controller`和您创建的控制器之间插入一个阶段，您可以插入一个中间层。这个中间步骤被命名为`My_Controller`。新的MY_Controller将扩展CI_Controller（在扩展过程中继承一切）以及您创建的任何普通应用程序特定控制器（用户、登录、发票等），它们都将继承自新的MY_Controller。它定义如下代码片段所示：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, your `Signin` class must be amended to inherit from your `MY_Controller`
    rather than CodeIgniter''s `CI_Controller` as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的`Signin`类必须修改为从您的`MY_Controller`继承，而不是从CodeIgniter的`CI_Controller`继承，如下所示：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following two files:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下两个文件：
- en: '`/path/to/codeigniter/application/core/MY_Controller.php`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/core/MY_Controller.php`'
- en: '`/path/to/codeigniter/application/controllers/days.php`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/days.php`'
- en: 'Create the `/path/to/codeigniter/application/core/MY_Controller.php` file and
    add the following code to it:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application/core/MY_Controller.php`文件，并将以下代码添加到其中：
- en: '[PRE21]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, create the `/path/to/codeigniter/application/controllers/days.php` file
    and add the following code to it:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`/path/to/codeigniter/application/controllers/days.php`文件，并将以下代码添加到其中：
- en: '[PRE22]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is mostly Inheritance. Your child classes are inheriting attributes from
    parent classes. However, specifically here, we are demonstrating how to load the
    array helper in the `MY_Controller class` and have the `Days` controller inherit
    the helper resource in order to execute the array helper function, `random_element()`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这主要是继承。你的子类正在从父类继承属性。然而，具体来说，我们在这里展示了如何在 `MY_Controller 类` 中加载数组助手，并让 `Days`
    控制器继承助手资源以执行数组助手函数 `random_element()`。
- en: There are so many uses for this, for example, you could check to see if the
    user was logged in your `MY_Controller Class`, this would mean that you would
    only have to write this once rather than in every controller. Or you could go
    further and have an authenticated controller and unauthenticated controller extending
    `MY_Controller`. The `MY_Controller` file would call any files and perform any
    tasks common to authenticated and unauthenticated users, While, the authenticated
    controller would perform login checks, and so on.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这有很多用途，例如，你可以检查用户是否在 `MY_Controller 类` 中登录，这意味着你只需要写一次，而不是在每个控制器中。或者你可以更进一步，有一个经过身份验证的控制器和一个未经身份验证的控制器扩展
    `MY_Controller`。`MY_Controller` 文件将调用任何文件并执行对经过身份验证和未经身份验证用户都通用的任何任务，而经过身份验证的控制器将执行登录检查等。
- en: Uploading a file with FTP
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FTP上传文件
- en: Every now and again, you'll be asked to generate a file—perhaps from a database
    export, or maybe some system logs. Most of the time, you'll be asked to e-mail
    that file to some location, but sometimes, you'll be asked to upload it to an
    FTP folder the client has access to. We're going to take a recipe from a previous
    chapter (*Generating a CSV from a database result* from [Chapter 6](ch06.html
    "Chapter 6. Working with Databases"), *Working with Databases*), and adapt it
    so that it uploads to an FTP location rather than stream an output.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 不时地，你会被要求生成一个文件——可能是从数据库导出，或者是一些系统日志。大多数时候，你会被要求将文件通过电子邮件发送到某个位置，但有时，你会被要求将其上传到客户端可以访问的FTP文件夹。我们将从一个之前的章节的食谱中提取信息（[第6章](ch06.html
    "第6章. 与数据库一起工作")中的“从数据库结果生成CSV”，*与数据库一起工作*），并对其进行调整，以便将其上传到FTP位置而不是流式传输输出。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to be pulling some values from a database. To do that, we''ll
    need a table to pull data from. The following is the schema for that table. Copy
    the following into your database:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从一个数据库中提取一些值。为了做到这一点，我们需要一个表来提取数据。以下是该表的架构。将以下内容复制到您的数据库中：
- en: '[PRE23]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Go to [Chapter 6](ch06.html "Chapter 6. Working with Databases"), *Working with
    Databases*, and copy out the code from the *Generating a CSV from a database result*
    recipe; then return here for further instructions.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[第6章](ch06.html "第6章. 与数据库一起工作"), *与数据库一起工作*，并复制出 *从数据库结果生成CSV* 食谱中的代码；然后返回这里获取进一步的指示。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: We're going to amend one file from the *Generating a CSV from a database result*
    recipe, that is, `/path/to/codeigniter/application/controllers/export.php`. This
    is the export controller from [Chapter 6](ch06.html "Chapter 6. Working with Databases"),
    *Working with Databases*. We're going to use it as the basis for this recipe.
    It will grab some data from the database that eventually generates a CSV for us.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改 *从数据库结果生成CSV* 食谱中的一个文件，即 `/path/to/codeigniter/application/controllers/export.php`。这是[第6章](ch06.html
    "第6章. 与数据库一起工作"), *与数据库一起工作*中的导出控制器。我们将将其作为本食谱的基础。它将从数据库中获取一些数据，最终为我们生成CSV。
- en: 'Open `export.php` for editing and amend it to reflect the following code snippet
    (changes are highlighted):'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `export.php` 进行编辑，并修改它以反映以下代码片段（更改已突出显示）：
- en: '[PRE24]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There are some variables here that you should change to reflect the settings
    of your FTP environment such as:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里有一些变量你需要更改以反映你的FTP环境设置，例如：
- en: '[PRE25]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '...and the string `dir_on_ftp` in:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...并且字符串 `dir_on_ftp` 在：'
- en: '[PRE26]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you would expect from a new recipe, there are some changes in the normal
    export controller that we've used in [Chapter 6](ch06.html "Chapter 6. Working
    with Databases"), *Working with Databases*. These changes are necessary to support
    the FTP helper in its job of uploading a file to an FTP server. Let's take a look
    at what's going on.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期望的新食谱一样，我们在[第6章](ch06.html "第6章. 与数据库一起工作"), *与数据库一起工作*中使用的正常导出控制器中做了一些更改。这些更改是必要的，以支持FTP助手在将文件上传到FTP服务器的工作中的功能。让我们看看发生了什么。
- en: First, we load the helpers we'll need--url, file, and FTP--in the Exporter controllers
    constructor to ensure that this export controller has the right support necessary
    to make the file transfer.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在导出控制器构造函数中加载所需的辅助工具--URL、文件和FTP--以确保这个导出控制器拥有进行文件传输所需的正确支持。
- en: '[PRE27]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Everything then follows the functionality of the previous controller (from [Chapter
    6](ch06.html "Chapter 6. Working with Databases"), *Working with Databases*) ,that
    is, fetching a result set from the database table and using the CodeIgniter `dbutil`
    function, `csv_from_result()`, to generate a file for us. It's placed on the server
    by `write_file()` using the location defined in `$path`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后一切都将遵循先前控制器（来自[第6章](ch06.html "第6章。与数据库一起工作")，*与数据库一起工作*）的功能，即从数据库表获取结果集，并使用CodeIgniter的`dbutil`函数`csv_from_result()`为我们生成文件。它通过`write_file()`函数使用在`$path`中定义的位置放置在服务器上。
- en: Then the FTP functionality kicks in. We define the login settings for the FTP
    server we want to write the file to--you can and probably should put these in
    your own config file (also explained in this chapter, see the *Making your own
    configuration files and using the settings* recipe), but for now, we'll define
    them here as it's easier to explain one thing at a time. The settings are fairly
    obvious until you see the `$config['debug']` array setting. `debug` allows error
    reports to be displayed to you, the developer. Obviously, in a live production
    environment, you definitely want that set to be `FALSE` to prevent any sensitive
    and important information being shown.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 然后FTP功能开始启动。我们为要将文件写入的FTP服务器定义登录设置--你可以，也可能应该将这些放在你自己的配置文件中（本章也有解释，见*制作自己的配置文件并使用设置*配方），但为了现在更容易解释，我们将在这里定义它们。设置相当明显，直到你看到`$config['debug']`数组设置。`debug`允许错误报告显示给你，即开发者。显然，在实时生产环境中，你肯定希望将其设置为`FALSE`以防止任何敏感和重要的信息被显示。
- en: 'Anyways, using the login settings that we have defined in our `$config` array,
    we attempt to connect to the FTP server and try to upload a file, as shown in
    the following code snippet:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我们使用在`$config`数组中定义的登录设置，尝试连接到FTP服务器并尝试上传文件，如下面的代码片段所示：
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If all goes well, the file should be uploaded to your server. Log in with an
    FTP client and take a look to see if it''s there--if it''s not check that you''re
    using the correct FTP settings and that the path you''re writing to on the FTP
    server is writable and actually exists, that is, that the path defined here in
    bold exists:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，文件应该已经上传到你的服务器。使用FTP客户端登录并查看它是否在那里--如果不在，请检查你是否使用了正确的FTP设置，以及你在FTP服务器上写入的路径是否可写并且实际上存在，也就是说，这里用粗体定义的路径确实存在：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'An interesting point is the two function arguments at the end of the preceding
    `upload()` function: `ascii` and `0755`. These state that we''re encoding the
    file transfer as `ascii` (which is plain text) and setting its file permissions
    to `0755`. This can also be defined in the config array if you wish.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的观点是前面`upload()`函数末尾的两个函数参数：`ascii`和`0755`。这些表示我们将文件传输编码为`ascii`（即纯文本）并设置其文件权限为`0755`。如果你愿意，这些也可以在配置数组中定义。
- en: Creating libraries and giving them access to CodeIgniter resources
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建库并让它们访问CodeIgniter资源
- en: 'CodeIgniter allows you to create your own libraries and helpers in circumstances
    where you don''t want or need to place code in controllers or models. Why would
    you place code in a library and not a helper? Well, some people become quite agitated
    by the reasoning for this and I''m sure that if you thought hard enough about
    it, you could come up with some strict rules that defines when a bit of code is
    a helper or a library. But life is far too short. As long as the code is well
    documented and is maintainable, stable, and secure, you can do whatever you like.
    However, as a general rule of thumb:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter允许你在不需要或不需要在控制器或模型中放置代码的情况下创建自己的库和辅助工具。为什么要把代码放在库中而不是辅助工具中呢？嗯，有些人对这一点相当激动，我相信如果你足够深入地思考这个问题，你就能想出一套严格的规则来定义何时一段代码是辅助工具或库。但是生活太短暂了。只要代码有良好的文档，并且是可维护的、稳定的和安全的，你可以随心所欲。然而，作为一个一般规则：
- en: '*A library is for code which requires access to other resources, such as needing
    access to a database, or to an external system (perhaps through cURL), whereas
    a helper is a smaller bit of code which performs a specific task (such as checking
    a string being a valid e-mail or* for a valid *URL, for example).*'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '*图书馆是用于需要访问其他资源的代码，例如需要访问数据库或外部系统（可能通过cURL），而辅助器是较小的一段代码，用于执行特定任务（例如检查字符串是否为有效的电子邮件或*URL，例如）。*'
- en: I'm sure there are better definitions, but this one works for me; and I'm sure
    there will be times when you may want a helper to have access to a database or
    other resource; and I'm sure there will be times when a library doesn't need access
    to these resources. My point is, just make sure the code is documented and maintainable
    and don't get bogged down in conceptual design augments.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信有更好的定义，但这个对我来说是有效的；而且我相信你可能会想要一个辅助器能够访问数据库或其他资源；而且我相信在有些时候，库可能不需要访问这些资源。我的观点是，确保代码有文档和可维护性，不要陷入概念设计细节。
- en: Having said that, let's look at creating a library and giving it access to CodeIgniter
    resources (because, by default, it won't).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们看看如何创建一个库并给它访问CodeIgniter资源（因为默认情况下它不会）。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''re going to access a database through a library; however, to do that we''ll
    need a database to access (of course), so copy the following code into your database:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过库访问数据库；然而，为了做到这一点，我们需要一个可以访问的数据库（当然），所以将以下代码复制到你的数据库中：
- en: '[PRE30]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''re going to create the following three files:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下三个文件：
- en: '`/path/to/codeigniter/application/controllers/call_lib.php`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/call_lib.php`'
- en: '`/path/to/codeigniter/application/libraries/lib_to_call.php`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/libraries/lib_to_call.php`'
- en: '`/path/to/codeigniter/application/models/lib_model.php`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/lib_model.php`'
- en: 'Create the `call_lib.php` controller and add the following code to it:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`call_lib.php`控制器，并将以下代码添加到其中：
- en: '[PRE31]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create the `lib_to_call.php` library and add the following code to it:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`lib_to_call.php`库，并将以下代码添加到其中：
- en: '[PRE32]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then create the `lib_model.php` model and add the following code to it:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建`lib_model.php`模型，并将以下代码添加到其中：
- en: '[PRE33]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In looking at how to give your libraries access to CodeIgniter resources, we're
    going to run through the preceding recipe. It's connecting to a model; however,
    it can be any type of CodeIgniter resource such as a Hook or a helper, and so
    on.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看如何给你的库访问CodeIgniter资源时，我们将运行前面的配方。它是连接到一个模型；然而，它可以连接到任何类型的CodeIgniter资源，如钩子或辅助器等。
- en: 'First, the `call_lib.php` controller loads in its constructor the `lib_to_call`
    library, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`call_lib.php`控制器在其构造函数中加载了`lib_to_call`库，如下所示：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This makes the library available to the entire controller.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得库在整个控制器中可用。
- en: We then call `public function index()`, which calls the library function, `get_users()`,
    storing the returned results in the `$result` variable. Let's look at what the
    library function, `get_users()`, is doing, this is where we allow the library
    to get access to CodeIgniter resources.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用`public function index()`，它调用库函数`get_users()`，并将返回的结果存储在`$result`变量中。让我们看看库函数`get_users()`正在做什么，这是允许库访问CodeIgniter资源的地方。
- en: 'Look at the following highlighted lines in the `lib_to_call` library:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 看看`lib_to_call`库中以下突出显示的行：
- en: '[PRE35]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We''re using the PHP function, `get_instance()`, to get our hands on a copy
    by reference (that means we''re using the initial object rather than a copy of
    it) or the CodeIgniter object. This object has access to the entire CodeIgniter
    system and its resources. We store this object in a local variable named `$CI`
    (standing for CodeIgniter). We can now call any CodeIgniter resource we like,
    just as we would from a controller, except that instead of using `$this` (as we
    would in a controller), we use `$CI`. So, to call a model or helper in a controller,
    we will do the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用PHP函数`get_instance()`通过引用获取一个副本（这意味着我们使用的是原始对象而不是它的副本）或CodeIgniter对象。此对象可以访问整个CodeIgniter系统和其资源。我们将此对象存储在名为`$CI`（代表CodeIgniter）的局部变量中。现在我们可以调用任何我们喜欢的CodeIgniter资源，就像从控制器中调用一样，只不过我们使用的是`$CI`（而不是在控制器中使用`$this`）。因此，要在一个控制器中调用模型或辅助器，我们将执行以下操作：
- en: '[PRE36]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'But to call helpers and models in the library, we now do the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 但要在库中调用辅助器和模型，我们现在这样做：
- en: '[PRE37]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The model we''ve now loaded will query the database with Active Record, returning
    all rows in the table to the library, which in turn returns it to the controller
    for processing. In this case (to demonstrate that it worked), we `var_dump()`
    the result. If all goes well, this recipe should output as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在加载的模型将使用 Active Record 查询数据库，将表中的所有行返回到库中，然后库再将它返回到控制器进行处理。在这种情况下（为了证明它工作），我们使用
    `var_dump()` 输出结果。如果一切顺利，这个菜谱应该会输出如下：
- en: '[PRE38]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The preceding recipe access a database as a means of demonstrating how to gain
    access to a CodeIgniter super object from within a library. However, helpers,
    Hooks, and other elements can also be accessed. By using `$CI =& get_instance()`,
    we can gain access to the main CodeIgniter object. By using `$CI` rather than
    `$this`, this will give us access to all of CodeIgniter''s resources, as shown
    in the following code snippet:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的菜谱通过访问数据库来展示如何在库中从内部访问 CodeIgniter 超级对象。然而，辅助工具、钩子和其他元素也可以访问。通过使用 `$CI =&
    get_instance()`，我们可以访问主要的 CodeIgniter 对象。通过使用 `$CI` 而不是 `$this`，这将使我们能够访问 CodeIgniter
    的所有资源，如下面的代码片段所示：
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Making your own configuration files and using the settings
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自己的配置文件并使用设置
- en: It's a great idea to have configuration settings in the same file—the benefits
    are obvious—so rather than having settings hidden in controllers, modules, helpers,
    libraries, or (God forbid) in views, you can put them in one location and refer
    to them from there. CodeIgniter comes with its own configuration files in the
    `config` folder; however, you can add your own files to the `config` folder and
    refer to them in your code. It's pretty handy and easy to do; let's take a look.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件中拥有配置设置是一个很好的主意——好处显而易见——因此，而不是将设置隐藏在控制器、模块、辅助工具、库中，或者（天哪）在视图中，你可以将它们放在一个位置，并从那里引用。CodeIgniter
    在 `config` 文件夹中自带了自己的配置文件；然而，你可以在 `config` 文件夹中添加自己的文件，并在你的代码中引用它们。这非常方便且易于操作；让我们看看。
- en: How to do it...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We''re going to create the following two files:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下两个文件：
- en: '`/path/to/codeigniter/application/controllers/config_settings.php`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/config_settings.php`'
- en: '`/path/to/codeigniter/application/config/my_config_file.php`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/config/my_config_file.php`'
- en: 'Create the `config_settings.php` controller, open it for editing, and add the
    following code to it:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `config_settings.php` 控制器，打开它进行编辑，并添加以下代码：
- en: '[PRE40]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create the config file, `my_config_file.php`, open it for editing, and add
    the following code to it:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建配置文件，`my_config_file.php`，打开它进行编辑，并添加以下代码：
- en: '[PRE41]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To be honest, there are so many situations where putting information in a config
    file is useful that make it pointless writing a specific recipe for you, as the
    chances of it being the recipe you need are slim to none. So, this is just a proof
    of concept; it is there for you as a guide of the basic two files: a config file
    and another file (a controller) to grab information from it.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，有那么多情况将信息放在配置文件中是有用的，以至于为你们编写一个特定的菜谱是毫无意义的，因为你们需要这个菜谱的可能性极小。所以，这只是一个概念证明；它作为基本两个文件的一个指南存在：一个配置文件和另一个文件（一个控制器）来从中获取信息。
- en: Take a look at the constructor in the controller, `Config_settings`. This is
    where we define the name of the config file. You can call it whatever you like
    (as long as the name isn't already taken by another config file). Here, I've called
    it `my_config_file`; it's a bit 1995, but it's good enough for the explanation
    and I'm sure you get the idea.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 看看控制器中的构造函数，`Config_settings`。这就是我们定义配置文件名称的地方。你可以随意命名（只要名称没有被另一个配置文件占用）。在这里，我将其命名为
    `my_config_file`；虽然有点像1995年，但对于解释来说足够好了，我相信你们已经明白了这个意思。
- en: 'The next thing to happen is that `public function index()` is executed, which
    does two things: prints out a string of text (the text is set in our config file)
    and iterates through a `for()` loop, only stopping when it reaches the value specified
    in our `my_config_file`.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来发生的事情是执行 `public function index()`，它做两件事：打印出一段文本（文本设置在我们的配置文件中）并遍历一个 `for()`
    循环，直到达到我们在 `my_config_file` 中指定的值。
- en: 'These two approaches show you how to work with config values: either echoing
    out to screen or using that value in some sort of structure.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法展示了如何处理配置值：要么在屏幕上输出，要么在某种结构中使用该值。
- en: Using the language class – switching language on the go
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用语言类——随时切换语言
- en: Once you have developed your site to accommodate multiple languages, you'll
    obviously want to allow people to switch between them. For example, to switch
    from English to French, or French to German, or whatever region or language you're
    developing for. This can be handled in several ways, but in this example, we're
    going to use the CodeIgniter `Session` class to swap from one language to another.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开发了一个支持多种语言的网站，您显然希望允许人们在这些语言之间切换。例如，从英语切换到法语，或从法语切换到德语，或为任何您正在开发的地区或语言。这可以通过几种方式处理，但在这个例子中，我们将使用CodeIgniter的
    `Session` 类在不同的语言之间切换。
- en: Getting ready
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We're going to use the `Session` class to store the user's language preference,
    which means, we'll need to use CodeIgniter sessions. This will require some configuration.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `Session` 类来存储用户的语言偏好，这意味着我们需要使用CodeIgniter会话。这需要一些配置。
- en: 'We''ll be editing the following files:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编辑以下文件：
- en: '`path/to/codeigniter/application/config/config.php`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/config/config.php`'
- en: '`path/to/codeigniter/application/config/database.php`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/config/database.php`'
- en: 'The following are the config settings:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些配置设置：
- en: 'Find the following config values in the `path/to/codeigniter/application/config/config.php`
    file and amend them to reflect the following values:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `path/to/codeigniter/application/config/config.php` 文件中找到以下配置值，并修改它们以反映以下值：
- en: '| Config Item | Data Type | Change to Value | Description |'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 配置项 | 数据类型 | 更改为值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `$config[''sess_cookie_name'']` | `String` | `ci_session` | This is the name
    of the cookie written to the user''s computer. |'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_cookie_name'']` | `字符串` | `ci_session` | 这是写入用户计算机的cookie的名称。|'
- en: '| `$config[''sess_expiration'']` | `Integer` | `7200` | This is the number
    of seconds a session should remain active, after no user activity, before becoming
    void. |'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_expiration'']` | `整型` | `7200` | 这是指定会话在无用户活动后应保持活跃的秒数，在此之后变为无效。|'
- en: '| `$config[''sess_expire_on_close'']` | `Boolean (True/False)` | `TRUE` | This
    specifies that if the user closes their browser the session becomes void. |'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_expire_on_close'']` | `布尔型 (True/False)` | `TRUE` | 这指定了如果用户关闭浏览器，会话将变为无效。|'
- en: '| `$config[''sess_encrypt_cookie'']` | `Boolean (True/False)` | `TRUE` | This
    specifies if the cookie should be encrypted on the user''s computer. For security
    purposes this should be set to `TRUE`. |'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_encrypt_cookie'']` | `布尔型 (True/False)` | `TRUE` | 这指定了cookie是否应在用户计算机上加密。出于安全考虑，应将其设置为
    `TRUE`。|'
- en: '| `$config[''sess_use_database'']` | `Boolean (True/False)` | `TRUE` | This
    specifies weather or not to store sessions in the database. For security purposes
    this should be set to `TRUE`. You will also need to create the session table,
    the code for which can be found in the upcoming page. |'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_use_database'']` | `布尔型 (True/False)` | `TRUE` | 这指定了是否将会话存储在数据库中。出于安全考虑，应将其设置为
    `TRUE`。您还需要创建会话表，其代码可在下一页找到。|'
- en: '| `$config[''sess_table_name'']` | `String` | `sessions` | This specifies the
    name of the database table used to store session data. In this recipe, I have
    called the sessions table simple sessions; however, you can keep the original
    i_sessions--just make sure you amend the SQL accordingly. |'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_table_name'']` | `字符串` | `sessions` | 这指定了用于存储会话数据的数据库表名称。在这个菜谱中，我称会话表为简单会话；然而，您可以保留原始的
    i_sessions--只需确保相应地修改SQL即可。|'
- en: '| `$config[''sess_match_ip'']` | `Boolean (True/False)` | `TRUE` | This specifies
    whether CodeIgniter should monitor the IP address of requests and against that
    of the `session_id`. If the IP of an incoming request doesn''t match the previous
    values, the session is disallowed. |'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_match_ip'']` | `布尔型 (True/False)` | `TRUE` | 这指定了CodeIgniter是否应监控请求的IP地址与
    `session_id` 的对比。如果传入请求的IP与之前的值不匹配，则不允许会话。|'
- en: '| `$config[''sess_match_useragent'']` | `Boolean (True/False)` | `TRUE` | This
    specifies whether CodeIgniter should monitor the user agent address of requests
    and against that of the `session_id`. If the user agent of an incoming request
    doesn''t match the previous values, the session is disallowed. |'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_match_useragent'']` | `布尔型 (True/False)` | `TRUE` | 这指定了CodeIgniter是否应监控请求的用户代理地址与
    `session_id` 的对比。如果传入请求的用户代理与之前的值不匹配，则不允许会话。|'
- en: 'Find the following config values in the `path/to/codeigniter/application/config/database.php`
    file and amend them to reflect the correct settings to enable you to connect to
    your database:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `path/to/codeigniter/application/config/database.php` 文件中找到以下配置值，并修改它们以反映正确的设置，以便您能够连接到您的数据库：
- en: '| Config Item | Data Type | Change to Value | Description |'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 配置项 | 数据类型 | 更改为值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `$db[''default''][''hostname'']` | `String` | `localhost` | The hostname
    of your database. This is usually either `localhost` or an IP address |'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$db[''default''][''hostname'']` | `String` | `localhost` | 您数据库的主机名。这通常是
    `localhost` 或 IP 地址 |'
- en: '| `$db[''default''][''username'']` | `String` |   | The username you wish to
    use to connect to your database |'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$db[''default''][''username'']` | `String` |   | 您用于连接数据库的用户名 |'
- en: '| `$db[''default''][''password'']` | `String` |   | The password used to connect
    to your database |'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$db[''default''][''password'']` | `String` |   | 连接到您的数据库时使用的密码 |'
- en: '| `$db[''default''][''database'']` | `String` |   | The name of the database
    which you wish to connect to |'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$db[''default''][''database'']` | `String` |   | 您希望连接到的数据库名称 |'
- en: 'We will be storing the user''s language preference in the session, and the
    sessions are stored in the database table, `sessions`. The following is the schema
    for the sessions table. Using a method of your choice (command line, `phpMyAdmin`,
    and so on), enter the following MySQL schema into your database:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在会话中存储用户的语言偏好，会话存储在数据库表 `sessions` 中。以下为会话表的架构。使用您选择的方法（命令行、`phpMyAdmin`
    等），将以下 MySQL 架构输入到您的数据库中：
- en: '[PRE42]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How to do it...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We''re going to create the following language file:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下语言文件：
- en: '`/path/to/codeigniter/application/language/french/fr_lang.php`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/french/fr_lang.php`'
- en: '...and amend the following two files:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '...并修改以下两个文件：'
- en: '`/path/to/codeigniter/application/controllers/lang.php`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/lang.php`'
- en: '`/path/to/codeigniter/application/views/lang/lang.php`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/lang/lang.php`'
- en: 'Amend `/path/to/codeigniter/application/controllers/lang.php` to reflect the
    following code snippet:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `/path/to/codeigniter/application/controllers/lang.php` 以反映以下代码片段：
- en: '[PRE43]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Amend `/path/to/codeigniter/application/views/lang/lang.php` to reflect the
    following code snippet:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `/path/to/codeigniter/application/views/lang/lang.php` 以反映以下代码片段：
- en: '[PRE44]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Copy the following code into the `/path/to/codeigniter/application/system/language/french/fr_lang.php`
    file:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `/path/to/codeigniter/application/system/language/french/fr_lang.php`
    文件中：
- en: '[PRE45]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, add the following code into the `/path/to/codeigniter/application/system/language/engligh/en_lang.php`
    file:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下代码添加到 `/path/to/codeigniter/application/system/language/english/en_lang.php`
    文件中：
- en: '[PRE46]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is an extension of the earlier language recipe. The only thing we're doing
    different is adding support for switching values in `$this->lang->load('', '');`.
    We're using CodeIgniter's session functionality to store the switched values.
    Thus, as we're passing the required language as a value in the URL, we'll want
    to use the CodeIgniter security method, `xss_clean()`, to mitigate against cross-site
    scripting.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对早期语言菜谱的扩展。我们唯一不同的地方是添加了对 `$this->lang->load('', '');` 中值的切换支持。我们使用 CodeIgniter
    的会话功能来存储切换的值。因此，当我们通过 URL 中的值传递所需的语言时，我们将想要使用 CodeIgniter 的安全方法 `xss_clean()`
    来减轻跨站脚本攻击的风险。
- en: 'So, in the constructor, we have the following code:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在构造函数中，我们有以下代码：
- en: '[PRE47]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This will look to see whether there are any language variables set in a session.
    If there are not, we define the language in the `$change_lang` array and pass
    it to the `$this->lang->load('''', '''');` function, as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这将检查是否有任何语言变量在会话中设置。如果没有，我们在 `$change_lang` 数组中定义语言并将其传递给 `$this->lang->load('',
    '');` 函数，如下所示：
- en: '[PRE48]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: From there, `public function index()` is loaded and immediately redirects to
    `public function submit()`, which displays the HTML form.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，`public function index()` 被加载并立即重定向到 `public function submit()`，显示 HTML
    表单。
- en: 'We''ve amended the HTML form, adding the following two anchor tags:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已修改了 HTML 表单，添加了以下两个锚点标签：
- en: '[PRE49]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If a user clicks on either one of these links (French or English) in their browser,
    `public function change_language()` is run. We then grab and sanitize the third
    parameter of the URL with `$lang = xss_clean($this->uri->segment(3));` and pass
    it through a PHP Switch/Case statement, looking for either `en` or `fr`, assigning
    the `$language` and `$filename` variables as we go with the correct details (the
    default loads English).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在浏览器中点击这些链接（法语或英语）中的任何一个，将执行 `public function change_language()`。然后我们通过
    `$lang = xss_clean($this->uri->segment(3));` 获取并清理 URL 的第三个参数，并通过 PHP Switch/Case
    语句查找 `en` 或 `fr`，在过程中将 `$language` 和 `$filename` 变量分配为正确的详细信息（默认加载英语）。
- en: Next, we load the `$language` and `$filename` variables into the `$change_lang`
    array and write to the session with `$this->session->set_userdata($change_lang);`.
    We finish by redirecting back to `public function index()`, which will send us
    back to the beginning with a new language loaded.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将 `$language` 和 `$filename` 变量加载到 `$change_lang` 数组中，并使用 `$this->session->set_userdata($change_lang);`
    写入会话。最后，我们通过重定向回 `public function index()` 来结束，这将带我们回到起点，并加载新的语言。
