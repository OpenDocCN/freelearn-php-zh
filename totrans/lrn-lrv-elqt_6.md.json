["```php\n  public function boot(DispatcherContract $events)\n  {\n      parent::boot($events);\n\n      User::created(function($user)\n      {\n          // doing something here, after User creation...\n      });\n  }\n```", "```php\n  User::saved(function($user)\n    {\n        // doing something here, after User save operation (both create and update)...\n    });\n```", "```php\n  User::creating(function($user)\n    {\n      if(ends_with($user->email, '@deniedprovider.com'))\n      {\n        return false;\n      }\n    });\n```", "```php\n  User::created(function($user){\n\n    Mail::send('emails.welcome', ['user' => $user], function($message) use ($user)\n    {\n        $message->to($user->email, $user->first_name . ' ' . $user->last_name)->subject('Welcome to My Awesome App, '.$user->first_name.'!');\n    });\n\n  });\n```", "```php\n  Book::created(function($book){\n\n    $newBookNotifier = new NewBookNotifier();\n    $newBookNotifier->forAuthor($book->author->id);\n\n  });\n```", "```php\n  class BookObserver {\n\n    public function creating($book)\n    {\n      // I want to create the $book book, but first...\n    }\n\n      public function saving($book)\n      {\n          // I want to save the $book book, but first...\n      }\n\n      public function saved($book)\n      {\n          // I just saved the $book book, so....\n      }\n\n  } \n```", "```php\n  Book::observe(new BookObserver);\n```", "```php\n  class BookObserver {\n\n    public function creating($book)\n    {\n      $somethingGoesWrong = true;\n\n      if($somethingGoesWrong)\n      {\n        return false;\n      }\n    }\n\n  }\n```", "```php\n  <?php\n\n  namespace App\\Observers;\n\n  class WelcomeUserObserver {\n\n    public function created($user){\n\n      Mail::send('emails.welcome', ['user' => $user], function($message) use ($user)\n      {\n          $message->to($user->email, $user->first_name . ' ' . $user->last_name)->subject('Welcome to My Awesome App, '.$user->first_name.'!');\n      });\n\n    }\n\n  }\n```", "```php\n  /**\n   * Register any other events for your application.\n   *\n   * @param  \\Illuminate\\Contracts\\Events\\Dispatcher  $events\n   * @return void\n   */\n  public function boot(DispatcherContract $events)\n  {\n      parent::boot($events);\n\n      User::observe(new WelcomeUserObserver);\n  }\n```", "```php\n  <?php\n\n  // file: app/Observers/CustomerNewAuthorObserver\n\n  namespace App\\Observers;\n\n  class CustomerNewAuthorObserver {\n\n    public function created($author)\n    {\n\n    }\n\n  }\n\n  <?php\n\n  // file: app/Observers/LibrarianAuthorObserver\n\n  namespace App\\Observers;\n\n  class LibrarianAuthorObserver {\n\n    public function created($author)\n    {\n\n    }\n\n    public function deleted($author)\n    {\n\n    }\n\n  }\n\n  <?php\n\n  // file: app/Observers/AuthorsWithoutBooksObservers\n\n  namespace App\\Observers;\n\n  class AuthorsWithoutBooksObservers {\n\n    public function deleted($author)\n    {\n\n    }\n\n  }\n```", "```php\n  <?php\n\n  // file: app/Observers/CustomerNewAuthorObserver\n\n  namespace App\\Observers;\n\n  class CustomerNewAuthorObserver {\n\n    public function created($author)\n    {\n      // getting all users...\n      $users = \\App\\User::all();\n\n      foreach($users as $user)\n      {\n        Mail::send('emails.created_author_customer', ['author' => $author], function($message) use ($user)\n        {\n            $message->to($user->email, $user->first_name . ' ' . $user->last_name)->subject('New Author Added!');\n        });\n      }\n    }\n\n  }\n```", "```php\n  <?php\n\n  // file: app/Observers/LibrarianAuthorObserver\n\n  namespace App\\Observers;\n\n  class LibrarianAuthorObserver {\n\n    public function created($author) {\n      Mail::send('emails.created_author_librarian', ['author' => $author], function($message) use ($author)\n      {\n          $message->to('librarian@awesomelibrary.com', 'The Librarian')->subject('New Author: ' . $author->first_name . ' ' . $author->last_name);\n      });\n    }\n\n    public function deleted($author) {\n      Mail::send('emails.deleted_author_librarian', ['author' => $author], function($message) use ($author)\n      {\n          $message->to('librarian@awesomelibrary.com', 'The Librarian')->subject('New Author: ' . $author->first_name . ' ' . $author->last_name);\n      });\n    }\n\n  }\n```", "```php\n  <?php\n\n  // file: app/Observers/AuthorsWithoutBooksObservers\n\n  namespace App\\Observers;\n\n  class AuthorsWithoutBooksObservers {\n\n    public function deleted($author) {\n      $authorsWithoutBooks = \\App\\Author::has('books', '=', 0)->get();\n\n      if(count($authorsWithoutBooks) > 0){\n        Mail::send('emails.author_without_books_librarian', ['authorsWithoutBooks' => $authorsWithoutBooks], function($message)\n        {\n            $message->to('librarian@awesomelibrary.com', 'The Librarian')->subject('Authors without Books! A check is required!');\n        });\n      }\n    }\n\n  }\n```"]