- en: Chapter 10. Running Your Website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, the vast majority of the development for the new site is complete! You
    should also feel confident that, from a development perspective, you can respond
    to whatever demands the site throws at you and work with Drupal with a high degree
    of proficiency. Like all things in the computing world, however, it is never sufficient
    to build something and then leave your creation to run by itself. There is always
    work to be done to ensure that everything runs smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Often, you will find that there are certain jobs that need to be performed every
    now and then that are not specifically related to Drupal, but are intrinsic to
    working with websites in general. These tasks can vary greatly in nature, but
    all those discussed here will be useful at some stage during the life of your
    website, even if you don't need them right now.
  prefs: []
  type: TYPE_NORMAL
- en: One of the problems with presenting a chapter like this is that we can't possibly
    hope to cover each and every nuance of the huge array of different platforms on
    which Drupal can be run. Internet Service Providers (ISPs) offer wildly varying
    packages, which can either be totally bereft of any type of helpful functionality,
    or packed full with all the latest gadgets—most ISPs offer a large variety of
    packages under one roof.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, we will look at functionality that is in common use and that,
    in the event you do not have access to the same software, will clearly demonstrate
    the tasks you need to perform so that you can still successfully operate with
    the software you *do have access to*. For example, by using the Apache2Triad package,
    we already have certain useful technologies that we can make use of on the development
    machine, such as phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It may be helpful to read through this chapter before selecting a hosting package
    (assuming you haven't already) so that you can get a feel for the type of functionality
    that you will need in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also a few other web-related activities inherent to Drupal that we
    should take the time to look over quickly. As a result, this chapter will talk
    about:'
  prefs: []
  type: TYPE_NORMAL
- en: Making backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cron and scheduled tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throttling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Website activities—including search engine optimization and user maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Armed with the information presented in this the final chapter, you will be
    a fully equipped Drupal-website administrator. However, the experience you gain
    from running a live website in itself should prove to be far more valuable than
    this humble book. Hopefully, you will find the entire experience richly rewarding
    and share your hard-won knowledge with the rest of the community in the future.
  prefs: []
  type: TYPE_NORMAL
- en: We're on the home straight, so let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are plenty of reasons to make backups of both the file system and database.
    As mentioned several times throughout the course of the book, you should back
    up anything that is at risk of being damaged whenever you modify code, or add
    a new module, or even upgrade versions of Drupal. It sounds like a real pain to
    do this because the vast majority of the time, nothing goes wrong with the application.
    However, sooner or later, for some unfathomable reason, if you don't make backups,
    you *will* get stung in precisely the most painful spot.
  prefs: []
  type: TYPE_NORMAL
- en: Most especially, corrupting or breaking a database, which in turn leads to a
    loss of precious data, can be a real pain in the… back end of your application!
    So, while it is fairly easy to back up the files on the file system by simply
    making copies of the directories in question, or indeed copying the entire `drupal`
    folder (whatever you have named it), it is of paramount importance that you learn
    how to back up the database too, because this is not as trivial—it will become
    easy with practice, though.
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing, it is important to have a *strategy* for backing up files,
    folders, and data. It is good idea to back up the entire site at regular intervals,
    as well as backing up the database even more frequently. These backups should
    be clearly marked so that you know when they were made, making it easy to determine
    which one to use in the event of some sort of disaster. You might also consider
    holding these backups away from the main file system, perhaps on a CD, so that
    if something really bad happens, you don't have to rely on your host's disaster-recovery
    policy; you have your own.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways of backing up your database (or any part of it) that we will
    consider here. One way is to make use of phpMyAdmin, which comes as part of the
    Apache2Triad package. Let's start with that.
  prefs: []
  type: TYPE_NORMAL
- en: phpMyAdmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: phpMyAdmin is an exceptionally popular and commonplace tool for interacting
    with MySQL via the Web. Instead of having to learn how to use the MySQL command-line
    client, phpMyAdmin provides us with a graphical interface, which makes it a lot
    easier to view and maintain databases tables and content. Issuing commands is
    also made easier with the interface for many of the most commonplace data-related
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps can be followed in order to create a backup with phpMyAdmin:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into phpMyAdmin and select the relevant Drupal database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Export** tab along the top of the page, and set up the options
    as shown here:![phpMyAdmin](img/1800_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the screenshot, all the tables were selected for backup, all the Structure
    checkboxes were selected in order to prevent us having to manually drop a corrupted
    database, and a useful name (which automatically contains the database name once
    the backup file is generated) was provided—appending the date as shown is a good
    idea as it will help you to keep track of which backup is which.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Go** once you are satisfied with your options, and this will then create
    a SQL file (although there are other formats to choose from such as LaTeX or XML)
    from which you can recreate the database if needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have a backup file, it is a simply matter of causing MySQL to run
    its contents in order to recreate the database. In order to do this, click on
    the **SQL** tab at the top of the page, and enter the name of the `.sql` file
    you would like to run against the database, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![phpMyAdmin](img/1800_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That makes life fairly simple, but it isn''t the only way. If you have gotten
    used to using the command line, or simply prefer it, then we have already seen
    how it is done, when we issued the command to load the original database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You would simply modify the path and filename to reflect the specifics of your
    new backup file, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Another way of creating backups is by using the `mysqldump` utility from the
    command line.
  prefs: []
  type: TYPE_NORMAL
- en: The mysqldump Utility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is probably worthwhile spending some time using this because it provides
    greater flexibility should you ever need to perform anything out of the ordinary.
    I will confess, though, that for most database‑related tasks phpMyAdmin will perform
    admirably. If you don't have access to phpMyAdmin on your hosted site, or if you
    are keen to get to know `mysqldump`, then by all means continue…
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a backup, simply type in something like the following at the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a backup file called `drupal_06_11_05.sql` in the current
    directory. You can then ensure that this has worked by viewing the contents of
    the file, which will contain reams and reams of SQL statements. There are plenty
    of different options that you can use to get a variety of different types of backup
    file; you can simply type in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: in order to obtain a list of what's available. `mysqldump` is a powerful and
    flexible tool, and knowing how it works will benefit you in the long run if you
    are going to attempt some more advanced backup options.
  prefs: []
  type: TYPE_NORMAL
- en: To reiterate, it is good practice to back up your database on a regular basis,
    regardless of whether your need to do so for upgrading purposes as doing this
    will protect you from a total loss of data in the event that some sort of disaster
    destroys the database or loses its information.
  prefs: []
  type: TYPE_NORMAL
- en: Cron and Scheduled Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to keep the site running smoothly and keep it up to date, there are
    a variety of chores that need to be performed on a regular basis. For example,
    we saw earlier in the book that the aggregator module needed to be run on a regular
    basis so that it could update all its feeds and so forth. The Drupal developers
    are well aware of all the tasks that need to be handled; so they bundled everything
    up into one handy script—cron.php.
  prefs: []
  type: TYPE_NORMAL
- en: You need to set the **crontab** or **scheduled task** to execute the `cron.php`
    script, which is housed in the main folder of your Drupal installation, so that
    it can perform all the necessary tasks. The cron script basically searches through
    the site and executes any tasks that apply to modules or other things (like log
    handling) so that they all stay updated.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how to control the crontab, followed by setting up a scheduled
    task for the Windows users among us.
  prefs: []
  type: TYPE_NORMAL
- en: The Crontab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are not particularly keen to learn how to make use of the crontab on
    your hosted site, then feel free to skip to the section entitled *Poormanscron*
    a little later on in this chapter. It is recommended that you do learn how to
    make use of the crontab regardless, because it will no doubt come in handy someday
    when your Drupal site is not immediately available.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the variables set in the crontab are numerical constants, with the exception
    of the asterisk character, which is a wildcard that allows any value. The ranges
    permitted for each field are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Minutes: 0-59'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hours: 0-23'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Day of month: 1-31'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Month: 1-12'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Weekday: 0-7 (Sunday is either 0 or 7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can include multiple values for each entry, simply by separating each value
    with a comma. The command you wish to issue can be any shell command, and can
    be used to execute web pages, like the `cronfeed.php` file. Many hosting companies
    will have an interface such as the following one, which allows you to work with
    the crontab easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Crontab](img/1800_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the final entry you can see (hopefully) that the `cron.php` script is set
    to run at midnight every day using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: whereas, for example, the first task is set to run every hour (remember to substitute
    your own site's URL in place of the highlighted code in the previous snippet).
    Notice too that the `php` command was not used to execute the cron script as it
    was for the other two scripts—this is because the `cron.php` file needs to be
    accessed as a web page so that certain environment variables are properly set.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set your cron job to run at regular intervals to ensure that your site is kept
    as up to date as possible! It is recommended that `cron.php` is run several times
    a day.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Scheduled Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the off chance you are using a Windows-based server, or simply wish to enable
    scheduled tasks on your Windows PC while you are developing, you can make use
    of the **Scheduled Task** wizard. The following instructions, taken from the Drupal
    site, explain exactly how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Start | Programs | Accessories | System Tools | Scheduled Tasks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click **Add Scheduled Task**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Scheduled Task** wizard will appear. Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the program to run. Choose your **browser** from the list (for example,
    Internet Explorer or Firefox). Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the task a **Name**, such as **Drupal Cron Job**, and choose the **Frequency**
    with which to perform the task (for example, **Daily)**. Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose specific **date and time options** (this step will vary, depending on
    the option selected in the previous step). When finished, click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your **password** if prompted. Change the **username** if required (for
    example, if you'd like the task to run under a user with few privileges for security
    reasons). Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the final page, select the checkbox **Open advanced properties for this task
    when I click Finish** and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the task's setting page either by checking the checkbox at the end of
    the last step, or by double-clicking on the task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Run** box, after the text that is there now (for example, **C:\PROGRA~1\MOZILL~1\firefox.exe)**,
    enter a space and then type the address of your website's `cron.php` page in double
    quotation marks (for example, **C:\PROGRA~1\MOZILL~1\**firefox.exe **"http://localhost/drupal/cron.php")**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To set a frequency higher than **Daily** (for example, **Hourly)**, click the
    **Schedule** tab, and then click **Advanced**. Here you can set options such as
    **Repeat** task, every **1 hour** for **23 hours**. Click **OK** when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **start time** on the task to **one minute from the current time**.
    This will allow you to test the task and make sure that it is working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When all settings have been configured to your liking, click **Apply** and **OK**
    (note that you may be prompted for your password).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you find that you are unable to set a cron job to run on your host site once
    it is live, then you can use a neat trick and set your Windows scheduled task
    to access the `cron.php` script directly from your home PC instead using the instructions
    just listed. This means that the cron script is executed, depending on your settings,
    as often as your PC is online and able to access web pages.
  prefs: []
  type: TYPE_NORMAL
- en: This last point highlights how easy Drupal has made things when it comes to
    performing necessary tasks on a regular basis. All that's required is a browser
    application of some sort to access the `cron.php` script, and any tasks that need
    to be run by the Drupal site will be run. You could access this script from your
    own browser, or set your own PC to do it whenever you start it up, or any other
    number of things.
  prefs: []
  type: TYPE_NORMAL
- en: Poormanscron
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It should come as no surprise that there is a contribution that can make life
    even easier. **Poormanscron** is a contributed module that does away with the
    need to set the crontab or a scheduled task entirely.
  prefs: []
  type: TYPE_NORMAL
- en: It works by checking whether the cron script has been run in the last unit of
    time (whatever you have set this to be; by default it is every hour) each time
    a web page is browsed. If it finds that there is a cron run due, it will cause
    this to happen after the page has been served (so that the user does not have
    to wait for the tasks to complete before viewing the page).
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, Poormanscron means that you are freed from having to learn anything
    about cron jobs. This is convenient, but is also a double edged sword! It is quite
    likely that you will need to make use of cron jobs for other tasks, and if you
    use Poormanscron for Drupal, then all you are doing is postponing the time when
    you have to sit down and learn how to use the crontab or scheduled tasks. At any
    rate, you have seen examples of how to use all the options; so all that remains
    is for us to take a look at how to work with Poormanscron:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Poormanscron module from the Drupal website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the files to your `modules` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the module in the **modules** section under **administer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's all there is to it—provided your site has regular use, your cron tasks
    will run smoothly and you need not worry about accessing the `cron.php` script
    manually or setting the crontab.
  prefs: []
  type: TYPE_NORMAL
- en: 'After some time, however, you might get a bit sick of seeing logged cron messages
    all the time. If you want to administer the Poormanscron module, then head on
    over to **poormanscron** under **settings** in the administration area, to bring
    up the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Poormanscron](img/1800_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from this, there are a number of options available to control
    how often cron jobs should be run, how long to wait before retrying after an error,
    and what your logging policy should be. In this instance logging is disabled because
    there is nothing that urgently requires manual verification on the demo site (for
    the moment). If you added new software and had to confirm that it was being properly
    executed by the `cron.php` script, then you might consider switching logging back
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Throttling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every once in a while someone makes a site that becomes wildly popular. Having
    loads of people visiting a site can put some serious strain on the server's resources
    and cause all sorts of problems as the congestion builds. Even if a site is not
    exceedingly popular, it is possible that it may come under a **denial of service**
    attack from somewhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before even thinking about setting up the throttling mechanism on a site, it
    is important that you know what resources are at your disposal:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have already ensured that there are facilities in place to handle a *large
    amount of traffic*, then you have made the throttle module redundant in effect.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unsure about what resources are available on your site, check with
    the hosting service and find out what they are giving you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you anticipate there will be a need for some sort of congestion control,
    a good way to deal with surges in traffic or bandwidth usage is to enable the
    throttling mechanism that comes with Drupal, in the form of the aforementioned
    throttle module. This is easy enough to accomplish by enabling it in the **modules**
    section of the administration tool. Once that is done, you can configure how the
    module acts on the site in general by navigating to the **throttle** page under
    settings in the administration area. This will bring up the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Throttling](img/1800_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This page deals with congestion from the point of view of how many people are
    using the site. In this case, Drupal is instructed to engage the auto-throttle
    on anonymous users provided there are **300** or more online, and the same for
    authenticated users provided there are more than **100** of them online. The final
    option deals with actually limiting the amount of work the throttle mechanism
    has to do so that it itself does not become a resource hog.
  prefs: []
  type: TYPE_NORMAL
- en: '*But what if you know that it is a specific module that is consuming more than
    its fair share of resources?* In this case, you would simply enable the auto-throttle
    for that specific module in the **modules** section of the administration tool,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Throttling](img/1800_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can be done on a block-by-block basis as well, by navigating over to the
    **blocks** section and doing the same thing. *But what does throttling blocks
    ultimately mean?* Basically, if your server is under strain and you have set a
    block to be automatically throttled, it will be disabled and not contribute to
    the load on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can take a look at your log message to determine what the throttle module
    is up to at any given time. For example, I set the throttle mechanism to engage
    after only one user visited the site. The following log message was then created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Throttling](img/1800_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's not much, but at least it makes it clear when the throttle is on. Once
    the load has dropped sufficiently, a corresponding message will be sent stating
    that the throttle can be disengaged and things can return to normal.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this next point is not directly related to throttling, it is important
    that you gain some idea about the performance of your site and what you can do
    to ensure it is good. Take a look at [http://drupal.org/node/2601](http://drupal.org/node/2601)
    to learn about how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyze your site's performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the load on your servers by preventing access to certain parts of your
    site for web crawlers of various kinds, using the `robot.txt` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about Apache performance and PHP and MySQL tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any knowledge you gain now can be put to good use preemptively to guard against
    poor performance which may discourage users in the future—even though it is unlikely
    that you will notice any performance-related issues early on.
  prefs: []
  type: TYPE_NORMAL
- en: Patching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From time to time, it becomes clear that there is a bug in a module or some
    other aspect of Drupal. This is especially a concern whenever there is a major
    overhaul of the software and everyone is working frantically to keep up—since
    Drupal is only just moving to the new 4.7 version at the time of writing, this
    is more pertinent now than at any other time. When this happens, invariably people
    head to the forums to find out if anyone else has had the same problem. Often,
    as is the case with a bug, other people have also been stricken with the same
    problem and it may be that someone has been able to fix the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'If some kind soul has sorted out the problem on their machine, then it is most
    likely that they will submit a **patch** file to the forum so that it can be used
    by everyone else in order to fix their code. At this point it is important to
    realize several things:'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to have any problems, ensure you only download well-tested
    and stable software for use on your site. Often CVS versions of a module still
    contain bugs or errors, and so it may be better to wait until a module is *released
    and tested for your specific version of Drupal*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch files are not specific to Drupal. They are simply files that explain a
    list of lines of code that should be added or removed in such a way that it is
    possible for a **patch utility** to implement those changes without the need for
    human intervention.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch utilities are not native to Windows machines—they come with Unix-based
    operating systems such as Linux.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux users will need to take some time to learn how to make use of the patch
    utility if they find they need to implement it. Windows users need to go a step
    further and download a patch utility first. Luckily there is a download of common
    Unix utilities available at [http://unxutils.sourceforge.net/](http://unxutils.sourceforge.net/).
    This contains the patch utility among other things, and you will need to extract
    the content to a folder—the `patch.exe` file will be within the `usr\local\wbin`
    folder in whichever directory you extracted the files to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `patch.exe` file can now be used just like any other command-line utility.
    We have already used the `mysql` command utility several times, so you have some
    experience with this. The general syntax when using patch is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case the `originalfile` is the file to which the changes should be
    applied, and `patchfile` is clearly the patch file that contains the changes to
    be implemented. There are a host of options that you can look through, so check
    out the man page for the patch before working with it. You can find one at [http://www.hmug.org/man/1/patch.php](http://www.hmug.org/man/1/patch.php).
    A typical command might look something like this (of course, you need to ensure
    that you enter the correct file paths to your files if you are not working in
    one directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now there is an important path-related issue that needs to be resolved here.
    If you would like to use `patch` from anywhere on the command line, you need to
    add its file path to your **Path** system variable—otherwise, you would have to
    navigate to the `usr\local\wbin` folder on the command line before using `patch`
    each time (you could alternatively add `patch.exe` to a folder already in your
    **Path**, but it is probably better to keep everything separate).
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the **Control Panel** and click on **System**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Advanced** tab and click on **Environment Variables**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the path to the `patch.exe` file into the **Path** environment variable
    in the **System variables** section as shown here:![Patching](img/1800_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are done, click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that each path set in the **Path** environment variable is separated by
    a semi-colon. You must ensure that you do not change anything other than adding
    the single path; otherwise you may well break other important applications.
  prefs: []
  type: TYPE_NORMAL
- en: With that done, you now have access to the patch utility from anywhere on the
    command line. The important question now becomes whether or not to use a patch
    file. *How do you know whether you need a patch?* The answer to this really lies
    in searching Drupal for an answer to any given problem you might have—often there
    are patches submitted on the module's download page, so make sure you search through
    this as well as look through the forums for more info.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, just because a patch has been made available does not necessarily
    mean that it will fix the problem. Often, you will find that patches themselves
    create other problems. For example, viewing the issues page for the Flexinode
    module shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Patching](img/1800_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the time of writing, there were several patches available for several different
    things. Depending on what you needed done, you would:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the relevant patch file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download it to your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the patch utility to implement the patch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attempt to use the updated code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that it is in fact a patch file you are downloading and not an entire
    file that is intended as a replacement. Patch files will more often that not end
    with a `.patch` extension. As mentioned, the best way to avoid problems is to
    only use code that has been proven to be reliable, failing which, it is more than
    likely you will need to practice implementing patches—enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: Website Activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have developed your site and have it up and running on the live servers,
    you will find that your ISP probably offers a fair amount of toys for you to play
    around with. Some of these can be very useful for the budding website administrator.
    *But what could we possibly need, now that the entire site has been built?*
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty of different tasks that still lie ahead of you. For example,
    are you sure that malicious people out there can't hotlink to your site and reduce
    your bandwidth? *What is hotlinking? What is bandwidth?* These questions constitute
    only a very small part of the types of concerns that must take focus once development
    is completed. I have to admit, that while the subject of the book was to *build
    a site*, that task is only one side of the coin!
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of the demo site, the following administration panel is provided
    by the hosting service provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Website Activities](img/1800_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Obviously, there are a lot of toys to play with here and it is recommended that
    you spend some time finding out what is available for you to use and how to use
    it. Knowing what you have available is very important because it means you are
    better able to plan *how you work*. For example, the demo site's hosts offer an
    automated **Search Engine submit** facility that allows the new website to be
    submitted for indexing to *all the major search engines—much* better than simply
    waiting around for the site to begin appearing on them.
  prefs: []
  type: TYPE_NORMAL
- en: Another important thing to note here is that most hosting services will offer
    a full array of statistics for your website. Things like where people have come
    from, how many accessed the site, which pages are being accessed, and so on. Drupal
    comes with modules that do pretty much the same thing, so check to see whether
    the site's native statistics are sufficient or whether you need to consider installing
    a new module—something like the **GraphStat, Tracker, Watchdog**, or **Recorder**
    modules may be more what you have in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since it is possible you have an entirely different set of options available
    on your hosted site, we won''t discuss this any further here, but there are still
    a couple of other matters that warrant attention. Let''s begin with one of the
    most commonly requested: **Search Engine Optimization**, or **SEO**.'
  prefs: []
  type: TYPE_NORMAL
- en: Search Engine Optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most common goals for a website is to appear high up on the big search
    engine rankings. As you should know, having a good ranking increases the chances
    of potential users finding your site among the mass of other sites. *So what is
    it that you can do to make your site rank as highly as possible without actually
    having to pay anyone to do it for you?*
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no straight answer to this, unfortunately, and many people will give
    you just as many different answers. However, there is a core set of tasks you
    can take up that are known to help—they might vary in importance, but it is probably
    worth performing all of them. The following table highlights the most important
    optimizations or tasks, which you should consider performing (where possible):'
  prefs: []
  type: TYPE_NORMAL
- en: '| Optimization | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Write web-enhanced copy | IMPORTANT: Think about how your target users would
    find your site. *What type of words would they use to find a site like yours?*
    Once you have come up with a list of key words and phrases, ensure that the writing
    on your site makes use of these phrases whenever possible.If you are using Google
    AdWords, then you can check the popularity of various search terms yourself—simply
    put them forward as potential target keywords and check on their stats, which
    Google provides before they are added.For example, if you had a site that deals
    with mobile gadgets, and you wanted to make the phrase **cellular phone** a term
    that you rank highly on, then instead of writing something like:**This device
    can be used to call other people**, you should write:**This G1 super cellular
    phone, can call any other cellular phone from wherever you are**.Admittedly, you
    cannot control the content of other people''s comments and pages, but this would
    still apply to any and all standard pages you write—such as the *introduction*
    page, *about us*, or *FAQ*, or even your own personal blog. |'
  prefs: []
  type: TYPE_TB
- en: '| Use meaningful file names | While this is not as important as the first point,
    it certainly will help to have everything named meaningfully, because search engines
    do look at file names. Instead of naming a page `19`, you should name it something
    like `awesome_webpage.html`. Don''t go overboard on this because it is not too
    important.Look through the modules available with help for renaming files if this
    appeals to you—something like **Node (key)words** should do the trick. |'
  prefs: []
  type: TYPE_TB
- en: '| Use meaningful anchor text | IMPORTANT: Search engines, in particular Google,
    place a large amount of emphasis on the anchor text used in links. As a result,
    make sure all your links have meaningful text associated with them. For example,
    you would rewrite the following sentence:`Donate to the Wildlife community <a
    href ="<yourlink>">here</a>`.to:`Donate to the <a href ="<yourlink>">Wildlife
    community</a> here`.The reason for this is that the word **here** is not particularly
    meaningful to a search engine, even though humans can easily make the connection.
    For the sake of your rankings, simply move the link to the key phrase **Wildlife
    community** to place more emphasis on it for the search engine. |'
  prefs: []
  type: TYPE_TB
- en: '| Write meaningful metatags | As many people will tell you, metatags have become
    less and less important as time goes by. However, they are still useful, and you
    should at least go to the effort of filling them out properly. The two metatags
    that you should consider making use of are the `keyword` and `description` tags.
    For example, the following shows a possible tag:`<meta name="keywords" content="CWC
    wildlife conservation biosphere">`Metatags have been the subject of some abuse,
    and you should view the W3C consortium''s guidelines for their usage: `http://www.w3.org`.In
    order to make these changes, you would have to work with your theme—most likely
    the `page.tpl` file, or whatever is its equivalent! |'
  prefs: []
  type: TYPE_TB
- en: '| Manage your links | IMPORTANT: A high level of importance is placed on the
    perceived popularity of a website. Search engines can judge the popularity of
    a website by looking at how many links there are to the site, and how popular
    the sites that link to it themselves are. For this reason, you should ensure that
    you link to and link from only sites that you feel are suitable partners.Effectively,
    you should search for as many relevant link pages as possible, or actually speak
    to the relevant sites to determine whether you can provide mutual links. The more
    links you have from popular sites, the better your ranking will be. You can also
    try to get one-way links to your site—these are also rated highly by search engines.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Write meaningful `alt` tags for images | Search engines don''t see pictures
    like humans do, so there is nothing you can do about images… *or is there?* Instead
    of naming your images `02_03.jpg`, you might consider giving them names like `cruel_hunter.jpg`.
    Don''t stop there either. Instead of adding an image like this:`<img src="img/cruel_hunter.jpg">`write
    it like this:`<img src="img/cruel_hunter.jpg" alt="Hunter making his kill ">`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Submit your site to search engines and online directories | Make sure your
    site is listed wherever possible. Most hosting packages provide an automated SE-submission
    facility, which will automatically forward your site to search engines for indexing.
    Otherwise, look for other SE web page submission tools, or search out your own
    lists and directories to become part of. |'
  prefs: []
  type: TYPE_TB
- en: '| Read up on lists, forums, and online tutorials | There is a lot of helpful
    information out there. Make sure you do your own research and come up with an
    SEO policy that is right for you. |'
  prefs: []
  type: TYPE_TB
- en: You will find that if you are prepared to put in the time to develop your links
    and constantly upgrade your site, you will eventually recoup the benefits that
    accrue over time. However, don't expect everything to happen overnight—gaining
    popularity can be a tedious process!
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is quite likely that while some people register with the full intention of
    making regular use of your site, they will move on and their account remains hanging
    around without actually doing anything. It might be prudent to add the **User
    Maintenance** module early on to keep track of how and whether your users are
    active, so that you can remove those who don't meet certain criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and download the module off the site. It requires a bit of work to
    get ready:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the files to your `modules` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `.sql` script against the database (remember to have a backup available)
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that you replace the highlighted file path with the one that reflects
    your setup if need be.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable the module in the **modules** section under **administer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To use the module, head on over to the **settings** section under **administer**
    once the module is enabled. In the drop-down list in the menu you will notice
    that there is now a new **user_maintenance** menu item available. Click on that
    to bring up the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Maintaining Users](img/1800_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it is now quite easy to select how long you are prepared to
    keep an active account on your site despite the fact that the user has not logged
    on after registering. The reason it is wise to get this contribution up and running
    as soon as possible is that it cannot work retrospectively. In other words, if
    you run into this problem after three years of collecting wasted accounts, this
    contribution cannot tell which accounts it should delete; it only works for those
    accounts that were created while it is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has rounded off the picture painted by the previous chapters by
    taking a look at some of the most important website-related chores that you will
    have to undertake. Knowing how to make backups at the click of a button, or being
    able to tell who is using your site for what purposes and when, gives you the
    power to maintain and manage your site efficiently and with a minimum of fuss.
  prefs: []
  type: TYPE_NORMAL
- en: With the end of this chapter, we come to the end of the book. For those of you
    who now need to upload your new site your live domain, the appendix contains further
    instructions on deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations on finishing the book, and I wish you all the best in your future
    endeavors on the Web. Please remember to take the time to give back to the Drupal
    community so that it can continue to flourish and help others.
  prefs: []
  type: TYPE_NORMAL
