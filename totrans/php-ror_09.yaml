- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bringing It All Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen how to use controllers, views, and models in a somewhat
    detached manner. In the previous chapter (*Models, Databases, and Active Record*),
    we manipulated data on our database. However, we didn’t see how to interact with
    the database data from our controller, much less how to load that database data
    into our view. In this chapter, we are going to see how everything comes together
    – that is, we’ll load a model from the controller and pass the model data to our
    view so that the end user will see data on the browser. We will also do the reverse,
    which is getting data from the user into our database, starting from the view
    and ending on the model. Furthermore, we will also learn the Rails way to perform
    these actions, as they are quite different from the way we would do these tasks
    in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'With models, views, and controllers in mind, in this chapter, we will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our initial application with generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing data the Rails way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not, I repeat, do not reinvent the wheel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along this chapter, we will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Any IDE to view/edit code (e.g., SublimeText, Visual Studio Code, Notepad++
    Vim, Emacs, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For macOS users, you will also need to have Xcode Command Line Tools installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby version 3.1.1 or later installed and ready to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Git client installed on your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code presented in this chapter is available at [https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/).
  prefs: []
  type: TYPE_NORMAL
- en: Project preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to setting up our application, we are going to do some additional configuration,
    depending on the operating system. We will separate the configuration into two
    sections – Windows configuration and Linux-based systems (including macOS).
  prefs: []
  type: TYPE_NORMAL
- en: Windows configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In [*Chapter 7*](B19230_07.xhtml#_idTextAnchor103), we configured our Windows
    environment to use **rbenv** to be able to use Ruby 2.6.10\. If you haven’t done
    so, please go back to the *Installing Ruby on Rails in Windows* section, as this
    is required for this chapter. For Rails 7 (which we will install in this chapter),
    we will require Ruby 3.1.1 installed and some dependencies that aren’t easily
    available for Windows. We will use the Git SDK’s bash shell (which we also installed
    in [*Chapter 7*](B19230_07.xhtml#_idTextAnchor103)) to solve this issue. So, let’s
    open a Windows PowerShell and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open a Git Bash console, which looks and behaves a lot like a Linux
    shell. Let’s confirm that we have Ruby available by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This should output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re not familiar with this version of Ruby, it’s because it comes with
    the Git SDK. Now, let’s install bundler for Ruby 3.1.3 with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s update our system’s bundler with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to set up our application.
  prefs: []
  type: TYPE_NORMAL
- en: Linux-based system configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For macOS and Linux-based systems (Ubuntu and Debian), we’re going to depend
    on rbenv to install Ruby 3.1.1\. If you haven’t installed rbenv, please refer
    to [*Chapter 7*](B19230_07.xhtml#_idTextAnchor103) to view the instructionson
    on how to install rbenv on Linux. With rbenv available, let’s install another
    version of Ruby with the following command on a shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that Ruby 3.1.1 has been installed, let’s set the default Ruby to Ruby
    3.1.1 with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s confirm that the correct Ruby version has been activated by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This should output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We should install bundler for this version of Ruby with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, we’re ready for our next Rails project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this exercise, we will have a hypothetical scenario in which we are Thomas
    A. Anderson, and we work for a respectable software company. We will play the
    part of a junior web developer in terms of our knowledge of Rails, and we will
    be assigned a simple task. The client has requested a simple address book structure
    where they can save their friends’ contact information – name, last name, email,
    and phone number. So, let’s get to work. Make sure you have Ruby version 3.1.1
    or above installed, or we might encounter issues with the project. We could download
    a template application that we already have or clone it from GitHub. In case you
    haven’t done so, open a terminal and type the following `git` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’ve already done so, just navigate into the `chapter09/rails7_original`
    folder inside our project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For this small project, the client requested that we use Rails 7, as it’s the
    version they have used in other projects. It also gives us a chance to see Rails
    7 in action. Now, let’s install our project dependencies with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm our setup was done correctly, let’s run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should read something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is where our work as a Rails developer starts. We’re going to use
    some Rails magic to generate most of our code. Let’s generate a `friends` controller
    with all the methods that we are going to be calling – `index`, `new`, `edit`,
    `update`, `destroy`, and `create`. Let’s go to our shell and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This should generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Coming from the PHP world, and more specifically, Laravel, you may find the
    previous command slightly familiar. In Laravel, you’d generate an equivalent controller
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: They both generate similar functionality (the `friends` controller) and the
    `--resource` option at the end generates the correct HTTP verbs. In Rails, the
    `generator` command we just ran takes as its first argument the controller name
    (Friends) and the rest as controller methods. The command is also very verbose
    regarding what it actually generates. It not only created our controller but also
    a view for each of the methods we passed to the command. We can see this by opening
    the `app/views/friends/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Generated views for the Friends controller](img/B19230_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Generated views for the Friends controller
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, the controller generator modified our `routes.rb` file, which
    defines all the URLs for our actions inside the controller. If we open `config/routes.rb`,
    we see our newly created routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'While this is fine and dandy, we can also do it the Rails way. Let’s delete
    all the routes and just leave two lines inside the `do` block, so our `routes.rb`
    file now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This looks a lot cleaner, though slightly cryptic, as we don’t know (yet) what
    this resource call does. The resource call generates RESTful routes for the following
    actions – `index`, `new`, `edit`, `create`, `update`, and `destroy`. This simply
    means that all these actions should be called using the correct HTTP verbs – `GET`,
    `POST`, `PATCH`, `PUT`, and `DELETE`. I don’t want to overwhelm you with too much
    information here, so to simplify this, we’ll just say we need some parameters
    through the URL, and some others to be “hidden” from the user. If you’re curious
    about RESTful and its uses, please take a look at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://guides.rubyonrails.org/routing.html](https://guides.rubyonrails.org/routing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.redhat.com/en/topics/api/what-is-a-rest-api](https://www.redhat.com/en/topics/api/what-is-a-rest-api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://aws.amazon.com/what-is/restful-api/](https://aws.amazon.com/what-is/restful-api/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ibm.com/topics/rest-apis](https://www.ibm.com/topics/rest-apis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, to the next step. Let’s generate a model that will represent our “friends”
    in the database. We’ll generate our model with the following command on the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The model generator created the migration to create a `friends` table. The
    table will have the `first_name`, `last_name`, `email`, and `phone` fields. From
    what we learned in the previous chapter, we know that we must run the migration
    to effectively generate our database structure. We’ll do that by running the following
    command on our shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If this is not new to you, it might be because other PHP frameworks have similar
    tools. For Laravel, we would execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For Symfony, we would write the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'For CodeIgniter, we would write the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We can infer from these examples in PHP frameworks that the migration tool has
    been in the web framework market for a while, and it’s here to stay.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step to our setup is going to be something we didn’t cover in the
    previous chapter, and it is related to Rails models. As an additional help for
    developers to get a working environment as soon as possible, Rails integrated
    a tool called database seeds. Seeds allow us to generate test data based on our
    model structure. I confess I cheated a little bit by providing you with an already-working
    seed file. It’s in the `db/seeds.rb` file. Let’s look at one record in that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This piece of code is pretty self-explanatory. It creates a `Friend` entry
    with the first name (`rasmus`), the last name (`lerdorf`), the email address (`rasmus@email.com`),
    and a phone number (`+1(669)1111111`). Of course, this is all fake data, but it
    will be useful for us whenever we start using the database. The last step is to
    run this seed and add these records to our database. We do this with the following
    command on our shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This command will generate the five records we find in the seeds file. This
    was all the setup we needed for our initial application. Now, it’s time to manage
    this data.
  prefs: []
  type: TYPE_NORMAL
- en: Processing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until this point, we’ve manually modified data within the database. By manually,
    I mean all inside the Rails console. However, as our project requirement is to
    let the users handle the `friends` entries, we will do so by integrating our model
    with our controller and our view so that a user can see the `friends` entries
    in a friendly interface. We will be creating a **CRUD** interface. Yes, it sounds
    ugly, but it’s the acronym software engineers came up with. It stands for **CReate
    Update Delete**, which is exactly what we are going to build – an interface to
    create, update, and delete records.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the CRUD interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to confirm that the data is, in fact, in our database. From
    our previous chapter, we know that we can call the Rails console for this, so
    let’s do that by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This should change our shell to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s type the following command on this console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show all of the friends entries on the database. It should show something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The content has been truncated for brevity, but you should see five records
    that correspond to what’s on the seed file. This output confirms that the data
    is in the database. Now, let’s exit the Rails console by typing the following
    on the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s start our Rails application with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This command should output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, open the browser of your choice and go to `http://127.0.0.1:3000/any`.
    This should show the following Rails error page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – The Rails Routing Error page](img/B19230_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – The Rails Routing Error page
  prefs: []
  type: TYPE_NORMAL
- en: 'I purposely mentioned opening a non-existing route to view this page. Whenever
    you open a route that is not registered on the `routes.rb` file, Rails shows this
    error page, which shows us all the defined routes for our application. As I mentioned
    earlier, the resource call generated a lot of routes for us that are related to
    our `friends` component. We’ll start with `root_path`. Let’s find the `root_path`
    entry on this error page. Once we find the entry, we can see that it corresponds
    to our application’s root URL (`/`), and whenever we go to this route on the browser,
    we execute the `index` method that is inside the `friends` controller, as shown
    in the last column (`friends#index`). This error page is basically a map of URL
    addresses and what action on the controller they will execute. From this page,
    we learned that we are going to need to modify the `index` method on our `friends`
    controller file in `app/controllers/friends_controller.rb`. We should see the
    following code inside this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note that all these actions were generated by the controller generator, so we
    don’t start from scratch. Also, these are all the actions that we’ll build to
    create our CRUD interface.
  prefs: []
  type: TYPE_NORMAL
- en: Listing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s focus on the `index` method. We want to show all our records on the `index`
    method, so we will now load the `Friend` model and select all of our entries in
    the database. With these changes in mind, the `index` method should now look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding the `@` symbol in front of our `friends` variable, we set the variable
    to be an instance variable. The way Rails works is that this instance variable
    is then passed to the view. Note that this is not the only way to pass data from
    the controller to the view, but it is a very simple way to do it. Now, let’s go
    back to the browser but change the URL to `http://127.0.0.1:9000/`. We should
    see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – The Rails index page](img/B19230_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – The Rails index page
  prefs: []
  type: TYPE_NORMAL
- en: 'But wait! The data that we loaded is not being shown. This is because while
    we do have Rails magic, we don’t have Rails miracles. We still have to work on
    the view. So, let’s open the `app/views/friends/index.html.erb` view and add the
    data that we just fetched from the database, with the `Friend` model. Our view
    currently looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s remove that code and add a table and a cycle to iterate inside the `@friends`
    variable. Our code in the view should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'With this code, for every friend entry on the database (`@friends.each do |friend|`),
    we will rename each entry `friend`. Note the code tags (`<% %>`) on the first
    line of code. They are very much like the PHP tags we use to embed PHP code in
    a page (`<?php ?>`), and just like the PHP tags, anything inside these tags will
    be processed as Ruby code. Since the code is simply a cycle to fetch every DB
    entry, any code after line one will be repeated for every entry in the database
    until the Ruby cycle is closed on line three. On line two, we use a different
    set of tags (`<%= %>`). These tags will not only process whatever is inside them
    as Ruby code, but they will also output the result to the browser. They are exactly
    like the PHP tags (`<?= ?>`). It’s sort of like an `echo` statement but on the
    browser. Now, let’s refresh the browser, which should show a page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – The Rails index page with data](img/B19230_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – The Rails index page with data
  prefs: []
  type: TYPE_NORMAL
- en: 'Wow! We’ve done it. We’ve loaded data from the database to the controller and
    then to the view. I don’t know about you, but the first time I saw this I was
    really excited, not only because of the result but also because I understood what
    I was doing with the framework. I hope you do too now. Unfortunately, this was
    just a test to make sure our data was being loaded correctly into the view. A
    proper grid will have titles and more fields. Let’s remove the code we just added
    to the view and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'With this change, the first six lines of code build a table and the title rows.
    On line seven, we create the cycle to iterate between each database entry. Inside
    the cycle, we show the first and the last name. Lastly, we’ve added a link to
    the `edit` action. This is to work on our next view. If we refresh the browser,
    we should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 9.5 – A Rails index table with data](img/B19230_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – A Rails index table with data
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s work on the update page of our CRUD web interface.
  prefs: []
  type: TYPE_NORMAL
- en: Updating data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To edit an entry, we first must select that entry. If we take a closer look
    at *Figure 9**.2*, we can see that the `edit_friend_path` route passes a parameter
    (`:id`). Unlike classic PHP, we do not explicitly pass parameters by the URL.
    Instead, we embed them inside the URL so that our route would be `http://localhost:3000/friends/2/edit`
    instead of `http://localhost:3000/friends?id=2`. In Rails, we seldom use explicit
    URL parameters (`?parameter_name=value`). With that in mind, as we already have
    the name of the parameter, we can use it to select a single entry. Let’s open
    our edit method on the `friends` controller in `app/controllers/friends_controller.rb`.
    The method is currently empty. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s use our model to select a single user by its ID. Our code will now
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we’ve selected the entry, let’s see some more Rails magic in action.
    Let’s open the edit view on `app/views/friends/edit.html.erb`. This should look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s delete the preceding HTML code and replace it with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Rails comes with another set of tools for tasks we do over and over. These tools
    are called *helpers*. Helpers are functions that we can call to generate a task
    for us. There are many types of helpers, but for now, we’ll use form helpers that
    assist us in building forms for data processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re interested in learning more on this topic of form helpers, please
    refer to the Ruby guides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://guides.rubyonrails.org/form_helpers.html](https://guides.rubyonrails.org/form_helpers.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, we chose the `form_with` helper to generate a form to
    update the `Friend` entry. Then, inside the form, for each field that we have
    on the database (`first_name`, `last_name`, `email`, and `phone`), we generated
    a label and a field. Lastly, we added a submit button to send the data back to
    the controller for processing. Now, let’s open our browser and click on the first
    `DETAILS` link on the index page. This will take us to the `http://127.0.0.1:3000/friends/1/edit`
    URL, and it should show the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – A Rails edit form with data](img/B19230_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – A Rails edit form with data
  prefs: []
  type: TYPE_NORMAL
- en: And voilà! With very little code, we’ve generated a form that shows the current
    field values and lets us modify these values. However, we’re still missing the
    code to modify any of these values on the database. So, let’s go back to the controller
    on `app/controllers/friends_controller.rb`, but now, we’ll add a method to help
    us process the form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our last method (`create`) is at the end of our class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add a private method called `friend_params` right after our `create`
    method. Our code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'With this method, when called, we let Rails know that the data sent through
    a form should have a `friend` index, and inside this index, it may have the `first_name`
    field, `last_name` field, and so on. In PHP terms, this would be equivalent to
    sending data in the following array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: I’m oversimplifying this process, but in essence, the method requires and allows
    certain parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to learn more about parameters, do take a look at these pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://apidock.com/rails/ActionController/Parameters/require](https://apidock.com/rails/ActionController/Parameters/require)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/rails/ActionController/Parameters/permit](https://apidock.com/rails/ActionController/Parameters/permit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For now, let’s implement this `friend_params` method. Do keep in mind that
    to show the edit form, the method we call is `edit`, but to modify the data on
    the database, we’ll call the `update` method. Currently, the `update` method is
    empty. Let’s modify the method so that it will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: With the `@friend` variable, we again select the record that we are going to
    modify. Once this record is selected, we call the `update` method on this object,
    which is where the update on the database will happen. Lastly, we’ll use the `redirect_to`
    helper to send the user to the `friends` page on the browser. This code is very
    concise and almost reads like sentences – *find friend* and *if friend is updated
    with friend parameters, redirect to friends path*. This is Ruby at its finest.
    The only thing we haven’t analyzed from this snippet of code is the `friends_path`
    helper. However, it’s simple. We’ll refer again to *Figure 9**.2*, in which we
    see a table with all of our defined routes. As we find the `friends_path` helper
    on this page, we can determine that when we use that alias, we can send a user
    to the correct controller and method (`friends#index`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s move on to creating a new `friend` entry. As with the edit page,
    let’s first generate our new entry page. In the `app/controllers/friends_controller.rb`
    file, let’s modify the empty `new` method. It should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are going to use the `form_for` helper, we need to pass an empty model
    object for the helper to be able to generate the form correctly. Let’s open the
    `new` view in `app/views/friends/new.html.erb`, which currently looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s delete the preceding content and replace it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You might have noticed that this is the exact same view as the edit page. Most
    of the time, we should not repeat the exact same code, but since we are still
    learning Rails, we get a pass here. Now, let’s go back to the controller in `app/controllers/friends_controller.rb`
    and modify the `create` method. It’s empty, but we should add some code so that
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like the `update` method, we call the `create` method with the `friend`
    params to create a new entry. Once the entry is created, we redirect the user
    to the `friends` index page. Now, let’s try it out on the browser. On the browser,
    open the `http://127.0.0.1:3000/friends/new` URL, which should show the same form
    as the edit page, but without any data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – The Rails new entry form](img/B19230_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – The Rails new entry form
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s fill the fields with new data, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – The Rails new entry form with data](img/B19230_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – The Rails new entry form with data
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on the `friends` index page, which should show the newly created
    friend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – The Rails index page with a new entry](img/B19230_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – The Rails index page with a new entry
  prefs: []
  type: TYPE_NORMAL
- en: OK, we are almost there – just a few more lines of code. The only method left
    to cover is the `destroy` method, but it’s as easy as the other methods we’ve
    coded so far.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s open up our edit view on `app/views/friends/edit.html.erb` and add another
    form at the end of the file. Our form at the end of the file should look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Beware of not modifying any of the code that was already in this `edit.html.erb`
    view at the beginning of the file. We should add the preceding code at the *end*
    of the file. This new form generates a delete button. Note how we are passing
    an additional parameter, `method:`, with the value of the `:delete` symbol. This
    will automatically make the form send the data to the appropriate `destroy` method.
    Now, let’s work on the `destroy` method on the controller in `app/controllers/friends_controller.rb`.
    As with the other methods we’ve covered so far, this method should be empty. Let’s
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'With this ominously looking code, we’re telling Rails to select a user by their
    ID, delete the record from the database, and finally, redirect the user to the
    `friends` index page. Now, let’s give it a try on the browser. Let’s open our
    browser and go to the `friends` index page: `http://127.0.0.1:3000/friends`. Click
    on the last link at the bottom, which should open the edit page that corresponds
    to Taylor Otwell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – A Rails edit page with the latest entry](img/B19230_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – A Rails edit page with the latest entry
  prefs: []
  type: TYPE_NORMAL
- en: 'Note how we now have a **DELETE** button. Let’s click on it, and just as quickly
    as we created this entry, we now have deleted it. The table should now look like
    this (without the Taylor Otwell record):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – A Rails friends index page with one less entry](img/B19230_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – A Rails friends index page with one less entry
  prefs: []
  type: TYPE_NORMAL
- en: 'And with that, my dear reader, we have successfully created our CRUD interface
    for our friend address book. We can now list the existing friends, create new
    ones, modify the existing ones, and lastly, delete any records we no longer need.
    Just so we don’t get confused as to what our controller in `app/controllers/friends_controller.rb`
    should look like at the end of this exercise, let me share the whole file again
    with all the changes we’ve made so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'While our application can now handle records, it still has room for improvement,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We could use a navigation bar or at least a link to the “new” page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should refactor the form views so that we use the same form to modify and
    add records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should use validations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should show errors if any of the actions fail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I tried to over-simplify many of these concepts to focus more on a pragmatic
    approach. However, if you are interested in a more detailed set of examples, there
    are always the guides from Ruby on Rails: [https://guides.rubyonrails.org/getting_started.html](https://guides.rubyonrails.org/getting_started.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The examples in the preceding web page will cover a far more detailed version
    of what we saw in this chapter. You could make everyone proud and take on these
    improvements on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Back to the task at hand – the hypothetical client accepted our simplified version
    of the CRUD interface. However, someone asked about security. They don’t want
    just anyone to be able to see their friend entries on the app. They want to at
    least protect the application with a login page. If you were thinking that we
    need to program this authentication component, think no more, as we have just
    the tool for this.
  prefs: []
  type: TYPE_NORMAL
- en: Do not, I repeat, do not repeat yourself
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve worked with frameworks in the past, you may be familiar with the **Don’t
    Repeat Yourself** (**DRY**) principle, even though the principle is more focused
    on coding and coding style. If you’re not, or just need a reminder, the DRY principle
    simply states that you should not repeat yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find out more details here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.getdbt.com/terms/dry](https://docs.getdbt.com/terms/dry)'
  prefs: []
  type: TYPE_NORMAL
- en: 'As much as we possibly can, we should try not to repeat our code. As an example
    in this application, we repeated the code on the `edit` and `new` views. Using
    the DRY principle, we should refactor our code so that it uses the same form for
    both actions. In the same manner, instead of building everything on your own and
    from scratch, you should reuse functions, tools, and even libraries altogether.
    One task that we as developers have done over and over is to authenticate users.
    If you have an authentication code that works, you may have even copied it from
    a previous project. However, an open source tool can improve your code. One advantage
    of using an open source tool to handle your authentication is that it’s tested
    against many more scenarios than you could have ever imagined on your own. Another
    reason to use an open source tool is that it may be ready to use and simple to
    incorporate into our project. There are several gems for user authentication,
    but for now, we’ll use one that is very easy to use called Devise: [https://github.com/heartcombo/devise](https://github.com/heartcombo/devise).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Devise is a gem that, interestingly enough, generates several Rails components
    that we can use for our application. Devise will generate views, routes, and helpers
    to assist us with our user authentication. So, let’s incorporate a new gem into
    our application. The first step is going to be to stop the Rails application server.
    Open the shell where the application is currently running and press the *Ctrl*
    key and *C*. This should stop the Rails application and return the shell to normal.
    The next step is to include the Devise gem in our Gemfile. Let’s open our `./Gemfile`
    file at the root of our project (`chapter09/rails7_original/Gemfile`), and add
    the following code right after the Rails gem line. The Gemfile should now look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s install our gem. Let’s go to our shell and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should output a message related to the devise gem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Our gem has been installed, but it still needs to run additional tasks, and
    we still need to add some configuration to our app in order for us to be able
    to use Devise. Let’s run the `install` command on our shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The outcome of this installation is a set of instructions that we must do before
    being able to use the gem in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'We must follow these post installation instructions for the gem to work properly.
    The first task refers to adding a line of configuration to our environment config
    file. Let’s do that. Let’s open `config/environment/development.rb` and add the
    following line to it. Our `config` file should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve added a line to set the `config.action_mailer.default_url_options` flag
    after the `config.action_mailer.perform_caching` flag is set. In a production
    setting, the configuration line we just added would enable password recovery through
    email. As this will not work locally, we can ignore it, but the config still needs
    to be set in place for Devise to work. The second instruction refers to having
    a root route. We can also ignore this instruction, as our application already
    includes a root route. The third task requires that we modify our application
    layout to include an HTML placeholder for errors and messages. So, let’s do just
    that. Let’s open the `app/views/layouts/application.html.erb` file. This file
    controls how our application will look. Anytime you need to make a view change
    on a general level, this is the place to go. Let’s add those placeholders so that
    our application layout now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever Devise alerts any messages regarding the login process, these placeholders
    will now show those messages (if any are present). From post installation instructions
    to get the devise gem to work correctly, we are at the last task (number 4) and
    this task can be ignored, as it refers to customizing our login views. We’re almost
    ready to use Devise, but as I mentioned before, this gem will need a database
    model to save our user data. So, let’s run the following command on our shell
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'This should output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'From analyzing this output, we can see that both a user model and a database
    migration have been created. This command also added the login routes to our application.
    Remember what we do after we create a database migration? We need to run the database
    migration so that the user structure is added to the database. Let’s do just that.
    Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output the changes made to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Our gem is now ready to be used by our application. For now, let’s limit all
    access to our application so that no method on the controller can be viewed without
    signing in. The beginning of our `app/controllers/friends_controller.rb` file
    should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding the second line of code, the `before_action` helper will perform
    the user authentication prior to executing any other action on the controller.
    Now, it’s time to try it out. Let’s go to our shell and start the Rails application
    server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Once our application is up and running, we should go back to the browser and
    open `http://127.0.0.1:3000/`, and you will be asked for an email address and
    a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – The Devise login page](img/B19230_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.12 – The Devise login page
  prefs: []
  type: TYPE_NORMAL
- en: 'If you see this form, it means that the Devise gem is working. If you try to
    view any page (e.g., `http://127.0.0.1:3000/friends/1/edit` or any other existing
    route), you should be redirected to the login page. There are two ways to create
    users with the Devise gem in place. We can use our Rails console, or we can just
    sign up. Let’s use the sign-up method. Click on the **Sign up** link, and it should
    take you to the **Sign** **up** form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13 – The Devise sign up page](img/B19230_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.13 – The Devise sign up page
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add an email address, `admin@email.com`, and `123456` as the password.
    Then, when you click on the `http://127.0.0.1:3000/` – try it. You should be able
    to see the index page again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – The authenticated index page](img/B19230_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.14 – The authenticated index page
  prefs: []
  type: TYPE_NORMAL
- en: 'As our pièce de resistance, let’s add a logout link, but only to our index
    page. Open the `app/views/friends/index.html.erb` file, and add this code to the
    end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the form looks fairly familiar. Devise uses the same `form_with` helper
    to build a form to log out with. Let’s go back to our browser and refresh the
    index view. It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – The index page with a Sign out button](img/B19230_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.15 – The index page with a Sign out button
  prefs: []
  type: TYPE_NORMAL
- en: We now have a **Sign out** button. If we click it, our session ends, and we
    are redirected to the login page again. We can log in again using the credentials
    we created a few steps back.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! Our work here is done. As always, there is room for improvement
    and further learning. This gem is super handy and has helped me solve the authentication
    piece of an application many times. One thing (among so many) that you may have
    noticed is that even though this gem uses session values to handle the authentication,
    you never see these session values, and you never handle them directly. That is
    the Rails way of doing things. We always tend to hide the session layer of an
    application with helpers. Devise comes with some helpers that will help you within
    your code to show or hide components, depending on your authentication status.
    You may want to check the `user_signed_in?`, `current_user`, and `user_session`
    helpers on the Devise documentation page. Additionally, you can add several other
    customizations that you may want to add to your authentication mechanism. Be sure
    to play around with the gem, and learn on your own what other configurations might
    be useful to you.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wow! We covered a lot of ground in this chapter. We learned how to load data
    from a model to a controller to finally show data on the view. We also learned
    how to interact with forms and impact the database with the MVC architecture of
    Rails. Last but not least, we learned how to integrate the Devise gem with our
    application to leverage our authentication mechanism, instead of building one
    from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready for our last chapter, where we’ll explore some additional
    information regarding hosting our Rails application on a server.
  prefs: []
  type: TYPE_NORMAL
