- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring the Laravel Octane Application for the Production Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters and this book in general, we have seen how to use Laravel
    Octane and implement several optimizations to improve the performance and responsiveness
    of our application. We operated mainly in the local development environment. In
    addition, we have worked at the application level.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will address system configurations, setup, and fine-tuning in a
    production environment. Understanding the specific configurations for the production
    environment is very useful, especially because the configuration of a local environment
    is typically different from the configuration of the production environment due
    to the different settings and services available.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In practice, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: A typical production architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the reference architecture can be optimized
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which specific Laravel operations can bring benefits from a performance perspective
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The deployment strategy via **Makefile**
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start with the assumption that the reader has a production environment available.
    Typically, this kind of environment can be on a virtual machine, such as one (or
    more) Amazon EC2 instances, or an environment provided by cloud PaaS solutions,
    such as *Platfrom.sh*, or by cloud servers/service providers, such as *Digital
    Ocean* or *Vultr*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: We will not address the specific installation of these environments; however,
    we will give indications of a typical architecture that combines the use of a
    web server such as nginx on one (or more) GNU/Linux-type virtual machines.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code and the configuration files of the examples described in the
    current chapter are available here: [https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch07](https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch07).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the production architecture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the local environment development scenario (as in the previous chapters),
    it is fine to use the `php artisan octane:start` command to start Laravel Octane.
    However, it may be helpful to configure a different architecture in a production
    environment where the requirements are different from a local environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Typically, in a local development environment, you need automation and configurations
    that are useful for developing new features, such as automatic service reload.
    In contrast, in a production environment, the configuration must allow for optimum
    levels of performance and reliability. Therefore, choosing a different, production-specific
    architecture in this production scenario is common.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The design of the production environment architecture we are going to address
    involves the use of a web server to initially sort HTTP requests. The web server’s
    task will be to differentiate requests for static assets (where no PHP engine
    involvement is required) from requests that require server-side processing. Usually,
    a request for a page, which requires server-side processing, might be followed
    by other requests for static assets such as CSS files, JavaScript files, and image
    files. PHP involvement is not needed for these types of files, so the web server’s
    task will be to serve these types of assets immediately, in the fastest way possible.
    On the other hand, for requests requiring PHP execution, the web server will forward
    the request to the service provided by Laravel Octane.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1: A typical production architecture](img/Figure_7.01_B17728.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: A typical production architecture'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the production environment, several steps must be performed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Place the static assets in a specific directory (we can organize the asset types
    into multiple subfolders).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the nginx (`nginx.conf` file) for acting as a proxy.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure nginx to forward the page requests to Laravel Octane.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set nginx to listen to the HTTPS protocol.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the communication between nginx and Laravel Octane as standard HTTP.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the URL generated by Laravel has to be set up as served as HTTPS (for absolute
    URL generation).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s start with managing public assets.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Managing public static assets
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you look at the directory structure of a Laravel application, you will notice
    that there is a public directory, the purpose of which is to contain static files.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The public directory also contains the built CSS and JS files (by the `npm run
    build` command). If your application needs a CSS style, you will probably set
    it in the `resources/css/app.css` file (or in the `resources/js` directory for
    the JavaScript files). Once you run `npm run build`, the CSS and JS files are
    built, and the output files are stored in the `public/build` directory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: To provide static files in HTTP responses, it is not necessary to involve the
    PHP engine. Avoiding involving the PHP engine to provide static files minimizes
    the use of resources such as CPU and memory and, consequently, also reduces response
    times.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Static files typically are files with a specific extension such as `jpg`, `jpeg`,
    `gif`, `css`, `png`, `js`, `ico`, or `html`. For static files, we could need a
    particular configuration – for example, for turning off the log, defining an expiration
    date, or adding a header. If you need to set a specific setting for the assets,
    the suggestion is to set a particular configuration for nginx in the server section
    in the `nginx.conf` file (or the file for your domain):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For files with assets extensions, I added a header (header in the HTTP response)
    named `X-Debug-Config`, for debugging purposes. The configuration was set to check
    whether `STATICASSET` value was present in the HTTP response headers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Setting nginx as a proxy
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the production environment, we are going to use nginx to reply to HTTP requests.
    We are going to configure nginx as a proxy because, for the PHP files, nginx will
    forward the requests to the Laravel Octane service.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'The nginx configuration for PHP files looks as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This typical configuration with nginx for using the PHP uses the FPM module
    via FastCGI. As mentioned in [*Chapter 1*](B17728_01.xhtml#_idTextAnchor015)*,
    Understanding the Laravel Web Application Architecture*, nginx is not able to
    run PHP scripts. To do that, nginx can be configured to forward the requests to
    the FPM module. The FPM module will run the PHP scripts and will send back the
    response to nginx. All the requests to PHP files are forwarded to the FPM socket
    communication channel (`fastcgi_pass`).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: In case you use Laravel Octane, you don’t need to use the FastCGI option to
    execute PHP scripts because the PHP scripts will be executed by the Laravel Octane
    service via the application servers (Swoole or RoadRunner).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: If you have Laravel Octane, you can start the Octane service via the `php artisan
    octane:start` command and then instruct nginx to act as a proxy, forwarding all
    the PHP requests to the Laravel Octane service.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'To set nginx as a proxy, you can set this configuration in your nginx configuration
    file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `try_files` line is very important for splitting the behavior of nginx regarding
    how to manage static resources (existing files) and dynamic resources (not existing
    files).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: If the request is for `/test.png` and the file exists in a public directory
    (because of the root directive), the file is loaded and served by nginx.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: If the request is for `/test`, it falls in the latest scenario of `try_files`
    labeled as `@octane`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Then, there is a specific section to manage all requests labeled as `@octane`.
    All these requests are sent to Laravel Octane via the `proxy_pass` directive.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all the FastCGI directives are commented out, or they are removed.
    Now, we are using the `proxy_pass` directive. The `proxy_pass` directive refers
    to the IP address and the port where the Laravel Octane service is running.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: To make the proxy configuration work, you have to set some additional parameters
    such as `proxy_http_version 1.1;` for setting the protocol version and other options
    for controlling the headers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Once you edit your nginx configuration file, you must restart the nginx process
    to apply your changes. Before restarting nginx, I suggest checking the syntax
    of the changed configuration files.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `nginx -t` command shows you whether there are any issues with your
    new configuration:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you have a successful message, you can safely restart nginx. How to restart
    the service depends on your distribution. In the case of Ubuntu, you can use the
    `service` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In general, if your Linux distribution doesn’t provide a `service` command,
    you can use the `systemctl` command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `sudo` command is used because you need to have root permission.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Once you reload nginx, you have to launch the `artisan` command for launching
    Laravel Octane.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Launching Octane
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can manually execute the `octane:start` command for a quick configuration
    test. Then, we will see how to launch Octane automatically when the system starts.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'For starting Octane, you should use the `octane:start` command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command starts Octane and accepts connections on localhost.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you need to execute Octane on a different machine (one machine used
    for running nginx, and another machine used for running Laravel Octane): you should
    allow Octane to accept all incoming requests via the `--``host` parameter:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `0.0.0.0` address means Octane will accept all incoming requests from all
    IP addresses (not just the local ones).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Launching Octane via Supervisor
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to launch and monitor a process during the boot of the system, I
    suggest doing it with Supervisor software.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'There is excellent open source software named Supervisor that you can install
    via your GNU/Linux package manager through a command such as the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once Supervisor is installed, you can set the startup script file for Laravel
    Octane.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Supervisor
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in Supervisor for other projects/commands (not just for
    Laravel Octane), you can retrieve more information on the official website: [http://supervisord.org/](http://supervisord.org/).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: The startup scripts managed by the supervisor are stored in the `conf.d` directory,
    which is inside the `/``etc/supervisor/` directory.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, `/etc/supervisor/conf.d/laravel-octane.conf`, with this
    configuration:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, you have to set some directives:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '`process_name`: This is the name used for tagging the process'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`command`: This is the command line for launching the Octane service with `octane:start`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autostart` and `autorestart`: This is to set how and when to start the process
    (automatically)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user used for launching the process (I’m using a specific one such as `deploy`)
    is usually `www-data`, which, by convention, is the user used for running the
    web server process (nginx or Apache).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '`redirect_stderr`: If the error messages have to be redirected to the log this
    is used.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stdout_logfile`: This is the file name used for the log. Make sure that one
    row for each request managed by Octane is created by default.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Supervisor supports many parameters if you are interested in a more complex
    configuration. All the parameters are documented here: [http://supervisord.org/configuration.html](http://supervisord.org/configuration.html).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set the configuration file, you can update the Supervisor configuration,
    adding the Laravel Octane configuration:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, you restart Supervisor:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or you can specifically restart just the Octane service:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This way, the Laravel Octane is launched according to the parameter defined
    on the command line (the command directive in the Supervisor configuration), and
    Laravel Octane is relaunched in case of reboot or crash.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Now, Laravel Octane has launched automatically. If you change your application’s
    source code or deploy a new version of your Laravel application, you have to reload
    the worker so that all the changes are applied to all the workers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Reloading the workers
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Every time you make some changes to your application logic, you have to restart
    the application with the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `octane:reload` command restarts the workers instanced by Octane, and in
    this way, the code is reloaded.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: Reloading the workers with php artisan octane:reload](img/Figure_7.02_B17728.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Reloading the workers with php artisan octane:reload'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know about the status (running or not) of the Laravel Octane
    service, you can use the `octane:status` command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`octane:status` shows the **Octane server is running.** message if everything
    is fine. Otherwise, it shows **Octane server is** **not running.**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3: Checking the status of Laravel Octane](img/Figure_7.03_B17728.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: Checking the status of Laravel Octane'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Listening events
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Laravel Octane internally defines some events for notifying and managing when
    something happens, such as the worker starting, a request being received, and
    so on. In a framework, if you can produce some events, as a developer, you need
    a mechanism to listen for when an event occurs. The Laravel framework provides
    the developer with a mechanism to define and create events and a mechanism to
    listen (a listener). The listener in Laravel can execute a function defined by
    the developer.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: So, in this case, using the event listener mechanism provided by Laravel, you
    can listen to some specific Laravel Octane events.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking into the Laravel Octane config file (`config/octane.php`) in the `listener`
    section, you will see that the defined events are as follows: `WorkerStarting`,
    `RequestReceived`, `RequestHandled`, `RequestTerminated`, `TaskReceived`, `TaskTerminated`,
    `TickReceived`, `TickTerminated`, `OperationTerminated`, `WorkerErrorOccurred`,
    and `WorkerStopping`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to implement a listener for the `RequestReceived`
    event, you can use the `make:listener` command to create the listener class:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `make:listener` command creates the `RequestReceivedNotification` class
    file based on the `RequestReceived` event.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'The file is created in `app/Listeners/RequestReceivedNotification.php` with
    the constructor and the `handle()` method, so you can add your logic to track
    some of the activity in the `handle()` method; for example, I’m going to log the
    IP address where the request comes from:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To enable the listener, you have to add the class to the `config/octane.php`
    file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the same way, you can also add other events you want to track.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have configured the web server for the production environment, we
    can walk through the Laravel configuration for the production environment.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Prepping a Laravel application for production
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will focus on Laravel-specific configurations for the production environment.
    We will see how to install production PHP/Laravel packages, avoiding installing
    packages for development and debugging. We will see how to optimize cache configurations,
    routing settings, and view optimization. Finally, we will see how to inhibit debugging
    options. Debugging options are very useful in development, but can slow down the
    execution of the Laravel application in production.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Installing the packages for production
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `composer.json` file, two types of packages are listed: `require` defines
    the packages for running the application in a production environment, and `require-dev`
    defines the packages for running the application in a development environment.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: By default, `composer` installs all the packages from both lists.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'If you only want to install the packages from the `require` list (production),
    you can use the `–-no-dev` option while you are installing the packages for the
    production environment:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Other than the `--no-dev` option, we are using `optimize-autoloader`. The option
    generates a data structure (an index) to map the class name, with the name of
    the file to be loaded.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: The `optimize-autoloader` option reduces the bootstrap time.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Caching config, routing, and views
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load some critical components such as the configuration files, the routing
    configuration, and the view blade templates quickly, you can use the cache commands:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You have to execute these commands every time you change certain files in your
    Laravel application in the production environment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4: Caching configs, routes, and views](img/Figure_7.04_B17728.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: Caching configs, routes, and views'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Disabling Debug mode
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When developing the Laravel application, the configuration is typically set
    to Debug mode. The parameter that controls the Debug mode is stored in the `.env`
    file, and the parameter is as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To check the status of your application, you can use the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `about` command shows the information about **Debug Mode**:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5: The about command for showing the Debug mode status](img/Figure_7.05_B17728.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.5: The about command for showing the Debug mode status'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the setting, you can change the value of the `APP_DEBUG` parameter
    to `false`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The configuration of `APP_DEBUG` set to `false` allows you to skip all the configurations
    in the code for debugging purposes (collecting and showing detailed information).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将`APP_DEBUG`配置设置为`false`允许您跳过代码中所有用于调试目的的配置（收集和显示详细信息）。
- en: 'Because you changed the configuration and the configuration is cached, the
    suggestion is to clear the configuration to see the changes in the application:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您更改了配置并且配置被缓存，建议清除配置以查看应用程序中的更改：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You should also reduce the number of log messages. Log messages are very useful
    for debugging purposes, but tracking the logs could be an expensive operation
    and could slow down the application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该减少日志消息的数量。日志消息对于调试目的非常有用，但跟踪日志可能是一项昂贵的操作，可能会减慢应用程序的运行速度。
- en: 'For example, in the `.env` configuration file, typically, you can find the
    following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`.env`配置文件中，通常可以找到以下内容：
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The levels of debugging, from most detailed (with more logs) to just tracking
    the errors, are as follows: `debug`, `info`, `notice`, `warning`, `error`, `critical`,
    `alert`, and `emergency`. My suggestion is to change the level of logs (`LOG_LEVEL`)
    in a production environment to `error` in order to only track critical information
    because reducing the number of log messages makes your application faster and
    can reduce the amount of storage needed.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 调试的级别，从最详细的（带有更多日志）到仅跟踪错误，如下所示：`debug`、`info`、`notice`、`warning`、`error`、`critical`、`alert`和`emergency`。我的建议是在生产环境中将日志级别（`LOG_LEVEL`）更改为`error`，以便仅跟踪关键信息，因为减少日志消息的数量可以使应用程序运行更快，并可以减少所需的存储量。
- en: The general suggestion is to have a specific configuration for the production
    environment, so the advice is to create a file, `.env.prod`, where you can store
    your production configuration. Then, copy the `.env.prod` file on each deployment
    to your `.env` file in the production environment.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一般建议为生产环境设置特定的配置，因此建议创建一个文件，`.env.prod`，在其中可以存储您的生产配置。然后，在每个部署时将`.env.prod`文件复制到生产环境中的`.env`文件。
- en: Deployment approaches
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署方法
- en: You can choose a deployment strategy from the numerous ones that exist.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从众多存在的部署策略中选择一个。
- en: The rule that I would recommend when choosing a deployment strategy is to avoid
    installing valuable tools for the build phase in the production environment. Because
    the approach is to limit the responsibility of the production environment to the
    delivery of ready-to-deploy assets, responsibility for executing the build process
    should not be the responsibility of the production environment. That’s why it’s
    possible to avoid installing build tools in the production environment.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择部署策略时，我推荐的规则是避免在生产环境中安装用于构建阶段的宝贵工具。因为目标是限制生产环境的责任，仅限于交付准备就绪的部署资产，执行构建过程的责任不应由生产环境承担。这就是为什么可以在生产环境中避免安装构建工具。
- en: For example, I suggest avoiding performing the build of JavaScript and CSS,
    running tests or “linting” processes, or performing static code analysis in production
    environments.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我建议避免在生产环境中执行JavaScript和CSS的构建、运行测试或“linting”过程，或执行静态代码分析。
- en: In other words, it is necessary to transfer optimized code and ready-made configurations
    directly to the production server.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，有必要直接将优化后的代码和现成的配置转移到生产服务器。
- en: This means that if there should be build operations that aim to prepare files
    and configurations for production, these should be performed in a dedicated environment
    or a CI/CD runner.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果应该有旨在为生产准备文件和配置的构建操作，这些操作应在专用环境或CI/CD运行器中执行。
- en: The build mechanism and file transfer commands in the production environment
    can be complex. Therefore, the advice is to formalize this list of commands in
    a scripting tool.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 生产环境中的构建机制和文件传输命令可能很复杂。因此，建议在脚本工具中正式化此命令列表。
- en: I use `Makefile` because this allows me to define the individual steps to be
    executed but, more importantly, determine the dependencies between steps.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用`Makefile`是因为这允许我定义要执行的各个步骤，但更重要的是，确定步骤之间的依赖关系。
- en: Typically, I define a step for compiling assets, a step for testing, a step
    for running `phpcs` (lint), a step for performing static code analysis, and a
    step for transferring files to the production environment. There are also specific
    steps for executing commands directly on the production server should the need
    arise. This number of granular steps allows me to keep each step simple.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: There are several methodologies for copying and transferring files to production;
    the advice is to find the one that is most suited to you; typically, I use **Secure
    Shell (SSH)** protocol and tools.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, again, the most crucial part is to understand that, irrespective
    of the way you transfer the files or the tool you are using, you should transfer
    files and configuration ready to be served by the production environment.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Makefile
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '`Makefile` is a file used by the `make` tools to execute commands. The format
    is quite simple; each group of commands is grouped into steps. You can specify
    the step to be executed from the command line when you start running the file
    via the `make` command.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: In the `Makefile`, all the commands are listed, and the command to be executed
    needs a parameter such as `SSH_USER` or `WEB_DIR`. My suggestion is to define
    the parameters in an external `Makefile`. Then, you can ignore (in the Git repository)
    the `Makefile` used for the parameters and commit the `Makefile` with the steps.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'In the root directory of your Laravel project, create a file named `Makefile.param`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The meaning of the parameters is quite self-explanatory; you can define the
    SSH alias and the SSH user to access the remote machine via SSH, and then you
    can specify the remote directory (on the server) where your Laravel application
    is stored (`WEB_DIR`). Then, you can set the user (`WEB_USER` and `WEB_GROUP`)
    on the server, used for running the processes on the server. Then, with `DRY_RUN`,
    you can see (and copy) the files to be copied on the server.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: For copying the file on the server, we will use `rsync`. `rsync` is a great
    tool for only copying the changed file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a `Makefile`, create a file named `Makefile.deploy` and fill it with
    the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The last line is for the `deploy` step. The `deploy` step doesn’t include commands
    to execute but consists of a list of steps to invoke sequentially.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: The first step executed will be `buildfrontend`. This step includes the `npm
    run build` command. The command will build the frontend assets.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step included in the `deploy` step is `composerinstallnodev`. The
    command executed by `composerinstallnodev` will install the packages for the production
    (skipping the dev packages):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, there is the step for copying the files on the server: `rsynca`. The
    step includes a command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the command, some variables (replaced with the values loaded from `Makefile.param.prod`
    file) are used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Makefile.param.prod` file is loaded at the beginning of the `Makefile`
    thanks to the directive including the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `rsync` command uses a list of options:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '`-r` : Recursive into directories.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-l`: Copies symlinks as symlinks.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: Copies only the changed files. The changes are detected with the `-c`
    option by comparing the checksum of the source and the target file.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-g`: Preserves the group during the copy (owner).'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o`: Preserves the user during the copy (owner).'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: Verbose output.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-z`: Compresses files during network transfer.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i`: Displays a summary.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--exclude-from 'exclude-list.txt'` option excludes from the copy all the
    files listed in the `exclude-list.txt` file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'The `exclude` file contains the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `exclude-list.txt` file lists all the files and directories that are not
    useful in the production environment. Typically, the excluded files/directories
    are package directories, storage directories, cache files, and so on.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to add the files in your application that you want to exclude and
    don’t want to add to the production environment.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'The `copyenvprod` step will copy the local `.env.prod` (where you can store
    your specific configuration for production) to the remote `.env`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `scp` command allows you to copy files via SSH protocol.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Remember to include the `.env.prod` file in the `.gitignore` file (to exclude
    it from the `git` commit).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'The `migrate` step executes the migrations on the remote server (thanks to
    the SSH command):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, the `optimize` step is executed. The `optimize` step will launch the
    caching Laravel command for routing, views, and configuration on the target machine:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, if you remember, every time you change the files in the production environment,
    you should restart the workers to apply the changes to the up-and-running Laravel
    Octane application, so the `restartworkers` step will launch:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Executing the `Makefile` from the local development environment is not suggested.
    Typically, you can launch the `Makefile` from the CI/CD pipeline. We execute the
    `Makefile` from a dedicated environment (CI/CD) for separation of concerns; the
    local environment is for development, the CI/CD environment is for building and
    executing code quality tools programmatically, and the production environment
    is for delivering assets and the application.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, if you are not using a CI/CD pipeline and you are launching the `Makefile`
    from the local copy of the sources, you must restore the dev package (for production,
    deploy the `composerinstallnodev` step, which will only install production packages).
    For restoring the dev packages, the `installdevdeps` step exists, and it will
    execute a standard `composer install` command and then clear the config:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see, the configuration of `Makefile` is straightforward. Because
    `Makefile` has strict rules about the indentation (the indentation is used to
    understand where a step starts and where it ends), the only recommendation is
    that the line indentation is done via the tab character. Once `Makefile` is ready,
    you can execute it.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the `Makefile` named `Makefile.deploy`, you can run the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `make` command accepts the name of the step to be executed as input. Optionally,
    you can also specify the `Makefile` to be parsed via the `-``f` parameter.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: With the `make deploy` command, the application is fully deployed on the server.
    The `Makefile` also includes some commands for the fine-tuning of the environment,
    such as fixing permissions of some directories, clearing the cache, and so on.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this book, we explored some ways to create a reliable and fast Laravel
    application. We used features provided by Laravel Octane with the integration
    with Swoole and RoadRunner.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: We involved some special features of Swoole, especially for caching, concurrent
    task execution, and scheduled task execution.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: We explored some practical examples, and we approached the design of the application
    differently, delegating tasks to the external executor (via the queue).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: We progressively improved the performance of the application by applying multiple
    techniques.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explained the architecture, the configuration of the tools
    used in production (nginx), and the implementation of the scripts to deploy a
    Laravel Octane application into a production environment.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Hope you enjoyed reading this book.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
