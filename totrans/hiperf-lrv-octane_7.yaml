- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Configuring the Laravel Octane Application for the Production Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产环境配置Laravel Octane应用程序
- en: In previous chapters and this book in general, we have seen how to use Laravel
    Octane and implement several optimizations to improve the performance and responsiveness
    of our application. We operated mainly in the local development environment. In
    addition, we have worked at the application level.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节和本书中，我们看到了如何使用Laravel Octane并实现一些优化来提高我们应用程序的性能和响应速度。我们主要在本地开发环境中操作。此外，我们在应用层面进行了工作。
- en: This chapter will address system configurations, setup, and fine-tuning in a
    production environment. Understanding the specific configurations for the production
    environment is very useful, especially because the configuration of a local environment
    is typically different from the configuration of the production environment due
    to the different settings and services available.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论生产环境中的系统配置、设置和微调。了解生产环境的特定配置非常有用，尤其是在本地环境的配置通常与生产环境的配置不同，因为可用的设置和服务不同的情况下。
- en: 'In practice, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们将涵盖以下内容：
- en: A typical production architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的生产架构
- en: How the reference architecture can be optimized
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何优化参考架构
- en: Which specific Laravel operations can bring benefits from a performance perspective
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些具体的Laravel操作可以从性能角度带来好处
- en: The deployment strategy via **Makefile**
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**Makefile**进行部署策略
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We start with the assumption that the reader has a production environment available.
    Typically, this kind of environment can be on a virtual machine, such as one (or
    more) Amazon EC2 instances, or an environment provided by cloud PaaS solutions,
    such as *Platfrom.sh*, or by cloud servers/service providers, such as *Digital
    Ocean* or *Vultr*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设读者有一个可用的生产环境。通常，这种环境可以位于虚拟机上，例如一个（或多个）Amazon EC2实例，或者由云PaaS解决方案提供的环境，如*Platfrom.sh*，或者由云服务器/服务提供商提供的环境，如*Digital
    Ocean*或*Vultr*。
- en: We will not address the specific installation of these environments; however,
    we will give indications of a typical architecture that combines the use of a
    web server such as nginx on one (or more) GNU/Linux-type virtual machines.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会讨论这些环境的特定安装；然而，我们将给出一个典型架构的指示，该架构结合了在（一个或多个）GNU/Linux类型的虚拟机上使用web服务器（如nginx）的使用。
- en: 'The source code and the configuration files of the examples described in the
    current chapter are available here: [https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch07](https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch07).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当前章节中描述的示例的源代码和配置文件在此处可用：[https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch07](https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch07)。
- en: Introducing the production architecture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍生产架构
- en: In the local environment development scenario (as in the previous chapters),
    it is fine to use the `php artisan octane:start` command to start Laravel Octane.
    However, it may be helpful to configure a different architecture in a production
    environment where the requirements are different from a local environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地环境开发场景（如前几章所述），使用`php artisan octane:start`命令启动Laravel Octane是可以的。然而，在要求与本地环境不同的生产环境中，配置不同的架构可能是有帮助的。
- en: Typically, in a local development environment, you need automation and configurations
    that are useful for developing new features, such as automatic service reload.
    In contrast, in a production environment, the configuration must allow for optimum
    levels of performance and reliability. Therefore, choosing a different, production-specific
    architecture in this production scenario is common.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在本地开发环境中，你需要自动化和配置，这些配置对于开发新功能很有用，例如自动服务重新加载。相比之下，在生产环境中，配置必须允许达到最佳的性能和可靠性水平。因此，在这个生产场景中，选择不同的、专门针对生产的架构是常见的。
- en: The design of the production environment architecture we are going to address
    involves the use of a web server to initially sort HTTP requests. The web server’s
    task will be to differentiate requests for static assets (where no PHP engine
    involvement is required) from requests that require server-side processing. Usually,
    a request for a page, which requires server-side processing, might be followed
    by other requests for static assets such as CSS files, JavaScript files, and image
    files. PHP involvement is not needed for these types of files, so the web server’s
    task will be to serve these types of assets immediately, in the fastest way possible.
    On the other hand, for requests requiring PHP execution, the web server will forward
    the request to the service provided by Laravel Octane.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的生产环境架构设计涉及使用Web服务器来最初排序HTTP请求。Web服务器的任务将是区分不需要PHP引擎参与的静态资产请求和需要服务器端处理的请求。通常，需要服务器端处理的页面请求可能会随后跟随着对CSS文件、JavaScript文件和图像文件等静态资产的请求。对于这些类型的文件，不需要PHP的参与，因此Web服务器的任务将是尽可能快地立即提供这些类型的资产。另一方面，对于需要PHP执行的请求，Web服务器将请求转发到Laravel
    Octane提供的服务。
- en: '![Figure 7.1: A typical production architecture](img/Figure_7.01_B17728.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1：典型的生产架构](img/Figure_7.01_B17728.jpg)'
- en: 'Figure 7.1: A typical production architecture'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：典型的生产架构
- en: 'To configure the production environment, several steps must be performed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置生产环境，必须执行几个步骤：
- en: Place the static assets in a specific directory (we can organize the asset types
    into multiple subfolders).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将静态资产放置在特定的目录中（我们可以将资产类型组织到多个子文件夹中）。
- en: Configure the nginx (`nginx.conf` file) for acting as a proxy.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置nginx（`nginx.conf`文件）以充当代理。
- en: Configure nginx to forward the page requests to Laravel Octane.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置nginx将页面请求转发到Laravel Octane。
- en: Set nginx to listen to the HTTPS protocol.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将nginx设置为监听HTTPS协议。
- en: Set the communication between nginx and Laravel Octane as standard HTTP.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将nginx与Laravel Octane之间的通信设置为标准HTTP。
- en: All the URL generated by Laravel has to be set up as served as HTTPS (for absolute
    URL generation).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Laravel生成的所有URL都必须设置为HTTPS服务（用于绝对URL生成）。
- en: Let’s start with managing public assets.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从管理公共资产开始。
- en: Managing public static assets
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理公共静态资产
- en: If you look at the directory structure of a Laravel application, you will notice
    that there is a public directory, the purpose of which is to contain static files.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看Laravel应用程序的目录结构，你会注意到有一个名为public的目录，其目的是包含静态文件。
- en: The public directory also contains the built CSS and JS files (by the `npm run
    build` command). If your application needs a CSS style, you will probably set
    it in the `resources/css/app.css` file (or in the `resources/js` directory for
    the JavaScript files). Once you run `npm run build`, the CSS and JS files are
    built, and the output files are stored in the `public/build` directory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 公共目录还包含由`npm run build`命令生成的CSS和JS文件。如果你的应用程序需要CSS样式，你可能会在`resources/css/app.css`文件中设置它（或对于JavaScript文件在`resources/js`目录中）。一旦运行`npm
    run build`，CSS和JS文件就会被构建，输出文件存储在`public/build`目录中。
- en: To provide static files in HTTP responses, it is not necessary to involve the
    PHP engine. Avoiding involving the PHP engine to provide static files minimizes
    the use of resources such as CPU and memory and, consequently, also reduces response
    times.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在HTTP响应中提供静态文件，没有必要涉及PHP引擎。避免涉及PHP引擎来提供静态文件可以最小化CPU和内存等资源的使用，从而也减少了响应时间。
- en: 'Static files typically are files with a specific extension such as `jpg`, `jpeg`,
    `gif`, `css`, `png`, `js`, `ico`, or `html`. For static files, we could need a
    particular configuration – for example, for turning off the log, defining an expiration
    date, or adding a header. If you need to set a specific setting for the assets,
    the suggestion is to set a particular configuration for nginx in the server section
    in the `nginx.conf` file (or the file for your domain):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 静态文件通常是具有特定扩展名（如`jpg`、`jpeg`、`gif`、`css`、`png`、`js`、`ico`或`html`）的文件。对于静态文件，我们可能需要特定的配置——例如，关闭日志、定义过期日期或添加头信息。如果你需要为资产设置特定的设置，建议在`nginx.conf`文件（或你的域名对应的文件）中的服务器部分为nginx设置特定的配置：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For files with assets extensions, I added a header (header in the HTTP response)
    named `X-Debug-Config`, for debugging purposes. The configuration was set to check
    whether `STATICASSET` value was present in the HTTP response headers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于带有资产扩展名的文件，我添加了一个名为 `X-Debug-Config` 的头（HTTP 响应中的头），用于调试目的。配置设置为检查 HTTP 响应头中是否存在
    `STATICASSET` 值。
- en: Setting nginx as a proxy
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 nginx 为代理
- en: In the production environment, we are going to use nginx to reply to HTTP requests.
    We are going to configure nginx as a proxy because, for the PHP files, nginx will
    forward the requests to the Laravel Octane service.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，我们将使用 nginx 来响应 HTTP 请求。我们将配置 nginx 作为代理，因为对于 PHP 文件，nginx 将将请求转发到 Laravel
    Octane 服务。
- en: 'The nginx configuration for PHP files looks as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 文件的 nginx 配置如下所示：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This typical configuration with nginx for using the PHP uses the FPM module
    via FastCGI. As mentioned in [*Chapter 1*](B17728_01.xhtml#_idTextAnchor015)*,
    Understanding the Laravel Web Application Architecture*, nginx is not able to
    run PHP scripts. To do that, nginx can be configured to forward the requests to
    the FPM module. The FPM module will run the PHP scripts and will send back the
    response to nginx. All the requests to PHP files are forwarded to the FPM socket
    communication channel (`fastcgi_pass`).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个典型的 nginx 配置用于使用 PHP，通过 FastCGI 使用 FPM 模块。如 [*第 1 章*](B17728_01.xhtml#_idTextAnchor015)
    中所述，理解 Laravel Web 应用程序架构，nginx 无法运行 PHP 脚本。为了做到这一点，nginx 可以配置为将请求转发到 FPM 模块。FPM
    模块将运行 PHP 脚本，并将响应发送回 nginx。所有对 PHP 文件的请求都转发到 FPM 套接字通信通道（`fastcgi_pass`）。
- en: In case you use Laravel Octane, you don’t need to use the FastCGI option to
    execute PHP scripts because the PHP scripts will be executed by the Laravel Octane
    service via the application servers (Swoole or RoadRunner).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Laravel Octane，你不需要使用 FastCGI 选项来执行 PHP 脚本，因为 PHP 脚本将通过应用程序服务器（Swoole
    或 RoadRunner）由 Laravel Octane 服务执行。
- en: If you have Laravel Octane, you can start the Octane service via the `php artisan
    octane:start` command and then instruct nginx to act as a proxy, forwarding all
    the PHP requests to the Laravel Octane service.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有 Laravel Octane，你可以通过 `php artisan octane:start` 命令启动 Octane 服务，然后指示 nginx
    作为代理，将所有 PHP 请求转发到 Laravel Octane 服务。
- en: 'To set nginx as a proxy, you can set this configuration in your nginx configuration
    file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 nginx 设置为代理，你可以在你的 nginx 配置文件中设置此配置：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `try_files` line is very important for splitting the behavior of nginx regarding
    how to manage static resources (existing files) and dynamic resources (not existing
    files).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`try_files` 行对于分割 nginx 在如何管理静态资源（现有文件）和动态资源（不存在文件）方面的行为非常重要。'
- en: If the request is for `/test.png` and the file exists in a public directory
    (because of the root directive), the file is loaded and served by nginx.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求是针对 `/test.png` 并且文件存在于公共目录中（由于根指令），文件将由 nginx 加载并服务。
- en: If the request is for `/test`, it falls in the latest scenario of `try_files`
    labeled as `@octane`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求是针对 `/test`，它将落入 `try_files` 标记为 `@octane` 的最新场景。
- en: Then, there is a specific section to manage all requests labeled as `@octane`.
    All these requests are sent to Laravel Octane via the `proxy_pass` directive.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有一个专门的部分来管理所有标记为 `@octane` 的请求。所有这些请求都通过 `proxy_pass` 指令发送到 Laravel Octane。
- en: As you can see, all the FastCGI directives are commented out, or they are removed.
    Now, we are using the `proxy_pass` directive. The `proxy_pass` directive refers
    to the IP address and the port where the Laravel Octane service is running.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，所有 FastCGI 指令都被注释掉了，或者被移除了。现在，我们正在使用 `proxy_pass` 指令。`proxy_pass` 指令指向
    Laravel Octane 服务运行的 IP 地址和端口。
- en: To make the proxy configuration work, you have to set some additional parameters
    such as `proxy_http_version 1.1;` for setting the protocol version and other options
    for controlling the headers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要使代理配置生效，你必须设置一些额外的参数，例如 `proxy_http_version 1.1;` 以设置协议版本和其他用于控制头部的选项。
- en: Once you edit your nginx configuration file, you must restart the nginx process
    to apply your changes. Before restarting nginx, I suggest checking the syntax
    of the changed configuration files.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你编辑了你的 nginx 配置文件，你必须重新启动 nginx 进程以应用你的更改。在重新启动 nginx 之前，我建议检查更改后的配置文件的语法。
- en: 'Using the `nginx -t` command shows you whether there are any issues with your
    new configuration:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `nginx -t` 命令可以显示你的新配置是否存在任何问题：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you have a successful message, you can safely restart nginx. How to restart
    the service depends on your distribution. In the case of Ubuntu, you can use the
    `service` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收到成功消息，您可以安全地重新启动nginx。如何重新启动服务取决于您的发行版。在Ubuntu的情况下，您可以使用`service`命令：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In general, if your Linux distribution doesn’t provide a `service` command,
    you can use the `systemctl` command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果您的Linux发行版不提供`service`命令，您可以使用`systemctl`命令：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `sudo` command is used because you need to have root permission.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sudo`命令是因为您需要具有root权限。
- en: Once you reload nginx, you have to launch the `artisan` command for launching
    Laravel Octane.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载nginx后，你必须启动`artisan`命令来启动Laravel Octane。
- en: Launching Octane
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Octane
- en: You can manually execute the `octane:start` command for a quick configuration
    test. Then, we will see how to launch Octane automatically when the system starts.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以手动执行`octane:start`命令进行快速配置测试。然后，我们将看到如何在系统启动时自动启动Octane。
- en: 'For starting Octane, you should use the `octane:start` command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Octane，您应该使用`octane:start`命令：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command starts Octane and accepts connections on localhost.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令启动Octane并在本地主机上接受连接。
- en: 'Suppose you need to execute Octane on a different machine (one machine used
    for running nginx, and another machine used for running Laravel Octane): you should
    allow Octane to accept all incoming requests via the `--``host` parameter:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您需要在不同的机器上执行Octane（一台机器用于运行nginx，另一台机器用于运行Laravel Octane）：您应该允许Octane通过`--host`参数接受所有传入请求：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `0.0.0.0` address means Octane will accept all incoming requests from all
    IP addresses (not just the local ones).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`0.0.0.0`地址意味着Octane将接受来自所有IP地址的传入请求（而不仅仅是本地地址）。'
- en: Launching Octane via Supervisor
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过Supervisor启动Octane
- en: If you need to launch and monitor a process during the boot of the system, I
    suggest doing it with Supervisor software.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在系统启动时启动和监控进程，我建议使用Supervisor软件。
- en: 'There is excellent open source software named Supervisor that you can install
    via your GNU/Linux package manager through a command such as the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为Supervisor的优秀的开源软件，您可以通过以下命令通过GNU/Linux包管理器进行安装：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once Supervisor is installed, you can set the startup script file for Laravel
    Octane.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Supervisor，您可以为Laravel Octane设置启动脚本文件。
- en: Supervisor
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Supervisor
- en: 'If you are interested in Supervisor for other projects/commands (not just for
    Laravel Octane), you can retrieve more information on the official website: [http://supervisord.org/](http://supervisord.org/).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Supervisor对其他项目/命令（不仅仅是Laravel Octane）感兴趣，您可以在官方网站上获取更多信息：[http://supervisord.org/](http://supervisord.org/)。
- en: The startup scripts managed by the supervisor are stored in the `conf.d` directory,
    which is inside the `/``etc/supervisor/` directory.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由supervisor管理的启动脚本存储在`conf.d`目录中，该目录位于`/etc/supervisor/`目录内。
- en: 'Create a new file, `/etc/supervisor/conf.d/laravel-octane.conf`, with this
    configuration:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件，`/etc/supervisor/conf.d/laravel-octane.conf`，并使用以下配置：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, you have to set some directives:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您需要设置一些指令：
- en: '`process_name`: This is the name used for tagging the process'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_name`：这是用于标记进程的名称'
- en: '`command`: This is the command line for launching the Octane service with `octane:start`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`command`：这是使用`octane:start`启动Octane服务的命令行'
- en: '`autostart` and `autorestart`: This is to set how and when to start the process
    (automatically)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autostart`和`autorestart`：这是设置如何以及何时启动进程（自动启动）'
- en: The user used for launching the process (I’m using a specific one such as `deploy`)
    is usually `www-data`, which, by convention, is the user used for running the
    web server process (nginx or Apache).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 用于启动进程的用户（我使用的是特定的一个，例如`deploy`）通常是`www-data`，按照惯例，这是运行Web服务器进程（nginx或Apache）所使用的用户。
- en: '`redirect_stderr`: If the error messages have to be redirected to the log this
    is used.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redirect_stderr`：如果错误消息需要重定向到日志，则使用此选项。'
- en: '`stdout_logfile`: This is the file name used for the log. Make sure that one
    row for each request managed by Octane is created by default.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stdout_logfile`：这是用于日志的文件名。请确保默认情况下为Octane管理的每个请求创建一行。'
- en: 'Supervisor supports many parameters if you are interested in a more complex
    configuration. All the parameters are documented here: [http://supervisord.org/configuration.html](http://supervisord.org/configuration.html).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对更复杂的配置感兴趣，Supervisor支持许多参数。所有参数都在此处有文档说明：[http://supervisord.org/configuration.html](http://supervisord.org/configuration.html)。
- en: 'Once you have set the configuration file, you can update the Supervisor configuration,
    adding the Laravel Octane configuration:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了配置文件，你可以更新 Supervisor 配置，添加 Laravel Octane 配置：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, you restart Supervisor:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你重新启动 Supervisor：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or you can specifically restart just the Octane service:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以专门重新启动 Octane 服务：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This way, the Laravel Octane is launched according to the parameter defined
    on the command line (the command directive in the Supervisor configuration), and
    Laravel Octane is relaunched in case of reboot or crash.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，Laravel Octane 将根据命令行上定义的参数（Supervisor 配置中的命令指令）启动，并且在重启或崩溃的情况下重新启动 Laravel
    Octane。
- en: Now, Laravel Octane has launched automatically. If you change your application’s
    source code or deploy a new version of your Laravel application, you have to reload
    the worker so that all the changes are applied to all the workers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Laravel Octane 已经自动启动。如果你更改应用程序的源代码或部署 Laravel 应用程序的新版本，你必须重新加载工作进程，以便将所有更改应用到所有工作进程中。
- en: Reloading the workers
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载工作进程
- en: 'Every time you make some changes to your application logic, you have to restart
    the application with the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你对应用程序逻辑进行一些更改时，你必须使用以下命令重新启动应用程序：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `octane:reload` command restarts the workers instanced by Octane, and in
    this way, the code is reloaded.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`octane:reload` 命令重新启动由 Octane 实例化的工作进程，并通过这种方式重新加载代码。'
- en: '![Figure 7.2: Reloading the workers with php artisan octane:reload](img/Figure_7.02_B17728.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2：使用 php artisan octane:reload 重新加载工作进程](img/Figure_7.02_B17728.jpg)'
- en: 'Figure 7.2: Reloading the workers with php artisan octane:reload'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2：使用 php artisan octane:reload 重新加载工作进程
- en: 'If you want to know about the status (running or not) of the Laravel Octane
    service, you can use the `octane:status` command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解 Laravel Octane 服务的状态（运行或不运行），你可以使用 `octane:status` 命令：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`octane:status` shows the **Octane server is running.** message if everything
    is fine. Otherwise, it shows **Octane server is** **not running.**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，`octane:status` 会显示 **Octane 服务器正在运行** 的消息。否则，它会显示 **Octane 服务器** **未运行**：
- en: '![Figure 7.3: Checking the status of Laravel Octane](img/Figure_7.03_B17728.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3：检查 Laravel Octane 的状态](img/Figure_7.03_B17728.jpg)'
- en: 'Figure 7.3: Checking the status of Laravel Octane'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：检查 Laravel Octane 的状态
- en: Listening events
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监听事件
- en: Laravel Octane internally defines some events for notifying and managing when
    something happens, such as the worker starting, a request being received, and
    so on. In a framework, if you can produce some events, as a developer, you need
    a mechanism to listen for when an event occurs. The Laravel framework provides
    the developer with a mechanism to define and create events and a mechanism to
    listen (a listener). The listener in Laravel can execute a function defined by
    the developer.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel Octane 内部定义了一些事件，用于通知和管理发生某些情况时的情况，例如工作进程启动、收到请求等。在一个框架中，如果你可以产生一些事件，作为开发者，你需要一个机制来监听事件发生时的情况。Laravel
    框架为开发者提供了一个定义和创建事件以及监听（监听器）的机制。Laravel 中的监听器可以执行开发者定义的函数。
- en: So, in this case, using the event listener mechanism provided by Laravel, you
    can listen to some specific Laravel Octane events.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，使用 Laravel 提供的事件监听机制，你可以监听一些特定的 Laravel Octane 事件。
- en: 'Looking into the Laravel Octane config file (`config/octane.php`) in the `listener`
    section, you will see that the defined events are as follows: `WorkerStarting`,
    `RequestReceived`, `RequestHandled`, `RequestTerminated`, `TaskReceived`, `TaskTerminated`,
    `TickReceived`, `TickTerminated`, `OperationTerminated`, `WorkerErrorOccurred`,
    and `WorkerStopping`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 Laravel Octane 配置文件 (`config/octane.php`) 中的 `listener` 部分，你会看到定义的事件如下：`WorkerStarting`、`RequestReceived`、`RequestHandled`、`RequestTerminated`、`TaskReceived`、`TaskTerminated`、`TickReceived`、`TickTerminated`、`OperationTerminated`、`WorkerErrorOccurred`
    和 `WorkerStopping`。
- en: 'For example, if you want to implement a listener for the `RequestReceived`
    event, you can use the `make:listener` command to create the listener class:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想实现 `RequestReceived` 事件的监听器，你可以使用 `make:listener` 命令创建监听器类：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `make:listener` command creates the `RequestReceivedNotification` class
    file based on the `RequestReceived` event.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`make:listener` 命令基于 `RequestReceived` 事件创建 `RequestReceivedNotification` 类文件。'
- en: 'The file is created in `app/Listeners/RequestReceivedNotification.php` with
    the constructor and the `handle()` method, so you can add your logic to track
    some of the activity in the `handle()` method; for example, I’m going to log the
    IP address where the request comes from:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件在 `app/Listeners/RequestReceivedNotification.php` 中创建，包含构造函数和 `handle()`
    方法，因此你可以在 `handle()` 方法中添加你的逻辑来跟踪一些活动；例如，我将记录请求来源的 IP 地址：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To enable the listener, you have to add the class to the `config/octane.php`
    file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用监听器，你必须将类添加到 `config/octane.php` 文件中：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the same way, you can also add other events you want to track.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以同样的方式，你也可以添加你想要跟踪的其他事件。
- en: Now that we have configured the web server for the production environment, we
    can walk through the Laravel configuration for the production environment.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为生产环境配置了 Web 服务器，我们可以浏览 Laravel 的生产环境配置。
- en: Prepping a Laravel application for production
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Laravel 应用程序准备生产环境
- en: Now, we will focus on Laravel-specific configurations for the production environment.
    We will see how to install production PHP/Laravel packages, avoiding installing
    packages for development and debugging. We will see how to optimize cache configurations,
    routing settings, and view optimization. Finally, we will see how to inhibit debugging
    options. Debugging options are very useful in development, but can slow down the
    execution of the Laravel application in production.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于 Laravel 的特定生产环境配置。我们将了解如何安装生产 PHP/Laravel 软件包，避免安装开发和调试软件包。我们将了解如何优化缓存配置、路由设置和视图优化。最后，我们将了解如何禁止调试选项。调试选项在开发中非常有用，但可能会减慢
    Laravel 应用程序在生产环境中的执行速度。
- en: Installing the packages for production
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装生产环境所需的软件包
- en: 'In the `composer.json` file, two types of packages are listed: `require` defines
    the packages for running the application in a production environment, and `require-dev`
    defines the packages for running the application in a development environment.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `composer.json` 文件中，列出了两种类型的软件包：`require` 定义了在生产环境中运行应用程序所需的软件包，而 `require-dev`
    定义了在开发环境中运行应用程序所需的软件包。
- en: By default, `composer` installs all the packages from both lists.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`composer` 会安装两个列表中的所有软件包。
- en: 'If you only want to install the packages from the `require` list (production),
    you can use the `–-no-dev` option while you are installing the packages for the
    production environment:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想安装 `require` 列表中的软件包（生产环境），在安装生产环境软件包时可以使用 `–-no-dev` 选项：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Other than the `--no-dev` option, we are using `optimize-autoloader`. The option
    generates a data structure (an index) to map the class name, with the name of
    the file to be loaded.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `--no-dev` 选项外，我们还使用 `optimize-autoloader`。该选项生成一个数据结构（索引），用于映射类名和要加载的文件名。
- en: The `optimize-autoloader` option reduces the bootstrap time.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`optimize-autoloader` 选项减少了引导时间。'
- en: Caching config, routing, and views
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存配置、路由和视图
- en: 'To load some critical components such as the configuration files, the routing
    configuration, and the view blade templates quickly, you can use the cache commands:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速加载一些关键组件，如配置文件、路由配置和视图 blade 模板，你可以使用缓存命令：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You have to execute these commands every time you change certain files in your
    Laravel application in the production environment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你在生产环境中更改 Laravel 应用程序中的某些文件时，都必须执行这些命令。
- en: '![Figure 7.4: Caching configs, routes, and views](img/Figure_7.04_B17728.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4：缓存配置、路由和视图](img/Figure_7.04_B17728.jpg)'
- en: 'Figure 7.4: Caching configs, routes, and views'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：缓存配置、路由和视图
- en: Disabling Debug mode
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用调试模式
- en: 'When developing the Laravel application, the configuration is typically set
    to Debug mode. The parameter that controls the Debug mode is stored in the `.env`
    file, and the parameter is as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Laravel 应用程序时，配置通常设置为调试模式。控制调试模式的参数存储在 `.env` 文件中，参数如下：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To check the status of your application, you can use the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查应用程序的状态，你可以使用以下命令：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `about` command shows the information about **Debug Mode**:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`about` 命令显示有关 **调试模式** 的信息：'
- en: '![Figure 7.5: The about command for showing the Debug mode status](img/Figure_7.05_B17728.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5：显示调试模式状态的 `about` 命令](img/Figure_7.05_B17728.jpg)'
- en: 'Figure 7.5: The about command for showing the Debug mode status'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5：显示调试模式状态的 `about` 命令
- en: 'To change the setting, you can change the value of the `APP_DEBUG` parameter
    to `false`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改设置，你可以将 `APP_DEBUG` 参数的值更改为 `false`：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The configuration of `APP_DEBUG` set to `false` allows you to skip all the configurations
    in the code for debugging purposes (collecting and showing detailed information).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将`APP_DEBUG`配置设置为`false`允许您跳过代码中所有用于调试目的的配置（收集和显示详细信息）。
- en: 'Because you changed the configuration and the configuration is cached, the
    suggestion is to clear the configuration to see the changes in the application:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您更改了配置并且配置被缓存，建议清除配置以查看应用程序中的更改：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You should also reduce the number of log messages. Log messages are very useful
    for debugging purposes, but tracking the logs could be an expensive operation
    and could slow down the application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该减少日志消息的数量。日志消息对于调试目的非常有用，但跟踪日志可能是一项昂贵的操作，可能会减慢应用程序的运行速度。
- en: 'For example, in the `.env` configuration file, typically, you can find the
    following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`.env`配置文件中，通常可以找到以下内容：
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The levels of debugging, from most detailed (with more logs) to just tracking
    the errors, are as follows: `debug`, `info`, `notice`, `warning`, `error`, `critical`,
    `alert`, and `emergency`. My suggestion is to change the level of logs (`LOG_LEVEL`)
    in a production environment to `error` in order to only track critical information
    because reducing the number of log messages makes your application faster and
    can reduce the amount of storage needed.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 调试的级别，从最详细的（带有更多日志）到仅跟踪错误，如下所示：`debug`、`info`、`notice`、`warning`、`error`、`critical`、`alert`和`emergency`。我的建议是在生产环境中将日志级别（`LOG_LEVEL`）更改为`error`，以便仅跟踪关键信息，因为减少日志消息的数量可以使应用程序运行更快，并可以减少所需的存储量。
- en: The general suggestion is to have a specific configuration for the production
    environment, so the advice is to create a file, `.env.prod`, where you can store
    your production configuration. Then, copy the `.env.prod` file on each deployment
    to your `.env` file in the production environment.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一般建议为生产环境设置特定的配置，因此建议创建一个文件，`.env.prod`，在其中可以存储您的生产配置。然后，在每个部署时将`.env.prod`文件复制到生产环境中的`.env`文件。
- en: Deployment approaches
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署方法
- en: You can choose a deployment strategy from the numerous ones that exist.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从众多存在的部署策略中选择一个。
- en: The rule that I would recommend when choosing a deployment strategy is to avoid
    installing valuable tools for the build phase in the production environment. Because
    the approach is to limit the responsibility of the production environment to the
    delivery of ready-to-deploy assets, responsibility for executing the build process
    should not be the responsibility of the production environment. That’s why it’s
    possible to avoid installing build tools in the production environment.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择部署策略时，我推荐的规则是避免在生产环境中安装用于构建阶段的宝贵工具。因为目标是限制生产环境的责任，仅限于交付准备就绪的部署资产，执行构建过程的责任不应由生产环境承担。这就是为什么可以在生产环境中避免安装构建工具。
- en: For example, I suggest avoiding performing the build of JavaScript and CSS,
    running tests or “linting” processes, or performing static code analysis in production
    environments.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我建议避免在生产环境中执行JavaScript和CSS的构建、运行测试或“linting”过程，或执行静态代码分析。
- en: In other words, it is necessary to transfer optimized code and ready-made configurations
    directly to the production server.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，有必要直接将优化后的代码和现成的配置转移到生产服务器。
- en: This means that if there should be build operations that aim to prepare files
    and configurations for production, these should be performed in a dedicated environment
    or a CI/CD runner.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果应该有旨在为生产准备文件和配置的构建操作，这些操作应在专用环境或CI/CD运行器中执行。
- en: The build mechanism and file transfer commands in the production environment
    can be complex. Therefore, the advice is to formalize this list of commands in
    a scripting tool.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 生产环境中的构建机制和文件传输命令可能很复杂。因此，建议在脚本工具中正式化此命令列表。
- en: I use `Makefile` because this allows me to define the individual steps to be
    executed but, more importantly, determine the dependencies between steps.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用`Makefile`是因为这允许我定义要执行的各个步骤，但更重要的是，确定步骤之间的依赖关系。
- en: Typically, I define a step for compiling assets, a step for testing, a step
    for running `phpcs` (lint), a step for performing static code analysis, and a
    step for transferring files to the production environment. There are also specific
    steps for executing commands directly on the production server should the need
    arise. This number of granular steps allows me to keep each step simple.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我会定义一个编译资源的步骤，一个测试步骤，一个运行`phpcs`（代码检查）的步骤，一个执行静态代码分析的步骤，以及一个将文件传输到生产环境的步骤。如果需要，还有直接在生产服务器上执行命令的特定步骤。这些细粒度的步骤数量使我能够保持每个步骤的简单性。
- en: There are several methodologies for copying and transferring files to production;
    the advice is to find the one that is most suited to you; typically, I use **Secure
    Shell (SSH)** protocol and tools.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种复制和将文件传输到生产环境的方法；建议找到最适合你的方法；通常，我使用**安全外壳（SSH）协议和工具**。
- en: Nevertheless, again, the most crucial part is to understand that, irrespective
    of the way you transfer the files or the tool you are using, you should transfer
    files and configuration ready to be served by the production environment.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，再次强调，最重要的是理解，无论你使用什么方式传输文件或使用什么工具，你应该传输准备由生产环境服务的文件和配置。
- en: Makefile
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Makefile
- en: '`Makefile` is a file used by the `make` tools to execute commands. The format
    is quite simple; each group of commands is grouped into steps. You can specify
    the step to be executed from the command line when you start running the file
    via the `make` command.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`Makefile`是`make`工具用来执行命令的文件。其格式相当简单；每个命令组被分组到步骤中。当你通过`make`命令启动文件时，你可以指定要执行的步骤。'
- en: In the `Makefile`, all the commands are listed, and the command to be executed
    needs a parameter such as `SSH_USER` or `WEB_DIR`. My suggestion is to define
    the parameters in an external `Makefile`. Then, you can ignore (in the Git repository)
    the `Makefile` used for the parameters and commit the `Makefile` with the steps.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Makefile`中，所有命令都被列出，要执行的命令需要一个参数，例如`SSH_USER`或`WEB_DIR`。我的建议是在外部`Makefile`中定义这些参数。然后，你可以忽略（在Git仓库中）用于参数的`Makefile`，并提交包含步骤的`Makefile`。
- en: 'In the root directory of your Laravel project, create a file named `Makefile.param`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Laravel项目根目录中，创建一个名为`Makefile.param`的文件：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The meaning of the parameters is quite self-explanatory; you can define the
    SSH alias and the SSH user to access the remote machine via SSH, and then you
    can specify the remote directory (on the server) where your Laravel application
    is stored (`WEB_DIR`). Then, you can set the user (`WEB_USER` and `WEB_GROUP`)
    on the server, used for running the processes on the server. Then, with `DRY_RUN`,
    you can see (and copy) the files to be copied on the server.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的含义相当直观；你可以定义SSH别名和SSH用户，通过SSH访问远程机器，然后你可以指定存储你的Laravel应用程序的远程目录（在服务器上，`WEB_DIR`）。然后，你可以设置服务器上用于运行进程的用户（`WEB_USER`和`WEB_GROUP`）。然后，通过`DRY_RUN`，你可以查看（并复制）要复制到服务器上的文件。
- en: For copying the file on the server, we will use `rsync`. `rsync` is a great
    tool for only copying the changed file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在服务器上复制文件，我们将使用`rsync`。`rsync`是一个仅复制已更改文件的优秀工具。
- en: 'To create a `Makefile`, create a file named `Makefile.deploy` and fill it with
    the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个`Makefile`，创建一个名为`Makefile.deploy`的文件，并填充以下内容：
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The last line is for the `deploy` step. The `deploy` step doesn’t include commands
    to execute but consists of a list of steps to invoke sequentially.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行是`deploy`步骤。`deploy`步骤不包含要执行的命令，而是一系列需要依次调用的步骤。
- en: The first step executed will be `buildfrontend`. This step includes the `npm
    run build` command. The command will build the frontend assets.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的第一步将是`buildfrontend`。这一步包括`npm run build`命令。该命令将构建前端资源。
- en: 'The next step included in the `deploy` step is `composerinstallnodev`. The
    command executed by `composerinstallnodev` will install the packages for the production
    (skipping the dev packages):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`deploy`步骤中包含的下一步是`composerinstallnodev`。`composerinstallnodev`执行的命令将为生产环境安装包（跳过开发包）：'
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, there is the step for copying the files on the server: `rsynca`. The
    step includes a command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，是复制服务器上文件的步骤：`rsynca`。这一步包括一个命令：
- en: '[PRE28]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the command, some variables (replaced with the values loaded from `Makefile.param.prod`
    file) are used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令中，使用了一些变量（用从`Makefile.param.prod`文件加载的值替换），这些变量。
- en: 'The `Makefile.param.prod` file is loaded at the beginning of the `Makefile`
    thanks to the directive including the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 由于包含以下指令，`Makefile.param.prod`文件在`Makefile`的开始处被加载：
- en: '[PRE29]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `rsync` command uses a list of options:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`rsync` 命令使用一系列选项：'
- en: '`-r` : Recursive into directories.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r`：递归到目录中。'
- en: '`-l`: Copies symlinks as symlinks.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`：将符号链接作为符号链接复制。'
- en: '`-c`: Copies only the changed files. The changes are detected with the `-c`
    option by comparing the checksum of the source and the target file.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`：仅复制已更改的文件。通过比较源文件和目标文件的校验和来检测更改，使用 `-c` 选项。'
- en: '`-g`: Preserves the group during the copy (owner).'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-g`：在复制过程中保留组（所有者）。'
- en: '`-o`: Preserves the user during the copy (owner).'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o`：在复制过程中保留用户（所有者）。'
- en: '`-v`: Verbose output.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`：详细输出。'
- en: '`-z`: Compresses files during network transfer.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-z`：在网络传输期间压缩文件。'
- en: '`-i`: Displays a summary.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：显示摘要。'
- en: The `--exclude-from 'exclude-list.txt'` option excludes from the copy all the
    files listed in the `exclude-list.txt` file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`--exclude-from ''exclude-list.txt''` 选项将 `exclude-list.txt` 文件中列出的所有文件从复制中排除。'
- en: 'The `exclude` file contains the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`exclude` 文件包含以下内容：'
- en: '[PRE30]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `exclude-list.txt` file lists all the files and directories that are not
    useful in the production environment. Typically, the excluded files/directories
    are package directories, storage directories, cache files, and so on.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`exclude-list.txt` 文件列出了在生产环境中无用的所有文件和目录。通常，排除的文件/目录是包目录、存储目录、缓存文件等。'
- en: Feel free to add the files in your application that you want to exclude and
    don’t want to add to the production environment.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 随意添加您想要排除并不要添加到生产环境中的应用程序文件。
- en: 'The `copyenvprod` step will copy the local `.env.prod` (where you can store
    your specific configuration for production) to the remote `.env`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`copyenvprod` 步骤将本地的 `.env.prod`（您可以在其中存储生产环境的特定配置）复制到远程的 `.env`：'
- en: '[PRE31]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `scp` command allows you to copy files via SSH protocol.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`scp` 命令允许您通过 SSH 协议复制文件。'
- en: Remember to include the `.env.prod` file in the `.gitignore` file (to exclude
    it from the `git` commit).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 记得将 `.env.prod` 文件包含在 `.gitignore` 文件中（以排除它从 `git` 提交中）。
- en: 'The `migrate` step executes the migrations on the remote server (thanks to
    the SSH command):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate` 步骤在远程服务器上执行迁移（归功于 SSH 命令）：'
- en: '[PRE32]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, the `optimize` step is executed. The `optimize` step will launch the
    caching Laravel command for routing, views, and configuration on the target machine:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，执行 `optimize` 步骤。`optimize` 步骤将在目标机器上启动用于路由、视图和配置的缓存 Laravel 命令：
- en: '[PRE33]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, if you remember, every time you change the files in the production environment,
    you should restart the workers to apply the changes to the up-and-running Laravel
    Octane application, so the `restartworkers` step will launch:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果你记得的话，每次你在生产环境中更改文件时，都应该重新启动工作进程以将更改应用到正在运行中的 Laravel Octane 应用程序，因此 `restartworkers`
    步骤将会启动：
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Executing the `Makefile` from the local development environment is not suggested.
    Typically, you can launch the `Makefile` from the CI/CD pipeline. We execute the
    `Makefile` from a dedicated environment (CI/CD) for separation of concerns; the
    local environment is for development, the CI/CD environment is for building and
    executing code quality tools programmatically, and the production environment
    is for delivering assets and the application.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 从本地开发环境执行 `Makefile` 不建议。通常，您可以从 CI/CD 管道启动 `Makefile`。我们从一个专门的环境（CI/CD）执行 `Makefile`
    以实现关注点的分离；本地环境用于开发，CI/CD 环境用于程序化构建和执行代码质量工具，生产环境用于交付资源和应用程序。
- en: 'Anyway, if you are not using a CI/CD pipeline and you are launching the `Makefile`
    from the local copy of the sources, you must restore the dev package (for production,
    deploy the `composerinstallnodev` step, which will only install production packages).
    For restoring the dev packages, the `installdevdeps` step exists, and it will
    execute a standard `composer install` command and then clear the config:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，如果您没有使用 CI/CD 管道，并且是从本地源代码副本启动 `Makefile`，您必须恢复开发包（对于生产，部署 `composerinstallnodev`
    步骤，这将仅安装生产包）。为了恢复开发包，存在 `installdevdeps` 步骤，它将执行标准的 `composer install` 命令然后清除配置：
- en: '[PRE35]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see, the configuration of `Makefile` is straightforward. Because
    `Makefile` has strict rules about the indentation (the indentation is used to
    understand where a step starts and where it ends), the only recommendation is
    that the line indentation is done via the tab character. Once `Makefile` is ready,
    you can execute it.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`Makefile` 的配置很简单。因为 `Makefile` 对缩进有严格的规定（缩进用于理解一个步骤的开始和结束位置），唯一的建议是使用制表符进行行缩进。一旦
    `Makefile` 准备好，就可以执行它。
- en: 'To run the `Makefile` named `Makefile.deploy`, you can run the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行名为`Makefile.deploy`的`Makefile`，您可以运行以下命令：
- en: '[PRE36]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `make` command accepts the name of the step to be executed as input. Optionally,
    you can also specify the `Makefile` to be parsed via the `-``f` parameter.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`make`命令接受要执行的步骤名称作为输入。可选地，您也可以通过`-f`参数指定要解析的`Makefile`。'
- en: With the `make deploy` command, the application is fully deployed on the server.
    The `Makefile` also includes some commands for the fine-tuning of the environment,
    such as fixing permissions of some directories, clearing the cache, and so on.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`make deploy`命令，应用程序已完全部署到服务器上。`Makefile`还包括一些用于环境微调的命令，例如修复某些目录的权限、清除缓存等。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With this book, we explored some ways to create a reliable and fast Laravel
    application. We used features provided by Laravel Octane with the integration
    with Swoole and RoadRunner.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这本书，我们探索了一些创建可靠且快速Laravel应用程序的方法。我们使用了Laravel Octane提供的功能，并与Swoole和RoadRunner集成。
- en: We involved some special features of Swoole, especially for caching, concurrent
    task execution, and scheduled task execution.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涉及了一些Swoole的特殊功能，特别是针对缓存、并发任务执行和计划任务执行。
- en: We explored some practical examples, and we approached the design of the application
    differently, delegating tasks to the external executor (via the queue).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探索了一些实际示例，并采取了不同的方法来设计应用程序，将任务委托给外部执行器（通过队列）。
- en: We progressively improved the performance of the application by applying multiple
    techniques.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过应用多种技术逐步提高了应用程序的性能。
- en: In this chapter, we explained the architecture, the configuration of the tools
    used in production (nginx), and the implementation of the scripts to deploy a
    Laravel Octane application into a production environment.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了架构、生产中使用的工具（nginx）的配置，以及将Laravel Octane应用程序部署到生产环境的脚本实现。
- en: Hope you enjoyed reading this book.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您喜欢阅读这本书。
