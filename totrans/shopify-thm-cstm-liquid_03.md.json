["```php\n    Our collection name is {{ collection.title }}. As we can see, collection.title is encapsulated inside the double curly braces indicating that the result of the code will be output. After the Shopify server processes our Liquid code and returns us something that our browser can work with, we would receive the following string as a result:\n\n    ```", "```php\n\n    ```", "```php\nOur collection description is\n```", "```php\n    {% if collection.title collection.title is strictly equal to our string of \"Winter Shows\", the logic returns true, and we will see our message shown. Otherwise, the logic returns false. Note that comparison will only return true if the string is an exact match, including the text case.\n    ```", "```php\n    {% if collection.title collection.title, but in this case, we will be checking whether the collection's name is not equal to the \"Winter Shows\" string. If the result is that collection.title is not the same as our string, the logic returns true, and we will see our message shown. Otherwise, the logic returns false, and the message will not be visible.\n    ```", "```php\n    {% if collection.all_products_count 25. If it is, the logic will return true, and we will see our message shown. Otherwise, the logic returns false, and the message will not be visible.\n    ```", "```php\n    {% if collection.all_products_count 25, the logic will return true, and we will see our message shown. Otherwise, the logic returns false, and the message will not be visible.We have a general understanding of how the `<` and `>` operators works, but what if we had the following example:\n\n    ```", "```php\n\n    ```", "```php\n    {% if collection.all_products_count true, and we will see our message shown. Otherwise, the logic returns false, and the message will not be visible.\n    ```", "```php\n    {% if collection.all_products_count true, and our message will show. Otherwise, the logic will return false, and the message will not be visible.\n    ```", "```php\n    {% if collection.title == \"Winter Shoes\" Winter Shoes or if the collection contains more than 25 products. If we have met at least one of these two conditions, the logic will return true, and our message will be shown. Otherwise, the logic will return false, and the message will not be visible.\n    ```", "```php\n    {% if collection.title == \"Winter Shoes\" Winter Shoes and the collection contains more than 25 products. If we have met both of these conditions, the logic will return true, and the message will be shown. Otherwise, the logic will return false, and the message will not be visible.Important note:We can now create a conditional with multiple comparison values. However, we should note the order in which our conditional will perform the check is from the right side. We cannot change this order using the parentheses, as parentheses are invalid characters in Liquid and will break our code.\n    ```", "```php\n    {% if collection.title collection.title, which returns a string, contains the word \"Christmas\", and if it does, it shows the message. Note that contains is case-sensitive and will only return true if the sub-string strictly matches the part of the string.Important note:We can use `contains` to search for the presence of a substring inside a string or even to check whether our string is a part of the array of strings. However, we cannot use it to check for the presence of an object inside the array of objects. We can only use `contains` to search for the presence of strings.\n    ```", "```php\n{% if product.title contains \"Book\" or product.title  contains \"2021\" %}\n  We have found a product that contains the word Book or    the product that contains the word 2021.\n{% endif %}\n```", "```php\n    {% if product.price > 25 and product.price < 3500 %}\n      The number of products in a collection is greater    than 25, and the product's price is lower than 3500.\n    {% endif %}\n    ```", "```php\n{% if customer.accepts_marketing == true %}\n  The customer has signed up for our newsletter!\n{% endif %}\n```", "```php\n{% if customer %}\n  Welcome {{ customer.name }}!\n{% endif %}\n```", "```php\nOur collection description is {{ collection.description }}.\n```", "```php\nOut collection description is.\n```", "```php\n{% if collection.description %}\n  <h3>{{ collection.description }}</h3>\n{% endif %}\n```", "```php\n<h3></h3>\n```", "```php\n{% if collection.description != blank %}\n  <h3>The collection description element will show only if    its content is not empty.<h3>\n{% endif %}\n```", "```php\n    [] combined with product.tags and the index position to access each item individually:\n\n    ```", "```php\n\n    Note that array indexing starts at `0`, so we use `product.tags[0]` to access the first element in our array. After submitting our code to the Liquid server, we receive the following list of strings:\n\n    ```", "```php\n\n    While this method produces results, it is only applicable when we are entirely aware of the content of our array and the exact position of the element that we require. If, on the other hand, we are looking to output the entire content of an array without too much writing, we would need to use a different method.\n    ```", "```php\n    {% for tag in product.tags %}\n      <p>{{ tag }}</p>\n    {% endfor %}\n    ```", "```php\n    for loop are precisely the same as when we previously accessed each item individually.\n    ```", "```php\n<h1>{{ pages.learning-about-the-page-handle.title }}</h1> \\\n<h1>{{ pages[\"learning-about-the-page-handle\"].title}}</h1>\n```", "```php\n<h1>Learning about the page handle</h1>\n<h1>Learning about the page handle</h1>\n```", "```php\n<h1></h1>\n<h1></h1>\n```", "```php\n{% if pages[\"learning-about-the-page-handle\"].title !=  empty %}\n  <div class=\"tester\">{{ pages[\"learning-about-the-page-     handle\"].title }}</div>\n{% endif %}\n```", "```php\nCollection info:\n{% if collection %}\n  The collection's name is {{ collection.title }} !\n{% endif %}\n```", "```php\nCollection info:\n  The collection's name is Winter Shoes !\n```", "```php\nCollection info:\n{%- if collection -%}\n  The collection's name is {{ collection.title -}} !\n{%- endif -%}\n```", "```php\nCollection info:\nThe collection's name is Winter Shoes!\n```", "```php\n    {% if collection.all_products_count > \"20\" %}\n      The number of products in a collection is greater    than 20!\n    {% endif %}\n    ```", "```php\n    {% if customer != nil %}\n      Welcome {{- customer.name -}} !\n    {% endif %}\n    ```"]