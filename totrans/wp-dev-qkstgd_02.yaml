- en: Managing Database Structure, Storage, and Retrieval
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理数据库结构、存储和检索
- en: The database is the primary location for storing application data. WordPress
    provides a built-in database with pre-defined tables, compared to traditional
    web applications, where the database is designed from scratch. Getting used to
    the pros and cons of the existing database table is the key to developing quality
    themes and plugins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是存储应用程序数据的主要位置。WordPress提供了一个内置的数据库，其中包含预定义的表，与传统从零开始设计的Web应用程序相比，WordPress的数据库设计更为成熟。熟悉现有数据库表的优势和劣势是开发高质量主题和插件的关键。
- en: In this chapter, we will learn the power and limitations of the existing database
    tables in Wordpress. You will get an overview of existing database tables and
    their role, while understanding how data is managed in common functions such as
    post creation, user creation, media uploads, and so on. You will also learn the
    uses of custom tables in development, and using the query functions to retrieve
    data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习现有数据库表在WordPress中的功能和限制。您将了解现有数据库表及其作用，同时了解如何在常见功能（如文章创建、用户创建、媒体上传等）中管理数据。您还将了解在开发中自定义表的使用以及使用查询函数检索数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the role of default database tables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解默认数据库表的作用
- en: Tracking and understanding database usage of primary features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪和理解主要功能数据库使用情况
- en: Creating and managing custom tables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理自定义表
- en: Implementing CRUD operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施CRUD操作
- en: A brief overview of the multisite database structure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多站点数据库结构的简要概述
- en: By the end of this chapter, you will have the necessary knowledge to maximize
    the use of existing database tables in development, while using custom tables
    for advanced use cases.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将具备最大化使用现有数据库表进行开发的知识，同时为高级用例使用自定义表。
- en: Introduction to the WordPress database
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress数据库简介
- en: The process of planning and designing a database is one of the most critical
    phases of any project. A well-planned database design eases the process for future
    growth while increasing performance in data storage and retrieval. Usually, it's
    the responsibility of the development team to identify the entities and relationships
    between these entities. WordPress, on the other hand, is a CMS and hence offers
    an existing database to handle core features. So, the process of planning a database
    is not part of the responsibility as a developer in most scenarios. Instead, developers
    have a tougher task of understanding the core tables and managing the data needs
    with its limitations. Of course, you can create and use your own database tables
    for any requirement. But, doing so eliminates the whole purpose of developing
    on top of WordPress.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 规划和设计数据库的过程是任何项目最关键的阶段之一。一个良好的数据库设计可以简化未来增长的过程，同时提高数据存储和检索的性能。通常，识别实体及其之间关系是开发团队的职责。另一方面，WordPress是一个CMS，因此提供现有的数据库来处理核心功能。所以，在大多数情况下，规划数据库的过程并不是作为开发者的责任。相反，开发者面临着一个更艰巨的任务，即理解核心表并管理数据需求及其限制。当然，你可以为任何需求创建和使用自己的数据库表。但这样做就消除了在WordPress之上开发的目的。
- en: The WordPress database currently supports MySQL and MariaDB, with MariaDB being
    the most preferred choice. However, most of the existing WordPress sites still
    use MySQL. On successful installation, WordPress will create eleven database tables
    to cater for the core functionality. Since its inception, backward compatibility
    was one of the top priorities of the WordPress team. Therefore, you may not see
    major changes in these eleven tables in the near future.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress数据库目前支持MySQL和MariaDB，其中MariaDB是最受欢迎的选择。然而，大多数现有的WordPress站点仍在使用MySQL。在成功安装后，WordPress将创建十一个数据库表来满足核心功能。自其诞生以来，向后兼容性一直是WordPress团队的首要任务之一。因此，在不久的将来，您可能不会看到这十一个表有重大变化。
- en: Understanding the role of built-in database tables
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解内置数据库表的作用
- en: 'The WordPress database structure is designed to store a minimum amount of data
    required for core features. Therefore, developers need to have a thorough understanding
    of the existing tables in order to use them effectively to build flexible websites.
    Let''s take a look at the entity relationship diagram of the latest WordPress
    versions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress数据库结构旨在存储核心功能所需的最小数据量。因此，开发者需要彻底了解现有表，以便有效地使用它们来构建灵活的网站。让我们看一下最新WordPress版本的实体关系图：
- en: '![](img/936a56ee-be42-4989-925b-6c807c7e327f.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/936a56ee-be42-4989-925b-6c807c7e327f.png)'
- en: As may notice, all the existing tables don't have more than one or two relationships
    with other tables, and hence understanding and working with the database becomes
    a simpler task. Now, we are going to look at each database table with important
    columns, its role, and how it works with other tables. You need to refer to the
    preceding diagram to visualize the points in our discussion.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所注意到的，所有现有的表与其他表的关系不超过一两个，因此理解和操作数据库变得是一个更简单的任务。现在，我们将查看每个数据库表及其重要列、其角色以及它是如何与其他表协同工作的。您需要参考前面的图表来可视化我们讨论中的要点。
- en: Posts-related database tables
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与帖子相关的数据库表
- en: Three database tables are directly involved with posts and six tables handle
    posts-related data. Many of the existing WordPress sites are either basic sites
    with a few pages, or blogs with hundreds of posts. So, the data of the majority
    of the sites are managed by these six database tables. Let's take a look at the
    two tables directly related to posts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 直接涉及帖子的数据库表有三个，而处理与帖子相关数据的表有六个。许多现有的WordPress网站要么是只有几个页面的基本网站，要么是拥有数百篇帖子的博客。因此，大多数网站的数据都由这六个数据库表管理。让我们来看看与帖子直接相关的两个表。
- en: wp_posts
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_posts
- en: 'This is the primary data storage location of many WordPress sites and applications.
    This table consists of the main data for posts, pages, and custom post types.
    This table consists of twenty-three columns. Let''s identify some of the most
    important columns in this table:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是许多WordPress网站和应用程序的主要数据存储位置。此表包含帖子、页面和自定义帖子类型的主要数据。此表包含二十三列。让我们确定这个表中一些最重要的列：
- en: '| `post_author` | This is where you find the ID of the user who created the
    post or page. This column is used to form the relationship with the `wp_users` table.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `post_author` | 在这里您可以找到创建帖子或页面的用户的ID。此列用于与`wp_users`表建立关系。|'
- en: '| `post_content` | The complete content of the post/page is stored in this
    column. So, the data in this column can range from a few words to thousands of
    words and images. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `post_content` | 帖子/页面的完整内容存储在这个列中。因此，这个列中的数据可以从几个词到数千个词和图片不等。|'
- en: '| `post_title` | The title of the post/page is stored in this column. It''s
    used to identify the page in the backend as well as highlight the title in the
    frontend. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `post_title` | 帖子/页面的标题存储在这个列中。它用于在后台识别页面以及在前端突出显示标题。|'
- en: '| `post_excerpt` | The data in this column is optional and used for keeping
    a summary of the post/page. Usually, this is used in post lists (archive) pages
    to show a glimpse of what the post is about, and encourage users to read the entire
    post. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `post_excerpt` | 此列中的数据是可选的，用于保存帖子/页面的摘要。通常，这用于帖子列表（存档）页面，以展示帖子的概要，并鼓励用户阅读整个帖子。|'
- en: '| `post_status` | WordPress-specific post statuses are stored in this column.
    These statuses defines a step in the life cycle of a post. Default statuses include
    publish, pending, private, future, inherit, trash, draft, and auto-draft. Most
    of these statuses are self-explanatory. However, you may need explanations on
    the  inherit and auto-draft statuses. WordPress provides the ability to store
    revisions of posts in the database. When we update a post, the previous post data
    in the database automatically becomes a revision with the status marked as **inherit**.
    Also, WordPress automatically saves posts at certain time intervals, and those
    revisions are marked as **auto-draft**. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `post_status` | WordPress特定的帖子状态存储在这个列中。这些状态定义了帖子生命周期中的一个步骤。默认状态包括发布、待审、私有、未来、继承、垃圾箱、草稿和自动草稿。大多数这些状态都是不言自明的。然而，您可能需要关于继承和自动草稿状态的解释。WordPress提供了在数据库中存储帖子修订版本的能力。当我们更新帖子时，数据库中的先前帖子数据自动成为标记为**继承**状态的修订版本。此外，WordPress会在特定的时间间隔自动保存帖子，这些修订版本被标记为**自动草稿**。|'
- en: '| `post_password` | This stores the password of password-protected posts or
    pages. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `post_password` | 此列存储受密码保护的帖子或页面的密码。|'
- en: '| `post_parent` | This column stores the ID of the parent post. WordPress supports
    child posts for attachments, pages, and post revisions. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `post_parent` | 此列存储父帖子的ID。WordPress支持附件、页面和帖子修订版本的子帖子。|'
- en: '| `guid`  | The complete URL of the post/page is stored in this column. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `guid`  | 帖子/页面的完整URL存储在这个列中。|'
- en: '| `post_type`  | This stores the type post with a unique key. Default post
    types includes post, page, revision, attachment, and `nav_menu_item`. Apart from
    these types, you can create any new type using custom post types. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `post_type`  | 此处存储具有唯一键的类型文章。默认文章类型包括文章、页面、修订、附件和`nav_menu_item`。除了这些类型之外，您可以使用自定义文章类型创建任何新类型。|'
- en: Usually, this table is intended for built-in types such as posts, pages, menus,
    and attachments. With the introduction of custom post types, this table is used
    widely for storing data such as products, forum topics, properties, and anything
    that you can think of.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，此表旨在用于内置类型，如文章、页面、菜单和附件。随着自定义文章类型的引入，此表被广泛用于存储数据，如产品、论坛主题、属性以及您能想到的任何东西。
- en: wp_postmeta
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_postmeta
- en: 'This is the secondary storage for posts where optional data related to posts
    and pages are stored. This table consists of four columns. Let''s identify some
    of the most important columns in this table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文章的二级存储，其中存储与文章和页面相关的可选数据。此表包含四个列。让我们确定此表中一些最重要的列：
- en: '| `post_id` | This is where you find the ID of the post for these additional
    data. This column is used to form the relationship with the `wp_posts` table.
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `post_id` | 这是您找到包含这些附加数据的文章ID的地方。此列用于与`wp_posts` 表形成关系。|'
- en: '| `meta_key` | All the additional post data is saved as key-value pairs. This
    column defines the identification for post data. A unique key should be used for
    this column with alpha numeric characters, underscores, and dashes. By default,
    WordPress stores **edit lock** info for posts and pages. As you add data to posts
    or create menus, you will see more keys stored with underscore prefixes. This
    is different to what we have used as developers, where we store such data in a
    different table with these keys as columns. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `meta_key` | 所有附加文章数据都保存为键值对。此列定义了文章数据的标识。应使用字母数字字符、下划线和破折号为此列使用唯一键。默认情况下，WordPress存储文章和页面的**编辑锁定**信息。随着您向文章或创建菜单添加数据，您将看到更多带有下划线前缀的键存储。这与我们作为开发者所使用的不同，我们使用不同的表存储这些数据，并将这些键作为列。|'
- en: '| `meta_value` | This column contains the posts-related data for the specified
    meta keys. Usually, these values are stored as plain text or serialized values.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `meta_value` | 此列包含指定元键的相关文章数据。通常，这些值以纯文本或序列化值的形式存储。|'
- en: Usually, this table is used to store administration-level values and custom
    fields added from the post edit screen. In large sites with custom post types,
    this table becomes crucial. In such sites, we can store data such as product options
    in an online store, property details in real-estate sites, and job details in
    a job management site.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，此表用于存储从文章编辑屏幕添加的管理级别值和自定义字段。在具有自定义文章类型的大型网站上，此表变得至关重要。在这样的网站上，我们可以存储数据，如在线商店中的产品选项、房地产网站中的房产详情以及工作管理网站中的工作详情。
- en: Terms-related tables
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 术语相关表格
- en: We can find four tables in this section, targeted for handling post-specific
    categorization. We use the term *taxonomoy* in WordPress for these categorizations.
    By default, we have two taxonomies called categories and tags. These tables are
    capable of handling these two taxonomy types as well as your own taxonomy types.
    Let's take a look at each of these four tables in detail.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们可以找到四个表格，旨在处理特定文章的分类。在WordPress中，我们使用术语*taxonomoy*来表示这些分类。默认情况下，我们有两个分类法，即分类和标签。这些表格能够处理这两种分类法类型以及您自己的分类法类型。让我们详细查看这四个表格。
- en: wp_terms
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_terms
- en: 'This is used to store the choices for taxonomies. You should be aware of categories
    and tags in WordPress posts. We call those types taxonomies. The choice inside
    a taxonomy is called a term. **Category** is a taxonomy and choices we create
    such as Health, Sports, and Travel are considered terms. This table consists of
    four columns. Let''s identify some of the most important columns in this table:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于存储分类法的选项。您应该了解WordPress文章中的分类和标签。我们称那些类型为分类法。分类法内的选择称为术语。**分类**是一个分类法，我们创建的诸如健康、体育和旅行之类的选择被认为是术语。此表包含四个列。让我们确定此表中一些最重要的列：
- en: '| `name` | Stores the title of the term that displays on the frontend of the
    site |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 存储在网站前端显示的术语标题 |'
- en: '| `slug` | Stores the unique identifier for the term |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `slug` | 存储术语的唯一标识符 |'
- en: Initial WordPress installation generates two taxonomies, called category and
    post tag. However, no terms are created by default and only contains **Uncategorized**
    as a term. We can use this table to create post tags or category choices. Also,
    we can use this in custom scenarios for creating terms such as WordPress, PHP,
    and jQuery for job skills in a job management site.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress初始安装生成了两个分类法，称为分类和帖子标签。然而，默认情况下没有创建任何术语，只包含**未分类**作为术语。我们可以使用这个表来创建帖子标签或分类选择。我们还可以在自定义场景中使用它来创建术语，如WordPress、PHP和jQuery，用于工作管理网站中的工作技能。
- en: wp_termmeta
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_termmeta
- en: This is the secondary location for storing data for terms. This table consists
    of four columns and works similar to other metadata tables using key-value pairs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是存储术语数据的二级位置。这个表由四个列组成，并且使用键值对的方式与其他元数据表类似工作。
- en: By default, this table is not used frequently. You may use this table to store
    additional details of your own terms. Assume you have terms for articles such
    as sports, health, travel. You want to display the archive pages of each of these
    categories using a different design. In such a scenario, you can store the CSS,
    images, templates in a term metatable and use this info to load the design.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个表不常使用。你可以使用这个表来存储你自己的术语的附加细节。假设你有关于文章的术语，如体育、健康、旅行。你想要使用不同的设计来显示每个类别的存档页面。在这种情况下，你可以在术语元表中存储CSS、图片、模板，并使用这些信息来加载设计。
- en: wp_term_relationships
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_term_relationships
- en: 'This used to form the relationship between posts and terms. This table consists
    of three columns and only IDs are used as data. Let''s identify some of the most
    important columns in this table:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这曾经用于在帖子与术语之间建立关系。这个表由三个列组成，并且只使用ID作为数据。让我们来识别这个表中一些最重要的列：
- en: '| `object_id` | Stores the ID of the post or custom post type that connects
    with the taxonomy |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `object_id` | 存储与分类相关联的帖子或自定义帖子类型的ID |'
- en: '| `term_taxonomy_id` | Stores the ID of the taxonomy |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `term_taxonomy_id` | 存储分类法的ID |'
- en: This is purely an associative table, which connects two tables using IDs. As
    a developer, you just need to assign the relationship, and this table doesn't
    have different uses based on the type of the site.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个纯粹关联表，通过ID连接两个表。作为开发者，你只需要分配关系，这个表不根据站点类型有不同的用途。
- en: wp_term_taxonomy
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_term_taxonomy
- en: 'This table stores the type of categorizations called taxonomies. This table
    consists of six columns. Let''s identify some of the most important columns in
    this table:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表存储了称为分类法的分类类型。这个表由六个列组成。让我们来识别这个表中一些最重要的列：
- en: '| `term_id` | This is the ID of the term and is used to form the connection
    with the `wp_terms` table. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `term_id` | 这是术语的ID，用于与`wp_terms`表建立连接。 |'
- en: '| `taxonomy` | This is the unique slug for the taxonomy. Default taxonomies
    are category and `post_tag`. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `taxonomy` | 这是分类法的唯一slug。默认分类法是分类和`post_tag`。 |'
- en: '| `parent` | Stores the parent term when using sub-terms in your site. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `parent` | 存储在网站中使用子术语时的父术语。 |'
- en: '| `count` | Stores the number of posts and custom post types that belong to
    this taxonomy. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `count` | 存储属于此分类法的帖子数量和自定义帖子类型。 |'
- en: This table contains default taxonomies for category and `post_tag`, to be used
    in normal WordPress posts. We can create custom taxonomies such as job skills
    in a job management site, product types in an online store, property features
    in a real-estate site, and so on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表包含默认的分类和`post_tag`分类法，用于正常WordPress帖子。我们可以在工作管理网站上创建如工作技能这样的自定义分类法，在线商店中的产品类型，房地产网站中的属性特征等等。
- en: User-related tables
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户相关表
- en: User data is managed using two tables in the existing database. By default,
    we have very basic details about users stored in these tables. Modern sites bring
    the concept of personalized content, and hence user management is becoming more
    and more important. So, you see extensive use of these tables in many websites.
    Let's take a look at each of these two tables in detail.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 用户数据通过现有数据库中的两个表进行管理。默认情况下，我们在这些表中存储了关于用户的基本详细信息。现代网站引入了个性化内容的概念，因此用户管理变得越来越重要。所以，你会在许多网站上看到这些表的大量使用。让我们详细看看这两个表中的每一个。
- en: wp_users
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_users
- en: 'This is the primary storage location for users, consisting of ten columns.
    Let''s identify some of the most important columns in this table:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户的主要存储位置，由十个列组成。让我们来识别这个表中一些最重要的列：
- en: '| `user_login` | Used as the username for the site. You can allow users to
    change it using your own implementations. However, this value needs to be unique.
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `user_login` | 用作网站的登录名。您可以使用自己的实现允许用户更改它。然而，此值需要是唯一的。 |'
- en: '| `user_pass` | Stores the encrypted password for the user. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `user_pass` | 存储用户的加密密码。 |'
- en: '| `user_email` | Used as the email of the user. Since WordPress allows users
    to login with email, this value needs to be unique for each user. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `user_email` | 用作用户的电子邮件。由于WordPress允许用户使用电子邮件登录，因此此值对于每个用户都必须是唯一的。 |'
- en: '| `user_registered` | Stores the registration date and is often used to sort
    the list of users or assign the membership period on membership-based sites. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `user_registered` | 存储注册日期，常用于对用户列表进行排序或在基于会员的网站上分配会员期限。 |'
- en: The data in this table doesn't change based on the type of site you are developing,
    and hence you only need to have knowledge on inserting, updating, and deleting
    users in this table.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此表中的数据不会根据您正在开发网站的类型而改变，因此您只需要了解在此表中插入、更新和删除用户的知识。
- en: wp_usermeta
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_usermeta
- en: 'Used as the secondary location for user data. By default, it keeps track of
    names, descriptions, capabilities, and so on. This table consists of four columns.
    Let''s identify some of the most important columns in this table:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用作用户数据的次要位置。默认情况下，它跟踪名称、描述、能力等。此表由四列组成。以下表格中我们将识别一些最重要的列：
- en: '| `user_id` | This is where you find the ID of the user that this data belongs
    to. This column is used to form the relationship with the `wp_users` table. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `user_id` | 这是您找到此数据所属用户ID的地方。此列用于与`wp_users`表建立关系。 |'
- en: '| `meta_key` | All the additional user data is saved as key-value pairs. This
    column defines the identification for user data. A unique key should be used for
    this column with alpha numeric characters, underscores, and dashes. This is different
    to what we have used as developers, where we store such data in a different table
    with these keys as columns. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `meta_key` | 所有附加用户数据都保存为键值对。此列定义了用户数据的标识。应使用字母数字字符、下划线和短横线为该列使用唯一的键。这与我们作为开发者所使用的不同，我们使用不同的表来存储这些数据，并将这些键作为列。
    |'
- en: '| `meta_value` | This column contains the user-related data for the specified
    metakeys. Usually, these values are stored as plain text or serialized values.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `meta_value` | 此列包含指定元键的用户相关数据。通常，这些值以纯文本或序列化值的形式存储。 |'
- en: Apart from default options, we can use this table to store simple custom user
    data such as date of birth, country, city, and advanced user data such as interests,
    and profile pictures.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认选项之外，我们还可以使用此表来存储简单的自定义用户数据，如出生日期、国家、城市，以及高级用户数据，如兴趣和简介图片。
- en: Options and comments tables
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项和评论表
- en: This section consists of three tables used for configurations and comments.
    Let's take a look at these tables in detail.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本节由三个用于配置和评论的表组成。让我们详细查看这些表。
- en: wp_options
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_options
- en: This stores all the built-in and custom settings for WordPress. This is another
    table similar to `wp_postmeta` and `wp_usermeta`, where key-value pairs are used
    for keeping data. Default options in this table include the site URL, site description,
    date format, and so on.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此表存储WordPress的所有内置和自定义设置。这是另一个类似于`wp_postmeta`和`wp_usermeta`的表，其中使用键值对来保存数据。此表中的默认选项包括网站URL、网站描述、日期格式等。
- en: Developers can use this table to store settings for their themes or plugins.
    Usually, plugin or theme settings are stored as a single row in this table as
    a serialized value. However, you can store as many options based on your preference.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以使用此表来存储他们主题或插件设置。通常，插件或主题设置以序列化值的形式存储在此表的单行中。然而，你可以根据你的偏好存储尽可能多的选项。
- en: wp_comments
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_comments
- en: 'This stores comments for posts, pages, and custom post types. This table consists
    of fifteen columns. Let''s identify some of the most important in the following
    table:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此表存储文章、页面和自定义文章类型的评论。此表由十五列组成。以下表格中我们将识别一些最重要的列：
- en: '| `comment_post_ID` | Stores the post, page, or custom post type ID where the
    comment belongs. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `comment_post_ID` | 存储评论所属的文章、页面或自定义文章类型的ID。 |'
- en: '| `comment_author` | Keeps the name of the user who created this comment. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `comment_author` | 保存创建此评论的用户名称。 |'
- en: '| `comment_content` | Used to keep the comment added by the user. This column
    can contain plain text values as well as HTML depending on the allowed options
    in the site. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `comment_content` | 用于保存用户添加的评论。此列可以包含纯文本值，也可以根据网站允许的选项包含HTML。 |'
- en: '| `comment_approved` | In most sites, a comment needs to be approved before
    it appears for public. This column stores Boolean status on whether a comment
    is approved or pending approval. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `comment_approved` | 在大多数网站上，评论在公开显示之前需要经过审核。此列存储关于评论是否已批准或待批准的布尔状态。|'
- en: '| `comment_type` | Stores the type of comment. Default comment types includes
    comment, pingbacks, and trackbacks. We can also use custom comment types. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `comment_type` | 存储评论类型。默认评论类型包括评论、pingbacks和trackbacks。我们还可以使用自定义评论类型。|'
- en: '| `user_id` | ID of the user who created the comment. This column is used to
    form the connection with the `wp_users` table. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `user_id` | 创建评论的用户ID。此列用于与`wp_users`表建立连接。|'
- en: Usually, this table is used for basic comments of posts, pages, and custom post
    types. However, we can think beyond the convention by using comments in innovative
    ways. We can use comments for features such as answers of a question-based site
    such as stackoverflow, user messages in a forum topic, or reviews in an online
    product marketplace.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，此表用于存储帖子、页面和自定义帖子类型的基本评论。然而，我们可以通过创新地使用评论来超越常规。我们可以使用评论作为基于问题的网站（如stackoverflow）的答案、论坛主题中的用户消息或在线产品市场中的评论。
- en: wp_commentmeta
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_commentmeta
- en: This is used as the secondary location for storing additional comment data.
    This table consists of four columns and works similar to other metadata tables
    in WordPress.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于存储额外评论数据的辅助位置。此表由四个列组成，其工作方式类似于WordPress中的其他元数据表。
- en: There are no default usages of this table. We can use this table to store additional
    data such as ratings in a product review site, verified status in a question-answer
    site, and so on.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此表没有默认用途。我们可以使用此表来存储额外的数据，例如产品评论网站中的评分、问答网站中的验证状态等。
- en: In this section, we looked at all eleven default database tables in WordPress
    and their role in development. You have to understand each and every column of
    these tables with the possible values, as most of the WordPress development is
    done on top of the core features.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了WordPress中的所有十一个默认数据库表及其在开发中的作用。您必须了解这些表中的每一列及其可能值，因为大多数WordPress开发都是在核心功能之上进行的。
- en: Understanding the importance of database usage
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解数据库使用的重要性
- en: In today's world, many of the developers doesn't have in-depth knowledge of
    WordPress core features and yet, capable of turning your requirement into a working
    solution. However, these solutions are often based on assumptions, rather than
    knowing the exact process and data usage under the hood.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今世界，许多开发者对WordPress核心功能缺乏深入了解，但仍然能够将您的需求转化为可行的解决方案。然而，这些解决方案通常基于假设，而不是了解底层的具体过程和数据使用情况。
- en: 'Tracking database usage and knowing the exact data needs of any given process
    is crucial for building flexible and extendable solutions that integrate perfectly
    with other parts of the site. Let''s identify some of the use cases where you
    need perfect knowledge of data usage in WordPress features:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪数据库使用情况并了解任何给定过程的精确数据需求对于构建灵活且可扩展的解决方案，这些解决方案能够完美地与其他网站部分集成至关重要。让我们确定一些需要完美了解WordPress功能中数据使用情况的用例：
- en: Building existing features on the frontend
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在前端构建现有功能
- en: WordPress offers a powerful backend with many features for administration-level
    users. Post creation and user management are some of the top features in backend.
    Comparatively, existing WordPress frontend features are less powerful and mainly
    focus on displaying data. So, it’s a common requirement to transfer these backend
    features to the frontend, allowing users with lesser permissions to create content
    from the frontend without giving access to the backend.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress为管理员级用户提供了一个功能强大的后端，其中包含许多功能。帖子创建和用户管理是后端的一些顶级功能。相比之下，现有的WordPress前端功能相对较弱，主要专注于显示数据。因此，将后端功能转移到前端是一个常见的需求，允许权限较低的用户从前端创建内容，而不必提供对后端的访问权限。
- en: In such scenarios, we need to know the exact data used in the backend process,
    so that we can emulate it on the frontend process. Often, developers don't have
    necessary knowledge of all data stored in such a process. So, the frontend aspect
    of this feature works perfectly, but breaks the backend due to lack of data.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要了解后端过程中使用的确切数据，以便我们可以在前端过程中模拟它。通常，开发者对这些过程中存储的所有数据的必要知识不足。因此，此功能的客户端方面工作得很好，但由于数据不足，后端出现了问题。
- en: Let's consider a simple scenario where you want to let users upload files using
    a form on your site, and store the files in a WordPress media library. At first
    glance, you will see that media files are stored in the `wp_posts` table and contains
    the necessary data. So, you will save the data to the `wp_posts` table. However,
    you may not notice that additional metadata for files are stored in the `wp_postmeta`
    table. Therefore, your frontend implementation may break the core features or
    other plugins that rely on this data.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个简单的场景，即你希望让用户通过你网站上的表单上传文件，并将文件存储在WordPress媒体库中。乍一看，你会发现媒体文件存储在`wp_posts`表中，并包含必要的数据。因此，你将数据保存到`wp_posts`表中。然而，你可能没有注意到文件的其他元数据存储在`wp_postmeta`表中。因此，你的前端实现可能会破坏依赖于这些数据的核心功能或其他插件。
- en: Customizing existing plugins
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制现有插件
- en: Use of other existing plugins is almost certain in WordPress site development.
    Often, these plugins don't fit directly for our needs, and hence the customization
    becomes an obvious choice. Understanding the use of data becomes even more crucial
    since some of these custom plugins lack documentation and code quality compared
    to core features. Customizing a plugin without knowing its data usage can lead
    to major conflicts compared to core features.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress网站开发中使用其他现有插件几乎是肯定的。通常，这些插件并不直接满足我们的需求，因此定制成为明显的选择。了解数据的使用变得尤为重要，因为这些定制插件与核心功能相比，缺乏文档和代码质量。在不了解其数据使用的情况下定制插件，与核心功能相比可能会导致重大冲突。
- en: In such scenarios, we need a thorough examination of documentation to manually
    track database usage and when possible get the support of the developer to build
    custom solutions. Let me pick up and example from one of our own plugins. We have
    a user profile management plugin where we store additional user details in the
    `wp_usermeta` table. Since searching hundreds of rows per user in the `wp_usermeta`
    table is a cumbersome task, we also store all additional data in a single row
    as a search cache. We have seen many developers customizing the plugin to update
    user data, without knowing the need for a search cache value. Even though user
    data is updated, users don't appear in search results due to the missing search
    cache value. Such scenarios are common in plugin customizations and it's a must
    identify and avoid them using data tracking methods.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要对文档进行彻底检查，以手动跟踪数据库使用情况，并在可能的情况下获得开发者的支持来构建定制解决方案。让我从一个我们自己的插件中举一个例子。我们有一个用户资料管理插件，其中我们在`wp_usermeta`表中存储额外的用户详细信息。由于在`wp_usermeta`表中搜索每个用户的数百行是一个繁琐的任务，所以我们也将所有附加数据存储在单行中作为搜索缓存。我们见过许多开发者定制插件以更新用户数据，却不知道需要搜索缓存值。尽管用户数据已更新，但由于缺少搜索缓存值，用户不会出现在搜索结果中。这种场景在插件定制中很常见，必须使用数据跟踪方法来识别和避免它们。
- en: We have looked at the most common situations where tracking and knowing the
    data usage becomes critical. You may find other less common situations where consistency
    of the data becomes essential.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经研究了跟踪和了解数据使用成为关键的最常见情况。你可能会发现其他不太常见的情况，其中数据的一致性变得至关重要。
- en: How to track database usage in WordPress
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何跟踪WordPress中的数据库使用情况
- en: We identified the importance of tracking and knowing the data needs of core
    features as well as custom features. The next question is how we can track and
    understand data to avoid potential conflicts. So, we need a method that logs/shows
    all queries run within a user request. There are numerous ways to track database
    queries, including premium enterprise tools and the command line. As you are beginning
    WordPress development, we are going to look at some of the simpler and useful
    methods that expand your knowledge.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确定了跟踪和了解核心功能以及定制功能的数据需求的重要性。接下来，问题是我们如何跟踪和理解数据以避免潜在的冲突。因此，我们需要一种记录/显示用户请求中运行的所有查询的方法。有无数种跟踪数据库查询的方法，包括付费的企业级工具和命令行。由于你刚开始WordPress开发，我们将探讨一些更简单且有用的方法，这些方法可以扩展你的知识。
- en: Using MySQL/MariaDB log files
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MySQL/MariaDB日志文件
- en: This is one of the simpler and must-know methods as a developer. Both MySQL
    and MariaDB allow us to create a log file where we can track all the steps in
    connecting, initializing, and executing queries in a database. First, we need
    to add some configurations to the MySQL/MariaDB `ini` file. Since we are using
    WAMP for the development tasks of this book, you can click on the WAMP icon, go
    to the MySQL section, and open the `my.ini` file. You can use the same process
    for MAMP or any other tools that offer MySQL/MariaDB configuration.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种作为开发者必须知道的一个简单且重要的方法。MySQL和MariaDB都允许我们创建一个日志文件，我们可以跟踪数据库中连接、初始化和执行查询的所有步骤。首先，我们需要向MySQL/MariaDB的`ini`文件添加一些配置。由于我们正在使用WAMP来完成本书的开发任务，你可以点击WAMP图标，转到MySQL部分，并打开`my.ini`文件。你可以使用相同的过程来处理MAMP或其他提供MySQL/MariaDB配置的工具。
- en: In Linux servers, the MySQL/MariaDB configuration file is often `/etc/mysql/my.cnf`;
    if you don't find it try to locate it using `sudo updatedb ; locate my.cnf`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux服务器上，MySQL/MariaDB的配置文件通常是`/etc/mysql/my.cnf`；如果你找不到它，尝试使用`sudo updatedb
    ; locate my.cnf`来定位它。
- en: 'Next, you can add the following lines to the end of the file to configure the
    log file output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以在文件末尾添加以下行来配置日志文件输出：
- en: '[PRE0]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In linux servers, you can use `/var/log/mysql/mysql-debug.log` instead of `C:/wamp/logs/general-query.log`
    for the log file path. After modifying, restart MySQL/MariaDB server like this:
    `/etc/init.d/mysql restart`.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux服务器上，你可以使用`/var/log/mysql/mysql-debug.log`而不是`C:/wamp/logs/general-query.log`作为日志文件路径。修改后，像这样重新启动MySQL/MariaDB服务器：`/etc/init.d/mysql
    restart`。
- en: Once the rules are added, you should save and restart the WAMP server. Now,
    you can refresh your WordPress site to test a user request.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了规则，你应该保存并重新启动WAMP服务器。现在，你可以刷新你的WordPress站点来测试用户请求。
- en: Keep in mind that many of the hosting providers don't allow access to MySQL/MariaDB
    logs.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，许多托管提供商不允许访问MySQL/MariaDB日志。
- en: Then, open the log file in given location and you will see many queries executed
    within that request. So, you can use this method to track database changes by
    clearing the file, executing the request, and viewing the updated log file. The
    limitation of this method is that it shows all queries including numerous `SELECT`
    queries. Since we only want to track `INSERT`, `UPDATE`, and `DELETE` queries,
    it's not the perfect method.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在指定位置打开日志文件，你将看到在该请求中执行了许多查询。因此，你可以使用这种方法通过清除文件、执行请求和查看更新的日志文件来跟踪数据库更改。这种方法的一个限制是，它显示了包括大量`SELECT`查询在内的所有查询。由于我们只想跟踪`INSERT`、`UPDATE`和`DELETE`查询，这并不是一个完美的方法。
- en: Comparing database backups
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较数据库备份
- en: This is one of the easier methods to compare the changes, instead of reviewing
    executed queries, and identify them. In this method, we take a database backup
    using `phpMyAdmin`, execute the user request, and take another database backup.
    Then, we can use a file compare tool like **MELD** ([http://meldmerge.org/](http://meldmerge.org/))
    to check how the database is changed within the request. The limitation of this
    process is that you need to manually take database backups, and comparing may
    become time-consuming for larger databases.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种比较更改的简单方法之一，而不是通过审查执行的查询来识别它们。在这个方法中，我们使用`phpMyAdmin`进行数据库备份，执行用户请求，然后进行另一个数据库备份。然后，我们可以使用像**MELD**（[http://meldmerge.org/](http://meldmerge.org/)）这样的文件比较工具来检查请求期间数据库是如何变化的。这个过程的一个限制是，你需要手动进行数据库备份，对于大型数据库，比较可能会变得耗时。
- en: Creating a manual query logger
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建手动查询记录器
- en: 'This is the ideal method where we create our own query logger and specify which
    queries we need to track. Let''s look at the implementation of this method using
    the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们创建自己的查询记录器并指定需要跟踪哪些查询的理想方法。让我们看看以下代码的实现：
- en: '[PRE1]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code uses WordPress **query** filter to filter all the queries
    that are executed in user request. A complete `sql` query is parsed as a parameter
    and we filter `INSERT`, `UPDATE`, and `DELETE` queries. Then, we can log the queries
    to a preferred file. Here, we are adding the queries to PHP error log for illustration
    purposes. You can check the expected queries using the log file at `wamp/logs/php_error.log`.
    You can include this code in the `functions.php` file of the theme, until we get
    into plugin development.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码使用了WordPress **查询**过滤器来过滤用户请求中执行的所有查询。一个完整的`sql`查询被解析为一个参数，我们过滤`INSERT`、`UPDATE`和`DELETE`查询。然后，我们可以将查询记录到指定的文件中。在这里，我们为了说明目的，将查询添加到PHP错误日志中。你可以使用`wamp/logs/php_error.log`中的日志文件来检查预期的查询。你可以将此代码包含在主题的`functions.php`文件中，直到我们开始插件开发。
- en: You can choose one of the preferred methods or an external database tool to
    track database usage for any user request, and understand the must-use data of
    different processes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择一种首选方法或外部数据库工具来跟踪任何用户请求的数据库使用情况，并了解不同过程中必须使用的数据。
- en: Tracking database usage of common WordPress features
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪常见WordPress功能的数据库使用情况
- en: At this point, you should be able to configure and track database usage for
    both backend and frontend user requests. In this section, we will be looking at
    the usage of database in the most common WordPress features, and understand the
    need for storing the specified data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该能够配置和跟踪后端和前端用户请求的数据库使用情况。在本节中，我们将探讨WordPress最常用功能中的数据库使用情况，并了解存储指定数据的需求。
- en: Post creation
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子创建
- en: 'Being the most frequently used feature in WordPress sites, you need thorough
    understanding of the database usage. First, you need to go to **Posts** | **Add
    New** section and clear the existing query logs. Then, you can add the data and
    publish a post to track the database usage. The Post creation screen offers wide
    range of features and hence database usage may vary based on the amount of options
    you use. Let''s track the queries by using the most common options in post creation:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是WordPress网站中最常用的功能，你需要深入了解数据库的使用。首先，你需要进入**帖子** | **新建**部分，清除现有的查询日志。然后，你可以添加数据并发布帖子以跟踪数据库使用情况。帖子创建屏幕提供了广泛的功能，因此数据库使用可能根据你使用的选项数量而变化。让我们通过使用帖子创建中最常见的选项来跟踪查询：
- en: '[PRE2]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The log file will contain a large amount of queries. Many of them are generated
    due to the WordPress autosaving process and temporary data storage for transients,
    cache, and admin-level options. We have omitted such queries and included the
    essential ones for understanding post creation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件将包含大量查询。其中许多是由于WordPress自动保存过程和用于transients、缓存和管理员级别选项的临时数据存储而生成的。我们已经省略了这些查询，并包括了理解帖子创建所必需的基本查询。
- en: In this scenario, we have assigned existing categories, tags and custom fields,
    along with the main post content. As you can see, the process starts with a INSERT
    query to the `wp_posts` table, where all primary post-specific data is stored.
    This query is executed as soon as you load the post creation screen. Then, WordPress
    updates the already created post when you hit the Publish button. The next query
    adds the custom field data to the `wp_postmeta` table. If you have multiple custom
    fields, you will see multiple such queries, one for each field.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，我们分配了现有的分类、标签和自定义字段，以及主要帖子内容。正如你所见，这个过程从向`wp_posts`表插入查询开始，该表存储所有主要帖子特定数据。当你加载帖子创建屏幕时，此查询立即执行。然后，当你点击发布按钮时，WordPress更新已创建的帖子。下一个查询将自定义字段数据添加到`wp_postmeta`表。如果你有多个自定义字段，你会看到多个这样的查询，每个字段一个。
- en: Next, two queries relate the post with the category and update the post count
    for that specific category. The remaining two queries use the same process for
    tags instead of category. Here, we have seen the use of four database tables in
    post creation. Instead of using existing categories and tags, we can create new
    ones to analyze the use of all six post related tables in post creation. I recommend
    you further track the database usage by changing post statuses, adding a featured
    image, changing post formats, and changing post visibility.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，两个查询将帖子与分类相关联，并更新该特定分类的帖子计数。剩下的两个查询使用与分类相同的流程来处理标签。在这里，我们看到了在帖子创建中使用四个数据库表。我们不仅可以使用现有的分类和标签，还可以创建新的来分析帖子创建中所有六个帖子相关表的使用情况。我建议你进一步通过更改帖子状态、添加特色图片、更改帖子格式和更改帖子可见性来跟踪数据库使用情况。
- en: Page creation
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面创建
- en: 'This is similar to post creation process where we use **Pages** | **Add New**
    section to load the page creation screen. We have less options in page creation
    compared to post creation process. Therefore, we should notice a decrease in the
    number of queries executed in this process. Let''s take a look at the executed
    queries:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这与帖子创建过程类似，我们使用**页面** | **新建**部分来加载页面创建屏幕。与帖子创建过程相比，页面创建的选项更少。因此，我们应该注意到在此过程中执行的查询数量有所减少。让我们看看执行的查询：
- en: '[PRE3]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we anticipated, only two queries executed in this process. The first one
    creates the page on screen load and the next one updates the content when the
    user hits the **Publish** button. So, it's easier to manage pages as a developer,
    compared to posts.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们预期的，这个过程中只执行了两个查询。第一个查询在页面加载时创建页面，下一个查询在用户点击**发布**按钮时更新内容。因此，与帖子相比，作为开发者管理页面更容易。
- en: User creation
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户创建
- en: 'Many websites consist of just one or two administrators, with the registration
    feature blocked for public. However, the need for user registrations is rising
    in modern websites due the need of personalized content, rather than same content
    for all users. So, frontend registration becomes a common implementation. Let''s
    track the database usage by creating user from the backend **Users** | **Add New**
    section:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站只由一个或两个管理员组成，公共注册功能被阻止。然而，由于需要个性化内容而不是所有用户都使用相同的内容，现代网站对用户注册的需求正在增加。因此，前端注册成为一种常见的实现方式。让我们通过从后端**用户**
    | **添加新用户**部分创建用户来跟踪数据库使用情况：
- en: '[PRE4]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The process starts by inserting a new user to the `wp_users` table with primary
    details such as username, email, password, and registered date. The additional
    details of users goes to `wp_usermeta` table with key-value pairs. Again, this
    is different to what we have used as developers, where we store such data in a
    different table with these keys as columns. We can see many INSERT queries to
    store details such as names, description, language, and so on. Among these values,
    `locale` and `wp_capabilities` are crucial ones where we define the language for
    the user and maintain the user roles and capabilities. Developers can use the
    `wp_usermeta` table to store custom data required for their websites.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程从向`wp_users`表插入一个新用户开始，包括如用户名、电子邮件、密码和注册日期等主要细节。用户的附加细节以键值对的形式存储在`wp_usermeta`表中。这又不同于我们作为开发者所使用的，我们将这些数据存储在不同的表中，这些键作为列。我们可以看到许多用于存储如名称、描述、语言等细节的INSERT查询。在这些值中，`locale`和`wp_capabilities`是关键值，其中我们定义了用户的语言并维护用户角色和能力。开发者可以使用`wp_usermeta`表来存储他们网站所需的定制数据。
- en: Media uploads
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体上传
- en: 'We rarely see only full text-based content in modern websites. Most posts and
    pages are designed to use images and videos. So, media manager becomes a must
    user feature for many site owners. Using and developing with the WordPress media
    uploader could be different compared to building file upload forms from scratch.
    Let''s review the use of database for media uploads using **Media** | **Add New**
    section:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代网站上，我们很少只看到基于全文的内容。大多数帖子页面都是设计用来使用图片和视频的。因此，媒体管理器成为许多网站所有者必须使用的功能。使用和开发WordPress媒体上传器可能与从头开始构建文件上传表单有所不同。让我们回顾一下使用**媒体**
    | **添加新内容**部分进行媒体上传的数据库使用情况：
- en: '[PRE5]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In conventional development, we use a separate table to store the uploaded file
    details. However, WordPress uses a different approach by considering media as
    a post type. It might not be the ideal implementation as a large amount of media
    files could affect the performance of loading important posts and pages. But,
    we need to get used to the process. So, the main media file details are stored
    in the `wp_posts` table. Apart from that, two metafields are created in the `wp_postmeta`
    table to handle path and metadata such as captions, width, height. As a developer,
    we can use the postmeta table to store many additional data required for media
    files in your projects.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统开发中，我们使用一个单独的表来存储上传文件的相关细节。然而，WordPress通过将媒体视为一种帖子类型采取了不同的方法。这可能不是理想的实现方式，因为大量的媒体文件可能会影响加载重要帖子页面的性能。但我们需要习惯这个过程。因此，主要媒体文件细节存储在`wp_posts`表中。除此之外，在`wp_postmeta`表中创建了两个元字段来处理路径和元数据，如标题、宽度、高度。作为开发者，我们可以使用postmeta表来存储项目中媒体文件所需的大量附加数据。
- en: We used four of the most frequently used scenarios to track database usage.
    You might have already understood the importance of consistent data and use of
    database tracking to achieve it. Here, we have tracked the queries in a default
    WordPress installation. As we use more and more plugins, these scenarios becomes
    extremely complex. So, I recommend you use this technique to track data for the
    features of popular WordPress plugins, and understand how we can customize the
    features without breaking other parts.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了四种最常用的场景来跟踪数据库使用情况。你可能已经理解了保持数据一致性和使用数据库跟踪以实现这一目标的重要性。在这里，我们跟踪了默认WordPress安装中的查询。随着我们使用越来越多的插件，这些场景变得极其复杂。因此，我建议你使用这种技术来跟踪流行WordPress插件的功能数据，并了解我们如何在不破坏其他部分的情况下自定义功能。
- en: Overview of the multisite database structure
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多站点数据库结构概述
- en: 'Multisite network is a feature that allows creation of multiple sites within
    the same WordPress installation, while sharing the available resources. Developers
    moving to WordPress from pure PHP development may be unfamiliar with this concept.
    The whole database structure changes in multisite in a way that we can''t anticipate.
    So, it''s important to get an idea of how multisite database works in case you
    are planning to develop multisite compatible plugins and themes. The following
    is a simple illustration of the changes in multisite compared to single site installations:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 多站点网络是一个允许在同一WordPress安装中创建多个站点的功能，同时共享可用资源。从纯PHP开发转向WordPress的开发者可能不熟悉这个概念。在多站点中，整个数据库结构会发生变化，这是我们不能预料的。因此，如果你计划开发兼容多站点的插件和主题，了解多站点数据库的工作方式是很重要的。以下是将多站点与单站点安装相比的简单说明：
- en: '![](img/f24dbb0b-bf0e-4167-8cd9-4c62cad3da06.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f24dbb0b-bf0e-4167-8cd9-4c62cad3da06.png)'
- en: 'As you can see, six new tables have been added to the database and the existing
    tables have increased. This image only illustrates how tables are connected in
    multisite environment. However, this not a precise relationship diagram between
    the tables. Let''s identify the role of six new tables in the preceding diagram:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，数据库中已添加了六个新表，现有表的数量也有所增加。这张图仅说明了在多站点环境中表之间的连接方式。然而，这并不是表之间的精确关系图。让我们在先前的图中识别六个新表的作用：
- en: '`wp_site`: It is the main database table where all your network details are
    stored. WordPress allows you to create multiple networks in same installation.
    However, we rarely see real applications with more than one network in the same
    installation. This means this table will only have one record to store the network
    details, such as network domain and path.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_site`: 它是主要数据库表，其中存储了所有网络详情。WordPress允许你在同一安装中创建多个网络。然而，我们很少看到同一安装中有超过一个网络的实际应用。这意味着这个表将只有一个记录来存储网络详情，例如网络域名和路径。'
- en: '`wp_sitemeta`: It stores the options and settings for networks and works similar
    to the `wp_options` table.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_sitemeta`: 它存储网络选项和设置，其工作方式类似于`wp_options`表。'
- en: '`wp_blogs`: It is the primary storage location for sites in network. Since
    you are running a multisite network, this table will contain two more records
    for site details including domain, path, created dates, and site-specific statuses.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_blogs`: 它是网络中站点的首要存储位置。由于你正在运行多站点网络，这个表将包含两个额外的记录，用于存储站点详情，包括域名、路径、创建日期和特定站点的状态。'
- en: '`wp_blog_versions`: It stores current database version of the sites available
    in network. WordPress will require certain database versions for its version upgrades.
    In such cases, this table will be used to track the database version.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_blog_versions`: 它存储网络中站点的当前数据库版本。WordPress在版本升级时需要特定的数据库版本。在这种情况下，这个表将用于跟踪数据库版本。'
- en: '`wp_registration_log`: It stores the admin user details of each site in the
    network.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_registration_log`: 它存储网络中每个站点的管理员用户详情。'
- en: '`wp_signups`: It stores the new users added through the registration process
    of WordPress with the metadata for the respective site. These are also stored
    in the `wp_users` table of the respective site.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_signups`: 它存储通过WordPress注册过程添加的新用户以及相应站点的元数据。这些数据也存储在相应站点的`wp_users`表中。'
- en: We had a brief introduction to the multisite-specific tables. Let's see how
    other tables are connected in a multisite environment. Developers who are used
    to working with conventional database concepts such as normalization may find
    it tough to understand and get used the WordPress way of handling multisite. Usually,
    we design database tables with relationships between the necessary tables in way
    that everything is connected. However, in this scenario, we see some tables not
    connected with any other tables, while some tables are connected with other tables
    without table relationships. So, it's important to understand how these tables
    work within multisites.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要介绍了多站点特定的表。让我们看看在其他多站点环境中其他表是如何连接的。习惯于使用传统数据库概念（如规范化）的开发者可能会发现理解并适应WordPress处理多站点的方式比较困难。通常，我们设计数据库表时，会以必要表之间的关系连接一切。然而，在这种情况下，我们看到一些表没有与其他表连接，而一些表则没有表关系地与其他表连接。因此，了解这些表在多站点中的工作方式是很重要的。
- en: The purpose of a multisite network is to share WordPress installation, themes,
    and plugins. However, we still need different database tables to handle data for
    each site in the network. WordPress creates multiple versions of the same database
    table in a multisite network. So, default tables are assigned to the first site
    of the multisite. The newly created sites in the network will have the same set
    of tables created with the prefix of `wp_2`, `wp_3`, and so on. The illustration
    shows that these core tables are connected with the `wp_blogs` table. However,
    there are no relationships between `wp_blogs` and other tables. Instead, when
    a site is loaded, WordPress identifies the loaded blog ID and then uses the tables
    with the prefix of the blog ID. Each site in the network shares WordPress installation,
    plugins, and themes while using separate database tables with the prefix of blog
    ID.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 多站点网络的目的在于共享WordPress安装、主题和插件。然而，我们仍然需要不同的数据库表来处理网络中每个站点的数据。WordPress在多站点网络中创建了同一数据库表的多个版本。因此，默认表被分配给多站点网络中的第一个站点。网络中新创建的站点将拥有与`wp_2`、`wp_3`等前缀相同的表集。插图显示这些核心表与`wp_blogs`表相连。然而，`wp_blogs`与其他表之间没有关系。相反，当站点加载时，WordPress会识别加载的博客ID，然后使用具有博客ID前缀的表。网络中的每个站点在共享WordPress安装、插件和主题的同时，使用具有博客ID前缀的独立数据库表。
- en: In development, a multisite structure may not become a major issue unless you
    don't follow the recommended ways of accessing the database. However, understanding
    where the data is stored for each site is important to test and resolve conflicts.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，多站点结构可能不会成为主要问题，除非你不遵循推荐的数据库访问方式。然而，了解每个站点的数据存储位置对于测试和解决冲突非常重要。
- en: Creating and managing custom tables
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理自定义表格
- en: 'A default WordPress database can be extended by any number of custom tables
    to suit our project''s requirements. The only thing we have to consider is the
    creation of custom tables over existing ones. There are two major reasons for
    creating custom tables:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的WordPress数据库可以通过任意数量的自定义表来扩展，以满足我们项目的需求。我们唯一需要考虑的是在现有表上创建自定义表。创建自定义表有两个主要原因：
- en: '**Difficulty of matching data to existing tables**: Existing database tables
    are flexible enough to handle many common requirements. However, we need to be
    wise enough to choose custom tables in certain scenarios. Assume we have a requirement
    where we need to store user''s previous job history. If we consider existing tables,
    we can only match this requirement to `wp_usermeta` table as key-value pairs.
    However, it''s extremely difficult to implement proper search for these data by
    using the same metakey with multiple values. In such requirements, we need a custom
    table to create predefined columns and make user job searching a simpler process.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**匹配数据到现有表的难度**：现有的数据库表足够灵活，可以处理许多常见需求。然而，在某些情况下，我们需要足够明智地选择自定义表。假设我们有一个需要存储用户以前工作历史的要求。如果我们考虑现有表，我们只能将这个要求匹配到`wp_usermeta`表作为键值对。然而，使用具有多个值的相同元键来实施这些数据的适当搜索是非常困难的。在这种情况下，我们需要一个自定义表来创建预定义的列，并简化用户工作搜索的过程。'
- en: '**Increased data volume**: The posts table plays a major role in WordPress
    sites. When it comes to large-scale websites or applications with a sizeable amount
    of data, it''s not recommended to keep all the data in a posts table. Let''s assume
    that we are building a product catalog that creates millions of orders. Storing
    order details in the posts table as a custom post type is not the ideal implementation.
    In such circumstances, the posts table will go out of control due to the large
    dataset. The same theory applies to the existing meta tables as well. In these
    cases, it''s wise to separate different datasets into their own tables to improve
    performance and keep things manageable.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据量增加**：文章表在WordPress站点中扮演着重要角色。当涉及到大型网站或具有大量数据的网站和应用时，不建议将所有数据都保存在文章表中。假设我们正在构建一个创建数百万订单的产品目录。将订单详情作为自定义文章类型存储在文章表中并不是理想的实现方式。在这种情况下，由于数据集很大，文章表将失去控制。同样的理论也适用于现有的元数据表。在这些情况下，将不同的数据集分离到它们自己的表中，以提高性能并保持事物可管理，是明智之举。'
- en: Now, we can look at the process of working with custom database tables.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看看如何与自定义数据库表一起工作的过程。
- en: Creating custom tables
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义表格
- en: 'In pure PHP development, we create the database tables manually before moving
    onto the implementation phase. With the WordPress plugin-based architecture, it''s
    certain that we might need to create custom tables using plugins in the later
    stages of the projects. Creating custom tables through plugins involves certain
    predefined procedures recommended by WordPress. Since table creation is a one-time
    task, we should implement the process on plugin activation or installation. Let''s
    take a look at the code for creating custom database tables:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯PHP开发中，我们在进入实现阶段之前会手动创建数据库表。在基于WordPress插件的架构中，我们肯定在项目的后期阶段可能需要使用插件来创建自定义表格。通过插件创建自定义表格涉及WordPress推荐的一定预定义的程序。由于表创建是一个一次性任务，我们应该在插件激活或安装时实现此过程。让我们看看创建自定义数据库表的代码：
- en: '[PRE6]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Firstly, we have to include the `upgrade.php` file to make use of the `dbDelta`
    function. The next most important thing is to use the prefix for database tables.
    By default, WordPress creates a prefix called `wp_` for all the tables. We should
    change the prefix in the installation process covered in [Chapter 1](205a9625-512c-4925-a3a8-bfe8a1784773.xhtml),
    *Introduction to WordPress Development*. It's important to use the existing prefix
    to maintain consistency and avoid issues in multisite scenarios. Next, we have
    to check the existence of a database table using the **show tables** query. Finally,
    you can define your table creation query and use the `dBDelta` function to implement
    it on the database.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须包含`upgrade.php`文件以使用`dbDelta`函数。接下来最重要的事情是使用数据库表的名称前缀。默认情况下，WordPress为所有表创建一个名为`wp_`的前缀。我们应该在[第1章](205a9625-512c-4925-a3a8-bfe8a1784773.xhtml)，*WordPress开发简介*中提到的安装过程中更改前缀。使用现有前缀以保持一致性并避免在多站点场景中出现问题是很重要的。接下来，我们必须使用`show
    tables`查询检查数据库表的存在。最后，你可以定义你的表创建查询，并使用`dbDelta`函数在数据库中实现它。
- en: Check out the guidelines for creating a table creation query at [http://codex.wordpress.org/Creating_Tables_with_Plugins](http://codex.wordpress.org/Creating_Tables_with_Plugins),
    as the `dbDelta` function can be tricky in certain scenarios.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅创建表查询的指南[http://codex.wordpress.org/Creating_Tables_with_Plugins](http://codex.wordpress.org/Creating_Tables_with_Plugins)，因为`dbDelta`函数在某些场景中可能很棘手。
- en: We should only use plugin installation/uninstallation to create and delete custom
    tables to avoid unnecessary queries. Since we have not started plugin development
    yet, you need to wait for later sections of the book to understand how and where
    to use this code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该仅使用插件安装/卸载来创建和删除自定义表格，以避免不必要的查询。由于我们尚未开始插件开发，你需要等待本书的后续章节来了解如何以及在哪里使用此代码。
- en: 'We looked at the necessity of custom tables in WordPress sites. Even though
    custom tables offer you more flexibility within WordPress, there will be a considerable
    number of limitations, as listed here:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了WordPress网站上自定义表格的必要性。尽管自定义表格在WordPress中为你提供了更多的灵活性，但正如以下所列出的，将会有相当多的限制：
- en: WordPress default backups will not include custom tables.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress默认备份将不包括自定义表格。
- en: There are no built-in functions for the accessing database. All the queries,
    filtering, and validation needs to be done from scratch using the existing `$wpdb`
    variable.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有内置的函数用于访问数据库。所有查询、过滤和验证都需要从头开始使用现有的 `$wpdb` 变量来完成。
- en: User interfaces for displaying these tables' data need to be created from scratch.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示这些表格数据的用户界面需要从头开始创建。
- en: Therefore, you should avoid creating custom tables in all possible circumstances,
    unless they would be advantageous in the context of your application.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在所有可能的情况下，你应该避免创建自定义表格，除非它们在你的应用程序的上下文中具有优势。
- en: Executing basic CRUD operations on existing tables
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在现有表上执行基本的CRUD操作
- en: WordPress provides well-optimized built-in methods for accessing the existing
    database tables. Therefore, we don't need to write our own queries. Let's see
    how basic **Create, Read, Update, Delete** (**CRUD**) operations are executed
    on existing tables.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress提供了用于访问现有数据库表的优化内置方法。因此，我们不需要编写自己的查询。让我们看看基本的**创建、读取、更新、删除**（**CRUD**）操作是如何在现有表上执行的。
- en: Inserting records
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入记录
- en: 'All the existing tables contain a pre-built insert functions for creating new
    records. Some of these functions uses a predefined set of parameters while other
    functions accepts array of information for inserting the record. Let''s take a
    look at some of the frequently used insert functions:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现有表都包含用于创建新记录的预构建插入函数。其中一些函数使用预定义的参数集，而其他函数接受信息数组以插入记录。让我们看看一些常用的插入函数：
- en: '| `wp_insert_post` | Creates a new post or page in the `wp_posts` table. If
    this is used on an existing post, it will update the existing record. Accepts
    an array type parameter with all post details. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `wp_insert_post` | 在 `wp_posts` 表中创建新帖子或页面。如果用于现有帖子，它将更新现有记录。接受一个包含所有帖子详细信息的数组类型参数。|'
- en: '| `add_option` | Creates a new option in the `wp_options` table, if it doesn’t
    already exist. Accepts key and value as parameters. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `add_option` | 如果不存在，则在 `wp_options` 表中创建新选项。接受键和值作为参数。|'
- en: '| `wp_insert_user` | Creates a new user in the `wp_users` table. Accepts an
    array type parameter with all post details. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `wp_insert_user` | 在 `wp_users` 表中创建新用户。接受一个包含所有帖子详细信息的数组类型参数。|'
- en: Updating records
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新记录
- en: 'All the existing tables contain a pre-built update method for updating existing
    records. The following list illustrates a few of the built-in update functions:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现有表都包含用于更新现有记录的预构建更新方法。以下列表说明了几个内置的更新函数：
- en: '| `update_post_meta` | This creates or updates additional details about posts
    in the `wp_postmeta` table. Accepts post ID, key, and value as parameters. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `update_post_meta` | 这将在 `wp_postmeta` 表中创建或更新关于帖子的额外详细信息。接受帖子 ID、键和值作为参数。|'
- en: '| `wp_update_term` | This updates existing terms in the `wp_terms` table. Accepts
    term ID and taxonomy as parameters. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `wp_update_term` | 这将在 `wp_terms` 表中更新现有术语。接受术语 ID 和分类法作为参数。|'
- en: '| `update_user_meta` | This updates user meta details in the `wp_usermeta` table
    based on the user ID. Accepts user ID, key, and value as parameters. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `update_user_meta` | 根据用户 ID 在 `wp_usermeta` 表中更新用户元详细信息。接受用户 ID、键和值作为参数。|'
- en: Deleting records
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除记录
- en: 'We have similar methods for deleting records in each of the existing tables
    as we have for updating records. The following list illustrates a few of the built-in
    delete functions:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在现有表的删除记录方面有类似的方法，就像更新记录一样。以下列表说明了几个内置的删除函数：
- en: '| `delete_post_meta` | This deletes custom fields using the specified key in
    the `wp_postmeta` table. Accepts post ID, key, and value as parameters. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `delete_post_meta` | 这使用指定的键在 `wp_postmeta` 表中删除自定义字段。接受帖子 ID、键和值作为参数。|'
- en: '| `wp_delete_post` | This removes existing posts, pages, or attachments from
    the `wp_posts` table. Accepts post ID as parameter. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `wp_delete_post` | 这从 `wp_posts` 表中删除现有帖子、页面或附件。接受帖子 ID 作为参数。|'
- en: '| `delete_user_meta` | This removes the metadata matching criteria from a user
    from the `wp_usermeta` table. Accepts user ID, key, and value as parameters. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `delete_user_meta` | 这从 `wp_usermeta` 表中删除匹配用户元数据的记录。接受用户 ID、键和值作为参数。|'
- en: Selecting records
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择记录
- en: 'As usual, there is a set of built-in functions for selecting records from the
    existing tables. The following list contains a few of the data-selecting functions:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，有一组内置函数用于从现有表中选择记录。以下列表包含了一些数据选择函数：
- en: '| `get_posts` | This retrieves the posts as an array from the `wp_posts` table
    based on the passed arguments. Also, we can use the `WP_Query` class with the
    necessary arguments to get the post list from the OOP method. Accepts an array
    type parameter with all post details. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `get_posts` | 根据传递的参数从 `wp_posts` 表中检索帖子作为数组。此外，我们还可以使用带有必要参数的 `WP_Query`
    类以面向对象的方法从 OOP 获取帖子列表。接受一个包含所有帖子详细信息的数组类型参数。|'
- en: '| `get_option` | This retrieves the option value of the given key from the `wp_options` table.
    Accepts a key parameter. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `get_option` | 这从 `wp_options` 表中检索给定键的选项值。接受一个键参数。|'
- en: '| `get_users` | This retrieves a list of users as an array from the `wp_user` table.
    Accepts an array type parameter with all post details. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `get_users` | 这从 `wp_user` 表中检索用户列表作为数组。接受一个包含所有帖子详细信息的数组类型参数。|'
- en: Most of the database operations on exiting tables can be executed using these
    built-in functions, and you rarely find scenarios for creating your own queries.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数对现有表的数据库操作都可以使用这些内置函数执行，并且很少需要创建自己的查询。
- en: Executing basic CRUD operations on custom tables
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自定义表上执行基本的 CRUD 操作
- en: WordPress provides a built-in class called `wpdb` for handling database queries.
    This class is located inside the `wp-includes` directory. The `wpdb` class will
    be available inside your plugins and themes as a global variable and provides
    access to all the tables inside the WordPress database, including custom tables.
    Using this class for queries adds an extra layer of security as well as optimizes
    the database queries.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress提供了一个名为`wpdb`的内置类来处理数据库查询。这个类位于`wp-includes`目录中。`wpdb`类将在你的插件和主题中作为全局变量可用，并提供访问WordPress数据库中所有表的方法，包括自定义表。使用这个类进行查询增加了额外的安全层，同时也优化了数据库查询。
- en: Using the `wpdb` class for CRUD operations is straightforward with its built-in
    methods. A complete guide for using the `wpdb` class can be found at [http://codex.wordpress.org/Class_Reference/wpdb](http://codex.wordpress.org/Class_Reference/wpdb).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`wpdb`类进行CRUD操作非常简单，它提供了内置的方法。关于如何使用`wpdb`类的完整指南可以在[http://codex.wordpress.org/Class_Reference/wpdb](http://codex.wordpress.org/Class_Reference/wpdb)找到。
- en: Basically, there are no built-in methods for accessing custom tables using direct
    functions, so it's a must to use the `wpdb` class for handling custom tables.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，没有内置的方法可以直接使用函数访问自定义表，因此必须使用`wpdb`类来处理自定义表。
- en: Inserting records
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入记录
- en: 'The `wpdb` class provides a built-in insert function to insert records to custom
    database tables. So, we need to use it for better performance, instead of writing
    `INSERT` queries from scratch. Let''s take look at the syntax of insert function:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`wpdb`类提供了一个内置的插入函数来将记录插入到自定义数据库表中。因此，我们需要使用它以提高性能，而不是从头开始编写`INSERT`查询。让我们看看插入函数的语法：'
- en: '[PRE7]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first parameter takes the table name. You need to specify the custom table
    name with the WordPress database prefix. The next parameter uses an array of column
    names and respective values. The final parameter defines the correct format for
    the fields defined in the previous array. We can get number of affected rows on
    success and false as a return value on failure.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数接受表名。你需要指定带有WordPress数据库前缀的自定义表名。下一个参数使用列名和相应值的数组。最后一个参数定义了之前数组中定义的字段的正确格式。在成功时，我们可以获取受影响的行数，在失败时返回false。
- en: Updating and deleting records
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新和删除记录
- en: 'These operations works similar to insert, by using the update and delete functions
    of the `wpdb` class. Let''s take a look at the syntaxes:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作与插入类似，通过使用`wpdb`类的更新和删除函数来实现。让我们看看语法：
- en: '[PRE8]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this method, clause conditions as an array for the third parameter and format
    of the columns in where clause as fifth parameter. Other parameters are exactly
    the same as the insert function:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，将条件作为数组传递给第三个参数，将where子句中列的格式作为第五个参数。其他参数与插入函数完全相同：
- en: '[PRE9]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this method, we only have to pass the delete conditions as an array and respective
    formats of the columns. The preceding query will delete the record with an ID
    equal to `1`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，我们只需要将删除条件作为一个数组以及相应列的格式传递。前面的查询将删除ID等于`1`的记录。
- en: Selecting records
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择记录
- en: 'We can pass the query to various `wpdb` class functions such as `get_results`,
    `query`, and `get_var`, and get the result dataset. The following section illustrates
    the use of these functions:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将查询传递给各种`wpdb`类函数，如`get_results`、`query`和`get_var`，并获取结果数据集。以下部分说明了这些函数的使用：
- en: '| `$wpdb->get_results( ''select query'' )` | This can be used to select a set
    of records from any database table. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `$wpdb->get_results( ''select query'' )` | 这可以用来从任何数据库表中选择一组记录。|'
- en: '| `$wpdb->query(''query'')` | This can be used to execute any custom query.
    This is typically used to update and delete statements instead of select statements,
    as it only provides the affected rows count as the result. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `$wpdb->query(''query'')` | 这可以用来执行任何自定义查询。这通常用于更新和删除语句，而不是选择语句，因为它只提供受影响的行数作为结果。|'
- en: '| `$wpdb->get_row(''query'')` | This can be used to retrieve a single row from
    the database as an object, an associative array, or as a numerically indexed array.
    |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `$wpdb->get_row(''query'')` | 这可以用来从数据库中检索一行，作为一个对象、关联数组或数字索引数组。|'
- en: In this section, we had a brief overview of the techniques used for querying
    the database as well as built-in functions that simplify the database operations.
    In the upcoming chapters, we will be working with these functions as well as advanced
    query techniques while developing themes and plugins.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们对查询数据库所使用的技巧以及简化数据库操作的内置函数进行了简要概述。在接下来的章节中，我们将在开发主题和插件时使用这些函数以及高级查询技巧。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The goal of this chapter was to understand the role of default database tables
    and how we can adapt them to our requirements. We started by analyzing the database
    relationship diagram and identifying connections between tables. We also looked
    at the role of each database table with commonly used data.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是了解默认数据库表的作用以及我们如何根据需求调整它们。我们首先分析了数据库关系图，并确定了表之间的连接。我们还研究了每个数据库表在常用数据中的作用。
- en: We identified the need for knowing proper database usage of core features, and
    explored various ways of tracking database usage for each feature. Then, we had
    a brief overview of database structure in multisites and how it varies from that
    of a single site database. Finally, we looked at various functions for querying
    both default tables and custom tables.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确定了了解核心功能正确数据库使用方法的需求，并探讨了跟踪每个功能数据库使用的各种方法。然后，我们对多站点数据库的结构进行了简要概述，以及它与单站点数据库结构的差异。最后，我们查看了一些用于查询默认表和自定义表的函数。
- en: In [Chapter 3](94db5df8-bbb4-4e75-ae88-fa38a9aabe05.xhtml), *Designing Flexible
    Frontends with Theme Development*, we will be starting the development process
    by working with child themes, theme templates, and dynamic theme components.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](94db5df8-bbb4-4e75-ae88-fa38a9aabe05.xhtml)，*使用主题开发设计灵活的前端*，我们将通过使用子主题、主题模板和动态主题组件来开始开发过程。
