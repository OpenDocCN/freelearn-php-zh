- en: Chapter 3. Controller Usage and Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the CI controller scope and the various controller usage
    categories with several code examples of web applications. The controllers are
    the front-line decision makers of how to process or route a request and how to
    respond to actions, such as a rendered view sending back to the browser as an
    HTML page, an AJAX response to let the current requesting page update certain
    selector areas by the response, or even just to update the database seamlessly.
    The controllers use the available models, helpers, libraries, and views to respond
    to the caller, be it a web browser URL or a cron process issuing the cURL types
    `POST`/`GET` requests automatically.
  prefs: []
  type: TYPE_NORMAL
- en: The CI built-in controller behaves like an abstract class in the project scope
    so any of our project controllers must be extensions of a built-in CI controller.
    Our developed controller will inherit the CI built-in controller capabilities
    and built-in resources, such as auto-loaded helpers, libraries, and models, and
    let us code any specific services as controller methods to address our project
    requirements, and rendering the needs of the view.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, the controller is part of the MVC development framework
    that operates with models, and applies business logic, which most commonly renders
    a view back to the client web browser to proceed with user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: The web user refers, via a browser, to a URL. In CI, the view is implemented
    as a call to a CI controller method. The CI controller method processes the browser
    request and sends back a rendered view that becomes a visualized web page to the
    browsing user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The web page received from the CI controller is referred to as the rendered
    controller view; it may include anchors and buttons for the user to continue the
    interaction with the controller. When the user clicks on an anchor in the browser,
    a call to a controller is made (the anchor makes an HTTP request to activate a
    controller call). In case the user issue a event such as Button clicking, operate
    scroll bars, and so on so that this user event will trigger an action using jQuery
    to activate, for example a jQuery callback function. The jQuery callback function
    may issue a call to another rendering controller, such as :'
  prefs: []
  type: TYPE_NORMAL
- en: '`$(location).attr(''href'',controller_url_to_call);`'
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to activate an asynchronous AJAX calls to an AJAX controller.
    Such a controller function handles the AJAX request that we will discuss later
    on. When AJAX calls returned from the server , their returned data may be used
    by client-side JavaScript to, update certain page regions/ (HTML selector/s) of
    the web page, for example, when typing a search string and issuing a search button,
    the AJAX response will provide the search results to be visualized in the same
    web page or will move to another page.
  prefs: []
  type: TYPE_NORMAL
- en: More on controllers in general can be found at [http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the chapter topics and subtopics we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Scope of the CI controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Usage categories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering views
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers serving browser AJAX requests
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers serving Linux scheduled `cron` execution requests
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CI controller expansion and usage( )(Refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*, for more)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading resources of models, helpers, and libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using loaded resources
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling CI controller methods
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 1: the default home page controller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 2: sending e-mails with attachments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 3: admin and regular user log in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin by briefly reviewing the scope and use cases of the application
    controller in the CI framework and how we can use them for our project requirement
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Scope of the CI controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CI controller is the hub and brain of the CI MVC that handles the HTTP
    requests, such as those from the browser, and operates with other CI resources
    to respond. The CI controller scope is described in the following figure and operates
    with other CI resources to respond to the requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scope of the CI controller](img/4704OT_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The general flow with the CI controller is shown in the preceding figure. The
    user's browser sends the HTTP request to the URL of the CI project. Initially,
    the requested URL is processed via the routes based on the routes configuration
    `/conf/routes.php`. For more information, refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*. The specific
    CI controller is instantiated and the specific method is called. The CI method
    may be assisted by any of the project resources, such as models, libraries, and
    helpers for operations (business logic, and database queries). The CI controller
    generally uses a view that defines a web page to be responded to via an HTTP response.
  prefs: []
  type: TYPE_NORMAL
- en: The user-defined CI controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each CI project must have one or more user-defined controllers in order to operate.
    The user-defined controllers are the starting point of any CI user interaction.
    Calling the controller and its methods can be done in several ways. The controller
    can be called via project root URI submission to a browser (the project default
    controller will be called), by issuing the user anchor from a rendered view, by
    a client-side AJAX request for actions (updating page selectors), or even by a
    `crontab` (Linux known scheduler service) scheduled action executed repeatedly
    as a URI of a certain controller method.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the controller scope is a general manager of all the other project
    resources, such as models, views, helpers, and libraries, governing all to address
    execution requests from the user or a scheduled request.
  prefs: []
  type: TYPE_NORMAL
- en: Any application controller will be located under `application/controller/` in
    the `project` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller can load other CI project code resources of libraries, models,
    and helpers so that they can be accessed directly by the rendered views. This
    means that, if a controller loaded a library, the rendered view PHP file can call
    the library function in the exact same way as the controller does. The following
    is the code resources that the controller can load:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/helpers`: The helper/s are built-in CI third-party, or user-defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/models`: The models are most commonly user-defined for the specific
    database/s and tables of the specific project, extending the built-in CI model.
    Wrapping with CRUD service for specific defined database/s table/s, but also can
    be third-party (for example, data mapper extensions that can be used generically
    with any database).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/libraries`: The library can be built-in, third-party, or user-defined.
    The library is an Object Oriented PHP class-based service that can provide some
    reusable services related to a specific project, or across many projects. For
    example, as Flickr, Facebook, or LinkedIn wrapper API libraries. A good practice
    is to define in addition to the third-party libraries we may decide to use, our
    project oriented libraries to enhance our project simplicity, and maintainability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the CI controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we said, our application controller extends the built-in CI controller that
    is something like an abstract class in the development scope, so that in order
    to use the controller for our needs, we must build our controller extending the
    base class. We can extend the CI controller in several ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Loading resources of helpers, models, and libraries:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those can be from the CI built-in repository, third-party developed, or self-developed.
    For more information on how to self-develop models, refer to [Chapter 6](ch06.html
    "Chapter 6. Models"), *Models*, on how to self-develop libraries, refer to [Chapter
    4](ch04.html "Chapter 4. Libraries"), *Libraries*, and on how to self-develop
    helpers, refer to [Chapter 5](ch05.html "Chapter 5. Helpers"), *Helpers*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller can load any of the external resources in the following fashion
    in any of its methods, commonly at the contractor and in case the resource is
    required in all the controllers via the `autoload.php` configuration file ( )
    (refer to [Chapter 3](ch03.html "Chapter 3. Controller Usage and Scope"), *Configurations
    and Naming Conventions* for more information). However, for the best resource
    optimization to minimize the footprint and overhead even better, the resources
    will be loaded only on those controller methods that need their services to operate.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are a few examples of how to load the mentioned resources:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adding public and private methods:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This approach is the common guideline of PHP OOP that you are expected to be
    familiar with (although elaboration on this can be found at [http://php.net](http://php.net)).
    The following is a simple example of how a public method calls a private method
    to get some data:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Using loaded resources:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The loaded resources can be used after loading as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using loaded model methods:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Using loaded library methods:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Using loaded helpers:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Calling a controller:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller is automatically instantiated by the CI core, and its methods
    are called via HTTP URIs. For more information, refer to [Chapter 2](ch02.html
    "Chapter 2. Configurations and Naming Conventions"), *Configurations and Naming
    Conventions*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ways to call a controller:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Calling only the contractor and later calling the index method, if defined
    as follows: `$URI = "base_url().''/mycontroller''; mycontroller'';`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calling the method of the `mycontroller` class without parameters: `$URI =
    "base_url.''/mycontroller/mymethod'';`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calling the method of the `mycontroller` class with two parameters, a and b:
    `$URI = "base_url.''/mycontroller/mymethod/a/b'';`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: CI controller use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several different use cases for a CI user-defined controller. Commonly,
    the CI controller will handle initiating/rendering HTML pages, enable us to let
    the user navigate and view the different web application pages we defined. However,
    the controller may also provide other services, such as AJAX server-side controller,
    serving asynchronously the client-side browser requests, and commonly return back
    the JSON formatted data instead of a rendered view. The exact scope and usage
    of AJAX is not part of the CI framework, but it is very useful standard de-facto
    technology. To learn more about AJAX, please refer to AJAX (Asynchronous JavaScript
    and XML) on Wikipedia [http://en.wikipedia.org](http://en.wikipedia.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'The main usage categories for our controller in a CI framework are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rendering views: These type of controllers mostly performs some preparations
    for data and render the requested view, along with the prepared data, to be displayed
    to the user for the next user session state with web application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A special case is the home page view rendering. So that the user refers to
    the Project root directory via URI such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Where the CI routes will define `maincontroller` as the home page or default
    controller as follows under the project root:`application/config/routes.php`.
    So that the default controller will be defined as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then the call to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: to
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For user navigation request to another page, we shall have in the rendered
    view, HTML anchors for navigating into another pages something like the following
    view code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Controller serving the browser AJAX requests. These controllers respond to
    the AJAX client requests. and most commonly return the JSON data to the calling
    jQuery script as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Controller serving Linux scheduled `cron` requests: A very powerful CI usage
    we found is serving Linux `cron` schedule requests defined in the Linux `cron`
    (for more information about Linux `cron` scheduling, please refer to [http://en.wikipedia.org/wiki/Cron](http://en.wikipedia.org/wiki/Cron)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can find, within the **DirectAdmin** apache admin tool, a UI editor to define
    the scheduled `crontab` repeatable actions we want the server to perform.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For each request, we will define the PHP processor path; for example, `/user/local/bin/php`,
    as well as the PHP script to be executed; for example, `/home/mysite.com/public_html/crontabs/ci_crontab.php`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`ci_crontab.php` can execute the CI controller method.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`http://myCIproject/mycontroller/mymethod` will, for example, scan the database
    and update a table named `sums_table`, which contains the number of rows in all
    the tables added together after every execution. Let us see an example of how
    to make that CI controller call from the PHP script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In order to call a CI controller via an HTTP request, `ci_crontab.php` will
    use the cURL service that will call the CI controller, similar to the way we issue
    it from a browser (**cURL** (**Client URLs**), [http://php.net/manual/en/ref.curl.php](http://php.net/manual/en/ref.curl.php)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's build `/home/mysite.com/public_html/crontabs/ci_crontab.php`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Linux crontab will call every defined action repeatedly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The code of `ci_crontab.php` will be something like the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `$result` will be the rendered output from the controller, mostly simple
    echoed messages such as `Processed 127 entries`. Sure, we can log the result every
    time and append it to a log file of the action logs performed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We just saw how we can use the CI controller to serve Linux cron services, which
    has a very powerful capability in many business cases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Example 1 – default homepage controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initially, we will start with a simple controller example that opens a home
    page with the navigation option back and forth to another page B, and similarly
    to the home page. We will do so while rendering some controller calculated data
    at the view.
  prefs: []
  type: TYPE_NORMAL
- en: This example doesn't use the database. This example will be built from the following
    CI framework component configuration, controller, and view files.
  prefs: []
  type: TYPE_NORMAL
- en: Let us define the default controller filename as `controller/home_page.php`
    and the home page view as `views/home_page_view.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
  prefs: []
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller file `/home_page.php` will prepare some data to be shown in the
    view and will let the user navigate to page B and similarly back to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: The helpers used are provided with the sample source code provided with this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller file will prepare the current date and time to be shown in the
    home page `views/home_page_view.php` view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The controller has a `page_b()` method to render the following view file. It
    will prepare the parameters `$since` and `$past` for this page to be used inline
    in the rendered view `page_b_view,` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The view file is `views/page_b_view.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The configuration file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initially, we shall define at application/config/routes.php the default controller
    to be called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'So that in case, you will issue URI of the project root in the browser, lets
    say:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://mydomain.com/myproject`'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://mydomain.com/myproject/home_page will be called`.'
  prefs: []
  type: TYPE_NORMAL
- en: Optionally we can configure CI to eliminate the need to use `index.php` as part
    of the URI path to call our CI project controller/s (Refer for information, to
    [Chapter 2](ch02.html "Chapter 2. Configurations and Naming Conventions"), *Configurations
    and Naming Conventions*).
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – sending e-mails with attachments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will see how the controller can load a mail service library
    and use it to send mail attachments.
  prefs: []
  type: TYPE_NORMAL
- en: The CI mail library is not an auto-loaded library, and hence, will be loaded
    by the controller we are building for sending e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: The CI mail library makes it easy to send subject messages of non-English languages
    supporting UTF-8 both for the subject and the mail body. Adding attachments to
    an e-mail becomes a piece of cake using the CI mail library. We only need to have
    the files on a known directory path in our server and refer to them to attach
    them to the mail.
  prefs: []
  type: TYPE_NORMAL
- en: We can attach one or more files to create the mail body. HTML/TEXT is defined
    via a simple configuration setting to the CI mail library.
  prefs: []
  type: TYPE_NORMAL
- en: This example will be constructed from the mail controller only; you may add
    a rendered view later on to add to the example report on the mailing list, sending
    a report of a list of e-mail destinations instead of just one or two destinations.
  prefs: []
  type: TYPE_NORMAL
- en: Let us specify the default controller filename as `controller/mail`.
  prefs: []
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
    Hence, the URI to execute the controller for sending the mail will be `http://mydomain.com/myproject/mail`.
  prefs: []
  type: TYPE_NORMAL
- en: We shall remember that in CodeIgniter, if you refer only to the controller URI
    path, the CI will operate the function controller class `index()function`, if
    any. In case the controller class does have `index()function`. And actually in
    any case, the controller constructor will be called to create the class instance.
  prefs: []
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller file, `controller/email.php`, will initially load the CI mail
    library, then it will configure the mail service properties, such as from/to e-mail
    address, subject, HTML body, and the attachment files. Finally, the controller
    will issue the e-mail send service of the library, getting back the operation
    completion status to report to the web user. In case of a failure, the controller
    will render a report for the reason of the failure with debugging information
    provided by the CI mail library.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The helpers used are provided with the sample source code provided with this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this controller example has several functions, we shall review their
    usage initially, before we review the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__construct()`: This contractor loads the CI e-mail library to be used by
    other functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index()`: This builds the e-mail message and sends it to its destination'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc_root_path()`: This provides the directory path to find the e-mail attachments
    to send'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regarding the need to load resources such as libraries, helpers, and models,
    the best practice is the amount of usage in our controller. Let''s say, for example,
    that we have 40 controllers and 39 of them need the same library. We shall add
    that library into the auto-load list, `/config/autoload.php`. If we did add a
    resource, such as a library, model, or helper into the project auto-load, we can
    eliminate loading it in the class that needs the resource services as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Example 3 – admin and regular user log in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example we will see how the controller can coordinate using models
    and views a login session for a regular user, as well as an admin super user,
    so that each will have a distinct menu. In order to use the provided database
    file and successfully log in, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For regular user login:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User: `reg_user`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `111111111` (9 x 1 s)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For admin user login:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User: `admin_user`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `111111111` (9 x 1 s)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This example will be constructed from the following controller, models, and
    views:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/controller/auth.php`: This controller is used to control authentication
    checkup and redirect each user category to its view or notify of a login failure.
    Regular users and admin users will have different view menu, message, and logout
    options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/models/users_model.php`: This is the model to validate the submitted
    user name and password (stored in the database via MD5) against the predefined
    database table of users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/login_view.php`: This is the view shown to users that are
    not logged in, in order to log in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/logged_in_view.php`: This is the view shown to users that
    were successfully logged in and performed their roles as `reg_user`/admin users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MySQL database- USERS_DB.sql`: This is a database table that we will upload
    to our database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
  prefs: []
  type: TYPE_NORMAL
- en: Hence the URI to execute the auth controller for login will be `http://mydomain.com/myproject/auth`.
  prefs: []
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller file, `controller/auth.php`, will initially load the CI form
    helper; this helper will be used to construct and operate the login form. For
    more on helper usage and scope, refer to [Chapter 5](ch05.html "Chapter 5. Helpers"),
    *Helpers*.
  prefs: []
  type: TYPE_NORMAL
- en: '`users_model`, written especially to serve the controller for authenticating
    users credentials against the user table, will be loaded. The controller `auth`/`index`
    will be called from both the initial stage as well as after a `login_view` submission.'
  prefs: []
  type: TYPE_NORMAL
- en: The session is a well known issue in PHP and is out of the scope of this book.
    However, CI enables the storing of operated sessions with served clients via the
    database in a table named `ci_sessions`.
  prefs: []
  type: TYPE_NORMAL
- en: This way the sessions are much more organized for the project to manipulate
    with search session and load session parameter. In order to use a database stored
    session, we shall edit `/config/config.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Also, we will add a session library as we want to use it for this example along
    with other commonly used `/config/autoload.php` libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In case of a submission, the input post for the password will not be null and
    the controller will proceed with the credentials checkup using the `users_model`
    model. If successful, the user record fields will be kept in the session and the
    controller methods `auth/admin_main_menu` or `auth/user_main_menu` will be called
    as per the model returned user role. If the logged in user issues the logout anchor,
    `auth/logout` will be called to destroy the session and redirect the user to the
    login form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The model file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model file `application/models/users_model.php` will serve the controller
    for authenticating user credentials against the user table. If successful, the
    model will return the user database row to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: '`auth/admin_main_menu` or `auth/user_main_menu` will be called as per the model
    returned user role. If the logged in user issues the logout anchor, `auth/logout`
    will be called to destroy the session and redirect the user to the login form.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The database file to upload for this example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We shall upload this database file, provided as part of the book resources,
    into our database connected to CI.
  prefs: []
  type: TYPE_NORMAL
- en: The user table includes two users, namely `reg_user` and `admin_user`. Their
    passwords are stored as the md5 of the text passwords, where `111111111` and `222222222`
    are the passwords of the `reg_user` and `admin_user` users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The login_view view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `login_view` view is rendered by the `application/auth/index` index method
    in order to show non-logged in web visitors to a login page, to enable to challenge
    them with a login stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following a user entering the user name and password and submitting the login_view
    view form the `application/auth/login` will be called and will check the credentials
    using the users model. In case of a successful login, and based on the logged
    in user category fetch from the users model, one of the `auth` methods will be
    called as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`auth/admin_main_menu`: In case the user has the admin role to render the successful
    login view for the admin user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth/user_main_menu`: In case the user has the admin role to render the successful
    login view for the regular user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The view is located at `application/views/login_view.php`. This view uses many
    of the CI form helper functions loaded by the `auth` controller. When a user issues
    a submission, the input is initially checked at the client side before issuing
    a submission call to `application/auth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The login_in_view view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `login_in_view` view is rendered following a successful login by either
    `application/auth/admin_main_menu` controller method or `application/auth/user_main_menu`
    method base on the user category with the info of the logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: Both the controllers uses the `users_model` model to validate the login attempt
    and fetch the logged in user. The view shows the logged in user some information
    about its account, such as the user name and role as well as the menu available
    for its user category.
  prefs: []
  type: TYPE_NORMAL
- en: The view is located at `application/views/login_in_view.php`. This view is using
    parameters provided by the `$user_nam`, `$uid`, `$role`, and `$menu` controller
    to be shown to the logged in user. From this view, the user may issue a logout
    anchor that calls `auth/logout` to destroy the session and redirect the logged
    in user to the login view.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the CI form helper functions are loaded by the `auth` controller. When
    user issues are submitted, the input is initially checked at the client side before
    issuing a submission call to `application/auth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have reviewed the CI controller scope and the different
    controller usage categories targeting view rendering and serve AJAX client requests
    or apache crontab scheduled processing requests. We have reviewed the various
    resources that the controller can be assisted with, such as the helpers, libraries,
    and models. Eventually, we have made several usage examples as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1: default home page controller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 2: sending e-mails with attachments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 3: admin and regular user log in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
