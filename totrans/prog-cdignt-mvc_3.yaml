- en: Chapter 3. Controller Usage and Scope
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 控制器使用和作用域
- en: This chapter covers the CI controller scope and the various controller usage
    categories with several code examples of web applications. The controllers are
    the front-line decision makers of how to process or route a request and how to
    respond to actions, such as a rendered view sending back to the browser as an
    HTML page, an AJAX response to let the current requesting page update certain
    selector areas by the response, or even just to update the database seamlessly.
    The controllers use the available models, helpers, libraries, and views to respond
    to the caller, be it a web browser URL or a cron process issuing the cURL types
    `POST`/`GET` requests automatically.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了CI控制器的作用域和不同的控制器使用类别，并提供了几个Web应用程序的代码示例。控制器是处理或路由请求以及如何响应操作（如将渲染的视图作为HTML页面发送回浏览器，AJAX响应以允许当前请求页面通过响应更新某些选择器区域，或者甚至只是无缝更新数据库）的前线决策者。控制器使用可用的模型、帮助器、库和视图来响应用户，无论是Web浏览器URL还是自动发出cURL类型`POST`/`GET`请求的cron进程。
- en: The CI built-in controller behaves like an abstract class in the project scope
    so any of our project controllers must be extensions of a built-in CI controller.
    Our developed controller will inherit the CI built-in controller capabilities
    and built-in resources, such as auto-loaded helpers, libraries, and models, and
    let us code any specific services as controller methods to address our project
    requirements, and rendering the needs of the view.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CI内置控制器在项目范围内表现得像一个抽象类，因此我们的任何项目控制器都必须是内置CI控制器的扩展。我们开发的控制器将继承CI内置控制器的功能和内置资源，例如自动加载的帮助器、库和模型，并允许我们编写任何特定的服务作为控制器方法来满足我们的项目需求，并满足视图的渲染需求。
- en: As mentioned before, the controller is part of the MVC development framework
    that operates with models, and applies business logic, which most commonly renders
    a view back to the client web browser to proceed with user interaction.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，控制器是MVC开发框架的一部分，该框架与模型一起运行，并应用业务逻辑，通常将视图渲染回客户端Web浏览器以进行用户交互。
- en: The web user refers, via a browser, to a URL. In CI, the view is implemented
    as a call to a CI controller method. The CI controller method processes the browser
    request and sends back a rendered view that becomes a visualized web page to the
    browsing user.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Web用户通过浏览器引用一个URL。在CI中，视图是通过调用CI控制器方法实现的。CI控制器方法处理浏览器请求，并发送回一个渲染的视图，该视图成为浏览用户的可视化网页。
- en: 'The web page received from the CI controller is referred to as the rendered
    controller view; it may include anchors and buttons for the user to continue the
    interaction with the controller. When the user clicks on an anchor in the browser,
    a call to a controller is made (the anchor makes an HTTP request to activate a
    controller call). In case the user issue a event such as Button clicking, operate
    scroll bars, and so on so that this user event will trigger an action using jQuery
    to activate, for example a jQuery callback function. The jQuery callback function
    may issue a call to another rendering controller, such as :'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从CI控制器接收到的网页被称为渲染的控制器视图；它可能包括用户与控制器交互的锚点和按钮。当用户在浏览器中点击一个锚点时，会调用一个控制器（锚点通过HTTP请求激活控制器调用）。如果用户发出事件，如按钮点击、操作滚动条等，以便此用户事件将触发使用jQuery激活的操作，例如jQuery回调函数。jQuery回调函数可能调用另一个渲染控制器，例如：
- en: '`$(location).attr(''href'',controller_url_to_call);`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(location).attr(''href'',controller_url_to_call);`'
- en: Another option is to activate an asynchronous AJAX calls to an AJAX controller.
    Such a controller function handles the AJAX request that we will discuss later
    on. When AJAX calls returned from the server , their returned data may be used
    by client-side JavaScript to, update certain page regions/ (HTML selector/s) of
    the web page, for example, when typing a search string and issuing a search button,
    the AJAX response will provide the search results to be visualized in the same
    web page or will move to another page.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是激活对AJAX控制器的异步AJAX调用。此类控制器函数处理我们将在后面讨论的AJAX请求。当从服务器返回的AJAX调用返回时，其返回的数据可以由客户端JavaScript用于更新网页的某些区域/（HTML选择器/），例如，在输入搜索字符串并发出搜索按钮时，AJAX响应将提供要可视化的搜索结果，或者将跳转到另一个页面。
- en: More on controllers in general can be found at [http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于控制器的一般信息可以在[http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller)找到。
- en: 'The following are the chapter topics and subtopics we will cover:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将涵盖的章节主题和子主题：
- en: Scope of the CI controller
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI控制器的范围
- en: 'Usage categories:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类别：
- en: Rendering views
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染视图
- en: Controllers serving browser AJAX requests
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端浏览器AJAX请求的控制器
- en: Controllers serving Linux scheduled `cron` execution requests
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端浏览器AJAX请求的Linux计划`cron`执行请求
- en: CI controller expansion and usage( )(Refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*, for more)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI控制器扩展和使用（）（有关更多信息，请参阅[第2章](ch02.html "第2章。配置和命名约定")，*配置和命名约定*）
- en: Loading resources of models, helpers, and libraries
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载模型、助手和库的资源
- en: Using loaded resources
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加载的资源
- en: Calling CI controller methods
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用CI控制器方法
- en: 'Example 1: the default home page controller'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 1：默认主页控制器
- en: 'Example 2: sending e-mails with attachments'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 2：发送带附件的电子邮件
- en: 'Example 3: admin and regular user log in'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 3：管理员和普通用户登录
- en: We will begin by briefly reviewing the scope and use cases of the application
    controller in the CI framework and how we can use them for our project requirement
    needs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先简要回顾CI框架中应用程序控制器的范围和使用案例，以及我们如何使用它们来满足项目需求。
- en: Scope of the CI controller
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI控制器的范围
- en: 'The CI controller is the hub and brain of the CI MVC that handles the HTTP
    requests, such as those from the browser, and operates with other CI resources
    to respond. The CI controller scope is described in the following figure and operates
    with other CI resources to respond to the requests:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CI控制器是CI MVC的中心和大脑，处理HTTP请求，如来自浏览器的请求，并与其他CI资源一起操作以响应。CI控制器的范围在以下图中描述，并与其他CI资源一起操作以响应请求：
- en: '![Scope of the CI controller](img/4704OT_03_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![CI控制器的范围](img/4704OT_03_01.jpg)'
- en: The general flow with the CI controller is shown in the preceding figure. The
    user's browser sends the HTTP request to the URL of the CI project. Initially,
    the requested URL is processed via the routes based on the routes configuration
    `/conf/routes.php`. For more information, refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*. The specific
    CI controller is instantiated and the specific method is called. The CI method
    may be assisted by any of the project resources, such as models, libraries, and
    helpers for operations (business logic, and database queries). The CI controller
    generally uses a view that defines a web page to be responded to via an HTTP response.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CI控制器的一般流程如图所示。用户的浏览器将HTTP请求发送到CI项目的URL。最初，请求的URL通过基于路由配置`/conf/routes.php`的路由进行处理。有关更多信息，请参阅[第2章](ch02.html
    "第2章。配置和命名约定")，*配置和命名约定*。特定的CI控制器被实例化，并调用特定的方法。CI方法可能由项目资源（如模型、库和操作助手）协助，如业务逻辑和数据库查询。CI控制器通常使用定义要响应HTTP响应的网页的视图。
- en: The user-defined CI controller
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户定义的CI控制器
- en: Each CI project must have one or more user-defined controllers in order to operate.
    The user-defined controllers are the starting point of any CI user interaction.
    Calling the controller and its methods can be done in several ways. The controller
    can be called via project root URI submission to a browser (the project default
    controller will be called), by issuing the user anchor from a rendered view, by
    a client-side AJAX request for actions (updating page selectors), or even by a
    `crontab` (Linux known scheduler service) scheduled action executed repeatedly
    as a URI of a certain controller method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个CI项目必须有一个或多个用户定义的控制器才能运行。用户定义的控制器是任何CI用户交互的起点。可以通过多种方式调用控制器及其方法。可以通过向浏览器提交项目根URI来调用控制器（将调用项目默认控制器），通过从渲染的视图中发出用户锚点，通过客户端AJAX请求执行操作（更新页面选择器），或者甚至通过`crontab`（Linux已知调度服务）计划执行的动作，该动作作为某个控制器方法的URI重复执行。
- en: We can see that the controller scope is a general manager of all the other project
    resources, such as models, views, helpers, and libraries, governing all to address
    execution requests from the user or a scheduled request.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，控制器范围是所有其他项目资源（如模型、视图、助手和库）的通用管理者，管理所有资源以处理来自用户或计划请求的执行请求。
- en: Any application controller will be located under `application/controller/` in
    the `project` directory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 任何应用程序控制器都将位于`project`目录下的`application/controller/`中。
- en: 'The controller can load other CI project code resources of libraries, models,
    and helpers so that they can be accessed directly by the rendered views. This
    means that, if a controller loaded a library, the rendered view PHP file can call
    the library function in the exact same way as the controller does. The following
    is the code resources that the controller can load:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器可以加载其他CI项目代码资源，包括库、模型和辅助工具，以便它们可以直接由渲染的视图访问。这意味着，如果控制器加载了一个库，渲染的视图PHP文件可以以与控制器完全相同的方式调用库函数。以下是可以由控制器加载的代码资源：
- en: '`application/helpers`: The helper/s are built-in CI third-party, or user-defined.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/helpers`：辅助工具是内置的CI第三方库或用户自定义的。'
- en: '`application/models`: The models are most commonly user-defined for the specific
    database/s and tables of the specific project, extending the built-in CI model.
    Wrapping with CRUD service for specific defined database/s table/s, but also can
    be third-party (for example, data mapper extensions that can be used generically
    with any database).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/models`：模型通常是针对特定数据库和特定项目的表用户定义的，扩展了内置的CI模型。为特定定义的数据库和表提供CRUD服务，也可以是第三方（例如，可以与任何数据库通用使用的通用数据映射扩展）。'
- en: '`application/libraries`: The library can be built-in, third-party, or user-defined.
    The library is an Object Oriented PHP class-based service that can provide some
    reusable services related to a specific project, or across many projects. For
    example, as Flickr, Facebook, or LinkedIn wrapper API libraries. A good practice
    is to define in addition to the third-party libraries we may decide to use, our
    project oriented libraries to enhance our project simplicity, and maintainability.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/libraries`：库可以是内置的、第三方的或用户自定义的。库是一个基于面向对象PHP类的服务，可以提供与特定项目相关的或跨多个项目的一些可重用服务。例如，作为Flickr、Facebook或LinkedIn包装API库。一个好的做法是，除了我们可能决定使用的第三方库之外，我们还定义面向项目库以增强我们的项目简单性和可维护性。'
- en: Extending the CI controller
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展CI控制器
- en: As we said, our application controller extends the built-in CI controller that
    is something like an abstract class in the development scope, so that in order
    to use the controller for our needs, we must build our controller extending the
    base class. We can extend the CI controller in several ways.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所言，我们的应用程序控制器扩展了内置的CI控制器，这在开发范围内类似于一个抽象类，因此为了满足我们的需求使用控制器，我们必须构建一个扩展基本类的控制器。我们可以以几种方式扩展CI控制器。
- en: 'Loading resources of helpers, models, and libraries:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载辅助工具、模型和库的资源：
- en: Those can be from the CI built-in repository, third-party developed, or self-developed.
    For more information on how to self-develop models, refer to [Chapter 6](ch06.html
    "Chapter 6. Models"), *Models*, on how to self-develop libraries, refer to [Chapter
    4](ch04.html "Chapter 4. Libraries"), *Libraries*, and on how to self-develop
    helpers, refer to [Chapter 5](ch05.html "Chapter 5. Helpers"), *Helpers*.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些可以来自CI内置仓库、第三方开发或自行开发。有关如何自行开发模型的更多信息，请参阅[第6章](ch06.html "第6章。模型")，*模型*；有关如何自行开发库的更多信息，请参阅[第4章](ch04.html
    "第4章。库")，*库*；有关如何自行开发辅助工具的更多信息，请参阅[第5章](ch05.html "第5章。辅助工具")，*辅助工具*。
- en: The controller can load any of the external resources in the following fashion
    in any of its methods, commonly at the contractor and in case the resource is
    required in all the controllers via the `autoload.php` configuration file ( )
    (refer to [Chapter 3](ch03.html "Chapter 3. Controller Usage and Scope"), *Configurations
    and Naming Conventions* for more information). However, for the best resource
    optimization to minimize the footprint and overhead even better, the resources
    will be loaded only on those controller methods that need their services to operate.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器可以在其任何方法中以以下方式加载任何外部资源，通常在构造函数中，以及在资源需要通过`autoload.php`配置文件（ ）在所有控制器中（请参阅[第3章](ch03.html
    "第3章。控制器使用和范围")，*配置和命名约定*以获取更多信息）。然而，为了实现最佳资源优化，以最小化占用空间和开销，资源将仅在需要其服务的控制器方法中加载。
- en: 'The following are a few examples of how to load the mentioned resources:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一些如何加载所提及资源的示例：
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Adding public and private methods:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加公共和私有方法：
- en: 'This approach is the common guideline of PHP OOP that you are expected to be
    familiar with (although elaboration on this can be found at [http://php.net](http://php.net)).
    The following is a simple example of how a public method calls a private method
    to get some data:'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种常见的PHP OOP指南，你应熟悉（尽管有关此内容的详细说明可以在[http://php.net](http://php.net)找到）。以下是一个公共方法如何调用私有方法以获取数据的简单示例：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using loaded resources:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加载的资源：
- en: 'The loaded resources can be used after loading as follows:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载的资源可以在加载后使用如下：
- en: 'Using loaded model methods:'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加载的模型方法：
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using loaded library methods:'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加载的库方法：
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using loaded helpers:'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加载的辅助函数：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Calling a controller:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用控制器：
- en: The controller is automatically instantiated by the CI core, and its methods
    are called via HTTP URIs. For more information, refer to [Chapter 2](ch02.html
    "Chapter 2. Configurations and Naming Conventions"), *Configurations and Naming
    Conventions*.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器由CI核心自动实例化，其方法通过HTTP URI调用。有关更多信息，请参阅[第2章](ch02.html "第2章。配置和命名约定")，*配置和命名约定*。
- en: 'Ways to call a controller:'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用控制器的方法：
- en: 'Calling only the contractor and later calling the index method, if defined
    as follows: `$URI = "base_url().''/mycontroller''; mycontroller'';`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅调用构造函数，然后调用（如果定义如下）索引方法：`$URI = "base_url().'/mycontroller'; mycontroller';`
- en: 'Calling the method of the `mycontroller` class without parameters: `$URI =
    "base_url.''/mycontroller/mymethod'';`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不带参数调用`mycontroller`类的`mymethod`方法：`$URI = "base_url.'/mycontroller/mymethod';`
- en: 'Calling the method of the `mycontroller` class with two parameters, a and b:
    `$URI = "base_url.''/mycontroller/mymethod/a/b'';`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用两个参数a和b调用`mycontroller`类的`mymethod`方法：`$URI = "base_url.'/mycontroller/mymethod/a/b';`
- en: CI controller use cases
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI控制器使用案例
- en: There are several different use cases for a CI user-defined controller. Commonly,
    the CI controller will handle initiating/rendering HTML pages, enable us to let
    the user navigate and view the different web application pages we defined. However,
    the controller may also provide other services, such as AJAX server-side controller,
    serving asynchronously the client-side browser requests, and commonly return back
    the JSON formatted data instead of a rendered view. The exact scope and usage
    of AJAX is not part of the CI framework, but it is very useful standard de-facto
    technology. To learn more about AJAX, please refer to AJAX (Asynchronous JavaScript
    and XML) on Wikipedia [http://en.wikipedia.org](http://en.wikipedia.org).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: CI用户自定义控制器有几种不同的使用场景。通常，CI控制器将处理启动/渲染HTML页面，使我们能够让用户浏览和查看我们定义的不同Web应用页面。然而，控制器也可能提供其他服务，例如AJAX服务器端控制器，异步处理客户端浏览器请求，并通常返回JSON格式的数据而不是渲染的视图。AJAX的确切范围和用途不是CI框架的一部分，但它是一种非常有用的标准事实技术。要了解更多关于AJAX的信息，请参考维基百科上的AJAX（异步JavaScript和XML）[http://en.wikipedia.org](http://en.wikipedia.org)。
- en: 'The main usage categories for our controller in a CI framework are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI框架中，我们控制器的主体使用类别如下：
- en: 'Rendering views: These type of controllers mostly performs some preparations
    for data and render the requested view, along with the prepared data, to be displayed
    to the user for the next user session state with web application.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染视图：这类控制器主要对数据进行一些准备，并将请求的视图以及准备好的数据渲染给用户，以便在下一个用户会话状态中显示Web应用。
- en: 'A special case is the home page view rendering. So that the user refers to
    the Project root directory via URI such as:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种特殊情况是主页视图渲染。因此，用户通过URI引用项目根目录，如下所示：
- en: '[PRE5]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Where the CI routes will define `maincontroller` as the home page or default
    controller as follows under the project root:`application/config/routes.php`.
    So that the default controller will be defined as follows:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI路由将在项目根目录下的`application/config/routes.php`中将`maincontroller`定义为主页或默认控制器，如下所示。这样，默认控制器将被定义为以下内容：
- en: '[PRE6]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then the call to
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后调用
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: to
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For user navigation request to another page, we shall have in the rendered
    view, HTML anchors for navigating into another pages something like the following
    view code:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于用户导航请求到另一个页面，我们在渲染的视图中应有HTML锚点，用于导航到另一个页面，如下所示视图代码：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Controller serving the browser AJAX requests. These controllers respond to
    the AJAX client requests. and most commonly return the JSON data to the calling
    jQuery script as follows:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端控制器服务于浏览器AJAX请求。这些控制器响应AJAX客户端请求，并且通常将JSON数据返回给调用jQuery脚本的脚本如下：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Controller serving Linux scheduled `cron` requests: A very powerful CI usage
    we found is serving Linux `cron` schedule requests defined in the Linux `cron`
    (for more information about Linux `cron` scheduling, please refer to [http://en.wikipedia.org/wiki/Cron](http://en.wikipedia.org/wiki/Cron)).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器Linux计划任务 `cron` 请求：我们发现CI的一个非常强大的用法是服务Linux `cron` 计划请求，这些请求是在Linux `cron`
    中定义的（有关Linux `cron` 计划的更多信息，请参阅[http://en.wikipedia.org/wiki/Cron](http://en.wikipedia.org/wiki/Cron)）。
- en: We can find, within the **DirectAdmin** apache admin tool, a UI editor to define
    the scheduled `crontab` repeatable actions we want the server to perform.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在 **DirectAdmin** apache管理工具中找到一个UI编辑器来定义服务器要执行的计划 `crontab` 可重复操作。
- en: For each request, we will define the PHP processor path; for example, `/user/local/bin/php`,
    as well as the PHP script to be executed; for example, `/home/mysite.com/public_html/crontabs/ci_crontab.php`.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个请求，我们将定义PHP处理器路径；例如，`/user/local/bin/php`，以及要执行的PHP脚本；例如，`/home/mysite.com/public_html/crontabs/ci_crontab.php`。
- en: '`ci_crontab.php` can execute the CI controller method.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ci_crontab.php` 可以执行 CI 控制器方法。'
- en: '`http://myCIproject/mycontroller/mymethod` will, for example, scan the database
    and update a table named `sums_table`, which contains the number of rows in all
    the tables added together after every execution. Let us see an example of how
    to make that CI controller call from the PHP script.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://myCIproject/mycontroller/mymethod` 例如，将扫描数据库并更新一个名为 `sums_table` 的表，该表包含所有表在每次执行后添加的行数。让我们看看如何从PHP脚本中调用该CI控制器的示例。'
- en: In order to call a CI controller via an HTTP request, `ci_crontab.php` will
    use the cURL service that will call the CI controller, similar to the way we issue
    it from a browser (**cURL** (**Client URLs**), [http://php.net/manual/en/ref.curl.php](http://php.net/manual/en/ref.curl.php)).
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了通过HTTP请求调用CI控制器，`ci_crontab.php` 将使用cURL服务来调用CI控制器，类似于我们从浏览器中发出请求的方式（**cURL**
    （**客户端URL**），[http://php.net/manual/en/ref.curl.php](http://php.net/manual/en/ref.curl.php)）。
- en: Let's build `/home/mysite.com/public_html/crontabs/ci_crontab.php`.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们在 `/home/mysite.com/public_html/crontabs/ci_crontab.php` 中构建。
- en: Linux crontab will call every defined action repeatedly.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Linux crontab 将重复调用每个定义的操作。
- en: 'The code of `ci_crontab.php` will be something like the following code:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ci_crontab.php` 的代码将类似于以下代码：'
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `$result` will be the rendered output from the controller, mostly simple
    echoed messages such as `Processed 127 entries`. Sure, we can log the result every
    time and append it to a log file of the action logs performed.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$result` 将是控制器生成的输出，主要是简单的echo消息，例如 `Processed 127 entries`。当然，我们可以每次记录结果并将其附加到操作日志的日志文件中。'
- en: We just saw how we can use the CI controller to serve Linux cron services, which
    has a very powerful capability in many business cases.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们刚刚看到了如何使用CI控制器来服务Linux cron服务，这在许多业务场景中具有非常强大的功能。
- en: Example 1 – default homepage controller
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例1 – 默认主页控制器
- en: Initially, we will start with a simple controller example that opens a home
    page with the navigation option back and forth to another page B, and similarly
    to the home page. We will do so while rendering some controller calculated data
    at the view.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，我们将从一个简单的控制器示例开始，该示例打开一个带有导航选项来回切换到另一个页面B的主页，以及类似地返回主页。我们将这样做，同时在视图中渲染一些控制器计算的数据。
- en: This example doesn't use the database. This example will be built from the following
    CI framework component configuration, controller, and view files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例不使用数据库。此示例将从以下CI框架组件配置、控制器和视图文件构建。
- en: Let us define the default controller filename as `controller/home_page.php`
    and the home page view as `views/home_page_view.php`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义默认控制器文件名为 `controller/home_page.php`，主页视图为 `views/home_page_view.php`。
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 假设项目根URI为 `http://mydomain.com/myproject`。
- en: The controller file
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: The controller file `/home_page.php` will prepare some data to be shown in the
    view and will let the user navigate to page B and similarly back to the home page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器文件 `/home_page.php` 将准备一些要在视图中显示的数据，并将允许用户导航到页面B，以及类似地返回主页。
- en: The helpers used are provided with the sample source code provided with this
    book.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所使用的辅助工具由本书提供的示例源代码提供。
- en: 'The following is the code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的代码：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The view file
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图文件
- en: The controller file will prepare the current date and time to be shown in the
    home page `views/home_page_view.php` view.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器文件将为显示在主页视图 `views/home_page_view.php` 中的当前日期和时间进行准备。
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The controller has a `page_b()` method to render the following view file. It
    will prepare the parameters `$since` and `$past` for this page to be used inline
    in the rendered view `page_b_view,` as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器有一个`page_b()`方法来渲染以下视图文件。它将为该页面准备`$since`和`$past`参数，以便在渲染的视图`page_b_view`中内联使用，如下所示：
- en: The view file is `views/page_b_view.php`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 视图文件是`views/page_b_view.php`。
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The configuration file
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件
- en: Initially, we shall define at application/config/routes.php the default controller
    to be called.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应在application/config/routes.php中定义要调用的默认控制器。
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So that in case, you will issue URI of the project root in the browser, lets
    say:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你在浏览器中输入项目根部的URI，比如说：
- en: '`http://mydomain.com/myproject`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://mydomain.com/myproject`'
- en: '`http://mydomain.com/myproject/home_page will be called`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://mydomain.com/myproject/home_page`将被调用。'
- en: Optionally we can configure CI to eliminate the need to use `index.php` as part
    of the URI path to call our CI project controller/s (Refer for information, to
    [Chapter 2](ch02.html "Chapter 2. Configurations and Naming Conventions"), *Configurations
    and Naming Conventions*).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们可以配置CI以消除在URI路径中需要使用`index.php`来调用我们的CI项目控制器/的需求（有关信息，请参阅[第2章](ch02.html
    "第2章. 配置和命名约定")，*配置和命名约定*）。
- en: Example 2 – sending e-mails with attachments
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2 – 发送带附件的电子邮件
- en: In this example, we will see how the controller can load a mail service library
    and use it to send mail attachments.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将看到控制器如何加载邮件服务库并使用它来发送邮件附件。
- en: The CI mail library is not an auto-loaded library, and hence, will be loaded
    by the controller we are building for sending e-mail.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: CI邮件库不是自动加载的库，因此，将由我们为发送电子邮件构建的控制器来加载。
- en: The CI mail library makes it easy to send subject messages of non-English languages
    supporting UTF-8 both for the subject and the mail body. Adding attachments to
    an e-mail becomes a piece of cake using the CI mail library. We only need to have
    the files on a known directory path in our server and refer to them to attach
    them to the mail.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: CI邮件库使得发送非英语语言的邮件主题和正文变得简单，支持UTF-8编码。使用CI邮件库添加附件变得轻而易举。我们只需要在我们的服务器上有一个已知的目录路径的文件，并引用它们来附加到邮件中。
- en: We can attach one or more files to create the mail body. HTML/TEXT is defined
    via a simple configuration setting to the CI mail library.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以附加一个或多个文件来创建邮件正文。HTML/TEXT通过CI邮件库的简单配置设置来定义。
- en: This example will be constructed from the mail controller only; you may add
    a rendered view later on to add to the example report on the mailing list, sending
    a report of a list of e-mail destinations instead of just one or two destinations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将仅从邮件控制器构建；你可以在以后添加渲染的视图，以添加到示例报告，发送电子邮件目的地列表的报告，而不是仅发送一到两个目的地的报告。
- en: Let us specify the default controller filename as `controller/mail`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们指定默认控制器文件名为`controller/mail`。
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
    Hence, the URI to execute the controller for sending the mail will be `http://mydomain.com/myproject/mail`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 假设项目根部的URI是`http://mydomain.com/myproject`。因此，执行发送邮件的控制器URI将是`http://mydomain.com/myproject/mail`。
- en: We shall remember that in CodeIgniter, if you refer only to the controller URI
    path, the CI will operate the function controller class `index()function`, if
    any. In case the controller class does have `index()function`. And actually in
    any case, the controller constructor will be called to create the class instance.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该记住，在CodeIgniter中，如果你只引用控制器URI路径，CI将操作功能控制器类`index()`函数，如果有的话。实际上在任何情况下，都会调用控制器构造函数来创建类实例。
- en: The controller file
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: The controller file, `controller/email.php`, will initially load the CI mail
    library, then it will configure the mail service properties, such as from/to e-mail
    address, subject, HTML body, and the attachment files. Finally, the controller
    will issue the e-mail send service of the library, getting back the operation
    completion status to report to the web user. In case of a failure, the controller
    will render a report for the reason of the failure with debugging information
    provided by the CI mail library.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器文件`controller/email.php`将首先加载CI邮件库，然后配置邮件服务属性，如发件人/收件人电子邮件地址、主题、HTML正文和附件文件。最后，控制器将发出库的电子邮件发送服务，获取操作完成状态以报告给网络用户。如果失败，控制器将渲染一个报告，说明失败的原因，并提供CI邮件库提供的调试信息。
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The helpers used are provided with the sample source code provided with this
    book.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的辅助工具由本书提供的示例源代码提供。
- en: 'Since this controller example has several functions, we shall review their
    usage initially, before we review the code as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个控制器示例有几个函数，我们将在以下代码审查之前先审查它们的用法：
- en: '`__construct()`: This contractor loads the CI e-mail library to be used by
    other functions'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__construct()`：这个构造函数加载CI电子邮件库，供其他函数使用'
- en: '`index()`: This builds the e-mail message and sends it to its destination'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index()`：这构建电子邮件消息并发送到目的地'
- en: '`doc_root_path()`: This provides the directory path to find the e-mail attachments
    to send'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc_root_path()`：这提供了查找要发送的电子邮件附件的目录路径'
- en: 'Regarding the need to load resources such as libraries, helpers, and models,
    the best practice is the amount of usage in our controller. Let''s say, for example,
    that we have 40 controllers and 39 of them need the same library. We shall add
    that library into the auto-load list, `/config/autoload.php`. If we did add a
    resource, such as a library, model, or helper into the project auto-load, we can
    eliminate loading it in the class that needs the resource services as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 关于加载资源（如库、辅助工具和模型）的需求，最佳实践是在我们的控制器中使用它们的数量。例如，假设我们拥有40个控制器，其中39个需要相同的库。我们应该将该库添加到自动加载列表中，`/config/autoload.php`。如果我们添加了资源，如库、模型或辅助工具到项目的自动加载中，我们可以通过以下方式消除在需要资源服务的类中加载它：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Example 3 – admin and regular user log in
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例3 – 管理员和普通用户登录
- en: 'In this example we will see how the controller can coordinate using models
    and views a login session for a regular user, as well as an admin super user,
    so that each will have a distinct menu. In order to use the provided database
    file and successfully log in, use the following steps:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将看到控制器如何使用模型和视图来协调普通用户和超级管理员用户的登录会话，以便每个用户都有一个独特的菜单。为了使用提供的数据库文件并成功登录，请按照以下步骤操作：
- en: 'For regular user login:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于普通用户登录：
- en: 'User: `reg_user`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户：`reg_user`
- en: 'Password: `111111111` (9 x 1 s)'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：`111111111`（9个1）
- en: 'For admin user login:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于管理员用户登录：
- en: 'User: `admin_user`'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户：`admin_user`
- en: 'Password: `111111111` (9 x 1 s)'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：`111111111`（9个1）
- en: 'This example will be constructed from the following controller, models, and
    views:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将由以下控制器、模型和视图构建：
- en: '`application/controller/auth.php`: This controller is used to control authentication
    checkup and redirect each user category to its view or notify of a login failure.
    Regular users and admin users will have different view menu, message, and logout
    options.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/controller/auth.php`：此控制器用于控制认证检查并重定向每个用户类别到其视图或通知登录失败。普通用户和管理员用户将具有不同的视图菜单、消息和注销选项。'
- en: '`application/models/users_model.php`: This is the model to validate the submitted
    user name and password (stored in the database via MD5) against the predefined
    database table of users.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/models/users_model.php`：这是验证提交的用户名和密码（通过MD5存储在数据库中）与预定义的用户数据库表的模型。'
- en: '`application/views/login_view.php`: This is the view shown to users that are
    not logged in, in order to log in.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/login_view.php`：这是显示给未登录用户的视图，以便他们登录。'
- en: '`application/views/logged_in_view.php`: This is the view shown to users that
    were successfully logged in and performed their roles as `reg_user`/admin users.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/views/logged_in_view.php`：这是显示给成功登录并执行`reg_user`/管理员用户角色的用户的视图。'
- en: '`MySQL database- USERS_DB.sql`: This is a database table that we will upload
    to our database.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MySQL数据库-USERS_DB.sql`：这是我们将会上传到数据库中的数据库表。'
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 假设项目根的URI是`http://mydomain.com/myproject`。
- en: Hence the URI to execute the auth controller for login will be `http://mydomain.com/myproject/auth`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，执行登录的认证控制器的URI将是`http://mydomain.com/myproject/auth`。
- en: The controller file
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: The controller file, `controller/auth.php`, will initially load the CI form
    helper; this helper will be used to construct and operate the login form. For
    more on helper usage and scope, refer to [Chapter 5](ch05.html "Chapter 5. Helpers"),
    *Helpers*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器文件，`controller/auth.php`，最初将加载CI表单辅助工具；这个辅助工具将用于构建和操作登录表单。有关辅助工具的使用和作用域的更多信息，请参阅[第5章](ch05.html
    "第5章。辅助工具")，*辅助工具*。
- en: '`users_model`, written especially to serve the controller for authenticating
    users credentials against the user table, will be loaded. The controller `auth`/`index`
    will be called from both the initial stage as well as after a `login_view` submission.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`users_model`，专门编写以服务于验证用户凭据的控制器，将被加载。`auth`/`index`控制器将从初始阶段以及`login_view`提交后调用。'
- en: The session is a well known issue in PHP and is out of the scope of this book.
    However, CI enables the storing of operated sessions with served clients via the
    database in a table named `ci_sessions`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 会话是PHP中众所周知的问题，但超出了本书的范围。然而，CI允许通过名为`ci_sessions`的表将操作会话存储在数据库中供客户端使用。
- en: This way the sessions are much more organized for the project to manipulate
    with search session and load session parameter. In order to use a database stored
    session, we shall edit `/config/config.php`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，会话对项目来说就更有序了，可以用来搜索会话和加载会话参数。为了使用数据库存储的会话，我们需要编辑`/config/config.php`。
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Also, we will add a session library as we want to use it for this example along
    with other commonly used `/config/autoload.php` libraries.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将添加一个会话库，因为我们想在这个示例中使用它，以及其他常用的`/config/autoload.php`库。
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In case of a submission, the input post for the password will not be null and
    the controller will proceed with the credentials checkup using the `users_model`
    model. If successful, the user record fields will be kept in the session and the
    controller methods `auth/admin_main_menu` or `auth/user_main_menu` will be called
    as per the model returned user role. If the logged in user issues the logout anchor,
    `auth/logout` will be called to destroy the session and redirect the user to the
    login form.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有提交，密码的输入post将不会为空，控制器将使用`users_model`模型进行凭据检查。如果成功，用户记录字段将保留在会话中，并且将根据模型返回的用户角色调用`auth/admin_main_menu`或`auth/user_main_menu`控制器方法。如果已登录用户点击注销链接，将调用`auth/logout`来销毁会话并将用户重定向到登录表单。
- en: 'The following is the code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的代码：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The model file
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型文件
- en: The model file `application/models/users_model.php` will serve the controller
    for authenticating user credentials against the user table. If successful, the
    model will return the user database row to the caller.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 模型文件`application/models/users_model.php`将为验证用户凭据的用户表提供控制器。如果成功，模型将返回用户数据库行给调用者。
- en: '`auth/admin_main_menu` or `auth/user_main_menu` will be called as per the model
    returned user role. If the logged in user issues the logout anchor, `auth/logout`
    will be called to destroy the session and redirect the user to the login form.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`auth/admin_main_menu`或`auth/user_main_menu`返回的用户角色调用。如果已登录用户点击注销链接，将调用`auth/logout`来销毁会话并将用户重定向到登录表单。
- en: 'The following is the code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的代码：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The database file to upload for this example
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为此示例上传的数据库文件
- en: We shall upload this database file, provided as part of the book resources,
    into our database connected to CI.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将上传作为本书资源一部分的数据库文件到与CI连接的数据库中。
- en: The user table includes two users, namely `reg_user` and `admin_user`. Their
    passwords are stored as the md5 of the text passwords, where `111111111` and `222222222`
    are the passwords of the `reg_user` and `admin_user` users.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 用户表包括两个用户，即`reg_user`和`admin_user`。他们的密码以文本密码的md5存储，其中`111111111`和`222222222`是`reg_user`和`admin_user`用户的密码。
- en: 'The following is the code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的代码：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The login_view view file
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`login_view`视图文件'
- en: The `login_view` view is rendered by the `application/auth/index` index method
    in order to show non-logged in web visitors to a login page, to enable to challenge
    them with a login stage.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`login_view`视图由`application/auth/index`索引方法渲染，以向未登录的网站访客显示登录页面，以便在登录阶段挑战他们。'
- en: 'Following a user entering the user name and password and submitting the login_view
    view form the `application/auth/login` will be called and will check the credentials
    using the users model. In case of a successful login, and based on the logged
    in user category fetch from the users model, one of the `auth` methods will be
    called as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入用户名和密码并提交`login_view`视图表单后，将调用`application/auth/login`，并使用用户模型检查凭据。如果登录成功，并且基于从用户模型获取的已登录用户类别，将调用以下`auth`方法之一：
- en: '`auth/admin_main_menu`: In case the user has the admin role to render the successful
    login view for the admin user'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth/admin_main_menu`：如果用户具有管理员角色，将渲染成功登录视图供管理员用户使用'
- en: '`auth/user_main_menu`: In case the user has the admin role to render the successful
    login view for the regular user'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The view is located at `application/views/login_view.php`. This view uses many
    of the CI form helper functions loaded by the `auth` controller. When a user issues
    a submission, the input is initially checked at the client side before issuing
    a submission call to `application/auth`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The login_in_view view file
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `login_in_view` view is rendered following a successful login by either
    `application/auth/admin_main_menu` controller method or `application/auth/user_main_menu`
    method base on the user category with the info of the logged in user.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Both the controllers uses the `users_model` model to validate the login attempt
    and fetch the logged in user. The view shows the logged in user some information
    about its account, such as the user name and role as well as the menu available
    for its user category.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: The view is located at `application/views/login_in_view.php`. This view is using
    parameters provided by the `$user_nam`, `$uid`, `$role`, and `$menu` controller
    to be shown to the logged in user. From this view, the user may issue a logout
    anchor that calls `auth/logout` to destroy the session and redirect the logged
    in user to the login view.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Many of the CI form helper functions are loaded by the `auth` controller. When
    user issues are submitted, the input is initially checked at the client side before
    issuing a submission call to `application/auth`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have reviewed the CI controller scope and the different
    controller usage categories targeting view rendering and serve AJAX client requests
    or apache crontab scheduled processing requests. We have reviewed the various
    resources that the controller can be assisted with, such as the helpers, libraries,
    and models. Eventually, we have made several usage examples as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1: default home page controller'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 2: sending e-mails with attachments'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 3: admin and regular user log in'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
