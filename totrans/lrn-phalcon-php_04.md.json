["```php\nCREATE TABLE IF NOT EXISTS `user` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `user_first_name` varchar(16) COLLATE utf8_unicode_ci NOT NULL,\n `user_last_name` varchar(16) COLLATE utf8_unicode_ci NOT NULL,\n `user_email` varchar(32) COLLATE utf8_unicode_ci NOT NULL,\n `user_password` varchar(128) COLLATE utf8_unicode_ci NOT NULL,\n `user_group_id` int(11) DEFAULT NULL,\n `user_is_active` tinyint(1) NOT NULL DEFAULT '0',\n `user_created_at` datetime NOT NULL,\n `user_updated_at` datetime DEFAULT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `idx_email` (`user_email`),\n KEY `idx_user_group_id` (`user_group_id`),\n KEY `idx_is_active` (`user_is_active`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;\n\n```", "```php\nCREATE TABLE IF NOT EXISTS `user_group` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `user_group_name` varchar(16) COLLATE utf8_unicode_ci NOT NULL,\n `user_group_created_at` datetime NOT NULL,\n `user_group_updated_at` datetime DEFAULT NULL,\n PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;\n\n```", "```php\nCREATE TABLE IF NOT EXISTS `user_profile` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `user_profile_user_id` int(11) NOT NULL,\n `user_profile_location` varchar(64) COLLATE utf8_unicode_ci NOT NULL,\n `user_profile_birthday` date NOT NULL,\n `user_profile_created_at` datetime NOT NULL,\n `user_profile_updated_at` datetime DEFAULT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `idx_user_profile_user_id` (`user_profile_user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;\n\n```", "```php\nALTER TABLE `user_profile`\n ADD CONSTRAINT `user_profile_ibfk_1` FOREIGN KEY (`user_profile_user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n\nALTER TABLE `user`\n ADD CONSTRAINT `user_ibfk_2` FOREIGN KEY (`user_profile_id`) REFERENCES `user_profile` (`id`) ON UPDATE NO ACTION,\n ADD CONSTRAINT `user_ibfk_1` FOREIGN KEY (`user_group_id`) REFERENCES `user_group` (`id`) ON UPDATE NO ACTION;\n\n```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nclass User extends Base {\n  public static function find($parameters = array()) {\n    return parent::find($parameters);\n  }\n\n  public static function findFirst($parameters = array()) {\n    return parent::findFirst($parameters);\n  }\n\n  public function initialize() {\n    $this->hasOne('id', 'App\\Core\\Models\\UserProfile', 'user_profile_user_id', array(\n        'alias' => 'profile',\n        'reusable' => true\n    ));\n\n    $this->hasOne('user_group_id', 'App\\Core\\Models\\UserGroups', 'id', array(\n      'alias' => 'group',\n      'reusable' => true\n    ));\n  }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nclass UserGroup extends Base{\n  public static function find($parameters = array()){\n    return parent::find($parameters);\n  }\n  public static function findFirst($parameters = array()){\n    return parent::findFirst($parameters);\n  }\n  public function initialize(){\n    $this->hasMany('id', 'App\\Core\\Models\\User', 'group_id',array(\n        'alias' => 'users'\n    ));\n  }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nclass UserProfile extends Base\n{\n    public static function find($parameters = array())\n    {\n        return parent::find($parameters);\n    }\n\n    public static function findFirst($parameters = array())\n    {\n        return parent::findFirst($parameters);\n    }\n\n    public function initialize()\n    {\n        $this->hasOne('user_profile_user_id', 'App\\Core\\Models\\User', 'id', array(\n            'alias' => 'user',\n            'reusable' => true\n        ));\n    }\n}\n```", "```php\n$ cd modules\n$ mkdir Task\n\n```", "```php\n<?php\n\nclass BaseTask extends \\Phalcon\\CLI\\Task\n{\n    public function consoleLog($s_message, $color = 'green', $endline = true)\n    {\n        $start      = \"\\033[\";\n        $end        = \"\\033[0m\\n\";\n        $bash_color = '0;32';\n        $colors = array(\n            'green'  => '0;32',\n            'red'    => '0;31',\n            'yellow' => '0;33',\n            'blue'   => '0;34',\n            'grey'   => '0;30',\n        );\n        if (isset($colors[$color])) {\n            $bash_color = $colors[$color];\n        }\n        echo $start, $bash_color, 'm', $s_message;\n        if ($endline) echo $end;\n    }\n\n    public function countdown($time)\n    {\n        for ($i=1;$i<=$time;$i++) {\n            sleep(1);\n            $this->consoleLog(($time-$i).' seconds left ...', 'red');\n        }\n    }\n\n    public function quit($s_message)\n    {\n        $this->consoleLog($s_message, 'red');\n        exit;\n    }\n\n    public function log($s_message, $log_file='/tmp/app.log')\n    {\n        error_log(PHP_EOL.$s_message.PHP_EOL, 3, $log_file);\n    }\n\n    protected function confirm($message='Are you sure you want to process it')\n    {\n        echo \"\\033[0;31m\".$message.' [y/N]: '.\"\\033[0m\";\n\n        $confirmation = trim( fgets( STDIN ) );\n        if ($confirmation !== 'y') {\n            exit (0);\n        }\n    }\n}\n```", "```php\n{\n    \"require\": {\n        \"phalcon/incubator\": \"dev-master\",\n        \"crada/php-apidoc\": \"@dev\"\n    }\n}\n```", "```php\n$ php composer.phar update\n\n```", "```php\n#!/usr/bin/env php\n<?php\numask(0022);\nset_time_limit(1200);\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Phalcon\\DI\\FactoryDefault\\CLI as CliDI;\nuse Phalcon\\CLI\\Console as ConsoleApp;\nuse Crada\\Apidoc\\Extractor;\n```", "```php\nclass Cli\n{\n    private $arguments;\n    private $params;\n    private $console;\n\n    public function __construct($argv)\n    {\n        $di = new CliDI();\n\n        include __DIR__ .'/../config/loader.php';\n        $config  = include __DIR__ . '/../config/config.php';\n\n        $di->set('config', $config);\n\n        include __DIR__ . '/../config/services.php';\n\n        $console = new ConsoleApp();\n        $console->setDI($di);\n\n        foreach ($argv as $k => $arg) {\n            if ($k == 1) {\n                $this->arguments['task'] = $arg;\n            } elseif ($k == 2) {\n                $this->arguments['action'] = $arg;\n            } elseif ($k >= 3) {\n                $this->params[] = $arg;\n            }\n        }\n\n        if (count($this->params) > 0) {\n            $this->arguments['params'] = $this->params;\n        }\n\n        $this->console = $console;\n    }\n```", "```php\npublic function readTasks() {\n  if ($handle = opendir(__DIR__.'/Task/')) {\n\n    require_once __DIR__.'/Task/BaseTask.php';\n    $util = new BaseTask();\n    $util->consoleLog('Learning Phalcon CLI','grey');\n    $util->consoleLog(str_repeat('-', 80),'grey');\n\n    while (false !== ($entry = readdir($handle))) {\n      if ($entry != '.' && $entry != '..' && $entry != 'BaseTask.php' && preg_match(\"/\\.php$/\",$entry)) {\n      $entries[] = $entry;\n                }\n            }\n\n            asort($entries);\n\n            $charCountActionName = 0;\n\n            foreach ($entries as $entry) {\n                $task = str_replace('Task.php', '', $entry);\n\n                require_once __DIR__.'/Task/'.$entry;\n                $tmp_className = str_replace('.php','',$entry);\n                $tmp = new $tmp_className();\n\n                $taskName = PHP_EOL.strtolower(preg_replace('/\\B([A-Z])/', '_$1', $task));\n                $taskDescription = '';\n\n$util->consoleLog(str_pad($taskName, \n  25).$taskDescription, 'yellow');\n$st_classMethods = get_class_methods($tmp);\nasort($st_classMethods);\nforeach ($st_classMethods as $value) {\n  if (preg_match('/Action/', $value)) {\n    $theActionName = str_pad(str_replace('Action', \n      '', $value), 6);\n    if (strlen($theActionName) > \n      $charCountActionName) {\n\n        $charCountActionName = strlen(\n          $theActionName);\n      }\n    }\n  }\n  foreach ($st_classMethods as $value) {\n    if (preg_match('/Action/', $value)) {\n      $theActionName = str_replace('Action', '', \n        $value);\n      $theActionDescription = '';\n      $annotations = Extractor::getMethodAnnotations(\n        $tmp_className, $value);\n      if (count($annotations) > 0) {\n        foreach ($annotations as $key => \n          $st_values) {\n\n          if ($key == 'Description') {\n            $theActionDescription .= implode(', ', $st_values);\n          }\n        }\n      }\n      $util->consoleLog(str_pad($theActionName, \n      $charCountActionName + 5).\"\\033[\n        0;28m\".$theActionDescription, 'green');\n         }\n        }\n      }\n    closedir($handle);\n  }\n}\n```", "```php\n    public function getArguments()\n    {\n        return $this->arguments;\n    }\n\n    public function getConsole()\n    {\n        return $this->console;\n    }\n}\n```", "```php\ntry {\n    $cli       = new Cli($argv);\n    $arguments = $cli->getArguments();\n\n    if (0 === count($arguments)) {\n        $cli->readTasks();\n    } else {\n        $console = $cli->getConsole();\n        $console->handle($arguments);\n    }\n} catch (\\Phalcon\\Exception $e) {\n    echo $e->getMessage();\n}\n```", "```php\n$loader->registerDirs(array(\n    __DIR__ . '/../modules/Task/'\n));\n```", "```php\n<?php\nclass UserTask extends BaseTask\n{\n    /**\n     * @Description(\"Test action\")\n     */\n    public function testAction()\n    {\n        $this->consoleLog('OK');\n    }\n}\n```", "```php\n$ php modules/cli.php user test\n\n```", "```php\n<?php\nnamespace App\\Core\\Managers;\n\nuse \\App\\Core\\Models\\User;\nuse \\App\\Core\\Models\\UserGroup;\nuse \\App\\Core\\Models\\UserProfile;\n\nclass UserManager extends BaseManager\n{\n    public function find($parameters = null)\n    {\n        return User::find($parameters);\n    }\n\n    /**\n     * Create a new user\n     *\n     * @param  array                           $data\n     * @return string|\\App\\Core\\Models\\User\n     */\n    public function create($data)\n    {\n        $security = $this->getDI()->get('security');\n\n        $user = new User();\n        $user->setUserFirstName($data['user_first_name']);\n        $user->setUserLastName($data['user_last_name']);\n        $user->setUserEmail($data['user_email']);\n        $user->setUserPassword($security->hash($data[\n       'user_password']));\n        $user->setUserIsActive($data['user_is_active']);\n\n        if (false === $user->create()) {\n            foreach ($user->getMessages() as $message) {\n                $error[] = (string) $message;\n            }\n\n            throw new \\Exception(json_encode($error));\n\n        }\n\n        return $user;\n    }\n}\n```", "```php\n$di['core_user_manager'] = function () {\n    return new \\App\\Core\\Managers\\UserManager();\n};\n```", "```php\n/**\n * @Description(\"Create a new user\")\n * @Example(\"php modules/cli.php user create F_NAME L_NAME EMAIL@DOMAIN.TLD PASSWORD IS_ACTIVE\")\n*/\npublic function createAction($params = null) {\n  if (!is_array($params) || count($params) < 5) {\n    $this->quit('Usage: php modules/cli.php user create F_NAME L_NAME EMAIL@DOMAIN.TLD PASSWORD IS_ACTIVE');\n  }\n\n  $this->confirm('You will create a user with the following data: '.implode(' | ', $params));\n\n  $manager = $this->getDI()->get('core_user_manager');\n\n  try {\n    $user = $manager->create(array(\n      'user_first_name' => $params[0],\n      'user_last_name' => $params[1],\n      'user_email' => $params[2],\n      'user_password' => $params[3],\n      'user_is_active' => $params[4],\n    ));\n\n    $this->consoleLog(sprintf(\n      \"User %s %s has been created. ID: %d\",\n      $user->getUserFirstName(),\n      $user->getUserLastName(),\n      $user->getId()\n    ));\n\n    } catch (\\Exception $e) {\n      $this->consoleLog(\"There were some errors creating the user: \",\"red\");\n      $errors = json_decode($e->getMessage(), true);\n      foreach ($errors as $error) {\n        $this->consoleLog(\"  - $error\", \"red\");\n    }\n  }\n}\n```", "```php\n$ php modules/cli.php user create john doe john.doe@john.tld P@ss0rd!1\n\n```", "```php\n$this->addBehavior(new Timestampable(array(\n  'beforeValidationOnCreate' => array(\n    'field' => 'user_created_at',\n    'format' => 'Y-m-d H:i:s'\n  ),\n  'beforeValidationOnUpdate' => array(\n    'field' => 'user_updated_at',\n    'format' => 'Y-m-d H:i:s'\n  ),\n)));\n```", "```php\nINSERT INTO `user_group` (`id`, `user_group_name`, `user_group_created_at`, `user_group_updated_at`) VALUES\n(1, 'User', '2015-01-13 00:00:00', NULL);\n```", "```php\npublic function create($data, $user_group_name = 'User') {\n  $security = $this->getDI()->get('security');\n\n  $user = new User();\n  $user->setUserFirstName($data['user_first_name']);\n  $user->setUserLastName($data['user_last_name']);\n  $user->setUserEmail($data['user_email']);\n  $user->setUserPassword($security->hash($data['user_password']));\n  $user->setUserIsActive($data['user_is_active']);\n\n $user_group_id = $this->findFirstGroupByName($user_group_name)->getId();\n $user->setUserGroupId($user_group_id);\n\n  if (false === $user->create()) {\n    foreach ($user->getMessages() as $message) {\n      $error[] = (string) $message;\n    }\n\n    throw new \\Exception(json_encode($error));\n\n  }\n  return $user;\n}\n```", "```php\npublic function findFirstGroupByName($user_group_name) {\n  return UserGroup::findFirstByUserGroupName($user_group_name);\n}\n```", "```php\npublic function validation() {\n  $this->validate(new \\Phalcon\\Mvc\\Model\\Validator\\Email(array(\n    \"field\" => \"user_email\",\n    \"message\" => \"Invalid email address\"\n  )));\n\n  $this->validate(new \\Phalcon\\Mvc\\Model\\Validator\\Uniqueness(array(\n    \"field\" => \"user_email\",\n    \"message\" => \"The email is already registered\"\n  )));\n\n  return $this->validationHasFailed() != true;\n}\n```", "```php\n$ php modules/cli.php user create john doe john.doe@john.tld P@ss0rd!1\n\n```", "```php\n$ php modules/cli.php user create john doe me@me.com P@ss0rd! 1\n\n```", "```php\npublic function create($data, $user_group_name = 'User') {\n  $security = $this->getDI()->get('security');\n\n  $user = new User();\n  $user->setUserFirstName($data['user_first_name']);\n  $user->setUserLastName($data['user_last_name']);\n  $user->setUserEmail($data['user_email']);\n  $user->setUserPassword($security->hash($data['user_password']));\n  $user->setUserIsActive($data['user_is_active']);\n\n  $user_group_id = $this->findFirstGroupByName($user_group_name)->getId();\n  $user->setUserGroupId($user_group_id);\n\n $profile = new UserProfile();\n $profile->setUserProfileLocation($data['user_profile_location']);\n $profile->setUserProfileBirthday($data['user_profile_birthday']);\n\n $user->profile = $profile;\n\n  return $this->save($user);\n}\n```", "```php\npublic function save($object, $type = 'save') {\n  switch($type) {\n    case 'save':\n      $result = $object->save();\n      break;\n    case 'create':\n      $result = $object->create();\n      break;\n    case 'update':\n      $result = $object->update();\n      break;\n  }\n\n  if (false === $result) {\n    foreach ($object->getMessages() as $message) {\n      $error[] = (string) $message;\n    }\n\n    throw new \\Exception(json_encode($error));\n  }\n\n  return $object;\n}\n```", "```php\n$user = $manager->create(array(\n  'user_first_name' => $params[0],\n  'user_last_name' => $params[1],\n  'user_email' => $params[2],\n  'user_password' => $params[3],\n  'user_is_active' => $params[4],\n  'user_profile_location' => $params[5],\n  'user_profile_birthday' => $params[6],\n));\n```", "```php\n$ php modules/cli.php user create john doe other@email.com P@ss0rd! 1 Barcelona 1985-03-25\n\n```", "```php\npublic function create($data, $user_group_name = 'User') {\n  $security = $this->getDI()->get('security');\n\n  $user = new User();\n  $user->assign(array(\n    'user_first_name' => $data['user_first_name'],\n    'user_last_name'  => $data['user_last_name'],\n    'user_email'      => $data['user_email'],\n    'user_password'   => $security->hash($data['user_password']),\n    'user_is_active'  => $data['user_is_active']\n  ));\n\n  $user_group_id = $this->findFirstGroupByName($user_group_name)->getId();\n  $user->setUserGroupId($user_group_id);\n\n  $profile = new UserProfile();\n  $profile->assign(array(\n    'user_profile_location' => $data['user_profile_location'],\n    'user_profile_birthday' => $data['user_profile_birthday'],\n  ));\n\n  $user->profile = $profile;\n\n  return $this->save($user);\n}\n```", "```php\nDROP TABLE IF EXISTS `article`;\nCREATE TABLE IF NOT EXISTS `article` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `article_user_id` int(11) NOT NULL,\n  `article_is_published` tinyint(1) NOT NULL DEFAULT '0',\n  `article_created_at` datetime NOT NULL,\n  `article_updated_at` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `id` (`id`),\n  KEY `article_user_id` (`article_user_id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;\n\nALTER TABLE `article`\n  ADD CONSTRAINT `fk_user_id` FOREIGN KEY (`article_user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n```", "```php\nCREATE TABLE IF NOT EXISTS `article_translation` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `article_translation_article_id` int(11) NOT NULL,\n  `article_translation_short_title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n  `article_translation_long_title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n  `article_translation_slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n  `article_translation_description` text COLLATE utf8_unicode_ci NOT NULL,\n  `article_translation_lang` char(2) COLLATE utf8_unicode_ci DEFAULT 'en',\n  PRIMARY KEY (`id`),\n  KEY `id` (`id`),\n  KEY `article_translation_article_id` (`article_translation_article_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;\n\nALTER TABLE `article_translation`\n  ADD CONSTRAINT `fk_article_id` FOREIGN KEY (`article_translation_article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n```", "```php\nCREATE TABLE IF NOT EXISTS `category` (\n  `id` smallint(5) NOT NULL AUTO_INCREMENT,\n  `category_is_active` tinyint(1) NOT NULL DEFAULT '1',\n  `category_created_at` datetime NOT NULL,\n  `category_updated_at` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `category_is_active` (`category_is_active`),\n  KEY `category_created_at` (`category_created_at`),\n  KEY `category_updated_at` (`category_updated_at`)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;\n\nCREATE TABLE IF NOT EXISTS `category_translation` (\n  `category_translation_category_id` smallint(5) NOT NULL,\n  `category_translation_name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,\n  `category_translation_slug` varchar(128) COLLATE utf8_unicode_ci NOT NULL,\n  `category_translation_lang` char(2) COLLATE utf8_unicode_ci NOT NULL,\n  PRIMARY KEY (`category_translation_category_id`),\n  UNIQUE KEY `category_translation_slug` (`category_translation_slug`),\n  KEY `category_translation_lang` (`category_translation_lang`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```", "```php\nALTER TABLE `category_translation`\n  ADD CONSTRAINT `category_translation_ibfk_1` FOREIGN KEY (`category_translation_category_id`) REFERENCES `category` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n```", "```php\nCREATE TABLE IF NOT EXISTS `article_category_article` (\n  `article_id` int(11) NOT NULL,\n  `category_id` smallint(5) NOT NULL,\n  KEY `idx_article_id` (`article_id`),\n  KEY `idx_category_id` (`category_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n\nALTER TABLE `article_category_article`\n  ADD CONSTRAINT `article_category_article_ibfk_2` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,\n  ADD CONSTRAINT `article_category_article_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nclass Category extends Base\n{\n    public function initialize()\n    {\n        /*\n         * @param string $fields\n         * @param string $intermediateModel\n         * @param string $intermediateFields\n         * @param string $intermediateReferencedFields\n         * @param string $referencedModel\n         * @param string $referencedFields\n         * @param   array $options\n         * @return  \\Phalcon\\Mvc\\Model\\Relation\n         */\n        $this->hasManyToMany(\n            \"id\",\n            \"App\\Core\\Models\\ArticleCategoryArticle\",\n            \"category_id\",\n            \"article_id\",\n            \"App\\Core\\Models\\Article\",\n            \"id\",\n            array('alias' => 'articles')\n        );\n\n    $this->hasMany('id', 'App\\Core\\Models\\CategoryTranslation','category_translation_category_id', array(\n\n            'alias' => 'translations',\n            'foreignKey' => true\n        ));\n\n        $this->addBehavior(new Timestampable(array(\n            'beforeValidationOnCreate' => array(\n                'field' => 'category_created_at',\n                'format' => 'Y-m-d H:i:s'\n            ),\n            'beforeValidationOnUpdate' => array(\n                'field' => 'category_updated_at',\n                'format' => 'Y-m-d H:i:s'\n            ),\n        )));\n    }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nuse \\Phalcon\\Mvc\\Model\\Validator\\Uniqueness;\nuse \\Phalcon\\Utils\\Slug;\n\nclass CategoryTranslation extends Base{\n  public function initialize() {\n    $this->belongsTo('category_translation_category_id', 'App\\Core\\Models\\Category', 'id', array(\n      'foreignKey' => true,\n      'reusable' => true,\n      'alias' => 'category'\n        ));\n    }\n\n    public function validation()\n    {\n        $this->validate(new Uniqueness(array(\n            \"field\" => \"category_translation_slug\",\n            \"message\" => \"Category slug should be unique\"\n        )));\n\n        return $this->validationHasFailed() != true;\n    }\n\n    public function beforeValidation()\n    {\n        if ($this->category_translation_slug == '') {\n            $this->category_translation_slug = Slug::generate($this->category_translation_name).'-'.$this->category_translation_category_id;\n    }\n  }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nuse \\Phalcon\\Mvc\\Model\\Validator\\Uniqueness;\nuse \\Phalcon\\Utils\\Slug;\n\nclass ArticleTranslation extends Base\n{\n    public function initialize()\n    {\n        $this->belongsTo('article_translation_article_id', 'App\\Core\\Models\\Article', 'id', array(\n            'foreignKey' => true,\n            'reusable' => true,\n            'alias' => 'article'\n        ));\n    }\n\n    public function validation()\n    {\n        $this->validate(new Uniqueness(array(\n            \"field\" => \"article_translation_slug\",\n            \"message\" => \"Article slug should be unique\"\n        )));\n\n        return $this->validationHasFailed() != true;\n    }\n\n    public function beforeValidation()\n    {\n        if ($this->article_translation_slug == '') {\n            $this->article_translation_slug = Slug::generate($this->article_translation_short_title).'-'.$this->article_translation_article_id;\n        }\n    }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nuse \\Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Article extends Base\n{\n  public function initialize() {\n    $this->hasMany('id', 'App\\Core\\Models\\ArticleTranslation', 'article_translation_article_id', array(\n        'alias' => 'translations',\n        'foreignKey' => true\n    ));\n\n    $this->hasOne('article_user_id', 'App\\Core\\Models\\User', 'id', array(\n        'alias' => 'user',\n        'reusable' => true\n    ));\n\n    $this->hasManyToMany(\n      \"id\",\n      \"App\\Core\\Models\\ArticleCategoryArticle\",\n      \"article_id\",\n      \"category_id\",\n      \"App\\Core\\Models\\Category\",\n      \"id\",\n      array(\n        'alias' => 'categories'\n    ));\n\n    $this->addBehavior(new Timestampable(array(\n      'beforeValidationOnCreate' => array(\n        'field' => 'article_created_at',\n        'format' => 'Y-m-d H:i:s'\n      ),\n      'beforeValidationOnUpdate' => array(\n        'field' => 'article_updated_at',\n        'format' => 'Y-m-d H:i:s'\n      ),\n    )));\n  }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nclass ArticleCategoryArticle extends Base\n{\n    public function initialize()\n    {\n        $this->belongsTo('category_id', 'App\\Core\\Models\\Category', \n  'id', array('alias' => 'category')\n        );\n\n        $this->belongsTo('article_id', 'App\\Core\\Models\\Article', \n  'id', array('alias' => 'article')\n        );\n    }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Managers;\n\nuse \\App\\Core\\Models\\Category;\nuse \\App\\Core\\Models\\CategoryTranslation;\n\nclass CategoryManager extends BaseManager\n{\n    /**\n     * Create method\n     * @param array $input_data\n     * @throws \\Exception\n     * @return \\App\\Core\\Models\\Category\n     */\n    public function create(array $input_data)\n    {\n        $default_data = array(\n            'translations' => array(\n                'en' => array(\n                    'category_translation_name' => 'Category name',\n                    'category_translation_slug' => '',\n                    'category_translation_lang' => 'en',\n                )\n            ),\n            'category_is_active' => 0\n        );\n\n        $data = array_merge($default_data, $input_data);\n\n        $category = new Category();\n        $category->setCategoryIsActive($data['category_is_active']);\n\n        $categoryTranslations = array();\n\n        foreach ($data['translations'] as $lang => $translation) {\n            $tmp = new CategoryTranslation();\n            $tmp->assign($translation);\n            array_push($categoryTranslations, $tmp);\n        }\n\n        $category->translations = $categoryTranslations;\n\n        return $this->save($category, 'create');\n    }\n}\n```", "```php\n$di['core_category_manager'] = function () {\n    return new \\App\\Core\\Managers\\CategoryManager();\n};\n```", "```php\n<?php\nclass ArticleTask extends BaseTask\n{\n    /**\n     * @Description(\"Create a new category with the default data as it is defined in the manager->create() method\")\n     * @Example(\"php modules/cli.php article createCategory\")\n     */\n    public function createCategoryAction()\n    {\n        $manager = $this->getDI()->get('core_category_manager');\n\n        try {\n            $category = $manager->create(array());\n            $this->consoleLog(sprintf(\n                \"The category has been created. ID: %d\",\n                $category->getId()\n            ));\n\n        } catch (\\Exception $e) {\n            $this->consoleLog(\"There were some errors creating the category: \",\"red\");\n            $errors = json_decode($e->getMessage(), true);\n\n            if (is_array($errors)) {\n                foreach ($errors as $error) {\n                    $this->consoleLog(\"  - $error\", \"red\");\n                }\n            } else {\n                $this->consoleLog(\"  - $errors\", \"red\");\n            }\n        }\n    }\n}\n```", "```php\n$ php modules/cli.php article createCategory\n```", "```php\n    public function create($input_data)\n{\n  $default_data = array(\n    'article_user_id' => 1,\n    'article_is_published' => 0,\n    'translations' => array(\n      'en' => array(\n        'article_translation_short_title' => 'Short title',\n        'article_translation_long_title' => 'Long title',\n        'article_translation_description' => 'Description',\n        'article_translation_slug' => '',\n        'article_translation_lang' => 'en',\n      )\n    ),\n    'categories' => array()\n  );\n  $data = array_merge($default_data, $input_data);\n  $article = new Article();\n  $article->setArticleUserId($data['article_user_id']);\n  $article->setArticleIsPublished(\n    $data['article_is_published']);\n  $articleTranslations = array();\n  foreach ($data['translations'] as $lang => $translation) {\n    $tmp = new ArticleTranslation();\n    $tmp->assign($translation);\n    array_push($articleTranslations, $tmp);\n  }\n  $article->translations = $articleTranslations;\n  return $this->save($article, 'create');\n}\n\n```", "```php\n    public function createAction()\n    {\n        $manager = $this->getDI()->get('core_article_manager');\n\n        try {\n            $article = $manager->create(array(\n                'article_user_id' => 12\n            ));\n            $this->consoleLog(sprintf(\n                \"The article has been created. ID: %d\",\n                $article->getId()\n            ));\n\n        } catch (\\Exception $e) {\n            $this->consoleLog(\"There were some errors creating the article: \",\"red\");\n            $this->consoleLog($e->getMessage(),\"yellow\");\n            $errors = json_decode($e->getMessage(), true);\n\n            if (is_array($errors)) {\n                foreach ($errors as $error) {\n                    $this->consoleLog(\"  - $error\", \"red\");\n                }\n            } else {\n                $this->consoleLog(\"  - $errors\", \"red\");\n            }\n        }\n    }\n```", "```php\n$article = $manager->create(array(\n    'article_user_id' => 12\n));\n```", "```php\n$ php modules/cli.php article create\n\n```"]