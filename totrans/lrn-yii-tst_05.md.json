["```php\npublic function testValidatePasswordReturnsTrueIfPasswordIsCorrect() {\n    $expectedPassword = 'valid password';\n\n    $this->_user->password = Yii::$app->getSecurity()->generatePasswordHash($expectedPassword);\n\n    $this->assertTrue($this->_user->validatePassword($expectedPassword));\n}\n```", "```php\n// models/User.php\n\n/**\n * Validates password\n *\n * @param  string  $password password to validate\n * @return boolean if password provided is valid for current user\n */\npublic function validatePassword($password)\n{\n    return Yii::$app->getSecurity()->validatePassword($password, $this->password);\n}\n```", "```php\n/**\n * Mocks the Yii Security module,\n * so we can make it return what we need.\n *\n * @param string $expectedPassword the password used for encoding\n *                                 also used for validating if the\n *                                 second parameter is not set\n */\nprivate function _mockYiiSecurity($expectedPassword)\n{\n    $security = $this->getMockBuilder(\n'yii\\base\\Security')\n        ->getMock();\n```", "```php\n    $security->expects($this->any())\n        ->method('validatePassword')\n        ->with($expectedPassword)\n        ->willReturn(true);\n\n    $security->expects($this->any())\n        ->method('generatePasswordHash')\n        ->with($expectedPassword)\n        ->willReturn($expectedPassword);\n\n    Yii::$app->set('security', $security);\n}\n```", "```php\n/**\n * @expectedException yii\\base\\InvalidParamException\n */\npublic function testValidatePasswordThrowsInvalidParamExceptionIfPasswordIsIncorrect() {\n    $password = 'some password';\n    $wrongPassword = 'some other password';\n    $this->_mockYiiSecurity($password, $wrongPassword);\n\n    $this->_user->password = $password;\n    $this->_user->validatePassword($wrongPassword);\n}\n```", "```php\n/**\n * Mocks the Yii Security module,\n * so we can make it returns what we need.\n *\n * @param string $expectedPassword the password used for encoding\n *                                 also used for validating if the\n *                                 second parameter is not set\n * @param mixed $wrongPassword  if passed, validatePassword will\n *                              throw an InvalidParamException\n *                              when presenting this string.\n */\nprivate function _mockYiiSecurity($expectedPassword, $wrongPassword = false)\n{\n    $security = $this->getMockBuilder(\n'yii\\base\\Security')\n        ->getMock()\n    );\n    if ($wrongPassword) {\n        $security->expects($this->any())\n            ->method('validatePassword')\n            ->with($wrongPassword)\n            ->willThrowException(new InvalidParamException());\n    } else {\n        $security->expects($this->any())\n            ->method('validatePassword')\n            ->with($expectedPassword)\n            ->willReturn(true);\n    }\n    $security->expects($this->any())\n        ->method('generatePasswordHash')\n        ->with($expectedPassword)\n        ->willReturn($expectedPassword);\n\n    Yii::$app->set('security', $security);\n}\n```", "```php\npublic function testSetPasswordEncryptsThePasswordCorrectly()\n{\n    $clearTextPassword = 'some password';\n    $encryptedPassword = 'encrypted password';\n\n    // here, we need to stub our security component\n\n    $this->_user->setPassword($clearTextPassword);\n\n    $this->assertNotEquals(\n        $clearTextPassword, $this->_user->password\n    );\n    $this->assertEquals(\n        $encryptedPassword, $this->_user->password\n    );\n}\n```", "```php\npublic function testSetPasswordCallsGeneratePasswordHash()\n{\n    $clearTextPassword = 'some password';\n\n    $security = $this->getMockBuilder(\n'yii\\base\\Security')\n\n        ->getMock(\n);\n    $security->expects($this->once())\n        ->method('generatePasswordHash')\n        ->with($this->equalTo($clearTextPassword));\n    Yii::$app->set('security', $security);\n\n    $this->_user->setPassword($clearTextPassword);\n}\n```", "```php\nnamespace app\\models;\n\nclass User extends ActiveRecord\n{\n    /**\n     * Getter for fullname\n     */\n    public function getFullname()\n    {\n        return $this->firstname . ' ' . $this->lastname;\n    }\n\n    // rest of the class\n}\n```", "```php\npublic function testGetFullnameReturnsTheCorrectValue()\n{\n    $user = new User;\n    $user->firstname = 'Rainer';\n    $user->lastname = 'Wolfcastle';\n\n    $this->assertEquals(\n        $user->firstname . ' ' . $user->lastname,\n        $user->fullname\n    );\n}\n```", "```php\nnamespace app\\models;\n\nuse Yii;\nuse yii\\base\\Model\n\nclass Dog extends Model\n{\n    public $age;\n}\n```", "```php\npublic function testDogAgeIsRecordedCorrectly()\n{\n    $expectedAge = 7;\n    $dog = new Dog;\n    $dog->age = $expectedAge;\n\n    $this->assertEquals($expectedAge, $dog->age);\n}\n```", "```php\nnamespace app\\models;\n\nclass Dog extends ActiveRecord\n{\n    const AGE_MULTIPLIER = 7;\n    public $age;\n\n    public function setAge($age){\n        // let's record it in dog years\n        $this->age = $age * self::AGE_MULTIPLIER;\n    }\n\n    // rest of the class\n}\n```", "```php\npublic function testDogAgeIsRecordedInDogYears()\n{\n\n    $dog = new Dog;\n    $dog->age = 8;\n\n    $this->assertEquals(\n        56, \n        $dog->age\n    );\n}\n```", "```php\n$ ../vendor/bin/codecept run unit models/DogTest.php\n\n1) tests\\codeception\\unit\\models\\DogTest::testAgeIsRecordedInDogYears\nFailed asserting that 8 matches expected 56.\n\n```", "```php\nBaseActiveRecord::__set($name, $value)\n  if (BaseActiveRecord::hasAttribute($name))\n      $this->_attributes[$name] = $value;\n  else\n      Component::__set($name, $value)\n        if (method_exists($this, 'set'.$name))\n            $this->'set'.$name($value);\n        if (method_exist($this, 'get'.$name))\n            throw new InvalidCallException(...);\n        else\n            throw new UnknownPropertyException(...);\n```", "```php\n/**\n * @expectedException yii\\base\\InvalidCallException\n */\npublic function testSetFullnameThrowsException()\n{\n    $user = new User;\n    $user->firstname = 'Fido';\n    $user->lastname = 'Smith';\n\n    // setter not available\n    $user->fullname = 'Something Else';\n}\n```", "```php\nuse Specify;\n\npublic function testValidationRules()\n{\n    $this->specify(\n        'user should not validate if no attribute is set',\n        function () {\n verify_not($this->_user->validate());\n }\n    );\n\n    $this->specify(\n        'user should validate if all attributes are set', \n        function () {\n            $this->_user->attributes = [\n                'username'=>'valid username',\n                'password'=>'valid password',\n                'authkey' =>'valid authkey'\n            ];\n            verify_that($this->_user->validate());\n        }\n    );\n}\n```", "```php\nnamespace tests\\codeception\\unit\\models;\n\nuse Codeception\\Specify;\nuse yii\\codeception\\TestCase;\n// other imported namespaces\n\nclass UserTest extends TestCase\n{\n    use Specify;\n\n    // our test methods will follow\n    // we can now use $this->specify()\n}\n```", "```php\nverify_not($this->_user->validate());\n```", "```php\n$this->assertFalse($this->_user->validate());\n```", "```php\n$this->specify(\n    'user with username too long should not validate',\n    function () {\n        $this->_user->username = 'this is a username longer than 24 characters';\n\n        verify_not($this->_user->validate('username'));\n        verify($this->_user->getErrors('username'))->notEmpty();\n    }\n);\n```"]