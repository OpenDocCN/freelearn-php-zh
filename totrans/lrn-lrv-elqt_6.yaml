- en: Chapter 6. Everything under Control with Events and Observers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever heard anything about the single responsibility principle? I hope
    so. It is one of the SOLID principles in programming, and it basically says that
    a class has one and only one responsibility. In other words, every class has to
    do *one* single thing and not anything else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, when you build the first version of software, everything goes fine.
    Then, it happens. Your boss calls: time to introduce a new feature, developer!
    Especially if *update* means *insert this little extra behavior here*, your code
    base easily becomes heavy and sloppy.'
  prefs: []
  type: TYPE_NORMAL
- en: Terribly sloppy! Then, you fight against deadlines, tests, Q&A, and so on, literally
    an odyssey. Not a very good practice, right?
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the software development world, you can find many techniques and methods
    to add new features to your software in an elegant way. You have probably heard
    about *events* in programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a few words, let''s say it consists of logic such as this: *when X does
    this, then Y must do that*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine a similar situation in your application: you just finished your application
    and then you say, "Oh, I just forgot to send an e-mail to the newbie user!"'
  prefs: []
  type: TYPE_NORMAL
- en: 'With Eloquent, you can handle this situation in two ways. The first way is
    using the very interesting concept of model events. The second way is based on
    a more advanced concept: model observers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, in the first place, you will learn everything about events
    in the context of Eloquent models. Then, I will cover model events: what they
    are and when you would use them.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, I will do the same for model observers. You will learn all the differences,
    and the pros and cons. Obviously, for both of the concepts, I will use a practical
    example to show how to use them in a real-world situation.
  prefs: []
  type: TYPE_NORMAL
- en: Are you ready, hero?
  prefs: []
  type: TYPE_NORMAL
- en: When should I use events in my models?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of model events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model observers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of model observers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When should I use events in my models?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is an event? If you search the term on Google, you will get multiple results.
  prefs: []
  type: TYPE_NORMAL
- en: For example, it will be defined as *something that happens or is regarded as
    happening; an occurrence, especially one of some importance*. It may also be defined
    as *something that occurs in a certain place during a particular interval of time*.
  prefs: []
  type: TYPE_NORMAL
- en: I like these two definitions because they fit perfectly in this context. In
    fact, you can see the *particular interval of time* as the model lifecycle, in
    a certain sense.
  prefs: []
  type: TYPE_NORMAL
- en: You can create a new instance, update an existing instance, or delete it.
  prefs: []
  type: TYPE_NORMAL
- en: Every operation you can do is related to two events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from the basics: I have just created that record, I deleted that record,
    or I am updating that record, sounds natural, right?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Good. Now, Eloquent triggers some events when something happens in the model
    lifecycle. To be more precise, they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| creating | saved |'
  prefs: []
  type: TYPE_TB
- en: '| created | deleting |'
  prefs: []
  type: TYPE_TB
- en: '| updating | deleted |'
  prefs: []
  type: TYPE_TB
- en: '| updated | restoring |'
  prefs: []
  type: TYPE_TB
- en: '| saving | restored |'
  prefs: []
  type: TYPE_TB
- en: For every operation, you have two separate events. As you may imagine, they
    refer to separate moments. Let's pick the *create* operation for our example.
  prefs: []
  type: TYPE_NORMAL
- en: You have the *creating* event, that you can read as "the create operation is
    going to happen." Then, you have *created* that means "the create operation just
    happened".
  prefs: []
  type: TYPE_NORMAL
- en: 'As a scientist would say:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| creating | is about the *t - 1* moment |'
  prefs: []
  type: TYPE_TB
- en: '| created | is related to the *t + 1* moment |'
  prefs: []
  type: TYPE_TB
- en: 'So, you have two events for the three basic operations: create, update, and
    delete.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you can see two more operations: save and restore. However, don''t worry,
    they are not complex, in fact:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Save**: All you have to know is that the save operation is related both to
    *create* and *update*. Let''s assume that you want to add a behavior, whether
    or not the application is creating a record or saving an existing record. Why
    bother declaring the same thing twice? Just use the "save" generic operation and
    you''re done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restore**: The restore operation is used when you have the soft deletes feature
    enabled for a certain model, and you undo a delete operation on it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ok, I know what you are thinking: what about going deeper into the concepts?'
  prefs: []
  type: TYPE_NORMAL
- en: Model events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first technique we are going to look at for events is called **model events**.
    The basic concept is really simple:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `EventServiceProvider` class, you can add a special event listener and
    bind it to a certain closure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this closure, you will be able to specify your new behavior without touching
    the model code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This binding must be placed in the `boot()` method of the class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here's a simple example of a binding between the *created* user event and a
    closure, passed as a parameter of the called method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `$user` parameter of the closure contains the instance of the concerned
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can imagine, every model has these methods, named after the events we
    saw before. So, if you want to bind a certain operation to a *saved* event, for
    instance, you must use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Another interesting feature is the possibility to stop the current operation
    with the *pre* methods. In fact, if you are using any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`creating`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updating`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`saving`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restoring`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleting`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can decide to return the Boolean value `false` if you want to abort the
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say you want to abort the create operation if the user e-mail ends with
    the `@deniedprovider.com` string. You could do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, you can't do the same on the created, updated, saved, restored, and
    deleted events; the event just happened and you can't go back in time!
  prefs: []
  type: TYPE_NORMAL
- en: An example of model events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can now look at some examples of model events in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the great classic. A new user joins us, and we want to greet
    them with a welcome e-mail. Nothing is easier! Let''s open `EventServiceProvider`
    and add this code just after the `parent::boot()` call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Done! Wasn't it easy?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I am assuming that you have a `welcome.blade.php` view in the `emails` folder
    under `resources/views`. I am also assuming that you know the basics of e-mail
    sending in Laravel. If you need some more info, go to [http://laravel.com/docs/5.0/mail#basic-usage](http://laravel.com/docs/5.0/mail#basic-usage).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another example of model events in action:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume that we have a class (for the purpose of this example) that is
    delegated to send an e-mail to every user who wants to know when a new book by
    a certain author is added. The class is named `NewBookNotifier`, and the method
    is called `forAuthor($authorId)`, where the `$authorId` is the primary key of
    the desired author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Done! The main point is that this is very simple. As I mentioned earlier, the
    most important part is that every model remains untouched. You can even add a
    very complex behavior, but you will not touch anything in the model. This is a
    great advantage because if you test that model and you don't touch it, you can
    be sure that it will never break.
  prefs: []
  type: TYPE_NORMAL
- en: Now, I am going to talk about *more complex things*.
  prefs: []
  type: TYPE_NORMAL
- en: Events observers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Model events are cool, I agree. However, sometimes, you could need something
    more advanced.
  prefs: []
  type: TYPE_NORMAL
- en: When you use Laravel, you are working mostly with object-oriented programming
    and probably want to do the same with your model events. The answer to your questions
    is model observers, which is an advanced version of model events.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use them, all you have to do is to declare a new class like the following
    (maybe in a dedicated folder called `observers`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then register it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the `boot()` method of the `EventServiceProvider` class.
  prefs: []
  type: TYPE_NORMAL
- en: There is nothing more to it, the concept is exactly the same. With observers
    you can also use every single notion you learned before with model events. You
    can declare every method you want, and to bind a specific event, just use the
    event identifier for the method name. So, the *creating* event will be related
    to the `creating()` method and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, you can also abort an operation if you are using the *pre* methods,
    such as *creating* or *updating*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Alright, now let's look at a couple of examples using model observers!
  prefs: []
  type: TYPE_NORMAL
- en: An example of model observers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, here's how you can do the same thing you did in the first model
    events example, using observers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `WelcomeUserObserver.php` under `app/Observers`. Now,
    type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can register the observer in the `boot()` method of `EventServiceProvider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ta-dah! You're done. Your observer is now attached to your model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s imagine another situation now. After a meeting with developers, it comes
    out that the librarian needs some small introduced in to the code base:'
  prefs: []
  type: TYPE_NORMAL
- en: A notification for every user when a new author is added to the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An e-mail sent every time an author is added or deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, every time a book is deleted, the librarian must know how many authors
    are stored in the database without a related book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Good. Let''s start. We will build three separate classes: remember the *Single
    Responsibility Principle*, my friend.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CustomerNewAuthorObserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LibrarianAuthorObserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AuthorsWithoutBooksObservers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can name your classes as you prefer. I used this convention just as an example
    to easily link the behavior to the chosen name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let''s create the three separate classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Good. Now, it's time to add some logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s add `CustomerNewAuthorObserver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A very rude approach, I know. As usual, it's just for teaching purposes. Don't
    try this at home!
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, our `LibrarianAuthorObserver` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, I am assuming that you have all the needed views and know
    how to deal with e-mails. If not, take a look at the [http://laravel.com/docs/5.0/mail#basic-usage](http://laravel.com/docs/5.0/mail#basic-usage)
    page.
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't end here. You can use observers and events for a vast number of cases
    and scenarios. Just to take an example, imagine that you are writing a blog and
    you want to regenerate your sitemap every time you create or edit an article.
    Observers are the answer, or maybe you want to log something while you add new
    books—use event observers, again!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Great! You are now able to deal with events in every form, starting from the
    very basic to the more advanced concepts of observers. You just added another
    little piece to your Eloquent knowledge: the further you go, the more you will
    learn about how to make sophisticated applications. Also, we''re respecting some
    of the SOLID principles!'
  prefs: []
  type: TYPE_NORMAL
- en: Not bad, huh? However, don't use observers and events for everything. Sometimes,
    they are not the best choice, and you have to use other tools. So, be careful
    and analyze the individual problem you want to solve. A good technique never applies
    well to everything.
  prefs: []
  type: TYPE_NORMAL
- en: Well, time to take another step forward. If you want, take some rest; the *intermediate*
    part of our work is done. In the next two chapters, in fact, you will learn some
    advanced things.
  prefs: []
  type: TYPE_NORMAL
- en: Are you ready? Great!
  prefs: []
  type: TYPE_NORMAL
- en: Turn the page and learn how to use Eloquent without Laravel!
  prefs: []
  type: TYPE_NORMAL
