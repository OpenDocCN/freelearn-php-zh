- en: Chapter 6. Everything under Control with Events and Observers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用事件和观察者全面控制一切
- en: Have you ever heard anything about the single responsibility principle? I hope
    so. It is one of the SOLID principles in programming, and it basically says that
    a class has one and only one responsibility. In other words, every class has to
    do *one* single thing and not anything else.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你听说过单一职责原则吗？我希望你听说过。它是编程中的 SOLID 原则之一，它基本上说一个类只有一个且只有一个职责。换句话说，每个类都必须做*一件事*，而不是其他任何事情。
- en: 'Usually, when you build the first version of software, everything goes fine.
    Then, it happens. Your boss calls: time to introduce a new feature, developer!
    Especially if *update* means *insert this little extra behavior here*, your code
    base easily becomes heavy and sloppy.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你构建软件的第一个版本时，一切都很顺利。然后，事情发生了。你的老板打电话来：是时候介绍一个新功能了，开发者！特别是如果*更新*意味着*在这里插入这个小小的额外行为*，你的代码库很容易变得庞大而杂乱。
- en: Terribly sloppy! Then, you fight against deadlines, tests, Q&A, and so on, literally
    an odyssey. Not a very good practice, right?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 非常马虎！然后，你就要与截止日期、测试、问答等等作斗争，这简直是一场 Odyssey。这不是一个好的做法，对吧？
- en: Now, in the software development world, you can find many techniques and methods
    to add new features to your software in an elegant way. You have probably heard
    about *events* in programming.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在软件开发的世界里，你可以找到许多技术和方法以优雅的方式向你的软件添加新功能。你可能听说过编程中的*事件*。
- en: 'In a few words, let''s say it consists of logic such as this: *when X does
    this, then Y must do that*.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，可以说它包含这样的逻辑：*当X做这件事时，Y必须做那件事*。
- en: 'Imagine a similar situation in your application: you just finished your application
    and then you say, "Oh, I just forgot to send an e-mail to the newbie user!"'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下在你的应用程序中类似的情景：你刚刚完成你的应用程序，然后你说，“哦，我刚刚忘记给新用户发送一封电子邮件了！”
- en: 'With Eloquent, you can handle this situation in two ways. The first way is
    using the very interesting concept of model events. The second way is based on
    a more advanced concept: model observers.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Eloquent，你可以以两种方式处理这种情况。第一种方式是使用非常有趣的概念：模型事件。第二种方式是基于一个更高级的概念：模型观察者。
- en: 'In this chapter, in the first place, you will learn everything about events
    in the context of Eloquent models. Then, I will cover model events: what they
    are and when you would use them.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，首先，你将学习有关 Eloquent 模型中事件的所有内容。然后，我将介绍模型事件：它们是什么，以及你会在什么情况下使用它们。
- en: Then, I will do the same for model observers. You will learn all the differences,
    and the pros and cons. Obviously, for both of the concepts, I will use a practical
    example to show how to use them in a real-world situation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将为模型观察者做同样的事情。你将学习所有这些差异，以及它们的优缺点。显然，对于这两个概念，我将使用一个实际例子来展示如何在现实世界中使用它们。
- en: Are you ready, hero?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好了吗，英雄？
- en: When should I use events in my models?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该在模型中使用事件吗？
- en: Model events
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型事件
- en: An example of model events
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型事件的例子
- en: Model observers
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型观察者
- en: An example of model observers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型观察者的一个例子
- en: When should I use events in my models?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我应该在模型中使用事件吗？
- en: What is an event? If you search the term on Google, you will get multiple results.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是事件？如果你在谷歌上搜索这个术语，你会得到多个结果。
- en: For example, it will be defined as *something that happens or is regarded as
    happening; an occurrence, especially one of some importance*. It may also be defined
    as *something that occurs in a certain place during a particular interval of time*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，它可以定义为*发生或被认为发生的事情；一个事件，尤其是某个重要的事件*。它也可以定义为*在特定时间间隔内发生在特定地点的事情*。
- en: I like these two definitions because they fit perfectly in this context. In
    fact, you can see the *particular interval of time* as the model lifecycle, in
    a certain sense.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这两个定义，因为它们在这个上下文中非常合适。事实上，你可以将这个*特定的时间间隔*视为模型的生命周期，从某种意义上说。
- en: You can create a new instance, update an existing instance, or delete it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建一个新的实例，更新现有的实例，或者删除它。
- en: Every operation you can do is related to two events.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你能做的每个操作都与两个事件相关。
- en: 'Starting from the basics: I have just created that record, I deleted that record,
    or I am updating that record, sounds natural, right?'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础开始：我刚刚创建了那条记录，我删除了那条记录，或者我正在更新那条记录，听起来很自然，对吧？
- en: 'Good. Now, Eloquent triggers some events when something happens in the model
    lifecycle. To be more precise, they are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。现在，Eloquent 在模型生命周期中发生某些事情时触发一些事件。更准确地说，它们如下：
- en: '| creating | saved |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 创建 | 已保存 |'
- en: '| created | deleting |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 创建 | 删除 |'
- en: '| updating | deleted |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 更新 | 已删除 |'
- en: '| updated | restoring |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 已更新 | 恢复 |'
- en: '| saving | restored |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 保存 | 恢复 |'
- en: For every operation, you have two separate events. As you may imagine, they
    refer to separate moments. Let's pick the *create* operation for our example.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个操作，你都有两个独立的事件。正如你可能想象的那样，它们指的是不同的时刻。让我们以*创建*操作为例。
- en: You have the *creating* event, that you can read as "the create operation is
    going to happen." Then, you have *created* that means "the create operation just
    happened".
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你有*创建*事件，你可以将其读作“创建操作即将发生。”然后，你有*已创建*，这意味着“创建操作刚刚发生”。
- en: 'As a scientist would say:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 就像科学家说的：
- en: '| Operation | Description |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 描述 |'
- en: '| --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| creating | is about the *t - 1* moment |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 创建 | 关于*t - 1*时刻 |'
- en: '| created | is related to the *t + 1* moment |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 已创建 | 与*t + 1*时刻相关 |'
- en: 'So, you have two events for the three basic operations: create, update, and
    delete.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于三个基本操作：创建、更新和删除，你有两个事件。
- en: 'Also, you can see two more operations: save and restore. However, don''t worry,
    they are not complex, in fact:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到两个更多操作：保存和恢复。但是，不用担心，它们并不复杂，事实上：
- en: '**Save**: All you have to know is that the save operation is related both to
    *create* and *update*. Let''s assume that you want to add a behavior, whether
    or not the application is creating a record or saving an existing record. Why
    bother declaring the same thing twice? Just use the "save" generic operation and
    you''re done.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存**：你所需要知道的是，保存操作与*创建*和*更新*都有关。假设你想添加一个行为，无论应用程序是创建记录还是保存现有记录。为什么要在两次声明相同的事情上浪费时间？只需使用“保存”通用操作即可完成。'
- en: '**Restore**: The restore operation is used when you have the soft deletes feature
    enabled for a certain model, and you undo a delete operation on it.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复**：当你在某个模型上启用了软删除功能并撤销对其的删除操作时，使用恢复操作。'
- en: 'Ok, I know what you are thinking: what about going deeper into the concepts?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我知道你在想什么：关于深入概念呢？
- en: Model events
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型事件
- en: 'The first technique we are going to look at for events is called **model events**.
    The basic concept is really simple:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的第一个事件技术被称为**模型事件**。基本概念非常简单：
- en: In the `EventServiceProvider` class, you can add a special event listener and
    bind it to a certain closure
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`EventServiceProvider`类中，你可以添加一个特殊的事件监听器并将其绑定到某个闭包
- en: In this closure, you will be able to specify your new behavior without touching
    the model code
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个闭包中，你将能够指定你的新行为，而无需修改模型代码
- en: This binding must be placed in the `boot()` method of the class
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种绑定必须放在类的`boot()`方法中
- en: Here's a simple example of a binding between the *created* user event and a
    closure, passed as a parameter of the called method.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个将*创建*用户事件与闭包绑定的简单示例，该闭包作为调用方法的参数传递。
- en: 'The `$user` parameter of the closure contains the instance of the concerned
    user:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 闭包的`$user`参数包含相关用户的实例：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can imagine, every model has these methods, named after the events we
    saw before. So, if you want to bind a certain operation to a *saved* event, for
    instance, you must use the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，每个模型都有这些方法，这些方法以我们之前看到的事件命名。所以，如果你想将某个操作绑定到*已保存*的事件，例如，你必须使用以下方法：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another interesting feature is the possibility to stop the current operation
    with the *pre* methods. In fact, if you are using any of the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的功能是使用*pre*方法停止当前操作的可能性。实际上，如果你使用以下任何一种：
- en: '`creating`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`创建`'
- en: '`updating`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`更新`'
- en: '`saving`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`保存`'
- en: '`restoring`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`恢复`'
- en: '`deleting`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`删除`'
- en: You can decide to return the Boolean value `false` if you want to abort the
    operation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要中止操作，可以决定返回布尔值`false`。
- en: 'Let''s say you want to abort the create operation if the user e-mail ends with
    the `@deniedprovider.com` string. You could do something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在用户电子邮件以`@deniedprovider.com`字符串结尾时中止创建操作。你可以这样做：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Obviously, you can't do the same on the created, updated, saved, restored, and
    deleted events; the event just happened and you can't go back in time!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你不能在创建、更新、保存、恢复和删除事件上做同样的事情；事件已经发生，你不能回到过去！
- en: An example of model events
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型事件的示例
- en: We can now look at some examples of model events in action.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看看一些模型事件在实际中的应用示例。
- en: 'Let''s start with the great classic. A new user joins us, and we want to greet
    them with a welcome e-mail. Nothing is easier! Let''s open `EventServiceProvider`
    and add this code just after the `parent::boot()` call:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从伟大的经典开始。一位新用户加入了我们，我们想通过欢迎邮件向他们打招呼。这很简单！让我们打开`EventServiceProvider`并在调用`parent::boot()`之后添加此代码：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Done! Wasn't it easy?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！不是很容易吗？
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I am assuming that you have a `welcome.blade.php` view in the `emails` folder
    under `resources/views`. I am also assuming that you know the basics of e-mail
    sending in Laravel. If you need some more info, go to [http://laravel.com/docs/5.0/mail#basic-usage](http://laravel.com/docs/5.0/mail#basic-usage).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你有一个 `welcome.blade.php` 视图在 `resources/views/emails` 文件夹下。我也假设你了解 Laravel
    中发送电子邮件的基础知识。如果你需要更多信息，请访问 [http://laravel.com/docs/5.0/mail#basic-usage](http://laravel.com/docs/5.0/mail#basic-usage)。
- en: 'Here is another example of model events in action:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是模型事件在行动中的另一个例子：
- en: Let's assume that we have a class (for the purpose of this example) that is
    delegated to send an e-mail to every user who wants to know when a new book by
    a certain author is added. The class is named `NewBookNotifier`, and the method
    is called `forAuthor($authorId)`, where the `$authorId` is the primary key of
    the desired author.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们有一个类（为了这个示例的目的），它被委托给向每个想要知道某个作者新书被添加的用户发送电子邮件。这个类的名字是 `NewBookNotifier`，方法名为
    `forAuthor($authorId)`，其中 `$authorId` 是所需作者的键。
- en: 'We could do something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做一些类似的事情：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Done! The main point is that this is very simple. As I mentioned earlier, the
    most important part is that every model remains untouched. You can even add a
    very complex behavior, but you will not touch anything in the model. This is a
    great advantage because if you test that model and you don't touch it, you can
    be sure that it will never break.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！主要观点是这非常简单。正如我之前提到的，最重要的是每个模型都保持不变。你甚至可以添加非常复杂的行为，但你不会触及模型中的任何东西。这是一个很大的优势，因为如果你测试这个模型并且没有触及它，你可以确信它永远不会出错。
- en: Now, I am going to talk about *more complex things*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将谈论*更复杂的事情*。
- en: Events observers
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件观察者
- en: Model events are cool, I agree. However, sometimes, you could need something
    more advanced.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 模型事件很酷，我同意。然而，有时你可能需要更高级的功能。
- en: When you use Laravel, you are working mostly with object-oriented programming
    and probably want to do the same with your model events. The answer to your questions
    is model observers, which is an advanced version of model events.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 Laravel 时，你主要是在进行面向对象编程，并且可能希望对你的模型事件也这样做。你问题的答案是模型观察者，它是模型事件的更高级版本。
- en: 'To use them, all you have to do is to declare a new class like the following
    (maybe in a dedicated folder called `observers`):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它们，你只需要声明一个新的类，如下所示（可能在一个名为 `observers` 的专用文件夹中）：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then register it with:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在 `EventServiceProvider` 的 `boot()` 方法中注册它：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the `boot()` method of the `EventServiceProvider` class.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `EventServiceProvider` 类的 `boot()` 方法中。
- en: There is nothing more to it, the concept is exactly the same. With observers
    you can also use every single notion you learned before with model events. You
    can declare every method you want, and to bind a specific event, just use the
    event identifier for the method name. So, the *creating* event will be related
    to the `creating()` method and so on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 没有更多的事情了，概念完全相同。使用观察者，你还可以使用之前在模型事件中学到的每一个概念。你可以声明你想要的每一个方法，要绑定特定的事件，只需使用事件标识符作为方法名。所以，*创建*
    事件将与 `creating()` 方法相关，依此类推。
- en: 'Obviously, you can also abort an operation if you are using the *pre* methods,
    such as *creating* or *updating*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果你使用*预*方法，如*创建*或*更新*，你也可以中止操作：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Alright, now let's look at a couple of examples using model observers!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们看看几个使用模型观察者的例子！
- en: An example of model observers
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型观察者的一个例子
- en: First of all, here's how you can do the same thing you did in the first model
    events example, using observers.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这是你如何使用观察者做与第一个模型事件示例中相同的事情的方法。
- en: 'Create a new file named `WelcomeUserObserver.php` under `app/Observers`. Now,
    type in the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app/Observers` 下创建一个名为 `WelcomeUserObserver.php` 的新文件。现在，输入以下内容：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, you can register the observer in the `boot()` method of `EventServiceProvider`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在 `EventServiceProvider` 的 `boot()` 方法中注册观察者：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ta-dah! You're done. Your observer is now attached to your model.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿！你完成了。你的观察者现在已经附加到你的模型上了。
- en: 'Let''s imagine another situation now. After a meeting with developers, it comes
    out that the librarian needs some small introduced in to the code base:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们想象另一种情况。在开发者会议之后，我们发现图书管理员需要对代码库做一些小的介绍：
- en: A notification for every user when a new author is added to the system
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当系统添加新作者时，向每个用户发送通知
- en: An e-mail sent every time an author is added or deleted
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次添加或删除作者时发送的电子邮件
- en: Finally, every time a book is deleted, the librarian must know how many authors
    are stored in the database without a related book.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，每次删除一本书时，图书管理员必须知道在数据库中没有相关书籍的作者数量。
- en: 'Good. Let''s start. We will build three separate classes: remember the *Single
    Responsibility Principle*, my friend.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。让我们开始。我们将构建三个独立的类：记住，我的朋友，这是*单一职责原则*。
- en: 'We will have:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将会有：
- en: '`CustomerNewAuthorObserver`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomerNewAuthorObserver`'
- en: '`LibrarianAuthorObserver`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LibrarianAuthorObserver`'
- en: '`AuthorsWithoutBooksObservers`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthorsWithoutBooksObservers`'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can name your classes as you prefer. I used this convention just as an example
    to easily link the behavior to the chosen name.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按你的喜好命名你的类。我只是用这个约定作为一个例子，以便轻松地将行为与选定的名称联系起来。
- en: 'Then, let''s create the three separate classes:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们创建三个独立的类：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Good. Now, it's time to add some logic.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。现在，是时候添加一些逻辑了。
- en: 'First of all, let''s add `CustomerNewAuthorObserver`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们添加`CustomerNewAuthorObserver`：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A very rude approach, I know. As usual, it's just for teaching purposes. Don't
    try this at home!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这是一种非常粗鲁的方法。像往常一样，这只是为了教学目的。不要在家里尝试这样做！
- en: 'Then, our `LibrarianAuthorObserver` class is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的`LibrarianAuthorObserver`类如下：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we have the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有以下内容：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As mentioned earlier, I am assuming that you have all the needed views and know
    how to deal with e-mails. If not, take a look at the [http://laravel.com/docs/5.0/mail#basic-usage](http://laravel.com/docs/5.0/mail#basic-usage)
    page.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我假设你们都已经拥有了所有需要的视图并且知道如何处理电子邮件。如果没有，请查看[http://laravel.com/docs/5.0/mail#basic-usage](http://laravel.com/docs/5.0/mail#basic-usage)页面。
- en: It doesn't end here. You can use observers and events for a vast number of cases
    and scenarios. Just to take an example, imagine that you are writing a blog and
    you want to regenerate your sitemap every time you create or edit an article.
    Observers are the answer, or maybe you want to log something while you add new
    books—use event observers, again!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这还没有结束。你可以使用观察者和事件来解决大量的案例和场景。仅举一个例子，想象你正在写一个博客，并且每次你创建或编辑文章时都想重新生成你的网站地图。观察者是答案，或者你可能想在添加新书时记录一些东西——再次使用事件观察者！
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Great! You are now able to deal with events in every form, starting from the
    very basic to the more advanced concepts of observers. You just added another
    little piece to your Eloquent knowledge: the further you go, the more you will
    learn about how to make sophisticated applications. Also, we''re respecting some
    of the SOLID principles!'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你现在能够处理各种形式的事件，从非常基础的概念到更高级的观察者概念。你刚刚为你的Eloquent知识增添了另一个小片段：你走得越远，你将越多地了解如何制作复杂的应用程序。此外，我们也在尊重一些SOLID原则！
- en: Not bad, huh? However, don't use observers and events for everything. Sometimes,
    they are not the best choice, and you have to use other tools. So, be careful
    and analyze the individual problem you want to solve. A good technique never applies
    well to everything.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 还不错，不是吗？然而，不要把观察者和事件用于所有事情。有时候，它们并不是最佳选择，你必须使用其他工具。所以，要小心，分析你想要解决的个别问题。一个好的技术并不总是适用于所有事情。
- en: Well, time to take another step forward. If you want, take some rest; the *intermediate*
    part of our work is done. In the next two chapters, in fact, you will learn some
    advanced things.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，现在是时候向前迈出另一步了。如果你想，可以休息一下；我们工作的*中间部分*已经完成了。实际上，在接下来的两个章节中，你将学习一些高级内容。
- en: Are you ready? Great!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好了吗？太好了！
- en: Turn the page and learn how to use Eloquent without Laravel!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 翻到下一页，学习如何在没有Laravel的情况下使用Eloquent！
