- en: Chapter 9. Internationalizing Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Internationalizing controller and view texts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalizing model validation messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating strings with dynamic content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting and translating text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating database records with the Translate behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting and remembering the language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter includes a set of recipes that allow the reader to internationalize
    all aspects of their CakePHP applications, including static content, such as those
    available in views, and dynamic content, such as database records.
  prefs: []
  type: TYPE_NORMAL
- en: The first two recipes show how to allow text that is part of any CakePHP view
    or model validation messages to be ready for translation. The third recipe shows
    how to translate more complex expressions. The fourth recipe shows how to run
    CakePHP's built-in tools to extract all static content that needs translation,
    and then translate that content to different languages. The fifth recipe shows
    how to translate database records. Finally, the last recipe shows how to allow
    users to change the current application language.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalizing controller and view texts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to internationalize text that is located in
    our application views, and have that content ready for translation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe, we need some data to work with. Create a table named
    `articles` with the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add some sample data to this table with the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the controller for this table in a file named `articles_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `article.php` and place it in your `app/models` folder,
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `articles` in your `app/views` folder, and inside that
    folder create a file named `index.ctp` with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `add.ctp` and place it in your `app/views/articles` folder,
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `view.ctp` and place it in your `app/views/articles` folder,
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `articles_controller.php` file located in your `app/controllers` folder
    and make the following changes to the `add()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file `add.ctp` located in your `app/views/articles` folder and make
    the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, edit the file `index.ctp` located in your `app/views/articles` folder
    and make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now browse to `http://localhost/articles`, you should see a paginated
    list of articles, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_9_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CakePHP offers two main methods (amongst others) to allow developers to specify
    content that can be translated: `__()` and `__n()`. The naming of these methods
    may seem a bit odd, but they are largely influenced by Perl''s implementation
    of `gettext`, a tool that is part of the GNU Translation Project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `__()` method is used to translate static text, and takes up to two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `singular` | Text that should be translated to the current language. |'
  prefs: []
  type: TYPE_TB
- en: '| `return` | If set to `true`, the translated text will be returned instead
    of echoed to the client. Defaults to `false`. |'
  prefs: []
  type: TYPE_TB
- en: 'The `__n()` method is used to translate static text that could change if a
    certain value is either singular or plural, and takes up to four arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `singular` | Text that should be used if the given value in `count` is `singular`,
    and that will be translated to the current language when used. |'
  prefs: []
  type: TYPE_TB
- en: '| `plural` | Text that should be used if the given value in `count` is `plural`,
    and that will be translated to the current language when used. |'
  prefs: []
  type: TYPE_TB
- en: '| `count` | A variable or numeric value that holds the value that should be
    used to determine if either the `singular` or `plural` text is to be used. |'
  prefs: []
  type: TYPE_TB
- en: '| `return` | If set to `true`, the translated text will be returned instead
    of echoed to the client. Defaults to `false`. |'
  prefs: []
  type: TYPE_TB
- en: We start by changing the flash messages in the `ArticlesController` class to
    use the `__()` method, specifying that the translated string should be returned
    rather than echoed to the client. We continue by modifying the `add.ctp` view
    so that all labels and the form legend can be translated.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we wrap the title in the `index.ctp` view with the translator function.
    We then use the first parameter of the `counter(), next()`, and `prev()` methods
    that are part of the `PaginatorHelper` class to pass the translated version of
    the appropriate pagination text. Finally, we use the `__n()` function to choose
    the correct translated text depending on the value of the `count` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the `__n()` function you should only use a variable as its third
    parameter. Using expressions (including array indexes) may produce unexpected
    results when running CakePHP's extractor shell, which is covered in the recipe
    *Extracting and translating text*.
  prefs: []
  type: TYPE_NORMAL
- en: Domains and categories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The translation functions used in this recipe are actually wrappers around the
    `translate()` method of CakePHP's built-in `I18n` class. This method not only
    allows simple translations, but also allows the developer to specify the domain
    from which translated texts are obtained, and the category to which the text to
    be translated belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Domains allow you to separate groups of translation text into separate files.
    By default, when no domain is specified, CakePHP assumes a domain named `default`.
    If you want to specify the domain in which a translated text should be looked
    for, use the `__d()` and `__dn()` translation functions. For example, to look
    for a translated text in the `my_plugin` domain, you would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Categories allow for a further grouping of translated texts by grouping the
    translation files into separate directories, and provide further meaning to the
    translated text. By default, CakePHP will assume that translated texts belong
    to the `LC_MESSAGES` category. If you wish to change the category, use the `__dc()`
    and `__dcn()` translator functions, by setting its next-to-last argument, `return`,
    to the desired category, which can be any of the following defined constants with
    the respective fixed value:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LC_ALL: 0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LC_COLLATE: 1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LC_CTYPE: 2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LC_MONETARY: 3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LC_NUMERIC: 4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LC_TIME: 5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LC_MESSAGES: 6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, to look for a translated text in the `default` domain and the
    `LC_MESSAGES` category you would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When looking forward to using categories, always use the category value previously
    given in the list rather than the constant name, as this constant is platform-dependent.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Internationalizing model validation messages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Extracting and translating text*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalizing model validation messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn different approaches for the same need: translating
    model validation messages.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, we need a basic application skeleton to work with.
    Go through the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the file `article.php` located in your `app/models` folder and make the
    following changes to the `validate` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two ways to have validation messages translated. The first one requires
    you to override the model constructor by adding the following implementation to
    the `Article` class defined in your `app/models/article.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The alternative way to translate validation messages is to move these messages
    to the view. Instead of overriding and defining the messages in the model constructor,
    edit your `app/views/articles/add.ctp` view file and make the following changes
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Both ways should produce the same result. If you now browse to `http://localhost/articles/add`
    and submit the form without entering any values, you should see the validation
    messages shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_9_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before attempting to provide the error messages for each validation rule, we
    need to name each of our rules. We do so by modifying the `Article` model so that
    each rule defined is indexed by a name. In our case we choose `required` as the
    name for the validation based on CakePHP's built-in `notEmpty` rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first method we used to specify the validation messages shows a practical
    approach when we want to centralize all validation messages in the model. We override
    the model constructor so that from within this constructor we specify the error
    messages that should be translated. We needed to implement the constructor because
    class property values cannot use an expression other than a static assignment,
    so the following block of code would produce a PHP syntax error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this constructor implementation, we start by making sure that the `validate`
    property is an array of rules, indexed by field name, and that each set of rules
    is itself an array indexed by name, having as its value another array where at
    the very least the `rule` setting is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Once we are sure that the `validate` property has the right format, we merge
    the validation messages for each rule using the `__()` translator function to
    translate the messages. Finally, we call the parent constructor to ensure that
    the model is built properly.
  prefs: []
  type: TYPE_NORMAL
- en: The second method described in this recipe moves the responsibility of declaring
    each validation error message to the view, by means of the `error` setting available
    in the `input()` method of the `FormHelper` class. This setting is set to an array,
    indexed by validation name, and the value is set to the error message shown when
    the respective validation fails.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Extracting and translating text*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating strings with dynamic content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to allow strings consisting of parts that
    are not static, such as variable values, to be translatable.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, we need a basic application skeleton to work with.
    Go through the entire recipe *Internationalizing controller and view texts*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the file `articles_controller.php` located in your `app/controllers` folder
    and make the following changes to the `add()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the view file `index.ctp` located in your `app/views/articles` folder
    and make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When looking forward to including dynamic information, such as the value of
    a variable, or in this case, the value of a table field in the database, one can
    be tempted to simply append the variable to the string that is sent to the translator
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is not a valid expression, as CakePHP''s extractor, shown in the recipe
    *Extracting and translating text*, expects only static strings as arguments to
    the translator functions, and other languages may need to re-order the sentence.
    Therefore, we need to use some way of string interpolation, so we chose to use
    the most common ones offered by PHP: the `printf()` and `sprintf()` functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Both functions take the same number and type of arguments. The first argument
    is mandatory and specifies the string to use for interpolation, while any subsequent
    argument is used to produce the final string. The only difference between `printf()`
    and `sprintf()` is that the former will output the resulting string, while the
    later simply returns it.
  prefs: []
  type: TYPE_NORMAL
- en: We start by changing the success message given by the `ArticlesController` class
    whenever an article is created. We use `sprintf()` as we need to send it through
    to the `setFlash()` method of the `Session` component. In this case, we use the
    expression `%s` to interpolate the value of the `title` field for the newly created
    article.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, our latest change uses `%d` to interpolate the decimal value of the
    variable `count`, and uses `printf()` to output the result string.
  prefs: []
  type: TYPE_NORMAL
- en: Reordering and reusing interpolation arguments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When using expressions such as `%s` or `%d` to tell `printf()` and `sprintf()`
    where to place the value of an argument, we have no flexibility in terms of value
    positioning, and no practical way to reuse a value, as each of those expressions
    needs to match a specific argument. Let us assume the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The first `%s` expression gets replaced with the value of the `name` variable,
    while the last `%s` expression is replaced with the value of the `country` variable.
    What if we wanted to change the order of these values in the string without altering
    the order of the arguments that are sent to `printf()?`
  prefs: []
  type: TYPE_NORMAL
- en: 'We can instead specify which argument is used by an interpolation expression
    by referring to an argument number (name being the argument number `1`, and `country`
    argument number `2`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This also allows us to reuse an argument without having to add it as an extra
    argument to `printf()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Extracting and translating text*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting and translating text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to extract all strings that need translation
    from our CakePHP applications and then perform the actual translations using free
    software.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To go through this recipe, we need a basic application skeleton to work with.
    Go through the entire recipe *Internationalizing controller and view texts*.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to have **Poedit** installed in our system. Go to [http://www.poedit.net/download.php](http://www.poedit.net/download.php)
    and download the appropriate file for your operative system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From the command line, and while in your `app/` directory, issue the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on a GNU Linux / Mac / Unix system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on Microsoft Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should accept the default options, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_9_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After answering the final question, the shell should go through your application
    files and generate a translation template in a file named `default.pot`, placing
    it in your `app/locale` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Poedit, and then click on the menu **File**, and option **New catalog
    from POT file**. You should now see an open file dialog box. Browse to your `app/locale`
    folder, select the `default.pot` file, and click the **Open** button. A setting
    window should appear, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_9_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Settings** window, enter the desired project name and project information.
    In the **Plural Forms** field you should enter an expression that tells Poedit
    how to recognize plural translations. For most languages, such as English, Spanish,
    German and Portuguese, you should enter the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about plural forms and which value should be given, depending
    on the language you are translating to, is available at [http://drupal.org/node/17564](http://drupal.org/node/17564).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have entered all the desired details, click on the **OK** button. You
    will now be asked where to store the translated file. Create a folder named `spa`
    and place it in your `app/locale` folder. Inside the `spa` folder, create a folder
    named `LC_MESSAGES`. Then, while in Poedit's dialog box, select the folder `app/locale/spa/LC_MESSAGES`
    and click the button **Save** without changing the file name, which should be
    `default.po`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Poedit will now show you all the original strings, and allow you to translate
    each by entering the desired translation in the bottom text area. After you enter
    your translations, Poedit may look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_9_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the menu **File**, and then option **Save** to save the translated
    file. There should now be two files in your `app/locale/spa/LC_MESSAGES` folder:
    `default.po` and `default.mo`.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CakePHP's extractor will first ask which paths to process. When all paths have
    been specified, it will browse recursively through its directories and look for
    any use of a translator function (any of `__(), __n(), __d(), __dn(), __dc(),
    __dcn()`, and `__c()`) in PHP and view files. For each found usage, it will extract
    the strings that need translation (first argument on calls to `__()` and `__c()`;
    the second argument on calls to `__d()` and `__dc()`; the first and second arguments
    on calls to `__n()`; and the second and third arguments on calls to `__dn()` and
    `__dcn()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to only use static strings, avoiding any PHP expressions, on
    the arguments the extractor looks for. If you want to learn how to interpolate
    variable values in the strings that need translation, see the recipe *Translating
    strings with dynamic content*.
  prefs: []
  type: TYPE_NORMAL
- en: Once CakePHP's extractor has obtained all strings that need translation, it
    will create the appropriate translation template files. If you used any translator
    function that specifies a domain (`__d()`, `__dn(), __dc()`, and `__dcn()`), you
    can optionally merge all strings into one template file, or have each domain create
    a separate template file. Template files have the `pot` extension, and use the
    domain name as its filename (default.pot being the default template file).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open `default.pot` with a text editor, you will notice that it starts
    with a header that includes several settings, and then includes two lines for
    each string that needs translation: a line that defines a `msgid` (the string
    to be translated), and a line that has an empty string for `msgstr` (the translated
    string).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We then use Poedit to open this template file, translate the strings, and save
    it in the appropriate directory (`app/locale/spa/LC_MESSAGES`), where Poedit will
    create two files: `default.po` and `default.pot`. If you open `default.po` with
    a text editor, you will notice it almost looks exactly as the template file does,
    except that the header settings have changed to what we defined, and the `msgid`
    lines are filled with our translations. The `default.mo` file is a binary version
    of the `default.po` file, also generated by Poedit, and is used by CakePHP to
    speed processing of the translation file.'
  prefs: []
  type: TYPE_NORMAL
- en: Translating database records with the Translate behavior
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to allow translation of database records by
    means of CakePHP's `Translate` behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To go through this recipe, we need a basic application skeleton to work with.
    Go through the entire recipe *Internationalizing controller and view texts*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From the command line, and while in your `app/` directory, issue the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on a GNU Linux / Mac / Unix system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on Microsoft Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Accept all the default answers. The shell should finish by creating a table
    named `i18n`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_9_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Edit your `app/models/article.php` file and add the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to move the values for the `title` and `body` fields from the `articles`
    table to the `i18n` table, and then drop those fields from the `articles` table.
    Issue the following SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Spanish translations for our articles by Issuing the following SQL
    statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, edit your `app/config/bootstrap.php` file and add the following above
    the PHP closing tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If you now browse to `http://localhost/articles`, you should see the same listing
    of articles, as shown in the first screenshot (recipe *Internationalizing controller
    and view texts*).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start by using the shell to create the table required by the `Translate`
    behavior. This table is by default named `i18n`, and contains (besides its primary
    key) the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `locale` | The locale (language) this particular record field is being translated
    to. |'
  prefs: []
  type: TYPE_TB
- en: '| `model` | The model where the record being translated belongs. |'
  prefs: []
  type: TYPE_TB
- en: '| `foreign_key` | The ID (primary key) in `model` that identifies the record
    being translated. |'
  prefs: []
  type: TYPE_TB
- en: '| `field` | The field being translated. |'
  prefs: []
  type: TYPE_TB
- en: '| `content` | The translated value for the record field. |'
  prefs: []
  type: TYPE_TB
- en: We then add the `Translate` behavior to our `Article` model, and set it to translate
    the `title` and `body` fields. This means that these fields will no longer be
    a part of the `articles` table, but instead be stored in the `i18n` table. Using
    the `model` and `foreign_key` values in the `i18n` table, the `Translate` behavior
    will fetch the appropriate values for these fields whenever an `Article` record
    is obtained matching the application language.
  prefs: []
  type: TYPE_NORMAL
- en: We copy the values of the `title` and `body` fields into the `i18n` table, and
    we then remove these fields from the `articles` table. No change is needed in
    the `find()` call that is used in our `ArticlesController` class. Furthermore,
    the creation of articles will continue to work transparently, as the `Translate`
    behavior will use the current language when saving records through the `Article`
    model.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is telling CakePHP which is the default application language,
    by setting the `Config.language` configuration setting. If this step is omitted,
    CakePHP will obtain the current language by looking into the `HTTP_ACCEPT_LANGUAGE`
    header sent by the client browser.
  prefs: []
  type: TYPE_NORMAL
- en: Using separate translation tables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Any model that uses the `Translate` behavior will by default use this `i18n`
    table to store the different translations for each of its translated fields. This
    could be troublesome if we have a large number of records, or a large number of
    translated models. Fortunately, the `Translate` behavior allows us to configure
    a different translation model.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let us assume that we want to store all article translations
    in a table called `article_translations`. Create the table and then copy the translated
    records from the `i18n` table by issuing the following SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `article_translation.php` and place it in your `app/models`
    folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `displayField` property in the translation model tells the `Translate` behavior
    which field in the table holds the name of the field being translated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, edit your `app/models/article.php` file and make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Setting and remembering the language*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting and remembering the language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to allow users to change the current language
    and have their language selection be remembered through the use of cookies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe we need a fully internationalized application to work
    with. Go through the entire recipe *Translating database records with the Translate
    behavior*.
  prefs: []
  type: TYPE_NORMAL
- en: We also need an application layout that we can modify. Copy the file `default.ctp`
    from `cake/libs/view/layouts` to your `app/views/layouts` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit your `app/config/bootstrap.php` file and add the following right above
    the PHP closing tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `default.ctp` layout file located in your `app/views/layouts` folder
    and add the following where you want the list of languages to be included (such
    as right above the call to the `flash()` method of the `Session` component):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The Config.language setting used earlier was specified in the `app/config/bootstrap.php`
    file while going through the *Translating database records with the Translate
    behavior*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a file named `app_controller.php` and place it in your `app/` folder,
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create a file named `language.php` and place it in your `app/controller/components`
    folder, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now browse to `http://localhost/articles` you should see the list of
    articles, and in the top-right area, a link to switch the current language to
    **Spanish**. Clicking on it should display the Spanish version of the articles,
    and change all available texts to the selected language, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_9_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by defining all available languages so that we can easily include a
    link to switch the current language. We use this list to construct the list of
    links and place it in the `default.ctp` layout file, only allowing clicks on languages
    other than the current application language.
  prefs: []
  type: TYPE_NORMAL
- en: The current language is set in CakePHP's configure variable, `Config.language`,
    which is set to a default language (`eng` in our case) in the configuration file
    `bootstrap.php`. When a language change is needed, this setting should be changed
    before the first use of a translator function.
  prefs: []
  type: TYPE_NORMAL
- en: To keep a clean controller, we decided to create a component called `Language`
    to handle language changes. This component will look for a named or URL parameter
    called `lang`. If no language is specified, the component will look for the current
    language by looking into a cookie.
  prefs: []
  type: TYPE_NORMAL
- en: If no cookie is set, or if a language change is requested, the component will
    save the current language in a cookie named `language` that lasts for one year.
  prefs: []
  type: TYPE_NORMAL
