- en: Chapter 4. Active Record, Models, and Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like many modern web frameworks, Yii2 comes with several powerful classes to
    represent data both in and out of our database. These classes enable us to abstract
    our data management code away from DAO and Query Builder and into an easy-to-use
    programmatic interface. In this chapter, we'll cover the use and implementation
    of Active Record and learn how to create data models and custom forms. We'll also
    cover how to configure a powerful code generation tool called **Gii** to automate
    the creation of Active Record models and forms.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Gii
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Active Record models and forms can be generated by hand, in most cases,
    we'll want to automate the creation of this code. To achieve this, Yii2 provides
    a code generation tool called Gii, which can be executed both from the command
    line and from a web interface in order to create Active Record models that work
    with our database structure and forms that work with both our base models and
    Active Record models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike Yii1, Gii does not come prebundled with Yii2\. In Yii2, nearly every
    module is available as a separate Composer package, which can be installed from
    the command-line interface. Consequently, we must use Composer to include Gii
    in our application. Since Gii is available as a composer package, we can include
    it in our application by running the following command from our command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Configuring Gii](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since Gii is a development tool and has the ability to write new code to our
    application, we should use the `--dev` flag so that Composer adds it to the `require-dev`
    section of our `composer.json` file. Typically, during our deployment process,
    we'll use the `--no-dev` flag to ensure that development packages are not deployed
    to our production environment.
  prefs: []
  type: TYPE_NORMAL
- en: With Gii installed, we now need to configure it to work with both the Yii2 console
    and within our web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Gii for web applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable the web interface for Gii, we''ll need to specify a `module` section
    within our `config/web.php` configuration file and bootstrap the Gii module so
    that it loads properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Gii is only available on the loopback interface of your machine.
    If you're using a remote development server or a virtual machine, you'll need
    to either whitelist your host IP within the `allowedIPs` block or set the `allowedIPs`
    block to the wildcard character `*` in order to grant your computer access to
    Gii.
  prefs: []
  type: TYPE_NORMAL
- en: While this basic configuration will properly load the Gii module, it doesn't
    follow our convention of being aware of our environment. For instance, if we went
    to production with this configuration and deployed it with `composer install --no-dev`,
    as described earlier, our application would crash because Composer would not have
    installed the Gii module in our vendor folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, since we previously defined our `APPLICATION_ENV` constant in
    our bootstrap file rather than returning a static array containing our configuration
    file, we can store our configuration as a variable and conditionally modify it
    to include the Gii module depending upon which environment we are working in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As an alternative to `APPLICATION_ENV`, you can conditionally load Gii using
    the `YII_ENV_DEV` constant, which is typically defined in your bootstrap file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For our configuration files, the use of either constant is appropriate. However,
    most developers find that allowing their web server or command line to define
    the `APPLICATION_ENV` constant requires less maintenance than manually managing
    the `YII_ENV_DEV` constant.
  prefs: []
  type: TYPE_NORMAL
- en: Gii can now be accessed by navigating our web browser to our application path
    and changing the URI to `/index.php?r=gii`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Gii for web applications](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have already enabled pretty URLs for your application, Gii can be accessed
    by navigating to the `/gii` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Gii for console applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike Yii1, Gii for Yii2 provides a new interface to work with Gii on the command
    line. With Yii2, we can now generate the source code for Active Record models,
    forms, and even extensions all from our command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to enable Gii for our console applications is to modify our
    `config/console.php` file to include the Gii module within the `module` section
    of our configuration file and then bootstrap the Gii module itself, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Like our web application, this basic configuration doesn''t enable our application
    function properly in every environment. We can reconfigure our `config/console.php`
    file in the same manner as our web configuration file in order to ensure that
    the Gii module is only loaded in our development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the previous code block, the `module` section of our configuration
    file can be loaded using a shorter syntax if we don''t need to register additional
    options with our module, which is generally the preferred way to load modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With our console environment configured, we can now run Gii from the command
    line by invoking the help command within the `./yii` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Gii for console applications](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With our console application configured to use Gii, we can now start using the
    Gii tool to create code. As we move through the rest of the chapter, we'll cover
    how to use Gii from the web interface as well as the console interface.
  prefs: []
  type: TYPE_NORMAL
- en: Active Record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important tasks when building rich web applications is ensuring
    that we properly model and represent our data in code. From a simple blog site
    to an application as big as Twitter, data modeling and representation are vital
    to ensuring that our application is easy to work with and can grow as required.
    To help us model our data, Yii2 implements the Active Record pattern, also known
    as Active Record within the `yii/db/ActiveRecord` class.
  prefs: []
  type: TYPE_NORMAL
- en: The Active Record pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Named by Martin Fowler in his 2003 book *Patterns of Enterprise Application
    Architecture*, the Active Record pattern is an **object-relational mapping** (**ORM**)
    pattern that's used to represent database rows and columns within an object. In
    the Active Record pattern, each database column is represented by a single Active
    Record class. Upon instantiation, that object then provides a simple interface
    to manage individual rows or a collection of rows within our code. New rows can
    be created, old ones can be deleted, and existing rows can be updated—all within
    a simple and consistent API. Active Record also enables us to programmatically
    reference and interact with related data, which is usually represented in our
    database by foreign key relations.
  prefs: []
  type: TYPE_NORMAL
- en: In Yii2, Active Record is implemented by the `yii/db/ActiveRecord` class and
    is often considered the go-to class to represent and work with the data within
    our database. While many frameworks and ORMs implement Active Record for relational
    databases only, Yii2 implements Active Record for search tools such as Sphinx
    and ElasticSearch as well as for NoSQL databases such as Redis and MongoDB. In
    this section, we'll cover how to create new Active Record classes, how to implement
    them within our code, and some common pitfalls of working with Active Record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start working with Active Record, we first need to create a couple
    of tables that we can work with. Included with the project resources for this
    chapter is a base migration that will create several new tables and populate them
    with some sample data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![The Active Record pattern](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After running the migration, you can verify that the following schema exists
    within our database by running the `.schema` command from the sqlite3 tool.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Active Record classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with Active Record in Yii2, we first need to declare an instance
    of `yii/db/ActiveRecord` within our application. Since Active Record instances
    in Yii2 extend from the `yii/base/Model` class and are considered models, we will
    generally store them within the `models/` directory of our application and under
    the `app/models` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Yii2, `@app` is a predefined alias that points to our application base path.
    Consequently, any namespace declared in our application will typically take the
    form of `app\<folder>`, which enables Yii2's built-in autoloader to automatically
    reference that namespace to our class found in `/<folder>/ClassName.php`. If we
    want to, we can declare additional aliases, such as `@frontend` and `@backend`,
    to divide our application into different sections, which would enable us to create
    multiple Active Record instances in different namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: To keep things simple in this chapter, we'll declare only those Active Record
    classes that are within the `app\models` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate an example, let''s create an Active Record class for the `user`
    table we created in [Chapter 3](part0023_split_000.html#LTSU1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 3. Migrations, DAO, and Query Building"), *Migrations, DAO, and Query
    Building*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a new file in the `models/` directory of our application,
    called `User.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to declare the namespace our Active Record instance will live
    in and extend the `yii/db/ActiveRecord` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we need to implement the static method `tableName()` within our class,
    which defines the table name our Active Record model will use. Since our Active
    Record model will use the `user` table, we will define this method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating active record classes with Gii
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While it''s possible to create Active Record instances by hand, generally,
    we''ll want to use Gii to create these classes for us. Using Gii to create our
    Active Record classes has several advantages: in addition to creating the class,
    it will also create attribute labels for our fields, create validation rules based
    upon our database schema, and generate model relationships to another Active Record
    classes based upon our databases'' foreign key structure.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Gii's web interface
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Like Yii1, Gii provides a friendly and easy-to-use web interface to create our
    Active Record instances. To get started with Gii, navigate to the `/gii` endpoint
    of our application and click on the **Start** button underneath the **Model Generator**
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii''s web interface](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From this page, we can generate Active Record classes based upon our database
    schema. As an example, let''s create an active record instance for our `user`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to populate the `Table name` field with `user`, the name of the
    `user` table in our database. As you type, Gii will try to show you possible database
    tables that match our text entry, which can be extremely beneficial when working
    with large databases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to either press the *Tab* key on our keyboard, or focus our mouse
    onto the `Model name` field, which should autopopulate the field with `User`,
    which will be the name of the class that Gii will generate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we need to ensure that the **Generate Relations** checkbox is selected.
    This will automatically add the required code to our class in order to generate
    our model relations for the `Post` and `Role` classes, which we'll create in the
    next section. After checking this box, our form should be filled as follows:![Using
    Gii's web interface](img/00025.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we can click on the **Preview** button at the bottom of the page, which
    will enable us to preview the code that Gii will generate for us before we confirm
    the creation of our class.![Using Gii's web interface](img/00026.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we preview the class, we can click on the **Generate** button to generate
    our `User` class, which will be located at `models/User.php`.![Using Gii's web
    interface](img/00027.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to create new classes for us, the web user that our server is running
    under needs write access to our `models/` directory. If Gii returns an error indicating
    it cannot write to the `models/` directory, you''ll need to adjust the permissions
    on the directory. In our Linux environment, this can be done by adding the `www-data`
    group to the folder and adjusting the permissions so that the user can write to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As an alternative, you can use the `chmod` tool to adjust the permissions in
    the `models/` directory to `777`. Just ensure that you readjust the permissions
    to something more reasonable after using Gii to create the model.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Gii is configured to add new models to the `models/` folder in our
    application and create the models under the `app/models` namespace. Additionally,
    the `yii/db/ActiveRecord` class is configured to automatically use the `db` component
    of our application. All of these fields are configurable within the Gii web interface
    for us to change.
  prefs: []
  type: TYPE_NORMAL
- en: Using Gii's console interface
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As an alternative to Gii''s web interface, Gii can generate Active Record classes
    from the command line. When running Gii from the command line, we simply need
    to provide two attributes: the table name that we are working with and the name
    of the model. This takes the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, we can create a class for our post table by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Using Gii''s console interface](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'While we''re here, let''s also create a class for our `role` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Working with Active Record
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our models have been generated, let''s take a look at what Gii actually
    wrote to the disk. We''ll start by opening up `models/User.php`, which should
    be identical to the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Model validation rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first section we should notice in our generated active record class is
    the `rules()` method, which Gii generated for us. Since `yii/db/ActiveRecord`
    extends `yii/base/Model`, it inherits all the validation logic and tools that
    `yii/base/Model` has:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When Gii created our model, it scanned our database schema to determine any
    necessary validation rules it thought we would need to have by default. As shown
    in the previous code block, it has marked both the `email` and `password` attributes
    as `required` and the `email` field as `unique`, and it has correctly identified
    the appropriate data types for our name fields as well as timestamps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `rules()` method in Yii consists of an array of validation rules that take
    the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A complete list of built-in validators can be found in the Yii2 guide at [http://www.yiiframework.com/doc-2.0/guide-tutorial-core-validators.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-core-validators.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom validators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the many built-in core validators Yii2 has, we may need to write
    our own custom validators for our classes. Custom validators can either be written
    inline using anonymous functions, or they can be written as a separate method
    within our class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, suppose we only want to permit changes to our user information
    between certain core hours of our business. As an anonymous function, this can
    be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can write this as a separate method by providing a name for
    our validator and then use that name as a method within our class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, custom validators can be written by creating and extending the
    `yii\validators\Validator` class and implementing the `validateAttribute($model,
    $attribute)` method within that class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Customizing validator error messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nearly all validators in Yii2 come with built-in error messages. However, if
    we want to alter the error message for a certain property, we can do that by specifying
    the message parameter for a specific validator. For instance, we can adjust the
    error message for our unique validator by changing the last line of our validator
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Working with validation errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Yii2 provides several ways to interact with and customize errors as and when
    they happen. As you may have noticed in the previous example, we can use the `yii/base/Model`
    method and `addError()` to add new errors to our model attributes during our workflow.
    As shown in the previous example, this takes the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we can use the `getError()` method to retrieve either all the
    errors for our model or just the errors for a particular attribute. This method
    will return an array of errors containing an array of error messages applicable
    for each attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Manually executing validation rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Yii2, validation rules are executed when the `validate()` method on `yii/db/ActiveRecord`
    is called. While this can be done manually in our controller, it is typically
    executed before the `save()` method is executed. The validator method will return
    either `true` or `false`, indicating whether the validation was successful or
    not.
  prefs: []
  type: TYPE_NORMAL
- en: The `validate()` method can also be extended by either overriding the `beforeValidate()`
    and `afterValidate()` methods or by listening to the `yii\base\Model::EVENT_BEFORE_VALIDATE`
    or `yii\base\Model::EVENT_AFTER_VALIDATE` events.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll cover events in more detail in [Chapter 8](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 8. Routing, Responses, and Events"), *Routing, Responses, and Events*.
  prefs: []
  type: TYPE_NORMAL
- en: Model attribute labels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next method that Gii automatically implements for us is the `attributeLabels()`
    method. The `attributesLabels()` method enables us to name our model attributes
    with more descriptive names that we can use as form labels. By default, Gii will
    automatically generate labels for us based upon our column names. Furthermore,
    by following the convention of using underscores in our column names in our `user`
    table, Gii has automatically created titleized and readable attribute labels for
    us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Since our `attributeLabels()` method just returns an array of key-value pairs,
    we can enhance our application by translating our attribute labels into multiple
    languages using the `\Yii::t()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming that our application was properly configured to use translations,
    we can fetch the translated text for our attribute labels using the `getAttributeLabel()`
    method for our `email` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If our application was configured for the English locale, it would simply return
    the string `"Email"`; however, if our application was running in a different language,
    say Spanish, this method would return the string `"Correo"` instead of `"Email"`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll cover the `Yii::t()` method as well as general internationalization and
    localization in [Chapter 11](part0068_split_000.html#20R681-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 11. Internationalization and Localization"), *Internationalization and
    Localization*.
  prefs: []
  type: TYPE_NORMAL
- en: Active Record relationships
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Assuming that we configured our database schema properly with primary and foreign
    keys, Yii2 will also generate model relationships for us. Unlike Yii1, Yii2 has
    done away with the `relations()` methods and replaced them with magic `__getter()`
    methods. Our `User` model illustrates this for the `Post` and `Role` relationships:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Yii2 also simplified the relationships method, and now, it only supports two
    types of relationships: has-one, as used by the `hasOne()` method, and has-many,
    as defined by the `hasMany()` method. Like Yii1, though, related data can be accessed
    simply by calling the `__getter()` method. For instance, if we want to retrieve
    the name of the role for a user we are working with, we can simply execute the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gii makes several inferences based upon your database schema to create model
    relationships. Check whether your relationships map to the correct classes and
    have the correct relationship types before executing your code.
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple database connections with Active Record
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, all active record instances will use the `db` component to connect
    to our database. In the instance where we have multiple databases connected to
    our application, we can configure active record to work with an alternate database
    by defining the static method `getDb()` within our Active Record class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Behaviors in Active Record
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii2 supports several behaviors, which can be used to automatically handle some
    of the more tedious tasks of model management, such as managing the created and
    updated times, automatically creating URL slugs for our application, and logging
    which user created and modified a specific record.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a behavior with an Active Record class in Yii2, we simply need to specify
    that we want to use the behavior class at the top of our PHP file and then add
    the behavior to the `behaviors()` method of our model. For instance, since both
    our `User` and `Post` classes have the `created_at` and `updated_at` attributes,
    we can add the following to let Yii2 manage these attributes for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the `yii\behaviors\TimestampBehavior` class will populate the `created_at`
    and `updated_at` attributes with the current time, as extracted from the native
    PHP `time()` function. Like most things in Yii2, this is completely configurable.
    For instance, if our database has created and updated fields that use the MySQL
    `TIMESTAMP` column type, we can adjust the behavior as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on behaviors can be found from the Yii2 guide located at [http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html).
  prefs: []
  type: TYPE_NORMAL
- en: Working with Active Record
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have learned what Gii automatically provides for us when creating
    new Active Record classes and what additional options we can add to our classes
    to enhance them, let's take a look at how we can use active record instances to
    perform basic create, read, update, and delete (CRUD) actions.
  prefs: []
  type: TYPE_NORMAL
- en: Querying data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To query data with Active Record, we can query for data using the `yii/db/ActiveRecord::find()`
    method, which will return an instance of `yii/db/ActiveQuery`. Since `yii/db/ActiveQuery`
    extends `yii/db/Query`, we can take advantage of nearly all the methods and query
    objects we learned in [Chapter 3](part0023_split_000.html#LTSU1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 3. Migrations, DAO, and Query Building"), *Migrations, DAO, and Query
    Building*. Let's take a look at several different examples of using the `yii/db/ActiveRecord::find()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'As an alternative to `yii/db/ActiveQuery`, `yii/db/ActiveRecord` also provides
    two additional methods to query for data, `findOne()`, which will return the first
    Active Record instance from a query, and `findAll()`, which will return an array
    of Active Record instances. Both methods accept a scalar argument, an array of
    scalar arguments, or an array of associative pairs to query data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `yii/db/ActiveRecord::findOne()` method will not add `LIMIT 1` to the generated
    SQL query, which may result in longer running queries as `yii/db/ActiveRecord::findOne()`
    will simply fetch the first row from the query result. If you encounter performance
    issues using `yii/db/ActiveRecord::findOne()`, try to use the `yii/db/Activequery::find()`
    method paired with the `limit()` and `one()` methods instead, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `yii/db/ActiveQuery` can be extremely memory-intensive at times, depending
    upon how many records are being accessed. One way to get around this limitation
    is to convert our resulting data into an array format using the `asArray()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Rather than returning an array of Active Record instances, the `asArray()` method
    will return an array of arrays containing Active Record data attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the `asArray()` method can be used to increase the performance of large
    queries, it has several downsides. The data returned will not be an instance of
    Active Record, and thus, it will not have any of the methods or helpful attributes
    associated with it. Moreover, since data is being returned directly from PDO,
    the data will not be typecast automatically and will be returned as a string instead.
  prefs: []
  type: TYPE_NORMAL
- en: Data access
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When using Active Record, each row from our database query will generate a
    single Active Record instance. The column values from our Active Record instance
    can be accessed via the model attributes for that Active Record instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, relational information can be accessed through the related object''s
    attributes. For instance, to retrieve the author''s name from a given post, we
    can run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Active Record attributes are named after the column names. If having Active
    Record attributes with underscores doesn't match your coding style, you should
    rename your column names.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our data can also be manipulated by creating a custom getter and setter method
    within our Active Record class. For instance, if we want to display the user''s
    complete name without changing our database schema, we can add the following method
    to our User Active Record class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This data can then be accessed directly either through the `getFullName()`
    method or as a pseudo attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Along the same vein, we can also create custom setters. For instance, the following
    method takes the user''s complete name as input and populates the `first_name`
    and `last_name` attributes for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Our setter then enables us to treat the user''s complete name as a settable
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Saving data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once we've made changes to our Active Record instance, we can save these changes
    to our database by calling the `save()` method on our instance, which will return
    `true` if the model was successfully saved to the database, or it'll return `false`
    if there was an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If an error occurred during either the save or validation process, you can retrieve
    the errors through the `yii/db/ActiveRecord::getErrors()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we retrieved our user information from the database again, we would see
    that the results were stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Data can also be assigned in bulk through the `yii/db/ActiveRecord::load()`
    method. Typically when using the `load()` method, we'll provide data from a form
    submission, which we'll cover later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`\Yii::$app->request` represents the request object and is configured in our
    `config/web.php` file. The `post()` method represents any data submitted via a
    `POST` request.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating new records
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Creating new records in our database can be done by instantiating a new instance
    of an active record class using the `new` keyword, populating the model with data,
    and then calling the `save()` method on the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Deleting data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data can also be deleted from our database via Active Record by calling the
    `delete()` method on our model. The `delete()` method will permanently delete
    data from the database and will return `true` if the deletion was successful or
    `false` if an error occurred.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiple data rows can be deleted by calling the `yii/db/ActiveRecord::deleteAll()`
    static method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when using the `deleteAll()` method as it will permanently delete
    any data that the condition statement specifies. A mistake in the conditional
    can result in an entire table being truncated.
  prefs: []
  type: TYPE_NORMAL
- en: Active Record events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As an alternative to creating before and after method handlers such as `beforeSave()`
    and `afterDelete()`, Yii2 supports several different events that our application
    can listen to. The events that Active Record supports are outlined in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `EVENT_INIT` | An event that is triggered when an Active Record instance
    is initialized via the `init()` method |'
  prefs: []
  type: TYPE_TB
- en: '| `EVENT_BEFORE_UPDATE` | An event that is triggered before a record is updated
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EVENT_BEFORE_INSERT` | An event that is triggered before a record is inserted
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EVENT_BEFORE_DELETE` | An event that is triggered before a record is deleted
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EVENT_AFTER_UPDATE` | An event that is triggered after a record is modified
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EVENT_AFTER_INSERT` | An event that is triggered after a record is inserted
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EVENT_AFTER_DELETE` | An event that is triggered after a record is deleted
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EVENT_AFTER_FIND` | An event that is triggered after a record is created
    and populated with a query result |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll cover what exactly events are and how to use them in [Chapter 8](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 8. Routing, Responses, and Events"), *Routing, Responses, and Events*.
  prefs: []
  type: TYPE_NORMAL
- en: Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Yii1, base models and form models were two separated classes (`CModel` and
    `CFormModel`). In Yii2, these two classes have been consolidated into a single
    class, `yii/base/Model`. This class is used throughout Yii2 for data representation
    and should be our go-to class when representing data we can't represent with `yii/db/ActiveRecord`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since `yii/db/ActiveRecord` extends `yii/base/Model`, we're already familiar
    with the majority of methods and properties that `yii/base/Model` offers, such
    as `getAttributes()`, `rules()`, `attributeLabels()`, and `getErrors()`. Refer
    to the Yii2 API documentation for a complete list of all the methods supported
    by `yii/base/Model` at [http://www.yiiframework.com/doc-2.0/yii-base-model.html](http://www.yiiframework.com/doc-2.0/yii-base-model.html).
  prefs: []
  type: TYPE_NORMAL
- en: Model attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `yii/db/ActiveRecord`, data attributes and attribute names are pulled directly
    from our database column names. In `yii/base/Model`, data attributes and attribute
    names are defined as public properties within our model class. For instance, if
    we want to create a model called `UserForm` to collect user information, we can
    write the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Unlike Active Record instances, information stored in base models is not persisted.
    Calling `unset()` on the class or creating a new instance of the class will not
    grant user the access to the data stored in other instance of the model. Since
    our model attributes are public properties of our PHP class, we can access them
    like any public property.
  prefs: []
  type: TYPE_NORMAL
- en: Scenarios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When working with models or active record classes, we may want to reuse the
    same model for different situations, such as logging in a user or registering
    a user. To help us write less code, Yii2 provides the `scenarios()` method to
    define what business logic and validation rules should be executed for each scenario.
    By default, scenarios are determined by our validation rules using the `on` property
    in our validation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This behavior can be customized by overriding the `scenarios()` method with
    our custom logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if we want to add new scenarios to our model without altering
    the current scenarios defined in our model validation rules, we can simply add
    them by fetching the classes'' parent scenarios, adding the new scenarios we want
    to add, and then returning our updated scenarios'' array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then control which scenario is active when we instantiate our model
    or when we define the scenario property of our model at runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a scenario is not specified either at runtime or during model instantiation,
    the default scenario is used. The default scenario marks all model attributes
    as active for both mass assignment and model validation.
  prefs: []
  type: TYPE_NORMAL
- en: Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Yii2, we can dynamically generate rich HTML5 forms based upon our model using
    the `yii/widgets/ActiveForm` class. The `yii/widgets/ActiveForm` class has several
    advantages over managing forms manually. In addition to providing several useful
    helper methods and pairing well with the HTML helper `yii/helpers/Html`, forms
    can be generated from the Gii tool using our model data. When working with models
    and active record instances, this is the preferred way to generate forms.
  prefs: []
  type: TYPE_NORMAL
- en: Generating forms with Gii
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like Active Record classes, forms can be generated automatically for us from
    both the web Gii tool and the console Gii tool. Let's take a look at generating
    a form for authentication, which we'll call `LoginForm`, and a form to handle
    registration, which we'll call `RegisterForm`.
  prefs: []
  type: TYPE_NORMAL
- en: Generating forms with Gii's web interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For our `LoginForm` form, let's start by opening up the Gii web tool by navigating
    to the `/gii` endpoint of our application and then clicking on the **Start** button
    underneath the **Form Generator** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating forms with Gii''s web interface](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Like our model generator, to generate a form, we only need to provide a few
    fields. For forms, we only need to know the view name (which will translate to
    the filename) and the model class. For our view name, let's use `site/forms/LoginForm`,
    and for our model class, we may want to use the `UserForm` class that we generated
    previously. Since we want to use our form just to log in, we should also specify
    that we want to use the *login* scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When specifying the model class, we need to specify both the namespace and the
    class so that Yii can find our class. For our `UserForm` class, we will need to
    provide `app\models\UserForm`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating forms with Gii''s web interface](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have specified all the necessary attributes, we can click on the **Preview**
    button to preview our form, and then we can click on the **Generate** button to
    generate the source code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating forms with Gii''s web interface](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Unlike our model generator, after the generation, our form generator will also
    provide us with a template action that we can put into our controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Generating forms with Gii's console interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As an alternative to generating forms with Gii''s web interface, we can also
    use Gii''s console interface to generate basic forms for our model class. To generate
    forms with our console interface, we can run the `gii/form` tool, as shown in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most console shells treat the backslash character as an escape character. To
    pass a backslash character to Gii, we need to escape the backslash character with
    a second backslash.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating forms with Gii''s console interface](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our resulting `RegisterForm` view will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, Gii's console interface only prompts you for the most basic information
    it needs in order to generate the class. Remember to use the `help` tool to discover
    other command-line arguments for additional customization.
  prefs: []
  type: TYPE_NORMAL
- en: Using forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve created our forms, let''s take a brief look at how exactly
    they work. As shown earlier, our `yii/widgets/ActiveForm` class expects a model
    to work with. In most cases, this is going to be defined in our controller and
    then passed down to our view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'One thing you may notice about our generated forms is that they only contain
    core form logic and don''t contain extra HTML, such as the `html`, `head`, and
    `body` tags. In Yii2, generated forms are intended to be rendered as a partial
    view rather than a complete view. Rather than specifying our form, `LoginForm`,
    directly in our controller, we will pass our model down to a parent view, which
    will then render our form. As an example, our login action within our controller
    will change to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then create a new view file at `views/site/login.php`, which will render
    our `LoginForm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unlike Yii1, Yii2 doesn''t have a `renderPartial()` method to render partial
    views. Instead, it has two separate `render()` methods: one in `yii/base/Controller`
    and another in `yii/base/View`. The `render()` method called in our previous example
    is called from `yii/base/View` and is used to render any view file whether we
    consider it a partial view or a complete view.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting view from our render chain would then look as follows if we navigate
    to the `site/login` endpoint of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using forms](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Chapter 8](part0047_split_000.html#1CQAE2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 8. Routing, Responses, and Events"), *Routing, Responses, and Events*,
    will help us gain a better understanding of how routing works in Yii2 and how
    we can easily figure out which controller actions match to which view actions.'
  prefs: []
  type: TYPE_NORMAL
- en: ActiveForm and input types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we know how to render our form, let''s break down our form view. Since
    view files and controllers are separated in Yii2, we need to first make sure that
    we use our active form class in our view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Our active form elements are then contained within a static call in the `ActiveForm`
    class to the `begin()` and `end()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, our `begin()` method will provide us with several built-in HTML
    defaults, such as an ID and class attribute. To customize these, we can provide
    an array of arguments to our `begin()` method to manually specify these attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The next item to notice about our form is that model attributes are wrapped
    within a call to `$form->field()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The `field()` method is a chainable method that specifies the `<input>` tag
    for our model attribute, adding some basic client-side validation (such as the
    `required` attribute) and populating the `form` field with data in the instance
    of a model validation error in our `POST` submission. Since the method is chainable,
    we can chain additional attributes onto our form. For instance, if we want to
    add client-side validation for our `email` field so that our browsers can verify
    our text field was an email address, we can chain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: In addition to our required validator, our view now verifies that our email
    is a valid email address.
  prefs: []
  type: TYPE_NORMAL
- en: '![ActiveForm and input types](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Likewise, we can customize our `password` field to obstruct our password by
    specifying that the field should be a password input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'With `ActiveForm`, we can also add an inline hint or modify the label for any
    attribute using the `hint()` method and the `label()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '![ActiveForm and input types](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the `$form` property is an instance of `yii/widgets/ActiveForm`, the `field()`
    method returns an instance of `yii/widgets/ActiveField`. For a list of all the
    available methods and options for `yii/widgets/ActiveField`, refer to the Yii2
    documentation at [http://www.yiiframework.com/doc-2.0/yii-widgets-activefield.html](http://www.yiiframework.com/doc-2.0/yii-widgets-activefield.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of information in this chapter! We covered how to properly
    set up and configure Gii, the code generation tool for Yii2\. We then covered
    how we can automatically create Active Record classes based upon our database
    schema using both the web and console interface for Gii in addition to many of
    the common methods and properties we can bind to our Active Record classes, such
    as validation rules, attribute labels, and behaviors. Next, we covered how to
    create basic models that do not depend upon our database and how to add scenarios
    to our models and Active Record classes. We finally covered how we can use the
    Gii tool to create HTML forms based upon our models and explored some of the functionality
    that comes with the `ActiveForm` class.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to expand our knowledge of the available helpers
    and widgets that come with Yii2\. We will also dive into modules in Yii2 and explore
    how we can use them to create reusable self-contained applications that we will
    keep building upon throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: As we move forward, we are going to build upon much of the knowledge we have
    gained thus far. Before moving forward, ensure that you review the classes and
    information we have learned about.
  prefs: []
  type: TYPE_NORMAL
