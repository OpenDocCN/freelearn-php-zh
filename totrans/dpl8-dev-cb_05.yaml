- en: Frontend for the Win
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the world of frontend development in Drupal
    8\. In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme based on Classy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the new asset management system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twig templating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Breakpoint module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Responsive Image module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 brought many changes with regard to the frontend. It is now focused
    on mobile-first responsive design. Frontend performance has been given a high
    priority, unlike in the previous versions of Drupal. There is a new asset management
    system based on libraries that will deliver only the minimum required assets for
    a page that comes with Drupal 8.
  prefs: []
  type: TYPE_NORMAL
- en: In Drupal 8, we have a new feature, the Twig templating engine, that replaces
    the previously used PHPTemplate engine. Twig is part of the large PHP community
    and embraces more of Drupal 8's *made elsewhere* initiative. Drupal 7 supported
    libraries to define JavaScript and CSS resources. However, it was very rudimentary
    and did not support the concept of library dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: There are two modules provided by the Drupal core that implement the responsive
    design with server-side components. The Breakpoint module provides a representation
    of media queries that modules can utilize. The Responsive Image module implements
    the HTML5 picture tag for image fields.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter dives into harnessing Drupal 8's frontend features to get the most
    out of them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme based on Classy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 ships with a new base theme that is intended to demonstrate best practice
    and CSS class management. The Classy theme is provided by the Drupal core and
    is the base theme for the default frontend theme, Bartik, and the administrative
    theme, Seven.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the previous versions of Drupal, Drupal 8 provides two base themes--Classy
    and Stable--to jump start Drupal theming. Stable provides a leaner approach to
    frontend theming with fewer classes and wrapping elements and is guaranteed to
    not introduce changes that may disrupt your child theme. In this recipe, we will
    create a new theme called `mytheme` that uses Classy as its base.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the root directory of your Drupal site, create a folder called `mytheme`
    in the `themes` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `mytheme` folder, create a `mytheme.info.yml` file so that Drupal
    can discover the `theme`. We will then edit this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31ad8eef-a265-4180-8da8-bf1479b9cdf4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we will need to define the `themes` name using the `name` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'All the themes need to provide a `description` key, that will be displayed
    on the Appearance page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need to define the type of extension, that is, a theme and the
    version of core that is supported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `base theme` call allows us to instruct Drupal to use a specific theme
    as a base:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The final item is a `regions` key that is used to define the regions of the
    blocks that can be placed, which is a YAML-based array of key/value pairs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Regions are rendered in the page `template` file, which will be covered in the
    next recipe, *Twig templates*.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Drupal site, and go to Appearance from the administrative toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Install and set default in the My theme entry to enable and use the
    new custom theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a1f5947-7ce8-4c93-9e80-daaafbaa253f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Drupal 8, the `info.yml` files define Drupal themes and modules. The first
    step to create a theme is to provide the `info.yml` file so that the theme can
    be discovered. Drupal will parse these values and register the theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following keys are required, as a minimum, when you define a theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base theme`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `name` key defines the human-readable name of the theme that will be displayed
    on the Appearance page. The description will be shown under the themes display
    name on the Appearance page. All Drupal projects need to define the `type` key
    to indicate the kind of extension that is being defined. For themes, the type
    must always be `theme`. You will also need to define which version of Drupal the
    project is compatible with using the core value. All Drupal 8 projects will use
    the `core: 8.x` value. When you define a theme, you will also need to provide
    the base `theme` key. If your theme does not use a base theme, then you need to
    set the value to `false`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `libraries` and `region` keys are optional, but these are keys that most
    themes provide. Drupal's asset management system parses a theme's `info.yml` and
    adds those libraries, if required. Regions are defined in an `info.yml` file and
    provide the areas into which the Block module may place blocks.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will dive into additional information on themes.
  prefs: []
  type: TYPE_NORMAL
- en: Theme screenshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Themes can provide a screenshot that shows up on the Appearance page. A theme's
    screenshot can be provided by placing a `screenshot.png` image file in the `theme`
    folder or a file specified in the `info.yml` file under the `screenshot` key.
  prefs: []
  type: TYPE_NORMAL
- en: If the screenshot is missing, a `default` is used, as seen with the Classy and
    Stark themes. Generally, a screenshot is a Drupal site with generic content using
    the theme.
  prefs: []
  type: TYPE_NORMAL
- en: Themes, logos, and favicons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal controls the site's favicon and logo settings as a theme setting. Theme
    settings are active on a theme-by-theme basis and are not global. Themes can provide
    a default logo by providing `logo.svg` in the `theme` root folder. A `favicon.ico`
    placed in a `theme` folder will also be the default value of the `favicon` for
    the website.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there is no way to specify a logo of a different file type for a
    theme. Previous versions of Drupal looked for `logo.png`. A feature has been planned
    for Drupal 8.5 to allow the `themes` to define the logo's filename and extension.
    Refer to the core issue for more information at [https://www.drupal.org/node/1507896](https://www.drupal.org/node/1507896).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change the site''s logo and favicon by navigating to Appearance and
    then clicking on Settings for your current theme. Unchecking the use default checkboxes
    for the favicon and logo settings allows you to provide custom files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb646694-4b53-4ba0-86cc-2f2d14fdca9b.png)'
  prefs: []
  type: TYPE_IMG
- en: Base themes and shared resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many content management systems that have a theme system which supports base
    (or parent) themes differ mostly in the terminology used. The concept of a base
    theme is used to provide established resources that are shared, reducing the amount
    of work required to create a new theme.
  prefs: []
  type: TYPE_NORMAL
- en: All libraries defined in the base theme will be inherited and used by default,
    allowing subthemes to reuse existing styles and JavaScript. This allows frontend
    developers to reuse their work and only create specific changes that are required
    for the subtheme.
  prefs: []
  type: TYPE_NORMAL
- en: The subthemes will also inherit all Twig template overrides provided by the
    base theme. This was one of the initiatives used for the creation of the Classy
    theme. Drupal 8 makes many fewer assumptions compared to the previous version
    as to what class names to provide on elements. Classy overrides all the core's
    templates and provides sensible default classes, giving themes the ability to
    use them and accept those class names or be given a blank slate.
  prefs: []
  type: TYPE_NORMAL
- en: CKEditor style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in [*Chapter 2*](953ad256-0342-45c8-84d9-5cda80d2d099.xhtml), *The
    Content Authoring Experience*, Drupal ships with the WYSIWYG support and CKEditor
    as the default editor. The CKEditor module will inspect the active theme and its
    base theme, if provided, and load any style sheets defined in the `ckeditor_stylesheets`
    key as an array of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code can be found in `bartik.info.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This allows themes to provide style sheets that will style elements within the
    CKEditor module to enhance the *what you see is what you get* experience of the
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To define a theme with an `info.yml` file, refer to [https://www.drupal.org/node/2349827](https://www.drupal.org/node/2349827)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use Classy as a base theme, refer to the community documentation at [https://www.drupal.org/theme-guide/8/classy](https://www.drupal.org/theme-guide/8/classy)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to Core themes documentation at [https://www.drupal.org/docs/8/core/themes](https://www.drupal.org/docs/8/core/themes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a Drupal 8 subtheme, refer to the community documentation at [https://www.drupal.org/node/2165673](https://www.drupal.org/node/2165673)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the new asset management system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The asset management system is the most recent one to Drupal 8\. The asset management
    system allows modules and themes to register libraries. Libraries define CSS style
    sheets and JavaScript files that need to be loaded with the page. Drupal 8 takes
    this approach for the frontend performance. Rather than loading all CSS or JavaScript
    assets, only those required for the current page in the specified libraries will
    be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will define a `libraries.yml` file that will define a CSS
    style sheet and JavaScript file provided by a custom theme.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have created a custom theme, such as the one you
    created in the first recipe. When you see `mytheme` in this recipe, use the machine
    name of the theme that you created.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a folder named `css` in your theme's base directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your `css` folder, add a `style.css` file that will hold the theme''s CSS
    declarations. For the purpose of demonstration, add the following CSS declaration
    to `style.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then, create a `js` folder in your theme's directory and add a `scripts.js`
    file that will hold the theme's JavaScript items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your theme folder, create a `mytheme.libraries.yml` file, as shown in the
    following screenshot:![](img/5b3e3c44-541a-4a36-ba9c-9b81e2d511c1.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `mytheme.libraries.yml` file. Add the following `YAML` text to define
    the `global-styling` library for your theme that will load the CSS and JavaScript
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding text tells Drupal that there is a `global-styling` library. You
    can specify a library version and use the `VERSION` defaults for your themes.
    It also defines the `css/styles.css` style sheet as part of the library under
    the `theme` group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit your `mytheme.info.yml`, and add the declaration to your `global-styling`
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Themes can specify a `libraries` key that defines the libraries that should
    always be loaded. This `YAML` array lists libraries to be loaded for each page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Configuration and then to Performance under the DEVELOPMENT section to
    rebuild Drupal's caches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your theme set to the default, navigate to your Drupal site's home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your theme''s `global-styling` library will be loaded, and the page''s background
    color will be styled appropriately:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0cea031b-c85d-4c20-8719-1031c5eb9063.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal aggregates all the available `library.yml` files and passes them to the
    `library.discovery.parser` service. The `default` class for this service provider
    is `\Drupal\Core\Asset\LibraryDiscoveryParser`. This service reads the library
    definition from each `library.yml` and returns its value to the system. Before
    parsing the file, the parser allows themes to provide overrides and extensions
    to the library.
  prefs: []
  type: TYPE_NORMAL
- en: Libraries are enqueuers, as they are attached to rendered elements. Themes can
    generically add libraries through their `info.yml` files via the `libraries` key.
    These libraries will always be loaded on the page when the theme is active.
  prefs: []
  type: TYPE_NORMAL
- en: CSS style sheets are added to the data that will build the head tag of the page.
    JavaScript resources, by default, are rendered in the footer of the page for performance
    reasons.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will explore the options surrounding libraries in Drupal 8 in more detail
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: CSS groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With libraries, you can specify CSS by different groups. Drupal''s asset management
    system provides the following CSS groups:'
  prefs: []
  type: TYPE_NORMAL
- en: Base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style sheets are loaded in the order in which the groups are listed. Each one
    of them relates to a PHP constant defined in `/core/includes/common.inc`. This
    allows separation of concerns when working with style sheets. Drupal 8's CSS architecture
    borrows concepts from the **Scalable and Modular Architecture for CSS** (**SMACSS**)
    system to organize CSS declarations. You can learn more about this technique for
    building flexible and scalable CSS style sheets at [https://smacss.com/](https://smacss.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Library asset options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Library assets can have configuration data attached to them. If there are no
    configuration items provided, a simple set of empty brackets is added. Therefore,
    in each example, lines end with `{}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example, taken from `core.libraries.yml`, adds `HTML5shiv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the attributes of `html5shiv.min.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `weight` key ensures that the script is rendered earlier than other libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `browser` tag allows you to specify conditional rules to load the scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should always pass `minified` as `true` if the asset has already been minified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For CSS assets, you can pass a media option to specify a media query for the
    asset. Reviewing classes that implement `\Drupal\Core\Asset\AssetCollectionRendererInterface`.
  prefs: []
  type: TYPE_NORMAL
- en: Library dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Libraries can specify other libraries as dependencies. This allows Drupal to
    provide a minimum footprint on the frontend performance.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery is only loaded if a JavaScript library specifies it as a dependency;
    for more information on library dependencies, refer to [https://www.drupal.org/node/1541860](https://www.drupal.org/node/1541860).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example from the Quick Edit module''s `libraries.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The Quick Edit module defines *jQuery*, the *jQuery Once plugin*, *Underscore*,
    and *Backbone*, and selects other defined libraries as dependencies. Drupal will
    ensure that these are present whenever the `quickedit/quickedit` library is attached
    to a page.
  prefs: []
  type: TYPE_NORMAL
- en: A complete list of the default libraries provided by Drupal core can be found
    in `core.libraries.yml`, which is in `core/core.libraries.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding and extending other libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Themes have the ability to override libraries using the `libraries-override`
    and `libraries-extend` keys in their `info.yml`. This allows themes to easily
    customize the existing libraries without having to add the logic to conditionally
    remove or add their assets when a particular library is attached to a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `libraries-override` key can be used to replace an entire library, replace
    selected files in a library, remove an asset from a library, or disable an entire
    library. The following code will allow a theme to provide a custom jQuery UI theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The override declaration mimics the original configuration. Specifying `false`
    will remove the asset, or else a supplied path will replace that asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `libraries-extend` key can be used to load additional libraries with an
    existing library. The following code will allow a theme to associate a CSS style
    sheet with selected jQuery UI declaration overrides, without always having them
    included in the rest of the theme''s assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using a CDN or external resource as a library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Libraries also work with external resources, such as assets loaded over a CDN.
    This is done by providing a URL for the file location along with selected file
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example to add the `FontAwesome` font icon library from the `BootstrapCDN`
    provided by MaxCDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Remote libraries require additional metainformation to work properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `remote` key describes the library as using external resources. While this
    key is not validated beyond its existence, it is best to define it with the external
    resource''s primary website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Like all libraries, a version is required. This should match the version of
    the external resource being added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If a library defines the `remote` key, it also needs to define the `license`
    key. This defines the license name, the URL for the license, and checks whether
    it is GPL-compatible. If this key is not provided, a `\Drupal\Core\Asset\Extension\LibraryDefinitionMissingLicenseException`
    will be thrown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Finally, specific external resources are added as normal. Instead of providing
    a relative file path, the external URL is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating libraries from hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules have the ability to provide dynamic library definitions and alter libraries.
    A module can use the `hook_library_info()` hook to provide a library definition.
    This is not the recommended way to define a library, but it is provided for edge
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Modules do not have the ability to use `libraries-override` or `libraries-extend`,
    and need to rely on the `hook_library_info_alter()` hook. You can check out this
    hook in `core/lib/Drupal/Core/Render/theme.api.php` or at [https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_library_info_alter/8](https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_library_info_alter/8).
  prefs: []
  type: TYPE_NORMAL
- en: Placing JavaScript in the header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Drupal ensures that JavaScript is placed last on the page. This
    improves the page's load performance by allowing the critical portions of the
    page to load first. Placing JavaScript in the header is now an opt-in option.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to render a library in the header, you will need to add the `header:
    true` key/value pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will load a custom JavaScript library and its dependencies into the header
    of a page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the CSS architecture for Drupal 8: Separate concerns at [https://www.drupal.org/node/1887918#separate-concerns](https://www.drupal.org/node/1887918#separate-concerns)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on SMACSS, refer to [http://smacss.com/book/](http://smacss.com/book/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twig templating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8's theming layer is complemented by Twig, a component of the Symfony
    framework. Twig is a template language that uses a syntax similar to Django and
    Jinja templates. The preceding version of Drupal used PHPTemplate, which required
    frontend developers to have a rudimentary understanding of PHP.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will override the Twig template to provide customizations
    for the email form element. We will use the basic Twig syntax to add a new class
    and provide a default placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have already created a custom theme, such as the
    one you created in the first recipe. When you see `mythemein` in the following
    recipe, use the machine name of the theme you created.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the Classy theme does not provide a template
    suggestion for the email input nor any customization for the input template that
    differs from Drupal core.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a `templates` folder in your theme's base directory to hold your Twig
    templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To begin, you will need to copy the `input.html.twig` file from `core/themes/classy/templates/form/input.html.twig`
    to your theme's `templates` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rename the `input.html.twig` file to `input--email.html.twig` in order to use
    the proper theme hook suggestion, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b8aaf85-7a43-4539-ac62-7f7884ecc04b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use the `addClass` Twig function to add an `input__email` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Before the preceding line, we will create a Twig variable using ternary operators
    to provide a customer placeholder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This creates a new variable called `placeholder` using the set operator. The
    question mark (`?`) operator checks whether the `placeholder` property is empty
    in the `attributes` object. If it is not empty, it uses the existing value. If
    the value is empty, it provides a default value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Configuration tab and then to Performance under the DEVELOPMENT section
    to rebuild Drupal's cache. We need to do this because Drupal caches the generated
    Twig output and template overrides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New Twig template overrides provided by a theme and any changes made to a Twig
    template require a cache rebuild.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that you have used the standard Drupal install, go to the Feedback
    contact form installed at `/contact/feedback`, while logged out, and review the
    changes to the email field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97730123-1102-4190-b3d4-e253f0d36829.png)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot contains theme debug output. In the *There's more...* section
    of this chapter, we will discuss how to enable the output of theming debug comments.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal's theme system is built around hooks and hook suggestions. The element
    definition of the email input element defines the `input__email` theme hook. If
    there is no `input__email` hook implemented through a Twig template or PHP function,
    it will step down to just input.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal theme hooks are defined with underscores (`_`), but use hyphens (`-`)
    when used in Twig template files.
  prefs: []
  type: TYPE_NORMAL
- en: A processor, such as Drupal's theme layer, passes variables to Twig. Variables
    or properties of objects can be printed by wrapping the variable name with curly
    brackets. All of Drupal core's default templates provide information in the file's
    document block that details the available Twig variables.
  prefs: []
  type: TYPE_NORMAL
- en: Twig has a simplistic syntax with basic logic and functions. The `addClass`
    method will take the `attributes` variable and add the class provided in addition
    to the existing contents.
  prefs: []
  type: TYPE_NORMAL
- en: When providing a theme hook suggestion or altering an existing template, you
    will need to rebuild Drupal's cache. The compiled Twig template, as PHP, is cached
    by Drupal so that Twig does not need to compile each time the template is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will discuss more on using Twig in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Security first
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twig automatically escapes the output by default, making Drupal 8 one of the
    most secure versions yet. For Drupal 7, most security advisors were for **cross-site
    scripting** (**XSS**) vulnerabilities in contributed projects. With Drupal core,
    these security advisories should be severely reduced using Twig.
  prefs: []
  type: TYPE_NORMAL
- en: Theme hook suggestions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal utilizes theme hook suggestions for ways to allow output variations based
    on different conditions. It allows site themes to provide a more specific template
    for certain instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a theme hook has double underscores (`__`), Drupal''s theme system understands
    this, and it can break apart the theme hook to find a more generic template. For
    instance, the email element definition provides `input__email` as its theme hook.
    Drupal understands this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Look for a Twig template named `input--email.html.twig` or a theme hook that
    defines `input__email`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are not satisfied, look for a Twig template named `input.html.twig` or
    a theme hook that defines the input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theme hook suggestions can be provided by the `hook_theme_suggestions()` hook
    in a `.module` or `.theme` file.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging template file selection and hook suggestions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging can be enabled to inspect the various template files that make up
    a page and their theme hook suggestions, and check which are active. This can
    be accomplished by editing the `sites/default/services.yml` file. If a `services.yml`
    file does not exist, copy the `default.services.yml` to create one.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to change `debug: false` to `debug: true` under the `twig.config`
    section of the file. This will cause the Drupal theming layer to print out the
    source code comments containing the template information. When debug is on, Drupal
    will not cache the compiled versions of Twig templates and render them on the
    fly.'
  prefs: []
  type: TYPE_NORMAL
- en: There is another setting that prevents you from having to rebuild Drupal's cache
    on each template file change, but do not leave debug enabled. The `twig.config.auto_reload
    boolean` can be set to `true`. If this is set to `true`, the Twig templates will
    be recompiled if the source code changes.
  prefs: []
  type: TYPE_NORMAL
- en: The Twig logic and operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Twig has ternary operators for logic. Using a question mark (`?`), we can
    perform a basic *is true or not empty* operation, whereas a question mark and
    colon (`?:`) perform a basic *is false or is empty* operation.
  prefs: []
  type: TYPE_NORMAL
- en: You may also use the `if` and `else` logic to provide different outputs based
    on variables.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the Twig documentation at [http://twig.sensiolabs.org/documentation](http://twig.sensiolabs.org/documentation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the API documentation for `hook_theme_suggestions` at [https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Breakpoint module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Breakpoint module provides a method to create media query breakpoint definitions
    within Drupal. These can be used by other components, such as the responsive image
    and toolbar modules, to make Drupal responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Breakpoints are a type of plugin that can be defined in a module's or theme's
    `breakpoints.yml` in its directory. In this recipe, we will define three different
    breakpoints under a custom group.
  prefs: []
  type: TYPE_NORMAL
- en: Breakpoints are defined solely in `YAML` files from installed modules and themes
    and are not configurable through the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure that the Breakpoint module is enabled--if you have used the standard
    Drupal installation, the module is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe assumes that you have already created a custom module. When you
    see `mymodule`, use the machine name of the module that you created.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create `mymodule.breakpoints.yml` in your module's base directory. This file
    will hold the breakpoint configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Firstly, we will add a standard mobile breakpoint that does not have a media
    query, following mobile first practices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, we will create a standard breakpoint that will run on a larger viewport:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Thirdly, we will create a wide breakpoint for devices that have a large viewport:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `mymodule.breakpoints.yml` should resemble the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Go to the Configuration tab and then to Performance to rebuild Drupal's cache
    and make the system aware of the new breakpoints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Breakpoint module defines the breakpoint configuration entity. Breakpoints
    do not have any specific form of direct functionalities, beyond providing a way
    to save media queries and grouping them.
  prefs: []
  type: TYPE_NORMAL
- en: The Breakpoint module provides a default manager service. This service is used
    by other modules to discover breakpoint groups and then all of the breakpoints
    within a group.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Additional information on using the Breakpoint module will be covered in the
    upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Caveat for providing breakpoints from themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Themes have the ability to provide breakpoints; however, they cannot be automatically
    discovered if new ones are added once they have been installed. Drupal only reads
    breakpoints provided by themes when a theme is either installed or uninstalled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside `breakpoint.manager`, there are two hooks: one for the `theme install`,
    and one for the `theme uninstall`. Each hook retrieves the breakpoint manager
    service and rebuilds the breakpoint definitions. Without any extra deployment
    steps, new breakpoints added to a theme will not be discovered unless these hooks
    are fired.'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing breakpoints programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Breakpoints are utility configurations for other modules. Breakpoints can be
    loaded using the breakpoint manager service and by specifying a group. For example,
    the following code returns all breakpoints used by the Toolbar module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This code invokes the Drupal container to return the service to manage breakpoints,
    which, by default, is `\Drupal\breakpoint\BreakpointManager`. The `getBreakpointsByGroup`
    method returns all breakpoints within a group, which are initiated as the `\Drupal\breakpoint\BreakpointInterface`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: The Toolbar element class utilizes this workflow to push the breakpoint media
    query values as JavaScript settings for the JavaScript model to interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Multipliers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The multipliers value is used to support pixel resolution multipliers. This
    multiplier is used in coordination with *retina* displays. It is a measure of
    the viewport''s device resolution as a ratio of the device''s physical size and
    independent pixel size. The following is an example of standard multipliers:'
  prefs: []
  type: TYPE_NORMAL
- en: 1x is normal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5x supports Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2x supports Mac retina devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with breakpoints in Drupal 8, refer to the community documentation at
    [https://www.drupal.org/documentation/modules/breakpoint](https://www.drupal.org/documentation/modules/breakpoint)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Responsive Image module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Responsive Image module provides a field formatter for image fields that
    use the HTML5 picture tag and source sets. Utilizing the Breakpoint module, mappings
    to breakpoints are made to denote an image style to be used at each breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: The responsive image field formatter works with using a defined responsive image
    style. Responsive image styles are configurations that map image formats to specific
    breakpoints and modifiers. First, you will need to define a responsive image style,
    and then you can apply it to an image field.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a responsive image style set called `Article
    image` and apply it to the `Article` content type's image field.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to enable the `Responsive Image` module, as it is not automatically
    enabled with the standard installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Configuration and then to Responsive image styles under the MEDIA section.
    Click on Add responsive image style to create a new style set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a label that will be used to administratively identify the Responsive
    image style set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a breakpoint group that will be used as a source of breakpoints to define
    the image style map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each breakpoint will have a `fieldset`. Expand the `fieldset` and choose Select
    a single image style, and then, pick an appropriate image style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6781779-d7b6-4092-b65d-ed277fa5b03c.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, choose a fallback image style in the event of a browser that doesn't
    support source sets, such as Internet Explorer 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Save to save the configuration, and add the new style set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34d61df5-0fcc-4173-ab4a-b486c485a786.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to Structure and Content types and select Manage Display from the Article
    content type's drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Image field's formatter to Responsive image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Settings tab of the field formatter to choose your new Responsive
    image style set. Select Article image from the Responsive image style dropdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0da6556d-b8aa-43f3-b4fe-1970272e97fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Update to save the field formatter settings, and then click on Save
    to save the field display settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Responsive image style provides three components: a responsive image element,
    the responsive image style configuration entity, and the responsive image field
    formatter. The configuration entity is consumed by the field formatter and displayed
    through the responsive image element.'
  prefs: []
  type: TYPE_NORMAL
- en: The responsive image style entity contains an array of breakpoints to image
    style mappings. The available breakpoints are defined by the selected breakpoint
    groups. Breakpoint groups can be changed anytime; however, the previous mappings
    will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: The responsive image element prints a `picture` element with each breakpoint,
    defining a new `source` element. The breakpoint's media query value is provided
    as the `media` attribute for the element.
  prefs: []
  type: TYPE_NORMAL
- en: For Internet Explorer 9, Drupal 8 ships with the `picturefill` polyfill. Internet
    Explorer 9 does not recognize source elements wrapped by a `picture` element.
    The polyfill wraps the sources around a video element within the `picture` element.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following sections, we will discuss the responsive image field in more
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Performance first delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A benefit of using the responsive image formatter is performance. Browsers will
    only download the resources defined in the `srcset` of the appropriate `source`
    tag. This not only allows you to deliver a more appropriate image size, but also
    carries a smaller payload on smaller devices.
  prefs: []
  type: TYPE_NORMAL
- en: Removing picturefill polyfill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Responsive Image module attaches the `picturefill` library to the responsive
    image element definition. The element's template also provides HTML to implement
    the polyfill. The polyfill can be removed by overriding the element's template
    and overriding the `picturefill` library to be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet, when added to a theme''s `info.yml`, will disable the
    `picturefill` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the `responsive-image.html.twig` must be overridden by the theme to remove
    the extra HTML generated in the template for the polyfill:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy `responsive-image.html.twig` from `core/modules/responsive_image/templates`
    to the `theme` templates folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit `responsive-image.html.twig` and delete the Twig comment and IE conditional
    to output the initial video tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the last conditional, that provides the closing video tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the picture element on the **Mozilla Developer Network** (**MDN**)
    at [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to `picturefill` for IE9 at [http://scottjehl.github.io/picturefill/#ie9](http://scottjehl.github.io/picturefill/#ie9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
