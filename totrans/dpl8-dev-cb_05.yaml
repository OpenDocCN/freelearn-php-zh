- en: Frontend for the Win
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端为王
- en: 'In this chapter, we will explore the world of frontend development in Drupal
    8\. In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索Drupal 8的前端开发世界。在本章中，我们将涵盖以下食谱：
- en: Creating a custom theme based on Classy
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Classy创建自定义主题
- en: Using the new asset management system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的资产管理系统
- en: Twig templating
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twig模板
- en: Using the Breakpoint module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Breakpoint模块
- en: Using the Responsive Image module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Responsive Image模块
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Drupal 8 brought many changes with regard to the frontend. It is now focused
    on mobile-first responsive design. Frontend performance has been given a high
    priority, unlike in the previous versions of Drupal. There is a new asset management
    system based on libraries that will deliver only the minimum required assets for
    a page that comes with Drupal 8.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8在前端方面带来了许多变化。现在它专注于以移动端为先的响应式设计。前端性能被赋予了高优先级，与Drupal的先前版本不同。有一个基于库的新资产管理系统，将为带有Drupal
    8的页面提供所需的最小资产。
- en: In Drupal 8, we have a new feature, the Twig templating engine, that replaces
    the previously used PHPTemplate engine. Twig is part of the large PHP community
    and embraces more of Drupal 8's *made elsewhere* initiative. Drupal 7 supported
    libraries to define JavaScript and CSS resources. However, it was very rudimentary
    and did not support the concept of library dependencies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 8中，我们有一个新特性，即Twig模板引擎，它取代了之前使用的PHPTemplate引擎。Twig是大型PHP社区的一部分，并拥抱了更多Drupal
    8的“在其他地方制作”的倡议。Drupal 7支持库来定义JavaScript和CSS资源。然而，它非常基础，并且不支持库依赖的概念。
- en: There are two modules provided by the Drupal core that implement the responsive
    design with server-side components. The Breakpoint module provides a representation
    of media queries that modules can utilize. The Responsive Image module implements
    the HTML5 picture tag for image fields.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal核心提供了两个模块来实现带有服务器端组件的响应式设计。Breakpoint模块提供了模块可以利用的媒体查询表示。Responsive Image模块实现了HTML5的`<picture>`标签，用于图像字段。
- en: This chapter dives into harnessing Drupal 8's frontend features to get the most
    out of them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨如何利用Drupal 8的前端特性以获得最佳效果。
- en: Creating a custom theme based on Classy
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于Classy创建自定义主题
- en: Drupal 8 ships with a new base theme that is intended to demonstrate best practice
    and CSS class management. The Classy theme is provided by the Drupal core and
    is the base theme for the default frontend theme, Bartik, and the administrative
    theme, Seven.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8附带了一个新的基础主题，旨在展示最佳实践和CSS类管理。Classy主题由Drupal核心提供，是默认前端主题Bartik和管理主题Seven的基础主题。
- en: Unlike the previous versions of Drupal, Drupal 8 provides two base themes--Classy
    and Stable--to jump start Drupal theming. Stable provides a leaner approach to
    frontend theming with fewer classes and wrapping elements and is guaranteed to
    not introduce changes that may disrupt your child theme. In this recipe, we will
    create a new theme called `mytheme` that uses Classy as its base.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与Drupal的先前版本不同，Drupal 8提供了两个基础主题--Classy和Stable--以快速启动Drupal主题开发。Stable提供了一个更精简的前端主题方法，具有更少的类和包装元素，并保证不会引入可能破坏子主题的更改。在本食谱中，我们将创建一个名为`mytheme`的新主题，其基础为Classy。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In the root directory of your Drupal site, create a folder called `mytheme`
    in the `themes` folder.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Drupal站点根目录中，在`themes`文件夹内创建一个名为`mytheme`的文件夹。
- en: 'Inside the `mytheme` folder, create a `mytheme.info.yml` file so that Drupal
    can discover the `theme`. We will then edit this file:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mytheme`文件夹内，创建一个`mytheme.info.yml`文件，以便Drupal能够发现`主题`。然后我们将编辑此文件：
- en: '![](img/31ad8eef-a265-4180-8da8-bf1479b9cdf4.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/31ad8eef-a265-4180-8da8-bf1479b9cdf4.png)'
- en: 'First, we will need to define the `themes` name using the `name` key:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`name`键定义`themes`名称：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'All the themes need to provide a `description` key, that will be displayed
    on the Appearance page:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有主题都需要提供一个`description`键，该键将在外观页面上显示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we will need to define the type of extension, that is, a theme and the
    version of core that is supported:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义扩展的类型，即主题和核心版本的支持：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `base theme` call allows us to instruct Drupal to use a specific theme
    as a base:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`base theme`调用允许我们指示Drupal使用特定的主题作为基础：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The final item is a `regions` key that is used to define the regions of the
    blocks that can be placed, which is a YAML-based array of key/value pairs:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个项目是一个`regions`键，用于定义可以放置的块区域，这是一个基于YAML的键值对数组：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Regions are rendered in the page `template` file, which will be covered in the
    next recipe, *Twig templates*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 区域在页面 `template` 文件中渲染，这将在下一节中介绍，*Twig模板*。
- en: Log in to your Drupal site, and go to Appearance from the administrative toolbar.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的Drupal网站，并从管理工具栏转到“外观”。
- en: 'Click on Install and set default in the My theme entry to enable and use the
    new custom theme:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“我的主题”条目中点击“安装”并设置默认值以启用和使用新的自定义主题：
- en: '![](img/0a1f5947-7ce8-4c93-9e80-daaafbaa253f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a1f5947-7ce8-4c93-9e80-daaafbaa253f.png)'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In Drupal 8, the `info.yml` files define Drupal themes and modules. The first
    step to create a theme is to provide the `info.yml` file so that the theme can
    be discovered. Drupal will parse these values and register the theme.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 8中，`info.yml` 文件定义Drupal主题和模块。创建主题的第一步是提供 `info.yml` 文件，以便主题可以被发现。Drupal将解析这些值并注册主题。
- en: 'The following keys are required, as a minimum, when you define a theme:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你定义一个主题时，以下键是必需的，至少需要这些键：
- en: '`name`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`'
- en: '`description`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`'
- en: '`type`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`'
- en: '`base theme`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base theme`'
- en: '`core`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core`'
- en: 'The `name` key defines the human-readable name of the theme that will be displayed
    on the Appearance page. The description will be shown under the themes display
    name on the Appearance page. All Drupal projects need to define the `type` key
    to indicate the kind of extension that is being defined. For themes, the type
    must always be `theme`. You will also need to define which version of Drupal the
    project is compatible with using the core value. All Drupal 8 projects will use
    the `core: 8.x` value. When you define a theme, you will also need to provide
    the base `theme` key. If your theme does not use a base theme, then you need to
    set the value to `false`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`name` 键定义了将在外观页面上显示的主题的易读名称。描述将在外观页面的主题显示名称下方显示。所有Drupal项目都需要定义 `type` 键以指示正在定义的扩展类型。对于主题，类型必须始终是
    `theme`。你还需要定义项目兼容的Drupal版本，使用 `core` 值。当你定义一个主题时，你还需要提供基本的 `theme` 键。如果你的主题不使用基本主题，则需要将值设置为
    `false`。'
- en: The `libraries` and `region` keys are optional, but these are keys that most
    themes provide. Drupal's asset management system parses a theme's `info.yml` and
    adds those libraries, if required. Regions are defined in an `info.yml` file and
    provide the areas into which the Block module may place blocks.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`libraries` 和 `region` 键是可选的，但这是大多数主题提供的键。Drupal的资产管理系统解析主题的 `info.yml` 文件，并在需要时添加这些库。区域在
    `info.yml` 文件中定义，并为块模块提供放置块的区域。'
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Next, we will dive into additional information on themes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入了解主题的附加信息。
- en: Theme screenshots
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题截图
- en: Themes can provide a screenshot that shows up on the Appearance page. A theme's
    screenshot can be provided by placing a `screenshot.png` image file in the `theme`
    folder or a file specified in the `info.yml` file under the `screenshot` key.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 主题可以提供一个在“外观”页面上显示的截图。可以将一个 `screenshot.png` 图片文件放置在 `theme` 文件夹中，或者在一个 `info.yml`
    文件中指定 `screenshot` 键下的文件来提供主题的截图。
- en: If the screenshot is missing, a `default` is used, as seen with the Classy and
    Stark themes. Generally, a screenshot is a Drupal site with generic content using
    the theme.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果截图缺失，将使用默认值，如Classy和Stark主题所示。通常，截图是使用主题的Drupal网站，包含通用内容。
- en: Themes, logos, and favicons
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题、logo和favicon
- en: Drupal controls the site's favicon and logo settings as a theme setting. Theme
    settings are active on a theme-by-theme basis and are not global. Themes can provide
    a default logo by providing `logo.svg` in the `theme` root folder. A `favicon.ico`
    placed in a `theme` folder will also be the default value of the `favicon` for
    the website.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 通过主题设置控制网站的favicon和logo设置。主题设置按主题逐个激活，而不是全局性的。主题可以通过在 `theme` 根文件夹中提供
    `logo.svg` 来提供一个默认的logo。放置在 `theme` 文件夹中的 `favicon.ico` 也将是网站 `favicon` 的默认值。
- en: Currently, there is no way to specify a logo of a different file type for a
    theme. Previous versions of Drupal looked for `logo.png`. A feature has been planned
    for Drupal 8.5 to allow the `themes` to define the logo's filename and extension.
    Refer to the core issue for more information at [https://www.drupal.org/node/1507896](https://www.drupal.org/node/1507896).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，无法为主题指定不同文件类型的logo。Drupal的早期版本寻找 `logo.png`。Drupal 8.5计划了一个功能，允许 `themes`
    定义logo的文件名和扩展名。有关更多信息，请参阅核心问题[https://www.drupal.org/node/1507896](https://www.drupal.org/node/1507896)。
- en: 'You can change the site''s logo and favicon by navigating to Appearance and
    then clicking on Settings for your current theme. Unchecking the use default checkboxes
    for the favicon and logo settings allows you to provide custom files:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到外观并点击当前主题的设置来更改网站的标志和favicon。取消选中favicon和标志设置的默认复选框，允许您提供自定义文件：
- en: '![](img/fb646694-4b53-4ba0-86cc-2f2d14fdca9b.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fb646694-4b53-4ba0-86cc-2f2d14fdca9b.png)'
- en: Base themes and shared resources
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础主题和共享资源
- en: Many content management systems that have a theme system which supports base
    (or parent) themes differ mostly in the terminology used. The concept of a base
    theme is used to provide established resources that are shared, reducing the amount
    of work required to create a new theme.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 许多具有主题系统且支持基础（或父）主题的内容管理系统在术语使用上有所不同。基础主题的概念用于提供共享的既定资源，从而减少创建新主题所需的工作量。
- en: All libraries defined in the base theme will be inherited and used by default,
    allowing subthemes to reuse existing styles and JavaScript. This allows frontend
    developers to reuse their work and only create specific changes that are required
    for the subtheme.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础主题中定义的所有库都将默认继承并使用，允许子主题重用现有的样式和JavaScript。这允许前端开发者重用他们的工作，并且只需创建对子主题所需的特定更改。
- en: The subthemes will also inherit all Twig template overrides provided by the
    base theme. This was one of the initiatives used for the creation of the Classy
    theme. Drupal 8 makes many fewer assumptions compared to the previous version
    as to what class names to provide on elements. Classy overrides all the core's
    templates and provides sensible default classes, giving themes the ability to
    use them and accept those class names or be given a blank slate.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 子主题也将继承基础主题提供的所有Twig模板覆盖。这是创建Classy主题所使用的倡议之一。与之前的版本相比，Drupal 8对元素上应提供哪些类名做出了更少的假设。Classy覆盖了核心的所有模板，并提供了合理的默认类，使主题能够使用它们并接受这些类名或提供一个空白画布。
- en: CKEditor style sheets
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CKEditor样式表
- en: As discussed in [*Chapter 2*](953ad256-0342-45c8-84d9-5cda80d2d099.xhtml), *The
    Content Authoring Experience*, Drupal ships with the WYSIWYG support and CKEditor
    as the default editor. The CKEditor module will inspect the active theme and its
    base theme, if provided, and load any style sheets defined in the `ckeditor_stylesheets`
    key as an array of values.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如在第[*第2章*](953ad256-0342-45c8-84d9-5cda80d2d099.xhtml)“内容创作体验”中讨论的，Drupal默认配备了WYSIWYG支持和CKEditor作为默认编辑器。CKEditor模块将检查活动主题及其基础主题（如果提供），并加载在`ckeditor_stylesheets`键中定义的任何样式表作为值数组。
- en: 'For example, the following code can be found in `bartik.info.yml`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码可以在`bartik.info.yml`中找到：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This allows themes to provide style sheets that will style elements within the
    CKEditor module to enhance the *what you see is what you get* experience of the
    editor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许主题提供样式表，以美化CKEditor模块内的元素，从而增强编辑器的“所见即所得”体验。
- en: See also
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考信息
- en: To define a theme with an `info.yml` file, refer to [https://www.drupal.org/node/2349827](https://www.drupal.org/node/2349827)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用`info.yml`文件定义主题，请参阅[https://www.drupal.org/node/2349827](https://www.drupal.org/node/2349827)
- en: To use Classy as a base theme, refer to the community documentation at [https://www.drupal.org/theme-guide/8/classy](https://www.drupal.org/theme-guide/8/classy)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用Classy作为基础主题，请参阅社区文档[https://www.drupal.org/theme-guide/8/classy](https://www.drupal.org/theme-guide/8/classy)
- en: Refer to Core themes documentation at [https://www.drupal.org/docs/8/core/themes](https://www.drupal.org/docs/8/core/themes)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅核心主题文档[https://www.drupal.org/docs/8/core/themes](https://www.drupal.org/docs/8/core/themes)
- en: To create a Drupal 8 subtheme, refer to the community documentation at [https://www.drupal.org/node/2165673](https://www.drupal.org/node/2165673)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建Drupal 8子主题，请参阅社区文档[https://www.drupal.org/node/2165673](https://www.drupal.org/node/2165673)
- en: Using the new asset management system
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用新的资产管理系统
- en: The asset management system is the most recent one to Drupal 8\. The asset management
    system allows modules and themes to register libraries. Libraries define CSS style
    sheets and JavaScript files that need to be loaded with the page. Drupal 8 takes
    this approach for the frontend performance. Rather than loading all CSS or JavaScript
    assets, only those required for the current page in the specified libraries will
    be loaded.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 资产管理系统是最近加入Drupal 8的。资产管理系统允许模块和主题注册库。库定义了需要与页面一起加载的CSS样式表和JavaScript文件。Drupal
    8采用这种方法来提高前端性能。而不是加载所有CSS或JavaScript资产，只有指定库中当前页面所需的那些资产会被加载。
- en: In this recipe, we will define a `libraries.yml` file that will define a CSS
    style sheet and JavaScript file provided by a custom theme.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将定义一个 `libraries.yml` 文件，该文件将定义由自定义主题提供的 CSS 样式表和 JavaScript 文件。
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you have created a custom theme, such as the one you
    created in the first recipe. When you see `mytheme` in this recipe, use the machine
    name of the theme that you created.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经创建了一个自定义主题，例如你在第一个菜谱中创建的主题。当你在这个菜谱中看到 `mytheme` 时，请使用你创建的主题的机器名。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Create a folder named `css` in your theme's base directory.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的主题基本目录中创建一个名为 `css` 的文件夹。
- en: 'In your `css` folder, add a `style.css` file that will hold the theme''s CSS
    declarations. For the purpose of demonstration, add the following CSS declaration
    to `style.css`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `css` 文件夹中，添加一个 `style.css` 文件，该文件将包含主题的 CSS 声明。为了演示目的，将以下 CSS 声明添加到 `style.css`：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, create a `js` folder in your theme's directory and add a `scripts.js`
    file that will hold the theme's JavaScript items.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在你的主题目录中创建一个名为 `js` 的文件夹，并添加一个 `scripts.js` 文件，该文件将包含主题的 JavaScript 项目。
- en: In your theme folder, create a `mytheme.libraries.yml` file, as shown in the
    following screenshot:![](img/5b3e3c44-541a-4a36-ba9c-9b81e2d511c1.png)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的主题文件夹中，创建一个 `mytheme.libraries.yml` 文件，如下截图所示：![图片](img/5b3e3c44-541a-4a36-ba9c-9b81e2d511c1.png)
- en: 'Edit the `mytheme.libraries.yml` file. Add the following `YAML` text to define
    the `global-styling` library for your theme that will load the CSS and JavaScript
    files:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `mytheme.libraries.yml` 文件。添加以下 `YAML` 文本以定义你的主题的 `global-styling` 库，该库将加载
    CSS 和 JavaScript 文件：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding text tells Drupal that there is a `global-styling` library. You
    can specify a library version and use the `VERSION` defaults for your themes.
    It also defines the `css/styles.css` style sheet as part of the library under
    the `theme` group.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的文本告诉 Drupal 存在一个 `global-styling` 库。你可以指定库版本并使用主题的 `VERSION` 默认值。它还定义了 `css/styles.css`
    样式表作为 `theme` 组库的一部分。
- en: 'Edit your `mytheme.info.yml`, and add the declaration to your `global-styling`
    library:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `mytheme.info.yml`，并向你的 `global-styling` 库添加声明：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Themes can specify a `libraries` key that defines the libraries that should
    always be loaded. This `YAML` array lists libraries to be loaded for each page.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主题可以指定一个 `libraries` 键来定义应该始终加载的库。此 `YAML` 数组列出了为每个页面加载的库。
- en: Go to Configuration and then to Performance under the DEVELOPMENT section to
    rebuild Drupal's caches.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往配置，然后在开发部分下的性能中重建 Drupal 的缓存。
- en: With your theme set to the default, navigate to your Drupal site's home page.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的主题设置为默认，导航到你的 Drupal 网站的首页。
- en: 'Your theme''s `global-styling` library will be loaded, and the page''s background
    color will be styled appropriately:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的主题的 `global-styling` 库将被加载，页面的背景颜色将被适当地样式化：
- en: '![](img/0cea031b-c85d-4c20-8719-1031c5eb9063.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0cea031b-c85d-4c20-8719-1031c5eb9063.png)'
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Drupal aggregates all the available `library.yml` files and passes them to the
    `library.discovery.parser` service. The `default` class for this service provider
    is `\Drupal\Core\Asset\LibraryDiscoveryParser`. This service reads the library
    definition from each `library.yml` and returns its value to the system. Before
    parsing the file, the parser allows themes to provide overrides and extensions
    to the library.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 聚合所有可用的 `library.yml` 文件并将它们传递给 `library.discovery.parser` 服务。此服务提供者的
    `default` 类是 `\Drupal\Core\Asset\LibraryDiscoveryParser`。此服务从每个 `library.yml`
    读取库定义并将其值返回给系统。在解析文件之前，解析器允许主题提供库的覆盖和扩展。
- en: Libraries are enqueuers, as they are attached to rendered elements. Themes can
    generically add libraries through their `info.yml` files via the `libraries` key.
    These libraries will always be loaded on the page when the theme is active.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 库是队列，因为它们附加到渲染的元素上。主题可以通过它们的 `info.yml` 文件通过 `libraries` 键通用地添加库。当主题处于活动状态时，这些库将始终在页面上加载。
- en: CSS style sheets are added to the data that will build the head tag of the page.
    JavaScript resources, by default, are rendered in the footer of the page for performance
    reasons.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 样式表被添加到构建页面 head 标签的数据中。出于性能原因，JavaScript 资源默认在页面底部渲染。
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We will explore the options surrounding libraries in Drupal 8 in more detail
    in the next section.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中更详细地探讨 Drupal 8 中围绕库的选项。
- en: CSS groups
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 组
- en: 'With libraries, you can specify CSS by different groups. Drupal''s asset management
    system provides the following CSS groups:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用库，你可以通过不同的组指定 CSS。Drupal 的资产管理系统提供了以下 CSS 组：
- en: Base
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础
- en: Layout
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局
- en: Component
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件
- en: State
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态
- en: Theme
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题
- en: Style sheets are loaded in the order in which the groups are listed. Each one
    of them relates to a PHP constant defined in `/core/includes/common.inc`. This
    allows separation of concerns when working with style sheets. Drupal 8's CSS architecture
    borrows concepts from the **Scalable and Modular Architecture for CSS** (**SMACSS**)
    system to organize CSS declarations. You can learn more about this technique for
    building flexible and scalable CSS style sheets at [https://smacss.com/](https://smacss.com/).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表按组列表的顺序加载。每一个都与 `/core/includes/common.inc` 中定义的 PHP 常量相关。这允许在处理样式表时分离关注点。Drupal
    8 的 CSS 架构借鉴了 **Scalable and Modular Architecture for CSS** (**SMACSS**) 系统的概念来组织
    CSS 声明。您可以在 [https://smacss.com/](https://smacss.com/) 上了解更多关于构建灵活和可扩展的 CSS 样式表的技巧。
- en: Library asset options
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库资产选项
- en: Library assets can have configuration data attached to them. If there are no
    configuration items provided, a simple set of empty brackets is added. Therefore,
    in each example, lines end with `{}`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 库资产可以附加配置数据。如果没有提供配置项，将添加一个简单的空括号集合。因此，在每个示例中，行都以 `{}` 结尾。
- en: 'The following example, taken from `core.libraries.yml`, adds `HTML5shiv`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例取自 `core.libraries.yml`，添加了 `HTML5shiv`：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s take a look at the attributes of `html5shiv.min.js`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `html5shiv.min.js` 的属性：
- en: The `weight` key ensures that the script is rendered earlier than other libraries
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weight` 键确保脚本比其他库更早渲染'
- en: The `browser` tag allows you to specify conditional rules to load the scripting
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`browser` 标签允许您指定条件规则来加载脚本'
- en: You should always pass `minified` as `true` if the asset has already been minified
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果资产已经被压缩，您应该始终传递 `minified` 为 `true`
- en: For CSS assets, you can pass a media option to specify a media query for the
    asset. Reviewing classes that implement `\Drupal\Core\Asset\AssetCollectionRendererInterface`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 CSS 资产，您可以传递一个媒体选项来指定资产的媒体查询。查看实现 `\Drupal\Core\Asset\AssetCollectionRendererInterface`
    的类。
- en: Library dependencies
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库依赖项
- en: Libraries can specify other libraries as dependencies. This allows Drupal to
    provide a minimum footprint on the frontend performance.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 库可以指定其他库作为依赖项。这允许 Drupal 在前端性能上提供最小的占用。
- en: jQuery is only loaded if a JavaScript library specifies it as a dependency;
    for more information on library dependencies, refer to [https://www.drupal.org/node/1541860](https://www.drupal.org/node/1541860).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当 JavaScript 库将其指定为依赖项时，才会加载 jQuery；有关库依赖项的更多信息，请参阅 [https://www.drupal.org/node/1541860](https://www.drupal.org/node/1541860)。
- en: 'Here''s an example from the Quick Edit module''s `libraries.yml` file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从快速编辑模块的 `libraries.yml` 文件中的一个示例：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Quick Edit module defines *jQuery*, the *jQuery Once plugin*, *Underscore*,
    and *Backbone*, and selects other defined libraries as dependencies. Drupal will
    ensure that these are present whenever the `quickedit/quickedit` library is attached
    to a page.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 快速编辑模块定义了 *jQuery*、*jQuery Once 插件*、*Underscore* 和 *Backbone*，并将其他定义的库作为依赖项。Drupal
    将确保在 `quickedit/quickedit` 库附加到页面时这些库都存在。
- en: A complete list of the default libraries provided by Drupal core can be found
    in `core.libraries.yml`, which is in `core/core.libraries.yml`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 核心提供的默认库的完整列表可以在 `core.libraries.yml` 中找到，该文件位于 `core/core.libraries.yml`。
- en: Overriding and extending other libraries
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖和扩展其他库
- en: Themes have the ability to override libraries using the `libraries-override`
    and `libraries-extend` keys in their `info.yml`. This allows themes to easily
    customize the existing libraries without having to add the logic to conditionally
    remove or add their assets when a particular library is attached to a page.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 主题可以通过在它们的 `info.yml` 中使用 `libraries-override` 和 `libraries-extend` 键来覆盖库。这允许主题轻松地自定义现有库，而无需在特定库附加到页面时添加条件性地移除或添加其资产的逻辑。
- en: 'The `libraries-override` key can be used to replace an entire library, replace
    selected files in a library, remove an asset from a library, or disable an entire
    library. The following code will allow a theme to provide a custom jQuery UI theme:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`libraries-override` 键可以用来替换整个库，替换库中选定的文件，从库中移除资产，或者禁用整个库。以下代码将允许主题提供自定义 jQuery
    UI 主题：'
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The override declaration mimics the original configuration. Specifying `false`
    will remove the asset, or else a supplied path will replace that asset.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖声明模仿了原始配置。指定 `false` 将移除资产，否则提供的路径将替换该资产。
- en: 'The `libraries-extend` key can be used to load additional libraries with an
    existing library. The following code will allow a theme to associate a CSS style
    sheet with selected jQuery UI declaration overrides, without always having them
    included in the rest of the theme''s assets:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `libraries-extend` 键来加载与现有库相关的额外库。以下代码将允许主题将CSS样式表与选定的jQuery UI声明覆盖相关联，而无需始终将其包含在主题的其他资产中：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using a CDN or external resource as a library
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CDN或外部资源作为库
- en: Libraries also work with external resources, such as assets loaded over a CDN.
    This is done by providing a URL for the file location along with selected file
    parameters.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 库也可以与外部资源一起工作，例如通过CDN加载的资产。这是通过提供文件位置的URL以及选定的文件参数来完成的。
- en: 'Here is an example to add the `FontAwesome` font icon library from the `BootstrapCDN`
    provided by MaxCDN:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，说明如何从MaxCDN提供的 `BootstrapCDN` 添加 `FontAwesome` 字体图标库：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Remote libraries require additional metainformation to work properly:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 远程库需要额外的元信息才能正常工作：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `remote` key describes the library as using external resources. While this
    key is not validated beyond its existence, it is best to define it with the external
    resource''s primary website:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`remote` 键描述了库使用外部资源。虽然此键的验证仅限于其存在，但最好使用外部资源的主要网站来定义它：'
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Like all libraries, a version is required. This should match the version of
    the external resource being added:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有库一样，需要一个版本号。这应该与添加的外部资源的版本相匹配：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If a library defines the `remote` key, it also needs to define the `license`
    key. This defines the license name, the URL for the license, and checks whether
    it is GPL-compatible. If this key is not provided, a `\Drupal\Core\Asset\Extension\LibraryDefinitionMissingLicenseException`
    will be thrown:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果库定义了 `remote` 键，它还需要定义 `license` 键。这定义了许可证名称、许可证的URL以及检查它是否与GPL兼容。如果没有提供此键，将抛出
    `\Drupal\Core\Asset\Extension\LibraryDefinitionMissingLicenseException` 异常：
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, specific external resources are added as normal. Instead of providing
    a relative file path, the external URL is provided.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，特定的外部资源以正常方式添加。而不是提供相对文件路径，提供外部URL。
- en: Manipulating libraries from hooks
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从钩子中操作库
- en: Modules have the ability to provide dynamic library definitions and alter libraries.
    A module can use the `hook_library_info()` hook to provide a library definition.
    This is not the recommended way to define a library, but it is provided for edge
    use cases.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 模块具有提供动态库定义和修改库的能力。一个模块可以使用 `hook_library_info()` 钩子来提供库定义。这不是定义库的推荐方式，但提供它是为了应对边缘用例。
- en: Modules do not have the ability to use `libraries-override` or `libraries-extend`,
    and need to rely on the `hook_library_info_alter()` hook. You can check out this
    hook in `core/lib/Drupal/Core/Render/theme.api.php` or at [https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_library_info_alter/8](https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_library_info_alter/8).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 模块没有使用 `libraries-override` 或 `libraries-extend` 的能力，需要依赖于 `hook_library_info_alter()`
    钩子。您可以在 `core/lib/Drupal/Core/Render/theme.api.php` 或 [https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_library_info_alter/8](https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_library_info_alter/8)
    中查看此钩子。
- en: Placing JavaScript in the header
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 JavaScript 放置在头部
- en: By default, Drupal ensures that JavaScript is placed last on the page. This
    improves the page's load performance by allowing the critical portions of the
    page to load first. Placing JavaScript in the header is now an opt-in option.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Drupal 确保JavaScript被放置在页面最后。这通过首先加载页面的关键部分来提高页面加载性能。现在将JavaScript放置在头部是一个可选的选项。
- en: 'In order to render a library in the header, you will need to add the `header:
    true` key/value pair:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '为了在头部渲染库，您需要添加 `header: true` 键/值对：'
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will load a custom JavaScript library and its dependencies into the header
    of a page.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在页面的头部加载自定义JavaScript库及其依赖项。
- en: See also
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Refer to the CSS architecture for Drupal 8: Separate concerns at [https://www.drupal.org/node/1887918#separate-concerns](https://www.drupal.org/node/1887918#separate-concerns)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考Drupal 8的CSS架构：在[https://www.drupal.org/node/1887918#separate-concerns](https://www.drupal.org/node/1887918#separate-concerns)中分离关注点
- en: For more information on SMACSS, refer to [http://smacss.com/book/](http://smacss.com/book/)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于SMACSS的信息，请参阅[http://smacss.com/book/](http://smacss.com/book/)
- en: Twig templating
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twig模板
- en: Drupal 8's theming layer is complemented by Twig, a component of the Symfony
    framework. Twig is a template language that uses a syntax similar to Django and
    Jinja templates. The preceding version of Drupal used PHPTemplate, which required
    frontend developers to have a rudimentary understanding of PHP.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 的主题层由 Symfony 框架的组件 Twig 补充。Twig 是一种模板语言，其语法类似于 Django 和 Jinja 模板。Drupal
    之前版本使用 PHPTemplate，这要求前端开发者对 PHP 有基本的了解。
- en: In this recipe, we will override the Twig template to provide customizations
    for the email form element. We will use the basic Twig syntax to add a new class
    and provide a default placeholder.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将覆盖 Twig 模板以提供对电子邮件表单元素的定制。我们将使用基本的 Twig 语法添加一个新类并提供一个默认占位符。
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you have already created a custom theme, such as the
    one you created in the first recipe. When you see `mythemein` in the following
    recipe, use the machine name of the theme you created.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设你已经创建了一个自定义主题，例如你在第一个食谱中创建的主题。当你看到以下食谱中的 `mythemein` 时，请使用你创建的主题的机器名。
- en: At the time of writing this book, the Classy theme does not provide a template
    suggestion for the email input nor any customization for the input template that
    differs from Drupal core.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Classy 主题不提供电子邮件输入的模板建议，也没有对与 Drupal 核心不同的输入模板进行任何定制。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create a `templates` folder in your theme's base directory to hold your Twig
    templates.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的主题基本目录中创建一个 `templates` 文件夹来存放你的 Twig 模板。
- en: To begin, you will need to copy the `input.html.twig` file from `core/themes/classy/templates/form/input.html.twig`
    to your theme's `templates` folder.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，你需要将 `input.html.twig` 文件从 `core/themes/classy/templates/form/input.html.twig`
    复制到你的主题的 `templates` 文件夹。
- en: 'Rename the `input.html.twig` file to `input--email.html.twig` in order to use
    the proper theme hook suggestion, as shown in the following screenshot:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `input.html.twig` 文件重命名为 `input--email.html.twig` 以使用正确的主题钩子建议，如以下截图所示：
- en: '![](img/4b8aaf85-7a43-4539-ac62-7f7884ecc04b.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4b8aaf85-7a43-4539-ac62-7f7884ecc04b.png)'
- en: 'We will use the `addClass` Twig function to add an `input__email` class:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 `addClass` Twig 函数来添加一个 `input__email` 类：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Before the preceding line, we will create a Twig variable using ternary operators
    to provide a customer placeholder:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一行之前，我们将使用三元运算符创建一个 Twig 变量以提供一个客户占位符：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This creates a new variable called `placeholder` using the set operator. The
    question mark (`?`) operator checks whether the `placeholder` property is empty
    in the `attributes` object. If it is not empty, it uses the existing value. If
    the value is empty, it provides a default value.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使用设置运算符创建了一个名为 `placeholder` 的新变量。问号 (`?`) 运算符检查 `attributes` 对象中的 `placeholder`
    属性是否为空。如果不为空，则使用现有值。如果值为空，则提供一个默认值。
- en: Go to the Configuration tab and then to Performance under the DEVELOPMENT section
    to rebuild Drupal's cache. We need to do this because Drupal caches the generated
    Twig output and template overrides.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到配置选项卡，然后在开发部分下的性能下重建 Drupal 的缓存。我们需要这样做，因为 Drupal 缓存生成的 Twig 输出和模板覆盖。
- en: New Twig template overrides provided by a theme and any changes made to a Twig
    template require a cache rebuild.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 主题提供的新 Twig 模板覆盖以及对 Twig 模板的任何更改都需要重建缓存。
- en: 'Assuming that you have used the standard Drupal install, go to the Feedback
    contact form installed at `/contact/feedback`, while logged out, and review the
    changes to the email field:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你已经使用了标准的 Drupal 安装，请转到 `/contact/feedback` 上安装的反馈联系表单，在未登录状态下，并审查电子邮件字段的更改：
- en: '![](img/97730123-1102-4190-b3d4-e253f0d36829.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/97730123-1102-4190-b3d4-e253f0d36829.png)'
- en: This screenshot contains theme debug output. In the *There's more...* section
    of this chapter, we will discuss how to enable the output of theming debug comments.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图包含了主题调试输出。在本章的 *更多内容...* 部分中，我们将讨论如何启用主题调试注释的输出。
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Drupal's theme system is built around hooks and hook suggestions. The element
    definition of the email input element defines the `input__email` theme hook. If
    there is no `input__email` hook implemented through a Twig template or PHP function,
    it will step down to just input.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 的主题系统是围绕钩子和钩子建议构建的。电子邮件输入元素的元素定义定义了 `input__email` 主题钩子。如果没有通过 Twig 模板或
    PHP 函数实现 `input__email` 钩子，它将降级到仅输入。
- en: Drupal theme hooks are defined with underscores (`_`), but use hyphens (`-`)
    when used in Twig template files.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 主题钩子使用下划线 (`_`) 定义，但在 Twig 模板文件中使用时使用连字符 (`-`)。
- en: A processor, such as Drupal's theme layer, passes variables to Twig. Variables
    or properties of objects can be printed by wrapping the variable name with curly
    brackets. All of Drupal core's default templates provide information in the file's
    document block that details the available Twig variables.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器，如Drupal的主题层，将变量传递给Twig。可以通过将变量名用花括号括起来来打印变量或对象属性。Drupal核心的所有默认模板都在文件的文档块中提供信息，详细说明了可用的Twig变量。
- en: Twig has a simplistic syntax with basic logic and functions. The `addClass`
    method will take the `attributes` variable and add the class provided in addition
    to the existing contents.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Twig具有简单的语法，包括基本的逻辑和函数。`addClass`方法将接受`attributes`变量，并添加除现有内容之外的类。
- en: When providing a theme hook suggestion or altering an existing template, you
    will need to rebuild Drupal's cache. The compiled Twig template, as PHP, is cached
    by Drupal so that Twig does not need to compile each time the template is invoked.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供主题钩子建议或修改现有模板时，您需要重新构建Drupal的缓存。编译后的Twig模板，就像PHP一样，被Drupal缓存，这样Twig就不需要在每次调用模板时都进行编译。
- en: There's more...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: We will discuss more on using Twig in the following sections.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中讨论更多关于使用Twig的内容。
- en: Security first
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全第一
- en: Twig automatically escapes the output by default, making Drupal 8 one of the
    most secure versions yet. For Drupal 7, most security advisors were for **cross-site
    scripting** (**XSS**) vulnerabilities in contributed projects. With Drupal core,
    these security advisories should be severely reduced using Twig.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Twig默认自动转义输出，这使得Drupal 8成为迄今为止最安全的版本之一。对于Drupal 7，大多数安全顾问都关注于贡献项目中**跨站脚本**（**XSS**）漏洞。使用Twig，这些安全警告应该会大幅减少。
- en: Theme hook suggestions
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题钩子建议
- en: Drupal utilizes theme hook suggestions for ways to allow output variations based
    on different conditions. It allows site themes to provide a more specific template
    for certain instances.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal利用主题钩子建议来允许基于不同条件输出变化。它允许站点主题为某些实例提供更具体的模板。
- en: 'When a theme hook has double underscores (`__`), Drupal''s theme system understands
    this, and it can break apart the theme hook to find a more generic template. For
    instance, the email element definition provides `input__email` as its theme hook.
    Drupal understands this as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个主题钩子包含双下划线（`__`）时，Drupal的主题系统会理解这一点，并且可以分解主题钩子以找到更通用的模板。例如，电子邮件元素定义提供了`input__email`作为其主题钩子。Drupal理解如下：
- en: Look for a Twig template named `input--email.html.twig` or a theme hook that
    defines `input__email`
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找名为`input--email.html.twig`的Twig模板或定义`input__email`的主题钩子
- en: If you are not satisfied, look for a Twig template named `input.html.twig` or
    a theme hook that defines the input
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不满意，请寻找名为`input.html.twig`的Twig模板或定义输入的主题钩子
- en: Theme hook suggestions can be provided by the `hook_theme_suggestions()` hook
    in a `.module` or `.theme` file.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 主题钩子建议可以通过`.module`或`.theme`文件中的`hook_theme_suggestions()`钩子提供。
- en: Debugging template file selection and hook suggestions
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试模板文件选择和钩子建议
- en: Debugging can be enabled to inspect the various template files that make up
    a page and their theme hook suggestions, and check which are active. This can
    be accomplished by editing the `sites/default/services.yml` file. If a `services.yml`
    file does not exist, copy the `default.services.yml` to create one.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 可以启用调试来检查构成页面的各种模板文件及其主题钩子建议，并检查哪些是活动的。这可以通过编辑`sites/default/services.yml`文件来完成。如果不存在`services.yml`文件，请复制`default.services.yml`以创建一个。
- en: 'You need to change `debug: false` to `debug: true` under the `twig.config`
    section of the file. This will cause the Drupal theming layer to print out the
    source code comments containing the template information. When debug is on, Drupal
    will not cache the compiled versions of Twig templates and render them on the
    fly.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '您需要在文件的`twig.config`部分下将`debug: false`更改为`debug: true`。这将导致Drupal主题层打印出包含模板信息的源代码注释。当调试开启时，Drupal不会缓存编译后的Twig模板版本，而是即时渲染它们。'
- en: There is another setting that prevents you from having to rebuild Drupal's cache
    on each template file change, but do not leave debug enabled. The `twig.config.auto_reload
    boolean` can be set to `true`. If this is set to `true`, the Twig templates will
    be recompiled if the source code changes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一个设置可以防止您在每次模板文件更改时都重新构建Drupal的缓存，但不要留下调试开启。可以将`twig.config.auto_reload boolean`设置为`true`。如果设置为`true`，当源代码更改时，Twig模板将被重新编译。
- en: The Twig logic and operators
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twig逻辑和运算符
- en: The Twig has ternary operators for logic. Using a question mark (`?`), we can
    perform a basic *is true or not empty* operation, whereas a question mark and
    colon (`?:`) perform a basic *is false or is empty* operation.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Twig 有三元运算符用于逻辑。使用问号（`?`），我们可以执行基本的*是否为真或非空*操作，而问号和冒号（`?:`）执行基本的*是否为假或为空*操作。
- en: You may also use the `if` and `else` logic to provide different outputs based
    on variables.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`if`和`else`逻辑根据变量提供不同的输出。
- en: See also
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the Twig documentation at [http://twig.sensiolabs.org/documentation](http://twig.sensiolabs.org/documentation)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 Twig 文档[http://twig.sensiolabs.org/documentation](http://twig.sensiolabs.org/documentation)
- en: Refer to the API documentation for `hook_theme_suggestions` at [https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8)的`hook_theme_suggestions`
    API 文档
- en: Using the Breakpoint module
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Breakpoint 模块
- en: The Breakpoint module provides a method to create media query breakpoint definitions
    within Drupal. These can be used by other components, such as the responsive image
    and toolbar modules, to make Drupal responsive.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Breakpoint 模块提供了一个在 Drupal 中创建媒体查询断点定义的方法。这些可以被其他组件，如响应式图像和工具栏模块使用，以使 Drupal
    响应。
- en: Breakpoints are a type of plugin that can be defined in a module's or theme's
    `breakpoints.yml` in its directory. In this recipe, we will define three different
    breakpoints under a custom group.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 断点是插件的一种类型，可以在模块或主题的目录中的`breakpoints.yml`中定义。在这个菜谱中，我们将在一个自定义组下定义三个不同的断点。
- en: Breakpoints are defined solely in `YAML` files from installed modules and themes
    and are not configurable through the user interface.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 断点仅由安装的模块和主题的`YAML`文件定义，并且不能通过用户界面进行配置。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that the Breakpoint module is enabled--if you have used the standard
    Drupal installation, the module is enabled.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Breakpoint模块已启用--如果你使用了标准的Drupal安装，该模块已启用。
- en: This recipe assumes that you have already created a custom module. When you
    see `mymodule`, use the machine name of the module that you created.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱假设你已经创建了一个自定义模块。当你看到`mymodule`时，请使用你创建的模块的机器名。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create `mymodule.breakpoints.yml` in your module's base directory. This file
    will hold the breakpoint configurations.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块基本目录中创建`mymodule.breakpoints.yml`。此文件将包含断点配置。
- en: 'Firstly, we will add a standard mobile breakpoint that does not have a media
    query, following mobile first practices:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个标准的移动断点，它没有媒体查询，遵循移动优先的实践：
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Secondly, we will create a standard breakpoint that will run on a larger viewport:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二，我们将创建一个标准断点，它将在更大的视口中运行：
- en: '[PRE22]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Thirdly, we will create a wide breakpoint for devices that have a large viewport:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三，我们将为具有大视口的设备创建一个宽断点：
- en: '[PRE23]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Your `mymodule.breakpoints.yml` should resemble the following:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的`mymodule.breakpoints.yml`应该类似于以下内容：
- en: '[PRE24]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Go to the Configuration tab and then to Performance to rebuild Drupal's cache
    and make the system aware of the new breakpoints.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往配置选项卡，然后转到性能以重建 Drupal 的缓存并使系统意识到新的断点。
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Breakpoint module defines the breakpoint configuration entity. Breakpoints
    do not have any specific form of direct functionalities, beyond providing a way
    to save media queries and grouping them.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Breakpoint 模块定义了断点配置实体。断点没有任何特定的直接功能形式，除了提供保存媒体查询和分组的方式。
- en: The Breakpoint module provides a default manager service. This service is used
    by other modules to discover breakpoint groups and then all of the breakpoints
    within a group.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Breakpoint 模块提供了一个默认的管理服务。该服务被其他模块用来发现断点组，然后是组内的所有断点。
- en: There's more...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Additional information on using the Breakpoint module will be covered in the
    upcoming sections.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Breakpoint 模块的更多信息将在接下来的章节中介绍。
- en: Caveat for providing breakpoints from themes
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供断点时的注意事项
- en: Themes have the ability to provide breakpoints; however, they cannot be automatically
    discovered if new ones are added once they have been installed. Drupal only reads
    breakpoints provided by themes when a theme is either installed or uninstalled.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 主题有提供断点的功能；然而，如果安装后添加了新的断点，它们将无法自动发现。Drupal仅在主题安装或卸载时读取主题提供的断点。
- en: 'Inside `breakpoint.manager`, there are two hooks: one for the `theme install`,
    and one for the `theme uninstall`. Each hook retrieves the breakpoint manager
    service and rebuilds the breakpoint definitions. Without any extra deployment
    steps, new breakpoints added to a theme will not be discovered unless these hooks
    are fired.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `breakpoint.manager` 中，有两个钩子：一个用于 `theme install`，另一个用于 `theme uninstall`。每个钩子都会检索断点管理器服务并重建断点定义。除非这些钩子被触发，否则新添加到主题中的新断点不会被发现。
- en: Accessing breakpoints programmatically
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以编程方式访问断点
- en: 'Breakpoints are utility configurations for other modules. Breakpoints can be
    loaded using the breakpoint manager service and by specifying a group. For example,
    the following code returns all breakpoints used by the Toolbar module:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 断点（Breakpoints）是其他模块的实用配置。可以通过断点管理器服务和指定一个组来加载断点。例如，以下代码返回了由工具栏模块使用的所有断点：
- en: '[PRE25]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This code invokes the Drupal container to return the service to manage breakpoints,
    which, by default, is `\Drupal\breakpoint\BreakpointManager`. The `getBreakpointsByGroup`
    method returns all breakpoints within a group, which are initiated as the `\Drupal\breakpoint\BreakpointInterface`
    objects.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码调用Drupal容器以返回管理断点的服务，默认为 `\Drupal\breakpoint\BreakpointManager`。`getBreakpointsByGroup`
    方法返回组内的所有断点，这些断点作为 `\Drupal\breakpoint\BreakpointInterface` 对象启动。
- en: The Toolbar element class utilizes this workflow to push the breakpoint media
    query values as JavaScript settings for the JavaScript model to interact with.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏元素类利用此工作流程将断点媒体查询值作为JavaScript设置推送到JavaScript模型进行交互。
- en: Multipliers
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 倍数
- en: 'The multipliers value is used to support pixel resolution multipliers. This
    multiplier is used in coordination with *retina* displays. It is a measure of
    the viewport''s device resolution as a ratio of the device''s physical size and
    independent pixel size. The following is an example of standard multipliers:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 倍数值用于支持像素分辨率倍数。这个倍数与 *视网膜* 显示一起使用。它是视口设备分辨率的度量，作为设备物理尺寸和独立像素尺寸的比率。以下是一个标准倍数的示例：
- en: 1x is normal
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1x 是正常情况
- en: 5x supports Android
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5x 支持Android
- en: 2x supports Mac retina devices
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2x 支持Mac视网膜设备
- en: See also
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: To work with breakpoints in Drupal 8, refer to the community documentation at
    [https://www.drupal.org/documentation/modules/breakpoint](https://www.drupal.org/documentation/modules/breakpoint)
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在Drupal 8中使用断点，请参考社区文档[https://www.drupal.org/documentation/modules/breakpoint](https://www.drupal.org/documentation/modules/breakpoint)
- en: Using the Responsive Image module
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用响应式图像模块
- en: The Responsive Image module provides a field formatter for image fields that
    use the HTML5 picture tag and source sets. Utilizing the Breakpoint module, mappings
    to breakpoints are made to denote an image style to be used at each breakpoint.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式图像模块为使用HTML5图片标签和源集的图像字段提供字段格式化器。利用断点模块，将断点映射到表示每个断点要使用的图像样式。
- en: The responsive image field formatter works with using a defined responsive image
    style. Responsive image styles are configurations that map image formats to specific
    breakpoints and modifiers. First, you will need to define a responsive image style,
    and then you can apply it to an image field.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式图像字段格式化器与定义的响应式图像样式一起使用。响应式图像样式是将图像格式映射到特定断点和修饰符的配置。首先，您需要定义一个响应式图像样式，然后可以将其应用于图像字段。
- en: In this recipe, we will create a responsive image style set called `Article
    image` and apply it to the `Article` content type's image field.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个名为 `Article image` 的响应式图像样式集，并将其应用于 `Article` 内容类型的图像字段。
- en: Getting ready
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to enable the `Responsive Image` module, as it is not automatically
    enabled with the standard installation.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要启用 `Responsive Image` 模块，因为它在标准安装中不会自动启用。
- en: How to do it...
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Go to Configuration and then to Responsive image styles under the MEDIA section.
    Click on Add responsive image style to create a new style set.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往配置，然后在媒体部分下的响应式图像样式。点击添加响应式图像样式以创建一个新的样式集。
- en: Provide a label that will be used to administratively identify the Responsive
    image style set.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个标签，该标签将用于管理上识别响应式图像样式集。
- en: Select a breakpoint group that will be used as a source of breakpoints to define
    the image style map.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个将用作定义图片样式映射的断点源的断点组。
- en: 'Each breakpoint will have a `fieldset`. Expand the `fieldset` and choose Select
    a single image style, and then, pick an appropriate image style:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个断点都会有一个 `fieldset`。展开 `fieldset` 并选择“选择单个图片样式”，然后选择合适的图片样式：
- en: '![](img/e6781779-d7b6-4092-b65d-ed277fa5b03c.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e6781779-d7b6-4092-b65d-ed277fa5b03c.png)'
- en: Additionally, choose a fallback image style in the event of a browser that doesn't
    support source sets, such as Internet Explorer 8.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，选择一个回退图片样式，以防浏览器不支持源集，例如 Internet Explorer 8。
- en: 'Click on Save to save the configuration, and add the new style set:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”以保存配置，并添加新的样式集：
- en: '![](img/34d61df5-0fcc-4173-ab4a-b486c485a786.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/34d61df5-0fcc-4173-ab4a-b486c485a786.png)'
- en: Go to Structure and Content types and select Manage Display from the Article
    content type's drop-down menu.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往结构并选择内容类型，从文章内容类型的下拉菜单中选择“管理显示”。
- en: Change the Image field's formatter to Responsive image.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图片字段的格式化器更改为响应式图片。
- en: 'Click on the Settings tab of the field formatter to choose your new Responsive
    image style set. Select Article image from the Responsive image style dropdown:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击字段格式化器的“设置”选项卡以选择您的新响应式图片样式集。从响应式图片样式下拉菜单中选择“文章图片”：
- en: '![](img/0da6556d-b8aa-43f3-b4fe-1970272e97fa.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0da6556d-b8aa-43f3-b4fe-1970272e97fa.png)'
- en: Click on Update to save the field formatter settings, and then click on Save
    to save the field display settings.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“更新”以保存字段格式化设置，然后点击“保存”以保存字段显示设置。
- en: How it works...
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Responsive image style provides three components: a responsive image element,
    the responsive image style configuration entity, and the responsive image field
    formatter. The configuration entity is consumed by the field formatter and displayed
    through the responsive image element.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式图片样式提供三个组件：一个响应式图片元素、响应式图片样式配置实体和响应式图片字段格式化器。配置实体被字段格式化器消费并通过响应式图片元素显示。
- en: The responsive image style entity contains an array of breakpoints to image
    style mappings. The available breakpoints are defined by the selected breakpoint
    groups. Breakpoint groups can be changed anytime; however, the previous mappings
    will be lost.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式图片样式实体包含一个断点到图片样式映射的数组。可用的断点由所选断点组定义。断点组可以随时更改；然而，之前的映射将会丢失。
- en: The responsive image element prints a `picture` element with each breakpoint,
    defining a new `source` element. The breakpoint's media query value is provided
    as the `media` attribute for the element.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式图片元素为每个断点打印一个 `picture` 元素，定义一个新的 `source` 元素。断点的媒体查询值作为元素的 `media` 属性提供。
- en: For Internet Explorer 9, Drupal 8 ships with the `picturefill` polyfill. Internet
    Explorer 9 does not recognize source elements wrapped by a `picture` element.
    The polyfill wraps the sources around a video element within the `picture` element.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Internet Explorer 9，Drupal 8 随带 `picturefill` 多重填充。Internet Explorer 9 不识别由
    `picture` 元素包裹的源元素。多重填充将源元素包裹在 `picture` 元素内的视频元素周围。
- en: There's more...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the following sections, we will discuss the responsive image field in more
    detail.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将更详细地讨论响应式图片字段。
- en: Performance first delivery
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先考虑性能
- en: A benefit of using the responsive image formatter is performance. Browsers will
    only download the resources defined in the `srcset` of the appropriate `source`
    tag. This not only allows you to deliver a more appropriate image size, but also
    carries a smaller payload on smaller devices.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 使用响应式图片格式化器的优点是性能。浏览器将只下载在适当的 `source` 标签的 `srcset` 中定义的资源。这不仅允许你提供更合适的图片大小，而且在小型设备上也会携带更小的负载。
- en: Removing picturefill polyfill
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除 picturefill 多重填充
- en: The Responsive Image module attaches the `picturefill` library to the responsive
    image element definition. The element's template also provides HTML to implement
    the polyfill. The polyfill can be removed by overriding the element's template
    and overriding the `picturefill` library to be disabled.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式图片模块将 `picturefill` 库附加到响应式图片元素定义。元素的模板还提供了实现多重填充的 HTML。可以通过覆盖元素的模板并覆盖 `picturefill`
    库来禁用多重填充。
- en: 'The following snippet, when added to a theme''s `info.yml`, will disable the
    `picturefill` library:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段，当添加到主题的 `info.yml` 中时，将禁用 `picturefill` 库：
- en: '[PRE26]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, the `responsive-image.html.twig` must be overridden by the theme to remove
    the extra HTML generated in the template for the polyfill:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`responsive-image.html.twig` 必须由主题覆盖以删除模板中为 polyfill 生成的额外 HTML：
- en: Copy `responsive-image.html.twig` from `core/modules/responsive_image/templates`
    to the `theme` templates folder.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `responsive-image.html.twig` 从 `core/modules/responsive_image/templates` 复制到
    `theme` 模板文件夹。
- en: Edit `responsive-image.html.twig` and delete the Twig comment and IE conditional
    to output the initial video tag.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `responsive-image.html.twig` 并删除 Twig 注释和 IE 条件语句以输出初始视频标签。
- en: Remove the last conditional, that provides the closing video tag.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除最后一个条件语句，该语句提供了关闭视频标签。
- en: See also
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: Refer to the picture element on the **Mozilla Developer Network** (**MDN**)
    at [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考Mozilla开发者网络（**MDN**）上的图片元素，链接为 [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture)
- en: Refer to `picturefill` for IE9 at [http://scottjehl.github.io/picturefill/#ie9](http://scottjehl.github.io/picturefill/#ie9)
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考针对 IE9 的 `picturefill`，链接为 [http://scottjehl.github.io/picturefill/#ie9](http://scottjehl.github.io/picturefill/#ie9)
