- en: Chapter 6. Working with Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CodeIgniter for databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to multiple databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Record – Create (insert)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Record – Read (select)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Record – Update
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Record – Delete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looping through database results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counting the number of returned results with num_rows()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counting the number of returned results with count_all_results()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counting the number of returned results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the last insert ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the number of affected rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the last database query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CodeIgniter database migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving to the current version with current()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling back/stepping forward with version()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating an XML from a database result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a CSV from a database result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pretty much any application you build will require database access and a functionality,
    from basic **Create**, **Read**, **Update**, and **Delete** (**CRUD**) operations
    to more sophisticated approaches. In this chapter, we'll look at some fairly simple
    recipes (for example, simple CRUD operations), and then some more capable recipes
    such as connecting to multiple databases, database caching, and generating files
    as output.
  prefs: []
  type: TYPE_NORMAL
- en: Some recipes are quite simple, so I won't provide all the files for you to copy
    (in some cases, it may be unnecessary); instead, many of the recipes are small
    blocks of code that you can drop into real-world scenarios as you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CodeIgniter for databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have already configured CodeIgniter to connect with a database, you
    can skip this part, as all we''re going to do is make sure we can connect to a
    database; to do this, we''re going to amend the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/config/database.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/config/autoload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `database.php` config file, look for the following lines and amend them
    accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The chances are that you'll not need to change `$db['default']['hostname']`
    from the `'localhost'`, and replace other values (`username`, `password`, and
    `database`) with the specific values for your environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `autoload.php` config file, look for the following line (around line
    55):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that the database is being autoloaded by adding it to the `$autoload`
    array like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to separate each library you're auto-loading with a comma, for example,
    `$autoload['libraries'] = array('database', 'session', 'javascript')` and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's not a lot to this really; it's only setting the configuration settings,
    but one interesting point is that of autoloading the libraries. By placing a library
    name in this array in the autoload configuration file, you no longer need to load
    the library explicitly in a controller later in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to multiple databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you require your application to connect to more than
    one database or database server. For example, imagine you managed an online shop,
    and you may wish to have one database to handle customer orders, billing, invoicing,
    and so on, and another database to store and maintain product and stock information.
    CodeIgniter can be configured to use many database instances, and the following
    section shows how you do it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to let CodeIgniter interact with two or more databases, we''ll need
    to amend a few settings in the `config` file at:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/config/database.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scroll down to the bottom of the file and copy the following into it. Remember
    to replace `hostname`, `username`, `password`, and `database` with the correct
    details for your setup.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Look closely at the lines in bold. The first four lines in each database group
    details the standard host, username, password, and database name for each database
    you wish to use. But, also look at the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The database configuration setting `''pconnect''` tells CodeIgniter whether
    you wish to have persistent connections or not. Setting this value to `False`
    in each database group allows CodeIgniter to communicate with more than one database.
    We''re going to create two databases with one table in each. Obviously, your requirements
    will be different, but you can adapt to the recipe as necessary. Copy the following
    code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we have two databases to work with and have configured the `database.php`
    configuration file to communicate with both of them, so now we can begin to access
    each database in turn.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to create the controller, `''database1''`, and `''database2''`
    files that would be available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/multi_database.php`: This is
    the controller file; it will call models for both databases `''database1''` and
    `''database2''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/multi_database_model_db_1.php`: This
    model will communicate with the first database `''database1''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/multi_database_model_db_2.php`: This
    model will communicate with the second database `''database2''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following steps will help us in accessing each database:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that `$db['users']['pconnect']` in `/config/database.php` is set to `FALSE`,
    and you have entered the correct access information for each database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the file `/path/to/codeigniter/application/controllers/multi_database.php`.
    This controller will call the two database models and output results from each.
    Add the following code to the controller file `multi_database.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the model `/path/to/codeigniter/application/models/multi_database_model_db_1php`.
    This model will communicate with `''database1''`. Add the following code to the
    model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the model `/path/to/codeigniter/application/models/multi_database_model_db_2.php`.
    This model will communicate with `''database2''`. Add the following code to the
    model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, let''s pay attention to the settings we''ve defined for each one of
    our databases in the file `/path/to/codeigniter/application/config/database.php`.
    These database settings are specific to each database we want to connect to. We
    have also set the configuration variable `''pconnect''` to `FALSE` for each of
    our databases (see the preceding bold text). When we run the controller `Multi_database`
    in the browser, the controller will load our two database models named—for ease
    of explanation—`''Multi_database_model_db_1''` and `''Multi_database_model_db_2''`.
    The `Multi_database` controller will then call one function from each model, again
    named `select_1` and `select_2` for ease of explanation. The following code shows
    the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay! So far so good. There''s nothing new here—just calling some database
    models; however, it''s inside those models that things get interesting. Let''s
    take a look at the code for the model `Multi_database_model_db_1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re loading the database `''database1''`—meaning, we''re connecting to a
    database called `''database1''` using the settings defined for `''database1''`
    in the `database.php` configuration file—and storing that in the object which
    we''re calling, that is, `$DBconn1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''re using the database object `$DBconn1` to run a query and store
    the database result object in the variable `$query1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We then return `$query` to the calling controller. The controller `Multi_database`
    then loops through the `$query1` result object, echoing as we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Active Record – create (insert)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several ways to insert data into a database using CodeIgniter Active
    Record; for example, `$this->db->insert()` and `$this->db->insert_batch()`. The
    first will insert only one record at a time, and the second will insert an array
    of data as individual rows into the database; this can be quite useful if you
    know you need to insert more than one record at a time, thereby saving you the
    trouble of calling `insert()` more than once.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the SQL code required to support this recipe; you''ll need to adapt
    it to your circumstances. Copy the following SQL code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files (or amend those files if you
    have already created them):'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/database.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/database_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following steps will demonstrate how to insert data into a database using
    CodeIgniter Active Record:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code into the controller `database.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code into the model `database_model.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two methods used here: `create()` and `create_batch()`. Let''s take
    each function in turn and go through how they work.'
  prefs: []
  type: TYPE_NORMAL
- en: The public function create()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `create()` function should be fairly familiar; we''re creating an array
    (named `$data`) and populating it with the data for one user or equivalent to
    one row''s insert. The `create()` method then passes the `$data` array to the
    model function `insert_data()` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The model will then insert one row into the table `ch6_users`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The public function create_batch()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `create_batch()` public function similar to the preceding functionality
    of `create()`, but rather than passing an array with one set of items, we create
    a multidimensional array with multiple rows of data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We then send that array to a new model function `create_batch()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `function create_batch()` function uses the CodeIgniter `function insert_batch()`
    to INSERT each row into the database.
  prefs: []
  type: TYPE_NORMAL
- en: Active Record – read (select)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The R of CRUD represents the process to select data from a database. CodeIgniter
    uses the `$this->db->get()` database function to fetch rows from the database.
    Its usage is explained in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is the SQL code required to support this recipe; you'll need to
    adapt it to your circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files (or amend those files if you
    have already created them):'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/database.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/database_model.php\`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following steps will demonstrate how to read data into a database using
    CodeIgniter Active Record:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code into the file `/path/to/codeigniter/application/controllers/database.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code into the file `/path/to/codeigniter/application/models/database_model.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You know it has worked if you see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding controller, `public function select_row()` assigns `$id` with
    the value `1`—however, this can also be done from **post**, **get**, **session**,
    or another source—and loads the database model, passing the variable `$id` to
    it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The model function `select_row()` pulls the matching record from the table `'ch6_users'`
    and returns it to the calling controller.
  prefs: []
  type: TYPE_NORMAL
- en: Active Record – update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The U of CRUD represents the process to update data record(s) from a database
    in a database. CodeIgniter uses the database function `$this->db->update()` to
    update database records; this recipe will explain how it is done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is the SQL code required to support this recipe; you'll need to
    adapt it to your circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files (or amend those files if you
    have already created them):'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/database.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/database_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following step will demonstrate how to update data into a database using
    CodeIgniter Active Record:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code into the file: `/path/to/codeigniter/application/controllers/database.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the controller we just saw, `public function update_row()` assigns `$id`
    with the value `1`—however this can be from post, get, session or another source—and
    loads the database model, passing the variable `$id` to it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The model function `update_row()` updates the matching record from the table
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: ActiveRecord – delete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The D of CRUD is used for deleting rows of data in a database table. CodeIgniter
    uses the `$this->db->delete()`database function to remove rows from a database;
    it is used in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the SQL code required to support this recipe; you''ll need
    to adapt it to your circumstances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files (or amend those files if you
    have already created them):'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/database.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/database_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following steps will demonstrate how to delete data from a database using
    CodeIgniter Active Record:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code into the file `/path/to/codeigniter/application/controllers/database.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code into the file `/path/to/codeigniter/application/models/database_model.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding controller, `public function delete_row()` assigns `$id` with
    the value `1`—however, this can be from post, get, session or another source—and
    loads the database model, passing the variable `$id` to it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The model function `delete_row()`deletes the matching record from the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Looping through the database results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any application with database connectivity, you'll probably need to display
    records from a database; looping through rows of data returned from a query is
    one of the most common tasks you'll perform in programming. CodeIgniter handles
    looping through database results using PHP for each statement. In this recipe,
    we will loop through each record at a time, echoing out the relevant information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To support this recipe, we are going to create a database table and write some
    data to it. If you already have the data, you can skip this recipe; if not, copy
    the following code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add or adapt the following code into your controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or adapt the following code into your model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or adapt the following code into your view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, let's look at the SQL code; if you used the preceding SQL code, all
    we would have done is create a very simple table and populate it with two rows
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we call the controller function `loop_through_data()`, which loads a
    model; in this case, rename `Some_model` to the model relevant to your application.
    We call the model function `select_data()`, storing its returned result in the
    `$data` array, or more specifically, in a section of the `$data` array that we''re
    calling `''query''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The model function `select_data()` fetches all the rows from the database table
    `loop_table` and returns it to the calling controller function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to our controller, now that we have the database result in our `$data`
    array, we can call the `view` file `some_view.php`—you obviously need to rename
    it to something else in your application—and pass the `$data` array to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `view` file then uses a simple `foreach()`loop to cycle through each result
    in `$query`. Let''s look at this `foreach()` loop more closely. Look at the following
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Remember how we stored the database result in `$data['query']`? Well, we're
    going to use the `'query'` part of the `$data` array, which has stored the database
    results, and we're going to use the CodeIgniter function `result()` on it. I hear
    you ask, "What does `result()` do?" The `result()` function will take an object
    or array and allow you to iterate through each row, allowing you to act on the
    individual data items within that row.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we''re using `result()` to split apart `$query` into each row, passing
    that row to `$row` (because it''s obvious) and allowing us to do something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This is displaying the first and last name of each person in `$row`.
  prefs: []
  type: TYPE_NORMAL
- en: Counting the number of returned results with num_rows()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's useful to count the number of results returned—often bugs can arise if
    a section of the code that expects to have at least one row is passed with zero
    rows. Without handling the eventuality of a zero result, an application may become
    unpredictably unstable and may give away hints to a malicious user about the architecture
    of the app. Ensuring correct handling of zero results is what we're going to focus
    on here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create a block of code for a model and controller. You may
    already have code in a controller, model, or view that does all or some of the
    following—obviously, you can skip any step that you do not need. Add or adapt
    the ensuing code into your controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or adapt the following code into your model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or adapt the following code into your view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is quite common; a controller loads the required model and calls a function
    within that model; the result of this model is stored in an array. This is then
    passed to a view. It is here in the view that we'd count the number of rows. Take
    a look at the line in bold. We're using the CodeIgniter function `num_rows()`
    to look into the `$query` result and count the number of rows returned by the
    model. We're asking whether the number of rows is greater than zero. If it is,
    there must be at least one result from the model—we then look through the `$query`
    array as we would normally. However, if the number of results isn't greater than
    zero, it would mean that there were no results returned by the model. So, we use
    an else statement to display a brief message stating that there were `No results
    returned`.
  prefs: []
  type: TYPE_NORMAL
- en: Counting the number of returned results with count_all_results()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's useful to count the number of results returned—often bugs can arise if
    a section of code which expects to have at least one row is passed zero rows.
    Without handling the eventuality of a zero result, an application may become unpredictably
    unstable and may give away hints to a malicious user about the architecture of
    the app. Ensuring correct handling of zero results is what we're going to focus
    on here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add or adapt the following code into your controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or adapt the following code into your model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or adapt the following code into your view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is fairly similar to the recipe above `num_rows()`, but there are a few
    key differences. We start off by calling a controller that loads the required
    model and calls a function within it. Take a look at the code in bold: `$this->db->count_all_results();`.
    This will return the number of results returned in a given query. The result of
    this code is stored in an array and passed to a view where we test whether the
    variable `$num_results` is set; if it is, we echo a brief message indicating the
    number of results.'
  prefs: []
  type: TYPE_NORMAL
- en: Query binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Binding queries is another useful security process; if you use binding with
    your queries, values are automatically escaped by CodeIgniter, and there is no
    need for you to manually do so.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the following SQL into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In any of your models, adapt your query code to reflect the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a table called `users` as an example, the query will try to fetch all
    records where `users.is_active` equals `Y` and `users.created_date` is greater
    than `1359706809 (02/01/2013 – 03:20)`. But, you'll notice that there are two
    question marks in the query, and each question mark represents an item in the
    `$data array`. The values in the `$data` array are passed in order and into the
    query by the line `$this->db->query($query, $data);`. So, the first question mark
    in the query will be replaced with the first item in the array, the second question
    mark in the query will be replaced by the second item in the array, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the last insert id
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Returning the Primary Key of the last inserted row can be useful in instances
    where you may wish to write data to more than one table and whose data may be
    related via the keys. CodeIgniter provides support for returning the last inserted
    key.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add or adapt the following code into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take a look at the lines in bold. We test for the returned value of `$this->db->insert($data);`,
    which will return true if successful and false if there was an error. If the returned
    value is true, we grab the Primary Key of the last inserted record for this connection;
    this value along with `return $this->db->insert_id();`is returned from the model
    to the code that called the function. If the database insert was unsuccessful,
    it would return false. You can adapt the above recipe easily; just drop the lines
    in bold into your model.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the number of affected rows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finding the number of affected rows can be useful in several ways—perhaps you
    want to update some records and only proceed if a certain number of records are
    updated, or perhaps you simply want to display the number of rows that have been
    deleted or updated by a query.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add or adapt the following code into your model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The model `function update()` accepts two parameters: a `$data` array and the
    `$id` array of the database row we wish to update.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we test for the returned value of `$this->db->update($data);`, which
    will return true if successful and false if there was an error. If the returned
    value is true, we grab the number of affected rows for the update with the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: If the update doesn't happen, the returned value will be false.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the last database query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it is useful to know about the last query that was run against the
    database, either for debugging purposes or for reasons where you wish to have
    an audit trail of every interaction with the database—you'll be surprised at the
    number of times you'll need to do this. CodeIgniter comes with a really handy
    function that you can use to write out the most recent query that CodeIgniter
    sent to the database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add or adapt the following line of code into your controller or model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Quite simply, this function will return the last query to be sent to the database;
    you can place it in the controller or model (even the view if you wish, but it''s
    better to keep it at the logical side of your application rather than the view).
    It will return the query that you can use as an audit in the form of a string;
    for example, consider the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line of code will write the last query to your log files, where
    `'level'` denotes the type of message. We will go through some error reporting
    and logging recipes in [Chapter 9](ch09.html "Chapter 9. Extending the Core"),
    *Extending the core*.
  prefs: []
  type: TYPE_NORMAL
- en: Using CodeIgniter database migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that you work in a team of other developers, and everyone is busy working,
    making changes to the code and the database structure. Keeping up with all of
    those changes to a database can become a challenge, particularly if many people
    are working on roughly the same area of the project.
  prefs: []
  type: TYPE_NORMAL
- en: CodeIgniter Migration gives you the option to install (or rollback) the changes
    of a database structure that might support the changes in the code. For example,
    if you were working on coding changes for, say, a user registration script—this
    change requires a column to be added to a database table; you could include a
    CodeIgniter database migration script with your version control commit (assuming
    you're using version control)—other developers will now know that for your code
    change to work they must run the migration which would amend their database.
  prefs: []
  type: TYPE_NORMAL
- en: Migration also allows you to roll back changes. This should not be confused
    with the database concept of rolling back with transactions; think of rolling
    back using migrations as uninstalling previously installed changes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are some configuration settings we need to change before we do this,
    so open `/path/to/codeigniter/application/config/migration.php` and find the following
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Preference | Default Value | Options | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `migration_enabled` | FALSE | TRUE/FALSE | Specifies whether or not you wish
    migrations to be enabled; TRUE is enabled, and FALSE is disabled. |'
  prefs: []
  type: TYPE_TB
- en: '| `migration_version` | 0 | None | Specifies the current migration version
    your database uses or rather the most suitable migration version you wish to work
    with. We''ll talk more about this later in the chapter. By using `current()`,
    we will install the up-to-date value set in `''migration_version''`. |'
  prefs: []
  type: TYPE_TB
- en: '| `migration_path` | APPPATH.''migrations/'' | None | Specifies the path of
    the folder where you store the migration files. Migration files are PHP scripts
    where those queries located that define the necessary database changes. Ensure
    that you have set the `migrations` folder to be writable. |'
  prefs: []
  type: TYPE_TB
- en: 'Be sure to load the migration library in your controller with the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In this recipe, we''re going to create a simple users table and use a migration
    library to add and then remove a column from it. Enter the following SQL into
    your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First off, all your database migration files should be placed in the `migrations`
    folder at `/path/to/codeigniter/application/migrations/`.
  prefs: []
  type: TYPE_NORMAL
- en: If the folder does not already exist, you'll need to create it in the `/path/to/codeigniter/application/`
    folder—be sure to give write permissions to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/migrations/001_add_icon.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/migrate.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the filename `001_add_icon.php`. The first part (001) is the migration
    number; this will increment every time you add a new migration file. The second
    part (add_icon) is a descriptive indication of the purpose of the migration file.
    Add the following code into the file `001_add_icon.php`. This migration file defines
    the queries to be run to effect the migration change or to roll back from that
    change.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Add the following code into `/path/to/codeigniter/application/controllers/migrate.php`;
    the migrate controller gives us access to CodeIgniter's migration functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, so what have we done so far? We''ve configured migrations to run in CodeIgniter,
    we''ve created our first migration file (taking care to name it properly), and
    we have two files: the controller `migrate.php` and the migration file `001_add_icon.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the migration file `001_add_icon.php`, there are 222 functions; out of these,
    `up()` and `down()` are functions where you would define SQL to go with your code
    changes. The function `down()` is where you would define SQL for removing your
    changes should someone (perhaps another developer) wish to revert a code change
    you might have made; therefore, it supports SQL.
  prefs: []
  type: TYPE_NORMAL
- en: In the controller `migrate.php`, we've created several functions for us to work
    with migrations, such as `current()` and `latest()`. The following two recipes
    will show you some basic usage of these migrations.
  prefs: []
  type: TYPE_NORMAL
- en: Moving to the current version with current()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To simply alter your database so that it corresponds with the version number
    in `$config['migration_version']`, you should use the `current()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have followed the preceding recipe, *Using CodeIgniter database
    migrations*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using your command line (terminal application), navigate to the root of your
    CodeIgniter installation (where the `index.php` file is) and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we should bear in mind is the constructor in the migrate controller.
    The constructor is looking at how the migrate controller is accessed; it'll deny
    access to the migrate controller if it is accessed via anything other than the
    command line—a useful security measure.
  prefs: []
  type: TYPE_NORMAL
- en: By typing the command we just saw, you'll run `public function current()`. The
    function accepts no parameter. CodeIgniter will look into the migrations folder
    for the file whose number corresponds with the value set in `$config['migration_version']`
    in the configuration file `/path/to/codeigniter/application/config/migration.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling back/stepping forward with version()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may wish to deliberately alter the database by pointing it to a specific
    migration number. This can be achieved by use of the `version()` function within
    CodeIgniter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have followed the preceding recipe, *Using CodeIgniter database
    migrations*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using your command line (terminal application), navigate to the root of your
    CodeIgniter installation (where the index.php file is) and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '`number` is highlighted as it specifies the migration file number to move to,
    that is, `1`, `2`, `3`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we should bear in mind is the constructor in the migrate controller.
    The constructor is looking at how the migrate controller is accessed; it'll deny
    access to the migrate controller if it is accessed via anything other than the
    command line—a useful security measure.
  prefs: []
  type: TYPE_NORMAL
- en: By typing the preceding command, you'll run `public function version()`, passing
    to it the third parameter (which has the value of `1`). CodeIgniter will look
    into the migrations folder for the file whose number corresponds with the third
    parameter (1), which by amazing coincidence is the number of the migration files
    we created—who would have known this?
  prefs: []
  type: TYPE_NORMAL
- en: CodeIgniter will load the migration file `001_add_icon.php` and immediately
    run `public function up()`, which will add the column `user_icon` to the database
    table `'users'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can undo the creation of the `user_icon` column by entering the following
    in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: CodeIgniter will then run the public function `down()` in the migration file,
    which will remove the `user_icon` column.
  prefs: []
  type: TYPE_NORMAL
- en: Generating an XML from a database result
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generating an XML from a database may be useful in several ways, perhaps you
    wish to send data from a query across a network using a SOAP request, or perhaps
    you're using it to build some data for a web service. Whatever your purpose, this
    is how to do it—also we'll look at some real-world uses—for example, we'll generate
    the XML output from a database query.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, we need to create a table and enter some example data so that you''ll
    see some data in the CSV format, so with that in mind, copy the following code
    into SQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/export.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller `export.php`. This controller will load the CodeIgniter
    `dbutil` (database utility) class, which will provide support for various database-specific
    operations and generate the XML. Add the following code into your `export.php`
    controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, take a look at the line in bold—we're loading the database utilities class
    in the controllers constructor. This utilities class contains some excellent functions
    for working with databases. We're using it to provide access to the function `xml_from_result()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `export.php` controller function `index()` redirects us to `public function
    xml()`, which runs a database query. You could, of course, have any source of
    data here, but we''re calling a database and storing the result in the array `$query`.
    This is passed to the CodeIgniter function `xml_from_result()`. The `xml_from_result()`
    function takes the following two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$query`: This is the data for XML; in this case, the output of our database
    query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$config`: This is the configuration parameter; in this case, the XML formatting
    options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then echo the result of `xml_from_result()` to the screen—the result of which
    can be seen by viewing the page source code in your browser. You don't have to
    echo it out; you can store it in a variable if you require the XML for other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to separate a database query into its own model—the query is shown in
    the preceding controller for explanatory purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a CSV from a database result
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps one of the most common things you'll be asked to do, especially if you
    are building a complex application that may have users, products, orders, and
    various other metrics is to provide some sort of reporting of that data. Perhaps
    you'll be asked to generate a CSV file, and the following sections show how you
    do it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, we need to create a table and enter some example data so that you''ll
    see some data in the CSV format, so with that in mind, copy the following code
    into SQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the database is ready we''ll need to ensure that you''re calling the
    database utility class; make sure that you call it with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: You can either put this line in the constructor of your controller or call it
    in your controller function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, as we''re going to be creating a file, we need the support of the `''file''`
    helper, so make sure you''re calling the helper with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/export.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forcing download
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following code into your `export.php` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, take a look at the lines in bold—we're loading the CodeIgniter helper
    `'download'` and the database utilities class in the controller constructor. This'll
    help us with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `export.php` controller function `index()` redirects us to `public function
    csv()`, which runs a database query. You could, of course, have any source of
    data here, but we''re calling a database and storing the result in the array `$query`.
    This is passed to the CodeIgniter function `force_download()`, which accepts the
    following two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The name and extension of the file to be created (or in this case, downloaded)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The data that will go into the file; in this case, we''re using the CodeIgniter
    function `csv_from_result()` that will take a row of data from a database query
    and convert it into a delimiter-separated string of text. `csv_from_result()`
    takes the following three parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$query`: This is the data for the CSV; in this case, the output of our database
    query'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$delimiter`: This is the data delimiter, that is, it specifies how we are
    separating each cell worth of data; this is usually a comma (`,`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$newline`: This is the new line character; it is usually ''`\n\n`'''
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If all goes according to plan, `force_download()` will, as the name says, force
    a download of the CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: Saving to file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following code into your `export.php` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, take a look at the lines in bold; we're loading the CodeIgniter helpers
    `'download'`, and `'file'` and the database utilities class in the controller
    constructor. This'll help us with this recipe. We're also adding CodeIgniter-specific
    syntax to write a file to a disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `export.php` controller `function index()` redirects us to `public function
    csv()`, which runs a database query. You could, of course, have any source of
    data here, but we''re calling a database query and storing the result in the `$query`
    array. We then call the CodeIgniter `csv_from_result()` function where `csv_from_result()`
    takes the following three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$query`: The data for the CSV; in this case, the output of our database query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$delimiter`: The data delimiter, that is, it specifies how we are separating
    each cell worth of data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$newline`: The new line character; it is usually set to `''\n\n''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `csv_from_result()` function will store its output in the variable `$data`.
    We then try to run the CodeIgniter `function write_file()`, which accepts the
    following two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The path to write the file, including the filename and extension; remember that
    this path should be writeable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data to write to the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should all go as per the plan, the recipe will return the message `File write
    OK`—of course, you should replace it with your own code as you see fit. Should
    it fail, it'll return an error message and again replace it with your own code
    where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The chances are that if the file isn't being written, you don't have the necessary
    permissions to write to the desired destination folder. You will need to amend
    the permissions for the destination folder so that they are at a level high enough
    to allow CodeIgniter to write to it. For example, in Linux/Mac, you would use
    the `chmod` command in the terminal.
  prefs: []
  type: TYPE_NORMAL
