- en: Chapter 6. Working with Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章. 与数据库一起工作
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Configuring CodeIgniter for databases
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 CodeIgniter 数据库
- en: Connecting to multiple databases
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到多个数据库
- en: Active Record – Create (insert)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Active Record – 创建（插入）
- en: Active Record – Read (select)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Active Record – 读取（选择）
- en: Active Record – Update
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Active Record – 更新
- en: Active Record – Delete
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Active Record – 删除
- en: Looping through database results
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历数据库结果
- en: Counting the number of returned results with num_rows()
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 num_rows() 计算返回结果的数量
- en: Counting the number of returned results with count_all_results()
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 count_all_results() 计算返回结果的数量
- en: Counting the number of returned results
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算返回结果的数量
- en: Query binding
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询绑定
- en: Finding the last insert ID
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找最后插入的 ID
- en: Finding the number of affected rows
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找受影响行数
- en: Finding the last database query
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找最后的数据库查询
- en: Using CodeIgniter database migrations
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter 数据库迁移
- en: Moving to the current version with current()
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 current() 移动到当前版本
- en: Rolling back/stepping forward with version()
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 version() 回滚/前进
- en: Generating an XML from a database result
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库结果生成 XML
- en: Generating a CSV from a database result
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库结果生成 CSV
- en: Introduction
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Pretty much any application you build will require database access and a functionality,
    from basic **Create**, **Read**, **Update**, and **Delete** (**CRUD**) operations
    to more sophisticated approaches. In this chapter, we'll look at some fairly simple
    recipes (for example, simple CRUD operations), and then some more capable recipes
    such as connecting to multiple databases, database caching, and generating files
    as output.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎您构建的任何应用程序都需要数据库访问和功能，从基本的 **创建**、**读取**、**更新** 和 **删除** （**CRUD**）操作到更复杂的方法。在本章中，我们将查看一些相当简单的食谱（例如，简单的
    CRUD 操作），然后是一些更强大的食谱，例如连接到多个数据库、数据库缓存和生成输出文件。
- en: Some recipes are quite simple, so I won't provide all the files for you to copy
    (in some cases, it may be unnecessary); instead, many of the recipes are small
    blocks of code that you can drop into real-world scenarios as you need to.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一些食谱相当简单，所以我不提供所有文件供您复制（在某些情况下，这可能是不必要的）；相反，许多食谱都是小块代码，您可以在需要时将其放入实际场景中。
- en: Configuring CodeIgniter for databases
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 CodeIgniter 数据库
- en: 'If you have already configured CodeIgniter to connect with a database, you
    can skip this part, as all we''re going to do is make sure we can connect to a
    database; to do this, we''re going to amend the following two files:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经配置了 CodeIgniter 以与数据库连接，您可以跳过这部分，因为我们将要做的只是确保我们可以连接到数据库；为此，我们将修改以下两个文件：
- en: '`/path/to/codeigniter/application/config/database.php`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/config/database.php`'
- en: '`/path/to/codeigniter/application/config/autoload.php`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/config/autoload.php`'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In the `database.php` config file, look for the following lines and amend them
    accordingly:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `database.php` 配置文件中，查找以下行并相应修改：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The chances are that you'll not need to change `$db['default']['hostname']`
    from the `'localhost'`, and replace other values (`username`, `password`, and
    `database`) with the specific values for your environment.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 很可能您不需要更改 `$db['default']['hostname']` 从 `'localhost'`，并将其他值（`username`、`password`
    和 `database`）替换为您的环境中的特定值。
- en: 'In the `autoload.php` config file, look for the following line (around line
    55):'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `autoload.php` 配置文件中，查找以下行（大约在第 55 行）：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Ensure that the database is being autoloaded by adding it to the `$autoload`
    array like this:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保数据库正在通过将其添加到 `$autoload` 数组中自动加载，如下所示：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be sure to separate each library you're auto-loading with a comma, for example,
    `$autoload['libraries'] = array('database', 'session', 'javascript')` and so on.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保用逗号分隔您正在自动加载的每个库，例如，`$autoload['libraries'] = array('database', 'session',
    'javascript')` 等等。
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There's not a lot to this really; it's only setting the configuration settings,
    but one interesting point is that of autoloading the libraries. By placing a library
    name in this array in the autoload configuration file, you no longer need to load
    the library explicitly in a controller later in your application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上并没有太多；这只是设置配置设置，但一个有趣的观点是自动加载库。通过在自动加载配置文件中将库名放入此数组中，您就不需要在应用程序中的控制器中显式加载库了。
- en: Connecting to multiple databases
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到多个数据库
- en: There may be times when you require your application to connect to more than
    one database or database server. For example, imagine you managed an online shop,
    and you may wish to have one database to handle customer orders, billing, invoicing,
    and so on, and another database to store and maintain product and stock information.
    CodeIgniter can be configured to use many database instances, and the following
    section shows how you do it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能需要你的应用程序连接到多个数据库或数据库服务器。例如，想象你管理一个在线商店，你可能希望有一个数据库来处理客户订单、账单、发票等，而另一个数据库用于存储和维护产品库存信息。CodeIgniter
    可以配置为使用多个数据库实例，以下部分展示了如何操作。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In order to let CodeIgniter interact with two or more databases, we''ll need
    to amend a few settings in the `config` file at:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 CodeIgniter 与两个或多个数据库交互，我们需要在以下 `config` 文件中修改一些设置：
- en: '`/path/to/codeigniter/application/config/database.php`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/config/database.php`'
- en: Scroll down to the bottom of the file and copy the following into it. Remember
    to replace `hostname`, `username`, `password`, and `database` with the correct
    details for your setup.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到文件底部并将以下内容复制进去。请记住，用你的设置中的正确细节替换 `hostname`、`username`、`password` 和 `database`。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Look closely at the lines in bold. The first four lines in each database group
    details the standard host, username, password, and database name for each database
    you wish to use. But, also look at the following lines:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看粗体行。每个数据库组的前四行详细说明了你希望使用的每个数据库的标准主机、用户名、密码和数据库名。但，也要看看以下行：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The database configuration setting `''pconnect''` tells CodeIgniter whether
    you wish to have persistent connections or not. Setting this value to `False`
    in each database group allows CodeIgniter to communicate with more than one database.
    We''re going to create two databases with one table in each. Obviously, your requirements
    will be different, but you can adapt to the recipe as necessary. Copy the following
    code into your database:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库配置设置 `'pconnect'` 告诉 CodeIgniter 你是否希望有持久连接。将此值设置为 `False` 在每个数据库组中允许 CodeIgniter
    与多个数据库通信。我们将创建两个数据库，每个数据库中有一个表。显然，你的需求可能不同，但你可以根据需要调整配方。将以下代码复制到你的数据库中：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Now, we have two databases to work with and have configured the `database.php`
    configuration file to communicate with both of them, so now we can begin to access
    each database in turn.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有两个数据库可以工作，并且已经配置了 `database.php` 配置文件以与它们通信，因此现在我们可以依次访问每个数据库。
- en: 'We''re going to create the controller, `''database1''`, and `''database2''`
    files that would be available at:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建控制器文件 `'database1'` 和 `'database2'`，它们将位于：
- en: '`/path/to/codeigniter/application/controllers/multi_database.php`: This is
    the controller file; it will call models for both databases `''database1''` and
    `''database2''`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/multi_database.php`: 这是一个控制器文件；它将调用两个数据库
    `''database1''` 和 `''database2''` 的模型。'
- en: '`/path/to/codeigniter/application/models/multi_database_model_db_1.php`: This
    model will communicate with the first database `''database1''`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/multi_database_model_db_1.php`: 此模型将与第一个数据库
    `''database1''` 通信。'
- en: '`/path/to/codeigniter/application/models/multi_database_model_db_2.php`: This
    model will communicate with the second database `''database2''`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/multi_database_model_db_2.php`: 此模型将与第二个数据库
    `''database2''` 通信。'
- en: 'The following steps will help us in accessing each database:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们访问每个数据库：
- en: Ensure that `$db['users']['pconnect']` in `/config/database.php` is set to `FALSE`,
    and you have entered the correct access information for each database.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 `/config/database.php` 中的 `$db['users']['pconnect']` 设置为 `FALSE`，并且你已经为每个数据库输入了正确的访问信息。
- en: 'Create the file `/path/to/codeigniter/application/controllers/multi_database.php`.
    This controller will call the two database models and output results from each.
    Add the following code to the controller file `multi_database.php`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/controllers/multi_database.php`。此控制器将调用两个数据库模型并输出每个模型的结果。将以下代码添加到控制器文件
    `multi_database.php` 中：
- en: '[PRE6]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create the model `/path/to/codeigniter/application/models/multi_database_model_db_1php`.
    This model will communicate with `''database1''`. Add the following code to the
    model:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模型 `/path/to/codeigniter/application/models/multi_database_model_db_1php`。此模型将与
    `'database1'` 通信。将以下代码添加到模型中：
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create the model `/path/to/codeigniter/application/models/multi_database_model_db_2.php`.
    This model will communicate with `''database2''`. Add the following code to the
    model:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模型 `/path/to/codeigniter/application/models/multi_database_model_db_2.php`。此模型将与
    `'database2'` 进行通信。将以下代码添加到模型中：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Firstly, let''s pay attention to the settings we''ve defined for each one of
    our databases in the file `/path/to/codeigniter/application/config/database.php`.
    These database settings are specific to each database we want to connect to. We
    have also set the configuration variable `''pconnect''` to `FALSE` for each of
    our databases (see the preceding bold text). When we run the controller `Multi_database`
    in the browser, the controller will load our two database models named—for ease
    of explanation—`''Multi_database_model_db_1''` and `''Multi_database_model_db_2''`.
    The `Multi_database` controller will then call one function from each model, again
    named `select_1` and `select_2` for ease of explanation. The following code shows
    the same:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们关注在文件 `/path/to/codeigniter/application/config/database.php` 中为我们的每个数据库定义的设置。这些数据库设置是针对我们想要连接的每个数据库特定的。我们还为我们的每个数据库设置了配置变量
    `'pconnect'` 为 `FALSE`（见前面的粗体文本）。当我们通过浏览器运行 `Multi_database` 控制器时，控制器将加载我们的两个数据库模型，为了便于解释，命名为
    `'Multi_database_model_db_1'` 和 `'Multi_database_model_db_2'`。`Multi_database`
    控制器将随后调用每个模型中的一个函数，再次为了便于解释，命名为 `select_1` 和 `select_2`。以下代码显示了相同的内容：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Okay! So far so good. There''s nothing new here—just calling some database
    models; however, it''s inside those models that things get interesting. Let''s
    take a look at the code for the model `Multi_database_model_db_1`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！到目前为止一切顺利。这里没有什么新内容——只是调用一些数据库模型；然而，有趣的事情发生在这些模型内部。让我们看看模型 `Multi_database_model_db_1`
    的代码：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''re loading the database `''database1''`—meaning, we''re connecting to a
    database called `''database1''` using the settings defined for `''database1''`
    in the `database.php` configuration file—and storing that in the object which
    we''re calling, that is, `$DBconn1`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在加载数据库 `'database1'`——这意味着，我们正在使用在 `database.php` 配置文件中为 `'database1'` 定义的设置来连接一个名为
    `'database1'` 的数据库，并将其存储在名为 `$DBconn1` 的对象中：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we''re using the database object `$DBconn1` to run a query and store
    the database result object in the variable `$query1`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用数据库对象 `$DBconn1` 来运行一个查询，并将数据库结果对象存储在变量 `$query1` 中：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We then return `$query` to the calling controller. The controller `Multi_database`
    then loops through the `$query1` result object, echoing as we go:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将 `$query` 返回给调用控制器。`Multi_database` 控制器随后遍历 `$query1` 结果对象，边走边输出：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Active Record – create (insert)
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动记录 – 创建（插入）
- en: There are several ways to insert data into a database using CodeIgniter Active
    Record; for example, `$this->db->insert()` and `$this->db->insert_batch()`. The
    first will insert only one record at a time, and the second will insert an array
    of data as individual rows into the database; this can be quite useful if you
    know you need to insert more than one record at a time, thereby saving you the
    trouble of calling `insert()` more than once.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter 活动记录将数据插入数据库有几种方法；例如，`$this->db->insert()` 和 `$this->db->insert_batch()`。第一个一次只插入一条记录，而第二个将数据数组作为单独的行插入数据库；如果你知道需要一次插入多条记录，这可以非常有用，从而避免多次调用
    `insert()`。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This is the SQL code required to support this recipe; you''ll need to adapt
    it to your circumstances. Copy the following SQL code into your database:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是支持此菜谱所需的 SQL 代码；你需要根据你的情况对其进行调整。将以下 SQL 代码复制到你的数据库中：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following two files (or amend those files if you
    have already created them):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下两个文件（或者如果你已经创建了这些文件，则修改它们）：
- en: '`/path/to/codeigniter/application/controllers/database.php`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/database.php`'
- en: '`/path/to/codeigniter/application/models/database_model.php`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/database_model.php`'
- en: 'The following steps will demonstrate how to insert data into a database using
    CodeIgniter Active Record:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将演示如何使用 CodeIgniter 活动记录将数据插入数据库：
- en: 'Add the following code into the controller `database.php`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到控制器 `database.php` 中：
- en: '[PRE15]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code into the model `database_model.php`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到模型 `database_model.php` 中：
- en: '[PRE16]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are two methods used here: `create()` and `create_batch()`. Let''s take
    each function in turn and go through how they work.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用了两种方法：`create()` 和 `create_batch()`。让我们逐一查看每个函数的工作原理。
- en: The public function create()
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共函数 create()
- en: 'The `create()` function should be fairly familiar; we''re creating an array
    (named `$data`) and populating it with the data for one user or equivalent to
    one row''s insert. The `create()` method then passes the `$data` array to the
    model function `insert_data()` with the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`create()` 函数应该相当熟悉；我们正在创建一个数组（命名为 `$data`）并用一个用户的数据或相当于一行插入的数据填充它。然后 `create()`
    方法将 `$data` 数组传递给模型函数 `insert_data()`，如下所示：'
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The model will then insert one row into the table `ch6_users`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 模型将随后向表 `ch6_users` 插入一行：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The public function create_batch()
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共函数 `create_batch()`
- en: 'The `create_batch()` public function similar to the preceding functionality
    of `create()`, but rather than passing an array with one set of items, we create
    a multidimensional array with multiple rows of data as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的 `create()` 功能类似的 `create_batch()` 公共函数，但不是传递包含一组项目的数组，而是创建一个包含多行数据的二维数组，如下所示：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We then send that array to a new model function `create_batch()`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将该数组发送到新的模型函数 `create_batch()`：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `function create_batch()` function uses the CodeIgniter `function insert_batch()`
    to INSERT each row into the database.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`function create_batch()` 函数使用 CodeIgniter 的 `function insert_batch()` 将每一行插入到数据库中。'
- en: Active Record – read (select)
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Active Record – 读取（选择）
- en: The R of CRUD represents the process to select data from a database. CodeIgniter
    uses the `$this->db->get()` database function to fetch rows from the database.
    Its usage is explained in the following sections.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD 中的 R 代表从数据库中选择数据的过程。CodeIgniter 使用 `$this->db->get()` 数据库函数从数据库中检索行。其用法将在以下章节中解释。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The following is the SQL code required to support this recipe; you'll need to
    adapt it to your circumstances.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要支持此菜谱的 SQL 代码；您需要根据您的具体情况对其进行调整。
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following two files (or amend those files if you
    have already created them):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下两个文件（或者如果您已经创建了这些文件，则修改它们）：
- en: '`/path/to/codeigniter/application/controllers/database.php`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/database.php`'
- en: '`/path/to/codeigniter/application/models/database_model.php\`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/database_model.php`'
- en: 'The following steps will demonstrate how to read data into a database using
    CodeIgniter Active Record:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将演示如何使用 CodeIgniter Active Record 将数据读取到数据库中：
- en: 'Add the following code into the file `/path/to/codeigniter/application/controllers/database.php`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件 `/path/to/codeigniter/application/controllers/database.php` 中：
- en: '[PRE22]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following code into the file `/path/to/codeigniter/application/models/database_model.php`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件 `/path/to/codeigniter/application/models/database_model.php` 中：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You know it has worked if you see the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到以下输出，则表示操作成功：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the preceding controller, `public function select_row()` assigns `$id` with
    the value `1`—however, this can also be done from **post**, **get**, **session**,
    or another source—and loads the database model, passing the variable `$id` to
    it as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的控制器中，`public function select_row()` 将 `$id` 赋值为 `1`——然而，这也可以从 **post**、**get**、**session**
    或其他来源完成——并加载数据库模型，如下所示将变量 `$id` 传递给它：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The model function `select_row()` pulls the matching record from the table `'ch6_users'`
    and returns it to the calling controller.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 模型函数 `select_row()` 从表 `'ch6_users'` 中提取匹配的记录并将其返回给调用控制器。
- en: Active Record – update
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Active Record – 更新
- en: The U of CRUD represents the process to update data record(s) from a database
    in a database. CodeIgniter uses the database function `$this->db->update()` to
    update database records; this recipe will explain how it is done.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD 中的 U 代表在数据库中更新数据记录的过程。CodeIgniter 使用数据库函数 `$this->db->update()` 更新数据库记录；本菜谱将解释如何进行。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The following is the SQL code required to support this recipe; you'll need to
    adapt it to your circumstances.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要支持此菜谱的 SQL 代码；您需要根据您的具体情况对其进行调整。
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following two files (or amend those files if you
    have already created them):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下两个文件（或者如果您已经创建了这些文件，则修改它们）：
- en: '`/path/to/codeigniter/application/controllers/database.php`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/database.php`'
- en: '`/path/to/codeigniter/application/models/database_model.php`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/database_model.php`'
- en: 'The following step will demonstrate how to update data into a database using
    CodeIgniter Active Record:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将演示如何使用 CodeIgniter Active Record 更新数据库中的数据：
- en: 'Add the following code into the file: `/path/to/codeigniter/application/controllers/database.php`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件：`/path/to/codeigniter/application/controllers/database.php`
- en: '[PRE27]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the controller we just saw, `public function update_row()` assigns `$id`
    with the value `1`—however this can be from post, get, session or another source—and
    loads the database model, passing the variable `$id` to it as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚才看到的控制器中，`public function update_row()`将`$id`赋值为`1`——然而，这可以来自post、get、session或另一个来源——并将数据库模型加载进来，如下将变量`$id`传递给它：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The model function `update_row()` updates the matching record from the table
    as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 模型函数`update_row()`按照以下方式更新表中的匹配记录：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: ActiveRecord – delete
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ActiveRecord – 删除
- en: The D of CRUD is used for deleting rows of data in a database table. CodeIgniter
    uses the `$this->db->delete()`database function to remove rows from a database;
    it is used in the following section.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD中的D用于在数据库表中删除数据行。CodeIgniter使用`$this->db->delete()`数据库函数从数据库中删除行；它将在以下部分中使用。
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following is the SQL code required to support this recipe; you''ll need
    to adapt it to your circumstances:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要支持此食谱的SQL代码；你需要根据你的情况对其进行调整：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following two files (or amend those files if you
    have already created them):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下两个文件（或者如果你已经创建了这些文件，则修改它们）：
- en: '`/path/to/codeigniter/application/controllers/database.php`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/database.php`'
- en: '`/path/to/codeigniter/application/models/database_model.php`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/database_model.php`'
- en: 'The following steps will demonstrate how to delete data from a database using
    CodeIgniter Active Record:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将演示如何使用CodeIgniter Active Record从数据库中删除数据：
- en: 'Add the following code into the file `/path/to/codeigniter/application/controllers/database.php`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件`/path/to/codeigniter/application/controllers/database.php`中：
- en: '[PRE31]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following code into the file `/path/to/codeigniter/application/models/database_model.php`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件`/path/to/codeigniter/application/models/database_model.php`中：
- en: '[PRE32]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the preceding controller, `public function delete_row()` assigns `$id` with
    the value `1`—however, this can be from post, get, session or another source—and
    loads the database model, passing the variable `$id` to it as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的控制器中，`public function delete_row()`将`$id`赋值为`1`——然而，这可以来自post、get、session或另一个来源——并将数据库模型加载进来，如下将变量`$id`传递给它：
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The model function `delete_row()`deletes the matching record from the table:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 模型函数`delete_row()`从表中删除匹配的记录：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Looping through the database results
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历数据库结果
- en: In any application with database connectivity, you'll probably need to display
    records from a database; looping through rows of data returned from a query is
    one of the most common tasks you'll perform in programming. CodeIgniter handles
    looping through database results using PHP for each statement. In this recipe,
    we will loop through each record at a time, echoing out the relevant information.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何具有数据库连接的应用程序中，你可能需要显示数据库中的记录；遍历查询返回的数据行是你在编程中将要执行的最常见任务之一。CodeIgniter使用PHP中的每个语句来处理遍历数据库结果。在这个食谱中，我们将一次遍历每条记录，输出相关信息。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To support this recipe, we are going to create a database table and write some
    data to it. If you already have the data, you can skip this recipe; if not, copy
    the following code into your database:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持这个食谱，我们将创建一个数据库表并向其中写入一些数据。如果你已经有了数据，你可以跳过这个食谱；如果没有，请将以下代码复制到你的数据库中：
- en: '[PRE35]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add or adapt the following code into your controller:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到你的控制器中：
- en: '[PRE36]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add or adapt the following code into your model:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到你的模型中：
- en: '[PRE37]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add or adapt the following code into your view:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到你的视图中：
- en: '[PRE38]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Firstly, let's look at the SQL code; if you used the preceding SQL code, all
    we would have done is create a very simple table and populate it with two rows
    of data.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看SQL代码；如果你使用了前面的SQL代码，我们所做的只是创建一个非常简单的表，并用两行数据填充它。
- en: 'Next, we call the controller function `loop_through_data()`, which loads a
    model; in this case, rename `Some_model` to the model relevant to your application.
    We call the model function `select_data()`, storing its returned result in the
    `$data` array, or more specifically, in a section of the `$data` array that we''re
    calling `''query''`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用控制器函数`loop_through_data()`，它加载一个模型；在这种情况下，将`Some_model`重命名为与你的应用程序相关的模型。我们调用模型函数`select_data()`，将返回的结果存储在`$data`数组中，或者更具体地说，在`$data`数组的一个部分，我们称之为`'query'`：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The model function `select_data()` fetches all the rows from the database table
    `loop_table` and returns it to the calling controller function.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 模型函数`select_data()`从数据库表`loop_table`中检索所有行，并将其返回给调用控制器函数。
- en: 'Returning to our controller, now that we have the database result in our `$data`
    array, we can call the `view` file `some_view.php`—you obviously need to rename
    it to something else in your application—and pass the `$data` array to it:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到我们的控制器，现在我们已经将数据库结果存储在`$data`数组中，我们可以调用`view`文件`some_view.php`——显然，您需要将其重命名为您应用程序中的其他名称——并将`$data`数组传递给它：
- en: '[PRE40]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `view` file then uses a simple `foreach()`loop to cycle through each result
    in `$query`. Let''s look at this `foreach()` loop more closely. Look at the following
    line of code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`view`文件随后使用简单的`foreach()`循环遍历`$query`中的每个结果。让我们更仔细地看看这个`foreach()`循环。看看以下代码行：'
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Remember how we stored the database result in `$data['query']`? Well, we're
    going to use the `'query'` part of the `$data` array, which has stored the database
    results, and we're going to use the CodeIgniter function `result()` on it. I hear
    you ask, "What does `result()` do?" The `result()` function will take an object
    or array and allow you to iterate through each row, allowing you to act on the
    individual data items within that row.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们是如何将数据库结果存储在`$data['query']`中的吗？那么，我们将使用`$data`数组中的`'query'`部分，它已存储数据库结果，并将使用CodeIgniter函数`result()`来处理它。我听到你问，“`result()`函数做什么？”`result()`函数将接受一个对象或数组，并允许您遍历每一行，允许您对那一行中的单个数据项进行操作。
- en: 'So, we''re using `result()` to split apart `$query` into each row, passing
    that row to `$row` (because it''s obvious) and allowing us to do something like:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们使用`result()`将`$query`拆分为每一行，将那一行传递给`$row`（因为这是显而易见的），并允许我们执行如下操作：
- en: '[PRE42]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This is displaying the first and last name of each person in `$row`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在`$row`中显示每个人的姓名和姓氏。
- en: Counting the number of returned results with num_rows()
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`num_rows()`计算返回的结果数量
- en: It's useful to count the number of results returned—often bugs can arise if
    a section of the code that expects to have at least one row is passed with zero
    rows. Without handling the eventuality of a zero result, an application may become
    unpredictably unstable and may give away hints to a malicious user about the architecture
    of the app. Ensuring correct handling of zero results is what we're going to focus
    on here.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 计算返回的结果数量是有用的——如果一段代码期望至少有一行，但传递了零行，则可能会出现错误。如果不处理零结果的可能性，应用程序可能会变得不可预测地不稳定，并可能向恶意用户提供有关应用程序架构的线索。确保正确处理零结果是我们在这里要关注的问题。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''re going to create a block of code for a model and controller. You may
    already have code in a controller, model, or view that does all or some of the
    following—obviously, you can skip any step that you do not need. Add or adapt
    the ensuing code into your controller:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个模型和控制器代码块。您可能已经在控制器、模型或视图中编写了执行以下所有或部分操作的代码——显然，您可以跳过您不需要的任何步骤。将以下代码添加或修改到您的控制器中：
- en: '[PRE43]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add or adapt the following code into your model:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到您的模型中：
- en: '[PRE44]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add or adapt the following code into your view:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到您的视图中：
- en: '[PRE45]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is quite common; a controller loads the required model and calls a function
    within that model; the result of this model is stored in an array. This is then
    passed to a view. It is here in the view that we'd count the number of rows. Take
    a look at the line in bold. We're using the CodeIgniter function `num_rows()`
    to look into the `$query` result and count the number of rows returned by the
    model. We're asking whether the number of rows is greater than zero. If it is,
    there must be at least one result from the model—we then look through the `$query`
    array as we would normally. However, if the number of results isn't greater than
    zero, it would mean that there were no results returned by the model. So, we use
    an else statement to display a brief message stating that there were `No results
    returned`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当常见；控制器加载所需的模型并调用该模型中的函数；该模型的结果存储在数组中。然后将其传递到视图中。正是在这里，我们会计算行数。看看加粗的行。我们使用CodeIgniter函数`num_rows()`来查看`$query`结果，并计算模型返回的行数。我们询问行数是否大于零。如果是，则意味着模型至少有一个结果——然后我们像通常一样遍历`$query`数组。然而，如果结果的数量不大于零，这意味着模型没有返回任何结果。因此，我们使用else语句显示一条简短的消息，说明没有返回结果。
- en: Counting the number of returned results with count_all_results()
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`count_all_results()`计算返回的结果数量
- en: It's useful to count the number of results returned—often bugs can arise if
    a section of code which expects to have at least one row is passed zero rows.
    Without handling the eventuality of a zero result, an application may become unpredictably
    unstable and may give away hints to a malicious user about the architecture of
    the app. Ensuring correct handling of zero results is what we're going to focus
    on here.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 计算返回的结果数量是有用的——如果代码部分期望至少有一行，而传递了零行，则可能会出现错误。如果不处理零结果的可能性，应用程序可能会变得不可预测地不稳定，并可能向恶意用户提供有关应用程序架构的线索。确保正确处理零结果是我们在这里要关注的内容。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add or adapt the following code into your controller:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到您的控制器中：
- en: '[PRE46]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Add or adapt the following code into your model:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到您的模型中：
- en: '[PRE47]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add or adapt the following code into your view:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到您的视图中：
- en: '[PRE48]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This is fairly similar to the recipe above `num_rows()`, but there are a few
    key differences. We start off by calling a controller that loads the required
    model and calls a function within it. Take a look at the code in bold: `$this->db->count_all_results();`.
    This will return the number of results returned in a given query. The result of
    this code is stored in an array and passed to a view where we test whether the
    variable `$num_results` is set; if it is, we echo a brief message indicating the
    number of results.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这与上面 `num_rows()` 的配方相当类似，但有一些关键的区别。我们首先调用一个控制器，该控制器加载所需的模型并在其中调用一个函数。看看加粗的代码：`$this->db->count_all_results();`。这将返回给定查询返回的结果数量。此代码的结果存储在数组中，并传递到视图中，我们测试变量
    `$num_results` 是否已设置；如果是，我们输出一个简短的消息，指示结果数量。
- en: Query binding
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询绑定
- en: Binding queries is another useful security process; if you use binding with
    your queries, values are automatically escaped by CodeIgniter, and there is no
    need for you to manually do so.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定查询是另一个有用的安全过程；如果您在查询中使用绑定，CodeIgniter 会自动转义值，您无需手动进行。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the following SQL into your database:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下 SQL 代码复制到您的数据库中：
- en: '[PRE49]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How to do it...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In any of your models, adapt your query code to reflect the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的任何模型中，调整您的查询代码以反映以下内容：
- en: '[PRE50]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How it works
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Using a table called `users` as an example, the query will try to fetch all
    records where `users.is_active` equals `Y` and `users.created_date` is greater
    than `1359706809 (02/01/2013 – 03:20)`. But, you'll notice that there are two
    question marks in the query, and each question mark represents an item in the
    `$data array`. The values in the `$data` array are passed in order and into the
    query by the line `$this->db->query($query, $data);`. So, the first question mark
    in the query will be replaced with the first item in the array, the second question
    mark in the query will be replaced by the second item in the array, and so on.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以名为 `users` 的表为例，查询将尝试获取所有 `users.is_active` 等于 `Y` 且 `users.created_date` 大于
    `1359706809 (02/01/2013 – 03:20)` 的记录。但，您会注意到查询中有两个问号，每个问号代表 `$data array` 中的一个项目。`$data`
    数组中的值按顺序传递到查询中，通过这一行 `$this->db->query($query, $data);`。因此，查询中的第一个问号将被数组中的第一个项目替换，查询中的第二个问号将被数组中的第二个项目替换，依此类推。
- en: Finding the last insert id
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找最后插入的 ID
- en: Returning the Primary Key of the last inserted row can be useful in instances
    where you may wish to write data to more than one table and whose data may be
    related via the keys. CodeIgniter provides support for returning the last inserted
    key.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最后插入行的主键在您可能希望将数据写入多个表且数据可能通过键相关联的情况下非常有用。CodeIgniter 提供了返回最后插入键的支持。
- en: How to do it...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add or adapt the following code into a model:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到模型中：
- en: '[PRE51]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How it works...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Take a look at the lines in bold. We test for the returned value of `$this->db->insert($data);`,
    which will return true if successful and false if there was an error. If the returned
    value is true, we grab the Primary Key of the last inserted record for this connection;
    this value along with `return $this->db->insert_id();`is returned from the model
    to the code that called the function. If the database insert was unsuccessful,
    it would return false. You can adapt the above recipe easily; just drop the lines
    in bold into your model.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 看看加粗的行。我们测试 `$this->db->insert($data);` 返回的值，如果成功则返回 true，如果出错则返回 false。如果返回值是
    true，我们获取此连接最后插入记录的主键；此值与 `return $this->db->insert_id();` 一起从模型返回到调用函数的代码。如果数据库插入失败，它将返回
    false。您可以轻松地调整上述配方；只需将加粗的行放入您的模型中。
- en: Finding the number of affected rows
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找受影响行数
- en: Finding the number of affected rows can be useful in several ways—perhaps you
    want to update some records and only proceed if a certain number of records are
    updated, or perhaps you simply want to display the number of rows that have been
    deleted or updated by a query.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 查找受影响行数可以在几种方式下有用——也许你想要更新一些记录，并且只有当一定数量的记录被更新时才继续，或者也许你只是想显示被查询删除或更新的行数。
- en: How to do it...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add or adapt the following code into your model:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加或修改到你的模型中：
- en: '[PRE52]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: How it works...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The model `function update()` accepts two parameters: a `$data` array and the
    `$id` array of the database row we wish to update.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 模型`function update()`接受两个参数：一个`$data`数组和我们希望更新的数据库行的`$id`数组。
- en: 'Next, we test for the returned value of `$this->db->update($data);`, which
    will return true if successful and false if there was an error. If the returned
    value is true, we grab the number of affected rows for the update with the following
    line:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们测试`$this->db->update($data);`返回的值，如果成功将返回true，如果出错将返回false。如果返回值是true，我们将使用以下行获取更新的受影响行数：
- en: '[PRE53]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: If the update doesn't happen, the returned value will be false.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果更新没有发生，返回值将是false。
- en: Finding the last database query
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找最后数据库查询
- en: Sometimes, it is useful to know about the last query that was run against the
    database, either for debugging purposes or for reasons where you wish to have
    an audit trail of every interaction with the database—you'll be surprised at the
    number of times you'll need to do this. CodeIgniter comes with a really handy
    function that you can use to write out the most recent query that CodeIgniter
    sent to the database.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，了解对数据库执行的最后查询是有用的，无论是为了调试目的，还是出于你希望有数据库每次交互的审计记录的原因——你会惊讶于你需要这样做多少次。CodeIgniter提供了一个非常实用的函数，你可以用它来记录CodeIgniter最近发送到数据库的查询。
- en: How to do it...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add or adapt the following line of code into your controller or model:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行代码添加或修改到你的控制器或模型中：
- en: '[PRE54]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Quite simply, this function will return the last query to be sent to the database;
    you can place it in the controller or model (even the view if you wish, but it''s
    better to keep it at the logical side of your application rather than the view).
    It will return the query that you can use as an audit in the form of a string;
    for example, consider the following line of code:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，这个函数将返回发送到数据库的最后查询；你可以将它放在控制器或模型中（如果你愿意，甚至可以放在视图中，但最好将其保留在应用程序的逻辑部分而不是视图中）。它将以字符串的形式返回你可以用作审计的查询；例如，考虑以下代码行：
- en: '[PRE55]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The preceding line of code will write the last query to your log files, where
    `'level'` denotes the type of message. We will go through some error reporting
    and logging recipes in [Chapter 9](ch09.html "Chapter 9. Extending the Core"),
    *Extending the core*.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码将最后查询写入到你的日志文件中，其中`'level'`表示消息类型。我们将在[第9章](ch09.html "第9章。扩展核心")中介绍一些错误报告和日志记录配方，*扩展核心*。
- en: Using CodeIgniter database migrations
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CodeIgniter数据库迁移
- en: Imagine that you work in a team of other developers, and everyone is busy working,
    making changes to the code and the database structure. Keeping up with all of
    those changes to a database can become a challenge, particularly if many people
    are working on roughly the same area of the project.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在一个由其他开发者组成的团队中工作，每个人都忙于工作，对代码和数据库结构进行更改。跟上所有这些数据库更改可能成为一个挑战，尤其是当许多人几乎在项目的同一区域工作时。
- en: CodeIgniter Migration gives you the option to install (or rollback) the changes
    of a database structure that might support the changes in the code. For example,
    if you were working on coding changes for, say, a user registration script—this
    change requires a column to be added to a database table; you could include a
    CodeIgniter database migration script with your version control commit (assuming
    you're using version control)—other developers will now know that for your code
    change to work they must run the migration which would amend their database.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter迁移为你提供了安装（或回滚）可能支持代码更改的数据库结构更改的选项。例如，如果你正在对用户注册脚本进行编码更改——这个更改需要在数据库表中添加一个列；你可以在你的版本控制提交中包含一个CodeIgniter数据库迁移脚本（假设你在使用版本控制）——其他开发者现在将知道，为了你的代码更改能够工作，他们必须运行迁移，这将修改他们的数据库。
- en: Migration also allows you to roll back changes. This should not be confused
    with the database concept of rolling back with transactions; think of rolling
    back using migrations as uninstalling previously installed changes.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移还允许你回滚更改。这不应与数据库事务回滚的概念混淆；将使用迁移回滚想象成卸载之前安装的更改。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'There are some configuration settings we need to change before we do this,
    so open `/path/to/codeigniter/application/config/migration.php` and find the following
    options:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行此操作之前，我们需要更改一些配置设置，因此打开 `/path/to/codeigniter/application/config/migration.php`
    并找到以下选项：
- en: '| Preference | Default Value | Options | Description |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| Preference | Default Value | Options | Description |'
- en: '| --- | --- | --- | --- |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `migration_enabled` | FALSE | TRUE/FALSE | Specifies whether or not you wish
    migrations to be enabled; TRUE is enabled, and FALSE is disabled. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `migration_enabled` | FALSE | TRUE/FALSE | 指定你是否希望启用迁移；TRUE 是启用，FALSE 是禁用。|'
- en: '| `migration_version` | 0 | None | Specifies the current migration version
    your database uses or rather the most suitable migration version you wish to work
    with. We''ll talk more about this later in the chapter. By using `current()`,
    we will install the up-to-date value set in `''migration_version''`. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `migration_version` | 0 | None | 指定数据库当前使用的迁移版本，或者更确切地说，是你希望工作的最合适的迁移版本。我们将在本章后面详细讨论这个问题。通过使用
    `current()`，我们将安装 `''migration_version''` 中设置的最新值。|'
- en: '| `migration_path` | APPPATH.''migrations/'' | None | Specifies the path of
    the folder where you store the migration files. Migration files are PHP scripts
    where those queries located that define the necessary database changes. Ensure
    that you have set the `migrations` folder to be writable. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `migration_path` | APPPATH.''migrations/'' | None | 指定存储迁移文件的文件夹路径。迁移文件是
    PHP 脚本，其中包含定义必要数据库更改的查询。请确保已将 `migrations` 文件夹设置为可写。|'
- en: 'Be sure to load the migration library in your controller with the following
    line:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 确保使用以下行在你的控制器中加载迁移库：
- en: '[PRE56]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In this recipe, we''re going to create a simple users table and use a migration
    library to add and then remove a column from it. Enter the following SQL into
    your database:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个简单的用户表，并使用迁移库添加和删除该表中的一个列。将以下 SQL 语句输入到你的数据库中：
- en: '[PRE57]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How to do it...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First off, all your database migration files should be placed in the `migrations`
    folder at `/path/to/codeigniter/application/migrations/`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，所有你的数据库迁移文件都应该放在 `/path/to/codeigniter/application/migrations/` 路径下的 `migrations`
    文件夹中。
- en: If the folder does not already exist, you'll need to create it in the `/path/to/codeigniter/application/`
    folder—be sure to give write permissions to it.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件夹尚不存在，你需要在 `/path/to/codeigniter/application/` 文件夹中创建它——确保给它写入权限。
- en: 'We''re going to create the following two files:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将要创建以下两个文件：
- en: '`/path/to/codeigniter/application/migrations/001_add_icon.php`'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/migrations/001_add_icon.php`'
- en: '`/path/to/codeigniter/application/controllers/migrate.php`'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/migrate.php`'
- en: Tip
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Notice the filename `001_add_icon.php`. The first part (001) is the migration
    number; this will increment every time you add a new migration file. The second
    part (add_icon) is a descriptive indication of the purpose of the migration file.
    Add the following code into the file `001_add_icon.php`. This migration file defines
    the queries to be run to effect the migration change or to roll back from that
    change.
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意文件名 `001_add_icon.php`。第一部分（001）是迁移号；每次添加新的迁移文件时，它都会递增。第二部分（add_icon）是对迁移文件目的的描述性指示。将以下代码添加到文件
    `001_add_icon.php` 中。此迁移文件定义了要运行的查询以实现迁移更改或从该更改中回滚。
- en: '[PRE58]'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Add the following code into `/path/to/codeigniter/application/controllers/migrate.php`;
    the migrate controller gives us access to CodeIgniter's migration functions.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `/path/to/codeigniter/application/controllers/migrate.php`；迁移控制器为我们提供了访问
    CodeIgniter 迁移函数的权限。
- en: '[PRE59]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Okay, so what have we done so far? We''ve configured migrations to run in CodeIgniter,
    we''ve created our first migration file (taking care to name it properly), and
    we have two files: the controller `migrate.php` and the migration file `001_add_icon.php`.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，到目前为止我们做了什么？我们已经配置了 CodeIgniter 中的迁移，我们创建了第一个迁移文件（注意正确命名），并且我们有两个文件：控制器 `migrate.php`
    和迁移文件 `001_add_icon.php`。
- en: In the migration file `001_add_icon.php`, there are 222 functions; out of these,
    `up()` and `down()` are functions where you would define SQL to go with your code
    changes. The function `down()` is where you would define SQL for removing your
    changes should someone (perhaps another developer) wish to revert a code change
    you might have made; therefore, it supports SQL.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移文件`001_add_icon.php`中，有222个函数；在这些函数中，`up()`和`down()`是定义与你的代码更改一起的SQL语句的函数。`down()`函数是定义如果有人（可能是另一个开发者）希望撤销你可能做出的代码更改时，将定义用于删除更改的SQL语句的地方；因此，它支持SQL。
- en: In the controller `migrate.php`, we've created several functions for us to work
    with migrations, such as `current()` and `latest()`. The following two recipes
    will show you some basic usage of these migrations.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器`migrate.php`中，我们创建了一些供我们操作的迁移函数，例如`current()`和`latest()`。以下两个食谱将向你展示这些迁移的一些基本用法。
- en: Moving to the current version with current()
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用current()移动到当前版本
- en: To simply alter your database so that it corresponds with the version number
    in `$config['migration_version']`, you should use the `current()` function.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要简单地更改你的数据库，使其与`$config['migration_version']`中的版本号相对应，你应该使用`current()`函数。
- en: Getting ready
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you have followed the preceding recipe, *Using CodeIgniter database
    migrations*.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经遵循了前面的食谱，*使用CodeIgniter数据库迁移*。
- en: How to do it...
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Using your command line (terminal application), navigate to the root of your
    CodeIgniter installation (where the `index.php` file is) and type the following:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的命令行（终端应用程序），导航到你的CodeIgniter安装根目录（`index.php`文件所在的位置）并输入以下内容：
- en: '[PRE60]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Consider the following command line:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下命令行：
- en: '[PRE61]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The first thing we should bear in mind is the constructor in the migrate controller.
    The constructor is looking at how the migrate controller is accessed; it'll deny
    access to the migrate controller if it is accessed via anything other than the
    command line—a useful security measure.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先应该牢记的是迁移控制器中的构造函数。构造函数正在查看迁移控制器是如何被访问的；如果它不是通过命令行访问的，它将拒绝访问迁移控制器——这是一个有用的安全措施。
- en: By typing the command we just saw, you'll run `public function current()`. The
    function accepts no parameter. CodeIgniter will look into the migrations folder
    for the file whose number corresponds with the value set in `$config['migration_version']`
    in the configuration file `/path/to/codeigniter/application/config/migration.php`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入我们刚才看到的命令，你会运行`public function current()`。该函数不接受任何参数。CodeIgniter会检查迁移文件夹中与配置文件`/path/to/codeigniter/application/config/migration.php`中设置的`$config['migration_version']`值对应的文件编号的文件。
- en: Rolling back/stepping forward with version()
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用version()回滚/前进版本
- en: You may wish to deliberately alter the database by pointing it to a specific
    migration number. This can be achieved by use of the `version()` function within
    CodeIgniter.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望故意通过指向特定的迁移编号来更改数据库。这可以通过在CodeIgniter中使用`version()`函数来实现。
- en: Getting ready
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you have followed the preceding recipe, *Using CodeIgniter database
    migrations*.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经遵循了前面的食谱，*使用CodeIgniter数据库迁移*。
- en: How to do it...
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Using your command line (terminal application), navigate to the root of your
    CodeIgniter installation (where the index.php file is) and type the following:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的命令行（终端应用程序），导航到你的CodeIgniter安装根目录（`index.php`文件所在的位置）并输入以下内容：
- en: '[PRE62]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: How it works...
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Consider the following command line:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下命令行：
- en: '[PRE63]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '`number` is highlighted as it specifies the migration file number to move to,
    that is, `1`, `2`, `3`, and so on.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`number`被突出显示，因为它指定了要移动到的迁移文件编号，即`1`、`2`、`3`等等。'
- en: The first thing we should bear in mind is the constructor in the migrate controller.
    The constructor is looking at how the migrate controller is accessed; it'll deny
    access to the migrate controller if it is accessed via anything other than the
    command line—a useful security measure.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先应该牢记的是迁移控制器中的构造函数。构造函数正在查看迁移控制器是如何被访问的；如果它不是通过命令行访问的，它将拒绝访问迁移控制器——这是一个有用的安全措施。
- en: By typing the preceding command, you'll run `public function version()`, passing
    to it the third parameter (which has the value of `1`). CodeIgniter will look
    into the migrations folder for the file whose number corresponds with the third
    parameter (1), which by amazing coincidence is the number of the migration files
    we created—who would have known this?
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入前面的命令，您将运行 `public function version()`，传递给它第三个参数（其值为 `1`）。CodeIgniter 将检查迁移文件夹，寻找与第三个参数（1）对应的文件编号，令人惊讶的是，这个编号正是我们创建的迁移文件编号——谁知道呢？
- en: CodeIgniter will load the migration file `001_add_icon.php` and immediately
    run `public function up()`, which will add the column `user_icon` to the database
    table `'users'`.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter 将加载迁移文件 `001_add_icon.php` 并立即运行 `public function up()`，这将向数据库表
    `'users'` 添加 `user_icon` 列。
- en: 'We can undo the creation of the `user_icon` column by entering the following
    in the command line:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在命令行中输入以下内容，我们可以撤销创建 `user_icon` 列的操作：
- en: '[PRE64]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: CodeIgniter will then run the public function `down()` in the migration file,
    which will remove the `user_icon` column.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，CodeIgniter 将在迁移文件中运行公共函数 `down()`，这将删除 `user_icon` 列。
- en: Generating an XML from a database result
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库结果生成 XML
- en: Generating an XML from a database may be useful in several ways, perhaps you
    wish to send data from a query across a network using a SOAP request, or perhaps
    you're using it to build some data for a web service. Whatever your purpose, this
    is how to do it—also we'll look at some real-world uses—for example, we'll generate
    the XML output from a database query.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库生成 XML 可能以多种方式有用，也许您希望使用 SOAP 请求通过网络发送查询数据，或者也许您正在使用它来构建一些用于网络服务的数据。无论您的目的如何，这就是如何操作——我们还将探讨一些实际应用——例如，我们将从数据库查询生成
    XML 输出。
- en: Getting ready
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Firstly, we need to create a table and enter some example data so that you''ll
    see some data in the CSV format, so with that in mind, copy the following code
    into SQL:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个表并输入一些示例数据，这样您将看到一些以 CSV 格式显示的数据，所以考虑到这一点，将以下代码复制到 SQL：
- en: '[PRE65]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: How to do it...
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following file:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下文件：
- en: '`/path/to/codeigniter/application/controllers/export.php`'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/export.php`'
- en: 'Create the controller `export.php`. This controller will load the CodeIgniter
    `dbutil` (database utility) class, which will provide support for various database-specific
    operations and generate the XML. Add the following code into your `export.php`
    controller:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制器 `export.php`。此控制器将加载 CodeIgniter 的 `dbutil`（数据库工具）类，该类将提供对各种数据库特定操作的支持并生成
    XML。将以下代码添加到您的 `export.php` 控制器中：
- en: '[PRE66]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: How it works...
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Okay, take a look at the line in bold—we're loading the database utilities class
    in the controllers constructor. This utilities class contains some excellent functions
    for working with databases. We're using it to provide access to the function `xml_from_result()`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看看加粗的那一行——我们在控制器构造函数中加载数据库工具类。这个工具类包含一些用于处理数据库的出色函数。我们使用它来提供对 `xml_from_result()`
    函数的访问。
- en: 'The `export.php` controller function `index()` redirects us to `public function
    xml()`, which runs a database query. You could, of course, have any source of
    data here, but we''re calling a database and storing the result in the array `$query`.
    This is passed to the CodeIgniter function `xml_from_result()`. The `xml_from_result()`
    function takes the following two parameters:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`export.php` 控制器的 `index()` 函数将重定向我们到 `public function xml()`，该函数执行数据库查询。当然，您可以使用任何数据源，但我们在这里调用数据库并将结果存储在数组
    `$query` 中。这被传递给 CodeIgniter 函数 `xml_from_result()`。`xml_from_result()` 函数接受以下两个参数：'
- en: '`$query`: This is the data for XML; in this case, the output of our database
    query.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$query`：这是 XML 的数据；在这种情况下，我们数据库查询的输出。'
- en: '`$config`: This is the configuration parameter; in this case, the XML formatting
    options.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$config`：这是配置参数；在这种情况下，XML 格式化选项。'
- en: We then echo the result of `xml_from_result()` to the screen—the result of which
    can be seen by viewing the page source code in your browser. You don't have to
    echo it out; you can store it in a variable if you require the XML for other purposes.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后将 `xml_from_result()` 的结果输出到屏幕上——您可以通过在浏览器中查看页面源代码来查看结果。您不必输出它；如果您需要将 XML
    用于其他目的，您可以将其存储在变量中。
- en: Be sure to separate a database query into its own model—the query is shown in
    the preceding controller for explanatory purposes.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保将数据库查询单独放入其自己的模型中——查询在先前的控制器中显示，用于说明目的。
- en: Generating a CSV from a database result
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库结果生成 CSV
- en: Perhaps one of the most common things you'll be asked to do, especially if you
    are building a complex application that may have users, products, orders, and
    various other metrics is to provide some sort of reporting of that data. Perhaps
    you'll be asked to generate a CSV file, and the following sections show how you
    do it.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 可能你被要求做的最常见的事情之一，尤其是如果你正在构建一个可能包含用户、产品、订单和各种其他指标复杂的应用程序，就是提供某种形式的数据报告。可能你会被要求生成一个CSV文件，以下部分展示了如何操作。
- en: Getting ready
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Firstly, we need to create a table and enter some example data so that you''ll
    see some data in the CSV format, so with that in mind, copy the following code
    into SQL:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个表并输入一些示例数据，这样你就能看到一些以CSV格式的数据，所以带着这个想法，将以下代码复制到SQL中：
- en: '[PRE67]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Now that the database is ready we''ll need to ensure that you''re calling the
    database utility class; make sure that you call it with the following line:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据库已经准备好了，我们需要确保你调用了数据库实用工具类；确保你使用以下行调用它：
- en: '[PRE68]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: You can either put this line in the constructor of your controller or call it
    in your controller function.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将此行放在你控制器的构造函数中，或者在你的控制器函数中调用它。
- en: 'Also, as we''re going to be creating a file, we need the support of the `''file''`
    helper, so make sure you''re calling the helper with the following line:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于我们将要创建一个文件，我们需要`'file'`辅助函数的支持，所以请确保你使用以下行调用辅助函数：
- en: '[PRE69]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: How to do it...
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following file:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建以下文件：
- en: '`/path/to/codeigniter/application/controllers/export.php`'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/export.php`'
- en: Forcing download
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强制下载
- en: 'Add the following code into your `export.php` controller:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的`export.php`控制器中：
- en: '[PRE70]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: How it works...
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Okay, take a look at the lines in bold—we're loading the CodeIgniter helper
    `'download'` and the database utilities class in the controller constructor. This'll
    help us with this recipe.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看看加粗的行——我们在控制器构造函数中加载了CodeIgniter的`'download'`辅助函数和数据库实用工具类。这将帮助我们完成这个配方。
- en: 'The `export.php` controller function `index()` redirects us to `public function
    csv()`, which runs a database query. You could, of course, have any source of
    data here, but we''re calling a database and storing the result in the array `$query`.
    This is passed to the CodeIgniter function `force_download()`, which accepts the
    following two parameters:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`export.php`控制器函数`index()`将我们重定向到`public function csv()`，它执行一个数据库查询。当然，这里可以是任何数据源，但我们调用数据库并将结果存储在数组`$query`中。这被传递给接受以下两个参数的CodeIgniter函数`force_download()`：'
- en: The name and extension of the file to be created (or in this case, downloaded)
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建的文件名和扩展名（或在这种情况下，下载的文件）
- en: 'The data that will go into the file; in this case, we''re using the CodeIgniter
    function `csv_from_result()` that will take a row of data from a database query
    and convert it into a delimiter-separated string of text. `csv_from_result()`
    takes the following three parameters:'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将进入文件的数据；在这种情况下，我们使用CodeIgniter函数`csv_from_result()`，它将从数据库查询中取出一行数据并将其转换为以分隔符分隔的文本字符串。`csv_from_result()`函数接受以下三个参数：
- en: '`$query`: This is the data for the CSV; in this case, the output of our database
    query'
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$query`: 这是CSV中的数据；在这种情况下，我们数据库查询的输出'
- en: '`$delimiter`: This is the data delimiter, that is, it specifies how we are
    separating each cell worth of data; this is usually a comma (`,`).'
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$delimiter`: 这是数据分隔符，即它指定了我们如何分隔每个单元格的数据；这通常是逗号（`,`）。'
- en: '`$newline`: This is the new line character; it is usually ''`\n\n`'''
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$newline`: 这是新行字符；它通常是 ''`\n\n`'''
- en: If all goes according to plan, `force_download()` will, as the name says, force
    a download of the CSV file.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，`force_download()`将像其名称所暗示的那样，强制下载CSV文件。
- en: Saving to file
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存到文件
- en: 'Add the following code into your `export.php` controller:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的`export.php`控制器中：
- en: '[PRE71]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: How it works...
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Okay, take a look at the lines in bold; we're loading the CodeIgniter helpers
    `'download'`, and `'file'` and the database utilities class in the controller
    constructor. This'll help us with this recipe. We're also adding CodeIgniter-specific
    syntax to write a file to a disk.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看看加粗的行；我们在控制器构造函数中加载了CodeIgniter的`'download'`、`'file'`辅助函数和数据库实用工具类。这将帮助我们完成这个配方。我们还在写入磁盘时添加了CodeIgniter特定的语法。
- en: 'The `export.php` controller `function index()` redirects us to `public function
    csv()`, which runs a database query. You could, of course, have any source of
    data here, but we''re calling a database query and storing the result in the `$query`
    array. We then call the CodeIgniter `csv_from_result()` function where `csv_from_result()`
    takes the following three parameters:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`export.php` 控制器的 `index()` 函数将我们重定向到 `public function csv()`，该函数执行一个数据库查询。当然，这里可以是任何数据源，但我们在这里调用数据库查询并将结果存储在
    `$query` 数组中。然后我们调用 CodeIgniter 的 `csv_from_result()` 函数，其中 `csv_from_result()`
    接受以下三个参数：'
- en: '`$query`: The data for the CSV; in this case, the output of our database query'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$query`: CSV 的数据；在这种情况下，是我们数据库查询的输出'
- en: '`$delimiter`: The data delimiter, that is, it specifies how we are separating
    each cell worth of data'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$delimiter`: 数据分隔符，即它指定了我们如何分隔每个数据单元格'
- en: '`$newline`: The new line character; it is usually set to `''\n\n''`'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$newline`: 新行字符；通常设置为 `''\n\n''`'
- en: 'The `csv_from_result()` function will store its output in the variable `$data`.
    We then try to run the CodeIgniter `function write_file()`, which accepts the
    following two parameters:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`csv_from_result()` 函数将它的输出存储在变量 `$data` 中。然后我们尝试运行 CodeIgniter 的 `write_file()`
    函数，该函数接受以下两个参数：'
- en: The path to write the file, including the filename and extension; remember that
    this path should be writeable
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要写入文件的路径，包括文件名和扩展名；请记住，此路径应该是可写的
- en: The data to write to the file
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要写入文件的数据
- en: Should all go as per the plan, the recipe will return the message `File write
    OK`—of course, you should replace it with your own code as you see fit. Should
    it fail, it'll return an error message and again replace it with your own code
    where necessary.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，该食谱将返回消息 `文件写入 OK`——当然，你应该根据需要替换它。如果失败，它将返回错误消息，并在必要时用你自己的代码替换。
- en: There's more...
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The chances are that if the file isn't being written, you don't have the necessary
    permissions to write to the desired destination folder. You will need to amend
    the permissions for the destination folder so that they are at a level high enough
    to allow CodeIgniter to write to it. For example, in Linux/Mac, you would use
    the `chmod` command in the terminal.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件没有写入，那么你很可能没有足够的权限写入目标文件夹。你需要修改目标文件夹的权限，使其达到允许 CodeIgniter 写入的水平。例如，在 Linux/Mac
    中，你会在终端中使用 `chmod` 命令。
