["```php\nckeditor_stylesheets[] = css/ckeditor-iframe.css\n```", "```php\n    (function ($, Drupal, drupalSettings, CKEDITOR) {\n\n      /* existing plugin code */\n\n    })(jQuery, Drupal, drupalSettings, CKEDITOR)\n    ```", "```php\n    DRUPAL_ROOT/modules/MODULE_NAME/lib/Drupal/PLUGIN_NAME/Plugin/CKEditorPlugin/PLUGIN_NAME.php\n    ```", "```php\n    <?php\n    /**\n     * @file\n     * Contains \\Drupal\\PLUGIN_NAME\\Plugin\\CKEditorPlugin\\PLUGIN_NAME.\n     */\n\n    namespace Drupal\\PLUGIN_NAME\\Plugin\\CKEditorPlugin;\n\n    use Drupal\\ckeditor\\CKEditorPluginBase;\n    use Drupal\\Core\\Plugin\\PluginBase;\n    use Drupal\\ckeditor\\CKEditorPluginInterface;\n    use Drupal\\ckeditor\\CKEditorPluginButtonsInterface;\n    use Drupal\\ckeditor\\CKEditorPluginConfigurableInterface;\n    use Drupal\\ckeditor\\CKEditorPluginContextualInterface;\n    use Drupal\\editor\\Entity\\Editor;\n    use Drupal\\ckeditor\\Annotation\\CKEditorPlugin;\n    use Drupal\\Core\\Annotation\\Translation;\n\n    /**\n     * Defines the \"PLUGIN_NAME\" plugin.\n     * @see MetaContextual\n     * @see MetaButton\n     * @see MetaContextualAndButton\n     *\n     * @CKEditorPlugin(\n     *   id = \"PLUGIN_NAME\",\n     *   label = @Translation(\"PLUGIN_NAME\")\n     * )\n     */\n\n    class PLUGIN_NAME extends CKEditorPluginBase implements CKEditorPluginConfigurableInterface, CKEditorPluginContextualInterface {\n\n    // your code here\n\n    }\n    ```", "```php\n    name: Author tool\n    type: module\n    description: A custom block to allow content editors to quickly add a new recipe.\n    core: 8.x\n    dependencies:\n      - block\n    ```", "```php\n    <?php\n\n    /**\n     * @file\n     * Contains \\Drupal\\author_tool\\Plugin\\Block\\AuthorToolBlock.php.\n     */\n\n    namespace Drupal\\author_tool\\Plugin\\Block;\n\n    use Drupal\\Core\\Block\\BlockBase;\n\n    /**\n     * Provides a custom block.\n     *\n     * Drupal\\Core\\Block\\BlockBase gives us a very useful set of basic functionality\n     * for this configurable block. We can just fill in a few of the blanks with\n     * defaultConfiguration(), blockForm(), blockSubmit(), and build().\n     *\n     * @Block(\n     *   id = \"author_tool_block\",\n     *   admin_label = @Translation(\"Author tool block\")\n     * )\n     */\n    classAuthorToolBlock extends BlockBase {\n\n      // our code goes here.\n\n    }\n    ```", "```php\n        /**\n         * {@inheritdoc}\n         */\n    public function build() {\n\n        }\n    ```", "```php\n    <?php\n\n    /**\n     * @file\n     * Contains \\Drupal\\author_tool\\Plugin\\Block\\AuthorToolBlock.php.\n     */\n\n    namespace Drupal\\author_tool\\Plugin\\Block;\n\n    use Drupal\\Core\\Block\\BlockBase;\n\n    /**\n     * Provides a custom block.\n     *\n     * Drupal\\Core\\Block\\BlockBase gives us a very useful set of basic functionality\n     * for this configurable block. We can just fill in a few of the blanks with\n     * defaultConfiguration(), blockForm(), blockSubmit(), and build().\n     *\n     * @Block(\n     *   id = \"author_tool_block\",\n     *   admin_label = @Translation(\"Author tool block\")\n     * )\n     */\n    classAuthorToolBlock extends BlockBase {\n\n        /**\n         * {@inheritdoc}\n         */\n    public function build() {\n\n            $link = array(\n                '#type' => 'markup',\n         '#title' => 'Author tools',\n                '#markup' => $this->t('<a href=\":url\">Add another recipe</a>', array(':url' => 'add/recipe')),\n            );\n\n    return $link;\n        }\n\n    }\n    ```"]