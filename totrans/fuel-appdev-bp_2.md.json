["```php\n  'always_load'  => array(\n    'packages'  => array(\n      'orm',\n    ),\n  ),\n```", "```php\nphp oil generate scaffold/orm project name:string\n\n```", "```php\nCreating migration: APPPATH/migrations/001_create_projects.php\nCreating model: APPPATH/classes/model/project.php\nCreating controller: APPPATH/classes/controller/project.php\nCreating view: APPPATH/views/project/index.php\nCreating view: APPPATH/views/project/view.php\nCreating view: APPPATH/views/project/create.php\nCreating view: APPPATH/views/project/edit.php\nCreating view: APPPATH/views/project/_form.php\nCreating view: APPPATH/views/template.php\n\n```", "```php\nphp oil generate model/orm task name:string status:boolean rank:int project_id:int\n\n```", "```php\nCreating model: APPPATH/classes/model/task.php\nCreating migration: APPPATH/migrations/002_create_tasks.php\n\n```", "```php\nphp oil refine migrate\n\n```", "```php\n<?php\n\nreturn array(\n    'profiling'  => true,\n);\n```", "```php\n<?php\n\n// Fuel initialization (inspired from index.php)\ndefine('DOCROOT', __DIR__.DIRECTORY_SEPARATOR);\ndefine('APPPATH', realpath(__DIR__.'/../fuel/app/')\n                    .DIRECTORY_SEPARATOR);\ndefine('PKGPATH', realpath(__DIR__.'/../fuel/packages/')\n                    .DIRECTORY_SEPARATOR);\ndefine('COREPATH', realpath(__DIR__.'/../fuel/core/')\n                    .DIRECTORY_SEPARATOR);\ndefined('FUEL_START_TIME') or define('FUEL_START_TIME', \n                                     microtime(true));\ndefined('FUEL_START_MEM') or define('FUEL_START_MEM',\n                                    memory_get_usage());\nrequire COREPATH.'classes'.DIRECTORY_SEPARATOR.'autoloader.php';\nclass_alias('Fuel\\\\Core\\\\Autoloader', 'Autoloader');\nrequire APPPATH.'bootstrap.php';\n\necho 'FuelPHP is initialized...';\n```", "```php\n// --- Executing queries without the ORM\n\\DB::query('TRUNCATE TABLE `projects`;')->execute();\n\\DB::query('TRUNCATE TABLE `tasks`;')->execute();\n// \\DBUtil::truncate_table('projects'); is also possible\n```", "```php\n// --- Creating new objects\n$project = Model_Project::forge(); // = new Model_Project()\n$project->name = 'First project';\n$project->save();\n\n// You can also set properties when calling the forge method\n$project = Model_Project::forge(\n    array('name' => 'Second project')\n);\n$project->save();\n```", "```php\n// --- Finding specific objects\n$project = Model_Project::find('first');\n\\Debug::dump('first', $project);\n```", "```php\nSELECT … FROM `projects` AS `t0` ORDER BY `t0`.`id` ASC\nLIMIT 1\n```", "```php\n$project = Model_Project::find('last');\n\\Debug::dump('last', $project);\n```", "```php\nSELECT … FROM `projects` AS `t0` ORDER BY `t0`.`id` DESC\nLIMIT 1\n```", "```php\n$project = Model_Project::find(1);\n\\Debug::dump('with id = 1', $project);\n```", "```php\nSELECT … FROM `projects` AS `t0` WHERE `t0`.`id` = 1\nLIMIT 1\n```", "```php\n// --- Updating an object\n$project = Model_Project::find(1); // Load project with id = 1\n$project->name = 'First one';\n$project->save();\n```", "```php\nUPDATE `projects` SET `name` = 'First one' WHERE `id` = '1'\n```", "```php\n// --- Deleting an object.\n$project = Model_Project::find(1); // Load project with id = 1\n$project->delete();\n```", "```php\nDELETE FROM `projects` WHERE `id` = '1' LIMIT 1\n```", "```php\n// --- Loading several objects\n// First creating an additional project for a more interesting\n// result\n$project = Model_Project::forge();\n$project->name = 'Third project';\n$project->save();\n\n// Finding all projects\n$projects = Model_Project::find('all');\n\\Debug::dump('all', $projects);\n```", "```php\nSELECT … FROM `projects` AS `t0`\n```", "```php\n$projects = Model_Project::query()->get();\n\\Debug::dump('all (using query)', $projects);\n```", "```php\nSELECT … FROM `projects` AS `t0`\n```", "```php\n// Creating sample tasks\nModel_Task::forge(array('name' => 'Marketing plan',\n    'status' => 0, 'rank' => 0, 'project_id' => 2))->save();\n\nModel_Task::forge(array('name' => 'Update website',\n    'status' => 1, 'rank' => 1, 'project_id' => 2))->save();\n\nModel_Task::forge(array('name' => 'Improve website template',\n    'status' => 1, 'rank' => 2, 'project_id' => 2))->save();\n\nModel_Task::forge(array('name' => 'Contact director',\n    'status' => 0, 'rank' => 0, 'project_id' => 3))->save();\n\nModel_Task::forge(array('name' => 'Buy a new computer',\n    'status' => 1, 'rank' => 1, 'project_id' => 3))->save();\n```", "```php\n$task = Model_Task::find('first',\n    array(\n        'where' => array(\n            array('project_id' => 2)\n        )\n    )\n);\n\\Debug::dump('first with project_id = 2', $task);\n```", "```php\n$task = Model_Task::query()\n    ->where('project_id', 2)\n    ->order_by('id', 'asc') // Will be introduced shortly\n    ->get_one();\n\\Debug::dump('first with project_id = 2 (using query)', $task);\n```", "```php\nSELECT … FROM `tasks` AS `t0` WHERE (`t0`.`project_id` = 2)\nORDER BY `t0`.`id` ASC LIMIT 1\n```", "```php\n$tasks = Model_Task::find('all',\n    array(\n        'where' => array(\n            array('project_id' => 2)\n        )\n    )\n);\n\\Debug::dump('project_id = 2', $tasks);\n```", "```php\n$tasks = Model_Task::query()\n    ->where('project_id', 2)\n    ->get();\n\\Debug::dump('project_id = 2 (using query)', $tasks);\n```", "```php\nSELECT … FROM `tasks` AS `t0` WHERE (`t0`.`project_id` = 2)\n```", "```php\n$tasks = Model_Task::find('all',\n    array(\n        'where' => array(\n            array('project_id' => 2),\n            array('status' => 1)\n        )\n    )\n);\n\\Debug::dump('project_id = 2 & status = 1', $tasks);\n```", "```php\n$tasks = Model_Task::query()\n    ->where('project_id', 2)\n    ->where('status', 1)\n    ->get();\n\\Debug::dump('project_id = 2 & status = 1 (using query)', $tasks);\n```", "```php\nSELECT … FROM `tasks` AS `t0` WHERE (`t0`.`project_id` = 2)\nAND (`t0`.`status` = 1)\n```", "```php\n$tasks = Model_Task::find('all',\n    array(\n        'where' => array(\n            array('project_id', '>', 2),\n            array('status' => 1)\n        )\n    )\n);\n\\Debug::dump('project_id > 2 & status = 1', $tasks);\n```", "```php\n$tasks = Model_Task::query()\n    ->where('project_id', '>', 2)\n    ->where('status', 1)\n    ->get();\n\\Debug::dump('project_id > 2 & status = 1 (using query)', $tasks);\n```", "```php\nSELECT … FROM `tasks` AS `t0` WHERE `t0`.`project_id` > 2\nAND (`t0`.`status` = 1)\n```", "```php\n$tasks = Model_Task::find('all',\n    array(\n        'where' => array(\n            array('project_id' => 2),\n            'or' => array('status' => 1)\n        )\n    )\n);\n\\Debug::dump('project_id = 2 or status = 1', $tasks);\n```", "```php\n$tasks = Model_Task::query()\n    ->where('project_id', '=', 2)\n    ->or_where('status', 1)\n    ->get();\n\\Debug::dump('project_id = 2 or status = 1 (query)', $tasks);\n```", "```php\nSELECT … FROM `tasks` AS `t0` WHERE (`t0`.`project_id` = 2) OR ((`t0`.`status` = 1))\n```", "```php\n$tasks = Model_Task::find('all',\n    array(\n        'where' => array(\n            array(\n                'name',\n                'LIKE',\n                '%website%'\n            ),\n        )\n    )\n);\n\\Debug::dump('name contains \"website\"', $tasks);\n```", "```php\n$tasks = Model_Task::query()\n    ->where('name', 'LIKE', '%website%')\n    ->get();\n\\Debug::dump('name contains \"website\" (using query)', $tasks);\n```", "```php\nSELECT … FROM `tasks` AS `t0` WHERE `t0`.`name` LIKE\n'%website%'\n```", "```php\n$tasks = Model_Task::find('all',\n    array(\n        'where' => array(\n            array(\n                'name',\n                'LIKE',\n                '%website%'\n            ),\n        ),\n        'order_by' => array(\n            'rank' => 'ASC'\n        ),\n    )\n);\n\\Debug::dump(\n    'name contains \"website\" ordered by the rank column',\n    $tasks\n);\n```", "```php\n$tasks = Model_Task::query()\n    ->where('name', 'LIKE', '%website%')\n    ->order_by('rank', 'ASC')\n    ->get();\n\\Debug::dump(\n    'name contains \"website\" ordered by the rank column (query)',\n    $tasks\n);\n```", "```php\nSELECT … FROM `tasks` AS `t0` WHERE `t0`.`name` LIKE\n'%website%' ORDER BY `t0`.`rank` ASC\n```", "```php\nprotected static $_belongs_to = array('project');\n```", "```php\nprotected static $_belongs_to = array(\n    'project' => array(\n        'model_to'          => 'Model_Project',\n        'key_from'          => 'project_id',\n        'key_to'            => 'id',\n        'cascade_save'      => true,\n        'cascade_delete'    => false,\n    )\n);\n```", "```php\nprotected static $_has_many = array('tasks');\n```", "```php\nprotected static $_has_many = array(\n    'tasks' => array(\n        'model_to'          => 'Model_Task',\n        'key_from'          => 'id',\n        'key_to'            => 'project_id',\n        'cascade_save'      => true,\n        'cascade_delete'    => false,\n    )\n);\n```", "```php\n$task = Model_Task::find(1, array('from_cache' => false));\n$project = $task->project;\n\\Debug::dump('Project of task with id = 1', $project);\n```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE `t0`.`id` = 1\n       LIMIT 1\n    ```", "```php\n    SELECT … FROM `projects` AS `t0` WHERE `t0`.`id` =\n       '2' LIMIT 1\n    ```", "```php\n$project = Model_Project::find(\n    2,\n    array('from_cache' => false)\n);\n$tasks = $project->tasks;\n\\Debug::dump('Tasks of project with id = 2', $tasks);\n```", "```php\n    SELECT … FROM `projects` AS `t0` WHERE `t0`.`id` = 2\n       LIMIT 1\n    ```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE\n       `t0`.`project_id` = '2'\n    ```", "```php\n$projects = Model_Project::find(\n    'all',\n    array('from_cache' => false)\n);\nforeach ($projects as $project) {\n    \\Debug::dump(\n        'LOOP 1: Tasks of project with id = '.$project->id,\n        $project->tasks\n    );\n}\n```", "```php\n    SELECT … FROM `projects` AS `t0`\n    ```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE\n       `t0`.`project_id` = '2'\n    ```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE\n       `t0`.`project_id` = '3'\n    ```", "```php\n$projects = Model_Project::find(\n    'all',\n    array(\n        'related' => 'tasks'\n    )\n);\nforeach ($projects as $project) {\n    \\Debug::dump(\n        'LOOP 2: Tasks of project with id = '.$project->id,\n        $project->tasks\n    );\n}\n```", "```php\nSELECT … FROM `projects` AS `t0` LEFT JOIN\n`tasks` AS `t1` ON (`t0`.`id` = `t1`.`project_id`)\n```", "```php\n$task = Model_Task::find(1, array('from_cache' => false));\n$task->project_id = 3;\n$task->save();\n```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE `t0`.`id` = 1 LIMIT 1\n    ```", "```php\n    UPDATE `tasks` SET `project_id` = '3',\n       `updated_at` = 1404729671 WHERE `id` = '1'\n    ```", "```php\n$task = Model_Task::find(1, array('from_cache' => false));\n$task->project = Model_Project::find(\n    3,\n    array('from_cache' => false)\n);\n$task->save();\n```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE `t0`.`id` = 1 LIMIT 1\n    ```", "```php\n    SELECT … FROM `projects` AS `t0` WHERE \n       `t0`.`id` = 3 LIMIT 1\n    ```", "```php\n    SELECT … FROM `projects` AS `t0` WHERE \n       `t0`.`id` = '2' LIMIT 1\n    ```", "```php\n    UPDATE `tasks` SET `project_id` = '3',\n       `updated_at` = 1404729671 WHERE `id` = '1'\n    ```", "```php\n$task = Model_Task::find(1, array('from_cache' => false));\n$task->project = Model_Project::forge();\n$task->project->name = 'Fourth project';\n$task->save();\n```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE `t0`.`id` = 1 LIMIT 1\n    ```", "```php\n    SELECT … FROM `projects` AS `t0` WHERE \n       `t0`.`id` = '3' LIMIT 1\n    ```", "```php\n    INSERT INTO `projects` (`name`, `created_at`,\n       `updated_at`) VALUES ('Fourth project', 1404729796,\n       1404729796)\n    ```", "```php\n    UPDATE `tasks` SET `project_id` = '4', `updated_at`\n       = 1404729796 WHERE `id` = '1'\n    ```", "```php\n$project = Model_Project::find(\n    2,\n    array('from_cache' => false)\n);\n$task               = Model_Task::forge();\n$task->name         = 'Buy a new mouse';\n$task->status       = 0;\n$task->rank         = 2;\n$project->tasks[]   = $task;\n$project->save();\n```", "```php\n    SELECT … FROM `projects` AS `t0` WHERE `t0`.`id` = 2\n       LIMIT 1\n    ```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE\n       `t0`.`project_id` = '2'\n    ```", "```php\n    INSERT INTO `tasks` (`name`, `status`, `rank`,\n       `project_id`, `created_at`, `updated_at`) VALUES\n       ('Buy a new mouse', 0, 2, '2', 1404731559, null)\n    ```", "```php\n$project = Model_Project::find(\n    2,\n    array('from_cache' => false)\n);\n$project->tasks[6]->name = 'Buy an optical mouse';\n$project->save();\n```", "```php\n    SELECT … FROM `projects` AS `t0` WHERE `t0`.`id` = 2\n       LIMIT 1\n    ```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE\n       `t0`.`project_id` = '2'\n    ```", "```php\n    UPDATE `tasks` SET `name` = 'Buy an optical mouse',\n       `updated_at` = 1404732349 WHERE `id` = '6'\n    ```", "```php\n$project = Model_Project::find(\n    3,\n    array('from_cache' => false)\n);\nunset($project->tasks[4]);\n$project->save();\n```", "```php\n    SELECT … FROM `projects` AS `t0` WHERE `t0`.`id` = 3 LIMIT 1\n    ```", "```php\n    SELECT … FROM `tasks` AS `t0` WHERE\n       `t0`.`project_id` = '3'\n    ```", "```php\n    UPDATE `tasks` SET `project_id` = null,\n       `updated_at` = 1404803182 WHERE `id` = '4'\n    ```", "```php\nINSERT INTO `projects` (`name`, `created_at`, `updated_at`) VALUES ('Third project', 1404729796, 1404729796);\n```", "```php\nprotected static $_observers = array(\n    'Orm\\Observer_CreatedAt' => array(\n        'events' => array('before_insert'),\n        'mysql_timestamp' => false,\n    ),\n    'Orm\\Observer_UpdatedAt' => array(\n        'events' => array('before_save'),\n        'mysql_timestamp' => false,\n    ),\n);\n```", "```php\n<?php echo render('task/list', array('project' => $project)); ?>\n```", "```php\n<ul id=\"todo_list\" data-project_id=\"<?php echo $project->id; ?>\">\n    <?php foreach ($project->tasks as $task) {\n            $input_id = 'todo_item_'.$task->id;\n    ?>\n        <li>\n            <input\n                type=\"checkbox\"\n                autocomplete=\"off\"\n                id=\"<?php echo $input_id; ?>\"\n                data-task_id=\"<?php echo $task->id; ?>\"\n                <?php echo $task->status ? 'checked' : ''; ?>\n            >\n            <label for=\"<?php echo $input_id; ?>\">\n                <?php echo $task->name; ?>\n            </label>\n        </li>\n    <?php } ?>\n</ul>\n```", "```php\n<?php\necho Asset::js(array(\n    'http://code.jquery.com/jquery-1.11.2.min.js',\n    'http://code.jquery.com/ui/1.11.2/jquery-ui.min.js',\n    'website.js'\n)); \n?>\n```", "```php\n<script type=\"text/javascript\">\n<?php\necho 'var uriBase = '.Format::forge(Uri::base())->to_json().';';\n?>\n</script>\n```", "```php\n$(document).ready(function() {\n\n    // Checkbox synchronization\n    $('#todo_list input[type=checkbox]').change(function() {\n        var $this = $(this);\n        $.post(\n            uriBase + 'project/change_task_status',\n            {\n                'task_id': $this.data('task_id'),\n                'new_status': $this.is(':checked') ? 1 : 0\n            }\n        );\n    });\n});\n```", "```php\npublic function action_change_task_status()\n{\n    if (Input::is_ajax()) {\n        $task = Model_Task::find(intval(Input::post('task_id')));\n        $task->status = intval(Input::post('new_status'));\n        $task->save();\n    }\n    return false; // we return no content at all\n}\n```", "```php\n<?php echo render('task/create', array('project' => $project)); ?>\n```", "```php\n<h3>Create a new task:</h3>\n<?php\necho Form::open();\necho Form::input(\n    'task_name',\n    null,\n    array('placeholder'=>'Task name')\n);\necho Form::submit('task_submit', 'Create');\necho Form::close();\n?>\n```", "```php\n// Checking first if we received a POST request\nif (Input::method() == 'POST')\n{\n    // Getting the task name. If empty, we display an\n    // error, otherwise we attempt to create the new\n    // task\n    $task_name = Input::post('task_name', '');\n    if ($task_name == '') {\n        // Setting the flash session variable named\n        // error. Reminder: this variable is displayed\n        // in the template using Session::get_flash\n        Session::set_flash(\n            'error',\n            'The task name is empty!'\n        );\n    } else {\n        $task = Model_Task::forge();\n        $task->name = $task_name;\n        $task->status = 0; \n        $task->rank = 0; // temporary\n        $data['project']->tasks[] = $task;\n        $data['project']->save();\n        // When the task has been saved, we redirect\n        // the browser to the same webpage. This\n        // prevents the form from being submitted\n        // again if the user refreshes the webpage\n        Response::redirect('project/view/'.$id);\n    }\n}\n```", "```php\n$this->template->title = \"Project\";\n```", "```php\nvar $todoList = $('#todo_list');\n$todoList.sortable();\n$todoList.disableSelection();\n```", "```php\n$todoList.sortable({\n    // The stop event is called when the user drop an item\n    // (when the sorting process has stopped).\n    'stop': function() {\n        // Collecting task ids from checkboxes in the\n        // new order.\n        var ids = [];\n        $todoList.find('input[type=checkbox]').each(function() {\n            ids.push($(this).data('task_id'));\n        });\n        // Sending the ordered task ids to the server.\n        $.post(\n            uriBase + 'project/change_tasks_order',\n            {\n                'project_id': $todoList.data('project_id'),\n                'task_ids': ids\n            }\n        );\n    }\n});\n```", "```php\npublic function action_change_tasks_order() {\n    if (Input::is_ajax()) {\n        $project = Model_Project::find(\n            intval(Input::post('project_id'))\n        );\n        // Changing the rank property according to the\n        // list of ids received by the controller\n        $task_ids = Input::post('task_ids');\n        for ($i = 0; $i < count($task_ids); $i++) {\n            $task_id = intval($task_ids[$i]);\n            $project->tasks[$task_id]->rank = $i;\n        }\n        $project->save();\n    }\n    return false; // we return no content at all\n}\n```", "```php\n$task->rank = 0; // temporary\n\n```", "```php\n// Appending the task at the end of the to-do list\n$task->rank = count($data['project']->tasks);\n```", "```php\nif ( ! $data['project'] = Model_Project::find($id))\n```", "```php\n$data['project'] = Model_Project::find($id, array(\n    'related' => array(\n        'tasks' => array(\n            'order_by' => 'rank',\n        ),\n    ),\n));\nif ( ! $data['project'])\n```"]