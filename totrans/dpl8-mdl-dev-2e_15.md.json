["```php\n\"views_data\" = \"Drupal\\views\\EntityViewsData\"\n```", "```php\n/** \n * Implements hook_views_data(). \n */ \nfunction sports_views_data() { \n  $data = []; \n\n  // Players table \n  $data['players'] = []; \n  $data['players']['table']['group'] = t('Sports'); \n  $data['players']['table']['base'] = array( \n    'field' => 'id', \n    'title' => t('Players'), \n    'help' => t('Holds player data.'), \n  ); \n\n  // Player fields \n  $data['players']['id'] = array( \n    'title' => t('ID'), \n    'help' => t('The unique player ID.'), \n    'field' => array( \n      'id' => 'numeric', \n    ), \n  ); \n\n  return $data; \n}  \n```", "```php\n$data['players']['name'] = array( \n  'title' => t('Name'), \n  'help' => t('The name of the player.'), \n  'field' => array( \n    'id' => 'standard', \n  ), \n);  \n```", "```php\n$data['players']['data'] = array( \n  'title' => t('Data'), \n  'help' => t('The player data.'), \n  'field' => array( \n    'id' => 'serialized', \n  ), \n);  \n```", "```php\n$data['players']['team_id'] = array( \n  'title' => t('Team ID'), \n  'help' => t('The unique team ID of the player.'), \n  'field' => array( \n    'id' => 'numeric', \n  ), \n  'relationship' => array( \n    'base' => 'teams', \n    'base field' => 'id', \n    'id' => 'standard', \n    'label' => t('Player team'), \n  ), \n);  \n```", "```php\n// Teams table \n$data['teams'] = []; \n$data['teams']['table']['group'] = t('Sports');  \n```", "```php\n// Teams fields \n$data['teams']['name'] = array( \n  'title' => t('Name'), \n  'help' => t('The name of the team.'), \n  'field' => array( \n    'id' => 'standard', \n  ), \n); \n\n$data['teams']['description'] = array( \n  'title' => t('Description'), \n  'help' => t('The description of the team.'), \n  'field' => array( \n    'id' => 'standard', \n  ), \n);  \n```", "```php\n'sort' => array( \n  'id' => 'standard', \n), \n'filter' => array( \n  'id' => 'string', \n),  \n```", "```php\n'argument' => array( \n  'id' => 'numeric', \n),  \n```", "```php\n/** \n * Implements hook_views_data_alter(). \n */ \nfunction module_name_views_data_alter(&$data) { \n  $data['node_field_data']['disclaimer'] = [ \n    'title' => t('Disclaimer'), \n    'help' => t('Shows a disclaimer message'), \n    'field' => [ \n      'id' => 'custom', \n    ], \n  ]; \n}  \n```", "```php\nnamespace Drupal\\products\\Entity; \n\nuse Drupal\\views\\EntityViewsData; \n\n/** \n * Provides Views data for Product entities. \n */ \nclass ProductViewsData extends EntityViewsData { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getViewsData() { \n    $data = parent::getViewsData(); \n    // Add stuff. \n    return $data; \n  } \n}  \n```", "```php\n\"views_data\" = \"Drupal\\products\\Entity\\ProductViewsData\", \n```", "```php\n$data['product']['importer'] = [ \n  'title' => t('Importer'), \n  'help' => t('Information about the Product importer.'), \n  'field' => array( \n    'id' => 'product_importer', \n  ), \n]; \n```", "```php\nnamespace Drupal\\products\\Plugin\\views\\field; \n\nuse Drupal\\views\\Plugin\\views\\field\\FieldPluginBase; \nuse Drupal\\views\\ResultRow; \n\n/** \n * Field plugin that renders data about the Importer that imported the Product. \n * \n * @ViewsField(\"product_importer\") \n */ \nclass ProductImporter extends FieldPluginBase { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function render(ResultRow $values) { \n    // Render something more meaningful. \n    return ''; \n  } \n}  \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function query() { \n  // Leave empty to avoid a query on this field. \n}  \n```", "```php\n/** \n * @var \\Drupal\\Core\\Entity\\EntityTypeManager \n */ \nprotected $entityTypeManager; \n\n/** \n * Constructs a ProductImporter object. \n * \n * @param array $configuration \n *   A configuration array containing information about the plugin instance. \n * @param string $plugin_id \n *   The plugin_id for the plugin instance. \n * @param mixed $plugin_definition \n *   The plugin implementation definition. \n * @param \\Drupal\\Core\\Entity\\EntityTypeManagerInterface $entityTypeManager \n */ \npublic function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager) { \n  parent::__construct($configuration, $plugin_id, $plugin_definition); \n  $this->entityTypeManager = $entityTypeManager; \n} \n\n/** \n * {@inheritdoc} \n */ \npublic static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) { \n  return new static( \n    $configuration, \n    $plugin_id, \n    $plugin_definition, \n    $container->get('entity_type.manager') \n  ); \n}  \n```", "```php\nuse Drupal\\Core\\Entity\\EntityTypeManagerInterface; \nuse Symfony\\Component\\DependencyInjection\\ContainerInterface; \n```", "```php\npublic function render(ResultRow $values) { \n  /** @var \\Drupal\\products\\Entity\\ProductInterface $product */ \n  $product = $values->_entity; \n  $source = $product->getSource(); \n  $importers = $this->entityTypeManager->getStorage('importer')->loadByProperties(['source' => $source]); \n  if (!$importers) { \n    return NULL; \n  } \n\n  // We'll assume one importer per source. \n  /** @var \\Drupal\\products\\Entity\\ImporterInterface $importer */ \n  $importer = reset($importers); \n  return $this->sanitizeValue($importer->label()); \n}  \n```", "```php\n/** \n * {@inheritdoc} \n */ \nprotected function defineOptions() { \n  $options = parent::defineOptions(); \n  $options['importer'] = array('default' => 'entity'); \n\n  return $options; \n}  \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function buildOptionsForm(&$form, FormStateInterface $form_state) { \n\n  $form['importer'] = array( \n    '#type' => 'select', \n    '#title' => $this->t('Importer'), \n    '#description' => $this->t('Which importer label to use?'), \n    '#options' => [ \n      'entity' => $this->t('Entity'), \n      'plugin' => $this->t('Plugin') \n    ], \n    '#default_value' => $this->options['importer'], \n  ); \n\n  parent::buildOptionsForm($form, $form_state); \n} \n```", "```php\nuse Drupal\\Core\\Form\\FormStateInterface;  \n```", "```php\n// If we want to show the entity label. \nif ($this->options['importer'] == 'entity') { \n  return $this->sanitizeValue($importer->label()); \n} \n\n// Otherwise we show the plugin label. \n$definition = $this->importerManager->getDefinition($importer->getPluginId()); \nreturn $this->sanitizeValue($definition['label']);  \n```", "```php\nviews.field.product_importer: \n  type: views_field \n  label: 'Product Importer' \n  mapping: \n    importer: \n      type: string \n      label: 'Which importer label to use: entity or plugin' \n```", "```php\n'filter' => array( \n  'id' => 'team_filter', \n),  \n```", "```php\nnamespace Drupal\\sports\\Plugin\\views\\filter; \n\nuse Drupal\\Core\\Database\\Connection; \nuse Drupal\\views\\Plugin\\views\\filter\\InOperator; \nuse Drupal\\views\\ViewExecutable; \nuse Drupal\\views\\Plugin\\views\\display\\DisplayPluginBase; \nuse Symfony\\Component\\DependencyInjection\\ContainerInterface; \n\n/** \n * Filter class which filters by the available teams. \n * \n * @ViewsFilter(\"team_filter\") \n */ \nclass TeamFilter extends InOperator { \n\n  /** \n   * @var \\Drupal\\Core\\Database\\Connection \n   */ \n  protected $database; \n  /** \n   * Constructs a TeamFilter plugin object. \n   * \n   * @param array $configuration \n   *   A configuration array containing information about the plugin instance. \n   * @param string $plugin_id \n   *   The plugin_id for the plugin instance. \n   * @param mixed $plugin_definition \n   *   The plugin implementation definition. \n   * @param \\Drupal\\Core\\Database\\Connection $database \n   *   The database connection. \n   */ \n  public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) { \n    parent::__construct($configuration, $plugin_id, $plugin_definition); \n    $this->database = $database; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) { \n    return new static( \n      $configuration, \n      $plugin_id, \n      $plugin_definition, \n      $container->get('database') \n    ); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL) { \n    parent::init($view, $display, $options); \n    $this->valueTitle = t('Teams'); \n    $this->definition['options callback'] = [$this, 'getTeams']; \n  } \n\n  /** \n   * Generates the list of teams that can be used in the filter. \n   */ \n  public function getTeams() { \n    $result = $this->database->query(\"SELECT name FROM {teams}\")->fetchAllAssoc('name'); \n    if (!$result) { \n      return []; \n    } \n\n    $teams = array_keys($result); \n    return array_combine($teams, $teams); \n  } \n}  \n```", "```php\nviews.filter.team_filter: \n  type: views_filter \n  label: 'The teams to filter by' \n  mapping: \n    value: \n      type: sequence \n      label: 'Teams' \n      sequence: \n        type: string \n        label: 'Team' \n```", "```php\nviews.filter_value.team_filter: \n  type: sequence \n  label: 'Teams' \n  sequence: \n    type: string \n    label: 'Team' \n```", "```php\n$data['teams']['team'] = array( \n  'title' => t('Team'), \n  'help' => t('The team (either an ID or a team name).'), \n  'argument' => array( \n    'id' => 'team', \n  ), \n); \n```", "```php\nnamespace Drupal\\sports\\Plugin\\views\\argument; \n\nuse Drupal\\views\\Plugin\\views\\argument\\ArgumentPluginBase; \n\n/** \n * Argument for filtering by a team. \n * \n * @ViewsArgument(\"team\") \n */ \nclass Team extends ArgumentPluginBase { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function query($group_by = FALSE) { \n    $this->ensureMyTable(); \n    $field = is_numeric($this->argument) ? 'id' : 'name'; \n    $this->query->addWhere(0, \"$this->tableAlias.$field\", $this->argument); \n  } \n}  \n```"]