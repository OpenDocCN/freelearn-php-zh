["```php\ninclude __DIR__ . '/bootstrap.php';\n\n$link = mysql_connect('localhost', 'a_username', '4_p4ssw0rd');\n\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\n\nmysql_set_charset('utf8', $link);\nmysql_select_db('my_database', $link);\n\n$errormsg = null ;\nif (isset($_POST['submit'] && isValid($_POST['post'])) {\n    $post = getFrom($_POST['post']);\n    mysql_query('START TRANSACTION', $link);\n    $sql = sprintf(\n        \"INSERT INTO posts (title, content) VALUES ('%s','%s')\",    \n        mysql_real_escape_string($post['title']),\n        mysql_real_escape_string($post['content']\n    ));\n\n    $result = mysql_query($sql, $link);\n    if ($result) {\n        mysql_query('COMMIT', $link);\n    } else {\n        mysql_query('ROLLBACK', $link);\n        $errormsg = 'Post could not be created! :(';\n    }\n}\n\n$result = mysql_query('SELECT id, title, content FROM posts', $link);\n?>\n<html>\n    <head></head>\n    <body>\n        <?php if (null !== $errormsg) : ?>\n            <div class=\"alert error\"><?php echo $errormsg; ?></div>\n        <?php else: ?>\n            <div class=\"alert success\">\n                Bravo! Post was created successfully!\n            </div>\n        <?php endif; ?>\n        <table>\n            <thead><tr><th>ID</th><th>TITLE</th>\n            <th>ACTIONS</th></tr></thead>\n            <tbody>\n            <?php while($post = mysql_fetch_assoc($result)) : ?>\n                <tr>\n                    <td><?php echo $post['id']; ?></td>\n                    <td><?php echo $post['title']; ?></td>\n                    <td><?php editPostUrl($post['id']); ?></td>\n                </tr>\n            <?php endwhile; ?>\n            </tbody>\n        </table>\n   </body>\n </html>\n <?php mysql_close($link); ?>\n\n```", "```php\ninclude __DIR__ . '/bootstrap.php';\n\n$link = mysql_connect('localhost', 'a_username', '4_p4ssw0rd');\n\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\n\nmysql_set_charset('utf8', $link);\nmysql_select_db('my_database', $link);\n\n$errormsg = null;\n\nif (isset($_POST['submit'] && isValid($_POST['post'])) {\n    $post = getFrom($_POST['post']);\n    mysql_query('START TRANSACTION', $link);\n    $sql = sprintf(\n        \"INSERT INTO posts(title, content) VALUES('%s','%s')\", \n        mysql_real_escape_string($post['title']),\n        mysql_real_escape_string($post['content'])\n    );\n\n    $result = mysql_query($sql, $link);\n    if ($result) {\n        mysql_query('COMMIT', $link);\n    } else {\n        mysql_query('ROLLBACK', $link);\n        $errormsg = 'Post could not be created! :(';\n    }\n}\n\n$result = mysql_query('SELECT id, title, content FROM posts', $link);\n?>\n<?php include __DIR__ . '/header.php'; ?>\n<?php if (null !== $errormsg) : ?>\n    <div class=\"alert error\"><?php echo $errormsg; ?></div>\n<?php else: ?>\n    <div class=\"alert success\">\n        Bravo! Post was created successfully!\n    </div>\n<?php endif; ?>\n<table>\n    <thead>\n        <tr>\n            <th>ID</th>\n            <th>TITLE</th>\n            <th>ACTIONS</th>\n        </tr>\n    </thead>\n    <tbody>\n    <?php while($post = mysql_fetch_assoc($result)): ?>\n        <tr>\n            <td><?php echo $post['id']; ?></td>\n            <td><?php echo $post['title']; ?></td>\n            <td><?php editPostUrl($post['id']); ?></td>\n        </tr>\n    <?php endwhile; ?>\n    </tbody>\n</table>\n<?php include __DIR__ . '/footer.php'; ?>\n\n```", "```php\nclass Post\n{\n    private $title;\n    private $content;\n\n    public static function writeNewFrom($title, $content)\n    {\n        return new static($title, $content);\n    }\n\n    private function __construct($title, $content)\n    {\n        $this->setTitle($title);\n        $this->setContent($content);\n    }\n\n    private function setTitle($title)\n    {\n        if (empty($title)) {\n            throw new RuntimeException('Title cannot be empty');\n        }\n\n        $this->title = $title;\n    }\n\n    private function setContent($content)\n    {\n        if (empty($content)) {\n            throw new RuntimeException('Content cannot be empty');\n        }\n\n        $this->content = $content;\n    }\n}\n\nclass PostRepository\n{\n    private $db;\n\n    public function __construct()\n    {\n        $this->db = new PDO(\n            'mysql:host=localhost;dbname=my_database',\n            'a_username',\n            '4_p4ssw0rd',\n            [\n                PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8mb4',\n            ]\n        );\n    }\n\n    public function add(Post $post)\n    {\n        $this->db->beginTransaction();\n\n        try {\n            $stm = $this->db->prepare(\n                'INSERT INTO posts (title, content) VALUES (?, ?)'\n            );\n\n            $stm->execute([\n                $post->title(),\n                $post->content(),\n            ]);\n\n            $this->db->commit();\n        } catch (Exception $e) {\n            $this->db->rollback();\n            throw new UnableToCreatePostException($e);\n        }\n    }\n}\n\n```", "```php\nclass PostService\n{\n    public function createPost($title, $content)\n    {\n        $post = Post::writeNewFrom($title, $content);\n\n        (new PostRepository())->add($post);\n\n        return $post;\n    }\n}\n\n```", "```php\n{% extends \"base.html.twig\" %}\n\n{% block content %}\n    {% if errormsg is defined %}\n        <div class=\"alert error\">{{ errormsg }}</div>\n    {% else %}\n        <div class=\"alert success\">\n            Bravo! Post was created successfully!\n        </div>\n    {% endif %}\n    <table>\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>TITLE</th>\n                <th>ACTIONS</th>\n            </tr>\n        </thead>\n        <tbody>\n        {% for post in posts %}\n            <tr>\n                <td>{{ post.id }}</td>\n                <td>{{ post.title }}</td>\n                <td><a href=\"{{ editPostUrl(post.id) }}\">Edit Post</a></td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n{% endblock %}\n\n```", "```php\nclass PostsController\n{\n    public function updateAction(Request $request)\n    {\n        if (\n            $request->request->has('submit') &&\n            Validator::validate($request->request->post)\n        ) {\n            $postService = new PostService();\n\n            try {\n                $postService->createPost(\n                    $request->request->get('title'),\n                    $request->request->get('content')\n                );\n\n                $this->addFlash(\n                    'notice',\n                    'Post has been created successfully!'\n                );\n            } catch (Exception $e) {\n                $this->addFlash(\n                    'error',\n                    'Unable to create the post!'\n                );\n            }\n        }\n\n        return $this->render('posts/update-result.html.twig');\n    }\n}\n\n```", "```php\ninterface PostRepository\n{\n    public function byId(PostId $id);\n    public function add(Post $post);\n}\n\n```", "```php\nclass PDOPostRepository implements PostRepository\n{\n    private $db;\n\n    public function __construct(PDO $db)\n    {\n        $this->db = $db;\n    }\n\n    public function byId(PostId $id)\n    {\n        $stm = $this->db->prepare(\n            'SELECT * FROM posts WHERE id = ?'\n        );\n\n        $stm->execute([$id->id()]);\n\n        return recreateFrom($stm->fetch());\n    }\n\n    public function add(Post $post)\n    {\n        $stm = $this->db->prepare(\n            'INSERT INTO posts (title, content) VALUES (?, ?)'\n        );\n\n        $stm->execute([\n            $post->title(),\n            $post->content(),\n        ]);\n    }\n}\n\n```", "```php\nclass PostService\n{\n    private $postRepository;\n\n    public function __construct(PostRepositor $postRepository)\n    {\n        $this->postRepository = $postRepository;\n    }\n\n    public function createPost($title, $content)\n    {\n        $post = Post::writeNewFrom($title, $content);\n\n        $this->postRepository->add($post);\n\n        return $post;\n    }\n}\n\n```", "```php\ninterface PostRepository \n{ \n    public function save(Post $post);\n    public function byId(PostId $id);\n    public function all(); \n    public function byCategory(CategoryId $categoryId); \n    public function byTag(TagId $tagId); \n    public function withComments(PostId $id); \n    public function groupedByMonth(); \n    // ... \n}\n\n```", "```php\ninterface PostRepository\n{ \n    public function save(Post $post); \n    public function byId(PostId $id); \n}\n\n```", "```php\nclass AggregateRoot\n{\n    private $recordedEvents = [];\n\n    protected function recordApplyAndPublishThat(\n        DomainEvent $domainEvent\n    ) {\n        $this->recordThat($domainEvent);\n        $this->applyThat($domainEvent);\n        $this->publishThat($domainEvent);\n    }\n\n    protected function recordThat(DomainEvent $domainEvent)\n    {\n        $this->recordedEvents[] = $domainEvent;\n    }\n\n    protected function applyThat(DomainEvent $domainEvent)\n    {\n        $modifier = 'apply' . get_class($domainEvent);\n\n        $this->$modifier($domainEvent);\n    }\n\n    protected function publishThat(DomainEvent $domainEvent)\n    {\n        DomainEventPublisher::getInstance()->publish($domainEvent);\n    }\n\n    public function recordedEvents()\n    {\n        return $this->recordedEvents;\n    }\n\n    public function clearEvents()\n    {\n        $this->recordedEvents = [];\n    }\n}\n\nclass Post extends AggregateRoot\n{\n    private $id;\n    private $title;\n    private $content;\n    private $published = false;\n    private $categories;\n\n    private function __construct(PostId $id)\n    {\n        $this->id = $id;\n        $this->categories = new Collection();\n    }\n\n    public static function writeNewFrom($title, $content)\n    {\n        $postId = PostId::create();\n\n        $post = new static($postId);\n\n        $post->recordApplyAndPublishThat(\n            new PostWasCreated($postId, $title, $content)\n        );\n    }\n\n    public function publish()\n    {\n        $this->recordApplyAndPublishThat(\n            new PostWasPublished($this->id)\n        );\n    }\n\n    public function categorizeIn(CategoryId $categoryId)\n    {\n        $this->recordApplyAndPublishThat(\n            new PostWasCategorized($this->id, $categoryId)\n        );\n    }\n\n    public function changeContentFor($newContent)\n    {\n        $this->recordApplyAndPublishThat(\n            new PostContentWasChanged($this->id, $newContent)\n        );\n    }\n\n    public function changeTitleFor($newTitle)\n    {\n        $this->recordApplyAndPublishThat(\n            new PostTitleWasChanged($this->id, $newTitle)\n        );\n    }\n}\n\n```", "```php\nclass Post extends AggregateRoot\n{\n    // ...\n\n    protected function applyPostWasCreated(\n        PostWasCreated $event\n    ) {\n        $this->id = $event->id();\n        $this->title = $event->title();\n        $this->content = $event->content();\n    }\n\n    protected function applyPostWasPublished(\n        PostWasPublished $event\n    ) {\n        $this->published = true;\n    }\n\n    protected function applyPostWasCategorized(\n        PostWasCategorized $event\n    ) {\n        $this->categories->add($event->categoryId());\n    }\n\n    protected function applyPostContentWasChanged(\n        PostContentWasChanged $event\n    ) {\n        $this->content = $event->content();\n    }\n\n    protected function applyPostTitleWasChanged(\n        PostTitleWasChanged $event\n    ) {\n        $this->title = $event->title();\n    }\n}\n\n```", "```php\n-- Definition of a UI view of a single post with its comments\nCREATE TABLE single_post_with_comments (\n    id INTEGER NOT NULL,\n    post_id INTEGER NOT NULL,\n    post_title VARCHAR(100) NOT NULL,\n    post_content TEXT NOT NULL,\n    post_created_at DATETIME NOT NULL,\n    comment_content TEXT NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- Set up some data\nINSERT INTO single_post_with_comments VALUES\n    (1, 1, \"Layered\" , \"Some content\", NOW(), \"A comment\"),\n    (2, 1, \"Layered\" , \"Some content\", NOW(), \"The comment\"),\n    (3, 2, \"Hexagonal\" , \"Some content\", NOW(), \"No comment\"),\n    (4, 2, \"Hexagonal\", \"Some content\", NOW(), \"All comments\"),\n    (5, 3, \"CQRS\", \"Some content\", NOW(), \"This comment\"),\n    (6, 3, \"CQRS\", \"Some content\", NOW(), \"That comment\");\n\n-- Query it\nSELECT * FROM single_post_with_comments WHERE post_id = 1;\n\n```", "```php\nSELECT * FROM\n    posts_grouped_by_month_and_year \nORDER BY month DESC,year ASC;\n\nSELECT * FROM\n    posts_by_tags \nWHERE tag = \"ddd\";\n\nSELECT * FROM\n    posts_by_author \nWHERE author_id = 1;\n\n```", "```php\nclass PostsController\n{\n    public function listAction()\n    {\n        $client = new ElasticsearchClientBuilder::create()->build();\n\n        $response = $client-> search([\n            'index' => 'blog-engine',\n            'type' => 'posts',\n            'body' => [\n                'sort' => [\n                    'created_at' => ['order' => 'desc']\n                ]\n            ]\n        ]);\n\n        return [\n            'posts' => $response\n        ];\n    }\n}\n\n```", "```php\ninterface Projection \n{ \n    public function listensTo(); \n    public function project($event); \n}\n\n```", "```php\nnamespace Infrastructure\\Projection\\Elasticsearch;\n\nuse Elasticsearch\\Client;\nuse PostWasCreated;\n\nclass PostWasCreatedProjection implements Projection\n{\n    private $client;\n\n    public function __construct(Client $client)\n    {\n        $this->client = $client;\n    }\n\n    public function listensTo()\n    {\n        return PostWasCreated::class;\n    }\n\n    public function project($event)\n    {\n        $this->client->index([\n            'index' => 'posts',\n            'type' => 'post',\n            'id' => $event->getPostId(),\n            'body' => [\n                'content' => $event->getPostContent(),\n                // ...\n            ]\n        ]);\n    }\n}\n\n```", "```php\nnamespace Infrastructure\\Projection;\n\nclass Projector\n{\n    private $projections = [];\n\n    public function register(array $projections)\n    {\n        foreach ($projections as $projection) {\n            $this->projections[$projection->eventType()] = $projection;\n        }\n    }\n\n    public function project( array $events)\n    {\n        foreach ($events as $event) {\n            if (isset($this->projections[get_class($event)])) {\n                $this->projections[get_class($event)] \n                    ->project($event);\n            }\n        }\n    }\n}\n\n```", "```php\n$client = new ElasticsearchClientBuilder::create()->build();\n\n$projector = new Projector();\n$projector->register([\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostWasCreatedProjection($client), \n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostWasPublishedProjection($client),\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostWasCategorizedProjection($client),\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostContentWasChangedProjection($client),\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostTitleWasChangedProjection($client),\n]);\n\n$events = [\n    new PostWasCreated(/* ... */),\n    new PostWasPublished(/* ... */),\n    new PostWasCategorized(/* ... */),\n    new PostContentWasChanged(/* ... */),\n    new PostTitleWasChanged(/* ... */),\n];\n\n$projector->project($event);\n\n```", "```php\n// Connect to an AMQP broker\n$cnn = new AMQPConnection();\n$cnn->connect();\n\n// Create a channel\n$ch = new AMQPChannel($cnn);\n\n// Declare a new exchange\n$ex = new AMQPExchange($ch);\n$ex->setName('events');\n\n$ex->declare();\n\n// Create an event loop\n$loop = ReactEventLoopFactory::create();\n\n// Create a producer that will send any waiting messages every half a second\n$producer = new Gos\\Component\\React\\AMQPProducer($ex, $loop, 0.5);\n\n$serializer = JMS\\Serializer\\SerializerBuilder::create()->build();\n\n$projector = new AsyncProjector($producer, $serializer);\n\n$events = [\n    new PostWasCreated(/* ... */),\n    new PostWasPublished(/* ... */),\n    new PostWasCategorized(/* ... */),\n    new PostContentWasChanged(/* ... */),\n    new PostTitleWasChanged(/* ... */),\n];\n\n$projector->project($event);\n\n```", "```php\nnamespace Infrastructure\\Projection;\n\nuse Gos\\Component\\React\\AMQPProducer;\nuse JMS\\Serializer\\Serializer;\n\nclass AsyncProjector\n{\n    private $producer;\n    private $serializer;\n\n    public function __construct(\n        Producer $producer,\n        Serializer $serializer\n    ) {\n        $this->producer = $producer;\n        $this->serializer = $serializer;\n    }\n\n    public function project(array $events)\n    {\n        foreach ($events as $event) {\n            $this->producer->publish(\n                $this->serializer->serialize(\n                    $event, 'json'\n                )\n            );\n        }\n    }\n}\n\n```", "```php\n// Connect to an AMQP broker\n$cnn = new AMQPConnection();\n$cnn-> connect();\n\n// Create a channel\n$ch = new AMQPChannel($cnn);\n\n// Create a new queue\n$queue = new AMQPQueue($ch);\n$queue->setName('events');\n$queue->declare();\n\n// Create an event loop\n$loop = React\\EventLoop\\Factory::create();\n\n$serializer = JMS\\Serializer\\SerializerBuilder::create()->build();\n\n$client = new Elasticsearch\\ClientBuilder::create()->build();\n\n$projector = new Projector();\n$projector->register([\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostWasCreatedProjection($client),\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostWasPublishedProjection($client),\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostWasCategorizedProjection($client),\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostContentWasChangedProjection($client),\n    new Infrastructure\\Projection\\Elasticsearch\\\n        PostTitleWasChangedProjection($client),              \n]);\n\n// Create a consumer\n$consumer = new Gos\\Component\\ReactAMQP\\Consumer($queue, $loop, 0.5, 10);\n\n// Check for messages every half a second and consume up to 10 at a time.\n$consumer->on(\n    'consume',\n    function ($envelope, $queue) use ($projector, $serializer) {\n        $event = $serializer->unserialize($envelope->getBody(), 'json');\n        $projector->project($event);\n    }\n);\n\n$loop->run();\n\n```", "```php\nclass DoctrinePostRepository implements PostRepository\n{\n    private $em;\n    private $projector;\n\n    public function __construct(EntityManager $em, Projector $projector)\n    {\n        $this->em = $em;\n        $this->projector = $projector;\n    }\n\n    public function save(Post $post)\n    {\n        $this->em->transactional(\n            function (EntityManager $em) use ($post)\n            {\n                $em->persist($post);\n\n                foreach ($post->recordedEvents() as $event) {\n                    $em->persist($event);\n                }\n            }\n        );\n\n        $this->projector->project($post->recordedEvents());\n    }\n\n    public function byId(PostId $id)\n    {\n        return $this->em->find($id);\n    }\n}\n\n```", "```php\ninterface EventSourcedAggregateRoot\n{\n    public static function reconstitute(EventStream $events);\n}\n\nclass Post extends AggregateRoot implements EventSourcedAggregateRoot\n{\n    public static function reconstitute(EventStream $history)\n    {\n        $post = new static($history->getAggregateId());\n\n        foreach ($events as $event) {\n            $post->applyThat($event);\n        }\n\n        return $post;\n    }\n}\n\n```", "```php\nclass EventStorePostRepository implements PostRepository\n{\n    private $eventStore;\n    private $projector;\n\n    public function __construct($eventStore, $projector)\n    {\n        $this->eventStore = $eventStore;\n        $this->projector = $projector;\n    }\n\n    public function save(Post $post)\n    {\n        $events = $post->recordedEvents();\n\n        $this->eventStore->append(new EventStream(\n            $post->id(),  \n            $events)\n        );\n        $post->clearEvents();\n\n        $this->projector->project($events);\n    }\n}\n\n```", "```php\nclass EventStorePostRepository implements PostRepository\n{\n    public function byId(PostId $id)\n    {\n        return Post::reconstitute(\n            $this->eventStore->getEventsFor($id)\n        );\n    }\n}\n\n```", "```php\nclass EventStore\n{\n    private $redis;\n    private $serializer;\n\n    public function __construct($redis, $serializer)\n    {\n        $this->redis = $redis;\n        $this->serializer = $serializer;\n    }\n\n    public function append(EventStream $eventstream)\n    {\n        foreach ($eventstream as $event) {\n            $data = $this->serializer->serialize(\n                $event, 'json'\n            );\n\n            $date = (new DateTimeImmutable())->format('YmdHis');\n\n            $this->redis->rpush(\n                'events:' . $event->getAggregateId(),\n                $this->serializer->serialize([\n                    'type' => get_class($event),\n                    'created_on' => $date,\n                    'data' => $data\n                ],'json')\n            );\n        }\n    }\n\n    public function getEventsFor($id)\n    {\n        $serializedEvents = $this->redis->lrange('events:' . $id, 0, -1);\n\n        $eventStream = [];\n        foreach($serializedEvents as $serializedEvent){\n            $eventData = $this->serializerdeserialize(\n                $serializedEvent, \n                'array',\n                'json'\n           );\n\n            $eventStream[] = $this->serializer->deserialize(\n                $eventData['data'],\n                $eventData['type'],\n                'json'\n            );\n        }\n\n        return new EventStream($id, $eventStream);\n    }\n}\n\n```", "```php\nclass SnapshotRepository\n{\n    public function byId($id)\n    {\n        $key = 'snapshots:' . $id;\n        $metadata = $this->serializer->unserialize(\n            $this->redis->get($key)\n        );\n\n        if (null === $metadata) {\n            return;\n        } \n\n        return new Snapshot(\n            $metadata['version'],\n            $this->serializer->unserialize(\n                $metadata['snapshot']['data'],\n                $metadata['snapshot']['type'],\n                'json'\n            )\n        );\n    }\n\n    public function save($id, Snapshot $snapshot)\n    {\n        $key = 'snapshots:' . $id;\n        $aggregate = $snapshot->aggregate();\n\n        $snapshot = [\n            'version' => $snapshot->version(),\n            'snapshot' => [\n                'type' => get_class($aggregate),\n                'data' => $this->serializer->serialize(\n                    $aggregate, 'json'\n                )\n            ]\n        ];\n\n        $this->redis->set($key, $snapshot);\n    }\n}\n\n```", "```php\nclass EventStorePostRepository implements PostRepository\n{\n    public function byId(PostId $id)\n    {\n        $snapshot = $this->snapshotRepository->byId($id);\n\n        if (null === $snapshot) {\n            return Post::reconstitute(\n                $this->eventStore->getEventsFrom($id)\n            );\n        }\n\n        $post = $snapshot->aggregate();\n\n        $post->replay(\n            $this->eventStore->fromVersion($id, $snapshot->version())\n        );\n\n        return $post;\n    }\n}\n\n```", "```php\nclass EventStorePostRepository implements PostRepository\n{\n    public function save(Post $post)\n    {\n        $id = $post->id();\n        $events = $post->recordedEvents();\n        $post->clearEvents();\n        $this->eventStore->append(new EventStream($id, $events));\n        $countOfEvents =$this->eventStore->countEventsFor($id);\n        $version = $countOfEvents / 100;\n\n        if (!$this->snapshotRepository->has($post->id(), $version)) {\n            $this->snapshotRepository->save(\n                $id,\n                new Snapshot(\n                    $post, $version\n                )\n            );\n        }\n\n        $this->projector->project($events);\n    }\n}\n\n```"]