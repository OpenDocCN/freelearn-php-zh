- en: Chapter 12. Mobile First, Responsive Design with Progressive Enhancement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章. 移动优先，渐进增强的响应式设计
- en: This is most definitely the chapter with the longest title. There is also a
    lot of text inside the first part of this chapter, as you will find little or
    no code examples there. Here, we discuss the newest trends in web development,
    what is causing it, and what it replaces.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑是标题最长的章节。在这一章的前一部分，还有很多文字，正如你将发现那里几乎没有代码示例。在这里，我们讨论了最新的Web开发趋势，是什么导致了它，以及它取代了什么。
- en: Responsive design
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式设计
- en: A viewport, or the section of the screen where your browser is, comes in all
    kinds of sizes. Some are very small, such as the screen of your smartphone, and
    some can be very large. When I looked at my old website on a screen a lot larger
    than the one I was used to work on, it was so ugly that I decided to completely
    redo it using a **responsive design**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 视口，或者说浏览器所在的屏幕部分，有各种大小。有些非常小，比如你智能手机的屏幕，有些可以非常大。当我看到我在一个比我习惯工作的屏幕大得多的屏幕上查看我的旧网站时，它看起来如此丑陋，以至于我决定完全重新设计它，使用**响应式设计**。
- en: Designing a web page with a fixed width specified in pixels today really is
    out of the question, as is making several versions of your website to accommodate
    all these sizes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，使用指定像素固定宽度的网页设计真的不可行，同样，为了适应所有这些尺寸而制作你网站的多个版本也是不可行的。
- en: In responsive design—I am always tempted to call it responsible design—one does
    not start off with a canvas of, let us say, 960 px wide and build a site that
    way, chopping it into fixed size `<div>` blocks. As soon as the view port is smaller
    than 960px, a part of the site would not be visible and, maybe worse, when the
    screen is really big, everything around your 960x wide rectangle will look boring
    and empty. This is simply not done today.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应式设计——我总是想称之为负责任的设计——中，你不会从一个宽度为960像素的画布开始，然后那样构建一个网站，将其切割成固定大小的`<div>`块。一旦视口小于960像素，网站的一部分将不可见，也许更糟的是，当屏幕真的很大时，你960像素宽的矩形周围的一切都会显得无聊和空旷。这在今天根本不是一种做法。
- en: 'A good design should adjust, respond, to the screen size and always look good.
    To have a good responsive design, you need to:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的设计应该能够调整、响应屏幕尺寸，并且始终保持美观。要有一个好的响应式设计，你需要：
- en: 'Use a flexible grid: have your building blocks sit side by side when there
    is room, stack them on top of each other when there is none, and proportionally
    adjust sizes to do so'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用灵活的网格：当有空间时，让您的构建块并排放置，当没有空间时，将它们堆叠在一起，并按比例调整大小以实现这一点
- en: Use percentages, not pixels, in your CSS when you define those sizes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在定义这些尺寸时，在CSS中使用百分比而不是像素
- en: Use media queries to specify different properties for different screen sizes,
    resolutions, orientations, and so on
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用媒体查询来指定不同屏幕尺寸、分辨率、方向等的不同属性
- en: Use flexible images and fonts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用灵活的图片和字体
- en: This seems like a lot of work. The good news is that others have already done
    that hard work for you. There are several CSS/JavaScript frameworks available
    that feature all the things we just listed. You will simply have to add media
    queries, customized to your site. The hardest part is probably which framework
    to choose, as there are several really good ones, in particular **Bootstrap**
    and **Foundation**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是一项大量的工作。好消息是，其他人已经为你做了这些艰苦的工作。有几个CSS/JavaScript框架可供选择，它们都具备我们刚刚列出的所有功能。你只需添加定制的媒体查询即可。最难的部分可能是选择哪个框架，因为有几个非常好的框架，特别是**Bootstrap**和**Foundation**。
- en: We have chosen for Foundation and that will be the topic of the next chapter.
    That choice was a matter of taste or preference. *De gustibus non disputandum!*
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了Foundation，这将是下一章的主题。这个选择是一个口味或偏好的问题。*关于口味，无需争论！*
- en: Déjà vu
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前世今生
- en: As I am writing this, I am having a flashback-like experience. In my first job
    in the software industry, I was responsible for porting a software package, TEN/PLUS,
    to several different flavors of UNIX. Its main component was a full-screen editor.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我写这篇文章时，我有一种闪回般的体验。在我软件行业的第一份工作中，我负责将一个软件包，TEN/PLUS，移植到几种不同的UNIX版本。其主要组件是一个全屏编辑器。
- en: A full screen in those days was that of a so called **dumb terminal** with 24
    lines holding 80 characters each. Then came the **X Window System** and monitors
    in graphics mode, with icons and many utilities, support for a mouse, and so on.
    One of those utilities is **xterm**, an X client emulating a dumb terminal. That
    of course meant you could run full screen editors inside it. But you could resize
    the xterm window, to be one with more lines or longer lines.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那时的全屏是一个所谓的**哑终端**，有24行，每行80个字符。然后出现了**X窗口系统**和图形模式的显示器，有图标和许多实用程序，支持鼠标等。这些实用程序之一是**xterm**，一个模拟哑终端的X客户端。当然，这意味着您可以在其中运行全屏编辑器。但是您可以调整xterm窗口的大小，使其有更多的行或更长的行。
- en: So I had to modify our software to adjust to that size and still be a full-screen
    editor inside xterm, even if it was 64 lines by 120 characters. This was responsive
    design 25 years ago! And in 2015 people are still using editors such as vi, emacs,
    nano, and so on inside terminal windows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我不得不修改我们的软件以适应那个尺寸，并且仍然在xterm内部作为一个全屏编辑器，即使它是64行乘以120个字符。这在25年前就是响应式设计！而在2015年，人们仍然在终端窗口中使用vi、emacs、nano等编辑器。
- en: Media queries
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 媒体查询
- en: The keyword **media** has been in use from the very beginning in HTML and CSS,
    but it was basically limited to specifying `media="print"` or `media="screen"`
    inside the `<link>` tag where you specified your CSS file, or by using `@media`
    screen inside the CSS file itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字**media**自HTML和CSS一开始就被使用，但它基本上仅限于在指定CSS文件的`<link>`标签中使用`media="print"`或`media="screen"`，或者在使用CSS文件本身的`@media`
    screen。
- en: As of CSS3 and HTML5, we can use media queries in more sophisticated ways, to
    have specific styling that is applied only when certain conditions are met. Although
    the `media` attribute can still be used inside the `<link>` tag, we recommend
    you use them inside your CSS files. Media queries are essential to responsive
    design and, even though we promised you little or no work thanks to available
    frameworks, it is essential to know how to write or read them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从CSS3和HTML5开始，我们可以以更复杂的方式使用媒体查询，以便在满足某些条件时应用特定的样式。尽管`media`属性仍然可以在`<link>`标签中使用，但我们建议您在CSS文件中使用它们。媒体查询对于响应式设计至关重要，尽管我们承诺您几乎不需要工作，因为有了可用的框架，但了解如何编写或阅读它们是至关重要的。
- en: 'Here is a typical media query:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个典型的媒体查询：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In between the curly braces, you would write the styling that is applicable
    to viewports that are between 480 and 690 pixels wide and your device is in portrait
    mode. Everything that came before will apply. Everything that is between those
    curly braces will override what came before.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在大括号之间，您将编写适用于宽度在480到690像素之间且设备处于纵向模式的视口的样式。之前的一切都将适用。在大括号之间的一切将覆盖之前的内容。
- en: 'Here are some of the most common keywords that can be used in media queries:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些在媒体查询中可以使用的最常见的关键字：
- en: '**width**: Width of display area'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽度**：显示区域的宽度'
- en: '**height**: Height of display area'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度**：显示区域的高度'
- en: '**device-width**: Width of device'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**device-width**：设备的宽度'
- en: '**device-height**: Height of device'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**device-height**：设备的宽度'
- en: '**orientation**: Orientation of device (portrait or landscape)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向**：设备的方向（纵向或横向）'
- en: '**resolution**: Density of pixels, expressed as dpi or dpcm'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分辨率**：像素密度，以dpi或dpcm表示'
- en: All, except for orientation of course, can be preceded by minimum or maximum.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了当然的方向之外，所有这些都可以由最小值或最大值来修饰。
- en: Starting the media query with the word `only` is a handy way to deal with browsers
    that do not support these newer media queries. It will be silently ignored.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以单词`only`开头开始媒体查询是一种处理不支持这些较新媒体查询的浏览器的便捷方法。它将被静默忽略。
- en: 'The difference between width and height and the equivalent values prefixed
    by device should be easy to understand: width and height refer to the size of
    the browser viewport, whereas device-width and device-height refer to the dimensions
    of the monitor. Not everybody runs his or her browser full-screen, so width and
    height are the measurements that you need to use. There is one big caveat though.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 宽度和高度之间的区别以及以设备为前缀的等效值应该容易理解：宽度和高度指的是浏览器视口的尺寸，而device-width和device-height指的是显示器的尺寸。并不是每个人都使用全屏浏览器，所以宽度和高度是您需要使用的测量值。但是有一个大问题。
- en: Mobile browsers fill the available screen, so you might expect width and device-width
    to be the same. Unfortunately, that's not always the case. Most smart-phones set
    the width to a nominal value approximately 1,000 pixels wide (for an iPhone, it's
    980 pixels). You have seen several adds of mobile phones showing a full page of
    the New York Times on the tiny phone. That's why!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 移动浏览器填充可用屏幕，所以你可能期望宽度和设备宽度相同。不幸的是，情况并不总是如此。大多数智能手机将宽度设置为大约1,000像素的标称值（对于iPhone，是980像素）。你看到过几个展示在小型手机上显示整个《纽约时报》全页的手机广告。那就是原因！
- en: 'With the fine retina displays of today, you would even be able to read the
    paper that way. But if you worked hard in getting your media queries right for
    various devices and have one for, let''s say `max-width:480px`, your beautiful
    responsive design will not show up on that mobile phone. Fortunately, there is
    a remedy for this. Simply put the following line in the `<head>` section of your
    page:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随着今天出色的视网膜显示屏，你甚至能够以这种方式阅读报纸。但如果你在为各种设备正确设置媒体查询上付出了很多努力，并且有一个针对`max-width:480px`的查询，那么你的美丽响应式设计将不会显示在那个手机上。幸运的是，有一种补救方法。只需将以下行放入你页面的`<head>`部分：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we are truly on our way to a responsive design. By using media queries,
    we can create a page with a single design that will show elements on the page
    (think `<div>`) next to each other on a large screen, show them stacked on top
    of each other on a tablet in portrait mode, and show fewer of them on a mobile
    phone.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们真正走上了响应式设计的道路。通过使用媒体查询，我们可以创建一个页面，该页面具有单一的设计，在大屏幕上显示页面上的元素（例如`<div>`）并排显示，在平板电脑的纵向模式下堆叠显示，在手机上显示更少的元素。
- en: Using the media attribute
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用媒体属性
- en: 'You have probably seen sites containing a line like this in the `<head>` section:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经看到一些网站在`<head>`部分包含这样的行：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It uses the `media` attribute to indicate if this stylesheet needs to be used.
    In HTML4 this was basically `screen` or `print`. In HTML5 the media attribute
    can have a lot more values. Those can be the same as what we put after `@media`
    only on our examples. So if we wanted, we could organize our CSS code in separate
    stylesheets, one for each media type and use them as appropriate, as is shown
    in the following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用`media`属性来指示是否需要使用此样式表。在HTML4中，这基本上是`screen`或`print`。在HTML5中，媒体属性可以有更多的值。这些值可以与我们在`@media`后放置的内容相同，仅限于我们的示例。因此，如果我们想的话，我们可以将CSS代码组织成单独的样式表，每个媒体类型一个，并按需使用它们，如下例所示：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Do more with less
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以少胜多
- en: This term probably brings back bad memories to people who lived through the
    period before and during the financial crisis, but that is not what we are going
    to talk about.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个术语可能让经历过金融危机前后时期的人回忆起不好的记忆，但那不是我们要讨论的。
- en: 'Now that we have introduced media queries, we are at risk of having to write
    a lot more CSS, one set of rules for each media query we decide to use. Assume
    we divide it like three T-shirt sizes: small, medium, large. Add to that portrait
    and landscape flavors of each: you now have six.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了媒体查询，我们面临的风险是不得不写更多的CSS，为每个我们决定使用的媒体查询编写一组规则。假设我们将其分为三种T恤尺寸：小号、中号、大号。再加上每种尺寸的纵向和横向版本：你现在有六种。
- en: 'Imagine that someone in the marketing department decides to change the corporate
    color: you now have to make six changes to your stylesheet.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，营销部门有人决定更改公司颜色：你现在必须对你的样式表进行六处更改。
- en: 'This is where extensions to CSS, such as **less** (**SASS** is another one)
    prove to be very handy. One of its features is the use of **variables**. Create
    a `.less` file to hold your stylesheet information. Use a variable to hold the
    color information:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是CSS扩展（如**less**，**SASS**是另一个）非常有用的地方。其一个特性是使用**变量**。创建一个`.less`文件来保存你的样式表信息。使用变量来保存颜色信息：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inside your media queries, wherever you need to specify this color, use:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的媒体查询中，无论何时需要指定此颜色，请使用：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Imagine you want to change it to `teal`. Just replace that single line by:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想将其改为`teal`。只需将那一行替换为：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Bingo! You have changed your color in all six places. Isn't that nice?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 哈哈！你已经在这六个地方更改了颜色。这不是很好吗？
- en: 'Less has more features such as mixins, nested rules, media queries, and more,
    resulting in better structured and easier to maintain stylesheets. It is all described
    very clearly at [lesscss.org](http://lesscss.org). The name of the site immediately
    explains why they call it less: You will end up writing less CSS. Just look at
    these two examples. The following is the `less` code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Less具有更多功能，如混入（mixins）、嵌套规则、媒体查询等，这使得样式表结构更清晰且易于维护。所有这些都在[lesscss.org](http://lesscss.org)上描述得非常清楚。网站的名字立即解释了为什么他们称之为less：你将最终写出更少的CSS。只需看看这两个例子。以下是一个`less`代码示例：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will be translated into the following CSS. And if you really start nesting,
    this can become a lot more:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将被转换为以下CSS。如果你真的开始嵌套，这可以变得更多：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s have one more example with media queries. We could write:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再举一个使用媒体查询的例子。我们可以这样写：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will be translated into the following CSS. Don't you think the `less` version
    is less verbose?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将被转换为以下CSS。你不认为`less`版本更简洁吗？
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now how do we convert the less file to CSS content? There are two ways to do
    this. When we reach the production stage, we want to use a compiler to generate
    the CSS file from our less file. In [Chapter 14](ch14.html "Chapter 14. Node.js"),
    *Node.js*, you will learn about Node.js and node modules. There is a `node` module
    for less.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们如何将less文件转换为CSS内容？有两种方法可以做到这一点。当我们达到生产阶段时，我们希望使用编译器将我们的less文件生成CSS文件。在[第14章](ch14.html
    "第14章。Node.js")中，你将学习关于Node.js和node模块的内容。有一个用于less的`node`模块。
- en: For now, while we are still developing and experimenting more with less, download
    `less.js` from the [lesscss.org](http://lesscss.org) site.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当我们还在开发和实验less时，请从[lesscss.org](http://lesscss.org)网站下载`less.js`。
- en: 'Inside the `<head>` section of your page, list your `less` file in a `link`
    tag:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在你页面的`<head>`部分，使用`link`标签列出你的`less`文件：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I like to keep my `less` files in a `less` folder. In the right spot on your
    page, for example, right before the closing `</body>` tag, add:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢将我的`less`文件保存在一个`less`文件夹中。例如，在你的页面上的正确位置，比如在关闭`</body>`标签之前，添加以下内容：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now your `less` file will be converted to CSS on-the-fly, each time the page
    is loaded. Note that, when editing your `less` files, not all editors will give
    you the nice color coding and formatting they feature when you edit CSS files.
    I use Textastic to edit my `less` files. To paraphrase the governator: *You have
    to watch this editor: it is fantastic!*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每次页面加载时，你的`less`文件都会即时转换为CSS。请注意，当你编辑`less`文件时，并非所有编辑器都会提供与编辑CSS文件时相同的出色颜色编码和格式化。我使用Textastic来编辑我的`less`文件。用州长的话来说：*你必须看看这个编辑器：它太棒了！*
- en: Mobile first
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先考虑移动端
- en: Now that we covered how to make our design responsive and make our page look
    good on screens of all sizes, you might think we have covered mobile devices as
    well. Nope.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何使我们的设计响应式，并使我们的页面在各种尺寸的屏幕上看起来都很好，你可能会认为我们已经涵盖了移动设备。不，还没有。
- en: Supporting mobiles is not just about screen sizes. You may have seen the add
    we talked about where a guy is reading the *New York Times* on his iPhone, a full
    page spread. This is how mobile devices will render websites on high- resolution
    displays, unless you tell them not to. Before we continue this thread, I would
    like to stress that this discussion is about how to design **web applications**
    that are interpreted by mobile browsers, not native iOS or Android apps.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 支持移动设备不仅仅是关于屏幕尺寸。你可能见过我们提到的那个广告，一个家伙正在他的iPhone上阅读《纽约时报》，整版。这就是移动设备在没有告诉它们不要这样做的情况下，在高分辨率显示器上渲染网站的方式。在我们继续这个话题之前，我想强调，这次讨论是关于如何设计由移动浏览器解释的**Web应用程序**，而不是原生的iOS或Android应用程序。
- en: Why mobile first?
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么首先考虑移动端？
- en: 'Let''s reply with a question: why not? Or let''s answer it: because mobile
    *is* first. Mobile devices (smart-phones and tablets) have been shipping 4-5x
    more units than PCs or TVs for several years now. More users are visiting the
    Web using a mobile connection than with fixed Internet access. That is why it
    is important to think first what experience these mobile users will have when
    they visit our site and not create a fixed canvas version of a site first and
    then make changes to deal with mobile users. That would be another case of (not
    so) *graceful degradation*.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个问题来回答：为什么不呢？或者让我们来回答它：因为移动端**确实是**首先考虑的。智能手机和平板电脑的出货量已经比PC或电视多4-5倍，现在已经有更多用户使用移动连接访问网络，而不是固定互联网接入。这就是为什么在考虑移动用户访问我们的网站时，首先考虑他们的体验，而不是首先创建一个固定画布版本的网站，然后再对移动用户进行修改，这是一个（不那么）*优雅降级*的例子。
- en: You may not always have the choice if your marketing person shows up with yet
    another static design from the design firm. But marketing people like numbers,
    so tell them to check the numbers and you may have a soul mate soon.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你营销人员又带来设计公司提供的另一个静态设计，你可能没有选择。但营销人员喜欢数字，所以告诉他们检查数字，你可能会很快找到一个志同道合的人。
- en: We have come a long way
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们已经走了很长的路
- en: In 2007, not all that long ago, I was developing a modest website with my photographs.
    A friend of mine was checking it out on his smartphone. After seeing this, I had
    to buy one myself, not because it was so great but because I needed one to test
    my website; at least, that was my justification. Even though I could not really
    afford it, I got the latest greatest Nokia, a brick compared to today's iPhone,
    that you could flip open to give you a bigger screen and a real keyboard. But
    the web access on it was terrible. It took what seemed like forever to get a browser
    started. The little keyboard was OK but the experience is quite different today
    when I use my iPhone or iPad with a sturdy Bluetooth keyboard. As a matter of
    fact, a lot of this book was written on an iPad while sitting on the train.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在2007年，不是很久以前，我正在开发一个带有我的照片的简单网站。我的一个朋友在智能手机上检查它。看到这个后，我不得不自己买一个，不是因为它有多好，而是因为我需要它来测试我的网站；至少，那是我的借口。尽管我实际上负担不起，但我买了最新的最棒的诺基亚，与今天的iPhone相比就像一块砖头，你可以翻开来给你一个更大的屏幕和真正的键盘。但它的网络接入非常糟糕。启动浏览器似乎需要很长时间。小键盘还可以，但与我现在使用坚固的蓝牙键盘在iPhone或iPad上的体验相比，那完全不同。事实上，这本书的大部分内容都是在火车上坐着用iPad写的。
- en: The year before I made several trips back to Belgium and, because my parents
    had no Internet at home, I went to a so-called Internet hotspot to check my e-mails.
    For 10 Euros an hour, you could buy a scratchcard that revealed an access code
    that you needed to use on the local carrier's website together with your cell
    phone number; then they sent you a password by SMS. This whole procedure would
    sometimes take 20 minutes and cost me international roaming charges because I
    had a U.S. phone number. Now I had 40 minutes worth of Wi-Fi left to myself. Mobile
    Internet was slow and expensive.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前回到比利时的一年里，我多次往返，因为我的父母家里没有互联网，所以我去了所谓的互联网热点来检查我的电子邮件。每小时10欧元，你可以买一张刮刮卡，上面有一个你需要与你的手机号码一起在本地运营商网站上使用的访问代码；然后他们通过短信给你发送密码。这个整个过程有时需要20分钟，并且因为我的手机号码是美国的，所以我需要支付国际漫游费用。现在我还有40分钟的Wi-Fi时间。移动互联网既慢又贵。
- en: Now most of these barriers are gone, bandwidth is up, Wi-Fi is free in most
    places, or you can install a SIM card.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些障碍大多已经消失，带宽提高了，大多数地方的Wi-Fi都是免费的，或者你可以安装SIM卡。
- en: To take the term *We have come a long way* one step further, allow me to share
    one little anecdote. I am a big fan of the Eastern Sierra and have taken many
    trips there, most of the time going through Yosemite National Park. I know a nice
    alternate road to take you to the West entrance of the Park that goes through
    the Gold Country town of Coulterville.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步阐述“我们已经走了很长的路”这个说法，让我分享一个小故事。我是东部内华达山脉的大粉丝，已经去过那里很多次，大多数时候都是通过优胜美地国家公园。我知道一条通往公园西入口的不错的替代道路，它穿过科尔特维尔的金矿镇。
- en: 'The local Jeffery Hotel has a saloon with two signs above the entrance door.
    One says: *"Magnolia Saloon - est. 1851 - California''s Oldest Operating Saloon"*.
    The one right above it says: *Free WiFi*.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当地的杰弗里酒店入口门上方有两个招牌。一个写着：“**马格诺利亚酒吧 - 创立于1851年 - 加利福尼亚最古老的营业酒吧**”。上面的一个写着：“**免费WiFi**”。
- en: Mobile devices have newer capabilities
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移动设备有更多的新功能
- en: The situation described in the last few paragraphs—except for the saloon—has
    definitely turned around. Mobile devices perform well, Internet access is affordable,
    and the majority of the devices used can access the World Wide Web, so we better
    make sure people can access our site or applications with them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上文描述的情况——除了酒吧——确实已经发生了转变。移动设备性能良好，互联网接入价格合理，大多数使用的设备都可以访问万维网，所以我们最好确保人们可以用它们访问我们的网站或应用程序。
- en: I am not in the habit of using a lot of numbers, I have only used a few so far,
    but in a recent survey I learned that, of mobile phone users, 84% use them while
    at home, 63% while in the office, and 42% while on the move.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我不习惯使用很多数字，到目前为止我只用了几个，但在最近的一项调查中，我了解到，在手机用户中，84%的人在在家时使用，63%的人在办公室使用，42%的人在移动中使用。
- en: On mobile devices, there is no clicking with the mouse and no hovering on a
    phone or tablet, but there is **swiping**. There are many new interfaces, often
    tied to hardware and iOS that you will not find on desktops. The interface to
    select a date on a phone is different than, for example, using the jQuery UI date
    picker.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动设备上，没有鼠标点击，也没有在手机或平板电脑上悬停，但存在**滑动**。有许多新的界面，通常与硬件和iOS相关，你不会在桌面上找到这些界面。在手机上选择日期的界面与使用jQuery
    UI日期选择器不同。
- en: 'If you read the specs of the latest greatest iPhone on the Apple website, I
    bet you they forgot to mention one important feature of the product, at least
    not in a very visible and obvious way: you can make phone calls with it. So if
    the contact information of your site contains phone numbers, let the user make
    a phone call by just clicking that number. It is as easy as putting an `<a>` tag
    around it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读了苹果网站上最新最伟大的iPhone的规格，我敢打赌他们忘记提到了这个产品的一个重要特性，至少不是以一种非常明显和明显的方式：你可以用它打电话。所以如果你的网站上的联系方式包含电话号码，让用户只需点击那个号码就能打电话。这就像给它加上一个`<a>`标签一样简单：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This may be a trivial example, but it illustrates mobile first thinking. And
    the phone will do the rest. So make sure that, when an application is used on
    a mobile with one of these new capabilities, it can be used.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个微不足道的例子，但它说明了以移动为先的思考方式。手机将完成剩下的工作。所以确保当应用程序在手机上使用这些新功能之一时，它可以用。
- en: Mobile devices are not only used while on the road
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移动设备不仅在路上使用
- en: Forget screen sizes, think content. It is not about small versus large, but
    about mobile versus local, about on-the-road versus at home. When someone is traveling
    and is looking for his hotel, he expects to quickly find contact info when he
    checks the hotel's website on his mobile, not photographs of the rooms and the
    indoor and outdoor pool. But he may have used that same mobile, while sitting
    in his couch at home to make the reservation, because the kids were using the
    computer or iPad. So on that day he was interested in those pictures.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记屏幕尺寸，考虑内容。这不仅仅是关于小与大的问题，而是关于移动与本地，关于在路上与在家的问题。当有人旅行并寻找酒店时，他期望在用手机查看酒店网站时能快速找到联系方式，而不是房间的照片和室内外游泳池的照片。但他在坐在家里的沙发上时，可能已经用同样的手机做了预订，因为孩子们正在使用电脑或iPad。所以那天他对那些照片感兴趣。
- en: So if he is looking for the hotel we could, if the phone supports it, show him
    a map on his smart phone, in a GPS-like fashion, showing his location as well
    as that of his hotel.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果他正在寻找酒店，如果我们支持的话，可以在他的智能手机上显示一个类似于GPS的地图，显示他的位置以及他的酒店位置。
- en: What we do not want to do is to make his cellular phone carrier wealthy by forcing
    a download of 900x600 JPG files in areas where bandwidth is poor yet expensive,
    because someone decided to have a photo banner on the home page at any given time.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望做的事情是通过强制在带宽差且昂贵的地区下载900x600的JPG文件，从而使他的手机运营商变得富有，因为有人决定在任何时候在主页上放置一个照片横幅。
- en: Content first, navigation next
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内容优先，导航其次
- en: The previous comments boil down to this. In our thinking, we should put the
    most important content within immediate reach. Having a horizontal menu with *contact*
    all the way to the right or, worse, somewhere at the bottom of the page is not
    going to help our traveler.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的评论归结为以下几点。在我们的思考中，我们应该把最重要的内容放在最接近的地方。在页面的最右边或更糟糕的是页面的底部有一个带有*联系*的横向菜单是不会帮助我们的旅行者的。
- en: In a recent project where I had to deal with a design firm's wireframe made
    for a desktop screen, containing a horizontal navigation, I looked at all the
    navigation items and rearranged them, contact first, replaced the photo banner
    with responsive images and replaced that menu with the word `menu` with three
    stripes underneath.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个最近的项目中，我不得不处理一个为桌面屏幕设计的、包含水平导航的设计公司的线框图，我查看所有导航项并重新排列了它们，首先是联系，用响应式图像替换了照片横幅，并用带有下面三条横线的`menu`这个词替换了那个菜单。
- en: I placed most of my code inside my `max-width:480px` media query. A simple tab
    on `menu` would present the visitor with a menu on the small screen with all the
    relevant topics.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我把大部分代码放在了`max-width:480px`媒体查询中。在`menu`上简单地按一下标签，就会在小屏幕上向访客展示包含所有相关主题的菜单。
- en: The way I did this, the menu will appear to be coming from the left of your
    phone somewhere, similar to what the Facebook app does. I used **Foundation**
    to achieve that. You will learn about Foundation in the next chapter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我这样做的方式是，菜单看起来像是从你手机的左侧某个地方出现的，类似于Facebook应用的做法。我使用了**Foundation**来实现这一点。你将在下一章了解Foundation。
- en: Small means big
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 小意味着大
- en: You may have noticed on many sites, even really good ones, that you are being
    switched to a mobile version of the site, a different URL like `m.site.com`, while
    visiting them on your smart-phone. This is not what we recommend. Once you decide
    to go with two, what is to stop you from creating a third, and so on? Many web
    designers who stay with a single site react to smaller by shrinking everything
    down so things still fit on the screen.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在许多网站上，甚至是非常好的网站上，当你用智能手机访问它们时，你会被切换到网站的移动版本，一个不同的URL如`m.site.com`。这不是我们推荐的做法。一旦你决定采用两个版本，那么阻止你创建第三个版本，以此类推的是什么？许多坚持单一网站的网页设计师会对较小的屏幕尺寸做出反应，将所有东西都缩小，以便仍然适应屏幕。
- en: In many cases, you may want to do the opposite because it is going to become
    hard to read. Retina screens and the like are so crisp these days that smaller
    typefaces on these screens are actually easy to read. You could do both by handling
    the Retina or not question in a media query.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，你可能想要做相反的事情，因为这会变得难以阅读。视网膜屏幕等设备现在非常清晰，这些屏幕上的小字体实际上很容易阅读。你可以通过在媒体查询中处理视网膜或非视网膜问题来实现这一点。
- en: On the other hand, this is an as-good-as-ever moment to point out that, of these
    millions of new people accessing the Web on mobiles, many are of an older generation
    who would appreciate a bigger font size because their eyes are not what they used
    to be.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，这是一个指出，在这数百万通过手机访问互联网的新人中，许多是年长的一代，他们可能会欣赏更大的字体大小，因为他们的视力已经不如以前了。
- en: The real issue is not the text but that you do not have the pixel-level accuracy
    of a mouse. When you want to click on something you will have to use your finger.
    If these areas are shrunk down as well, the risk of clicking on the wrong thing
    goes up dramatically.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的问题不是文本，而是你没有鼠标像素级别的精确度。当你想要点击某个东西时，你必须用手指。如果这些区域也缩小了，点击错误东西的风险会大大增加。
- en: Mobile input
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移动输入
- en: 'We mentioned reading, we mentioned clicking, how about filling out a web form?
    A lot of old-school websites—for example, web shops containing registration forms—have
    many `<input>` fields and are designed to fit on a full screen with a single *submit*
    button at the end. So, on a phone this is going to be hard; therefore you may
    want to consider splitting up these forms. If the input field is not big enough,
    tapping with a finger may take the user to the wrong spot. So you want to make
    these bigger than on a desktop. But there is one other thing about input that
    is often forgotten: the keyboard.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到了阅读，提到了点击，那么填写网页表单呢？许多老式的网站——例如，包含注册表单的网店——有许多`<input>`字段，并且设计成可以适应整个屏幕，在最后有一个单独的*提交*按钮。所以，在手机上这会变得很困难；因此你可能想要考虑将这些表单拆分。如果输入字段不够大，用手指点击可能会让用户点到错误的位置。所以你希望让这些比在桌面上的更大。但关于输入还有另一件事经常被忘记：键盘。
- en: On a smart phone or tablet, there is no keyboard. When the web application/browser
    detects that input is needed, a soft keyboard shows up as part of your screen.
    On a smart phone in portrait mode, that makes it hard to type.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在智能手机或平板电脑上，没有物理键盘。当网络应用程序/浏览器检测到需要输入时，一个软键盘会作为屏幕的一部分显示出来。在竖屏模式的智能手机上，这会让打字变得很困难。
- en: 'When there is a need to type in a number, you need to first switch that keyboard
    to a different mode, and yet another mode for some symbols. Not everybody is schlepping
    a Bluetooth keyboard with him everywhere he goes, like I do. For this part, you
    can use the new `<input>` types in HTML5\. Most mobile browsers are HTML5-capable
    so when you use the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要输入数字时，你需要首先将键盘切换到不同的模式，然后为一些符号切换到另一个模式。并不是每个人都会像我自己一样，到处都带着蓝牙键盘。对于这部分，你可以使用HTML5中的新`<input>`类型。大多数移动浏览器都支持HTML5，所以当你使用以下内容时：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Those browsers will present you with a keyboard layout that has at least the
    `@` sign in it, which on some keyboards is hard to find. I live in *azerty* country
    again. I know.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些浏览器会提供一个至少包含`@`符号的键盘布局，在某些键盘上这个符号很难找到。我再次生活在*azerty*国家。我知道。
- en: Mobile first recap
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动优先回顾
- en: You probably get the picture. In this new world with millions of mobile devices,
    we need a new way of thinking about what information we provide on our site and
    how we do that. Use features of the phone, when you can; put content before navigation.
    Design your site as *one site fits all*, not *one size fits all*. This is not
    a technology, but a philosophy.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经明白了。在这个拥有数百万移动设备的全新世界中，我们需要一种新的思维方式来考虑我们在网站上提供的信息以及如何提供这些信息。在可能的情况下，使用手机的功能；将内容放在导航之前。将你的网站设计成*一个网站适合所有人*，而不是*一个尺寸适合所有人*。这不仅仅是一种技术，更是一种哲学。
- en: But we will need a technology to determine whether the browser/device combination
    supports certain features, such as **geolocation**, or even interprets JavaScript,
    and use it only when present. When we do that, we are practicing **progressive
    enhancement**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们需要一种技术来确定浏览器/设备组合是否支持某些功能，例如**地理位置**，甚至是否可以解释JavaScript，并且只有在存在时才使用它。当我们这样做时，我们正在实践**渐进增强**。
- en: Progressive enhancement
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐进增强
- en: A few years ago, a colleague once told our project manager that 80% of the time
    he spent changing already finished code to make it work in old browsers. In those
    days, a lot of people spent a lot of time making *round corners* work on Internet
    Explorer in a costly (in terms of development time and performance) attempt to
    make everything look exactly the same everywhere. A lot of folks decided to postpone
    adapting the new features in CSS3 and HTML5 because some browsers did not support
    them. This was just to support a single digit number of browsers and make sure
    the website was still functional when you switched off JavaScript (graceful degradation).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，一位同事曾告诉我们的项目经理，他80%的时间都花在修改已经完成的代码上，使其能在旧浏览器中运行。在那些日子里，很多人花了很多时间在Internet
    Explorer上制作*圆角*，这是一个代价高昂（从开发时间和性能的角度来看）的尝试，目的是让一切看起来在所有地方都完全相同。很多人决定推迟适应CSS3和HTML5的新功能，因为一些浏览器不支持它们。这只是为了支持少数几位数的浏览器，并确保在关闭JavaScript时（优雅降级）网站仍然可用。
- en: Today, there is bad news and there is good news. The bad news is that there
    are more browsers than you can imagine and a lot of browser/device pairs support
    APIs that others don't. The good news is that several technologies have emerged
    to tackle this problem in a more proactive or, shall I say, progressive way.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，有坏消息也有好消息。坏消息是浏览器比你能想象的要多，很多浏览器/设备对支持API，而其他浏览器不支持。好消息是，已经出现了几种技术来更主动或更进步地解决这个问题。
- en: 'So how do we handle this and still come up with a single version of our site?
    First, we need another philosophical change: do not be afraid to use the features
    that are available, make your sites and applications more cool and exciting, and
    enhance them with those features. How will we handle browsers or devices that
    do not support those features?'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何处理这个问题，同时还能提供一个网站的单一版本？首先，我们需要另一个哲学上的改变：不要害怕使用可用的功能，让你的网站和应用程序更加酷和有趣，并使用这些功能来增强它们。我们如何处理不支持这些功能的浏览器或设备？
- en: We propose a two-stage process. First, we will determine what the minimal content
    of our site has to be if virtually no modern features (for example JavaScript,
    fancy CSS features, and media queries) are available and start by writing our
    page accordingly. This is our basic site. Next we will add things such as jQuery
    and JavaScript code, media queries, and newer CSS and HTML features, animation,
    and so on to make our site nicer, to enhance it. This is called progressive enhancement.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提出一个两阶段的过程。首先，如果几乎没有任何现代功能（例如JavaScript、花哨的CSS功能和媒体查询）可用，我们将确定我们网站的最小内容是什么，并据此开始编写我们的页面。这是我们基本网站。接下来，我们将添加诸如jQuery和JavaScript代码、媒体查询、更新的CSS和HTML功能、动画等内容，使我们的网站更美观，增强它。这被称为渐进增强。
- en: 'Once again, there is jQuery and another library, called **EnhanceJS**, to help
    us do that. We will illustrate how. After that we show how to refine this technique:
    test for a particular feature, use it if available, and possibly use a replacement
    library or polyfill that adds the feature to non-capable browsers. We already
    used such a polyfill in a previous chapter—the history plugin for jQuery.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，有jQuery和另一个名为**EnhanceJS**的库来帮助我们做到这一点。我们将展示如何做到这一点。然后，我们将展示如何改进这项技术：测试特定功能，如果可用则使用它，并可能使用替换库或polyfill，将功能添加到不支持这些功能的浏览器中。我们已经在之前的章节中使用过这样的polyfill——jQuery的历史插件。
- en: EnhanceJS
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EnhanceJS
- en: EnhanceJS will test the browser for a comprehensive set of features. If they
    all pass, we load the files that make up the enhanced version of our site, such
    as jQuery, a CSS file with media queries, and so on. If not, the site that we
    look at is our basic site.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: EnhanceJS将对浏览器进行一系列全面的测试。如果它们都通过，我们将加载构成我们网站增强版的文件，如jQuery、带有媒体查询的CSS文件等。如果没有通过，我们看到的网站就是我们的基本网站。
- en: Please note, if we want to use Ajax to dynamically inject HTML into parts of
    our page, we will not be able to do this in the basic version. Depending on how
    much content we decide we want on there, it may be "Back to the future" all over
    again, as we will have to provide links to static pages. That way, all our visitors
    using old equipment will see at least a functional site with reasonable content.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果我们想使用Ajax动态地将HTML注入到我们页面的部分，我们无法在基本版本中这样做。根据我们决定要放置多少内容，可能又回到了“回到未来”，因为我们将不得不提供指向静态页面的链接。这样，所有使用旧设备的访客至少会看到一个具有合理内容的可功能性网站。
- en: 'Look at this example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个例子：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: enhance.js
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: enhance.js
- en: '**enhance.js** is a JavaScript library that performs a comprehensive suite
    of tests to see whether the browser supports enough features to handle what you
    had in mind for your enhanced site. At the time of writing, one could find it
    at [https://code.google.com/p/enhancejs](https://code.google.com/p/enhancejs).
    You can also find documentation there and useful links.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**enhance.js** 是一个JavaScript库，它执行一系列全面的测试，以查看浏览器是否支持足够的功能来处理你为增强网站所设想的功能。在撰写本文时，你可以在[https://code.google.com/p/enhancejs](https://code.google.com/p/enhancejs)找到它。你还可以在那里找到文档和有用的链接。'
- en: If the test fails, nothing inside `enhance()` will happen and your basic site,
    in our example good ol' *Hello World*, will be what the visitor sees. If the test
    succeeds, enhance.js will add the class `enhanced` to the `<html>` tag and attempt
    to perform the tasks you put inside it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试失败，`enhance()`内部将不会发生任何事情，你的基本网站，在我们的例子中是老式的*Hello World*，将是访客看到的。如果测试成功，enhance.js将向`<html>`标签添加类`enhanced`并尝试执行你放在里面的任务。
- en: loadStyles and loadScripts
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: loadStyles 和 loadScripts
- en: '**loadStyles** and **loadScripts** are two arrays where you can specify which
    stylesheets and JavaScript files you want to load. You can also specify conditions
    such as media queries to conditionally load one file or another. Instead of placing
    simply the pathname of the files in your array, you could use a JavaScript object
    using attribute names as the keys. So in our first example, we could have written:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**loadStyles** 和 **loadScripts** 是两个数组，你可以指定你想要加载的样式表和JavaScript文件。你也可以指定条件，例如媒体查询，以有条件地加载一个文件或另一个文件。你不需要仅仅在数组中放置文件的路径名，你可以使用JavaScript对象，使用属性名作为键。所以在我们第一个例子中，我们可以这样写：'
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is a more elaborate example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个更详细的例子：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: enhanced and FOUC
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: enhanced 和 FOUC
- en: There is a common problem known as **Flash of unstyled** **content** (**FOUC**)—be
    careful how you spell the acronym. This is the phenomenon where your see some
    flickering on your screen caused by temporarily displaying your HTML that is not
    yet processed by your JavaScript code during page load. There is an opportunity
    here to tackle this problem based on the knowledge that, if the enhance.js test
    is successful, it will add the class `enhanced` to the `<html>` tag.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个称为**无样式内容闪烁**（**FOUC**）的常见问题——请注意如何拼写这个缩写。这是在页面加载期间，由于你的HTML尚未被JavaScript代码处理而临时显示时，你会在屏幕上看到一些闪烁的现象。这里有一个机会，基于以下知识来解决这个问题：如果enhance.js测试成功，它将向`<html>`标签添加类`enhanced`。
- en: 'In our example, you could add the following to your **enhanced.css** and **enhanced.js**
    respectively:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，你可以分别向你的**enhanced.css**和**enhanced.js**添加以下内容：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The above statement almost implies that, in the enhanced version of the site,
    we have code in our enhanced.js that will result in HTML being injected inside
    the `#content` div. Another approach would be to have `#basiccontent` div and
    `#enhancedcontent` div and make only the one that is appropriate visible.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句几乎意味着，在增强版的网站上，我们在enhanced.js中编写的代码将导致HTML被注入到`#content` div内部。另一种方法是拥有`#basiccontent`
    div和`#enhancedcontent` div，并只显示适当的一个。
- en: 'Enhance.js, as described here, gives us an all-or-nothing approach. It runs
    a comprehensive set of tests to determine whether the visitor should see the basic
    version or the enhanced version. They are described in the documentation and of
    course in the code of enhance.js itself. At the time of writing, enhance.js had
    not been updated since 2010\. There is nothing wrong with that: it does a job
    that has not changed and it does it well.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如此描述的 Enhance.js 给我们提供了一个全有或全无的方法。它运行一系列全面的测试来确定访客应该看到基本版本还是增强版本。它们在文档中描述，当然也在
    enhance.js 的代码中。在撰写本文时，enhance.js 自 2010 年以来没有更新。这并没有什么问题：它做的工作没有改变，而且做得很好。
- en: None of these tests check support for some of the newer HTML5 and CSS3 features
    such as **Canvas**. Enhance.js has more configurable options that allow you to
    add your own tests and, if you like, run `enhance()` more than once to test different
    conditions. So you could do it that way.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试中没有一项检查对一些较新的 HTML5 和 CSS3 功能的支持，例如 **Canvas**。Enhance.js 提供了更多的可配置选项，允许你添加自己的测试，并且如果你愿意，可以多次运行
    `enhance()` 来测试不同的条件。所以你可以这样做。
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There really is no need to because, as is often the case in the world of web
    development, an entire team has done this for us already.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上没有必要，因为在网络开发的世界里，通常已经有整个团队为我们做了这件事。
- en: Modernizr
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Modernizr
- en: '**Modernizr.js** is similar to Enhance.js, it is a JavaScript library that
    tests browsers for features. But it has a lot more tests, can be customized, and
    can be used at a more granular level than Enhance.js. Modernizr tests for individual
    features. Depending on whether the test succeeds (*Yep*) or not (*Nope*), we can
    load different stylesheets and `.js` scripts.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**Modernizr.js** 与 Enhance.js 类似，它是一个用于测试浏览器功能的 JavaScript 库。但它有更多的测试，可以自定义，并且可以在比
    Enhance.js 更细粒度的层面上使用。Modernizr 测试单个功能。根据测试是否成功（*是*）或失败（*否*），我们可以加载不同的样式表和 `.js`
    脚本。'
- en: 'You can even use the two together. Start by using enhance.js to determine whether
    the browser supports JavaScript. If it does, load modernizr.js together with jQuery
    and refine what you want to do, in your own JavaScript code. Your basic page could
    look like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以将这两个一起使用。首先使用 enhance.js 来确定浏览器是否支持 JavaScript。如果支持，可以与 jQuery 一起加载 modernizr.js，并在你自己的
    JavaScript 代码中细化你想要做的事情。你的基本页面可能看起来像这样：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So, we have changed it a little bit from the previous section. We of course
    added the `modernizr.js` library to be part of our JavaScript line-up, but one
    remarkable tiny change is the `class="no-js"` attribute for the `<html>` tag.
    Whereas enhance.js adds the class `enhanced` to this tag, Modernizr will replace
    this class with `js` when it runs. So if it does not, because there is no JavaScript,
    you can account for it in your stylesheets with the `.no-js` class.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们对其进行了小小的修改。我们当然将 `modernizr.js` 库添加到我们的 JavaScript 系列中，但一个显著的小变化是 `<html>`
    标签的 `class="no-js"` 属性。而 enhance.js 会给这个标签添加 `enhanced` 类，Modernizr 在运行时会替换这个类为
    `js`。所以如果它没有这样做，因为没有 JavaScript，你可以在你的样式表中使用 `.no-js` 类来考虑这一点。
- en: 'Modernizr will add a lot more classes to the `<html>` tag, almost one for every
    test passed. So once again you could accommodate them in your stylesheet. Using
    this example on my MacBook Pro with Firefox as the browser, I checked with Firebug
    and noticed that modernizr.js had replaced `no-js` with `js` and added the following
    classes to the `<html>` tag:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Modernizr 将为 `<html>` 标签添加很多类，几乎每个测试通过都会有一个。所以你可以在你的样式表中容纳它们。以我在 MacBook Pro
    上使用 Firefox 作为浏览器的例子，我使用 Firebug 检查并注意到 modernizr.js 已经将 `no-js` 替换为 `js`，并添加了以下类到
    `<html>` 标签中：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The Modernizr object
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Modernizr 对象
- en: 'Once you have loaded modernizr.js and all the tests have been performed, you
    have access to the `Modernizr` object and can check in your JavaScript code whether
    or not a test has passed:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了 modernizr.js 并执行了所有测试，你就可以访问 `Modernizr` 对象，并在你的 JavaScript 代码中检查测试是否通过：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Polyfills and Modernizr
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Polyfills 和 Modernizr
- en: '**Polyfills** are scripts that take care of functionality a browser lacks when
    you need it. The `history.js` library that we discussed at length in [Chapter
    9](ch09.html "Chapter 9. The History API – Not Forgetting Where We Are"), *The
    History API— Not Forgetting Where We Are*, could be a polyfill for the HTML 5
    History API. I said, could, because in our example in that chapter we used history.js
    regardless. True polyfills are used only when the feature is lacking. So the code
    above could use a different API if HTML5 support is there compared to the API
    available through the polyfill.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**Polyfills**是当浏览器缺少您需要的功能时，负责处理这些功能的脚本。我们在[第9章](ch09.html "第9章。历史API – 不忘记我们身在何处")中详细讨论的`history.js`库，*历史API—不忘记我们身在何处*，可以是HTML5历史API的polyfill。我说“可以是”，因为在那一章的例子中，我们无论何时都使用了history.js。真正的polyfills仅在功能缺失时使用。所以，上面的代码如果HTML5支持存在，可以使用不同的API，而不是通过polyfill提供的API。'
- en: This could explain why the name Modernizr is chosen. Whereas enhance.js allows
    you to take care of people using the old stuff and give them an interface using
    the current stuff, Modernizr allows you to write today the code that your visitor
    will use tomorrow or next week, when they update their computer or buy a new phone
    or tablet. You are now ahead of the game.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能解释了为什么选择了Modernizr这个名字。而enhance.js允许您照顾使用旧技术的人，并为他们提供一个使用当前技术的界面，Modernizr则允许您在今天编写您的访客明天或下周将使用的代码，当他们更新他们的电脑或购买新手机或平板电脑时。您现在已经领先一步。
- en: Your site or application already uses all the cool stuff HTML5 and CSS3 offers
    and has fallback code in case older technology is involved. You can motivate your
    customer or visitor to update sooner rather than later, but your site or application
    already supports what to them lies in the future. Is this cool, or what?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您的网站或应用程序已经使用了HTML5和CSS3提供的所有酷炫功能，并且有回退代码以备老旧技术涉及。您可以激励您的客户或访客尽早更新，但您的网站或应用程序已经支持了对于他们来说属于未来的功能。这是否很酷？
- en: yepnope.js or Modernizr.load
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: yepnope.js或Modernizr.load
- en: 'Just like you saw in the *Enhance.js* section, you conditionally load files
    based on passing or failing a test. The coolest conditional loader is **yepnope.js**.
    At the time of writing, it was going to be deprecated, so its inclusion inside
    Modernizr might disappear. For sure, something newer will show up. So, for now,
    we include a short example of how you can do conditional loading of static assets
    with Modernizr:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 就像您在*Enhance.js*部分看到的那样，您可以根据测试通过或失败有条件地加载文件。最酷的有条件加载器是**yepnope.js**。在撰写本文时，它即将被弃用，因此它可能从Modernizr中消失。当然，会有新的东西出现。所以，现在，我们提供了一个简短的例子，说明您如何使用Modernizr进行静态资源的条件加载：
- en: '[PRE22]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has the longest title in the book, fitting for the most important
    one. In it, we explained the difference between web development yesterday and
    web development tomorrow. We explained that you need to think mobile first, that
    your design has to be responsive, and that you should reward customers who have
    the latest, greatest stuff by using the cool new features through progressive
    enhancement.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是本书中最长的标题，非常适合最重要的章节。在其中，我们解释了昨天和明天网络开发的区别。我们解释了您需要首先考虑移动端，您的设计必须是响应式的，并且您应该通过渐进增强使用酷炫的新特性来奖励那些拥有最新、最棒东西的客户。
- en: In the next chapters, we will guide you through how to apply all that came before
    using a cool CSS/JavaScript framework, Foundation, so you can use what someone
    already did for you. We will also show you a way to take full control of how you
    want things to be handled on the server side, using node.js.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将引导您如何使用酷炫的CSS/JavaScript框架Foundation来应用之前所学的一切，这样您就可以使用别人已经为您完成的工作。我们还将向您展示一种方法，让您能够完全控制服务器端如何处理您想要的事情，使用node.js。
- en: If you stop right here, you have learned the basics of modern web development
    and I congratulate you for doing that. If you go on, you will learn to use a framework
    that will save you a lot of time and work in the long run as well as what looks
    like a totally different way of doing things. As we go on explaining it, you will
    realize that it is not all that different in the first place.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在这里停下来，您已经学到了现代网络开发的基础知识，我为您的成就表示祝贺。如果您继续前进，您将学会使用一个框架，这个框架将节省您大量的时间和工作，并且看起来是一种完全不同的做事方式。随着我们继续解释，您会意识到它最初并没有那么不同。
