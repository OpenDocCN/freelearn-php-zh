- en: Chapter 2. Setting Up a Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Laravel is more than just a framework: a whole ecosystem and toolset has been
    developed around it to make building PHP applications faster and more enjoyable.
    These tools are entirely opt-in and the knowledge of them is not necessary to
    use and build projects in Laravel, but they do go hand-in-hand with the framework,
    so it''s worth covering.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Meeting Composer, a dependency manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Homestead, and using it to manage Laravel projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meeting Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you discovered that Laravel is built on top of several
    third-party packages. Rather than including these external dependencies in its
    own source code, Laravel uses a dependency manager called **Composer** to download
    them and keep them up to date. Since Laravel is made up of multiple packages,
    they too are downloaded and installed each time you create a new Laravel project.
  prefs: []
  type: TYPE_NORMAL
- en: Strongly inspired by popular dependency managers in other languages, such as
    Ruby's Bundler or Node.js's **Node Package Manager** (**npm**), Composer brings
    these features to PHP and has quickly become the de facto dependency manager in
    PHP.
  prefs: []
  type: TYPE_NORMAL
- en: A few years ago, you may have used **PHP Extension and Application Repository**
    (**PEAR**) to download libraries. PEAR differs from Composer, in that PEAR would
    install packages on a system-level basis, whereas a dependency manager, such as
    Composer, installs them on a project-level basis. With PEAR, you could only have
    one version of a package installed on a system. Composer allows you to use different
    versions of the same package in different applications, even if they reside on
    the same system.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are just getting started with web development, you might not be completely
    familiar with the **command-line interface** (**CLI**). Working with Composer,
    virtual machines, and Homestead, and later on with **Artisan**, Laravel's CLI
    utility, will require some interaction with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you can start with CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, look for the **Command Prompt** program. If you cannot find it,
    just navigate to **Start** | **Run** and type in `cmd.exe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Mac OS X, CLI is called **Terminal**, and it can be found at `/Applications/Utilities`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Linux, depending on your distribution of Linux, it will be called **Terminal**
    or **Konsole**, but if you are running Linux, you are probably already familiar
    with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You do not need to have any advanced command-line skills to get through this
    book and build applications with Laravel. You will, however, need to be able to
    navigate to the right directory in your file system before running commands. To
    do this, just enter the `cd` command, followed by the path to your code directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On most systems, you can also just enter `cd`, followed by a space, and then
    drag and drop the directory into the terminal, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, you can run the following command line on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> cd C:\path\to\your\code\directory`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the path contains spaces, then be sure to include it in double quotes to
    ensure spaces are escaped:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> cd "C:\path\to\your\Laravel Projects"`'
  prefs: []
  type: TYPE_NORMAL
- en: In the rest of this book, unless the example is specific to Windows, we will
    always use the `$` character to denote a shell command and use slashes as directory
    separators. Make sure you adapt the command accordingly, if you are running Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Meet Homestead
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you wanted to develop PHP applications on your personal computer, you needed
    to have a web server installed and running locally. PHP is installed to interpret
    your scripts, and other utilities your website may need, such as working with
    a database. Your website or web application may even have a requirement for other
    services such as **Memcached** or **Redis**, which are popular caching systems.
    This saw the rise of utilities such as **WampServer** and **MAMP** to create environments
    for developing dynamic websites without getting connected to the Internet, but
    these required configuring.
  prefs: []
  type: TYPE_NORMAL
- en: Building on from installed environments like these, the recommended practice
    for developing dynamic websites and applications is to use **virtual machines**
    (**VMs**). These allow you to emulate your production web server's setup on your
    local machine. You can also use differently configured VMs for different projects—with
    a WAMP- or MAMP-like setup, every project had to use the same version of PHP,
    MySQL, and anything else you installed.
  prefs: []
  type: TYPE_NORMAL
- en: The creators of Laravel have created an official Vagrant box called **Homestead**.
    **Vagrant** is software that allows you to create virtual development environments
    on your personal computer. You can install Homestead and start creating Laravel
    projects right away. And if you don't need it any more, you can just remove it
    from your machine, without anything else being affected. Best of all, if you are
    currently using a globally installed development environment such as WAMP or MAMP,
    Homestead won't conflict with it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homestead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Homestead is a Vagrant-based VM. Therefore, before using it you will need to
    install two utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VirtualBox** ([https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vagrant** ([http://www.vagrantup.com/downloads.html](http://www.vagrantup.com/downloads.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both have installers for Windows, Mac OS X, and Linux that will guide you through
    the installation process. To install Homestead, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the best things about Homestead is that it is hosted on Packagist. This
    means you can install it via Composer by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once downloaded, you need to initialize the VM using the following command
    (you may need to add Homestead to your path first, if you are using Windows):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will create a configuration file that you can edit to point to your projects,
    as well as create any databases you may need. To edit this file, you can run the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The file will open in your default text editor. When it does, you will see
    the file is organized into sections. To get up and running, the two sections of
    most importance are the `folders` section and the `sites` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`folders`: This specifies the directory that you want to be shared on the VM.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sites`: This allows you to map a domain to a folder on the Homestead VM, similar
    to Apache Virtual Hosts.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Installing Homestead](img/B04308_02_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Once you have configured your shared folders and sites, you can boot the VM
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, you need to add the VM's IP address to your computer's hosts file.
    The location of this file differs, depending on the platform you're using.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Windows, it is located at `C:\Windows\System32\Drivers\etc\hosts`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On a *nix system (such as Mac OS X and Linux), it can be found at `/etc/hosts`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Usually, you would need to be an administrator to edit this file. On Mac OS
    X and Linux, you can open the file with elevated permissions by using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You might be prompted for an administrator''s password. In your hosts file,
    add the following line to the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Installing Homestead](img/B04308_02_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, if in a web browser you try to visit `http://homestead.app`, instead of
    your browser trying to find a website with the domain, it will try to find the
    website on the machine with the specified IP address. In this instance, the IP
    address will belong to your Homestead VM and serve the site you've configured
    for that domain in your configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on Homestead and advanced configuration, you can view the
    official documentation at [http://laravel.com/docs/master/homestead](http://laravel.com/docs/master/homestead).
  prefs: []
  type: TYPE_NORMAL
- en: Everyday usage of Homestead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are various commands that you can use to interact with your Homestead
    virtual machine. For example, if the virtual machine is running, how do you stop
    it? There are two ways.
  prefs: []
  type: TYPE_NORMAL
- en: The first method is with the `$ homestead suspend` command. This will save the
    current state of your VM, and allow you to `$ homestead resume` at a later point
    in time. Alternatively, you can issue the `$ homestead halt` command, which will
    shut down the virtual machine and discard anything in memory. You can think of
    the differences as either putting the virtual machine to sleep, or completely
    shutting it down. To bring a halted VM back, you can simply run the `$ homestead
    up` command again.
  prefs: []
  type: TYPE_NORMAL
- en: You can also interact and run commands on the virtual machine via the command
    line. You can SSH into Homestead just like you would an external server. Instead
    of having to remember the virtual machine's host name and your credentials though,
    there's a handy `$ homestead ssh` command that will connect to the machine and
    then place you in a command prompt ready and waiting. If you are using Windows,
    there are various tools to execute SSH commands, such as **PuTTY**.
  prefs: []
  type: TYPE_NORMAL
- en: Adding additional websites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of Homestead's benefits is that you can host more than one application on
    it. This means you can run as many Laravel applications on it as you want (subject
    to constraints such as disk space). The process for each site is to map the directory
    between your host machine and the virtual machine, and to configure nginx to look
    in this directory when a specific domain name is requested. To do this by hand
    would mean editing various configuration files, which would become tedious if
    we needed to do this on a regular basis. Thankfully, Homestead comes with a handy
    script to make adding new sites a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 'You first need to start a new SSH session as mentioned before. Then, run the
    following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Replace `example.app` with the host name you want to use. Then, add a new line
    to your hosts file and you are good to go!
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to your databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Homestead runs a MySQL instance, which contains the data for all of your configured
    applications. Laravel exposes the port of the MySQL server via port forwarding,
    which means you can connect to it from your host machine by using a database management
    tool such as **Navicat**, **Sequel Pro**, or **MySQL Workbench**. To connect,
    all you have to do is specify the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host**: 127.0.0.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port**: 33060'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username**: homestead'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: secret'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once connected, you can then browse all of the databases on the Homestead virtual
    machine, tables, and data, just as you would if the MySQL server was installed
    on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Homestead also ships with a **PostgreSQL** database server. Connecting is the
    same as with the MySQL database server, but you instead use port `54320`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Laravel application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Homestead set up, you now have a development environment to build Laravel
    applications that can easily be removed at a later date without disturbing your
    machine. You must be itching to get started with Laravel, so here we go!
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will go through building a simple application in Laravel
    from start to finish. So now, we will prepare this project in Homestead:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, check whether Homestead is running by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the status is anything other than running, bring it up with the `homestead
    reload` command. We now need to add our site. It will be a browsable database
    of cat profiles, so let's call it "Furbook" and give it the fictional domain name
    of `furbook.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can set this up in Homestead by editing the configuration file and adding
    the following mappings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `$ homestead reload`, which should reprovision the sites and also create
    a new, empty database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now with our workspace prepared, we need to actually create a new Laravel project.
    To do this, we need to SSH into our running VM. Homestead makes this incredibly
    simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will create a new SSH session and log us in to the running Homestead VM
    instance. We can now run a Composer command to create a brand new Laravel project
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new Laravel skeleton project, as well as download all of
    the libraries that make up the Laravel framework.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have begun working with the command line. We''ve installed
    Composer and looked at how a dependency manager such as Composer aids development
    by utilizing prebuilt packages in our projects (of which the Laravel framework
    is one). We''ve looked at the concept of virtual machines for developing in, and
    taken a look and installed the official Laravel VM: Homestead.'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is where the fun begins! Now that we have a complete development
    environment set up and a fresh Laravel application created, we will go through
    the different steps involved in creating a complete Laravel application.
  prefs: []
  type: TYPE_NORMAL
