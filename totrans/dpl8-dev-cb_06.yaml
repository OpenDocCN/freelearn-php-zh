- en: Creating Forms with the Form API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the various recipes to work with forms in
    Drupal:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using new HTML5 elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating form data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing submitted form data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering other forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal provides a robust API for creating and managing forms without writing
    any HTML. Drupal handles form building, validation, and submission. Drupal handles
    the request to either build the form or process the HTTP POST request. This allows
    developers to simply define the elements in a form, provide any additional validation
    if needed, and then handle a successful submission through specific methods.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter contains various recipes to work with forms in Drupal through the
    Form API. In Drupal 8, forms and form states are objects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a form, which will be accessible from a menu
    path. This will involve creating a route that tells Drupal to invoke our form
    and display it to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: Forms are defined as classes, which implement `\Drupal\Core\Form\FormInterface`.
    The `\Drupal\Core\Form\FormBase` serves as a utility class that is intended to
    be extended. We will extend this class to create a new form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we will write the code, you will want to have a custom module. Creating
    a custom module in Drupal is simple: create a folder and an `info.yml` file. For
    this recipe, we will create a folder under `/modules` in your Drupal folder called
    `drupalform`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `drupalform` folder, create `drupalform.info.yml`. Drupal will parse
    the `info.yml` file to discover modules. An example of a module''s `info.yml`
    file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The name will be your module's name, and the description will be listed on the
    Extend page. Specifying the core tells Drupal what version of Drupal it is built
    for. [*Chapter 4*](a634af62-2148-4382-9121-b8500df169ed.xhtml), *Extending Drupal*,
    covers how to create a module in depth.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create an `src` folder in your module directory. In this directory, create a
    `Form` directory, which will hold the class that defines your form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a file called `ExampleForm.php` in your module's `src/Form` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drupal utilizes PSR4 to discover and autoload classes. For brevity, this defines
    that there should be one class per file, with each filename matching the class
    name. The folder structure will also mimic the namespace expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will edit the `ExampleForm.php` file and add the proper PHP namespace, classes
    used, and the class itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `namespace` defines the class in your module's `Form` directory. The `autoloader`
    will now look at the `drupalform` module path and load the `ExampleForm` class
    from the `src/Form` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The use statement allows us to use just the class name when referencing `FormBase`,
    and, in the next steps, `FormStateInterface`. Otherwise, we would be forced to
    use the fully qualified namespace path for each class whenever it is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `\Drupal\Core\Form\FormBase` is an abstract class and requires us to implement
    four remaining interface methods: `getFormId`, `buildForm`, `validateForm`, and
    `submitForm`. The latter two will be covered in the following recipes; however,
    we will need to define the method stubs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This code flushes out the initial class definition from the preceding step.
    `FormBase` provides `utility` methods and does not satisfy the interface requirements
    for `FormStateInterface`. We define those here, as they are unique across each
    form definition.
  prefs: []
  type: TYPE_NORMAL
- en: The `getFormId` method returns a unique string to identify the form, for example,
    `site_information`. You may encounter some forms that append `_form` to the end
    of their form ID. This is not required, and it is just a naming convention often
    found in previous versions of Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: The `buildForm` method is covered in the following steps. The `validateForm`
    and `submitForm` methods are both called during the Form API processes and are
    covered in later recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `buildForm` method will be invoked to return Form API elements that are
    rendered to the end user. We will add a simple text field to ask for a company
    name and a submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We added a form element definition to the `form` array. Form elements are defined
    with a minimum of a type to specify what the element is and a title to act as
    the label. The title uses the `t` method to ensure that it is translatable.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a submit button is done by providing an element with the type submit.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the form, we will create `drupalform.routing.yml` in the module''s
    folder. A route entry will be created to instruct Drupal to use `\Drupal\Core\Form\FormBuilder`
    to create and display our form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In Drupal, all routes have a name, and this example defines it as `drupalform.form`.
    Routes then define a path attribute and override default variables. This route
    definition has altered the route's title, specified it as a form, and given the
    fully qualified namespace path to this form's class.
  prefs: []
  type: TYPE_NORMAL
- en: Routes need to be passed a `requirements` property with specifications, or else
    the route will be denied access.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Extend page and install the Drupal form example module that we created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to `/drupal-example-form`, and the form should be now visible, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a2e8c515-0e51-4f70-bf4f-9f8416de7216.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe creates a route to display the form. By passing the `_form` variable
    in the defaults section of our route entry, we are telling the route controller
    how to render our route's content. The fully qualified class name, which includes
    the namespace, is passed to a method located in the form builder. The route controller
    will invoke `\Drupal::formBuilder()->getForm` (`\Drupal\drupalform\Form\ExampleForm`)
    based on the recipe. At the same time, this can be manually called to embed the
    form elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: A form builder instance that implements `\Drupal\Core\Form\FormBuilderInterface`
    will then process the form by calling `buildForm` and initiate the rendering process.
    The `buildForm` method is expected to return an array of form elements and other
    API options. This will be sent to the render system to output the form as HTML.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many components make up a form created through Drupal's Form API. We will explore
    a few of them in depth.
  prefs: []
  type: TYPE_NORMAL
- en: Form element definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A form is a collection of form elements, which are types of plugin in Drupal
    8\. Plugins are small pieces of swappable functionalities in Drupal 8\. Plugins
    and plugin development are covered in [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml),
    *Plug and Play with Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the most common element properties that can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`weight`: This is used to alter the position of a form element in a form. By
    default, elements will be displayed in the order in which they were added to the
    form array. Defining a weight allows a developer to control element positions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_value`: This gives a developer the ability to prefill the element
    with a value, for example, when building configuration forms that have existing
    data or when editing an entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`placeholder`: This is new to Drupal 8\. Drupal 8 provides a new HTML5 support,
    and this attribute will set the placeholder attribute on the HTML input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a complete reference of available form elements and their properties, check
    out the Drupal.org API documentation page at [https://api.drupal.org/api/drupal/elements/](https://api.drupal.org/api/drupal/elements/).
  prefs: []
  type: TYPE_NORMAL
- en: The form state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `\Drupal\Core\Form\FormStateInterface` object represents the current state
    of the form and its data. The form state contains user-submitted data for the
    form along with build state information. Redirection after the form submission
    is handled through the
  prefs: []
  type: TYPE_NORMAL
- en: form state, as well. You will interact more with the form state during the validation
    and submission recipes.
  prefs: []
  type: TYPE_NORMAL
- en: The form cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal utilizes a cache table for forms. This holds the build table, as identified
    by form build identifiers. This allows Drupal to validate forms during AJAX requests
    and easily build them when required. It is important to keep the form cache in
    persistent storage; otherwise, there may be repercussions, such as loss of form
    data or invalidating forms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form API in Drupal 8 at [https://www.drupal.org/node/2117411](https://www.drupal.org/node/2117411)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Drupal 8 Form API reference at [https://api.drupal.org/api/drupal/elements/](https://api.drupal.org/api/drupal/elements/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [*Chapter 4*](a634af62-2148-4382-9121-b8500df169ed.xhtml), *Extending
    Drupal*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), *Plug and
    Play with Plugins*, to learn more about derivatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using new HTML5 elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the release of Drupal 8, Drupal has finally entered into the realm of
    HTML5\. The Form API now allows utilization of HTML5 input elements out of the
    box. These include the following element types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`range`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This allows your forms in Drupal to leverage native device input methods along
    with native validation support.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will walk you through adding elements to a Drupal form. You will
    need to have a custom form implemented through a module, such as the one created
    in the *Creating a form* recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use the telephone input, you will need to add a new `form` element definition
    of the `tel` type to your `buildForm` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the email input, you will need to add a new `form` element definition
    of the `email` type to your `buildForm` method. It will validate the format of
    email addresses in the Form API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the number input, you will need to add a new `form` element definition
    of the number type to your `buildForm` method. It will validate the range and
    format of the number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the date input, you will need to add a new `form` element definition
    of the `date` type to your `buildForm` method. You can also pass the `#date_date_format`
    option to alter the format used by the input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the URL input, you will need to add a new `form` element definition
    of the `url` type to your `buildForm` method. The element has a validator to check
    the format of the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the search input, you will need to add a new `form` element definition
    of the `search` type to your `buildForm` method. You can specify a route name
    that the search field will query for autocomplete options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the `range` input, you will need to add a new `form` element definition
    of the `range` type to your `buildForm` method. It is an extension of the number
    element and accepts `min`, `max`, and `step` properties to control the values
    of the range input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each type references an extended class of `\Drupal\Core\Render\Element\FormElement`.
    It provides the element's definition and additional functions. Each element defines
    a `prerender` method in the class that defines the `input` type attribute along
    with other additional attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Each input defines its theme as `input__TYPE`, allowing you to copy the `input.html.twig`
    base to `input.TYPE.html.twig` for templating. The template then parses the attributes
    and renders the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some elements, such as emails, provide validators for the element. The email
    element defines the `validateEmail` method. Here is an example of the code from
    `\Drupal\Core\Render\Element\Email::valdateEmail`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This code will be executed on form submission and validate the provider's email.
    It does this by taking the current value and trimming any whitespaces and using
    the form state object to update the value. The `email.validator` service is invoked
    to validate the email. If this method returns `false`, the form state is invoked
    to mark the element as the one that has an error. If the element has an error,
    the form builder will prevent form submission, returning the user to the form
    to fix the value.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elements are provided through Drupal's plugin system and are explored in detail
    in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Specific element properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Elements can have their own unique properties along with individual validation
    methods. You can refer to the available elements through the Drupal.org API documentation
    page at [https://api.drupal.org/api/drupal/elements/](https://api.drupal.org/api/drupal/elements/).
    However, the classes can also be examined, and the definition method can be read
    to learn about the properties of each element. These classes are under the `\Drupal\Core\Render\Element`
    namespace located in `/core/lib/Drupal/Core/Render/Element`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/554d8884-2cf5-42cf-bad9-000f07982ef5.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating new elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each element used in the Form API extends the `\Drupal\Core\Render\Element\FormElement`
    class, which is a plugin. Modules can provide new element types by adding classes
    to their `Plugins/Element` namespace. Refer to *[Chapter 7](3994173f-3d31-4f01-b808-99e01368564b.xhtml)*,
    *Plug and Play with Plugins*, for more information on how to implement a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form API in Drupal 8 at [https://www.drupal.org/node/2117411](https://www.drupal.org/node/2117411)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), Plug and
    Play with Plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating form data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All forms must implement the `\Drupal\Core\Form\FormInterface`. The interface
    defines a `validation` method. The `validateForm` method is invoked once a form
    has been submitted and provides a way to validate the data and halt the processing
    of the data if required. The form state object provides methods for marking specific
    fields as having the error, providing a user experience tool to alert your users
    to specify the problem input.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will be validating the length of the submitted field.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will use the module and custom form created in the first *Creating
    a form* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open and edit the `\Drupal\drupalform\Form\ExampleForm` class in the `src/Form`
    directory of the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before validating the `company_name` value, we will need to check whether the
    value is empty using the `isValueEmpty()` method from the `\Drupal\Core\Form\FormStateInterface`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `\Drupal\Form\FormStateInterface::isValueEmpty` method takes the key name
    of the form element; for example, `$form['company_name']` from the `buildForm`
    method is referenced through `company_name` in the `isValueEmpty` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will check whether the value''s length is greater than five:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `getValue` takes a form element's key and returns the value. Since we have
    already verified that the value is not empty, we can retrieve the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you had any experience with previous versions of Drupal, note that the form
    state is now an object and not an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the logic check finds a value with a length of five or fewer characters,
    it will throw a form error to prevent submission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can place the `setErrorByName` method in our `strlen` logic check. If the
    string is fewer than five characters, an error is set on the element. The first
    parameter is the element's key, and the second parameter is the message to be
    presented to the user.
  prefs: []
  type: TYPE_NORMAL
- en: When the form is submitted, the Company name text field will have more than
    five characters or be empty to be submitted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad84a16b-4eaf-4895-9dc9-b60c62ad867d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the form builder service invokes the form object's `submitForm` method,
    it invokes the object's `validateForm` method. In the validation method, the form
    state can be used to check values and perform logic checks. In the event that
    an item is deemed *invalid* and an error is set on an element, the form cannot
    be submitted and will show errors to the user.
  prefs: []
  type: TYPE_NORMAL
- en: When an error is added to an element, an overall counter for the number of errors
    on the form is incremented. If the form has any errors, the form builder service
    will not execute the submit method.
  prefs: []
  type: TYPE_NORMAL
- en: This process is executed through the `\Drupal\Core\Form\FormValidator` class,
    which is run through the form builder service.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form validation can be done through multiple handlers and at the element level.
    The following sections will cover those.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple validation handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A form can have multiple validation handlers. By default, all forms come with
    at least one validator, which is its own `validateForm` method. There is more
    that can be added. However, by default, the form will merely execute `::validateForm`
    and all element validators. This allows you to invoke methods on other classes
    or other forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a class provides `method1` and `method2`, which it would like to execute
    as well, the following code can be added to the `buildForm` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This sets the validator array to execute the default `validateForm` method and
    the two additional methods. You can reference a method in the current class using
    two colons (`::`) and the method name. Alternatively, you can use an array that
    consists of a class instance and the method to be invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing multidimensional array values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms support nested form elements in the form array. The default `\Drupal\Core\Form\FormStateInterface`
    implementation, `\Drupal\Core\Form\FormState`, supports accessing multidimensional
    array values. Instead of passing a string, you can pass an array that represents
    the parent array structure in the form array.
  prefs: []
  type: TYPE_NORMAL
- en: If the element is defined as `in $form['company']['company_name']`, then we
    will pass `['company', 'company_name']` to the form state's methods.
  prefs: []
  type: TYPE_NORMAL
- en: Element validation methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form elements can have their own validators. The form state will aggregate all
    of the element validation methods and pass them to the form validation service.
    This will run with the form's validation.
  prefs: []
  type: TYPE_NORMAL
- en: There is a `limit_validation_errors` option, which can be set to allow selected
    invalid errors to be passed. This option allows you to bypass validation on specific
    elements in your form. This is useful if a form has two submit buttons and each
    intends to validate and submit specific data. This attribute is defined in the
    submit button, also known as the *triggering* element in the form state. It is
    an array value consisting of form element keys.
  prefs: []
  type: TYPE_NORMAL
- en: Processing submitted form data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A form's purpose is to collect data and do something with the data that was
    submitted. All forms need to implement the `\Drupal\Core\Form\FormInterface` interface.
    The interface defines a submit method. Once the Form API has invoked the class's
    validation method, the submit method can be run.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will be based on the custom module and form created in the *Creating
    a form* recipe of this chapter. We will convert the form to `\Drupal\Core\FormConfigBaseForm`,
    allowing us to save our configuration and reuse code provided by Drupal core.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the module and custom form created in the first
    *Creating a form* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your module's directory, create a `config` directory, and then create a directory
    inside it named `install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file named `drupalform.schema.yml` . This file will tell Drupal about
    the configuration item that we want to save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following configuration schema definition to `drupalform.schema.yml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This tells Drupal that we have the configuration with the name `drupalform.company`,
    and it has a valid option of `company_name`. We will cover this in more detail
    in *[Chapter 9](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)*, *Configuration Management
    - Deploying in Drupal 8*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, edit the module''s `src/Form/ExampleForm.php` file. Replace the `FormBase`
    use statement to use the `ConfigFormBase` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `ExampleForm` class to extend `ConfigFormBase` instead, to harness
    its existing methods and provided code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This allows us to reuse methods from the `ConfigFormBase` class and write less
    about our own implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `ExampleForm` to implement `ConfigFormBase`, the `getEditableConfigNames`
    method needs to be implemented to satisfy the `\Drupal\Core\Form\ConfigBaseTrait`
    trait. This method can be added anywhere in the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This function defines the configuration names, which will be editable by the
    form. This brings all the attributes under the `drupalform.company` object to
    be editable when accessed through the form with the `config` method provided by
    `ConfigFormBaseTrait`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will remove the submit form element (`$form[''submit'']`) and update the
    `buildForm` method to return data from the parent''s method rather than from `$form`
    itself. We will also need to add a `#default_value` option to `company_name` so
    that it uses an existing value the next time our form is loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ConfigFormBase` class implements the `buildForm` method to provide a reusable
    submit button. It also unifies the presentation across Drupal configuration forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd77562a-7943-43c1-9143-1d0b05ff0047.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ConfigFormBase` provides a configuration factory method. We will add a
    `default_value` property to our element with the currently saved item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `#default_value` key is added to the element's definition. It invokes the
    `config` method provided by `ConfigFormBaseTrait` to load our configuration group
    and access a specific configuration value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to save the configuration in the `submitForm` method. Add
    the following method to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `config` method is invoked by specifying our configuration group. We will
    then use the set method to define the name as the value of the `company name`
    text field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your form class should resemble the following when complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When you edit your form and click on the Submit button, the value that you entered
    in the Company name field will now be saved in the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ConfigFormBase` utilizes the `ConfigFormBaseTrait` to provide easy access
    to a configuration factory. The class's implementation of `buildForm` also adds
    a `submit` button and theme styling to forms. The submit handler displays a configuration
    saved message, but relies on implementing a module to save the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The form saves its data under the `drupalform.company` namespace. The company
    name value is stored as `name` and can be accessed as `drupalform.company.name`.
    Note that the configuration name does not have to match the form element's key.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next section, we will cover how to handle multiple submit callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple submit handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A form can have multiple submit handlers. By default, all forms implement a
    submit handler, which is its own `submitForm` method. The form will execute `::submitForm`
    automatically and any other methods defined on the triggering element. There is
    more that can be added. However, this allows you to invoke `static` methods on
    other classes or other forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a class provides `method1` and `method2`, which it would like to execute
    as well, the following code can be added to the `buildForm` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This sets the submit handler array to execute the default `submitForm` method
    and two additional methods. You can reference a method in the current class using
    two colons (`::`) and the method name. Alternatively, you can use an array consisting
    of a class instance and the method to be invoked.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [*Chapter 9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml), *Configuration
    Management- Deploying in Drupal 8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering other forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal's Form API does not just provide a way to create forms. There are ways
    to alter forms through a custom module that allows you to manipulate the core
    and contributed forms. Using this technique, new elements can be added, default
    values can be changed, or elements can even be hidden from view to simplify the
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: The altering of a form does not happen in a custom class; this is a hook defined
    in the module file. In this recipe, we will use the `hook_form_FORM_ID_alter()`
    hook to add a telephone field to the site's configuration form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have a custom module to add the code to.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `modules` folder of your Drupal site, create a folder named `mymodule`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `mymodule` folder, create a `mymodule.info.yml`, containing the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a `mymodule.module` file in your module''s directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `mymodule_form_system_site_information_settings_alter()` hook. The
    form ID can be found by viewing the form''s class and reviewing the `getFormId`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Drupal will call this hook and pass the current form array and its form state
    object. The form array is passed by reference, allowing our hook to modify the
    array without returning any values. This is why the `$form` parameter has the
    ampersand (`&`) before it. In PHP, all objects are passed by reference, which
    is why we have no ampersand (`&`) before `$form_state`.
  prefs: []
  type: TYPE_NORMAL
- en: When calling a class in a normal file, such as the module file, you will need
    to either use the fully qualified class name or add a use statement at the beginning
    of the file. In this example, we can add `\Drupal\Core\Form\FormStateInterface`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we add our `telephone` field to the form so that it can be displayed
    and saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We retrieve the current phone value from `system.site` so that it can be modified
    if already set.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Extend page and install the module My module that we created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the Basic site settings form under Configuration, and test setting the
    site telephone number:![](img/78bcb6ee-530d-47ac-8dad-96d3cad03fc9.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We then need to add a submit handler in order to save the configuration for
    our new field. We will need to add a submit handler to the form and a submit handler
    callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Submit the form, and verify that the data has been saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `\Drupal\system\Form\SiteInformationForm` class extends `\Drupal\Core\Form\ConfigFormBase`
    to handle the writing of form elements as individual configuration values. However,
    it does not write the values automatically to the form state. In this recipe,
    we needed to add a submit handler to manually save our added field via a procedural
    function in our `mymodule.module` file.
  prefs: []
  type: TYPE_NORMAL
- en: The form array is passed by reference, allowing modifications to be made in
    the hook to alter the original data. This allows us to add an element or even
    modify existing items, such as titles or descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will discuss how to add additional handlers to other forms using form alters.
  prefs: []
  type: TYPE_NORMAL
- en: Adding additional validate handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using a form alter hook, we can add additional validators to a form. The proper
    way to do this is to load the current validators and add the new one to the array
    and reset the validators in the form state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: First, we will receive all of the currently set validators from the form state
    as the `$validators` variable. We then append a new callback to the end of the
    array. Once the `$validators` variable has been modified, we will override the
    form state's validator array by executing the `setValidateHandlers` method.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use PHP array manipulation functions to add your validators in
    different execution orders. For example, `array_unshift` will place your validator
    at the beginning of the array so that it can run first.
  prefs: []
  type: TYPE_NORMAL
- en: Adding additional submit handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using a form alter hook, we can add additional submit handlers to a form. The
    proper way to do this is to load the current submit handlers, add the new one
    to the array, and reset the validators in the form state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: First, we will receive all of the currently set submit handlers from the form
    state as the `$submit_handlers` variable. We then append a new callback to the
    end of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Once the `$submit_handlers` variable has been modified, we will override the
    form state's submit handler array by executing the `setSubmitHandlers` method.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use PHP array manipulation functions to add your callback in different
    execution orders. For example, `array_unshift` will place your callback at the
    beginning of the array so that it can run first.
  prefs: []
  type: TYPE_NORMAL
