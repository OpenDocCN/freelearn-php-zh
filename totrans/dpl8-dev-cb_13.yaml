- en: The Drupal CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two command-line tools for Drupal 8: **Drupal Console** and **Drush**.
    In this chapter, we will discuss how they make working with Drupal easier by covering
    the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Rebuilding cache in Drupal Console or Drush
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Drush to interact with the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Drupal using Drupal Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaffolding code through Drupal Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a Drush command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a Drupal Console command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters of this book, there have been recipes that provide
    ways of using command-line tools to simplify working with Drupal. There are two
    contributed projects that provide Drupal with a command-line interface experience.
  prefs: []
  type: TYPE_NORMAL
- en: First, there is Drush. Drush was first created for Drupal 4.7 and has become
    an integral tool used for day-to-day Drupal operations. However, with Drupal 8
    and its integration with Symfony, there came Drupal Console. Drupal Console is
    a Symfony Console-based application that allows it to reuse more components and
    integrate more easily with contributed modules.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter contains recipes that will highlight operations that can be simplified
    using Drush or Console. By the end of this chapter, you will be able to work with
    your Drupal sites through the command line.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, Drush was still the primary tool of choice
    for Drupal 8; however, Drupal Console is earning more market share. Drupal Console
    is rapidly being developed. Due to this rapid development, the commands will still
    exist, but the output may differ.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both Drush and Drupal Console support global installation, but both projects
    are migrating to per-project installation using Composer. To get started, refer
    to the following installation guides for each tool for up-to-date installation
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drush**: [http://docs.drush.org/en/master/install/](http://docs.drush.org/en/master/install/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drupal Console**: [https://docs.drupalconsole.com/en/getting/project.html](https://docs.drupalconsole.com/en/getting/project.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebuilding cache in Drupal Console or Drush
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal utilizes caching to store plugin definitions, routes, and so on. When
    you add a new plugin definition or a new route, you need to rebuild Drupal's cache
    for it to be recognized.
  prefs: []
  type: TYPE_NORMAL
- en: Rebuilding the cache over the command line is also more performant than using
    the user interface since it does not use web server resources to execute the cache
    rebuild.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will walk you through using both Drush and Drupal Console
    to clear various cache bins in Drupal. It is important to know how to clear specific
    cache bins so that you do not need to rebuild everything, if possible.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a terminal and navigate to an installed Drupal directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We use the `cache-rebuild` command in Drush to rebuild all of Drupal''s caches,
    including routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In Drupal Console, we use the `cache:rebuild` command to clear specific cache
    bins. The input uses autocomplete to help specify a specific cache bin to clear.
    In this example, we clear the render cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we only need to rebuild our routes in Drupal, we can use the `router:rebuild`
    command in Console. This will keep render, discovery, and other caches, but expose
    new routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Drush provides `twig-compile` to rebuild templates. Passing the verbose option
    displays templates being compiled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both Drush and Drupal Console will load files from the Drupal installation and
    bootstrap the application. This allows the commands to invoke functions and methods
    found in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: For Drush 8.x, Drush does not implement the dependency injection container and
    still needs to rely on procedural functions in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal Console, however, harnesses the dependency injection container, allowing
    it to reuse Drupal's container and services.
  prefs: []
  type: TYPE_NORMAL
- en: The *Making a Drush command* and *Making a Drupal Console command* recipes will
    describe the differences in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Drush documentation at [http://docs.drush.org/en/master/](http://docs.drush.org/en/master/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Drupal Console documentation at [https://docs.drupalconsole.com/](https://docs.drupalconsole.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Drush command cheat sheet at [https://drushcommands.com/](https://drushcommands.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Drupal Console command cheat sheet at [http://drupalconsole.com/cheatsheet/](http://drupalconsole.com/cheatsheet/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Drush to interact with the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with any application that utilizes a database, there are times
    when you will need to export a database and import it elsewhere. Most often, you
    would do this with a production site to work on it locally. This way, you can
    create a new configuration that can be exported and pushed to production, as discussed
    in [*Chapter 9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml), *Configuration Management
    – Deploying in Drupal 8*.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will export a database dump from a production site in order
    to set up the local development. The database dump will be imported over the command
    line and sanitized. We will then execute an SQL query through Drush to verify
    sanitization.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drush has the ability to use site aliases. Site aliases are configuration items
    that allow you to interact with a remote Drupal site. In this recipe, we will
    use the following alias to interact with a fictional remote site to show how a
    typical workflow will go to fetch a remote database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you do not need to use a Drush alias to download the database dump
    created in the recipe; you can use any method you are familiar with (manually
    from the command line with `mysqldump` or `phpMyAdmin`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Read the Drush documentation for more information on site aliases at [http://docs.drush.org/en/master/usage/#site-aliases](http://docs.drush.org/en/master/usage/#site-aliases).
    Site aliases allow you to interact with remote Drupal installations.
  prefs: []
  type: TYPE_NORMAL
- en: We will also assume that the local development site has not yet been configured
    to connect it to the database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `sql-dump` command to export the database into a file. The
    command returns the output that needs to be redirected to a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to your local Drupal site's directory and copy `sites/default/default.settings.php`
    to `sites/default/settings.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the new `settings.php` file and add a database configuration array at
    the end of the file; this will be the database used by Drupal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `sql-cli` command, we can import the database dump that we created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sql-sanitize` command allows you to obfuscate user emails and passwords
    in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that our information is imported sanitized, we will use the `sql-query`
    command to run a query against the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with Drush, we have the ability to use Drush aliases. A Drush alias
    contains a configuration that allows the tool to connect to a remote server and
    interact with that server's installation of Drush.
  prefs: []
  type: TYPE_NORMAL
- en: You need to have Drush installed on your remote server in order to use a site
    alias for it.
  prefs: []
  type: TYPE_NORMAL
- en: The `sql-dump` command executes the proper dump command for the database driver,
    which is typically MySQL and the `mysqldump` command. It streams to the terminal
    and must be piped to a destination. When piped to a local SQL file, we can import
    it and execute the create commands to import our database schema and data.
  prefs: []
  type: TYPE_NORMAL
- en: The `sql-dump` command supports a `--result-file` option; however, that saves
    the file relative to the Drupal installation.
  prefs: []
  type: TYPE_NORMAL
- en: With the `sql-cli` command, we will be able to execute SQL commands to the database
    through Drush. This allows us to redirect the file contents to the `sql-cli` command
    and run the set of SQL commands. With the data imported, the `sql-sanitize` command
    replaces usernames and passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `sql-query` command allows us to pass an SQL command directly to
    the database and return its results. In our recipe, we will query the `users_field_data`
    to verify that we imported our users and that emails have been sanitized.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Drupal over the command line simplifies working with the database.
    We will explore this in more detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Using gzip with sql-dump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, databases can be quite large. The `sql-dump` command has a `gzip`
    option that will output the SQL dump using the `gzip` command. In order to run
    the command, you would simply:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The end result provides a reduction in the dump file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you create a gzipped database dump, ensure that you unarchive it before attempting
    an import with the `sql-cli` command.
  prefs: []
  type: TYPE_NORMAL
- en: Using Console to interact with the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing this book, Console does not provide a command for sanitizing
    the database. The feature is currently documented in this issue; refer to [https://github.com/hechoendrupal/drupal-console/issues/3192](https://github.com/hechoendrupal/drupal-console/issues/3192).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `database:connect` and `database:client` commands will launch a database
    client. This allows you to be logged into the database''s command-line interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: These commands are similar to the `sql-cli` and `sql-connect` commands from
    Drush. The client command will bring you to the database's command-line tool,
    where connect shows the connection string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal Console also provides the `database:dump` command. Unlike Drush, this
    will write the database dump for you in the Drupal directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Using Drush to manage users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you need to add an account to Drupal, you will visit the `People` page
    and manually add a new user. Drush provides the complete user management for Drupal,
    from creation to role assignment, password recovery, and deletion. This workflow
    allows you to create users easily and provides them with a login without having
    to enter your Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a `staff` role with a `staffmember` user and
    log in as that user through Drush.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the `role-create` command to create a new role labeled `staff`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `role-lists` command to verify that the role was created in Drupal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `user-create` command will create our user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to add the role, we will need to use the `user-add-role` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now log in as the `staffmember` user using the `user-login` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the link and paste it in your browser to log in as that user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3a686e6-bda2-4ac7-ad43-563d2efd7b06.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you reset a password in Drupal, a special one-time login link is generated.
    The login link is based on a generated hash. The Drush command validates the given
    user, which exists in the Drupal site, and then passes it to the `user_pass_reset_url`
    function from the User module.
  prefs: []
  type: TYPE_NORMAL
- en: The URL is made up of the user's ID, the timestamp when the link was generated,
    and a hash based on the user's last login time, link generation, and email. When
    the link is loaded, this hash is rebuilt and verified. For example, if the user
    has logged in since the time it was generated, the link will become invalid.
  prefs: []
  type: TYPE_NORMAL
- en: When used on a machine that has a web browser installed, Drush will make an
    attempt to launch the link in a web browser for you. The browser option allows
    you to specify which browser should be launched. Additionally, you can use no-browser
    to prevent one from being launched.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command line offers the ability to simplify user management and user administration.
    Next, we will explore more on this topic in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced user-login use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `user-login` command is a useful tool that allows some advanced use cases.
    For instance, you can append a path after the username and be launched to that
    path. You can pass a UID or email instead of a username in order to log in as
    a user.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `user-login` to secure your admin user account. In Drupal, the
    user with the identifier of 1 is treated as the root and can bypass all permissions.
    Many times, this is the default maintenance account used to work on the Drupal
    site. Instead of logging in manually, you can set the account to a very robust
    passphrase and use the `user-login` command when you need to access your site.
    With this, the only users who should be able to log in as the administrator account
    are those with access to run the Drush commands on the website.
  prefs: []
  type: TYPE_NORMAL
- en: Using Drupal Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal Console also provide commands to interact with users. Although they do
    not allow the creation of users or roles, they provide a basic user management.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `user:login:url` command will generate a one-time login link for the specified
    user ID. This uses the same methods as the Drush command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `user:password:reset` command allows you to reset a user''s password to
    the new provided password. You can provide the user ID and new password as arguments,
    but if missing, the values will be prompted for interactively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `create:users` command provides an interactive way to generate bulk users,
    which are useful for debugging. However, it cannot create individual users with
    specific passwords like Drush.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding code through Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Drupal Console was first introduced, one of the biggest highlights was
    its ability to scaffold code. The project has turned into a much larger Drupal
    runner over the command-line interface, but much of its resourcefulness is code
    generation.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noted in the previous chapters and recipes, there can be a few
    mundane tasks and a bit of boilerplate code. Drupal Console enables Drupal developers
    to create various components without having to write all of the boilerplate code.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml), *The Entity API*,
    we covered the creation of a custom entity type. In this recipe, we will automate
    most of that process using Drupal Console to generate our content entity.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will need to have Drupal Console installed. The tool will
    generate everything else for us. You will need to have a Drupal 8 site installed.
    Many of Console's commands will not work (or be listed) unless they can access
    an installed Drupal site. This is because of the way it interacts with Drupal's
    service container.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the root of your Drupal site, generate a module with the `generate:module`
    command and follow the interactive process. Use the defaults prompted as well
    as giving it a module name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will generate our `content` entity. Specify the module name that will
    provide the entity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Install your module using Drupal Console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'View Structure and find your Custom content entity settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc4536b3-1e4d-440f-8c35-2a4edfedc896.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest features of Console is its ability to reduce the time spent
    by developers to create code for Drupal 8\. Console utilizes the Twig templating
    engine to provide code generation. These Twig templates contain variables and
    logic that are compiled into the end result code.
  prefs: []
  type: TYPE_NORMAL
- en: A set of generator classes receives specific parameters, which are received
    through the appropriate command, and pass them to Twig for rendering. This allows
    Console to easily stay up to date with changes in Drupal core and still provide
    valuable code generation.
  prefs: []
  type: TYPE_NORMAL
- en: Making a Drush command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drush provides an API that allows developers to write their own commands. These
    commands can be part of a module and loaded through a Drupal installation, or
    they can be placed in the local user's Drush folder for general purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Often, contributed modules create commands to automate user interface operations.
    However, creating a custom Drush command can be useful for specific operations.
    In this recipe, we will create a command that loads all the users who have not
    logged in in the last 10 days and resets their password.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will need Drush available. We will be creating a command
    in a local user directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a file named `disable_users.drush.inc` in the `~/.drush` folder for
    your user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Drush command hook that will allow Drush to discover our commands provided
    by the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create the command callback function, which will end up holding
    all of our logic. Since our filename is `disable_users.drush.inc` and our command
    is `disable-users`, the hook turns out to be `drush_disable_users_disable_users`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the function to create a `DateTime` object, representing 10 days ago.
    We will use this to generate a timestamp for our query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add our query, which will query all the user entities who have
    a login timestamp greater than 10 days:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will iterate over the results and mark the user as disabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Drush''s cache will need to be cleared in order to discover your new command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the command exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drush works by scanning specific directories for files that follow the `COMMANDFILE.drush.inc`
    pattern. You can think of `COMMANDFILE` for Drush as a representation of a module
    name in Drupal's hook system. When implementing a Drush hook, in the `HOOK_drush`
    format, you will need to replace HOOK with your `COMMANDFILE` name, just as you
    would do in Drupal with a module name.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we created a `disable_users.drush.inc` file. This means that
    all hooks and commands in the file need to use `disable_users` for hook invocations.
    Drush uses this to load the `hook_drush_command` hook that returns our command
    information.
  prefs: []
  type: TYPE_NORMAL
- en: We then provided the functionality of our logic in the `drush_hook_command`
    hook. For this hook, we replaced hook with our `COMMANDFILE` name, which was `disable_users`,
    giving us `drush_disable_users_command`. We replaced command with the command
    that we defined in `hook_drush_command`, which was `disable-users`. We then had
    our final `drush_disable_users_disable_users` hook.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drush commands have additional options that can be specified in their definitions.
    We explore their abilities to control the required level of Drupal integration
    for a command.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the level of Drupal's bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drush commands have the ability to specify the level of Drupal's bootstrap before
    being executed. Drupal has several bootstrap levels in which only specific parts
    of the system are loaded. By default, a command's bootstrap is at `DRUSH_BOOTSTRAP_DRUPAL_LOGIN`,
    which is at the same level as accessing Drupal over the Web.
  prefs: []
  type: TYPE_NORMAL
- en: Commands, depending on their purpose, can choose to avoid bootstrapping Drupal
    at all or only until the database system is loaded. Drush commands that are utilities,
    such as the Git release notes module, provide a Drush command that does not interact
    with Drupal. It specifies a bootstrap of `DRUSH_BOOTSTRAP_DRUSH`, as it only interacts
    with repositories to generate change logs based on Git tags and commits.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to how to creating custom Drush commands at [http://docs.drush.org/en/master/commands/](http://docs.drush.org/en/master/commands/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to how to install Drush at [http://docs.drush.org/en/master/install/](http://docs.drush.org/en/master/install/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the Drush Bootstrap process at [http://docs.drush.org/en/master/bootstrap/](http://docs.drush.org/en/master/bootstrap/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a Console command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal Console makes use of the Symfony Console project and other third-party
    libraries to utilize modern PHP best practices. In doing so, it follows Drupal
    8 practices as well. This allows Console to use namespaces for the command detection
    and interaction with Drupal by reading its class loader.
  prefs: []
  type: TYPE_NORMAL
- en: This allows developers to easily create a Console command by implementing a
    custom class in a module.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a command that loads all the users who have not
    logged in in the last 10 days and resets their password. We will generate the
    base of our command using the scaffolding commands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will need to have Drupal Console installed. The tool will
    generate everything else for us. You will need to have a Drupal 8 site installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new module that will hold your Drupal Console command, such as
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`console_commands`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will generate the command''s base files using the `generate:command`
    command. Call it the `disable_users` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the created `DisableUsersCommand.php` file and remove the boilerplate
    example code from the execute method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the function to create a `DateTime` object, representing 10 days ago.
    We will use this to generate a timestamp for our query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add our query, which will query all the user entities who have
    a login timestamp greater than 10 days:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will iterate over the results and mark the user as disabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable the module in order to access the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal Console provides integration with modules using namespace discovery methods.
    When Console is run in a Drupal installation, it will discover all the available
    projects. It then discovers any files in the `\Drupal\{ a module }\Command` namespace
    that implements `\Drupal\Console\Command\Command`.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal Console will rescan the Drupal directory for available commands every
    time it is invoked, as it does not keep a cache of available commands.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal Console provides a much more intuitive developer experience as it follows
    Drupal core's coding formats. We will touch on how Console can be used to create
    entities.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Console command to create entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A benefit of Console is its ability to utilize Symfony Console's question helpers
    for a robust interactive experience. Drupal Commerce utilizes Console to provide
    a `commerce:create:store` command to generate stores. The purpose of the command
    is to simplify the creation of a specific entity.
  prefs: []
  type: TYPE_NORMAL
- en: The `\Drupal\commerce_store\Command\CreateStoreCommand` class overrides the
    default interact method that is executed to prompt data from the user. It will
    prompt users to enter the store's name, email, country, and currency.
  prefs: []
  type: TYPE_NORMAL
- en: Developers can implement similar commands to give advanced users a simpler way
    to work with modules and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to how to create custom commands at [https://docs.drupalconsole.com/en/extending/creating-custom-commands.html](https://docs.drupalconsole.com/en/extending/creating-custom-commands.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
