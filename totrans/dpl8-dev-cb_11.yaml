- en: Off the Drupalicon Island
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离开Drupalicon岛
- en: 'In this chapter, we will see how to use third-party libraries, such as JavaScript,
    CSS, and PHP in detail:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细说明如何使用第三方库，例如JavaScript、CSS和PHP：
- en: Implementing and using a third-party JavaScript library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和使用第三方JavaScript库
- en: Implementing and using a third-party CSS library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和使用第三方CSS库
- en: Implementing and using a third-party PHP library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和使用第三方PHP库
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Drupal 8 comes with a *Proudly Built Elsewhere* attitude. There has been an
    effort made to use more components created by the PHP community at large and other
    communities. Drupal 8 is built with Symfony. It includes Twig as its templating
    system, the provided WYSIWYG editor as its CKEditor, and PHPUnit for testing.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8带着一种**自豪地在外地建造**的态度。已经做出了努力，使用更多由整个PHP社区和其他社区创建的组件。Drupal 8是用Symfony构建的。它包括Twig作为其模板系统，提供的WYSIWYG编辑器作为其CKEditor，以及PHPUnit用于测试。
- en: How does Drupal 8 promote using libraries made elsewhere? The new asset management
    system in Drupal 8 makes it easier to use frontend libraries. Drupal implements
    PSR-0 and PSR-4 from the **PHP Framework Interoperability Group** (**PHP-FIG**),
    and **PHP Standards Recommendations** (**PSRs**) are suggested standards used
    to increase interoperability between PHP applications. This has streamlined integrating
    third-party PHP libraries.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8是如何推广使用其他地方制作的库的？Drupal 8中的新资产管理系统使得使用前端库变得更加容易。Drupal实现了来自**PHP框架互操作性小组**（**PHP-FIG**）的PSR-0和PSR-4，**PHP标准建议**（**PSRs**）是用于增加PHP应用程序之间互操作性的建议标准。这简化了集成第三方PHP库的过程。
- en: Both areas will be constantly improved with each minor release of Drupal 8\.
    These areas will be mentioned throughout the chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个领域将在Drupal 8的每个小版本中不断改进。这些领域将在本章中提到。
- en: Implementing and using a third-party JavaScript library
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现和使用第三方JavaScript库
- en: In the past, Drupal has only shipped with jQuery and a few jQuery plugins used
    by Drupal core for the JavaScript API. This has changed with Drupal 8\. **Underscore.js**
    and **Backbone.js** are now included in Drupal, bringing two popular JavaScript
    frameworks to its developers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，Drupal只包含jQuery和几个Drupal核心用于JavaScript API的jQuery插件。这种情况在Drupal 8中发生了变化。**Underscore.js**和**Backbone.js**现在包含在Drupal中，为开发者带来了两个流行的JavaScript框架。
- en: However, there are many JavaScript frameworks that can be used. In [*Chapter
    5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml), *Frontend for the Win*, we covered
    the asset management system and libraries. In this recipe, we will create a module
    that provides **Angular.js** as a library and a custom Angular application; the
    demo is available on the AngularJS home page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有许多JavaScript框架可以使用。在第[*5章*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml)“前端为王”中，我们介绍了资产管理系统和库。在这个配方中，我们将创建一个模块，提供**Angular.js**作为库和自定义Angular应用程序；演示可在AngularJS主页上查看。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we will use Bower to manage our third-party `Angular.js` library
    components. If you are not familiar with Bower, it is simply a package manager
    for frontend components. Instead of using Bower, you can just manually download
    and place the required files.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用Bower来管理我们的第三方`Angular.js`库组件。如果您不熟悉Bower，它只是一个前端组件的包管理器。您可以选择不使用Bower，只需手动下载并放置所需的文件。
- en: If you do not have Bower, you can follow the instructions to install it from
    `bower.io` at
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Bower，您可以按照从`bower.io`安装Bower的说明进行操作：
- en: '[http://bower.io/#install-bower](http://bower.io/#install-bower). If you do
    not want to install Bower, we will provide links to manually download libraries.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bower.io/#install-bower](http://bower.io/#install-bower)。如果您不想安装Bower，我们将提供手动下载库的链接。'
- en: Having a background in AngularJS is not required but is beneficial. This recipe
    implements the example from the home page of the library.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有AngularJS的背景不是必需的，但很有益。这个配方实现了来自库主页的示例。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a custom module named `mymodule` that will serve the AngularJS library
    and its implementation:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mymodule`的自定义模块，该模块将提供AngularJS库及其实现：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the `bower init` command to create a Bower project in our module''s directory.
    We will use most of the default values for the prompted questions:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`bower init`命令在我们的模块目录中创建一个Bower项目。我们将为提示问题使用大多数默认值：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we will install the AngularJS library using `bower install`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`bower install`安装AngularJS库：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `--save` option will ensure that the package's dependency is saved in the
    created `bower.json`. If you do not have Bower, you can download AngularJS from
    [https://angularjs.org/](https://angularjs.org/) and place it in the `bower_components`
    folder.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`--save`选项将确保包的依赖被保存在创建的`bower.json`中。如果您没有Bower，可以从[https://angularjs.org/](https://angularjs.org/)下载AngularJS并将其放置在`bower_components`文件夹中。'
- en: 'Create `mymodule.libraries.yml`. We will define AngularJS as its own library:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`mymodule.libraries.yml`。我们将定义AngularJS为其自己的库：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When the `angular` library is attached, it will add the AngularJS library file
    and attach the CSS style sheet.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当`angular`库被附加时，它将添加AngularJS库文件并附加CSS样式表。
- en: 'Next, create a `mymodule.module` file. We will use the theme layer''s preprocess
    functions to add an `ng-app` attribute to the root HTML element:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个`mymodule.module`文件。我们将使用主题层的预处理器函数将`ng-app`属性添加到根HTML元素：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: AngularJS uses the `ng-app` attribute as a directive for bootstrapping an AngularJS
    application. It marks the root of the application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS使用`ng-app`属性作为引导AngularJS应用的指令。它标记了应用的根。
- en: We will use a custom block to implement the HTML required for the AngularJS
    example. Create an `src/Plugin/Block` directory and an `AngularBlock.php` file.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用自定义区块来实现AngularJS示例所需的HTML。创建一个`src/Plugin/Block`目录和一个`AngularBlock.php`文件。
- en: 'Extend the `BlockBase` class and implement the `build` method to return our
    Angular app''s HTML:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展`BlockBase`类并实现`build`方法以返回我们的Angular应用的HTML：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We return a render array that contains the `input`, `name`, and our `library`
    attachments. The `input` array returns the Form API render information for a text
    field. The `name` returns a regular markup that will bind Angular's changes to
    the `yourName` scope variable.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们返回一个包含`input`、`name`和我们的`library`附件的渲染数组。`input`数组返回文本字段的表单API渲染信息。`name`返回一个常规标记，将Angular的变化绑定到`yourName`作用域变量。
- en: Install your custom module, or rebuild Drupal's cache if the module is already
    installed.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装您的自定义模块，或者如果模块已经安装，重新构建Drupal的缓存。
- en: Go to the block layout form from the Structure page and place your block within
    a region, such as the Sidebar first region.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从结构页面进入区块布局表单，并将您的区块放置在区域中，例如侧边栏的第一个区域。
- en: 'View your Drupal site and interact with your block, which is powered by AngularJS:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看您的Drupal站点并与由AngularJS驱动的区块进行交互：
- en: '![](img/776cd369-c137-436d-9a00-9340843b08a6.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/776cd369-c137-436d-9a00-9340843b08a6.png)'
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The simplicity of integrating with a JavaScript framework is provided by the
    new asset management system in Drupal 8\. The usage of **Bower** is optional,
    but it is usually a preferred method used to manage frontend dependencies. Using
    Bower, we can place `bower_components` in an `ignore` file that can be used to
    keep third-party libraries out of version control.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8的新资产管理系统提供了与JavaScript框架集成的简便性。**Bower**的使用是可选的，但通常是一种用于管理前端依赖的首选方法。使用Bower，我们可以将`bower_components`放置在一个`ignore`文件中，以防止第三方库进入版本控制。
- en: There's more...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Drupal 8 uses Composer for handling PHP dependencies, but frontend libraries
    are still being sorted out for best practices.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8使用Composer处理PHP依赖项，但前端库的最佳实践仍在整理中。
- en: Best practices for handling external libraries
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理外部库的最佳实践
- en: In our recipe, we added the third-party library through a local copy of the
    code, inside the module. This approach, however, makes it difficult to reuse the
    same library in another module. The other module would have to declare a dependency
    on the module providing the library or define its own copy, and two versions of
    AngularJS would have been loaded on the page.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配方中，我们通过模块内的代码本地副本添加了第三方库。然而，这种方法使得在另一个模块中重用相同的库变得困难。其他模块必须声明对提供库的模块的依赖，或者定义自己的副本，页面上将加载两个版本的AngularJS。
- en: There is currently a discussion in the Drupal core issue queue by the community
    on how to best tackle this issue--refer to [https://www.drupal.org/node/2605130](https://www.drupal.org/node/2605130).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，社区在Drupal核心问题队列中正在讨论如何最好地解决这个问题--请参阅[https://www.drupal.org/node/2605130](https://www.drupal.org/node/2605130)。
- en: 'A leading practice is to place a `libraries` directory in the Drupal docroot
    (alongside `modules` and `themes`.) An example can be found in the DropzoneJS
    integration module:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一种最佳实践是在Drupal docroot中放置一个`libraries`目录（与`modules`和`themes`并列）。一个例子可以在DropzoneJS集成模块中找到：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This pattern would allow any module to load the library through this path. Its
    author recommends that you have a base module that defines the library and simple
    integration and always make that a dependency.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式将允许任何模块通过此路径加载库。它的作者建议你有一个定义库和简单集成的基础模块，并始终将其作为一个依赖项。
- en: See also
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the core issue to add Backbone.js and Underscore.js at
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[添加Backbone.js和Underscore.js的核心问题]中参考
- en: '[https://www.drupal.org/node/1149866](https://www.drupal.org/node/1149866)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.drupal.org/node/1149866](https://www.drupal.org/node/1149866)'
- en: Refer to the *Using the new asset management system* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win*
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考[*第5章*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml)的*使用新的资产管理系统*食谱，*前端获胜*
- en: Refer to the *Creating a Module* recipe of *[Chapter 4](a634af62-2148-4382-9121-b8500df169ed.xhtml)*,
    *Extending Drupal*
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考*[第4章](a634af62-2148-4382-9121-b8500df169ed.xhtml)*的*创建模块*食谱，*扩展Drupal*
- en: Implementing and using a third-party CSS library
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现和使用第三方CSS库
- en: Drupal provides many things. However, one thing that it does not provide is
    any kind of CSS component library. In the *Using the new asset management system*
    recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml), *Frontend
    for the Win*, we added `FontAwesome` as a library. CSS frameworks implement robust
    user interface design components, and they can be quite large if you use a compiled
    version with everything bundled. The asset management system can be used to define
    each component as its own library to only deliver the exact files required for
    a strong frontend performance.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal提供了许多东西。然而，它不提供任何类型的CSS组件库。在[*第5章*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml)的*使用新的资产管理系统*食谱中，*前端获胜*，我们添加了`FontAwesome`作为库。CSS框架实现了强大的用户界面设计组件，如果你使用包含所有捆绑内容的编译版本，它们可以相当大。资产管理系统可以用来定义每个组件为其自己的库，仅传递为强大的前端性能所需的精确文件。
- en: In this recipe, we will implement the Semantic UI framework, using the CSS-only
    distribution, which provides each individual component's CSS file. We will register
    the `form`, `button`, `label`, and `input` components as libraries. Our custom
    theme will then alter the Drupal elements for `buttons`, `labels`, and `inputs`
    to have the Semantic UI classes and load the proper library.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将实现Semantic UI框架，使用仅CSS的发行版，它为每个单独的组件提供CSS文件。我们将注册`form`、`button`、`label`和`input`组件作为库。然后我们的自定义主题将修改Drupal的`buttons`、`labels`和`inputs`元素，使其具有Semantic
    UI类并加载适当的库。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we will use Bower to manage our third-party components. If
    you are not familiar with Bower, it is simply a package manager used for frontend
    components. Instead of using Bower, you can just manually download and place the
    required files.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用Bower来管理我们的第三方组件。如果你不熟悉Bower，它是一个用于前端组件的包管理器。除了使用Bower，你也可以手动下载并放置所需的文件。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: For this recipe, create a new custom theme named `mytheme` using Classy as a
    base theme. This way, you can reuse some existing styling. If you are unfamiliar
    with creating a base theme, refer to the *Creating a custom theme based on Classy*
    recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml), *Frontend
    for the Win*.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个食谱，使用Classy作为基础主题创建一个名为`mytheme`的新自定义主题。这样，你可以重用一些现有的样式。如果你不熟悉创建基础主题，请参考[*第5章*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml)的*基于Classy创建自定义主题*食谱，*前端获胜*。
- en: 'Using your terminal, navigate to your theme''s directory. Run `bower init`
    to create a `bower` project:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的终端，导航到你的主题目录。运行`bower init`来创建一个`bower`项目：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, use `bower install` to save the Semantic UI library:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`bower install`保存Semantic UI库：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `--save` option will ensure that the package's dependency is saved in the
    created `bower.json`. If you do not have Bower, you can download Semantic UI from
    [https://github.com/semantic-org/semantic-ui/](https://github.com/semantic-org/semantic-ui/)
    and place it in a `bower_components` folder.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`--save`选项将确保包的依赖被保存在创建的`bower.json`中。如果你没有Bower，你可以从[https://github.com/semantic-org/semantic-ui/](https://github.com/semantic-org/semantic-ui/)下载Semantic
    UI并将其放置在`bower_components`文件夹中。'
- en: Create `mytheme.libraries.yml` in your theme's base directory. This will hold
    your main Semantic UI definition along with specific component library definitions.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的主题基础目录中创建`mytheme.libraries.yml`。这将包含你的主要Semantic UI定义以及特定的组件库定义。
- en: 'You will then add a new library to the `form` component:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你将为`form`组件添加一个新的库：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `form` component for Semantic UI has a style sheet and JavaScript file.
    Your library ensures that both are loaded when the library is attached.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Semantic UI 的 `form` 组件包含一个样式表和 JavaScript 文件。您的库确保在库附加时两者都被加载。
- en: 'The `button`, `input`, and `label` components do not have any JavaScript files.
    Add a library for each component:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`button`、`input` 和 `label` 组件没有 JavaScript 文件。为每个组件添加一个库：'
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that the libraries are defined, you can use the `attach_library` Twig function
    to add your libraries to the appropriate templates when you add the Semantic UI
    classes.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在库已经定义，您可以在添加 Semantic UI 类时使用 `attach_library` Twig 函数将您的库添加到适当的模板中。
- en: 'Copy the `form.html.twig` file from the Classy theme''s `templates` folder
    and paste it into your theme''s templates folder. Then, attach `mytheme/semantic_ui.form`
    and add the `ui` and `form` classes:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Classy 主题的 `templates` 文件夹中的 `form.html.twig` 文件复制到您的主题模板文件夹中。然后，附加 `mytheme/semantic_ui.form`
    并添加 `ui` 和 `form` 类：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `attach_library` function will attach the specified library. Use the `addClass`
    method from Twig to add the `ui` and `form` classes. Semantic UI requires all
    elements to have the matching `ui` class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`attach_library` 函数将附加指定的库。使用 Twig 的 `addClass` 方法添加 `ui` 和 `form` 类。Semantic
    UI 要求所有元素都具有匹配的 `ui` 类。'
- en: 'Next, copy the `input.html.twig` file from the Classy theme and paste it into
    your theme''s `template` folder. Then, attach `mytheme/semantic_ui.input` and
    add the `ui` and `input` classes:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将 Classy 主题中的 `input.html.twig` 文件复制到您的主题的 `template` 文件夹中。然后，附加 `mytheme/semantic_ui.input`
    并添加 `ui` 和 `input` 类：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Copy the `input.html.twig` file that you just created and use it to make `input-submit.html.twig`.
    This template file will be used for `submit` and other buttons:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您刚刚创建的 `input.html.twig` 文件复制并使用它来制作 `input-submit.html.twig`。此模板文件将用于 `submit`
    和其他按钮：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, copy the `form-element-label.html.twig` file from Classy to your theme
    and add the label library and appropriate class, along with the defaults that
    Classy has defined:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将 Classy 中的 `form-element-label.html.twig` 文件复制到您的主题中，并添加标签库以及 Classy 定义的默认类：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'View a form and check whether it has been styled by the Semantic UI CSS framework:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看表单并检查它是否已被 Semantic UI CSS 框架样式化：
- en: '![](img/63a5449e-2b26-4be2-b282-1fd9f6c6736a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/63a5449e-2b26-4be2-b282-1fd9f6c6736a.png)'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The simplicity of integrating with a CSS framework is provided by the new template
    system, Twig, and the asset management system in Drupal 8\. The usage of Bower
    is optional, but it is usually a preferred method for managing frontend dependencies
    and can be used to keep third-party libraries out of version control.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 的新模板系统 Twig 和资产管理系统的简单性提供了与 CSS 框架集成的便利。Bower 的使用是可选的，但通常它是管理前端依赖的首选方法，并且可以用来将第三方库排除在版本控制之外。
- en: Although it may be a task to add each component as its own library and attach
    when specifically needed, it ensures optimal asset delivery. With CSS and JavaScript
    aggregation enabled, each page will only have the minimal resources that are needed.
    This is an advantage when the entire Semantic UI minified is still 524 KB.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将每个组件作为单独的库添加并仅在特定需要时附加可能是一项任务，但它确保了最优的资产交付。启用 CSS 和 JavaScript 聚合后，每个页面将只包含所需的最小资源。当整个
    Semantic UI 压缩版仍然有 524 KB 时，这是一个优势。
- en: See also
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考信息
- en: Refer to Semantic UI at [http://semantic-ui.com/](http://semantic-ui.com/)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 Semantic UI 在 [http://semantic-ui.com/](http://semantic-ui.com/)
- en: Refer to the *Creating a custom theme based on Classy* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win*
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 *基于 Classy 创建自定义主题* 的 *第 5 章* 菜谱 [*第 5 章*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml)，*前端为王*
- en: Refer to the *Using the new asset management system* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win*
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 *使用新的资产管理系统* 的 *第 5 章* 菜谱 [*第 5 章*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml)，*前端为王*
- en: Refer to the *Twig templating* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win*
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 *第 5 章* 的 *Twig 模板* 菜谱 [*第 5 章*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml)，*前端为王*
- en: Implementing and using a third-party PHP library
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现和使用第三方 PHP 库
- en: Drupal 8 uses Composer for package dependencies and `autoloading` classes based
    on PSR standards. This allows us to use any available PHP library much more easily
    than in previous versions of Drupal.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 使用 Composer 来处理包依赖和基于 PSR 标准的 `autoloading` 类。这使得我们比在 Drupal 的先前版本中更容易使用任何可用的
    PHP 库。
- en: In this recipe, we will add the `IpRestrict Stack Middleware` library to add
    the functionality to whitelist access to the Drupal site based on allowed IP addresses.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加`IpRestrict Stack Middleware`库，以添加基于允许IP地址的白名单访问Drupal网站的功能。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have Composer installed in order to use the Composer manager workflow.
    You can follow the *Getting Started* documentation at [https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md).
    We will add the `alsar/stack-ip-restrict` library as a dependency to our Drupal
    installation.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Composer才能使用Composer管理器工作流程。您可以参考[https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md)中的*入门*文档。我们将添加`alsar/stack-ip-restrict`库作为我们的Drupal安装的依赖项。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Using your terminal, navigate to your Drupal site's root directory.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的终端，导航到您的Drupal网站根目录。
- en: 'Use the `require` command from Composer to add the library:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer的`require`命令添加库：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Composer will then add the library to the `composer.json` file and install the
    library along with any dependencies. Its namespace will now be registered.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译器将随后将库添加到`composer.json`文件中，并安装库及其所有依赖项。它的命名空间现在已被注册。
- en: 'Now, you will need to implement a module that registers the library as a middleware
    service. We''ll call the module `ip_restrict`. Add the following code to the `ip_restrict.info.yml`
    file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要实现一个模块，将库注册为中间件服务。我们将该模块命名为`ip_restrict`。将以下代码添加到`ip_restrict.info.yml`文件中：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create `ip_restrict.services.yml`. This will register the library with Drupal''s
    service container:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`ip_restrict.services.yml`。这将注册库到Drupal的服务容器中：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `parameters` section defines configuration values, which can be overridden
    in the site's `services.yml` file. The `services` section defines the service's
    machine name, class file, its constructor arguments, and any tags.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`parameters`部分定义了配置值，这些值可以在网站的`services.yml`文件中覆盖。`services`部分定义了服务的机器名称、类文件、其构造函数参数以及任何标签。'
- en: Next, you will need to implement a compiler pass injection. This will allow
    us to alter our service in the container definition when it is compiled. Create
    a `src/Compiler` directory and make `IpRestrictPass.php`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要实现编译器传递注入。这将允许我们在编译容器定义时修改我们的服务。创建一个`src/Compiler`目录并创建`IpRestrictPass.php`。
- en: When making a compiler pass class, the class and filename must be formatted
    in a specific way. It is the camel case version of the module name followed by
    `Pass`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建编译器传递类时，类和文件名必须以特定的方式格式化。它是模块名称的驼峰式版本，后面跟着`Pass`。
- en: 'The `IpRestrictPass.php` will provide the `IpRestrictPass` class, which implements
    `\Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IpRestrictPass.php`将提供`IpRestrictPass`类，该类实现了`\Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface`接口：'
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In our compiler pass, we check the `enabled` parameter and remove our middleware
    if it has been disabled (so that it does not restrict allowed IPs).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的编译器传递中，我们检查`enabled`参数，如果已禁用我们的中间件（以便它不会限制允许的IP地址），则将其移除。
- en: Enable the module. The stack middleware service will be registered and now supporting
    restrict access from local IP addresses.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用模块。堆栈中间件服务将被注册，现在支持从本地IP地址限制访问。
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Drupal 8 utilizes Symfony components. One of them is the service container and
    the services it has registered. During the building of the container, there is
    a compiler pass process that allows alterations of the container's services.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8利用了Symfony组件。其中之一是服务容器及其已注册的服务。在容器构建过程中，有一个编译器传递过程，允许修改容器的服务。
- en: First, we will need to register the service in the module's `services.yml` file.
    The `\Drupal\Core\DependencyInjection\Compiler\StackedKernelPass` class provided
    by the core will automatically load all the services tagged with `http_middleware`,
    such as our `ip_restrict.middleware` service.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块的`services.yml`文件中注册服务。核心提供的`\Drupal\Core\DependencyInjection\Compiler\StackedKernelPass`类将自动加载所有带有`http_middleware`标签的服务，例如我们的`ip_restrict.middleware`服务。
- en: Our `arguments` definition loads items defined in the `parameters.ip_restrict`
    that are used for the class's constructor.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`arguments`定义加载在`parameters.ip_restrict`中定义的项，这些项用于类的构造函数。
- en: With our provided `IpRestrictPass` class, we are also tapping into the container's
    compile cycle. We will take a look at the parameter values for the `ip_restrict`
    section to check whether they are enabled. If the enabled setting is set to `false`,
    we remove our service from the container.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们提供的 `IpRestrictPass` 类，我们也在利用容器的编译周期。我们将查看 `ip_restrict` 部分的参数值，以检查它们是否已启用。如果启用设置设置为
    `false`，我们将从容器中移除我们的服务。
- en: See also
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to Services and dependency injection in the Drupal 8 documentation at
    [https://www.drupal.org/docs/8/api/services-and-dependency-injection/services-and-dependency-injection-in-drupal-8](https://www.drupal.org/docs/8/api/services-and-dependency-injection/services-and-dependency-injection-in-drupal-8)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参阅 Drupal 8 文档中的服务和依赖注入 [https://www.drupal.org/docs/8/api/services-and-dependency-injection/services-and-dependency-injection-in-drupal-8](https://www.drupal.org/docs/8/api/services-and-dependency-injection/services-and-dependency-injection-in-drupal-8)
- en: Refer to the Symfony service container documentation at
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 Symfony 服务容器文档
- en: '[http://symfony.com/doc/current/book/service_container.html](http://symfony.com/doc/current/book/service_container.html)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://symfony.com/doc/current/book/service_container.html](http://symfony.com/doc/current/book/service_container.html)'
- en: Refer to the Symfony Dependency Injection component documentation at
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 Symfony 依赖注入组件文档
- en: "[http://symfony.com/doc/current/components/dependency_injection/introduction.html\uFEFF\
    ](http://symfony.com/doc/current/components/dependency_injection/introduction.html)"
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://symfony.com/doc/current/components/dependency_injection/introduction.html](http://symfony.com/doc/current/components/dependency_injection/introduction.html)'
