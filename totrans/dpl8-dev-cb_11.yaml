- en: Off the Drupalicon Island
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will see how to use third-party libraries, such as JavaScript,
    CSS, and PHP in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and using a third-party JavaScript library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and using a third-party CSS library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and using a third-party PHP library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 comes with a *Proudly Built Elsewhere* attitude. There has been an
    effort made to use more components created by the PHP community at large and other
    communities. Drupal 8 is built with Symfony. It includes Twig as its templating
    system, the provided WYSIWYG editor as its CKEditor, and PHPUnit for testing.
  prefs: []
  type: TYPE_NORMAL
- en: How does Drupal 8 promote using libraries made elsewhere? The new asset management
    system in Drupal 8 makes it easier to use frontend libraries. Drupal implements
    PSR-0 and PSR-4 from the **PHP Framework Interoperability Group** (**PHP-FIG**),
    and **PHP Standards Recommendations** (**PSRs**) are suggested standards used
    to increase interoperability between PHP applications. This has streamlined integrating
    third-party PHP libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Both areas will be constantly improved with each minor release of Drupal 8\.
    These areas will be mentioned throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and using a third-party JavaScript library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the past, Drupal has only shipped with jQuery and a few jQuery plugins used
    by Drupal core for the JavaScript API. This has changed with Drupal 8\. **Underscore.js**
    and **Backbone.js** are now included in Drupal, bringing two popular JavaScript
    frameworks to its developers.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are many JavaScript frameworks that can be used. In [*Chapter
    5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml), *Frontend for the Win*, we covered
    the asset management system and libraries. In this recipe, we will create a module
    that provides **Angular.js** as a library and a custom Angular application; the
    demo is available on the AngularJS home page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use Bower to manage our third-party `Angular.js` library
    components. If you are not familiar with Bower, it is simply a package manager
    for frontend components. Instead of using Bower, you can just manually download
    and place the required files.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have Bower, you can follow the instructions to install it from
    `bower.io` at
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bower.io/#install-bower](http://bower.io/#install-bower). If you do
    not want to install Bower, we will provide links to manually download libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: Having a background in AngularJS is not required but is beneficial. This recipe
    implements the example from the home page of the library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a custom module named `mymodule` that will serve the AngularJS library
    and its implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `bower init` command to create a Bower project in our module''s directory.
    We will use most of the default values for the prompted questions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will install the AngularJS library using `bower install`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `--save` option will ensure that the package's dependency is saved in the
    created `bower.json`. If you do not have Bower, you can download AngularJS from
    [https://angularjs.org/](https://angularjs.org/) and place it in the `bower_components`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `mymodule.libraries.yml`. We will define AngularJS as its own library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When the `angular` library is attached, it will add the AngularJS library file
    and attach the CSS style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a `mymodule.module` file. We will use the theme layer''s preprocess
    functions to add an `ng-app` attribute to the root HTML element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: AngularJS uses the `ng-app` attribute as a directive for bootstrapping an AngularJS
    application. It marks the root of the application.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a custom block to implement the HTML required for the AngularJS
    example. Create an `src/Plugin/Block` directory and an `AngularBlock.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extend the `BlockBase` class and implement the `build` method to return our
    Angular app''s HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We return a render array that contains the `input`, `name`, and our `library`
    attachments. The `input` array returns the Form API render information for a text
    field. The `name` returns a regular markup that will bind Angular's changes to
    the `yourName` scope variable.
  prefs: []
  type: TYPE_NORMAL
- en: Install your custom module, or rebuild Drupal's cache if the module is already
    installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the block layout form from the Structure page and place your block within
    a region, such as the Sidebar first region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View your Drupal site and interact with your block, which is powered by AngularJS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/776cd369-c137-436d-9a00-9340843b08a6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplicity of integrating with a JavaScript framework is provided by the
    new asset management system in Drupal 8\. The usage of **Bower** is optional,
    but it is usually a preferred method used to manage frontend dependencies. Using
    Bower, we can place `bower_components` in an `ignore` file that can be used to
    keep third-party libraries out of version control.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 uses Composer for handling PHP dependencies, but frontend libraries
    are still being sorted out for best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for handling external libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our recipe, we added the third-party library through a local copy of the
    code, inside the module. This approach, however, makes it difficult to reuse the
    same library in another module. The other module would have to declare a dependency
    on the module providing the library or define its own copy, and two versions of
    AngularJS would have been loaded on the page.
  prefs: []
  type: TYPE_NORMAL
- en: There is currently a discussion in the Drupal core issue queue by the community
    on how to best tackle this issue--refer to [https://www.drupal.org/node/2605130](https://www.drupal.org/node/2605130).
  prefs: []
  type: TYPE_NORMAL
- en: 'A leading practice is to place a `libraries` directory in the Drupal docroot
    (alongside `modules` and `themes`.) An example can be found in the DropzoneJS
    integration module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This pattern would allow any module to load the library through this path. Its
    author recommends that you have a base module that defines the library and simple
    integration and always make that a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the core issue to add Backbone.js and Underscore.js at
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.drupal.org/node/1149866](https://www.drupal.org/node/1149866)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Refer to the *Using the new asset management system* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *Creating a Module* recipe of *[Chapter 4](a634af62-2148-4382-9121-b8500df169ed.xhtml)*,
    *Extending Drupal*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and using a third-party CSS library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal provides many things. However, one thing that it does not provide is
    any kind of CSS component library. In the *Using the new asset management system*
    recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml), *Frontend
    for the Win*, we added `FontAwesome` as a library. CSS frameworks implement robust
    user interface design components, and they can be quite large if you use a compiled
    version with everything bundled. The asset management system can be used to define
    each component as its own library to only deliver the exact files required for
    a strong frontend performance.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will implement the Semantic UI framework, using the CSS-only
    distribution, which provides each individual component's CSS file. We will register
    the `form`, `button`, `label`, and `input` components as libraries. Our custom
    theme will then alter the Drupal elements for `buttons`, `labels`, and `inputs`
    to have the Semantic UI classes and load the proper library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use Bower to manage our third-party components. If
    you are not familiar with Bower, it is simply a package manager used for frontend
    components. Instead of using Bower, you can just manually download and place the
    required files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, create a new custom theme named `mytheme` using Classy as a
    base theme. This way, you can reuse some existing styling. If you are unfamiliar
    with creating a base theme, refer to the *Creating a custom theme based on Classy*
    recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml), *Frontend
    for the Win*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using your terminal, navigate to your theme''s directory. Run `bower init`
    to create a `bower` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use `bower install` to save the Semantic UI library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `--save` option will ensure that the package's dependency is saved in the
    created `bower.json`. If you do not have Bower, you can download Semantic UI from
    [https://github.com/semantic-org/semantic-ui/](https://github.com/semantic-org/semantic-ui/)
    and place it in a `bower_components` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Create `mytheme.libraries.yml` in your theme's base directory. This will hold
    your main Semantic UI definition along with specific component library definitions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will then add a new library to the `form` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `form` component for Semantic UI has a style sheet and JavaScript file.
    Your library ensures that both are loaded when the library is attached.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `button`, `input`, and `label` components do not have any JavaScript files.
    Add a library for each component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that the libraries are defined, you can use the `attach_library` Twig function
    to add your libraries to the appropriate templates when you add the Semantic UI
    classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the `form.html.twig` file from the Classy theme''s `templates` folder
    and paste it into your theme''s templates folder. Then, attach `mytheme/semantic_ui.form`
    and add the `ui` and `form` classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `attach_library` function will attach the specified library. Use the `addClass`
    method from Twig to add the `ui` and `form` classes. Semantic UI requires all
    elements to have the matching `ui` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, copy the `input.html.twig` file from the Classy theme and paste it into
    your theme''s `template` folder. Then, attach `mytheme/semantic_ui.input` and
    add the `ui` and `input` classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the `input.html.twig` file that you just created and use it to make `input-submit.html.twig`.
    This template file will be used for `submit` and other buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, copy the `form-element-label.html.twig` file from Classy to your theme
    and add the label library and appropriate class, along with the defaults that
    Classy has defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'View a form and check whether it has been styled by the Semantic UI CSS framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/63a5449e-2b26-4be2-b282-1fd9f6c6736a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplicity of integrating with a CSS framework is provided by the new template
    system, Twig, and the asset management system in Drupal 8\. The usage of Bower
    is optional, but it is usually a preferred method for managing frontend dependencies
    and can be used to keep third-party libraries out of version control.
  prefs: []
  type: TYPE_NORMAL
- en: Although it may be a task to add each component as its own library and attach
    when specifically needed, it ensures optimal asset delivery. With CSS and JavaScript
    aggregation enabled, each page will only have the minimal resources that are needed.
    This is an advantage when the entire Semantic UI minified is still 524 KB.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to Semantic UI at [http://semantic-ui.com/](http://semantic-ui.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *Creating a custom theme based on Classy* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *Using the new asset management system* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *Twig templating* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and using a third-party PHP library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 uses Composer for package dependencies and `autoloading` classes based
    on PSR standards. This allows us to use any available PHP library much more easily
    than in previous versions of Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will add the `IpRestrict Stack Middleware` library to add
    the functionality to whitelist access to the Drupal site based on allowed IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to have Composer installed in order to use the Composer manager workflow.
    You can follow the *Getting Started* documentation at [https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md).
    We will add the `alsar/stack-ip-restrict` library as a dependency to our Drupal
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using your terminal, navigate to your Drupal site's root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `require` command from Composer to add the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Composer will then add the library to the `composer.json` file and install the
    library along with any dependencies. Its namespace will now be registered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you will need to implement a module that registers the library as a middleware
    service. We''ll call the module `ip_restrict`. Add the following code to the `ip_restrict.info.yml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `ip_restrict.services.yml`. This will register the library with Drupal''s
    service container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `parameters` section defines configuration values, which can be overridden
    in the site's `services.yml` file. The `services` section defines the service's
    machine name, class file, its constructor arguments, and any tags.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will need to implement a compiler pass injection. This will allow
    us to alter our service in the container definition when it is compiled. Create
    a `src/Compiler` directory and make `IpRestrictPass.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When making a compiler pass class, the class and filename must be formatted
    in a specific way. It is the camel case version of the module name followed by
    `Pass`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `IpRestrictPass.php` will provide the `IpRestrictPass` class, which implements
    `\Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In our compiler pass, we check the `enabled` parameter and remove our middleware
    if it has been disabled (so that it does not restrict allowed IPs).
  prefs: []
  type: TYPE_NORMAL
- en: Enable the module. The stack middleware service will be registered and now supporting
    restrict access from local IP addresses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 utilizes Symfony components. One of them is the service container and
    the services it has registered. During the building of the container, there is
    a compiler pass process that allows alterations of the container's services.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will need to register the service in the module's `services.yml` file.
    The `\Drupal\Core\DependencyInjection\Compiler\StackedKernelPass` class provided
    by the core will automatically load all the services tagged with `http_middleware`,
    such as our `ip_restrict.middleware` service.
  prefs: []
  type: TYPE_NORMAL
- en: Our `arguments` definition loads items defined in the `parameters.ip_restrict`
    that are used for the class's constructor.
  prefs: []
  type: TYPE_NORMAL
- en: With our provided `IpRestrictPass` class, we are also tapping into the container's
    compile cycle. We will take a look at the parameter values for the `ip_restrict`
    section to check whether they are enabled. If the enabled setting is set to `false`,
    we remove our service from the container.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to Services and dependency injection in the Drupal 8 documentation at
    [https://www.drupal.org/docs/8/api/services-and-dependency-injection/services-and-dependency-injection-in-drupal-8](https://www.drupal.org/docs/8/api/services-and-dependency-injection/services-and-dependency-injection-in-drupal-8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the Symfony service container documentation at
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://symfony.com/doc/current/book/service_container.html](http://symfony.com/doc/current/book/service_container.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Refer to the Symfony Dependency Injection component documentation at
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "[http://symfony.com/doc/current/components/dependency_injection/introduction.html\uFEFF\
    ](http://symfony.com/doc/current/components/dependency_injection/introduction.html)"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
