["```php\n\\Drupal::logger('hello_world')->error('This is my error message'); \n```", "```php\n\\Drupal::service('logger.factory')->get('hello_world')->error('This is my error message');\n```", "```php\nhello_world.logger.channel.hello_world:\n  parent: logger.channel_base\n  arguments: ['hello_world']\n```", "```php\n\\Drupal::service('logger.factory')->get('hello_world'); \n```", "```php\nnamespace Drupal\\hello_world\\Logger;\n\nuse Drupal\\Core\\Logger\\RfcLoggerTrait;\nuse Psr\\Log\\LoggerInterface;\n\n/**\n * A logger that sends an email when the log type is \"error\".\n */\nclass MailLogger implements LoggerInterface {\n\n  use RfcLoggerTrait;\n\n  /**\n   * {@inheritdoc}\n   */\n  public function log($level, $message, array $context = array()) {\n    // Log our message to the logging system.\n  }\n}\n```", "```php\nhello_world.logger.hello_world:\n  class: Drupal\\hello_world\\Logger\\MailLogger\n  tags:\n    - { name: logger }\n```", "```php\n/**\n * @var \\Drupal\\Core\\Logger\\LoggerChannelInterface\n */\nprotected $logger;\n\n/**\n * SalutationConfigurationForm constructor.\n *\n * @param \\Drupal\\Core\\Config\\ConfigFactoryInterface $config_factory\n *   The factory for configuration objects.\n * @param \\Drupal\\Core\\Logger\\LoggerChannelInterface $logger\n *   The logger.\n */\npublic function __construct(ConfigFactoryInterface $config_factory, LoggerChannelInterface $logger) {\n  parent::__construct($config_factory);\n  $this->logger = $logger;\n}\n\n/**\n * {@inheritdoc}\n */\npublic static function create(ContainerInterface $container) {\n  return new static(\n    $container->get('config.factory'),\n    $container->get('hello_world.logger.channel.hello_world')\n  );\n}\n```", "```php\nuse Drupal\\Core\\Config\\ConfigFactoryInterface;\nuse Drupal\\Core\\Logger\\LoggerChannelInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\n```", "```php\n$this->logger->info('The Hello World salutation has been changed to @message.', ['@message' => $form_state->getValue('salutation')]);\n```", "```php\n/**\n * Implements hook_mail().\n */\nfunction hello_world_mail($key, &$message, $params) {\n  switch ($key) {\n    case 'hello_world_log':\n      $message['from'] = \\Drupal::config('system.site')->get('mail');\n      $message['subject'] = t('There is an error on your website');\n      $message['body'][] = $params['message'];\n\n      break;\n  }\n}\n```", "```php\n/**\n * {@inheritdoc}\n */\npublic function log($level, $message, array $context = array()) {\n  if ($level !== RfcLogLevel::ERROR) {\n    return;\n  }\n\n  $to = $this->configFactory->get('system.site')->get('mail');\n  $langcode = $this->configFactory->get('system.site')->get('langcode');\n  $variables = $this->parser->parseMessagePlaceholders($message, $context);\n  $markup = new FormattableMarkup($message, $variables);\n  \\Drupal::service('plugin.manager.mail')->mail('hello_world', 'hello_world_log', $to, $langcode, ['message' => $markup]);\n}\n```", "```php\n/**\n * @var \\Drupal\\Core\\Logger\\LogMessageParserInterface\n */\nprotected $parser;\n\n/**\n * @var \\Drupal\\Core\\Config\\ConfigFactoryInterface\n */\nprotected $configFactory;\n\n/**\n * MailLogger constructor.\n *\n * @param \\Drupal\\Core\\Logger\\LogMessageParserInterface $parser\n * @param \\Drupal\\Core\\Config\\ConfigFactoryInterface $config_factory\n */\npublic function __construct(LogMessageParserInterface $parser, ConfigFactoryInterface $config_factory) {\n  $this->parser = $parser;\n  $this->configFactory = $config_factory;\n}\n```", "```php\nuse Drupal\\Core\\Logger\\LogMessageParserInterface;\nuse Drupal\\Core\\Config\\ConfigFactoryInterface;\nuse Drupal\\Component\\Render\\FormattableMarkup;\nuse Drupal\\Core\\Logger\\RfcLogLevel;\n```", "```php\nhello_world.logger.hello_world:\n  class: Drupal\\hello_world\\Logger\\MailLogger\n  arguments: ['@logger.log_message_parser', '@config.factory']\n  tags:\n    - { name: logger }\n```", "```php\n/**\n * Implements hook_mail_alter().\n */\nfunction hello_world_mail_alter(&$message) {\n  switch ($message['key']) {\n    case 'hello_world_log':\n      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';\n      break;\n  }\n}\n```", "```php\nnamespace Drupal\\hello_world\\Plugin\\Mail;\n\nuse Drupal\\Core\\Mail\\MailFormatHelper;\nuse Drupal\\Core\\Mail\\MailInterface;\nuse Drupal\\Core\\Plugin\\ContainerFactoryPluginInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\n\n/**\n * Defines the Hello World mail backend.\n *\n * @Mail(\n *   id = \"hello_world_mail\",\n *   label = @Translation(\"Hello World mailer\"),\n *   description = @Translation(\"Sends an email using an external API specific to our Hello World module.\")\n * )\n */\nclass HelloWorldMail implements MailInterface, ContainerFactoryPluginInterface {\n\n  /**\n   * {@inheritdoc}\n   */\n  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {\n    return new static();\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function format(array $message) {\n    // Join the body array into one string.\n    $message['body'] = implode(\"\\n\\n\", $message['body']);\n    // Convert any HTML to plain-text.\n    $message['body'] = MailFormatHelper::htmlToText($message['body']);\n    // Wrap the mail body for sending.\n    $message['body'] = MailFormatHelper::wrapMail($message['body']);\n\n    return $message;\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function mail(array $message) {\n    // Use the external API to send the email based on the $message array\n    // constructed via the `hook_mail()` implementation.\n  }\n}\n```", "```php\n/**\n * Implements hook_install().\n */\nfunction hello_world_install() {\n  $config = \\Drupal::configFactory()->getEditable('system.mail');\n  $mail_plugins = $config->get('interface');\n  if (in_array('hello_world', array_keys($mail_plugins))) {\n    return;\n  }\n\n  $mail_plugins['hello_world'] = 'hello_world_mail';\n  $config->set('interface', $mail_plugins)->save();\n}\n```", "```php\n\n/**\n * Implements hook_uninstall().\n */\nfunction hello_world_uninstall() {\n  $config = \\Drupal::configFactory()->getEditable('system.mail');\n  $mail_plugins = $config->get('interface');\n  if (!in_array('hello_world', array_keys($mail_plugins))) {\n    return;\n  }\n\n  unset($mail_plugins['hello_world']);\n  $config->set('interface', $mail_plugins)->save();\n}\n```", "```php\n/**\n * Implements hook_mail().\n */\nfunction hello_world_mail($key, &$message, $params) {\n  switch ($key) {\n    case 'hello_world_log':\n      $message['from'] = \\Drupal::config('system.site')->get('mail');\n      $message['subject'] = t('There is an error on your website');\n      $message['body'][] = $params['message'];\n      $user_message = 'The user that was logged in: [current-user:name].';\n      $message['body'][] = \\Drupal::token()->replace($user_message, ['current-user' => \\Drupal::currentUser()]);\n\n      break;\n  }\n}\n```", "```php\n/**\n * Implements hook_token_info().\n */\nfunction hello_world_token_info() {\n  $type = [\n    'name' => t('Hello World'),\n    'description' => t('Tokens related to the Hello World module.'),\n  ];\n\n  $tokens['salutation'] = [\n    'name' => t('Salutation'),\n    'description' => t('The Hello World salutation value.'),\n  ];\n\n  return [\n    'types' => ['hello_world' => $type],\n    'tokens' => ['hello_world' => $tokens],\n  ];\n}\n```", "```php\n/**\n * Implements hook_tokens().\n */\nfunction hello_world_tokens($type, $tokens, array $data, array $options, \\Drupal\\Core\\Render\\BubbleableMetadata $bubbleable_metadata) {\n  $replacements = [];\n  if ($type == 'hello_world') {\n    foreach ($tokens as $name => $original) {\n      switch ($name) {\n        case 'salutation':\n          $replacements[$original] = \\Drupal::service('hello_world.salutation')->getSalutation();\n          $config = \\Drupal::config('hello_world.custom_salutation');\n          $bubbleable_metadata->addCacheableDependency($config);\n          break;\n\n      }\n    }\n  }\n\n  return $replacements;\n}\n```", "```php\n$final_string = \\Drupal::token()->replace('The salutation text is: [hello_world:salutation]'); \n```"]