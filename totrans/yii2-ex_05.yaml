- en: Chapter 5. Developing a Reservation System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to configure and manage databases, using
    SQL or ActiveRecord directly, then you will see how to solve common tasks, such
    as saving single and multiple models from a form, and how to create data aggregation
    and filtered views.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring a DB connection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, creating rooms, customers, and reservations tables
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, testing a connection and executing a SQL query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Gii to create room, customer, and reservation models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using ActiveRecord to manipulate data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, querying rooms list with ActiveRecord
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Working with relationships:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, using relationships to connect rooms, reservations, and customers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to save a model from a form:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, creating and updating a room from a form
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the GMT time zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using multiple database connections:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, configuring a second DB connection to export data to a local SQLite
    DB
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a DB connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 offers a high-level layer to access databases, built on top of **PHP Data
    Objects** (**PDO**).
  prefs: []
  type: TYPE_NORMAL
- en: This framework allows us to manipulate a database table's content through the
    use of ActiveRecord objects. This encapsulates methods to access single or multiple
    records, as well as filtering, joining, and ordering data in an intuitive way.
  prefs: []
  type: TYPE_NORMAL
- en: Again, we can work with databases using plain SQL, but this means that we must
    handle dissimilarities in SQL languages passing through different databases (MySQL,
    SQL Server, Postgres, Oracle, and so on), which means losing Yii2 facilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'A database object connection is an instance of `yii\db\Connection`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have a connection to a MySQL Server with a `mysql` connection
    string to the database `my_databases`, setting `my_username` as `username` and
    `my_password` as `password`. Moreover, we set `charset` to `utf8` in order to
    guarantee standard charset use. This is a standard database connection entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other common available connection strings are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL and MariaDB: `mysql:host=localhost;dbname=mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SQLite: `sqlite:/path/to/database/file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PostgreSQL: `pgsql:host=localhost;port=5432;dbname=mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MS SQL Server (via `mssql` driver): `mssql:host=localhost;dbname=mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oracle: `oci:dbname=//localhost:1521/mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we do not provide a direct driver to database and we have to use ODBC, we
    will have a sample of the ODBC connection object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For convenience, we will set the database connection as an application component
    because it will be adopted in many points of the application. In `basic/config/web.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the basic template, database configuration is in a separate file, generally
    `basic/config/db.php`.
  prefs: []
  type: TYPE_NORMAL
- en: If we open `basic/config/web.php`, we can see that the `db.php` file fills the
    `db` property of the main configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Example – creating rooms, customers, and reservations tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we need a MySQL database instance to work with. Open the DB administration
    panel as phpMyAdmin (if provided) or access the DB directly using a console and
    create a new database named `my_database`, associated with the username `my_username`
    and the password `my_password`.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will create three database tables to manage rooms, customers,
    and reservations data.
  prefs: []
  type: TYPE_NORMAL
- en: 'A room will have the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`floor` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`room_number` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_conditioner` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_tv` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_phone` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`available_from` as the date'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price_per_day` as a decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description` as text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The script of the `room` table will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A customer will have the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` as a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`surname` as a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phone_number` as a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script of the `customer` table will be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A reservation will have the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`room_id` as an integer that is a reference to a room table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`customer_id` as an integer that is a reference to a customer table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price_per_day` as a decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_from` as the date to specify check in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_to` as the date to specify check out'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reservation_date` as a timestamp of creation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`days_stay` as an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The script of the `reservation` table will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, place `basic/config/web.php` in the `components` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then we are ready to test the connection to the DB.
  prefs: []
  type: TYPE_NORMAL
- en: Example – test connection and executing the SQL query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's see how to test the DB connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put some rooms data in the database table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Database queries are made using the `yii\db\Command` object, which is created
    statically by the `yii\db\Connection::createCommand()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important methods to retrieve data from a command are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`queryAll()`: This method returns all the rows of a query, where each array
    element is an array that represents a row of data; if the query returns no data,
    the response is an empty array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`queryOne()`: This method returns the first row of the query, that is, an array,
    which represents a row of data; if the query returns no data, the response is
    a false Boolean value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`queryScalar()`: This method returns the value of the first column in the first
    row of the query result; otherwise false will be returned if there is no value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`query()`: This is the most common response that returns the `yii\db\DataReader`
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we will display the `room` table's content in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will update `RoomsController` in `basic/controllers/RoomsController.php`.
    In this file, we will append an index action to fetch data and pass it to view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The content of `actionIndex()` is very simple. Define the `$sql` variable with
    the SQL statement to be executed, then fill the `$rooms` array with the query
    result, and finally render the `index` view, passing the rooms variable.
  prefs: []
  type: TYPE_NORMAL
- en: In the view content, in `basic/views/rooms/index.php`, we will display the `$rooms`
    array in a table to exploit Bootstrap CSS's advantages, and apply the `table`
    class to the table HTML tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of `basic/views/rooms/index.php`, where we can also see
    the data formatter used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `floor` and `room_number` fields are directly displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The next two fields `has_conditioner` and `has_tv` are shown by employing a
    Boolean formatter supplied by Yii2; the Boolean formatter will use the locale
    defined during the configuration of Yii2.
  prefs: []
  type: TYPE_NORMAL
- en: The next field `has_phone` renders its value as the previous two fields; the
    reason for this is to indicate how to produce the same output of a Boolean formatter
    in a standard PHP style.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the `available_from` field is rendered using the date formatter in two
    different ways, directly and passing the format to be used. Or, if no parameter
    is passed, it adopts the default format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, the `price_per_day` field is rendered through the currency formatter,
    passing the currency as a parameter. If no parameter is passed, the default value
    will be used. The last field `description` is displayed directly. Point your browser
    to `http://hostname/basic/web/rooms/index` to see the content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – test connection and executing the SQL query](img/B04656_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A list of rooms
  prefs: []
  type: TYPE_NORMAL
- en: Using Gii to create room, customer, and reservation models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Yii2 provides a powerful tool to generate models, controllers, and CRUD (create,
    read, update, and delete) actions, forms, modules, and extensions: Gii.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the `basic/config/web.php` file, placed in the basic standard
    configuration, there is a block of code that enables Gii:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that these lines are present, otherwise append them at the bottom of
    the `web.php` file before the `return $config` statement. The last check is in
    `basic/web/index.php`. Verify that `YII_ENV` is `dev`, with this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can point our browser to `http://hostname/basic/web/gii`, and we should
    see this error page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii to create room, customer, and reservation models](img/B04656_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Forbidden access to Gii
  prefs: []
  type: TYPE_NORMAL
- en: This page will be displayed since access to Gii is locked by a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add extra configuration to the `gii` module, passing other allowed
    IPs. Gii''s configuration has an attribute named `allowedIPs`, which consents
    to specify which IP addresses can access the Gii page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this extract, Gii will accept access from a localhost (in the IPv4 form with
    127.0.0.1 and IPv6 form with `::1`) and from `192.168.178.20`, which should be
    our IP address in private network.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the Yii2 application is running on an external hosting, we will set our
    IP public address in this list of allowed IPs. For example, if our IP is `66.249.64.76`,
    this entry will be appended to existent (if we want maintain other permitted access
    points):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To allow access from everywhere (useful in the development stage), we can add
    `*` in this list, which means that the Gii page can be accessed from every IP
    address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Consequently, the content of `gii][''gii''] = ''yii\gii\Module''` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are able to access to Gii from any IP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the browser by clicking on the page `http://hostname/basic/web/gii`
    and we can finally see its content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii to create room, customer, and reservation models](img/B04656_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Successful access to Gii
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the **Start** button of **Model Generator**; we will have a form
    of **Model Generator** where **Table Name** is the unique field to fill in. When
    we start to type the table name, auto-suggestion will display the possible choices.
    After doing this, when we move to the **Model Class** field, this will be automatically
    filled in by a framework. The other fields can be left with the default settings.
  prefs: []
  type: TYPE_NORMAL
- en: Type `room` in **Table Name** and then click on the **Model Class** field. This
    field will be filled with **Room**, which is the filename in the `models` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **Preview** button will display the path where the file will
    be created and the action will be applied (it should be the overwrite value because
    we created it in the previous chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click on the **Generate** button to complete this action. A response
    message will give us information about the execution of this operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the form with a successful result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii to create room, customer, and reservation models](img/B04656_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Model Generator of Gii
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat this operation for the other two tables: reservations and customers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have three models in the `basic/models` folder: `Room.php`, `Reservation.php`,
    and `Customer.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explain what Gii has done. Open the `basic/models/Room.php` file, and
    we have three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tableName()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rules()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attributeLabels()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first method, `tableName()`, simply returns the name of table to which
    this model is linked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The second method, `rules()`, is important because it contains rules validation
    to be checked when the `validate()` method is launched (it is launched automatically
    in the `save()` method) or a massive attributes assignment as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the content of the `rules()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The first rule specifies that the fields `floor`, `room_number`, `has_condition`,
    `has_tv`, and `avaiable_from` are mandatory because they are passed to the required
    validator. Moreover, they must be an integer, as required by the second rule.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fields that are not in rules, will be skipped in a massive assignment because
    they are considered unsafe (since they are not present in rules). So it is necessary
    that when a field that has not got a validator rule, it must have an entry in
    the 'safe' validator.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth rule specifies that the `price_per_day` field is a number, while
    the last rule states that `description` is a string.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These rules are read automatically from the database field type and constraint.
  prefs: []
  type: TYPE_NORMAL
- en: The last method `attributeLabels()` specifies the representation of fields in
    the display view as a form, grid, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of `attributeLabels()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Yii2 reports—in the model—any relationship between the tables present in a database.
    We have the `Reservation` model that has links to `Room` and `Customer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to make the framework able to create a relationship
    in the model:'
  prefs: []
  type: TYPE_NORMAL
- en: Check that the database tables use the InnoDB engine (which supports relationships
    and foreign keys).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Reservation` table, add two indexes, respectively for the `room_id`
    and `customer_id` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Reservation` table, add two constraints to the `room` and `customer`
    tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In these constraints, we used `RESTRICT` for `DELETE` and `UPDATE` operations.
    `RESTRICT` avoids the deletion of reservations that refer to customers or rooms
    that we are trying to delete. Therefore, to delete a customer or room that figures
    in reservations, we will be required to first delete the reservations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This behavior ensures that important data such as reservations is never deleted
    automatically (in a cascade) when deleting a room or a customer. An error message
    will be displayed when you try to do this to a reservation linked to the customer
    or room.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In other contexts, a commonly used keyword is `CASCADE`, which removes all data
    that refers to linked tables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open Gii again and navigate to `http://hostname/basic/web/gii`, then click on
    the **Start** button in **Model Generator** and type `room` in **Table Name**.
    Click on the **Preview** button at the bottom of the page and this time you will
    see that `models/Room.php` exists and the action is overwrite, unflagged.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the check near 'overwrite' and then on the **Generate** button. In
    this way, we have forced to overwrite the `Room` model with the relational data
    from the `Room` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, `basic/models/Room.php` contains a new method named `getReservations`
    at the bottom, with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This method returns an ActiveQuery instance, which is used to build a query
    to be dispatched to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When called as a property, this method will return the list of reservations
    linked to the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might encounter the case where `$model` is an instance of the `Room` class
    for example: `$reservationsList = $model->reservations;`'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, fill the `$reservationsList` variables with a list of reservations
    related to this `Room` model.
  prefs: []
  type: TYPE_NORMAL
- en: This is not surprising, although the `hasMany` method returns an `ActiveQuery`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we explore the `__get()` method of `BaseActiveRecord` (which is the base
    class of ActiveRecord) that handles the property requirements, we can see these
    lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This returns linked results when the `$value` content is an instance of `ActiveQueryInterface`
    (which is an interface implemented by the `ActiveQuery` class).
  prefs: []
  type: TYPE_NORMAL
- en: Using ActiveRecord to manipulate data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ActiveRecord offers a convenient way to access and manipulate data stored in
    a database. This class is linked to a database table and represents a row of the
    linked table. Its attributes are the fields of the table and its methods allow
    us to perform common actions on database, such as selecting, inserting, or updating
    SQL statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many common databases are supported by ActiveRecord, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, some NoSQL databases are supported, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ActiveRecord reads the table structure every time it is instanced and makes
    available table columns as its properties. Every change to the table structure
    is immediately available in the ActiveRecord object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, if a table contains the fields `id`, `floor`, and `room_number`,
    and if `$model` is an instance of `yii\db\ActiveRecord`, in order to access these
    fields, it will be enough to type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: ActiveRecord handles properties request with the `__get` magic method and catches
    the respective content of a table column. In the previous paragraph, you saw how
    to create a model class from database tables to extend `yii\db\ActiveRecord` with
    Gii. The syntax used by ActiveRecord is simple and redundant, so it is easy to
    remember. Now let's look at how to query data from a database with ActiveRecord.
  prefs: []
  type: TYPE_NORMAL
- en: Data is fetched from a database through an `\yii\db\ActiveQuery` object to build
    the query, and finally calls on `one()` or `all()` methods to get an ActiveRecord
    object or a list of ActiveRecord objects.
  prefs: []
  type: TYPE_NORMAL
- en: An ActiveQuery object is returned from an ActiveRecord object by calling its
    static method `::find()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `Room` is a model (and subclasses ActiveRecord), an ActiveQuery will be
    returned from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: ActiveQuery objects provide methods to build the query with names such as in
    SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`where()` to add conditions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orderBy()` to apply an order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupBy()` to make aggregations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Almost all of these methods support a parameter that can be a string or an
    array. If it is a string, it will be passed exactly as it is to the SQL query;
    if it is an array, a key will be used as the column name, and a value as the corresponding
    value. For example, we want to build query to find a room on the first floor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For complex conditions, `where()` supports the operator format where the condition
    is an array with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, we want to build a query to find a room on the first floor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Other conditions can be added using `andWhere()` or `orWhere()`, by just using
    the `and` or `or` logical link.
  prefs: []
  type: TYPE_NORMAL
- en: An array parameter of the `where()` method is preferable to a string, because
    we can easily split the field name from its content and set the second parameter
    of the `where()` method with an array with pair keys `=>` values of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating a query object, to get data from an ActiveQuery, we will have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`one()`: This method returns an ActiveRecord object or null if not found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all()`: This method returns a list of ActiveRecord objects or an empty array
    if not found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, to get rooms on the first floor, we must write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is a more concise syntax to fetch data from an ActiveRecord: the `findOne()`
    and `findAll()` methods, which return a single ActiveRecord or a list of ActiveRecords.
    The only difference from the previous methods is that they accept a single parameter,
    which can be:'
  prefs: []
  type: TYPE_NORMAL
- en: A number to filter by primary key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array of scalar values to filter by a list of primary key values (only for
    `findAll()` because `findOne()` returns a single ActiveRecord)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array of name-value pair to filter by a set of attribute values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other common methods of ActiveRecord are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`validate()`: This method is used to apply rules validation to attributes of
    a model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save()`: This method is used to save a new model or to update one that already
    exists (if the `save()` method is applied to a fetched ActiveRecord object)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete()`: This method is used to delete a model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – query rooms list with ActiveRecord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will query the rooms list using ActiveRecord and filter
    through the following fields: `floor`, `room_number`, and `price_per_day` with
    operators ( `>=`, `<=`, and `=`).'
  prefs: []
  type: TYPE_NORMAL
- en: A data filter will take place using the `SearchFilter` container to encapsulate
    all of the filter data inside a single array.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from a view, create a new file with the path `basic/views/rooms/indexFiltered.php`.
  prefs: []
  type: TYPE_NORMAL
- en: In this view, we will put the search filter on the top and then a table to display
    the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have three fields to filter: `floor`, `room_number`, and `price_per_day`,
    all with an operator. The data filter will be passed to the controller and the
    filter selected will be kept after executing `actionIndexFiltered` in the controller.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of the view concerning the filtered form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Pay attention:**'
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the view, there is a keyword `use`, which explains the complete
    path of the `Url` class. If we remove it, the framework will search the `Url`
    class requested in the `<form>` tag in the current namespace, that is `app/controllers`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After declaring the `<form>` tag, we inserted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This is mandatory to allow the framework to verify the sender of the post data.
  prefs: []
  type: TYPE_NORMAL
- en: The `$searchFilter` variable is used as `$sf` to provide a more concise form.
  prefs: []
  type: TYPE_NORMAL
- en: Now update `RoomsController` in `basic/controllers/RoomsController.php` and
    add a new action named `actionIndexFiltered`. Create an ActiveQuery object from
    `Room` and check whether there is content in the `SearchFilter` keyword of the
    `$_POST` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'For every present filter, a condition will be added to `$query` using the `andWhere`
    method, passing an operator, field name, and value. For a more concise form of
    the actioned content, we put a filtered field in the loop, because they have the
    same redundant structure (operator and value):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to display the results in a table format. So at the bottom
    of the view, add a table to display the content of the filtered rooms (copied
    from `basic/views/rooms/index.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now point the browser to `http://hostname/basic/web/rooms/index-filtered` and
    this should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – query rooms list with ActiveRecord](img/B04656_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A list of rooms with filters
  prefs: []
  type: TYPE_NORMAL
- en: We can create tests by changing the filter values and operators as much as we
    want.
  prefs: []
  type: TYPE_NORMAL
- en: Working with relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ActiveRecord provides us with skills to work with relationships between database
    tables. Yii2 employs two methods to establish the relationship between the current
    and other ActiveRecord classes: `hasOne` and `hasMany`, which return an ActiveQuery
    based on the multiplicity of the relationship.'
  prefs: []
  type: TYPE_NORMAL
- en: The first method `hasOne()` returns at most one related record that matches
    the criteria set by this relationship, and `hasMany()` returns multiple related
    records that match the criteria set by this relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both methods require that the first parameter is the class name of the related
    ActiveRecord and that the second parameter is the pair of primary keys that are
    involved in the relationship: the first key is relative to a foreign ActiveRecord
    and the second key is related to the current ActiveRecord.'
  prefs: []
  type: TYPE_NORMAL
- en: Usually, `hasOne()` and `hasMany()` are accessed from properties that identify
    which object (or objects) will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method in this example is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'By calling `$room->reservations`, framework will execute this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The use of the `hasOne()` method is similar, and as an example will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling `$reservation->room`, framework will execute this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Remember that when we call a property that contains the `hasOne()` or `hasMany()`
    methods, a SQL query will be executed and its response will be cached. So, the
    next time that we call the property, a SQL query will not be executed and the
    last cached response will be released.
  prefs: []
  type: TYPE_NORMAL
- en: This approach to get related data is called **lazy loading**, which means that
    data is loaded only when it is effectively requested.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's write an example to display the last reservation details about a room.
    Create a reservations model class using Gii if you have not done so before.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need some data to work with. Insert this record in the `customer`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `reservation` table, insert these records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the room model in `basic/models/Room.php` and append this property declaration
    at the bottom of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: As said before, `hasOne()` and `hasMany()` return an ActiveQuery instance. We
    can append any methods to complete the relationship as we have done before by
    appending the `orderBy()` method to get the first record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new action named `actionLastReservationByRoomId($room_id)` in the
    `Rooms` controller, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Point your browser to `http://hostname/basic/web/rooms/last-reservation-by-room-id?room_id=2`
    to visualize this frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with relationships](img/B04656_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A visualization of the last reservation of a room with id = 2
  prefs: []
  type: TYPE_NORMAL
- en: Only the last reservation inserted in the database will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: What about displaying all the last reservations for each room in a single table?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the lazy loading approach will have performance issues because for every
    room, it will execute a single SQL query to get data for the last reservation.
    This is a code snippet in the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In order to complete the script's execution, it will execute as many related
    SQL queries as the number of rooms, and when the number of rooms grows, this solution
    will not be efficient anymore.
  prefs: []
  type: TYPE_NORMAL
- en: The Yii2 framework provides another type of loading data, named eager loading,
    to solve this kind of problem.
  prefs: []
  type: TYPE_NORMAL
- en: Eager loading is applied using the `with()` method of ActiveQuery. This method's
    parameters can be either one or multiple strings, or a single array of relation
    names and the optional callbacks to customize the relationships.
  prefs: []
  type: TYPE_NORMAL
- en: When we get a rooms list, if we apply the `with()` method to the query, a second
    SQL query will automatically be executed and this will return the list of the
    last reservations for each room.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this example, we will get a rooms list and a list of the `lastReservation`
    relation for each room entry. In this way, when we refer to `$room->lastReservation`,
    no other SQL query will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s write a complete example to get a full list of the last reservations
    for each room. In `basic/controllers/RoomsController.php`, append a new action
    named `actionLastReservationForEveryRoom()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This action will pass a list of rooms named `lastReservationForEveryRoom` to
    the view, together with the `lastReservation` relation loaded using the eager
    loading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a view named `lastReservationForEveryRoom.php` in `basic/views/rooms/lastReservationForEveryRoom.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In this view, the last reservation data will be displayed for each room. Since
    the first room has no reservations, an empty row will be displayed. This is the
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with relationships](img/B04656_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Last reservation for every room
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two variants to the `with()` method: `joinWith()` and `innerJoinWith()`,
    which apply a left join or an inner join to a primary query.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, this is the use of `joinWith()` with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the inner join selects all rows from both tables as long as there
    is a match between the columns in both tables; instead, the left join returns
    all rows from the left table (room), with the matching rows in the right table
    (reservation). The result is NULL in the right side when there is no match.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes it happens that we need more than one level of relationship between
    tables. For example, we could find a customer related to a room. In this case,
    starting from the room, we pass through the reservation and go from the reservation
    to the customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The relationship here will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to find out the customer object from the room object, just type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Generally, we have more levels of relationship, but in this case only two (reservation
    and customer).
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii2 allows us to specify a junction table using the `via()` or `viaTable()`
    method. The first one, `via()`, is based on an existing relationship in the model,
    and it supports two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Relation name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PHP callback parameter to customize the associated relation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second method, `viaTable()`, is based on direct access to a physical table
    in the database and supports three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is a relation or table name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the link associated with the primary model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter is a PHP callback to customize the associated relation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – using a relationship to connect rooms, reservations, and customers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will look at how to build a single view that displays the
    rooms, reservations, and customers lists at the same time; when a user clicks
    on the **Detail** button of rooms record, the reservations list will be filtered
    with data linked to that room. In the same way, when a user clicks on the **Detail**
    button of a reservations record, the customers list will be filtered with data
    linked to that reservation.
  prefs: []
  type: TYPE_NORMAL
- en: If no parameter is passed (a condition that occurs when a page is called for
    the first time), either the rooms, reservations, or customers list contains a
    full record of data from the respective tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start writing `actionIndexWithRelationships` in `basic/controllers/RoomsController.php`.
    This is the task list for this action:'
  prefs: []
  type: TYPE_NORMAL
- en: Check which parameter of detail has been passed (`room_id` identifies that the
    reservations list has to be filled in with the data filtered using `room_id`,
    while `reservation_id` identifies that the customers list has to be filled with
    the data filtered using `reservation_id`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fill in three models: `roomSelected`, `reservationSelected`, and `customerSelected`
    to display the details and fill in three arrays of models: `rooms`, `reservations`,
    and `customers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the complete content of `actionIndexWithRelationships`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Remember to add the `use` keyword for `Customer` and `Reservation` classes
    at the top of the `RoomsController` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The second part of the action body requires more attention, because there are
    filled in selected models and list models in this specific position.
  prefs: []
  type: TYPE_NORMAL
- en: Only one parameter at a time can be selected between `$room_id`, `$reservation_id`,
    and `$customer_id`. When one of these three parameters is selected, three arrays
    of the `Room`, `Reservation`, and `Customer` model will be filled in, using the
    relationships in the model. For this purpose, models must have all the relationships
    employed in the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: Let's make sure that all the relationships exist in the models.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Room` model in `basic/models/Room.php` must have both `getReservations()`
    and `getCustomers()` defined, which both use the `via()` method to handle the
    second level of relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Reservation` model in `basic/models/Reservation.php` must have `getCustomer()`
    and `getRoom()`, both returning a single related model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `Customer` model in `basic/models/Customer.php` must have `getReservations()`
    and `getRooms()`, which use the `via()` method to handle the second level of relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Now write a view file in `basic/view/rooms/indexWithRelationships.php`. We will
    split the HTML page into three parts (three tables), using the CSS provided by
    Bootstrap (which we will examine widely in the next few chapters).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first table will be for the rooms list, the second table for the reservations
    list, and the last one for the customers list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the code by pointing your browser to `http://hostname/basic/rooms/index-with-relationships`.
    This should be the result of trying to filter a room on the second floor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – using a relationship to connect rooms, reservations, and customers](img/B04656_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rooms with relationships between reservations and customers
  prefs: []
  type: TYPE_NORMAL
- en: How to save a model from a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now look at how to save a model from a form, which could be a new or an
    updated model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps you need to follow are:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `action` method, create a new model or get an existing model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `action` method, check whether there is data in the `$_POST` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is data in `$_POST`, fill in the `attributes` property of the model
    with data from `$_POST` and call the `save()` method of the model; if `save()`
    returns true, redirect the user to another page (the details page, for example).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From now on, we will continue to use widgets and helper classes provided by
    the framework. In this case, the HTML form will be rendered using the `yii\widget\ActiveForm`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most simple form we can write is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This code generates a form HTML tag with `login-form` as the `id` attribute
    and empty content; the `method` and `action` attributes are respectively, by default,
    the post and same action URL that generated the form. Other properties about AJAX
    validation and client validation can be set, as you will see further on.
  prefs: []
  type: TYPE_NORMAL
- en: The widget `$form` is created by employing a static method `ActiveForm::begin`,
    passing as an array that contains attributes of a form HTML tag (`id`, `action`,
    `method`, and so on) a configuration parameter and a key named `options` to specify
    all the extra options that we want to pass to form the HTML tag. Finally, the
    form will be completed when we call the static method `ActiveForm::end()`. Between
    the `begin()` and `end()` methods of the form, we can insert all the content needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, the input fields of the form can be managed using the ActiveField
    widget. The ActiveField widget related to an attribute of model is created by
    calling the `field()` method of the `$form` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The object returned from the `field()` method is a generic field that we can
    specialize by simply applying other methods to generate all the common kinds of
    input fields: hidden, text, password, file, and so on. This returns the same ActiveField
    `$field` object, and consequently other methods can be applied in a cascade.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A text field input is created with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Or can be created simply like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'This variable `$textInputField` is again an ActiveField (the same object of
    `$field`), so we can apply all the other methods required to complete our input
    field; for example, if we need to place a hint in input field, we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can simply use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Additional framework in addition automatically takes into account the attribute's
    validation rules, which are defined in the `rules()` method of the model class.
    For example, if an attribute is required and we click on it and pass it to another
    field without typing anything, an error alert will be displayed reminding us that
    the field is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an input field is created using the ActiveField widget, the `id` and `name`
    properties of this input will have this format: `model-class-name_attribute-name`
    for `id` and `model-class-name[attribute-name]` for `name`. This means that all
    the attributes of the model will be passed to the controller action when we submit
    the form grouped in a container array named the same as the model class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the `$model` class is `Room` and the attribute is `floor` whose
    content is `12`, create a text field from the `$form` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs the following HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Example – creating and updating a room from a form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just from following the instructions in the previous paragraph, we will try
    to create and update a room from the HTML form.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now update the previously created `actionCreate()` method in `RoomsController`
    with some code to instantiate a new model object, check the content of the `$_POST`
    array, and if it is set, we call `save()` on the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the view in `basic/views/rooms/create.php`, pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: By default, `ActiveForm::begin()` creates a form that has client validation
    enabled; therefore, the form will be submitted only when all the validation rules
    are satisfied as the `submit` button is rendered using `yii\helpers\Html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pay attention to the top of view that contains the `use` keyword to define
    the complete path of the classes `Html` and `ActiveForm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Point your browser to `http://hostname/basic/rooms/create` to display the form
    to create a new room. The following screenshot shows what you should display,
    reporting in it some particular conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – creating and updating a room from a form](img/B04656_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The form to create a new room
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot presents different states of fields: the floor input has a
    red border because it has the wrong type of content (it must be an integer!),
    the room number has a green border to indicate that is correct, and the **Available
    From** field has a red border because it is required but the user left it blank.
    The framework provides a more concise form to fill in attributes if `$_POST` data
    is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'This fills in the attributes of the model if the `$_POST[model-class]` content
    is available, and with this suggestion we can change the `actionCreate` content
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This is extraordinarily concise! Similarly, we can handle the update action
    to save changes to an existing model.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make a reusable form by putting its content in an external. Create a
    new file in `basic/views/rooms/_form.php` (the first underscore indicates that
    this is a view that is includable in other views) and cut and paste the code about
    form generation from the `create` view to this new `_form` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `basic/views/rooms/create.php` file, instead of the form code, just
    put the code to render the `_form` view in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we modify the `create` view, remember to pass `$model` as the second parameter
    to render the `_form` view.
  prefs: []
  type: TYPE_NORMAL
- en: We are ready to build the update flow in order to update the room content from
    a form. Firstly, create an action in `basic/controllers/RoomsController.php` named
    `actionUpdate`, passing `$id` as a parameter that identifies the primary key to
    find the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this action, we will put some code to get the model based on the `id` primary
    key, check whether the `$_POST` array contains data, and then save the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'This is basically equivalent to the code for the `create` action. Now, create
    the `update` view in `basic/views/rooms/update.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'From the database, check for one existing room and type the `id` value of this
    URL in your browser: `http://hostname/basic/rooms/update?id=id-found`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if `id` of an existing room is `1`, type this URL in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://hostname/basic/rooms/update?id=1`'
  prefs: []
  type: TYPE_NORMAL
- en: This will show a form with the filled in field based on the model attributes'
    content.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example is complete, having built the `detail` view, which shows the content
    of model attributes. Create an action named `actionDetail`, passing `$id` as a
    parameter, which identifies the primary key to find the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create the `detail` view to display some of the model attributes'' values
    in `basic/views/rooms/detail.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Now after successfully creating or updating model, the detail view will be displayed
    with the content of some attributes of the model.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the GMT time zone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to set the default time zone for date/time management.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, when we refer to date/time, do not pay attention to which time zone
    value is being referred to.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we live in Rome and want to spend our next holiday in New York,
    when we receive the check-in date/time from the hotel, we must consider which
    time zone time is being referred to (whether local or remote).
  prefs: []
  type: TYPE_NORMAL
- en: When we display a date/time value that could be misunderstood, it is always
    recommended to add a time zone reference to it. The time zone is expressed through
    positive or negative hours compared to a reference that is usually **GMT** (**Greenwich
    Mean Time**).
  prefs: []
  type: TYPE_NORMAL
- en: For example, if it is 9 p.m. in Rome (GMT +1), in GMT time it will be 8 p.m.
    (GMT +0), 3 p.m. in New York (GMT -5), and finally 12 p.m. in Los Angeles (GMT
    -8).
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is necessary to establish a common shared time value. For this
    purpose, it is advisable to use GMT as the time reference for all values and operations
    on values.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to configure the time zone in two environments:'
  prefs: []
  type: TYPE_NORMAL
- en: In an application, set the `timeZone` attribute of a configuration; this will
    set the default time zone for all functions about the date and time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some databases, such as MySQL, do not have internal management of time zones,
    so every value uses the default time zone of the database or the time zone configured
    during connection from the application to the database; we will set the default
    time zone during the connection to the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Complete the first step. Open `basic/config/web.php` and add the `timeZone`
    property with the `GMT` value in the `config` array, for example, after the `basePath`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The second step is setting the time zone for the database connections, if the
    database, such as MySQL, does not provide it. This is done globally by adding
    this code in the `on afterOpen` event. Open `basic/config/db.php` and append it
    as the last attribute in an array (usually the last attribute is `charset`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: This code means that once the connection with the database is opened, the SQL
    query `SET time_zone = +00:00` will be executed for every connection that we are
    going to establish with the database, and every date/time field value and function
    related to the GMT (+00:00) time zone will be considered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a test. Create a new controller that simply displays the current
    date/time and time zone, in `basic/controllers/TestTimezoneController.php` with
    an action named `actionCheck()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Point your browser to `http://hostname/basic/web/test-timezone/check`. This
    is what my browser displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: And, the local time (in Rome) was 21:53:35, because Rome was then at +02:00
    GMT due to daylight savings time.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we comment the `timeZone` property in the app configuration in `basic/config/web.php`,
    we will see the default server time zone that is in my browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'This confirms that we have changed the default `timezone` property for all
    date/time functions. The last check to perform is on the database. Create a new
    action named `actionCheckDatabase` to verify that the database''s default time
    zone for the current (and every) connection is GMT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Point your browser to `http://hostname/basic/web/test-timezone/check-database`.
    This is what my browser displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: And the local time (in Rome) was 22:12:08, because Rome was then at +02:00 GMT.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that, from now on, all date/time information displayed in a database
    refers to the GMT time zone, although this specification was missing (as we can
    see in the previous database's current date/time).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another strategy to handle the GMT time zone in a database's date/time column
    is to store the value as a timestamp, which is by definition an integer that indicates
    the number of seconds from 01/01/1970 at 00:00:00 in the GMT (UTC) time zone;
    so it is immediately understandable that field is a date/time with the GMT time
    zone, but remember that any database function applied to it will be executed using
    the database's default time zone.
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple database connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications can require multiple database connections so that they can send
    and get data from different sources.
  prefs: []
  type: TYPE_NORMAL
- en: Using other database sources is incredibly simple. The only thing to do is to
    add a new database entry in the main configuration and use ActiveRecord support.
    All the operations on records will be transparent for the developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of connection strings (dsn) to configure access to other
    databases:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL and MariaDB: `mysql:host=localhost;dbname=mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SQLite: `sqlite:/path/to/database/file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PostgreSQL: `pgsql:host=localhost;port=5432;dbname=mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CUBRID: `cubrid:dbname=demodb;host=localhost;port=33000`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MS SQL Server (via the `sqlsrv` driver): `sqlsrv:Server=localhost;Database=mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MS SQL Server (via the `dblib` driver): `dblib:host=localhost;dbname=mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MS SQL Server (via the `mssql` driver): `mssql:host=localhost;dbname=mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oracle: `oci:dbname=//localhost:1521/mydatabase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – configuring a second DB connection to export data to a local SQLite
    DB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now want to add a new database connection to a SQLite DB. When we use a database,
    we have to make sure that the PDO driver is installed in the system, otherwise
    PHP cannot handle it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `basic/config/web.php` and the inner `components` attribute, and append
    a new attribute named `dbSqlite` with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: This entry will use a DB SQLite named `db.sqlite`, which we can find in the
    `dirname(__DIR__).'/../web/db.sqlite'` path, under the `/basic/web` folder. If
    this file does not exist, it will be created (if a write permission is present
    in the `/basic/web` folder).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure that the `/basic/web` folder is writable, otherwise it will be impossible
    for the framework to create a `db.sqlite` file.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new controller to handle actions in this new database. This will be
    put in `/basic/controllers/TestSqliteController.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the first action named `actionCreateRoomTable` in this new controller,
    which will create the same structure of the `Room` table from MySQL in `dbSqlite`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Pay attention so that in `actionCreateRoomTable`, the database instance is
    taken from: `\Yii::$app->dbSqlite`.'
  prefs: []
  type: TYPE_NORMAL
- en: Point your browser to `http://hostname/basic/web/test-sqlite/create-room-table`
    and create a `db.sqlite` file in `basic/web` and a `room` table in it.
  prefs: []
  type: TYPE_NORMAL
- en: As we have mentioned before, if the PDO driver is correctly installed, a blank
    page with the **Room table created in dbSqlite** text will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to clone the room table from MySQL to SQLite to make a backup of
    this table. We need to save the records from MySQL to SQLite and verify the data
    stored to display it in a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new action named `actionBackupRoomTable()` that executes these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `room` table (if it does not exist).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete all the records from the room in `dbSqlite` (alias truncate).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load all the records from the room table in MySQL (using ActiveRecord).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert every single record from MySQL into SQLite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Render the view to display data from SQLite with the table (to verify that the
    copy succeeded).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The content of the `actionBackupRoomTable()` action is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a view `backupRoomTable` in `basic/views/test-sqlite/backupRoomTable.php`
    with the following content to display data from `dbSqlite`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate your browser to `http://hostname/basic/web/test-sqlite/backup-room-table`,
    which should display a similar output to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – configuring a second DB connection to export data to a local SQLite
    DB](img/B04656_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The list of rooms from the SQLite database
  prefs: []
  type: TYPE_NORMAL
- en: We can now download the `db.sqlite` file from `http://hostname/basic/web/db.sqlite`
    to preserve a backup copy of the room table!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you mastered how to configure a database connection and execute
    SQL queries from scratch with DAO support of the framework. Next, you found out
    how to use Gii and got to know about the advantages it has in creating models
    from the database table structure. Gii creates models that extend the ActiveRecord
    class and through its use, you finally learned to manipulate data. All the examples
    are accompanied with a visualization grid that shows data, which is graphically
    enhanced by Bootstrap's presence in Yii2.
  prefs: []
  type: TYPE_NORMAL
- en: We carefully analyzed the common topic of tables' relationships, which must
    be managed in models and then displayed in views.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the chapter, after you learned to manipulate data with ActiveRecord,
    you wrote a complete flow to save data from a HTML form to a database. Finally,
    you learned the importance of setting the GMT time zone in date/time fields and
    using other database sources in the same application in order to make a backup
    of the primary database.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn to use and customize the grid widget to
    improve data visualization.
  prefs: []
  type: TYPE_NORMAL
