- en: Chapter 5. Developing a Reservation System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 开发预订系统
- en: In this chapter, you will learn how to configure and manage databases, using
    SQL or ActiveRecord directly, then you will see how to solve common tasks, such
    as saving single and multiple models from a form, and how to create data aggregation
    and filtered views.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何配置和管理数据库，直接使用SQL或ActiveRecord，然后你将看到如何解决常见任务，例如从表单保存单个和多个模型，以及如何创建数据聚合和过滤视图。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: 'Configuring a DB connection:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置数据库连接：
- en: For example, creating rooms, customers, and reservations tables
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，创建房间、客户和预订表
- en: For example, testing a connection and executing a SQL query
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，测试连接并执行SQL查询
- en: Using Gii to create room, customer, and reservation models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gii创建房间、客户和预订模型
- en: 'Using ActiveRecord to manipulate data:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ActiveRecord操作数据：
- en: For example, querying rooms list with ActiveRecord
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，使用ActiveRecord查询房间列表
- en: 'Working with relationships:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理关系：
- en: For example, using relationships to connect rooms, reservations, and customers
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，使用关系连接房间、预订和客户
- en: 'How to save a model from a form:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从表单中保存模型：
- en: For example, creating and updating a room from a form
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，从表单创建和更新房间
- en: Setting up the GMT time zone
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置GMT时区
- en: 'Using multiple database connections:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个数据库连接：
- en: For example, configuring a second DB connection to export data to a local SQLite
    DB
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，配置第二个数据库连接以将数据导出到本地SQLite数据库
- en: Configuring a DB connection
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置数据库连接
- en: Yii2 offers a high-level layer to access databases, built on top of **PHP Data
    Objects** (**PDO**).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2提供了一个高级层来访问数据库，它建立在**PHP数据对象**（**PDO**）之上。
- en: This framework allows us to manipulate a database table's content through the
    use of ActiveRecord objects. This encapsulates methods to access single or multiple
    records, as well as filtering, joining, and ordering data in an intuitive way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此框架允许我们通过使用ActiveRecord对象来操作数据库表的内容。这封装了访问单个或多个记录的方法，以及以直观的方式过滤、连接和排序数据。
- en: Again, we can work with databases using plain SQL, but this means that we must
    handle dissimilarities in SQL languages passing through different databases (MySQL,
    SQL Server, Postgres, Oracle, and so on), which means losing Yii2 facilities.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们可以使用纯SQL与数据库交互，但这意味着我们必须处理通过不同数据库（MySQL、SQL Server、Postgres、Oracle等）传递的SQL语言差异，这意味着会失去Yii2的功能。
- en: 'A database object connection is an instance of `yii\db\Connection`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库对象连接是`yii\db\Connection`的一个实例：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we have a connection to a MySQL Server with a `mysql` connection
    string to the database `my_databases`, setting `my_username` as `username` and
    `my_password` as `password`. Moreover, we set `charset` to `utf8` in order to
    guarantee standard charset use. This is a standard database connection entry.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们连接到一个MySQL服务器，使用`mysql`连接字符串连接到数据库`my_databases`，将`my_username`设置为`username`，将`my_password`设置为`password`。此外，我们将`charset`设置为`utf8`，以确保使用标准字符集。这是一个标准的数据库连接条目。
- en: 'Other common available connection strings are:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其他常见的可用连接字符串包括：
- en: 'MySQL and MariaDB: `mysql:host=localhost;dbname=mydatabase`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MySQL和MariaDB: `mysql:host=localhost;dbname=mydatabase`'
- en: 'SQLite: `sqlite:/path/to/database/file`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SQLite: `sqlite:/path/to/database/file`'
- en: 'PostgreSQL: `pgsql:host=localhost;port=5432;dbname=mydatabase`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PostgreSQL: `pgsql:host=localhost;port=5432;dbname=mydatabase`'
- en: 'MS SQL Server (via `mssql` driver): `mssql:host=localhost;dbname=mydatabase`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MS SQL Server（通过`mssql`驱动程序）：`mssql:host=localhost;dbname=mydatabase`
- en: 'Oracle: `oci:dbname=//localhost:1521/mydatabase`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Oracle: `oci:dbname=//localhost:1521/mydatabase`'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If we do not provide a direct driver to database and we have to use ODBC, we
    will have a sample of the ODBC connection object as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不提供直接到数据库的驱动程序，而必须使用ODBC，我们将提供一个ODBC连接对象的示例如下：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For convenience, we will set the database connection as an application component
    because it will be adopted in many points of the application. In `basic/config/web.php`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，我们将数据库连接设置为应用程序组件，因为它将在应用程序的许多地方被使用。在`basic/config/web.php`中：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the basic template, database configuration is in a separate file, generally
    `basic/config/db.php`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本模板中，数据库配置在一个单独的文件中，通常是`basic/config/db.php`。
- en: If we open `basic/config/web.php`, we can see that the `db.php` file fills the
    `db` property of the main configuration.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开`basic/config/web.php`，我们可以看到`db.php`文件填充了主配置的`db`属性。
- en: Example – creating rooms, customers, and reservations tables
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 创建房间、客户和预订表
- en: Now, we need a MySQL database instance to work with. Open the DB administration
    panel as phpMyAdmin (if provided) or access the DB directly using a console and
    create a new database named `my_database`, associated with the username `my_username`
    and the password `my_password`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个 MySQL 数据库实例来工作。打开 DB 管理面板（如果提供）或使用控制台直接访问 DB，创建一个名为 `my_database`
    的新数据库，关联用户名 `my_username` 和密码 `my_password`。
- en: In this example, we will create three database tables to manage rooms, customers,
    and reservations data.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建三个数据库表来管理房间、客户和预订数据。
- en: 'A room will have the following fields:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 房间将有以下字段：
- en: '`id` as an integer'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` 作为整数'
- en: '`floor` as an integer'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`floor` 作为整数'
- en: '`room_number` as an integer'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`room_number` 作为整数'
- en: '`has_conditioner` as an integer'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_conditioner` 作为整数'
- en: '`has_tv` as an integer'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_tv` 作为整数'
- en: '`has_phone` as an integer'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_phone` 作为整数'
- en: '`available_from` as the date'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`available_from` 作为日期'
- en: '`price_per_day` as a decimal'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price_per_day` 作为小数'
- en: '`description` as text'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description` 作为文本'
- en: 'The script of the `room` table will be:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`room` 表的脚本将是：'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A customer will have the following fields:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 客户将有以下字段：
- en: '`id` as an integer'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` 作为整数'
- en: '`name` as a string'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 作为字符串'
- en: '`surname` as a string'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`surname` 作为字符串'
- en: '`phone_number` as a string'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phone_number` 作为字符串'
- en: The script of the `customer` table will be
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`customer` 表的脚本将是'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A reservation will have the following fields:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 预订将有以下字段：
- en: '`id` as an integer'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` 作为整数'
- en: '`room_id` as an integer that is a reference to a room table'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`room_id` 作为整数，它是房间表的引用'
- en: '`customer_id` as an integer that is a reference to a customer table'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customer_id` 作为整数，它是客户表的引用'
- en: '`price_per_day` as a decimal'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price_per_day` 作为小数'
- en: '`date_from` as the date to specify check in'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date_from` 指定入住日期'
- en: '`date_to` as the date to specify check out'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date_to` 指定退房日期'
- en: '`reservation_date` as a timestamp of creation'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reservation_date` 作为创建的时间戳'
- en: '`days_stay` as an integer'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`days_stay` 作为整数'
- en: 'The script of the `reservation` table will be:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`reservation` 表的脚本将是：'
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, place `basic/config/web.php` in the `components` property:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将 `basic/config/web.php` 放在 `components` 属性中：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then we are ready to test the connection to the DB.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们就准备好测试到数据库的连接了。
- en: Example – test connection and executing the SQL query
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 测试连接和执行 SQL 查询
- en: Now let's see how to test the DB connection.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何测试数据库连接。
- en: 'Put some rooms data in the database table:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库表中放入一些房间数据：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Database queries are made using the `yii\db\Command` object, which is created
    statically by the `yii\db\Connection::createCommand()` method.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库查询使用 `yii\db\Command` 对象进行，该对象通过 `yii\db\Connection::createCommand()` 方法静态创建。
- en: 'The most important methods to retrieve data from a command are:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令中检索数据的最重要方法有：
- en: '`queryAll()`: This method returns all the rows of a query, where each array
    element is an array that represents a row of data; if the query returns no data,
    the response is an empty array'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryAll()`: 此方法返回查询的所有行，其中每个数组元素都是一个表示数据行的数组；如果查询没有返回数据，则响应为一个空数组'
- en: '`queryOne()`: This method returns the first row of the query, that is, an array,
    which represents a row of data; if the query returns no data, the response is
    a false Boolean value'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryOne()`: 此方法返回查询的第一行，即一个数组，表示数据行；如果查询没有返回数据，则响应为 false 布尔值'
- en: '`queryScalar()`: This method returns the value of the first column in the first
    row of the query result; otherwise false will be returned if there is no value'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryScalar()`: 此方法返回查询结果第一行的第一列的值；如果没有值，则返回 false'
- en: '`query()`: This is the most common response that returns the `yii\db\DataReader`
    object'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query()`: 这是返回 `yii\db\DataReader` 对象的最常见响应；如果没有值，则返回 false'
- en: Now we will display the `room` table's content in different ways.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将以不同的方式显示 `room` 表的内容。
- en: 'We will update `RoomsController` in `basic/controllers/RoomsController.php`.
    In this file, we will append an index action to fetch data and pass it to view:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `basic/controllers/RoomsController.php` 中更新 `RoomsController`。在这个文件中，我们将添加一个索引操作来获取数据并将其传递给视图：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The content of `actionIndex()` is very simple. Define the `$sql` variable with
    the SQL statement to be executed, then fill the `$rooms` array with the query
    result, and finally render the `index` view, passing the rooms variable.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`actionIndex()` 的内容非常简单。定义 `$sql` 变量，包含要执行的 SQL 语句，然后将查询结果填充到 `$rooms` 数组中，最后渲染
    `index` 视图，传递房间变量。'
- en: In the view content, in `basic/views/rooms/index.php`, we will display the `$rooms`
    array in a table to exploit Bootstrap CSS's advantages, and apply the `table`
    class to the table HTML tag.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/views/rooms/index.php`的视图内容中，我们将以表格形式显示`$rooms`数组，以利用Bootstrap CSS的优势，并将`table`类应用到表格HTML标签上。
- en: 'This is the content of `basic/views/rooms/index.php`, where we can also see
    the data formatter used:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`basic/views/rooms/index.php`中的内容，我们也可以看到所使用的数据格式化器：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `floor` and `room_number` fields are directly displayed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`floor`和`room_number`字段直接显示。'
- en: The next two fields `has_conditioner` and `has_tv` are shown by employing a
    Boolean formatter supplied by Yii2; the Boolean formatter will use the locale
    defined during the configuration of Yii2.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下两个字段`has_conditioner`和`has_tv`通过使用Yii2提供的布尔格式化器进行显示；布尔格式化器将使用在Yii2配置期间定义的区域设置。
- en: The next field `has_phone` renders its value as the previous two fields; the
    reason for this is to indicate how to produce the same output of a Boolean formatter
    in a standard PHP style.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个字段`has_phone`以与前两个字段相同的方式渲染其值；这样做的原因是为了指示如何以标准PHP风格产生布尔格式化器的相同输出。
- en: Then, the `available_from` field is rendered using the date formatter in two
    different ways, directly and passing the format to be used. Or, if no parameter
    is passed, it adopts the default format.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`available_from`字段以两种不同的方式使用日期格式化器进行渲染，直接渲染和传递要使用的格式。或者，如果没有传递参数，它将采用默认格式。
- en: 'Again, the `price_per_day` field is rendered through the currency formatter,
    passing the currency as a parameter. If no parameter is passed, the default value
    will be used. The last field `description` is displayed directly. Point your browser
    to `http://hostname/basic/web/rooms/index` to see the content as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`price_per_day`字段通过货币格式化器进行渲染，传递货币作为参数。如果没有传递参数，将使用默认值。最后一个字段`description`直接显示。将您的浏览器指向`http://hostname/basic/web/rooms/index`以查看以下内容：
- en: '![Example – test connection and executing the SQL query](img/B04656_05_01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 测试连接并执行SQL查询](img/B04656_05_01.jpg)'
- en: A list of rooms
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 房间列表
- en: Using Gii to create room, customer, and reservation models
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gii创建房间、客户和预订模型
- en: 'Yii2 provides a powerful tool to generate models, controllers, and CRUD (create,
    read, update, and delete) actions, forms, modules, and extensions: Gii.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2提供了一个强大的工具来生成模型、控制器和CRUD（创建、读取、更新和删除）操作、表单、模块和扩展：Gii。
- en: 'At the bottom of the `basic/config/web.php` file, placed in the basic standard
    configuration, there is a block of code that enables Gii:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/config/web.php`文件的底部，放置在基本标准配置中，有一段代码启用了Gii：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Verify that these lines are present, otherwise append them at the bottom of
    the `web.php` file before the `return $config` statement. The last check is in
    `basic/web/index.php`. Verify that `YII_ENV` is `dev`, with this line:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 确认这些行存在，否则在`web.php`文件的`return $config`语句之前将它们附加到文件底部。最后的检查在`basic/web/index.php`中。确认`YII_ENV`是`dev`，如下行：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we can point our browser to `http://hostname/basic/web/gii`, and we should
    see this error page:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将我们的浏览器指向`http://hostname/basic/web/gii`，我们应该看到这个错误页面：
- en: '![Using Gii to create room, customer, and reservation models](img/B04656_05_02.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii创建房间、客户和预订模型](img/B04656_05_02.jpg)'
- en: Forbidden access to Gii
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 禁止访问Gii
- en: This page will be displayed since access to Gii is locked by a password.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Gii被密码锁定，此页面将显示。
- en: 'We need to add extra configuration to the `gii` module, passing other allowed
    IPs. Gii''s configuration has an attribute named `allowedIPs`, which consents
    to specify which IP addresses can access the Gii page:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向`gii`模块添加额外的配置，传递其他允许的IP。Gii的配置有一个名为`allowedIPs`的属性，它允许指定哪些IP地址可以访问Gii页面：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this extract, Gii will accept access from a localhost (in the IPv4 form with
    127.0.0.1 and IPv6 form with `::1`) and from `192.168.178.20`, which should be
    our IP address in private network.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个摘录中，Gii将接受来自本地主机（以IPv4形式的127.0.0.1和IPv6形式的`::1`）以及`192.168.178.20`的访问，这应该是我们私有网络中的IP地址。
- en: 'If the Yii2 application is running on an external hosting, we will set our
    IP public address in this list of allowed IPs. For example, if our IP is `66.249.64.76`,
    this entry will be appended to existent (if we want maintain other permitted access
    points):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Yii2应用程序运行在外部托管上，我们将在此允许的IP列表中设置我们的公网IP地址。例如，如果我们的IP是`66.249.64.76`，此条目将被附加到现有条目（如果我们想保持其他允许的访问点）：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To allow access from everywhere (useful in the development stage), we can add
    `*` in this list, which means that the Gii page can be accessed from every IP
    address:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许从任何地方访问（在开发阶段很有用），我们可以在列表中添加`*`，这意味着Gii页面可以从任何IP地址访问：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Consequently, the content of `gii][''gii''] = ''yii\gii\Module''` is:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`gii]['gii'] = 'yii\gii\Module'`的内容是：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, we are able to access to Gii from any IP.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们能够从任何IP地址访问Gii。
- en: 'Refresh the browser by clicking on the page `http://hostname/basic/web/gii`
    and we can finally see its content:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击页面`http://hostname/basic/web/gii`刷新浏览器，我们最终可以看到其内容：
- en: '![Using Gii to create room, customer, and reservation models](img/B04656_05_03.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii创建房间、客户和预订模型](img/B04656_05_03.jpg)'
- en: Successful access to Gii
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 成功访问Gii
- en: Now, click on the **Start** button of **Model Generator**; we will have a form
    of **Model Generator** where **Table Name** is the unique field to fill in. When
    we start to type the table name, auto-suggestion will display the possible choices.
    After doing this, when we move to the **Model Class** field, this will be automatically
    filled in by a framework. The other fields can be left with the default settings.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**模型生成器**的**开始**按钮；我们将有一个**模型生成器**的表单，其中**表名**是唯一需要填写的字段。当我们开始输入表名时，将显示可能的选项。完成此操作后，当我们移动到**模型类**字段时，框架将自动填充它。其他字段可以保留默认设置。
- en: Type `room` in **Table Name** and then click on the **Model Class** field. This
    field will be filled with **Room**, which is the filename in the `models` folder.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在**表名**中输入`room`，然后点击**模型类**字段。此字段将填充为**Room**，这是`models`文件夹中的文件名。
- en: Clicking on the **Preview** button will display the path where the file will
    be created and the action will be applied (it should be the overwrite value because
    we created it in the previous chapter).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**预览**按钮将显示文件将被创建的路径以及将要应用的操作（它应该是覆盖值，因为我们是在上一章中创建的）。
- en: Finally, click on the **Generate** button to complete this action. A response
    message will give us information about the execution of this operation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击**生成**按钮以完成此操作。响应消息将给我们关于此操作执行的信息。
- en: 'This is the form with a successful result:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是成功结果的形式：
- en: '![Using Gii to create room, customer, and reservation models](img/B04656_05_04.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii创建房间、客户和预订模型](img/B04656_05_04.jpg)'
- en: Model Generator of Gii
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Gii模型生成器
- en: 'Repeat this operation for the other two tables: reservations and customers.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对其他两个表：预订和客户重复此操作。
- en: 'Now, we have three models in the `basic/models` folder: `Room.php`, `Reservation.php`,
    and `Customer.php`.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在`basic/models`文件夹中有三个模型：`Room.php`、`Reservation.php`和`Customer.php`。
- en: 'Let''s explain what Gii has done. Open the `basic/models/Room.php` file, and
    we have three methods:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释Gii做了什么。打开`basic/models/Room.php`文件，我们有三个方法：
- en: '`tableName()`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tableName()`'
- en: '`rules()`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rules()`'
- en: '`attributeLabels()`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributeLabels()`'
- en: 'The first method, `tableName()`, simply returns the name of table to which
    this model is linked:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法，`tableName()`，简单地返回此模型链接的表名：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The second method, `rules()`, is important because it contains rules validation
    to be checked when the `validate()` method is launched (it is launched automatically
    in the `save()` method) or a massive attributes assignment as:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法，`rules()`，很重要，因为它包含在`validate()`方法启动时（在`save()`方法中自动启动）或大量属性赋值时需要检查的验证规则：
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is the content of the `rules()` method:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`rules()`方法的内容：
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The first rule specifies that the fields `floor`, `room_number`, `has_condition`,
    `has_tv`, and `avaiable_from` are mandatory because they are passed to the required
    validator. Moreover, they must be an integer, as required by the second rule.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则指定字段`floor`、`room_number`、`has_condition`、`has_tv`和`avaiable_from`是必填的，因为它们传递给必需的验证器。此外，它们必须是整数，如第二条规则所要求的。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Fields that are not in rules, will be skipped in a massive assignment because
    they are considered unsafe (since they are not present in rules). So it is necessary
    that when a field that has not got a validator rule, it must have an entry in
    the 'safe' validator.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 不在规则中的字段，在大量赋值时将被跳过，因为它们被认为是不可靠的（因为它们不在规则中）。因此，当一个字段没有验证规则时，它必须在'safe'验证器中有一个条目。
- en: The fourth rule specifies that the `price_per_day` field is a number, while
    the last rule states that `description` is a string.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 第四条规则指定`price_per_day`字段是一个数字，而最后一条规则说明`description`是一个字符串。
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: These rules are read automatically from the database field type and constraint.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则会自动从数据库字段类型和约束中读取。
- en: The last method `attributeLabels()` specifies the representation of fields in
    the display view as a form, grid, and so on.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个方法`attributeLabels()`指定了在显示视图（如表单、网格等）中字段的表示。
- en: 'This is the content of `attributeLabels()`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`attributeLabels()`的内容：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Yii2 reports—in the model—any relationship between the tables present in a database.
    We have the `Reservation` model that has links to `Room` and `Customer`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2在模型中报告数据库中存在的任何表之间的关系。我们有一个`Reservation`模型，它与`Room`和`Customer`有关联。
- en: 'Follow these instructions to make the framework able to create a relationship
    in the model:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明操作，使框架能够在模型中创建关系：
- en: Check that the database tables use the InnoDB engine (which supports relationships
    and foreign keys).
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认数据库表使用InnoDB引擎（支持关系和外键）。
- en: 'In the `Reservation` table, add two indexes, respectively for the `room_id`
    and `customer_id` fields:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Reservation`表中，为`room_id`和`customer_id`字段分别添加两个索引：
- en: '[PRE20]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `Reservation` table, add two constraints to the `room` and `customer`
    tables:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Reservation`表中，向`room`和`customer`表添加两个约束：
- en: '[PRE21]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In these constraints, we used `RESTRICT` for `DELETE` and `UPDATE` operations.
    `RESTRICT` avoids the deletion of reservations that refer to customers or rooms
    that we are trying to delete. Therefore, to delete a customer or room that figures
    in reservations, we will be required to first delete the reservations.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这些约束中，我们为`DELETE`和`UPDATE`操作使用了`RESTRICT`。`RESTRICT`避免了删除引用客户或房间的预订。因此，要删除在预订中出现的客户或房间，我们首先需要删除预订。
- en: This behavior ensures that important data such as reservations is never deleted
    automatically (in a cascade) when deleting a room or a customer. An error message
    will be displayed when you try to do this to a reservation linked to the customer
    or room.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种行为确保在删除房间或客户时，重要数据如预订永远不会自动（级联）删除。当你尝试对与客户或房间链接的预订执行此操作时，将显示错误消息。
- en: In other contexts, a commonly used keyword is `CASCADE`, which removes all data
    that refers to linked tables.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其他上下文中，常用的关键字是`CASCADE`，它删除所有引用链接表的数据。
- en: Open Gii again and navigate to `http://hostname/basic/web/gii`, then click on
    the **Start** button in **Model Generator** and type `room` in **Table Name**.
    Click on the **Preview** button at the bottom of the page and this time you will
    see that `models/Room.php` exists and the action is overwrite, unflagged.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开Gii，导航到`http://hostname/basic/web/gii`，然后在**模型生成器**中点击**开始**按钮，并在**表名**中输入`room`。点击页面底部的**预览**按钮，这次你会看到`models/Room.php`存在，并且动作是覆盖，未标记。
- en: Click on the check near 'overwrite' and then on the **Generate** button. In
    this way, we have forced to overwrite the `Room` model with the relational data
    from the `Room` table.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“覆盖”旁边的复选框，然后点击**生成**按钮。这样，我们就强制覆盖了`Room`模型，以从`Room`表中获取关系数据。
- en: 'Now, `basic/models/Room.php` contains a new method named `getReservations`
    at the bottom, with this content:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`basic/models/Room.php`在底部包含一个名为`getReservations`的新方法，其内容如下：
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method returns an ActiveQuery instance, which is used to build a query
    to be dispatched to the database.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个ActiveQuery实例，用于构建要发送到数据库的查询。
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When called as a property, this method will return the list of reservations
    linked to the model.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为属性调用时，此方法将返回与模型链接的预订列表。
- en: 'You might encounter the case where `$model` is an instance of the `Room` class
    for example: `$reservationsList = $model->reservations;`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到这种情况，即`$model`是`Room`类的一个实例，例如：`$reservationsList = $model->reservations;`
- en: In this case, fill the `$reservationsList` variables with a list of reservations
    related to this `Room` model.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将`$reservationsList`变量填充与这个`Room`模型相关的预订列表。
- en: This is not surprising, although the `hasMany` method returns an `ActiveQuery`
    object.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不奇怪，尽管`hasMany`方法返回一个`ActiveQuery`对象。
- en: 'If we explore the `__get()` method of `BaseActiveRecord` (which is the base
    class of ActiveRecord) that handles the property requirements, we can see these
    lines of code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们探索`BaseActiveRecord`的`__get()`方法（它是ActiveRecord的基类），处理属性要求，我们可以看到这些代码行：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This returns linked results when the `$value` content is an instance of `ActiveQueryInterface`
    (which is an interface implemented by the `ActiveQuery` class).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当`$value`内容是`ActiveQueryInterface`（由`ActiveQuery`类实现的接口）的实例时，此方法返回关联结果。
- en: Using ActiveRecord to manipulate data
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ActiveRecord操作数据
- en: ActiveRecord offers a convenient way to access and manipulate data stored in
    a database. This class is linked to a database table and represents a row of the
    linked table. Its attributes are the fields of the table and its methods allow
    us to perform common actions on database, such as selecting, inserting, or updating
    SQL statements.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ActiveRecord 提供了一种方便的方式来访问和操作存储在数据库中的数据。这个类与一个数据库表相关联，并代表了这个关联表的行。它的属性是表的字段，它的方法允许我们执行数据库的常见操作，如选择、插入或更新
    SQL 语句。
- en: 'Many common databases are supported by ActiveRecord, such as:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ActiveRecord 支持许多常见数据库，例如：
- en: MySQL
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL
- en: PostgreSQL
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: SQLite
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite
- en: Oracle
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle
- en: Microsoft SQL Server
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软 SQL Server
- en: 'Also, some NoSQL databases are supported, such as:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些 NoSQL 数据库受到支持，例如：
- en: Redis
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis
- en: MongoDB
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB
- en: ActiveRecord reads the table structure every time it is instanced and makes
    available table columns as its properties. Every change to the table structure
    is immediately available in the ActiveRecord object.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: ActiveRecord 在每次实例化时都会读取表结构，并将表列作为其属性提供。对表结构的任何更改都会立即在 ActiveRecord 对象中可用。
- en: 'Therefore, if a table contains the fields `id`, `floor`, and `room_number`,
    and if `$model` is an instance of `yii\db\ActiveRecord`, in order to access these
    fields, it will be enough to type:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果一个表包含字段 `id`、`floor` 和 `room_number`，并且如果 `$model` 是 `yii\db\ActiveRecord`
    的一个实例，为了访问这些字段，只需输入：
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: ActiveRecord handles properties request with the `__get` magic method and catches
    the respective content of a table column. In the previous paragraph, you saw how
    to create a model class from database tables to extend `yii\db\ActiveRecord` with
    Gii. The syntax used by ActiveRecord is simple and redundant, so it is easy to
    remember. Now let's look at how to query data from a database with ActiveRecord.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: ActiveRecord 使用 `__get` 魔法方法处理属性请求，并捕获相应表列的内容。在上一个段落中，您看到了如何使用 Gii 从数据库表创建模型类，以扩展
    `yii\db\ActiveRecord`。ActiveRecord 使用的语法简单且冗余，因此容易记住。现在让我们看看如何使用 ActiveRecord
    从数据库中查询数据。
- en: Data is fetched from a database through an `\yii\db\ActiveQuery` object to build
    the query, and finally calls on `one()` or `all()` methods to get an ActiveRecord
    object or a list of ActiveRecord objects.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 数据通过一个 `\yii\db\ActiveQuery` 对象从数据库中检索来构建查询，最后调用 `one()` 或 `all()` 方法来获取一个 ActiveRecord
    对象或 ActiveRecord 对象的列表。
- en: An ActiveQuery object is returned from an ActiveRecord object by calling its
    static method `::find()`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用其静态方法 `::find()` 从 ActiveRecord 对象返回一个 ActiveQuery 对象。
- en: 'If `Room` is a model (and subclasses ActiveRecord), an ActiveQuery will be
    returned from:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `Room` 是一个模型（并且是 ActiveRecord 的子类），则从以下内容返回一个 ActiveQuery：
- en: '[PRE25]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: ActiveQuery objects provide methods to build the query with names such as in
    SQL expression.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: ActiveQuery 对象提供了一些方法来构建查询，这些方法的名称类似于 SQL 表达式。
- en: 'The most common ones are:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的一些是：
- en: '`where()` to add conditions'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `where()` 来添加条件
- en: '`orderBy()` to apply an order'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `orderBy()` 来应用排序
- en: '`groupBy()` to make aggregations'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `groupBy()` 来进行聚合
- en: 'Almost all of these methods support a parameter that can be a string or an
    array. If it is a string, it will be passed exactly as it is to the SQL query;
    if it is an array, a key will be used as the column name, and a value as the corresponding
    value. For example, we want to build query to find a room on the first floor:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有这些方法都支持一个可以是一个字符串或数组的参数。如果是字符串，它将原样传递到 SQL 查询中；如果是数组，则键用作列名，值用作相应的值。例如，我们想要构建查询来找到一楼上的房间：
- en: '[PRE26]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For complex conditions, `where()` supports the operator format where the condition
    is an array with:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复杂条件，`where()` 支持操作符格式，其中条件是一个数组，包含：
- en: '[PRE27]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For example, we want to build a query to find a room on the first floor:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想要构建一个查询来找到一楼上的房间：
- en: '[PRE28]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Other conditions can be added using `andWhere()` or `orWhere()`, by just using
    the `and` or `or` logical link.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `andWhere()` 或 `orWhere()` 添加其他条件，只需使用 `and` 或 `or` 逻辑连接符。
- en: An array parameter of the `where()` method is preferable to a string, because
    we can easily split the field name from its content and set the second parameter
    of the `where()` method with an array with pair keys `=>` values of parameters.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`where()` 方法的数组参数比字符串更可取，因为我们可以轻松地将字段名与其内容分开，并将 `where()` 方法的第二个参数设置为包含参数键值对的数组。'
- en: 'After creating a query object, to get data from an ActiveQuery, we will have:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 创建查询对象后，要从 ActiveQuery 获取数据，我们将有：
- en: '`one()`: This method returns an ActiveRecord object or null if not found'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`one()`：此方法返回一个 ActiveRecord 对象或未找到时返回 null'
- en: '`all()`: This method returns a list of ActiveRecord objects or an empty array
    if not found'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all()`: 此方法返回ActiveRecord对象列表或未找到时返回空数组'
- en: 'So, to get rooms on the first floor, we must write:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要获取一楼房间，我们必须编写：
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is a more concise syntax to fetch data from an ActiveRecord: the `findOne()`
    and `findAll()` methods, which return a single ActiveRecord or a list of ActiveRecords.
    The only difference from the previous methods is that they accept a single parameter,
    which can be:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 从ActiveRecord获取数据有一个更简洁的语法：`findOne()`和`findAll()`方法，它们返回单个ActiveRecord或ActiveRecord列表。与前述方法唯一的不同之处在于，它们接受单个参数，可以是：
- en: A number to filter by primary key
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过主键过滤的数字
- en: An array of scalar values to filter by a list of primary key values (only for
    `findAll()` because `findOne()` returns a single ActiveRecord)
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个由主键值列表组成的标量值数组，用于过滤（仅适用于`findAll()`，因为`findOne()`返回单个ActiveRecord）
- en: An array of name-value pair to filter by a set of attribute values
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个由属性值组成的键值对数组，用于过滤一组属性值
- en: 'Other common methods of ActiveRecord are:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: ActiveRecord的其他常用方法包括：
- en: '`validate()`: This method is used to apply rules validation to attributes of
    a model'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate()`: 此方法用于将规则验证应用于模型的属性'
- en: '`save()`: This method is used to save a new model or to update one that already
    exists (if the `save()` method is applied to a fetched ActiveRecord object)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save()`: 此方法用于保存新模型或更新已存在的模型（如果`save()`方法应用于获取的ActiveRecord对象）'
- en: '`delete()`: This method is used to delete a model'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete()`: 此方法用于删除模型'
- en: Example – query rooms list with ActiveRecord
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用ActiveRecord查询房间列表
- en: 'In this example, we will query the rooms list using ActiveRecord and filter
    through the following fields: `floor`, `room_number`, and `price_per_day` with
    operators ( `>=`, `<=`, and `=`).'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将使用ActiveRecord查询房间列表，并通过以下字段进行过滤：`floor`、`room_number`和`price_per_day`，使用操作符（`>=`、`<=`和`=`）。
- en: A data filter will take place using the `SearchFilter` container to encapsulate
    all of the filter data inside a single array.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 数据过滤器将使用`SearchFilter`容器来封装所有过滤数据到一个数组中。
- en: Starting from a view, create a new file with the path `basic/views/rooms/indexFiltered.php`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 从视图开始，创建一个路径为`basic/views/rooms/indexFiltered.php`的新文件。
- en: In this view, we will put the search filter on the top and then a table to display
    the results.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在此视图中，我们将搜索过滤器放在顶部，然后是一个表格来显示结果。
- en: 'We have three fields to filter: `floor`, `room_number`, and `price_per_day`,
    all with an operator. The data filter will be passed to the controller and the
    filter selected will be kept after executing `actionIndexFiltered` in the controller.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个过滤字段：`floor`、`room_number`和`price_per_day`，所有字段都带有操作符。数据过滤器将传递给控制器，并在控制器中执行`actionIndexFiltered`后保留所选的过滤器。
- en: 'This is the content of the view concerning the filtered form:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于过滤表单的视图内容：
- en: '[PRE30]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Pay attention:**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**请注意：**'
- en: At the beginning of the view, there is a keyword `use`, which explains the complete
    path of the `Url` class. If we remove it, the framework will search the `Url`
    class requested in the `<form>` tag in the current namespace, that is `app/controllers`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图的开始处有一个关键字`use`，它解释了`Url`类的完整路径。如果我们删除它，框架将在当前命名空间（即`app/controllers`）中搜索在`<form>`标签中请求的`Url`类。
- en: 'After declaring the `<form>` tag, we inserted:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明`<form>`标签后，我们插入：
- en: '[PRE31]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is mandatory to allow the framework to verify the sender of the post data.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于允许框架验证发送的表单数据是强制性的。
- en: The `$searchFilter` variable is used as `$sf` to provide a more concise form.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`$searchFilter`变量用作`$sf`以提供更简洁的表单。'
- en: Now update `RoomsController` in `basic/controllers/RoomsController.php` and
    add a new action named `actionIndexFiltered`. Create an ActiveQuery object from
    `Room` and check whether there is content in the `SearchFilter` keyword of the
    `$_POST` array.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更新`basic/controllers/RoomsController.php`中的`RoomsController`，并添加一个名为`actionIndexFiltered`的新操作。从`Room`创建一个ActiveQuery对象，并检查`$_POST`数组中的`SearchFilter`关键字是否有内容。
- en: 'For every present filter, a condition will be added to `$query` using the `andWhere`
    method, passing an operator, field name, and value. For a more concise form of
    the actioned content, we put a filtered field in the loop, because they have the
    same redundant structure (operator and value):'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个现有的过滤器，将使用`andWhere`方法向`$query`添加一个条件，传递一个操作符、字段名和值。为了使操作内容的形式更简洁，我们在循环中放置一个过滤字段，因为它们具有相同的冗余结构（操作符和值）：
- en: '[PRE32]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, we need to display the results in a table format. So at the bottom
    of the view, add a table to display the content of the filtered rooms (copied
    from `basic/views/rooms/index.php`):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要以表格格式显示结果。因此，在视图底部添加一个表格来显示筛选房间的内容（从 `basic/views/rooms/index.php` 复制）：
- en: '[PRE33]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now point the browser to `http://hostname/basic/web/rooms/index-filtered` and
    this should be displayed:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将浏览器指向 `http://hostname/basic/web/rooms/index-filtered`，应该会显示：
- en: '![Example – query rooms list with ActiveRecord](img/B04656_05_05.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 使用 ActiveRecord 查询房间列表](img/B04656_05_05.jpg)'
- en: A list of rooms with filters
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 带有筛选器的房间列表
- en: We can create tests by changing the filter values and operators as much as we
    want.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过更改筛选值和运算符来创建尽可能多的测试。
- en: Working with relationships
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理关系
- en: 'ActiveRecord provides us with skills to work with relationships between database
    tables. Yii2 employs two methods to establish the relationship between the current
    and other ActiveRecord classes: `hasOne` and `hasMany`, which return an ActiveQuery
    based on the multiplicity of the relationship.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: ActiveRecord 为我们提供了处理数据库表之间关系的能力。Yii2 使用两种方法来建立当前 ActiveRecord 类与其他 ActiveRecord
    类之间的关系：`hasOne` 和 `hasMany`，它们根据关系的多度返回一个 ActiveQuery。
- en: The first method `hasOne()` returns at most one related record that matches
    the criteria set by this relationship, and `hasMany()` returns multiple related
    records that match the criteria set by this relationship.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法 `hasOne()` 返回最多一个与该关系设定的标准匹配的相关记录，而 `hasMany()` 返回与该关系设定的标准匹配的多个相关记录。
- en: 'Both methods require that the first parameter is the class name of the related
    ActiveRecord and that the second parameter is the pair of primary keys that are
    involved in the relationship: the first key is relative to a foreign ActiveRecord
    and the second key is related to the current ActiveRecord.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都需要第一个参数是相关 ActiveRecord 的类名，第二个参数是涉及关系的键对：第一个键相对于外键 ActiveRecord，第二个键与当前
    ActiveRecord 相关。
- en: Usually, `hasOne()` and `hasMany()` are accessed from properties that identify
    which object (or objects) will be returned.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`hasOne()` 和 `hasMany()` 是从标识哪些对象（或对象）将被返回的属性中访问的。
- en: 'The method in this example is:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中的方法是：
- en: '[PRE34]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'By calling `$room->reservations`, framework will execute this query:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 `$room->reservations`，框架将执行此查询：
- en: '[PRE35]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The use of the `hasOne()` method is similar, and as an example will look like
    this:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasOne()` 方法的用法类似，以下是一个示例：'
- en: '[PRE36]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Calling `$reservation->room`, framework will execute this query:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `$reservation->room`，框架将执行此查询：
- en: '[PRE37]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Remember that when we call a property that contains the `hasOne()` or `hasMany()`
    methods, a SQL query will be executed and its response will be cached. So, the
    next time that we call the property, a SQL query will not be executed and the
    last cached response will be released.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，当我们调用包含 `hasOne()` 或 `hasMany()` 方法的属性时，将执行一个 SQL 查询，并且其响应将被缓存。因此，下次调用该属性时，将不会执行
    SQL 查询，并且将释放最后缓存的响应。
- en: This approach to get related data is called **lazy loading**, which means that
    data is loaded only when it is effectively requested.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这种获取相关数据的方法被称为 **延迟加载**，意味着数据只有在实际请求时才会被加载。
- en: Now let's write an example to display the last reservation details about a room.
    Create a reservations model class using Gii if you have not done so before.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们写一个示例来显示关于一个房间的最后预订详情。如果您之前还没有这样做，请使用 Gii 创建一个预订模型类。
- en: 'First of all, we need some data to work with. Insert this record in the `customer`
    table:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一些数据来工作。在 `customer` 表中插入此记录：
- en: '[PRE38]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `reservation` table, insert these records:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `reservation` 表中插入这些记录：
- en: '[PRE39]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Open the room model in `basic/models/Room.php` and append this property declaration
    at the bottom of the file:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `basic/models/Room.php` 中的房间模型，并在文件底部添加此属性声明：
- en: '[PRE40]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As said before, `hasOne()` and `hasMany()` return an ActiveQuery instance. We
    can append any methods to complete the relationship as we have done before by
    appending the `orderBy()` method to get the first record.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`hasOne()` 和 `hasMany()` 返回一个 ActiveQuery 实例。我们可以通过添加 `orderBy()` 方法来获取第一条记录，就像我们之前所做的那样，来添加任何方法以完成关系。
- en: 'Create a new action named `actionLastReservationByRoomId($room_id)` in the
    `Rooms` controller, with the following content:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Rooms` 控制器中创建一个名为 `actionLastReservationByRoomId($room_id)` 的新操作，内容如下：
- en: '[PRE41]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Point your browser to `http://hostname/basic/web/rooms/last-reservation-by-room-id?room_id=2`
    to visualize this frame:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向 `http://hostname/basic/web/rooms/last-reservation-by-room-id?room_id=2`
    以可视化此框架：
- en: '![Working with relationships](img/B04656_05_06.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![处理关系](img/B04656_05_06.jpg)'
- en: A visualization of the last reservation of a room with id = 2
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 展示ID为2的房间最后预订的可视化
- en: Only the last reservation inserted in the database will be displayed.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 只会显示数据库中插入的最后预订。
- en: What about displaying all the last reservations for each room in a single table?
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何在单个表格中显示每个房间的最后预订呢？
- en: 'Here, the lazy loading approach will have performance issues because for every
    room, it will execute a single SQL query to get data for the last reservation.
    This is a code snippet in the view:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，延迟加载方法将会有性能问题，因为对于每个房间，它将执行一个单独的SQL查询来获取最后预订的数据。这是视图中的代码片段：
- en: '[PRE42]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In order to complete the script's execution, it will execute as many related
    SQL queries as the number of rooms, and when the number of rooms grows, this solution
    will not be efficient anymore.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成脚本的执行，它将执行与房间数量一样多的相关SQL查询，当房间数量增加时，这种解决方案将不再高效。
- en: The Yii2 framework provides another type of loading data, named eager loading,
    to solve this kind of problem.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2框架提供了解决此类问题的一种数据加载类型，称为预加载。
- en: Eager loading is applied using the `with()` method of ActiveQuery. This method's
    parameters can be either one or multiple strings, or a single array of relation
    names and the optional callbacks to customize the relationships.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 通过ActiveQuery的`with()`方法应用预加载。此方法的参数可以是单个或多个字符串，或者是一个包含关系名称的单个数组以及可选的回调来定制关系。
- en: When we get a rooms list, if we apply the `with()` method to the query, a second
    SQL query will automatically be executed and this will return the list of the
    last reservations for each room.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们获取房间列表时，如果我们对查询应用`with()`方法，将自动执行第二个SQL查询，这将返回每个房间的最后预订列表。
- en: 'With this example, we will get a rooms list and a list of the `lastReservation`
    relation for each room entry. In this way, when we refer to `$room->lastReservation`,
    no other SQL query will be executed:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个示例，我们将得到一个房间列表以及每个房间条目的`lastReservation`关系列表。这样，当我们引用`$room->lastReservation`时，不会执行其他SQL查询：
- en: '[PRE43]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Let''s write a complete example to get a full list of the last reservations
    for each room. In `basic/controllers/RoomsController.php`, append a new action
    named `actionLastReservationForEveryRoom()`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个完整的示例来获取每个房间的最后预订的完整列表。在`basic/controllers/RoomsController.php`中，添加一个名为`actionLastReservationForEveryRoom()`的新操作：
- en: '[PRE44]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This action will pass a list of rooms named `lastReservationForEveryRoom` to
    the view, together with the `lastReservation` relation loaded using the eager
    loading.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作将传递一个名为`lastReservationForEveryRoom`的房间列表给视图，以及使用预加载加载的`lastReservation`关系。
- en: 'Create a view named `lastReservationForEveryRoom.php` in `basic/views/rooms/lastReservationForEveryRoom.php`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/views/rooms/lastReservationForEveryRoom.php`中创建一个名为`lastReservationForEveryRoom.php`的视图：
- en: '[PRE45]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In this view, the last reservation data will be displayed for each room. Since
    the first room has no reservations, an empty row will be displayed. This is the
    result:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视图中，将为每个房间显示最后预订的数据。由于第一个房间没有预订，将显示一个空行。这是结果：
- en: '![Working with relationships](img/B04656_05_07.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![处理关系](img/B04656_05_07.jpg)'
- en: Last reservation for every room
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 每个房间的最后预订
- en: Note
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are two variants to the `with()` method: `joinWith()` and `innerJoinWith()`,
    which apply a left join or an inner join to a primary query.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`with()`方法有两种变体：`joinWith()`和`innerJoinWith()`，它们将左连接或内部连接应用于主查询。'
- en: 'For example, this is the use of `joinWith()` with:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是使用`joinWith()`的示例：
- en: '[PRE46]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The preceding code snippet is equivalent to:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段等同于：
- en: '[PRE47]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Remember that the inner join selects all rows from both tables as long as there
    is a match between the columns in both tables; instead, the left join returns
    all rows from the left table (room), with the matching rows in the right table
    (reservation). The result is NULL in the right side when there is no match.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，内部连接只要两个表中的列有匹配就会选择两个表的所有行；相反，左连接返回左表（房间）的所有行，以及右表（预订）中匹配的行。当没有匹配时，右侧的结果是NULL。
- en: Sometimes it happens that we need more than one level of relationship between
    tables. For example, we could find a customer related to a room. In this case,
    starting from the room, we pass through the reservation and go from the reservation
    to the customer.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们需要在表之间有多个级别的关联。例如，我们可能找到一个与房间相关的客户。在这种情况下，从房间开始，我们通过预订，然后从预订到客户。
- en: 'The relationship here will be:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关系将是：
- en: '[PRE48]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If we want to find out the customer object from the room object, just type:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想从房间对象中找到客户对象，只需输入：
- en: '[PRE49]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Generally, we have more levels of relationship, but in this case only two (reservation
    and customer).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们有多层关系，但在这个情况下只有两层（预订和客户）。
- en: 'Yii2 allows us to specify a junction table using the `via()` or `viaTable()`
    method. The first one, `via()`, is based on an existing relationship in the model,
    and it supports two parameters:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 允许我们使用 `via()` 或 `viaTable()` 方法指定一个连接表。第一个 `via()` 方法基于模型中现有的关系，并支持两个参数：
- en: Relation name
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系名称
- en: A PHP callback parameter to customize the associated relation
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于自定义关联关系的 PHP 回调参数
- en: 'The second method, `viaTable()`, is based on direct access to a physical table
    in the database and supports three parameters:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 `viaTable()` 基于直接访问数据库中的物理表，并支持三个参数：
- en: The first parameter is a relation or table name
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是一个关系或表名称
- en: The second parameter is the link associated with the primary model
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是与主模型关联的链接
- en: The third parameter is a PHP callback to customize the associated relation
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是一个 PHP 回调函数，用于自定义关联关系
- en: Example – using a relationship to connect rooms, reservations, and customers
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用关系连接房间、预订和客户
- en: In this example, we will look at how to build a single view that displays the
    rooms, reservations, and customers lists at the same time; when a user clicks
    on the **Detail** button of rooms record, the reservations list will be filtered
    with data linked to that room. In the same way, when a user clicks on the **Detail**
    button of a reservations record, the customers list will be filtered with data
    linked to that reservation.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将查看如何构建一个同时显示房间、预订和客户列表的单个视图；当用户点击房间记录的 **详情** 按钮时，预订列表将使用与该房间链接的数据进行过滤。同样，当用户点击预订记录的
    **详情** 按钮时，客户列表将使用与该预订链接的数据进行过滤。
- en: If no parameter is passed (a condition that occurs when a page is called for
    the first time), either the rooms, reservations, or customers list contains a
    full record of data from the respective tables.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递参数（在页面首次调用时发生的情况），则房间、预订或客户列表将包含来自相应表的数据的完整记录。
- en: 'Start writing `actionIndexWithRelationships` in `basic/controllers/RoomsController.php`.
    This is the task list for this action:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `basic/controllers/RoomsController.php` 中开始编写 `actionIndexWithRelationships`。这是此操作的待办事项列表：
- en: Check which parameter of detail has been passed (`room_id` identifies that the
    reservations list has to be filled in with the data filtered using `room_id`,
    while `reservation_id` identifies that the customers list has to be filled with
    the data filtered using `reservation_id`)
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查哪些详细参数已被传递（`room_id` 表示必须使用 `room_id` 过滤的数据填充预订列表，而 `reservation_id` 表示必须使用
    `reservation_id` 过滤的数据填充客户列表）
- en: 'Fill in three models: `roomSelected`, `reservationSelected`, and `customerSelected`
    to display the details and fill in three arrays of models: `rooms`, `reservations`,
    and `customers`'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充三个模型：`roomSelected`、`reservationSelected` 和 `customerSelected` 以显示详细信息，并填充三个模型的三个数组：`rooms`、`reservations`
    和 `customers`
- en: 'This is the complete content of `actionIndexWithRelationships`:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `actionIndexWithRelationships` 的完整内容：
- en: '[PRE50]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Remember to add the `use` keyword for `Customer` and `Reservation` classes
    at the top of the `RoomsController` file:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在 `RoomsController` 文件顶部添加 `use` 关键字以使用 `Customer` 和 `Reservation` 类：
- en: '[PRE51]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The second part of the action body requires more attention, because there are
    filled in selected models and list models in this specific position.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 动作体的第二部分需要更多关注，因为在这个特定位置填充了选择模型和列表模型。
- en: Only one parameter at a time can be selected between `$room_id`, `$reservation_id`,
    and `$customer_id`. When one of these three parameters is selected, three arrays
    of the `Room`, `Reservation`, and `Customer` model will be filled in, using the
    relationships in the model. For this purpose, models must have all the relationships
    employed in the previous code.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `$room_id`、`$reservation_id` 和 `$customer_id` 之间只能同时选择一个参数。当选择这三个参数之一时，将使用模型中的关系填充
    `Room`、`Reservation` 和 `Customer` 模型的三个数组。为此，模型必须使用之前代码中使用的所有关系。
- en: Let's make sure that all the relationships exist in the models.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保模型中存在所有关系。
- en: 'The `Room` model in `basic/models/Room.php` must have both `getReservations()`
    and `getCustomers()` defined, which both use the `via()` method to handle the
    second level of relationship:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/models/Room.php`中的`Room`模型必须同时定义`getReservations()`和`getCustomers()`，这两个都使用`via()`方法来处理第二级关系：
- en: '[PRE52]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `Reservation` model in `basic/models/Reservation.php` must have `getCustomer()`
    and `getRoom()`, both returning a single related model:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/models/Reservation.php`中的`Reservation`模型必须定义`getCustomer()`和`getRoom()`，这两个都返回一个相关的单模型：
- en: '[PRE53]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Finally, the `Customer` model in `basic/models/Customer.php` must have `getReservations()`
    and `getRooms()`, which use the `via()` method to handle the second level of relationship:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`basic/models/Customer.php`中的`Customer`模型必须定义`getReservations()`和`getRooms()`，这两个都使用`via()`方法来处理第二级关系：
- en: '[PRE54]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Now write a view file in `basic/view/rooms/indexWithRelationships.php`. We will
    split the HTML page into three parts (three tables), using the CSS provided by
    Bootstrap (which we will examine widely in the next few chapters).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`basic/view/rooms/indexWithRelationships.php`中编写一个视图文件。我们将使用Bootstrap提供的CSS（我们将在接下来的几章中广泛研究）将HTML页面分成三个部分（三个表格）。
- en: 'The first table will be for the rooms list, the second table for the reservations
    list, and the last one for the customers list:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 第一张表将用于房间列表，第二张表用于预订列表，最后一张表用于客户列表：
- en: '[PRE55]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Test the code by pointing your browser to `http://hostname/basic/rooms/index-with-relationships`.
    This should be the result of trying to filter a room on the second floor:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将浏览器指向`http://hostname/basic/rooms/index-with-relationships`来测试代码。这应该是尝试过滤二楼房间的结果：
- en: '![Example – using a relationship to connect rooms, reservations, and customers](img/B04656_05_08.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 使用关系连接房间、预订和客户](img/B04656_05_08.jpg)'
- en: Rooms with relationships between reservations and customers
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 具有预订和客户之间关系的房间
- en: How to save a model from a form
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何从表单保存模型
- en: Let's now look at how to save a model from a form, which could be a new or an
    updated model.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何从表单保存模型，这可能是一个新的或更新的模型。
- en: 'The steps you need to follow are:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要遵循的步骤是：
- en: In the `action` method, create a new model or get an existing model.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`action`方法中，创建一个新的模型或获取现有的模型。
- en: In the `action` method, check whether there is data in the `$_POST` array.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`action`方法中，检查`$_POST`数组中是否有数据。
- en: If there is data in `$_POST`, fill in the `attributes` property of the model
    with data from `$_POST` and call the `save()` method of the model; if `save()`
    returns true, redirect the user to another page (the details page, for example).
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`$_POST`中有数据，将模型属性的`attributes`属性填充为`$_POST`中的数据，并调用模型的`save()`方法；如果`save()`返回true，则将用户重定向到另一个页面（例如详情页面）。
- en: From now on, we will continue to use widgets and helper classes provided by
    the framework. In this case, the HTML form will be rendered using the `yii\widget\ActiveForm`
    class.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，我们将继续使用框架提供的widgets和helper类。在这种情况下，HTML表单将通过`yii\widget\ActiveForm`类渲染。
- en: 'The most simple form we can write is the following:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能写的最简单的表单如下：
- en: '[PRE56]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This code generates a form HTML tag with `login-form` as the `id` attribute
    and empty content; the `method` and `action` attributes are respectively, by default,
    the post and same action URL that generated the form. Other properties about AJAX
    validation and client validation can be set, as you will see further on.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码生成一个带有`login-form`作为`id`属性和空内容的表单HTML标签；默认情况下，`method`和`action`属性分别是表单生成的post和相同动作URL。其他关于AJAX验证和客户端验证的属性可以设置，正如你将在后面看到的。
- en: The widget `$form` is created by employing a static method `ActiveForm::begin`,
    passing as an array that contains attributes of a form HTML tag (`id`, `action`,
    `method`, and so on) a configuration parameter and a key named `options` to specify
    all the extra options that we want to pass to form the HTML tag. Finally, the
    form will be completed when we call the static method `ActiveForm::end()`. Between
    the `begin()` and `end()` methods of the form, we can insert all the content needed.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`$form`小部件是通过使用静态方法`ActiveForm::begin`创建的，传递一个包含表单HTML标签属性（`id`、`action`、`method`等）的数组、一个配置参数和一个名为`options`的键来指定所有我们想要传递给表单的额外选项。最后，当调用静态方法`ActiveForm::end()`时，表单将被完成。在表单的`begin()`和`end()`方法之间，我们可以插入所有需要的内容。'
- en: 'In particular, the input fields of the form can be managed using the ActiveField
    widget. The ActiveField widget related to an attribute of model is created by
    calling the `field()` method of the `$form` object:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，可以使用ActiveField小部件来管理表单的输入字段。与模型属性相关的ActiveField小部件是通过调用`$form`对象的`field()`方法创建的：
- en: '[PRE57]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The object returned from the `field()` method is a generic field that we can
    specialize by simply applying other methods to generate all the common kinds of
    input fields: hidden, text, password, file, and so on. This returns the same ActiveField
    `$field` object, and consequently other methods can be applied in a cascade.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`field()`方法返回的对象是一个通用字段，我们可以通过简单地应用其他方法来专门化，以生成所有常见的输入字段：隐藏、文本、密码、文件等。这返回相同的ActiveField
    `$field`对象，因此可以级联应用其他方法。'
- en: 'A text field input is created with:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方式创建一个文本字段输入：
- en: '[PRE58]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Or can be created simply like this:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 或者可以简单地这样创建：
- en: '[PRE59]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This variable `$textInputField` is again an ActiveField (the same object of
    `$field`), so we can apply all the other methods required to complete our input
    field; for example, if we need to place a hint in input field, we can use:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量`$textInputField`再次是ActiveField（与`$field`相同的对象），因此我们可以应用所有其他所需的方法来完成我们的输入字段；例如，如果我们需要在输入字段中放置提示，我们可以使用：
- en: '[PRE60]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Or we can simply use:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以简单地使用：
- en: '[PRE61]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Additional framework in addition automatically takes into account the attribute's
    validation rules, which are defined in the `rules()` method of the model class.
    For example, if an attribute is required and we click on it and pass it to another
    field without typing anything, an error alert will be displayed reminding us that
    the field is required.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 除了自动考虑模型类`rules()`方法中定义的属性验证规则外，框架还会额外考虑。例如，如果一个属性是必需的，我们点击它并将其传递给另一个字段而不输入任何内容，将会显示一个错误提示，提醒我们该字段是必需的。
- en: 'When an input field is created using the ActiveField widget, the `id` and `name`
    properties of this input will have this format: `model-class-name_attribute-name`
    for `id` and `model-class-name[attribute-name]` for `name`. This means that all
    the attributes of the model will be passed to the controller action when we submit
    the form grouped in a container array named the same as the model class.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ActiveField小部件创建输入字段时，该输入的`id`和`name`属性将具有以下格式：`id`为`model-class-name_attribute-name`，`name`为`model-class-name[attribute-name]`。这意味着当我们将表单提交给控制器操作时，所有模型属性都将分组在一个与模型类同名的容器数组中传递。
- en: 'For example, if the `$model` class is `Room` and the attribute is `floor` whose
    content is `12`, create a text field from the `$form` object:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`$model`类是`Room`，属性是`floor`，其内容是`12`，则从`$form`对象创建一个文本字段：
- en: '[PRE62]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This outputs the following HTML:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下HTML：
- en: '[PRE63]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Example – creating and updating a room from a form
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 从表单创建和更新房间
- en: Just from following the instructions in the previous paragraph, we will try
    to create and update a room from the HTML form.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 只需遵循上一段中的说明，我们将尝试从HTML表单创建和更新一个房间。
- en: 'We now update the previously created `actionCreate()` method in `RoomsController`
    with some code to instantiate a new model object, check the content of the `$_POST`
    array, and if it is set, we call `save()` on the model:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在更新之前在`RoomsController`中创建的`actionCreate()`方法，添加一些代码来实例化一个新的模型对象，检查`$_POST`数组的内容，如果已设置，则在模型上调用`save()`：
- en: '[PRE64]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To update the view in `basic/views/rooms/create.php`, pass:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新`basic/views/rooms/create.php`中的视图，传递以下参数：
- en: '[PRE65]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: By default, `ActiveForm::begin()` creates a form that has client validation
    enabled; therefore, the form will be submitted only when all the validation rules
    are satisfied as the `submit` button is rendered using `yii\helpers\Html`.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`ActiveForm::begin()`创建一个启用了客户端验证的表单；因此，只有当所有验证规则都满足时，表单才会提交，因为`submit`按钮是使用`yii\helpers\Html`渲染的。
- en: 'Pay attention to the top of view that contains the `use` keyword to define
    the complete path of the classes `Html` and `ActiveForm`:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 注意视图顶部包含`use`关键字，用于定义`Html`和`ActiveForm`类的完整路径：
- en: '[PRE66]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Point your browser to `http://hostname/basic/rooms/create` to display the form
    to create a new room. The following screenshot shows what you should display,
    reporting in it some particular conditions:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向`http://hostname/basic/rooms/create`以显示创建新房间的表单。以下截图显示了您应该显示的内容，并报告了一些特定条件：
- en: '![Example – creating and updating a room from a form](img/B04656_05_09.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 从表单创建和更新房间](img/B04656_05_09.jpg)'
- en: The form to create a new room
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新房间的表单
- en: 'This screenshot presents different states of fields: the floor input has a
    red border because it has the wrong type of content (it must be an integer!),
    the room number has a green border to indicate that is correct, and the **Available
    From** field has a red border because it is required but the user left it blank.
    The framework provides a more concise form to fill in attributes if `$_POST` data
    is available:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这张截图展示了字段的不同状态：楼层输入有一个红色边框，因为它有错误的内容类型（它必须是整数！），房间号有一个绿色边框以表示它是正确的，而**可用从**字段有一个红色边框，因为它虽然是必需的，但用户留空了。如果`$_POST`数据可用，框架提供了一个更简洁的表单来填写属性：
- en: '[PRE67]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This fills in the attributes of the model if the `$_POST[model-class]` content
    is available, and with this suggestion we can change the `actionCreate` content
    as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`$_POST[model-class]`内容可用，这将填充模型的属性，并且根据这个建议，我们可以将`actionCreate`内容更改为以下内容：
- en: '[PRE68]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This is extraordinarily concise! Similarly, we can handle the update action
    to save changes to an existing model.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简洁！同样，我们可以处理更新操作以保存对现有模型的更改。
- en: 'We can make a reusable form by putting its content in an external. Create a
    new file in `basic/views/rooms/_form.php` (the first underscore indicates that
    this is a view that is includable in other views) and cut and paste the code about
    form generation from the `create` view to this new `_form` view:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将其内容放在外部来创建一个可重用的表单。在`basic/views/rooms/_form.php`中创建一个新文件（第一个下划线表示这是一个可包含在其他视图中的视图），并将`create`视图中的表单生成代码剪切并粘贴到这个新的`_form`视图中：
- en: '[PRE69]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In the `basic/views/rooms/create.php` file, instead of the form code, just
    put the code to render the `_form` view in it:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在`basic/views/rooms/create.php`文件中，而不是放置表单代码，只需在其中放置渲染`_form`视图的代码：
- en: '[PRE70]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Note
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we modify the `create` view, remember to pass `$model` as the second parameter
    to render the `_form` view.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们修改`create`视图时，请记住将`$model`作为第二个参数传递以渲染`_form`视图。
- en: We are ready to build the update flow in order to update the room content from
    a form. Firstly, create an action in `basic/controllers/RoomsController.php` named
    `actionUpdate`, passing `$id` as a parameter that identifies the primary key to
    find the model.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好构建更新流程，以便从表单中更新房间内容。首先，在`basic/controllers/RoomsController.php`中创建一个名为`actionUpdate`的操作，传递`$id`作为参数，该参数用于标识要查找的模型的主键。
- en: 'In this action, we will put some code to get the model based on the `id` primary
    key, check whether the `$_POST` array contains data, and then save the model:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在此操作中，我们将放置一些代码来根据`id`主键获取模型，检查`$_POST`数组是否包含数据，然后保存模型：
- en: '[PRE71]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'This is basically equivalent to the code for the `create` action. Now, create
    the `update` view in `basic/views/rooms/update.php` with the following content:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上等同于`create`操作的代码。现在，在`basic/views/rooms/update.php`中创建一个名为`update`的视图，内容如下：
- en: '[PRE72]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'From the database, check for one existing room and type the `id` value of this
    URL in your browser: `http://hostname/basic/rooms/update?id=id-found`.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中检查一个现有的房间，并在您的浏览器中输入此URL的`id`值：`http://hostname/basic/rooms/update?id=id-found`。
- en: 'For example, if `id` of an existing room is `1`, type this URL in your browser:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果现有房间的`id`为`1`，请在您的浏览器中输入此URL：
- en: '`http://hostname/basic/rooms/update?id=1`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://hostname/basic/rooms/update?id=1`'
- en: This will show a form with the filled in field based on the model attributes'
    content.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个基于模型属性内容填充的字段表单。
- en: 'This example is complete, having built the `detail` view, which shows the content
    of model attributes. Create an action named `actionDetail`, passing `$id` as a
    parameter, which identifies the primary key to find the model:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是完整的，因为它已经构建了`detail`视图，该视图显示了模型属性的 内容。创建一个名为`actionDetail`的操作，传递`$id`作为参数，该参数用于标识要查找的模型的主键：
- en: '[PRE73]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Then, create the `detail` view to display some of the model attributes'' values
    in `basic/views/rooms/detail.php`:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`basic/views/rooms/detail.php`中创建`detail`视图以显示模型一些属性值的某些状态：
- en: '[PRE74]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Now after successfully creating or updating model, the detail view will be displayed
    with the content of some attributes of the model.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建或更新模型后，将显示包含模型一些属性内容的详细视图。
- en: Setting up the GMT time zone
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置GMT时区
- en: It is important to set the default time zone for date/time management.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 设置日期/时间管理的默认时区非常重要。
- en: Usually, when we refer to date/time, do not pay attention to which time zone
    value is being referred to.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当我们提到日期/时间时，不要注意正在引用哪个时区值。
- en: For example, if we live in Rome and want to spend our next holiday in New York,
    when we receive the check-in date/time from the hotel, we must consider which
    time zone time is being referred to (whether local or remote).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们住在罗马，想在纽约度过我们的下一个假期，当我们从酒店收到登机日期/时间时，我们必须考虑所指的是哪个时区的时间（本地或远程）。
- en: When we display a date/time value that could be misunderstood, it is always
    recommended to add a time zone reference to it. The time zone is expressed through
    positive or negative hours compared to a reference that is usually **GMT** (**Greenwich
    Mean Time**).
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们显示可能被误解的日期/时间值时，始终建议添加时区参考。时区通过与通常为**GMT**（**格林威治标准时间**）的参考相比的正负小时数来表示。
- en: For example, if it is 9 p.m. in Rome (GMT +1), in GMT time it will be 8 p.m.
    (GMT +0), 3 p.m. in New York (GMT -5), and finally 12 p.m. in Los Angeles (GMT
    -8).
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果现在是罗马的晚上9点（GMT +1），在GMT时间将是晚上8点（GMT +0），在纽约是下午3点（GMT -5），最后在洛杉矶是中午12点（GMT
    -8）。
- en: Therefore, it is necessary to establish a common shared time value. For this
    purpose, it is advisable to use GMT as the time reference for all values and operations
    on values.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，建立共同的共享时间值是必要的。为此，建议使用GMT作为所有值和值操作的时参考。
- en: 'We need to configure the time zone in two environments:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在两个环境中配置时区：
- en: In an application, set the `timeZone` attribute of a configuration; this will
    set the default time zone for all functions about the date and time
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个应用程序中，设置配置的`timeZone`属性；这将设置所有关于日期和时间的函数的默认时区
- en: Some databases, such as MySQL, do not have internal management of time zones,
    so every value uses the default time zone of the database or the time zone configured
    during connection from the application to the database; we will set the default
    time zone during the connection to the database
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些数据库，如MySQL，没有内部时区管理，因此每个值都使用数据库的默认时区或从应用程序到数据库连接期间配置的时区；我们将在连接到数据库时设置默认时区
- en: 'Complete the first step. Open `basic/config/web.php` and add the `timeZone`
    property with the `GMT` value in the `config` array, for example, after the `basePath`
    property:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 完成第一步。打开`basic/config/web.php`，并在`config`数组中添加`timeZone`属性，值为`GMT`，例如在`basePath`属性之后：
- en: '[PRE75]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The second step is setting the time zone for the database connections, if the
    database, such as MySQL, does not provide it. This is done globally by adding
    this code in the `on afterOpen` event. Open `basic/config/db.php` and append it
    as the last attribute in an array (usually the last attribute is `charset`):'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是设置数据库连接的时区，如果数据库（如MySQL）不提供它。这是通过在`on afterOpen`事件中添加此代码来全局完成的。打开`basic/config/db.php`，并将其作为数组中的最后一个属性（通常最后一个属性是`charset`）附加：
- en: '[PRE76]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: This code means that once the connection with the database is opened, the SQL
    query `SET time_zone = +00:00` will be executed for every connection that we are
    going to establish with the database, and every date/time field value and function
    related to the GMT (+00:00) time zone will be considered.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码意味着一旦与数据库的连接打开，SQL查询`SET time_zone = +00:00`将为我们将要建立的每个数据库连接执行，并且每个与GMT
    (+00:00)时区相关的日期/时间字段值和函数都将被考虑。
- en: 'Let''s make a test. Create a new controller that simply displays the current
    date/time and time zone, in `basic/controllers/TestTimezoneController.php` with
    an action named `actionCheck()`:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一个测试。创建一个新的控制器，它简单地显示当前的日期/时间和时区，在`basic/controllers/TestTimezoneController.php`中，操作名为`actionCheck()`：
- en: '[PRE77]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Point your browser to `http://hostname/basic/web/test-timezone/check`. This
    is what my browser displayed:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向`http://hostname/basic/web/test-timezone/check`。这是我浏览器显示的内容：
- en: '[PRE78]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: And, the local time (in Rome) was 21:53:35, because Rome was then at +02:00
    GMT due to daylight savings time.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，当地时间（在罗马）是21:53:35，因为那时罗马处于+02:00 GMT，由于夏令时。
- en: 'If we comment the `timeZone` property in the app configuration in `basic/config/web.php`,
    we will see the default server time zone that is in my browser:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在`basic/config/web.php`中的应用配置中注释掉`timeZone`属性，我们将看到浏览器中的默认服务器时区：
- en: '[PRE79]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'This confirms that we have changed the default `timezone` property for all
    date/time functions. The last check to perform is on the database. Create a new
    action named `actionCheckDatabase` to verify that the database''s default time
    zone for the current (and every) connection is GMT:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了我们已更改所有日期/时间函数的默认`timezone`属性。最后要执行的是对数据库的检查。创建一个名为`actionCheckDatabase`的新操作，以验证数据库当前（以及每个）连接的默认时区是否为GMT：
- en: '[PRE80]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Point your browser to `http://hostname/basic/web/test-timezone/check-database`.
    This is what my browser displayed:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向 `http://hostname/basic/web/test-timezone/check-database`。这是我的浏览器显示的内容：
- en: '[PRE81]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: And the local time (in Rome) was 22:12:08, because Rome was then at +02:00 GMT.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 当时的本地时间（在罗马）是22:12:08，因为当时罗马在+02:00 GMT。
- en: Remember that, from now on, all date/time information displayed in a database
    refers to the GMT time zone, although this specification was missing (as we can
    see in the previous database's current date/time).
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，从现在起，数据库中显示的所有日期/时间信息都指的是GMT时区，尽管这个规范缺失（如我们在上一个数据库的当前日期/时间中看到的那样）。
- en: Tip
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Another strategy to handle the GMT time zone in a database's date/time column
    is to store the value as a timestamp, which is by definition an integer that indicates
    the number of seconds from 01/01/1970 at 00:00:00 in the GMT (UTC) time zone;
    so it is immediately understandable that field is a date/time with the GMT time
    zone, but remember that any database function applied to it will be executed using
    the database's default time zone.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种处理数据库日期/时间列中GMT时区的方法是将值存储为时间戳，根据定义，它是一个整数，表示从GMT（UTC）时区的1970年1月1日00:00:00开始经过的秒数；因此，可以立即理解该字段是带有GMT时区的日期/时间，但请记住，应用于它的任何数据库函数都将使用数据库的默认时区执行。
- en: Using multiple database connections
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多个数据库连接
- en: Applications can require multiple database connections so that they can send
    and get data from different sources.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可能需要多个数据库连接，以便它们可以从不同的来源发送和获取数据。
- en: Using other database sources is incredibly simple. The only thing to do is to
    add a new database entry in the main configuration and use ActiveRecord support.
    All the operations on records will be transparent for the developer.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其他数据库源非常简单。唯一要做的就是向主配置中添加一个新的数据库条目并使用ActiveRecord支持。所有对记录的操作对开发人员来说都是透明的。
- en: 'Here are some examples of connection strings (dsn) to configure access to other
    databases:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些配置访问其他数据库的连接字符串（dsn）的示例：
- en: 'MySQL and MariaDB: `mysql:host=localhost;dbname=mydatabase`'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MySQL和MariaDB: `mysql:host=localhost;dbname=mydatabase`'
- en: 'SQLite: `sqlite:/path/to/database/file`'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SQLite: `sqlite:/path/to/database/file`'
- en: 'PostgreSQL: `pgsql:host=localhost;port=5432;dbname=mydatabase`'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PostgreSQL: `pgsql:host=localhost;port=5432;dbname=mydatabase`'
- en: 'CUBRID: `cubrid:dbname=demodb;host=localhost;port=33000`'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CUBRID: `cubrid:dbname=demodb;host=localhost;port=33000`'
- en: 'MS SQL Server (via the `sqlsrv` driver): `sqlsrv:Server=localhost;Database=mydatabase`'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MS SQL Server（通过 `sqlsrv` 驱动程序）：`sqlsrv:Server=localhost;Database=mydatabase`
- en: 'MS SQL Server (via the `dblib` driver): `dblib:host=localhost;dbname=mydatabase`'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MS SQL Server（通过 `dblib` 驱动程序）：`dblib:host=localhost;dbname=mydatabase`
- en: 'MS SQL Server (via the `mssql` driver): `mssql:host=localhost;dbname=mydatabase`'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MS SQL Server（通过 `mssql` 驱动程序）：`mssql:host=localhost;dbname=mydatabase`
- en: 'Oracle: `oci:dbname=//localhost:1521/mydatabase`'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Oracle: `oci:dbname=//localhost:1521/mydatabase`'
- en: Example – configuring a second DB connection to export data to a local SQLite
    DB
  id: totrans-441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 配置第二个数据库连接以将数据导出到本地SQLite数据库
- en: We now want to add a new database connection to a SQLite DB. When we use a database,
    we have to make sure that the PDO driver is installed in the system, otherwise
    PHP cannot handle it.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想向SQLite数据库添加一个新的数据库连接。当我们使用数据库时，我们必须确保系统已安装PDO驱动程序，否则PHP无法处理它。
- en: 'Open `basic/config/web.php` and the inner `components` attribute, and append
    a new attribute named `dbSqlite` with the following attributes:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `basic/config/web.php` 并内部的 `components` 属性，然后添加一个名为 `dbSqlite` 的新属性，具有以下属性：
- en: '[PRE82]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: This entry will use a DB SQLite named `db.sqlite`, which we can find in the
    `dirname(__DIR__).'/../web/db.sqlite'` path, under the `/basic/web` folder. If
    this file does not exist, it will be created (if a write permission is present
    in the `/basic/web` folder).
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 此条目将使用名为 `db.sqlite` 的DB SQLite，我们可以在 `/basic/web` 文件夹下的 `dirname(__DIR__).'/../web/db.sqlite'`
    路径中找到它。如果此文件不存在，它将被创建（如果 `/basic/web` 文件夹有写权限）。
- en: Note
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be sure that the `/basic/web` folder is writable, otherwise it will be impossible
    for the framework to create a `db.sqlite` file.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `/basic/web` 文件夹可写，否则框架将无法创建 `db.sqlite` 文件。
- en: Create a new controller to handle actions in this new database. This will be
    put in `/basic/controllers/TestSqliteController.php`.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的控制器来处理这个新数据库中的操作。这将放在 `/basic/controllers/TestSqliteController.php`。
- en: 'Insert the first action named `actionCreateRoomTable` in this new controller,
    which will create the same structure of the `Room` table from MySQL in `dbSqlite`:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新控制器中插入第一个名为 `actionCreateRoomTable` 的操作，这将创建与MySQL中的 `Room` 表相同的结构在 `dbSqlite`：
- en: '[PRE83]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Note
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Pay attention so that in `actionCreateRoomTable`, the database instance is
    taken from: `\Yii::$app->dbSqlite`.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 `actionCreateRoomTable` 中，数据库实例是从：`\Yii::$app->dbSqlite` 获取的。
- en: Point your browser to `http://hostname/basic/web/test-sqlite/create-room-table`
    and create a `db.sqlite` file in `basic/web` and a `room` table in it.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向 `http://hostname/basic/web/test-sqlite/create-room-table` 并在 `basic/web`
    中创建一个 `db.sqlite` 文件以及其中的 `room` 表。
- en: As we have mentioned before, if the PDO driver is correctly installed, a blank
    page with the **Room table created in dbSqlite** text will be displayed.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果 PDO 驱动程序正确安装，将显示一个空白页面，上面有 **Room table created in dbSqlite** 文本。
- en: Now we want to clone the room table from MySQL to SQLite to make a backup of
    this table. We need to save the records from MySQL to SQLite and verify the data
    stored to display it in a table.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想将 MySQL 中的房间表克隆到 SQLite 中以备份数据表。我们需要将 MySQL 中的记录保存到 SQLite 中，并验证存储的数据以在表中显示。
- en: 'Create a new action named `actionBackupRoomTable()` that executes these steps:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `actionBackupRoomTable()` 的新动作，执行以下步骤：
- en: Create a `room` table (if it does not exist).
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `room` 表（如果不存在）。
- en: Delete all the records from the room in `dbSqlite` (alias truncate).
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `dbSqlite`（别名 truncate）中删除房间中的所有记录。
- en: Load all the records from the room table in MySQL (using ActiveRecord).
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ActiveRecord 从 MySQL 中的房间表中加载所有记录。
- en: Insert every single record from MySQL into SQLite.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 MySQL 中的每个记录插入到 SQLite 中。
- en: Render the view to display data from SQLite with the table (to verify that the
    copy succeeded).
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染视图以显示 SQLite 中的数据（以验证复制是否成功）。
- en: 'The content of the `actionBackupRoomTable()` action is:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '`actionBackupRoomTable()` 动作的内容是：'
- en: '[PRE84]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Finally, create a view `backupRoomTable` in `basic/views/test-sqlite/backupRoomTable.php`
    with the following content to display data from `dbSqlite`:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `basic/views/test-sqlite/backupRoomTable.php` 中创建一个名为 `backupRoomTable`
    的视图，内容如下以显示 `dbSqlite` 中的数据：
- en: '[PRE85]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Navigate your browser to `http://hostname/basic/web/test-sqlite/backup-room-table`,
    which should display a similar output to this:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器导航到 `http://hostname/basic/web/test-sqlite/backup-room-table`，它应该显示与此类似的输出：
- en: '![Example – configuring a second DB connection to export data to a local SQLite
    DB](img/B04656_05_10.jpg)'
  id: totrans-467
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 配置第二个数据库连接以将数据导出到本地 SQLite 数据库](img/B04656_05_10.jpg)'
- en: The list of rooms from the SQLite database
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 数据库中的房间列表
- en: We can now download the `db.sqlite` file from `http://hostname/basic/web/db.sqlite`
    to preserve a backup copy of the room table!
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从 `http://hostname/basic/web/db.sqlite` 下载 `db.sqlite` 文件，以保留房间表的备份副本！
- en: Summary
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you mastered how to configure a database connection and execute
    SQL queries from scratch with DAO support of the framework. Next, you found out
    how to use Gii and got to know about the advantages it has in creating models
    from the database table structure. Gii creates models that extend the ActiveRecord
    class and through its use, you finally learned to manipulate data. All the examples
    are accompanied with a visualization grid that shows data, which is graphically
    enhanced by Bootstrap's presence in Yii2.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您掌握了如何从头配置数据库连接并使用框架的 DAO 支持执行 SQL 查询。接下来，您发现了如何使用 Gii，并了解了它在从数据库表结构创建模型方面的优势。Gii
    创建扩展 ActiveRecord 类的模型，通过使用它，您最终学会了如何操作数据。所有示例都附有显示数据的可视化网格，Bootstrap 的存在增强了 Yii2
    的图形效果。
- en: We carefully analyzed the common topic of tables' relationships, which must
    be managed in models and then displayed in views.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仔细分析了表关系这一常见主题，必须在模型中管理并在视图中显示。
- en: At the end of the chapter, after you learned to manipulate data with ActiveRecord,
    you wrote a complete flow to save data from a HTML form to a database. Finally,
    you learned the importance of setting the GMT time zone in date/time fields and
    using other database sources in the same application in order to make a backup
    of the primary database.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您学会了使用 ActiveRecord 操作数据后，编写了一个完整的流程，将数据从 HTML 表单保存到数据库中。最后，您学习了在日期/时间字段中设置
    GMT 时区以及在同一应用程序中使用其他数据库源以备份数据库的重要性。
- en: In the next chapter, you will learn to use and customize the grid widget to
    improve data visualization.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用和自定义网格小部件以改进数据可视化。
