["```php\n    composer require yiisoft/yii2-authclient\n\n    ```", "```php\n    'components' => [\n        // ...\n        'authClientCollection' => [\n            'class' => 'yii\\authclient\\Collection',\n            'clients' => [\n                'google' => [\n                    'class' =>'yii\\authclient\\clients\\GoogleOpenId'\n                ],\n                'github' => [\n                    'class' => 'yii\\authclient\\clients\\GitHub',\n                    'clientId' => '87f0784aae2ac48f78a',\n                    'clientSecret' =>'fb5953a54dea4640f3a70d8abd96fbd25592ff18',\n                 ],\n                    // etc.\n            ],\n        ],\n    ],\n    ```", "```php\n    use yii\\authclient\\ClientInterface;\n\n    public function actions()\n    {\n        return [\n            // ...\n            'auth' => [\n                'class' => 'yii\\authclient\\AuthAction',\n                'successCallback' => [$this, 'onAuthSuccess'],\n            ],\n        ];\n    }\n\n    public function onAuthSuccess(ClientInterface $client)\n    {\n        $attributes = $client->getUserAttributes();\n        \\yii\\helpers\\VarDumper::dump($attributes, 10, true);\n        exit;\n    }\n    ```", "```php\n    <div class=\"site-login\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <div class=\"panel panel-default\">\n            <div class=\"panel-body\">\n                <?= yii\\authclient\\widgets\\AuthChoice::widget(['baseAuthUrl' => ['site/auth'],\n                'popupMode' => false,\n                ]) ?>\n            </div>\n        </div>\n\n        <p>Please fill out the following fields to login:</p>\n       ...\n    </div>\n    ```", "```php\n    [\n        'login' => 'Name'\n        'id' => 0000000\n        'avatar_url' =>'https://avatars.githubusercontent.com/u/0000000?v=3'\n        'gravatar_id' => ''\n        'url' => 'https://api.github.com/users/Name'\n        'html_url' => 'https://github.com/Name'\n        ...\n        'name' => 'YourName'\n        'blog' =>site.com'\n        'email => mail@site.com'\n        ...\n    ]\n    ```", "```php\n    'components' => [\n        // ...\n        'mailer' => [\n            'class' => 'yii\\swiftmailer\\Mailer',\n            'useFileTransport' => true,\n        ],\n        // ...\n    ],\n    ```", "```php\n    <?php\n\n        namespace app\\commands;\n\n        use yii\\console\\Controller;\n        use Yii;\n\n        class MailController extends Controller\n        {\n            public function actionSend()\n            {\n                Yii::$app->mailer->compose()\n                ->setTo('to@yii-book.app')\n                ->setFrom(['from@yii-book.app' => Yii::$app->name])\n                ->setSubject('My Test Message')\n                ->setTextBody('My Text Body')\n                ->send();\n        }\n    }\n    ```", "```php\n    php yii mail/send\n\n    ```", "```php\n    'mailer' => [\n        'class' => 'yii\\swiftmailer\\Mailer',\n    ],\n    ```", "```php\n     ->setTo('my@real-email.com')\n    ```", "```php\n    php yii mail/send\n\n    ```", "```php\n    <?php\n    /* @var $this \\yii\\web\\View */\n    /* @var $message \\yii\\mail\\MessageInterface */\n    /* @var $content string */\n    ?>\n    <?php $this->beginPage() ?>\n    <?php $this->beginBody() ?>\n    <?= $content ?>\n    <?php $this->endBody() ?>\n    <?php $this->endPage() ?>\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n    /* @var $name string */\n    ?>\n\n    <p>Hello, <?= Html::encode($name) ?>!</p>\n    ```", "```php\n    <?php\n        use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n    /* @var $name string */\n    ?>\n\n         Hello, <?= Html::encode($name) ?>!\n    ```", "```php\n    <?php\n\n        namespace app\\commands;\n\n        use yii\\console\\Controller;\n        use Yii;\n\n        class MailController extends Controller\n        {\n            public function actionSendHtml()\n            {\n                $name = 'John';\n\n                Yii::$app->mailer->compose('message-html',['name' => $name])\n                ->setTo('to@yii-book.app')\n                ->setFrom(['from@yii-book.app' => Yii::$app->name])\n                ->setSubject('My Test Message')\n                ->send();\n            }\n\n            public function actionSendCombine()\n            {\n                $name = 'John';\n\n                Yii::$app->mailer->compose(['html' => \n                'message-html', 'text' => 'message-text'], [\n                'name' => $name,\n                ])\n                ->setTo('to@yii-book.app')\n                ->setFrom(['from@yii-book.app' \n                    => Yii::$app->name])\n                ->setSubject('My Test Message')\n                ->send();\n            }\n    }\n    ```", "```php\n    php yii mail/send-html\n    php yii mail/se\n    nd-combine\n\n    ```", "```php\n    'mailer' => [\n        'class' => 'yii\\swiftmailer\\Mailer',\n        'transport' => [\n            'class' => 'Swift_SmtpTransport',\n            'host' => 'smtp.gmail.com',\n            'username' => 'username@gmail.com',\n            'password' => 'password',\n            'port' => '587',\n            'encryption' => 'tls',\n        ],\n    ],\n    ```", "```php\n    Yii::$app->mailer->compose()\n        ->setTo('to@yii-book.app')\n        ->setFrom('username@gmail.com')\n        ->setSubject('My Test Message')\n        ->setTextBody('My Text Body')\n        ->send();\n    ```", "```php\nclass MailController extends Controller\n{\n    public function actionSendAttach()\n    {\n        Yii::$app->mailer->compose()\n            ->setTo('to@yii-book.app')\n            ->setFrom(['from@yii-book.app' => Yii::$app->name])\n            ->setSubject('My Test Message')\n            ->setTextBody('My Text Body')\n            ->attach(Yii::getAlias('@app/README.md'))\n            ->send();\n    }\n}\n```", "```php\n<img src=\"img/<?= $message->embed($imageFile); ?>\">\n```", "```php\n    <?php\n    /**\n     * @var $faker \\Faker\\Generator\n     * @var $index integer\n     */\n        return [\n            'name' => $faker->firstName,\n            'phone' => $faker->phoneNumber,\n            'city' => $faker->city,\n            'about' => $faker->sentence(7, true),\n            'password' => Yii::$app->getSecurity()\n            ->generatePasswordHash('password_' . $index),\n            'auth_key' => Yii::$app->getSecurity()\n            ->generateRandomString(),\n        ];\n    ```", "```php\n    php tests/codeception/bin/yii fixture/generate users --count=2\n\n    ```", "```php\n    return [\n        [\n            'name' => 'Isadore',\n            'phone' => '952.877.8545x190',\n            'city' => 'New Marvinburgh',\n            'about' => 'Ut quidem voluptatem itaque veniam voluptas dolores.',\n            'password' => '$2y$13$Fi3LOl/sKlomUH.DLgqBkOB/uCLmgCoPPL1KXiW0hffnkrdkjCzAC',\n            'auth_key' => '1m05hlgaAG8zfm0cyDyoRGMkbQ9W6hj1',\n        ],\n        [\n            'name' => 'Raleigh',\n            'phone' => '1-655-488-3585x699',\n            'city' => 'Reedstad',\n            'about' => 'Dolorem quae impedit tempore libero doloribus nobis dicta tempora facere.',\n            'password' => '$2y$13$U7Qte5Y1jVLrx/pnhwdwt.1uXDegGXuNVzEQyUsb65WkBtjyjUuYm',\n            'auth_key' => 'uWWJDgy5jNRk6KjqpxS5JuPv0OHearqE',\n        ],\n    ],\n    ```", "```php\n    <?php\n        namespace tests\\codeception\\faker\\providers;\n\n        use Faker\\Provider\\Base;\n\n        class UserStatus extends Base\n        {\n            public function userStatus()\n            {\n                return $this->randomElement([0, 10, 20, 30]);\n            }\n        }\n    ```", "```php\n    return [\n        'controllerMap' => [\n            'fixture' => [\n                'class' => 'yii\\faker\\FixtureController',\n                'fixtureDataPath' => '@tests/codeception/fixtures',\n                'templatePath' => '@tests/codeception/templates',\n                'namespace' => 'tests\\codeception\\fixtures',\n                'providers' => [\n                    'tests\\codeception\\faker\\providers\\UserStatus',\n                ],\n            ],\n        ],\n        // ...\n    ];\n    ```", "```php\n    <?php\n    /**\n     * @var $faker \\Faker\\Generator\n     * @var $index integer\n     */\n        return [\n            'name' => $faker->firstName,\n            'status' => $faker->userStatus,\n        ];\n    ```", "```php\n    php tests/codeception/bin/yii fixture/generate users --count=2\n\n    ```", "```php\n    return [\n        [\n            'name' => 'Christelle',\n            'status' => 30,\n        ],\n        [\n            'name' => 'Theo',\n            'status' => 10,\n        ],\n    ];\n    ```", "```php\n    composer require yiisoft/yii2-imagine\n\n    ```", "```php\n$imagine = new Imagine\\Gd\\Imagine();\n// or\n$imagine = new Imagine\\Imagick\\Imagine();\n// or\n$imagine = new Imagine\\Gmagick\\Imagine();\n```", "```php\n$imagine = \\yii\\imagine\\Image::getImagine();\n```", "```php\n<?php\n    use yii\\imagine\\Image;\n    Image::crop('path/to/image.jpg', 100, 100, ManipulatorInterface::THUMBNAIL_OUTBOUND)\n    ->save('path/to/destination/image.jpg', ['quality' => 90]);\n```", "```php\n    composer require yiisoft/yii2-mongodb\n\n    ```", "```php\n    mongo\n    > use mydatabase\n\n    ```", "```php\n    return [\n        // ...\n        'components' => [\n            // ...\n            'mongodb' => [\n                'class' => '\\yii\\mongodb\\Connection',\n                'dsn' =>\n                    'mongodb://localhost:27017/mydatabase',\n            ],\n        ],\n    ];\n    ```", "```php\n    return [\n        // ...\n        'controllerMap' => [\n            'mongodb-migrate' =>\n            'yii\\mongodb\\console\\controllers\\MigrateController'\n        ],\n    ];\n    ```", "```php\n    php yii mongodb-migrate/create create_customer_collection\n\n    ```", "```php\n    <?php\n\n        use yii\\mongodb\\Migration;\n\n        class m160201_102003_create_customer_collection extends Migration\n        {\n            public function up()\n            {\n                $this->createCollection('customer');\n            }\n\n            public function down()\n            {\n                $this->dropCollection('customer');\n            }\n        }\n    ```", "```php\n    php yii mongodb-migrate/up\n\n    ```", "```php\n    if (YII_ENV_DEV) {\n        // configuration adjustments for 'dev' environment\n        $config['bootstrap'][] = 'debug';\n        $config['modules']['debug'] = [\n            'class' => 'yii\\debug\\Module',\n            'panels' => [\n                'mongodb' => [\n                    'class' => 'yii\\mongodb\\debug\\MongoDbPanel',\n                ],\n            ],\n        ];\n\n        $config['bootstrap'][] = 'gii';\n        $config['modules']['gii'] = [\n            'class' => 'yii\\gii\\Module',\n            'generators' => [\n                'mongoDbModel' => [\n                    'class' => 'yii\\mongodb\\gii\\model\\Generator'\n                ]\n            ],\n        ];\n    }\n    ```", "```php\n    <?php\n\n        namespace app\\models;\n\n        use Yii;\n        use yii\\mongodb\\ActiveRecord;\n\n    /**\n    * This is the model class for collection \"customer\".\n    *\n    * @property \\MongoId|string $_id\n    * @property mixed $name\n    * @property mixed $email\n    * @property mixed $address\n    * @property mixed $status\n    */\n        class Customer extends ActiveRecord\n        {\n            public static function collectionName()\n            {\n                return 'customer';\n            }\n\n            public function attributes()\n            {\n                return [\n                   '_id',\n                   'name',\n                   'email',\n                   'address',\n                   'status',\n                ];\n            }\n\n            public function rules()\n            {\n                return [\n                [['name', 'email', 'address', 'status'], 'safe']\n                ];\n            }\n\n            public function attributeLabels()\n            {\n                return [\n                    '_id' => 'ID',\n                    'name' => 'Name',\n                    'email' => 'Email',\n                    'address' => 'Address',\n                    'status' => 'Status',\n                ];\n            }\n        }\n    ```", "```php\n$collection = Yii::$app->mongodb->getCollection('customer');$collection->insert(['name' => 'John Smith', 'status' => 1]);\n```", "```php\nuse yii\\mongodb\\Query;\n$query = new Query;\n// compose the query\n$query->select(['name', 'status'])\n    ->from('customer')\n    ->limit(10);\n// execute the query\n$rows = $query->all();\n```", "```php\n$query = new \\yii\\mongodb\\Query;\n$row = $query->from('item')\n    ->where(['_id' => $id]) // implicit typecast to \\MongoId\n    ->one();\n```", "```php\n$row = $query->from('customer')->one();\nvar_dump($row['_id']); // outputs: \"object(MongoId)\"var_dump((string)$row['_id']);\n```", "```php\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\Customer;\n$provider = new ActiveDataProvider([\n    'query' => Customer::find(),\n    'pagination' => [\n        'pageSize' => 10,\n    ]\n]);\n```", "```php\n    compose\n    r require yiisoft/yii2-elasticsearch\n\n    ```", "```php\nreturn [\n    //....\n    'components' => [\n        'elasticsearch' => [\n            'class' => 'yii\\elasticsearch\\Connection',\n            'nodes' => [\n                ['http_address' => '127.0.0.1:9200'],\n                // configure more hosts if you have a cluster\n            ],\n        ],\n    ]\n];\n```", "```php\nuse  \\yii\\elasticsearch\\Query;\n\n$query = new Query;\n$query->fields('id, name')\n    ->from('myindex', 'users')\n    ->limit(10);\n\n$query->search();\n```", "```php\n$command = $query->create\nCommand();\n$rows = $command->search();\n\n```", "```php\nclass Buyer extends \\yii\\elasticsearch\\ActiveRecord\n{\n    public function attributes()\n    {\n        return ['id', 'name', 'address', 'registration_date'];\n    }\n    public function getOrders()\n    {\n        return $this->hasMany(Order::className(), ['buyer_id' => 'id'])->orderBy('id');\n    }\n}\n```", "```php\nclass Order extends \\yii\\elasticsearch\\ActiveRecord\n{\n    public function attributes()\n    {\n        return ['id', 'user_id', 'date'];\n    }\n\n    public function getBuyer()\n    {\n        return $this->hasOne(Customer::className(), ['id' => 'buyer_id']);\n    }\n}\n```", "```php\n$buyer = new Buyer();\n$buyer>primaryKey = 1; // it equivalent to $customer->id = 1;\n$buyer>name = 'test';\n$buyer>save();\n\n$buyer = Buyer::get(1);\n\n$buyer = Buyer::mget([1,2,3]);\n\n$buyer = Buyer::find()->where(['name' => 'test'])->one();\n```", "```php\n$result = Article::find()->query([\"match\" => [\"title\" => \"yii\"]])->all();\n        $query = Article::find()->query([\n        \"fuzzy_like_this\" => [\n            \"fields\" => [\"title\", \"description\"],\n            \"like_text\" => \"Some search text\",\n            \"max_query_terms\" => 12\n        ]\n]);\n$query->all();\n```", "```php\n$query->addStatisticalFacet('click_stats', ['field' => 'visit_count']);\n$query->search();\n```", "```php\nif (YII_ENV_DEV) {\n    // configuration adjustments for 'dev' environment\n    $config['bootstrap'][] = 'debug';\n    $config['modules']['debug'] =  [\n        'class' => 'yii\\debug\\Module',\n        'panels' => [\n            'elasticsearch' => [\n                'class' => 'yii\\elasticsearch\\DebugPanel',\n            ],\n        ],\n    ];\n\n    $config['bootstrap'][] = 'gii';\n    $config['modules']['gii'] = 'yii\\gii\\Module';\n}\n```", "```php\n    php yii migrate/create create_customer_table\n\n    ```", "```php\n    use yii\\db\\Schema;\n    use yii\\db\\Migration;\n    class m160201_154207_create_customer_table extends Migration\n    {\n        public function up()\n        {\n            $tableOptions = null;\n            if ($this->db->driverName === 'mysql') {\n                $tableOptions = \n                    'CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE=InnoDB';\n           }\n            $this->createTable('{{%customer}}', [\n                'id' => Schema::TYPE_PK,\n                'name' => Schema::TYPE_STRING . ' NOT NULL',\n                'email' => Schema::TYPE_STRING . ' NOT NULL',\n                'address' => Schema::TYPE_STRING,\n            ], $tableOptions);\n        }\n\n        public function down()\n        {\n            $this->dropTable('{{%customer}}');\n        }\n    }\n    ```", "```php\n    php yii migrate/up\n    ```", "```php\n    if (YII_ENV_DEV) {\n        $config['bootstrap'][] = 'gii';\n        $config['modules']['gii'] = [\n            'class' => 'yii\\gii\\Module',\n        ];\n    }\n    ```", "```php\n    defined('YII_ENV') or define('YII_ENV', 'dev');\n    ```", "```php\n    $config['modules']['gii'] = [\n        'class' => 'yii\\gii\\Module',\n        allowedIPs = ['127.0.0.1', '::1', '192.168.0.*'],\n    ];\n    ```", "```php\n    return [\n        // ...\n        'modules' => [\n            'gii' => 'yii\\gii\\Module',\n        ],\n        // ...\n    ];\n    ```", "```php\n    php yii help gii\n    php yii help gii/model\n\n    ```", "```php\n    php yii gii/model --tableName=customer --modelClass=Customer --useTablePrefix=1\n\n    ```", "```php\n    php yii gii/crud --modelClass=app\\\\models\\\\Customer \\\n        --searchModelClass=app\\\\models\\\\CustomerSearch \\\n        --controllerClass=app\\\\controllers\\\\CustomerController\n    ```", "```php\n<?php\n    use yii\\widgets\\Pjax;\n?>\n<?php Pjax::begin(); ?>\n    <?= GridView::widget([...]); ?>\n<?php Pjax::end(); ?>\n```", "```php\n<div id=\"w1\">\n    <div id=\"w2\" class=\"grid-view\">...</div>\n</div>\n\n<script type=\"text/javascript\">jQuery(document).ready(function () {\n    jQuery(document).pjax(\"#w1 a\", \"#w1\", {...});\n});</script>\n```", "```php\npublic function actionIndex()\n{\n    $dataProvider = …;\n\n    if (Yii::$app->request->isPjax) {\n        return $this->renderPartial('_items', [\n            'dataProvider' => $dataProvider,\n        ]);\n    } else {\n        return $this->render('index', [\n            'dataProvider' => $dataProvider,\n        ]);\n    }\n}\n```", "```php\n<nav id=\"w0\">...</nav> // Main navigation\n<ul id=\"w1\">...</ul> // Breadcrumbs widget\n<div id=\"w2\">...</div> // Pjax widget\n```", "```php\n<div id=\"w0\">...</div> // Pjax widget\n```", "```php\n<?php Pjax::begin(['id' => 'countries']) ?>\n    <?= GridView::widget([...]); ?>\n<?php Pjax::end() ?>\n```", "```php\n<?php\nuse \\yii\\widgets\\Pjax\nuse \\yii\\widgets\\ActiveForm;\n\n<?php yii\\widgets\\Pjax::begin(['id' => 'my-block']) ?>\n    <?php $form = ActiveForm::begin(['options' => [\n        'data-pjax' => true,\n    ]]); ?> \n        <?= $form->field($model, 'name') ?>\n    <?php ActiveForm::end(); ?>\n<?php Pjax::end(); ?>\n```", "```php\n<?php $this->registerJs('\n    $(\"#my-block\").on(\"pjax:complete\", function() {\n        alert('Pjax is completed');\n    });\n'); ?>\n```", "```php\n<?php $this->registerJs('\n    $(\"#my-button\").on(\"click\", function() {\n        $.pjax.reload({container:\"#my-block\"});\n    });\n'); ?>\n```", "```php\n    composer require yiisoft/yii2-redis\n\n    ```", "```php\nreturn [\n    //....\n    'components' => [\n        'redis' => [\n            'class' => 'yii\\redis\\Connection',\n            'hostname' => 'localhost',\n            'port' => 6379,\n            'database' => 0,\n        ],\n    ]\n];\n```", "```php\nYii::$app->redis->executeCommand('hmset', ['test_collection', 'key1', 'val1', 'key2', 'val2']);\n\n```", "```php\nYii::$app->redi\ns->hmset('test_collection', 'key1', 'val1', 'key2', 'val2')\n\n```", "```php\nclass Customer extends \\yii\\redis\\ActiveRecord\n{\n    public function attributes()\n    {\n        return ['id', 'name', 'address', 'registration_date'];\n    }\n    public function getOrders()\n    {\n        return $this->hasMany(Order::className(), ['customer_id' => 'id']);\n    }\n}\n```", "```php\n$customer = new Customer();\n$customer->name = 'test';\n$customer->save();\necho $customer->id; // id will automatically be incremented if not set explicitly\n// find by query\n$customer = Customer::find()->where(['name' => 'test'])->one();\n```"]