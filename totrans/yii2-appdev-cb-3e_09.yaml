- en: Chapter 9. Performance Tuning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Following best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeding up session handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cache dependencies and chains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling an application with Yii
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging HTTP caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining and minimizing assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Yii2 on HHVM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yii is one of the fastest frameworks available. Nevertheless, when developing
    and deploying an application, it is good to have some extra performance for free,
    and to follow the best practices for the application itself. In this chapter,
    you will see how to configure Yii to gain extra performance. In addition, you
    will learn some best practices for developing an application that will run smoothly
    until you have very high loads.
  prefs: []
  type: TYPE_NORMAL
- en: Following best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will see how to configure Yii2 for the best performance
    and some additional principles of building responsive applications. These principles
    are both general and Yii-related. Therefore, we will be able to apply some of
    these even without using Yii2.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Update your PHP to the latest stable version. Major releases of PHP may bring
    significant performance improvements. Turn off the debug mode and set the `prod`
    environment. This can be done by editing `web/index.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: In the `yii2-app-advanced` application skeleton, you can use the
    shell command `php init` and opt production environment for loading optimized
    `index.php` and configuration files.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enable the `cache` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can use any cache storage instead of `FileCache`. Also, you can register
    multiple cache application components and use `Yii::$app->cache` and `Yii::$app->cache2`
    for different data types:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The framework uses the `cache` component by default in its own classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enable table schema caching for the `db` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use plain arrays instead of Active Record objects for listing sets of elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `each()` instead of `all()` in `foreach` for a large count of results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because Composer''s autoloader is used to include most third-party class files,
    you should consider optimizing it by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When `YII_DEBUG` is set to `false`, Yii turns OFF all the trace level logging
    and uses less error handling code. Also, when you set `YII_ENV` to `prod` your
    application does not load Yii and Debug panel modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting `schemaCachingDuration` to a number of seconds allows caching the database
    schema used by Yii''s Active Record. This is highly recommended for production
    servers and it significantly improves the Active Record performance. In order
    for it to work, you need to properly configure the `cache` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Enabling the cache also has a positive effect on other Yii components. For example,
    Yii router or urlManager starts to cache routes.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can get into a situation where the preceding settings will not
    help to achieve a sufficient performance level. In most cases, it means that either
    the application itself is a bottleneck or you need more hardware.
  prefs: []
  type: TYPE_NORMAL
- en: '**Server-side performance is just a part of the big picture**: Server-side
    performance is only one of the things that affect the overall performance. By
    optimizing the client side such as serving CSS, images, and JavaScript files,
    proper caching and minimizing the amount of HTTP-requests can give a good visual
    performance gain even without optimizing the PHP code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Things to be done without using Yii**: Some things are best done without
    Yii. For example, image resizing on-the-fly is better in a separate PHP script
    in order to avoid the extra overhead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Record versus Query Builder and SQL**: Use Query Builder or SQL in
    performance-critical application parts. Generally, AR is most useful when adding
    and editing records, as it adds a convenient validation layer, and is less useful
    when selecting records.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always check for slow queries first**: Database can become a bottleneck in
    a second if a developer accidentally forgets to add an index to a table that is
    being read often or vice versa, or adds too many indexes to a table we are writing
    to very often. The same goes for selecting unnecessary data and unneeded JOINs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cache or save results of heavy processes**: If you can avoid running a heavy
    process in every page load, it is better to do so. For example, it is a good practice
    to save or cache results of parsing the markdown text, purify it (this is a very
    resource-intensive process) once, and then to use the ready-to-display HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handling too much processing**: Sometimes there is too much processing to
    be handled immediately. It can be building complex reports or simply sending e-mails
    (if your project is heavily loaded). In this case, it is better to put it into
    a queue and process it later using cron or other specialized tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about performance tuning and caching refer to the following
    URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeding up session handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Native session handling in PHP is fine in most cases. There are at least two
    possible reasons why you will want to change the way sessions are handled:'
  prefs: []
  type: TYPE_NORMAL
- en: When using multiple servers, you need to have common session storage for both
    servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default PHP sessions use files, so the maximum performance possible is limited
    by disk I/O.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default PHP sessions are blocking concurrent session storages. In this recipe,
    we will see how to use efficient storage for Yii sessions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html),
    and install the Memcache server and the `memcache` PHP extension.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will stress-test the website using the Apache `ab` tool. It is distributed
    with Apache binaries, so if you are using Apache, you will find it inside the
    `bin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command replacing your website with the actual hostname you
    are using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will send 1,000 requests, five at a time, and will output stats as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are interested in the requests-per-second metric. The number means that the
    website can process 91.24 requests per second if there are five requests at a
    time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that debuging is not turned off since we are interested in changes to the
    session handling speed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now add the following to the `/config/web.php` components section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `ab` again with the same settings. This time, you should get better results.
    In my case, it was 139.07 requests per second. This means `Memcache`, as a session
    handler, performed 52% better than the default file-based session handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't rely on the exact results provided here. It all depends on software versions,
    settings, and hardware used. Always try to run all tests yourself in an environment
    where you are going to deploy your application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can get a significant performance gain by choosing the right session handling
    backend. Yii supports more caching backends out-of-the-box, including WinCache,
    XCache, and Zend data cache, which comes with the Zend Server. Moreover, you can
    implement your own cache backend to use fast noSQL storage, such as Redis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Yii uses native PHP sessions; this means that the filesystem is
    used in most cases. A filesystem cannot deal with high concurrency efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Memcache or other platforms perform fine in the following situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding config section, we instruct Yii to use `CacheSession` as a
    session handler. With this component, we can delegate session handling to the
    cache component specified in `cache`. This time we are using `MemCache`.
  prefs: []
  type: TYPE_NORMAL
- en: When using a memcached backend, you should take into account the fact that when
    using these solutions the application user can possibly lose the session if the
    maximum cache capacity is reached.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that, when using a cache backend for a session, you cannot rely on a session
    as a temporary data storage, since then there will be no memory to store more
    data in memcached. In such a case, this will just purge all data or delete some
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using multiple servers, you cannot use file storage. There is no
    way to share the session data between servers. In the case of memcached, it is
    easy because it can be easily accessed from as many servers as you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, for sharing the session data you can use `DbSession`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a new table in your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a good idea to close the session as soon as possible. If you're not going
    to store anything in the session during the current request, you can even close
    it at the very beginning of your controller action. This way, even when using
    files as storage your application should be fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about performance and caching refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cache dependencies and chains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii supports many cache backends, but what really makes the Yii cache flexible
    is the dependency and dependency chaining support. There are situations when you
    cannot simply cache data for an hour because the information cached can be changed
    at any time.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to cache a whole page and still always get fresh
    data when it is updated. The page will be of the dashboard-type and will show
    the five latest articles added and a total calculated for an account.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that an operation cannot be edited as it is added, but an article can be.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate the caching component in `config/web.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set up a fresh database and configure it into `config/db.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate models for the account and article tables using Yii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `protected/controllers/DashboardController.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `views/dashboard/index.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `dashboard/random-operation` and `dashboard/random-article` several times.
    Then, run `dashboard/index` and you should see a screen similar to the one shown
    in the following screenshot:![Getting ready](img/image00499.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the number of database queries in the debug panel at the bottom of
    the page:![Getting ready](img/image00508.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'See a query list:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00516.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to modify the controller code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is it. Now, after loading `dashboard/index` several times, you will get
    only one simple query in the latest snapshot, as shown in the following screenshot:![How
    to do it…](img/image00483.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, try to run either `dashboard/random-operation` or `dashboard/random-article`
    and refresh `dashboard/index` after that. The data should change as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00533.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to achieve maximum performance while doing minimal code modification,
    we use a full-page cache using a filter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code means that we apply a full-page cache to the `index` action.
    The page will be cached for a year and the cache will refresh if one of the dependency
    data changes. Therefore, in general, the dependency works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first run gets the fresh data as described in the dependency, saves it for
    future reference, and updates the cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It gets the fresh data as described in dependency, gets the saved data, and
    then compares the two
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If they are equal, it uses the cached data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, it updates the cache, uses the fresh data, and saves the fresh dependency
    data for future reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our case, two dependency types are used—tag and DB. A tag dependency marks
    data with the custom string tag and checks it to decide if we need to invalidate
    the cache, while a DB dependency uses the SQL query result for the same purpose.
  prefs: []
  type: TYPE_NORMAL
- en: The question that you have now is probably, "Why have we used DB for one case
    and tags for another?" That is a good question!
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal of using the DB dependency is to replace heavy calculations and select
    a light query that gets as little data as possible. The best thing about this
    type of dependency is that we don''t need to embed any additional logic in the
    existing code. In our case, we can use this type of dependency for account operations,
    but cannot use it for articles as the article content can be changed. Therefore,
    for articles, we set a global tag named article which basically means that we
    can manually call the following when we want to invalidate total the article cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about caching and using cache dependencies, refer to
    [http://www.yiiframework.com/doc-2.0/guide-caching-overview.html](http://www.yiiframework.com/doc-2.0/guide-caching-overview.html)
  prefs: []
  type: TYPE_NORMAL
- en: Profiling an application with Yii
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If all of the best practices for deploying a Yii application are applied and
    you still do not have the performance you want, then most probably there are some
    bottlenecks with the application itself. The main principle while dealing with
    these bottlenecks is that you should never assume anything and always test and
    profile the code before trying to optimize it.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will try to find bottlenecks in the Yii2 mini application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up your database connection and apply the following migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate models for each table in Yii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the following console command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And execute it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `ArticleController` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `views/article/index.php` view as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add `views/article/_item.php`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to profile an application with Yii:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the articles page:![How to do it…](img/image00428.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `views/article/index.php` file and add profiler calls before and after
    the `ListView` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now refresh the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Expand the debug panel at the bottom of page and click on the timing badge (**73
    ms** in our case):![How to do it…](img/image00384.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now examine the **Profiling** report:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00391.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We can see that our articles block has taken close to 40 milliseconds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open our controller and add eager loading for article''s `category` relation
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go back to the site, refresh the page, and open the **Profiling** report again:![How
    to do it…](img/image00492.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right now the articles listing has taken close to 25 milliseconds because the
    application makes fewer SQL queries with eager loading of related models.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can enclose any fragment of source code with `Yii::beginProfile` and `Yii::endProfile`
    calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: After executing the page, you can see the report with all timings on the **Profiling**
    page of the debug module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you can use nested profiling calls as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: Take care with correct opening and closing calls in this case and
    correct block naming. If you the miss `Yii::endProfile` call or switch the order
    of `Yii::endProfile(''inner'')` and `Yii::endProfile(''outer'')`, performance
    profiling will not work.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about logging refer to the following URL: [http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html#performance-profiling](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html#performance-profiling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'About tuning of the application performance refer to the following URL: [http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-performance-tuning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging HTTP caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of only server-side caching implementation you can use client-side caching
    via specific HTTP-headers.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover full-page caching on the basis of the `Last-Modified`
    and `ETag` headers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create and run migration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `Article` model as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a blog controller with the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `views/blog/index.php` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `views/blog/view.php` view file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to leverage HTTP caching:'
  prefs: []
  type: TYPE_NORMAL
- en: Access this URL [http://yii-book.app/index.php?r=blog/create](http://yii-book.app/index.php?r=blog/create)
    three times to generate three articles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the following blog page:![How to do it…](img/image00394.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the developer console in your browser and see the `200 OK` response status
    for each reloading of the blog page:![How to do it…](img/image00456.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `BlogController` and attach the following behaviors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, reload the page a few times and check that the server returns the `304
    Not Modified` status instead of `200 OK`:![How to do it…](img/image00530.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the relevant page using the following URL to update random articles: `http://yii-book.app/index.php?r=blog/update`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After updating the blog page, check that the server returns `200 OK` the first
    time and `304 Not Modified` thereafter, and verify that you see the new updated
    time on the page:![How to do it…](img/image00427.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open any page from our article, as follows:![How to do it…](img/image00502.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the server returns `200 OK` the first time and `304 Not` `Modified`
    on subsequent requests.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are time-based and content-based approaches to check the availability
    of the cached response content for your browser with the help of HTTP-headers.
  prefs: []
  type: TYPE_NORMAL
- en: Last-Modified
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This approach suggests that the server must return the last modification date
    of every document. After storing the date, our browser can attach it in the `If-Modified-Since`
    header for every subsequent request.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must attach the `action` filter to our controller and specify the `lastModified`
    callback as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `\yii\filters\HttpCache` class calls the callback and compares the returned
    value with the `$_SERVER['HTTP_IF_MODIFIED_SINCE']` system variable. If the document
    has still not changed, `HttpCache` will send a lightweight `304` response header
    without running the action.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the document has been updated, the cache will be ignored and the
    server will return a full response.
  prefs: []
  type: TYPE_NORMAL
- en: '| Request | Response |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| First request with full response |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Second request with `If-Modified-Since` with blank response |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Third request after updating the posts with a full response |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative or an addition to the `Last-Modified` header variable, you
    can use `ETag`.
  prefs: []
  type: TYPE_NORMAL
- en: Entity Tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In cases when we do not store the last modified date in our documents or pages,
    we can use custom hashes, which can be generated at the base of the document content.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use a content title for our document to hash a specific
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `HttpCache` filter will attach this tag to the server response as an `ETag`
    header variable.
  prefs: []
  type: TYPE_NORMAL
- en: After storing `ETag`, our browser can attach it in the `If-None-Match` header
    for every subsequent request.
  prefs: []
  type: TYPE_NORMAL
- en: If the document still has not changed, `HttpCache` will send a lightweight `304`
    response header without running the action.
  prefs: []
  type: TYPE_NORMAL
- en: '| Request | Response |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| First request with full response |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Second request with `If-None-Match` and blank response |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Third request after updating the post with a full response |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: When the cache is valid, our application will send the `304 Not Modified` response
    HTTP-headers instead of the page content and will not run controllers and actions
    repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about HTTP caching refer to [https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For HTTP-caching in Yii2 refer to [http://www.yiiframework.com/doc-2.0/guide-caching-http.html](http://www.yiiframework.com/doc-2.0/guide-caching-http.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining and minimizing assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your web page includes many CSS and/or JavaScript files, the page will open
    very slowly because the browser sends a large number of HTTP requests to download
    each file in separated threads. To reduce the number of requests and connections,
    we can combine and compress multiple CSS/JavaScript files into one or very few
    files in production mode, and then include these compressed files on the page
    instead of the original ones.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the `compiler.jar` file from [https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the `yuicompressor.jar` file from [https://github.com/yui/yuicompressor/releases](https://github.com/yui/yuicompressor/releases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install the **Java Runtime Environment** (**JRE**) from [http://www.java.com](http://www.java.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to combine and minimize assets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the source HTML code of the `index` page of your application. Check whether
    it is similar to the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The page includes three JavaScript files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `config/console.php` file and add the `@webroot` and `@web` alias
    definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a console and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the generated `assets.php` file and configure it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the combining command `yii asset assets.php config/assets-prod.php`. If
    this is successful you must get the `config/assets-prod.php` file with the following
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the configuration for the `assetManager` component into the `config/web.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Turn on production mode in `web/index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the page in your browser and see the HTML code again. Now it must contain
    single lines to include our compressed files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, our page had a set of included files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we generated the `assets.php` configuration file and specified bundles
    for compressing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: We could specify all intermediate asset bundles such as `yii\web\JqueryAsset`
    and `yii\web\YiiAsset`, but these assets are already specified as dependencies
    of `AppAsset` and `BootstrapPluginAsset`, and the compressing command automatically
    resolves all these dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: The AssetManager publishes all assets into the classic subdirectories in `web/assets`
    and after publishing it runs compressors to combine all CSS and JS files into
    `all-{hash}.js` and `all-{hash}.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check whether the CSS file includes other resources by relative paths such
    as the `bootstrap.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is so, then in the combined file, our compressor changes all relative
    paths for storing all relationships as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'After processing, we get the `assets-prod.php` file with the bundles configuration
    of the `assetManager` component. It defines the new virtual asset as a dependency
    of clean copies of the original bundles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can require this configuration into the `config/web.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can require the file for the production environment only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: Do not forget to regenerate all compressed and combining files after
    any updates of the original resources.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about assets refer to the following URL: [http://www.yiiframework.com/doc-2.0/guide-structure-assets.html](http://www.yiiframework.com/doc-2.0/guide-structure-assets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Closure Compiler refer to the following URL: [https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For YUI Compressor refer to the following URL: [https://github.com/yui/yuicompressor/](https://github.com/yui/yuicompressor/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Yii2 on HHVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**HipHop Virtual Machine** (**HHVM**) is a process virtual machine from Facebook
    based on just-in-time (JIT) compilation. HHVM transforms PHP code into intermediate
    **HipHop bytecode** (**HHBC**) and dynamically translates PHP code into machine
    code, which will be optimized and natively executed.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to run Yii on HHVM:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the Apache2 or Nginx web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow the guide for installing HHVM on Linux or Mac available at [https://docs.hhvm.com/hhvm/installation/introduction](https://docs.hhvm.com/hhvm/installation/introduction).
    For example, on Ubuntu you must run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Try to start the built-in server manually for your site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `localhost:8080` host in your browser:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00402.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Right now you can use HHVM to develop your project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you use the Nginx or Apache2 server, then HHVM automatically creates its
    own configuration files in the `/etc/nginx` and `/etc/apache2` directories. In
    the case of Nginx, it creates the `/etc/nginx/hhvm.conf` template to include configuration
    file to your projects. For example, let''s create a new virtual host called `yii-book-hhvm.app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the hostname into your `/etc/hosts`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now restart the Nginx server:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, open the new host in your browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00457.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Your server is successfully set up.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use HHVM as an alternative PHP process in the `fastcgi` mode. By default,
    it listens to the `9000` port. You can change the default port of the `fastcgi`
    process in the `/etc/hhvm/server.ini` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Configure the specific PHP options in the `/etc/hhvm/php.ini` file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about installing HHVM, refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.hhvm.com/hhvm/installation/linux](https://docs.hhvm.com/hhvm/installation/linux)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.hhvm.com/hhvm/installation/mac](https://docs.hhvm.com/hhvm/installation/mac)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to learn more information about HHVM usage refer to [https://docs.hhvm.com/hhvm/](https://docs.hhvm.com/hhvm/).
  prefs: []
  type: TYPE_NORMAL
