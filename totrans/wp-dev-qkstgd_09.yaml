- en: Enhancing Security, Performance, and Maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, we looked at the development of WordPress sites using existing
    features as well as custom features. As developers, we can use the latest trending
    technologies, modern development techniques, and build sites with amazing interfaces.
    However, reasons such as exploitable code, poor performance, limitations in maintenance,
    and difficulty in migration can destroy sites with all the features and technologies.
    The non-functional aspects such as security, performance, code quality, and maintenance
    play a major role behind the scenes. So, it’s important to have the knowledge
    of using existing tools and services to address these areas in development.
  prefs: []
  type: TYPE_NORMAL
- en: We begin the chapter by understanding the importance of testing. We will be
    discussing different types of testing including unit testing, code quality and
    performance, and using the necessary tools. Then, we will be looking at the techniques
    of securing your WordPress site. Next, we look at the process of migrating sites
    from test server to live server using the necessary tools. Finally, we learn the
    necessary aspects of maintaining a site.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit and integration testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code quality and performance testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing WordPress sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating WordPress sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining WordPress sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to build secure and maintainable
    sites, while optimizing the performance of features.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of testing the features of the site and code is critical for building
    successful sites or applications. This process allows us to detect any defects
    in the site before releasing to a live environment. There are several types of
    testing used in web development, where some of them play a very important role
    compared to others. We can test both functional and non-functional aspects of
    WordPress sites using these testing types. In this section, we are going to have
    a brief introduction to the most important functional and non-functional testing
    types.
  prefs: []
  type: TYPE_NORMAL
- en: Unit and integration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is used to test each small component independent from others, while
    integration testing is used to test the application in combination with all the
    modules. These two tests fall into the functional category, as we are checking
    the functionality and logic of our code. Compared to other popular frameworks,
    WordPress code is not the easiest to test. However, we can use **PHPUnit** for
    testing themes as well as plugins in WordPress. Installing and implementing test
    cases with PHPUnit is beyond the scope of this chapter. You can find a guide for
    working with PHPUnit at [http://make.wordpress.org/core/handbook/automated-testing/](http://make.wordpress.org/core/handbook/automated-testing/).
  prefs: []
  type: TYPE_NORMAL
- en: WordPress provides a set of test cases for testing major features. Many developers
    have a limited knowledge about existing test cases as it's not available inside
    the core. You can access a complete list of test cases at [http://unit-tests.svn.wordpress.org/trunk/tests/](http://unit-tests.svn.wordpress.org/trunk/tests/).
    Make sure that you gain knowledge about testing WordPress by going through the
    existing test cases. Then, you can write test cases for your own plugins and themes
    for unit testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Code quality testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code quality testing falls into the non-functional category. This is one of
    the most important aspects of testing as the end user is not aware of the quality
    of code. Therefore, you can easily build sites by using plugins with low-quality
    code. However, it will be problematic in later stages when you work with different
    versions of WordPress, or use plugins that conflict with your code.
  prefs: []
  type: TYPE_NORMAL
- en: In WordPress sites, we can build our own plugins as well as use existing plugins.
    We can test our solutions by going through the code and fixing the code quality
    issues. However, it may not be practical when using existing plugins with thousands
    of lines of code. So, we need a solution that allows us to automatically test
    the code and provide a report with possible issues. Unfortunately, there are no
    up-to-date plugins in the directory that allow us to check the code of other plugins.
    So, the only way of automating the code testing process is by using a third-party
    service that checks the code and provides a report.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, there are not many services either for testing plugin code. There
    is a service called **PluginTests** at [https://plugintests.com](https://plugintests.com) for
    testing the coding errors of WordPress plugins. However, it's limited to the plugins
    in the WordPress plugin directory. So, you won’t be able to test your custom plugins
    or premium plugins with this service. In development, we use many plugins from
    the WordPress plugin repository. Also, we can add our custom plugins to the repository
    as long as the source code is open. Therefore, we are going to look at the use
    of this service to quickly test plugins from the repository and find the errors,
    before deciding to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Using the PluginTests service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you visit [https://plugintests.com](https://plugintests.com), you will
    get a search section to check any plugin from the repository. You will also see
    two other sections, listing popular plugins and the most recently tested plugins.
    If the expected plugin is within these lists, you just click and get a report
    for that plugin instantly. Let’s consider the following screenshot for most recently
    tested plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/caf5e357-3a08-4eb4-a216-c0bb1f5b8dc4.png)'
  prefs: []
  type: TYPE_IMG
- en: We have the plugin name, time it was last tested, and the result in the list.
    You can see the availability of different results such as **ok**, **warning**
    and **failure**. The **ok** status means the plugin was tested successfully without
    issues. The statuses, **warning** and **failure**, mean there are issues with
    the plugin code. Usually, we will get minor JavaScript or PHP errors with the
    **warning** status. However, the **failure** status means that the service was
    unable to activate the plugin or there are fatal errors in the plugin code. So,
    we can have a brief understanding about the quality of the plugin just by looking
    at the status from the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a plugin is not listed in the popular or most recent sections, you can
    search the plugin using the name or slug, and click the Search button to load
    the results. Consider the following screen for the generated result for the popular
    WooCommerce plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0559ba48-a50c-4db6-ba5d-e38979b8791e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Those different sections mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errors**: This section is filled with green ticks, meaning the plugin has
    no identifiable coding errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment**: This section shows the WordPress, PHP, and MySQL versions
    used for the test along with the memory limit of the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: This section gives a brief summary of the used resources and
    whether the plugin has any impact on the performance. As you can see, very limited
    memory is used for WooCommerce and the impact is insignificant, meaning that we
    can use the plugin without worrying too much about performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin Info**: This section shows the plugin information such as the last
    updated date, active installs, and URL from [thewordpress.org](http://thewordpress.org) plugin
    page. These badges give you a straightforward idea about the compatibility with
    latest WordPress and PHP versions. WooCommerce is compatible with all the latest
    versions. You will see plugins with red color badges when there are incompatibilities,
    especially with PHP 7.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After these sections, you will see a list-tested screen of the plugin with HTTP
    status, load time, memory usage, JavaScript, and PHP errors. These screens will
    help you identify the errors in individual features. The PHP error log is at the
    bottom of this report. You can check the error log and fix any coding issues that
    impact the site features, or decide not to use third-party plugins with a considerable
    amount of errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from these features, we get useful info about a plugin, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Roles and capabilities**: It''s important to know the roles and capabilities
    created by third-party plugins, as these permissions may not be compatible with
    some of the other third-party plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Widgets and custom post types**: Also, you will get to know the custom post
    types and widgets registered through the plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom tables**: This is also important as we need to be aware of how and
    where third-party plugins store the data. Also, knowing the use of custom tables
    is important in migrating sites with necessary backups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource usage**: This section shows the resource usage of common WordPress
    admin and frontend screens when the plugin is active and inactive. So, you can
    decide which areas are mostly impacted by the use of the plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, this is an excellent service for tracking coding errors in a plugin
    as well as understanding how each plugin affects your database and site features.
  prefs: []
  type: TYPE_NORMAL
- en: Performance testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the old days, we had slow internet connections and users were willing to
    wait for results. Nowadays, we have superspeed internet connections and super
    busy schedules. So, users expect instant results when using a site or application.
    Even a delay of a few seconds can lead the user to an alternative site. So, the
    performance has become a very important factor in website development. Therefore,
    we need to consider every possible action that improves the performance of the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In general, improving performance requires us to reduce the time of loading
    or executing a site feature, while reducing the bandwidth used for the request.
    So, we want the website to deliver the results as fast as possible while using
    the minimum amount of data, especially for mobile-based users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s find out the possible ways of improving performance of a WordPress site:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Caching application data**: Caching allows us to deliver site pages to users
    without connecting to a database or executing complex time consuming logic. It’s
    mostly suitable for sites that don’t change often.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compressing and minimizing files**: Generally, the size of data sent in a
    response impacts the loading or execution time. As the size gets lower, applications
    can provide the results faster. Compressing and minimizing files such as CSS,
    JavaScript, and images considerably reduces the size of the response. You can
    find many plugins for compressing and minimizing files of your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loading third-party files from fast CDNs**: Generally, we use at least a
    few open source libraries when developing applications. jQuery is one of the most
    common among such libraries. We load jQuery within the WordPress files to keep
    the consistency and prevent duplication. However, loading such files through a
    **Content Delivery Network** (**CDN**) can be used to improve the loading time
    of such files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removing low-quality plugins**: We tend to use many plugins in web site development,
    and sometimes we can''t check the code quality of each plugin we use due to time
    constraints. So, some of the plugins with low-quality code or a lack of proper
    implementation can create major performance issues in our site. Therefore, we
    need to check how each plugin affects the performance of the site and replace
    low-quality plugins with alternative ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limiting the number of database queries**: We use many plugins in web development,
    and each plugin uses numerous database queries. On most occasions, these queries
    might be slowing down the application without our knowledge. Also, there can be
    many duplicate queries that can be converted into single queries with proper coding.
    So, it''s important to check the database query usage of the application and limit
    it as much as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'O**ptimizing existing queries**: Sometimes, developers tend to use their own
    queries when those features are available through optimized WordPress functions.
    Also, developers may add unnecessary complexity to queries due to the lack of
    knowledge. So, it''s important to identify the database queries that mostly impact
    the performance and optimize them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are some of the main criteria that affect the performance of a web site.
    There are many other such criteria for improving the performance of a web site.
    We use existing plugins/services to measure the performance in development and
    identify the possible improvements. There are a wide range of existing plugins
    in the WordPress plugins directory for measuring the performance. We are going
    to look at one of the plugins among them, as we already looked at a few plugins
    when setting up the development environment in [Chapter 1](205a9625-512c-4925-a3a8-bfe8a1784773.xhtml),
    *Introduction to WordPress Development*.
  prefs: []
  type: TYPE_NORMAL
- en: P3 - the Plugin Performance Profiler plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even though this plugin has not been updated for a while, it’s still a popular
    solution for checking the performance of individual plugins. We can use it to
    measure the impact of each activated plugin in any given page. You can download
    and install the plugin from [https://wordpress.org/plugins/p3-profiler](https://wordpress.org/plugins/p3-profiler).
    Once the plugin is activated, you can click on the P3 Plugin Profiler menu item
    in the Tools menu to load the scanning features. Then, you can click on the Start
    Scan button and you will get a screen similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b59eae12-22bc-4e9a-a2b6-0c1249aac135.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the Auto Scan or Manual Scan option to start scanning the site.
    The Auto Scan option scans different content of your site randomly and generates
    the reports. On the other hand, Manual Scan allows us to only visit the content
    based on our preference by clicking the links of the web site. Once results are
    generated, you will have a screen similar to the following with various details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03b35a55-b871-4b34-87d1-d648019e99dc.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the Plugin Load Time, Plugin Impact, and the MySQL Queries per visit
    along with various charts in the available tabs. This allows us to directly see
    the plugins with the most performance impact. In this scenario, the WooCommerce
    plugin has the highest impact. Earlier, we used the PluginTest service and identified
    the resource usage of WooCommerce as insignificant. So, we can consider both results
    and come to the conclusion that this site is not using plugins that affect the
    performance, as WooCommerce is the plugin with highest impact. If some other plugin
    is having a higher impact, we can look at the code and use other tools to identify
    if there is an issue in the plugin that creates a major impact on performance.
    After such verification, we can keep the plugins or replace them with alternative
    plugins to reduce the plugin impact on our web site.
  prefs: []
  type: TYPE_NORMAL
- en: Securing WordPress sites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The security of the site is one of the main concerns when developing sites or
    applications with WordPress. Open source code and the old coding techniques to
    keep the backward compatibility are two reasons for these security concerns. However,
    the major threat comes with the use of third-party plugins and themes, as there
    is no guarantee about the quality of them in many cases. So, it's essential to
    secure WordPress sites as much as possible to prevent attacks through plugins,
    themes, or known security concerns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The WordPress codex provides a separate section called **Hardening WordPress**
    for defining the necessary security constraints. You can read this security guide
    at [http://codex.wordpress.org/Hardening_WordPress](http://codex.wordpress.org/Hardening_WordPress).
    Let’s find out the common reasons for WordPress exploits and basic precautions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Username of the admin**: This is one of the most basic and primary reasons
    for exploits in WordPress sites. Many novice clients and developers keep **admin**
    as the username of the site administrator. So, the process of hacking becomes
    simpler as the attacker only has to find the password. So, it’s a must to change
    it to an advanced username including letters, numbers, and maybe some characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WordPress core updates**: Since it''s open source and the community is very
    large, there is a high-percentage chance of someone finding a bug in each WordPress
    release or using it to exploit the existing WordPress sites. However, these issues
    are identified very quickly and an updated version is released immediately to
    prevent the issue. Many WordPress sites are maintained by non-technical administrators
    without the support of a developer. So, these administrators don''t have the knowledge
    of updating WordPress or they are afraid of breaking the site by updates. The
    attackers can easily use the issues in old WordPress versions and exploit them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin and theme updates**: This is even more problematic than WordPress
    updates. Many of the WordPress sites are done by third-party one-time developers.
    So, the quality of the plugins or themes is questionable as they only focus on
    completing the features within the estimated cost. So, there are lot of plugins
    and themes with exploitable code and many of these are not even actively maintained.
    So, we can''t expect a new version every time for fixing the bugs. Also, these
    sites are developed using dozens of WordPress plugins and hence manually updating
    versions of each plugin is not preferred by many administrators. So, the outdated
    versions of these plugins and themes can cause a major security threat. As a solution,
    you can enable automatic updates for WordPress.org-based plugins and themes by
    using `auto_update_plugin` and `auto_update_theme` filters, while returning `__return_true`
    as the value. However, there is a chance that updates of certain plugins or theme
    can cause conflicts in other plugins. Therefore, you need to keep a close eye
    on site functionality when using auto-updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration file location**: By default, the configuration file is located
    in the root folder of your WordPress installation and contains the most important
    database login details. So, it''s easier for the attacker as they know the file
    location. So, we need to protect this file by changing its location to a private
    directory in your WordPress site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User roles and permissions**: There are five built-in user roles with different
    capabilities. In most sites, there are two or more people editing the content
    and managing the site. So, it''s important to only give these users necessary
    features by using user roles and capabilities, while preventing access to important
    parts of the WordPress site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Login form security**: The default WordPress login functionality is secure.
    However, attackers may use tools to guess the passwords and gain access to the
    site. Therefore, we need to implement additional security measures on WordPress
    login. We can protect the login by implementing features such as limit failed
    login attempts, using two-factor authentication, restricting to certain IPs, and
    so on. We can easily find existing plugins to implement these features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backend file editing**: In case an attacker somehow gets access to a site,
    he can use the theme or plugin editor to modify the files and add malicious code
    or completely destroy the site by deleting the data as well as files. So, we need
    to use `define( ''DISALLOW_FILE_EDIT'', true )` in the config file to remove the
    file-editing capabilities for all users, or conditionally use it for certain users
    with custom code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password complexity**: This is one of the basic concerns in any site, not
    only in WordPress. Most administrators tend to use easy-to-remember simple passwords
    allowing attackers to guess them. So, the password needs to be long enough for
    the site to prevent attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are only some of the basic precautions for securing WordPress sites.
    We need to use advanced security features, along with these features for sites
    with sensitive data and functionality. It''s impossible to develop these advanced
    security features for use in development, unless your intention is building a
    security plugin. So, we have to use one or more top security plugins or services
    to secure the site. The following is a list of the most popular security plugins
    provided in the WordPress plugin directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iThemes Security**: [http://wordpress.org/plugins/better-wp-security/](http://wordpress.org/plugins/better-wp-security/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BulletProof Security**: [http://wordpress.org/plugins/bulletproof-security/](http://wordpress.org/plugins/bulletproof-security/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All In One WP Security & Firewall** : [https://wordpress.org/plugins/all-in-one-wp-security-and-firewall/](https://wordpress.org/plugins/all-in-one-wp-security-and-firewall/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can choose one of these plugins based on the security features needed for
    a given site. It's possible to use more than one security plugin for providing
    different security features. However, there is a chance of them conflicting with
    each other and hence it's ideal to choose one quality plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating WordPress sites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, we develop sites on a staging server before migrating to the live
    server. The process of manually migrating sites is not practical in most scenarios
    as we have to manually back up the database, files, uploaded media, and upload
    to another server via FTP. So, we need to use a tool that allows us to automate
    the tasks of this process with a smooth migration. There are plugins that allow
    you to back up the database, files, and media separately, and then import them
    manually to the live server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to look at a plugin that offers all these features within the
    same plugin, making migration a super simple task. You can find a plugin called
    All-in-One WP Migration. This plugin is available at [https://wordpress.org/plugins/all-in-one-wp-migration/](https://wordpress.org/plugins/all-in-one-wp-migration/).
    Once activated, you can click on the Export item from the All-In-One WP Migration
    menu item on the left menu. You will get a screen similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe8ecc93-06a0-46f4-b064-382963952685.png)'
  prefs: []
  type: TYPE_IMG
- en: The exporting feature starts with the database replace feature. We can use this
    feature to find and replace anything in the database. This is quite useful for
    changing the URLs of custom data to match the live site URL. Next, we can select
    the File option from the EXPORT TO setting, and the plugin will generate the backup
    of your site to be downloaded as a single file with `wpress` as the extension.
    We can download the backup to our local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to go to the live site and install the same plugin. This time,
    we have to use the Import section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24135950-90b8-4c8b-bba1-ed2bd0a3372b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can click on the IMPORT FROM button and add the exported `wpress` file generated
    in the previous section. Then, the plugin will migrate the entire site within
    minutes, making it a super-simple solution. Unlike other frameworks, we can completely
    migrate a WordPress site within a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: The exported `wpress` files are stored in the `/wpcontent/ai1wm-backups` folder
    of your server. These files can be very large even for a basic websites. So, you
    have to make sure to remove the unnecessary backups to prevent the use of a large
    server space.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find all the exported and available backup files in the Backups menu
    of the plugin. So, we can easily restore a site to its previous point using a
    single click. This is one of the best plugin available for site migration. You
    can also consider the following plugins as alternatives for site migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Duplicator**: [https://wordpress.org/plugins/duplicator/](https://wordpress.org/plugins/duplicator/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WP Staging—DB & File Duplicator & Migration**: [https://wordpress.org/plugins/wp-staging/](https://wordpress.org/plugins/wp-staging/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XCloner**: Backup and Restore—[https://wordpress.org/plugins/xcloner-backup-and-restore/](https://wordpress.org/plugins/xcloner-backup-and-restore/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these plugins offers different migration features including exports
    to Google Drive and other third-party services. So, you will have to try these
    plugins and choose the simplest plugin that migrates the sites, while being compatible
    with your hosting provider.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining WordPress sites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process of maintaining sites is another problematic area in WordPress development.
    Many sites are built by non-technical clients without a developer, and hence they
    are not aware of the regular tasks in order to maintain the site. Once an issue
    is occurred, these clients looks for developers to fix them without having the
    necessary processes and resources. So, as a developer, it''s important to keep
    the site maintainable and transfer the knowledge on the maintenance process to
    the client, in case you are no longer working on that site. In this section, we
    are going to look at the primary tasks for properly maintaining a WordPress site
    and how to implement these tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Backup files and databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the must-do tasks in maintenance, ruled out by many non-technical
    site owners. WordPress powers over 25 percent of the web and hence the number
    of attacks on WordPress sites are equally high. So, we need regular backups of
    files and databases to be used in such occasions. Unfortunately, many site owners
    don't have a proper backup process and some of them assume that it's done automatically
    by the hosting server.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are hosting providers and features for automating the backup process
    from the server side. However, it''s better to have our own backups using a manual
    process or using an existing plugin. There are many plugins that allow us to schedule
    backups of the sites, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UpdraftPlus`: This is one of the most popular backup plugins with a wide range
    of features for file and database backup as well as restoring. You can find all
    the features at [https://wordpress.org/plugins/updraftplus/](https://wordpress.org/plugins/updraftplus/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BackUpWordPress`: Allows you to schedule backups for both files and database.
    You can find all the features at [https://wordpress.org/plugins/backupwordpress/](https://wordpress.org/plugins/backupwordpress/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We already discussed the use of the **All-In-One WP Migration** plugin for migrating
    WordPress sites. We can also use such plugins as the backup and restore mechanism
    for the same site as well. So, it's a must to use one of these backup plugins
    and schedule the backups of your site.
  prefs: []
  type: TYPE_NORMAL
- en: Updating WordPress plugins and themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already discussed the need for updating WordPress core, plugins and themes
    to improve the security of the site in the previous sections. Also, it's an essential
    part of maintenance, as some of the plugins and themes may not be compatible with
    older or newer versions of WordPress. So, you need to keep track of the updates
    in plugins and themes, along with the possible bug fixes in each version. Otherwise,
    you will have to automate the update process using custom code, or use a plugin
    like **Automatic Plugin Updates** ([https://wordpress.org/plugins/automatic-plugin-updates/](https://wordpress.org/plugins/automatic-plugin-updates/))
    for automating updates only for certain plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing database tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is another aspect in maintenance that is not considered by many site owners.
    We use many plugins in WordPress sites with different data needs. Many of these
    plugins work on existing database tables, and hence it's difficult to track which
    plugin is responsible for certain data in core tables. Some of these plugins provide
    a quality deactivation or delete process, removing all the plugin-related data
    from the database. However, many plugins don't have such a process and we can
    find many unused data in the database even after deleting the plugins. Also, WordPress
    core features such as revisions, transients, caching overloads core tables with
    unnecessary amount of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we need to optimize the database time to time by removing these unnecessary
    data. The first step is only choosing plugins that remove their data on uninstallation.
    Then, we can choose a database optimization plugin, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WP-Optimize**: [https://wordpress.org/plugins/wp-optimize/](https://wordpress.org/plugins/wp-optimize/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WP-Sweep**: [https://wordpress.org/plugins/wp-sweep/](https://wordpress.org/plugins/wp-sweep/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced Database Cleaner**: [https://wordpress.org/plugins/advanced-database-cleaner/](https://wordpress.org/plugins/advanced-database-cleaner/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The common features of these plugins include the ability to delete revisions,
    auto-drafts, comments with certain statuses, and duplicated and orphaned metadata.
    We have to use one of such plugins to keep the database clean by removing unused
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Checking request errors and broken links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use many third-party libraries and resources from external sites when developing
    sites. So, these resources are loaded through external URLs. Sometimes, we may
    notice the unavailability of these files due to server unavailability or other
    errors. So, unavailability of some files may create conflicts in our site features.
    Also, we might link to no-longer-available content, leading to 404 errors. So,
    we need to track these issues and resolve them in order to keep the consistency
    of our site features.
  prefs: []
  type: TYPE_NORMAL
- en: We can use a plugin such as **Broken Link Checker** ([https://wordpress.org/plugins/broken-link-checker/](https://wordpress.org/plugins/broken-link-checker/))
    to identify the broken posts, pages, or screens on our sites. Also, if you are
    using an analytics tool such as **Google Analytics**, we can check the requests
    to the 404 page and them track backward to find the links causing the issue.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed performance-measuring plugins in previous sections. These plugins
    will show you a list of loaded files with the loading time, along with a list
    of files with loading errors from external sources. The most common issue is unavailability
    of CSS or JavaScript files from external sources. So, we can use such plugins
    to identify these files and update the URLs, or download and include these files
    locally within plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Checking error logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once debug mode is switched off in a live environment, we won't see any errors
    generated in the site. Many third-party low-quality plugins generate minor and
    major errors. So, we need to have a error log to regularly check the site for
    errors as well as identify the cause, when something breaks on your site. The
    hosting providers also provide error logging features in servers. However, we
    should use our own error logs by using the core WordPress error log features,
    or using a plugin such as **Error Log Monitor** ([https://wordpress.org/plugins/error-log-monitor/](https://wordpress.org/plugins/error-log-monitor/))
    to keep track of the existing errors and fix them as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the primary tasks for maintaining a site. You can find more
    minor tasks and plugins for maintaining sites. As a developer, you should have
    a proper maintenance routine based on the functionality of each site.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In site development, we mainly focus on the functional aspects, as the client
    or end users will be involved directly in functionality. However, we will have
    to give equal importance to non-functional aspects. These non-functional aspects
    may decide the success or failure of a site as these factors are the keys for
    using or leaving the site.
  prefs: []
  type: TYPE_NORMAL
- en: We began the chapter by understanding the importance of testing. We looked at
    several types of functional and non-functional testing with the help of tools
    such as **P3 Plugin Profiler**, and services such as **PluginTest**. Then, we
    discussed the need for implementing key security precautions while identifying
    the plugins for handling advanced security measures. Next, we looked at the importance
    of automating the site migration process using the **All-in-One WP Migration **plugin.
    Finally, we looked at the important tasks for properly maintaining a WordPress
    site, while exploring the existing plugin-based solutions for maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: We began this book by introducing you to the core WordPress features, concepts,
    and data usage. Then, we developed various features by using core functionality,
    extending core functionality, and building custom solutions. Finally, we completed
    the book by looking at the important non-functional requirements for web sites.
    It's up to you now!
  prefs: []
  type: TYPE_NORMAL
