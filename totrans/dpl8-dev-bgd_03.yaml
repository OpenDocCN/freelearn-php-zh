- en: Chapter 3. Drupal Views and Configuration Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the last chapter, we learned how to create basic custom modules as well
    as create new content types. Now let''s explore the new configuration management
    introduced in Drupal 8 for better version control. We will learn how to use the
    Devel module to generate content for testing purposes, along with learning the
    basics of new and improved views.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In these chapter, we will learn these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using built-in Drupal 8 views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is new configuration management in Drupal?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the configuration management module to export and import site configuration
    through the user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Devel module to autogenerate content for testing purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick introduction to Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Views in Drupal 7 was the most installed and most used contributed module.
    Using views, it is easy to create pages and blocks that list a variety of content
    on the site. You can create a photo gallery or an event calendar, or list out
    users logged in to your site. Here are a few points listed when we need views:'
  prefs: []
  type: TYPE_NORMAL
- en: We like the default front page view, but we want to sort it differently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to provide an "unread forum posts" option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We like the default taxonomy/term view, but we want to sort it differently,
    for example, alphabetically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want a way to display a block with the five most recent posts of a particular
    type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Drupal 8, views has been moved to the core module system. Creating a view
    in Drupal 8 is similar to the process followed in Drupal 7\. Now the Views module
    will get installed as part of the default core module installation.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a recipe listing block using views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will see how easy the new Views module makes it to display a list of recipes
    on our site:'
  prefs: []
  type: TYPE_NORMAL
- en: If you aren't already logged in to your site, log in as admin and navigate to
    **Manage** | **Structure** at `http://yourdrupal8site.com/admin/structure`.![Time
    for action – creating a recipe listing block using views](img/4659_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Views** link to create a new view. It will take you to the **Views**
    configuration page, `http://yourdrupal8site.com/admin/structure/views`.![Time
    for action – creating a recipe listing block using views](img/4659_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you will find a minor difference in style from the Drupal 7 Views configuration
    page. There are many default views. According to your requirement, you can either
    duplicate or edit and use these predefined views. Or you can create an entirely
    new one by clicking on the **Add new view** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we are going to create our own view for listing the article content type.
    Go to this path: `http://yourdrupal8site.com/admin/structure/views/addorhttp://yourdrupal8site.com/admin/structure/views`.
    Click on the **Add new view** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get a form similar to the one shown next. Fill in the **View name**
    field. In this example, I am giving the view's name as `Recipe List`. For the
    **Show** and **of type** fields, I have selected **Content** and **Recipe**, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create a block** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save and edit** button. Accepting all the default values for
    creating a block, your page should look similar to this:![Time for action – creating
    a recipe listing block using views](img/4659_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will take you to the views configuration page at `http://yourdrupal8site.comadmin/structure/views/view/recipe_list`.
    There, you have to click on the **Save** button at the bottom of the page:![Time
    for action – creating a recipe listing block using views](img/4659_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to configure our d8dev site so that our Recipe List views-based
    block shows up on the front page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Structure** link in the **Admin** toolbar and select **Block
    layout**:![Time for action – creating a recipe listing block using views](img/4659_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, click on the +**Recipe List** on the right-hand side of the
    page under **LISTS (VIEWS)**:![Time for action – creating a recipe listing block
    using views](img/4659_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, leave the **Block title** field blank because that way the
    title will default to the title we added previously in the view creation wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Region** settings, select **Sidebar second** from the dropdown:![Time
    for action – creating a recipe listing block using views](img/4659_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have now created a views-based block of recipes and configured it so that
    it will only be displayed on the front page. Now, when you visit the front page
    of our d8dev site, you will have a nice **Recipe List** block on the right-hand
    side of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4659_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuration management in Drupal 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As developers, we have always have faced the situation of how to do incremental
    development or work around staging and deployment issues in Drupal projects. An
    even bigger challenge has been, "What to classify as content and what as configuration?"
    Though we have configuration as a separate menu to identify this problem, what
    about views, taxonomy, or theme configuration?
  prefs: []
  type: TYPE_NORMAL
- en: It's not that we do not have a solution in Drupal 7\. To address this issue,
    the Features & Strongarm module was introduced during the Drupal 6 days, and it
    has made great improvements in the last couple of years. This was a savior in
    most of the cases. Still, we had to recreate a few configurations manually, making
    it error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: But documenting the configuration required for the feature export itself has
    always been challenging when there is user-generated content being added periodically,
    and we have multiple teams working on the same project, sometimes in different
    time zones. We cannot export the complete site configuration from one installation
    to another.
  prefs: []
  type: TYPE_NORMAL
- en: Besides, there are many contributed modules that store specific configurations
    in their own ways, making it more difficult to consolidate feature exports in
    an incremental manner.
  prefs: []
  type: TYPE_NORMAL
- en: To improve the development process, a new configuration management initiative
    was started in Drupal 8\. Now, because of this, we have an easier way to manage
    configuration in Drupal sites. We have the entire configuration saved in files
    instead of database tables. This makes it easier to follow version control systems
    in the true way. Now we can store history and roll back changes if required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by understanding what has been defined as content and what is
    configuration in a Drupal project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Content**: Everything that we display on the site''s frontend is content,
    for example, articles, basic pages, blog posts, images, video, and audio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sessions**: Sessions store information about specific users when logged in
    while they are interacting with the Drupal site'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State**: This holds the information about the site in different scenarios
    that are temporary in nature, for example, the state when site permission is rebuilt
    or before a cron job is run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: This is all of the information that is not content and is
    specific to your website, for example, the site name, content types used, fields,
    vocabularies, image styles, text formats, menu, menu links, permission system,
    and even the views you have created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is best to use a version control system, for example, `git` or `svn`, to
    make best use of configuration management, especially when you are working with
    a distributed team.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Besides adding configuration in files, you can also add configuration manually.
    But this is best avoided as you will have to remember every step to be recreated
    during migration from staging to deployment. You cannot even use any version control
    system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Avoid using manual configuration management.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the Configuration Management interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Drupal 8 we have a Configuration Manager module, which provides an easy interface
    to export and import site configurations and share between different environments
    of the project, such as development, staging, and deployment. You can easily verify
    the changes from your production environment using this module.
  prefs: []
  type: TYPE_NORMAL
- en: This module assumes your different environment; for example, dev, staging, testing,
    and production are the same site. Each site is identified using a **Universally
    Unique Identifier** (**UUID**). The module will allow importing of configuration
    between different sites only when the UUID matches the target site.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Drupal 8 saves all site configurations in the database. When installing
    the new Drupal site, it creates a new folder in `sites/default/files` named `config_HASH`.
    Here, HASH is a randomly generated long string of numbers and letters. Refer to
    this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Configuration Management interface](img/4659_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is where the configuration of different states of the site is saved.
  prefs: []
  type: TYPE_NORMAL
- en: Let us use the module UI to export the configuration we created in the previous
    chapter in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – importing, exporting, and synchronizing configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of the configuration system in Drupal 8 is to make taking a copy of
    the site configuration easy to set up a development site where you make changes.
    Then, importing those changes to the other site is also made simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'To export Recipe content type, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. Custom Module Development"), *Custom Module
    Development*, we created the Recipe content type. We will export this content
    type using configuration management. Browse to the module page at `http://yourdrupal8site.com/admin/config/development/configuration`.![Time
    for action – importing, exporting, and synchronizing configurations](img/4659_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Single import/Export** tab and then **Export**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the configuration management module UI, the first tab is **Synchronize**.
    When you are using this feature for the first time, you will see: **There are
    no configuration changes to import**. This implies that your dev site is using
    the configurations from the database itself.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will see that there are no configuration changes, which means that your
    site is using the configuration files from the database and that no changes were
    made to the site.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Configuration type** as **Content type** and **Configuration name**
    as **Recipe**. You will see YAML-formatted configurations in the text area box.
    Save these YAML configurations in a separate file, `node.type.recipe.yml`. This
    file contains all the configurations related to our content type.![Time for action
    – importing, exporting, and synchronizing configurations](img/4659_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, `node.type.recipe.yml` doesn't include any fields used in the same.
    We need to export them too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To export, select **Field** from the dropdown on the same page.![Time for action
    – importing, exporting, and synchronizing configurations](img/4659_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same way, export the form display of the Recipe content type. Select
    the **Configuration type** as **Entity form display** and **Configuration name**
    as **node.recipe.default**. Save the YAML configuration in `core.entity_form_display.node.recipe.default.yml`.![Time
    for action – importing, exporting, and synchronizing configurations](img/4659_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export the default view teaser of the Recipe content type. Select the **Configuration**
    **type** as **Entity view display** and **Configuration name** as **node.recipe.teaser**.
    Save the YAML configuration in `core.entity_view_display.node.recipe.default.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export the view Recipe List. Select the **Configuration type** as **View** and
    **Configuration name** as **Recipe List**. Save the YAML configuration in `views.view.recipe_list.yml`.![Time
    for action – importing, exporting, and synchronizing configurations](img/4659_03_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Importing configurations in other dev sites**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install another Drupal site on your local machine which we will be using as
    target site to import all the features. Now import the content type Recipe from
    the configuration management:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Configuration** | **Development** | **Synchronize**
    | **Import** at `http://yourstagingsite.com/admin/config/development/configuration/single/import`.
    Select the **Configuration type** as **Content type**, paste the YAML from `node.type.recipe.yml`,
    and click on **Import**.![Time for action – importing, exporting, and synchronizing
    configurations](img/4659_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get a confirmation page asking you to create a new content type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – importing, exporting, and synchronizing configurations](img/4659_03_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'On successful import, you should see the following screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – importing, exporting, and synchronizing configurations](img/4659_03_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In a similar way, import fields of the Recipe content type. Select the **Configuration
    type** as **Field**, paste the YAML configurations, and click on **Import**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the view modes and form modes using the file we saved after exporting
    from our initial dev site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding steps, we saw how **Single Import/Export** works. Let's explore
    the other option of **Full Import/Export:**
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to the module configuration page again: `http://yourdrupal8site.com/admin/config/development/configuration`.
    This time we will focus on the third tab, **Full Import/Export**. As earlier,
    there are two options, **Import** and **Export**.![Time for action – importing,
    exporting, and synchronizing configurations](img/4659_03_18.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export your site configuration by clicking on the option. This will create a
    `config.tar.gz` file and prompt you to download the same on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step would be to create another Drupal 8 site, if you have not created
    one already, where we will be importing the `config.tar.gz` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to `http://yourstagingsite.com/admin/config/development/configuration/full/import`.
    Select `config.tar.gz` and upload it as shown in this screenshot:![Time for action
    – importing, exporting, and synchronizing configurations](img/4659_03_18a.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have imported our site configuration to the new site, let's check
    out the first tab, **Synchronize**, again. Visit `http://yourstagingsite.com/admin/config/development/configuration`.
    Now it should display something like this:![Time for action – importing, exporting,
    and synchronizing configurations](img/4659_03_18b.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This page is basically displaying all the configuration changes. It helps us
    to verify that everything was imported as expected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can click on **View differences**, which will open a popup listing out the
    various configurations imported/changed. After making sure that everything is
    as expected, close the pop-up window and select **Import all**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will take a couple of minutes depending on the volume of tasks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – importing, exporting, and synchronizing configurations](img/4659_03_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once the import is complete, you should be back on the configuration page, in
    the first tab and with a success message.![Time for action – importing, exporting,
    and synchronizing configurations](img/4659_03_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, just verify that the new configuration has been implemented.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have imported the Recipe content type from your dev site to a new instance
    of the Drupal site using an easy-to-use configuration management module UI, without
    using database import or the features module.
  prefs: []
  type: TYPE_NORMAL
- en: Working of Configuration Management in Drupal 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As developers, let's explore how configuration management works in Drupal 8\.
    As mentioned earlier in the chapter, by default, Drupal keeps all configurations
    in the database. While installing, it creates a folder called `config_HASH` within
    `/sites/default/files`, where `HASH` is a randomly generated long string consisting
    of numbers and letters. Randomly generated HASH ensures additional protection
    for the website.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working of Configuration Management in Drupal 8](img/4659_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Within the `Config` folder, there are two additional folders: `active` and
    `staging`. Both are empty by default and contain only `.htaccessandREADME.txt`.'
  prefs: []
  type: TYPE_NORMAL
- en: Generally, Drupal 8 uses the database to store the active configuration, unless
    we change it. If we change the default behavior, the `active` folder will contain
    the configuration of the default Drupal installation.
  prefs: []
  type: TYPE_NORMAL
- en: Another directory, `staging`, is used to store the configuration of the Drupal
    site imported from your dev environment.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Drupal and the associated module store the configuration under active
    storage during installation. These configurations are sets of files that maintain
    the configuration required to run your Drupal site. These configurations are stored
    in YAML format.
  prefs: []
  type: TYPE_NORMAL
- en: If you explore the Drupal installation folder on your machine, you will find
    that there is a `config` folder under each module and profile. This folder contains
    two or more folders, `install` and `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working of Configuration Management in Drupal 8](img/4659_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Both the folders contain the set of `.yml` files that hold the respective configuration
    for the module or profiles.
  prefs: []
  type: TYPE_NORMAL
- en: During the site installation process, values stored in these files are copied
    to the active configuration of your Drupal site. In case we are using default
    Drupal configuration storage, the values will be copied to config tables, and
    if we have selected file-based storage, these configuration values will be copied
    to respective directories in active.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the active configuration storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though it is not advisable to change the default active configuration storage
    from database to files, you can make this change in your `settings.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can make this change only before installing your Drupal site. You will not
    be able to change the configuration storage after completion of the installation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `settings.php` in your editor and search for active configuration settings.
    Now you just have to uncomment the line `$settings[''bootstrap_ config_storage'']`
    to enable the file-based system for active configuration. In addition to this,
    you also have to copy `default.services.yml` to `services.yml` and enable to file-based
    configuration storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will enable Drupal to change the default configuration storage setting
    from the database to a file-based system and use the `config.storage.file` as
    active storage.
  prefs: []
  type: TYPE_NORMAL
- en: After changing the configuration storage setting, install your Drupal 8 site
    by following the same standard steps. Now let's have a look at our `active` folder
    under `sites/default/files`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the active configuration storage](img/4659_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now the active directory contains the site configuration of the entire site.
    These files have been copied here during the installation process. Now, whenever
    you make the change to your site configuration, changes will be made in these
    files too. You can use a version control system to track changes in your site
    actively.
  prefs: []
  type: TYPE_NORMAL
- en: But changing the storage system will not change the way we export/import the
    site configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn more about configuration management at [https://www.drupal.org/documentation/administer/config](https://www.drupal.org/documentation/administer/config).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Devel module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, in the previous section, we saw how easy it was to create a custom Views-based
    block for displaying a list of the recipes on the front page. One thing that you
    will notice right away is that there is only one recipe showing up, because so
    far we have only created one.
  prefs: []
  type: TYPE_NORMAL
- en: You may also recall that when we created the Recipe List block with Views, we
    left the setting for items per page at the default value of 5\. Now, it would
    be nice to be able to test that setting without needing to manually create four
    more recipe items. Enter the Devel module at [http://drupal.org/project/devel](http://drupal.org/project/devel).
  prefs: []
  type: TYPE_NORMAL
- en: The Devel module includes a number of submodules that make Drupal development
    easier; and the one we are interested in to help us out with content creation
    for development purposes is the `devel_generate` module.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Devel module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This should be an easy step. Just download the module and enable the **Extend**
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Devel module](img/4659_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Devel is installed and ready to do some magic.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – generating dummy content using the devel_generate module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, with the `devel_generate` module enabled, we are going to generate some
    Recipe content so that we can test the number of items in our Recipe List block:'
  prefs: []
  type: TYPE_NORMAL
- en: First, click on the **Configuration** link in the admin toolbar, and then click
    on the **Generate content** link under the **Development** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Generate content** page, uncheck all the **Content type** checkboxes
    except the one for **Recipe**.![Time for action – generating dummy content using
    the devel_generate module](img/4659_03_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stick with the default values for all the rest of the settings, and click on
    the **Generate** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to the home page and you will see the **Recipe List** block fully
    populated.![Time for action – generating dummy content using the devel_generate
    module](img/4659_03_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this is a very simple example of using the `devel_generate` module,
    being able to generate content can be a big time saver when testing custom code
    that requires multiple content items. We just used the `devel_generate` module
    to generate some dummy content, based on our custom Recipe content type, and now
    our **Recipe List** block on the home page is fully populated with five recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned to create view blocks using the views module, which
    is a part of the Drupal 8 core now. We also explored newly introduced configuration
    management for better version control of our Drupal site. Now we can set up the
    development, staging, and production environments separately and add new features
    to the site incrementally. We explored how to use the Devel module to generate
    a lot of content for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about HTML5, which is one of the
    five major initiatives outlined by Dries for Drupal 8.
  prefs: []
  type: TYPE_NORMAL
