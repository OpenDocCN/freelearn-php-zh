["```php\n<?php\nnamespace App\\Api\\Controllers;\n\nclass UsersController extends BaseController{\n  public function updateAction($id) {\n    try {\n      $manager = $this->getDI()->get('core_user_manager');\n\n      if ($this->request->getHeader('CONTENT_TYPE') == 'application/json') {\n        $data = $this->request->getJsonRawBody(true);\n      } else {\n        $data = $this->request->getPut();\n      }\n\n      if (count($data) == 0) {\n        throw new \\Exception('Please provide data', 400);\n      }\n\n      $st_data = array_merge($data, ['id' => $id]);\n      $result  = $manager->restUpdate($st_data);\n\n      return $this->render($result);\n    } catch (\\Exception $e) {\n      return $this->render([\n        'code' => $e->getCode(),\n        'message' => $e->getMessage(),\n      ], $e->getCode());\n    }\n  }\n\n  public function createAction() {\n    try {\n      $manager   = $this->getDI()->get('core_user_manager');\n\n      if ($this->request->getHeader('CONTENT_TYPE') == 'application/json') {\n        $data = $this->request->getJsonRawBody(true);\n      } else {\n        $data = $this->request->getPost();\n      }\n\n      if (count($data) == 0) {\n        throw new \\Exception('Please provide data', 400);\n      }\n\n      $st_output = $manager->restCreate($data);\n\n      return $this->render($st_output);\n    } catch (\\Exception $e) {\n      return $this->render([\n        'code' => $e->getCode(),\n        'message' => $e->getMessage(),\n      ], 500);\n    }\n  }\n}\n```", "```php\n<?php\nnamespace App\\Backoffice\\Controllers;\n\nclass UserController extends BaseController{\n  public function createAction() {\n    if (!$this->request->isPost()) {\n      return $this->response->redirect('user/list');\n    }\n\n    $manager = $this->getDI()->get('core_user_manager');\n    $form    = $manager->getForm();\n\n    if ($form->isValid($this->request->getPost())) {\n      try {\n        $manager   = $this->getDI()->get('core_user_manager');\n        $post_data = $this->request->getPost();\n\n        $manager->create($post_data);\n        $this->flashSession->success('Object was created successfully');\n\n        return $this->response->redirect('user/list');\n      } catch (\\Exception $e) {\n        $this->flash->error($e->getMessage());\n\n        return $this->dispatcher->forward(['action' => 'add']);\n      }\n    } else {\n      foreach ($form->getMessages() as $message) {\n        $this->flash->error($message->getMessage());\n      }\n\n      return $this->dispatcher->forward(['action' => 'add', 'controller' => 'user']);\n    }\n  }\n\n  public function updateAction() {\n    if (!$this->request->isPost()) {\n      return $this->response->redirect('user/list');\n    }\n\n    $manager    = $this->getDI()->get('core_user_manager');\n    $object_id  = $this->persistent->get('id');\n    $object     = $manager->findFirstById($object_id);\n    $form       = $manager->getForm($object);\n\n    if ($form->isValid($this->request->getPost())) {\n      try {\n        $manager = $this->getDI()->get('core_user_manager');\n        $manager->update(array_merge($this->request->getPost(), ['id' => $object_id]));\n        $this->flashSession->success('Object was updated successfully');\n\n        return $this->response->redirect('user/list');\n      } catch (\\Exception $e) {\n        $this->flash->error($e->getMessage());\n\n        return $this->dispatcher->forward(['action' => 'edit']);\n      }\n    } else {\n      foreach ($form->getMessages() as $message) {\n        $this->flash->error($message->getMessage());\n      }\n\n      return $this->dispatcher->forward(['action' => 'edit', 'controller' => 'user']);\n    }\n  }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Forms;\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Password;\nuse Phalcon\\Forms\\Element\\Submit;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\StringLength;\nuse Phalcon\\Validation\\Validator\\Identical;\n\nuse App\\Core\\Models\\AclRoles;\n\nclass UserForm extends Form {\n  private $edit;\n\n  public function initialize($entity = null, $options = null) {\n    if (isset($options['edit']) && $options['edit'] === true) {\n      $this->edit = true;\n    }\n\n    // First name\n    $user_first_name = new Text('user_first_name', array(\n      'placeholder' => 'First name',\n    ));\n\n    $user_first_name->addValidators(array(\n      new PresenceOf(array(\n        'message' => 'First name is required',\n      ))\n    ));\n\n    $this->add($user_first_name);\n\n    // Last name\n    $user_last_name = new Text('user_last_name', array(\n      'placeholder' => 'Last name',\n    ));\n\n    $user_last_name->addValidators(array(\n      new PresenceOf(array(\n        'message' => 'Last name is required',\n      ))\n    ));\n\n    $this->add($user_last_name);\n\n    // Email\n    $user_email = new Text('user_email', array(\n      'placeholder' => 'Email',\n    ));\n\n    $user_email->addValidators(array(\n      new PresenceOf(array(\n        'message' => 'The e-mail is required',\n      )),\n      new Email(array(\n        'message' => 'The e-mail is not valid',\n      )),\n    ));\n\n    $this->add($user_email);\n\n    //Password\n    $user_password = new Password('user_password', array(\n      'placeholder' => 'Password',\n    ));\n\n    $user_password->addValidators(array(\n      new PresenceOf(array(\n        'message' => 'Password is required'\n      )),\n      new StringLength(array(\n        'min' => 8,\n        'messageMinimum' => 'Password is too short. Minimum 8 characters'\n      ))\n    ));\n\n    $this->add($user_password);\n\n    // User is active\n    $this->add(new Select('user_is_active', array(\n      1 => 'Yes',\n      0 => 'No'\n    )));\n\n    // User location\n    $user_profile_location = new Text('user_profile_location', array(\n      'placeholder' => 'Location',\n    ));\n\n    if (true === $this->edit) {\n      $user_profile_location->setDefault($entity->profile->getUserProfileLocation());\n    }\n\n    $this->add($user_profile_location);\n\n    // User role\n    $user_acl_role = new Select('user_acl_role', AclRoles::find(), array(\n      'using' => array('name', 'name')\n    ));\n\n    $this->add($user_acl_role);\n\n    //CSRF\n    $csrf = new Hidden('csrf');\n\n    $csrf->addValidator(\n      new Identical(array(\n        'value' => $this->security->getSessionToken(),\n        'message' => 'CSRF validation failed',\n      ))\n    );\n\n    $this->add($csrf);\n\n    $this->add(new Submit('save', array(\n      'class' => 'btn btn-lg btn-primary btn-block',\n    )));\n  }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Managers;\n\nuse App\\Core\\Models\\User;\nuse App\\Core\\Models\\UserRole;\nuse App\\Core\\Models\\AclRoles;\nuse App\\Core\\Models\\UserProfile;\n\nuse App\\Core\\Forms\\UserForm;\n\nclass UserManager extends BaseManager{\n  public function getForm($entity = null, $options = null) {\n    return new UserForm($entity, $options);\n  }\n\n  public function create($data, $user_role = 'Guest') {\n    $security = $this->getDI()->get('security');\n\n    if (isset($data['user_acl_role'])) {\n      $user_role = $data['user_acl_role'];\n    }\n\n    $user = new User();\n    $user->setUserFirstName($data['user_first_name']);\n    $user->setUserLastName($data['user_last_name']);\n    $user->setUserEmail($data['user_email']);\n    $user->setUserPassword($security->hash($data['user_password']));\n    $user->setUserIsActive($data['user_is_active']);\n\n    $o_acl_role  = AclRoles::findFirstByName($user_role);\n\n    if (!$o_acl_role) {\n      throw new \\Exception(\"Role $user_role does not exists\");\n    };\n\n    $o_user_role[0] = new UserRole();\n    $o_user_role[0]->setUserRole($user_role);\n\n    $user->roles = $o_user_role;\n\n    $profile = new UserProfile();\n    $profile->setUserProfileLocation($data['user_profile_location']);\n\n    $user->profile = $profile;\n\n    return $this->save($user, 'create');\n  }\n}\n```", "```php\npublic function update(array $data) {\n  $object = User::findFirstById($data['id']);\n\n  if (!$object) {\n    throw new \\Exception('Object not found');\n  }\n\n  $security = $this->getDI()->get('security');\n\n  $object->setUserFirstName($data['user_first_name']);\n  $object->setUserLastName($data['user_last_name']);\n  $object->setUserEmail($data['user_email']);\n  $object->setUserPassword($security->hash($data['user_password']));\n  $object->setUserIsActive($data['user_is_active']);\n\n  $o_acl_role  = AclRoles::findFirstByName($data['user_acl_role']);\n\n  if (!$o_acl_role) {\n    throw new \\Exception(\"Role $user_role does not exists\");\n  };\n\n  $o_user_role[0] = new UserRole();\n  $o_user_role[0]->setUserRole($data['user_acl_role']);\n\n  $object->roles = $o_user_role;\n\n  $object->profile->setUserProfileLocation($data['user_profile_location']);\n\n  return $this->save($object, 'update');\n}\n```", "```php\npublic function delete($id) {\n  $object = User::findFirstById($id);\n\n  if (!$object) {\n    throw new \\Exception('Object not found');\n  }\n\n  if (false === $object->delete()) {\n    foreach ($object->getMessages() as $message) {\n      $error[] = (string) $message;\n    }\n\n    throw new \\Exception(json_encode($error));\n  }\n  return true;\n}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<h1>Add</h1>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <form method=\"post\" action=\"{{ url('user/create') }}\">\n      <h4>User details</h4>\n      <hr>\n        <div class=\"form-group\">\n          <label for=\"user_first_name\">First name</label>\n            {{ form.render('user_first_name', {'class':'form-control'}) }}\n        </div>\n        <div class=\"form-group\">\n          <label for=\"user_last_name\">Last name</label>\n            {{ form.render('user_last_name', {'class':'form-control'}) }}\n        </div>\n        <div class=\"form-group\">\n          <label for=\"user_email\">Email</label>\n            {{ form.render('user_email', {'class':'form-control'}) }}\n        </div>\n        <div class=\"form-group\">\n          <label for=\"user_password\">Password</label>\n            {{ form.render('user_password', {'class':'form-control'}) }}\n        </div>\n        <div class=\"form-group\">\n          <label for=\"user_is_active\">Is active</label>\n            {{ form.render('user_is_active', {'class':'form-control'}) }}\n        </div>\n        <h4>User profile</h4>\n        <hr>\n        <div class=\"form-group\">\n          <label for=\"user_profile_location\">Location</label>\n            {{ form.render('user_profile_location', {'class':'form-control'}) }}\n        </div>\n        <h4>User role</h4>\n        <hr>\n        <div class=\"form-group\">\n          <label for=\"user_acl_role\">Role</label>\n            {{ form.render('user_acl_role', {'class':'form-control'}) }}\n          </div>\n        {{ form.render('save', {'value':'Save'}) }}\n      {{ form.render('csrf', {'value':security.getToken()}) }}\n    </form>\n  </div>\n</div>\n{% endblock %}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<h1>Confirm deletion</h1>\n<h3>Are you sure you want to delete the selected element?</3>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <form method=\"post\" action=\"{{ url('user/delete/' ~ id) }}\" class=\"form-inline\">\n      <input type=\"submit\" value=\"Yes, delete\" class=\"btn btn-sm btn-danger btn-block\">\n          <a href=\"{{ url('user/list') }}\" class=\"btn btn-lg btn-default btn-block\">Cancel</a>\n        </form>\n    </div>\n</div>\n{% endblock %}\n```", "```php\n<form method=\"post\" action=\"{{ url('user/update') }}\">\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<div class=\"pull-left\">\n  <h1>Users</h1>\n</div>\n<div class=\"pull-right\">\n  <a class=\"btn btn-success\" href=\"{{ url('user/add') }}\" aria-label=\"Left Align\">\n    <span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> New\n  </a>\n</div>\n<div class=\"clearfix\"></div>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <table class=\"table table-striped\">\n      <thead>\n      <tr>\n        <th>#</th>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Location</th>\n        <th>Created at</th>\n        <th>Options</th>\n      </tr>\n      </thead>\n      <tbody>\n        {% for record in records['items'] %}\n          <tr>\n            <th scope=\"row\">{{ record['id'] }}</th>\n              <td>{{ record['user_first_name'] }} {{ record['user_last_name'] }}</td>\n              <td>{{ record['user_email'] }}</td>\n              <td>{{ record['user_profile']['user_profile_location'] }}</td>\n              <td>{{ record['user_created_at'] }}</td>\n              <td>\n                <a class=\"btn btn-default btn-xs\" href=\"{{ url('user/edit/' ~ record['id']) }}\" aria-label=\"Left Align\">\n                <span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\">\n                </span>\n              </a>\n              <a class=\"btn btn-danger btn-xs\" href=\"{{ url('user/delete/' ~ record['id']) }}\" aria-label=\"Left Align\">\n                <span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span>\n              </a>\n            </td>\n          </tr>\n            {% else %}\n          <tr>\n              <td colspan=\"4\">There are no records in your database</td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </div>\n</div>\n{% if (records['total_pages'] > 1) %}\n{% include 'common/paginator' with {'page_url' : url('user/list'), 'stack' : records} %}\n{% endif %}\n{% endblock %}\n```", "```php\n<?php\nnamespace App\\Api\\Controllers;\n\nclass ArticlesController extends BaseController{\n  public function updateAction($id) {\n    try {\n      $manager = $this->getDI()->get('core_article_manager');\n\n      if ($this->request->getHeader('CONTENT_TYPE') == '       application/json') {\n        $data = $this->request->getJsonRawBody(true);\n      } else {\n        $data = $this->request->getPut();\n      }\n\n      if (count($data) == 0) {\n        throw new \\Exception('Please provide data', 400);\n      }\n\n      $st_inputData = array(\n        'article_user_id' => $data['article_user_id'],\n        'article_is_published' => $data['article_is_published'],\n        'translations' => [\n          $data['article_translation_lang'] => [\n            'article_translation_short_title' =>\n                $data['article_translation_short_title'],\n            'article_translation_long_title' =>\n                $data['article_translation_long_title'],\n            'article_translation_description' =>\n                $data['article_translation_description'],\n            'article_translation_slug' => $data[\n                'article_translation_slug'],\n            'article_translation_lang' => $data[\n                'article_translation_lang'],\n          ],\n        ],\n        'categories' => $data['categories'],\n        'hashtags' => $data['hashtags']\n      );\n\n      $result = $manager->restUpdate(array_merge(\n        $st_inputData, ['id' => $id]));\n\n      return $this->render($result);\n    } catch (\\Exception $e) {\n      return $this->render([\n        'code' => $e->getCode(),\n        'message' => $e->getMessage(),\n      ], $e->getCode());\n    }\n }\n\n  public function createAction() {\n    try {\n      $manager   = $this->getDI()->get('core_article_manager');\n\n      if ($this->request->getHeader('CONTENT_TYPE') ==\n        'application/json') {\n        $data = $this->request->getJsonRawBody(true);\n      } else {\n        $data = $this->request->getPost();\n      }\n      if (count($data) == 0) {\n        throw new \\Exception('Please provide data', 400);\n      }\n\n      $st_inputData = array(\n        'article_user_id' => $data['article_user_id'],\n        'article_is_published' => $data['article_is_published'],\n        'translations' => [\n          $data['article_translation_lang'] => [\n            'article_translation_short_title' => \n              $data['article_translation_short_title'],\n            'article_translation_long_title' =>\n              $data['article_translation_long_title'],\n            'article_translation_description' =>\n              $data['article_translation_description'],\n            'article_translation_slug' =>\n              $data['article_translation_slug'],\n            'article_translation_lang' =>\n              $data['article_translation_lang'],\n          ],\n        ],\n        'categories' => $data['categories'],\n        'hashtags' => $data['hashtags']\n      );\n\n      $st_output = $manager->restCreate($st_inputData);\n\n      return $this->render($st_output);\n    } catch (\\Exception $e) {\n      return $this->render([\n        'code' => $e->getCode(),\n        'message' => $e->getMessage(),\n      ], $e->getCode());\n    }\n  }\n}\n```", "```php\n<?php\nnamespace App\\Backoffice\\Controllers;\n\nclass ArticleController extends BaseController {\n  public function createAction() {\n    if (!$this - > request - > isPost()) {\n      return $this - > response - > redirect('article/list');\n    }\n    $manager = $this - > getDI() - > get('core_article_manager');\n    $form = $manager - > getForm();\n    if ($form - > isValid($this - > request - > getPost())) {\n      try {\n        $manager = $this - > getDI() - > get('core_article_manager');\n        $post_data = $this - > request - > getPost();\n        $data = array_merge($post_data,\n          ['article_user_id ' => $this->auth->getUserId()]);\n\n      $manager - > create($data);\n      $this - > flashSession - > success('Object was created \n        successfully ');\n        return $this - > response - > redirect('article/list');\n      } catch (\\Exception $e) {\n        $this - > flash - > error($e - > getMessage());\n        return $this - > dispatcher - > forward(['action' =>\n          'add'\n        ]);\n      }\n    } else {\n      foreach($form - > getMessages() as $message) {\n        $this - > flash - > error($message - > getMessage());\n      }\n      return $this - > dispatcher - > forward(['action' => 'add',\n        'controller' => 'article'\n      ]);\n    }\n  }\n  public function updateAction() {\n    if (!$this - > request - > isPost()) {\n      return $this - > response - > redirect('article/list');\n    }\n    $manager = $this - > getDI() - > get('core_article_manager');\n    $object_id = $this - > persistent - > get('id');\n    $object = $manager - > findFirstById($object_id);\n    $form = $manager - > getForm($object);\n    if ($form - > isValid($this - > request - > getPost())) {\n      try {\n        $manager = $this - > getDI() - > get('core_article_manager ');\n        $post_data = $this - > request - > getPost();\n        $data = array_merge(\n          $post_data, ['article_user_id' => $this - > auth - > getUserId(), 'id' => $object_id]);\n        $manager - > update($data);\n        $this - > flashSession - > success('Object was updated successfully ');\n\n        return $this - > response - > redirect('article/list');\n      } catch (\\Exception $e) {\n        $this - > flash - > error($e - > getMessage());\n        return $this - > dispatcher - > forward(['action' =>\n          'edit'\n        ]);\n      }\n    } else {\n      foreach($form - > getMessages() as $message) {\n        $this - > flash - > error($message - > getMessage());\n      }\n      return $this - > dispatcher - > forward(['action' => 'edit',\n        'controller' => 'category'\n      ]);\n    }\n  }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Forms;\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\TextArea;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Forms\\Element\\Submit;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Validation\\Validator\\Identical;\n\nuse App\\Core\\Models\\CategoryTranslation;\nuse App\\Core\\Models\\Hashtag;\n\nclass ArticleForm extends Form {\n  private $edit = false;\n  public function initialize($entity = null, $options = null) {\n    if (isset($options['edit']) && $options['edit'] === true) {\n      $this->edit = true;\n    }\n    $locales = $this->getDI()->get('config')->i18n->locales->\n        toArray();\n    foreach ($locales as $locale => $name) {\n      if (true === $this->edit) {\n        $translations = $entity->getTranslations([\n            \"article_translation_lang = '$locale'\"])->toArray();\n      }\n      $article_translation_short_title[$locale] = new Text \n      (\"translations[$locale][article_translation_short_title]\", [\n        'value' => $this->edit === true ? $translations[0]\n        ['article_translation_short_title'] : null\n      ]);\n      $article_translation_long_title[$locale] = new Text \n      (\"translations[$locale][article_translation_long_title]\", [\n        'value' => $this->edit === true ? $translations[0]\n        ['article_translation_long_title'] : null\n      ]);\n      $article_translation_description[$locale] = new TextArea \n      (\"translations[$locale][article_translation_description]\", [\n        'value' => $this->edit === true ? $translations[0]\n        ['article_translation_description'] : null\n      ]);\n      $article_translation_slug[$locale] = new Text ( \n        \"translations[$locale][article_translation_slug]\", [\n        'value' => $this->edit === true ? $translations[0]\n        ['article_translation_slug'] : null\n      ]);\n      $article_translation_lang[$locale] = new Hidden ( \n        \"translations[$locale][article_translation_lang]\", [\n        'value' => $locale\n      ]);\n      $this->add( $article_translation_short_title[$locale] );\n      $this->add( $article_translation_long_title[$locale] );\n      $this->add( $article_translation_description[$locale] );\n      $this->add( $article_translation_slug[$locale] );\n      $this->add( $article_translation_lang[$locale] );\n    }\n    // Categories\n    $categories = new Select('categories[]',\n      CategoryTranslation::find([\n          \"category_translation_lang = 'en'\"]), [\n          'using' => [\n            'category_translation_category_id',\n            'category_translation_name'\n          ],\n          'multiple' => true\n        ]);\n        if ($this->edit === true) {\n          $categories_defaults = array();\n          foreach ($entity->getCategories([\"columns\" =>\n              [\"id\"]]) as $category) {\n            $categories_defaults[] = $category->id;\n        }\n        $categories->setDefault($categories_defaults);\n      }\n      $this->add($categories);\n      // Hash tags\n      $hashtags = new Select('hashtags[]', Hashtag::find(), [\n        'using' => ['id', 'hashtag_name'],\n        'multiple' => true\n      ]);\n      if ($this->edit === true) {\n        $hashtags_defaults = array();\n        foreach ($entity->getHashtags([\"columns\" =>\n            [\"id\"]]) as $hashtag) {\n          $hashtags_defaults[] = $hashtag->id;\n        }\n        $hashtags->setDefault($hashtags_defaults);\n      }\n      $this->add($hashtags);\n      // Is published\n      $this->add(new Select('article_is_published', array(\n          1 => 'Yes',\n          0 => 'No'\n      )));\n      //CSRF\n      $csrf = new Hidden('csrf');\n      $csrf->addValidator(\n        new Identical(array(\n          'value' => $this->security->getSessionToken(),\n          'message' => 'CSRF validation failed',\n        ))\n      );\n      $this->add($csrf);\n      $this->add(new Submit('save', array(\n      'class' => 'btn btn-lg btn-primary btn-block',\n    )));\n  }\n}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<h1>Add</h1>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <form method=\"post\" action=\"{{ url('article/create') }}\">\n      {% for locale, name in locales %}\n      <h3>Article ({{ name }})</h3>\n      <hr>\n      <div class=\"form-group\">\n        <label for=\"article_translation_short_title\">Title\n        </label>\n        {{ form.render('translations['~locale~']\n        [article_translation_short_title]', {'class':'form-control'}) }}\n      </div>\n      <div class=\"form-group\">\n        <label for=\"article_translation_long_title\">\n            Long title</label>\n        {{ form.render('translations['~locale~']\n          [article_translation_long_title]',\n          {'class':'form-control'}) }}\n      </div>\n      <div class=\"form-group\">\n        <label for=\"article_translation_description\">Description\n        </label>\n        {{ form.render('translations['~locale~']\n          [article_translation_description]',\n          {'class':'form-control', 'rows': 8}) }}\n      </div>\n      <div class=\"form-group\">\n        <label for=\"article_translation_slug\">Slug\n        </label>\n        {{ form.render('translations['~locale~']\n          [article_translation_slug]',\n          {'class':'form-control'}) }}\n      </div>\n      {{ form.render('translations['~locale~']\n        [article_translation_lang]') }}\n        {% endfor %}\n      <div class=\"form-group\">\n    <label for=\"article_is_published\">Is published\n    </label>\n    {{form.render('article_is_published',\n    {'class':'formcontrol'}) }}\n    </div>\n    <h3>Categories</h3>\n    <hr>\n    <div class=\"form-group\">\n    <label for=\"categories\">Select one or more \n    categories</label>\n    {{ form.render('categories[]', {'class':'formcontrol'}) }}\n    </div>\n    <h3>Hash tags</h3>\n    <hr>\n    <div class=\"form-group\">\n    <label for=\"hashtags\">Select one or more hash tags\n    </label>\n      {{form.render('hashtags[]',\n      {'class':'form-control'})}}\n    </div>\n    {{form.render('save', {'value':'Save'}) }}\n    {{form.render('csrf', {'value':security.getToken()}) }}\n  </form>\n  </div>\n</div>\n{% endblock %}\n```", "```php\n{% extends 'layout.volt' %} {% block body %}\n<div class=\"pull-left\">\n    <h1>Articles</h1>\n</div>\n<div class=\"pull-right\">\n    <a class=\"btn btn-success\" href=\"{{ url('article/add') }}\" aria-label=\"Left Align\">\n        <span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> New\n    </a>\n</div>\n<div class=\"clearfix\"></div>\n<hr>\n<div class=\"table-responsive\">\n\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Title</th>\n        <th>Is published</th>\n        <th>Author</th>\n        <th>Created at</th>\n        <th>Options</th>\n      </tr>\n    </thead>\n    <tbody>\n    {% for record in records['items'] %}\n      <tr>\n        <td>{{record['id'] }}</td>\n        <td>{{record['article_translations'][0]\n          ['article_translation_short_title'] }}</td>\n        <td>{{record['article_is_published'] }}</td>\n        <td>{{record['article_author']['user_first_name']}} \n               {{record['article_author']['user_last_name']}}\n       </td>\n        <td>{{ record['article_created_at'] }}</td>\n        <td>\n          <a class=\"btn btn-default btn-xs\"\n            href=\"{{url('article/edit/' ~ record['id']) }}\"\n            aria-label=\"Left Align\">\n            <span class=\"glyphicon glyphicon-pencil\"\n              ariahidden=\"true\"></span>\n          </a>\n          <a class=\"btn btn-danger btn-xs\"\n            href=\"{{url('article/delete/' ~ record['id']) }}\"\n            aria-label=\"Left Align\">\n            <span class=\"glyphicon glyphicon-trash\"\n              ariahidden=\"true\"></span>\n          </a>\n        </td>\n      </tr>\n      {% else %}\n      <tr>\n        <td colspan=\"4\">There are no records in your\n          database</td>\n      </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n</div>\n{% if (records['total_pages'] > 1) %}\n{% include 'common/paginator' with {'page_url' : url('article/list'), 'stack' : records} %}\n{% endif %}\n{% endblock %}\n```", "```php\n$this->view->identity = $this->getDI()->get('auth')->getIdentity();\n```", "```php\n<li class=\"disabled\"><a href=\"#\">Welcome, {{ identity['name'] }}</a></li>\n```", "```php\npublic function indexAction() {\n  $total_articles = $this->getDI()->get('core_article_manager')->find()->count();\n  $total_users = $this->getDI()->get('core_user_manager')->find()->count();\n  $total_categories = $this->getDI()->get('core_category_manager')->find()->count();\n  $total_hashtags = $this->getDI()->get('core_hashtag_manager')->find()->count();\n  $this->view->setVar('dashboard', [\n    'total_articles' => $total_articles,\n    'total_users' => $total_users,\n    'total_categories' => $total_categories,\n    'total_hashtags' => $total_hashtags,\n  ]);\n}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<div class=\"row\">\n  <div class=\"col-md-6 col-xs-6 text-center\">\n    <h1>{{ dashboard['total_articles'] }}\n      <span class=\"glyphicon glyphicon-align-justify\">\n      </span>\n    </h1>\n    <small>Articles</small>\n  </div>\n  <div class=\"col-md-6 col-xs-6 text-center\">\n    <h1>{{ dashboard['total_categories'] }}\n      <span class=\"glyphicon glyphicon-th\">\n      </span>\n    </h1>\n    <small>Categories</small>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-md-6 col-xs-6 text-center\">\n    <h1>{{ dashboard['total_hashtags'] }}\n    <span class=\"glyphicon glyphicon-tag\">\n    </span></h1>\n    <small>Tags</small>\n  </div>\n  <div class=\"col-md-6 col-xs-6 text-center\">\n  <h1>{{ dashboard['total_users'] }}\n    <span class=\"glyphicon glyphicon-user\">\n    </span>\n  </h1>\n  <small>Users</small>\n</div>\n</div>\n{% endblock %}\n```", "```php\n<?php\nnamespace App\\Core\\Managers;\n\nuse App\\Core\\Models\\Article;\nuse App\\Core\\Models\\ArticleTranslation;\nuse App\\Core\\Models\\ArticleCategoryArticle;\nuse App\\Core\\Models\\ArticleHashtagArticle;\nuse App\\Core\\Models\\Category;\nuse App\\Core\\Models\\Hashtag;\nuse App\\Core\\Models\\User;\n```", "```php\nclass ArticleManager extends BaseManager\n{\n    private $default_data = array(\n        'article_user_id' => 1,\n        'article_is_published' => 0,\n        'translations' => array(\n            'en' => array(\n                'article_translation_short_title' => 'Short title',\n                'article_translation_long_title' => 'Long title',\n                'article_translation_description' => 'Description',\n                'article_translation_slug' => '',\n                'article_translation_lang' => 'en',\n            ),\n        ),\n        'categories' => array(),\n        'hashtags' => array()\n    );\n```", "```php\n    public function getForm($entity = null, $options = null)\n    {\n        return new ArticleForm($entity, $options);\n    }\n\n    public function create($input_data)\n    {\n        $data = $this->prepareData($input_data);\n\n        $article = new Article();\n        $article->setArticleIsPublished($data[\n  'article_is_published']);\n\n        $articleTranslations = array();\n\n        foreach ($data['translations'] as $lang => $translation) {\n            $tmp = new ArticleTranslation();\n            $tmp->assign($translation);\n            array_push($articleTranslations, $tmp);\n        }\n\n        if (count($data['categories']) > 0) {\n            $article->categories = Category::find([\n                \"id IN (\".implode(',', $data['categories']).\")\",\n            ])->filter(function ($category) {\n                return $category;\n            });\n        }\n\n        if (count($data['hashtags']) > 0) {\n            $article->hashtags = Hashtag::find([\n                \"id IN (\".implode(',', $data['hashtags']).\")\",\n            ])->filter(function ($hashtag) {\n                return $hashtag;\n            });\n        }\n\n        $user = User::findFirstById((int) $data['article_user_id']);\n\n        if (!$user) {\n            throw new \\Exception('User not found', 404);\n        }\n\n        $article->setArticleUserId($data['article_user_id']);\n\n        $article->translations = $articleTranslations;\n\n        return $this->save($article, 'create');\n    }\n```", "```php\n    public function update($input_data)\n    {\n        $article = Article::findFirstById($input_data['id']);\n\n        if (!$article) {\n            throw new \\Exception('Article not found', 404);\n        }\n\n        $data = $this->prepareData($input_data);\n\n        $article->setArticleIsPublished($data['article_is_published']);\n        $article->setArticleUpdatedAt(new \\Phalcon\\Db\\RawValue('NOW()'));\n\n        foreach ($data['translations'] as $lang => $translation) {\n            $article->getTranslations()->filter(function($t) use($lang, $translation){\n\n                if ($t->getArticleTranslationLang() == $lang) {\n                    $t->assign($translation);\n                    $t->update();\n                }\n            });\n        }\n\n        $results = ArticleCategoryArticle::findByArticleId($input_data['id']);\n\n        if ($results) {\n            $results->delete();\n        }\n\n        if (count($data['categories']) > 0) {\n            $article->categories = Category::find([\n              \"id IN (\".implode(',', $data['categories']).\")\",])->filter(function ($category) {\n                return $category;\n            });\n        }\n\n        $results = ArticleHashtagArticle::findByArticleId(\n  $input_data['id']);\n\n        if ($results) {\n            $results->delete();\n        }\n\n        if (count($data['hashtags']) > 0) {\n            $article->hashtags = Hashtag::find([\n                \"id IN (\".implode(',', $data['hashtags']).\")\",\n            ])->filter(function ($hashtag) {\n                return $hashtag;\n            });\n        }\n\n        $user = User::findFirstById((int) $data['article_user_id']);\n\n        if (!$user) {\n            throw new \\Exception('User not found', 404);\n        }\n\n        $article->setArticleUserId($data['article_user_id']);\n\n        return $this->save($article, 'update');\n    }\n```", "```php\n    public function delete($id)\n    {\n        $article = Article::findFirstById($id);\n\n        if (!$article) {\n            throw new \\Exception('Article not found', 404);\n        }\n\n        if (false === $article->delete()) {\n            foreach ($article->getMessages() as $message) {\n                $error[] = (string) $message;\n            }\n\n            throw new \\Exception(json_encode($error));\n        }\n\n        return true;\n    }\n\n    private function prepareData($input_data)\n    {\n        $data = array_merge($this->default_data, $input_data);\n\n        if (!is_array($data['categories'])) {\n            $data['categories'] = $data['categories'] != '' ?\n  array_map('trim', explode(',', $data['categories'])) : null;\n\n        } else {\n            $data['categories'] = implode(',', $data['categories']);\n        }\n\n        if (!is_array($data['hashtags'])) {\n            $data['hashtags'] = $data['hashtags'] != '' ?\n  array_map('trim', explode(',', $data['hashtags'])) : null;\n\n        } else {\n            $data['hashtags'] = implode(',', $data['hashtags']);\n        }\n\n        return $data;\n    }\n}\n```", "```php\n$robots->getParts()->delete();\n```", "```php\n$robots->getParts()->update($data, function($part) {\n    if ($part->type == Part::TYPE_BASIC) {\n        return false;\n    }\n    return true;\n});\n```"]