["```php\n  <?php namespace App;\n\n  use Illuminate\\Auth\\Authenticatable;\n  use Illuminate\\Database\\Eloquent\\Model;\n  use Illuminate\\Auth\\Passwords\\CanResetPassword;\n  use Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\n  use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\n  class User extends Model implements AuthenticatableContract, CanResetPasswordContract {\n\n    use Authenticatable, CanResetPassword;\n\n    /**\n     * The database table used by the model.\n     *\n     * @var string\n     */\n    protected $table = 'users';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name', 'email', 'password'];\n\n    /**\n     * The attributes excluded from the model's JSON form.\n     *\n     * @var array\n     */\n    protected $hidden = ['password', 'remember_token'];\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class IdentityDocument extends Model {\n\n    //\n\n  }\n```", "```php\n  $this->hasOne('App\\IdentityDocument');\n```", "```php\n  $this->belongsTo('App\\User');\n```", "```php\n  public function identityDocument()\n  {\n    return $this->hasOne('App\\IdentityDocument');\n  }\n```", "```php\n  public function user()\n  {\n    return $this->belongsTo(' App\\User');\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Auth\\Authenticatable;\n  use Illuminate\\Database\\Eloquent\\Model;\n  use Illuminate\\Auth\\Passwords\\CanResetPassword;\n  use Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\n  use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\n  class User extends Model implements AuthenticatableContract, CanResetPasswordContract {\n\n    use Authenticatable, CanResetPassword;\n\n    /**\n     * The database table used by the model.\n     *\n     * @var string\n     */\n    protected $table = 'users';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name', 'email', 'password'];\n\n    /**\n     * The attributes excluded from the model's JSON form.\n     *\n     * @var array\n     */\n    protected $hidden = ['password', 'remember_token'];\n\n    public function identityDocument()\n    {\n      return $this->hasOne(' App\\IdentityDocument');\n    }\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class IdentityDocument extends Model {\n\n    public function user()\n    {\n      return $this->belongsTo(' App\\User');\n    }\n\n  }\n```", "```php\n  $this->hasOne('App\\IdentityDocument', 'another_user_external_id');\n```", "```php\n  $this->belongsTo(' App\\User', 'another_user_external_id');\n```", "```php\n    $this->hasOne('App\\IdentityDocument', 'owner_id');\n```", "```php\n    $this->belongsTo('App\\IdentityDocument', 'documentidentifier', 'owner_id');\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Author extends Model {\n\n    //\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Book extends Model {\n\n    //\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Author extends Model {\n\n    public function books()\n    {\n      return $this->hasMany('App\\Book');\n    }\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Book extends Model {\n\n    public function author()\n    {\n      return $this->belongsTo('App\\Author');\n    }\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Book extends Model {\n\n    public function author()\n    {\n      return $this->belongsTo('App\\Author');\n    }\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Category extends Model {\n\n    //\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Book extends Model {\n\n    public function author()\n    {\n      return $this->belongsTo('App\\Author');\n    }\n\n    public function categories()\n    {\n      return $this->belongsToMany('App\\Category');\n    }\n\n  }\n```", "```php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Category extends Model {\n\n    public function books()\n    {\n      return $this->belongsToMany('App\\Book');\n    }\n\n  }\n```", "```php\n  Schema::create('book_category', function(Blueprint $table)\n  {\n    $this->increments('id');\n\n    $this->integer('book_id')->unsigned();\n    $this->integer('category_id')->unsigned();\n\n    $this->text('notes');\n\n    $this->timestamps();\n  });\n```", "```php\n  $user = \\App\\User::where('first_name', '=', 'Francesco')->where('last_name', '=', 'Malatesta')->first();\n\n  $identityDocumentNumber = $user->identityDocument->number;\n```", "```php\n  $user = \\App\\User::where('first_name', '=', 'Francesco')->where('last_name', '=', 'Malatesta')->first();\n\n  $identityDocumentNumber = $user->identityDocument->number;\n```", "```php\n  // the user Francesco Malatesta as an ID = 1...\n  select * from users where first_name = 'Francesco' AND last_name = 'Malatesta';\n\n  select * from identitydocuments where user_id = 1\n```", "```php\n  $author = \\App\\Author::where('first_name', '=', 'Jules')->where('last_name', '=', 'Verne')->first();\n\n  foreach($author->books as $book)\n  {\n    echo $book->title . <br/>;\n  }\n\n  // outputs:\n  //\n  // Journey to the Center of the Earth\n  // Twenty Thousand Leagues Under the Sea\n  // Around the World in Eighty Days\n  // Michel Strogoff\n```", "```php\n  $author = \\App\\Author::where('first_name', '=', 'Jules')->where('last_name', '=', 'Verne')->first();\n\n  $theBooks = $author->books()->where('title', 'LIKE', '%the%')->get();\n\n  foreach($theBooks as $book)\n  {\n    echo $book->title . <br/>;\n  }\n\n  // outputs:\n  //\n  // Journey to the Center of the Earth\n  // Twenty Thousand Leagues Under the Sea\n  // Around the World in Eighty Days\n```", "```php\n      return $this->belongsToMany('App\\Category')->withPivot('created_at', 'notes');\n    ```", "```php\n      $book = App\\Book::find(23);\n\n      foreach($book->categories as $category)\n      {\n        echo 'Association Date: ' . $category->pivot->created_at;\n        echo 'Association Notes: ' . $category->pivot->notes;\n      } \n    ```", "```php\n  return $this->belongsToMany('App\\Category')->withTimestamps();\n```", "```php\n  $authorsWithABook = \\App\\Author::has('books')->get();\n```", "```php\n  $authorsWithAtLeastFiveBooks = \\App\\Author::has('books', '>=', 5)->get();\n```", "```php\n  $authorsWithABookFromThe1864 = \\App\\Author::whereHas('books', function($q)\n  {\n      $q->where('year', '=', 1864);\n\n  })->get();\n```", "```php\n  $books = \\App\\Book::take(100)->get();\n\n  foreach($books as $book)\n  {\n    $author = $book->author;\n\n    echo $author->first_name . ' ' . $author->last_name;\n  }\n```", "```php\n  $books = \\App\\Book::with('author')->take(100)->get();\n\n  foreach($books as $book)\n  {\n    $author = $book->author;\n\n    echo $author->first_name . ' ' . $author->last_name;\n  }\n```", "```php\n  select * from books;\n  select * from authors where id in (1, 2, 3, ...);\n```", "```php\n  $books = \\App\\Book::with('author', 'categories')->take(100)->get();\n\n  foreach($books as $book)\n  {\n    $author = $book->author;\n\n    echo 'Author: ' . $author->first_name . ' ' . $author->last_name;\n\n    echo 'Categories:';\n\n    foreach($book->categories as $category)\n    {\n      echo $category->name . ', ';\n    }\n  }\n```", "```php\n  $categories = \\App\\Categories::with('books.author')->get();\n\n  foreach($categories as $category)\n  {\n    echo $category->name;\n\n    foreach($category->books as $book)\n    {\n      echo 'Title: ' . $book->title;\n      echo 'Author: ' . $book->author->first_name . ' ' . $book->author->last_name;\n    }\n  }\n```", "```php\n  $authors = \\App\\Author::with(['books' => function($query)\n  {\n    $query->orderBy('year', 'asc');\n\n  }])->get();\n```", "```php\n  ['relationship' => function($query){\n\n    // conditions here, using the $query object\n\n  }]\n```", "```php\n  $books = Book::all();\n\n  // some operations here...\n\n  $books->load('author', 'categories');\n```", "```php\n  $books->load(['categories' => function($query)\n  {\n      $query->orderBy('name', 'asc');\n\n  }]);\n```", "```php\n  $book = new Book;\n\n  $book->title = 'Michael Strogoff';\n\n```", "```php\n$author = Author::where('first_name', '=', 'Jules')->where('last_name', '=', 'Verne')->first();\n\n  $book = new Book;\n\n  $book->title = 'Michael Strogoff';\n  // other data...\n\n  $book->author_id = $author->id;\n\n  // and finally...\n  $book->save();\n```", "```php\n  $author = Author::where('first_name', '=', 'Jules')->where('last_name', '=', 'Verne')->first();\n\n  $author->books->save(new Book([\n    'title' => 'Michael Strogoff',\n    // other attributes...\n  ]));\n```", "```php\n  $author = Author::where('first_name', '=', 'Jules')->where('last_name', '=', 'Verne')->first();\n\n  $author->books->saveMany([\n    new Book(['title' => 'Michael Strogoff']),\n    new Book(['title' => 'The Mysterious Island']),\n    new Book(['title' => 'Off on a Comet'])\n  ]);\n```", "```php\n  $wrongAuthor = Author::where('first_name', '=', 'Jules')->where('last_name', '=', 'Verne')->first();\n\n  $wrongAuthor->books->save(new Book([\n    'title' => 'The Alchemist'\n  ]));\n\n  // oops! wrong author!\n\n  $book = Book::where('title', '=', 'The Alchemist')->first();\n  $rightAuthor = Author::where('first_name', '=', 'Paulo')->where('last_name', '=', 'Coelho')->first();\n\n  // done!\n  $rightAuthor->books->associate($book);\n```", "```php\n  $book = new Book();\n\n  $book->title = \"The Alchemist\";\n  // other attributes...\n\n  $book->save();\n\n  // after save() call, an id is created.\n\n  $category = new Category();\n\n  $category->name = \"Adventure\";\n\n  $category->save();\n\n  // and now...\n\n  $category->books->attach($book->id);\n```", "```php\n  $category = Category::where('name', '=', 'Opera')->first();\n\n  $book = Book::where('title', '=', 'Journey to the Center of the Earth')->first();\n\n  $category->books->attach(\n    $book->id, \n    ['notes' => \"Well, I'm not so sure about this...\"]\n  );\n```", "```php\n  $category = Category::where('name', '=', 'Opera')->first();\n\n  $book = Book::where('title', '=', 'Journey to the Center of the Earth')->first();\n\n  // oh, come on...\n  $category->books->detach($book->id);\n```", "```php\n  $category->books->attach(\n    [4, 8, 15, 17, 22, 42]\n  );\n\n  $category->books->detach([17, 22]);\n\n  $category->books->attach([16, 23 => ['notes' => 'be careful next time...']]);\n```", "```php\n  $category->books->sync(\n    [4, 8, 15, 17, 22, 42]\n  );\n\n  $category->books->sync(\n    [4, 8, 15, 16, 23, 42]\n  );\n```", "```php\n  $category->books->sync(\n    [4, 8, 15, 17, 22, 42]\n  );\n```", "```php\n  $category->books->sync(\n    [4, 8, 15, 16, 23, 42]\n  );\n```", "```php\n  $category->books->sync(\n    [4, 8, 15, 16, 23, 42 => ['notes' => 'We either live together.... or die alone.']]\n  );\n```", "```php\n  // file: app/User.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class User extends Model {\n\n    public function researches()\n    {\n      return $this->hasMany('App\\Research');\n    }\n\n  }\n\n  // file: app/Research.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Research extends Model {\n\n    public function user()\n    {\n      return $this->belongsTo('App\\User');\n    }\n\n    public function sections()\n    {\n      return $this->hasMany('App\\Section');\n    }\n\n  }\n\n  // file: app/Section.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Section extends Model {\n\n    public function research()\n    {\n      return $this->belongsTo('App\\Research');\n    }\n\n  }\n```", "```php\n  // getting $author with id = 1...\n  $author = Author::find(1);\n\n  // getting all $author researches...\n  $researches = $author->researches;\n\n  $allSections = [];\n\n  // iterating to get all sections\n  foreach($researches as $research)\n  {\n    $allSections[] = $research->sections;\n  }\n```", "```php\n  // file: app/User.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class User extends Model {\n\n    public function researches()\n    {\n      return $this->hasMany('App\\Research');\n    }\n\n    public function sections()\n    {\n      return $this->hasManyThrough('App\\Section', 'App\\Research');\n    }\n\n  }\n```", "```php\n  return $this->hasManyThrough('App\\Section', 'App\\Research', 'user_id', 'research_id');\n```", "```php\n  // file: app/Photo.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Photo extends Model {\n\n    //\n\n  }\n\n  // file: app/Product.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Product extends Model {\n\n    //\n\n  }\n\n  // file: app/Category.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Category extends Model {\n\n    //\n\n  }\n\n  // file: app/Post.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Post extends Model {\n\n    //\n\n  }\n```", "```php\n  // file: app/Photo.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Photo extends Model {\n\n    public function imageable()\n    {\n      return $this->morphTo();\n    }\n\n  }\n\n  // file: app/Product.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Product extends Model {\n\n    public function photos()\n    {\n      return $this->morphMany('Photo', 'imageable');\n    }\n\n  }\n\n  // file: app/Category.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Category extends Model {\n\n    public function photos()\n    {\n      return $this->morphMany('Photo', 'imageable');\n    }\n\n  }\n\n  // file: app/Post.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Post extends Model {\n\n    public function photos()\n    {\n      return $this->morphMany('Photo', 'imageable');\n    }\n\n  }\n```", "```php\n  products\n      id - integer\n      name - string\n\n  categories\n      id - integer\n      name - string\n\n  posts\n      id - integer\n      name - string\n\n  photos\n      id - integer\n      path - string\n      imageable_id - integer\n      imageable_type - string\n```", "```php\n  // getting a sample product...\n  $product = App\\Product::find(3);\n\n  foreach($product->photos as $photo)\n  {\n    // working with photos here...\n  }\n```", "```php\n  // getting a sample category\n  $category = App\\Category::find(42);\n\n  foreach($category->photos as $photo)\n  {\n    // working with category photos here...\n  }\n```", "```php\n  $photo = App\\Photo::find(23);\n\n  // getting the owner...\n  var_dump($photo->imageable);\n```", "```php\n  // file: app/Author.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Author extends Model {\n\n    public function categories()\n    {\n      return $this->morphToMany('App\\Category', 'categorizable');\n    }\n\n  }\n\n  // file: app/Book.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Book extends Model {\n\n    public function categories()\n    {\n      return $this->morphToMany('App\\Category', 'categorizable');\n    }\n\n  }\n\n  // file: app/Category.php\n  <?php namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Category extends Model {\n\n    public function authors()\n    {\n      return $this->morphedByMany('App\\Author', 'categorizable');\n    }\n\n    public function books()\n    {\n      return $this->morphedByMany('App\\Book', 'categorizable');\n    }\n\n  }\n```", "```php\n  categorizables\n      tag_id - integer\n      categorizable_id - integer\n      categorizable_type – string\n```", "```php\n  // getting a sample author\n  $author = App\\Author::find(30);\n\n  // accessing categories...\n  var_dump($author->categories);\n\n  // getting a sample book\n  $book = App\\Book::find(60);\n\n  // accessing categories... in the same way!\n  var_dump($book->categories);\n```"]