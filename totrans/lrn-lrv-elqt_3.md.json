["```php\nphp artisan make:model\n\n```", "```php\n    php artisan make:model Book\n\n    ```", "```php\n  <?php \n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Book extends Model {\n\n    protected $table = 'my_books';\n\n}\n```", "```php\n  Route::get('book_create', function(){\n\n    $book = new \\App\\Book;\n\n    $book->title = 'My First Book!';\n    $book->pages_count = 230;\n    $book->price = 10.5;\n    $book->description = 'A very original lorem ipsum dolor sit amet...';\n\n  });\n```", "```php\n  Route::get('book_create', function() {\n\n      $book = new \\App\\Book;\n\n      $book->title = 'My First Book!';\n      $book->pages_count = 230;\n      $book->price = 10.5;\n      $book->description = 'A very original lorem ipsum dolor sit amet...';\n\n      $book->save();\n\n  });\n```", "```php\n  Route::get('book_create', function() {\n\n      $book = new \\App\\Book;\n\n      $book->title = 'My First Book!';\n      $book->pages_count = 230;\n      $book->price = 10.5;\n      $book->description = 'A very original lorem ipsum dolor sit amet...';\n\n      $book->save();\n\n      echo 'Book: ' . $book->id;\n\n  });\n```", "```php\n  Route::get('book_get_all', function(){\n\n    return \\App\\Book::all();\n\n  });\n```", "```php\n  [\n    {\n      id: 1,\n      title: \"My First Book!\",\n      pages_count: 230,\n      price: \"10.50\",\n      description: \"A very original lorem ipsum dolor sit amet...\",\n      created_at: \"2015-03-24 16:45:59\",\n      updated_at: \"2015-03-24 16:45:59\"\n    }\n  ]\n```", "```php\n    $book = new \\App\\Book;\n\n    $book->title = 'My Second Book!';\n    $book->pages_count = 122;\n    $book->price = 9.5;\n    $book->description = 'Another very original lorem ipsum dolor sit amet...';\n\n    $book->save();\n```", "```php\n  [\n    {\n      id: 1,\n      title: \"My First Book!\",\n      pages_count: 230,\n      price: \"10.50\",\n      description: \"A very original lorem ipsum dolor sit amet...\",\n      created_at: \"2015-03-24 16:45:59\",\n      updated_at: \"2015-03-24 16:45:59\"\n    },\n    {\n      id: 2,\n      title: \"My Second Book!\",\n      pages_count: 122,\n      price: \"9.50\",\n      description: \"Another very original lorem ipsum dolor sit amet...\",\n      created_at: \"2015-03-24 16:57:15\",\n      updated_at: \"2015-03-24 16:57:15\"\n    }\n  ]\n```", "```php\n  Route::get('book_get_2', function(){\n\n      return \\App\\Book::find(2);\n\n  });\n```", "```php\n  {\n    id: 2,\n    title: \"My Second Book!\",\n    pages_count: 122,\n    price: \"9.50\",\n    description: \"Another very original lorem ipsum dolor sit amet...\",\n    created_at: \"2015-03-24 16:57:15\",\n    updated_at: \"2015-03-24 16:57:15\"\n  }\n```", "```php\n  Route::get('book_get_where', function(){\n\n      $result = \\App\\Book::where('pages_count', '<', 1000)->get();\n      return $result;\n\n  });\n```", "```php\n  Route::get('book_get_where', function(){\n\n      $result = \\App\\Book::where('pages_count', '<', 1000)->first();\n      return $result;\n\n  });\n```", "```php\n  Route::get('book_get_where_chained', function(){\n\n      $result = \\App\\Book::where('pages_count', '<', 1000)\n              ->where('title', '=', 'My First Book!')\n              ->get();\n\n      return $result;\n\n  });\n```", "```php\n  Route::get('book_get_where_iterate', function(){\n\n      $results = \\App\\Book::where('pages_count', '<', 1000)->get();\n\n      if(count($results) > 0)\n      {\n        foreach($results as $book){\n\n            echo 'Book: ' . $book->title . ' - Pages: ' . $book->pages_count . ' <br/>';\n\n        }\n      }\n      else\n        echo 'No Results!';\n\n      return '';\n  });\n```", "```php\n  echo 'Book: ' . $book->title . ' - Pages: ' . $book->pages_count . ' <br/>';\n```", "```php\n  Route::get('book_update', function() {\n\n      $book = \\App\\Book::find(1);\n\n      $book->title = 'My Updated First Book!';\n      $book->pages_count = 150;\n\n      $book->save();\n\n  });\n```", "```php\n  Route::get('book_delete_1', function() {\n\n      \\App\\Book::find(1)->delete();\n\n  });\n```", "```php\n  where('field_name', 'operator', 'term')\n```", "```php\n  where('pages_count', '<', 100)\n```", "```php\n  where('pages_count', '<', 100)->where('title', 'LIKE', 'M%')\n```", "```php\n  Route::get('book_get_where_complex', function(){\n\n      $results = \\App\\Book::where('title', 'LIKE', '%Second%')\n              ->orWhere('pages_count', '>', 140)\n              ->get();\n\n      return $results;\n\n  });\n```", "```php\n  Route::get('book_get_where_more_complex', function(){\n\n      $results = \\App\\Book::where(function($query){\n\n          $query\n              ->where('pages_count', '>', 120)\n              ->where('title', 'LIKE', '%Book%');\n\n      })->orWhere(function($query){\n\n          $query\n              ->where('pages_count', '<', 200)\n              ->orWhere('description', '=', '');\n\n      })->get();\n\n      return $results;\n\n  });\n```", "```php\n  Route::get('...', function(){\n\n      $results = \\App\\Book::where(function($query){\n\n          $query\n              ->where(function($query){\n\n                // other conditions here...\n\n                $query->where(function($query){\n\n                  // deeper and deeper in the seas of conditions...\n\n                });\n\n              })\n              ->orWhere('field', 'operator', 'condition');\n\n      })->orWhere(function($query){\n\n          $query\n              ->where('field', 'operator', 'condition')\n              ->orWhere(function($query){\n\n          // other conditions here...\n\n              });\n\n      })->get();\n\n      return $results;\n\n  });\n```", "```php\n  $results = \\App\\Book::whereBetween('pages_count', [100, 200])->get();\n```", "```php\n  $results = \\App\\Book::whereIn('title', ['My First Book!', 'My Second Book!'])->get();\n```", "```php\n  $booksThatDontExist = \\App\\Book::whereNull('title')->get();\n```", "```php\nRoute::get('book_get_where', function(){\n\n      $result = \\App\\Book::where('pages_count', '=', 1000)->first();\n      return $result;\n\n  });\n```", "```php\nRoute::get('book_get_where', function(){\n\n      $result = \\App\\Book::wherePagesCount(1000)->first();\n      return $result;\n\n  });\n```", "```php\n  \\App\\Book::count();\n```", "```php\n  Route::get('book_get_books_count', function(){\n\n      $booksCount = \\App\\Book::count();\n      return $booksCount;\n\n  });\n```", "```php\n  Route::get('book_get_books_count', function(){\n\n      $booksCount = \\App\\Book::where('pages_count', '>', 140)->count();\n      return $booksCount;\n\n  });\n```", "```php\n  Route::get('book_get_books_min_pages_count', function(){\n\n      $minPagesCount = \\App\\Book::where('pages_count', '>', 120)->min('pages_count');\n      return $minPagesCount;\n\n  });\n```", "```php\n  Route::get('book_get_books_max_pages_count', function(){\n\n      $maxPagesCount = \\App\\Book::where('pages_count', '>', 180)->max('pages_count');\n      return $maxPagesCount;\n\n  });\n```", "```php\n  Route::get('book_get_books_avg_price', function(){\n\n    $avgPrice = \\App\\Book::where('title', 'LIKE', '%Book%')->avg('price');\n      return $avgPrice;\n\n  });\n```", "```php\n  Route::get('book_get_books_avg_price', function(){\n\n    $countTotal = \\App\\Book::where('pages_count', '>', 100)->avg('price');\n      return $countTotal;\n\n  });\n```", "```php\n  $books = \\App\\Book::skip(10)->take(10)->get();\n```", "```php\n  // orderBy\n  \\App\\Book::orderBy('title', 'asc')->get();\n\n  // groupBy\n  \\App\\Book::groupBy('price')->get();\n\n  // having\n  \\App\\Book::having('count', '<', 20)->get();\n```", "```php\n  $book = new \\App\\Book([\n    'title' => $title,\n    'pages_count' => $pagesCount,\n    'price' => $price\n  ]);\n```", "```php\n  $book = \\App\\Book::create([\n    'title' => 'My First Book!',\n    'price' => 10.50,\n    'pages_count' => 150,\n    'description' => 'My lorem ipsum dolor description here...'\n  ]);\n```", "```php\n  $book = new \\App\\Book($request->all());\n\n  // or...\n\n  $book = \\App\\Book:create($request->all());\n```", "```php\n  <?php \n\n  namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Book extends Model {\n\n      protected $fillable = [\n          'title',\n          'price',\n          'pages_count',\n          'description'\n      ];\n\n  }\n```", "```php\n  $book = \\App\\Book:create($request->all());\n```", "```php\n  <?php \n\n  namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Book extends Model {\n\n      protected $guarded = ['*'];\n\n  }\n```", "```php\n  Schema::create('books', function(Blueprint $table)\n  {\n    // other fields...\n\n      $table->timestamps();\n  });\n```", "```php\n  <?php\n\n  namespace App;\n\n  class Book extends Model {\n\n      public $timestamps = false;\n\n  }\n```", "```php\n  <?php\n\n  namespace App;\n\n  class Book extends Model {\n\n      protected $table = 'books'';\n\n      protected function getDateFormat()\n      {\n          // returining a different timestamp format!\n          return 'd/m/Y';\n      }\n\n  }\n```", "```php\n  Schema::create('books', function(Blueprint $table)\n  {\n    // other fields...\n\n      $table->softDeletes();\n  });\n```", "```php\n  <?php\n\n  namespace App;\n\n  use Illuminate\\Database\\Eloquent\\SoftDeletes;\n\n  class Book extends Model {\n\n      use SoftDeletes;\n\n      protected $dates = ['deleted_at'];\n\n  }\n```", "```php\n  <?php // Order.php\n\n  namespace App;\n\n  use Illuminate\\Database\\Eloquent\\SoftDeletes;\n\n  class Order extends Model {\n\n      use SoftDeletes;\n\n      protected $dates = ['deleted_at'];\n\n  }\n```", "```php\n  // getting all the orders\n\n$orders = \\App\\Order::orderBy('created_at', 'desc')->get();\n```", "```php\n  // getting all the orders, including the \"deleted\" ones...\n\n$orders = \\App\\Order::withTrashed()->orderBy('created_at', 'desc')->get();\n```", "```php\n  $trashedOrders = \\App\\Order::onlyTrashed()->orderBy('created_at', 'desc')->get();\n```", "```php\n  $trashedOrder = \\App\\Order::find($trashedOrderId);\n  $trashedOrder->restore();\n\n  // $trashedOrder is not so trashed anymore...\n```", "```php\n  \\App\\Order::where('customer_id', '=', $customerId)->restore();\n```", "```php\n  order = \\App\\Order::find($orderId);\n\n  // bye bye... forever :'(\n  $order->forceDelete();\n```", "```php\n  <?php // Book.php\n\n  namespace App;\n\n  class Book extends Model {\n\n      public function scopeCheapButBig($query)\n      {\n          return $query->where('price', '<', 10)->where('pages_count', '>', 300);\n      }\n\n  }\n```", "```php\n  <?php\n\n  $bigAndCheaperBooks = \\App\\Book::cheapButBig()->get();\n```", "```php\n  <?php // Book.php\n\n  namespace App;\n\n  class Book extends Model {\n\n      public function scopeCheap($query)\n      {\n          return $query->where('price', '<', 10);\n      }\n\n      public function scopeExpensive($query)\n      {\n      return $query->where('price', '>', 100);\n      }\n\n      public function scopeLong($query)\n      {\n        return $query->where('pages_count', '>', 700);\n      }\n\n      public function scopeShort($query)\n      {\n      return $query->where('pages_count', '<', 100);\n      }\n\n  }\n```", "```php\n  <?php\n\n    // getting cheaper and longer books;\n    $cheapAndLongBooks = \\App\\Book::cheap()->long()->get();\n\n    // getting most expensive and longer books;\n    $expensiveAndLongBooks = \\App\\Book::expensive()->long()->get();\n\n    // getting cheaper and shorter books;\n    $cheapAndShortBooks = \\App\\Book::cheap()->short()->get();\n\n    // getting expensive and shorter books;\n    $expensiveAndShortBooks = \\App\\Book::expensive()->short()->get();\n```", "```php\n  <?php // Book.php\n\n  namespace App;\n\n  class Book extends Model {\n\n    public function scopeLong($query)\n      {\n        return $query->where('pages_count', '>', 700);\n      }\n\n      public function scopeLongAndCheaperThan($query, $amount)\n      {\n          return $query->long()->where('price', '<', $amount);\n      }\n\n  }\n```", "```php\n  if($book->is_rare)\n  {\n    // do wow things here...\n  }\n  else\n  {\n    // do common things here...\n  }\n```", "```php\n  if($book->is_rare === 1)\n  {\n    // ...\n  }\n```", "```php\n  <?php // Book.php\n\n  namespace App;\n\n  class Book extends Model {\n\n    protected $casts = [\n        'is_rare' => 'boolean',\n    ];\n\n  }\n```", "```php\n  <?php // Book.php\n\n    namespace App;\n\n    class Book extends Model {\n\n      public function getPriceAttribute()\n        {\n            return '$ ' . $value;\n        }\n\n    }\n```", "```php\n  $book = \\App\\Book::find(1);\n\n  echo $book->price;\n  // output: $ 10.50\n```", "```php\n  <?php // Book.php\n\n    namespace App;\n\n    class Book extends Model {\n\n      public function setTitleAttribute($value)\n        {\n            $this->attributes['title'] = strtolower($value);\n        }\n\n    }\n```", "```php\n  <?php // User.php\n\n    namespace App;\n\n    class User extends Model {\n\n      public function setPasswordAttribute($value)\n        {\n            $this->attributes['password'] = \\Hash::make($value);\n        }\n\n    }\n```", "```php\n  ...\n\n  protected $fillable = array();\n\n  ...\n\n  protected $guarded = array('*');\n\n  ...\n\n  protected $casts = array();\n\n  ...\n```", "```php\n  // from the Illuminate\\Database\\Eloquent\\Model class\n\n  ...\n\n  /**\n   * Convert the model instance to an array.\n   *\n   * @return array\n   */\n  public function toArray()\n  {\n    $attributes = $this->attributesToArray();\n\n    return array_merge($attributes, $this->relationsToArray());\n  }\n\n  ...\n\n  /**\n   * Convert the model instance to JSON.\n   *\n   * @param  int  $options\n   * @return string\n   */\n  public function toJson($options = 0)\n  {\n    return json_encode($this->toArray(), $options);\n  }\n```", "```php\n  return \\App\\Book::all()->toJson();\n\n  // or ...\n\n  return \\App\\Book::where('title', 'LIKE', 'My%')->get()->toArray();\n\n  // or\n\n  return \\App\\Book::find(1)->toJson();\n```", "```php\n  <?php\n\n  namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class User extends Model {\n\n      protected $hidden = ['password', 'credit_card_number'];\n\n  }\n```", "```php\n  <?php\n\n  namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class User extends Model {\n\n      protected $visible = ['first_name', 'last_name'];\n\n  }\n```", "```php\n  <?php\n\n  namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class User extends Model {\n\n      public function getCompleteNameAttribute()\n    {\n        return $this->attributes['first_name']. ' ' . $this->attributes['last_name'];\n    }\n\n  }\n```", "```php\n  <?php\n\n  namespace App;\n\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class User extends Model {\n\n    protected $appends = ['complete_name'];\n\n      public function getCompleteNameAttribute()\n    {\n        return $this->attributes['first_name']. ' ' . $this->attributes['last_name'];\n    }\n\n  }\n```", "```php\n  echo $user->complete_name;\n  // outputs: Francesco Malatesta\n```", "```php\n      public function boot(Router $router)\n      {\n          parent::boot($router);\n\n          $router->model('book', 'App\\Book');\n      }\n    ```", "```php\n      Route::get('books/{book}', function(App\\Book $book)\n      {\n          return $book->title;\n      });\n    ```", "```php\n      My First Book!\n    ```", "```php\n  Route::bind('user', function($value)\n  {\n      return User::where('email', '=', $value)->first();\n  });\n```", "```php\n  Route::model('user', 'User', function()\n  {\n      throw new MyCustomNotFoundHttpException;\n  });\n```", "```php\n  \\App\\Book::chunk(200, function($books)\n  {\n      foreach ($books as $book)\n      {\n          // heavy operations on the book here...\n      }\n  });\n```"]