- en: Displaying Content through Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will cover the Views module and how to use a variety of its major
    features. In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the default admin interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a block from a View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing dynamic arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a relationship in a View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing an Entity Reference result View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For those who have used Drupal previously, Views is in core for Drupal 8\. If
    you are new to Drupal, note that Views has been one of the most used contributed
    projects for Drupal 6 and Drupal 7.
  prefs: []
  type: TYPE_NORMAL
- en: Briefly described, Views is a visual query builder that allows you to pull content
    from the database and render it in multiple formats. Select administrative areas
    and content listings provided out of the box by Drupal are all powered by Views.
    We'll dive into how to use Views to customize the administrative interface, customize
    ways to display your content, and interact with the entity reference field.
  prefs: []
  type: TYPE_NORMAL
- en: Listing content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views does one thing, and it does it well--listing content. The power behind
    the Views module is the amount of configurable power it gives the end user to
    display content in various forms.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will cover creating a content listing and linking it in the main
    menu. We will use the `Article` content type provided by the standard installation
    and make an article's landing page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Views UI** module must be installed to manipulate Views from the user
    interface. By default, this is enabled with the standard installation profile.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s list the Views listing content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Structure and then Views, as shown in the following screenshot; this
    will bring you to the administrative overview of all the views that have been
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17b25f88-a4a0-455e-8138-9e248898c692.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Add view to create a new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step is to provide the View name of articles, which will serve as
    the administrative and (by default) displayed title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will modify the VIEW SETTINGS. We want to display Content of the type
    `Article` and leave the tagged with field empty. This will force the view to only
    show content of the `Article` content type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the Create a page option. The Page title and Path will be autopopulated
    based on the view name and can be modified as desired. For now, leave the display
    and other settings at their default values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30ed2460-fc3c-4ff5-8bb1-23c474d7d0d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save and edit to continue modifying your new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the middle column, under the PAGE SETTINGS section, we will change the Menu
    item settings. Click on No menu to change the default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Normal menu entry. Provide a menu link title and an optional description.
    Set Parent to <Main Navigation>:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e91c5b3c-4763-4af8-86f8-bfb802065cc3.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Apply at the bottom of the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save to save your view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your view is saved, click on Back to site from the administrative menu.
    You will now see the link in your Drupal site's main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to create a view involves selecting the type of data you will
    be displaying. This is referred to as the base table, which can be any type of
    entity or data specifically exposed to Views.
  prefs: []
  type: TYPE_NORMAL
- en: Nodes are labeled as **Content** in Views, and you will find this interchanged
    terminology throughout Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a Views page, we add a menu path that can be accessed. It tells
    Drupal to invoke Views to render the page, which will load the view you create
    and render it.
  prefs: []
  type: TYPE_NORMAL
- en: There are display `style` and `row` plugins that format the data to be rendered.
    Our recipe used the unformatted list style to wrap each row in a simple `div`
    element. We could have changed this to a table for a formatted list. The row display
    controls how each row is outputted.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Views module has been one of the must-use modules since it first debuted,
    to the point that almost every Drupal 7 site used this module. In the following
    section, we will dive further into Views.
  prefs: []
  type: TYPE_NORMAL
- en: Views in Drupal core initiative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Views module has been a contributed module up until Drupal 8\. In fact,
    it was one of the most used modules. Although the module is now part of Drupal
    core, it still has many improvements that are needed, and are being committed.
  prefs: []
  type: TYPE_NORMAL
- en: Through their 8.1, 8.2, and 8.3 releases, there have been many improvements.
    We will continue to see this pattern with each future minor release.
  prefs: []
  type: TYPE_NORMAL
- en: Views and displays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with Views, you will see some different terminologies. One of
    the key items to be grasped is what a display is. A view can contain multiple
    displays. Each display is of a certain type. Views comes with the following display
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attachment**: This is a display that becomes attached to another display
    in the same view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block**: This allows you to place the view as a block'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embed**: The display is meant to be embedded programmatically'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entity Reference**: This allows Views to provide results for an entity reference
    field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feed**: This display returns a XML-based feed and can be attached to another
    display to render a feed icon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page**: This allows you to display the view from a specific route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each display can have its own configuration, too. However, each display will
    share the same base table (content, files, and so on). This allows you to take
    the same data and represent it in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Format style plugins - style and row
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within Views, there are two types of style plugins that represent how your
    data is displayed: style and row:'
  prefs: []
  type: TYPE_NORMAL
- en: The **style** plugin represents the overall format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **row** plugin represents each result row's format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, the `grid` style will output multiple `div` elements with specified
    classes to create a responsive `grid`. At the same time, the `table` style creates
    a tabular output with labels used as table headings.
  prefs: []
  type: TYPE_NORMAL
- en: Row plugins define how to render the row. The default content will render the
    entity as defined by its selected display mode. If you choose Fields, you can
    manually select which fields to include in your view.
  prefs: []
  type: TYPE_NORMAL
- en: Each format style plugin has a corresponding `Twig` file that the theme layer
    uses. Refer to the *Twig templating* recipe of [*Chapter 5*](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml),
    *Frontend for the Win* to learn more about Twig in Drupal 8.
  prefs: []
  type: TYPE_NORMAL
- en: You can define new plugins in custom modules or use contributed modules to access
    different options.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Embed display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of the available display types has a method to expose itself through the
    user interface, except for Embed. Often, contributed and custom modules use Views
    to render displays instead of manually writing queries and rendering the output.
    Drupal 8 provides a special display type to simplify this.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to add an Embed display to the view created in the recipe, we could
    pass the following render array to output our view programmatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When rendered, the `#type` key tells Drupal that this is a view element. We
    then point it to our new display `embed_1`. The Embed display type has no special
    functionality, in fact, it is a simplistic display plugin. The benefit is that
    it does not have additional operations conducted for the sake of performance.
  prefs: []
  type: TYPE_NORMAL
- en: Using an Embed display is beneficial when you want to use a View in a custom
    page, block, or even form. For example, Drupal Commerce uses this pattern for
    its shopping cart block and the order summary in the checkout. A view is used
    to display the order information within a custom block and form.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the VDC initiative at [https://www.drupal.org/community-initiatives/drupal-core/vdc](https://www.drupal.org/community-initiatives/drupal-core/vdc).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), *Plug and
    Play with Plugins*, to learn more about plugins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the default admin interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the addition of Views in Drupal core, many of the administrative interfaces
    are powered by Views. This allows customization of default admin interfaces to
    enhance site management and content authoring experiences.
  prefs: []
  type: TYPE_NORMAL
- en: In Drupal 6 and 7, there was the Administrative Views contributed module, which
    provided a way to override administrative pages with Views. This module is no
    longer required, as the functionality comes with Drupal core out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will modify the default content overview form that is used
    to find and edit content. We will add the ability to filter content by the user
    who authored it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Structure and then Views. This will bring you to the administrative overview
    of all existing views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Enabled section, select the Edit option from the operations column
    for the Content view. This is the view displayed on `/admin/content` when managing
    content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To filter by the content author, we must add a FILTER CRITERIA to our view,
    where we will expose the following for users to modify:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48fb308c-2061-4b8f-a2ed-45ea404cc44b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Add in the FILTER CRITERIA section to add a new filter. In the search
    textbox, type Authored by to search the available options. Select Authored by
    for the Content category. Click on Add and configure filter criteria:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5cfdd734-81a1-43fc-ba87-a1e5df3011c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the Expose this filter to visitors to allow them to change it checkbox.
    This will allow users to modify the data for the filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may modify the Label and add a Description to improve the usability of the
    filter option for your use case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Apply once more to finish configuring the filter. It will now show
    up in the list of filter criteria. You will also see the new filter in the preview
    below the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save to commit all changes to the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at `/admin/content`, and you will have your filter. Content editors
    will be able to search for content authored by a user through autocompleted username
    searches:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/298a6694-4ed4-4e67-89ae-aea0288d12f8.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a view is created that has a path matching an existing route, it will override
    it and present itself. That is how the `/admin/content` and other administrative
    pages are able to be powered by Views.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to disable the Views module, you can still manage content and users.
    The default forms are tables that do not provide filters or other extra features.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal uses the overridden route and uses Views to render the page. From that
    point on, the page is handled like any other Views page would be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will dive into additional features available through Views that can enhance
    the way you use Views and present them on your Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: Exposed versus non-exposed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Filters allow you to narrow the scope of the data displayed in a view. Filters
    can either be exposed or not; by default, a filter is not exposed. An example
    would be using the Content: Publishing status set to Yes (published) to ensure
    that a view always contains published content. This is an item you would configure
    to display content to site visitors. However, if it were for an administrative
    display, you may want to expose that filter. This way, content editors can view,
    easily, what content has not been published yet or been unpublished.'
  prefs: []
  type: TYPE_NORMAL
- en: All filter and sort criteria can be marked as exposed.
  prefs: []
  type: TYPE_NORMAL
- en: Filter identifiers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exposed filters work by parsing query parameters in the URL. For instance, on
    the content management form, changing the `Type` filter will add `type=Article`,
    among others to the current URL.
  prefs: []
  type: TYPE_NORMAL
- en: With this recipe, the author filter would show up as uid in the URL. Exposed
    filters have a
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter identifier option that can change the URL component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20463777-4e06-45ef-b4f7-0b1556142cf7.png)'
  prefs: []
  type: TYPE_IMG
- en: This could be changed to `author` or some other value to enhance the user experience
    behind the URL, or mask the Drupal-ness of it.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding routes with Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views can replace administrative pages with enhanced versions due to the way
    the route and module system works in Drupal. Modules are executed in order of
    the module's weight or alphabetical order if weights are the same. Naturally,
    in the English alphabet, the letter *V* comes toward the end of the alphabet.
    That means any route that Views provides will be added toward the end of the route
    discovery cycle.
  prefs: []
  type: TYPE_NORMAL
- en: If a view is created and it provides a route path, it will override any that
    exist on that path. There is no collision checking mechanism (and there was not
    one present in Views before merging into Drupal core) that prevents this.
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to easily customize most existing routes, but, beware that you
    could easily have conflicting routes, and Views will normally override the other.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a block from a View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previous recipes have shown how to create and manipulate a page created by a
    view. Views provides different display types that can be created, such as a block.
    In this recipe, we will create a block powered by Views. The Views block will
    list all Tag taxonomy terms that have been added to the `Article` content type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have installed the standard installation profile
    and have the default node content types available for use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Structure and then Views. This will bring you to the administrative overview
    of all the views that are created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add view to create a new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step is to provide the View name of Tags, which will serve as the
    administrative and (by default) displayed title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will modify the VIEW SETTINGS. We want to display Taxonomy terms of
    the type Tags. This will make the view default to only displaying taxonomy terms
    created under the Tags vocabulary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the Create a block checkbox in the BLOCK SETTINGS section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the HTML List option from the Display format choices. Leave the style
    as Fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab2627b8-ca4e-4313-8622-92438f51f138.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save and edit to create the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to display all the available tags. Under the PAGER section, click on
    the field next to Use Pager and select Display all items and click on Apply.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will sort the view by tag name instead of order of creation. Click
    on Add on the SORT CRITERIA section.Select the checkbox where Name : Taxonomy
    term and click on Add and configure sort criteria to use the default, that is,
    ascending. Click on Apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e5ba86c9-5461-4924-a973-1cd5918eed60.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save to save the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Structure and Block layout to place the block on your Drupal site. Click
    on Place block for the Sidebar first region in the Bartik theme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filter the list by typing your view's name (`Tags`). Click on Place block to
    add your view's block to the block layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on Save block to commit your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Drupal 8 plugin system, there is a concept called Derivatives. Plugins
    are small pieces of swappable functionality within Drupal 8\. Plugins and plugin
    development are covered in [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml),
    *Plug and Play with Plugins*. A derivative allows a module to present multiple
    variations of a plugin dynamically. In the case of Views, it allows the module
    to provide variations of a `ViewsBlock` plugin for each view that has a block
    display. Views implements the `\Drupal\views\Plugin\Block\ViewsBlock\ViewsBlock`
    class, providing the base for the dynamic availability of these blocks. Each derived
    block is an instance of this class.
  prefs: []
  type: TYPE_NORMAL
- en: When Drupal initiates the block, Views passes the proper configuration required.
    The view is then executed and the display is rendered whenever the block is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now explore some of the other ways in which Views interacts with blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Exposed forms as blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your view utilizes exposed filters, you have the option to place the exposed
    form in a block. With this option enabled, you may place the block anywhere on
    the page, even pages not for your view.
  prefs: []
  type: TYPE_NORMAL
- en: An example of using an exposed form in a block is for a search result view.
    You will add an exposed filter for keywords that control the search results. With
    the exposed filters in a block, you can easily place it in your site's header.
    When an exposed filter block is submitted, it will direct users to your view's
    display.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the exposed filters as a block, you must first expand the Advanced
    section on the right side of the Views edit form. Click on the Exposed form in
    block option from the Advanced section. In the options modal that opens, select
    the Yes radio button, and click on Apply. You can then place the block from the
    Block layout form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59c6d702-44b6-4d89-bd44-718dd7510e01.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), *Plug and
    Play with Plugins*, to learn more about derivatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing dynamic arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views can be configured to accept **contextual filters**. Contextual filters
    allow you to provide a dynamic argument that modifies the view's output. The value
    is expected to be passed from the URL; however, if it is not present, there are
    ways to provide a default value.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new page called `My Content`, which will display
    a user's authored content on the `/user/%/content` route.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Structure and then Views. This will bring you to the administrative overview
    of all the views created. Click on Add view to create a new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the View name to My Content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will modify the View settings. We want to display Content of the type
    All and leave the Tagged with empty. This will allow all content to be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Create a page. Keep the page title the same. We will need to change the
    path to `user/%user/content`. Click on Save and edit to move to the next screen
    and add the contextual filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When building a views page, adding a percent sign to the path identifies a route
    variable. By adding an entity type's name, Drupal will match the input as an identifier
    to an entity of that type.
  prefs: []
  type: TYPE_NORMAL
- en: Toggle the Advanced portion of the form on the right-hand side of the page.
    Click on Add in the Contextual filters section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Authored by: Content and then click on Add and configure contextual
    filters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the default value of WHEN THE FILTER VALUE IS *NOT* IN THE URL to Display
    "Access Denied" to prevent all content from being displayed with a bad route value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6b8c9ed-d4b7-4df9-b355-1b1ad1ef1d55.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Apply and then click on Save to save the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `/user/1/content`, and you will see content created by the first user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Contextual filters mimic the route variables found in the Drupal routing system.
    Variables are represented by percentage signs as placeholders in the view's path.
    Views will match up each placeholder with contextual filters by order of their
    placement. This allows you to have multiple contextual filters; you just need
    to ensure that they are ordered properly.
  prefs: []
  type: TYPE_NORMAL
- en: The Views module is aware of how to handle the placeholder because the type
    of data is selected when you add the filter. Once the contextual filter is added,
    there are extra options available for handling the route variable.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now explore the extra options available when using contextual filters.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing with contextual filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are still able to preview a view from the edit form. You simply add the
    contextual filter values to the text form concatenated by a forward slash (`/`).
    In this recipe, you could
  prefs: []
  type: TYPE_NORMAL
- en: replace navigating to `/user/1/content` with simply inputting `1` into the preview
    form and updating the preview.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying as a tab on the user page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though the view created in the recipe follows a route under `/user`, it
    will not show up as a local task tab until it has a menu entry defined.
  prefs: []
  type: TYPE_NORMAL
- en: Go back and edit the My Content view. From the Page settings section, you will
    need to change No menu from the Menu option. Clicking on that link will open the
    menu link settings dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Select Menu tab and provide a Menu link title, such as My Content. Select <User
    account menu> for the Parent. Click on Apply and save your view. When you go to
    the `/user` page again, it will have the My Content page available.
  prefs: []
  type: TYPE_NORMAL
- en: You may need to rebuild Drupal's caches in order for the routing system to be
    rebuilt, making Drupal aware of the menu tab.
  prefs: []
  type: TYPE_NORMAL
- en: Altering the page title
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With contextual filters, you have the ability to manipulate the current page's
    title. When adding or editing a contextual filter, you can modify the page title.
    You may check the Override title option in When the filter value is present in
    the URL or a default is provided section.
  prefs: []
  type: TYPE_NORMAL
- en: This textbox allows you to enter in a new title that will be displayed. Additionally,
    you can use the information passed from the route context using the format of
    `%#`, where `#` is the argument order.
  prefs: []
  type: TYPE_NORMAL
- en: Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Contextual filters can have validation attached. Without specifying extra validation,
    Views will take the expected argument and try to make it *just work*. You can
    add validation to help limit this scope and filter out invalid route variables.
  prefs: []
  type: TYPE_NORMAL
- en: You can enable validation by checking Specify validation criteria from the When
    the filter value is present in the URL or a default is provided section. The default
    is set to Basic Validation, which allows you to specify how the view should react
    if the data is invalid; based on our recipe, this would be if the user is not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of Validator options is not filtered by the contextual filter item
    you selected, so some may not apply. For our recipe, one might want User ID and
    select the Validate user has access to the *User*. This validator would make sure
    that the current user is able to view the route''s user''s profile. Additionally,
    it can be restricted further based on its role:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00213ac7-0123-44b5-9a34-ef43aa6edb25.png)'
  prefs: []
  type: TYPE_IMG
- en: This gives you more granular control over how the view operates when using contextual
    filters for route arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple and exclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may also configure the contextual filter to allow `AND` or `OR` operations
    along with exclusion. These options are under the More section when adding or
    editing a contextual filter.
  prefs: []
  type: TYPE_NORMAL
- en: The Allow multiple values option can be checked to enable `AND` or `OR` operations.
    If the contextual filter argument contains a series of values concatenated by
    plus (`+`) signs, it acts as an `OR` operation. If the values are concatenated
    by commas (`,`) it acts as an `AND` operation.
  prefs: []
  type: TYPE_NORMAL
- en: When the Exclude option is checked, the value will be excluded from the results
    rather than the view being limited by it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a relationship in a View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated at the beginning of the chapter, Views is a visual query builder.
    When you first create a view, a base table is specified from which to pull data.
    Views automatically knows how to join tables for field data, such as body text
    or custom-attached fields.
  prefs: []
  type: TYPE_NORMAL
- en: When using an entity reference field, you can display the value as the raw identifier,
    the referenced entity's label, or the entire rendered entity. However, if you
    add a relationship based on a reference field, you will have access to display
    any of that entity's available fields.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will update the Files view, used for administering files,
    to display the username of the user who uploaded the file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Got to Structure and then Views. This will bring you to the administrative overview
    of all the views that have been created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the Files view and click on Edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Advanced to expand the section and then click on Add that is next to
    Relationships.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for user. Select the User who uploaded relationship option and click
    on Apply (this display):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2db21e32-514a-4203-a6e3-43cf5c55c7da.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will be presented with a configuration form for the relationship. Click
    on Apply (this display) to use the defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new field by clicking on Add in the Fields section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for name and select the Name: User field and, click on Apply (all display).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This view uses aggregation, which presents a new configuration form when you
    first add a field. Click on Apply and continue to use the defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will discuss Views and aggregation in the *There's more...* section of this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the default field settings that will provide the label Name and
    format it as the username and link to the user's profile. Click on Apply (this
    display).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a59ff8f-241a-48c7-bcb8-15d46501a728.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save to finish editing the view and commit your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When viewing the Files list in `/admin/content/files`, the username that uploaded
    the file will now be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41305fde-09c3-4f24-a263-460316587ab1.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal stores data in a normalized format. Database normalization, in short,
    involves the organization of data in specifically related tables. Each entity
    type has its own database table, and all fields have their own database table.
    When you create a view and specify what kind of data will be shown, you are specifying
    a base table in the database that Views will query. Views will automatically associate
    fields that belong to the entity and it's relationship to those tables for you.
  prefs: []
  type: TYPE_NORMAL
- en: When an entity has an entity reference field, you can add a relationship to
    the referenced entity type's table. This is an explicit definition, whereas fields
    are implicit. When the relationship is explicitly defined, all the referenced
    entity type's fields come into scope. The fields on the referenced entity type
    can then be displayed, filtered, and sorted.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using relationships in Views allows you to create some powerful displays. We
    will discuss aggregation and additional information about relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Relationships provided by entity reference fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Views module uses a series of hooks to retrieve data that it then uses to
    represent ways to interact with the database. One of these is the `hook_field_views_data`
    hook, which processes a field storage configuration entity and registers its data
    with Views. The Views module implements this on behalf of the Drupal core to add
    relationships and reverse relationship, for Entity reference fields.
  prefs: []
  type: TYPE_NORMAL
- en: Since Entity reference fields have set schema information, Views can dynamically
    generate these relationships by understanding the field's table name, destination
    entity's table name, and the destination entity's identifier column.
  prefs: []
  type: TYPE_NORMAL
- en: Relationships provided through custom code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are times where you will need to define a relation on your own with custom
    code. Typically, when working with custom data in Drupal, you would more than
    likely create a new entity type; this topic is covered in [*Chapter 9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml),
    *Configuration Management - Deploying in Drupal 8*. This is not always the case,
    however, and you may just need a simple method of storing data. An example can
    be found in the Database Logging module. The Database Logging module defines a
    schema for a database table and then uses `hook_views_data` to expose its database
    table to Views.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dblog_schema` hook implementation returns a `uid` column on the watchdog
    database table created by the module. That column is then exposed to Views using
    the following definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This array tells Views that the `watchdog` table has a column named `uid`. It
    is numeric in nature for its display, filtering capabilities, and sorting capabilities.
    The `relationship`
  prefs: []
  type: TYPE_NORMAL
- en: key is an array of information that instructs Views how to use this to provide
    a relationship (`LEFT JOIN`) on the `users` table. The `User` entity uses the
    `users` table and has the primary key of `uid`.
  prefs: []
  type: TYPE_NORMAL
- en: Using aggregation and views.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a view setting under the Advanced section that allows you to enable
    aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: This feature allows you to enable the usage of SQL aggregate functions, such
    as `MIN`, `MAX`, `SUM`, `AVG`, and `COUNT`. In this recipe, the Files view uses
    aggregation to sum the usage counts of each file on the Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aggregation settings are set for each field, and when enabled, they have their
    own link to configure these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1afe7dec-0b03-4960-8afd-5b5909f5e0fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Providing an Entity Reference result View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Entity reference field, covered in [*Chapter 2*](953ad256-0342-45c8-84d9-5cda80d2d099.xhtml),
    *The Content Authoring Experience*, can utilize a custom view for providing the
    available field values. The default entity reference field will display all available
    entities of the type it can reference. The only available filter is based on the
    entity bundle, such as only returning `Article` nodes. Using an entity reference
    view, you can provide more filters, such as only returning the content that your
    user has authored.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create an entity reference view that filters content
    by the author. We will add the field to the user account form, allowing users
    to select their favorite contributed content.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Structure and then Views. This will bring you to the administrative overview
    of all the views that have been created. Click on Add view to create a new view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the View name to My Content Reference View, and retain the current View
    settings configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not choose to create a page or block. Click on Save and edit to continue
    working on your view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add button to create a new display. Select the Entity Reference
    option to create the display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21b255ab-9329-4014-9ab6-9256db61bc7c.png)'
  prefs: []
  type: TYPE_IMG
- en: The Format will be automatically set to Entity Reference List, which utilizes
    fields. Click on Settings next to it to modify the style format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Search Fields, check the Content: Title option and then click on Apply.
    This is what the field will perform the autocomplete search on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will need to modify the Content: Title field to stop it from wrapping the
    result as a link. Click on the field label and uncheck Link to the Content. Click
    on Apply to save the field settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/963ae57c-96a3-432a-8f2b-cf27921827fa.png)'
  prefs: []
  type: TYPE_IMG
- en: We will then use a contextual filter to limit the results to the currently loggedin
    user. Click on Add from Contextual Filters in the Advanced section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Authored by: Content option and click on Add and configure contextual
    filters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the When the filter value is not available setting to Provide a default
    value. Select User ID from the logged in user for the type value. Click on Apply
    to configure the contextual filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save to save the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Configuration and then Account settings to be able to manage fields on
    user accounts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new Entity Reference field that references Content, call it Highlighted
    Contributions, and allow it to have unlimited values. Click on the Save field
    settings button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the Reference type method to use View: Filter by an entity reference
    view and select the view we have just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/378d90f3-c07c-4bcb-82e4-60c58f92f1a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, when a user edits their account, they can reference only content that they
    have created in this reference field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The entity reference field definition provides selection plugins. The Views
    module provides an entity reference selection plugin. This allows entity reference
    to gather data into a view to receive available results.
  prefs: []
  type: TYPE_NORMAL
- en: The display type for Views requires you to select which fields will be used
    to search against when using the autocomplete widget. If you are not using the
    autocomplete widget and instead use the select list or checkboxes and radio buttons,
    then it will return the view's entire results.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), *Plug and
    Play with Plugins*, to learn more about plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
