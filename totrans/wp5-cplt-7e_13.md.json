["```php\n<?php \n/* \nPlugin Name: Add Document Type Styles New \nPlugin URI: http://nio.tips/\nDescription: Detects URLs in your posts and pages and displays nice document type icons next to them. Includes support for PDF, DOC, MP3, and ZIP. \nVersion: 1.1 \nAuthor: Karol K \nAuthor URI: http://karol.cc/ \nText Domain: add_doctype_styles_new \nLicense: GNU General Public License v2 or later \n*/\n```", "```php\nfunction doctype_styles_new_regex($text) { \n  $text = preg_replace('/href=([\\'|\"][[:alnum:]|\n     [:punct:]]*)\\.(pdf|doc|mp3|zip)([\\'|\"])/', 'href=\\\\1.\\\\2\\\\3 \n     class=\"link \\\\2\"', $text); \n  return $text; \n}\n```", "```php\nfunction doctype_styles_new_styles() { \n  wp_register_style('doctypes_styles', plugins_url\n     ('doctype_styles_new.css', __FILE__)); \n  wp_enqueue_style('doctypes_styles'); \n}\n```", "```php\n.link { \n  background-repeat: no-repeat; \n  background-position: left center;  \n  padding: 0 0 0 18px; \n} \n.pdf { background-image: url(icon-pdf.png); } \n.doc { background-image: url(icon-doc.png); } \n.mp3 { background-image: url(icon-mp3.png); } \n.zip { background-image: url(icon-zip.png); }\n```", "```php\nadd_filter('the_content', 'doctype_styles_new_regex');\n```", "```php\nadd_action('wp_enqueue_scripts', 'doctype_styles_new_styles');\n```", "```php\n<?php \n/* \nPlugin Name: Add Document Type Styles New \nPlugin URI: http://nio.tips/\nDescription: Detects URLs in your posts and pages \nand displays nice document type icons next to them. \nIncludes support for PDF, DOC, MP3 and ZIP. \nVersion: 1.1 \nAuthor: Karol K \nAuthor URI: http://karol.cc/ \nText Domain: add_doctype_styles_new \nLicense: GNU General Public License v2 or later\n*/ \n\n// this function does the magic \nfunction doctype_styles_new_regex($text) { \n  $text = preg_replace('/href=([\\'|\"][[:alnum:]|\n     [:punct:]]*)\\.(pdf|doc|mp3|zip)([\\'|\"])/', \n     'href=\\\\1.\\\\2\\\\3 class=\"link \\\\2\"', $text); \n  return $text; \n} \n\n// this functions adds the stylesheet to the head \nfunction doctype_styles_new_styles() { \n    wp_register_style('doctypes_styles',      \n    plugins_url('doctype_styles_new.css', __FILE__)); \n    wp_enqueue_style('doctypes_styles'); \n} \n\n// HOOKS ============= \n\nadd_filter('the_content', 'doctype_styles_new_regex', 9); \nadd_action('wp_enqueue_scripts', 'doctype_styles_new_styles');\n```", "```php\n      function set_supportedtypes_options() { \n          add_option(\"doctype_styles_new_supportedtypes\",\n             \"pdf,doc,mp3,zip\"); \n      }\n```", "```php\n      function unset_supportedtypes_options () { \n        delete_option(\"doctype_styles_new_supportedtypes\"); \n      }\n```", "```php\n      function modify_menu_for_supportedtypes() { \n        add_submenu_page( \n        'options-general.php',    //The new options page will be added as \n                                  //a submenu to the Settings menu.  \n        'Document Type Styles',   //Page <title> \n        'Document Type Styles',   //Menu title \n        'manage_options',         //Capability \n        'add_doctype_styles_new', //Slug \n        'supportedtypes_options'  //Function to call \n        );   \n      }\n```", "```php\n      function supportedtypes_options() { \n        echo '<div class=\"wrap\"><h2>Supported Document \n           Types</h2>'; \n        if (isset($_POST['submit'])) { \n          update_supportedtypes_options(); \n        } \n        print_supportedtypes_form(); \n        echo '</div>'; \n      }\n```", "```php\n      function update_supportedtypes_options() { \n        $updated = false; \n        if ($_POST['doctype_styles_new_supportedtypes']) {  \n          $safe_val = addslashes(strip_tags($_POST\n             ['doctype_styles_new_supportedtypes']));     \n             update_option('doctype_styles_new_supportedtypes', \n             $safe_val);  \n          $updated = true; \n        } \n\n        if ($updated) { \n          echo '<div id=\"message\" class=\"updated fade\">'; \n          echo '<p>Supported types successfully updated!</p>'; \n          echo '</div>'; \n        } else { \n          echo '<div id=\"message\" class=\"error fade\">'; \n          echo '<p>Unable to update supported types!</p>'; \n          echo '</div>'; \n        } \n      }\n```", "```php\n      function print_supportedtypes_form() { \n        $val_doctype_styles_new_supportedtypes = \n           stripslashes(get_option('\n           doctype_styles_new_supportedtypes')); \n        echo <<<EOF \n      <p>Document types supported by the Add Document Type Styles New plugin are listed       as follows.<br />To add a new type to be linked, take the following steps, in this order: \n      <ol> \n        <li>Upload the icon file for the new doctype to <i>wp-\n           content/plugins/add_doctype_styles_new/</i></li>  \n        <li>Add a line for the new doctype to the stylesheet at \n           <i>wp-content/plugins/add_doctype_styles_new/\n           doctype_styles_new.css</i></li>  \n        <li>Add the extension of the new doctype to the following list, keeping with the comma-separated format.</li> \n      </ol> \n      </p> \n      <form method=\"post\"> \n        <input type=\"text\" name=\n           \"doctype_styles_new_supportedtypes\" size=\"50\" \n           value=\"$val_doctype_styles_new_supportedtypes\" />  \n           <input type=\"submit\" name=\"submit\" value=\"Save Changes\" \n           /> \n      </form> \n      EOF; \n      }\n```", "```php\nfunction ahs_doctypes_regex($text) { \n  $types = get_option('doctype_styles_new_supportedtypes'); \n  $types = preg_replace('/,\\s*/', '|', $types); \n\n  $text = preg_replace('/href=([\\'|\"][[:alnum:]|\n     [:punct:]]*)\\.('.$types.')([\\'|\"])/i', 'href=\\\\1.\\\\2\\\\3 \n     class=\"link \\\\2\"', $text); \n\n  return $text; \n}\n```", "```php\nadd_action('admin_menu', 'modify_menu_for_supportedtypes'); \nregister_activation_hook(__FILE__, \"set_supportedtypes_options\"); \nregister_deactivation_hook(__FILE__, \n   \"unset_supportedtypes_options\");\n```", "```php\n$safe_val = addslashes(strip_tags($_POST\n   ['doctype_styles_new_supportedtypes'])); \nupdate_option('doctype_styles_new_supportedtypes', $safe_val);\n```", "```php\nfunction searchedwords_init($content) { \n  global $wpdb; \n  $sw_table_name = $wpdb->prefix.'searchedwords'; \n\n  //creating the table (if it doesn't exist) or updating it if \n  // necessary \n  if(isset($_GET['activate']) && 'true' == $_GET['activate']) { \n    $sql = 'CREATE TABLE `'.$sw_table_name.'` ( \n      id INT NOT NULL AUTO_INCREMENT,  \n      word VARCHAR(255),  \n      created DATETIME NOT NULL DEFAULT \\''.date('Y-m-d').' \n         00:00:01\\',  \n      PRIMARY KEY  (id) \n    )'; \n\n    require_once(ABSPATH.'wp-admin/includes/upgrade.php'); \n    dbDelta($sql); \n  } \n\n  // in case a search has just been performed, store the searched \n  // word \n  if (!empty($_GET['s'])) { \n    $current_searched_words = explode(\" \",urldecode($_GET['s'])); \n    foreach ($current_searched_words as $word) { \n      $wpdb->query($wpdb->prepare(\"INSERT into `$sw_table_name` \n         VALUES(null,'%s','\".date('Y-m-d H:i:s').\"')\", $word)); \n    } \n  } \n}\n```", "```php\nfunction modify_menu_for_searchedwords() { \n  $page = add_management_page( \n    \"Capture Searched Words\",  \n    \"Capture Searched Words\",  \n    'manage_options',  \n    'capture_searches_new',  \n    'searchedwords_page' \n  ); \n}\n```", "```php\nfunction searchedwords_page() { \n  global $wpdb; \n  $sw_table_name = $wpdb->prefix.'searchedwords'; \n\n$searched_words = $wpdb->get_results(\"SELECT COUNT(word) AS \n   occurrence, word FROM `$sw_table_name` GROUP BY word ORDER BY \n   occurrence DESC\"); \n  ?> \n<div class=\"wrap\" style=\"max-width: 600px;\"> \n<h2>Searched Words</h2> \n<table class=\"wp-list-table widefat\"> \n<thead> \n  <tr> \n    <th scope=\"col\">Search Words</th> \n    <th scope=\"col\"># of Searches</th> \n  </tr> \n</thead> \n<tbody> \n  <?php \n  if($searched_words !== NULL) { \n    foreach($searched_words as $searched_word) { \n      echo '<tr valign=\"top\"><td>'.$searched_word-\n         >word.'</td><td>'.$searched_word->occurrence.'</td></tr>'; \n    } \n    $searched_perfomed = true; \n  } \n  else { \n    echo '<tr valign=\"top\"><td colspan=\"2\"><strong>No searches \n       have been performed yet</strong></td></tr>'; \n  } \n  ?> \n</tbody> \n</table> \n</div> \n  <?php \n}\n```", "```php\nadd_filter('init', 'searchedwords_init'); \nadd_action('admin_menu', 'modify_menu_for_searchedwords');\n```", "```php\n<?php \n/* \nPlugin Name: Karol K's Tag Cloud Widget \nDescription: Displays a nice tag cloud. \nPlugin URI: http://nio.tips/ \nVersion: 1.1 \nAuthor: Karol K \nAuthor URI: http://karol.cc/ \nLicense: GNU General Public License v2 or later \n*/\n```", "```php\nclass UNIQUE_WIDGET_NAME extends WP_Widget { \n\n  public function __construct() { \n    $widget_ops = array(); \n    $control_ops = array(); \n    parent::__construct('base id', 'name', $widget_ops, \n       $control_ops); \n  } \n\n  public function widget($args, $instance) { \n    // used when the sidebar calls the widget \n  } \n\n  public function form($instance) { \n    // prints the form on the widgets page \n  } \n\n  public function update($new_instance, $old_instance) { \n    // used when the user saves his/her widget options \n  } \n} \n\n// initiate the widget \n\n// register the widget\n```", "```php\npublic function __construct() { \n  $widget_ops = array(); \n  $control_ops = array(); \n  parent::__construct('base-id', 'name', $widget_ops, \n     $control_ops); \n}\n```", "```php\npublic function __construct() { \n  parent::__construct( \n    'kk-tag-cloud', \n    'KK Tag Cloud', \n    array( \n      'description' => 'Your most used tags in cloud format; same \n         height; custom background' \n    ) \n  ); \n}\n```", "```php\npublic function form($instance) { \n  $instance = wp_parse_args((array) $instance, \n  array('template' => '')); \n  $current_taxonomy = $this->_get_current_taxonomy($instance); \n  ?> \n  <p> \n    <label for=\"<?php echo $this->get_field_id('title'); \n       ?>\">Title</label>    \n    <input type=\"text\" class=\"widefat\" id=\"<?php echo $this-\n       >get_field_id('title'); ?>\" name=\"<?php echo $this-\n       >get_field_name('title'); ?>\" value=\"<?php if  \n       (isset($instance['title'])) \n       {echo esc_attr($instance['title']);} \n   ?>\" /> \n  </p> \n  <p> \n    <label for=\"<?php echo $this->get_field_id('taxonomy'); \n       ?>\">Taxonomy</label>   \n    <select class=\"widefat\" id=\"<?php echo $this-\n       >get_field_id('taxonomy'); ?>\" name=\"<?php echo $this-\n       >get_field_name('taxonomy'); ?>\"> \n    <?php foreach(get_object_taxonomies('post') as $taxonomy) : \n      $tax = get_taxonomy($taxonomy); \n      if(!$tax->show_tagcloud || empty($tax->labels->name)) \n        continue; \n      ?> \n      <option value=\"<?php echo esc_attr($taxonomy) ?>\"\n      <?php selected($taxonomy, $current_taxonomy); ?>>\n      <?php echo $tax->labels->name; ?></option> \n    <?php endforeach; ?> \n    </select> \n  </p> \n  <?php \n}\n```", "```php\npublic function update($new_instance, $old_instance) { \n  $instance['title'] = $new_instance['title']; \n  $instance['taxonomy'] = stripslashes($new_instance['taxonomy']); \n  return $instance; \n}\n```", "```php\npublic function widget($args, $instance) { \n  extract($args); \n  $current_taxonomy = $this->_get_current_taxonomy($instance); \n  if(!empty($instance['title'])) { \n    $title = $instance['title']; \n  } \n  else { \n    if('post_tag' == $current_taxonomy) { \n      $title = 'Tags'; \n    } \n    else { \n      $tax = get_taxonomy($current_taxonomy); \n      $title = $tax->labels->name; \n    } \n  } \n  $title = apply_filters('widget_title', $title, $instance, $this-\n     >id_base); \n  $before_widget = '<div class=\"widget-container kk_widget_tag_cloud\">'; \n  $after_widget = '</div>'; \n  $before_title = '<h1 class=\"widget-title\">'; \n  $after_title = '</h1>'; \n\n  echo $before_widget; \n  if ( $title )  echo $before_title . $title . $after_title;  \n  echo '<div class=\"kk_tagcloud\">'; \n  wp_tag_cloud(apply_filters('widget_tag_cloud_args', \n     array('taxonomy' => $current_taxonomy))); \n  echo \"</div>\\n\"; \n  echo $after_widget; \n}\n```", "```php\nfunction _get_current_taxonomy($instance) { \n  if ( !empty($instance['taxonomy']) && \n     taxonomy_exists($instance['taxonomy']) ) \n    return $instance['taxonomy']; \n  return 'post_tag'; \n}\n```", "```php\n.kk_widget_tag_cloud .kk_tagcloud { \n    line-height: 1.5em; \n} \n\n.kk_widget_tag_cloud .kk_tagcloud a { \n    display: inline-block; \n    margin: 3px 2px; \n    padding: 0 11px; \n    border-radius: 3px; \n    -webkit-border-radius: 3px; \n    background: #eee; \n    color: #279090; \n    font-size: 12px !important; \n    line-height: 30px; \n    text-transform: uppercase; \n} \n\n.kk_widget_tag_cloud .kk_tagcloud a:hover { \n    color: #f2f2f2; \n    background: #404040; \n}\n```", "```php\nfunction kk_tag_cloud_widget_styles_load() { \n  wp_register_style('kk_tag_cloud_widget_styles', \n     plugins_url('kk_tag_cloud_widget.css', __FILE__)); \n  wp_enqueue_style('kk_tag_cloud_widget_styles'); \n} \nadd_action('wp_enqueue_scripts', \n   'kk_tag_cloud_widget_styles_load');\n```", "```php\nfunction KK_Widget_Tag_Cloud_Reg() { \n  register_widget('KK_Widget_Tag_Cloud'); \n} \nadd_action('widgets_init', 'KK_Widget_Tag_Cloud_Reg');\n```", "```php\nfunction kk_tag_cloud_handler($atts, $content=null) { \n  extract(shortcode_atts(array( \n    'use_css' => '1', \n    'taxonomy' => 'post_tag' \n    ), $atts)); \n\n  $tax = 'post_tag'; \n  if(taxonomy_exists($taxonomy)) $tax = $taxonomy; \n\n  $result = ''; \n\n  if ('0' != $use_css) { \n    $result .= '<div class=\"kk_widget_tag_cloud\"><div \n       class=\"kk_tagcloud\">'; \n  } \n  if (null != $content) { \n    $result .= addslashes(strip_tags($content)).' '; \n  } \n  $result .= wp_tag_cloud(apply_filters( \n    'widget_tag_cloud_args',  \n    array('taxonomy' => $tax, 'echo' => false) \n    )); \n  if ('0' != $use_css) { \n    $result .= '</div></div>'; \n  } \n\n  return $result; \n}\n```", "```php\nadd_shortcode('kk_tag_cloud', 'kk_tag_cloud_handler');\n```", "```php\n[kk_tag_cloud taxonomy=\"category\"] Select the category you'd like \n   to read next:[/kk_tag_cloud]\n```", "```php\n[kk_tag_cloud use_css=\"0\" taxonomy=\"category\"]Select the category \n   you'd like to read next:[/kk_tag_cloud]\n```", "```php\n[kk_tag_cloud][/kk_tag_cloud]\n```", "```php\nfunction kk_rest_handler($atts, $content=null) {\n  extract(shortcode_atts(array( \n    'website_domain' => 'newinternetorder.com', \n    'how_many' => '3' \n  ), $atts)); \n\n  $response = wp_remote_get( 'http://' . $website_domain . '/wp-\n  json/wp/v2/posts/' );\n\n  if( is_wp_error( $response ) ) { \n    $error_string = $response->get_error_message(); \n    return 'Error occurred: <em>' . $error_string . '</em>'; \n  }\n\n  $posts = json_decode( wp_remote_retrieve_body( $response ) );\n\n  if( empty( $posts ) ) { return 'No posts found'; } \n  else { \n    $result = '<ul>'; \n    $post_count = 0; \n    foreach( $posts as $post ) { \n      $post_count++; \n      if ($post_count <= $how_many) { \n        $result .= '<li><a href=\"' . $post->link. '\">'\n        . $post->title->rendered . '</a></li>'; \n      } \n    } \n    $result .= '</ul>'; \n    return $result; \n  }\n}\nadd_shortcode('kk_rest', 'kk_rest_handler');\n```", "```php\n$response = wp_remote_get( 'http://' . $website_domain . '/wp-json/wp/v2/posts/' );\n```", "```php\n$posts = json_decode( wp_remote_retrieve_body( $response ) );\n```", "```php\n[kk_rest website_domain=\"newinternetorder.com\" how_many=\"2\"]\n[/kk_rest]\n```"]