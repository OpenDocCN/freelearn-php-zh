- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Creating Forms with the Form API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Form API创建表单
- en: This chapter will cover the usage of the Form API, which is used to create forms
    in Drupal without writing any HTML! This chapter will walk you through creating
    a form to manage a custom piece of configuration with validation. You will also
    learn how to implement conditional form fields using the `states` property to
    control whether an element is hidden, visible, required, or more. We will also
    demonstrate how AJAX can be implemented in Drupal forms to provide dynamic form
    elements. Finally, you will learn how to alter other forms in Drupal to customize
    their application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍Form API的使用，该API用于在Drupal中创建表单而无需编写任何HTML！本章将指导您创建一个表单来管理具有验证的自定义配置项。您还将学习如何使用`states`属性实现条件性表单字段，以控制元素是隐藏的、可见的、必需的还是其他。我们还将演示如何在Drupal表单中实现AJAX以提供动态表单元素。最后，您将学习如何修改Drupal中的其他表单以自定义它们的应用。
- en: 'In this chapter, we will go through the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Creating a custom form and saving configuration changes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义表单并保存配置更改
- en: Validating form data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证表单数据
- en: Specifying conditional form elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定条件性表单元素
- en: Using AJAX in a Drupal form
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Drupal表单中使用AJAX
- en: Customizing existing forms in Drupal
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义Drupal中的现有表单
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will require an installed custom module. In the following recipes,
    the module name is `mymodule`. Replace as appropriate. You can find the full code
    used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp07](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp07)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要安装一个自定义模块。在以下菜谱中，模块名称为`mymodule`。请适当替换。您可以在GitHub上找到本章中使用的完整代码：[https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp07](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp07)
- en: Creating a custom form and saving configuration changes
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义表单并保存配置更改
- en: In this recipe, we will create a form that allows saving the company name and
    phone number for the website to the configuration. Forms are defined as classes
    that implement `\Drupal\Core\Form\FormInterface`. `\Drupal\Core\Form\FormBase`
    serves as a standard base class for forms. We will extend this class to create
    a new form that saves the custom configuration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个表单，允许将公司名称和电话号码保存到配置中。表单被定义为实现`\Drupal\Core\Form\FormInterface`的类。`\Drupal\Core\Form\FormBase`作为表单的标准基类。我们将扩展这个类来创建一个新的表单，用于保存自定义配置。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we need to create the `src/Form` directory in the module’s directory.
    We will put our form class in this directory, which gives our form class the `Form`
    namespace:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建`src/Form`目录。我们将把我们的表单类放在这个目录中，这将为我们的表单类提供`Form`命名空间：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a file named `CompanyForm.php` in the `Form` directory. This will hold
    our `CompanyForm` form class.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Form`目录下创建一个名为`CompanyForm.php`的文件。这个文件将包含我们的`CompanyForm`表单类。
- en: 'Our `CompanyForm` class will extend the `FormBase` class provided by Drupal
    core:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`CompanyForm`类将扩展由Drupal核心提供的`FormBase`类：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Form`
    namespace, which Drupal can determine as the `src/Form` directory in our module.
    Per PSR-4, the filename and class name must also be the same.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循PSR-4自动加载约定，我们的类位于`\Drupal\mymodule\Form`命名空间中，Drupal可以将其确定为我们的模块中的`src/Form`目录。根据PSR-4，文件名和类名也必须相同。
- en: The `\Drupal\Core\Form\FormBase` class provides internal logic for handling
    forms. It only requires us to implement the `getFormId`, `buildForm`, and `submitForm`
    methods, which will be explained and implemented in the following steps.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Form\FormBase`类提供了处理表单的内部逻辑。它只需要我们实现`getFormId`、`buildForm`和`submitForm`方法，这些方法将在以下步骤中解释和实现。'
- en: 'All forms must have a unique string that identifies the form. Let’s give our
    form the ID of `company_form` by updating the `getFormId` method:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有表单都必须有一个唯一的字符串来标识表单。让我们通过更新`getFormId`方法来给我们的表单分配ID `company_form`：
- en: '[PRE12]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `buildForm` method returns the form structure as an array of form elements.
    We provide a text field for a company name and telephone:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`buildForm`方法返回表单结构作为表单元素的数组。我们提供了一个文本字段用于公司名称和电话：'
- en: '[PRE15]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `buildForm` method is passed the `$form` array argument, which is where
    our form structure is added. Both `company_name` and `company_telephone` in the
    `$form` array are called `#type` (to specify what the element is) and `#title`
    (to act as the label).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildForm` 方法传递 `$form` 数组参数，这是我们的表单结构被添加的地方。在 `$form` 数组中，`company_name`
    和 `company_telephone` 都被调用为 `#type`（用于指定元素是什么）和 `#title`（用作标签）。'
- en: 'Next, we want to load an existing configuration and pass its values to the
    elements:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们想要加载现有的配置并将它的值传递给元素：
- en: '[PRE27]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We load a configuration object named `company_settings` with the `config` method,
    which will store our values. The `#default_value` property allows specifying an
    initial value that should be used for an element.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `config` 方法加载一个名为 `company_settings` 的配置对象，它将存储我们的值。`#default_value` 属性允许指定一个初始值，该值应用于元素。
- en: 'Then, we must add a submit button:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须添加一个提交按钮：
- en: '[PRE45]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: We provide a submit button as a form element with the `submit` type. It is best
    practice to place the submit button and other buttons in the `actions` render
    element.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一个带有 `submit` 类型的提交按钮作为表单元素。最佳实践是将提交按钮和其他按钮放置在 `actions` 渲染元素中。
- en: 'Fill in `submitForm` and save it to the `mymodule.company_data` object:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写 `submitForm` 并将其保存到 `mymodule.company_data` 对象中：
- en: '[PRE68]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: In order to save our configuration, we must fetch it from the configuration
    factory with the `getEditable` method. This allows us to save changes to the configuration
    object.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存我们的配置，我们必须使用 `getEditable` 方法从配置工厂中获取它。这允许我们保存对配置对象的更改。
- en: 'Add a new route to make the form accessible at the `/``company-form` path:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的路由，使表单可在 `/company-form` 路径下访问：
- en: '[PRE80]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建你的 Drupal 网站的缓存以使其意识到新的路由：
- en: '[PRE87]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Now, you may visit `/company-form` and access your form:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以访问 `/company-form` 并访问你的表单：
- en: '![Figure 7.1 – The output of the CompanyForm form](img/Figure_7.01_B18548.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 公司表单的输出](img/Figure_7.01_B18548.jpg)'
- en: Figure 7.1 – The output of the CompanyForm form
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 公司表单的输出
- en: How it works…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe creates a form that is accessible from a route, using a `_form`
    property in place of the `_controller` property. The `_form` property contains
    the form class name. When Drupal’s routing system is built, a `_controller` entry
    is added that is handled by `\Drupal\Core\Controller\HtmlFormController::getContentResult`.
    This addition is done by the `\Drupal\Core\Routing\Enhancer\FormRouteEnhancer`
    enhancer. The `HtmlFormController` passes the class name from `_form` into the
    form builder and returns the complete form render array.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方创建了一个可以通过路由访问的表单，使用 `_form` 属性代替 `_controller` 属性。`_form` 属性包含表单类名。当 Drupal
    的路由系统构建时，添加了一个 `_controller` 条目，由 `\Drupal\Core\Controller\HtmlFormController::getContentResult`
    处理。此添加是通过 `\Drupal\Core\Routing\Enhancer\FormRouteEnhancer` 增强器完成的。`HtmlFormController`
    将 `_form` 中的类名传递给表单构建器，并返回完整的表单渲染数组。
- en: The form builder is responsible for determining whether the form is being rendered
    or whether it is handling a submission if the request is an HTTP `GET` or HTTP
    `POST`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 表单构建器负责确定表单是正在渲染还是如果请求是 HTTP `GET` 或 HTTP `POST`，它正在处理提交。
- en: Note
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Form API has existed in Drupal since Drupal 4.7\. In fact, the render array
    system was born out of the Form API and created in Drupal 7.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 表单 API 自 Drupal 4.7 版本以来就存在于 Drupal 中。实际上，渲染数组系统是从表单 API 中诞生的，并在 Drupal 7 中创建。
- en: When the form builder handles a form submission, the form structure is also
    built from `buildForm`. This is done to prevent additional invalid values from
    being submitted. Incoming input data is mapped to elements in the form and pushed
    to the form’s `state` values, which are retrieved using `getValue` for a specific
    element value or `getValues` for all values. Once the values have been set in
    the form state, the form builder invokes the form validator service. Form validation
    is handled in the next recipe, *Validating* *form data*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单构建器处理表单提交时，表单结构也将从 `buildForm` 中构建。这样做是为了防止提交额外的无效值。传入的输入数据被映射到表单中的元素，并推送到表单的
    `state` 值，这些值可以通过 `getValue` 用于特定元素值或 `getValues` 用于所有值来检索。一旦值已设置在表单状态中，表单构建器将调用表单验证服务。表单验证将在下一个配方
    *验证表单数据* 中处理。
- en: If the form has no errors, then the form build invokes the form submission service
    and invokes the form’s `submitForm` method.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单没有错误，那么表单构建将调用表单提交服务并调用表单的 `submitForm` 方法。
- en: There’s more…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Many components make up a form created through Drupal’s Form API. We will explore
    a few of them in depth.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组件构成了通过 Drupal 的表单 API 创建的表单。我们将深入探讨其中的一些。
- en: The form state
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单状态
- en: The `\Drupal\Core\Form\FormStateInterface` object represents the current state
    of the form and its data. The **form** state contains user-submitted data for
    the form along with build state information. It can also store arbitrary information
    between the form being built and the submissions. The form state also handles
    redirection after the form submission. You will interact more with the form state
    in the following recipes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Form\FormStateInterface` 对象表示表单及其数据的当前状态。表单状态包含用户提交给表单的数据以及构建状态信息。它还可以在表单构建和提交之间存储任意信息。表单状态还处理表单提交后的重定向。在接下来的菜谱中，您将与表单状态进行更多交互。'
- en: The form cache
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单缓存
- en: Drupal utilizes a cache table for forms. This holds the build table, as identified
    by form build identifiers. This allows Drupal to validate forms during AJAX requests
    and easily build them when required. It is important to keep the form cache in
    persistent storage; otherwise, there may be repercussions, such as loss of form
    data or invalidating forms. We will cover AJAX forms in the *Using AJAX in a Drupal*
    *form* recipe.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 使用缓存表来存储表单。这个表包含由表单构建标识符识别的构建表，这使得 Drupal 能够在 AJAX 请求期间验证表单，并在需要时轻松构建它们。保持表单缓存在持久存储中非常重要；否则，可能会产生不良后果，例如丢失表单数据或使表单无效。我们将在
    *在 Drupal 中使用 AJAX 的表单* 菜谱中介绍 AJAX 表单。
- en: The ConfigFormBase class
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ConfigFormBase 类
- en: Drupal provides a base form class to simplify forms that modify a configuration
    object. This is the `\Drupal\Core\Form\ConfigFormBase` class. This class prevents
    the need to call `getEditable` from the configuration factory when retrieving
    your configuration object. It also adds a default submit button and messaging
    when the form is submitted.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 提供了一个基础表单类来简化修改配置对象的表单。这是 `\Drupal\Core\Form\ConfigFormBase` 类。这个类防止在检索配置对象时从配置工厂调用
    `getEditable`。它还在表单提交时添加了默认提交按钮和消息。
- en: 'Here is an updated version of our form class using `ConfigFormBase`. The `getEditableConfigNames`
    method contains our configuration object’s name and allows it to be editable whenever
    loaded:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们使用 `ConfigFormBase` 的表单类的更新版本。`getEditableConfigNames` 方法包含我们的配置对象名称，并允许在加载时对其进行编辑：
- en: '[PRE88]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: See also
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Form and render elements documentation: [https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements](https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements
    )'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单和渲染元素文档：[https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements](https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements)
- en: 'List of available form and render elements: [https://api.drupal.org/api/drupal/elements/10.0.x](https://api.drupal.org/api/drupal/elements/10.0.x
    )'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用表单和渲染元素列表：[https://api.drupal.org/api/drupal/elements/10.0.x](https://api.drupal.org/api/drupal/elements/10.0.x)
- en: Validating form data
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证表单数据
- en: We will expand on the form created in the last recipe to add validation. We
    will add validation information to form elements in the company form. There is
    also a `validateForm` method that can be used to programmatically identify errors
    and prevent form submission.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在上一个菜谱中创建的表单基础上添加验证。我们将在公司表单的表单元素中添加验证信息。还有一个 `validateForm` 方法，可以用来程序化地识别错误并防止表单提交。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will use the form class created in the *Creating a custom form and
    saving configuration* *changes* recipe.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将使用在 *创建自定义表单并保存配置更改* 菜谱中创建的表单类。
- en: How to do it…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we will make the form elements `required`. This will prevent submitting
    the form without providing values. Update the form elements in `buildForm` to
    match the following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使表单元素成为 `required`。这将防止在未提供值的情况下提交表单。更新 `buildForm` 中的表单元素以匹配以下内容：
- en: '[PRE89]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: This is achieved by adding `'#required' => TRUE` to the form element. When a
    form element is marked as `required`, Drupal will automatically validate that
    the field has a non-empty value. It also specifies the HTML5 `required` attribute
    on the input, adding client-side validation.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过向表单元素添加 `'#required' => TRUE` 来实现的。当表单元素被标记为 `required` 时，Drupal 将自动验证该字段是否有非空值。它还指定了
    HTML5 的 `required` 属性，添加了客户端验证。
- en: 'Second, we will add input constraints to the telephone form element. Even though
    we have an HTML5 `tel` element, it does not validate the input characters:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，我们将向电话表单元素添加输入约束。尽管我们有 HTML5 的 `tel` 元素，但它并不验证输入字符：
- en: '[PRE103]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: The `#pattern` property allows specifying the HTML5 `pattern` attribute on the
    rendered `input` element. This pattern expression allows numbers, dashes, and
    parentheses to be input, but not regular alphabetical characters.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`#pattern`属性允许指定渲染的`input`元素的HTML5 `pattern`属性。此模式表达式允许输入数字、破折号和括号，但不能输入常规的字母字符。'
- en: 'Next, we will override the `validateForm` method, which allows for programmatic
    validation:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将覆盖`validateForm`方法，这允许进行程序性验证：
- en: '[PRE111]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: We use the `getValue` method on the form state to get the submitted value for
    `company_name`. Using `str_contains`, we check whether the company name contains
    the word `foo`. If it does, we use the `setErrorByName` method to set an error
    on the `company_name` input.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用表单状态的`getValue`方法来获取`company_name`的提交值。使用`str_contains`，我们检查公司名称是否包含单词`foo`。如果是，我们使用`setErrorByName`方法在`company_name`输入上设置错误。
- en: 'When the form is submitted, the company name cannot contain the word `foo`:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当表单提交时，公司名称不能包含单词`foo`：
- en: '![Figure 7.2 – The company name field with a validation error](img/Figure_7.02_B18548.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 包含验证错误的公司名称字段](img/Figure_7.02_B18548.jpg)'
- en: Figure 7.2 – The company name field with a validation error
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 包含验证错误的公司名称字段
- en: How it works…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When a form is submitted, the form builder creates the form state values as
    a mapping based on the incoming user input and the form elements. The form builder
    invokes the form validation service. Form validation runs from the inside out.
    The form validation service iterates through each form element and then invokes
    the `validateForm` method for the form class.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，表单构建器根据传入的用户输入和表单元素创建表单状态值作为映射。表单构建器调用表单验证服务。表单验证从内到外进行。表单验证服务遍历每个表单元素，然后为表单类调用`validateForm`方法。
- en: When an element is validated, this is when the `#required` attribute is evaluated.
    If the form state is missing a value for the element, it is marked as having an
    error. The same is true for `#pattern`. The backend still validates the incoming
    input to make sure it matches the pattern provided.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素被验证时，这是评估`#required`属性的时候。如果表单状态缺少元素的值，则将其标记为有错误。对于`#pattern`也是如此。后端仍然验证传入的输入以确保它与提供的模式匹配。
- en: See also
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Additional properties for validation on the form and render elements documentation:
    [https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements](https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单和渲染元素验证的附加属性文档：[https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements](https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements)
- en: Specifying conditional form elements
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定条件表单元素
- en: The Form API provides a mechanism for defining form element states. These states
    are mapped to JavaScript interactions that can control whether an element is required,
    visible, and more. In this example, we will demonstrate a form that has a disabled
    submit button until a checkbox is checked.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 表单API提供了一种定义表单元素状态的方法。这些状态映射到可以控制元素是否必需、可见等JavaScript交互。在这个例子中，我们将演示一个在复选框被选中之前禁用提交按钮的表单。
- en: How to do it…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: Create a file named `ApprovalRequiredForm.php` in the `src/Form` directory for
    your module to hold the `ApprovalRequiredForm` form class.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的模块的`src/Form`目录中创建一个名为`ApprovalRequiredForm.php`的文件，以保存`ApprovalRequiredForm`表单类。
- en: 'We will define the `ApprovalRequiredForm` class with a form ID of `mymodule_approval_form`:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义具有表单ID `mymodule_approval_form`的`ApprovalRequiredForm`类：
- en: '[PRE121]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'In the `buildForm` method, we will start by creating a `checkbox` element that
    will be required for submitting the form and controlling the state of our submit
    button:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`buildForm`方法中，我们将首先创建一个`checkbox`元素，该元素对于提交表单和控制提交按钮的状态是必需的：
- en: '[PRE137]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: We add a checkbox and mark it as `#required`, so that the form has client-side
    validation of the checkbox and backend validation.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加一个复选框并将其标记为`#required`，这样表单就有客户端验证和后端验证。
- en: 'Next, we add our submit button. This will contain the logic to control its
    state based on the checkbox:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加我们的提交按钮。这将包含基于复选框控制其状态的逻辑：
- en: '[PRE146]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: The `#states` property of an element allows you to specify a state and the conditions
    that trigger it via element selectors to other inputs. We want the button to be
    in a `disabled` state if our checkbox `approval` is not checked.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的`#states`属性允许您通过元素选择器指定状态及其触发条件。我们希望如果我们的复选框`approval`未被选中，按钮处于`disabled`状态。
- en: 'Add a new route to make the form accessible at the `/``approval-form` path:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的路由，使表单可通过 `/approval-form` 路径访问：
- en: '[PRE157]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的 Drupal 网站的缓存，使其了解新的路由：
- en: '[PRE164]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Now, you may visit `/approval-form` and use the form. The submit button will
    be disabled until the checkbox is checked:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以访问 `/approval-form` 并使用该表单。提交按钮将在复选框被选中之前被禁用：
- en: '![Figure 7.3 – Approval form with its submit button disabled until the checkbox
    is checked](img/Figure_7.03_B18548.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 在复选框被选中之前禁用提交按钮的审批表单](img/Figure_7.03_B18548.jpg)'
- en: Figure 7.3 – Approval form with its submit button disabled until the checkbox
    is checked
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 在复选框被选中之前禁用提交按钮的审批表单
- en: How it works…
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Form API bridges PHP code to JavaScript code with its element states capabilities.
    When the form is processed, the values from the `#states` property are JSON encoded
    and added to the rendered element as the `data-drupal-states` attribute.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 表单 API 通过其元素状态功能将 PHP 代码与 JavaScript 代码桥接。当表单被处理时，`#states` 属性的值被 JSON 编码并添加到渲染的元素作为
    `data-drupal-states` 属性。
- en: 'Here is the result of `data-drupal-states` on the form’s submit button:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这是表单提交按钮上的 `data-drupal-states` 的结果：
- en: '[PRE165]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: When a form has states, the `core/misc/states.js` JavaScript file is added to
    the page. This file uses the `[data-drupal-states]` CSS selector to find all elements
    with state data. This data is then parsed as JSON and evaluated. The states provided
    to an element will not work if they do not provide correct CSS selectors to the
    element that controls their state.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个表单有状态时，`core/misc/states.js` JavaScript 文件被添加到页面中。此文件使用 `[data-drupal-states]`
    CSS 选择器来查找所有具有状态数据的元素。然后，这些数据被解析为 JSON 并进行评估。如果提供给元素的状态没有为控制其状态的元素提供正确的 CSS 选择器，则这些状态将不会在元素上工作。
- en: 'The documentation for the states provides information on the available states
    and conditions: [https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21FormHelper.php/function/FormHelper%3A%3AprocessStates/10.0.x](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21FormHelper.php/function/FormHelper%3A%3AprocessStates/10.0.x).'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 状态的文档提供了有关可用状态和条件的信息：[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21FormHelper.php/function/FormHelper%3A%3AprocessStates/10.0.x](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21FormHelper.php/function/FormHelper%3A%3AprocessStates/10.0.x).
- en: Using AJAX in a Drupal form
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Drupal 表单中使用 AJAX
- en: The Form API has a mechanism to perform AJAX requests without writing any JavaScript.
    In this example, we will create a counter with an increment and decrement button.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 表单 API 有一种机制可以在不编写任何 JavaScript 的情况下执行 AJAX 请求。在这个例子中，我们将创建一个带有增加和减少按钮的计数器。
- en: How to do it…
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: Create a file named `CounterForm.php` in the `src/Form` directory for your module
    to hold the `CounterForm` form class.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的模块的 `src/Form` 目录中创建一个名为 `CounterForm.php` 的文件，以保存 `CounterForm` 表单类。
- en: 'We will define the `CounterForm` class with a form ID of `mymodule_counter_form`:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义一个名为 `CounterForm` 的类，其表单 ID 为 `mymodule_counter_form`：
- en: '[PRE166]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'In the `buildForm` method, we will start by creating an element to display
    our counter value. This element will be replaced and updated after each AJAX request
    with the current count:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `buildForm` 方法中，我们将首先创建一个用于显示我们的计数器值的元素。该元素将在每次 AJAX 请求后替换并更新为当前计数：
- en: '[PRE182]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: We will use the form state storage to maintain the `count` value. The `get`
    method allows retrieving values from the form state storage. We use the `?:` operator
    to make sure the default value is zero when the form is first loaded. Otherwise,
    the value would be `null`, which is not an integer. The form state value for `count`
    will be updated in our AJAX callback.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用表单状态存储来维护 `count` 值。`get` 方法允许从表单状态存储中检索值。我们使用 `?:` 运算符确保在表单首次加载时默认值为零。否则，值将是
    `null`，这不是一个整数。`count` 的表单状态值将在我们的 AJAX 回调中更新。
- en: 'In order for Drupal to properly update our element after each AJAX request,
    we need to wrap it with an element that has an HTML ID that we can target:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让 Drupal 在每次 AJAX 请求后正确更新我们的元素，我们需要将其包裹在一个具有 HTML ID 的元素中，我们可以针对该 ID：
- en: '[PRE190]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: We use the `#prefix` and `#suffix` keys to wrap our form element with HTML markup.
    This gives us a wrapper element to target for the AJAX update.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `#prefix` 和 `#suffix` 键用 HTML 标记包裹我们的表单元素。这为我们提供了一个包装元素，我们可以针对该元素进行 AJAX
    更新。
- en: 'Next, we will add the button that will trigger the AJAX call to increment our
    counter:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个将触发 AJAX 调用来增加我们的计数器的按钮：
- en: '[PRE195]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: The `#ajax` property allows an element to execute an AJAX request to interact
    with the form. The `#ajax` property requires specifying a callback that contains
    a method to invoke for specifying what parts of the form to return, which we will
    implement next. The `wrapper` property contains the target HTML ID for an element
    that should be updated.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ajax` 属性允许一个元素执行 AJAX 请求以与表单交互。`#ajax` 属性需要指定一个回调，该回调包含一个方法来调用，用于指定要返回的表单部分，我们将在下一节中实现它。`wrapper`
    属性包含应更新的元素的目标 HTML ID。'
- en: 'Now, we will implement the `ajaxRefresh` method in our class that we specified
    for our `#``ajax` callback:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将实现我们为 `#ajax` 回调指定的类中的 `ajaxRefresh` 方法：
- en: '[PRE203]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: The callback to an `#ajax` property is responsible for returning the subset
    of the form that should be replaced.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ajax` 属性的回调负责返回应替换的表单子集。'
- en: 'Then, we must update the `submitForm` method to increment our counter whenever
    the increment button is pressed:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须更新 `submitForm` 方法，以便在按下增加按钮时增加我们的计数器：
- en: '[PRE207]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: We retrieve the `count` value from the form state storage and then set it again
    after incrementing the value. We then call `setRebuild` on the form state. This
    instructs Drupal to rebuild the form, so the updated `count` value is shown.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从表单状态存储中检索 `count` 值，然后在增加值后再次设置它。然后我们在表单状态上调用 `setRebuild`。这指示 Drupal 重建表单，以便更新的
    `count` 值显示出来。
- en: 'Add a new route to make the form accessible at the `/``counter-form` path:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的路由，使表单可通过 `/counter-form` 路径访问：
- en: '[PRE214]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的 Drupal 网站的缓存，使其了解新的路由：
- en: '[PRE221]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'Now you may visit `/counter-form` and use the form:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以访问 `/counter-form` 并使用该表单：
- en: '![Figure 7.4 – The counter form](img/Figure_7.04_B18548.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 计数表单](img/Figure_7.04_B18548.jpg)'
- en: Figure 7.4 – The counter form
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 计数表单
- en: How it works…
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `#ajax` property on a form element is processed by `\Drupal\Core\Render\Element\RenderElement::preRenderAjaxForm`.
    This is invoked on each element as part of building the form. It attaches the
    default events that will trigger the AJAX call. For buttons, the `mousedown` JavaScript
    event is used. The `mousedown` event was used for buttons for accessibility, as
    pressing *Enter* in other elements can trigger a click on a form button. Input
    text fields are on the `blur` event. Radios, checkboxes, select lists, and date
    fields are on the `click` event.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 表单元素上的 `#ajax` 属性由 `\Drupal\Core\Render\Element\RenderElement::preRenderAjaxForm`
    处理。它在构建表单的每个元素时被调用。它附加了将触发 AJAX 调用的默认事件。对于按钮，使用的是 `mousedown` JavaScript 事件。`mousedown`
    事件用于按钮的辅助功能，因为在其他元素中按下 *Enter* 键可能会触发表单按钮的点击。输入文本字段处于 `blur` 事件。单选按钮、复选框、选择列表和日期字段处于
    `click` 事件。
- en: When an AJAX button is triggered on a form, it is submitted. The form’s `submitForm`
    method is invoked. Then, the element’s `#ajax` callback is invoked to return the
    form. However, if the `submitForm` method calls for the form to be rebuilt, as
    we did with `setRebuild` on the form state, the `buildForm` method is called before
    the `#ajax` callback. This allows the returned form elements to match the current
    form state’s values and storage.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 当在表单上触发 AJAX 按钮时，它会提交。调用表单的 `submitForm` 方法。然后，调用元素的 `#ajax` 回调以返回表单。然而，如果 `submitForm`
    方法要求重建表单，就像我们在表单状态上的 `setRebuild` 所做的那样，则在 `#ajax` 回调之前调用 `buildForm` 方法。这允许返回的表单元素与当前表单状态值和存储相匹配。
- en: There’s more…
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the following sections, we will explore how the Form APIs AJAX capabilities
    can also be used.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将探讨如何使用表单 API 的 AJAX 功能。
- en: Specifying the event to trigger when AJAX is fired
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定触发 AJAX 时的事件
- en: 'It is possible to change the JavaScript event that triggers when the AJAX is
    triggered for an element. This is accomplished by specifying the `type` property
    in `#ajax`. For instance, the following would cause AJAX to fire on a text element
    with each keystroke instead of when the text element loses focus:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 可以更改触发 AJAX 时的 JavaScript 事件。这是通过在 `#ajax` 中指定 `type` 属性来实现的。例如，以下代码会在文本元素每次按键时触发
    AJAX，而不是在文本元素失去焦点时：
- en: '[PRE222]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Using AJAX in a custom template
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义模板中使用 AJAX
- en: If you are using AJAX on a page that is output with a template, note that you
    must render your form in the template as `{{ form|without(IDs of named form elements
    using` `AJAX) }}`.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在一个使用模板输出的页面上使用 AJAX，请注意您必须在模板中将表单渲染为 `{{ form|without(IDs of named form
    elements using` `AJAX) }}`。
- en: See also
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'AJAX forms documentation: [https://www.drupal.org/docs/drupal-apis/javascript-api/ajax-forms](https://www.drupal.org/docs/drupal-apis/javascript-api/ajax-forms)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX 表单文档：[https://www.drupal.org/docs/drupal-apis/javascript-api/ajax-forms](https://www.drupal.org/docs/drupal-apis/javascript-api/ajax-forms)
- en: Customizing existing forms in Drupal
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 Drupal 中的现有表单
- en: The Form API does not just provide a way to create forms. There are ways to
    alter existing forms through hooks in a custom module. By using this technique,
    new elements can be added, default values can be changed, and elements can even
    be hidden from view to simplify the user experience.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 表单 API 不仅提供创建表单的方法。还有通过自定义模块中的钩子修改现有表单的方法。通过使用这种技术，可以添加新元素，更改默认值，甚至可以隐藏元素以简化用户体验。
- en: The altering of a form does not happen in a custom class; this is a hook defined
    in the module file. In this recipe, we will use the `hook_form_FORM_ID_alter()`
    hook to add a telephone field to the site’s configuration form.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的修改不会在自定义类中发生；这是一个在模块文件中定义的钩子。在这个菜谱中，我们将使用 `hook_form_FORM_ID_alter()` 钩子向站点配置表单添加电话字段。
- en: How to do it…
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Ensure that your module has a `.module` file to contain hooks, such as `mymodule.module`.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的模块有一个 `.module` 文件来包含钩子，例如 `mymodule.module`。
- en: 'We will implement `hook_form_FORM_ID_alter` for the `system_site_information_settings`
    form:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为 `system_site_information_settings` 表单实现 `hook_form_FORM_ID_alter`：
- en: '[PRE223]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Drupal will call this hook and pass the current form array and its form state
    object. The form array is passed by reference, allowing our hook to modify the
    array without returning any values. This is why the `$form` parameter has the
    ampersand (`&`) before it. In PHP, all objects are passed by reference, which
    is why we have no ampersand before `$form_state`.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 将调用此钩子，并传递当前表单数组及其表单状态对象。表单数组是通过引用传递的，允许我们的钩子修改数组而不返回任何值。这就是为什么 `$form`
    参数前面有 ampersand (`&`) 的原因。在 PHP 中，所有对象都是通过引用传递的，这就是为什么在 `$form_state` 前面没有 ampersand。
- en: Form IDs can be found by inspecting the `getFormId` method of the form class.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过检查表单类的 `getFormId` 方法找到表单 ID。
- en: 'Next, we add our telephone field to the form so that it can be displayed and
    saved:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将我们的电话字段添加到表单中，以便它可以显示和保存：
- en: '[PRE230]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: We retrieve the current phone value from the `system.site` configuration object
    so that it can be modified if already set.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 `system.site` 配置对象中检索当前电话值，以便如果已经设置，则可以对其进行修改。
- en: 'We then need to add a submit handler to the form in order to save the configuration
    for our new field:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要向表单添加一个提交处理程序，以便保存我们新字段的配置：
- en: '[PRE242]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: The `$form['#submit']` modification adds our callback to the form’s submit handlers.
    This allows our module to interact with the form once it has been submitted.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`$form[''#submit'']` 修改将我们的回调添加到表单的提交处理程序中。这允许我们的模块在表单提交后与之交互。'
- en: The `mymodule_system_site_information_phone_submit` callback is passed the form
    array and form state. We load the current configuration factory to receive the
    configuration that can be edited. We then load the `system.site` configuration
    object and save `phone` based on the value from the form state.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`mymodule_system_site_information_phone_submit` 回调传递了表单数组和表单状态。我们加载当前的配置工厂以接收可以编辑的配置。然后我们加载
    `system.site` 配置对象，并根据表单状态中的值保存 `phone`。'
- en: 'Rebuild your Drupal site’s cache to make it aware of the new hook, so that
    it will be invoked when viewing the site settings form:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建您的 Drupal 站点的缓存，使其了解新的钩子，以便在查看站点设置表单时调用：
- en: '[PRE263]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'Visit the site settings configuration form at `/admin/config/system/site-information`:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问位于 `/admin/config/system/site-information` 的站点设置配置表单：
- en: '![Figure 7.5 – The altered site settings form](img/Figure_7.05_B18548.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 修改后的站点设置表单](img/Figure_7.05_B18548.jpg)'
- en: Figure 7.5 – The altered site settings form
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 修改后的站点设置表单
- en: How it works…
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we targeted the specific `hook_form_FORM_ID_alter()` alter hook.
    There is also the generic `hook_form_alter()` hook that is invoked for all forms
    and allows modifying every form when it is rendered. This allows for modules to
    generically modify all forms, if needed, or several different form IDs in one
    hook. It also allows for more explicit hook targets.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们针对特定的 `hook_form_FORM_ID_alter()` 修改钩子。还有一个通用的 `hook_form_alter()`
    钩子，它在所有表单上调用，允许在渲染时修改每个表单。这允许模块在需要时通用地修改所有表单，或者在一个钩子中修改多个不同的表单 ID。它还允许更明确的钩子目标。
- en: The form array is passed by reference, allowing modifications to be made in
    this hook and altering the original data. This allows us to add an element or
    modify existing items, such as titles and descriptions.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 形式数组是通过引用传递的，允许在这个钩子中做出修改并改变原始数据。这使我们能够添加元素或修改现有项，例如标题和描述。
