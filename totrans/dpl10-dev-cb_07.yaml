- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Forms with the Form API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover the usage of the Form API, which is used to create forms
    in Drupal without writing any HTML! This chapter will walk you through creating
    a form to manage a custom piece of configuration with validation. You will also
    learn how to implement conditional form fields using the `states` property to
    control whether an element is hidden, visible, required, or more. We will also
    demonstrate how AJAX can be implemented in Drupal forms to provide dynamic form
    elements. Finally, you will learn how to alter other forms in Drupal to customize
    their application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom form and saving configuration changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating form data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying conditional form elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AJAX in a Drupal form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing existing forms in Drupal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will require an installed custom module. In the following recipes,
    the module name is `mymodule`. Replace as appropriate. You can find the full code
    used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp07](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp07)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom form and saving configuration changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a form that allows saving the company name and
    phone number for the website to the configuration. Forms are defined as classes
    that implement `\Drupal\Core\Form\FormInterface`. `\Drupal\Core\Form\FormBase`
    serves as a standard base class for forms. We will extend this class to create
    a new form that saves the custom configuration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Form` directory in the module’s directory.
    We will put our form class in this directory, which gives our form class the `Form`
    namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `CompanyForm.php` in the `Form` directory. This will hold
    our `CompanyForm` form class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our `CompanyForm` class will extend the `FormBase` class provided by Drupal
    core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Form`
    namespace, which Drupal can determine as the `src/Form` directory in our module.
    Per PSR-4, the filename and class name must also be the same.
  prefs: []
  type: TYPE_NORMAL
- en: The `\Drupal\Core\Form\FormBase` class provides internal logic for handling
    forms. It only requires us to implement the `getFormId`, `buildForm`, and `submitForm`
    methods, which will be explained and implemented in the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'All forms must have a unique string that identifies the form. Let’s give our
    form the ID of `company_form` by updating the `getFormId` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `buildForm` method returns the form structure as an array of form elements.
    We provide a text field for a company name and telephone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `buildForm` method is passed the `$form` array argument, which is where
    our form structure is added. Both `company_name` and `company_telephone` in the
    `$form` array are called `#type` (to specify what the element is) and `#title`
    (to act as the label).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to load an existing configuration and pass its values to the
    elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We load a configuration object named `company_settings` with the `config` method,
    which will store our values. The `#default_value` property allows specifying an
    initial value that should be used for an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we must add a submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We provide a submit button as a form element with the `submit` type. It is best
    practice to place the submit button and other buttons in the `actions` render
    element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in `submitForm` and save it to the `mymodule.company_data` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to save our configuration, we must fetch it from the configuration
    factory with the `getEditable` method. This allows us to save changes to the configuration
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new route to make the form accessible at the `/``company-form` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you may visit `/company-form` and access your form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – The output of the CompanyForm form](img/Figure_7.01_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – The output of the CompanyForm form
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe creates a form that is accessible from a route, using a `_form`
    property in place of the `_controller` property. The `_form` property contains
    the form class name. When Drupal’s routing system is built, a `_controller` entry
    is added that is handled by `\Drupal\Core\Controller\HtmlFormController::getContentResult`.
    This addition is done by the `\Drupal\Core\Routing\Enhancer\FormRouteEnhancer`
    enhancer. The `HtmlFormController` passes the class name from `_form` into the
    form builder and returns the complete form render array.
  prefs: []
  type: TYPE_NORMAL
- en: The form builder is responsible for determining whether the form is being rendered
    or whether it is handling a submission if the request is an HTTP `GET` or HTTP
    `POST`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Form API has existed in Drupal since Drupal 4.7\. In fact, the render array
    system was born out of the Form API and created in Drupal 7.
  prefs: []
  type: TYPE_NORMAL
- en: When the form builder handles a form submission, the form structure is also
    built from `buildForm`. This is done to prevent additional invalid values from
    being submitted. Incoming input data is mapped to elements in the form and pushed
    to the form’s `state` values, which are retrieved using `getValue` for a specific
    element value or `getValues` for all values. Once the values have been set in
    the form state, the form builder invokes the form validator service. Form validation
    is handled in the next recipe, *Validating* *form data*.
  prefs: []
  type: TYPE_NORMAL
- en: If the form has no errors, then the form build invokes the form submission service
    and invokes the form’s `submitForm` method.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many components make up a form created through Drupal’s Form API. We will explore
    a few of them in depth.
  prefs: []
  type: TYPE_NORMAL
- en: The form state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `\Drupal\Core\Form\FormStateInterface` object represents the current state
    of the form and its data. The **form** state contains user-submitted data for
    the form along with build state information. It can also store arbitrary information
    between the form being built and the submissions. The form state also handles
    redirection after the form submission. You will interact more with the form state
    in the following recipes.
  prefs: []
  type: TYPE_NORMAL
- en: The form cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Drupal utilizes a cache table for forms. This holds the build table, as identified
    by form build identifiers. This allows Drupal to validate forms during AJAX requests
    and easily build them when required. It is important to keep the form cache in
    persistent storage; otherwise, there may be repercussions, such as loss of form
    data or invalidating forms. We will cover AJAX forms in the *Using AJAX in a Drupal*
    *form* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The ConfigFormBase class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Drupal provides a base form class to simplify forms that modify a configuration
    object. This is the `\Drupal\Core\Form\ConfigFormBase` class. This class prevents
    the need to call `getEditable` from the configuration factory when retrieving
    your configuration object. It also adds a default submit button and messaging
    when the form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an updated version of our form class using `ConfigFormBase`. The `getEditableConfigNames`
    method contains our configuration object’s name and allows it to be editable whenever
    loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Form and render elements documentation: [https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements](https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List of available form and render elements: [https://api.drupal.org/api/drupal/elements/10.0.x](https://api.drupal.org/api/drupal/elements/10.0.x
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating form data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will expand on the form created in the last recipe to add validation. We
    will add validation information to form elements in the company form. There is
    also a `validateForm` method that can be used to programmatically identify errors
    and prevent form submission.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will use the form class created in the *Creating a custom form and
    saving configuration* *changes* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will make the form elements `required`. This will prevent submitting
    the form without providing values. Update the form elements in `buildForm` to
    match the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is achieved by adding `'#required' => TRUE` to the form element. When a
    form element is marked as `required`, Drupal will automatically validate that
    the field has a non-empty value. It also specifies the HTML5 `required` attribute
    on the input, adding client-side validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, we will add input constraints to the telephone form element. Even though
    we have an HTML5 `tel` element, it does not validate the input characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `#pattern` property allows specifying the HTML5 `pattern` attribute on the
    rendered `input` element. This pattern expression allows numbers, dashes, and
    parentheses to be input, but not regular alphabetical characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will override the `validateForm` method, which allows for programmatic
    validation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `getValue` method on the form state to get the submitted value for
    `company_name`. Using `str_contains`, we check whether the company name contains
    the word `foo`. If it does, we use the `setErrorByName` method to set an error
    on the `company_name` input.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the form is submitted, the company name cannot contain the word `foo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – The company name field with a validation error](img/Figure_7.02_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – The company name field with a validation error
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a form is submitted, the form builder creates the form state values as
    a mapping based on the incoming user input and the form elements. The form builder
    invokes the form validation service. Form validation runs from the inside out.
    The form validation service iterates through each form element and then invokes
    the `validateForm` method for the form class.
  prefs: []
  type: TYPE_NORMAL
- en: When an element is validated, this is when the `#required` attribute is evaluated.
    If the form state is missing a value for the element, it is marked as having an
    error. The same is true for `#pattern`. The backend still validates the incoming
    input to make sure it matches the pattern provided.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Additional properties for validation on the form and render elements documentation:
    [https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements](https://www.drupal.org/docs/drupal-apis/form-api/form-render-elements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying conditional form elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Form API provides a mechanism for defining form element states. These states
    are mapped to JavaScript interactions that can control whether an element is required,
    visible, and more. In this example, we will demonstrate a form that has a disabled
    submit button until a checkbox is checked.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a file named `ApprovalRequiredForm.php` in the `src/Form` directory for
    your module to hold the `ApprovalRequiredForm` form class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will define the `ApprovalRequiredForm` class with a form ID of `mymodule_approval_form`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `buildForm` method, we will start by creating a `checkbox` element that
    will be required for submitting the form and controlling the state of our submit
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We add a checkbox and mark it as `#required`, so that the form has client-side
    validation of the checkbox and backend validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we add our submit button. This will contain the logic to control its
    state based on the checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `#states` property of an element allows you to specify a state and the conditions
    that trigger it via element selectors to other inputs. We want the button to be
    in a `disabled` state if our checkbox `approval` is not checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new route to make the form accessible at the `/``approval-form` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you may visit `/approval-form` and use the form. The submit button will
    be disabled until the checkbox is checked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Approval form with its submit button disabled until the checkbox
    is checked](img/Figure_7.03_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Approval form with its submit button disabled until the checkbox
    is checked
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Form API bridges PHP code to JavaScript code with its element states capabilities.
    When the form is processed, the values from the `#states` property are JSON encoded
    and added to the rendered element as the `data-drupal-states` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result of `data-drupal-states` on the form’s submit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: When a form has states, the `core/misc/states.js` JavaScript file is added to
    the page. This file uses the `[data-drupal-states]` CSS selector to find all elements
    with state data. This data is then parsed as JSON and evaluated. The states provided
    to an element will not work if they do not provide correct CSS selectors to the
    element that controls their state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation for the states provides information on the available states
    and conditions: [https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21FormHelper.php/function/FormHelper%3A%3AprocessStates/10.0.x](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21FormHelper.php/function/FormHelper%3A%3AprocessStates/10.0.x).'
  prefs: []
  type: TYPE_NORMAL
- en: Using AJAX in a Drupal form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Form API has a mechanism to perform AJAX requests without writing any JavaScript.
    In this example, we will create a counter with an increment and decrement button.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a file named `CounterForm.php` in the `src/Form` directory for your module
    to hold the `CounterForm` form class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will define the `CounterForm` class with a form ID of `mymodule_counter_form`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `buildForm` method, we will start by creating an element to display
    our counter value. This element will be replaced and updated after each AJAX request
    with the current count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will use the form state storage to maintain the `count` value. The `get`
    method allows retrieving values from the form state storage. We use the `?:` operator
    to make sure the default value is zero when the form is first loaded. Otherwise,
    the value would be `null`, which is not an integer. The form state value for `count`
    will be updated in our AJAX callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for Drupal to properly update our element after each AJAX request,
    we need to wrap it with an element that has an HTML ID that we can target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `#prefix` and `#suffix` keys to wrap our form element with HTML markup.
    This gives us a wrapper element to target for the AJAX update.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the button that will trigger the AJAX call to increment our
    counter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `#ajax` property allows an element to execute an AJAX request to interact
    with the form. The `#ajax` property requires specifying a callback that contains
    a method to invoke for specifying what parts of the form to return, which we will
    implement next. The `wrapper` property contains the target HTML ID for an element
    that should be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will implement the `ajaxRefresh` method in our class that we specified
    for our `#``ajax` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The callback to an `#ajax` property is responsible for returning the subset
    of the form that should be replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we must update the `submitForm` method to increment our counter whenever
    the increment button is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We retrieve the `count` value from the form state storage and then set it again
    after incrementing the value. We then call `setRebuild` on the form state. This
    instructs Drupal to rebuild the form, so the updated `count` value is shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new route to make the form accessible at the `/``counter-form` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you may visit `/counter-form` and use the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – The counter form](img/Figure_7.04_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – The counter form
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `#ajax` property on a form element is processed by `\Drupal\Core\Render\Element\RenderElement::preRenderAjaxForm`.
    This is invoked on each element as part of building the form. It attaches the
    default events that will trigger the AJAX call. For buttons, the `mousedown` JavaScript
    event is used. The `mousedown` event was used for buttons for accessibility, as
    pressing *Enter* in other elements can trigger a click on a form button. Input
    text fields are on the `blur` event. Radios, checkboxes, select lists, and date
    fields are on the `click` event.
  prefs: []
  type: TYPE_NORMAL
- en: When an AJAX button is triggered on a form, it is submitted. The form’s `submitForm`
    method is invoked. Then, the element’s `#ajax` callback is invoked to return the
    form. However, if the `submitForm` method calls for the form to be rebuilt, as
    we did with `setRebuild` on the form state, the `buildForm` method is called before
    the `#ajax` callback. This allows the returned form elements to match the current
    form state’s values and storage.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following sections, we will explore how the Form APIs AJAX capabilities
    can also be used.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the event to trigger when AJAX is fired
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is possible to change the JavaScript event that triggers when the AJAX is
    triggered for an element. This is accomplished by specifying the `type` property
    in `#ajax`. For instance, the following would cause AJAX to fire on a text element
    with each keystroke instead of when the text element loses focus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: Using AJAX in a custom template
  prefs: []
  type: TYPE_NORMAL
- en: If you are using AJAX on a page that is output with a template, note that you
    must render your form in the template as `{{ form|without(IDs of named form elements
    using` `AJAX) }}`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AJAX forms documentation: [https://www.drupal.org/docs/drupal-apis/javascript-api/ajax-forms](https://www.drupal.org/docs/drupal-apis/javascript-api/ajax-forms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing existing forms in Drupal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Form API does not just provide a way to create forms. There are ways to
    alter existing forms through hooks in a custom module. By using this technique,
    new elements can be added, default values can be changed, and elements can even
    be hidden from view to simplify the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: The altering of a form does not happen in a custom class; this is a hook defined
    in the module file. In this recipe, we will use the `hook_form_FORM_ID_alter()`
    hook to add a telephone field to the site’s configuration form.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that your module has a `.module` file to contain hooks, such as `mymodule.module`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will implement `hook_form_FORM_ID_alter` for the `system_site_information_settings`
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Drupal will call this hook and pass the current form array and its form state
    object. The form array is passed by reference, allowing our hook to modify the
    array without returning any values. This is why the `$form` parameter has the
    ampersand (`&`) before it. In PHP, all objects are passed by reference, which
    is why we have no ampersand before `$form_state`.
  prefs: []
  type: TYPE_NORMAL
- en: Form IDs can be found by inspecting the `getFormId` method of the form class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we add our telephone field to the form so that it can be displayed and
    saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We retrieve the current phone value from the `system.site` configuration object
    so that it can be modified if already set.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need to add a submit handler to the form in order to save the configuration
    for our new field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `$form['#submit']` modification adds our callback to the form’s submit handlers.
    This allows our module to interact with the form once it has been submitted.
  prefs: []
  type: TYPE_NORMAL
- en: The `mymodule_system_site_information_phone_submit` callback is passed the form
    array and form state. We load the current configuration factory to receive the
    configuration that can be edited. We then load the `system.site` configuration
    object and save `phone` based on the value from the form state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to make it aware of the new hook, so that
    it will be invoked when viewing the site settings form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Visit the site settings configuration form at `/admin/config/system/site-information`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The altered site settings form](img/Figure_7.05_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – The altered site settings form
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we targeted the specific `hook_form_FORM_ID_alter()` alter hook.
    There is also the generic `hook_form_alter()` hook that is invoked for all forms
    and allows modifying every form when it is rendered. This allows for modules to
    generically modify all forms, if needed, or several different form IDs in one
    hook. It also allows for more explicit hook targets.
  prefs: []
  type: TYPE_NORMAL
- en: The form array is passed by reference, allowing modifications to be made in
    this hook and altering the original data. This allows us to add an element or
    modify existing items, such as titles and descriptions.
  prefs: []
  type: TYPE_NORMAL
