["```php\nname: My Module! \n```", "```php\ntype: module \n```", "```php\ndescription: This is an example module from the Drupal 8 Cookbook! \n```", "```php\ncore: 8.x \n```", "```php\nname: My Module! \ntype: module \ndescription: This is an example module from the Drupal 8 Cookbook! \ncore: 8.x\n```", "```php\nname: Responsive Image \ntype: module \ndescription: 'Provides an image formatter and breakpoint mappings to output responsive images using the HTML5 picture tag.' \npackage: Core \nversion: VERSION \ncore: 8.x \ndependencies: \n  - breakpoint \n  - image \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Controller; \n\nuse Drupal\\Core\\Controller\\ControllerBase; \n\n/** \n * Returns responses for My Module module. \n */ \nclass MyPageController extends ControllerBase { \n\n} \n```", "```php\n/** \n * Returns markup for our custom page. \n */ \npublic function customPage() { \n  return [ \n    '#markup' => t('Welcome to my custom page!'), \n  ]; \n} \n```", "```php\nmymodule.mypage: \n```", "```php\nmymodule.mypage: \n  path: '/mypage' \n```", "```php\nmymodule.mypage: \n  path: '/mypage' \n  defaults: \n    _controller: '\\Drupal\\mymodule\\Controller\\MyPageController::customPage' \n    _title: 'My custom page' \n```", "```php\nmymodule.mypage: \n  path: '/mypage' \n  defaults: \n  _controller: '\\Drupal\\mymodule\\Controller\\MyPageController::customPage' \n  _title: 'My custom page' \nrequirements: \n  _permission: 'access content' \n```", "```php\nmymodule.cats: \n  path: '/cat/{name}' \n  defaults: \n    _controller: '\\Drupal\\mymodule\\Controller\\MyPageController::cats' \n  requirements: \n    _permission: 'access content' \n```", "```php\nclass MyPageController { \n  // ... \n  public function cats($name) { \n    return [ \n      '#markup' => t('My cats name is: @name', [ \n         '@name' => $name, \n      ]), \n    ]; \n  } \n} \n```", "```php\nmymodule.cats: \n  path: '/cat/{name}' \n  defaults: \n    _controller: '\\Drupal\\mymodule\\Controller\\MyPageController::cats' \n  requirements: \n    _permission: 'access content' \n  options: \n    parameters: \n      name: \n         type: entity:cat \n```", "```php\nmymodule.cats: \n  path: '/cat/{name}' \n  defaults: \n    _controller: '\\Drupal\\mymodule\\Controller\\MyPageController::cats' \n  requirements: \n    _permission: 'access content' \n    name: '[a-zA-z]+' \n```", "```php\nroute_callbacks: \n  - '\\Drupal\\mymodule\\Routing\\CustomRoutes::routes' \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Routing; \nuse Symfony\\Component\\Routing\\Route; \n\nclass CustomRoutes { \n  public function routes() { \n    $routes = []; \n\n    // Create mypage route programmatically \n    $routes['mymodule.mypage'] = new Route( \n        // Path definition \n       'mypage', \n        // Route defaults \n       [ \n          '_controller' => '\\Drupal\\mymodule\\Controller\\MyPageController::customPage', \n          '_title' => 'My custom page', \n        ], \n        // Route requirements \n       [ \n          '_permission' => 'access content', \n        ] \n    ); \n    return $routes; \n  } \n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Routing; \n\nuse Drupal\\Core\\Routing\\RouteSubscriberBase; \nuse Symfony\\Component\\Routing\\RouteCollection; \n\nclass RouteSubscriber extends RouteSubscriberBase { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function alterRoutes(RouteCollection $collection) { \n    // Change path of mymodule.mypage to use a hyphen \n    if ($route = $collection->get('mymodule.mypage')) { \n      $route->setPath('/my-page'); \n    } \n  } \n\n} \n```", "```php\nservices: \n  mymodule.route_subscriber: \n    class: Drupal\\mymodule\\Routing\\RouteSubscriber \n    tags: \n      - { name: event_subscriber } \n```", "```php\nview mymodule pages: \n```", "```php\nview mymodule pages: \n  title: 'View my module pages' \n```", "```php\nview mymodule pages: \n  title: 'View my module pages' \n  description: 'Allows users to view pages provided by My Module' \n```", "```php\nmymodule.mypage: \n  path: '/mypage' \n  defaults: \n  _controller: '\\Drupal\\mymodule\\Controller\\MyPageController::customPage' \n  _title: 'My custom page' \nrequirements: \n  _permission: 'view mymodule pages' \n```", "```php\n\nview mymodule pages: \n title: 'View my module pages' \n description: 'Allows users to view pages provided by My Module' \n restrict access: TRUE\n```", "```php\npermission_callbacks: \n- Drupal\\filter\\FilterPermissions::permissions \n```", "```php\n\\Drupal::currentUser()->hasPermission('my permission'); \n```", "```php\nlangcode: en \nstatus: true \ndependences: {}\nid: contactus \nlabel: 'Contact Us' \nrecipients: \n  - webmaster@example.com \nreply: '' \nweight: 0 \n```", "```php\n<?php \n\n/** \n * Update \"Contact Us\" form to have a reply message. \n */ \nfunction mymodule_update_8001() { \n  $contact_form = \\Drupal\\contact\\Entity\\ContactForm::load('contactus'); \n  $contact_form->setReply(t('Thank you for contacting us, we will reply shortly')); \n  $contact_form->save(); \n} \n```", "```php\n/** \n * Implements hook_install(). \n */ \nfunction mymodule_install() { \n  // Set the site name. \n  \\Drupal::configFactory() \n    ->getEditable('system.site') \n    ->set('name', 'Drupal 8 Cookbook!') \n    ->save(); \n} \n```", "```php\n<?php\n\n namespace Drupal\\mymodule\\EventSubscriber;\n\n use Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\n class RequestSubscriber implements EventSubscriberInterface {\n\n } \n\n```", "```php\n<?php\n\n namespace Drupal\\mymodule\\EventSubscriber;\n\n use Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n use Symfony\\Component\\HttpKernel\\KernelEvents;\n\n class RequestSubscriber implements EventSubscriberInterface {\n\n   /**\n    * {@inheritdoc}\n    */\n   public static function getSubscribedEvents() {\n     return [\n       KernelEvents::REQUEST => ['doAnonymousRedirect', 28],\n     ];\n   }\n\n } \n```", "```php\n<?php\n\n namespace Drupal\\mymodule\\EventSubscriber;\n\n use Drupal\\Core\\Url;\n use Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n use Symfony\\Component\\HttpFoundation\\RedirectResponse;\n use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;\n use Symfony\\Component\\HttpKernel\\KernelEvents;\n\n class RequestSubscriber implements EventSubscriberInterface {\n\n   /**\n    * Redirects all anonymous users to the login page.\n    *\n    * @param \\Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent $event\n    *   The event.\n    */\n   public function doAnonymousRedirect(GetResponseEvent $event) {\n     // Make sure we are not on the user login route.\n     if (\\Drupal::routeMatch()->getRouteName() == 'user.login') {\n       return;\n     }\n\n     // Check if the current user is logged in.\n     if (\\Drupal::currentUser()->isAnonymous()) {\n       // If they are not logged in, create a redirect response.\n       $url = Url::fromRoute('user.login')->toString();\n       $redirect = new RedirectResponse($url);\n\n       // Set the redirect response on the event, cancelling default response.\n       $event->setResponse($redirect);\n     }\n   }\n\n   /**\n    * {@inheritdoc}\n    */\n   public static function getSubscribedEvents() {\n     return [\n       KernelEvents::REQUEST => ['doAnonymousRedirect', 28],\n     ];\n   }\n\n } \n```", "```php\nservices:\n   mymodule.request_subscriber:\n     class: Drupal\\mymodule\\EventSubscriber\\RequestSubscriber\n     tags:\n       - { name: event_subscriber } \n```", "```php\n/**\n  * The route match.\n  *\n  * @var \\Drupal\\Core\\Routing\\RouteMatchInterface\n  */\n protected $routeMatch;\n\n /**\n  * Account proxy.\n  *\n  * @var \\Drupal\\Core\\Session\\AccountProxyInterface\n  */\n protected $accountProxy;\n\n /**\n  * Creates a new RequestSubscriber object.\n  *\n  * @param \\Drupal\\Core\\Routing\\RouteMatchInterface $route_match\n  *   The route match.\n  * @param \\Drupal\\Core\\Session\\AccountProxyInterface $account_proxy\n  *   The current user.\n  */\n public function __construct(RouteMatchInterface $route_match, AccountProxyInterface $account_proxy) {\n   $this->routeMatch = $route_match;\n   $this->accountProxy = $account_proxy;\n } \n```", "```php\n/**\n  * Redirects all anonymous users to the login page.\n  *\n  * @param \\Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent $event\n  *   The event.\n  */\n public function doAnonymousRedirect(GetResponseEvent $event) {\n   // Make sure we are not on the user login route.\n   if ($this->routeMatch->getRouteName() == 'user.login') {\n     return;\n   }\n\n   // Check if the current user is logged in.\n   if ($this->accountProxy->isAnonymous()) {\n     // If they are not logged in, create a redirect response.\n     $url = Url::fromRoute('user.login')->toString();\n     $redirect = new RedirectResponse($url);\n\n     // Set the redirect response on the event, cancelling default response.\n     $event->setResponse($redirect);\n   }\n } \n\n```", "```php\nservices:\n   mymodule.request_subscriber:\n     class: Drupal\\mymodule\\EventSubscriber\\RequestSubscriber\n     arguments: ['@current_route_match', '@current_user']\n     tags:\n       - { name: event_subscriber } \n\n```", "```php\n$ cd /path/to/drupal8\n$ composer require drupal/features\n```"]