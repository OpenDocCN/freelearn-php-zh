- en: Chapter 6. Using PhpStorm in a Team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a VCS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a VCS repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting PhpStorm to a VCS repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing a PhpStorm project in a VCS repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committing files to the VCS repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating code from a VCS repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronizing your code with the VCS repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining the VCS repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking projects out of a VCS repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating code patches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating VCS tags or branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a task for the team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Rome wasn''t built in a day. Nor by a single person...*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Whichever sport you play or wherever you go, it has always been a team game.
    They have always kept on saying that united you stand and divided you fall. A
    PhpStorm cookbook author also used to say that reinventing the wheel is an action
    that should be avoided. Thus, you should always work in a team. The reason is
    obvious: a task divided among a team is completed faster.'
  prefs: []
  type: TYPE_NORMAL
- en: According to a principle of software engineering, you should program in a team
    of two. This way, both of you will be able to discover errors in each other's
    code in the development phase itself.
  prefs: []
  type: TYPE_NORMAL
- en: So, when you work in a team, how will you work on an application development
    in which someone else is working on another module? One way is to use that same
    machine to code so that you can continue from the point where the other person
    stops working. But, is it wise to wait? It's OK that you work in a different shift.
    But, what if that person is geographically remote from you? Even if everything
    is favorable and if you need a third person to join the team, where will that
    person work? If you work for 8 hours, there can be a maximum of three people working
    on a project at any instant. Such inefficient usage of infrastructure!
  prefs: []
  type: TYPE_NORMAL
- en: How do you feel about the code repository? What do you think when someone says
    **version control** or **source control** before you? What do you know about VCS...
    VCS as in **version control system**?
  prefs: []
  type: TYPE_NORMAL
- en: What is meant by a version of software?
  prefs: []
  type: TYPE_NORMAL
- en: To get the answer, you have stepped into the world of version control systems.
    Welcome!
  prefs: []
  type: TYPE_NORMAL
- en: Getting a VCS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first action that you have to undertake is to decide which version of VCS
    you are going to use. There are a number of systems available, such as Git and
    Subversion (commonly known as SVN). It is free and open source software that you
    can download and install on your development server. There is another system named
    **concurrent versions system** (**CVS**). Both are meant to provide a code versioning
    service to you. SVN is newer and supposedly faster than CVS. Since SVN is the
    newer system and in order to provide information to you on the latest matters,
    this text will concentrate on the features of Subversion only.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, finally that moment has arrived when you will start off working in a team
    by getting a VCS system for you and your team. The installation of SVN on the
    development system can be done in two ways: easy and difficult. The difficult
    step can be skipped without consideration because that is for the developers who
    want to contribute to the Subversion system. Since you are dealing with PhpStorm,
    you need to remember the easier way because you have a lot more to do.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The installation step is very easy. There is this **aptitude** utility available
    with Debian-based systems, and there is the Yum utility available with Red Hat-based
    systems. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You just need to issue the command `apt-get install subversion`. The operating
    system's package manager will do the remaining work for you. In a very short time,
    after flooding the command-line console with messages, you will have the Subversion
    system installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To check whether the installation was successful, you need to issue the command
    `whereis svn`. If there is a message, it means that you installed Subversion successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not want to bear the load of installing Subversion on your development
    system, you can use commercial third-party servers. But that is more of a layman's
    approach to solving problems, and no PhpStorm cookbook author will recommend that
    you do that. You are a software engineer; you should not let go easily.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you install the version control system, you actually install a server that
    provides the version control service to a version control client. The subversion
    control service listens for incoming connections from remote clients on port number
    `3690` by default.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to install the older companion, CVS, you can do that in a similar
    way, as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to download the archive for the CVS server software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to unpack it from the archive using your favorite unpacking software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can move it to another convenient location since you will not need to disturb
    this folder in the future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You then need to move into the directory, and there will start your compilation
    process. You need to do `#. /configure` to create the make targets. Having made
    the target, you need to enter `#make install` to complete the installation procedure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Due to it being older software, you might have to compile from the source code
    as the only alternative.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VCS repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More often than not, a PHP programmer is expected to know some system concepts
    because it is often required to change settings for the PHP interpreter. The changes
    could be in the form of, say, changing the execution time or adding/removing modules,
    and so on. In order to start working in a team, you are going to get your hands
    dirty with system actions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will have to create a new repository on the development server so that
    PhpStorm can act as a client and get connected. Here, it is important to note
    the difference between an SVN client and an SVN server—an SVN client can be any
    of these: a standalone client or an embedded client such as an IDE. The SVN server,
    on the other hand, is a single item. It is a continuously running process on a
    server of your choice.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need to be careful while performing this activity as a single mistake can
    ruin your efforts. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a command `svnadmin` that you need to know. Using this command, you
    can create a new directory on the server that will contain the code base in it.
    Again, you should be careful when selecting a directory on the server as it will
    appear in your SVN URL for the rest part of your life. The command should be executed
    as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Having created a new repository on the server, you need to make certain settings
    for the server. This is just a normal phenomenon because every server requires
    a configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The SVN server configuration is located under `/path/to/your/repo/conf/` with
    the name `svnserve.conf`. Inside the file, you need to make three changes. You
    need to add these lines at the bottom of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There has to be a password file to authorize a list of users who will be allowed
    to use the repository. The password file in this case will be named `passwd` (the
    default filename). The contents in the file will be a number of lines, each containing
    a username and the corresponding password in the form of `username = password`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since these files are scanned by the server according to a particular algorithm,
    you don't have the freedom to leave deliberate spaces in the file—there will be
    error messages displayed in those cases.
  prefs: []
  type: TYPE_NORMAL
- en: Having made the appropriate settings, you can now make the SVN service run so
    that an SVN client can access it.
  prefs: []
  type: TYPE_NORMAL
- en: You need to issue the command `svnserve -d` to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is always good practice to keep checking whether what you do is correct.
    To validate proper installation, you need to issue the command `svn ls svn://user@host/path/to/subversion/repo/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `svnadmin` command is used to perform admin tasks on the Subversion server.
    The `create` option creates a new folder on the server that acts as the repository
    for access from Subversion clients.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration file is created by default at the time of server installation.
    The contents that are added to the file are actually the configuration directives
    that control the behavior of the Subversion server. Thus, the settings mentioned
    prevent anonymous access and restrict the write operations to certain users whose
    access details are mentioned in a file.
  prefs: []
  type: TYPE_NORMAL
- en: The command `svnserve` is again a command that needs to be run on the server
    side and which starts the instance of the server. The `-d` switch mentions that
    the server should be run as a daemon (system process). This also means that your
    server will continue running until you manually stop it or the entire system goes
    down.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Again, you can skip this section if you have opted for a third-party version
    control service provider.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting PhpStorm to a VCS repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The real utility of software is when you use it. So, having installed the version
    control system, you need to be prepared to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With SVN being client-server software, having installed the server, you now
    need a client. Again, you will have difficulty searching for a good SVN client.
    Don't worry; the client has been factory-provided to you inside PhpStorm. The
    PhpStorm SVN client provides you with features that accelerate your development
    task by providing you detailed information about the changes made to the code.
    So, go ahead and connect PhpStorm to the Subversion repository you created.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to connect PhpStorm to the Subversion repository, you need to activate
    the Subversion view.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is available at **View** | **Tool Windows** | **Svn Repositories**. Perform
    the following steps to activate the Subversion view:'
  prefs: []
  type: TYPE_NORMAL
- en: Having activated the Subversion view, you now need to add the repository location
    to PhpStorm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To do that, you need to use the **+** symbol in the top-left corner in the view
    you have opened, as shown in the following screenshot:![How to do it...](img/3878OT_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon selecting the **Add** option, there is a question asked by PhpStorm about
    the location of the repository. You need to provide the full location of the repository.
    Once you provide the location, you will be able to see the repository in the same
    Subversion view in which you have pressed the **Add** button.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you should always keep in mind the correct protocol to use. This depends
    on the way you installed the Subversion system on the development machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you used the default installation by installing from the installer utility
    (`apt-get` or `aptitude`), you need to specify `svn://`. If you have configured
    SVN to be accessible via `SSH`, you need to specify `svn+ssh://`. If you have
    explicitly configured SVN to be used with the Apache web server, you need to specify
    `http://`. If you configured SVN with Apache over the secure protocol, you need
    to specify `https://`.
  prefs: []
  type: TYPE_NORMAL
- en: Storing a PhpStorm project in a VCS repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here comes the actual start of the teamwork. Even if you and your other team
    members have connected to the repository, what advantage does it serve? What is
    the purpose solved by merely connecting to the version control repository? Correct.
    The actual thing is the code that you work on. It is the code that earns you your
    bread.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should now store a project in the Subversion repository so that the other
    team members can work and add more features to your code. It is time to add a
    project to version control. It is not that you need to start a new project from
    scratch to add to the repository. Any project, any work that you have done and
    you wish to have the team work on now can be added to the repository. Since the
    most relevant project in the current context is the cooking project, you can try
    adding that.
  prefs: []
  type: TYPE_NORMAL
- en: There you go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to add a project to the repository, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to use the menu item provided at **VCS** | **Import into version control**
    | **Share project (subversion)**. PhpStorm will ask you a question, as shown in
    the following screenshot:![How to do it...](img/3878OT_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the correct hierarchy to define the share target—the correct location
    where your project will be saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you wish to create the tags and branches in the code base, you need to select
    the checkbox for the same. It is good practice to provide comments to the commits
    that you make.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The reason behind this is apparent when you sit down to create a release document.
    It also makes the change more understandable for the other team members. PhpStorm
    then asks you the format you want the working copy to be in. This is related to
    the version of the version control software. You just need to smile and select
    the latest version number and proceed, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Having done that, PhpStorm will now ask you to enter your credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to enter the same credentials that you saved in the configuration
    file (see the *Creating a VCS repository* recipe) or the credentials that your
    service provider gave you. You can ask PhpStorm to save the credentials for you,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here it is worth understanding what is going on behind the curtains. When you
    do any Subversion related task in PhpStorm, there is an inbuilt SVN client that
    executes the commands for you. Thus, when you add a project to version control,
    the code is given a version number. This makes the version system remember the
    state of the code base. In other words, when you add the code base to version
    control, you add a checkpoint that you can revisit at any point in future for
    the time the code base is under the same version control system.
  prefs: []
  type: TYPE_NORMAL
- en: Interesting phenomenon, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have installed the version control software yourself and if you did
    not make the setting to store the password in encrypted text, PhpStorm will provide
    you a warning about it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3878OT_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Committing files to the VCS repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get back to a use case. By now, the memories of the `Dish` class must
    be under a thick layer of dust since it has not been used for a while now. Go
    ahead, mate. Remove the dust, shred the laziness, and set off looking at things
    from a different perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A small amount of strain on your brain (and obviously reading documentation)
    will make you remember that you created the `Dish` class in a hurry. Now that
    you have matured enough to use PhpStorm as an IDE, you need to prove your might
    in programming as well. You need to make the `Dish` class more functional.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can begin by peeping into the only method inside the `Dish` class. Once
    you do, you will clearly see that there is a `FIXME` tag. As stated in the `FIXME`
    tag, you should check for a valid ingredient name before allowing it to be added
    to the dish. This will prevent any unwanted ingredients from getting added to
    your dish and thus spoiling it. You need to specify two changes:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to make the parameter default to a value in the method signature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to check if the name is valid, that is, non-empty and not containing
    invalid elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thus the change you will make in the `Dish` class will be something like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main utilities of using an IDE such as PhpStorm is that the objects
    are shown in such a way that you get more information out of them. When you make
    the changes, PhpStorm starts indicating to you the changes using colors. If you
    add a line, it is shown in green, and when you delete a line, it is indicated
    by a gray triangle pointing to your right-hand side. When you make changes to
    a line of code, it is shown in blue. Besides this, when you commit your code,
    the version control number attaches another piece of information with it, which
    is quite important in itself. The information contains the user who committed
    the date, the time of the commit, and the revision number. The revision number
    denotes information as to how many times that particular file has been changed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PhpStorm, being a careful system, provides you with a number of options to choose
    from. You can tell PhpStorm to automatically update the code/directory after you
    commit if you enable **Auto-update after commit**.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to keep the files locked during the commit process, you can enable
    this checkbox next to **Keep files locked**.
  prefs: []
  type: TYPE_NORMAL
- en: There are certain programming-related tasks before the commit action.
  prefs: []
  type: TYPE_NORMAL
- en: You can reformat the code you are about to commit by enabling the **Reformat
    Code** option.
  prefs: []
  type: TYPE_NORMAL
- en: You can remove unused imports/includes/requires from the code about to be committed
    by selecting the **Optimize Imports** option.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform an analysis of the code you are about to commit by selecting
    the option **Perform Code Analysis**.
  prefs: []
  type: TYPE_NORMAL
- en: PhpStorm can warn you if you happen to push a TODO in your code to version control
    by enabling the **Check TODO** option. You can configure which TODO you want to
    view by clicking on **Configure**. Thus, before committing, PhpStorm will show
    you the TODOs you have created in the file/project you are about to commit.
  prefs: []
  type: TYPE_NORMAL
- en: You can even upload the committed files to an FTP server that you might have
    configured. Thus, PhpStorm can also deploy the code for you!
  prefs: []
  type: TYPE_NORMAL
- en: PhpStorm keeps informing you about all the files you have changed. The names
    of the files that have been changed locally since the last commit are shown in
    blue. The files that have not been changed are shown in black by default. If you
    are making changes to a file and another team member happens to make changes in
    the same file, there will be a text conflict, and such files are shown in red.
    However, such conflicts occur mostly during the update process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can change the color scheme to one of your choice. For that, you need to
    go to **File** | **Settings** | **Editor** | **Colors & Fonts** | **Diff**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that your changes are done, you need to commit the code so that it is made
    available to other team members. You need to access the right-click context menu,
    select **Subversion** | **Commit**. There is a dialog box that opens up and provides
    you with a view of what you are going to do. Once you are convinced that the changes
    are OK, you can proceed to commit the file. The file will again become black,
    indicating that it is in sync with the version control system.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Avoid problems**'
  prefs: []
  type: TYPE_NORMAL
- en: It is not that you can commit and commit without problems. If another team member
    has committed in the same section of code in which you have made changes, the
    version control system prevents inconsistency in the code by providing you with
    a warning and disallowing you from committing the code. It throws a message that
    the file you are working is out of date. To avoid this problem from occurring,
    you always need to work on the most recent code base. Thus, always update before
    you commit.
  prefs: []
  type: TYPE_NORMAL
- en: Updating code from a VCS repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have always thought about your team. You have always thought that you will
    work in such a way that you are the strongest link in your team.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will act as a filter to clean the poor code written by a fellow team member.
    You will be the peer reviewer of the code that your peers write. You will add
    documentation to the spaghetti code that someone in the team is so used to writing.
    All said and done, how will you achieve these targets? You will have to take updates
    from the version control system every time you plan to start off being the James
    Bond in your team.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unfortunately, in order to receive updates from the version control system,
    there is no automatic push notification system provided with PhpStorm. However,
    you can perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You have to manually check for updates. But do not worry. You just need to remember
    a few navigation links, and you will be able to update a particular code, a particular
    folder, or the entire project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The update link is available at **VCS** | **Subversion** | **Update file**.
    If you want to update the current file you are working on, use the option shown
    in the following screenshot:![How to do it...](img/3878OT_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, there are certain optional choices for you to make.
  prefs: []
  type: TYPE_NORMAL
- en: 'There can be a number of branches of development versions of the project you
    are working on. Suppose the management has made a provision for separate branches
    or versions of the project—probably one would be a new theme so that there can
    be testing, or there would be a separate branch to optimize the code, or any such
    permutation that is possible. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You can update to a specific branch of version control by selecting the **Update/Switch
    to a specific URL** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you select this option, you can specify a branch. You can specify the URL
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This text box is populated by default with the Subversion path of the current
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to go back in time knowing that an algorithm used to exist in the
    past but has been removed now, PhpStorm provides you with an option for that as
    well. Perform the following steps to achieve that end:'
  prefs: []
  type: TYPE_NORMAL
- en: You can select the **Update/switch to specific revision** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a **Force update** option available to you that will force an update
    of the selected file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you enable the **Update administrative information only in changed subtrees**
    option, the PhpStorm SVN client will only update administrative information, such
    as the version number, previous revision, and file checksums-related versioning
    information for those files/directories that have been affected by the update
    operation. Enabling this option might improve the performance of the update operation
    because there are fewer files to be updated, following the simple rule to do less
    in less time. Please note that under certain circumstances, you might have to
    perform a *normal* update.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you enable the **Ignore Externals** checkbox, the update will ignore all
    the external definitions from the update in the current file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can update a directory that you select. In order to do that,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to select the directory you wish to update, access the right-click
    context menu, and select **Subversion** | **Update**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same options will be available this time as well, but with the context changed
    to directory from file. Thus, when you force update, the *unversioned* changes
    inside the directory will be automatically added to version control, and the entire
    directory will be updated to match the repository copy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Since a project is also a directory, you can update an entire project as well.
    The method is exactly the same as that of updating a directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The update action is quite simple to understand. Subversion (and other version
    control systems) maintains a working copy of the project. This working copy is
    created using a number of criteria, such as the date of modification, text that
    was changed, and version number. When you update the file/directory, all this
    and other necessary information is added to the working copy on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you wish to update your local copy with the copy under version control from
    the repository, there can be two possibilities, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You are attempting to update a file/directory in which you have not made any
    changes. In this scenario, the update will happen normally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the other possibility, if you are performing a normal update, there will
    be conflicts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The version control system will tell you that it is getting confused as to
    which copy to keep under version control: yours or theirs? Select **Accept Theirs**,
    as in, the other team members, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3878OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You need to calm down the version control system by merging the files and resolving
    conflicts. The conflicts are shown by PhpStorm in bright colors. Obviously, you
    can modify the colors as well. The red color is the conflict line, the blue color
    is the changed line, and the green color is the added line. You need to use the
    guiding arrows to send the content between the files, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3878OT_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Synchronizing your code with the VCS repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You cannot control where you were born. And you also cannot control which profession
    you choose: you just have to keep yourself up to date with the challenges the
    job presents to you.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the biggest challenges programmers face is to match up with the team.
    Due to a phobia of something unknown happening, programmers often end up in an
    unsynchronized version of the project on their development systems. They tend
    to follow Sir Isaac Newton's very first law of motion. The state of uniform motion
    is already described. The external force is the change in the business requirement
    and thus a new task assignment.
  prefs: []
  type: TYPE_NORMAL
- en: A short and simple solution to this problem is to always synchronize your code
    base with version control.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code synchronization needs more care than any other action. The reason is obvious—you
    might end up accepting the incorrect version of the code and thus ending up asking
    for more time for development. You can synchronize the code in a number of ways,
    and the following steps help you with one of the ways:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to know the version control history as to which change was made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can do that when you select the project, access the right-click context
    menu, and select the **Subversion** | **Show History** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a version number that you want to synchronize your code base with. Access
    the right-click context menu and select the "**Show all affected files**" option.![How
    to do it...](img/3878OT_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now need to select the **Show diff with local** option, and PhpStorm will
    show you the list of files in a hierarchical way, as shown in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to select this button to see the list of files changed since your
    selected revision, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now proceed to view the individual differences in the file. You can
    select the changes you want to accept and skip the changes you don't want.
  prefs: []
  type: TYPE_NORMAL
- en: This can be a useful option if you know the effect well in advance, or else
    don't opt for this facility—it can prove to be annoying if the change list is
    large.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you synchronize, you are just performing an update operation—this time,
    manually and selectively. Thus, a synchronization process is copying the changes
    to your local working copy. The change can be anything: a new line of code written,
    removed, or changed.'
  prefs: []
  type: TYPE_NORMAL
- en: Examining the VCS repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The more you know, the more you know*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: More often than not, there are scenarios in which you need to see what is going
    on inside to be able to make decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having extra information always helps you to turn that last stone, which often
    proves decisive in the fate of a project. Thus, you might want to know what the
    structure of the code base is, what files are inside a particular directory, or
    even what directories are inside the project as a whole. Such wish-lists are endless.
  prefs: []
  type: TYPE_NORMAL
- en: Better work than just plan.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are determined enough that you will browse the repository, you can
    resort to PhpStorm. To start viewing what is going on inside, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to select **VCS** | **Browse VCS Repository** | **Browse Subversion
    Repository**. Once you do that, you will be able to see all of the repositories
    you added while you were working with PhpStorm irrespective of the project, as
    shown in the following screenshot:![How to do it...](img/3878OT_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can select the desired repository location from the list of available locations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you select a location, you can browse the repository by double-clicking
    on the selected entry. Besides this, you can do a lot more. There are a number
    of options available to you once you right-click and access the context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can create a new repository location if you select the **New** | **Repository**
    **Location**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can create a new folder in the selected repository if you select the **New**
    | **Remote Folder** option. You need to specify the name that the folder will
    be known by and a message to be displayed for this addition to the repository.
    Remember teamwork? Here's how **New** | **Remote Folder** looks:![How to do it...](img/3878OT_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can view the revision history for the selected repository location if you
    select the **Show History** option. Can you recall which other way you can view
    the Subversion history?
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check out the project on your local machine, PhpStorm allows
    you to do that by providing you with an option with the name **Checkout**. This
    is similar to a hotel checkout, where you leave the hotel, taking all the luggage
    with you. Here, the analogy to a hotel is the Subversion server, and the luggage
    is the actual code. However, it is not a 100 percent analogy as you don't tend
    to check out someone else's luggage when you check out of a hotel room. Those
    are stunts performed by experienced professionals (pun intended). Don't try this
    at home (no pun intended).
  prefs: []
  type: TYPE_NORMAL
- en: When you are browsing, you might need to find out what is different in another
    code base version in a branched or tagged version; you have the option to do that
    using the **Compare with** option. Once selected, PhpStorm provides you with an
    information box that you can use to view information the way you like. You can
    select the version you want to compare with. It is important to note here that
    the order of comparison matters because you also have the option to do a reverse
    comparison. You can do that by enabling the **Reverse diff** option.
  prefs: []
  type: TYPE_NORMAL
- en: PhpStorm provides you with two options to choose from while obtaining the difference
    between files. You can provide a visual treat to your eyes if you select the **Graphical
    Compare** option, or else you can save the difference to a text file with the
    default name `diff.txt` in the current directory that contains your project.
  prefs: []
  type: TYPE_NORMAL
- en: You can search across the currently selected repository as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to search for the changes made by a particular author, you need
    to enable the **Author** option and provide the name of a valid author.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to search for changes made after a certain date, you can enable
    the **After** option and set the required date from a date-picker window available
    on clicking the button next to this option.
  prefs: []
  type: TYPE_NORMAL
- en: The same is the case when you want to search for changes made until a certain
    date. You need to enable the **Before** option. The date-picker window is available
    in the same way as in the previous case.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you remember the version number, you can browse the changes by revision number.
    You can select the changes with revision number greater than the **From** option
    and less than the **To** option.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are done with specifying the search criteria, PhpStorm presents you
    with the list of changes that match your selected criteria.
  prefs: []
  type: TYPE_NORMAL
- en: PhpStorm says that you can do a lot more with this information and makes a provision
    for you to modify the search criteria, apply groupings on the basis of the date
    of change or the author of the change, and perform a regular expression-based
    search in this result. To see what options are available, you just need to right-click
    and access the context menu on the selected item. You will be provided with a
    number of self-explanatory options, such as **Refresh** to reload the search result;
    **Filter** to specify the search criteria again; **Show Details** to see the revision
    details quickly; **Create patch** to create a patch file of the differences in
    a selected revision; **Revert changes** to undo the changes made in the selected
    revision and to roll back the file/directory to the immediately previous state;
    and **Edit Revision comment** to modify the comment passed on to the version control
    system when making the selected revision.
  prefs: []
  type: TYPE_NORMAL
- en: Art is long and life is short, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Checking projects out of a VCS repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The phenomenon of checking out is quite interesting. You (usually) check out
    your luggage from a hotel room; you (most of the times) tell your friend: "Dude,
    check out my new Phablet"; you (are hesitant to) check out code from version control.
    What exactly does checking out mean? This seems more like a buzz word... checkout,
    checkout, and checkout!'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Context is what you need to understand. The meaning of a word changes with a
    change in context. In the current context, you need to do what you are hesitant
    to do. Thus, checking out code is a phenomenon provided for version control systems,
    in which you take out the latest versions of the code base and download it onto
    your development computer. This download is not merely a simple download, it provides
    you with the latest version of code available under version control and makes
    you aware of the list of changes that have been made to the code base up until
    the current date. Thus, when you check out a piece of code, you become aware of
    the history of the code as well.
  prefs: []
  type: TYPE_NORMAL
- en: This time, before you get the answer in the *How to do it...* section, you need
    to know why you should do it. The team is what you were talking about when you
    started thinking version control. So, if a team has a new member, the only way
    to let the new member start working on the existing project is checkout. If your
    development machine has changed and you wish to resume working from where you
    left off, you can even use checkout for this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To check out code from version control is everyone''s cup of tea. Perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You can do it extremely easily by visiting the menu item **VCS** | **Checkout**
    from **Version Control** | **Subversion**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you select that, you will be provided with a new window with the list of
    Subversion repositories you connected in PhpStorm irrespective of the project,
    as shown in the following screenshot:![How to do it...](img/3878OT_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having selected the appropriate version, on proceeding, PhpStorm asks you where
    it should keep the checked out code base. You need to specify that, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you set the target location, PhpStorm remains inquisitive. It will ask
    you general checkout options, such as the depth to which you want to check out
    the code, whether you want to check out the latest code or only until a revision,
    and whether you want to select the externals definition, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having set all the options, you can now easily sit back and enjoy the view.
    PhpStorm will check out the code and keep it in an organized way on your local
    (development) machine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating code patches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is often stated in three simple statements:'
  prefs: []
  type: TYPE_NORMAL
- en: Do it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do it right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do it right now
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The statement is simple, but the intent is not. Every manager wants the task
    to be done, and it is you, the programmer''s, headache to do it somehow. You often
    end up writing erroneous code. The misery does not end here; you happen to push
    it to Subversion at the end of the day to tell your manager what you worked on
    during the day. In this rush, you happened to push some bugs to version control.
    Thus, any fellow member working in another time zone will end up screwing his
    working copy by taking updates from version control. Now, there will be two types
    of resource wastage:'
  prefs: []
  type: TYPE_NORMAL
- en: That member (and any other member who's done the same) will spend time in locating
    the bug—a waste of person hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having located the bug, you will have to undo the changes and make a few other
    changes—a waste of the previous person's day (when you pushed the buggy code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not only this, it will be an abuse of the version control system as when the
    bug entered version control, the very purpose of using version control was defeated—multiple
    people will be doing the same task—again, reinventing the wheel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, being the cause of this wastage, you must think of a solution to this problem.
    The solution will be to use an SVN patch. A patch is a file that is created when
    you create it. Obviously! SO, a patch, is a file that contains the differential
    text only and the details about the file where the changes were made. Thus, a
    patch can be applied to files and can be undone later. So, the code changes are
    visible only to the person to whom you have given this patch file. The advantage?
    The other person applying the patch can review the changes that you intend to
    make, and if some bugs are visible, the patch can be removed from the code base,
    and you can be informed that you need to do more work to create bug-free code.
  prefs: []
  type: TYPE_NORMAL
- en: You can view the applying of a patch file as an analogy to tailoring. When you
    happened to burn your shirt while cooking pizza (a business requirement has changed),
    you went to the tailor to get your shirt fixed (the business team comes to you
    to get the new functionality running). The tailor (you) finds a similar piece
    of cloth and shows you how by stitching it to cover the burnt part of your shirt
    (the code base). If you don't like the patchwork (the reviewer has found errors
    in the code), you can ask the tailor to remove the patch and try another color
    (the reviewer will ask you to make and implement another algorithm). The tailor
    easily rips off the patch and tries another color (you/reviewer remove/s the patch
    from the code base). This process goes on until you are satisfied with the patch
    (until the reviewer finds that your code is working fine). The tailor finally
    finishes the stitching properly and hands over the shirt to you (you commit the
    code and hand it over to the release engineer to proceed).
  prefs: []
  type: TYPE_NORMAL
- en: To sum up, you can create a code patch in PhpStorm.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to create a Subversion patch in PhpStorm, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to look up (in the top menu), find the menu item, **VCS**, click on
    it, and find the **Create Patch** option, and PhpStorm will show you a window
    that you might be familiar with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, it is a window similar to the **Commit** window, with the difference that
    the **Commit** button is replaced with a **Create Patch** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And yes, the functionality is also different. You need to specify a comment
    that eventually acts as the name of the patch file (spaces replaced with a hyphen),
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The default option is the easiest to understand and execute. Once you specify
    the (name and the) location where the patch information will be created, PhpStorm
    creates a patch right at that location, as shown in the following screenshot:![How
    to do it...](img/3878OT_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you select the **Reverse patch** option, PhpStorm will reverse the comparison
    criteria—in the default case, it kept the latest version (**Head**) as the basis
    of comparison and considered the changes in this version as new.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While creating a reverse patch, PhpStorm will consider the immediately previous
    revision as the basis and consider the changes in this revision as new.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you choose to **Select base revision text(s) into patch file**, it means
    you are asking PhpStorm to put in the contents of the file in the current revision.
    Thus, the file length of the patch file will be increased. Here, it is important
    to note that you can choose the file base revision you wish to include in the
    patch file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having made the necessary options and initiated the patch file creation process,
    PhpStorm will show you a success message along with an option to go to the location
    of the patch file now, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now pass on this patch file to the code reviewer, shut down your machine,
    and safely drive home without worrying about wasting any resources.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you create a patch file, you actually create a file that contains the
    difference between two files, or more precisely, revisions: the base revision
    and the would-be, next revision. So, a patch file contains the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: the name of the file and the base revision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the line numbers that have been modified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the difference in the content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A typical patch file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The changes are made to this file and the specified revision, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The line number changed is `871,` `13` have been removed and, `20` have been
    added. Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-` sign denotes that content has been removed. Take a look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `+` sign denotes that content has been added. Take a look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Happy patching.
  prefs: []
  type: TYPE_NORMAL
- en: Creating VCS tags or branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The human brain is an overloaded machine. It tends to forget events or things
    or plans very easily. It requires continuous effort to make the brain remember
    things. Since a major part of the brain is dedicated to the visual sense, the
    most widespread usage to keep the brain on its toes is providing visual hints.
    Visual hints act in the same way as regular bookmarks would do in a PhpStorm cookbook
    they let you remember what section you were reading and when.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PhpStorm provides you with a feature wherein you can create visually appealing
    labels, that is, tags.
  prefs: []
  type: TYPE_NORMAL
- en: Tags are visual labels that let you and your team know which revision was special
    for you. Thus, you can create visually appealing labels or tags to denote special
    events, such as `Release Version 2.3` or `Bug fixes for V2.2`, and so on. So,
    where is the hint then? The hint is the name. Why visual? Because you can remember
    names and visuals easily.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The labeling process starts from the time that you decide to create a tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should be a descriptive label because if you are not fully awake at the
    time of creating the label, you can end up with names such as `Tag 1` and `My
    Tag`. It leads to wastage of resources and abuse of technology as well. To create
    a tag, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, if you want to create a new tag, you need to select the **Branch or
    Tag** option available when you select the **VCS** | **VCS Operations** pop up,
    as shown in the following screenshot:![How to do it...](img/3878OT_06_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you do so, you see PhpStorm asking questions in order to make you feel
    at home, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_06_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You need to specify the source on your development machine you wish to copy
    the file or folder from to label by enabling the **Working Copy** option and specifying
    the source file path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to specify a file or folder to copy from, you need to select the
    **Repository Location** option and specify the exact location in the current repository
    and the desired revision number or **Head** (the latest revision).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then you need to specify the target where you will save the labeled version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can specify a location in the repository by specifying the base URL and
    the label name. This label name will be the visual hint for you.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also specify an arbitrary location such as a repository location or
    even a location on your development machine.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you are convinced that something works, it will be a great experience
    to go one step ahead and find out what goes on behind the curtains and what makes
    that thing work. So, the branch or tag creation process functions in the same
    way—when you create a tag or a branch in your repository, you just copy files
    from one location to another. Yes, it is the same copy that most of the engineers
    are experts at (no pun intended). Thus, there are four combinations available:'
  prefs: []
  type: TYPE_NORMAL
- en: You copy from your local working copy to your local working copy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You copy from your local working copy to another location in the same repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You copy from another repository location to a location in your local working
    copy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You copy from another repository location to another location in the same repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not mandatory, but it is always recommended that you add comments while
    doing anything—you can add descriptive comments so that you are able to relate
    this change to an action in the future.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having learned how to label a change in the repository, you can move deeper
    into the ocean of knowledge by proceeding to create branches. The similarity between
    a tag and a branch is that both are just folders with certain names. They are
    different in the purposes they serve. While a tag might be useful for small changes,
    a branch forms part of a bigger picture.
  prefs: []
  type: TYPE_NORMAL
- en: A use case will make the scenario clearer to you, and you will be able to differentiate
    between the two of them. Suppose the technology team has made a release, and they
    believe this is the last new development done for this version. So, you can make
    a tag named `Version 2.3 final`, add content to it, and leave it forever. Thus,
    at any time in the future, whenever you need to revisit your project, you will
    be able to recognize that "Version 2.3 final" meant such and such a release with
    such and such changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a branch is similar to creating a tag since both are just repository
    directories. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new branch, you need to go to the **Subversion** view, select the
    appropriate directory from the project view, and access the right-click context
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Subversion** menu item and select the **Branch or Tag** option.
    A familiar window will pop-up once you have done that. You need to fill in the
    basic information for the branch creation to proceed, such as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The source from where you access the files to be pushed into the Subversion:
    This source can be somewhere in your local development system (the file/folder
    you selected by default) or a repository location (you can specify the revision
    number as well).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The destination where you will put the branch to be: This, again, needs to
    be a full pathname on your local development machine or a URL pointing to a repository
    location. It is important to note here that the repository location must be the
    same repository where your source resides.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The comment you wish to add so you and the team remember the purpose of the
    branch creation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: So, you create a label to make a revision safe in the repository forever. You
    create a branch to make a safe and stable version of the code—a branch is created;
    you work on it, get it tested and approved, and merge it to the trunk.
  prefs: []
  type: TYPE_NORMAL
- en: '*It all is a matter of perception*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Creating a task for the team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever imagined how big things are created? How have people successfully
    managed to build large systems that function so well? What must have been their
    thinking and mindset when they decided to step out and attempt that extra mile?
  prefs: []
  type: TYPE_NORMAL
- en: The answer to this is quite simple. A journey of a thousand miles begins with
    a single step. So, when you started thinking about working with your team, you
    decided to work with version control. You went ahead and learned the tricks of
    the trade while working with version control. Now, it's the time for you to step
    out and try out that extra mile. Combine the knowledge you have gained, and get
    ready to explore one of the ways in which you can create a team task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a team task so that you can set which section of code needs
    the attention of which programmer in your team. You can do that by combining the
    power of TODO (remember creating TODO tasks?) and version control. Thus, any fellow
    programmer will be able to know quite easily that such and such a task has now
    been assigned and there needs to be a proper development plan. A great help to
    the team—you will guide them through the correct way.
  prefs: []
  type: TYPE_NORMAL
- en: This also has a role to play in the peer code review process in the **eXtreme
    Programming** paradigm of software engineering, wherein you write code and your
    peer reviews your code. The peer then points out the probably buggy section in
    your code. Thus, once you push your code to version control with a task for your
    peer, the peer can push the changes they have made along with tasks for you to
    fix or consider or any changes that might appear as the need of the hour.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a task is not a difficult task (pun intended). So, if you want to
    point to another member in your team, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You just need to continue your old style of programming but with a small modification:
    wherever you feel that more work needs to be done.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You just need to put a TODO followed by the description of the task you wish
    to bring to the attention of the team. The actual flow to create a general team
    task while reviewing code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find a piece of code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a thorough read
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Write `// TODO <followed by the task to be done, for example, Add Documentation,
    team>`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Commit the code to version control
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you are writing code yourself, you can add a TODO to create a task to
    set the team thinking in a particular direction. The flow will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Write (refined) code—you cannot afford to make mistakes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find a logic that you think is not completely implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write `//TODO <followed by the task to be done, e.g. find some fool proof regular
    expression, team>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commit the code to version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you want to divide the task among the team, you can use the TODO user
    followed by the name of the programmer you think would be the most apt choice
    in getting the work done. The flow becomes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the changed code thoroughly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the code on your development system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find possible improvements that can be made, and group them according to the
    caliber of the team members.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Write TODO and the name of the target programmer, followed by the comment for
    each of the possible improvements that you found out. Some sample TODOs could
    be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//TODO Alice`: This section needs to have the unnecessary variables removed'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//TODO Bob`: The actions inside a for-loop can be done outside the loop for
    lower execution time'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Commit the code to version control.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This is just one of the ways—you are the person who will find out more and more
    ways of using version control.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create a team task, you just create a TODO task and push it to version
    control. Thus, in a real sense, you are making use of the PhpStorm TODO feature.
    So, your TODO is actually passed on to the team members with the help of PhpStorm
    because it is the parser built with PhpStorm that recognizes the TODO keyword.
    Thus, when the team takes the update from version control, along with the other
    revision text, this TODO will also get included in your working copy. So, when
    a fellow programmer selects the TODO view, the intention is visible.
  prefs: []
  type: TYPE_NORMAL
- en: The same is the case when you create a TODO task for a particular programmer
    in your team. So, when everyone in the team takes updates from version control,
    the same TODO now contains the name of the programmer. This enables team members
    to focus on their task properly.
  prefs: []
  type: TYPE_NORMAL
- en: A team task not only helps the team to be more focused on the assigned task
    and put in more energy thereby, but also attempts to ease some pressure from the
    cumbersome task of allocating work to the team.
  prefs: []
  type: TYPE_NORMAL
- en: PhpStorm again to your rescue!
  prefs: []
  type: TYPE_NORMAL
