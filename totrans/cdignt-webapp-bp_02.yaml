- en: Chapter 2. A URL Shortener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are quite a few URL shorteners out there on the Internet; however, there's
    always room for a little fun and sometimes people or companies require their own
    solutions rather than just using an external provider. The project in this chapter
    covers just that—developing a URL shortener in CodeIgniter that can be used by
    anyone.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this app, we''ll need to do a few things: we''ll create two controllers,
    one to create a shortened URL and one to redirect a shortened URL to its actual
    location on the Web.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll create language files to store text, creating a foundation for multiple
    language support should you wish to implement it.
  prefs: []
  type: TYPE_NORMAL
- en: We will also make amends to the `config/routes.php` file—this is to ensure that
    the shortened URL is as short as it can be.
  prefs: []
  type: TYPE_NORMAL
- en: However, this app, along with all the others in this book, relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you may already
    have, bear in mind that the setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction
    and Shared Project Resources"), *Introduction and Shared Project Resources,* acts
    as a foundation for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting the `routes.php` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So without further ado, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start building, we should always take a look at what we plan to build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, a brief description of our intent: we plan to build an app that will
    display a simple form to the user. The user will be encouraged to enter a URL
    into the form and submit that form.'
  prefs: []
  type: TYPE_NORMAL
- en: A unique code will be generated and associated with the URL entered by the user.
    This URL and unique code will be saved to a database.
  prefs: []
  type: TYPE_NORMAL
- en: A new URL will be shown to the user containing the unique code we just generated.
    That unique code will be appended to the URL of the app we're building. Should
    the user (or anyone else) click on that link, the app will look up the unique
    code in the database. If the unique code exists, it will redirect the user to
    the original URL associated with that unique code.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s take a look at some wireframes to help us understand what this might
    look like on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design and wireframes](img/7093OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the first page that the user will see. The user is invited to enter
    a URL into the textbox and hit the **Go** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The page will be submitted and code will be generated. Both this code and the
    original URL will be saved to the database. The user will then see the new URL
    we''ve just created for them. They can copy that URL to their clipboard (for pasting
    into an e-mail and so on) or click on it there and then if they wish. This is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design and wireframes](img/7093OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create six files for this application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/urls_model.php`: This file provides
    access to the database and allows us to create the `url_code`, save the record
    to the database, and also retrieve the original URL from the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/create/create.php`: This file provides
    us with our interface, the user facing form, and any messages needed to inform
    the user of their actions or the system''s actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This file provides
    a navigation bar at the top of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/create.php`: This file performs
    validation checks on the URL inputted by the user, calls any helpers, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/go.php`: This file provides support
    for shortened URLs. It gets the unique code parameter from the URI (first segment),
    sends it to the `Urls_model,` and redirects the user to the associated `url_address`
    if it exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    file provides language support for the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The file structure of the preceding six files is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources,* in mind. However, it's not the end of the world—the code can
    easily be applied to other situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we''ll build the database. Copy out the following MySQL code into
    your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You don't have to call the database `urls` if you don't want to. Feel free to
    rename to something else if you wish; just be sure to update the `config/database.php`
    file accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what each item in the database means:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Elements | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `url_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `url_code` | This contains the unique code generated by the `save_url()`
    function of `urls_model.php`. This is the code that is appended to the shortened
    URL. |'
  prefs: []
  type: TYPE_TB
- en: '| `url_address` | This is the actual URL the user entered in the form in the
    `create.php` view file. It will be the URL that the user is redirected to. |'
  prefs: []
  type: TYPE_TB
- en: '| `url_created_at` | This is the MySQL timestamp created when the record was
    added. It is necessary so that we have an idea of when a record was created; also,
    it gives us a method of clearing old records from the database using a cron script
    should you wish. |'
  prefs: []
  type: TYPE_TB
- en: We'll also need to make amends to the `config/database.php` file—namely setting
    the database access details, username password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/database.php` file and find the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Edit the values in the preceding lines. Ensure you substitute those values with
    the ones that are more specific to your setup and situation—so enter your username,
    password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the routes.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want short URLs—in fact the shorter the better. The user clicking on a URL
    would be better served if the URL were as short as possible; for that reason,
    it would be a good idea if we removed certain things from the URL to make it shorter—for
    example, the controller name and function name. We will use CodeIgniter''s routing
    functionality to achieve this. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Firstly, we need to change the default controller. Initially, in a CodeIgniter
    application, the default controller is set to `welcome`. However, we don''t need
    that; instead we want the default controller to be `create`. So, consider the
    following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace it with the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also need to set up a route rule for the `go` controller. We will need
    to remove the controller and function names (usually the first and second parameters
    in the URI). The following are two lines of code (highlighted in bold); add these
    two lines below the `404_override` route, so that the file now looks like the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, the eagle-eyed among you will have looked at that last line and seen the
    `(:any)` type; some of you may have wondered what all that was about.
  prefs: []
  type: TYPE_NORMAL
- en: CodeIgniter supports a simple type of regex that makes routing for unknown URLs
    much easier. The `(:any)` type says to CodeIgniter that any URI pattern not otherwise
    defined (we're also defining `create`) is to be routed to `go/index`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Urls_model` contains three functions; obviously it contains our `__construct()`
    function but we're not focusing on that at the moment as it's not doing anything
    except referencing its parent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, let''s look at the two functions `save_url()` and `fetch_url()`. As
    their names suggest, one saves information to the database and the other fetches
    information from it. For now, let''s go and create the code and we''ll discuss
    in detail what each function does later:     Create the `urls_model.php` model file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at `save_url()`. Notice the PHP construct `do...while`;
    it looks something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So that means *do something while a condition is not met*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with that in mind, think about our problem. We have to associate the URL
    that the user has entered in the form with a unique value. We will use this unique
    value to represent the real URL.
  prefs: []
  type: TYPE_NORMAL
- en: Now there's no point using a sequential number (1, 2, 3, … 1000) as our unique
    value as someone can come along and iterate up through the numbers and get access
    to everyone's URLs. This may not be such a dreadful security risk as presumably
    all pages are accessible from the Internet anyway, but it's still not a good idea.
    So the unique value must not only be unique, it must be random and not easily
    guessed by passersby. Also, this unique value must only exist once in the database.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure this, we will have to check if the unique value already exists and,
    if it does exist, make a new unique code and check in the database again.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s look at the `do while` construct in the `save_url()` function in
    a bit more detail. The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We use CodeIgniter's `String` helper and its `random_string()` function (make
    sure you include the `String` helper using `$this->load->helper('string');` in
    your controllers' constructor). The `random_string()` function will create (as
    the name suggests) a random string of characters that we will use for our unique
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we're asking `random_string()` to give us a string of characters
    made up of numbers and uppercase and lowercase letters; that string should be
    no more that 8 digits in length.
  prefs: []
  type: TYPE_NORMAL
- en: We then look into the database to see if the code `random_string()` has made
    for us already exists. We'll use the `$this->db->count_all_results();` CodeIgniter
    function to count up the number of matching results.
  prefs: []
  type: TYPE_NORMAL
- en: If the unique string already exists, then the number returned by `$this->db->count_all_results();`
    will be equal to `1` (as it already exists). If this happens, we will loop back
    to the beginning of the `do while` construct and start again by generating a new
    code.
  prefs: []
  type: TYPE_NORMAL
- en: We keep doing this until we find a code that does not exist in the database.
    When we do, we break out of the `do while` loop and save that unique code, along
    with the original URL to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at `fetch_url()`. We want to see if there is a record in the
    database that corresponds to the `$url_code` entered by the user (in this case,
    they have clicked on a URL). The `fetch_url()` function accepts `$url_code` as
    a function argument passed to it by the controller and looks for it in the database.
    If it is found, the entire record (table row) is returned to the controller; if
    not, it returns false. The controller handles the false result accordingly (it
    displays an error).
  prefs: []
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to create two view files in this section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/views/create/create.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/views/nav/top_nav.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't forget that the navigation file (`views/nav/top_nav.php`) is unique to
    each chapter in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view file–views/create/create.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `create.php` file is the view file that the user creating the shortened
    URL will see; it contains the HTML form the user will enter the original URL into
    and any interactive elements such as error or success messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `create/create.php` view file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating the view file–views/nav/top_nav.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each project in this book has its own navigation bar at the top of the page.
    This chapter is no exception although the actual navigation options for this project
    are limited—mostly because the app we''re building only really does one thing.
    So create the `nav/top_nav.php` view file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Creating controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two controllers in this project. The first one `create` is responsible
    for displaying the initial form to the user and validating the input. The second
    one `go` will redirect the user to the original URL.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget that the controllers extend the `core/MY_Controller.php` file and
    inherit the helpers loaded there.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller file–controllers/create.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `create` controller in this project is responsible for the initial contact
    with the user; that is to say, it loads the view file `views/create.php` (that
    displays the form to the user) and processes the input—validation and more. We''ll
    look at it in a second, but first let''s create the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the controller file `create.php` and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the `create` controller does the following things for us:'
  prefs: []
  type: TYPE_NORMAL
- en: Form validation, where it checks to see if the input is what we expect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging up the `url_address` ready for the `Urls_model`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling any error and success messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s go through the controller by taking a look at what happens when the
    controller is loaded. As we''re using CodeIgniter''s form validation processes,
    you''ll be aware that `($this->form_validation->run() == FALSE)` will trigger
    the view files to be displayed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Before we display the view files, we set some variable values for the view file
    `create/create.php`. These values govern how the success and error messages are
    displayed. These are stored in the `$page_data` array (see the bold text in the
    preceding code).
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming there were no errors from the form validation, we grab the `url_address`
    from the post array and package it into an array, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We then load the `Urls_model` and send the `$data` array to the `save_url()`function
    of `Urls_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I have removed the comments to make it more legible for this explanation.
  prefs: []
  type: TYPE_NORMAL
- en: When successful, the model will return the `url_code` that we store in `$page_data['encoded_url']`.
  prefs: []
  type: TYPE_NORMAL
- en: This is then passed the `create/create.php` view file, which will display a
    success message to the user and their now shortened URL.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller file–controllers/go.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `go` controller is the other end of the process. That is to say, the `create.php`
    controller creates the shortened URL and saves it to the database, and the `go.php`
    controller is responsible for taking a URL, finding the `$url_code` in the `uri`
    segments, looking in the database to see if it exists, and, if so, redirecting
    the user to the actual web address associated with it. Sounds simple, and in truth
    it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `go.php` controller file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `go` controller really only gets going *after* the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding lines check to see if there is a 1st segment in the URL. Normally,
    the first and second segments are taken up by the controller and function name
    (as the order in the URL usually goes controller/function/parameter). However,
    as we want the URL to be short (or at least that's the idea), we're taking our
    unique code from the first parameter. Think of it as shifting what would normally
    be in the third parameter to the left. So, two levels higher up means that what
    was in the third segment is now at the first.
  prefs: []
  type: TYPE_NORMAL
- en: How do we do this? How do we have a parameter (our unique code) as the 1st parameter
    instead of the controller name? Where did the controller and function names go
    and why does it still work when they're removed?
  prefs: []
  type: TYPE_NORMAL
- en: We alter the `routes.php` file, of course; this is explained earlier in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, let's return to our code. If there is no item in the URL, then there
    isn't really anything for this controller to do. Thus, we'll redirect the user
    to the `base_url()` function, which will load the default controller (set as `autoload.php`);
    in this case, the default controller is the `create.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, assuming that there *was* a 1st parameter, we''ll move on to the next
    part of the controller, the bit that works out the `$url_code`, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the preceding code. We grab the 1st `uri` segment and assign
    it to the `$url_code` variable. We need to check if this code exists in the database,
    so we load the `Urls_model` and call the `fetch_url()` function of `Urls_model`,
    passing to it `$url_code`.
  prefs: []
  type: TYPE_NORMAL
- en: The `fetch_url()` method will look in the database for a record corresponding
    to the value in `$url_code`. If nothing is found, it'll return `false,` causing
    the controller to load the `create/create.php` view.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if a record is found, `fetch_url()` returns the Active Record object.
    We now loop over the object, picking out the `url_address`, and storing it as
    the local variable `$url_address`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have the original URL in the `$url_address` variable. We simply pass
    this directly to the `redirect()`CodeIgniter function, which will, as the name
    suggests, redirect the user to the original URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the use of the `prep_url()` CodeIgniter function from within the `redirect()`
    function. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `prep_url()` function will ensure that there is `http://` at the beginning
    of the URL, if it does not already have it
  prefs: []
  type: TYPE_NORMAL
- en: Creating the language file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Taking text out of the HTML or storing text in other files such as controllers
    can make maintaining applications or adding multiple languages a nightmare. Keeping
    languages in a separate dedicated file is always a good idea. With that in mind,
    we will create a language file for this app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the language file `en_admin_lang.php` and add the following code to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have made all the amendments to configuration files, created the
    database, and created all the files necessary for the app to work (controllers,
    models, views, and so on) let's run through a few scenarios briefly, just to make
    sure we know how the app functions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a shortened URL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where Lucy visits the URL Shortener app and the
    `create` controller is called by CodeIgniter, displaying the `create/create.php`
    view file. The following is the sequence of events:'
  prefs: []
  type: TYPE_NORMAL
- en: Lucy enters a URL in the text input and clicks on **Shorten Now**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon submitting the form, the controller validates the URL. The URL is successfully
    validated and the validation returns no errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The URL entered by Lucy is then sent to the `save_url()`function of `Urls_model`
    that creates a unique code. The `save_url()` function uses the PHP construct `do
    while` and an Active Record database query to create a unique code that doesn't
    already exist in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once a code has been created that doesn't already exist, it is saved to the
    database along with a MySQL timestamp.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app then displays a success message to Lucy, informing her that the URL
    was saved correctly. It also displays the URL for her to either click on or (more
    likely) copy-and-paste elsewhere.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieving a URL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where Jessica receives an e-mail from Lucy containing
    the shortened URL. The following is the sequence of events:'
  prefs: []
  type: TYPE_NORMAL
- en: Jessica opens the e-mail and clicks on the URL in that e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Her computer opens a browser and takes her to our app. As the `create` controller
    is not the 1st `uri` segment, the `go` controller is run (we set this in the `routes.php`
    file).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go` controller loads the `Urls_model,` passing it the `url_code` (that
    was in the first segment of `uri`). The `fetch_url()` function of `Urls_model`
    looks in the database for the code and, if found, it returns the actual web address
    associated with that code to the `go` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go` controller redirects the browser to the URL supplied by the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jessica is happy as she can look at the cute cat video Lucy sent her! Awww!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So there you are! We've got ourselves a fairly good URL shortener application.
    It's certainly not feature-rich or the most advanced, but it works and is ready
    to be expanded upon should you wish. Perhaps you could add user accounts or payment
    for advanced features?
  prefs: []
  type: TYPE_NORMAL
- en: It currently uses Twitter Bootstrap for the frontend so it probably could do
    with an individual face-lift, a different style, look and feel, but it's currently
    user-friendly and responsive to mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create a discussion forum, allowing someone to
    create a discussion and then letting people comment and reply.
  prefs: []
  type: TYPE_NORMAL
- en: A simple admin moderation system will be provided to help prevent any untoward
    shenanigans such as naked pictures of celebrities or signals intelligence being
    posted up, or something like that—unless of course you're into that sort of thing,
    in which case I hear that the Ecuadorian embassy in London do a terribly good
    lunch; you might get fed up of it after a few months, though!
  prefs: []
  type: TYPE_NORMAL
