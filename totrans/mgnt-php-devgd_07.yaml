- en: Chapter 7. Deployment and Distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the last chapter of this book; we have come far and learned a lot
    along the way. By now, you should have a clear idea about everything involved
    in working with and developing custom extensions for Magento—well, almost everything.
  prefs: []
  type: TYPE_NORMAL
- en: As for any other Magento developer, your code will eventually need to be promoted
    to production or maybe packaged for distribution. In this chapter, we will see
    the different techniques, tools, and strategies that are available to us.
  prefs: []
  type: TYPE_NORMAL
- en: The final objective of this chapter is to give you the tools and skills to perform
    deployments with confidence and with little or no downtime.
  prefs: []
  type: TYPE_NORMAL
- en: The road toward zero-downtime deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying to production is probably one of the most dreaded tasks for developers,
    and more often than not, it will be done improperly.
  prefs: []
  type: TYPE_NORMAL
- en: But what is zero-downtime deployment? Promoting to production with the confidence
    that the code has been properly tested and is ready the ideal that all Magento
    developers should aspire to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is achieved not by a single process or tool, but by a combination of techniques,
    standards, and tools. In this chapter, we will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Distributing our extension through Magento Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role of version control systems on deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proper practices to branch and merge changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making it right from scratch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how testing can not only enhance our workflow,
    but also save us from future headaches, unit tests, and integration tests; automated
    tools are at our disposition to ensure that our code is properly tested.
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests means more than just putting together a few tests and calling
    it done; we are responsible for thinking about all the possible edge cases that
    might affect our code and writing tests for each for them.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that what you see is what you get
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first chapter of this book, we dived right into setting up our development
    environment, which is a very important task. In order for us to guarantee that
    we deliver quality and tested code, we must be able to develop and test our code
    in an environment as close to production as possible.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate the importance of this environment, I'll use an example. In the
    early days of Magento, I often heard that developers would work on their local
    environments, creating new extensions from scratch. They finished development
    and testing on their local staging, and everything seemed to be working properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the commonly accepted workflows is:'
  prefs: []
  type: TYPE_NORMAL
- en: Start development on the developer's local machine, which is running a virtual
    machine that resembles the production environment as much as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes are tested and approved on a staging environment that is an as close
    as possible copy of production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, changes are deployed to the production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, it was now time for the developers to promote their code to production,
    and they confidently did that. Of course, it was working on the local system,
    so it had to work in production, right? In these particular situations, this wasn't
    the case; what happened instead was that as soon the new code was loaded into
    production, the store would crash, saying the autoloader wasn't able to find the
    class.
  prefs: []
  type: TYPE_NORMAL
- en: What happened? Well, here, the problem was that the developers' local environment
    was Windows and the name of the extension folder was in **CamelCase**, for example
    `MyExtension`, but they were using **capitalized** text (`Myextension`) internally
    in the class names.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this will work just fine in Windows because the file does not distinguish
    between uppercased, capitalized, or lowercased folder names, while a Unix-based
    system, such as most of the web servers, does make a distinction on the folder
    and file naming.
  prefs: []
  type: TYPE_NORMAL
- en: While this example may look silly, it illustrates the need for a standardized
    development environment quite well. There are many parts and "moving pieces" in
    a Magento installation; a different version of PHP or an extra Apache module that
    is enabled in production but not staging, can make a world of difference.
  prefs: []
  type: TYPE_NORMAL
- en: Magento naming conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Magento uses standardized class naming conventions based on the class location
    in the filesystem. This standardization enables automatic class loading instead
    of using the more traditional `require_once` and `include_once` functions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `Mage_Catalog_Model_Product` class is located in the `app/code/core/Mage/Catalog/Model/Product.php`
    location; the Magento autoloader is smart enough to replace the underscore (`_`)
    characters with the directory separators.
  prefs: []
  type: TYPE_NORMAL
- en: Ready means ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When do we decide that our code is actually ready to enter production, and what
    does "ready" really mean? Each developer might have a different definition of
    what ready and "done" actually mean. When working on a new module or extending
    Magento, we should always define what ready means for this particular feature/code.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we are getting somewhere now, and we know that in order move to production,
    we have to:'
  prefs: []
  type: TYPE_NORMAL
- en: Test our code and make sure we have covered all the edge cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the code follows the standards and guidelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure it has been tested and developed in an environment as close to production
    as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version control systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Version control systems** (**VCS**) are the lifeblood of any developer, and
    while the field might be a bit divided among Git and SVN enthusiasts (no mention
    for you, mercurial guys), the basic functionalities are still the same.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly go over the differences between each VCS and the advantages and
    disadvantages of each.
  prefs: []
  type: TYPE_NORMAL
- en: Subversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Subversion** (**SVN**) is a powerful system and has been around for quite
    some time, is very well known, and is and widely used.'
  prefs: []
  type: TYPE_NORMAL
- en: SVN is a centralized VCS; by this we mean that there is single main source that
    is recognized as "good" all developers' checkout and push changes to and from
    this central source.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this makes changes easier to track and maintain, it has a serious disadvantage.
    As it is centralized, it means that we have to be in constant touch with the central
    repository, working remotely or without an Internet connection, which is not possible.
    This is illustrated in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Subversion](img/4172_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git is a much younger VCS and has been rising in popularity for a few years
    now, mostly due to the wide adoption by the open source community and the popularity
    of GitHub([www.github.com](http://www.github.com)).
  prefs: []
  type: TYPE_NORMAL
- en: A critical difference between SVN and Git is that Git is a decentralized version
    control system. By this, we mean that there is no central authority or main repo;
    each developer has a full copy of the repository locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The decentralization makes Git faster, in addition to having a better and more
    powerful **branching** system other than VCS. Also, working remotely or without
    an Internet connection is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Git](img/4172_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Regardless of which VCS we choose, the most powerful and sometimes overlooked
    feature of any VCS is still available: the ability to create branches or branching.'
  prefs: []
  type: TYPE_NORMAL
- en: Branching allows us to experiment and work on new features without breaking
    the stable code in our trunk or master. Creating a branch takes a snapshot of
    the current trunk/master code where we can make any changes and tests.
  prefs: []
  type: TYPE_NORMAL
- en: Now, branching is only part of the equation. Once we are comfortable with our
    code changes and we have properly tested every edge case, we need a way to reintegrate
    these changes into our main code base.
  prefs: []
  type: TYPE_NORMAL
- en: '**Merging** give us this ability to reintegrate all our branch modifications
    by running a few commands.'
  prefs: []
  type: TYPE_NORMAL
- en: By integrating branches and merging changes into our workflow, we gain flexibility
    and the freedom to work on a different set of changes, features, and bug fixes
    without interfering with experimental or work in progress code.
  prefs: []
  type: TYPE_NORMAL
- en: Also, as we will learn, version control can also help us perform seamless promotions
    and keep our code up to work across multiple Magento installations with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might want to freely distribute your extension or maybe make it available
    commercially, but how could you guarantee that the code is properly installed
    each time without having to check it yourself? And what about the updates or upgrades?
    Not all storeowners are tech savvy or capable of changing files on their own.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Magento comes out of the box with its package manager and extension
    marketplace called Magento Connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Magento Connect allows developers and solution partners to share their open
    source and commercial contributions with the community and is not restricted to
    only custom modules; we can find the following types of resources in the Magento
    Connect marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language packs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packing our extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the core features of Magento Connect is that it allows us to package
    our extensions directly from the Magento backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'To package our extension, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Magento backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the backend, navigate to **System** | **Magento Connect** | **Package Extensions**.![Packing
    our extension](img/4172_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, the **Create Extension Package** section is composed of six different
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Package Info
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Package Info** is used to specify the general extension information, such
    as the name, description, and versions of Magento that are supported. The subsections
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: The standard practice is to keep the name simple and use words'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Channel**: This refers to the code pool for the extension; as we mentioned
    in previous chapters, extensions designed for distribution should use the **community**
    channel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supported releases**: Select which version of Magento should be supported
    for our extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Summary**: This is a brief description of the extension used for the extension
    review process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: This is a detailed description of the extension and its functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**License**: This is used for the extension, and some of the available options
    are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Software License** (**OSL**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mozilla Public License** (**MPL**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Massachusetts Institute of Technology License** (**MITL**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GNU **General Public License** (**GPL**)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Any other license if your extension is to be distributed commercially
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**License Url**: This is the link to the license text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on the different license types can be found at [http://www.magedevguide.com/license-types](http://www.magedevguide.com/license-types).
  prefs: []
  type: TYPE_NORMAL
- en: Release Info
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Release** **Info**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Release Info](img/4172_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Release Info** section contains important data about the current package
    release:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Release Version**: In the initial release, this can be any arbitrary number;
    however, it is important that the version is incremented with each release. Magento
    Connect will not allow you to update the same version twice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release Stability**: Three options are available (**Stable**, **Beta** and
    **Alpha**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**: With this, we can release all the specific notes, if any.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Authors**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authors](img/4172_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this section, the author(s) information is specified; each author information
    has the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: This specifies the author''s full name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User**: This specifies the Magento username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email**: This specifies the contact e-mail address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Dependencies**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dependencies](img/4172_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three types of dependencies that are used when packaging a Magento
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP Version**: This is the **Minimum** and **Maximum** version of the PHP
    that is supported for this extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packages**: This is used to specify any other packages that are required
    for this extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensions**: With this, we can specify whether a specific PHP extension
    is required for our extension to work'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a package dependency is not met, Magento Connect will offer to install the
    required extension because PHP extensions' Magento Connect will throw an error
    and will stop the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Contents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Contents**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Contents](img/4172_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Contents** section allows us to specify each file and folder that forms
    part of the extension package.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the most important section in the extension packaging process, and it's
    also the easiest to mess up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each content entry has the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Target**: This is the target base directory; it is used to specify the base
    path to search the file. The following options are available:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Core team module file - ./app/code/core**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Local module file - ./app/code/local**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Community module file - ./app/code/community**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Global Configuration - ./app/etc**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Locale language file - ./app/locale**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento User Interface (layouts, templates) - ./app/design**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Library file - ./lib**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Media library - ./media**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Theme Skin (Images, CSS, JS) - ./skin**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Other web accessible file - ./**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento PHPUnit test - ./tests**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento other - ./**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path**: This is the filename and/or path relative to our the specified target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: Two options are available for us, **File** or **Recursive dir**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include**: This field takes a regular expression that allows us to specify
    which files are to be included'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignore**: This field takes a regular expression that allows to specify which
    files are to be excluded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load Local Package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Load Local Package**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Load Local Package](img/4172_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This section allows us to load packaged extensions; as we have not packaged
    any extensions, the list is currently empty.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and package our gift registry extension; ensure that you fill
    in all the fields and then click on **Save Data and Create Package**. This will
    package and save the extension in the `magento_root/var/connect/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The extension package file contains all the sources files and source code needed;
    additionally, a new file is created with each package, called `package.xml`. This
    file contains all the information about the extension and the detailed structure
    of the files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing our extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, in order to make our extension available, we have to create an extension
    profile in Magento Connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an extension profile, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [magentocommerce.com](http://magentocommerce.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **MY ACCOUNT** .link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Developers** link in the left-side navigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add a New Extension**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Add new extension** screen looks something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing our extension](img/4172_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is important to notice that the extension key field must be the exact same
    name you used while generating the package.
  prefs: []
  type: TYPE_NORMAL
- en: Once the extension profile has been created, we can proceed to upload our extension
    package; all the fields should match the ones specified during the extension packaging
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing our extension](img/4172_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, once we are done, we can click on the **Submit for Approval** button.
    An extension can have the following statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Submitted**: This means the extension was submitted for review'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not Approved**: This means there was a problem with the extension; you will
    also receive an e-mail explaining the reason why the extension was not approved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live**: This means the extension has been approved and is available through
    Magento Connect'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offline**: You can take your extension offline at any time from your account
    extension manager'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to deploy and share our custom extensions. There
    are many different methods that we can use to share and deploy our code to production
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: This is the book's final chapter. We learned a lot about Magento development,
    and while we covered a lot of ground, this book is only meant to be a stepping
    stone on a long journey.
  prefs: []
  type: TYPE_NORMAL
- en: Magento is not an easy framework to learn, and while it can be a daunting experience,
    I encourage you to keep trying and learning.
  prefs: []
  type: TYPE_NORMAL
