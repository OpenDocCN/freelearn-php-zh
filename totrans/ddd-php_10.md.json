["```php\ninterface UserDAO \n{ \n    /** \n     * @param string $username \n     * @return User \n     */ \n    public function get($username);\n\n    public function create(User $user);\n\n    public function update(User $user);\n\n    /**\n     * @param string $username\n     */\n    public function delete($username);\n}\n\n```", "```php\ninterface BloatUserDAO \n{ \n    public function get($username);\n\n    public function create(User $user);\n\n    public function update(User $user);\n\n    public function delete($username);\n\n    public function getUserByLastName($lastName);\n\n    public function getUserByEmail($email);\n\n    public function updateEmailAddress($username, $email);\n\n    public function updateLastName($username, $lastName);\n}\n\n```", "```php\nnamespace Domain\\Model;\n\nclass Post\n{\n    const EXPIRE_EDIT_TIME = 120; // seconds\n\n    private $id;\n    private $body;\n    private $createdAt;\n\n    public function __construct(PostId $anId, Body $aBody) \n    {\n        $this->id = $anId;\n        $this->body = $aBody;\n        $this->createdAt = new \\DateTimeImmutable();\n    }\n\n    public function editBody(Body $aNewBody)\n    {\n        if($this->editExpired()) {\n            throw new RuntimeException('Edit time expired');\n        }\n\n        $this->body = $aNewBody;\n    }\n\n    private function editExpired()\n    {\n        $expiringTime= $this->createdAt->getTimestamp() +\n            self::EXPIRE_EDIT_TIME;\n\n        return $expiringTime < time();\n    }\n\n    public function id()\n    {\n        return $this->id;\n    }\n\n    public function body()\n    {\n       return $this->body;\n    }\n\n    public function createdAt()\n    {\n       return $this->createdAt;\n    }\n}\n\nclass Body\n{\n    const MIN_LENGTH = 3;\n    const MAX_LENGTH = 250;\n\n    private $content;\n\n    public function __construct($content)\n    {\n        $this->setContent(trim($content));\n    }\n\n    private function setContent($content)\n    {\n        $this->assertNotEmpty($content);\n        $this->assertFitsLength($content);\n\n        $this->content = $content;\n    }\n\n    private function assertNotEmpty($content)\n    {\n        if(empty($content)) {\n            throw new DomainException('Empty body');\n        }\n    }\n\n    private function assertFitsLength($content)\n    {\n        if(strlen($content) < self::MIN_LENGTH) {\n            throw new DomainException('Body is too short');\n        }\n\n        if(strlen($content) > self::MAX_LENGTH) {\n            throw new DomainException('Body is too long');\n        }\n    }\n\n    public function content()\n    {\n        return $this->content;\n    }\n}\n\nclass PostId\n{\n    private $id;\n\n    public function __construct($id = null)\n    {\n        $this->id = $id ?: uniqid();\n    }\n\n    public function id()\n    {\n        return $this->id;\n    }\n\n    public function equals(PostId $anId)\n    {\n       return $this->id === $anId->id();\n    }\n}\n\n```", "```php\nclass SimplePostRepository \n{   \n    private $post = [];\n\n    public add(Post $aPost)\n    {\n        $this->posts[(string) $aPost->id()] = $aPost;\n    }\n\n    public function postOfId(PostId $anId)\n    {\n        if (isset($this->posts[(string) $anId])) {\n            return $this->posts[(string) $anId];\n        }\n\n        return null;\n    }\n}\n\n```", "```php\n$id = new PostId();\n$repository = new SimplePostRepository();\n$repository->add(new Post($id, 'Random content'));\n\n// later ...\n$post = $repository->postOfId($id);\n$post->editBody('Updated content');\n\n// even later ...\n$post = $repository->postOfId($id);\nassert('Updated content' === $post->body());\n\n```", "```php\ninterface PostRepository \n{ \n    public function add(Post $aPost);\n    public function addAll(array $posts); \n    public function remove(Post $aPost); \n    public function removeAll(array $posts); \n    // ... \n}\n\n```", "```php\ninterface PostRepository \n{ \n    // ... \n\n    /**\n     * @return Post\n     */\n    public function postOfId(PostId $anId);\n\n    /**\n     * @return Post[]\n     */\n    public function latestPosts(DateTimeImmutable $sinceADate);\n}\n\n```", "```php\ninterface PostRepository\n{ \n    // ...\n\n    /**\n     * @return PostId\n     */\n    public function nextIdentity();\n}\n\n```", "```php\n$post = newPost($postRepository->nextIdentity(), $body);\n\n```", "```php\nnamespace Infrastructure\\Persistence\\InMemory;\n\nuse Domain\\Model\\Post;\nuse Domain\\Model\\PostId;\nuse Domain\\Model\\PostRepository;\n\nclass InMemoryPostRepository implements PostRepository\n{\n    private $posts = [];\n\n    public function add(Post $aPost)\n    {\n       $this->posts[$aPost->id()->id()] = $aPost;\n    }\n\n    public function remove(Post $aPost)\n    {\n        unset($this->posts[$aPost->id()->id()]);\n    }\n\n    public function postOfId(PostId $anId)\n    {\n        if (isset($this->posts[$anId->id()])) {\n            return $this->posts[$anId->id()];\n        }\n\n        return null;\n    }\n\n    public function latestPosts(\\DateTimeImmutable $sinceADate)\n    {\n        return $this->filterPosts(\n           function (Post $post) use($sinceADate) {\n               return $post->createdAt() > $sinceADate;\n           }\n        );\n    }\n\n    private function filterPosts(callable $fn)\n    {\n        return array_values(array_filter($this->posts, $fn));\n    }\n\n    public function nextIdentity()\n    {\n         return new PostId();\n    }\n}\n\n```", "```php\ncomposer require doctrine/orm \n\n```", "```php\nnamespace Infrastructure\\Persistence\\Doctrine\\Types;\n\nuse Doctrine\\DBAL\\Types\\Type;\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\nuse Domain\\Model\\Body;\n\nclass BodyType extends Type\n{\n    public function getSQLDeclaration(\n        array $fieldDeclaration, AbstractPlatform $platform\n    ) {\n        return $platform->getVarcharTypeDeclarationSQL(\n            $fieldDeclaration\n        );\n    }\n\n    /**\n     * @param string $value\n     * @return Body\n     */\n    public function convertToPHPValue(\n        $value, AbstractPlatform $platform\n    ) {\n        return new Body($value);\n    }\n\n    /**\n     * @param Body $value\n     */\n    public function convertToDatabaseValue(\n        $value, AbstractPlatform $platform\n    ) {\n        return $value->content();\n    }\n\n    public function getName()\n    {\n        return 'body';\n    }\n}\n\nnamespace Infrastructure\\Persistence\\Doctrine\\Types;\n\nuse Doctrine\\DBAL\\Types\\Type;\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\nuse Domain\\Model\\PostId;\n\nclass PostIdType extends Type\n{\n    public function getSQLDeclaration(\n        array $fieldDeclaration, AbstractPlatform $platform\n    ) {\n        return $platform->getGuidTypeDeclarationSQL(\n            $fieldDeclaration\n        );\n    }\n\n    /**\n     * @param string $value\n     * @return PostId\n     */\n    public function convertToPHPValue(\n        $value, AbstractPlatform $platform\n    ) {\n        return new PostId($value);\n    }\n\n    /**\n     * @param PostId $value\n     */\n    public function convertToDatabaseValue(\n        $value, AbstractPlatform $platform\n    ) {\n       return $value->id();\n    }\n\n    public function getName()\n    { \n       return 'post_id';\n    }\n}\n\n```", "```php\nclass PostId \n{ \n    // ...   \n    public function __toString()\n    {\n        return $this->id;\n    }\n}\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<doctrine-mapping\n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    http://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <entity name=\"Domain\\Model\\Post\" table=\"posts\">\n        <id name=\"id\" type=\"post_id\" column=\"id\">\n            <generator strategy=\"NONE\" />\n        </id>\n        <field name=\"body\" type=\"body\" length=\"250\" column=\"body\"/>\n        <field name=\"createdAt\" type=\"datetime\" column=\"created_at\"/>\n    </entity>\n\n</doctrine-mapping>\n\n```", "```php\nuse Doctrine\\DBAL\\Types\\Type;\nuse Doctrine\\ORM\\EntityManager;\nuse Doctrine\\ORM\\Tools;\n\nType::addType(\n    'post_id',\n    'Infrastructure\\Persistence\\Doctrine\\Types\\PostIdType'\n);\n\nType::addType(\n    'body',\n    'Infrastructure\\Persistence\\Doctrine\\Types\\BodyType'\n);\n\n$entityManager = EntityManager::create(\n    [\n        'driver' => 'pdo_sqlite',\n        'path'=> __DIR__ . '/db.sqlite',\n    ],\n    Tools\\Setup::createXMLMetadataConfiguration(\n         ['/Path/To/Infrastructure/Persistence/Doctrine/Mapping'],\n         $devMode = true\n    )\n);\n\n```", "```php\nnamespace Infrastructure\\Persistence\\Doctrine;\n\nuse Doctrine\\ORM\\EntityManager;\nuse Domain\\Model\\Post;\nuse Domain\\Model\\PostId;\nuse Domain\\Model\\PostRepository;\n\nclass DoctrinePostRepository implements PostRepository\n{\n    protected $em;\n\n    public function __construct(EntityManager $em)\n    {\n        $this->em = $em;\n    }\n    public function add(Post $aPost)\n    {\n        $this->em->persist($aPost);\n    }\n\n    public function remove(Post $aPost)\n    {\n        $this->em->remove($aPost);\n    }\n\n    public function postOfId(PostId $anId)\n    {\n        return $this->em->find('Domain\\Model\\Post', $anId);\n    }\n\n    public function latestPosts(\\DateTimeImmutable $sinceADate)\n    {\n       return $this->em->createQueryBuilder()\n           ->select('p')\n           ->from('Domain\\Model\\Post', 'p')\n           ->where('p.createdAt > :since')\n           ->setParameter(':since', $sinceADate)\n           ->getQuery()\n           ->getResult();\n    } \n\n    public function nextIdentity()\n    {\n        return new PostId();\n    }\n}\n\n```", "```php\n interface PostRepository\n {\n     public function nextIdentity();\n     public function postOfId(PostId $anId);\n     public function save(Post $aPost);\n     public function saveAll(array $posts);\n     public function remove(Post $aPost);\n     public function removeAll(array $posts);\n }\n\n```", "```php\n $post = new Post(/* ... */);\n $postRepository->save($post);\n\n // later ...\n $post = $postRepository->postOfId($postId);\n $post->editBody(new Body('New body!'));\n $postRepository->save($post);\n\n```", "```php\ncomposer require predis/predis:~1.0\nnamespace Infrastructure\\Persistence\\Redis;\n\nuse Domain\\Model\\Post;\nuse Domain\\Model\\PostId;\nuse Domain\\Model\\PostRepository;\nuse Predis\\Client;\n\nclass RedisPostRepository implements PostRepository\n{\n    private $client;\n\n    public function __construct(Client $client)\n    {\n        $this->client = $client;\n    }\n\n    public function save(Post $aPost)\n    {\n        $this->client->hset(\n            'posts',\n            (string) $aPost->id(), serialize($aPost)\n        );\n    }\n\n    public function remove(Post $aPost)\n    {\n        $this->client->hdel('posts', (string) $aPost->id());\n    }\n\n    public function postOfId(PostId $anId)\n    {\n       if($data = $this->client->hget('posts', (string) $anId)) {\n          return unserialize($data);\n       }\n\n       return null;\n    }\n\n    public function latestPosts(\\DateTimeImmutable $sinceADate)\n    {\n        $latest = $this->filterPosts(\n            function(Post $post) use ($sinceADate) {\n                return $post->createdAt() > $sinceADate;\n            }\n        );\n\n        $this->sortByCreatedAt($latest);\n\n        return array_values($latest);\n    }\n\n    private function filterPosts(callable $fn)\n    {\n        return array_filter(array_map(function ($data) {\n            return unserialize($data);\n        },\n\n        $this->client->hgetall('posts')), $fn);\n    }\n\n    private function sortByCreatedAt(&$posts)\n    {\n        usort($posts, function (Post $a, Post $b) {\n            if ($a->createdAt() == $b->createdAt()) {\n                return 0;\n            }\n            return ($a->createdAt() < $b->createdAt()) ? -1 : 1;\n        });\n    }\n\n    public function nextIdentity()\n    {\n        return new PostId();\n    }\n }\n\n```", "```php\nnamespace Infrastructure\\Persistence\\Sql;\n\nuse Domain\\Model\\Body;\nuse Domain\\Model\\Post;\nuse Domain\\Model\\PostId;\nuse Domain\\Model\\PostRepository;\n\nclass SqlPostRepository implements PostRepository\n{\n    const DATE_FORMAT = 'Y-m-d H:i:s';\n\n    private $pdo;\n\n    public function __construct(\\PDO $pdo)\n    {\n        $this->pdo = $pdo;\n    }\n\n    public function save(Post $aPost)\n    {\n        $sql ='INSERT INTO posts ' .\n            '(id, body, created_at) VALUES ' .\n            '(:id, :body, :created_at)';\n\n        $this->execute($sql, [\n            'id' => $aPost->id()->id(),\n            'body' => $aPost->body()->content(),\n            'created_at' => $aPost->createdAt()->format(\n                self::DATE_FORMAT\n            )\n        ]);\n    }\n\n    private function execute($sql, array $parameters)\n    {\n        $st = $this->pdo->prepare($sql);\n\n        $st->execute($parameters);\n\n        return $st;\n    }\n\n    public function remove(Post $aPost)\n    {\n        $this->execute('DELETE FROM posts WHERE id = :id', [\n            'id' => $aPost->id()->id()\n        ]);\n    } \n\n    public function postOfId(PostId $anId)\n    {\n        $st =$this->execute('SELECT * FROM posts WHERE id = :id',[\n            'id' => $anId->id()\n        ]);\n\n        if($row = $st->fetch(\\PDO::FETCH_ASSOC)) {\n            return $this->buildPost($row);\n        }\n\n        return null;\n    }\n\n    private function buildPost($row)\n    {\n        return new Post(\n            new PostId($row['id']),\n            new Body($row['body']),\n            new \\DateTimeImmutable($row['created_at'])\n        );\n    }\n\n    public function latestPosts(\\DateTimeImmutable $sinceADate)\n    {\n        return $this->retrieveAll(\n            'SELECT * FROM posts WHERE created_at > :since_date', [\n                'since_date' => $sinceADate->format(self::DATE_FORMAT)\n            ]\n        );\n    }\n\n    private function retrieveAll($sql, array $parameters = [])\n    {\n        $st = $this->pdo->prepare($sql);\n\n        $st->execute($parameters);\n\n        return array_map(function ($row) {\n            return $this->buildPost($row);\n        }, $st->fetchAll(\\PDO::FETCH_ASSOC));\n    }\n\n    public function nextIdentity()\n    {\n        return new PostId();\n    }\n\n    public function size()\n    {\n        return $this->pdo->query('SELECT COUNT(*) FROM posts')\n            ->fetchColumn();\n    }\n}\n\n```", "```php\nclass SqlPostRepository implements PostRepository\n{\n    // ...\n    public function initSchema()\n    {\n        $this->pdo->exec(<<<SQL\nDROP TABLE IF EXISTS posts;\n\nCREATE TABLE posts (\n    id CHAR(36) PRIMARY KEY,\n    body VARCHAR (250) NOT NULL,\n    created_at DATETIME NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n        SQL);\n    }\n}\n\n```", "```php\ninterface PostRepository \n{  \n    // ... \n    public function size(); \n}\n\n```", "```php\nclass DoctrinePostRepository implements PostRepository\n{\n    // ...\n\n    public function size()\n    {\n        return $this->em->createQueryBuilder()\n            ->select('count(p.id)')\n            ->from('Domain\\Model\\Post', 'p')\n            ->getQuery()\n            ->getSingleScalarResult();\n    }\n} \n\n```", "```php\ninterface PostSpecification\n{\n    /**\n     * @return boolean\n     */\n    public function specifies(Post $aPost);\n}\n\n```", "```php\ninterface PostRepository\n{\n    // ...\n    public function query($specification);\n}\n\n```", "```php\nnamespace Infrastructure\\Persistence\\InMemory;\n\nuse Domain\\Model\\Post;\n\ninterface InMemoryPostSpecification\n{\n    /**\n     * @return boolean\n     */\n     public function specifies(Post $aPost);\n}\n\n```", "```php\nnamespace Infrastructure\\Persistence\\InMemory;\nuse Domain\\Model\\Post;\n\nclass InMemoryLatestPostSpecification\n    implements InMemoryPostSpecification\n{\n    private $since;\n\n    public function __construct(\\DateTimeImmutable $since)\n    {\n       $this->since = $since;\n    }\n\n    public function specifies(Post $aPost)\n    {\n      return $aPost->createdAt() > $this->since;\n    }\n}\n\n```", "```php\nclass InMemoryPostRepository implements PostRepository\n{\n    // ...\n\n    /**\n     * @param InMemoryPostSpecification $specification\n     *\n     * @return Post[]\n     */\n    public function query($specification)\n    {\n        return $this->filterPosts(\n            function (Post $post) use($specification) {\n                return $specification->specifies($post);\n            }\n        );\n    }\n}\n\n```", "```php\n$latestPosts = $postRepository->query(\n    new InMemoryLatestPostSpecification(new \\DateTimeImmutable('-24'))\n);\n\n```", "```php\nnamespace Infrastructure\\Persistence\\Sql;\n\ninterface SqlPostSpecification\n{\n    /**\n     * @return string\n     */\n    public function toSqlClauses();\n}\n\n```", "```php\nnamespace Infrastructure\\Persistence\\Sql;\n\nclass SqlLatestPostSpecification implements SqlPostSpecification\n{\n    private $since;\n\n    public function __construct(\\DateTimeImmutable $since)\n    {\n        $this->since = $since;\n    }\n\n    public function toSqlClauses()\n    {\n        return \"created_at >'\" .\n            $this->since->format('Y-m-d H:i:s') .\n            \"'\";\n    }\n}\n\n```", "```php\nclass SqlPostRepository implements PostRepository\n{\n    // ...\n\n    /**\n     * @param SqlPostSpecification $specification\n     *\n     * @return Post[]\n     */\n    public function query($specification)\n    {\n        return $this->retrieveAll(\n            'SELECT * FROM posts WHERE ' .\n                $specification->toSqlClauses()\n        );\n    }\n\n    private function retrieveAll($sql, array $parameters = [])\n    {\n        $st = $this->pdo->prepare($sql);\n\n        $st->execute($parameters);\n\n        return array_map(function ($row) {\n            return $this->buildPost($row);\n        }, $st->fetchAll(\\PDO::FETCH_ASSOC));\n    }\n}\n\n```", "```php\nuse Doctrine\\ORM\\EntityManager;\n\nclass SomeApplicationServiceFacade\n{\n    private $em;\n\n    public function __construct(EntityManager $em)\n    {\n        $this->em = $em;\n    }\n\n    public function doSomeUseCaseTask()\n    {\n        try {\n            $this->em->getConnection()->beginTransaction();\n            // Use domain model\n\n            $this->em->getConnection()->commit();\n        } catch (Exception $e) {\n             $this->em->getConnection()->rollback();\n             throw $e;\n        }\n    }\n} \n\n```", "```php\ninterface ApplicationService\n{\n   /**\n    * @param $request\n    * @return mixed\n    */\n    public function execute(BaseRequest $request);\n}\n\nclass SomeApplicationService implements ApplicationService\n{\n    public function execute(BaseRequest $request)\n    {\n       // do something\n    }\n}\n\n```", "```php\ninterface TransactionalSession\n{\n    /**\n     * @param callable $operation\n     * @return mixed\n     */\n    public function executeAtomically(callable $operation);\n}\n\n```", "```php\nclass TransactionalApplicationService implements ApplicationService\n{\n    private $session;\n    private $service;\n\n    public function __construct(\n        ApplicationService $service,\n        TransactionalSession $session\n    ) {\n        $this->session = $session;\n        $this->service = $service;\n    }\n\n    public function execute(BaseRequest $request)\n    {\n        $operation = function() use($request) {\n            return $this->service->execute($request);\n        };\n\n        return $this->session->executeAtomically(\n            $operation->bindTo($this)\n        );\n    }\n}\n\n```", "```php\nclass DoctrineSession implements TransactionalSession\n{\n    private $entityManager;\n\n    public function __construct(EntityManager $entityManager)\n    {\n        $this->entityManager = $entityManager;\n    }\n\n    public function executeAtomically(callable $operation)\n    {\n        return $this->entityManager->transactional($operation);\n    }\n}\n\n```", "```php\n$useCase = new TransactionalApplicationService(\n    new SomeApplicationService(\n        // ...\n    ),\n    new DoctrineSession(\n       // ...\n    )\n);\n\n$response = $useCase->execute();\n\n```", "```php\nuse Doctrine\\DBAL\\Types\\Type;\nuse Doctrine\\ORM\\EntityManager;\nuse Doctrine\\ORM\\Tools;\nuse Domain\\Model\\Post;\n\nclass DoctrinePostRepositoryTest extends \\PHPUnit_Framework_TestCase\n{\n    private $postRepository;\n\n    public function setUp()\n    {\n        $this->postRepository = $this->createPostRepository();\n    }\n\n    private function createPostRepository()\n    {\n        $this->addCustomTypes();\n        $em = $this->initEntityManager();\n        $this->initSchema($em);\n\n        return new PrecociousDoctrinePostRepository($em);\n    }\n\n    private function addCustomTypes()\n    {\n        if (!Type::hasType('post_id')) {\n            Type::addType(\n                'post_id',\n                'Infrastructure\\Persistence\\Doctrine\\Types\\PostIdType'\n            );\n        }\n\n        if (!Type::hasType('body')) {\n            Type::addType(\n                'body',\n                'Infrastructure\\Persistence\\Doctrine\\Types\\BodyType'\n            );\n        }\n    }\n\n    protected function initEntityManager()\n    {\n        return EntityManager::create(\n            ['url' => 'sqlite:///:memory:'],\n            Tools\\Setup::createXMLMetadataConfiguration(\n                ['/Path/To/Infrastructure/Persistence/Doctrine/Mapping'],\n                $devMode = true\n            )\n        );\n    }\n\n    private function initSchema(EntityManager $em)\n    {\n        $tool = new Tools\\SchemaTool($em);\n        $tool->createSchema([\n            $em->getClassMetadata('Domain\\Model\\Post')\n        ]);\n    }\n\n    // ...\n}\n\nclass PrecociousDoctrinePostRepository extends DoctrinePostRepository\n{\n    public function persist(Post $aPost)\n    {\n        parent::persist($aPost);\n\n        $this->em->flush();\n    }\n\n    public function remove(Post $aPost)\n    {\n        parent::remove($aPost);\n\n        $this->em->flush();\n    }\n}\n\n```", "```php\nclass DoctrinePostRepositoryTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @test\n     */\n    public function itShouldRemovePost()\n    {\n        $post = $this->persistPost('irrelevant body');\n\n        $this->postRepository->remove($post);\n\n        $this->assertPostExist($post->id());\n    }\n\n    private function assertPostExist($id)\n    {\n        $result = $this->postRepository->postOfId($id);\n        $this->assertNull($result);\n    }\n\n    private function persistPost(\n        $body,\n        \\DateTimeImmutable $createdAt = null\n    ) {\n        $this->postRepository->add(\n            $post = new Post(\n                $this->postRepository->nextIdentity(),\n                new Body($body),\n                $createdAt\n            )\n        );\n\n        return $post;\n    }\n}\n\n```", "```php\nclass DoctrinePostRepositoryTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @test\n     */\n    public function itShouldFetchLatestPosts()\n    {\n        $this->persistPost(\n            'a year ago', new \\DateTimeImmutable('-1 year')\n        );\n        $this->persistPost(\n            'a month ago', new \\DateTimeImmutable('-1 month')\n        );\n        $this->persistPost(\n            'few hours ago', new \\DateTimeImmutable('-3 hours')\n        );\n        $this->persistPost(\n            'few minutes ago', new \\DateTimeImmutable('-2 minutes')\n        );\n\n        $posts = $this->postRepository->latestPosts(\n            new \\DateTimeImmutable('-24 hours')\n        );\n\n        $this->assertCount(2, $posts);\n        $this->assertEquals(\n            'few hours ago', $posts[0]->body()->content()\n        );\n        $this->assertEquals(\n            'few minutes ago', $posts[1]->body()->content()\n        );\n    }\n}\n\n```", "```php\nclass MyServiceTest extends \\PHPUnit_Framework_TestCase\n{\n    private $service;\n\n    public function setUp()\n    {\n        $this->service = new MyService(\n            new InMemoryPostRepository()\n        );\n    }\n}\n\n```"]