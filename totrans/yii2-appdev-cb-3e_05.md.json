["```php\n    'user' => [\n        'identityClass' => 'app\\models\\User',\n        'enableAutoLogin' => true,\n    ],\n    ```", "```php\n    ./yii migrate/create create_user_table\n\n    ```", "```php\n    <?php\n\n    use yii\\db\\Schema;\n    use yii\\db\\Migration;\n\n    class m150626_112049_create_user_table extends Migration\n    {\n      public function up()\n      {\n          $tableOptions = null;\n          if ($this->db->driverName === 'mysql') {\n              $tableOptions = 'CHARACTER SET utf8 COLLATE utf8_general_ci ENGINE=InnoDB';\n          }\n\n          $this->createTable('{{%user}}', [\n              'id' => Schema::TYPE_PK,\n              'username' => Schema::TYPE_STRING . ' NOT NULL',\n              'auth_key' => Schema::TYPE_STRING . '(32) NOT NULL',\n              'password_hash' => Schema::TYPE_STRING . ' NOT NULL',\n              'password_reset_token' => Schema::TYPE_STRING,\n          ], $tableOptions);\n      }\n\n      public function down()\n      {\n          $this->dropTable('{{%user}}');\n      }\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\models;\n    use yii\\db\\ActiveRecord;\n    use yii\\web\\IdentityInterface;\n    use yii\\base\\NotSupportedException;\n    use Yii;\n\n    class User extends ActiveRecord implements IdentityInterface\n    {\n      /**\n       * @inheritdoc\n       */\n      public function rules()\n      {\n          return [\n\n              ['username', 'required'],\n              ['username', 'unique'],\n              ['username', 'string', 'min' => 3],\n              ['username', 'match', 'pattern' => '~^[A-Za-z][A-Za-z0-9]+$~', 'message' => 'Username can contain only alphanumeric characters.'],\n\n              [['username', 'password_hash', 'password_reset_token'],\n                  'string', 'max' => 255\n              ],\n              ['auth_key', 'string', 'max' => 32],\n          ];\n      }\n\n      /**\n       * @inheritdoc\n       */\n      public static function findIdentity($id)\n      {\n          return static::findOne($id);\n      }\n\n      public static function findIdentityByAccessToken($token, $type = null)\n      {\n          throw new NotSupportedException('\"findIdentityByAccessToken\" is not implemented.');\n      }\n\n      /**\n       * Finds user by username\n       *\n       * @param  string      $username\n       * @return User\n       */\n      public static function findByUsername($username)\n      {\n          return static::findOne(['username' => $username]);\n      }\n      /**\n       * @inheritdoc\n       */\n      public function getId()\n      {\n          return $this->getPrimaryKey();\n      }\n\n      /**\n       * @inheritdoc\n       */\n      public function getAuthKey()\n      {\n          return $this->auth_key;\n      }\n\n      /**\n       * @inheritdoc\n       */\n      public function validateAuthKey($authKey)\n      {\n          return $this->getAuthKey() === $authKey;\n      }\n\n      /**\n       * Validates password\n       *\n       * @param  string  $password password to validate\n       * @return boolean if password provided is valid for current user\n       */\n      public function validatePassword($password)\n      {\n          return Yii::$app->getSecurity()->validatePassword($password, $this->password_hash);\n      }\n\n      /**\n       * Generates password hash from password and sets it to the model\n       *\n       * @param string $password\n       */\n      public function setPassword($password)\n      {\n          $this->password_hash = Yii::$app->getSecurity()->generatePasswordHash($password);\n      }\n\n      /**\n       * Generates \"remember me\" authentication key\n       */\n      public function generateAuthKey()\n      {\n          $this->auth_key = Yii::$app->getSecurity()->generateRandomString();\n      }\n\n      /**\n       * Generates new password reset token\n       */\n      public function generatePasswordResetToken()\n      {\n          $this->password_reset_token = Yii::$app->getSecurity()->generateRandomString() . '_' . time();\n      }\n\n      /**\n       * Finds user by password reset token\n       *\n       * @param  string      $token password reset token\n       * @return static|null\n       */\n\n      public static function findByPasswordResetToken($token)\n      {\n          $expire = Yii::$app->params['user.passwordResetTokenExpire'];\n          $parts = explode('_', $token);\n          $timestamp = (int) end($parts);\n          if ($timestamp + $expire < time()) {\n              return null;\n          }\n          return static::findOne([\n              'password_reset_token' => $token\n          ]);\n      }\n    }\n    ```", "```php\n    ./yii migrate/create create_test_user\n\n    ```", "```php\n    <?php\n\n    use yii\\db\\Migration;\n    use app\\models\\User;\n\n    class m150626_120355_create_test_user extends Migration\n    {\n      public function up()\n      {\n          $testUser = new User();\n          $testUser->username = 'admin';\n          $testUser->setPassword('admin');\n          $testUser->generateAuthKey();\n          $testUser->save();\n\n      }\n\n      public function down()\n      {\n          User::findByUsername('turbulence')->delete();\n          return false;\n      }\n    }\n    ```", "```php\n    ./yii migrate up\n\n    ```", "```php\n    <?php\n\n    namespace app\\components;\n\n    use app\\models\\User;\n    class AccessRule extends \\yii\\filters\\AccessRule {\n\n      /**\n       * @inheritdoc\n       */\n      protected function matchRole($user)\n      {\n          if (empty($this->roles)) {\n              return true;\n          }\n          $isGuest = $user->getIsGuest();\n          foreach ($this->roles as $role) {\n              switch($role) {\n                  case '?':\n                      return ($isGuest) ? true : false;\n                  case User::ROLE_USER:\n                      return (!$isGuest) ? true : false;\n                  case $user->identity->role: // Check if the user is logged in, and the roles match\n\n                      return (!$isGuest) ? true : false;\n                  default:\n                      return false;\n              }\n          }\n          return false;\n      }\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n    use app\\models\\User;\n    use Yii;\n    use yii\\filters\\AccessControl;\n    use app\\components\\AccessRule;\n    use yii\\web\\Controller;\n\n    class AccessController extends Controller\n    {\n      public function behaviors()\n      {\n          return [\n              'access' => [\n                  'class' => AccessControl::className(),\n                  // We will override the default rule config with the new AccessRule class\n                  'ruleConfig' => [\n                      'class' => AccessRule::className(),\n                  ],\n                  'rules' => [\n                      [\n                          'allow' => true,\n                          'actions' => ['auth-only'],\n                          'roles' => [User::ROLE_USER]\n                      ],\n                      [\n                          'allow' => true,\n                          'actions' => ['ip'],\n                          'ips' => ['127.0.0.1'],\n                      ],\n                      [\n                          'allow' => true,\n                          'actions' => ['user'],\n                          'roles' => [ User::ROLE_ADMIN],\n                      ],\n                      [\n                          'allow' => false,\n                      ]\n                  ],\n              ]\n          ];\n      }\n\n      public function actionAuthOnly()\n      {\n          echo \"Looks like you are authorized to run me.\";\n      }\n      public function actionIp()\n      {\n          echo \"Your IP is in our list. Lucky you!\";\n      }\n      public function actionUser()\n      {\n          echo \"You're the right man. Welcome!\";\n      }\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\models;\n\n    class User extends \\yii\\base\\Object implements \\yii\\web\\IdentityInterface\n    {\n     // add roles contstants \n      CONST ROLE_USER  = 200;\n      CONST ROLE_ADMIN  = 100; \n\n      public $id;\n      public $username;\n      public $password;\n      public $authKey;\n      public $accessToken;\n      public $role;\n\n      private static $users = [\n          '100' => [\n              'id' => '100',\n              'username' => 'admin',\n              'password' => 'admin',\n              'authKey' => 'test100key',\n              'accessToken' => '100-token',\n              'role' => USER::ROLE_ADMIN // add admin role for admin user\n          ],\n          '101' => [\n              'id' => '101',\n              'username' => 'demo',\n              'password' => 'demo',\n              'authKey' => 'test101key',\n              'accessToken' => '101-token',\n              'role' => USER::ROLE_USER // add user role for admin user\n          ],\n      ];\n    â€¦\n    }\n    ```", "```php\n    public function behaviors()\n    {\n      return [\n          'access' => [\n              'class' => AccessControl::className(),\n              'rules' => [\n                  [\n                      'allow' => true,\n                      'actions' => ['auth-only'],\n                      'roles' => ['@'],\n                  ],\n                  [\n                      'allow' => true,\n                      'actions' => ['ip'],\n                      'ips' => ['127.0.0.1'],\n                  ],\n                  [\n                      'allow' => true,\n                      'actions' => ['user'],\n                        'roles' => ['admin'],\n                  ],\n                  [\n                    'allow' => true,\n                    'actions' => ['user'],\n                    'matchCallback' => function ($rule, $action) {\n                      return preg_match('/MSIE 9/',$_SERVER['HTTP_USER_AGENT']) !== false;\n                    }\n                  ],\n\n                  ['allow' => false]\n              ],\n          ]\n      ];\n    }\n    ```", "```php\n[\n  'allow' => true,\n  'actions' => ['auth-only'],\n  'roles' => [User::ROLE_USER]\n],\n```", "```php\n              [\n                  'allow' => true,\n                  'actions' => ['ip'],\n                  'ips' => ['127.0.0.1'],\n              ],\n```", "```php\n[\n  'allow' => true,\n  'actions' => ['user'],\n  'roles' => [ User::ROLE_ADMIN],\n],\n```", "```php\n[\n  'allow' => true,\n  'actions' => ['user'],\n  'matchCallback' => function ($rule, $action) {\n      return preg_match('/MSIE 9/',$_SERVER['HTTP_USER_AGENT'])!== false;\n  }\n],\n```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use Yii;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n\n    /**\n    * Class SiteController.\n    * @package app\\controllers\n    */\n    class XssController extends Controller\n    {\n       /**\n        * @return string\n        */\n       public function actionIndex()\n       {\n           $username = Yii::$app->request->get('username', 'nobody');\n\n           return $this->renderContent(Html::tag('h1',\n               'Hello, ' . $username . '!'\n           ));\n       }\n    }\n    ```", "```php\n    /xss/simple?username=<script>alert('XSS');</script>\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use Yii;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n\n    /**\n    * Class SiteController.\n    * @package app\\controllers\n    */\n    class XssController extends Controller\n    {\n       /**\n        * @return string\n        */\n       public function actionIndex()\n       {\n           $username = Yii::$app->request->get('username', 'nobody');\n\n           return $this->renderContent(Html::tag('h1',\n               Html::encode('Hello, ' . $username . '!')\n           ));\n       }\n    }\n    ```", "```php\n    use \\yii\\helpers\\Html;\n\n    echo Html::a(Html::encode($_GET['username']), array());\n    ```", "```php\n<?php\n\nnamespace app\\controllers;\n\nuse Yii;\nuse yii\\helpers\\Html;\nuse yii\\helpers\\HtmlPurifier;\nuse yii\\web\\Controller;\n\n/**\n* Class SiteController.\n* @package app\\controllers\n*/\nclass XssController extends Controller\n{\n   /**\n    * @return string\n    */\n   public function actionIndex()\n   {\n       $username = Yii::$app->request->get('username', 'nobody');\n\n       $content = Html::tag('h1', 'Hello, ' . $username . '!');\n\n       return $this->renderContent(\n           HtmlPurifier::process($content)\n       );\n   }\n}\n```", "```php\n    public static function encode($content, $doubleEncode = true)\n    {\n       return htmlspecialchars($content, ENT_QUOTES | ENT_SUBSTITUTE, Yii::$app ? Yii::$app->charset : 'UTF-8', $doubleEncode);\n    }\n    ```", "```php\n    DROP TABLE IF EXISTS `user`;\n    CREATE TABLE `user` (\n       `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n       `username` varchar(100) NOT NULL,\n       `password` varchar(32) NOT NULL,\n       PRIMARY KEY (`id`)\n    );\n\n    INSERT INTO `user`(`id`,`username`,`password`) VALUES ( '1','Alex','202cb962ac59075b964b07152d234b70');\n\n    INSERT INTO `user`(`id`,`username`,`password`) VALUES ( '2','Qiang','202cb962ac59075b964b07152d234b70');\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\User;\n    use Yii;\n    use yii\\base\\Controller;\n    use yii\\base\\Exception;\n    use yii\\helpers\\ArrayHelper;\n    use yii\\helpers\\Html;\n\n    /**\n    * Class SqlController.\n    * @package app\\controllers\n    */\n    class SqlController extends Controller\n    {\n       protected function renderContentByResult($result)\n       {\n           if ($result) {\n               $content = \"Success\";\n           } else {\n               $content = \"Failure\";\n           }\n\n           return $this->renderContent($content);\n       }\n\n       public function actionSimple()\n       {\n           $userName = Yii::$app->request->get('username');\n           $password = Yii::$app->request->get('password');\n\n           $passwordHash = md5($password);\n\n           $sql = \"SELECT * FROM `user`\"\n                  .\" WHERE `username` = '\".$userName.\"'\"\n                  .\" AND password = '\".$passwordHash.\"' LIMIT |1\";\n\n           $result = Yii::$app->db->createCommand($sql)->queryOne();\n\n           return $this->renderContentByResult($result);\n       }\n\n    }\n    ```", "```php\n    ' or '1'='1'; --\n    ```", "```php\n    SELECT * FROM user WHERE username = '' or '1'='1'; --' AND password = '008c5926ca861023c1d2a36653fd88e2' LIMIT 1;\n\n    ```", "```php\n    public function actionPrepared()\n    {\n       $userName = Yii::$app->request->get('username');\n       $password = Yii::$app->request->get('password');\n\n       $passwordHash = md5($password);\n\n       $sql = \"SELECT * FROM `user`\"\n              .\" WHERE `username` = :username\"\n              .\" AND password = :password LIMIT 1\";\n\n       $command = Yii::$app->db->createCommand($sql);\n       $command->bindValue(':username', $userName);\n       $command->bindValue(':password', $passwordHash);\n       $result = $command->queryOne();\n\n       return $this->renderContentByResult($result);\n    }\n    ```", "```php\n    public function actionAr()\n    {\n       $userName = Yii::$app->request->get('username');\n       $password = Yii::$app->request->get('password');\n\n       $passwordHash = md5($password);\n\n       $result = User::findOne([\n           'username' => $userName,\n           'password' => $passwordHash\n       ]);\n\n       return $this->renderContentByResult($result);\n    }\n    ```", "```php\n    public function actionWrongAr()\n    {\n       $userName = Yii::$app->request->get('username');\n       $password = Yii::$app->request->get('password');\n\n       $passwordHash = md5($password);\n\n       $condition = \"`username` = '\".$userName.\" AND `password` = '\".$passwordHash.\"'\";\n\n       $result = User::find()->where($condition)->one();\n\n       return $this->renderContentByResult($result);\n    }\n    ```", "```php\n    public function actionIn()\n    {\n       $names  = ['Alex', 'Qiang'];\n       $users = User::find()->where(['username' => $names])->all();\n\n       return $this->renderContent(Html::ul(\n           ArrayHelper::getColumn($users, 'username')\n       ));\n    }\n    ```", "```php\n    public function actionColumn()\n    {\n       $attr = Yii::$app->request->get('attr');\n       $value = Yii::$app->request->get('value');\n\n       $users = User::find()->where([$attr => $value])->all();\n\n       return $this->renderContent(Html::ul(\n           ArrayHelper::getColumn($users, 'username')\n       ));\n    }\n    ```", "```php\n    public function actionWhiteList()\n    {\n       $attr = Yii::$app->request->get('attr');\n       $value = Yii::$app->request->get('value');\n\n       $allowedAttr = ['username', 'id'];\n\n       if (!in_array($attr, $allowedAttr)) {\n           throw new Exception(\"Attribute specified is not allowed.\");\n       }\n\n       $users = User::find()->where([$attr => $value])->all();\n\n       return $this->renderContent(Html::ul(\n           ArrayHelper::getColumn($users, 'username')\n       ));\n    }\n    ```", "```php\npublic function actionBind()\n{\n   $userName = 'Alex';\n   $passwordHash = md5('password1');\n\n   $sql = \"INSERT INTO `user` (`username`, `password`) VALUES (:username, :password);\";\n\n   // insert first user\n   $command = Yii::$app->db->createCommand($sql);\n   $command->bindParam('username', $userName);\n   $command->bindParam('password', $passwordHash);\n   $command->execute();\n\n   // insert second user\n   $userName = 'Qiang';\n   $passwordHash = md5('password2');\n   $command->execute();\n\n   return $this->renderContent(Html::ul(\n       ArrayHelper::getColumn(User::find()->all(), 'username')\n   ));\n}\n```", "```php\n    'components' => [\n        ..\n       request => [\n            ..\n           'enableCsrfValidation => true,\n            ..\n       ],\n        ..\n    ],\n    ```", "```php\n    <?php $form = ActiveForm::begin(['id' => 'login-form']); ?>\n         <input type='text' name='name'\n         .........\n    <?php ActiveForm::end(); ?>\n    ```", "```php\n    <form action='#' method='POST'>\n      <input type=\"hidden\" name=\"<?= Yii::$app->request->csrfParam ?>\" value=\"<?=Yii::$app->request->getCsrfToken()?>\" />\n      ....\n    </form>\n    ```", "```php\n          <form action=\"/csrf/create\" method=\"post\">\n          <div style=\"display:none\"><input type=\"hidden\" value=\"e4d1021e79ac\n          269e8d6289043a7a8bc154d7115a\" name=\"YII_CSRF_TOKEN\" />\n    ```", "```php\nif ($request->enableCsrfValidation && !strcasecmp($method, 'post')) {\n  $hiddenInputs[] = static::hiddenInput($request->csrfParam, $request->getCsrfToken());\n}\n\nif (!empty($hiddenInputs)) {\n  $form .= \"\\n\" . implode(\"\\n\", $hiddenInputs);\n}\n```", "```php\n    public function beforeAction($action) { \n        $this->enableCsrfValidation = false; \n        return parent::beforeAction($action);\n    }\n    ```", "```php\npublic function beforeAction($action) { \n    $this->enableCsrfValidation =  ($action->id !== \"actionId\"); \n    return parent::beforeAction($action);\n}\n```", "```php\n<head>\n  .......\n  <?= Html::csrfMetaTags() ?>\n</head>\n\nNow you will be able to simply add it to ajax-call\nvar csrfToken = $('meta[name=\"csrf-token\"]').attr(\"content\");\n$.ajax({\n        url: 'request'\n        type: 'post',\n        dataType: 'json',\n        data: {param1: param1, _csrf : csrfToken},\n});\n```", "```php\n'components' => [\n    ..\n   'user' => [\n        ..\n       'enableAutoLogin' => false,\n        ..\n   ],\n    ..\n],\n```", "```php\n'components' => [\n    ..\n   'session' => [\n        ..\n       'timeout' => 200,\n        ..\n   ],\n    ..\n],\n```", "```php\n    return [\n       // ...\n       'components' => [\n           'authManager' => [\n               'class' => 'yii\\rbac\\DbManager',\n           ],\n           // ...\n       ],\n    ];\n    ```", "```php\n    yii migrate --migrationPath=@yii/rbac/migrations\n    ```", "```php\n    <?php\n\n    namespace app\\rbac;\n\n    use yii\\rbac\\Rule;\n\n    /**\n    * Class AuthorRule.\n    * @package app\\rbac\n    */\n    class AuthorRule extends Rule\n    {\n       public $name = 'isAuthor';\n\n       /**\n        * @param int|string $user\n        * @param \\yii\\rbac\\Item $item\n        * @param array $params\n        *\n        * @return bool\n        */\n       public function execute($user, $item, $params)\n       {\n           return isset($params['post']) ? $params['post']->createdBy == $user : false;\n       }\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\commands;\n\n    use app\\models\\User;\n    use Yii;\n    use yii\\console\\Controller;\n\n    /**\n    * Class RbacController.\n    * @package app\\commands\n    */\n    class RbacController extends Controller\n    {\n       public function actionInit()\n       {\n           $auth = Yii::$app->authManager;\n\n           $createPost = $auth->createPermission('createPost');\n           $createPost->description = 'Create a post';\n\n           $updatePost = $auth->createPermission('updatePost');\n           $updatePost->description = 'Update a post';\n\n           $updatePost = $auth->createPermission('updatePost');\n           $updatePost->description = 'Update a post';\n\n           $deletePost = $auth->createPermission('deletePost');\n           $deletePost->description = 'Delete a post';\n\n           $readPost = $auth->createPermission('readPost');\n           $readPost->description = 'Read a post';\n\n           $authorRule = new \\app\\rbac\\AuthorRule();\n\n           // add permissions\n           $auth->add($createPost);\n           $auth->add($updatePost);\n           $auth->add($deletePost);\n           $auth->add($readPost);\n           $auth->add($authorRule);\n\n           // add the \"updateOwnPost\" permission and associate the rule with it.\n           $updateOwnPost = $auth->createPermission('updateOwnPost');\n           $updateOwnPost->description = 'Update own post';\n           $updateOwnPost->ruleName = $authorRule->name;\n\n           $auth->add($updateOwnPost);\n           $auth->addChild($updateOwnPost, $updatePost);\n\n           // create Author role\n           $author = $auth->createRole('author');\n           $auth->add($author);\n           $auth->addChild($author, $createPost);\n           $auth->addChild($author, $updateOwnPost);\n           $auth->addChild($author, $readPost);\n\n           // create Admin role\n           $admin = $auth->createRole('admin');\n           $auth->add($admin);\n           $auth->addChild($admin, $updatePost);\n           $auth->addChild($admin, $deletePost);\n           $auth->addChild($admin, $author);\n\n           // assign roles\n           $auth->assign($admin, User::findByUsername('admin')->id);\n           $auth->assign($author, User::findByUsername('demo')->id);\n\n           echo \"Done!\\n\";\n       }\n    }\n    ```", "```php\n    yii rbac/init\n\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\User;\n    use stdClass;\n    use Yii;\n    use yii\\filters\\AccessControl;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n\n    /**\n    * Class RbacController.\n    */\n    class RbacController extends Controller\n    {\n       public function behaviors()\n       {\n           return [\n               'access' => [\n                   'class' => AccessControl::className(),\n                   'rules' => [\n                       [\n                           'allow' => true,\n                           'actions' => ['delete'],\n                           'roles' => ['deletePost'],\n                       ],\n                       [\n                           'allow' => true,\n                           'actions' => ['test'],\n                       ],\n                   ],\n               ],\n           ];\n       }\n\n       public function actionDelete()\n       {\n           return $this->renderContent(\n               Html::tag('h1', 'Post deleted.')\n           );\n       }\n\n       /**\n        * @param $description\n        * @param $rule\n        * @param array $params\n        *\n        * @return string\n        */\n       protected function renderAccess($description, $rule, $params = [])\n       {\n           $access = Yii::$app->user->can($rule, $params);\n\n           return $description.': '.($access ? 'yes' : 'no');\n       }\n\n       public function actionTest()\n       {\n           $post = new stdClass();\n           $post->createdBy = User::findByUsername('demo')->id;\n\n           return $this->renderContent(\n               Html::tag('h1', 'Current permissions').\n               Html::ul([\n                   $this->renderAccess('Use can create post', 'createPost'),\n                   $this->renderAccess('Use can read post', 'readPost'),\n                   $this->renderAccess('Use can update post', 'updatePost'),\n                   $this->renderAccess('Use can own update post', 'updateOwnPost', [\n                       'post' => $post,\n                   ]),\n                   $this->renderAccess('Use can delete post', 'deletePost'),\n               ])\n           );\n       }\n    }\n    ```", "```php\n[\n   'allow' => true,\n   'actions' => ['delete'],\n   'roles' => ['deletePost'],\n],\n```", "```php\nYii::$app->user->can('updatePost', ['post' => $post]);\n```", "```php\n  [group_][own_]entity_action\n```", "```php\n    DROP TABLE IF EXISTS `order`;\n    CREATE TABLE IF NOT EXISTS `order` (\n    `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n    `client` VARCHAR(255) NOT NULL,\n    `total` FLOAT NOT NULL,\n    `encrypted_field` BLOB NOT NULL,\n    PRIMARY KEY (`id`)\n    );\n    ```", "```php\n    <?php\n\n    return [\n        'adminEmail' => 'admin@example.com',\n        'key' => 'mysecretkey'\n    ];\n    ```", "```php\n    public $encrypted_field_temp;\n\n    public function behaviors()\n    {\n       return [\n           [\n               'class' => AttributeBehavior::className(),\n               'attributes' => [\n                   ActiveRecord::EVENT_BEFORE_INSERT => 'encrypted_field',\n                   ActiveRecord::EVENT_BEFORE_UPDATE => 'encrypted_field',\n               ],\n               'value' => function ($event) {\n                   $event->sender->encrypted_field_temp = $event->sender->encrypted_field;\n                   return Yii::$app->security->encryptByKey(\n                       $event->sender->encrypted_field,\n                       Yii::$app->params['key']\n                   );\n               },\n           ],\n           [\n               'class' => AttributeBehavior::className(),\n               'attributes' => [\n                   ActiveRecord::EVENT_AFTER_INSERT => 'encrypted_field',\n                   ActiveRecord::EVENT_AFTER_UPDATE => 'encrypted_field',\n               ],\n               'value' => function ($event) {\n                   return $event->sender->encrypted_field_temp;\n               },\n           ],\n           [\n               'class' => AttributeBehavior::className(),\n               'attributes' => [\n                   ActiveRecord::EVENT_AFTER_FIND => 'encrypted_field',\n               ],\n               'value' => function ($event) {\n                   return Yii::$app->security->decryptByKey(\n                       $event->sender->encrypted_field,\n                       Yii::$app->params['key']\n                   );\n               },\n           ],\n       ];\n    }\n    ```", "```php\n    <?php\n\n    namespace app\\controllers;\n\n    use app\\models\\Order;\n    use Yii;\n    use yii\\db\\Query;\n    use yii\\helpers\\ArrayHelper;\n    use yii\\helpers\\Html;\n    use yii\\helpers\\VarDumper;\n    use yii\\web\\Controller;\n\n    /**\n    * Class CryptoController.\n    * @package app\\controllers\n    */\n    class CryptoController extends Controller\n    {\n       public function actionTest()\n       {\n           $newOrder = new Order();\n           $newOrder->client = \"Alex\";\n           $newOrder->total = 100;\n           $newOrder->encrypted_field = 'very-secret-info';\n           $newOrder->save();\n\n           $findOrder = Order::findOne($newOrder->id);\n\n           return $this->renderContent(Html::ul([\n               'New model: ' . VarDumper::dumpAsString($newOrder->attributes),\n               'Find model: ' . VarDumper::dumpAsString($findOrder->attributes)\n           ]));\n\n       }\n\n       public function actionRaw()\n       {\n           $row = (new Query())->from('order')\n               ->where(['client' => 'Alex'])\n               ->one();\n\n           return $this->renderContent(Html::ul(\n               $row\n           ));\n       }\n    }\n    ```", "```php\nif (Yii::$app->getSecurity()->validatePassword($password, $hash)) {\n // all good, logging user in\n} else {\n // wrong password\n}\n```"]