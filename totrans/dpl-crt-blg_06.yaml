- en: Chapter 6. Basic Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everything we have dealt with so far, as important as it may be in terms of
    creating our own unique site, must take a back seat when it comes to the topic
    of content and content management in Drupal. After all, content *is* what this
    is all about! With the explosion in the number of sites offering dynamic content,
    it is now an absolute necessity to provide meaningful, dynamic, and relevant information
    on your site in order to prosper. How this is done behind the scenes is really
    of no concern to a site's users, but if you can make their browsing experience
    hassle free and relevant to them, they will stick with you.
  prefs: []
  type: TYPE_NORMAL
- en: '*What does hassle free mean in this context?* Content needs to be easy to find,
    which in turn means it needs to be well organized. It needs to be well presented
    and easy to interact with—in other words, simple to use. Most of this is taken
    care of already by Drupal, and for very little additional effort, we can provide
    some very powerful functionality. However, before we look at adding more functionality,
    we should really ensure that we have a good grasp of how to use what is already
    in place.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To this end, this chapter will provide a good grounding in the basics of content
    management before it moves on to look at a few interesting and powerful features
    of Drupal. Specifically, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Content types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-related modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we are done here, it will be time to look at how to put together some neat
    pages using HTML and PHP, as well as the all important task of working out how
    to classify and categorize all your data to provide a sophisticated and intuitive
    content management system. All this is to come in the following chapter. For now,
    let's get on with familiarizing ourselves with Drupal and its content.
  prefs: []
  type: TYPE_NORMAL
- en: Content Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already been exposed to some of Drupal's content types' structure and
    usage. This is actually fairly useful because it means we can spend time focusing
    on more important issues in lieu of giving a broader overview of content and content
    management in Drupal. That's not to say that everything in this section, and the
    one that follows, has already been covered, though.
  prefs: []
  type: TYPE_NORMAL
- en: For a start, we need to have a good idea of the types of content that can be
    created in Drupal, and then we need to look at the various ways these content
    types can be put to use. Knowing this will help you determine the best way to
    go about implementing whatever functionality you have in mind for your site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the content types that ship with Drupal by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '| blog entry | A blog, or weblog, is an author-specific content type that is
    used as a journal or diary, among other things, by individuals. In Drupal, each
    blog writer can, depending on the site''s settings and their permissions, add
    attachments, HTML, or PHP code to their blog.A good example of a blog can be found
    at: [http://googleblog.blogspot.com/](http://googleblog.blogspot.com/), which
    demonstrates an interesting use of the blog content format. |'
  prefs: []
  type: TYPE_TB
- en: '| Book Page | A book is an organized set of book page types (actually any type
    can be used nowadays), which are intended to be used for collaborative authoring.
    Book pages may be added by different people in order to make up one single book,
    which can then be structured into chapters and pages, or in whatever structure
    is most appropriate, provided it is in a hierarchical structure.Because pretty
    much any data type can be added to a book, there is plenty of scope for exciting
    content (think of narrated or visual content complementing dynamic book pages,
    created with PHP and Flash animations, to create a truly unique Internet-based
    book—the possibilities are endless!).A good example of a book is the documentation
    provided for developers on the Drupal site, found at:[http://drupal.org/node/316](http://drupal.org/node/316).
    This has been built up over time by a number of different authors.You will notice
    that if you have the book module enabled, an additional outline tag is presented
    above all/most of the site''s posts. Clicking on this tab allows you to add that
    post to a book—in this way, books can be built up from content posted to the site.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Comments | Comments are slightly different in that they aren''t really nodes
    like the other types. In other words, you can''t create a comment in the way that
    you create any other content. Instead, you can tack comments on to other content
    types, and these are very popular as a means to stimulate discussion among users.You
    can see comments in action by logging in to the Drupal forums, [http://drupal.org/forum](http://drupal.org/forum)
    , and posting or viewing comments on the various topics there. |'
  prefs: []
  type: TYPE_TB
- en: '| **forum topic** | Forum topics are the building blocks of forums. Forums
    can only consist of forum topics and their comments, unlike books, which can consist
    of pretty much any content type. Information in forums is categorized in a hierarchical
    structure, and they are extremely useful for hosting discussions as well as community-based
    support and learning.Forums are abundant on the Internet and you can also visit
    the Drupal forums to get a feel for how they operate. |'
  prefs: []
  type: TYPE_TB
- en: '| **page** | The page type is meant to allow you to add basic, run-of-the-mill
    web pages that can be found on any site. *About us* or *Terms of use* pages are
    good candidates for the page type, although you can spruce these up with a bit
    of dynamic content and HTML.Just look on any website to see examples of such pages.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Content Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **poll** | The poll type provides the facility to ask questions, and supply
    a set of answers that are then presented in graph format. Many different enterprises
    make use of polls in order to collect political or marketing information, or to
    conduct research, among other things.Polls by nature generally have a limited
    life span; so you will have to search for your own examples. Many news sites such
    as Time magazine conduct polls to determine public opinion; so these may be your
    best bet for seeing how polls can be put to good use. |'
  prefs: []
  type: TYPE_TB
- en: '| **story** | A story page is more or less the same thing as a standard page
    type. However, you might want to distinguish the two by using story types for
    short-lived pages, such as news or notices. |'
  prefs: []
  type: TYPE_TB
- en: 'The following table looks at some of the content types that are available as
    contributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Content Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Acidfree | Albums and media item types provided with the Acidfree contribution
    allow you to work with image and video content. The contribution also provides
    facilities to manage your media files. |'
  prefs: []
  type: TYPE_TB
- en: '| Daily | The daily contribution provides two new node types, called daily
    item and daily container. These are used to facilitate browsing of content items
    by date, or even controlling when content items are made available on the site
    in the future. |'
  prefs: []
  type: TYPE_TB
- en: '| Flexinode | This contribution allows users to define and edit their own content
    types. |'
  prefs: []
  type: TYPE_TB
- en: '| Front Page | While not technically a node/content type, Front Page does allow
    users to create a front page, which does not have to conform to the standard page
    layout of the rest of the Drupal site. Useful if you would like to add an introductory
    page to your site. |'
  prefs: []
  type: TYPE_TB
- en: Every time you create new content for your site, there are several options available
    for you to make the appropriate decisions over, and these are displayed in the
    list that appears below the body of the post. Depending on the permissions of
    a given user, they will also have some, although hopefully not all, options available
    to them. For example, if upload permissions are enabled for authenticated users,
    then they will be able to decide whether to attach a file to any content they
    create.
  prefs: []
  type: TYPE_NORMAL
- en: As the administrator, your powers are more substantial; so let's go through
    the default options available when creating a standard page content type. Be aware
    that different types of content may also have additional options available for
    them. For example, if you create a new poll, you will have to decide how long
    the poll is to run for by setting the **Poll duration** in the poll type's unique
    **Settings** section.
  prefs: []
  type: TYPE_NORMAL
- en: The content options discussed in the following section are representative of
    most types.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing *what* is and is not available for use in terms of content doesn't necessarily
    mean that you automatically know *how* to work with the content. This section
    will therefore take a slightly more in-depth look at how to both edit and configure
    content to reflect the needs of the site. We have already worked with content
    in previous chapters, and so are familiar with bits and pieces of this section
    already. However, the intention here is to give you a single, cohesive point of
    reference from which to learn.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few different aspects to working with content, and we will begin
    by looking at how to set up the correct default options whenever you create something
    new. Following this, it is important to look at the content **administer** facility,
    and to round everything off, we will have brief discussion on issues to look out
    for in general since working with content can be quite confusing at times.
  prefs: []
  type: TYPE_NORMAL
- en: Content Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When creating new content, we have the **Input format** section presented as
    follows (if the **Input format** link is minimized, click on it to bring up the
    full version):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Options](img/1800_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, the **Filtered HTML** option is selected. Unless you have a good
    reason to use one of the other options available, stick to this. Especially be
    wary of allowing any user to add PHP to their content, as this could put your
    site at serious risk. Remember that even **Filtered HTML** is not entirely safe,
    as users could still add links to malicious web addresses to their pages, which
    amounts to the same thing as having it on your site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of how a user could gain information about your site (assuming
    the **PHP code** option is enabled) before making an attack. In the body text
    of a page, add the following snippet of code to your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure the **PHP code** option is enabled, and after supplying a **Title**
    for the page, click **Preview**. You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Options](img/1800_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While the server information in this screenshot may not be clear enough to
    read, it is certainly clear enough for someone viewing the page online to find
    out everything about your server. In this case, it is better to be safe than sorry,
    and you should leave the default option for this type of setting as **Filtered
    HTML.** All this goes to reiterate a point we discussed earlier when we looked
    at users and permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you only give trusted users just enough permissions to fulfill their
    roles—and no more!
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing, I should mention that in the following chapter we will discuss
    how to create custom input formats, because the default options might not always
    be suitable for the site's requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following on, Authoring information** has only two options. The first names
    the author of the content, and the second gives the date on which the content
    was first created. Naturally, modifying the content will not change the **Authored
    on** date. If, however, you were modifying a page that has already been created,
    then you would come across a logging option (this may also be available when the
    content is first created).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a typical log message might be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Options](img/1800_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are wondering why I have not bothered to add a date to this log message,
    it is because Drupal will make this clear when viewing revisions of the content
    automatically. Wait until we have discussed revisions before taking a look at
    the effect that log messages have on their content.
  prefs: []
  type: TYPE_NORMAL
- en: This log facility is quite simple, but should suffice for most people's needs.
    It is possible that a new, more sophisticated system of logging will be introduced
    for Drupal in the future, so keep an eye out for that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Publishing options** can be tricky to get right, depending on how things
    are set up. This is what they look like at the moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Options](img/1800_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you will see in the following section on *Administering Content,* it is possible
    to decide whether content of certain types coming from certain users needs to
    be moderated before it can be allowed on to the site for general consumption.
    If this is the case, you or a designated user will have the ability to go through
    a moderation queue in order to confirm that any and all the content meets the
    site's requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot, the content being added is being published directly
    without the need for moderation. Enabling the second option, **In moderation queue**,
    would force the content to be approved before publication. The third option has
    been selected, and this will cause the content being created to appear on the
    front page of the website when it is first published (unless you have set a specific
    node to be displayed here already).
  prefs: []
  type: TYPE_NORMAL
- en: It is unlikely that by default you would want, for example, new book pages to
    appear on the front page ahead of say blogs from industry experts; so enable this
    option only for the content types that should steal some of the limelight.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth option, **Sticky at top of lists**, causes the node to remain at
    the top of its list regardless of how many other postings there are. This is extremely
    useful for posting important messages to forums. For example, if there is some
    confusion about how to do something on a given forum, write a note explaining
    how things are done, and select this option to pin it to the top of the forum.
    In this way you ensure that it is the first thing everyone sees when they access
    that forum.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final option, **Create new revision**, causes Drupal to create a new version
    of the content if it is being updated or revised. This means that you maintain
    the old version of the content as well as making a new version. This is useful
    if you want to keep track of what changes are being made to your documents. If
    a new revision has been created and tracked, then the next time you look at the
    content (assuming you have sufficient permissions) you will notice a new **revisions**
    tab on the page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Options](img/1800_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using this **revisions** page, it is now possible to work with your content
    quite easily. For example, you can decide which revision should be the active
    one (displayed to others) by clicking on **revert**, or you can **delete** revisions
    altogether. Notice that the log message that was added to the content type is
    also displayed at the bottom of each revision. From this you can see that they
    are actually quite important for maintaining good version control in content that
    is often modified. In this case, the log message for the revised version of the
    book page content mentions a change in the title.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving along, the next section, **Comment settings,** simply allows you to
    determine whether other users will be able to add comments to the content or not,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Options](img/1800_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first option, **Disabled**, is useful if you are posting content for which
    comments are not appropriate—perhaps, like me, you are averse to criticism about
    your poetry, or something similar. The second allows only those with administration
    rights to post comments to this content, although other users can view the comments,
    and the final option allows all users with sufficient permissions to pass comment
    on your wonderful poetry (or whatever).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following set of options deals with adding content to a menu. The next
    screenshot shows how a typical **about us** page might be added to the **Navigation**
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Options](img/1800_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, a fairly hefty weight has been assigned to this page as we only
    ever want it to be shown after the actual content posts so that is doesn''t detract
    from the main focus of the website. If you now take a look at the main menu and
    hover the cursor over the new **about us** link, you''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Options](img/1800_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you ever wish to remove or edit this menu item again, simply look at the
    same **Menu settings** section, and there will be a new checkbox, automatically
    available, to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: The final option available concerns the use of file uploads; it is easy to work
    with and we have already seen it in action, and so we'll discuss it no further
    here. That about wraps it up for default content options—there's plenty more to
    learn, however, so keep your thinking cap on as we venture into the world of content
    administration.
  prefs: []
  type: TYPE_NORMAL
- en: Administering Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We saw in [Chapter 4](ch04.html "Chapter 4. Basics II: Adding Functionality"),
    that in the **settings** section, under **administer**, it was possible to set
    default options for a content type. Head back over there, and disable all the
    **Publishing options** with the exception of **In moderation queue** for the **page**
    content type (or any type that can be created using the authenticated user) and
    save the changes. Log out of the administrator account and log in using a standard
    account, and then create a new page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming the authenticated user does not have **administer** permissions enabled
    on nodes, he or she will not have the power to modify the **Publishing options**,
    and will simply have to click **Submit** in order to send their page for moderation.
    Now look through all the available content on the site; the page just submitted
    will not appear yet because it has not been published. In order to see what''s
    going on, we need to visit the **content** page under **administer**, which shows
    a list of all the content on the site along with a variety of options in order
    to work with it, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Administering Content](img/1800_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that in this screenshot the top two submissions were posted by the user
    **David** (whereas, in the case of the demo site, the administrator is **David
    Mercer)**. Neither of these page nodes has yet been published because the default
    settings require them to first be moderated. Notice also that **new** has been
    tacked onto the latest submission to distinguish it from posts we have already
    seen—useful when you have tonnes and tonnes of nodes to go through.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the content filter shown towards the top of the page, above **Update options**,
    is a very important tool in your administrative workshop. It allows you to display
    only those nodes that satisfy certain requirements. There are three filter criteria
    provided: **status, type**, and **category**. These allow you to filter the whole
    list, presenting only those items that meet the specific requirement set in the
    drop-down list to the right of the selected method.'
  prefs: []
  type: TYPE_NORMAL
- en: If we wanted to locate a node that has already been published, we would check
    the **status** criterion, and then select the **published** option from the drop-down
    list (as shown in the previous screenshot) before clicking **Filter**. The displayed
    list would then be filtered and only the relevant results displayed on the page.
    Easy enough to do!
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s all good and well, but where is the moderation queue? Well, if you
    look at the drop-down list provided with the **status** criterion, you will notice
    that there is an **in moderation** option. Selecting this and clicking **Filter**
    will present us with the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Administering Content](img/1800_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: None of these pages have been published yet, because the **publishing option
    was disabled and in moderation queue** was set for all of them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that is possible to use the filters several times in order to refine your
    results!
  prefs: []
  type: TYPE_NORMAL
- en: 'It is now possible for the administrator to edit the node, and once all is
    well, the node can be published. Doing this is simple enough! Let''s say we wanted
    to allow the **Administer me** page to be published because after a bit of editing
    we are happy with it. Simply select the box to the left of the **Title**, and
    then, in the **Update options** section directly above the list, select the relevant
    option as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Administering Content](img/1800_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on **Update** will ensure that the page is now published as intended.
    You can confirm this by logging out and viewing the page as either an anonymous
    user or as an authenticated user depending on your permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth noting that there are quite a few options available when it comes
    to updating posts. You can promote the posting to the front page, or can demote
    it if you so choose. You can make the post sticky (in other words, it will stick
    to the front of its list) as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Administering Content](img/1800_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the **Make the selected posts sticky** under **Update options** enabled
    for the **A new topic** forum post, you can see that there is a pinned icon to
    the left and that the latest post, which is not sticky, appears below it. You
    can also unpublish and delete posts, both of which prevent users with insufficient
    permissions viewing the post on the site. The difference is that the **Delete
    the selected posts** option removes the post from the system entirely, whereas
    an unpublished post can be re‑published at a later date—useful for simply taking
    a post offline in the event you need to correct or modify it without getting rid
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the event that it is not possible to easily locate content, there
    is a search tool provided under the **search** tab of the content page, which
    allows you to search by keyword. Bear in mind that you can make use of the `*`
    wildcard character to match any characters in order to broaden your search. The
    **Advanced search** link on this page also provides you with several other options
    to specify conditions for your search.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New content will not be searchable until your cron run has been completed! Cron
    and scheduled tasks are discussed in detail in [Chapter 10](ch10.html "Chapter 10. Running
    Your Website").
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you are strongly urged to play around with the search options in order
    to become familiar with how each option functions.
  prefs: []
  type: TYPE_NORMAL
- en: Content-Related Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As well as talk about content-related modules, this section will also serve
    to give you a better idea of what is available to work with, and therefore what
    is possible to accomplish using both default and contributed modules.
  prefs: []
  type: TYPE_NORMAL
- en: We already know how to install modules, so we won't show how to install every
    contribution we discuss. If and when there are any noteworthy deviations from
    the usual installation methods they will be mentioned here—otherwise, please install
    and enable each module, remembering to check if there are any special permissions
    that need to be set as you go.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Advanced Features and Modifications") deals
    with more advanced topics, and it is there that we discuss the **Flexinode** module,
    which constitutes the last bit of information directly related to content; so
    remember to also check there before *closing the book* on content.'
  prefs: []
  type: TYPE_NORMAL
- en: Aggregator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the greatest opportunities available to web-based communities is the
    ability to share information. All you really need is a set of guidelines for how
    that information is to be presented, and once you have that, the rest is easy.
    So easy in fact that it is now possible for you to include news and articles of
    interest on your site from many well known sources with just a few clicks.
  prefs: []
  type: TYPE_NORMAL
- en: What makes it so easy to include other people's news, documents, articles, or
    any other content easy is a standard called **Rich Site Summary (RSS)** . This
    allows aggregators (programs that consume RSS feeds) to understand how to present
    content on web pages due to the way in which the RSS feed is structured. Drupal
    comes with one of these aggregators built in—simply enable it in the **modules**
    section under **administer**, and you will find that a few extra menu items pop
    up, allowing you to administer and view the content once it has been added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that the demo site would like to provide some news relating to
    wildlife from the *National Geographic* website. We pop along to the news site
    at [http://news.nationalgeographic.com/](http://news.nationalgeographic.com/)
    and look for where the RSS feed icons are presented on the site. In this case
    they look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the **RSS** link here will bring up the following page—luckily
    Drupal takes care of all the dirty work for us, and we don''t even need to understand
    the XML in order to consume this feed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This may not mean much to you at the moment, but it serves to confirm that
    there is a feed available for use at the address given in the URL. Knowing this,
    we can now head over to our site and look for the **aggregator** link under **administer**
    in order to begin adding this feed to the site. This will bring up the as yet
    blank list of feeds along with everything else we need. On this page, clicking
    on the **add category** tab brings up the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Assuming you intend to make use of a variety of feeds, it is probably prudent
    to categorize your content right from the start. Remember, providing access to
    timely and interesting news is a value‑added service for your site and encourages
    users to return time and again. With this in mind, it is probably quite valuable
    to have a variety of relevant feeds available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done, click **Submit**, and then click on the **add feed** tab
    to bring up the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: Specified a title for the new feed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supplied Drupal with the location of the RSS feed (check this against the URL
    of the RSS feed page we visited on the actual National Geographic site a bit earlier)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Given an **Update interval** of one day, making this a daily news feed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Associated this feed with the newly created **Commercial** category
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are a number of things to consider when filling out this form. First,
    you need to ensure that you are not infringing any licensing issues that will
    be supplied by the creator of the source feed. If there are restrictions as to
    what can and cannot be done with the feed, please ensure you abide by those restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: Next, there is no point in setting an update interval of one hour if you are
    only running the cron script once a day—the cron can at most only update the script
    once a day in this case. By the same token, there is no point in using the cron
    to update your feed every ten minutes if the feed itself is only updated on a
    weekly basis—check with the providers of the feed how often they recommend you
    update your feed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having taken these factors into account you can now click on **Submit** to
    add the feed to your site. Now the aggregator homepage has something to tell us,
    and should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As yet there are no items in the feed because the `cron.php` script hasn't been
    run. You can either wait for it to be accessed by your scheduled task or crontab,
    or if you are not keen to hang around, simply navigate to `http://localhost/drupal/cron.php`
    in your browser (if the path to your `cron.php` script is different, ensure you
    change this URL to suit your site). Remember that `cron.php` is just a script,
    with no HTML; so you will not see anything displayed on this page even if it is
    working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have done that, click **refresh** on the aggregator page to see the
    results. You should get something like this, assuming everything has worked correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Success! From this you can see that the feed now contains **9 items** as of
    the last update, which occurred **6 sec ago**. As well as this, you can **edit**
    the feed, **remove items** from the feed, or manually update the feed by clicking
    **update items**—in this case, the feed can be modified to reflect any changes
    on the source site. That's all there is to it!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can, of course, now view the content of the feed on the site. For the demo
    site, permission to access the feeds has been granted to anonymous and authenticated
    users alike. So when someone visits the site and clicks on the **news aggregator**
    link in the main menu, they are presented with something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now all users have instant access to all the content provided by *National
    Geographic*. Nothing stops you from gathering information from any number of other
    feeds, and what is interesting is that provided you are not infringing any licenses,
    you can make your feeds available to other sites. Doing this is easy (remember
    to enable the syndication block before trying to work with it)! Scroll down to
    the bottom of the page until you see a small icon that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on it brings up the feed page that is provided at the following URL
    (in the case of the demo site): `http://localhost/drupal/aggregator/rss`, and
    in this way content can be syndicated. You aren''t limited to syndicating online
    feeds you have obtained—any content can be syndicated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth noting that your sources can be revealed in the navigation column
    by clicking on the **sources** link under **news aggregator**. In this case, we
    are presented with the following; note that I have added a feed from the WWF (World
    Wide Fund for Nature, formerly World Wildlife Fund):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This presents us with a nice summary of feeds from each source. So far so good,
    but *what does the* **more** *link do?* Clicking on the **more** link for the
    WWF source brings up the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From here it is possible to click on the name of the feed in order to go to
    the source website, in this case [http://www.panda.org](http://www.panda.org).
    The feeds associated with this source are listed on the page below the title box
    for easy access to feeds by source. Clicking on the orange syndicate icon at the
    top right of the box takes the browser to the actual feed page. In this case it
    is [http://www.panda.org/rss/news.cfm?Press%20Office](http://www.panda.org/rss/news.cfm?Press%20Office).
  prefs: []
  type: TYPE_NORMAL
- en: As well as this, there are two tabs at the top of the page. The **categorize**
    tab opens up the following screenshot, which allows us to put individual feed
    items into a variety of categories (assuming you have a variety of categories
    available).
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the second feed item being assigned two categories, namely
    **Commercial** and **Special**. In this case, the **Special** category was created
    with a specific purpose in mind. Because there is news every now and then that
    warms one's heart, all items that are tagged in the **Special** category should
    be displayed in a special block on the website so that every user can see the
    good news when viewing any page on the site.
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final tab on the **sources** page simply brings up the same page that was
    used in order to create the feed. From here you can make any changes you require
    to the feed with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have not yet covered taxonomy and categorization, you may wish to come
    back to what follows in this section once you have read [Chapter 7](ch07.html
    "Chapter 7. Advanced Content") as there may be a few things that are not clear
    now. For example, we add a module to display content based on its category later
    on in this chapter, which is why we can work with the **Special** category in
    the manner shown next. The information presented here is simply to give you an
    idea of what you will be able to do—hopefully it will not be too confusing now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remembering that it is entirely possible you would like to display some of
    the latest feeds in a block somewhere on the site, head on over to the **blocks**
    category under the **administer** link and enable one of the new blocks so that
    it displays its latest items—notice that it also possible to display the latest
    feeds in a category too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once this is done, you will see the new feed, along with a selection of its
    items on your web pages. You can configure the number of news items displayed
    in the **Block specific settings** on its configuration page (click on **configure**
    to open this up)—for our purposes, the default option of five feeds is just fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, assuming that a user has blogging permissions and the feed license allows
    your site to do so, you can add feed items to blogs, by clicking on the little
    **b** icon that appears next to each item, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a news item to your blogs gives the article more permanency as it will
    not be lost when or if the list of items in the feed is cleared. Of course, if
    you are going to build up lots of content over time, then it is highly likely
    that you will need to make use of the archive module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The aggregator has one more important section to look at—configuration! If
    you click on **aggregator** under the **settings** link in the main menu, the
    following page is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This interface provides control over the type of HTML that is allowed within
    the feeds that are to be consumed by your site. This should be sufficient for
    most if not all the feeds you want to aggregate, but on the off chance that there
    are problems with some feeds, it is likely that they are using tags that are not
    specified in this section. When in doubt, leave it as is!
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the number of items to be shown with each feed in general as well as
    how long to hold on to old feed items are presented, and it is easy enough to
    make sensible selections here. The final section stipulates whether the category
    selection interface (on the **categorize** tab of the **sources** page) should
    use checkboxes or the multiple selector. We have already seen checkboxes in use,
    and they are fine for the purposes of the demo site. If, however, **multiple selector**
    was enabled, the category selections would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aggregator](img/1800_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before we move on, it is worth mentioning again that if at some stage you feel
    the urge to syndicate your site's content, you can enable the syndicate block
    to force Drupal to show the orange syndicate icon. Further, if you would like
    to enhance the control of the site's syndication, you can take a look at the syndication
    module provided at [http://drupal.org/project/syndication](http://drupal.org/project/syndication)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Archive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **archive** module is simple and to the point! Enable it in the **modules**
    section under **administer**. Then, go to the **blocks** section and enable the
    option entitled **Calendar to browse archives**, placing it wherever is most appropriate,
    and away you go. In the case of the demo site, it is envisaged that a lot of content
    will be added on a daily basis, so the archive calendar will be a great way to
    locate content chronologically. For this reason, the **Calendar to browse archives**
    block was given a low rating so that it always appears on top of the right-hand
    sidebar. Once the changes are submitted, the user can navigate to an item by searching
    through the calendar for when it was posted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Archive](img/1800_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Not that much to it; however, it is worth noting that clicking on a date or
    changing the month shown on the calendar will immediately bring up a form in the
    content section allowing users to search using drop-down lists like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Archive](img/1800_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's a testament to the excellent design of Drupal that such powerful functionality
    can be so easily implemented. If this doesn't impress you, not much will!
  prefs: []
  type: TYPE_NORMAL
- en: Similar Entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I don't know about you, but I often find that when reading news stories I end
    up following the **similar/related stories** links in order to try to find out
    more about a given bit of news, or simply get a more rounded view on whatever
    it is I am looking at. Having the ability to display related items is fairly useful
    functionality to have, and it should come as no surprise that it is very easy
    to use on Drupal by installing the **Similar Entries** module.
  prefs: []
  type: TYPE_NORMAL
- en: Download the module from the Drupal website and extract it to your `modules`
    folder. With that done you need to now enable the module in the **modules** section
    under the **administer** menu item—search for the new module entitled **similar**.
    It is important to go through the `readme` file in this case as it may affect
    how you install this module depending on your system's setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next task is to decide how many related items you would like to display
    on the site, among other things. In order to do this, head on over to the **blocks**
    section under **administer** and click on **configure** adjacent to the **Similar
    entries** block to set the number, before enabling the block and setting its **Placement**
    and **Weight.** The demo site used the default settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Similar Entries](img/1800_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If certain content types are not available for selection, then this is most
    probably because there is no content of that particular type on the site yet.
    As soon as you create content of a certain type, it will appear in the **node
    types to display** drop-down list. Further, assuming the taxonomy module is enabled
    (which it should be), there are three options related to how the Similar Entries
    module finds its related content. The default options are fine in this case as
    we are not concerned about category filtering. If, however, I wanted to show related
    content only from the **Conservation** forum container, then the following settings
    would need to be made:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Similar Entries](img/1800_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The rest of the settings on this page are standard for each and every block,
    and we have already seen how to work with these. With the configuration out of
    the way, simply enable the block and place it where you want. Now when users view
    any content on the site, the module presents any related content by searching
    for other posts with similarities. For example, when viewing the following post,
    notice that there is now a new block present in the right-hand sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Similar Entries](img/1800_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, three of the five related items presented have **hunting** in
    their titles, so we expect them to be shown in this list. *What about the other
    two?* If you look closely, the content of the post mentions both snaring and gin-traps,
    which relate to the titles of the two items that do not explicitly mention hunting.
  prefs: []
  type: TYPE_NORMAL
- en: So, from this we can see that in order to present a list of similar posts or
    items, the Similar Entries module searches all the titles posted to the site and
    lists those that have any similarities in the title. Not content with that, it
    also searches the posts' body content for similarities, and presents those (assuming
    there is enough space in the block). This is obviously very useful for people
    doing research, or for a news-like site.
  prefs: []
  type: TYPE_NORMAL
- en: Taxonomy Block
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final module we will discuss here relates to the **taxonomy** module. Unfortunately,
    this relies on the fact that categorization is enabled on your site already. Because
    of this, you may want to skip this section until you have read through the chapter
    on *Advanced Content*, which follows directly after this one.
  prefs: []
  type: TYPE_NORMAL
- en: Like the previous module discussed, this module also presents similar topics
    to the user, depending on what they are viewing. In this case, though, *taxonomy
    block* displays a list of recently posted items based on their category. Now,
    you should think carefully about whether you prefer this module or the previous
    one to provide readers with related topics. Having both displayed on your page
    will create some redundancy as there will obviously be some overlap in the content
    of the blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functionality must reflect and meet the requirements of the site. Anything else
    is redundant!
  prefs: []
  type: TYPE_NORMAL
- en: In other words, don't clutter up your web pages with information or functionality
    that is not really necessary; this hurts the usability of the site, and therefore,
    indirectly, its popularity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation of the module is fairly basic—simply extract the contents
    of the download to the `modules` folder. You will need to execute a `.mysql` script
    against your database, so once again, ensure you have a recent backup before making
    any changes like this. You can run the script by executing the following command
    at the command line (remember to use the correct username and database for your
    system):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Change the file path to the one that suits your system if this is not where
    the `taxonomy_block.mysql` script is held on your machine. Assuming that the command
    executes without any hassle, you can now head on over to the **modules** section
    to enable the new addition to the site—look for **taxonomy_block** in the list.
    Once the module is enabled, you will need to decide where it should be presented
    on the site, using the **blocks** page under **administer**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike other modules, the taxonomy block doesn''t automatically appear in the
    list of blocks to be enabled—instead you will find a link to it in the main menu
    underneath the **blocks** menu item. This link opens up a block creation page,
    from which you can stipulate the type of information you would like to display
    based on which category you wish to associate this block with, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Taxonomy Block](img/1800_06_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, we have chosen to present a block containing information relating
    to the contentious issue of canned lion hunting. The **Block Description** option
    allows you to enter the name of the block as it will appear in the list of blocks
    on the parent **blocks** page. The **Teaser Length** sets the number of characters
    you wish to show for each post that appears in the block. In this case, I have
    decided to show **50** characters for each post, but limit the number of related
    topics shown to only **3** in order not to take up too much space with this block.
    Finally, the block is associated with the **Hunting - Canned** category as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on **Create Block** saves these changes, and now we can venture to
    the **blocks** page in order to enable the block and have it displayed on the
    site. Search through the list of **Disabled** blocks for the **Block Description**
    you entered on the previous page. Once you have found it, make your choices regarding
    where it should be displayed and what weight it holds, and click on **Save blocks**.
    You now have taxonomy-based related content up and running on your site. In the
    case of the demo site, the similar entries block was disabled and this one enabled
    in its place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when a user views anything related to canned hunting, they see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Taxonomy Block](img/1800_06_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, you can have wildly varying results depending on the way in which
    you create the block. You might find that you simply want to leave out the teaser
    entirely, in which case you will end up with only the titles of each post being
    displayed. Whatever your choice, you now have some fairly powerful functionality
    at your disposal. Just remember not to get carried away and add blocks simply
    because they work nicely.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing how to deal with content efficiently and quickly is a highly desirable
    trait when it comes to working with CMS systems such as Drupal. To this end, this
    chapter set the foundation for you to work from by giving an overview of the fundamentals
    as well as a taste of what else is available. To start with, we took a brief look
    at the various types of content that can be implemented using Drupal and then
    discussed how to work with that content using the administration tool.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important jobs you will take on when running a website is administering
    the content of the site. At the moment it might seem fairly straightforward, but
    as the site grows larger, the job becomes slightly harder. Ensuring that you spend
    time learning your way around the content-related administrative areas of the
    **administer** menu will ensure that you stay on top of things as and when your
    site becomes more widely used, or when you begin attempting more complex content-oriented
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The second half of this chapter demonstrated some of the powerful functionality
    that ships with Drupal or is provided by contributions. We saw that it is possible
    to aggregate RSS feeds with relative ease, and in turn syndicate content so that
    it is made available to other sites to consume. Having the ability to do this
    with only the minimum of fuss is a quantum leap for the Internet as a whole and
    hopefully you will spread the good word about how easy it is to work with Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Armed with a solid understanding of how to work with content as well as the
    type of things available to use, we are now ready to look at some slightly more
    advanced content issues. The next chapter will talk about how to create your own
    dynamic and attractive content, as well as talk about how to categorize content
    through the use of the taxonomy module.
  prefs: []
  type: TYPE_NORMAL
