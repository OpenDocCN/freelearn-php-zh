- en: Chapter 4. Creating a Room through Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter explains how to write a model class to store data that will be
    sent from View to Controller using a form, with validating input, formatting data,
    and uploading files. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – a model to store room data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ActiveForm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – creating a new room from the HTML form
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting date, time, and numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – uploading an image of the room
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to manipulate data between View and Controller is to create a
    Model. A **Model** is a class that extends the `Model` class located under `yii\base\`,
    the base used for data models.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a suitable class for providing simple solutions in order to encapsulate
    data, assign content from array (form data), and validate data using rules. The
    Model base class implements the following commonly used features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attribute declaration**: By default, every public class member is considered
    a model attribute; we can access all the members using the `attributes` property
    of Model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attribute labels**: Each attribute may be associated with a label for display
    purposes; we can extend the `attributeLabels()` method to return labels related
    to public members of Model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Massive attribute assignment**: We can fill the member''s content of Model
    by passing an entire array of values. This is convenient when we need to fill
    a model with data from the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scenario-based validation**: Model provides rules to validate data. We can
    choose which ones apply according to the scenario, a keyword that defines the
    rules to apply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While performing data validation, Model also raises the following events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EVENT_BEFORE_VALIDATE`: This is an event raised at the beginning of `validate()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EVENT_AFTER_VALIDATE`: This is an event raised at the end of `validate()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can directly use Model to store model data or extend it with customization.
  prefs: []
  type: TYPE_NORMAL
- en: Example – a Model to store room data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's create Model to store room data. To create this, we choose to name
    all fields with words written in lowercase characters and separated by underscores.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can identify these fields of Model as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`floor`: In a more generic situation, we consider this as a string member'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`room_number`: This is an integer member'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_conditioner`: This is an integer member with two values 0 and 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_tv`: This is an integer member with two values 0 and 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_phone`: This is an integer member with two values 0 and 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`available_from`: This is a date member that it is represented with a string
    in PHP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price_per_day`: This is a float member'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assistance_email`: This is a string member containing an e-mail address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This is a string member'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, create the `Model` class, named `Room` as the base class, in the previous
    field list, creating a file under `basic/models/Room.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The second thing to do is to append the `attributeLabels()` method in order
    to give a label to every member. This is not necessary, but it is a useful method
    to get labels displayed in the end user frontend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing is to create rules to validate data. Rules are based on validators,
    whose defaults are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boolean`: `yii\validators\BooleanValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`captcha`: `yii\captcha\CaptchaValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compare`: `yii\validators\CompareValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date`: `yii\validators\DateValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`double`: `yii\validators\NumberValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email`: `yii\validators\EmailValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exist`: `yii\validators\ExistValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file`: `yii\validators\FileValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter`: `yii\validators\FilterValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: `yii\validators\ImageValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in`: `yii\validators\RangeValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integer`: `yii\validators\NumberValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`match`: `yii\validators\RegularExpressionValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`required`: `yii\validators\RequiredValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe`: `yii\validators\SafeValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string`: `yii\validators\StringValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trim`: `yii\validators\FilterValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unique`: `yii\validators\UniqueValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: `yii\validators\UrlValidator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A Rule is an array whose values are in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: A string or an array to define an attribute or list of attributes to apply the
    rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of validator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `on` attribute to define which scenario to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other parameters, depending on the validator that is used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Write the `rules()` method of the `Room` Model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first rule establishes that `floor` is an integer, with `0` as the minimum
    value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second rule establishes that `room_number` is an integer, with `0` as the
    minimum value; we can put together floor and room in a single rule, melting them
    into an array as the first parameter of a single rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third rule establishes that `has_condition`, `has_tv`, and `has_phone` are
    integers with possible values between 0 and 1 (formally a Boolean value)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth rule establishes that `available_from` is a date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fifth rule establishes that `price_per_day` is a number and its minimum
    value is 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last rule establishes that `description` is a string with a maximum of 500
    characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These rules will be applied when the `validate()` method of `Model` is called.
    This method is automatically called when we attempt to call the `save()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Using ActiveForm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will create an HTML form in view to send data from view to controller.
    We could build a form in the standard way using the form tag and input fields,
    but Yii2 provides helper classes that simplify the building of a form and its
    content.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, we will use `ActiveForm`, a widget that builds an interactive
    HTML form for one or multiple data models.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for any Yii2 widget, we will indicate with the `begin()`static method, the
    moment we start using it, and with the `end()`static method, the moment we stop
    using it, from `yii\widgets\ActiveForm`. The code between these methods will be
    placed in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first method, `begin()`, returns an object that we can use inside the content
    to create the input fields. This method accepts an array as the parameter to indicate
    configuration attributes to be applied. The last method, `end()`, marks the end
    of the widget, so this can be rendered with its content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need some input fields to insert in the code, which is done using the
    `field()` method of the `ActiveForm` instance that we just created. This method
    requires two parameters: model and field name and returns an object of type `ActiveField`.
    With this method, we just demand `ActiveForm` to create a new field; however,
    in this case, we also need to specify the type of field we want.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This operation is made calling a method from `ActiveField` relative to the
    kind of input to the instance. The most common are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label()`: This is used to generate a label tag'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`textInput()`: This is used to generate an input field with type `text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`textarea()`: This is used to generate a `textarea` tag'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radio()`: This is used to generate an input field with type `radio`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkbox()`: This is used to generate an input field with type `checkbox`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – creating a new room from the HTML form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, create a new controller, `RoomsController`, under `basic/controllers/RoomsController.php`
    with an action named `create`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At the start of the `create()` method, we create a new instance of the `Room`
    class assigned to the `$model` variable. The `load()` method fills the `$model`
    attributes with data taken from the key position named `$model->formName()` of
    an array passed as parameters. By default, `$model->formName()` returns the class
    name of the object, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Going back to the `load()&&validate()` condition, if `load()` returns true,
    `validate()` will also be executed and all rules in the `rules()` method of model
    will be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, `Model` is ready to be saved to the data store (in the database
    in the next chapters). Now, it is important to mark this condition with a simple
    variable named `$modelCanSave`, passed to the `create` view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file for the `create` view under `basic/views/rooms/create.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If the `$modelCanSave` variable is true, an `alert` div with the green background
    will be displayed to notify that `$model` is loaded and validate (ready to be
    saved in database).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the test code, point to `http://hostname/basic/web/rooms/create`. The following
    screen should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – creating a new room from the HTML form](img/B04656_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create room HTML form
  prefs: []
  type: TYPE_NORMAL
- en: 'The framework automatically takes care of the validation checks on input fields,
    corresponding to the rules list in the `rules()` method of Model. We can check
    this by typing characters in the **Floor** input. We should see the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – creating a new room from the HTML form](img/B04656_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The validation check of the integer field
  prefs: []
  type: TYPE_NORMAL
- en: The validation informs us that **Floor** must be an integer, as required in
    the rules list. Once all the fields are filled with correct values (date format,
    yyyy-mm-dd), just click on the **Create** button and we should see a box with
    green background displaying **Model ready to be saved**.
  prefs: []
  type: TYPE_NORMAL
- en: Format date, time, and numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's see how to format the date, time, and numeric fields. Yii2 provides
    helpers for each of these types.
  prefs: []
  type: TYPE_NORMAL
- en: To format a value, we will use `Yii::$app->formatter`; this object belongs to
    the `Formatter` class located under `yii\i18n\` and supports many types of formatting.
    All the methods used for this purpose start with an `as` prefix. Therefore, the
    `asDate` method will be used to format dates, and the `asCurrency` method will
    be used to format currencies.
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter of each formatting method is the value to be formatted and
    other fields refer to the format to be used and other optional parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the view content by adding content of the Model that is ready
    to be saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If `$model` is ready to be saved, in the box with the green background, we will
    have the output of each of the fields of Model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we have used:'
  prefs: []
  type: TYPE_NORMAL
- en: The `boolean` formatter for `has_condition`, `has_tv`, and `has_phone` members
    uses the default representation of false and true values; defaults are `No` for
    false and `Yes` for true, but we can change this behavior setting in the `$booleanFormat`
    member of `Yii::$app->formatter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `date` formatter for `available_from member` takes the date format to be
    used as the second parameter; this date format can be represented with PHP date
    function style or ICU standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `currency` formatter for the `price_per_day` member is the second parameter
    with three characters type of currency to be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how the box with the content of Model appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Format date, time, and numbers](img/B04656_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Show summary of Model content when validation is successful
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The common task when data is sent from view to controller is uploading files.
    Also, in this case, Yii2 provides a convenient helper to handle this task: `yii\web\UploadedFile`.
    This class has two important methods: `getInstance()` (in plural form `getInstances()`)
    and `saveAs()`.'
  prefs: []
  type: TYPE_NORMAL
- en: The first method, `getInstance()`, allows us to get the file from the form's
    input field, while the second method, `saveAs()`, as its name implies, allows
    us to save file input field content to the server filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start with the example, it is important to create a folder that will
    contain the uploaded files. The best place to create this folder is at the root
    directory of the application. So create a folder named `uploadedfiles` under the
    `basic/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that this folder is writable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to centralize configuration, define an alias for this new folder, so
    that we can change this path from app configuration. Enter in `basic/config/web.php`
    and append the `aliases` property, if it does not exist, to the `$config` array
    with these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`@app` is a system aliases that defines the application''s root directory.'
  prefs: []
  type: TYPE_NORMAL
- en: Example – uploading an image of a room
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will see how to upload an image of a room.
  prefs: []
  type: TYPE_NORMAL
- en: We need to make changes in model, view, and controller. Let's start with model.
  prefs: []
  type: TYPE_NORMAL
- en: In model, we need to add a new property, named `fileImage`, with its specific
    rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the final version of Model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In rules, for the `fileImage` field, we can add many types of validation; for
    example, check if required, check mime type (`.gif`, `.jpeg`, and `.png`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will use the static method `getInstance()` of the `UploadedFile` class
    in controller, to get the file from the input file field and then use `saveAs`
    to save in the specific folder. This is the final version of `RoomsController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`UploadedFile::getInstance` gets the file from the `$_FILES` array to fill
    the `fileImage` property of Model with its data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing to do is to update the `create` view content, by appending the
    `fileInput` field. This is the final version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Take care of the last row of this example, `ActiveForm::end()` that closes the
    body of the `$form` widget defined at the top of the file using the `ActiveForm::begin()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, the `ActiveForm` widget has been created by filling the `enctype`
    property of the configuration array with the `multipart/form-data` value, which
    allows us to send the binary data other than the form text parameters. However,
    this does not deal with Yii or PHP, because this is an HTML requirement for notifying
    the browser how to send files to the server.
  prefs: []
  type: TYPE_NORMAL
- en: In this view, if the model has been validated and the `fileImage` property is
    filled, the corresponding image will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to build a Model class from scratch and send data
    from view to controller using form, created using Yii2 ActiveForm widget. We also
    looked at the common useful methods to format data and sent files from the form.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to work with databases and save model
    data from view form to database.
  prefs: []
  type: TYPE_NORMAL
