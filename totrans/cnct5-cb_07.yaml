- en: Chapter 7. Working with Users and Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Checking if the current user is logged in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the currently logged-in user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a user by its ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a user by its username
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a user's info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a user's attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a user's attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a group by its ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a group by its name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a user to a group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting all of the users from a group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a user is a member of a group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a user from a group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging out a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the permission object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a user can write to a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a user can edit a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking a user's file permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of concrete5's greatest attributes is the included functionality surrounding
    users and permissions. concrete5 makes it easy to control which users and user
    groups can access specific pages. Users in concrete5 can be site editors, administrators,
    community members, or any other role that site owners can devise.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore several recipes that allow developers to interact
    with and manipulate user objects, groups, and their related permissions. The recipes
    in this chapter will empower concrete5 developers to incorporate the powerful
    user and permissions model into their own custom applications and websites.
  prefs: []
  type: TYPE_NORMAL
- en: Checking if the current user is logged in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common tasks in concrete5 development is finding out if a user
    is logged into the website. In this recipe, we will output some HTML to say hello
    to the logged-in user if they are logged in. If they are logged out, we will output
    a link to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for checking if the current user is logged in are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if the current user is logged in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If they are logged in, show a welcome message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Otherwise, show a link to the login page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The user model contains a static function called `isLoggedIn` which will simply
    return a Boolean result. This does not bring any sort of permission checks into
    the mix, only checks to see if the person viewing the page is logged in at all.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the currently logged-in user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 makes it easy to get the object of the currently logged-in user. In
    this recipe, we will output the the username of the currently logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a good idea to make sure the user is logged in at all before attempting
    to display their username. We will use the skills from the previous recipe to
    make sure the user is logged first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for getting the currently logged-in user are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if the user is logged in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the user is logged in, create a new instance of the `User` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Echo the username of the `user` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 makes it incredibly easy to get the currently logged-in user. Essentially,
    we only have to instantiate the `User` class, which will return an object representing
    the currently logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Checking if the current user is logged in* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting a user's info* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a user by its ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers can also load users by their unique IDs. In this recipe, we will
    load the user with the ID of 1 and output their username.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for loading a user by its ID are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the ID of the user that you wish to load. In this example, we will
    load the user with an ID of 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load a user by its ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Echo out the user's username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will look in the `Users` table of the database and return a user object
    populated with data from that corresponding record.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a user by its username* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a user by its username
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to being able to load users by their IDs, developers can also load
    users by their usernames. In this recipe, we will load a user with the username
    of admin and output their numerical ID.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for loading a user by its username are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the username of the user that you are loading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the user by its username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Echo the user's ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hey, that was easy! The `UserInfo` class contains methods to load a user by
    its username rather than just its ID. The `UserInfo` class also has a method to
    get the numerical user ID, for the user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a user by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the currently logged-in user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a user's info
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User objects carry a lot of information with them, including the user's username,
    e-mail, and several other attributes. In this recipe, we will run through several
    functions to retrieve data associated with users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code for this chapter doesn't necessarily belong to any specific place in
    concrete5\. The steps for this recipe are basic, one-line functions to demonstrate
    the different ways to get data from a user object. If you'd like a place to just
    write arbitrary code and have concrete5 evaluate it, the `site_post.php` file
    in `config/` is a pretty good place to start.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for getting a user''s info are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will load the currently logged-in user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the user's ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the user's username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the user is registered on the site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the user's account is active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the user is the super admin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the `UserInfo` object, which contains even more information about the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the user's e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the user's encrypted password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the number of times the user has logged in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find out if the user has verified their e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the Unix timestamp of the previous time that this user logged in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find out if the user has an avatar uploaded to the site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find out when the user was added to the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `User` class contains a couple of methods to retrieve basic user data, such
    as a user's ID and username. When developers want to see more information about
    a user, though, they will need to use the `UserInfo` class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting the currently logged-in user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a user's attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users in concrete5 can have custom attributes that get defined through the interface.
    Imagine a website where you would like to know your users' ages. concrete5 does
    not provide an age field for users out of the box, but one can easily be added
    using attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you will want to make sure that the attribute exists in the concrete5
    site before trying to set it. Go to `http://example.com/dashboard/users/attributes`
    (replacing `example.com` with your own domain name, of course) and make sure that
    the attribute that you are creating exists. The page will look similar to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/4548OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will work with an attribute with the handle of age, so feel
    free to create that attribute to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for setting a user''s attributes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the currently logged-in user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the `UserInfo` object for that user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the age attribute to `35`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UserInfo` class contains a function called `setAttribute` which will accept
    either a string that represents the attribute key handle, or an actual instance
    of an `AttributeKey` object. In this recipe, we opted for the simpler approach
    of providing the attribute handle in a string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Retrieving a user's attributes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the currently logged-in user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting a user's info* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a user's attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to setting attributes, we can also retrieve them. In this recipe,
    we will retrieve the attribute for the user's age, which we set in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in the previous recipe, you will need to make sure that any attributes you
    are retrieving actually exist in concrete5\. In this case, we will be referencing
    an attribute with the handle of `age`. If your concrete5 system does not have
    a user attribute available called age, please adapt this recipe to fit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for retrieving a user''s attributes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the currently logged-in user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the `user info` object for the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the value of the user's age attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 provides a simple API to retrieve attributes from users. In the database,
    attribute keys and values are spread over several tables and are difficult to
    query manually. This method is the preferred way to retrieve user attributes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'concrete5 also makes use of "magic methods" to retrieve user attributes. Essentially,
    call a function with the camel-cased version of the attribute handle, preceded
    by the word `get`. In this recipe, to get the user''s age, we could simply write
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting a user's attributes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the currently logged-in user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting a user's info* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a group by its ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Groups in concrete5 are ways to organize users by their role on the website.
    Groups can receive permission settings just like users can. In this recipe, we
    will load a group with the ID of 3 (which is the Administrators' group on most
    concrete5 installations).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for loading a group by its ID are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the ID of the group that we want to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the group by its ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Dump the name of the group variable to ensure that it has loaded correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will simply query the `Groups` table in the database to find the group
    record that corresponds to the provided ID.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a group by its name* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a group by its name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Groups can be loaded by their name, which can be useful when you do not know
    the numeric ID of the group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for loading a group by its name are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the name of the group that you wish to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the group by its name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Dump the group variable to make sure that you have loaded the group correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 queries the database to find the group that has the same name that
    you provided to the `getByName` function. Group names can be changed through the
    concrete5 dashboard any time, so use caution when hardcoding group names in your
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a group by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a user to a group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the concrete5 dashboard provides a simple interface to add users to different
    groups, sometimes you will encounter the need to do it programmatically. In this
    recipe, we will add a user with the ID of 1 to the Administrators' group, which
    has an ID of 3.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for adding a user to a group are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the ID of the user that you would like to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the user by its ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the ID of the group that you would like to add the user to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the group by its ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the user to the group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `enterGroup` function of the user model is called, the user will be
    added to the group that was passed as the first parameter. The user now will inherit
    all of the permissions associated with that group.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a user by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading a group by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Removing a user from a group* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting all of the users from a group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have loaded a group object, you can easily iterate through the users
    that are members of that group. In this recipe, we will load a group, and then
    output the username of each member within the group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for getting all of the users from a group are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the ID of the group that you wish to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the group by its ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get an array of group members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Loop through the members array, echoing the user's name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, concrete5 does the heavy lifting here in regards to querying the database
    to find all of the user accounts that are members of the group that has been loaded.
    The `getGroupMembers` function returns an array of `UserInfo` objects, which can
    be used to read and modify the members of the group.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a group by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting a user's info* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a user is a member of a group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 comes with a robust permissions model, but sometimes developers will
    want to do simple permissions and access control tasks on their own. In this recipe,
    we will see if a user is in the Administrators' group. We will then display a
    message that indicates if they are an administrator or not.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for checking if a user is a member of a group are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the currently logged-in user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Determine the ID of the group that you wish to load (in this case, it's the
    Administrators' group with an ID of 3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the group by its ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the user is a member of the group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Display a message to the user confirming or denying if they are a member of
    the Administrators' group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 checks to see if the user is a member of the specified group object
    and returns a Boolean value.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a group by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the currently logged-in user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a user from a group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to being able to add users to groups, concrete5 also allows developers
    to perform the opposite task: removing users from groups. In this recipe, we will
    remove a user from the Administrators'' group.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for removing a user from a group are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the currently logged-in user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the ID of the group that you wish to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the group by its ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check to see if this user is a member of the group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the user is a member, remove them from the group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this case concrete5 will simply remove the association between the user and
    the group. The user will lose all of the permissions that it had inherited from
    the group.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a user to a group* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading a group by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the currently logged-in user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a user is a member of a group* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging out a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 also contains functionality to log users out of the system programmatically.
    In this recipe, we will log out the user who is currently logged in.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for logging out a user are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if the user is logged in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the logged-in user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Log out the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 deletes the current session, effectively logging the user out.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Checking if the current user is logged in* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the currently logged-in user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will load a user with the ID of 3 and delete that user from
    concrete5.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for deleting a user are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the ID of the user that you wish to delete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the `UserInfo` object for that user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will remove the user as well as all of their attributes from the database.
    This action is permanent and cannot be reversed, short of restoring a database
    backup.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting a user's info* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the permission object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Verifying and modifying page permissions, centers around the permissions object.
    In this recipe, we will load the permissions object for a page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for getting the permission object are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the path of the page for which you want to check the permissions settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the page by its path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the `permissions` object for that page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Dump the `permissions` object to verify its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will return a `permissions` object that can be further used to determine
    if a user has access to perform various actions on that page.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can get the `permissions` objects for content areas and blocks as well,
    just pass a block or area object to the `Permissions` constructor instead of a
    `Page` object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting a Page object by its path* in [Chapter 1](ch01.html "Chapter 1. Pages
    and Page Types"), *Pages and Page Types*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a user can read a page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may find that sometimes you will want to manually find out if a user is
    allowed to read a particular page. In this recipe, we will load a page by its
    path, get the `permissions` object for it, and then find out if the user is allowed
    to view it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for checking if a user can read a page are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the path of the page to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the page by its path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the `permissions` object for that page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find out if the user is allowed to read that page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will check all of the permissions for that `Page` object, including
    group and user permissions, to find out if the current user is allowed to view
    that page. The *canRead* function returns a Boolean value.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read permissions can also be checked for content areas and blocks by simply
    providing an area or block object to the `Permissions` constructor, instead of
    a `Page` object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting a Page object by its path* in [Chapter 1](ch01.html "Chapter 1. Pages
    and Page Types"), *Pages and Page Types*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the permission object* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a user can edit a page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to being able to check if users can view pages, developers can also
    manually check to see if the logged-in user has the ability to edit a page. In
    this recipe, we will load a page by its path, get the `permissions` object for
    that page, and then find out if the user is allowed to edit it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for checking if a user can edit a page are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the page path to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the `permissions` object for the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find out if the user can edit the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will look at the user's own permission settings as well as the settings
    for any groups that it is a member of, and determine if the user has the ability
    to edit or write to the given page.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with read permissions, content area and block permissions can also be checked
    using this method. Simply provide an instance of an area or block instead of a
    page, and the permissions will be checked against those items instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting a Page object by its path* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the permission object* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking a user's file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 allows site owners to specify permissions on the file manager. In
    this recipe, we will see if a user is allowed to upload files to the file manager.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for checking a user''s file permissions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the `FilePermissions` global object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the user can view the `file manager` interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the user can upload to the file manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `FilePermissions` class extends the `Permissions` class, and allows users
    to check the global settings of the file manager.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 also allows developers to check if a user is allowed to upload files
    of a specific type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
