["```php\n    Pimcore/skeleton package in the my-project folder. This will also create a new folder in your filesystem, and the final path will be /your/project/my-project. Pimcore is available in two different releases: skeleton and demo. When starting a new project, it is recommended that you use the skeleton template, but if you want to see Pimcore's features, you can install the demo package to get a website with data that is ready to test. The process will take a moment, and you will see some console output that will display its progress.\n    ```", "```php\n    utf8mb4, to fully support Unicode encoding.\n    ```", "```php\n    DocumentRoot /my/project/my-project/public\n    ```", "```php\n    chown makes www-data (usually the group where the user that runs the web server belongs) the group owner of the Pimcore folder, and then chmod adds write permission to the required folders.\n    ```", "```php\n    /your/project/my-project directory.\n    ```", "```php\n    MySQL-host-socket is the hostname of the MySQL database, MySQL-username and MySQL-password are the database credentials, and MySQL-database is the database name. This command will set up the Pimcore connection settings and will install Pimcore in the database. You will be prompted to choose the admin user for the Pimcore back office; we will choose admin\\pimcore as a credential, but you can use whatever you want (although the use of simple passwords in your production environment is discouraged).In the following screenshot, we can see the console output that we receive after launching the installation command:![Figure 2.1 – Pimcore installation and admin password prompt\n    ](img/Figure_2.01_B17073.jpg)Figure 2.1 – Pimcore installation and admin password prompt\n    ```", "```php\n    crontab -e\n    ```", "```php\n    */5 * * * * /your/project/bin/console maintenance\n    ```", "```php\ndb:\n    image: mariadb:10.4\nworking_dir: /application\n    command: [MySQLd, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --innodb-file-format=Barracuda, --innodb-large-prefix=1, --innodb-file-per-table=1]\n    environment:\n      - MYSQL_ROOT_PASSWORD=ROOT\n      - MYSQL_DATABASE=pimcore\n      - MYSQL_USER=pimcore\n      - MYSQL_PASSWORD=pimcore\n```", "```php\n  php:\n    image: Pimcore/Pimcore:PHP7.4-apache\n    volumes:\n     - .:/var/www/html:cached\n    ports:\n     - 80:80\n     - 443:443\ndepends_on:\n     - db\n```", "```php\n    COMPOSER_MEMORY_LIMIT=-1 composer create-project Pimcore/skeleton tmp\n    ```", "```php\n    mv tmp/.[!.]* .\n    mv tmp/* .\n    rmdir tmp\n    ```", "```php\n    echo 'memory_limit = 512M' >>/usr/local/etc/php/conf.d/docker-php-memlimit.ini;\n    service apache2 reload\n    ```", "```php\n    ./vendor/bin/Pimcore-install --MySQL-host-socket=db --MySQL-username=Pimcore --MySQL-password=Pimcore --MySQL-database=Pimcore\n    ```", "```php\n    chown command adds the www-data group to the files and folders permission; this is enough to enable Pimcore to read and write files.\n    ```", "```php\n#!/bin/bash\n#Pimcore download\nCOMPOSER_MEMORY_LIMIT=-1 composer create-project Pimcore/skeleton tmp\n#trick for moving the files\nmv tmp/.[!.]* .\nmv tmp/* .\nrmdirtmp\n#increase the memory_limit to >= 512MB as required by Pimcore-install\necho 'memory_limit = 512M' >>/usr/local/etc/php/conf.d/Docker-php-memlimit.ini;\nservice apache2 reload\n#run installer\n./vendor/bin/Pimcore-install --MySQL-host-socket=db --MySQL-username=Pimcore --MySQL-password=Pimcore --MySQL-database=Pimcore\n# fix permission\nchown -R www-data .\n```", "```php\n    -d parameter (run as daemon), if you close the console, the Docker environment will shut down. This console is helpful because it shows all the logs from the containers, including the Pimcore container.\n    ```", "```php\n    install.sh script inside the container named PHP. The script will run all the instructions needed to install Pimcore. This command is only required the first time you run the container. Its purpose is just for installation.\n    ```"]