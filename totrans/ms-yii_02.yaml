- en: Chapter 2. Console Commands and Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often when building modern web applications, we need to write background and
    maintenance tasks to support our main application. These tasks may include things
    such as generating reports, sending e-mails via a queuing system, or even running
    data analysis that would cause a web-based endpoint to timeout. With Yii2, we
    can build these tools and scripts directly into our application by writing console
    commands or even complete console applications.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration and usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic structure of Yii2 console applications is very similar to the structure
    used in web applications. In Yii2, console commands that extend from `yii\console\Controller`
    are nearly identical to `yii\web\Controller`.
  prefs: []
  type: TYPE_NORMAL
- en: Entry script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before moving on to the configuration files themselves, let''s take a look
    at the console entry script, which is part of the file called `yii`. This entry
    script serves as the bootstrapper for all our console commands, and in general,
    they can be run by calling this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will output all the currently available commands for the system.
    Like the `web/index.php` entry script, though, it isn''t aware of its environment
    yet. We can change this by replacing `yii` with the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This script is intended for Linux-like environments. Yii2 also provides a `yii.bat`
    file that can be run on Windows. If you're following along on a Windows computer,
    ensure that you change `yii.bat` in addition to the yii file.
  prefs: []
  type: TYPE_NORMAL
- en: With our entry script files configured, we're ready to take a look at our application
    configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may also notice that in the `web/` folder, there is a separate entry script
    called `index-test.php`. This script is used by Codeception, a testing framework
    that is used to run unit, functional, and acceptance tests in Yii2\. We'll cover
    how to configure and use this entry script and Codeception in [Chapter 10](part0060_split_000.html#1P71O1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 10. Testing with Codeception"), *Testing with Codeception*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Yii2, the console configuration file is located at `config/console.php`
    and is nearly identical to our web configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Like our web configuration file, we can include our database and parameters'
    configuration files using the environment-aware configurations we wrote in [Chapter
    1](part0014_split_000.html#DB7S2-ad3e09b384df46aea690d9c8897d5fe7 "Chapter 1. Composer,
    Configuration, Classes, and Path Aliases"), *Composer, Configuration, Classes,
    and Path Aliases*. In fact, the only major difference between our web and console
    configuration is the explicit declaration of our console command namespace and
    the explicit declaration of the `@test` alias, which defines where our test files
    will be located.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thanks to Yii's extremely flexible structure, we can reorganize our bootstrap
    and entry script files to be in many different physical locations on our file
    system. Because of this flexibility, the console configuration file expects us
    to declare the `@test` alias explicitly so that we can run our console tests.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the console environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following the same convention we set up for our web application, we now need
    to instruct our console to pass the `APPLICATION_ENV` variable to our console
    application. From the command line, we can easily change the environment by exporting
    a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to make this change permanent for the server we are working on, we
    can store this variable in our `~/.bash_profile` file, or we can store it globally
    for all users at `/etc/profile`. By adding this command to either of these files,
    the next time we log in to our shell, this variable will automatically be exported.
    Note that if you're using Windows, you'll need to export this variable to your
    `%path%` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and give it a try! Log out and log in to your shell again and run
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If your computer is configured correctly, you should see the environment outputted
    to your screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Running console commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With our console application now configured, we can easily run our console
    commands by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Windows, this command is `yii.bat`.
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with Yii1, this command has now replaced the `/yiic` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without any arguments, this is the same as running `/yii help` and will output
    the help menu, which lists all the built-in console commands for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Running console commands](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yii provides additional help information for each of the default commands.
    For example, if we want to see what subcommands exist for the cache command, we
    can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Running console commands](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In general, we can reduce the usage of the Yii console to the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `<route>` refers to the specific controller and action that we want to
    run. For example, if we wanted to flush the entire cache for our application from
    the console, we could run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output we receive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `./yii` command also enables you to use alternative console configuration
    files from the same command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Without having to change anything in our code, we can simply instruct Yii to
    use an alternate configuration file, which can contain anything, ranging from
    something as simple as a reference to another database or cache to something more
    complex such as an entirely different controller namespace. This option is especially
    useful when creating applications that have both a frontend and a backend that
    may contain different caches or database components.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in console commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know how to run console commands, let''s take a look at the built-in
    commands to see how they work. As shown previously, Yii2 has seven built-in console
    commands: `help`, `asset`, `cache`, `fixtures`, `gii`, `message`, and `migrate`.
    During the development of our application, we''re likely to use all seven in order
    to make our application more robust. Let''s take a look at each one in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: The help command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first command built in to Yii2 is the `help` command. Often when running
    console commands, you may not know what options a certain command needs. Rather
    than referencing the Yii2 documentation, you can use the `help` command to provide
    you with all the core information you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the most basic level, the `help` command will output all the currently available
    console commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Some commands contain additional subcommands that can be run. To view a list
    of all the available subcommands for a given command, you can run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Some subcommands, such as those found in the Gii tool, require additional options
    to be passed to them in order for them to function. To see a list of all the required
    and optional flags for a given subcommand, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As we move through the next sections, ensure that you use the `help` command
    to see all the possible options and requirements for each command.
  prefs: []
  type: TYPE_NORMAL
- en: The asset command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second default set of commands in our toolbox is the set of `asset` commands,
    which include `asset/template` and `asset/compress`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command, `asset/template`, is used to generate a configuration file
    to automate the compression and minification of JavaScript and CSS assets, and
    it is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Running this command will generate a new file at `path/to/asset.php`, containing
    build instructions that are used by the next command, `asset/compress`. This file
    outlines which CSS and JavaScript compressor to use, a list of asset bundles to
    be compressed, a set of targets that the compressed assets will be outputted to,
    and any custom configuration for our `assetManager`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next command, `asset/compress`, reads our generated configuration file
    and builds the compressed asset files and a referable asset bundle configuration
    that we can load into our layouts and/or views. This command is called using the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 6](part0039_split_000.html#1565U2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 6. Asset Management"), *Asset Management*, we will take an in-depth look
    at how we can use these commands in addition to the `assetManager` class in order
    to manage our assets in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The cache command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The third built-in command in our toolbox is the `cache` command. The `cache`
    command provides the functionality to flush caches that are generated by our application.
    These commands are `cache`, `cache/flush`, `cache/flush-all`, and `cache/flush-schema`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command, `cache`, returns a named list of all the available caches
    defined in our configuration file and can be run using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command takes the following format so that we can identify
    which caches are in use. In our default application, only one cache is predefined:
    our file cache.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we know what caches are in use, we can then use the `cache/flush` command
    to flush that cache by name. Using the output of the previous command, we can
    clear the cache component by name by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some commands in Yii2 are interactive and prompt for confirmation before running.
    This may be problematic when you need to automate the use of a command, such as
    on deployment. You can bypass this behavior by appending `--interactive=0` to
    the command. When running commands noninteractively, additional arguments may
    be required. Ensure that you reference the `help` command to determine what arguments
    you need to pass when running noninteractive commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, if we want to flush the entire cache for our application, we
    can use the `cache/flush-all` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In our production environments, we''ll want to reduce the load on our database
    server by caching our database schema. Yii2 will maintain a cache of the currently
    active `db` component (the database) and the database schema when instructed to.
    When making schema changes, such as when applying new migrations, we need to clear
    this cache so that Yii2 becomes aware of our updated database structure. We can
    clear the database schema cache by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll cover how to enable the schema cache and improve the performance of our
    database in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The fixture command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When testing our application, we'll often want to set up our database such that
    our tests always run in a predictable and repeatable way. One way in which we
    can do this is by creating **fixtures**, which will represent database objects
    in our application for testing. Yii2 provides a set of commands to both load and
    unload fixtures; these commands are `fixture/load` and `fixture/unload`, and they
    do exactly what you expect them to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using fixtures, our typical test flow is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply database migrations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute our test cases in the following manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load our database fixtures.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute a specific test.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Unload our database fixtures.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat as required until all tests have run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `fixture/load` and `fixture/unload` commands are called in the same way
    from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixtures are a powerful way to create repeatable tests for our applications.
    Additionally, the `yii2-codeception` package provides additional support for the
    loading and unloading of fixtures when our tests run. In [Chapter 10](part0060_split_000.html#1P71O1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 10. Testing with Codeception"), *Testing with Codeception*, we'll cover
    how to creature new fixtures and how to integrate them with Codeception.
  prefs: []
  type: TYPE_NORMAL
- en: The Gii command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next set of commands in our toolbox is the `Gii` command. If you are familiar
    with Yii1, Gii provides the functionality to generate controllers, models, forms,
    and even basic CRUD functionality. In Yii2, Gii has been extended from a web application
    module to both a web and console application and has been enhanced to include
    additional features as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Gii` module in Yii2 provides these console commands to automatically generate
    code: `gii/controller`, `gii/model`, `gii/crud`, `gii/form`, `gii/extension`,
    and `gii/module`. Each of these commands, when supplied with the right options,
    will generate the respective item identified by the subcommand. For a complete
    list of requirements and options, ensure that you use the `help` command on the
    `Gii` subcommands.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a development tool, Gii has the ability to arbitrarily generate and override
    existing code in your application. For security purposes, you should conditionally
    load the `Gii` module only in your development environment. Moreover, the `Gii`
    module itself should never be deployed to your production environment. For this
    reason, it is advised that you only load the `Gii` module in the `require-dev`
    section of your `composer.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: The `require-dev` section is a special section within our `composer.json` file,
    which allows us to separate our development dependencies from our production dependencies.
    By default, running Composer will install all packages in our `require` and `require-dev`
    sections. In production environments, we will want to exclude our development
    environments by passing the `--no-dev` flag to our Composer installation command.
    For more information on the Composer CLI, ensure that you reference the Composer
    documentation at [https://getcomposer.org/doc/03-cli.md](https://getcomposer.org/doc/03-cli.md).
  prefs: []
  type: TYPE_NORMAL
- en: The message command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next set of commands is the `message` commands, which provide functionalities
    to automatically generate message translations for our application in a variety
    of different formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first subcommand is the `message/config` command, which generates a configuration
    file that the `message/extract` command will then use to output the translation
    files. Before generating any translations, we must run the `message/config` command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This command generates a configuration file at `/path/to/translation/config.php`
    that contains all the information `message/extract` will need in order to generate
    the message output files.
  prefs: []
  type: TYPE_NORMAL
- en: 'After configuring your message configuration file to your liking, you can then
    run the `message/extract` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Depending upon your configuration file and the use of `\Yii::t()`, the built-in
    Yii translation tool in your application, this command will generate either a
    PHP file containing a list of messages, a `.po` file, and a command translation
    file format, or it will populate the specified table in your database with the
    necessary message lists.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 11](part0068_split_000.html#20R681-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 11. Internationalization and Localization"), *Internationalization and
    Localization*, we'll go into more depth about how to use these commands to generate
    PHP message files and `.po` files and how to populate our database. We'll also
    cover the use of the `Yii::t()` method in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The migration command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final built-in command set with Yii2 is the `migration` command. The `migration`
    commands provide functionalities to generate, apply, revert, and review database
    migrations. This tool provides these subcommands: `migrate/create`, `migrate/history`,
    `migrate/mark`, `migrate/up`, `migrate/down`, `migrate/to`, `migrate/new`, and
    `migrate/redo`.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll cover how to completely use this tool and work with databases in general
    in more detail in [Chapter 3](part0023_split_000.html#LTSU1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 3. Migrations, DAO, and Query Building"), *Migrations, DAO, and Query
    Building*. For now, use the `./yii help migrate` command to view more information
    on the migration tool.
  prefs: []
  type: TYPE_NORMAL
- en: Creating console commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know what built-in commands Yii2 provides, let''s start adding
    our own commands. In Yii2, any custom commands we write are going to be stored
    in the `/commands` subfolder of our application. If this folder doesn''t exist
    yet, go ahead and create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s write a basic console command that just outputs some text:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create a new file called `BasicController.php` in the `commands`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s write some PHP code. First, we need to declare the namespace that
    our `BasicController` lives in. This namespace directly corresponds to the `controllerNamespace`
    parameter we defined in `config/console.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll want to declare that we want to use the `\yii\console\Controller`
    class in our new controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll declare our controller class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, inside our class, we''ll create an `actionIndex()` method that will
    simply output `HelloWorld` and then gracefully return with a successful error
    code. By default, the `actionIndex()` method is the method that is called when
    an action is not specified to a controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have our first console command! Now, if we run the `help` command, you can
    see that our command appears in the list of available commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating console commands](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Moreover, we can now execute our command to verify that it functions properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Generating help information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While we can now run our commands, the `help` command for both the global help
    menu and the action help menu currently doesn''t provide any useful information.
    In Yii2, this information is extracted directly from the document block comments
    (also known as `DocBlock` comments) that are used before our `BasicController`
    class and our `actionIndex()` method. For instance, consider that we add the following
    before our class declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also provide more information to our `actionIndex()` method by specifying
    a `DocBlock` comment before the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the `help` command on the basic controller would then display the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '![Generating help information](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Passing command-line arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like our web controllers (`yii\web\Controller`), we can also pass arguments
    through the command line to our console commands. Rather than using `$_GET` parameters
    to determine the arguments in use, Yii2 will pull the arguments directly from
    the command-line interface. Take, for instance, the following method of our `BasicController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `help` command now shows us what arguments are required and what arguments
    are optional for this new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![Passing command-line arguments](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By now, you may have noticed that console commands can accept two types of
    input: arguments, (in this example, `name` and `city`), and options. Arguments
    serve as the data that we provide to your actions. On the other hand, options
    allow us to specify additional configuration for our controller in general. For
    instance, as previously shown, we can run our commands noninteractively by passing
    the `--interactve=0` flag option. Each console application we create and use may
    have separate options that we can set. Ensure that you reference the Yii2 documentation
    for that class and use the `help` command to determine what options are available
    for each command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Without any arguments, this command will throw the following error, indicating
    that the `name` parameter is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we provide the name, the console outputs the result as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'By providing a default value to the `city` parameter, that option is not required
    for our command to be executed. However, if we passed a value as the second parameter,
    it would override our default value as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending upon how your shell is configured, you may not be able to pass certain
    characters (such as `$` or `*`) from the command line. Ensure that you wrap any
    strings that use special characters in quotes to ensure that the full argument
    is passed to your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to simple strings, Yii2 will also accept arrays in the form of
    comma-separated lists. Take, for instance, the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'By type-hinting the first parameter using the array `type-hint`, we can notify
    Yii to convert the command-line arguments into a usable PHP array. From the command
    line, we can specify an element as an array by representing it as a comma-separated
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output that will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii2 does not support the use of multidimensional arrays from the command line.
    If you need to pass a multidimensional array of data from the command line, you
    can pass a path to a configuration file instead and then load that file inside
    your controller action.
  prefs: []
  type: TYPE_NORMAL
- en: The options to store this data range from a PHP file, which returns an array
    of data, to a JSON- or YAML-formatted file, which would be loaded and converted
    to a PHP array within your controller action.
  prefs: []
  type: TYPE_NORMAL
- en: Exit codes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As shown in our previous examples, each action we've written thus far has a
    return value of `0`. While returning from our controller action isn't strictly
    necessary, it's considered a best practice so that our shell can be notified whether
    our console command has been executed successfully or not. By convention, an exit
    code of `0` indicates that our command ran without errors, whereas any positive
    integer greater than zero would indicate that a specific error occurred. The number
    returned will be the error code that is returned to the shell, and it can be used
    by our end users to reference our application documentation or support forum to
    identify what went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose, for instance, that we wanted to validate one of our inputs without
    diving into custom forms and validators. In this example, we want our input of
    `$shouldRun` to be a positive nonzero integer. If that integer is less than zero,
    we could return an error code that our documentation would be able to reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, Yii2 provides some predefined constants for us to work with:
    `Controller::EXIT_CODE_NORMAL`, which has a value of `0`, and `Controller::EXIT_CODE_ERROR`,
    which has a value of `1`. If you have more than one return code, it is considered
    a good practice to define meaningful constants in your controller to identify
    your error code.'
  prefs: []
  type: TYPE_NORMAL
- en: Formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yii2 provides support for the formatting of the output of our console commands.
    This is provided through the `yii\helpers\Console` helper. Before we can use this
    helper, we need to import it into our class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'With this helper loaded, we can now use either the `stdout()` method from `\yii\console\Controller`
    or the `ansiFormat()` method. While both methods will format text, the `ansiFormat()`
    method can be used to dynamically combine multiple strings with different formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, if we run our new console command, we can see how our output text changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '![Formatting](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A complete list of available constants is available in the Yii2 documentation
    at [http://www.yiiframework.com/doc-2.0/yii-helpers-baseconsole.html](http://www.yiiframework.com/doc-2.0/yii-helpers-baseconsole.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how to configure Yii to run console commands in
    a manner consistent with our web applications. We also covered the seven built-in
    console commands in brief. Additionally, we covered how to create our own console
    commands, how to pass parameters to our command, how to return values properly
    from within our code, and how to format the output of our commands.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll expand our mastery of Yii by learning how to use
    and write migrations, how to use **database access objects** (**DAO**), and how
    to use Yii's built-in Query Builder.
  prefs: []
  type: TYPE_NORMAL
