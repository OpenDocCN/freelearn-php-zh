- en: Chapter 2. Console Commands and Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often when building modern web applications, we need to write background and
    maintenance tasks to support our main application. These tasks may include things
    such as generating reports, sending e-mails via a queuing system, or even running
    data analysis that would cause a web-based endpoint to timeout. With Yii2, we
    can build these tools and scripts directly into our application by writing console
    commands or even complete console applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Configuration and usage
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic structure of Yii2 console applications is very similar to the structure
    used in web applications. In Yii2, console commands that extend from `yii\console\Controller`
    are nearly identical to `yii\web\Controller`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Entry script
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before moving on to the configuration files themselves, let''s take a look
    at the console entry script, which is part of the file called `yii`. This entry
    script serves as the bootstrapper for all our console commands, and in general,
    they can be run by calling this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will output all the currently available commands for the system.
    Like the `web/index.php` entry script, though, it isn''t aware of its environment
    yet. We can change this by replacing `yii` with the following code block:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This script is intended for Linux-like environments. Yii2 also provides a `yii.bat`
    file that can be run on Windows. If you're following along on a Windows computer,
    ensure that you change `yii.bat` in addition to the yii file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: With our entry script files configured, we're ready to take a look at our application
    configuration files.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may also notice that in the `web/` folder, there is a separate entry script
    called `index-test.php`. This script is used by Codeception, a testing framework
    that is used to run unit, functional, and acceptance tests in Yii2\. We'll cover
    how to configure and use this entry script and Codeception in [Chapter 10](part0060_split_000.html#1P71O1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 10. Testing with Codeception"), *Testing with Codeception*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Yii2, the console configuration file is located at `config/console.php`
    and is nearly identical to our web configuration file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Like our web configuration file, we can include our database and parameters'
    configuration files using the environment-aware configurations we wrote in [Chapter
    1](part0014_split_000.html#DB7S2-ad3e09b384df46aea690d9c8897d5fe7 "Chapter 1. Composer,
    Configuration, Classes, and Path Aliases"), *Composer, Configuration, Classes,
    and Path Aliases*. In fact, the only major difference between our web and console
    configuration is the explicit declaration of our console command namespace and
    the explicit declaration of the `@test` alias, which defines where our test files
    will be located.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thanks to Yii's extremely flexible structure, we can reorganize our bootstrap
    and entry script files to be in many different physical locations on our file
    system. Because of this flexibility, the console configuration file expects us
    to declare the `@test` alias explicitly so that we can run our console tests.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Yii 极其灵活的结构，我们可以重新组织我们的引导和入口脚本文件，使它们位于文件系统的许多不同物理位置。正因为这种灵活性，控制台配置文件期望我们显式声明
    `@test` 别名，这样我们就可以运行我们的控制台测试。
- en: Setting the console environment
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置控制台环境
- en: 'Following the same convention we set up for our web application, we now need
    to instruct our console to pass the `APPLICATION_ENV` variable to our console
    application. From the command line, we can easily change the environment by exporting
    a variable:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按照我们为我们的 Web 应用程序设置的相同约定，我们现在需要指示我们的控制台将 `APPLICATION_ENV` 变量传递给我们的控制台应用程序。从命令行，我们可以轻松地通过导出一个变量来更改环境：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If we want to make this change permanent for the server we are working on, we
    can store this variable in our `~/.bash_profile` file, or we can store it globally
    for all users at `/etc/profile`. By adding this command to either of these files,
    the next time we log in to our shell, this variable will automatically be exported.
    Note that if you're using Windows, you'll need to export this variable to your
    `%path%` variable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将此更改永久应用于我们正在工作的服务器，我们可以将此变量存储在我们的 `~/.bash_profile` 文件中，或者我们可以将其存储在 `/etc/profile`
    中，以便为所有用户全局存储。通过将这些命令添加到这些文件之一，下次我们登录到 shell 时，此变量将自动导出。请注意，如果你使用 Windows，你需要将此变量导出到你的
    `%path%` 变量中。
- en: 'Go ahead and give it a try! Log out and log in to your shell again and run
    the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，试试看！退出并再次登录到你的 shell，然后运行以下命令：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If your computer is configured correctly, you should see the environment outputted
    to your screen.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的计算机配置正确，你应该会在屏幕上看到环境输出。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Running console commands
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行控制台命令
- en: 'With our console application now configured, we can easily run our console
    commands by running the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了控制台应用程序，我们可以通过运行以下命令轻松运行我们的控制台命令：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: On Windows, this command is `yii.bat`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，此命令是 `yii.bat`。
- en: If you are familiar with Yii1, this command has now replaced the `/yiic` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 Yii1，此命令已取代了 `/yiic` 命令。
- en: 'Without any arguments, this is the same as running `/yii help` and will output
    the help menu, which lists all the built-in console commands for our application:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供任何参数，这等同于运行 `/yii help` 并输出帮助菜单，列出我们应用程序的所有内置控制台命令：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Running console commands](img/00002.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![运行控制台命令](img/00002.jpeg)'
- en: 'Yii provides additional help information for each of the default commands.
    For example, if we want to see what subcommands exist for the cache command, we
    can run the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 为每个默认命令提供了额外的帮助信息。例如，如果我们想查看缓存命令的子命令，我们可以运行以下命令：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Running console commands](img/00003.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![运行控制台命令](img/00003.jpeg)'
- en: 'In general, we can reduce the usage of the Yii console to the following pattern:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们可以将 Yii 控制台的使用减少到以下模式：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, `<route>` refers to the specific controller and action that we want to
    run. For example, if we wanted to flush the entire cache for our application from
    the console, we could run the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<route>` 指的是我们想要运行的特定控制器和操作。例如，如果我们想从控制台刷新我们应用程序的整个缓存，我们可以运行以下命令：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is the output we receive:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的输出结果：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `./yii` command also enables you to use alternative console configuration
    files from the same command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`./yii` 命令还允许你从同一命令使用替代的控制台配置文件：'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Without having to change anything in our code, we can simply instruct Yii to
    use an alternate configuration file, which can contain anything, ranging from
    something as simple as a reference to another database or cache to something more
    complex such as an entirely different controller namespace. This option is especially
    useful when creating applications that have both a frontend and a backend that
    may contain different caches or database components.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要修改我们的代码，我们只需指示 Yii 使用一个替代的配置文件，这个文件可以包含任何内容，从简单的引用另一个数据库或缓存到更复杂的，如完全不同的控制器命名空间。这个选项在创建具有前端和后端的应用程序时特别有用，因为它们可能包含不同的缓存或数据库组件。
- en: Built-in console commands
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置控制台命令
- en: 'Now that we know how to run console commands, let''s take a look at the built-in
    commands to see how they work. As shown previously, Yii2 has seven built-in console
    commands: `help`, `asset`, `cache`, `fixtures`, `gii`, `message`, and `migrate`.
    During the development of our application, we''re likely to use all seven in order
    to make our application more robust. Let''s take a look at each one in more detail.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何运行控制台命令，让我们来看看内置命令的工作方式。如前所述，Yii2有七个内置控制台命令：`help`、`asset`、`cache`、`fixtures`、`gii`、`message`和`migrate`。在我们应用程序的开发过程中，我们可能会使用所有七个命令来使我们的应用程序更加健壮。让我们更详细地查看每一个。
- en: The help command
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帮助命令
- en: The first command built in to Yii2 is the `help` command. Often when running
    console commands, you may not know what options a certain command needs. Rather
    than referencing the Yii2 documentation, you can use the `help` command to provide
    you with all the core information you need.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 建入Yii2的第一个命令是`help`命令。在运行控制台命令时，您可能不知道某个命令需要哪些选项。与其参考Yii2文档，您可以使用`help`命令来提供您所需的所有核心信息。
- en: 'At the most basic level, the `help` command will output all the currently available
    console commands:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的情况下，`help`命令将输出所有当前可用的控制台命令：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Some commands contain additional subcommands that can be run. To view a list
    of all the available subcommands for a given command, you can run this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一些命令包含可以运行的附加子命令。要查看给定命令的所有可用子命令的列表，您可以运行此命令：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Some subcommands, such as those found in the Gii tool, require additional options
    to be passed to them in order for them to function. To see a list of all the required
    and optional flags for a given subcommand, you can run the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一些子命令，例如在Gii工具中找到的，需要传递额外的选项以便它们能够运行。要查看给定子命令的所有必需和可选标志的列表，您可以运行以下命令：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As we move through the next sections, ensure that you use the `help` command
    to see all the possible options and requirements for each command.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进入下一部分，请确保您使用`help`命令来查看每个命令的所有可能选项和需求。
- en: The asset command
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产命令
- en: The second default set of commands in our toolbox is the set of `asset` commands,
    which include `asset/template` and `asset/compress`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工具箱中的第二套默认命令集是`asset`命令集，包括`asset/template`和`asset/compress`。
- en: 'The first command, `asset/template`, is used to generate a configuration file
    to automate the compression and minification of JavaScript and CSS assets, and
    it is used as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令`asset/template`用于生成一个配置文件来自动化压缩和最小化JavaScript和CSS资源，其用法如下：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Running this command will generate a new file at `path/to/asset.php`, containing
    build instructions that are used by the next command, `asset/compress`. This file
    outlines which CSS and JavaScript compressor to use, a list of asset bundles to
    be compressed, a set of targets that the compressed assets will be outputted to,
    and any custom configuration for our `assetManager`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将在`path/to/asset.php`生成一个新文件，其中包含由下一个命令`asset/compress`使用的构建指令。此文件概述了要使用的CSS和JavaScript压缩器、要压缩的资源包列表、压缩资源将输出的目标集合以及针对我们的`assetManager`的任何自定义配置。
- en: 'The next command, `asset/compress`, reads our generated configuration file
    and builds the compressed asset files and a referable asset bundle configuration
    that we can load into our layouts and/or views. This command is called using the
    following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令`asset/compress`读取我们生成的配置文件，构建压缩的资源文件和一个可引用的资源包配置，我们可以将其加载到我们的布局和/或视图中。此命令的调用方式如下：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In [Chapter 6](part0039_split_000.html#1565U2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 6. Asset Management"), *Asset Management*, we will take an in-depth look
    at how we can use these commands in addition to the `assetManager` class in order
    to manage our assets in more detail.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](part0039_split_000.html#1565U2-ad3e09b384df46aea690d9c8897d5fe7 "第6章。资产管理")中，我们将深入探讨我们如何使用这些命令以及`assetManager`类来更详细地管理我们的资源。
- en: The cache command
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存命令
- en: The third built-in command in our toolbox is the `cache` command. The `cache`
    command provides the functionality to flush caches that are generated by our application.
    These commands are `cache`, `cache/flush`, `cache/flush-all`, and `cache/flush-schema`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工具箱中的第三个内置命令是`cache`命令。`cache`命令提供了清除由我们的应用程序生成的缓存的功能。这些命令是`cache`、`cache/flush`、`cache/flush-all`和`cache/flush-schema`。
- en: 'The first command, `cache`, returns a named list of all the available caches
    defined in our configuration file and can be run using the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令`cache`返回配置文件中定义的所有可用缓存的命名列表，可以使用以下命令运行：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s the output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出结果：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of this command takes the following format so that we can identify
    which caches are in use. In our default application, only one cache is predefined:
    our file cache.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出格式如下，以便我们可以识别正在使用的缓存。在我们的默认应用程序中，只有一个缓存被预定义：我们的文件缓存。
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once we know what caches are in use, we can then use the `cache/flush` command
    to flush that cache by name. Using the output of the previous command, we can
    clear the cache component by name by running this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道正在使用哪些缓存，我们就可以使用`cache/flush`命令通过名称刷新该缓存。使用上一条命令的输出，我们可以通过运行以下命令来按名称清除缓存组件：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here''s the output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出结果：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Some commands in Yii2 are interactive and prompt for confirmation before running.
    This may be problematic when you need to automate the use of a command, such as
    on deployment. You can bypass this behavior by appending `--interactive=0` to
    the command. When running commands noninteractively, additional arguments may
    be required. Ensure that you reference the `help` command to determine what arguments
    you need to pass when running noninteractive commands.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2中的一些命令是交互式的，在运行前会提示确认。当你需要自动化命令的使用时，例如在部署时，这可能会出现问题。你可以通过在命令后附加`--interactive=0`来绕过此行为。在非交互式运行命令时，可能需要额外的参数。确保你参考`help`命令，以确定在运行非交互式命令时需要传递哪些参数。
- en: 'Alternatively, if we want to flush the entire cache for our application, we
    can use the `cache/flush-all` option:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们想刷新我们应用程序的整个缓存，我们可以使用`cache/flush-all`选项：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In our production environments, we''ll want to reduce the load on our database
    server by caching our database schema. Yii2 will maintain a cache of the currently
    active `db` component (the database) and the database schema when instructed to.
    When making schema changes, such as when applying new migrations, we need to clear
    this cache so that Yii2 becomes aware of our updated database structure. We can
    clear the database schema cache by running this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的生产环境中，我们希望通过缓存数据库模式来减少数据库服务器的负载。当被指示时，Yii2将维护当前活动的`db`组件（数据库）和数据库模式的缓存。当进行模式更改，例如应用新的迁移时，我们需要清除此缓存，以便Yii2能够意识到我们的更新后的数据库结构。我们可以通过运行以下命令来清除数据库模式缓存：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We'll cover how to enable the schema cache and improve the performance of our
    database in the next chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中介绍如何启用模式缓存并提高数据库的性能。
- en: The fixture command
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定数据命令
- en: When testing our application, we'll often want to set up our database such that
    our tests always run in a predictable and repeatable way. One way in which we
    can do this is by creating **fixtures**, which will represent database objects
    in our application for testing. Yii2 provides a set of commands to both load and
    unload fixtures; these commands are `fixture/load` and `fixture/unload`, and they
    do exactly what you expect them to do.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试我们的应用程序时，我们通常会想要设置数据库，以便我们的测试始终以可预测和可重复的方式进行。我们可以做到这一点的一种方式是创建**固定数据**，这将在我们的应用程序中代表测试中的数据库对象。Yii2提供了一套命令来加载和卸载数据固定数据；这些命令是`fixture/load`和`fixture/unload`，它们确实如你所期望的那样工作。
- en: 'When using fixtures, our typical test flow is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用固定数据时，我们的典型测试流程如下：
- en: Apply database migrations.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用数据库迁移。
- en: 'Execute our test cases in the following manner:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式执行我们的测试用例：
- en: Load our database fixtures.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载我们的数据库固定数据。
- en: Execute a specific test.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行特定的测试。
- en: Unload our database fixtures.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卸载我们的数据库固定数据。
- en: Repeat as required until all tests have run.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按需重复，直到所有测试都运行完毕。
- en: 'The `fixture/load` and `fixture/unload` commands are called in the same way
    from the command line:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`fixture/load`和`fixture/unload`命令以相同的方式从命令行调用：'
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Fixtures are a powerful way to create repeatable tests for our applications.
    Additionally, the `yii2-codeception` package provides additional support for the
    loading and unloading of fixtures when our tests run. In [Chapter 10](part0060_split_000.html#1P71O1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 10. Testing with Codeception"), *Testing with Codeception*, we'll cover
    how to creature new fixtures and how to integrate them with Codeception.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 固定数据是创建我们应用程序可重复测试的强大方式。此外，`yii2-codeception`包在测试运行时提供了加载和卸载固定数据的额外支持。在[第10章](part0060_split_000.html#1P71O1-ad3e09b384df46aea690d9c8897d5fe7
    "第10章。使用Codeception进行测试")，*使用Codeception进行测试*中，我们将介绍如何创建新的固定数据以及如何将其与Codeception集成。
- en: The Gii command
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next set of commands in our toolbox is the `Gii` command. If you are familiar
    with Yii1, Gii provides the functionality to generate controllers, models, forms,
    and even basic CRUD functionality. In Yii2, Gii has been extended from a web application
    module to both a web and console application and has been enhanced to include
    additional features as well.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Gii` module in Yii2 provides these console commands to automatically generate
    code: `gii/controller`, `gii/model`, `gii/crud`, `gii/form`, `gii/extension`,
    and `gii/module`. Each of these commands, when supplied with the right options,
    will generate the respective item identified by the subcommand. For a complete
    list of requirements and options, ensure that you use the `help` command on the
    `Gii` subcommands.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a development tool, Gii has the ability to arbitrarily generate and override
    existing code in your application. For security purposes, you should conditionally
    load the `Gii` module only in your development environment. Moreover, the `Gii`
    module itself should never be deployed to your production environment. For this
    reason, it is advised that you only load the `Gii` module in the `require-dev`
    section of your `composer.json` file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: The `require-dev` section is a special section within our `composer.json` file,
    which allows us to separate our development dependencies from our production dependencies.
    By default, running Composer will install all packages in our `require` and `require-dev`
    sections. In production environments, we will want to exclude our development
    environments by passing the `--no-dev` flag to our Composer installation command.
    For more information on the Composer CLI, ensure that you reference the Composer
    documentation at [https://getcomposer.org/doc/03-cli.md](https://getcomposer.org/doc/03-cli.md).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: The message command
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next set of commands is the `message` commands, which provide functionalities
    to automatically generate message translations for our application in a variety
    of different formats.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'The first subcommand is the `message/config` command, which generates a configuration
    file that the `message/extract` command will then use to output the translation
    files. Before generating any translations, we must run the `message/config` command
    as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This command generates a configuration file at `/path/to/translation/config.php`
    that contains all the information `message/extract` will need in order to generate
    the message output files.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'After configuring your message configuration file to your liking, you can then
    run the `message/extract` command as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Depending upon your configuration file and the use of `\Yii::t()`, the built-in
    Yii translation tool in your application, this command will generate either a
    PHP file containing a list of messages, a `.po` file, and a command translation
    file format, or it will populate the specified table in your database with the
    necessary message lists.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 11](part0068_split_000.html#20R681-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 11. Internationalization and Localization"), *Internationalization and
    Localization*, we'll go into more depth about how to use these commands to generate
    PHP message files and `.po` files and how to populate our database. We'll also
    cover the use of the `Yii::t()` method in detail.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: The migration command
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final built-in command set with Yii2 is the `migration` command. The `migration`
    commands provide functionalities to generate, apply, revert, and review database
    migrations. This tool provides these subcommands: `migrate/create`, `migrate/history`,
    `migrate/mark`, `migrate/up`, `migrate/down`, `migrate/to`, `migrate/new`, and
    `migrate/redo`.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll cover how to completely use this tool and work with databases in general
    in more detail in [Chapter 3](part0023_split_000.html#LTSU1-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 3. Migrations, DAO, and Query Building"), *Migrations, DAO, and Query
    Building*. For now, use the `./yii help migrate` command to view more information
    on the migration tool.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Creating console commands
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know what built-in commands Yii2 provides, let''s start adding
    our own commands. In Yii2, any custom commands we write are going to be stored
    in the `/commands` subfolder of our application. If this folder doesn''t exist
    yet, go ahead and create it:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, let''s write a basic console command that just outputs some text:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create a new file called `BasicController.php` in the `commands`
    folder:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, let''s write some PHP code. First, we need to declare the namespace that
    our `BasicController` lives in. This namespace directly corresponds to the `controllerNamespace`
    parameter we defined in `config/console.php`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, we''ll want to declare that we want to use the `\yii\console\Controller`
    class in our new controller:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, we''ll declare our controller class as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, inside our class, we''ll create an `actionIndex()` method that will
    simply output `HelloWorld` and then gracefully return with a successful error
    code. By default, the `actionIndex()` method is the method that is called when
    an action is not specified to a controller:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We have our first console command! Now, if we run the `help` command, you can
    see that our command appears in the list of available commands:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Creating console commands](img/00004.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'Moreover, we can now execute our command to verify that it functions properly:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This is the output:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Generating help information
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While we can now run our commands, the `help` command for both the global help
    menu and the action help menu currently doesn''t provide any useful information.
    In Yii2, this information is extracted directly from the document block comments
    (also known as `DocBlock` comments) that are used before our `BasicController`
    class and our `actionIndex()` method. For instance, consider that we add the following
    before our class declaration:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We could also provide more information to our `actionIndex()` method by specifying
    a `DocBlock` comment before the method:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Running the `help` command on the basic controller would then display the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '![Generating help information](img/00005.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: Passing command-line arguments
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like our web controllers (`yii\web\Controller`), we can also pass arguments
    through the command line to our console commands. Rather than using `$_GET` parameters
    to determine the arguments in use, Yii2 will pull the arguments directly from
    the command-line interface. Take, for instance, the following method of our `BasicController`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `help` command now shows us what arguments are required and what arguments
    are optional for this new method:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![Passing command-line arguments](img/00006.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By now, you may have noticed that console commands can accept two types of
    input: arguments, (in this example, `name` and `city`), and options. Arguments
    serve as the data that we provide to your actions. On the other hand, options
    allow us to specify additional configuration for our controller in general. For
    instance, as previously shown, we can run our commands noninteractively by passing
    the `--interactve=0` flag option. Each console application we create and use may
    have separate options that we can set. Ensure that you reference the Yii2 documentation
    for that class and use the `help` command to determine what options are available
    for each command.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Without any arguments, this command will throw the following error, indicating
    that the `name` parameter is required:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Once we provide the name, the console outputs the result as expected:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This is the output:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'By providing a default value to the `city` parameter, that option is not required
    for our command to be executed. However, if we passed a value as the second parameter,
    it would override our default value as expected:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Here''s the output:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Tip
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending upon how your shell is configured, you may not be able to pass certain
    characters (such as `$` or `*`) from the command line. Ensure that you wrap any
    strings that use special characters in quotes to ensure that the full argument
    is passed to your application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to simple strings, Yii2 will also accept arrays in the form of
    comma-separated lists. Take, for instance, the following method:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'By type-hinting the first parameter using the array `type-hint`, we can notify
    Yii to convert the command-line arguments into a usable PHP array. From the command
    line, we can specify an element as an array by representing it as a comma-separated
    list:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This is the output that will appear:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Tip
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii2 does not support the use of multidimensional arrays from the command line.
    If you need to pass a multidimensional array of data from the command line, you
    can pass a path to a configuration file instead and then load that file inside
    your controller action.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: The options to store this data range from a PHP file, which returns an array
    of data, to a JSON- or YAML-formatted file, which would be loaded and converted
    to a PHP array within your controller action.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Exit codes
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As shown in our previous examples, each action we've written thus far has a
    return value of `0`. While returning from our controller action isn't strictly
    necessary, it's considered a best practice so that our shell can be notified whether
    our console command has been executed successfully or not. By convention, an exit
    code of `0` indicates that our command ran without errors, whereas any positive
    integer greater than zero would indicate that a specific error occurred. The number
    returned will be the error code that is returned to the shell, and it can be used
    by our end users to reference our application documentation or support forum to
    identify what went wrong.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose, for instance, that we wanted to validate one of our inputs without
    diving into custom forms and validators. In this example, we want our input of
    `$shouldRun` to be a positive nonzero integer. If that integer is less than zero,
    we could return an error code that our documentation would be able to reference:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Additionally, Yii2 provides some predefined constants for us to work with:
    `Controller::EXIT_CODE_NORMAL`, which has a value of `0`, and `Controller::EXIT_CODE_ERROR`,
    which has a value of `1`. If you have more than one return code, it is considered
    a good practice to define meaningful constants in your controller to identify
    your error code.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Formatting
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yii2 provides support for the formatting of the output of our console commands.
    This is provided through the `yii\helpers\Console` helper. Before we can use this
    helper, we need to import it into our class:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'With this helper loaded, we can now use either the `stdout()` method from `\yii\console\Controller`
    or the `ansiFormat()` method. While both methods will format text, the `ansiFormat()`
    method can be used to dynamically combine multiple strings with different formats:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, if we run our new console command, we can see how our output text changes:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![Formatting](img/00007.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A complete list of available constants is available in the Yii2 documentation
    at [http://www.yiiframework.com/doc-2.0/yii-helpers-baseconsole.html](http://www.yiiframework.com/doc-2.0/yii-helpers-baseconsole.html).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how to configure Yii to run console commands in
    a manner consistent with our web applications. We also covered the seven built-in
    console commands in brief. Additionally, we covered how to create our own console
    commands, how to pass parameters to our command, how to return values properly
    from within our code, and how to format the output of our commands.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll expand our mastery of Yii by learning how to use
    and write migrations, how to use **database access objects** (**DAO**), and how
    to use Yii's built-in Query Builder.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
