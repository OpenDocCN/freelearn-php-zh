- en: Chapter 1. A Task-management Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best ways to get started with the Yii framework is by making useful
    applications. The first application that will be covered in this book is a simple
    task management application. In this chapter, we will cover the planning of the
    development of this project, developing the application, and creating useful components
    that we will reuse in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Describing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important steps in starting a new project is planning it. By
    planning the project before we begin programming, we can easily identify most
    (if not all) models that our application will use, key features that we'll need
    to implement, as well as any areas that may cause us problems while developing
    our applications. Breaking down the project beforehand also helps us estimate
    how long it will take to develop each part of our applications as well as the
    application as a whole. While requirements and expectations for our application
    will most likely change during its development, identifying the core components
    of your application will help ensure that the core functionality of our application
    works as we intend.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our task management application, there are two main components: tasks and
    projects. Let''s break each of these components down.'
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first component of our application is tasks. A task is an item that needs
    to be done by our user and usually consists of a brief, concise title, and a description
    of what needs to be done to complete that task. Sometimes, a task has a due date
    or time associated with it that lets us know when the task needs to be completed.
    Tasks also need to indicate whether they have been completed or not. Finally,
    a task is usually associated with a group or project that contains similar or
    related tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second component of our application is projects. Projects group related
    tasks together and usually have a descriptive name associated with them. Projects
    may also have a due date or time associated with them, which indicates when all
    tasks in a project need to be completed. We also need to be able to indicate whether
    or not a project is completed.
  prefs: []
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By breaking down our project, we''ve also identified a third component of our
    application: users. Users in our application will have the ability to create and
    manage both projects and tasks as well as view the statuses and due dates of any
    given task. While this component of our application may seem obvious, identifying
    it early on allows us to better understand the interaction that our users will
    have with the various components of our application.'
  prefs: []
  type: TYPE_NORMAL
- en: The database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the core components of our application identified, we can now begin to
    think about what our database is going to look like. Let's start with the two
    database tables.
  prefs: []
  type: TYPE_NORMAL
- en: The tasks table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By looking at our requirements, we can identify several columns and data types
    for our `tasks` table. As a rule, each task that we create will have a unique,
    incrementing ID associated with it. Other columns that we can quickly identify
    are the task name, the task description, the due date, and whether or not the
    task has been completed. We also know that each task is going to be associated
    with a project, which means we need to reference that project in our table.
  prefs: []
  type: TYPE_NORMAL
- en: There are also some columns we can identify that are not so obvious. The two
    most useful columns that aren't explicitly identified are timestamps for the creation
    date of the task and the date it was last updated on. By adding these two columns,
    we can gain useful insights into the use of our application. It's possible that
    in the future, our imaginary client may want to know how long an unresolved task
    has been open for and whether or not it needs additional attention if it has not
    been updated in several days.
  prefs: []
  type: TYPE_NORMAL
- en: 'With all the columns and data types for our table identified, our `tasks` table
    written with generic SQL data types will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The projects table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By looking at our requirements for projects, we can easily pick out the major
    columns for our `projects` table: a descriptive name, whether or not the project
    has been completed, and when the project is due. We also know from our `tasks`
    table that each project will need to have its own unique ID for the task to reference.
    When the time comes to create our models in our application, we''ll clearly define
    the one-to-many relationship between any given project and the many tasks belonging
    to it. If we keep a created and updated column, our `projects` table written in
    generic SQL will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our application requirements also show us that we need to store users somewhere.
    For this application, we're going to store our users in a flat file database.
    In [Chapter 3](ch03.html "Chapter 3. Scheduled Reminders"), *Scheduled Reminders*,
    we will expand upon this and store users in their own database table.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a database technology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have decided what our database is going to look like, it's time
    to start thinking about where we're going to store this information. To help familiarize
    yourself with the different database adapters Yii natively supports, for this
    project, we will be using SQLite. Since we now know where we're going to store
    our data, we can identify all the correct data types for database tables.
  prefs: []
  type: TYPE_NORMAL
- en: The tasks table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since SQLite only supports five basic data types (`NULL`, `INTEGER`, `REAL`,
    `TEXT`, and `BLOB`), we need to convert a few of the data types we initially identified
    for this table into ones that SQLite supports. Since SQLite does not support Boolean
    or timestamps natively, we need to find another way of representing this data
    using a data type that SQLite supports. We can represent a Boolean value as an
    integer either as 0 (false) or 1 (true). We can also represent all of our timestamp
    columns as integers by converting the current date to a Unix timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our final data types figured out, our `tasks` table now will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The projects table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By applying the same logic to our `projects` table, we can derive the following
    structure for this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The database overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By spending a few minutes thinking about our application beforehand, we've successfully
    identified all the tables for our application, how they interact with one another,
    and all the column names and data types that our application will be using. We've
    done a lot of work on our application already without even writing a single line
    of code. By doing this work upfront, we have also reduced some of the work we'll
    need to do later on when creating our models.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our final database structure figured out, we can now start writing code.
    Using the instructions in the official guide ([http://www.yiiframework.com/doc/guide/](http://www.yiiframework.com/doc/guide/)),
    download and install the Yii framework. Once Yii is installed, navigate to your
    `webroot` directory, and create a new folder called `tasks`. Next, navigate inside
    the `tasks` folder, and create the following folder structure to serve as our
    application''s skeleton:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii has a built-in tool called `yiic`, which can automatically generate a skeleton
    project. Refer to the quick start guide ([http://www.yiiframework.com/doc/guide/1.1/en/quickstart.first-app](http://www.yiiframework.com/doc/guide/1.1/en/quickstart.first-app))
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Depending upon the web server you are using, you may also need to create a `.htaccess`
    file in the root directory of your `tasks` folder. Information about how to set
    up your application for the web server you are using can be found in the quick
    start guide ([http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config](http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config)).
  prefs: []
  type: TYPE_NORMAL
- en: After setting up our skeleton structure, we can first create our configuration
    file located at `protected/config/main.php`. Our configuration file is one of
    the most important files of our application as it provides Yii with all the critical
    information necessary to load and configure our application. The configuration
    file informs Yii about the files to be preloaded by Yii's built-in autoloader,
    the modules to be loaded, the component to be registered, and any other configuration
    options we want to pass to our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this application, we will be enabling the Gii module, which will allow
    us to create models based upon our database structure. We will also enable two
    components, `urlManager` and `db`, which will allow us to set up custom routes
    and access our SQLite database. Have a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can create our `index.php` file as follows, which will serve as our
    bootstrap endpoint for our web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can create our applications `yiic` file in `protected/yiic.php`
    as follows, which will allow us to run console commands native to Yii from our
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Creating the database with migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our application can be bootstrapped, we can create our database. To
    do this, we are going to create a migration. Migrations are a feature of Yii that
    allow the creation and modification of your database to be a part of your application.
    Rather than creating schema modifications in pure SQL, we can use migrations to
    grow our database as a part of our application. In addition to acting as a revision
    system for our database schema, migrations also have the added benefit of allowing
    us to transmit our database with our application without having to worry about
    sharing data that would be stored in our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our database, open up your command-line interface of choice, navigate
    to your tasks directory, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `yiic` command will then prompt you to confirm the creation of the new
    migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To prevent naming conflicts with migrations, `yiic` will create the migration
    with the following naming structure: `m<timestamp>_<name>`. This has the added
    benefit of allowing us to sequentially apply or remove specific migrations based
    upon the order in which they were added. The exact name of your migration will
    be slightly different than the one listed in the preceding command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After confirming the creation of the migration, a new file will be created
    in the `protected/migrations` folder of our application. Open up the file, and
    add the following to the `up` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that our database structure matches the schema that we identified earlier
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, replace the contents of the `down` method with instructions to drop the
    database table if we call `migrate down` from the `yiic` command. Have a look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the migration has been created, run `migrate up` from the command
    line to create the database and apply our migration. Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you navigate to `protected/data/`, you will see a new file called `tasks.db`,
    the SQLite database that was created by our migrations.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Migration commands can be run non-interactively by appending `--interactive=0`
    to the `migrate` command. This can be useful if you want to automate deployments
    of your code to remote systems or if you run your code through an automated testing
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Creating models with Gii
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our database has been created, we can create models for our database
    table. To create our models, we are going to use Gii, Yii's built-in code generator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your web browser and navigate to `http://localhost/gii` (in this book,
    we will always use `localhost` as our working hostname for our working project.
    If you are using a different hostname, replace `localhost` with your own). Once
    loaded, you should see the **Yii Code Generator**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating models with Gii](img/7734OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you aren't able to access Gii, verify that your web server has rewriting
    enabled. Information about how to properly configure your web server for Yii can
    be found at ([http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config](http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config)).
  prefs: []
  type: TYPE_NORMAL
- en: Click on the link titled **Model Generator**, and then fill in the form on the
    page that appears. The table name should be set to `tasks`. The model name should
    prepopulate. If it doesn't, set the model name to `Tasks`, and then click on preview.
    Once the page has reloaded, you can preview what the model will look like before
    clicking on the **Generate** button to write your new model to your `protected/models/`
    directory. Once you have generated your model for `tasks`, repeat the process
    for `projects`.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our models have been created, there are several sections that should
    be modified.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the default validation rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first part of our model that needs to be modified is the validation rules.
    Validation rules in Yii are stored in the model's `rules()` method and are executed
    when the model's `validate()` method is called. Starting with our `tasks` model,
    we can see that Gii has already prepopulated our validation rules for us based
    upon our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several fields of this model that we would like to always have set,
    namely, `project_id`, `title`, the task itself, and whether or not it has been
    completed. We can make these fields required in our model by adding a new array
    to our rules section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'By making these fields required in our model, we can make client- and server-side
    validation easier when we start making forms. Our final method for this model
    will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Our project''s models should also be changed so that the project name and its
    completed status are required. We can accomplish this by adding the following
    to our validation rules array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Additional validation rules can be found in the Yii wiki at [http://www.yiiframework.com/wiki/56/](http://www.yiiframework.com/wiki/56/)
  prefs: []
  type: TYPE_NORMAL
- en: Defined relations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another component of our model that we should change is the `relations()` method.
    By declaring model relations in Yii, we can take advantage of the ability of ActiveRecords
    to automatically join several related models together and retrieve data from them
    without having to explicitly call that model for its data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, once our model relations are set up, we will be able to retrieve
    the project name from the Tasks model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Before we can declare our relations though, we need to determine what the relations
    actually are. Since SQLite does not support foreign key relations, Gii was unable
    to automatically determine the relations for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Yii, there are four types of relations: `BELONGS_TO`, `HAS_MANY`, `HAS_ONE`,
    and `MANY_MANY`. Determining the relation type can be done by looking at the foreign
    key for a table and asking which relational type fits best based upon the data
    that the table will store. For this application, this question can be answered
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Tasks belong to a single project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A project has one or many tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have determined our relationship types between our two tables,
    we can write the relations. Starting with the `tasks` table, replace the `relations()`
    method with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax for the relations array is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For our projects model, our `relations()` method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Removing tasks when a project is deleted
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In our model''s current state, whenever a project is deleted, all the tasks
    associated with it become orphaned. One way of dealing with this edge case is
    to simply delete any tasks associated with the project. Rather than writing code
    to handle this in the controller, we can have the model take care of it for us
    by referencing the project''s model''s `beforeDelete()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving the project metadata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is also metadata about a project that we cannot obtain directly from
    the `projects` database table. This data includes the number of tasks a project
    has, as well as the number of completed tasks a project has. We can obtain this
    from our model by creating two new methods in the project''s model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we can determine the progress of a project by getting a percentage
    of completed tasks versus the total number of tasks, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Automatically setting the created and updated time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last change needed to be made to the models is to enable them to automatically
    set the created and updated timestamp in the database every time the model is
    saved. By moving this logic into the models, we can avoid having to manage it
    either in the forms that submit the data or in the controllers that will process
    this data. This change can be made by adding the following to both models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the `beforeSave()` method, the updated property is always set every time
    the model is saved, and the created property is only set if ActiveRecord considers
    this to be a new record. This is accomplished by checking the `isNewRecord` property
    of the model. Additionally, both properties are set to `time()`, the PHP function
    used to get the current Unix timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: The last piece of code that is important in this method is `return parent::beforeSave();`.
    When Yii's `save()` method is called, it checks that `beforeSave()` returns true
    before saving the data to the database. While we could have this method return
    true, it's easier to have it return whatever the parent model (in this case `CActiveRecord`)
    returns. It also ensures that any changes made to the parent model will get carried
    to the model.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the `beforeSave()` method is identical for both models, we could also
    create a new model that only extended `CActiveRecord` and only implemented this
    method. The tasks and projects model will then extend that model rather than `CActiveRecord`
    and will inherit this functionality. Moving shared functionality to a shared location
    reduces the number of places where code needs to be written and, consequently,
    the number of places a bug can show up in.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the presentation layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up until this point, all the code that has been written is backend code that
    the end user won''t be able to see. In this section, we will be creating the presentation
    layer of our application. The presentation layer of our application is composed
    of three components: controllers, layouts, and views. For this next section, we''ll
    be creating all the three components.'
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, we have several options to create the presentation layer. One
    way we can create the presentation layer is using Gii. Gii has several built-in
    tools that can assist you in creating new controllers, forms for our views, and
    even full create, read, update, and delete (CRUD) skeletons for our application.
    Alternatively, we can write everything by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Managing projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first part of the presentation layer we are going to work on is the projects
    section. To begin with, create a new file in `protected/controllers/` called `ProjectControllerProjectController.php`
    that has the following class signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: For our controllers, we will be extending Yii's base class called `CController`.
    In future chapters, we will create our own controllers and extend the controllers
    from them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can start displaying content from our new action, we''ll need to
    create a layout for our content to be rendered in. To specify our layout, create
    a public property called `$layout`, and set the value to `''main''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s create our first action to make sure everything is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now, we should be able to visit `http://localhost/projects/index` from our web
    browser and see the text `Hello` printed on the screen. Before we continue defining
    our actions, let's create a layout that will help our application look a little
    better.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The layout that we specified references the file located in `protected/views/layouts/main.php`.
    Create this file and open it for editing. Then, add the following basic HTML5
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add a title within the `<head>` tag that will display the application
    name we defined in `protected/config/main.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's add a few meta tags, CSS, and scripts. To reduce the number of files
    we need to download, we'll be including styles and scripts from a publicly available
    **Content Distribution Network** (**CDN**). Rather than writing markup for these
    elements, we're going to use `CClientScript`, a class made to manage JavaScript,
    CSS, and meta tags for views.
  prefs: []
  type: TYPE_NORMAL
- en: For this application, we'll be using a frontend framework called **Twitter Bootstrap**.
    This framework will style many of the common HTML tags that our application will
    use, providing it with a cleaner overall look.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you're ready to go live with your application, you should consider moving
    the static assets you are using to a CDN, referencing popular libraries such as
    Twitter Bootstrap and jQuery from a publicly available CDN. CDNs can help to reduce
    hosting costs by reducing the amount of bandwidth your server needs to use to
    send files. Using a CDN can also speed up your site since they usually have servers
    geographically closer to your users than your main server.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''re going to call `CClientScript`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, we''re going to set the `Content-Type` to `text/html` with a `UTF-8`
    character set, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''re going to register the CSS from Twitter Bootstrap 3 from a popular
    CDN, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we''ll register the JavaScript library for Twitter Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''re going to register jQuery 2.0 and have Yii placed at the end
    of the `<body>` tag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`CClientScript` also supports method chaining, so you could also change the
    preceding code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For the last part of our layout, let''s add a basic header within our `<body>`
    tag that will help with navigation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'After the closing `</div>` tag, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `$content` variable that we've added to our layout is a special variable
    that contains all the rendered HTML markup from our view files and is defined
    by the `CController` class in the `render()` method. Yii will automatically populate
    this variable for us whenever we call the `render()` method from within our controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project index action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With our layout defined, we can get back to creating actions. Let's start by
    modifying our `actionIndex()` method so that it renders a view.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a variable to store a searchable copy of our model. Have a look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, render a view called `index`, which references `protected/views/projects/index.php`,
    and pass the model we created to this view, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create the view file in `protected/views/projects/index.php` and open
    it for editing. Begin by adding a button in the view as follows, which will reference
    the `save` action that we will create later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add a descriptive title so that we know what page we are on. Have a look
    at the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a new widget that uses `CListView`, a built-in Yii widget designed
    for displaying data from `CActiveDataProvider`. In Yii, widgets are frontend components
    that help us to quickly generate commonly used code, typically for presentation
    purposes. This widget will automatically generate pagination for us as necessary
    and will allow each of our items to look the same. Have a look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The new widget that we created consists of two parts. The first is the `dataProvider`,
    which provides data to the widget. This data comes from our project's model's
    `search()` method, a piece of code automatically generated by Gii.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part of the widget is the `itemView`, which references the specific
    view file that our items will be rendered out of. In this case, the view references
    a file in the same directory of `protected/views/projects` called `_project.php`.
    Create this file and then add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If we refresh our browser page now, our view will show us that no results were
    found. Before we can see data, we need to create an action and view to create
    and update it. Before we start creating new records, let''s create two other actions
    that we outlined in our item''s view: complete and delete.'
  prefs: []
  type: TYPE_NORMAL
- en: Changing a project's completion state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, let''s create an action to mark a project as completed or uncompleted.
    This action will only be responsible for changing the completed field of the projects
    table to 0 or 1, depending on its current state. For simplicity, we can just XOR
    the field by 1 and save the model. Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we''ll create another private method called `loadModel()`, which
    will load our appropriate model for us and throw an error if it cannot be found.
    For this method, we''ll use `CHttpException`, which will create an HTTP exception
    with the error message we provide if a model with the specified ID cannot be found.
    Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Deleting projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we''ll create a method to delete the project. This method will use the
    `loadModel()` method we defined earlier. Additionally, if we encounter an error
    deleting the model, we''ll throw an HTTP exception so that the user knows something
    went wrong. Here''s how we go about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Creating and updating projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the two other methods defined, we can now work on creating and updating
    a project. Rather than creating two actions to handle both these tasks, we''re
    going to create one action that knows how to handle both by checking the ID that
    we''ll pass as a `GET` parameter. We can do that by defining a new action that
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then either create a new project or update a project based upon whether
    or not we were provided with an ID by the user. By taking advantage of `loadModel()`,
    we also take care of any errors that would occur if an ID was provided but a project
    with that ID didn''t exist. Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can detect whether the user submitted data by checking the `$_POST`
    variable for an array called `Projects`. If that array is defined, we''ll assign
    it to our `$model->attributes` object. Before saving the model, however, we''ll
    want to convert whatever the user entered into a Unix timestamp. Have a look at
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll render the view and pass the model down to it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file in `protected/views/projects/` called `save.php` and open
    it to edit. Begin by adding a header that will let us know whether we are editing
    a project or creating a new one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll create a new widget with `CActiveForm`, which will take care of
    the hard tasks of creating and inserting form fields into our view file (such
    as what the names and IDs of form fields should be):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Between the `beginWidget` and `endWidget` call, add an error summary if the
    user encounters an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, after the error summary, add the form fields and their associated styles,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Did you notice how we're taking advantage of the Yii widget called `CJuiDatePicker`?
    This widget will provide us with a clean interface for selecting dates from a
    calendar view, rather than requiring our end user to type in the date manually
    and in the specified format we've requested.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can create, update, view, and delete projects. Additionally, we've created
    an easy action to mark them as completed. Before we're done with this controller,
    we need to add an action that allows us to view tasks in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing tasks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our `tasks` action for this controller will function in the same manner as
    our `index` action but will instead use a view called `tasks`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The `tasks.php` view in `protected/views/projects/tasks.php` will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `_tasks.php` item view in `protected/views/projects/tasks.php` will look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Managing tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we can manage projects, let''s work on managing tasks. Our `TasksController`
    is going to be nearly identical to our project''s controller with only a few differences.
    Start by creating a new file in `protected/controllers` called `TasksController.php`
    that has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'By only making a small change to our `loadModel()` method, we can reuse the
    delete and complete action from our projects controller, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `save` action is almost identical to our project''s `save` action. Have
    a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The view file for this action is almost the same as well. If you haven''t already,
    create a file called `save.php` in `protected/views/tasks/`, and then add the
    following lines of code to finish the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Preventing unauthorized access to our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our tasks application can now do everything we defined in our requirements.
    However, it is open to the world. Anyone who wants to edit our tasks could simply
    visit our website and change anything without our knowledge. Before finishing
    up, let's create a simple authentication system to protect our data.
  prefs: []
  type: TYPE_NORMAL
- en: Requiring authentication with filters and access rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first part in protecting our application is making sure that only authorized
    people can visit our application. We can do this by adding a filter to our controller
    called `accessControl` and defining access rules to access our content.
  prefs: []
  type: TYPE_NORMAL
- en: 'A filter is a piece of code that gets executed before (and/or after) a controller
    action runs, which means that the user will be required to be authenticated before
    accessing our content. To add the `accessControl` filter, add the following to
    both `TasksController` and `ProjectsController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a new method called `accessRules()`, which will define what users
    can access our application. For our application, we want to deny access to anyone
    who isn''t authenticated. Have a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding array, `@` is a shorthand reference to an authenticated user.
    Now if we try to visit our web page, we'll be redirected to `/site/login`, the
    default `login` action in Yii.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controller for the authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a file called `SiteController.php` in `protected/controllers`, and then
    create `login` and `logout` actions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Creating a login layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this controller, we''re going to create a new layout called `login.php`
    in `protected/views/layouts`. Copy the markup from `protected/views/layouts/main.php`
    to our new layout, and replace the contents of the `<body>` tag with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To make our login page look more like a login page, add the following CSS to
    the layout either as an inline style or as a separate file in `/css/signup.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Creating a login view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new form in `protected/views/site/login.php` that will hold our login
    model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Identifying our users with the UserIdentity CUserIdentity class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we create our login model, we need to create a way to identify our users.
    Fortunately, Yii has a built-in class to handle this called `CUserIdentity`. By
    easily extending `CUserIdentity`, we can create a key-value login pair that will
    ensure that only authenticated users can log in to our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `UserIdentity.php` in `/components`, and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The `authenticate()` method of `UserIdentity` is what we'll use in our login
    model to ensure that we have valid credentials. In this class, we are simply checking
    whether the `username` that will be sent to this class by our login model matches
    the key associated with it. If a user's password does not match the key in our
    `$users` array, or if the user is not defined in our `$users` array, we return
    an error code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the login model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last component we need to authenticate our users is to create a generic
    model to authenticate the user against. Begin by creating a new file called `LoginForm.php`
    in `protected/models`. This class will extend `CFormModel`, a generic model in
    Yii for forms, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `CFormModel` doesn''t connect to a database, we defined attributes as
    public properties, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Our model also needs validation rules to verify that we have a valid user.
    In addition to making sure `username` and `password` are provided, we''re going
    to provide an additional validation rule called `authenticate`, which will validate
    that we have a valid username and password. Have a look at the following lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Because our `authenticate()` method is a custom validator, its method signature
    has two parameters, `$attribute` and `$params`, which have information about the
    attribute and parameters that may have been passed from the validator. This method
    will determine whether our credentials are valid. Have a look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll create the `login()` method that our `SiteController` calls.
    In addition to validating our credentials, it will do the heavy lifting of creating
    a session for the user. Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Now you can visit our site and log in with the credentials provided in our `UserIdentity.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing touches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before completing our project, there are a few things we need to take care of
    in our `protected/config/main.php` file to enhance the security of our application
    and to make our application easier to use.
  prefs: []
  type: TYPE_NORMAL
- en: It would be nice to also add some pictures of the final application.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling Gii
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the beginning of our project, we enabled the Gii module to assist us in
    creating models for our application. Since Gii has the ability to write new files
    to our project, we should remove the following section from our `config` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Defining a default route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Presently, if we try to visit the root URL of our application, we are presented
    with an error. To avoid this, we can add a route in to the routes array of our
    URL Manager component. With this addition, whenever we visit the root URL of our
    application, we will be presented with the `index` action of the project''s controller.
    Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Adding extra routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, add two more routes to our URL Manager routes array. These routes
    will help us more easily access the `login` and `logout` actions for our site.
    Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered quite a lot of information. We created an automated
    way of creating and distributing our database, models to represent the tables
    in the database, and a few controllers to manage and interact with our data. We
    also created a simple key-value authentication system to protect our data. Many
    of the methods we used in this chapter, and the code we wrote, can be reused and
    expanded upon in later chapters. Before continuing, be sure to take a look at
    all the classes we referenced in the chapter, in the official Yii documentation,
    so that you can better understand them.
  prefs: []
  type: TYPE_NORMAL
