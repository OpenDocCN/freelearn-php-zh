- en: Chapter 1. A Task-management Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 任务管理应用
- en: One of the best ways to get started with the Yii framework is by making useful
    applications. The first application that will be covered in this book is a simple
    task management application. In this chapter, we will cover the planning of the
    development of this project, developing the application, and creating useful components
    that we will reuse in later chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Yii 框架的最佳方式之一是制作有用的应用。本书将首先介绍一个简单的任务管理应用。在本章中，我们将涵盖这个项目的开发规划、开发应用以及创建我们将在后续章节中重用的有用组件。
- en: Describing the project
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述项目
- en: One of the most important steps in starting a new project is planning it. By
    planning the project before we begin programming, we can easily identify most
    (if not all) models that our application will use, key features that we'll need
    to implement, as well as any areas that may cause us problems while developing
    our applications. Breaking down the project beforehand also helps us estimate
    how long it will take to develop each part of our applications as well as the
    application as a whole. While requirements and expectations for our application
    will most likely change during its development, identifying the core components
    of your application will help ensure that the core functionality of our application
    works as we intend.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个新项目最重要的步骤之一是规划它。在我们开始编程之前规划项目，我们可以轻松地确定应用将使用的大多数（如果不是所有）模型，我们需要实现的关键功能，以及可能在我们开发应用时引起问题的任何区域。在项目开始之前进行分解也有助于我们估计开发应用每个部分以及整个应用所需的时间。虽然我们应用的需求和期望在开发过程中很可能会发生变化，但确定应用的核心组件将有助于确保我们的应用核心功能按预期工作。
- en: 'For our task management application, there are two main components: tasks and
    projects. Let''s break each of these components down.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的任务管理应用，有两个主要组件：任务和项目。让我们分别分析这些组件。
- en: Tasks
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务
- en: The first component of our application is tasks. A task is an item that needs
    to be done by our user and usually consists of a brief, concise title, and a description
    of what needs to be done to complete that task. Sometimes, a task has a due date
    or time associated with it that lets us know when the task needs to be completed.
    Tasks also need to indicate whether they have been completed or not. Finally,
    a task is usually associated with a group or project that contains similar or
    related tasks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的第一部分是任务。任务是我们用户需要完成的项，通常包括一个简短、简洁的标题，以及完成任务所需完成的描述。有时，任务会关联一个截止日期或时间，这让我们知道任务需要在何时完成。任务还需要表明它们是否已经完成。最后，任务通常与一个包含类似或相关任务的组或项目相关联。
- en: Projects
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目
- en: The second component of our application is projects. Projects group related
    tasks together and usually have a descriptive name associated with them. Projects
    may also have a due date or time associated with them, which indicates when all
    tasks in a project need to be completed. We also need to be able to indicate whether
    or not a project is completed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的第二部分是项目。项目将相关任务分组，通常与它们相关联一个描述性的名称。项目也可能有一个截止日期或时间与之相关联，这表明项目中的所有任务需要在何时完成。我们还需要能够表明项目是否已完成。
- en: Users
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: 'By breaking down our project, we''ve also identified a third component of our
    application: users. Users in our application will have the ability to create and
    manage both projects and tasks as well as view the statuses and due dates of any
    given task. While this component of our application may seem obvious, identifying
    it early on allows us to better understand the interaction that our users will
    have with the various components of our application.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分解我们的项目，我们还确定了应用的一个第三部分：用户。在我们的应用中，用户将能够创建和管理项目以及任务，同时查看任何给定任务的状况和截止日期。虽然这个应用组件可能看起来很明显，但尽早确定它可以帮助我们更好地理解用户将如何与我们的应用的各种组件进行交互。
- en: The database
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库
- en: With the core components of our application identified, we can now begin to
    think about what our database is going to look like. Let's start with the two
    database tables.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了我们应用的核心组件后，我们现在可以开始思考我们的数据库将是什么样子了。让我们从两个数据库表开始。
- en: The tasks table
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务表
- en: By looking at our requirements, we can identify several columns and data types
    for our `tasks` table. As a rule, each task that we create will have a unique,
    incrementing ID associated with it. Other columns that we can quickly identify
    are the task name, the task description, the due date, and whether or not the
    task has been completed. We also know that each task is going to be associated
    with a project, which means we need to reference that project in our table.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看我们的需求，我们可以确定`tasks`表的几个列和数据类型。一般来说，我们创建的每个任务都将有一个与之关联的唯一递增ID。我们可以快速识别的其他列包括任务名称、任务描述、截止日期以及任务是否已完成。我们还知道每个任务都将与一个项目相关联，这意味着我们需要在我们的表中引用该项目。
- en: There are also some columns we can identify that are not so obvious. The two
    most useful columns that aren't explicitly identified are timestamps for the creation
    date of the task and the date it was last updated on. By adding these two columns,
    we can gain useful insights into the use of our application. It's possible that
    in the future, our imaginary client may want to know how long an unresolved task
    has been open for and whether or not it needs additional attention if it has not
    been updated in several days.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些列我们可以识别，但并不那么明显。两个最有用的列没有明确标识的是任务的创建日期和最后更新日期的时间戳。通过添加这两个列，我们可以获得关于我们应用程序使用的有用见解。可能在未来，我们的假设客户可能想知道未解决的任务开放了多久，以及如果它已经几天没有更新，是否需要额外的关注。
- en: 'With all the columns and data types for our table identified, our `tasks` table
    written with generic SQL data types will look as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了表的列和数据类型后，我们用通用SQL数据类型编写的`tasks`表将如下所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The projects table
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目表
- en: 'By looking at our requirements for projects, we can easily pick out the major
    columns for our `projects` table: a descriptive name, whether or not the project
    has been completed, and when the project is due. We also know from our `tasks`
    table that each project will need to have its own unique ID for the task to reference.
    When the time comes to create our models in our application, we''ll clearly define
    the one-to-many relationship between any given project and the many tasks belonging
    to it. If we keep a created and updated column, our `projects` table written in
    generic SQL will look as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看我们对项目的需求，我们可以轻松地挑选出`projects`表的主要列：一个描述性的名称，项目是否已完成，以及项目截止日期。我们还从`tasks`表中得知，每个项目都需要一个唯一的ID以便任务引用。当到了在应用中创建模型的时候，我们将明确定义任何给定项目与其所属的多个任务之间的多对一关系。如果我们保留创建和更新列，我们用通用SQL编写的`projects`表将如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Users
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: Our application requirements also show us that we need to store users somewhere.
    For this application, we're going to store our users in a flat file database.
    In [Chapter 3](ch03.html "Chapter 3. Scheduled Reminders"), *Scheduled Reminders*,
    we will expand upon this and store users in their own database table.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用需求还显示，我们需要在某个地方存储用户信息。对于这个应用，我们将把我们的用户存储在一个平面文件数据库中。在[第3章](ch03.html "第3章。计划提醒")“计划提醒”中，我们将进一步扩展并将在自己的数据库表中存储用户。
- en: Choosing a database technology
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择数据库技术
- en: Now that we have decided what our database is going to look like, it's time
    to start thinking about where we're going to store this information. To help familiarize
    yourself with the different database adapters Yii natively supports, for this
    project, we will be using SQLite. Since we now know where we're going to store
    our data, we can identify all the correct data types for database tables.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经决定了数据库的外观，是时候开始考虑我们将把信息存储在哪里了。为了帮助您熟悉Yii原生支持的不同数据库适配器，对于这个项目，我们将使用SQLite。既然我们现在知道了我们将存储数据的位置，我们可以确定数据库表的所有正确数据类型。
- en: The tasks table
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务表
- en: Since SQLite only supports five basic data types (`NULL`, `INTEGER`, `REAL`,
    `TEXT`, and `BLOB`), we need to convert a few of the data types we initially identified
    for this table into ones that SQLite supports. Since SQLite does not support Boolean
    or timestamps natively, we need to find another way of representing this data
    using a data type that SQLite supports. We can represent a Boolean value as an
    integer either as 0 (false) or 1 (true). We can also represent all of our timestamp
    columns as integers by converting the current date to a Unix timestamp.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SQLite 只支持五种基本数据类型(`NULL`、`INTEGER`、`REAL`、`TEXT` 和 `BLOB`)，我们需要将我们最初为该表识别的一些数据类型转换为
    SQLite 支持的类型。由于 SQLite 不支持布尔值或时间戳，我们需要找到另一种方式使用 SQLite 支持的数据类型来表示这些数据。我们可以将布尔值表示为整数，要么是
    0（false），要么是 1（true）。我们还可以通过将当前日期转换为 Unix 时间戳来将所有时间戳列表示为整数。
- en: 'With our final data types figured out, our `tasks` table now will look like
    this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了最终的数据类型后，我们的 `tasks` 表现在将看起来像这样：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The projects table
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目表
- en: 'By applying the same logic to our `projects` table, we can derive the following
    structure for this table:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将相同的逻辑应用到我们的 `projects` 表，我们可以推导出该表的以下结构：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The database overview
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库概览
- en: By spending a few minutes thinking about our application beforehand, we've successfully
    identified all the tables for our application, how they interact with one another,
    and all the column names and data types that our application will be using. We've
    done a lot of work on our application already without even writing a single line
    of code. By doing this work upfront, we have also reduced some of the work we'll
    need to do later on when creating our models.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过事先花几分钟思考我们的应用程序，我们已经成功识别了应用程序的所有表，它们如何相互交互，以及应用程序将使用的所有列名和数据类型。我们在不写一行代码的情况下已经对我们的应用程序做了很多工作。通过这项前期工作，我们还减少了一些在创建模型时需要做的后续工作。
- en: Initializing the project
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化项目
- en: 'With our final database structure figured out, we can now start writing code.
    Using the instructions in the official guide ([http://www.yiiframework.com/doc/guide/](http://www.yiiframework.com/doc/guide/)),
    download and install the Yii framework. Once Yii is installed, navigate to your
    `webroot` directory, and create a new folder called `tasks`. Next, navigate inside
    the `tasks` folder, and create the following folder structure to serve as our
    application''s skeleton:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了最终的数据库结构后，我们现在可以开始编写代码。使用官方指南([http://www.yiiframework.com/doc/guide/](http://www.yiiframework.com/doc/guide/))中的说明，下载并安装
    Yii 框架。一旦安装了 Yii，导航到您的 `webroot` 目录，并创建一个名为 `tasks` 的新文件夹。接下来，导航到 `tasks` 文件夹内部，创建以下文件夹结构，作为我们应用程序的骨架：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Yii has a built-in tool called `yiic`, which can automatically generate a skeleton
    project. Refer to the quick start guide ([http://www.yiiframework.com/doc/guide/1.1/en/quickstart.first-app](http://www.yiiframework.com/doc/guide/1.1/en/quickstart.first-app))
    for more details.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 拥有一个内置工具名为 `yiic`，它可以自动生成一个项目骨架。有关更多详细信息，请参阅快速入门指南([http://www.yiiframework.com/doc/guide/1.1/en/quickstart.first-app](http://www.yiiframework.com/doc/guide/1.1/en/quickstart.first-app))。
- en: Depending upon the web server you are using, you may also need to create a `.htaccess`
    file in the root directory of your `tasks` folder. Information about how to set
    up your application for the web server you are using can be found in the quick
    start guide ([http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config](http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config)).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您使用的 Web 服务器，您可能还需要在 `tasks` 文件夹的根目录中创建一个 `.htaccess` 文件。有关如何为您的 Web 服务器设置应用程序的信息，请参阅快速入门指南([http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config](http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config))。
- en: After setting up our skeleton structure, we can first create our configuration
    file located at `protected/config/main.php`. Our configuration file is one of
    the most important files of our application as it provides Yii with all the critical
    information necessary to load and configure our application. The configuration
    file informs Yii about the files to be preloaded by Yii's built-in autoloader,
    the modules to be loaded, the component to be registered, and any other configuration
    options we want to pass to our application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好骨架结构后，我们首先创建位于 `protected/config/main.php` 的配置文件。我们的配置文件是应用程序中最重要的文件之一，因为它为
    Yii 提供了加载和配置应用程序所需的所有关键信息。配置文件通知 Yii 哪些文件将由 Yii 的内置自动加载器预加载，要加载的模块，要注册的组件，以及我们想要传递给应用程序的任何其他配置选项。
- en: 'For this application, we will be enabling the Gii module, which will allow
    us to create models based upon our database structure. We will also enable two
    components, `urlManager` and `db`, which will allow us to set up custom routes
    and access our SQLite database. Have a look at the following code snippet:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we can create our `index.php` file as follows, which will serve as our
    bootstrap endpoint for our web application:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we can create our applications `yiic` file in `protected/yiic.php`
    as follows, which will allow us to run console commands native to Yii from our
    application:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Creating the database with migrations
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our application can be bootstrapped, we can create our database. To
    do this, we are going to create a migration. Migrations are a feature of Yii that
    allow the creation and modification of your database to be a part of your application.
    Rather than creating schema modifications in pure SQL, we can use migrations to
    grow our database as a part of our application. In addition to acting as a revision
    system for our database schema, migrations also have the added benefit of allowing
    us to transmit our database with our application without having to worry about
    sharing data that would be stored in our database.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our database, open up your command-line interface of choice, navigate
    to your tasks directory, and run the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `yiic` command will then prompt you to confirm the creation of the new
    migration:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To prevent naming conflicts with migrations, `yiic` will create the migration
    with the following naming structure: `m<timestamp>_<name>`. This has the added
    benefit of allowing us to sequentially apply or remove specific migrations based
    upon the order in which they were added. The exact name of your migration will
    be slightly different than the one listed in the preceding command.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'After confirming the creation of the migration, a new file will be created
    in the `protected/migrations` folder of our application. Open up the file, and
    add the following to the `up` method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that our database structure matches the schema that we identified earlier
    in the chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, replace the contents of the `down` method with instructions to drop the
    database table if we call `migrate down` from the `yiic` command. Have a look
    at the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that the migration has been created, run `migrate up` from the command
    line to create the database and apply our migration. Run the following commands:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, if you navigate to `protected/data/`, you will see a new file called `tasks.db`,
    the SQLite database that was created by our migrations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Migration commands can be run non-interactively by appending `--interactive=0`
    to the `migrate` command. This can be useful if you want to automate deployments
    of your code to remote systems or if you run your code through an automated testing
    service.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Creating models with Gii
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our database has been created, we can create models for our database
    table. To create our models, we are going to use Gii, Yii's built-in code generator.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your web browser and navigate to `http://localhost/gii` (in this book,
    we will always use `localhost` as our working hostname for our working project.
    If you are using a different hostname, replace `localhost` with your own). Once
    loaded, you should see the **Yii Code Generator**, as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating models with Gii](img/7734OS_01_01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you aren't able to access Gii, verify that your web server has rewriting
    enabled. Information about how to properly configure your web server for Yii can
    be found at ([http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config](http://www.yiiframework.com/doc/guide/1.1/en/quickstart.apache-nginx-config)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Click on the link titled **Model Generator**, and then fill in the form on the
    page that appears. The table name should be set to `tasks`. The model name should
    prepopulate. If it doesn't, set the model name to `Tasks`, and then click on preview.
    Once the page has reloaded, you can preview what the model will look like before
    clicking on the **Generate** button to write your new model to your `protected/models/`
    directory. Once you have generated your model for `tasks`, repeat the process
    for `projects`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the models
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our models have been created, there are several sections that should
    be modified.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Updating the default validation rules
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first part of our model that needs to be modified is the validation rules.
    Validation rules in Yii are stored in the model's `rules()` method and are executed
    when the model's `validate()` method is called. Starting with our `tasks` model,
    we can see that Gii has already prepopulated our validation rules for us based
    upon our database.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several fields of this model that we would like to always have set,
    namely, `project_id`, `title`, the task itself, and whether or not it has been
    completed. We can make these fields required in our model by adding a new array
    to our rules section, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'By making these fields required in our model, we can make client- and server-side
    validation easier when we start making forms. Our final method for this model
    will look as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Our project''s models should also be changed so that the project name and its
    completed status are required. We can accomplish this by adding the following
    to our validation rules array:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Additional validation rules can be found in the Yii wiki at [http://www.yiiframework.com/wiki/56/](http://www.yiiframework.com/wiki/56/)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Defined relations
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another component of our model that we should change is the `relations()` method.
    By declaring model relations in Yii, we can take advantage of the ability of ActiveRecords
    to automatically join several related models together and retrieve data from them
    without having to explicitly call that model for its data.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, once our model relations are set up, we will be able to retrieve
    the project name from the Tasks model, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一旦我们设置了模型关系，我们就能从 Tasks 模型中检索项目名称，如下所示：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Before we can declare our relations though, we need to determine what the relations
    actually are. Since SQLite does not support foreign key relations, Gii was unable
    to automatically determine the relations for us.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们声明关系之前，我们需要确定关系实际上是什么。由于 SQLite 不支持外键关系，Gii 无法自动为我们确定关系。
- en: 'In Yii, there are four types of relations: `BELONGS_TO`, `HAS_MANY`, `HAS_ONE`,
    and `MANY_MANY`. Determining the relation type can be done by looking at the foreign
    key for a table and asking which relational type fits best based upon the data
    that the table will store. For this application, this question can be answered
    as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii 中，有四种类型的关系：`BELONGS_TO`、`HAS_MANY`、`HAS_ONE` 和 `MANY_MANY`。确定关系类型可以通过查看表的外键并根据表将存储的数据选择最适合的关系类型来完成。对于这个应用程序，这个问题可以这样回答：
- en: Tasks belong to a single project
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务属于单一项目
- en: A project has one or many tasks
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个项目有一个或多个任务
- en: 'Now that we have determined our relationship types between our two tables,
    we can write the relations. Starting with the `tasks` table, replace the `relations()`
    method with the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了两个表之间的关系类型，我们可以编写关系。从 `tasks` 表开始，将 `relations()` 方法替换为以下内容：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The syntax for the relations array is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数组的语法如下所示：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For our projects model, our `relations()` method looks like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目模型，我们的 `relations()` 方法如下所示：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Removing tasks when a project is deleted
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当项目被删除时移除任务
- en: 'In our model''s current state, whenever a project is deleted, all the tasks
    associated with it become orphaned. One way of dealing with this edge case is
    to simply delete any tasks associated with the project. Rather than writing code
    to handle this in the controller, we can have the model take care of it for us
    by referencing the project''s model''s `beforeDelete()` method as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们模型当前的状态下，每当一个项目被删除时，与之关联的所有任务都会变成孤儿。处理这种边缘情况的一种方法就是简单地删除与项目关联的所有任务。而不是在控制器中编写代码来处理这个问题，我们可以通过引用项目模型中的
    `beforeDelete()` 方法来让模型为我们处理，如下所示：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Retrieving the project metadata
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检索项目元数据
- en: 'There is also metadata about a project that we cannot obtain directly from
    the `projects` database table. This data includes the number of tasks a project
    has, as well as the number of completed tasks a project has. We can obtain this
    from our model by creating two new methods in the project''s model, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 关于项目，还有一些我们无法直接从 `projects` 数据库表中获取的元数据。这些数据包括项目拥有的任务数量，以及项目完成的任务数量。我们可以通过在项目的模型中创建两个新方法来获取这些数据，如下所示：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Additionally, we can determine the progress of a project by getting a percentage
    of completed tasks versus the total number of tasks, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以通过获取已完成任务数与总任务数的百分比来确定项目的进度，如下所示：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Automatically setting the created and updated time
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动设置创建和更新时间
- en: 'The last change needed to be made to the models is to enable them to automatically
    set the created and updated timestamp in the database every time the model is
    saved. By moving this logic into the models, we can avoid having to manage it
    either in the forms that submit the data or in the controllers that will process
    this data. This change can be made by adding the following to both models:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 需要对模型进行的最后更改是使它们能够在每次模型保存时自动在数据库中设置创建和更新时间戳。通过将此逻辑移动到模型中，我们可以避免在提交数据的表单或处理此数据的控制器中管理它。此更改可以通过向两个模型添加以下内容来实现：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the `beforeSave()` method, the updated property is always set every time
    the model is saved, and the created property is only set if ActiveRecord considers
    this to be a new record. This is accomplished by checking the `isNewRecord` property
    of the model. Additionally, both properties are set to `time()`, the PHP function
    used to get the current Unix timestamp.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `beforeSave()` 方法中，每次模型被保存时，更新属性总是被设置，而创建属性只有在 ActiveRecord 认为这是一个新记录时才会被设置。这是通过检查模型的
    `isNewRecord` 属性来实现的。此外，这两个属性都被设置为 `time()`，这是 PHP 中用于获取当前 Unix 时间戳的函数。
- en: The last piece of code that is important in this method is `return parent::beforeSave();`.
    When Yii's `save()` method is called, it checks that `beforeSave()` returns true
    before saving the data to the database. While we could have this method return
    true, it's easier to have it return whatever the parent model (in this case `CActiveRecord`)
    returns. It also ensures that any changes made to the parent model will get carried
    to the model.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中重要的最后一行代码是 `return parent::beforeSave();`。当调用 Yii 的 `save()` 方法时，它会检查
    `beforeSave()` 是否返回 true，然后再将数据保存到数据库中。虽然我们可以让这个方法返回 true，但让它返回父模型（在这个案例中是 `CActiveRecord`）返回的值更简单。这也确保了任何对父模型所做的更改都会传递到模型中。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since the `beforeSave()` method is identical for both models, we could also
    create a new model that only extended `CActiveRecord` and only implemented this
    method. The tasks and projects model will then extend that model rather than `CActiveRecord`
    and will inherit this functionality. Moving shared functionality to a shared location
    reduces the number of places where code needs to be written and, consequently,
    the number of places a bug can show up in.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `beforeSave()` 方法对两个模型都是相同的，我们也可以创建一个新的模型，该模型只扩展 `CActiveRecord` 并只实现此方法。然后，任务和项目模型将扩展该模型而不是
    `CActiveRecord`，并将继承此功能。将共享功能移动到共享位置减少了需要编写代码的地方数量，从而减少了错误出现的地方数量。
- en: Creating the presentation layer
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表现层
- en: 'Up until this point, all the code that has been written is backend code that
    the end user won''t be able to see. In this section, we will be creating the presentation
    layer of our application. The presentation layer of our application is composed
    of three components: controllers, layouts, and views. For this next section, we''ll
    be creating all the three components.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所编写的所有代码都是后端代码，最终用户将无法看到。在本节中，我们将创建我们应用程序的表现层。我们应用程序的表现层由三个组件组成：控制器、布局和视图。在下一节中，我们将创建所有三个组件。
- en: As a developer, we have several options to create the presentation layer. One
    way we can create the presentation layer is using Gii. Gii has several built-in
    tools that can assist you in creating new controllers, forms for our views, and
    even full create, read, update, and delete (CRUD) skeletons for our application.
    Alternatively, we can write everything by hand.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们有几种创建表现层的方法。我们可以创建表现层的一种方法是通过 Gii。Gii 有几个内置工具可以帮助你创建新的控制器、视图的表单，甚至为我们应用程序创建完整的创建、读取、更新和删除（CRUD）框架。或者，我们也可以手动编写一切。
- en: Managing projects
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理项目
- en: 'The first part of the presentation layer we are going to work on is the projects
    section. To begin with, create a new file in `protected/controllers/` called `ProjectControllerProjectController.php`
    that has the following class signature:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的表现层的第一部分是项目部分。首先，在 `protected/controllers/` 中创建一个名为 `ProjectControllerProjectController.php`
    的新文件，该文件具有以下类签名：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: For our controllers, we will be extending Yii's base class called `CController`.
    In future chapters, we will create our own controllers and extend the controllers
    from them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的控制器，我们将扩展 Yii 的基类 `CController`。在未来的章节中，我们将创建自己的控制器并从它们扩展。
- en: 'Before we can start displaying content from our new action, we''ll need to
    create a layout for our content to be rendered in. To specify our layout, create
    a public property called `$layout`, and set the value to `''main''`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以开始显示新动作的内容之前，我们需要为我们的内容创建一个布局。为了指定我们的布局，创建一个公共属性 `$layout`，并将其值设置为 `'main'`：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, let''s create our first action to make sure everything is working:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建我们的第一个动作以确保一切正常工作：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, we should be able to visit `http://localhost/projects/index` from our web
    browser and see the text `Hello` printed on the screen. Before we continue defining
    our actions, let's create a layout that will help our application look a little
    better.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够从我们的网络浏览器访问 `http://localhost/projects/index` 并在屏幕上看到打印的文本 `Hello`。在我们继续定义我们的动作之前，让我们创建一个布局，以帮助我们的应用程序看起来更好。
- en: Creating the layout
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建布局
- en: 'The layout that we specified references the file located in `protected/views/layouts/main.php`.
    Create this file and open it for editing. Then, add the following basic HTML5
    markup:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定的布局引用了位于 `protected/views/layouts/main.php` 的文件。创建此文件并打开它进行编辑。然后，添加以下基本的
    HTML5 标记：
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then add a title within the `<head>` tag that will display the application
    name we defined in `protected/config/main.php`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 `<head>` 标签内添加一个标题，该标题将显示我们在 `protected/config/main.php` 中定义的应用程序名称：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Next, let's add a few meta tags, CSS, and scripts. To reduce the number of files
    we need to download, we'll be including styles and scripts from a publicly available
    **Content Distribution Network** (**CDN**). Rather than writing markup for these
    elements, we're going to use `CClientScript`, a class made to manage JavaScript,
    CSS, and meta tags for views.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一些元标签、CSS和脚本。为了减少需要下载的文件数量，我们将从公开可用的**内容分发网络**（**CDN**）中包含样式和脚本。而不是为这些元素编写标记，我们将使用`CClientScript`，这是一个用于管理视图中的JavaScript、CSS和元标签的类。
- en: For this application, we'll be using a frontend framework called **Twitter Bootstrap**.
    This framework will style many of the common HTML tags that our application will
    use, providing it with a cleaner overall look.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，我们将使用一个名为**Twitter Bootstrap**的前端框架。这个框架将为我们的应用程序使用的大多数常见HTML标签提供样式，使其整体看起来更干净。
- en: Tip
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When you're ready to go live with your application, you should consider moving
    the static assets you are using to a CDN, referencing popular libraries such as
    Twitter Bootstrap and jQuery from a publicly available CDN. CDNs can help to reduce
    hosting costs by reducing the amount of bandwidth your server needs to use to
    send files. Using a CDN can also speed up your site since they usually have servers
    geographically closer to your users than your main server.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好将应用程序上线时，你应该考虑将你使用的静态资源移动到CDN上，从公开可用的CDN引用流行的库，如Twitter Bootstrap和jQuery。CDN可以通过减少服务器需要用于发送文件所需的带宽来帮助降低托管成本。使用CDN还可以加快你的网站速度，因为它们通常比你的主服务器地理位置更靠近你的用户。
- en: 'First, we''re going to call `CClientScript`, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将调用`CClientScript`，如下所示：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Secondly, we''re going to set the `Content-Type` to `text/html` with a `UTF-8`
    character set, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们将`Content-Type`设置为`text/html`，字符集为`UTF-8`，如下所示：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we''re going to register the CSS from Twitter Bootstrap 3 from a popular
    CDN, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将从流行的CDN注册Twitter Bootstrap 3的CSS，如下所示：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then we''ll register the JavaScript library for Twitter Bootstrap:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将注册Twitter Bootstrap的JavaScript库：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, we''re going to register jQuery 2.0 and have Yii placed at the end
    of the `<body>` tag, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将注册jQuery 2.0并将Yii放置在`<body>`标签的末尾，如下所示：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`CClientScript` also supports method chaining, so you could also change the
    preceding code to the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`CClientScript`也支持方法链，因此你也可以将前面的代码更改为以下内容：'
- en: '[PRE34]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For the last part of our layout, let''s add a basic header within our `<body>`
    tag that will help with navigation, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于布局的最后部分，让我们在`<body>`标签内添加一个基本的标题，这将有助于导航，如下所示：
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After the closing `</div>` tag, add the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`</div>`标签关闭后，添加以下内容：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `$content` variable that we've added to our layout is a special variable
    that contains all the rendered HTML markup from our view files and is defined
    by the `CController` class in the `render()` method. Yii will automatically populate
    this variable for us whenever we call the `render()` method from within our controllers.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加到布局中的`$content`变量是一个特殊变量，它包含来自我们视图文件的所有渲染的HTML标记，并由`CController`类在`render()`方法中定义。每当我们在控制器内部调用`render()`方法时，Yii都会自动为我们填充这个变量。
- en: Creating the project index action
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建项目索引动作
- en: With our layout defined, we can get back to creating actions. Let's start by
    modifying our `actionIndex()` method so that it renders a view.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的布局定义完成后，我们可以回到创建动作。让我们首先修改我们的`actionIndex()`方法，使其渲染一个视图。
- en: 'First, create a variable to store a searchable copy of our model. Have a look
    at the following code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个变量来存储我们模型的可搜索副本。看看以下代码：
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, render a view called `index`, which references `protected/views/projects/index.php`,
    and pass the model we created to this view, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，渲染一个名为`index`的视图，它引用`protected/views/projects/index.php`，并将我们创建的模型传递给此视图，如下所示：
- en: '[PRE38]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, create the view file in `protected/views/projects/index.php` and open
    it for editing. Begin by adding a button in the view as follows, which will reference
    the `save` action that we will create later on:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`protected/views/projects/index.php`中创建视图文件并打开它进行编辑。首先，在视图中添加一个按钮，如下所示，它将引用我们稍后创建的`save`动作：
- en: '[PRE39]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then add a descriptive title so that we know what page we are on. Have a look
    at the following line of code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加一个描述性的标题，这样我们就能知道我们在哪个页面。看看以下代码行：
- en: '[PRE40]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, create a new widget that uses `CListView`, a built-in Yii widget designed
    for displaying data from `CActiveDataProvider`. In Yii, widgets are frontend components
    that help us to quickly generate commonly used code, typically for presentation
    purposes. This widget will automatically generate pagination for us as necessary
    and will allow each of our items to look the same. Have a look at the following
    code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The new widget that we created consists of two parts. The first is the `dataProvider`,
    which provides data to the widget. This data comes from our project's model's
    `search()` method, a piece of code automatically generated by Gii.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part of the widget is the `itemView`, which references the specific
    view file that our items will be rendered out of. In this case, the view references
    a file in the same directory of `protected/views/projects` called `_project.php`.
    Create this file and then add the following code to it:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If we refresh our browser page now, our view will show us that no results were
    found. Before we can see data, we need to create an action and view to create
    and update it. Before we start creating new records, let''s create two other actions
    that we outlined in our item''s view: complete and delete.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Changing a project's completion state
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, let''s create an action to mark a project as completed or uncompleted.
    This action will only be responsible for changing the completed field of the projects
    table to 0 or 1, depending on its current state. For simplicity, we can just XOR
    the field by 1 and save the model. Have a look at the following code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Additionally, we''ll create another private method called `loadModel()`, which
    will load our appropriate model for us and throw an error if it cannot be found.
    For this method, we''ll use `CHttpException`, which will create an HTTP exception
    with the error message we provide if a model with the specified ID cannot be found.
    Have a look at the following code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Deleting projects
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we''ll create a method to delete the project. This method will use the
    `loadModel()` method we defined earlier. Additionally, if we encounter an error
    deleting the model, we''ll throw an HTTP exception so that the user knows something
    went wrong. Here''s how we go about it:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Creating and updating projects
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the two other methods defined, we can now work on creating and updating
    a project. Rather than creating two actions to handle both these tasks, we''re
    going to create one action that knows how to handle both by checking the ID that
    we''ll pass as a `GET` parameter. We can do that by defining a new action that
    looks as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can then either create a new project or update a project based upon whether
    or not we were provided with an ID by the user. By taking advantage of `loadModel()`,
    we also take care of any errors that would occur if an ID was provided but a project
    with that ID didn''t exist. Have a look at the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, we can detect whether the user submitted data by checking the `$_POST`
    variable for an array called `Projects`. If that array is defined, we''ll assign
    it to our `$model->attributes` object. Before saving the model, however, we''ll
    want to convert whatever the user entered into a Unix timestamp. Have a look at
    the following code:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Finally, we''ll render the view and pass the model down to it, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Create a new file in `protected/views/projects/` called `save.php` and open
    it to edit. Begin by adding a header that will let us know whether we are editing
    a project or creating a new one, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, we''ll create a new widget with `CActiveForm`, which will take care of
    the hard tasks of creating and inserting form fields into our view file (such
    as what the names and IDs of form fields should be):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Between the `beginWidget` and `endWidget` call, add an error summary if the
    user encounters an error:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, after the error summary, add the form fields and their associated styles,
    as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Did you notice how we're taking advantage of the Yii widget called `CJuiDatePicker`?
    This widget will provide us with a clean interface for selecting dates from a
    calendar view, rather than requiring our end user to type in the date manually
    and in the specified format we've requested.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Now we can create, update, view, and delete projects. Additionally, we've created
    an easy action to mark them as completed. Before we're done with this controller,
    we need to add an action that allows us to view tasks in our project.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Viewing tasks
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our `tasks` action for this controller will function in the same manner as
    our `index` action but will instead use a view called `tasks`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `tasks.php` view in `protected/views/projects/tasks.php` will look as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `_tasks.php` item view in `protected/views/projects/tasks.php` will look
    as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Managing tasks
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we can manage projects, let''s work on managing tasks. Our `TasksController`
    is going to be nearly identical to our project''s controller with only a few differences.
    Start by creating a new file in `protected/controllers` called `TasksController.php`
    that has the following signature:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'By only making a small change to our `loadModel()` method, we can reuse the
    delete and complete action from our projects controller, as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Our `save` action is almost identical to our project''s `save` action. Have
    a look at the following code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The view file for this action is almost the same as well. If you haven''t already,
    create a file called `save.php` in `protected/views/tasks/`, and then add the
    following lines of code to finish the view:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Preventing unauthorized access to our application
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our tasks application can now do everything we defined in our requirements.
    However, it is open to the world. Anyone who wants to edit our tasks could simply
    visit our website and change anything without our knowledge. Before finishing
    up, let's create a simple authentication system to protect our data.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Requiring authentication with filters and access rules
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first part in protecting our application is making sure that only authorized
    people can visit our application. We can do this by adding a filter to our controller
    called `accessControl` and defining access rules to access our content.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'A filter is a piece of code that gets executed before (and/or after) a controller
    action runs, which means that the user will be required to be authenticated before
    accessing our content. To add the `accessControl` filter, add the following to
    both `TasksController` and `ProjectsController`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next, create a new method called `accessRules()`, which will define what users
    can access our application. For our application, we want to deny access to anyone
    who isn''t authenticated. Have a look at the following code snippet:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In the preceding array, `@` is a shorthand reference to an authenticated user.
    Now if we try to visit our web page, we'll be redirected to `/site/login`, the
    default `login` action in Yii.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controller for the authentication
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a file called `SiteController.php` in `protected/controllers`, and then
    create `login` and `logout` actions as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Creating a login layout
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this controller, we''re going to create a new layout called `login.php`
    in `protected/views/layouts`. Copy the markup from `protected/views/layouts/main.php`
    to our new layout, and replace the contents of the `<body>` tag with the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To make our login page look more like a login page, add the following CSS to
    the layout either as an inline style or as a separate file in `/css/signup.css`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Creating a login view
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new form in `protected/views/site/login.php` that will hold our login
    model, as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Identifying our users with the UserIdentity CUserIdentity class
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we create our login model, we need to create a way to identify our users.
    Fortunately, Yii has a built-in class to handle this called `CUserIdentity`. By
    easily extending `CUserIdentity`, we can create a key-value login pair that will
    ensure that only authenticated users can log in to our application.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `UserIdentity.php` in `/components`, and add the following:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The `authenticate()` method of `UserIdentity` is what we'll use in our login
    model to ensure that we have valid credentials. In this class, we are simply checking
    whether the `username` that will be sent to this class by our login model matches
    the key associated with it. If a user's password does not match the key in our
    `$users` array, or if the user is not defined in our `$users` array, we return
    an error code.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Creating the login model
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last component we need to authenticate our users is to create a generic
    model to authenticate the user against. Begin by creating a new file called `LoginForm.php`
    in `protected/models`. This class will extend `CFormModel`, a generic model in
    Yii for forms, as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Since `CFormModel` doesn''t connect to a database, we defined attributes as
    public properties, as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Our model also needs validation rules to verify that we have a valid user.
    In addition to making sure `username` and `password` are provided, we''re going
    to provide an additional validation rule called `authenticate`, which will validate
    that we have a valid username and password. Have a look at the following lines
    of code:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Because our `authenticate()` method is a custom validator, its method signature
    has two parameters, `$attribute` and `$params`, which have information about the
    attribute and parameters that may have been passed from the validator. This method
    will determine whether our credentials are valid. Have a look at the following
    code:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Finally, we''ll create the `login()` method that our `SiteController` calls.
    In addition to validating our credentials, it will do the heavy lifting of creating
    a session for the user. Have a look at the following code:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Now you can visit our site and log in with the credentials provided in our `UserIdentity.php`
    file.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Finishing touches
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before completing our project, there are a few things we need to take care of
    in our `protected/config/main.php` file to enhance the security of our application
    and to make our application easier to use.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: It would be nice to also add some pictures of the final application.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Disabling Gii
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the beginning of our project, we enabled the Gii module to assist us in
    creating models for our application. Since Gii has the ability to write new files
    to our project, we should remove the following section from our `config` file:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Defining a default route
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Presently, if we try to visit the root URL of our application, we are presented
    with an error. To avoid this, we can add a route in to the routes array of our
    URL Manager component. With this addition, whenever we visit the root URL of our
    application, we will be presented with the `index` action of the project''s controller.
    Have a look at the following code:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Adding extra routes
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, add two more routes to our URL Manager routes array. These routes
    will help us more easily access the `login` and `logout` actions for our site.
    Have a look at the following code:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered quite a lot of information. We created an automated
    way of creating and distributing our database, models to represent the tables
    in the database, and a few controllers to manage and interact with our data. We
    also created a simple key-value authentication system to protect our data. Many
    of the methods we used in this chapter, and the code we wrote, can be reused and
    expanded upon in later chapters. Before continuing, be sure to take a look at
    all the classes we referenced in the chapter, in the official Yii documentation,
    so that you can better understand them.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
