["```php\nclass User\n{\n    // ...\n\n    public function makeWish(WishId $wishId, $email, $content)\n    {\n        $wish = new WishEmail(\n            $wishId,\n            $this->id(),\n            $email,\n            $content\n        );\n\n        DomainEventPublisher::instance()->publish(\n            new WishMade($wishId)\n        );\n\n        return $wish;\n    }\n}\n\n```", "```php\n $wish = $aUser->makeWish(\n     $wishRepository->nextIdentity(),\n     'user@example.com',\n     'I want to be free!'\n );\n\n```", "```php\nclass Forum\n{\n    // ...\n\n    public function publishPost(PostId $postId, $content)\n    {\n        $post = new Post($this->id, $postId, $content);\n\n        DomainEventPublisher::instance()->publish(\n            new PostPublished($postId)\n        );\n\n        return $post;\n    }\n }\n\n```", "```php\nclass Forum\n{\n     // ...\n\n    public function publishPost(PostId $postId, $content)\n    {\n        if ($this->isClosed()) {\n            throw new ForumClosedException();\n        }\n\n        $post = new Post($this->id, $postId, $content);\n\n        DomainEventPublisher::instance()->publish(\n            new PostPublished($postId)\n        );\n\n        return $post;\n    }\n}\n\n```", "```php\nnamespace Application\\Service;\n\nuse Domain\\Model\\Post;\nuse Domain\\Model\\PostRepository;\n\nclass LatestPostsFeedService \n{\n    private $postRepository;\n\n    public function __construct(PostRepository $postRepository) \n    {\n        $this->postRepository = $postRepository;\n    }\n\n    /**\n     * @param LatestPostsFeedRequest $request\n     */\n    public function execute($request) \n    {\n        $posts = $this->postRepository->latestPosts($request->since);\n\n        return array_map(function(Post $post) {\n            return [\n                'id' => $post->id()->id(),\n                'content' => $post->body()->content(),\n                'created_at' => $post-> createdAt()\n            ];\n        }, $posts);\n    }\n}\n\n```", "```php\nclass LatestPostsFeedService \n{\n    // ...\n\n    public function execute($request) \n    {\n        $posts = $this->postRepository->query($specification);\n    }\n}\n\n```", "```php\nclass LatestPostsFeedService\n{\n\n    public function execute($request)\n    {\n        $posts = $this->postRepository->query(\n            new SqlLatestPostSpecification($request->since)\n        );\n    }\n}\n\n```", "```php\nnamespace Domain\\Model;\n\ninterface PostSpecificationFactory\n{\n    public function createLatestPosts(DateTimeImmutable $since);\n}\n\n```", "```php\nnamespace Infrastructure\\Persistence\\InMemory;\n\nuse Domain\\Model\\PostSpecificationFactory;\n\nclass InMemoryPostSpecificationFactory\n    implements PostSpecificationFactory\n{\n    public function createLatestPosts(DateTimeImmutable $since)\n    {\n        return new InMemoryLatestPostSpecification($since);\n    }\n}\n\n```", "```php\nclass LatestPostsFeedService\n{\n    private $postRepository;\n    private $postSpecificationFactory;\n\n    public function __construct(\n        PostRepository $postRepository,\n        PostSpecificationFactory $postSpecificationFactory\n    ) {\n        $this->postRepository = $postRepository;\n        $this->postSpecificationFactory = $postSpecificationFactory;\n    }\n\n    public function execute($request)\n    {\n        $posts = $this->postRepository->query(\n            $this->postSpecificationFactory->createLatestPosts(\n                $request->since\n            )\n        );\n    }\n}\n\n```", "```php\nnamespace Application\\Service;\n\nuse Domain\\Model\\Body;\nuse Domain\\Model\\Post;\nuse Domain\\Model\\PostId;\nuse Infrastructure\\Persistence\\InMemory\\InMemoryPostRepositor;\n\nclass LatestPostsFeedServiceTest extends PHPUnit_Framework_TestCase\n{\n    /**\n     * @var \\Infrastructure\\Persistence\\InMemory\\InMemoryPostRepository\n     */\n    private $postRepository;\n\n    /**\n     * @var LatestPostsFeedService\n     */\n    private $latestPostsFeedService;\n\n    public function setUp()\n    {\n        $this->latestPostsFeedService = new LatestPostsFeedService(\n            $this->postRepository = new InMemoryPostRepository()\n        );\n    }\n\n   /**\n    * @test\n    */\n    public function shouldBuildAFeedFromLatestPosts()\n    {\n        $this->addPost(1, 'first', '-2 hours');\n        $this->addPost(2, 'second', '-3 hours');\n        $this->addPost(3, 'third', '-5 hours');\n\n        $feed = $this->latestPostsFeedService->execute(\n            new LatestPostsFeedRequest(\n                 new \\DateTimeImmutable('-4 hours')\n            )\n        );\n\n        $this->assertFeedContains([\n            ['id' => 1, 'content' => 'first'],\n            ['id' => 2, 'content' => 'second']\n        ], $feed);\n    }\n\n    private function addPost($id, $content, $createdAt)\n    {\n        $this->postRepository->add(new Post(\n            new PostId($id),\n            new Body($content),\n            new \\DateTimeImmutable($createdAt)\n        ));\n    }\n\n    private function assertFeedContains($expected, $feed)\n    {\n        foreach ($expected as $index => $contents) {\n            $this->assertArraySubset($contents, $feed[$index]);\n            $this->assertNotNull($feed[$index]['created_at']);\n        }\n    }\n}\n\n```", "```php\nclass SignUpUserService\n{\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    /**\n     * @param SignUpUserRequest $request\n     */\n    public function execute( $request)\n    {\n        $email = $request->email();\n        $password = $request->password();\n\n        $user = $this->userRepository->userOfEmail($email);\n        if (null !== $user) {\n            throw new UserAlreadyExistsException();\n        }\n\n        $this->userRepository->persist(new User(\n            $this->userRepository->nextIdentity(),\n            $email,\n            $password\n        ));\n\n        return $user;\n    }\n}\n\n```", "```php\nclass User\n{\n    private $userId;\n    private $email;\n    private $password;\n\n    public function __construct(UserId $userId, $email, $password)\n    {\n        // ...\n    }\n\n    // ...\n }\n\n```", "```php\nclass DoctrineUser extends User\n{\n    private $surrogateUserId;\n\n    public function __construct(UserId $userId, $email, $password)\n    {\n        parent:: __construct($userId, $email, $password);\n        $this->surrogateUserId = $userId->id();\n    }\n}\n\n```", "```php\ninterface UserFactory\n{\n    public function build(UserId $userId, $email, $password);\n}\n\n```", "```php\nclass DoctrineUserFactory implements UserFactory\n{\n    public function build(UserId $userId, $email, $password)\n    {\n        return new DoctrineUser($userId, $email, $password);\n    }\n}\n\n```", "```php\nclass SignUpUserService\n{\n    private $userRepository;\n    private $userFactory;\n\n    public function __construct(\n        UserRepository $userRepository,\n        UserFactory $userFactory\n    ) {\n        $this->userRepository = $userRepository;\n        $this->userFactory = $userFactory;\n    }\n\n    /**\n     * @param SignUpUserRequest $request\n     */\n    public function execute($request)\n    {\n        // ...\n        $user = $this->userFactory->build(\n            $this->userRepository->nextIdentity(),\n            $email,\n            $password\n        );\n        $this->userRepository->persist($user);\n        return $user;\n    }\n}\n\n```", "```php\nclass Author\n{\n    private $username;\n    private $email ;\n    private $fullName;\n\n    public function __construct(\n        Username $aUsername,\n        FullName $aFullName,\n        Email $anEmail\n    ) {\n        $this->username = $aUsername;\n        $this->email = $anEmail ;\n        $this->fullName = $aFullName;\n    }\n\n    // ...\n}\n\n```", "```php\nclass MyTest extends PHPUnit_Framework_TestCase\n{\n    /**\n     * @test\n     */\n    public function itDoesSomething()\n    {\n        $author = new Author(\n            new Username('johndoe'),\n            new FullName('John', 'Doe' ),\n            new Email('john@doe.com' )\n        );\n\n        //do something with author\n    }\n}\n\n```", "```php\nclass AuthorObjectMother\n{\n    public static function createOne()\n    {\n        return new Author(\n            new Username('johndoe'),\n            new FullName('John', 'Doe'),\n            new Email('john@doe.com )\n        );\n    }\n}\n\nclass MyTest extends PHPUnit_Framework_TestCase\n{\n    /**\n     * @test\n     */\n    public function itDoesSomething()\n    {\n        $author = AuthorObjectMother::createOne();\n    }\n}\n\n```", "```php\nclass AuthorBuilder\n{\n    private $username;\n    private $email ;\n    private $fullName;\n\n    private function __construct()\n    {\n        $this->username = new Username('johndoe');\n        $this->email = new Email('john@doe.com');\n        $this->fullName = new FullName('John', 'Doe');\n    }\n\n    public static function anAuthor()\n    {\n        return new self();\n    }\n\n    public function withFullName(FullName $aFullName)\n    {\n        $this->fullName = $aFullName;\n\n        return $this;\n    }\n\n    public function withUsername(Username $aUsername)\n    {\n        $this->username = $aUsername;\n\n        return $this;\n    }\n\n    public function withEmail(Email $anEmail)\n    {\n        $this->email = $anEmail ;\n\n        return $this;\n    }\n\n    public function build()\n    {\n        return new Author($this->username, $this->fullName, $this->email);\n    }\n}\n\nclass MyTest extends PHPUnit_Framework_TestCase\n{\n    /**\n     * @test\n     */\n    public function itDoesSomething()\n    {\n        $author = AuthorBuilder::anAuthor()\n            ->withEmail(new Email('other@email.com'))\n            ->build();\n    }\n}\n\n```", "```php\nclass Post\n{\n    private $id;\n    private $author;\n    private $body;\n    private $createdAt;\n\n    public function __construct(\n        PostId $anId, Author $anAuthor, Body $aBody\n    ) {\n        $this->id = $anId;\n        $this->author = $anAuthor;\n        $this->body = $aBody;\n        $this->createdAt = new DateTimeImmutable();\n    }\n}\n\n```", "```php\nclass PostBuilder\n{\n    private $postId;\n    private $author;\n    private $body;\n\n    private function __construct()\n    {\n        $this->postId = new PostId();\n        $this->author = AuthorBuilder::anAuthor()->build();\n        $this->body = new Body('Post body');\n    }\n\n    public static function aPost()\n    {\n        return new self();\n    }\n\n    public function withAuthor(Author $anAuthor)\n    {\n        $this->author = $anAuthor;\n\n        return $this;\n    }\n\n    public function withPostId(PostId $aPostId)\n    {\n        $this->postId = $aPostId;\n\n        return $this;\n    }\n\n    public function withBody(Body $body)\n    {\n        $this->body = $body;\n\n        return $this;\n    }\n\n    public function build()\n    {\n        return new Post($this->postId, $this->author, $this->body);\n    }\n}\n\n```", "```php\nclass MyTest extends PHPUnit_Framework_TestCase\n{\n    /**\n     * @test\n     */\n    public function itDoesSomething()\n    {\n        $post = PostBuilder::aPost()\n            ->withAuthor(AuthorBuilder::anAuthor()\n            ->withUsername(new Username('other'))\n                ->build())\n            ->withBody(new Body('Another body'))\n                ->build();\n\n        //do something with the post\n    }\n}\n\n```"]