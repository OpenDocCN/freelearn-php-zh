["```php\n    docker-compose up\n    ```", "```php\n    docker-compose exec php bash restore.sh\n    ```", "```php\n<?php\nnamespace App\\CalculatedValue;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\CalculatorClassInterface;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Model\\DataObject\\Data\\CalculatedValue;\nuse Pimcore\\Model\\DataObject\\Product;\nuse Pimcore\\Tool;\nclass DataQualityCalculator implements CalculatorClassInterface\n{\n    public function compute(Concrete $object, CalculatedValue     $context): string\n    {\n        return $this->getCalculatedValueForEditMode($object,         $context);\n    }\n    public function getCalculatedValueForEditMode(Concrete     $object, CalculatedValue $context): string\n    {\n        if ($object instanceof Product) {\n            $language = $context->getPosition();\n            if(empty($object->getName($language)) \n                || empty($object->getShort_                description($language))\n                || empty($object->getDescription($language))){\n                return \"no\";\n            }\n            return \"yes\";\n        }\n        return '';\n    }\n}\n```", "```php\n<?php\nnamespace App\\CalculatedValue;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Layout\\DynamicTextLabelInterface;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Model\\DataObject\\Data\\CalculatedValue;\nuse Pimcore\\Model\\DataObject\\Product;\nuse Pimcore\\Tool;\nclass DataQualityCalculator implements DynamicTextLabelInterface\n{\n    public function renderLayoutText($data, $object, $params)\n    {\n        if ($object instanceof Product) {\n            $htmlTable = '<table style=\"border: 1px solid             black\">';\n            $htmlTable .= '<thead><tr>\n<td style=\"border: 1px solid black\">Language</td>\n<td style=\"border: 1px solid black\">Translation Status</td>\n</tr></thead>';\n            foreach (Tool::getValidLanguages() as $language) {\n                $htmlTable .= '<tr>';\n                $htmlTable .= '<td style=\"border: 1px solid                 black\">'.$language.'</td>';\n                $htmlTable .= '<td style=\"border: 1px solid                 black\">'.($object-                >getTranslationCompleted($language) == \"yes\" ?                 \"completed\" : \"not completed\").'</td>';\n                $htmlTable .= '</tr>';\n            }\n            $htmlTable .= '</table>';\n            return \"<h2 style='margin-top: 0'>Translations             Summary</h2>\" . $htmlTable;\n        }\n        return '';\n    }\n}\n```", "```php\n    docker-compose php bash\n    ```", "```php\n    composer require pimcore/data-hub\n    ```", "```php\nphp bin/console pimcore:bundle:enablePimcoreDatahubBundle\nphp bin/console pimcore:bundle:installPimcoreDatahubBundle\n```", "```php\n/pimcore-graphql-webservices/{configurationname}?apikey={yourApiKey}\n```", "```php\nphp bin/console Datahub:graphql:rebuild-definitions\n```", "```php\n{\n    getProductListing(first: 10, after: 0, filter: \"{\\\"o_    type\\\": \\\"object\\\"}\") {\n        edges {\n            node {\n                id\n                name\n                short_description\n                    }\n                }\n        totalCount\n    }\n}\n```", "```php\n{\ngetProduct(id: 162, defaultLanguage: \"en\"){\n    name\n    name_it: name(language: \"it\")\n    price{\n        value\n        unit{\n            abbreviation\n        }\n        toString\n    }\n  }\n}\n```", "```php\n{\n    getProduct(id: 162){\n        category{\n            ... on object_Category{\n                id\n                name\n      }\n    }\n    materials{\n        element{\n            id\n            name\n      }\n      metadata{\n          name\n          value\n      }\n    }\n  }\n}\n```", "```php\n{\n    getProduct(id: 162){\n        images{\n            ... on fieldcollection_ImageInfo {\n                image{\n                    id\n                    filename\n                    fullpath\n                    filesize\n                    data\n               }\n           }\n       }\n    }\n}\n```", "```php\n{\ngetProduct(id: 162){\n    children(objectTypes:[\"variant\"]){\n        ... on object_Product{\n            id\n            color{\n                ... on object_Color{\n                    name\n                }\n             }\n          }\n       }\n    }\n}\n```", "```php\nmutation{\n    createProduct(path:\"/Products\", key:\"Running Shoes\",     input:{\n        sku: \"0003\"\n        name: \"Runner Shoes\"\n        category: {id: 177}\n        }){\n        success\n        message\n        output{\n            id\n            sku\n            name\n        }\n    }\n}\n```", "```php\n{\n  \"data\": {\n    \"createProduct\": {\n      \"success\": true,\n      \"message\": \"object created: 178\",\n      \"output\": {\n        \"id\": \"178\",\n        \"sku\": \"0003\",\n        \"name\": \"Runner Shoes\"\n      }\n    }\n  }\n}\n```", "```php\nmutation{\n        updateProduct(id:178, input:{\n            short_description: \"The classic model of low             sneakers is certainly very comfortable and             practical and defines a personal style\"\n        }){\n            success\n            message\n            output{\n                   id\n                   sku\n                   name\n                   short_description\n            }\n      }\n}\n```", "```php\nmutation{\n    deleteProduct(id:178){\n        success\n        message\n    }\n}\n```", "```php\n<?php\nnamespace App\\EventListener;\nclass DatahubListener {\n    public function onMutationEventsPreBuild (MutationTypeEvent $event) {\n        $config = $event->getConfig();\n        $opName = \"updateProductPrice\";\n        $inputType = new \\GraphQL\\Type\n        \\Definition\\InputObjectType([\n            'name' => \"priceType\",\n            'fields' => [\n                'priceValue' => ['type' =>Type::float()],\n                'unit' => ['type' =>Type::string()]\n            ]\n        ]);\n        $operation = [\n            'type' =>Type::string(), \n            'args' => [\n                'id' => ['type' =>\n                 Type::nonNull(Type::int())],\n                'input' => ['type' => $inputType],\n            ], 'resolve' => function ($source, $args, $context,             ResolveInfo $info) {\n                $id = $args['id'];\n                $product = Product::getById($id);\n                if(empty($product)){\n                    throw new \\Exception(\"Product with id '$id'                     does not exists.\");\n                }\n                $value = $args['input']['priceValue'];\n                $uom = $args['input']['unit'];\n                $unit = Unit::getByAbbreviation($uom);\n                if(empty($unit)){\n                    throw new \\Exception(\"Unit of measure                     '$uom' does not exists.\");\n                }\n                $price = new QuantityValue();\n                $price->setValue($value);\n                $price->setUnitId($unit->getId());\n                $product->setPrice($price);\n                $product->save();\n                return \"Price updated for product with id                 '$id'\";\n            }\n        ];\n        $config['fields'][$opName] = $operation;\n        $event->setConfig($config);\n    }\n}\n```"]