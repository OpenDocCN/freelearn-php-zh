- en: Chapter 11. Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 测试
- en: Software testing can be defined as a critical step in the development life cycle.
    This step is often silently overlooked by a number of developers because a certain
    amount of time need to be invested into writing a decent test suite for a code
    base. Rather than being a single one-time activity, writing tests is a process
    that follows our code as it grows and changes. Test results should, at any given
    time, validate and verify that our software works as expected, thus meeting the
    business and technical requirements. Writing tests should follow writing the actual
    application code early on in the life cycle. This helps prevent defects from being
    introduced in the code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试可以定义为开发生命周期中的一个关键步骤。这一步骤常常被许多开发者无声地忽视，因为需要投入一定的时间来为代码库编写一个体面的测试套件。编写测试不仅是一个单一的一次性活动，而是一个随着代码的增长和变化而持续的过程。在任何时候，测试结果都应该验证和确认我们的软件按预期工作，从而满足业务和技术要求。在生命周期的早期阶段，编写测试应该早于编写实际的应用程序代码。这有助于防止在代码中引入缺陷。
- en: 'On a high level, we can divide tests into the following categories:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，我们可以将测试分为以下类别：
- en: '**Static**: Application code is not executed during testing. Possible errors
    are found by inspecting the application code files and not on their execution.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态**：在测试期间不执行应用程序代码。通过检查应用程序代码文件而不是它们的执行来查找可能的错误。'
- en: '**Dynamic**: Application code is executed during testing. Possible errors are
    found while checking for functional behavior of an application.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态**：在测试期间执行应用程序代码。在检查应用程序的功能行为时发现可能的错误。'
- en: In this chapter, we will take a look at the testing options that Magento offers.
    Along the way, we will build a basic module with some testing features in it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Magento提供的测试选项。在这个过程中，我们将构建一个包含一些测试功能的基本模块。
- en: Types of tests
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试类型
- en: 'Magento provides several types of tests out of the box. We can see a list of
    these tests on running the following command on the console in the Magento root
    folder:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Magento提供多种类型的测试。我们可以在运行以下命令时在Magento根目录下的控制台看到这些测试的列表：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The result of the command is an output that looks like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的结果是一个看起来像这样的输出：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This output originates from the `Console/Command/DevTestsRunCommand.php` file
    in the core `Magento_Developer` module. Looking at the output, we might say that
    there are actually nine types of tests, which are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出源自核心`Magento_Developer`模块中的`Console/Command/DevTestsRunCommand.php`文件。查看输出，我们可能会说实际上有九种测试类型，如下所示：
- en: '`all`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all`'
- en: '`unit`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unit`'
- en: '`integration`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integration`'
- en: '`integration-all`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integration-all`'
- en: '`static`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static`'
- en: '`static-all`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static-all`'
- en: '`integrity`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integrity`'
- en: '`legacy`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`legacy`'
- en: '`default`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`'
- en: However, these are not unique types of tests; these are combinations, as we
    will soon see.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些并非独特的测试类型；这些是组合，正如我们很快就会看到的。
- en: Let's take a closer look at the code in the `DevTestsRunCommand` class and its
    `setupTestInfo` method.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地查看`DevTestsRunCommand`类中的代码及其`setupTestInfo`方法。
- en: 'The `setupTestInfo` method defines the internal `commands` property, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`setupTestInfo`方法定义了内部的`commands`属性，如下所示：'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Furthermore, we can see the types property in the `setupTestInfo` method defined
    in the following way:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以在以下方式定义的`setupTestInfo`方法中看到`types`属性：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `types` property logically groups one or more tests into a single name that
    is found under the `commands` property. We can see how like `unit` single type
    encompasses the `unit`, `unit-performance`, `unit-static`, and `unit-integration`
    tests in it. The `commands` property points to the disk location of the actual
    test library. Relative to the Magento root installation folder, tests can be found
    in the `dev/tests/ directory`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`types`属性逻辑上将一个或多个测试组合成一个在`commands`属性下找到的单个名称。我们可以看到`unit`单一类型如何包含`unit`、`unit-performance`、`unit-static`和`unit-integration`测试。`commands`属性指向实际测试库的磁盘位置。相对于Magento根安装文件夹，测试可以在`dev/tests/`目录中找到。'
- en: Unit testing
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: '**Unit tests** are designed to test individual class methods in isolation,
    asserting all possible combinations and taking care of the smallest testable part
    of an application. Magento uses the **PHPUnit** testing framework for its unit
    tests. Being highly focused, unit tests make it easy to identify the root cause
    of issues if a certain test fails.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元测试**旨在单独测试单个类方法，断言所有可能的组合，并关注应用程序中最小的可测试部分。Magento使用**PHPUnit**测试框架进行单元测试。由于高度专注，单元测试在某个测试失败时可以轻松地识别问题的根本原因。'
- en: 'We can specifically trigger the unit tests from the root of the Magento installation
    by using the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用以下命令从 Magento 安装根目录特定地触发单元测试：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once triggered, Magento will run the `execute` command in the `vendor/magento/module-developer/Console/Command/DevTestsRunCommand.php`
    file. Since the unit type is mapped to several commands, what will happen internally
    is that Magento will change the directories from one directory to another, as
    follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发，Magento 将在 `vendor/magento/module-developer/Console/Command/DevTestsRunCommand.php`
    文件中运行 `execute` 命令。由于单元类型映射到多个命令，内部发生的情况是 Magento 将目录从一个目录切换到另一个目录，如下所示：
- en: '`dev/tests/unit`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev/tests/unit`'
- en: '`dev/tests/performance/framework/tests/unit`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev/tests/performance/framework/tests/unit`'
- en: '`dev/tests/static/framework/tests/unit`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev/tests/static/framework/tests/unit`'
- en: '`dev/tests/integration/framework/tests/unit`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev/tests/integration/framework/tests/unit`'
- en: We can say that all of these directories are considered unit test directories.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说所有这些目录都被认为是单元测试目录。
- en: 'Within each of those directories, Magento internally runs the `passthru($command,
    $returnVal)` method, where the `$command` parameter gets resolved to a string
    similar to the following one:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些目录中的每一个，Magento 内部运行 `passthru($command, $returnVal)` 方法，其中 `$command` 参数解析为一个类似于以下字符串的字符串：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The PHPUnit will then look for the `phpunit.xml` configuration file accordingly
    in each of these directories. If `phpunit.xml` does not exist, we need to copy
    the contents of `phpunit.xml.dist` into `phpunit.xml`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 PHPUnit 将相应地在每个这些目录中查找 `phpunit.xml` 配置文件。如果不存在 `phpunit.xml`，我们需要将 `phpunit.xml.dist`
    的内容复制到 `phpunit.xml`。
- en: Let's take a closer look at the `dev/tests/unit/phpunit.xml` file for `testsuite`,
    `filter`, `whitelist`, and other configuration elements.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地查看 `dev/tests/unit/phpunit.xml` 文件中的 `testsuite`、`filter`、`whitelist`
    和其他配置元素。
- en: 'The following default `testsuite` directory list is found in the `dev/tests/unit/phpunit.xml
    file`, which lists the directories in which you need to look for `tests` files
    prefixed with `Test.php`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `dev/tests/unit/phpunit.xml` 文件中找到了以下默认的 `testsuite` 目录列表，它列出了你需要查找以 `Test.php`
    为前缀的 `tests` 文件所在的目录：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The list is relative to the `dev/tests/unit/` directory. For example, if we
    take a look at the first line in the preceding code and then look at the `Magento_Catalog`
    module, it is clear that the `Test` files are found under the `app/code/<vendorName>/<moduleName>/Test/`
    directory and its subdirectories. Everything suffixed with `Test.php` in these
    folders will get executed as a part of a unit test.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 列表相对于 `dev/tests/unit/` 目录。例如，如果我们查看前面代码中的第一行，然后查看 `Magento_Catalog` 模块，很明显
    `Test` 文件位于 `app/code/<vendorName>/<moduleName>/Test/` 目录及其子目录下。这些文件夹中所有以 `Test.php`
    结尾的内容都将作为单元测试的一部分执行。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If we were building our own module, we could easily make a copy of `dev/tests/unit/phpunit.xml.dist`,
    properly edit `testsuite` and `filter > whitelist` to quickly execute only our
    module's unit tests, thus saving some time on avoiding frequent execution of entire
    Magento unit tests.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在构建自己的模块，我们可以轻松地复制 `dev/tests/unit/phpunit.xml.dist`，适当编辑 `testsuite` 和
    `filter > whitelist`，以便快速执行仅我们模块的单元测试，从而节省避免频繁执行整个 Magento 单元测试的时间。
- en: Integration testing
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: '**Integration tests** test the interaction between individual components, layers,
    and an environment. They can be found in the `dev/tests/integration` directory.
    Like unit tests, Magento also uses PHPUnit for integration tests. Thus, the difference
    between a unit and an integration test is not that much of a technical nature;
    rather, it''s of a logical nature.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成测试** 测试单个组件、层和环境之间的交互。它们可以在 `dev/tests/integration` 目录中找到。像单元测试一样，Magento
    也使用 PHPUnit 进行集成测试。因此，单元测试和集成测试之间的区别不是技术性质上的，而是逻辑性质上的。'
- en: 'To specifically trigger integration tests only, we can execute the following
    command on the console:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要特定地触发集成测试，我们可以在控制台执行以下命令：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When executed, Magento internally changes the directory to `dev/tests/integration`
    and executes a command that is similar to the following one:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行时，Magento 会内部更改目录到 `dev/tests/integration` 并执行一个类似于以下命令的命令：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The integration directory has its own `phpunit.xml.dist` file. Looking at its
    `testsuite` definition, we can see that it is pointing to all the `Test.php` suffixed
    files that are found in the `dev/tests/integration/testsuite` directory.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 集成目录有其自己的 `phpunit.xml.dist` 文件。查看其 `testsuite` 定义，我们可以看到它指向 `dev/tests/integration/testsuite`
    目录中找到的所有以 `Test.php` 结尾的文件。
- en: Static testing
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态测试
- en: '**Static tests** do not really run the code; they analyze it. They are used
    to verify that the code conforms to certain coding standards, such as PSR-1\.
    We can find them under the `dev/tests/static` directory.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**静态测试**实际上并不运行代码；它们分析代码。它们用于验证代码是否符合某些编码标准，例如 PSR-1。我们可以在 `dev/tests/static`
    目录下找到它们。'
- en: 'To specifically trigger static tests only, we can execute the following command
    on the console:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要专门触发静态测试，我们可以在控制台执行以下命令：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When executed, Magento internally changes the directory to `dev/tests/static`
    and executes a command that is similar to the following one:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行时，Magento 在内部将目录更改为 `dev/tests/static` 并执行一个类似于以下命令的操作：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The static directory has its own `phpunit.xml.dist` file. Looking at its `testsuite`
    definition, you will see the following four test suites defined:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 静态目录有其自己的 `phpunit.xml.dist` 文件。查看其 `testsuite` 定义，你会看到以下四个测试套件被定义：
- en: JavaScript static code analysis
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 静态代码分析
- en: PHP coding standard verification
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 编码标准验证
- en: Code integrity tests
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码完整性测试
- en: XSS unsafe output test
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XSS 不安全输出测试
- en: '`JSHint`, a JavaScript code quality tool, is used for JavaScript static code
    analysis. For PHP code standard verification, the elements of `PHP_CodeSniffer`
    libraries are used. `PHP_CodeSniffer` tokenizes PHP, JavaScript, and CSS files
    and detects violations of a defined set of coding standards.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSHint` 是一个用于 JavaScript 代码质量检查的工具，用于 JavaScript 静态代码分析。对于 PHP 代码标准验证，使用 `PHP_CodeSniffer`
    库的元素。`PHP_CodeSniffer` 将 PHP、JavaScript 和 CSS 文件进行标记化，并检测违反定义的编码标准。'
- en: Integrity testing
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整性测试
- en: '**Integrity tests** check how an application is linked. They check for things
    such as merged configuration validation. Basically, they tell us if your application
    should be able to run.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**完整性测试**检查应用程序的链接方式。它们检查诸如合并配置验证等问题。基本上，它们告诉我们应用程序是否应该能够运行。'
- en: 'We can specifically trigger the integrity tests from the root of the Magento
    installation by using the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用以下命令从 Magento 安装的根目录中专门触发完整性测试：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When this is executed, Magento first internally changes the directory to `dev/tests/static`
    and then executes two commands that are similar to the following ones:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行此操作时，Magento 首先在内部将目录更改为 `dev/tests/static`，然后执行两个类似于以下命令的操作：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, Magento internally changes the directory to `dev/tests/integration` and
    executes a command that is similar to the following one:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Magento 在内部将目录更改为 `dev/tests/integration` 并执行一个类似于以下命令的操作：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Integration tests also utilize the PHPUnit to write the actual tests.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试也使用 PHPUnit 编写实际测试。
- en: Legacy testing
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旧版测试
- en: '**Legacy tests** comprise fragments of libraries that help developers port
    their modules to a new version of Magento.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**旧版测试**包括帮助开发者将模块移植到 Magento 新版本的库片段。'
- en: 'We can trigger legacy tests specifically from the root of the Magento installation
    by using the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用以下命令从 Magento 安装的根目录中专门触发旧版测试：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When this is executed, Magento first internally changes the directory to `/dev/tests/static`
    and then executes a command, which is similar to the following one:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行此操作时，Magento 首先在内部将目录更改为 `/dev/tests/static`，然后执行一个类似于以下命令的操作：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once this is triggered, the code runs a check for obsolete access lists, connections,
    menus, responses, system configuration, and a few other things.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发，代码将运行检查过时的访问列表、连接、菜单、响应、系统配置以及一些其他事项。
- en: Performance testing
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能测试
- en: Performance tests can be found under the `setup/performance-toolkit/` directory.
    These tests require Apache JMeter to be installed and are available on the console
    via the `jmeter` command. Apache JMeter can be downloaded and installed by following
    the instructions at [http://jmeter.apache.org](http://jmeter.apache.org).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试可以在 `setup/performance-toolkit/` 目录下找到。这些测试需要安装 Apache JMeter，并且可以通过控制台上的
    `jmeter` 命令访问。可以通过遵循 [http://jmeter.apache.org](http://jmeter.apache.org) 上的说明来下载和安装
    Apache JMeter。
- en: 'The crux of the performance test is defined in the `benchmark.jmx` file, which
    can be opened in the JMeter GUI tool, as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试的核心定义在 `benchmark.jmx` 文件中，该文件可以在 JMeter GUI 工具中打开，如下截图所示：
- en: '![Performance testing](img/00088.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![性能测试](img/00088.jpeg)'
- en: 'As shown in the preceding screenshot, the default `benchmark.jmx` tests are
    sectioned into three thread groups that are named **setUp Thread Group**, **Customer
    Checkout**, and **tearDown Thread Group**. We might want to additionally click
    on each group and configure it with some extra parameters, thus possibly changing
    **Number of Threads (users)**, as shown in the following screenshot. We can then
    simply save the changes as modifications to the `benchmark.jmx` file or a file
    with new name:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一张截图所示，默认的`benchmark.jmx`测试被分为三个线程组，分别命名为**setUp Thread Group**、**Customer
    Checkout**和**tearDown Thread Group**。我们可能还想点击每个组并使用一些额外的参数进行配置，从而可能改变**线程数（用户数）**，如下一张截图所示。然后我们可以简单地保存更改，作为对`benchmark.jmx`文件或新文件的修改：
- en: '![Performance testing](img/00089.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![性能测试](img/00089.jpeg)'
- en: 'We can manually trigger a performance test from the console without using a
    GUI interface by running the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令从控制台手动触发性能测试，而不使用GUI界面：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The console parameters that are listed here and which start with `-J` also match
    the names of the **Used Defined Variables** test toolkit, as shown in the preceding
    screenshot. We need to be careful and set them according to the Magento installation.
    The `-n` parameter instructs `jmeter` to run in the run *nongui* mode. The `-t`
    parameter is where we set the path of the test (`.jmx`) file to run. The `-l`
    parameter sets the file where we need to log samples to.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的以`-J`开头的控制台参数也匹配**用户定义变量**测试工具包的名称，如前一张截图所示。我们需要小心设置它们，以符合Magento的安装。`-n`参数指示`jmeter`以*nongui*模式运行。`-t`参数是我们设置要运行的测试（`.jmx`）文件路径的地方。`-l`参数设置我们需要记录样本的文件。
- en: Functional testing
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: '**Functional tests** mimic the user interaction with our application. They
    literally mean testing in the form of browser interaction, which involves clicking
    on the page, adding products to the cart, and so on. For this purpose, Magento
    uses **Magento Testing Framework** (**MTF**). It''s a PHP wrapper around **Selenium**,
    which is a portable software testing framework for web applications. MTF is not
    available out of the box via the console. It can be downloaded at [https://github.com/magento/mtf](https://github.com/magento/mtf).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能测试**模拟用户与我们的应用程序的交互。字面上讲，这意味着以浏览器交互的形式进行测试，包括点击页面、将产品添加到购物车等。为此，Magento使用**Magento测试框架**（**MTF**）。它是一个围绕**Selenium**的PHP包装器，Selenium是一个适用于Web应用程序的可移植软件测试框架。MTF不是通过控制台直接可用的。它可以在[https://github.com/magento/mtf](https://github.com/magento/mtf)上下载。'
- en: 'The following requirements need to be met before installing MTF:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装MTF之前，需要满足以下要求：
- en: Git must be installed.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须安装Git。
- en: The Firefox browser must be installed.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须安装Firefox浏览器。
- en: The PHP openssl extension must be installed and enabled.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须安装并启用PHP openssl扩展。
- en: Java version 1.6 or later is required and it's JAR executable must be in the
    system PATH.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要Java版本1.6或更高版本，并且它的JAR可执行文件必须在系统PATH中。
- en: The Selenium standalone server, which is available at [http://www.seleniumhq.org/](http://www.seleniumhq.org/),
    needs to be downloaded. The download should provide a JAR file that we will later
    need to refer to.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可在[http://www.seleniumhq.org/](http://www.seleniumhq.org/)找到的Selenium独立服务器需要下载。下载应提供一个我们将后来需要引用的JAR文件。
- en: Magento must be installed and configured to not use the secret URL key. We can
    set the secret URL key option by navigating to **Stores** | **Configuration**
    | **Advanced** | **Admin** | **Security** | **Add Secret Key to URLs** [Yes/No]
    and setting it to **No**.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Magento必须安装并配置为不使用秘密URL密钥。我们可以通过导航到**商店** | **配置** | **高级** | **管理员** | **安全**
    | **将秘密密钥添加到URL** [是/否]并将它设置为**否**。
- en: 'Once the minimal requirements are met, we can install MTF, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦满足最小要求，我们可以按照以下步骤安装MTF：
- en: Run the `composer install` command from the `dev/tests/functional/` directory.
    This creates a new directory named `vendor`; MTF is pulled from the Git repository
    at [https://github.com/magento/mtf](https://github.com/magento/mtf). We should
    see a new directory named `vendor` that is created with the checked off MTF. The
    `vendor` directory contains the content that is shown in the following screenshot:![Functional
    testing](img/00090.jpeg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`dev/tests/functional/`目录运行`composer install`命令。这会创建一个名为`vendor`的新目录；MTF是从[https://github.com/magento/mtf](https://github.com/magento/mtf)的Git仓库中拉取的。我们应该看到一个名为`vendor`的新目录，其中包含以下截图所示的内容：![功能测试](img/00090.jpeg)
- en: 'Run the `generate.php` file from the `dev/tests/functional/utils/` directory.
    This should give us a console output that is similar to the following one:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`dev/tests/functional/utils/`目录下运行`generate.php`文件。这应该会给我们一个类似于以下的控制台输出：
- en: '[PRE17]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The generator tool creates factories for fixtures, handlers, repositories, page
    objects, and block objects. When MTF is initialized, the factories are pregenerated
    to facilitate the creation and running of tests.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成工具为固定值、处理器、存储库、页面对象和块对象创建工厂。当MTF初始化时，工厂预先生成，以方便测试的创建和运行。
- en: 'Before we can actually run the tests, there are a few more things that we need
    to configure, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际运行测试之前，还有一些其他的事情需要配置，如下所示：
- en: Edit the `dev/tests/functional/phpunit.xml` file. Under the `php` element, for
    `name="app_frontend_url"`, set the value of the actual URL for the Magento storefront
    under test. For `name="app_backend_url"`, set the value of the actual URL for
    the Magento admin URL under test. For `name="credentials_file_path"`, set the
    value of `./credentials.xml`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`dev/tests/functional/phpunit.xml`文件。在`php`元素下，对于`name="app_frontend_url"`，设置测试的Magento店面实际URL的值。对于`name="app_backend_url"`，设置测试的Magento管理URL实际URL的值。对于`name="credentials_file_path"`，设置`./credentials.xml`的值。
- en: Tip
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If `phpunit.xml` does not exist, we need to create it and copy the contents
    of `dev/tests/functional/phpunit.xml.dist` into it and then edit it afterwards.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`phpunit.xml`不存在，我们需要创建它，并将`dev/tests/functional/phpunit.xml.dist`的内容复制到其中，然后进行编辑。
- en: Edit the `dev/tests/functional/etc/config.xml` file. Under the `application`
    element, find and edit the information about `backendLogin`, `backendPassword`,
    and `appBackendUrl` so that it matches that of our store.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`dev/tests/functional/etc/config.xml`文件。在`application`元素下，找到并编辑`backendLogin`、`backendPassword`和`appBackendUrl`的信息，使其与我们的商店匹配。
- en: Tip
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If `config.xml` does not exist, we need to create it and copy the contents of
    `dev/tests/functional/etc/config.xml.dist` into it and then edit it afterwards.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`config.xml`不存在，我们需要创建它，并将`dev/tests/functional/etc/config.xml.dist`的内容复制到其中，然后进行编辑。
- en: Edit the `dev/tests/functional/credentials.xml` file. Chances are that we will
    not need this on a blank Magento installation, as we can see by default the entries
    for the `fedex`, `ups`, `dhl U`S, and `dhl EU` carriers, which haven't been set
    on the freshly installed Magento.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`dev/tests/functional/credentials.xml`文件。在空白Magento安装中，我们可能不需要这个文件，因为我们默认可以看到`fedex`、`ups`、`dhl
    U.S.`和`dhl EU`承运人的条目，这些在全新安装的Magento中尚未设置。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If `credentials.xml` does not exist, we need to create it and copy the contents
    of `dev/tests/functional/credentials.xml.dist` into it and then edit it afterwards.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`credentials.xml`不存在，我们需要创建它，并将`dev/tests/functional/credentials.xml.dist`的内容复制到其中，然后进行编辑。
- en: Run the `java -jar {selenium_directory}/selenium-server.jar` command via the
    console. This is to ensure that the Selenium server is running.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过控制台运行`java -jar {selenium_directory}/selenium-server.jar`命令。这是为了确保Selenium服务器正在运行。
- en: Open a new console or a console tab and execute the `phpunit` command in the
    `dev/tests/functional/` directory. This command should open the Firefox browser
    and start running test cases in it, simulating a user clicking on the browser
    window and filling in the form inputs.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的控制台或控制台标签，并在`dev/tests/functional/`目录下执行`phpunit`命令。这个命令应该会打开Firefox浏览器并开始在其中运行测试用例，模拟用户点击浏览器窗口并填写表单输入。
- en: 'While a test is running, Magento will log all the failed tests under the `dev/tests/functional/var/log`
    directory in a structure that is similar to the one shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试运行时，Magento会将所有失败的测试记录在`dev/tests/functional/var/log`目录下，其结构类似于以下截图所示：
- en: '![Functional testing](img/00091.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![功能测试](img/00091.jpeg)'
- en: The `log` path can be configured in the `dev/tests/functional/phpunit.xml` file
    under the `php` element with `name="basedir"`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dev/tests/functional/phpunit.xml`文件下的`php`元素中，可以通过`name="basedir"`配置`log`路径。
- en: 'If we want to target a specific test within the entire test suite, we can simply
    trigger a command like the following one in the `dev/tests/functional/` directory:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在整个测试套件中针对特定的测试，我们可以在`dev/tests/functional/`目录中简单地触发以下命令：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding command will run a single test called `RegisterCustomerFrontendEntityTest.php`.
    We can also use a shorter form expression for the same thing, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将运行一个名为`RegisterCustomerFrontendEntityTest.php`的单个测试。我们也可以使用更简短的表达形式，如下所示：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once this is executed, the browser should open and simulate the customer registration
    process on the storefront.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行，浏览器应该打开并模拟在店面上的客户注册过程。
- en: Writing a simple unit test
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个简单的单元测试
- en: Now that we took a quick look at all the type of tests that Magento offers,
    let's take a step back and look at unit tests again. In practice, unit tests are
    probably the ones that we will be writing most of the time. With this in mind,
    let's grab the `Foggyline_Unitly` module from [https://github.com/ajzele/B05032-Foggyline_Unitly](https://github.com/ajzele/B05032-Foggyline_Unitly)
    and start writing unit tests for it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们快速浏览了 Magento 提供的所有测试类型，让我们退一步再次看看单元测试。在实践中，单元测试可能是我们将要编写的大部分内容。考虑到这一点，让我们从
    [https://github.com/ajzele/B05032-Foggyline_Unitly](https://github.com/ajzele/B05032-Foggyline_Unitly)
    中获取 `Foggyline_Unitly` 模块，并开始为其编写单元测试。
- en: 'If you do not already have the `Foggyline_Unitly` module in the code base that
    was a part of the previous chapters, then you need to place its content under
    `app/code/Foggyline/Unitly` and execute the following commands on the console
    from the root of the Magento directory:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有在代码库中包含前几章的 `Foggyline_Unitly` 模块，那么你需要将其内容放置在 `app/code/Foggyline/Unitly`
    下，并在 Magento 目录的根目录下从控制台执行以下命令：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The tests that we will write reside in the module''s `Test/Unit` directory.
    This makes the entire path of the test directory look like `app/code/Foggyline/Unitly/Test/Unit/`.
    Magento knows that it needs to look inside this folder simply because of the test
    suite directory definitions found in the `dev/tests/unit/phpunit.xml` file, as
    shown in the following piece of code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要编写的测试位于模块的 `Test/Unit` 目录中。这使得测试目录的完整路径看起来像 `app/code/Foggyline/Unitly/Test/Unit/`。Magento
    知道它需要查看这个文件夹，仅仅是因为在 `dev/tests/unit/phpunit.xml` 文件中找到了测试套件目录定义，如下所示：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The structure of files and the folder within the individual module `Test/Unit`
    directory also follows the structure of that module''s files and folders. The
    following screenshot shows a structure of the `Test/Unit` directory for the `Magento_Catalog`
    module:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 单个模块 `Test/Unit` 目录中的文件和文件夹的结构也遵循该模块的文件和文件夹结构。以下截图显示了 `Magento_Catalog` 模块的
    `Test/Unit` 目录结构：
- en: '![Writing a simple unit test](img/00092.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![编写一个简单的单元测试](img/00092.jpeg)'
- en: 'This shows that almost any PHP class can be unit tested irrespective of the
    fact that it is a controller, block, helper, module, observer, or something else.
    To keep things simple, we will focus on the controller and block unit tests in
    relation to the `Foggyline_Unitly` module, which is structured as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明几乎任何 PHP 类都可以进行单元测试，无论它是控制器、块、辅助工具、模块、观察者还是其他东西。为了保持简单，我们将专注于与 `Foggyline_Unitly`
    模块相关的控制器和块单元测试，该模块的结构如下：
- en: '![Writing a simple unit test](img/00093.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![编写一个简单的单元测试](img/00093.jpeg)'
- en: Let's start by first writing a test for the `Foggyline\Unitly\Controller\Hello\Shout`
    controller class. The `Shout` class, ignoring the `__construct`, has only one
    method called `execute`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先为 `Foggyline\Unitly\Controller\Hello\Shout` 控制器类编写一个测试。忽略 `__construct`，`Shout`
    类只有一个名为 `execute` 的方法。
- en: 'We will write a test for it under the same directory structure, relative to
    the module''s `Test\Unit` directory, placing the test under the `app/code/Foggyline/Unitly/Test/Unit/Controller/Hello/ShoutTest.php`
    file with (partial), as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在与模块的 `Test\Unit` 目录相同的目录结构下为其编写一个测试，将测试放在 `app/code/Foggyline/Unitly/Test/Unit/Controller/Hello/ShoutTest.php`
    文件中（部分），如下所示：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Every unit test in the Magento module directory extends from the `\PHPUnit_Framework_TestCase`
    class. The `setUp` method is called before the test is executed; we can think
    of it as PHP's `__construct`. Here, we would usually set up the fixtures, open
    a network connection, or perform similar actions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 模块目录中的每个单元测试都扩展自 `\PHPUnit_Framework_TestCase` 类。`setUp` 方法在测试执行之前被调用；我们可以将其视为
    PHP 的 `__construct`。在这里，我们通常会设置固定值、打开网络连接或执行类似操作。
- en: The `testExecute` method name is actually formed from test `+` the method name
    from the class that we are testing. Since the `Shout` class has an execute method,
    the test method formed becomes test `+` execute. By capitalizing the first letter
    of the class method name, the final name is `testExecute`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`testExecute` 方法的名称实际上是由测试 `+` 我们要测试的类的名称组成的。由于 `Shout` 类有一个执行方法，因此形成的测试方法变为测试
    `+` 执行。通过将类方法名称的首字母大写，最终的名称为 `testExecute`。'
- en: 'Now, let''s go ahead and replace `/* setUp()` code here `*/` with content.
    as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续将 `/* setUp()` 代码这里 `*/` 替换为以下内容：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The whole concept of tests is based on mocking the objects that we need to work
    with. We use the `getMock` method that returns a mock object for a specified class.
    Besides the class name, the `getMock` method accepts quite a bit of other arguments.
    The second `$methods` parameter marks the names of the methods that are replaced
    with a test double. Providing null for the `$methods` parameter means that no
    methods will be replaced. The third parameter for the `getMock` method stands
    for `$arguments`, which are parameters that are passed to the original class constructor.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的整体概念是基于模拟我们需要与之交互的对象。我们使用 `getMock` 方法，该方法为指定的类返回一个模拟对象。除了类名之外，`getMock`
    方法还接受相当多的其他参数。第二个 `$methods` 参数标记了将被测试替身替换的方法名称。为 `$methods` 参数提供 null 意味着不会替换任何方法。`getMock`
    方法的第三个参数代表 `$arguments`，它们是传递给原始类构造函数的参数。
- en: We can see from the preceding code that the `$request` mock object does not
    provide any `$methods` or `$arguments` parameters to its `getMock` method. On
    the other hand, the `$context` object passes on the array with a single `getRequest`
    element in it. Once the `$context` object is initialized, it then calls the expects
    method, which registers a new expectation in the mock object and returns `InvocationMocker`
    on which we call method and `willReturn`. In this case, the instance on the previously
    initiated `$request` object is passed to `willReturn`. We used `getMockBuilder`
    to create a `Result\PageFactory` mock object and instantiated the `Shout` controller
    action class, passing the context and result page mocks to it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中我们可以看到，`$request` 模拟对象没有向其 `getMock` 方法提供任何 `$methods` 或 `$arguments`
    参数。另一方面，`$context` 对象传递了一个包含单个 `getRequest` 元素的数组。一旦 `$context` 对象初始化，它就调用 `expects`
    方法，该方法在模拟对象中注册一个新的期望，并返回 `InvocationMocker`，我们可以在其上调用方法和 `willReturn`。在这种情况下，之前启动的
    `$request` 对象的实例被传递给 `willReturn`。我们使用了 `getMockBuilder` 来创建一个 `Result\PageFactory`
    模拟对象，并实例化了 `Shout` 控制器动作类，将上下文和结果页面模拟对象传递给它。
- en: All the code in this `setUp` method served a purpose in getting out the controller
    instance, which will be used in the `testExecute` method.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `setUp` 方法中的所有代码都是为了获取控制器实例，该实例将在 `testExecute` 方法中使用。
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `final`, `private`, and `static` methods cannot be mocked. They are ignored
    by PHPUnit's test functionality because they retain their original behavior.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`final`、`private` 和 `static` 方法不能被模拟。由于它们保留了原始行为，因此 PHPUnit 的测试功能会忽略这些方法。'
- en: 'Let''s go ahead and replace the `/* testExecute()` code here `*/` with content,
    as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续替换这里的 `/* testExecute() */` 代码，如下所示：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code, we checked into the page title, page, and result page
    object. To get to the page title from within the controller code, we would normally
    use an expression such as `$resultPage->getConfig()->getTitle()`. This expression
    involves three objects. The `$resultPage` object calls the `getConfig()` method,
    which returns the instance of the `Page\Config` object. This object calls for
    the `getTitle` method, which returns the instance of the `Page\Title` object.
    Thus, we are mocking and testing all the three objects.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们检查了页面标题、页面和结果页面对象。要从控制器代码内部获取页面标题，我们通常会使用一个表达式，例如 `$resultPage->getConfig()->getTitle()`。这个表达式涉及三个对象。`$resultPage`
    对象调用 `getConfig()` 方法，该方法返回 `Page\Config` 对象的实例。该对象调用 `getTitle` 方法，该方法返回 `Page\Title`
    对象的实例。因此，我们正在模拟和测试所有三个对象。
- en: 'Now that we took a look at the controller test case, let''s see how we can
    make one for the block class. Create an `app/code/Foggyline/Unitly/Test/Unit/Block/Hello/ShoutTest.php`
    file with partial content, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经查看了一下控制器测试用例，让我们看看如何为块类创建一个测试用例。创建一个名为 `app/code/Foggyline/Unitly/Test/Unit/Block/Hello/ShoutTest.php`
    的文件，并包含以下部分内容：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, we have also defined the `setUp` method and `testGreeting`. The `testGreeting`
    method is used as a test for the greeting method on the `Shout` block class.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还定义了 `setUp` 方法和 `testGreeting`。`testGreeting` 方法被用作 `Shout` 块类上的问候方法的测试。
- en: Conceptually, there is no difference between unit testing a controller, block,
    or model class. Therefore, we will omit the model unit test in this example. What's
    important for you to realize is that the test is what we make of it. Technically
    speaking, we can test a single method for various cases or just the most obvious
    one. However, to serve the purpose of the tests in a better way, we should test
    it for any possible number of result combinations.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，对控制器、块或模型类进行单元测试之间没有区别。因此，在这个例子中我们将省略模型单元测试。你需要意识到的是，测试是我们自己定义的。从技术角度来说，我们可以针对各种情况测试单个方法，或者只测试最明显的一个。然而，为了更好地服务于测试的目的，我们应该测试所有可能的结果组合。
- en: 'Let''s go ahead and create a `dev/tests/unit/foggyline-unitly-phpunit.xml`
    file with content, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个包含以下内容的`dev/tests/unit/foggyline-unitly-phpunit.xml`文件：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Finally, we can execute only our own module unit tests by running a command
    such as `phpunit -c foggyline-unitly-phpunit.xml`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过运行如`phpunit -c foggyline-unitly-phpunit.xml`之类的命令来仅执行我们自己的模块单元测试。
- en: 'Once tests are executed, we should be able to see the entire code coverage
    report in the `dev/tests/unit/coverage_dir/Foggyline_Unitly/test-reports/coverage/index.html`
    file, as shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦测试执行完毕，我们应该能够在`dev/tests/unit/coverage_dir/Foggyline_Unitly/test-reports/coverage/index.html`文件中看到完整的代码覆盖率报告，如下面的截图所示：
- en: '![Writing a simple unit test](img/00094.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![编写一个简单的单元测试](img/00094.jpeg)'
- en: The preceding screenshot demonstrates how detailed the code coverage is, which
    shows even the percentages and lines of code covered with test.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图展示了代码覆盖率有多么详细，它甚至显示了被测试覆盖的百分比和代码行数。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a look at the testing facility embedded in Magento
    through the libraries in the root `dev/tests/ directory` and the `Magento_Developer`
    module. We learned how to run all of its test types and studied a simple example
    of writing our own unit tests. The examples that are given here do not do justice
    to PHPUnit, given its robustness. More information on PHPUnit can be found at
    [https://phpunit.de/](https://phpunit.de/).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过根目录下的`dev/tests/`目录和`Magento_Developer`模块中的库，了解了如何使用嵌入在Magento中的测试功能。我们学习了如何运行所有测试类型，并研究了一个编写我们自己的单元测试的简单示例。这里给出的示例并不能完全体现PHPUnit的强大功能。更多关于PHPUnit的信息可以在[https://phpunit.de/](https://phpunit.de/)找到。
- en: We will now move on to the final chapter of this book, where we will reiterate
    the things that we learned so far and develop a functional miniature module that
    involves some basic testing.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将进入这本书的最后一章，我们将回顾到目前为止所学的内容，并开发一个包含一些基本测试的功能性迷你模块。
