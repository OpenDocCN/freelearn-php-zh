- en: Chapter 11. Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software testing can be defined as a critical step in the development life cycle.
    This step is often silently overlooked by a number of developers because a certain
    amount of time need to be invested into writing a decent test suite for a code
    base. Rather than being a single one-time activity, writing tests is a process
    that follows our code as it grows and changes. Test results should, at any given
    time, validate and verify that our software works as expected, thus meeting the
    business and technical requirements. Writing tests should follow writing the actual
    application code early on in the life cycle. This helps prevent defects from being
    introduced in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a high level, we can divide tests into the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static**: Application code is not executed during testing. Possible errors
    are found by inspecting the application code files and not on their execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic**: Application code is executed during testing. Possible errors are
    found while checking for functional behavior of an application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the testing options that Magento offers.
    Along the way, we will build a basic module with some testing features in it.
  prefs: []
  type: TYPE_NORMAL
- en: Types of tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magento provides several types of tests out of the box. We can see a list of
    these tests on running the following command on the console in the Magento root
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command is an output that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This output originates from the `Console/Command/DevTestsRunCommand.php` file
    in the core `Magento_Developer` module. Looking at the output, we might say that
    there are actually nine types of tests, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`all`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integration`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integration-all`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static-all`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integrity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`legacy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, these are not unique types of tests; these are combinations, as we
    will soon see.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a closer look at the code in the `DevTestsRunCommand` class and its
    `setupTestInfo` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `setupTestInfo` method defines the internal `commands` property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, we can see the types property in the `setupTestInfo` method defined
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `types` property logically groups one or more tests into a single name that
    is found under the `commands` property. We can see how like `unit` single type
    encompasses the `unit`, `unit-performance`, `unit-static`, and `unit-integration`
    tests in it. The `commands` property points to the disk location of the actual
    test library. Relative to the Magento root installation folder, tests can be found
    in the `dev/tests/ directory`.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Unit tests** are designed to test individual class methods in isolation,
    asserting all possible combinations and taking care of the smallest testable part
    of an application. Magento uses the **PHPUnit** testing framework for its unit
    tests. Being highly focused, unit tests make it easy to identify the root cause
    of issues if a certain test fails.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can specifically trigger the unit tests from the root of the Magento installation
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once triggered, Magento will run the `execute` command in the `vendor/magento/module-developer/Console/Command/DevTestsRunCommand.php`
    file. Since the unit type is mapped to several commands, what will happen internally
    is that Magento will change the directories from one directory to another, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dev/tests/unit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev/tests/performance/framework/tests/unit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev/tests/static/framework/tests/unit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev/tests/integration/framework/tests/unit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can say that all of these directories are considered unit test directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within each of those directories, Magento internally runs the `passthru($command,
    $returnVal)` method, where the `$command` parameter gets resolved to a string
    similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The PHPUnit will then look for the `phpunit.xml` configuration file accordingly
    in each of these directories. If `phpunit.xml` does not exist, we need to copy
    the contents of `phpunit.xml.dist` into `phpunit.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a closer look at the `dev/tests/unit/phpunit.xml` file for `testsuite`,
    `filter`, `whitelist`, and other configuration elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following default `testsuite` directory list is found in the `dev/tests/unit/phpunit.xml
    file`, which lists the directories in which you need to look for `tests` files
    prefixed with `Test.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The list is relative to the `dev/tests/unit/` directory. For example, if we
    take a look at the first line in the preceding code and then look at the `Magento_Catalog`
    module, it is clear that the `Test` files are found under the `app/code/<vendorName>/<moduleName>/Test/`
    directory and its subdirectories. Everything suffixed with `Test.php` in these
    folders will get executed as a part of a unit test.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we were building our own module, we could easily make a copy of `dev/tests/unit/phpunit.xml.dist`,
    properly edit `testsuite` and `filter > whitelist` to quickly execute only our
    module's unit tests, thus saving some time on avoiding frequent execution of entire
    Magento unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Integration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Integration tests** test the interaction between individual components, layers,
    and an environment. They can be found in the `dev/tests/integration` directory.
    Like unit tests, Magento also uses PHPUnit for integration tests. Thus, the difference
    between a unit and an integration test is not that much of a technical nature;
    rather, it''s of a logical nature.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To specifically trigger integration tests only, we can execute the following
    command on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When executed, Magento internally changes the directory to `dev/tests/integration`
    and executes a command that is similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The integration directory has its own `phpunit.xml.dist` file. Looking at its
    `testsuite` definition, we can see that it is pointing to all the `Test.php` suffixed
    files that are found in the `dev/tests/integration/testsuite` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Static testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Static tests** do not really run the code; they analyze it. They are used
    to verify that the code conforms to certain coding standards, such as PSR-1\.
    We can find them under the `dev/tests/static` directory.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To specifically trigger static tests only, we can execute the following command
    on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When executed, Magento internally changes the directory to `dev/tests/static`
    and executes a command that is similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The static directory has its own `phpunit.xml.dist` file. Looking at its `testsuite`
    definition, you will see the following four test suites defined:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript static code analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP coding standard verification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code integrity tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XSS unsafe output test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JSHint`, a JavaScript code quality tool, is used for JavaScript static code
    analysis. For PHP code standard verification, the elements of `PHP_CodeSniffer`
    libraries are used. `PHP_CodeSniffer` tokenizes PHP, JavaScript, and CSS files
    and detects violations of a defined set of coding standards.'
  prefs: []
  type: TYPE_NORMAL
- en: Integrity testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Integrity tests** check how an application is linked. They check for things
    such as merged configuration validation. Basically, they tell us if your application
    should be able to run.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can specifically trigger the integrity tests from the root of the Magento
    installation by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When this is executed, Magento first internally changes the directory to `dev/tests/static`
    and then executes two commands that are similar to the following ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, Magento internally changes the directory to `dev/tests/integration` and
    executes a command that is similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Integration tests also utilize the PHPUnit to write the actual tests.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Legacy tests** comprise fragments of libraries that help developers port
    their modules to a new version of Magento.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can trigger legacy tests specifically from the root of the Magento installation
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When this is executed, Magento first internally changes the directory to `/dev/tests/static`
    and then executes a command, which is similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Once this is triggered, the code runs a check for obsolete access lists, connections,
    menus, responses, system configuration, and a few other things.
  prefs: []
  type: TYPE_NORMAL
- en: Performance testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance tests can be found under the `setup/performance-toolkit/` directory.
    These tests require Apache JMeter to be installed and are available on the console
    via the `jmeter` command. Apache JMeter can be downloaded and installed by following
    the instructions at [http://jmeter.apache.org](http://jmeter.apache.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'The crux of the performance test is defined in the `benchmark.jmx` file, which
    can be opened in the JMeter GUI tool, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performance testing](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding screenshot, the default `benchmark.jmx` tests are
    sectioned into three thread groups that are named **setUp Thread Group**, **Customer
    Checkout**, and **tearDown Thread Group**. We might want to additionally click
    on each group and configure it with some extra parameters, thus possibly changing
    **Number of Threads (users)**, as shown in the following screenshot. We can then
    simply save the changes as modifications to the `benchmark.jmx` file or a file
    with new name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performance testing](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can manually trigger a performance test from the console without using a
    GUI interface by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The console parameters that are listed here and which start with `-J` also match
    the names of the **Used Defined Variables** test toolkit, as shown in the preceding
    screenshot. We need to be careful and set them according to the Magento installation.
    The `-n` parameter instructs `jmeter` to run in the run *nongui* mode. The `-t`
    parameter is where we set the path of the test (`.jmx`) file to run. The `-l`
    parameter sets the file where we need to log samples to.
  prefs: []
  type: TYPE_NORMAL
- en: Functional testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Functional tests** mimic the user interaction with our application. They
    literally mean testing in the form of browser interaction, which involves clicking
    on the page, adding products to the cart, and so on. For this purpose, Magento
    uses **Magento Testing Framework** (**MTF**). It''s a PHP wrapper around **Selenium**,
    which is a portable software testing framework for web applications. MTF is not
    available out of the box via the console. It can be downloaded at [https://github.com/magento/mtf](https://github.com/magento/mtf).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following requirements need to be met before installing MTF:'
  prefs: []
  type: TYPE_NORMAL
- en: Git must be installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Firefox browser must be installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PHP openssl extension must be installed and enabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java version 1.6 or later is required and it's JAR executable must be in the
    system PATH.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Selenium standalone server, which is available at [http://www.seleniumhq.org/](http://www.seleniumhq.org/),
    needs to be downloaded. The download should provide a JAR file that we will later
    need to refer to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magento must be installed and configured to not use the secret URL key. We can
    set the secret URL key option by navigating to **Stores** | **Configuration**
    | **Advanced** | **Admin** | **Security** | **Add Secret Key to URLs** [Yes/No]
    and setting it to **No**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the minimal requirements are met, we can install MTF, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `composer install` command from the `dev/tests/functional/` directory.
    This creates a new directory named `vendor`; MTF is pulled from the Git repository
    at [https://github.com/magento/mtf](https://github.com/magento/mtf). We should
    see a new directory named `vendor` that is created with the checked off MTF. The
    `vendor` directory contains the content that is shown in the following screenshot:![Functional
    testing](img/00090.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `generate.php` file from the `dev/tests/functional/utils/` directory.
    This should give us a console output that is similar to the following one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The generator tool creates factories for fixtures, handlers, repositories, page
    objects, and block objects. When MTF is initialized, the factories are pregenerated
    to facilitate the creation and running of tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Before we can actually run the tests, there are a few more things that we need
    to configure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `dev/tests/functional/phpunit.xml` file. Under the `php` element, for
    `name="app_frontend_url"`, set the value of the actual URL for the Magento storefront
    under test. For `name="app_backend_url"`, set the value of the actual URL for
    the Magento admin URL under test. For `name="credentials_file_path"`, set the
    value of `./credentials.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If `phpunit.xml` does not exist, we need to create it and copy the contents
    of `dev/tests/functional/phpunit.xml.dist` into it and then edit it afterwards.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit the `dev/tests/functional/etc/config.xml` file. Under the `application`
    element, find and edit the information about `backendLogin`, `backendPassword`,
    and `appBackendUrl` so that it matches that of our store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If `config.xml` does not exist, we need to create it and copy the contents of
    `dev/tests/functional/etc/config.xml.dist` into it and then edit it afterwards.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit the `dev/tests/functional/credentials.xml` file. Chances are that we will
    not need this on a blank Magento installation, as we can see by default the entries
    for the `fedex`, `ups`, `dhl U`S, and `dhl EU` carriers, which haven't been set
    on the freshly installed Magento.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If `credentials.xml` does not exist, we need to create it and copy the contents
    of `dev/tests/functional/credentials.xml.dist` into it and then edit it afterwards.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `java -jar {selenium_directory}/selenium-server.jar` command via the
    console. This is to ensure that the Selenium server is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new console or a console tab and execute the `phpunit` command in the
    `dev/tests/functional/` directory. This command should open the Firefox browser
    and start running test cases in it, simulating a user clicking on the browser
    window and filling in the form inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While a test is running, Magento will log all the failed tests under the `dev/tests/functional/var/log`
    directory in a structure that is similar to the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Functional testing](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `log` path can be configured in the `dev/tests/functional/phpunit.xml` file
    under the `php` element with `name="basedir"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to target a specific test within the entire test suite, we can simply
    trigger a command like the following one in the `dev/tests/functional/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will run a single test called `RegisterCustomerFrontendEntityTest.php`.
    We can also use a shorter form expression for the same thing, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Once this is executed, the browser should open and simulate the customer registration
    process on the storefront.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a simple unit test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we took a quick look at all the type of tests that Magento offers,
    let's take a step back and look at unit tests again. In practice, unit tests are
    probably the ones that we will be writing most of the time. With this in mind,
    let's grab the `Foggyline_Unitly` module from [https://github.com/ajzele/B05032-Foggyline_Unitly](https://github.com/ajzele/B05032-Foggyline_Unitly)
    and start writing unit tests for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not already have the `Foggyline_Unitly` module in the code base that
    was a part of the previous chapters, then you need to place its content under
    `app/code/Foggyline/Unitly` and execute the following commands on the console
    from the root of the Magento directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The tests that we will write reside in the module''s `Test/Unit` directory.
    This makes the entire path of the test directory look like `app/code/Foggyline/Unitly/Test/Unit/`.
    Magento knows that it needs to look inside this folder simply because of the test
    suite directory definitions found in the `dev/tests/unit/phpunit.xml` file, as
    shown in the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The structure of files and the folder within the individual module `Test/Unit`
    directory also follows the structure of that module''s files and folders. The
    following screenshot shows a structure of the `Test/Unit` directory for the `Magento_Catalog`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a simple unit test](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This shows that almost any PHP class can be unit tested irrespective of the
    fact that it is a controller, block, helper, module, observer, or something else.
    To keep things simple, we will focus on the controller and block unit tests in
    relation to the `Foggyline_Unitly` module, which is structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a simple unit test](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's start by first writing a test for the `Foggyline\Unitly\Controller\Hello\Shout`
    controller class. The `Shout` class, ignoring the `__construct`, has only one
    method called `execute`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will write a test for it under the same directory structure, relative to
    the module''s `Test\Unit` directory, placing the test under the `app/code/Foggyline/Unitly/Test/Unit/Controller/Hello/ShoutTest.php`
    file with (partial), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Every unit test in the Magento module directory extends from the `\PHPUnit_Framework_TestCase`
    class. The `setUp` method is called before the test is executed; we can think
    of it as PHP's `__construct`. Here, we would usually set up the fixtures, open
    a network connection, or perform similar actions.
  prefs: []
  type: TYPE_NORMAL
- en: The `testExecute` method name is actually formed from test `+` the method name
    from the class that we are testing. Since the `Shout` class has an execute method,
    the test method formed becomes test `+` execute. By capitalizing the first letter
    of the class method name, the final name is `testExecute`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go ahead and replace `/* setUp()` code here `*/` with content.
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The whole concept of tests is based on mocking the objects that we need to work
    with. We use the `getMock` method that returns a mock object for a specified class.
    Besides the class name, the `getMock` method accepts quite a bit of other arguments.
    The second `$methods` parameter marks the names of the methods that are replaced
    with a test double. Providing null for the `$methods` parameter means that no
    methods will be replaced. The third parameter for the `getMock` method stands
    for `$arguments`, which are parameters that are passed to the original class constructor.
  prefs: []
  type: TYPE_NORMAL
- en: We can see from the preceding code that the `$request` mock object does not
    provide any `$methods` or `$arguments` parameters to its `getMock` method. On
    the other hand, the `$context` object passes on the array with a single `getRequest`
    element in it. Once the `$context` object is initialized, it then calls the expects
    method, which registers a new expectation in the mock object and returns `InvocationMocker`
    on which we call method and `willReturn`. In this case, the instance on the previously
    initiated `$request` object is passed to `willReturn`. We used `getMockBuilder`
    to create a `Result\PageFactory` mock object and instantiated the `Shout` controller
    action class, passing the context and result page mocks to it.
  prefs: []
  type: TYPE_NORMAL
- en: All the code in this `setUp` method served a purpose in getting out the controller
    instance, which will be used in the `testExecute` method.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `final`, `private`, and `static` methods cannot be mocked. They are ignored
    by PHPUnit's test functionality because they retain their original behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and replace the `/* testExecute()` code here `*/` with content,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we checked into the page title, page, and result page
    object. To get to the page title from within the controller code, we would normally
    use an expression such as `$resultPage->getConfig()->getTitle()`. This expression
    involves three objects. The `$resultPage` object calls the `getConfig()` method,
    which returns the instance of the `Page\Config` object. This object calls for
    the `getTitle` method, which returns the instance of the `Page\Title` object.
    Thus, we are mocking and testing all the three objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we took a look at the controller test case, let''s see how we can
    make one for the block class. Create an `app/code/Foggyline/Unitly/Test/Unit/Block/Hello/ShoutTest.php`
    file with partial content, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have also defined the `setUp` method and `testGreeting`. The `testGreeting`
    method is used as a test for the greeting method on the `Shout` block class.
  prefs: []
  type: TYPE_NORMAL
- en: Conceptually, there is no difference between unit testing a controller, block,
    or model class. Therefore, we will omit the model unit test in this example. What's
    important for you to realize is that the test is what we make of it. Technically
    speaking, we can test a single method for various cases or just the most obvious
    one. However, to serve the purpose of the tests in a better way, we should test
    it for any possible number of result combinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create a `dev/tests/unit/foggyline-unitly-phpunit.xml`
    file with content, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we can execute only our own module unit tests by running a command
    such as `phpunit -c foggyline-unitly-phpunit.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once tests are executed, we should be able to see the entire code coverage
    report in the `dev/tests/unit/coverage_dir/Foggyline_Unitly/test-reports/coverage/index.html`
    file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a simple unit test](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot demonstrates how detailed the code coverage is, which
    shows even the percentages and lines of code covered with test.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at the testing facility embedded in Magento
    through the libraries in the root `dev/tests/ directory` and the `Magento_Developer`
    module. We learned how to run all of its test types and studied a simple example
    of writing our own unit tests. The examples that are given here do not do justice
    to PHPUnit, given its robustness. More information on PHPUnit can be found at
    [https://phpunit.de/](https://phpunit.de/).
  prefs: []
  type: TYPE_NORMAL
- en: We will now move on to the final chapter of this book, where we will reiterate
    the things that we learned so far and develop a functional miniature module that
    involves some basic testing.
  prefs: []
  type: TYPE_NORMAL
