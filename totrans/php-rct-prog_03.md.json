["```php\nfunction subscribe(ObserverI $observer, $scheduler = null) { \n    $this->observers[] = $observer; \n    $this->started = true; \n\n    return new CallbackDisposable(function () use ($observer) { \n        $this->removeObserver($observer); \n    }); \n} \n\n```", "```php\nfunction subscribe(ObserverI $obs, SchedulerI $sched = null) { \n    $value = $this->value; \n    $scheduler = $scheduler ?: new ImmediateScheduler(); \n    $disp = new CompositeDisposable(); \n\n    $disp->add($scheduler->schedule(function() use ($obs, $val) { \n        $obs->onNext($val); \n    })); \n    $disp->add($scheduler->schedule(function() use ($obs) { \n        $obs->onCompleted(); \n    })); \n\n    return $disp; \n} \n\n```", "```php\n        $disposable->add($scheduler->schedule(function() { ... })); \n\n```", "```php\n        function () use ($obs, $val) { \n            $observer->onNext($val); \n        } \n\n```", "```php\nfunction subscribe(ObserverI $observer) { \n    $observer->onNext($this->value); \n    $observer->onCompleted(); \n} \n\n```", "```php\n// custom_range_01.php \nuse Rx\\Observable; \nuse Rx\\ObserverInterface; \n\nclass CustomRangeObservable extends Observable { \n  private $min; \n  private $max; \n\n  public function __construct($min, $max) { \n    $this->min = $min; \n    $this->max = $max; \n  } \n\n  public function subscribe($observer, $sched = null) { \n    if (null === $sched) { \n      $sched = new \\Rx\\Scheduler\\ImmediateScheduler(); \n    } \n\n    return $sched->schedule(function() use ($observer) { \n      for ($i = $this->min; $i <= $this->max; $i++) { \n        $observer->onNext($i); \n      } \n      $observer->onCompleted(); \n    }); \n  } \n} \n\n(new CustomRangeObservable(1, 5)) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php custom_range_01.php\n1\n2\n3\n4\n5\n\n```", "```php\n// range_01.php \nuse Rx\\Observable; \nuse Rx\\Scheduler\\EventLoopScheduler; \nuse React\\EventLoop\\StreamSelectLoop; \n\n$loop = new StreamSelectLoop(); \n$scheduler = new EventLoopScheduler($loop); \n\n$disposable = Observable::range(1, 5) \n    ->subscribeCallback(function($val) use (&$disposable) { \n        echo \"$val\\n\"; \n        if ($val == 3) { \n            $disposable->dispose(); \n        } \n    }, null, null, $scheduler); \n\n$scheduler->start(); \n\n```", "```php\n$ php range_01.php \n1\n2\n3\n\n```", "```php\npublic function subscribe($observer, $sched = null) { \n  if (null === $sched) { \n    $sched = new \\Rx\\Scheduler\\ImmediateScheduler(); \n  } \n  $i = $this->min; \n\n  return $sched->scheduleRecursive( \n      function($reschedule) use ($observer, &$i) { \n    if ($i <= $this->max) { \n      $observer->onNext($i); \n      $i++; \n      $reschedule(); \n    } else { \n      $observer->onCompleted(); \n    } \n  }); \n} \n\n```", "```php\n// php custom_range_02.php \n$loop = new StreamSelectLoop(); \n$scheduler = new EventLoopScheduler($loop); \n\n$disposable = (new CustomRangeObservable(1, 5)) \n    ->subscribeCallback(function($val) use (&$disposable) { \n        echo \"$val\\n\"; \n        if ($val == 3) { \n            $disposable->dispose(); \n        } \n    }, null, null, $scheduler); \n\n$scheduler->start(); \n\n```", "```php\n$ php custom_range_02.php \n1\n2\n3\n\n```", "```php\n// rxphp_filter_observables_01.php \nuse Rx\\Observable\\RangeObservable; \nuse Rx\\Observable\\ConnectableObservable; \n\n$connObs = new ConnectableObservable(new RangeObservable(0, 6)); \n$filteredObs = $connObs \n    ->map(function($val) { \n        return $val ** 2; \n    }) \n    ->filter(function($val) { \n        return $val % 2; \n    }); \n\n$disposable1 = $filteredObs->subscribeCallback(function($val) { \n    echo \"S1: ${val}\\n\"; \n}); \n$disposable2 = $filteredObs->subscribeCallback(function($val) { \n    echo \"S2: ${val}\\n\"; \n}); \n\n$connObs->connect(); \n\n```", "```php\n$ php rxphp_filter_observables_01.php \nS1: 1 \nS2: 1 \nS1: 9 \nS2: 9 \nS1: 25 \nS2: 25 \n\n```", "```php\n$ php rxphp_filter_observables_02.php \nS1: 1 \nS1: 9 \nS1: 25 \nS2: 1 \nS2: 9 \nS2: 25 \n\n```", "```php\n$filteredObservable = $connObservable \n    ->map(function($val) { \n        return $val ** 2; \n    }) \n    ->filter(function($val) { \n        echo \"Filter: $val\\n\"; \n        return $val % 2; \n    }); \n\n```", "```php\n$ php rxphp_filter_observables_03.php\nFilter: 0\nFilter: 0\nFilter: 1\nS1: 1\nFilter: 1\nS2: 1\nFilter: 4\nFilter: 4\nFilter: 9\nS1: 9\nFilter: 9\nS2: 9\nFilter: 16\nFilter: 16\nFilter: 25\nS1: 25\nFilter: 25\nS2: 25\n\n```", "```php\n// rxphp_filter_observables_04.php \n$source = new RangeObservable(0, 6); \n$filteredObservable = $source \n    ->map(function($val) { \n        return $val ** 2; \n    }) \n    ->filter(function($val) { \n        echo \"Filter: $val\\n\"; \n        return $val % 2; \n    }); \n\n$connObs = new ConnectableObservable($filteredObservable); \n\n$disposable1 = $connObs->subscribeCallback(function($val) { \n    echo \"S1: ${val}\\n\"; \n}); \n$disposable2 = $connObs->subscribeCallback(function($val) { \n    echo \"S2: ${val}\\n\"; \n}); \n$connObs->connect(); \n\n```", "```php\n$ php rxphp_filter_observables_04.php \nFilter: 0\nFilter: 1\nS1: 1\nS2: 1\nFilter: 4\nFilter: 9\nS1: 9\nS2: 9\nFilter: 16\nFilter: 25\nS1: 25\nS2: 25\n\n```", "```php\n// rxphp_filter_observables_05.php \nuse Rx\\Subject\\Subject; \n\n$subject = new Subject(); \n$source = new RangeObservable(0, 6); \n$filteredObservable = $source \n    ->map(function($val) { \n        return $val ** 2; \n    }) \n    ->filter(function($val) { \n        echo \"Filter: $val\\n\"; \n        return $val % 2; \n    }) \n    ->subscribe($subject); \n\n$disposable1 = $subject->subscribeCallback(function($val) { \n    echo \"S1: ${val}\\n\"; \n}); \n$disposable2 = $subject->subscribeCallback(function($val) { \n    echo \"S2: ${val}\\n\"; \n}); \n$filteredObservable->subscribe($subject); \n\n```", "```php\n$ php rxphp_filter_observables_05.php\nFilter: 0\nFilter: 1\nS1: 1\nS2: 1\nFilter: 4\nFilter: 9\nS1: 9\nS2: 9\nFilter: 16\nFilter: 25\nS1: 25\nS2: 25\n\n```", "```php\n// observable_create_01.php \nuse Rx\\Observable; \nuse Rx\\ObserverInterface; \n\n$source = Observable::create(function(ObserverInterface $obs) { \n    echo \"Observable::create\\n\"; \n    $obs->onNext(1); \n    $obs->onNext('Hello, World!'); \n    $obs->onNext(2); \n    $obs->onCompleted(); \n}); \n\n$source->subscribe(new DebugSubject()); \n$source->subscribe(new DebugSubject()); \n\n```", "```php\n$ php observable_create_01.php\nObservable::create\n21:00:52 [] onNext: 1 (integer)\n21:00:52 [] onNext: Hello, World! (string)\n21:00:52 [] onNext: 2 (integer)\n21:00:52 [] onCompleted\nObservable::create\n21:00:52 [] onNext: 1 (integer)\n21:00:52 [] onNext: Hello, World! (string)\n21:00:52 [] onNext: 2 (integer)\n21:00:52 [] onCompleted\n\n```", "```php\n$source = Observable::create(function(ObserverInterface $obs) { \n    ... \n    return new CallbackDisposable(function() { \n        echo \"disposed\\n\"; \n    }); \n}); \n\n```", "```php\n// observable_defer_01.php  \nuse Rx\\Observable; \n$source = Observable::range(0, rand(1, 10)); \n\n$source->subscribe(new DebugSubject('#1')); \n$source->subscribe(new DebugSubject('#2')); \n\n```", "```php\n$ php observable_defer_01.php \n21:38:29 [#1] onNext: 0 (integer)\n21:38:29 [#1] onNext: 1 (integer)\n21:38:29 [#1] onNext: 2 (integer)\n21:38:29 [#1] onCompleted\n21:38:29 [#2] onNext: 0 (integer)\n21:38:29 [#2] onNext: 1 (integer)\n21:38:29 [#2] onNext: 2 (integer)\n21:38:29 [#2] onCompleted\n\n```", "```php\n// observable_defer_02.php \nuse Rx\\Observable; \n$source = Observable::defer(function() { \n    return Observable::range(0, rand(1, 10)); \n}); \n\n$source->subscribe(new DebugSubject('#1')); \n$source->subscribe(new DebugSubject('#2')); \n\n```", "```php\n$ php observable_defer_02.php \n21:40:58 [#1] onNext: 0 (integer) \n21:40:58 [#1] onNext: 1 (integer) \n21:40:58 [#1] onNext: 2 (integer) \n21:40:58 [#1] onNext: 3 (integer) \n21:40:58 [#1] onCompleted \n21:40:58 [#2] onNext: 0 (integer) \n21:40:58 [#2] onCompleted\n\n```", "```php\n$ composer require symfony/console\n\n```", "```php\n// console_reddit.php \nrequire_once __DIR__ . '/../vendor/autoload.php'; \nrequire_once 'RedditCommand.php'; \n\n$application = new Symfony\\Component\\Console\\Application(); \n$application->setDefaultCommand('reddit'); \n$application->add(new RedditCommand()); \n$application->run(); \n\n```", "```php\n// RedditCommand.php \nuse Symfony\\Component\\Console\\Command\\Command; \nuse Symfony\\Component\\Console\\Input\\InputInterface as InputI; \nuse Symfony\\Component\\Console\\Output\\OutputInterface as OutputI; \n\nclass RedditCommand extends Command { \n    protected function configure() { \n        $this->setName('reddit'); \n        $this->setDescription( \n            'CLI Reddit reader created using RxPHP library.'); \n    } \n\n    protected function execute(InputI $input, OutputI $output) { \n        $output->writeln('<info>Hello, World!</info>'); \n    } \n} \n\n```", "```php\n$ php console_reddit.php\nHello, World!\n\n```", "```php\n$ php console_reddit.php reddit\n\n```", "```php\n$ php console_reddit.php list\n\n```", "```php\nuse Rx\\Observable\\IntervalObservable; \n\nclass RedditCommand extends Command { \n  /** @var \\Rx\\Subject\\Subject */ \n  private $subject; \n  private $interval; \n\n  protected function execute(InputI $input, OutputI $output) { \n    $this->subject = new \\Rx\\Subject\\Subject(); \n    $stdin = fopen('php://stdin', 'r'); \n    stream_set_blocking($stdin, false); \n\n    $loop = new React\\EventLoop\\StreamSelectLoop();\n    $scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop); \n    $this->interval = new IntervalObservable(100, $scheduler); \n\n    $disposable = $this->interval \n      ->map(function($count) use ($stdin) { \n        return trim(fread($stdin, 1024)); \n      }) \n      ->filter(function($str) { \n        return strlen($str) > 0; \n      }) \n      ->subscribe($this->subject); \n    $loop->run(); \n  } \n} \n\n```", "```php\nprotected function execute(InputI $input, OutputI $output) { \n  // The rest of the method is the same as above \n\n  $this->subject \n    ->filter(function($value) { \n      return strval($value) == 'q'; \n    }) \n    ->take(1) \n    ->subscribeCallback(null, null, \n        function() use ($disposable, $output, $stdin) { \n      fclose($stdin); \n      $output->writeln('<comment>Good bye!</comment>'); \n      $disposable->dispose(); \n    } \n  ); \n\n  $loop->run(); \n} \n\n```", "```php\n/** @var string */ \nprivate $subreddit; \n/** @var \\Rx\\DisposableInterface */ \nprivate $subredditDisposable; \n\nprotected function execute(InputI $input, OutputI $output) { \n  // The rest of the method is the same as above \n  $this->askSubreddit(); \n\n  $loop->run(); \n} \n\nprotected function askSubreddit() {\n  $this->output->write('Enter subreddit name: ');\n  $this->subredditDisposable =\n    $this->subject->subscribeCallback(function($value) {\n      $this->subreddit = $value;\n      $this->subredditDisposable->dispose();\n      $this->refreshList();\n    });\n}\n\n```", "```php\nconst API_URL = 'https://www.reddit.com/r/%s/new.json'; \n\nprotected function refreshList() {\n  $curlObservable = new CurlObservable( \n      sprintf(self::API_URL, $this->subreddit)); \n\n  $curlObservable \n    ->filter(function($value) { \n      return is_string($value); \n    }) \n    ->lift(function() { \n      return new JSONDecodeOperator(); \n    }) \n    ->subscribeCallback(function(array $response) { \n      $articles = $response['data']['children']; \n      foreach ($articles as $i => $entry) { \n        $this->output->writeln(\"<info>${i}</info> \" . \n            $entry['data']['title']); \n      } \n\n      $this->printHelp(); \n      $template = ', <info>[%d-%d]</info>: Read article'; \n      $this->output->writeln( \n          sprintf($template, 0, count($articles))); \n\n      $this->chooseArticleDetail($articles); \n    }), function($e) { \n      $this->output->writeln( \n          '<error>Unable to download data</error>'); \n    }); \n} \n\n```", "```php\nuse Rx\\Observable\\IntervalObservable; \n\nfunction getTime() { \n    $t = microtime(true); \n    $micro = sprintf(\"%06d\", ($t - floor($t)) * 1000000); \n    return date('H:i:s') . '.' . $micro; \n} \n\n$loop = new React\\EventLoop\\StreamSelectLoop(); \n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop); \n$observable = new IntervalObservable(1000, $scheduler); \n\n$observable->map(function($tick) { \n    printf(\"%s Map: %d\\n\", getTime(), $tick); \n    return $tick; \n})->subscribeCallback(function($tick) { \n    printf(\"%s Observer: %d\\n\", getTime(), $tick); \n}); \n$loop->run(); \n\n```", "```php\n$ php blocked_intervalobservable.php\n00:27:14.306441 Map: 0\n00:27:14.306509 Observer: 0\n00:27:15.305033 Map: 1\n00:27:15.305116 Observer: 1\n...\n00:28:22.306071 Map: 68\n00:28:22.306124 Observer: 68\n\n```", "```php\n$ php blocked_intervalobservable.php\n00:41:25.606327 Map: 0\n00:41:26.859891 Observer: 0\n00:41:26.860455 Map: 1\n00:41:28.113972 Observer: 1\n\n```", "```php\n// wrap_curl.php \nuse Symfony\\Component\\Console\\Command\\Command; \nuse Symfony\\Component\\Console\\Input\\InputInterface as InputI; \nuse Symfony\\Component\\Console\\Output\\OutputInterface as OutputI; \nuse Symfony\\Component\\Console\\Input\\InputArgument; \n\nclass CURLCommand extends Command { \n  protected function configure() { \n    $this->setName('curl'); \n    $this->setDescription( \n        'Wrapped CURLObservable as a standalone app'); \n    $this->addArgument('url', \n        InputArgument::REQUIRED, 'URL to download'); \n  } \n\n  protected function execute(InputI $input, OutputI $output) { \n    $returnCode = 0; \n    (new CURLObservable($input->getArgument('url'))) \n      ->subscribeCallback(function($res) use ($output) { \n        if (!is_float($response)) { \n          $output->write($res); \n        } \n      }, function() use (&$returnCode) { \n        $returnCode = 1; \n      }); \n    return $returnCode; \n  } \n} \n\n$application = new Symfony\\Component\\Console\\Application(); \n$application->add(new CURLCommand()); \n$application->run(); \n\n```", "```php\n$ php wrapped_curl.php curl https://www.reddit.com/r/php/new.json\n{\"kind\": \"Listing\", \"data\": {\"modhash\": \"\", \"children\": ...\n\n```", "```php\n$ php composer require symfony/process\n\n```", "```php\n\n// php curl_subprocess.php \nuse Symfony\\Component\\Process\\Process; \nuse Rx\\Observable\\IntervalObservable; \n\n$c='php wrap_curl.php curl https://www.reddit.com/r/php/new.json'; \n$process = new Process($c); \n$process->start(); \n\n$loop = new React\\EventLoop\\StreamSelectLoop(); \n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop); \n\n(new IntervalObservable(1000, $scheduler)) \n    ->takeWhile(function($ticks) use ($process) { \n        return $process->isRunning(); \n    }) \n    ->subscribeCallback(function($ticks) { \n        printf(\"${ticks}\\n\"); \n    }, function() {}, function() use ($process) { \n        echo $process->getOutput(); \n    }); \n$loop->run(); \n\n```", "```php\nprotected function refreshList() { \n  $url = sprintf(self::API_URL, $this->subreddit); \n  $this->process = new Process( \n      'php wrap_curl.php curl '.$url); \n  $this->process->start(); \n\n  $this->intervalObservable \n    ->takeWhile(function() { \n      return $this->process->isRunning(); \n    }) \n    ->subscribeCallback(null, null, function() { \n      $jsonString = $this->process->getOutput(); \n      if (!$jsonString) { \n        return; \n      } \n\n      $response = json_decode($jsonString, true); \n      $articles = $response['data']['children']; \n      // ... the rest is unchanged \n\n```", "```php\n$this->subject->filter(function($value) { \n  return strval($value) == 'q'; \n}) \n->take(1) \n->subscribeCallback(null, null, \n  function() use ($disposable, $output, $stdin) { \n    fclose($stdin); \n    $output->writeln('<comment>Good bye!</comment>'); \n    if ($this->process && $this->process->isRunning()) { \n      $this->process->stop(); \n    } \n    $disposable->dispose(); \n  } \n); \n\n```"]