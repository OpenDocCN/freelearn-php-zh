["```php\nLoadModule rewrite_module modules/mod_rewrite.so\n<Directory />\n    Options FollowSymLinks\n    AllowOverride None\n    Order deny,allow\n    Deny from all\n    Satisfy all\n</Directory>\n```", "```php\nRewriteEngine on\nRewriteCond $1 !^(index\\.php|images|robots\\.txt)\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php?$1\n```", "```php\n<?\ninclude(\"core/ini.php\");\ninitializer::initialize();\n$router = loader::load(\"router\");\ndispatcher::dispatch($router);\n?>\n```", "```php\n<?\nset_include_path(get_include_path().PATH_SEPARATOR.\"core/main\");\nfunction __autoload($object)\n{\n  require_once(\"{$object}.php\");\n}\n?>\n```", "```php\n<?\nclass initializer\n{\n  public static function initialize()\n  {\n  set_include_path(get_include_path().PATH_SEPARATOR.\"core/main\");\n  set_include_path(get_include_path().PATH_SEPARATOR.\n                                               \"core/main/cache\");\n  set_include_path(get_include_path().PATH_SEPARATOR.\"core/helpers\");\n  set_include_path(get_include_path().PATH_SEPARATOR.\n                                                \"core/libraries\");\n  //set_include_path(get_include_path().PATH_SEPARATOR.\n                                                \"app/controllers\");\n  set_include_path(get_include_path().PATH_SEPARATOR.\"app/models\");\n  set_include_path(get_include_path().PATH_SEPARATOR.\"app/views\");\n//include_once(\"core/config/config.php\");\n  }\n}\n?>\n```", "```php\n<?\nclass loader\n{\n  private static $loaded = array();\n  public static function load($object)\n  {\n    $valid = array(\t\"library\",\n    \"view\",\n    \"model\",\n    \"helper\",\n    \"router\",\n    \"config\",\n    \"hook\",\n    \"cache\",\n    \"db\");\n\n    if (!in_array($object,$valid))\n    {\n\n      $config = self::load(\"config\");\n      if (\"on\"==$config->debug)\n      {\n        base::backtrace();\n      }\n```", "```php\nthrow new Exception(\"Not a valid object '{$object}' to load\");\n    }\n\n    if (empty(self::$loaded[$object])){\n      self::$loaded[$object]= new $object();\n    }\n    return self::$loaded[$object];\n\n  }\n\n}\n?>\n```", "```php\n<?\nclass config\n{\n  private $config;\n  function __construct()\n  {\n    global $configs;\n    include_once(\"core/config/configs.php\");\n    include_once(\"app/config/configs.php\");\n    $this->config = $configs;\n  }\n\n  private function __get($var)\n  {\n    return $this->config[$var];\n  }\n}\n?>\n```", "```php\n<?\n$configs['debug']=\"on\";\n$configs['base_url']=\"http://localhost/orchid\";\n$configs['global_profile']=true;\n$configs['allowed_url_chars'] = \"/[^A-z0-9\\/\\^]/\";\n$configs['default_controller']=\"welcome\";\n?>\n```", "```php\n$config = self::load(\"config\");\n  if (\"on\"==$config->debug)\n    {\n      base::backtrace();\n    }\n```", "```php\n<?\nclass base{\n  public static function pr($array)\n  {\n    echo \"<pre>\";\n    print_r($array);\n    echo \"</pre>\";\n  }\n\n  public static function backtrace()\n  {\n    echo \"<pre>\";\n    debug_print_backtrace();\n    echo \"</pre>\";\n  }\n\n  public static function basePath()\n  {\n    return getcwd();\n  }\n\n  public static function baseUrl()\n  {\n    $conf = loader::load(\"config\");\n    return $conf->base_url;\n  }\n?>\n```", "```php\n<?\nclass router\n{\n  private $route;\n  private $controller;\n  private $action;\n  private $params;\n  public function __construct()\n  {\n    if(file_exists(\"app/config/routes.php\")){\n      require_once(\"app/config/routes.php\");\n    }\n\n    $path = array_keys($_GET);\n    $config = loader::load(\"config\");\n    if (!isset($path[0]))\n    {\n      $default_controller = $config->default_controller;\n      if (!empty($default_controller))\n      $path[0] = $default_controller;\n      else \n      $path[0] = \"index\";\n    }\n    $route= $path[0];\n\n    $sanitzing_pattern = $config->allowed_url_chars;\n    $route = preg_replace($sanitzing_pattern, \"\", $route);\n    $route = str_replace(\"^\",\"\",$route);\n    $this->route = $route;\n\n    $routeParts = split( \"/\",$route);\n    $this->controller=$routeParts[0];\n    $this->action=isset($routeParts[1])? $routeParts[1]:\"base\";\n    array_shift($routeParts);\n    array_shift($routeParts);\n    $this->params=$routeParts;\n\n    /* match user defined routing pattern */\n    if (isset($routes)){\n      foreach ($routes as $_route)\n      {\n        $_pattern = \"~{$_route[0]}~\";\n        $_destination = $_route[1];\n        if (preg_match($_pattern,$route))\n        {\n          $newrouteparts = split(\"/\",$_destination);\n          $this->controller = $newrouteparts[0];\n          $this->action = $newrouteparts[1];\n        }\n      }\n    }\n  }\n\n  public function getAction()\n  {\n    if (empty($this->action)) $this->action=\"main\";\n    return $this->action;\n  }\n\n  public function getController()\n  {\n    return $this->controller;\n  }\n\n  public function getParams()\n  {\n    return $this->params;\n  }\n\n}\n?>\n```", "```php\n<?\nclass view\n{\n  private $vars=array();\n  private $template;\n\n  public function set($key, $value)\n  {\n  $this->vars[$key]=$value;\n  }\n\n  public function getVars(&$controller=null)\n  {\n    if (!empty($controller)) $this->vars['app']=$controller;\n    return $this->vars;\n  }\n\n  public function setTemplate($template)\n  {\n    $this->template = $template;\n  }\n\n  public function getTemplate($controller=null)\n  {\n    if (empty($this->template)) return $controller;\n    return $this->template;\n  }\n\n  private function __get($var)\n  {\n    return loader::load($var);\n  }\n}\n?>\n```", "```php\n<?\nclass dispatcher\n{\n  public static function dispatch($router)\n  {\n    global $app;\n    //$cache = loader::load(\"cache\");\n    ob_start();\n    $config = loader::load(\"config\");\n\n    if ($config->global_profile) $start = microtime(true);\n\n $controller = $router->getController();\n $action = $router->getAction();\n $params = $router->getParams();\n if (count($params)>1){\n if (\"unittest\"==$params[count($params)-1] || \n '1'==$_POST['unittest'])unittest::setUp();\n }\n $controllerfile = \"app/controllers/{$controller}.php\";\n if (file_exists($controllerfile)){\n require_once($controllerfile);\n $app = new $controller();\n $app->use_layout = true;\n $app->setParams($params);\n $app->$action();\n      unittest::tearDown();\n\n      ob_end_clean();\n\n      //manage view\n      ob_start();\n\n      $view = loader::load(\"view\");\n $viewvars = $view->getVars($app);\n $uselayout = $config->use_layout;\n\n if (!$app->use_layout) $uselayout=false;\n\n $template = $view->getTemplate($action);\n base::_loadTemplate($controller, $template, \n $viewvars, $uselayout);\n\n      if (isset($start))\n     echo \"<p>Total time for dispatching is : \n                \".(microtime(true)-$start).\" seconds.</p>\";\n      $output = ob_get_clean();\n\n      //$cache->set(\"abcde\",array\n                     (\"content\"=>base64_encode($output)));\n      echo $output;\n    }\n    else\n    throw new Exception(\"Controller not found\");\n  }\n}\n?>\n```", "```php\n  public static function _loadTemplate($controller, $template, \n                                  $vars, $uselayout=false)\n  {\n    extract($vars);\n    if ($uselayout)\n    ob_start();\n    $templatefile =\"app/views/{$controller}/{$template}.php\";\n    if (file_exists($templatefile)){\n      include_once($templatefile);\n    }\n    else\n    {\n      throw new Exception(\"View '{$template}.php' is not found in \n                               views/{$controller} directory.\");\n    }\n\n    if ($uselayout) {\n      $layoutdata = ob_get_clean();\n      $layoutfilelocal = \"app/views/{$controller}/{$controller}.php\";\n      $layoutfileglobal = \"app/views/layouts/{$controller}.php\";\n\n      if (file_exists($layoutfilelocal))\n      include_once($layoutfilelocal);\n      else \n      include_once($layoutfileglobal);\n    }\n  }\n```", "```php\n<?\nclass model\n{\n  private $loaded = array();\n  private function __get($model)\n  {\n    $model .=\"model\";\n    $modelfile = \"app/models/{$model}.php\";\n\n    $config = loader::load(\"config\");\n\n    if (file_exists($modelfile))\n    {\n      include_once($modelfile);\n      if (empty($this->loaded[$model]))\n      {\n        $this->loaded[$model]=new $model();\n      }\n      $modelobj = $this->loaded[$model];\n      if ($config->auto_model_association)\n      {\n        $this->associate($modelobj, $_REQUEST); //auto association\n      }\n      return $modelobj;\n    }\n    else\n    {\n      throw new Exception(\"Model {$model} is not found\");\n    }\n  }\n\n  private function associate(&$obj, $array)\n  {\n    foreach ($array as $key=>$value)\n    {\n      if (property_exists($obj, $key))\n      {\n        $obj->$key = $value;\n      }\n    }\n  }\n}\n?>\n```", "```php\n<?\nclass library{\n  private $loaded = array();\n  private function __get($lib)\n  {\n    if (empty($this->loaded[$lib]))\n    {\n      $libnamecore = \"core/libraries/{$lib}.php\";\n      $libnameapp = \"app/libraries/{$lib}.php\";\n      if (file_exists($libnamecore))\n      {\n        require_once($libnamecore);\n        $this->loaded[$lib]=new $lib();\n      }\n      else if(file_exists($libnameapp))\n      {\n        require_once($libnameapp);\n        $this->loaded[$lib]=new $lib();\n      }\n      else \n      {\n        throw new Exception(\"Library {$lib} not found.\");\n      }\n    }\n    return $this->loaded[$lib];\n  }\n}\n?>\n```", "```php\n<?\n/**\n * Javascript Manager\n *\n */\nclass jsm\n{\n  function loadPrototype()\n  {\n    $base = base::baseUrl();\n    echo \"<script type='text/javascript' \n            src='{$base}/core/js/gzip.php?js=prototypec.js'>\\n\";\n  }\n  function loadScriptaculous()\n  {\n    $base = base::baseUrl();\n    echo \"<script type='text/javascript' \n      src='{$base}/core/js/gzip.php?js=scriptaculousc.js'>\\n\";\n  }\n  function loadProtaculous()\n  {\n    $base = base::baseUrl();\n    echo \"<script type='text/javascript' \n      src='{$base}/core/js/gzip.php?js=prototypec.js'>\\n\";\n    echo \"<script type='text/javascript' \n      src='{$base}/core/js/gzip.php?js=scriptaculousc.js'>\\n\";\n  }\n  function loadJquery()\n  {\n    $base = base::baseUrl();\n    echo \"<script type='text/javascript' \n            src='{$base}/core/js/gzip.php?js=jqueryc.js'>\\n\";\n  }\n  /**\n   * app specific libraries\n   *\n   * @param string $filename\n   */\n  function loadScript($filename)\n  {\n    $base = base::baseUrl();\n    $script = $base.\"/app/js/{$filename}.js\";\n    echo \"<script type='text/javascript' \n         src='{$base}/core/js/gzip.php?js={$script}'>\\n\";\n  }\n}\n?>\n```", "```php\n<?php \n  ob_start(\"ob_gzhandler\");\n  header(\"Content-type: text/javascript; charset: UTF-8\");\n  header(\"Cache-Control: must-revalidate\");\n  $offset = 60 * 60 * 24 * 3;\n  $ExpStr = \"Expires: \" . \n         gmdate(\"D, d M Y H:i:s\",  time() + $offset) . \" GMT\";\n  header($ExpStr);\n  $js = $_GET['js'];\n  if (in_array($js, \n      array(\"prototypec.js\",\"scriptaculousc.js\",\"jqueryc.js\")))\n                               include(urldecode($_GET['js']));\n?>\n```", "```php\nif (in_array($js, \n  array(\"prototypec.js\",\"scriptaculousc.js\",\"jqueryc.js\")))\n```", "```php\n<?\nclass unittest\n{\n  private static $results = array();\n  private static $testmode = false;\n\n  public static function setUp()\n  {\n    $config = loader::load(\"config\");\n    if ($config->unit_test_enabled){\n      self::$results = array();\n      self::$testmode = true;\n    }\n  }\n\n  public static function tearDown()\n  {\n    if (self::$testmode)\n    {\n      self::printTestResult();\n      self::$results = array();\n      self::$testmode = false;\n      die();\n    }\n  }\n\n  public static function printTestResult()\n  {\n    foreach (self::$results as $result)\n    {\n      echo $result.\"<hr/>\";\n    }\n  }\n\n  public static function assertTrue($object)\n  {\n    if (!self::$testmode) return 0;\n    if (true==$object) $result = \"passed\";\n    self::saveResult(true, $object, $result);\n  }\n\n  public static function assertEqual($object, $constant)\n  {\n    if (!self::$testmode) return 0;\n    if ($object==$constant)\n    {\n      $result = 1;\n    }\n    self::saveResult($constant, $object, $result);\n  }\n\n  private static function getTrace()\n  {\n    $result = debug_backtrace();\n    $cnt = count($result);\n    $callerfile = $result[2]['file'];\n    $callermethod = $result[3]['function'];\n    $callerline = $result[2]['line'];\n    return array($callermethod, $callerline, $callerfile);\n  }\n\n  private static function saveResult($expected, $actual, \n                                              $result=false)\n  {\n    if (empty($actual)) $actual = \"null/false\";\n\n    if (\"failed\"==$result || empty($result))\n    $result = \"<font color='red'><strong>failed</strong></font>\";\n    else\n    $result = \"<font color='green'><strong>passed</strong></font>\";\n\n    $trace = self::getTrace();\n    $finalresult = \"Test {$result} in Method: \n          <strong>{$trace[0]}</strong>. Line: \n          <strong>{$trace[1]}</strong>. File: \n          <strong>{$trace[2]}</strong>. <br/> Expected: \n          <strong>{$expected}</strong>, Actual: \n          <strong>{$actual}</strong>. \";\n    self::$results[] = $finalresult;\n  }\n\n  public static function assertArrayHasKey($key, array $array, \n                                                     $message = '')\n  {\n    if (!self::$testmode) return 0;\n    if (array_key_exists($key, $array))\n    {\n      $result = 1;\n      self::saveResult(\"Array has a key named '{$key}'\", \n                    \"Array has a key named '{$key}'\", $result);\n      return ;\n    }\n    self::saveResult(\"Array has a key named '{$key}'\", \n                \"Array has not a key named '{$key}'\", $result);\n  }\n\n  public static function assertArrayNotHasKey($key, array $array, \n                                               $message = '')\n  {\n    if (!self::$testmode) return 0;\n    if (!array_key_exists($key, $array))\n    {\n      $result = 1;\n      self::saveResult(\"Array has not a key named '{$key}'\", \n              \"Array has not a key named '{$key}'\", $result);\n      return ;\n    }\n    self::saveResult(\"Array has not a key named '{$key}'\", \n                   \"Array has a key named '{$key}'\", $result);\n\n  }\n  public static function assertContains($needle, $haystack, \n                           $message = '')\n  {\n    if (!self::$testmode) return 0;\n    if (in_array($needle,$haystack))\n    {\n      $result = 1;\n      self::saveResult(\"Array has a needle named '{$needle}'\", \n               \"Array has a needle named '{$needle}'\", $result);\n      return ;\n    }\n    self::saveResult(\"Array has a needle named '{$needle}'\", \n            \"Array has not a needle named '{$needle}'\", $result);\n\n  }\n}\n?>\n```", "```php\n<?\nclass benchmark\n{\n  private $times = array();\n  private $keys = array();\n\n  public function setMarker($key=null)\n  {\n    $this->keys[] = $key;\n    $this->times[] = microtime(true);\n  }\n\n  public function initiate()\n  {\n    $this->keys= array();\n    $this->times= array();\n  }\n\n  public function printReport()\n  {\n    $cnt = count($this->times);\n    $result = \"\";\n    for ($i=1; $i<$cnt; $i++)\n    {\n      $key1 = $this->keys[$i-1];\n      $key2 = $this->keys[$i];\n      $seconds = $this->times[$i]-$this->times[$i-1];\n      $result .= \"For step '{$key1}' to '{$key2}' : {$seconds} \n                                              seconds.</br>\";\n    }\n    $total = $this->times[$i-1]-$this->times[0];\n    $result .= \"Total time  : {$total} seconds.</br>\";\n    echo $result;\n  }\n}\n?>\n\n```", "```php\n<?\ninclude_once(\"dbdrivers/abstract.dbdriver.php\");\nclass db\n{\n  private $dbengine;\n  private $state  = \"development\";\n\n  public function __construct()\n  {\n    $config = loader::load(\"config\");\n    $dbengineinfo = $config->db;\n    if (!$dbengineinfo['usedb']==false)\n    {\n      $driver = $dbengineinfo[$this->state]['dbtype'].'driver';\n      include_once(\"dbdrivers/{$driver}.php\");\n      $dbengine = new $driver($dbengineinfo[$this->state]);\n      $this->dbengine = $dbengine;\n    }\n  }\n\n  public function setDbState($state)\n  {\n    //must be 'development'/'production'/'test' or whatever\n    if (empty($this->dbengine)) return 0;\n    $config = loader::load(\"config\");\n    $dbengineinfo = $config->db;\n    if (isset($dbengineinfo[$state]))\n    {\n      $this->state = $state;\n    }\n    else \n    {\n      throw new Exception(\"No such state in config filed called \n                                          ['db']['{$state}']\");\n    }\n  }\n\n  private function __call($method, $args)\n  {\n    if (empty($this->dbengine)) return 0;\n    if (!method_exists($this, $method))\n    return call_user_func_array(array($this->dbengine,\n                                           $method),$args);\n  }\n\n  /*private function __get($property)\n  {\n    if (property_exists($this->dbengine,$property))\n    return $this->dbengine->$property;\n  }*/\n}\n?>\n```", "```php\n<?\ndefine (\"FETCH_ASSOC\",1);\ndefine (\"FETCH_ROW\",2);\ndefine (\"FETCH_BOTH\",3);\ndefine (\"FETCH_OBJECT\",3);\n\nabstract class abstractdbdriver\n{\n  protected $connection;\n  protected $results = array();\n  protected $lasthash = \"\";\n\n  public function count()\n  {\n    return 0;\n  }\n\n  public function execute($sql)\n  {\n    return false;\n  }\n\n  private function prepQuery($sql)\n  {\n    return $sql;\n  }\n\n  public function escape($sql)\n  {\n    return $sql;\n  }\n\n  public function affectedRows()\n  {\n    return 0;\n  }\n\n  public function insertId()\n  {\n    return 0;\n  }\n\n  public function transBegin()\n  {\n    return false;\n  }\n\n  public function transCommit()\n  {\n  return false;\t\n  }\n\n  public function transRollback()\n  {\n    return false;\n  }\n\n  public function getRow($fetchmode = FETCH_ASSOC)\n  {\n    return array();\n  }\n\n  public function getRowAt($offset=null,$fetchmode = FETCH_ASSOC)\n  {\n    return array();\n  }\n\n  public function rewind()\n  {\n    return false;\n  }\n\n  public function getRows($start, $count, $fetchmode = FETCH_ASSOC)\n  {\n    return array();\n  }\n}\n?>\n\n```", "```php\n<?\nclass sqlitedriver extends abstractdbdriver\n{\n  public function __construct($dbinfo)\n  {\n    if (isset($dbinfo['dbname']))\n    {\n      if (!$dbinfo['persistent'])\n      $this->connection = \n           sqlite_open($dbinfo['dbname'],0666,$errormessage);\n      else\n      $this->connection = \n           sqlite_popen($dbinfo['dbname'],0666,$errormessage);\n      if (!$this->connection)\n      {\n        throw new Exception($errormessage);\n      }\n    }\n    else\n    throw new Exception(\"You must supply database name for a \n                                         successful connection\");\n\n  }\n\n  public function count()\n  {\n    $lastresult = $this->results[$this->lasthash];\n    //print_r($this->results);\n    $count = sqlite_num_rows($lastresult);\n    if (!$count) $count = 0;\n    return $count;\n  }\n\n  public function execute($sql)\n  {\n\n    $sql = $this->prepQuery($sql);\n    $parts = split(\" \",trim($sql));\n    $type = strtolower($parts[0]);\n    $hash = md5($sql);\n    $this->lasthash = $hash;\n\n    if (\"select\"==$type)\n    {\n      if (isset($this->results[$hash]))\n      {\n        if (is_resource($this->results[$hash]))\n        return $this->results[$hash];\n      }\n    }\n    else if(\"update\"==$type || \"delete\"==$type)\n    {\n      $this->results = array(); //clear the result cache\n    }\n    $this->results[$hash] = sqlite_query($sql,$this->connection);\n  }\n\n  private function prepQuery($sql)\n  {\n    return $sql;\n  }\n\n  public function escape($sql)\n  {\n    if (function_exists('sqlite_escape_string'))\n    {\n      return sqlite_escape_string($sql);\n    }\n    else\n    {\n      return addslashes($sql);\n    }\n  }\n\n  public function affectedRows()\n  {\n    return sqlite_changes($this->connection);\n  }\n\n  public function insertId()\n  {\n    return @sqlite_last_insert_rowid($this->connection);\n  }\n\n  public function transBegin()\n  {\n    $this->execute('BEGIN TRANSACTION');\n  }\n\n  public function transCommit()\n  {\n    $this->execute('COMMIT');\n  }\n  public function transRollback()\n  {\n    $this->execute('COMMIT');\n  }\n\n  public function getRow($fetchmode = FETCH_ASSOC)\n  {\n    $lastresult = $this->results[$this->lasthash];\n    if (FETCH_ASSOC == $fetchmode)\n    $row = sqlite_fetch_array($lastresult,SQLITE_ASSOC);\n    elseif (FETCH_ROW == $fetchmode)\n    $row = sqlite_fetch_array($lastresult, SQLITE_NUM);\n    elseif (FETCH_OBJECT == $fetchmode)\n    $row = sqlite_fetch_object($lastresult);\n    else\n    $row = sqlite_fetch_array($lastresult,SQLITE_BOTH);\n    return $row;\n  }\n\n  public function getRowAt($offset=null,$fetchmode = FETCH_ASSOC)\n  {\n    $lastresult = $this->results[$this->lasthash];\n    if (!empty($offset))\n  {    \n      sqlite_seek($lastresult, $offset);\n    }\n    return $this->getRow($fetchmode);\n  }\n\n  public function rewind()\n  {\n    $lastresult = $this->results[$this->lasthash];\n    sqlite_rewind($lastresult);\n  }\n\n  public function getRows($start, $count, $fetchmode = FETCH_ASSOC)\n  {\n    $lastresult = $this->results[$this->lasthash];\n    sqlite_seek($lastresult, $start);\n    $rows = array();\n    for ($i=$start; $i<=($start+$count); $i++)\n    {\n      $rows[] = $this->getRow($fetchmode);\n    }\n    return $rows;\n  }\n}\n?>\n```", "```php\n<?\nclass mysqldriver extends abstractdbdriver \n{\n  public function __construct($dbinfo)\n  {\n    if (!empty($dbinfo['dbname']))\n    {\n      if ($dbinfo['persistent'])\n      $this->connection = \n                mysql_pconnect($dbinfo['dbhost'],$dbinfo['dbuser'],\n                $dbinfo['dbpwd']);\n      else\n      $this->connection = \n                mysql_connect($dbinfo['dbhost'],$dbinfo['dbuser'],\n                $dbinfo['dbpwd']);\n      mysql_select_db($dbinfo['dbname'],$this->connection);\n    }\n    else\n    throw new Exception(\"You must supply username, password, \n           hostname and database name for connecting to mysql\");\n  }\n\n  public function execute($sql)\n  {\n    $sql = $this->prepQuery($sql);\n    $parts = split(\" \",trim($sql));\n    $type = strtolower($parts[0]);\n    $hash = md5($sql);\n    $this->lasthash = $hash;\n\n    if (\"select\"==$type)\n    {\n      if (isset($this->results[$hash]))\n      {\n        if (is_resource($this->results[$hash]))\n        return $this->results[$hash];\n      }\n    }\n    else if(\"update\"==$type || \"delete\"==$type)\n    {\n      $this->results = array(); //clear the result cache\n    }\n    $this->results[$hash] = mysql_query($sql,$this->connection);\n\n  }\n\n  public function count()\n  {\n    //print_r($this);\n    $lastresult = $this->results[$this->lasthash];\n    //print_r($this->results);\n    $count = mysql_num_rows($lastresult);\n    if (!$count) $count = 0;\n    return $count;\n  }\n\n  private  function prepQuery($sql)\n  {\n    // \"DELETE FROM TABLE\" returns 0 affected rows.\n    // This hack modifies the query so that\n    // it returns the number of affected rows\n    if (preg_match('/^\\s*DELETE\\s+FROM\\s+(\\S+)\\s*$/i', $sql))\n    {\n      $sql = preg_replace(\"/^\\s*DELETE\\s+FROM\\s+(\\S+)\\s*$/\", \n                           \"DELETE FROM \\\\1 WHERE 1=1\", $sql);\n    }\n\n    return $sql;\n  }\n\n  public function escape($sql)\n  {\n    if (function_exists('mysql_real_escape_string'))\n    {\n      return mysql_real_escape_string($sql, $this->conn_id);\n    }\n    elseif (function_exists('mysql_escape_string'))\n    {\n      return mysql_escape_string( $sql);\n    }\n    else\n    {\n      return addslashes($sql);\n    }\n  }\n  public function affectedRows()\n  {\n    return @mysql_affected_rows($this->connection);\n  }\n  public function insertId()\n  {\n    return @mysql_insert_id($this->connection);\n  }\n\n  public function transBegin()\n  {\n    $this->execute('SET AUTOCOMMIT=0');\n    $this->execute('START TRANSACTION'); // can also be BEGIN or \n                                         // BEGIN WORK\n    return TRUE;\n  }\n\n  public function transCommit()\n  {\n    $this->execute('COMMIT');\n    $this->execute('SET AUTOCOMMIT=1');\n    return TRUE;\n  }\n\n  public function transRollback()\n  {\n    $this->execute('ROLLBACK');\n    $this->execute('SET AUTOCOMMIT=1');\n    return TRUE;\n  }\n\n  public function getRow($fetchmode = FETCH_ASSOC)\n  {\n\n    $lastresult = $this->results[$this->lasthash];\n    if (FETCH_ASSOC == $fetchmode)\n    $row = mysql_fetch_assoc($lastresult);\n    elseif (FETCH_ROW == $fetchmode)\n    $row = mysql_fetch_row($lastresult);\n    elseif (FETCH_OBJECT == $fetchmode)\n    $row = mysql_fetch_object($lastresult);\n    else\n    $row = mysql_fetch_array($lastresult,MYSQL_BOTH);\n    return $row;\n  }\n\n  public function getRowAt($offset=null,$fetchmode = FETCH_ASSOC)\n  {\n    $lastresult = $this->results[$this->lasthash];\n    if (!empty($offset))\n    {\n      mysql_data_seek($lastresult, $offset);\n    }\n    return $this->getRow($fetchmode);\n  }\n\n  public function rewind()\n  {\n    $lastresult = $this->results[$this->lasthash];\n    mysql_data_seek($lastresult, 0);\n  }\n\n  public function getRows($start, $count, $fetchmode = FETCH_ASSOC)\n  {\n    $lastresult = $this->results[$this->lasthash];\n    mysql_data_seek($lastresult, $start);\n    $rows = array();\n    for ($i=$start; $i<=($start+$count); $i++)\n    {\n      $rows[] = $this->getRow($fetchmode);\n    }\n    return $rows;\n  }\n\n  function __destruct(){\n    foreach ($this->results as $result)\n    {\n      @mysql_free_result($result);\n    }\n  }\n\n}\n?>\n```", "```php\n<?\nclass pgsqldriver extends abstractdbdriver \n{\n\n  public function __construct($dbinfo)\n  {\n    if (!empty($dbinfo['dbname']))\n    {\n      if ($dbinfo['persistent'])\n      $this->connection = pg_pconnect(\"host={$dbinfo['dbname']} \n      port=5432 dbname={$dbinfo['dbname']} user={$dbinfo['$dbuser']} \n      password={$dbinfo['dbpwd']}\");\n      else\n      $this->connection = pg_connect(\"host={$dbinfo['dbname']} \n      port=5432 dbname={$dbinfo['dbname']} user={$dbinfo['$dbuser']} \n      password={$dbinfo['dbpwd']}\");\n    }\n    else\n    throw new Exception(\"You must supply username, password, \n    hostname and database name for connecting to postgresql\");\n  }\n\n  public function execute($sql)\n  {\n    $sql = $this->prepQuery($sql);\n    $parts = split(\" \",trim($sql));\n    $type = strtolower($parts[0]);\n    $hash = md5($sql);\n    $this->lasthash = $hash;\n\n    if (\"select\"==$type)\n    {\n      if (isset($this->results[$hash]))\n      {\n        if (is_resource($this->results[$hash]))\n        return $this->results[$hash];\n      }\n    }\n    else if(\"update\"==$type || \"delete\"==$type)\n    {\n      $this->results = array(); //clear the result cache\n    }\n    $this->results[$hash] = pg_query($this->connection,$sql);\n  }\n\n  public function count()\n  {\n    //print_r($this);\n    $lastresult = $this->results[$this->lasthash];\n    //print_r($this->results);\n    $count = pg_num_rows($lastresult);\n    if (!$count) $count = 0;\n    return $count;\n  }\n\n  private function prepQuery($sql)\n  {\n    // \"DELETE FROM TABLE\" returns 0 affected rows this hack modifies\n    // the query so that it returns the number of affected rows\n    if (preg_match('/^\\s*DELETE\\s+FROM\\s+(\\S+)\\s*$/i', $sql))\n    {\n      $sql = preg_replace(\"/^\\s*DELETE\\s+FROM\\s+(\\S+)\\s*$/\", \n                         \"DELETE FROM \\\\1 WHERE 1=1\", $sql);\n    }\n\n    return $sql;\n  }\n\n  public function escape($sql)\n  {\n    if (function_exists('pg_escape_string'))\n    {\n      return pg_escape_string( $sql);\n    }\n    else\n    {\n      return addslashes($sql);\n    }\n  }\n\n  public function affectedRows()\n  {\n    return @pg_affected_rows($this->connection);\n  }\n\n  public function insertId($table=null, $column=null)\n  {\n    $_temp = $this->lasthash;\n    $lastresult = $this->results[$this->lasthash];\n    $this->execute(\"SELECT version() AS ver\");\n\n    $row = $this->getRow();\n    $v = $row['server'];\n\n    $table = func_num_args() > 0 ? func_get_arg(0) : null;\n    $column = func_num_args() > 1 ? func_get_arg(1) : null;\n\n    if ($table == null && $v >= '8.1')\n    {\n      $sql='SELECT LASTVAL() as ins_id';\n    }\n    elseif ($table != null && $column != null && $v >= '8.0')\n    {\n      $sql = sprintf(\"SELECT pg_get_serial_sequence('%s','%s') as \n                                           seq\", $table, $column);\n      $this->execte($sql);\n      $row = $this->getRow();\n      $sql = sprintf(\"SELECT CURRVAL('%s') as ins_id\", $row['seq']);\n    }\n    elseif ($table != null)\n    {\n      // seq_name passed in table parameter\n      $sql = sprintf(\"SELECT CURRVAL('%s') as ins_id\", $table);\n    }\n    else\n    {\n      return pg_last_oid($lastresult);\n    }\n    $this->execute($sql);\n    $row = $this->getRow();\n    $this->lasthash = $_temp;\n    return $row['ins_id'];\n  }\n\n  public function transBegin()\n  {\n    return @pg_exec($this->connection, \"BEGIN\");\n    return TRUE;\n  }\n\n  public function transCommit()\n  {\n    return @pg_exec($this->connection, \"COMMIT\");\n    return TRUE;\n  }\n\n  public function transRollback()\n  {\n    return @pg_exec($this->connection, \"ROLLBACK\");\n    return TRUE;\n  }\n\n  public function getRow($fetchmode = FETCH_ASSOC)\n  {\n\n    $lastresult = $this->results[$this->lasthash];\n    if (FETCH_ASSOC == $fetchmode)\n    $row = pg_fetch_assoc($lastresult);\n    elseif (FETCH_ROW == $fetchmode)\n    $row = pg_fetch_row($lastresult);\n    elseif (FETCH_OBJECT == $fetchmode)\n    $row = pg_fetch_object($lastresult);\n    else\n    $row = pg_fetch_array($lastresult,PGSQL_BOTH);\n    return $row;\n  }\n\n  public function getRowAt($offset=null,$fetchmode = FETCH_ASSOC)\n  {\n    $lastresult = $this->results[$this->lasthash];\n    if (!empty($offset))\n    {\n       pg_result_seek($lastresult, $offset);\n    }\n    return $this->getRow($fetchmode);\n  }\n\n  public function rewind()\n  {\n    $lastresult = $this->results[$this->lasthash];\n    pg_result_seek($lastresult, 0);\n  }\n\n  public function getRows($start, $count, $fetchmode = FETCH_ASSOC)\n  {\n    $lastresult = $this->results[$this->lasthash];\n    $rows = array();\n    for ($i=$start; $i<=($start+$count); $i++)\n    {\n      $rows[] = $this->getRowAt($i,$fetchmode);\n    }\n    return $rows;\n  }\n\n  function __destruct(){\n    foreach ($this->results as $result)\n    {\n      @pg_free_result($result);\n    }\n  }\n\n}\n?>\n\n```", "```php\nTable: Posts\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| title   | varchar(250) | YES  |     | NULL    |                |\n| content | text         | YES  |     | NULL    |                |\n| user_id | int(11)      | YES  |     | NULL    |                |\n| date    | int(11)      | YES  |     | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n\nTable: Comments\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| post_id | int(11)      | YES  |     | NULL    |                |\n| content | text         | YES  |     | NULL    |                |\n| date    | int(11)      | YES  |     | NULL    |                |\n| author  | varchar(250) | YES  |     | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n\nTable: Users\n+----------+--------------+------+-----+---------+----------------+\n| Field    | Type         | Null | Key | Default | Extra          |\n+----------+--------------+------+-----+---------+----------------+\n| id       | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name     | varchar(100) | YES  |     | NULL    |                |\n| fullname | varchar(250) | YES  |     | NULL    |                |\n| email    | varchar(250) | YES  |     | NULL    |                |\n| password | varchar(32)  | YES  |     | NULL    |                |\n+----------+--------------+------+-----+---------+----------------+\n```", "```php\n<?\nsession_start();\nclass auth extends controller\n{\n  public $use_layout = false;\n  function base()\n  {\n\n  }\n\n  public function login()\n  {\n    //$this->redirect(\"auth\");\n    $this->view->set(\"message\",\"\");\n    if(!empty($_SESSION['userid']))\n    {\n      $this->redirect(\"blog\",\"display\");\n    }\n    else if (!empty($_POST))\n    {\n      $user = $this->model->user;\n      $userdata = $user->find(array(\"name\"=>$user->name,\n                          \"password\"=>md5($user->password)));\n      if (!$userdata)\n      {\n        //not found\n        $this->view->set(\"message\",\"Wrong username and password\");\n      }\n      else \n      {\n        $_SESSION['userid']=$userdata['id'];\n        $this->redirect(\"blog\",\"display\");\n      }\n    }\n  }\n\n  public function register()\n  {\n    if(!empty($_POST)){\n      $user = $this->model->user;\n      if (!$user->find(array(\"name\"=>$user->name))){\n        $user->password = md5($user->password);\n        $user->insert();\n      }\n    }\n  }\n}\n?>\n```", "```php\napp/views/auth/base.php\n<h1>\n  Please <a href='<?=$base_url?>/auth/login'>login</a> or \n         <a href='<?=$base_url?>/auth/register'>register</a>\n</h1>\n```", "```php\napp/views/auth/login.php\n<h1>Please login</h1>\n<font color=\"red\"><?=$message;?></font><br/>\n<form method=\"POST\">\n  Username:<br/>\n  <input type=\"text\" name=\"name\"/><br/>\n  Password: <br/>\n  <input type=\"password\" name=\"password\" /><br/>\n  <input type=\"submit\" name=\"Submit\" value=\"Login\" />\n</form>\n```", "```php\napp/views/auth/register.php\n<h1>Please register your account</h1><br/>\n\n<form method=\"POST\">\n  Your username: <br/>\n  <input type=\"text\" name=\"name\" /><br/>\n  Password: <br/>\n  <input type=\"password\" name=\"password\" /><br/>\n  Fullname: <br/>\n  <input type=\"text\" name=\"fullname\" /><br/>\n  Email: <br/>\n  <input type=\"text\" name=\"email\" /><br/>\n  <input type=\"submit\"  name=\"submit\" value=\"Register\"/>\n</form>\n```", "```php\n<?\nsession_start();\nclass blog extends controller \n{\n  public function display()\n  {\n    $user = $_SESSION['userid'];\n    $posts = $this->model->post->find(array(\"user_id\"=>$user),10);\n\n    if(!$posts)\n    {\n      $this->redirect(\"blog\",\"write\");\n    }\n    else \n    {\n      foreach ($posts as &$post)\n      {\n        $post['comments']=$this->model->comment->find\n                            (array(\"post_id\"=>$post['id']));\n      }\n      $this->view->set(\"posts\",$posts);\n    }\n  }\n\n  public function post()\n  {\n    $postid= $this->params['0'];\n    if (count($_POST)>1)\n    {\n      $comment = $this->model->comment;\n      $comment->date = time();\n      $comment->post_id = $postid;\n      $comment->insert();\n    }\n\n    $post = $this->model->post->find(array(\"id\"=>$postid));\n    if (!empty($postid))\n    {\n      $post[0]['comments'] = $this->model->comment->find\n                              (array(\"post_id\"=>$postid),100);\n    }\n\n    $this->view->set(\"message\",\"\");\n    $this->view->set(\"post\",$post[0]);\n    //die($postid);\n\n  }\n\n  public function write()\n  {\n    $this->view->set(\"color\",\"green\");\n    if (!empty($_POST))\n    {\n      $post = $this->model->post;\n      $post->user_id=$_SESSION['userid'];\n      $post->date = time();\n      $post->insert();\n      $this->view->set(\"color\",\"green\");\n      $this->view->set(\"message\",\"Successfully saved \n                                        your blog post\");\n    }\n  }\n}\n?>\n```", "```php\napp/views/blog/display.php\n<?\nforeach ($posts as $post)\n{\n  echo \"<div id='post{$post['id']}' >\";\n  echo \"<b><a href='{$base_url}/blog/post/{$post['id']}'>\n                          {$post['title']}</a></b><br/>\";\n  echo \"<p>\".nl2br($post['content']).\"</p>\";\n  echo \"Number of comments: \".(count($post['comments']));\n  echo \"</div>\";\n}\n?>\n```", "```php\napp/views/blog/post.php\n<?\n  echo \"<div id='post{$post['id']}' >\";\n  echo \"<b><a href='{$base_url}/blog/post/{$post['id']}'>\n                          {$post['title']}</a></b><br/>\";\n  echo \"<p>\".nl2br($post['content']).\"</p>\";\n  echo \"Number of comments: \".(count($post['comments']));\n  echo \"</div>\";\n  foreach ($post['comments'] as $comment)\n  {\n    echo \"<div style='padding:10px;margin-top:10px; \n    border:1px solid #cfcfcf;'>\";\n    $time = date(\"Y-m-d\",$comment['date']);\n    echo \"Posted by {$comment['author']} at {$time}:<br/>\";\n    echo \"{$comment['content']}\";\n    echo \"</div>\";\n  }\n\n?> \n<h2>Post a new comment</h2>\n<font color=\"red\"><?=$message;?></font><br/>\n<form method=\"POST\">\n  Name:<br/>\n  <input type=\"text\" name=\"author\"/><br/>\n  Comment: <br/>\n  <textarea rows=\"5\" cols=\"60\" name=\"content\" ></textarea><br/>\n  <input type=\"submit\" />\n</form>\n```", "```php\napp/views/blog/write.php\n<h1>Write a new blog post</h1>\n<font color=\"<?=$color;?>\"><?=$message;?></font><br/>\n<form method=\"POST\">\n  Title:<br/>\n  <input type=\"text\" name=\"title\"/><br/>\n  Content: <br/>\n  <textarea rows=\"5\" cols=\"60\" name=\"content\" ></textarea><br/>\n\n  <input type=\"submit\" value=\"save\"  />\n</form>\n```", "```php\n<?\n$configs['use_layout']=false;\n$configs['unit_test_enabled']=true;\n$configs['default_controller']=\"welcome\";\n$configs['global_profile']=true;\n\n/* DB */\n$configs['db']['usedb']=\"mysql\";\n\n$configs['db']['development']['dbname']=\"packtblog\";\n$configs['db']['development']['dbhost']=\"localhost\";\n$configs['db']['development']['dbuser']=\"root\";\n$configs['db']['development']['dbpwd']=\"root1234\";\n$configs['db']['development']['persistent']=true;\n$configs['db']['development']['dbtype']=\"mysql\";\n?>\n```"]