["```php\n$settings['file_public_path'] = 'sites/default/files';  \n```", "```php\n$settings['file_private_path'] = 'sites/default/private';  \n```", "```php\n$contents = ''; \n$handle = fopen(\"/local/path/to/file/image.jpg\", \"rb\"); \nwhile (!feof($handle)) { \n $contents .= fread($handle, 8192); \n} \nfclose($handle);  \n```", "```php\n$fields['image'] = BaseFieldDefinition::create('image') \n  ->setLabel(t('Image')) \n  ->setDescription(t('The product image.')) \n  ->setDisplayOptions('form', array( \n    'type' => 'image_image', \n    'weight' => 5, \n  ));  \n```", "```php\ndrush entity-update  \n```", "```php\n/** \n * Gets the Product image. \n * \n * @return \\Drupal\\file\\FileInterface \n */ \npublic function getImage(); \n\n/** \n * Sets the Product image. \n * \n * @param int $image \n * \n * @return \\Drupal\\products\\Entity\\ProductInterface \n *   The called Product entity. \n */ \npublic function setImage($image);  \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function getImage() { \n  return $this->get('image')->entity; \n} \n\n/** \n * {@inheritdoc} \n */ \npublic function setImage($image) { \n  $this->set('image', $image); \n  return $this; \n}  \n```", "```php\n{ \n  \"products\" : [ \n    { \n      \"id\" : 1, \n      \"name\": \"TV\", \n      \"number\": 341, \n      \"image\": \"tv.jpg\" \n    }, \n    { \n      \"id\" : 2, \n      \"name\": \"VCR\", \n      \"number\": 123, \n      \"image\": \"vcr.jpg\" \n    } \n  ] \n}  \n```", "```php\n$this->handleProductImage($data, $product);  \n```", "```php\n/** \n * Imports the image of the product and adds it to the Product entity. \n * \n * @param $data \n * @param \\Drupal\\products\\Entity\\ProductInterface $product \n */ \nprivate function handleProductImage($data, ProductInterface $product) { \n  $name = $data->image; \n  // This needs to be hardcoded for the moment. \n  $image_path = ''; \n  $image = file_get_contents($image_path . '/' . $name); \n  if (!$image) { \n    // Perhaps log something. \n    return; \n  } \n\n  /** @var \\Drupal\\file\\FileInterface $file */ \n  $file = file_save_data($image, 'public://product_images/' . $name, FileSystemInterface::EXISTS_REPLACE); \n  if (!$file) { \n    // Something went wrong, perhaps log it. \n    return; \n  } \n\n  $product->setImage($file->id()); \n}  \n```", "```php\nuse Drupal\\products\\Entity\\ProductInterface; \nuse Drupal\\Core\\File\\FileSystemInterface;  \n```", "```php\nid,name,number \n1,Car,45345 \n2,Motorbike,54534  \n```", "```php\nnamespace Drupal\\products\\Plugin\\Importer; \n\nuse Drupal\\Core\\StringTranslation\\StringTranslationTrait; \n   use Drupal\\products\\Plugin\\ImporterBase; \n\n/** \n * Product importer from a CSV format. \n * \n * @Importer( \n *   id = \"csv\", \n *   label = @Translation(\"CSV Importer\") \n * ) \n */ \nclass CsvImporter extends ImporterBase { \n\n  use StringTranslationTrait; \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function import() { \n    $products = $this->getData(); \n    if (!$products) { \n      return FALSE; \n    } \n\n    foreach ($products as $product) { \n      $this->persistProduct($product); \n    } \n\n    return TRUE; \n  } \n}  \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function getConfigurationForm(\\Drupal\\products\\Entity\\ImporterInterface $importer) { \n  $form = []; \n  $config = $importer->getPluginConfiguration(); \n  $form['file'] = [ \n    '#type' => 'managed_file', \n    '#default_value' => isset($config['file']) ? $config['file'] : '', \n    '#title' => $this->t('File'), \n    '#description' => $this->t('The CSV file containing the product records.'), \n    '#required' => TRUE, \n  ]; \n\n  return $form; \n}  \n```", "```php\n'#upload_location' => 'public://'  \n```", "```php\n'#upload_validators' => [ \n  'file_validate_extensions' => ['csv'], \n],  \n```", "```php\nproducts.importer.plugin.csv: \n  type: mapping \n  label: Plugin configuration for the CSV importer plugin \n  mapping: \n    file: \n      type: sequence \n      label: File IDs \n      sequence: \n        type: integer \n        label: CSV File ID  \n```", "```php\n/** \n * Implements hook_ENTITY_TYPE_insert() for the Importer config entity type. \n */ \nfunction products_importer_insert(\\Drupal\\Core\\Entity\\EntityInterface $entity) { \n  if ($entity->getPluginId() != 'csv') { \n    return; \n  } \n\n  // Mark the current File as being used. \n  $fid = _products_importer_get_fid_from_entity($entity); \n  $file = Drupal::entityTypeManager()->getStorage('file')->load($fid); \n  \\Drupal::service('file.usage')->add($file, 'products', 'config:importer', $entity->id()); \n}  \n```", "```php\n/** \n * Given an Importer entity using the CSV plugin, return the File ID of the CSV \n * file. \n * \n * @param \\Drupal\\Core\\Entity\\EntityInterface $entity \n * \n * @return int \n */ \nfunction _products_importer_get_fid_from_entity(\\Drupal\\Core\\Entity\\EntityInterface $entity) { \n  $fids = $entity->getPluginConfiguration()['file']; \n  $fid = reset($fids); \n  return $fid; \n}  \n```", "```php\n/** \n * Implements hook_ENTITY_TYPE_delete() for the Importer config entity type. \n */ \nfunction products_importer_delete(\\Drupal\\Core\\Entity\\EntityInterface $entity) { \n  if ($entity->getPluginId() != 'csv') { \n    return; \n  } \n\n  $fid = _products_importer_get_fid_from_entity($entity); \n  $file = Drupal::entityTypeManager()->getStorage('file')->load($fid); \n  \\Drupal::service('file.usage')->delete($file, 'products', 'config:importer', $entity->id()); \n}  \n```", "```php\n/** \n * Implements hook_ENTITY_TYPE_update() for the Importer config entity type. \n */ \nfunction products_importer_update(\\Drupal\\Core\\Entity\\EntityInterface $entity) { \n  if ($entity->getPluginId() != 'csv') { \n    return; \n  } \n\n  /** @var \\Drupal\\products\\Entity\\ImporterInterface $original */ \n  $original = $entity->original; \n  $original_fid = _products_importer_get_fid_from_entity($original); \n  if ($original_fid !== _products_importer_get_fid_from_entity($entity)) { \n    $original_file = Drupal::entityTypeManager()->getStorage('file')->load($original_fid); \n    \\Drupal::service('file.usage')->delete($original_file, 'products', 'config:importer', $entity->id()); \n  } \n}  \n```", "```php\n$original = $entity->original;  \n```", "```php\n/** \n * Loads the product data from the remote URL. \n * \n * @return array \n */ \nprivate function getData() { \n  /** @var \\Drupal\\products\\Entity\\ImporterInterface $importer_config */ \n  $importer_config = $this->configuration['config']; \n  $config = $importer_config->getPluginConfiguration(); \n  $fids = isset($config['file']) ? $config['file'] : []; \n  if (!$fids) {       \n    return NULL; \n  } \n\n  $fid = reset($fids); \n  /** @var \\Drupal\\file\\FileInterface $file */ \n  $file = $this->entityTypeManager->getStorage('file')->load($fid); \n  $wrapper = $this->streamWrapperManager->getViaUri($file->getFileUri()); \n  if (!$wrapper) { \n    return NULL; \n  } \n\n  $url = $wrapper->realpath(); \n  $spl = new \\SplFileObject($url, 'r'); \n  $data = []; \n  while (!$spl->eof()) { \n    $data[] = $spl->fgetcsv(); \n  } \n\n  $products = []; \n  $header = []; \n  foreach ($data as $key => $row) { \n    if ($key == 0) { \n      $header = $row; \n      continue; \n    } \n\n    if ($row[0] == \"\") { \n      continue; \n    } \n\n    $product = new \\stdClass(); \n    foreach ($header as $header_key => $label) { \n      $product->{$label} = $row[$header_key]; \n    } \n    $products[] = $product; \n  } \n\n  return $products; \n}  \n```", "```php\n/** \n * @var \\Drupal\\Core\\StreamWrapper\\StreamWrapperManagerInterface \n */ \nprotected $streamWrapperManager; \n\n/** \n * {@inheritdoc} \n */ \npublic function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, ClientInterface $httpClient, StreamWrapperManagerInterface $streamWrapperManager) { \n  parent::__construct($configuration, $plugin_id, $plugin_definition, $entityTypeManager, $httpClient); \n  $this->streamWrapperManager = $streamWrapperManager; \n} \n\n/** \n * {@inheritdoc} \n */ \npublic static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) { \n  return new static( \n    $configuration, \n    $plugin_id, \n    $plugin_definition, \n    $container->get('entity_type.manager'), \n    $container->get('http_client'), \n    $container->get('stream_wrapper_manager') \n  ); \n}  \n```", "```php\nuse Drupal\\Core\\Entity\\EntityTypeManagerInterface; \nuse Drupal\\Core\\StreamWrapper\\StreamWrapperManagerInterface; \nuse GuzzleHttp\\ClientInterface; \nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;  \n```", "```php\nproducts.images_stream_wrapper: \n  class: Drupal\\products\\StreamWrapper\\ProductsStreamWrapper \n  tags: \n    - { name: stream_wrapper, scheme: products }  \n```", "```php\nproducts://target  \n```", "```php\nnamespace Drupal\\products\\StreamWrapper; \n\nuse Drupal\\Component\\Utility\\UrlHelper; \nuse Drupal\\Core\\StreamWrapper\\StreamWrapperInterface; \nuse Drupal\\Core\\StringTranslation\\StringTranslationTrait; \n\n/** \n * Stream wrapper for the remote product image paths used by the JSON Importer. \n */ \nclass ProductsStreamWrapper implements StreamWrapperInterface { \n\n  use StringTranslationTrait; \n\n  /** \n   * The Stream URI \n   * \n   * @var string \n   */ \n  protected $uri; \n\n  /** \n   * @var \\Drupal\\Core\\Site\\Settings \n   */ \n  protected $settings; \n\n  /** \n   * Resource handle \n   * \n   * @var resource \n   */ \n  protected $handle; \n\n  /** \n   * ProductsStreamWrapper constructor. \n   */ \n  public function __construct() { \n    // Dependency injection does not work with stream wrappers. \n    $this->settings = \\Drupal::service('settings'); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getName() { \n    return $this->t('Product images stream wrapper'); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getDescription() { \n    return $this->t('Stream wrapper for the remote location where product images can be found by the JSON Importer.'); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public static function getType() { \n    return StreamWrapperInterface::HIDDEN; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function setUri($uri) { \n    $this->uri = $uri; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getUri() { \n    return $this->uri; \n  } \n\n  /** \n   * Helper method that returns the local writable target of the resource within the stream. \n   * \n   * @param null $uri \n   * \n   * @return string \n   */ \n  public function getTarget($uri = NULL) { \n    if (!isset($uri)) { \n      $uri = $this->uri; \n    } \n\n    list($scheme, $target) = explode('://', $uri, 2); \n    return trim($target, '\\/'); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getExternalUrl() { \n    $path = str_replace('\\\\', '/', $this->getTarget()); \n    return $this->settings->get('product_images_path') . '/' . UrlHelper::encodePath($path); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function realpath() { \n    return $this->getTarget(); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_open($path, $mode, $options, &$opened_path) { \n    $allowed_modes = array('r', 'rb'); \n    if (!in_array($mode, $allowed_modes)) { \n      return FALSE; \n    } \n    $this->uri = $path; \n    $url = $this->getExternalUrl(); \n    $this->handle = ($options && STREAM_REPORT_ERRORS) ? fopen($url, $mode) : @fopen($url, $mode); \n    return (bool) $this->handle; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function dir_closedir() { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function dir_opendir($path, $options) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function dir_readdir() { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function dir_rewinddir() { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function mkdir($path, $mode, $options) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function rename($path_from, $path_to) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function rmdir($path, $options) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_cast($cast_as) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_close() { \n    return fclose($this->handle); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_eof() { \n    return feof($this->handle); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_flush() { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_lock($operation) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_metadata($path, $option, $value) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_read($count) { \n    return fread($this->handle, $count); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_seek($offset, $whence = SEEK_SET) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_set_option($option, $arg1, $arg2) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_stat() { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_tell() { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_truncate($new_size) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function stream_write($data) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function unlink($path) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function url_stat($path, $flags) { \n    return FALSE; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function dirname($uri = NULL) { \n    return FALSE; \n  } \n}  \n```", "```php\n$settings['file_public_path'] = 'sites/default/files';  \n```", "```php\n$settings['product_images_path'] = 'http://path/to/the/remote/product/images'; \n```", "```php\n$uri = 'products://tv.jpg'; \n```", "```php\n$contents = file_get_contents($uri);  \n```", "```php\n$handle = fopen($uri, 'r'); \n$contents = ''; \nwhile (!feof($handle)) { \n  $contents .= fread($handle, 8192); \n} \nfclose($handle);  \n```", "```php\n// This needs to be hardcoded for the moment. \n$image_path = ''; \n$image = file_get_contents($image_path . '/' . $name);  \n```", "```php\n$image = file_get_contents('products://' . $name);  \n```", "```php\n$image = file_get_contents('products://tv.jpg'); \n// Load the service statically for quick demonstration. \n$file_system = \\Drupal::service('file_system'); \n$path = $file_system->saveData($image, 'public://tv.jpg', FileSystemInterface::EXISTS_REPLACE);  \n```", "```php\nsystem.files: \n  path: '/system/files/{scheme}' \n  defaults: \n    _controller: 'Drupal\\system\\FileDownloadController::download' \n    scheme: private \n  requirements: \n    _access: 'TRUE'  \n```", "```php\n$target = $request->query->get('file');\n```", "```php\npath_processor.files: \n  class: Drupal\\system\\PathProcessor\\PathProcessorFiles \n  tags: \n    - { name: path_processor_inbound, priority: 200 }  \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function processInbound($path, Request $request) { \n  if (strpos($path, '/system/files/') === 0 && !$request->query->has('file')) { \n    $file_path = preg_replace('|^\\/system\\/files\\/|', '', $path); \n    $request->query->set('file', $file_path); \n    return '/system/files'; \n  } \n  return $path; \n}  \n```", "```php\n/** \n * Implements hook_file_download(). \n */ \nfunction module_name_file_download($uri) { \n  $file_system = \\Drupal::service('file_system'); \n  $dir = $file_system->dirname($uri); \n  if ($dir !== 'private://pdfs') { \n    return NULL; \n  } \n\n  if (!\\Drupal::currentUser()->hasPermission('administer site configuration')) { \n    return -1; \n  } \n\n  return [ \n    'Content-type' => 'application/pdf', \n  ]; \n}  \n```", "```php\n$name = $file_system->basename($uri); \nreturn [ \n  'Content-Disposition' => \"attachment;filename='$name'\" \n];  \n```", "```php\nreturn new BinaryFileResponse($uri, 200, $headers, $scheme !== 'private');  \n```", "```php\n$factory = \\Drupal::service('image.factory');  \n```", "```php\n$image = $factory->get($uri);  \n```", "```php\n$image->scale(50, 50); \n$image->save('public://thumbnail.jpg');  \n```", "```php\n->setDisplayOptions('view', array( \n  'type' => 'image', \n  'weight' => 10, \n  'settings' => [ \n    'image_style' => 'large' \n  ] \n))  \n```", "```php\nreturn [ \n  '#theme' => 'image', \n  '#uri' => 'public://image.jpg', \n];  \n```", "```php\nreturn [ \n  '#theme' => 'image_style', \n  '#uri' => 'public://image.jpg', \n  '#style_name' => 'large', \n];  \n```", "```php\n$style = \\Drupal::entityTypeManager()->getStorage('image_style')->load('thumbnail'); \n$url = $style->buildUrl('public://image.jpg');  \n```"]