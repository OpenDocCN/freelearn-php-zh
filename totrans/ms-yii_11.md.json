["```php\n<?php phpinfo();\n\n```", "```php\nphp â€“m | grep intl\n\n```", "```php\nsudo pecl install intl\n\n```", "```php\nextension=intl.so\n\n```", "```php\nreturn [\n    'language' => 'ru-RU',\n    'sourceLanguage' => 'en-US',\n];\n```", "```php\nreturn [\n    // [...],\n    'bootstrap' => [\n        [\n 'class' => 'yii\\filters\\ContentNegotiator',\n 'languages' => [\n 'en',\n 'de',\n ],\n ],\n    ],\n];\n```", "```php\npublic function behaviors()\n{\n    return [\n        [\n            'class' => 'yii\\filters\\ContentNegotiator',\n            'languages' => [\n                'en',\n                'de',\n            ],\n        ],\n    ];\n}\n```", "```php\nYii::t('app', 'My message to be translated');\n```", "```php\n<?php return [\n    // [...],\n    'components' => [\n        // [...],\n        'i18n' => [\n 'translations' => [\n 'app*' => [\n 'class' => 'yii\\i18n\\PhpMessageSource',\n ],\n ],\n        ],\n    ]\n];\n```", "```php\n<?php return [\n    // [...],\n    'components' => [\n        // [...],\n        'i18n' => [\n            'translations' => [\n                'app*' => [\n                    'class' => 'yii\\i18n\\PhpMessageSource',\n                    //'basePath' => '@app/messages',\n                    //'sourceLanguage' => 'en-US',\n                ],\n            ],\n        ],\n    ]\n];\n```", "```php\n<?php return [\n    // [...],\n    'components' => [\n        // [...],\n        'i18n' => [\n            'translations' => [\n '*' => [\n 'class' => 'yii\\i18n\\PhpMessageSource'\n ],\n            ],\n        ],\n    ]\n];\n```", "```php\n<?php return [\n    // [...],\n    'components' => [\n        // [...],\n        'i18n' => [\n            'translations' => [\n                'yii' => [\n 'class' => 'yii\\i18n\\PhpMessageSource',\n 'sourceLanguage' => 'en-US',\n 'basePath' => '@app/messages'\n ],\n            ],\n        ],\n    ]\n];\n```", "```php\n<?php return [\n    // [...],\n    'components' => [\n        // [...],\n        'i18n' => [\n            'translations' => [\n                'app*' => [\n                    'class' => 'yii\\i18n\\PhpMessageSource',\n                'on missingTranslation' => ['app\\components\\TranslationEventHandler', 'handleMissingTranslation']\n                ],\n            ],\n        ],\n    ]\n];\n```", "```php\n<?php\n\nnamespace app\\components;\n\nuse yii\\i18n\\MissingTranslationEvent;\n\nclass TranslationEventHandler\n{\n    public static function handleMissingTranslation(MissingTranslationEvent $event)\n    {\n        $event->translatedMessage = \"@{$event->category}.{$event->message}-{$event->language}@\";\n    }\n}\n```", "```php\n    ./yii message/config path/to/messagesconfig.php\n\n    ```", "```php\n    <?php return [\n        // string, required, root directory of all source files\n        'sourcePath' => __DIR__ . DIRECTORY_SEPARATOR . '..',\n\n        // array, required, list of language codes that the extracted messages\n        // should be translated to. For example, ['zh-CN', 'de'].\n\n        'languages' => ['de'],\n        // string, the name of the function for translating messages.\n        // Defaults to 'Yii::t'. This is used as a mark to find the messages to be\n        // translated. You may use a string for single function name or an array for\n        // multiple function names.\n        'translator' => 'Yii::t',\n\n        // boolean, whether to sort messages by keys when merging new messages\n        // with the existing ones. Defaults to false, which means the new (untranslated)\n        // messages will be separated from the old (translated) ones.\n        'sort' => false,\n\n        // boolean, whether to remove messages that no longer appear in the source code.\n        // Defaults to false, which means each of these messages will be enclosed with a pair of '@@' marks.\n     'removeUnused' => false,\n\n        // array, list of patterns that specify which files/directories should NOT be processed.\n        // If empty or not set, all files/directories will be processed.\n        // A path matches a pattern if it contains the pattern string at its end. For example,\n        // '/a/b' will match all files and directories ending with '/a/b';\n        // the '*.svn' will match all files and directories whose name ends with '.svn'.\n        // and the '.svn' will match all files and directories named exactly '.svn'.\n        // Note, the '/' characters in a pattern matches both '/' and '\\'.\n        // See helpers/FileHelper::findFiles() description for more details on pattern matching rules.\n     'only' => ['*.php'],\n\n        // array, list of patterns that specify which files (not directories) should be processed.\n        // If empty or not set, all files will be processed.\n        // Please refer to \"except\" for details about the patterns.\n        // If a file/directory matches both a pattern in \"only\" and \"except\", it will NOT be processed.\n        'except' => [\n     '.svn',\n     '.git',\n     '.gitignore',\n     '.gitkeep',\n     '.hgignore',\n     '.hgkeep',\n     '/messages',\n     '/vendor,\n     ],\n\n        // 'php' output format is for saving messages to php files.\n        'format' => 'php',\n\n        // Root directory containing message translations.\n        'messagePath' => __DIR__,\n\n        // boolean, whether the message file should be overwritten with the merged messages\n        'overwrite' => true\n    ];\n    ```", "```php\n    ./yii message path/to/messagesconfig.php\n\n    ```", "```php\n<?php \n// $model = User::find(1)->one();\necho Yii::t('app', 'Good Morning {name}', [\n    'name' => $model->first_name\n]);\n```", "```php\n$price = 500;\n$count = 2;\n$subtotal = 1000;\necho \\Yii::t('app', 'Price: ${0}, Count: {1}, Subtotal: ${2}', [\n    $price, \n    $count, \n    $subtotal\n]);\n```", "```php\n    parent::init();Yii::$app->i18n->translations['modules/mymodule*'] = [\n        'class' => 'yii\\i18n\\PhpMessageSource',\n        'sourceLanguage' => 'en-US',\n        'basePath' => '@app/modules/mymodule/messages'\n    ];\n    ```", "```php\n    public static function t($category, $message, $params = [], $language = null)\n    {\n        return Yii::t('modules/mymodule/' . $category, $message, $params, $language);\n    }\n    ```", "```php\n    <?php return [\n        'sourcePath' => __DIR__ . DIRECTORY_SEPARATOR . '..',\n        'languages' => ['de'],\n        'translator' => 'MyModule::t',\n        'sort' => false,\n        'removeUnused' => false,\n        'only' => ['*.php'],\n        'except' => [\n            '.svn',\n            '.git',\n            '.gitignore',\n            '.gitkeep',\n            '.hgignore',\n            '.hgkeep',\n            '/messages',\n            '/vendor'\n        ],\n        'format' => 'php',\n        'messagePath' => __DIR__,\n        'overwrite' => true\n    ];\n    ```", "```php\n./yii message modules/mymodule/messages/messages.php\n\n```", "```php\n<?php\nnamespace app\\components;\n\nuse yii\\base\\Widget;\nuse yii\\helpers\\Html;\n\nuse Yii;\nclass GreetingWidget extends Widget\n{\n    public $name = null;\n\n    public $greeting;\n\n    public function init()\n    {\n        parent::init();\n\n        Yii::$app->i18n->translations['widgets/GreetingWidget*'] = [\n 'class' => 'yii\\i18n\\PhpMessageSource',\n 'sourceLanguage' => 'en-US',\n 'basePath' => '@app/components/widgets/GreetingWidget'\n ];\n\n        $hour = date('G');\n\n        if ( $hour >= 5 && $hour <= 11 )\n           $this->greeting = GreetingWidget::t(\"Good Morning\");\n        else if ( $hour >= 12 && $hour <= 18 )\n           $this->greeting = GreetingWidget::t(\"Good Afternoon\");\n        else if ( $hour >= 19 || $hours <= 4 )\n           $this->greeting = GreetingWidget::t(\"Good Evening\");\n    }\n\n    public function run()\n    {\n        if ($this->name === null)\n            return HTML::encode($this->greeting);\n        else\n            return HTML::encode($this->greeting . ', ' . $this->name);\n    }\n\n    public static function t($category, $message, $params = [], $language = null)\n {\n return Yii::t('widgets/GreetingWidget/' . $category, $message, $params, $language);\n }\n} \n```"]