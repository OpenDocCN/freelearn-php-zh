- en: Introduction to WordPress Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress 开发简介
- en: WordPress is the most widely-used CMS in the world, and the demand for developers
    is on the rise. Beginner WordPress developers are often restricted to using existing
    plugins and making minor modifications with the theme functions file. As a developer,
    you need a thorough understanding of WordPress core modules and components, along
    with a proper development setup to tackle complex application requirements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 是世界上使用最广泛的 CMS，对开发者的需求正在上升。初学者 WordPress 开发者通常局限于使用现有插件和通过主题功能文件进行微调。作为一名开发者，你需要对
    WordPress 核心模块和组件有深入的了解，以及一个适当的开发环境来应对复杂的应用需求。
- en: This chapter focuses on introducing you to the prerequisites of WordPress development
    while clearing up some of the misconceptions about development. Unlike other frameworks,
    WordPress doesn't have an MVC architecture or similar. So, developers have the
    freedom to find their own techniques. We will begin by having a high-level overview
    of how developers can use the existing features in development, as well as the
    techniques for integrating our code with WordPress components. Then, we will move
    on to installing WordPress and discussing the use of configuration files with
    default and advanced configurations. Development tools and coding standards are
    the keys for producing quality code, and hence we will discuss the use of WordPress-specific
    coding standards as well as the use of popular open source development tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是向您介绍 WordPress 开发的先决条件，同时澄清一些关于开发的误解。与其他框架不同，WordPress 没有 MVC 架构或类似架构。因此，开发者有自由去寻找自己的技术。我们将从开发者如何使用现有功能进行开发，以及将我们的代码与
    WordPress 组件集成的技术进行概述开始。然后，我们将继续讨论 WordPress 的安装以及默认和高级配置下配置文件的使用。开发工具和编码标准是生产高质量代码的关键，因此我们还将讨论
    WordPress 特定编码标准的使用以及流行开源开发工具的使用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing and configuring a development environment for WordPress
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 WordPress 开发环境
- en: How to use a WordPress configuration file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 WordPress 配置文件
- en: A high-level overview of the WordPress file/directory structure and their use
    in development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress 文件/目录结构的高级概述及其在开发中的使用
- en: A brief introduction to WordPress coding standards and its usage
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress 编码标准和其使用的简要介绍
- en: Using popular tools for debugging code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用流行的工具进行代码调试
- en: By the end of this chapter, you will have the necessary knowledge to understand
    the key development areas of WordPress and preparing the development environment
    for a smooth workflow.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将具备理解 WordPress 关键开发领域和为流畅的工作流程准备开发环境所需的知识。
- en: Introduction to WordPress development
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress 开发简介
- en: This book is intended for beginner WordPress developers and site owners who
    want to build custom websites with WordPress. We dive into developing solutions
    with WordPress, it's important to understand what exactly development is, and
    the areas involved. There are many people who call themselves WordPress developers
    and yet haven't done anything beyond changing some theme designs and using the
    theme functions file. WordPress development can range from simple theme design
    changes to building a complex web application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在为初学者 WordPress 开发者和希望使用 WordPress 构建自定义网站的网站所有者编写。我们深入探讨使用 WordPress 开发解决方案，了解开发的确切含义和涉及到的领域非常重要。许多人自称是
    WordPress 开发者，但实际上他们所做的只是改变一些主题设计和使用主题功能文件。WordPress 开发可以从简单的主题设计更改到构建复杂的网络应用程序。
- en: 'Here are the components involved in WordPress development:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 WordPress 开发中涉及到的组件：
- en: '**Theme functions file**: The first technique you encounter when getting started
    with development. Usually, we can add small code snippets using filters and actions
    to change the functionality of theme or plugins. Since this file is updated on
    theme updates, it''s not recommended to add your own custom code. However, there
    are exceptions when using your own theme or a theme without version updates. This
    is a good starting point to add some code and learn how WordPress can be customized
    with actions and filters.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题功能文件**：开始开发时遇到的第一项技术。通常，我们可以使用过滤器和动作添加小的代码片段来改变主题或插件的功能。由于此文件在主题更新时会被更新，因此不建议添加自己的自定义代码。然而，在使用自己的主题或没有版本更新的主题时，有一些例外。这是一个添加一些代码并学习如何通过动作和过滤器自定义
    WordPress 的好起点。'
- en: '**Child themes**: This is the next step in development, before diving into
    complex implementations using plugins. The child theme is a theme that we create
    based on an existing theme. We can either override all files in the child theme
    or only add the necessary files to override. If you are starting WordPress development
    and want to add some quick code snippets, creating a child theme and using the
    functions file is the ideal solution. In development, the child theme should be
    used for minor implementations such as design changes or displaying more/less
    data on frontend screens. Since we only use the `functions.php` file for code
    changes, this technique is not recommended for implementing advanced features.
    However, modern themes are packed with features and hence there may be exceptions
    for doing advanced implementations in child themes.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子主题**：这是开发过程中的下一步，在深入使用插件进行复杂实现之前。子主题是基于现有主题创建的主题。我们可以选择覆盖子主题中的所有文件，或者只添加必要的文件以覆盖。如果你刚开始WordPress开发并想添加一些快速代码片段，创建子主题并使用函数文件是理想的解决方案。在开发过程中，子主题应用于较小的实现，如设计更改或在前端屏幕上显示更多/更少的数据。由于我们只使用`functions.php`文件进行代码更改，因此不建议使用此技术来实现高级功能。然而，现代主题功能丰富，因此在子主题中进行高级实现可能会有例外。'
- en: '**Plugins**: As a developer, developing plugins is the most important aspect
    of building custom websites. Plugins allow you to build independent and extendable
    solutions. Usually, it''s a good practice to add any customization into a separate
    plugin or a site-specific common plugin based on its scope. You can create plugins
    to customize existing WordPress backend and frontend features, theme functionality,
    as well as developing completely new features beyond WordPress''s built-in modules.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件**：作为开发者，开发插件是构建自定义网站最重要的方面。插件允许你构建独立和可扩展的解决方案。通常，将任何定制添加到单独的插件或基于其范围的特定站点通用插件中是一个好习惯。你可以创建插件来自定义现有的WordPress后端和前端功能、主题功能，以及开发超出WordPress内置模块的完全新功能。'
- en: '**Addons**: Even though we call these addons, they are a plugin that extends
    the features of another plugin. In WordPress development, we are not going to
    build everything from scratch as there is a huge free plugin repository and thousands
    of premium plugins for doing all kinds of things. Most of these existing plugins
    are not going to align perfectly to our requirements. Therefore, we need a way
    to customize the features of such plugins without losing the changes on plugin
    updates. Addons extend the features of plugins by using actions, filters, and
    APIs provided by the plugin.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件扩展**：尽管我们称之为插件扩展，但它们是扩展另一个插件功能的插件。在WordPress开发中，我们不会从头开始构建一切，因为有一个庞大的免费插件库和数千个付费插件可以完成各种任务。大多数这些现有插件可能无法完美地满足我们的需求。因此，我们需要一种方法来定制这些插件的功能，而不会在插件更新时丢失更改。插件扩展通过使用插件提供的动作、过滤器和API来实现。'
- en: These are the main components and files for developing your own solutions in
    WordPress. Now, we need to shift focus to major areas involved in development
    and how they fit into WordPress. Let's review the use of existing features in
    development as well as custom build features.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是开发自己的WordPress解决方案的主要组件和文件。现在，我们需要将重点转移到开发中涉及的主要领域以及它们如何适应WordPress。让我们回顾一下在开发中现有功能的用法以及自定义构建功能的用法。
- en: Posts, pages, and custom post type management
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子、页面和自定义帖子类型管理
- en: Since its inception, WordPress was used as a basic CMS with the primary focus
    on blogging. After so many years, posts and pages are still the main aspect of
    WordPress, with the addition of custom post types. The primary feature of many
    sites is the management of posts. So, you need to master each and every aspect
    of post creation, editing, displaying, and managing additional data. With the
    arrival of custom post types, developers can match many of the user data capturing
    application requirements. Since the basic features such as creating, editing,
    displaying, and listing are inbuilt with custom post types, developers can focus
    on extending these features at a rapid pace.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 自WordPress诞生以来，它一直被用作以博客为主的CMS。经过这么多年，帖子页面仍然是WordPress的主要方面，加上自定义帖子类型。许多网站的主要功能是帖子管理。因此，你需要掌握帖子创建、编辑、显示和管理附加数据的各个方面。随着自定义帖子类型的出现，开发者可以满足许多用户数据捕获应用的需求。由于基本功能如创建、编辑、显示和列表都内置在自定义帖子类型中，开发者可以快速扩展这些功能。
- en: Many large-scale applications such as event management systems, online shops,
    realestate sites, and job management sites are modeled using custom post types,
    and hence it's a primary feature in WordPress development.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多大型应用程序，如活动管理系统、在线商店、房地产网站和职位管理网站，都是使用自定义帖子类型建模的，因此它是WordPress开发中的一个主要功能。
- en: User management
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户管理
- en: This is another built-in module with comprehensive functionality for user data,
    access levels, and permissions. You may find the need for registered members in
    many modern applications and sites. So, you can use the features of existing user
    modules to handle basic user data and permissions, while developing advanced features
    such as frontend login, registration, and profile management with the extension
    of core features.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这又是一个具有全面功能，用于用户数据、访问级别和权限的内置模块。在许多现代应用程序和网站上，你可能需要注册成员。因此，你可以使用现有用户模块的功能来处理基本用户数据和权限，同时通过扩展核心功能来开发前端登录、注册和资料管理的高级功能。
- en: Similar to custom post types, you will find many applications with one of the
    primary features as user management. Forums, online student management systems,
    and CRMs are some of the examples of high-level user management applications with
    WordPress.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与自定义帖子类型类似，你会发现许多应用程序的主要功能之一是用户管理。论坛、在线学生管理系统和CRM是WordPress中一些高级用户管理应用程序的例子。
- en: Form data management
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单数据管理
- en: The process of capturing, processing, and displaying user data is the primary
    feature of many websites. We already discussed the use of custom post types for
    simplifying the data modeling process. However, inbuilt custom post type features
    are only available in the backend. Form management is essential for capturing
    the user data to the custom post types from the frontend. There are certain limitations
    that force us to use form management from scratch without using custom post types
    on some occasions. Such limitations include the use of existing database tables,
    hooks, and built-in templates in custom post types.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获、处理和显示用户数据的过程是许多网站的主要特征。我们之前已经讨论了使用自定义帖子类型来简化数据建模过程。然而，内置的自定义帖子类型功能仅限于后端。从前端捕获用户数据到自定义帖子类型，表单管理是必不可少的。在某些情况下，由于某些限制，我们不得不从头开始使用表单管理，而不使用自定义帖子类型。这些限制包括使用现有的数据库表、钩子和自定义帖子类型中的内置模板。
- en: We can add forms using theme templates, shortcodes, or existing hooks. Modern
    JavaScript libraries will be used to process them while using custom database
    tables to enhance flexibility. So, this is another essential skill in WordPress
    development.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用主题模板、短代码或现有的钩子来添加表单。在处理这些表单时，将使用现代JavaScript库，同时使用自定义数据库表来增强灵活性。因此，这是WordPress开发中另一项基本技能。
- en: Building custom layouts and extending theme layouts
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义布局和扩展主题布局
- en: Each WordPress site or application is built around a theme and set of plugins.
    In general, most people prefer to use a high-quality existing theme, while some
    of them require a complete theme built for them from scratch. Regardless of these
    preferences, you need to be skilled in theme development, in order to cater to
    modern trends. Widget-based dynamic screens, responsive layouts, and dynamic content
    displays based on user preferences are some of the modern trends used in themes.
    The most common form of development is the customization of existing theme layouts
    and building new post/page templates.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个WordPress网站或应用程序都是围绕一个主题和一系列插件构建的。一般来说，大多数人更喜欢使用高质量的现有主题，而有些人则需要从头开始为他们构建一个完整的主题。无论这些偏好如何，你需要具备主题开发技能，以适应现代趋势。基于小部件的动态屏幕、响应式布局以及基于用户偏好的动态内容显示是主题中使用的现代趋势之一。最常见的发展形式是自定义现有主题布局和构建新的帖子/页面模板。
- en: Modern applications may also require you to add complex features into the theme
    instead of separating them into plugins. So, you need to have hands-on experience
    in theme files as well as common theme hooks for building advanced user interfaces.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用程序可能还需要你在主题中添加复杂功能，而不是将它们分离成插件。因此，你需要具备处理主题文件以及常见主题钩子的实际经验，以构建高级用户界面。
- en: These are some of the frequently involved areas in WordPress development, and
    hence you need to be familiar in order to deliver rapid solutions. Apart from
    these areas, you can extend most WordPress features using existing hooks, as well
    as build custom features such as APIs, integration of third-party UI components,
    and so on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 WordPress 开发中经常涉及的一些领域，因此你需要熟悉这些领域，以便能够快速提供解决方案。除了这些领域之外，你还可以使用现有的钩子扩展大多数
    WordPress 功能，以及构建自定义功能，如 API、集成第三方 UI 组件等。
- en: Setting up the development environment
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: 'In order to get started with WordPress development, you will need a working
    development environment that supports WordPress. So, we need to focus on the essential
    steps for building a development environment, such as the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始 WordPress 开发，你需要一个支持 WordPress 的工作开发环境。因此，我们需要关注构建开发环境的必要步骤，如下所示：
- en: Installing a development stack that supports PHP, Apache, and MySQL or Maria
    DB
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装支持 PHP、Apache 和 MySQL 或 Maria DB 的开发栈
- en: Installing and configuring WordPress
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 WordPress
- en: Setting up web browsers and code editors
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置网络浏览器和代码编辑器
- en: Let's take a quick look at each of these options for building the ideal development
    environment for WordPress.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看每个选项，以构建理想的 WordPress 开发环境。
- en: Installing the development stack
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装开发栈
- en: The most basic requirements for running WordPress include PHP, Apache server,
    and a MySQL database. So, we need to either install these components from scratch
    or use existing tools such as WAMP, XAMPP, or MAMP. Since this book is about a
    quick start to WordPress development, we are going to use existing tools without
    wasting time on manual installation. You can choose the tool depending on your
    operating system. For this book, we are going to use the WAMP server on the Windows
    platform.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 WordPress 的最基本要求包括 PHP、Apache 服务器和 MySQL 数据库。因此，我们需要从头开始安装这些组件，或者使用现有的工具，如
    WAMP、XAMPP 或 MAMP。由于本书是关于 WordPress 开发的快速入门，我们将使用现有的工具，而不浪费时间去手动安装。你可以根据你的操作系统选择工具。对于本书，我们将在
    Windows 平台上使用 WAMP 服务器。
- en: The WAMP server offers a built-in installation process, and all you need is
    to provide the requested inputs while going through several well-defined installation
    screens. Since this is already discussed in several online resources, we are not
    going to explain the installation process here. You can refer to [http://www.wampserver.com/en/](http://www.wampserver.com/en/)
    for instructions on setting up WAMP.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: WAMP 服务器提供了一个内置的安装过程，你只需要在通过几个定义良好的安装屏幕时提供所需输入即可。由于这已经在多个在线资源中讨论过，我们在这里不会解释安装过程。你可以参考
    [http://www.wampserver.com/en/](http://www.wampserver.com/en/) 了解设置 WAMP 的说明。
- en: Installing and configuring WordPress
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 WordPress
- en: Once the development stack is installed, we can move to the WordPress installation
    process. WordPress offers one of the simplest automated processes for installing
    a software framework. The complete installation process takes no more than 5-6
    steps and a few minutes. Since it's already documented comprehensively in the
    WordPress codex, we are not going to waste time explaining it from scratch. You
    can refer to [https://codex.wordpress.org/Installing_WordPress#Detailed_Instructions](https://codex.wordpress.org/Installing_WordPress#Detailed_Instructions)
    for the complete installation process.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了开发栈，我们就可以进入 WordPress 安装过程。WordPress 提供了安装软件框架的最简单自动化过程之一。完整的安装过程不超过 5-6
    步，只需几分钟。由于它已经在 WordPress 代码库中得到了全面记录，我们不会浪费时间从头开始解释。你可以参考 [https://codex.wordpress.org/Installing_WordPress#Detailed_Instructions](https://codex.wordpress.org/Installing_WordPress#Detailed_Instructions)
    了解完整的安装过程。
- en: Even though installation is a simple process, configuration might vary based
    on your requirements as well as different environments. Therefore, we are going
    to discuss the configuration in detail in the upcoming sections.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管安装过程很简单，但配置可能会根据你的要求和不同的环境而有所不同。因此，我们将在接下来的章节中详细讨论配置。
- en: Setting up web browsers and code editors
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置网络浏览器和代码编辑器
- en: As a developer, you should already have at least two browsers installed on your
    system. WordPress is frequently updated with modern versions of libraries and
    trends, such as responsive design. So, you need to make sure that the available
    browsers are updated to the latest versions. Also, you may have to install all
    popular browsers such as Chrome, Firefox, Opera, Safari, and Internet Explorer
    to adhere to browser compatibility.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，您应该在您的系统上安装至少两个浏览器。WordPress经常更新到现代库和趋势的现代版本，如响应式设计。因此，您需要确保可用的浏览器已更新到最新版本。此外，您可能还需要安装所有流行的浏览器，如Chrome、Firefox、Opera、Safari和Internet
    Explorer，以符合浏览器兼容性。
- en: 'A code editor is another important aspect of development, where developers
    need to choose one that favors their personal interests. Some popular code editors
    include Sublime Text, Brackets, Textmate, and Notepad++. When choosing a code
    editor, you need to look for essential features, such as the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器是开发的重要方面之一，开发者需要选择一个符合他们个人兴趣的工具。一些流行的代码编辑器包括Sublime Text、Brackets、Textmate和Notepad++。在选择代码编辑器时，您需要寻找以下基本功能：
- en: Supported programming languages
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的编程语言
- en: Syntax highlighting and code readability
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法高亮和代码可读性
- en: Autocompletion
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动完成
- en: Simplified indentation and formatting
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的缩进和格式化
- en: Version management
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本管理
- en: File/folder search and replacement
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件/文件夹搜索和替换
- en: Many of these editors are fully featured solutions and hence all these features
    are available by default. In such cases, you can make the decision based on your
    personal preferences. At this point, our development environment is ready with
    the most common tools for getting started.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些编辑器都是功能齐全的解决方案，因此所有这些功能都是默认可用的。在这种情况下，您可以根据个人偏好做出决定。到此，我们的开发环境已经准备好，配备了启动所需的常见工具。
- en: Preparing development tools
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备开发工具
- en: Even though we can start the development right away, it's important to have
    the necessary tools that make our tasks easier as developers, while saving precious
    time. You can find hundreds of developer tools created to test and debug the code
    and help you pinpoint the issues in your implementations. Here, we are going to
    look at some of the most essential tools to support your development.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以立即开始开发，但拥有使我们的任务更容易作为开发者的必要工具，同时节省宝贵的时间，这一点很重要。您可以在创建用于测试和调试代码以及帮助您定位实现中问题的数百个开发者工具中找到。在这里，我们将探讨一些最必要的工具来支持您的开发。
- en: Client-side monitoring with browser development tools
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用浏览器开发工具进行客户端监控
- en: 'There was a time when we had to install different extensions to use development
    tools in different browsers. Now, development tools have become the norm in the
    latest versions of all modern browsers. These tools provide a wide range of facilities
    to debug your code. The following screenshot previews the developer tools section
    of the Chrome browser:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经我们不得不安装不同的扩展来在不同的浏览器中使用开发工具。现在，开发工具已成为所有现代浏览器最新版本的标准。这些工具提供了广泛的调试代码的便利设施。以下截图预览了Chrome浏览器的开发者工具部分：
- en: '![](img/e4eb7fe2-21d1-4474-a7cf-5ab2b2ac2ebf.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4eb7fe2-21d1-4474-a7cf-5ab2b2ac2ebf.png)'
- en: The preceding screenshot previews the Console tab, where you will see errors,
    notices, and information related to user requests. This tab simplifies the process
    of tracking and fixing errors in your client-side coding. We can also use other
    tabs such as Sources, Network, Performance, Security to track AJAX requests, file
    loading precedence, memory, and bandwidth usage, along with possible security
    risks.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图预览了控制台标签页，在这里您将看到与用户请求相关的错误、通知和信息。此标签页简化了跟踪和修复客户端编码中错误的过程。我们还可以使用其他标签页，如“资源”、“网络”、“性能”、“安全”来跟踪AJAX请求、文件加载优先级、内存和带宽使用，以及可能的安全风险。
- en: '"AJAX is a short term for Asynchronous JavaScript and XML. AJAX is a set of
    web development techniques using many web technologies on the client side to create
    asynchronous web applications. With Ajax, web applications can send and retrieve
    data from a server asynchronously (in the background) without interfering with
    the display and behavior of the existing page."'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “AJAX是异步JavaScript和XML的缩写。AJAX是一套使用许多客户端Web技术来创建异步Web应用的Web开发技术。使用Ajax，Web应用可以在不干扰现有页面显示和行为的情况下，异步（在后台）从服务器发送和检索数据。”
- en: – Wikipedia
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: – 维基百科
- en: Other browsers provide built-in development tools with similar features. The
    Firefox browser consists of Inspector,Console, Debugger, Style Editor, Performance,
    Memory, Network, and Storage tabs. Internet Explorer consists of DOM Explorer,
    Console, Debugger, Network, UI Responsiveness, Profiler, and Memory tabs. The
    main feature set is consistent across all browsers. As a developer, you should
    use browser tools at least for simple tasks, such as monitoring errors, inspecting
    HTML tags, tracking AJAX requests, and testing CSS styles.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其他浏览器提供了具有类似功能的内置开发工具。Firefox浏览器包括Inspector、Console、Debugger、Style Editor、Performance、Memory、Network和Storage标签页。Internet
    Explorer包括DOM Explorer、Console、Debugger、Network、UI Responsiveness、Profiler和Memory标签页。主要功能集在所有浏览器中都是一致的。作为开发者，您至少应该使用浏览器工具来完成一些简单任务，例如监控错误、检查HTML标签、跟踪AJAX请求和测试CSS样式。
- en: Server-side monitoring with WordPress plugins
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WordPress插件进行服务器端监控
- en: The WordPress plugin repository provides quite a few plugins to help developers
    track errors, performance issues, styles used in requests, executed hooks, loaded
    scripts, and various kind of other useful features. It's up to you to choose the
    number of plugins to use, and which plugins to use. In this section, we are going
    to look at some of the most popular plugins for debugging and testing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress插件库提供了相当多的插件来帮助开发者跟踪错误、性能问题、请求中使用的样式、执行的钩子、加载的脚本以及各种其他有用的功能。选择使用多少插件以及使用哪些插件取决于您。在本节中，我们将探讨一些最受欢迎的调试和测试插件。
- en: Query Monitor
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询监控
- en: This is the most widely used plugin among the recently updated plugins in the
    debug category. The primary functionality of this plugin is to monitor the database
    queries in user requests and help you optimize them. We use many plugins to build
    a WordPress site, and hence each user request may execute a large number of queries.
    In most scenarios, a considerable amount of queries are not relevant to the user
    request and executed due to low quality coding from plugin developers. This plugin
    allows you to track queries by plugin, making it easier to identify the plugins
    responsible for executing a large number of queries, as well as unnecessary ones.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是调试类别中最近更新插件中最广泛使用的插件。此插件的主要功能是监控用户请求中的数据库查询，并帮助您优化它们。我们使用许多插件来构建WordPress网站，因此每个用户请求可能执行大量查询。在大多数情况下，相当一部分查询与用户请求无关，是由于插件开发者低质量的编码而执行。此插件允许您按插件跟踪查询，这使得识别负责执行大量查询以及不必要的插件的插件变得更容易。
- en: 'The following screenshot previews the use of **Query Monitor** to track the
    queries executed by the WordPress core and individual plugins:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图预览了使用**Query Monitor**跟踪WordPress核心和单个插件执行的查询：
- en: '![](img/54f5e3d3-aec5-4e8a-91de-a1db73b6213b.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Query Monitor使用预览](img/54f5e3d3-aec5-4e8a-91de-a1db73b6213b.png)'
- en: Apart from monitoring queries, you can also use this plugin to check hooks,
    scripts, and styles loaded in the current user request. Query Monitor is a must-use
    plugin for WordPress. You can find more details about Query Monitor plugin at
    [https://wordpress.org/plugins/query-monitor/](https://wordpress.org/plugins/query-monitor/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除了监控查询外，您还可以使用此插件来检查当前用户请求中加载的钩子、脚本和样式。Query Monitor是WordPress的必备插件。您可以在[https://wordpress.org/plugins/query-monitor/](https://wordpress.org/plugins/query-monitor/)找到有关Query
    Monitor插件的更多详细信息。
- en: Debug This
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试此插件
- en: This is one of the more recently created plugins to support developers. Unlike
    **Query Monitor**, this plugin doesn't have a primary feature. Instead, it offers
    a wide range of features for tracking all types of features in WordPress. You
    can track shortcodes, post types, PHP class/function usage, media attachments,
    and many other things, along with the features we already discussed in Query Monitor.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最近创建的用于支持开发者的插件之一。与**Query Monitor**不同，此插件没有主要功能。相反，它为跟踪WordPress中所有类型的特性提供了广泛的功能。您可以跟踪短代码、文章类型、PHP类/函数使用、媒体附件以及许多其他内容，包括我们在Query
    Monitor中已经讨论过的特性。
- en: 'The following screenshot previews the use of Debug This with the list of available
    features:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图预览了使用Debug This的可用功能列表：
- en: '![](img/6ec8bed1-6b0f-4a90-99e8-1f2ffcfc458d.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![调试和测试插件预览](img/6ec8bed1-6b0f-4a90-99e8-1f2ffcfc458d.png)'
- en: As you may notice, this is an extremely useful tool for developers. The only
    drawback is the output of information as plain arrays, making it difficult to
    read. Even though it lacks the proper organization of information using user-friendly
    screens, you can resolve complex issues without using your own `var_dump` inside
    the code. You can find more details about the Debug This plugin at [https://wordpress.org/plugins/debug-this/](https://wordpress.org/plugins/debug-this/).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能注意到的，这是一个对开发者极其有用的工具。唯一的缺点是信息以纯数组的形式输出，这使得阅读变得困难。尽管它缺乏使用用户友好的屏幕对信息进行适当组织，但您可以在不使用代码中的
    `var_dump` 的情况下解决复杂问题。您可以在 [https://wordpress.org/plugins/debug-this/](https://wordpress.org/plugins/debug-this/)
    找到有关“调试此”插件的更多详细信息。
- en: 'Apart from these two plugins, there are more useful plugins to help developers
    write quality code and save time with error handling and optimization. The following
    is a list of such plugins to be used in development:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个插件之外，还有更多有用的插件可以帮助开发者编写高质量的代码，并通过错误处理和优化节省时间。以下是在开发中使用的此类插件列表：
- en: '**What The File** ([https://wordpress.org/plugins/what-the-file/](https://wordpress.org/plugins/what-the-file/)):
    This plugin allows you to quickly track the templates and template parts used
    in the current user request. It also supports BuddyPress-based themes.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件内容** ([https://wordpress.org/plugins/what-the-file/](https://wordpress.org/plugins/what-the-file/)):
    此插件允许您快速追踪当前用户请求中使用的模板和模板部分。它还支持基于 BuddyPress 的主题。'
- en: '**Debug Bar** ([https://wordpress.org/plugins/debug-bar/](https://wordpress.org/plugins/debug-bar/)):
    This plugin is similar to the Debug This plugin. However, it provides fewer features
    and a better user interface.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试栏** ([https://wordpress.org/plugins/debug-bar/](https://wordpress.org/plugins/debug-bar/)):
    此插件类似于“调试此”插件。然而，它提供了更少的功能和更好的用户界面。'
- en: We looked at most popular testing and debugging plugins in the WordPress plugin
    repository. There are premium plugins and online services for further improving
    the development process. You can test these plugins and see which ones fit into
    your development environment.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了 WordPress 插件库中最受欢迎的测试和调试插件。有付费插件和在线服务可以进一步改进开发过程。您可以测试这些插件，看看哪些适合您的开发环境。
- en: Working with the configuration file
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件的使用
- en: 'WordPress uses a configuration file called `wp-config.php`, located inside
    the root directory of your WordPress installation. In the preceding section, we
    went through the installation process, and this file was generated automatically
    based on the specified information. In order to use the advanced features of WordPress,
    as well as making manual modifications based on system changes, we will explain
    this file thoroughly. Let''s take a quick look at the initial contents of this
    file using the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 使用一个名为 `wp-config.php` 的配置文件，位于您 WordPress 安装根目录内。在前面的部分，我们介绍了安装过程，此文件根据指定信息自动生成。为了使用
    WordPress 的高级功能，以及根据系统更改进行手动修改，我们将详细解释此文件。让我们快速查看此文件的初始内容，如下所示：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first section of the file handles database configurations for your site.
    As you can see, database details are already added based on the inputs you provided
    in the installation process. You need to modify this section manually when you
    move the site from a local environment to a live environment, or when you make
    changes in database details such as username and password. Once database details
    are modified and saved, it will immediately impact the loading of your site.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的第一部分处理您网站的数据库配置。如您所见，数据库详细信息已根据您在安装过程中提供的输入自动添加。当您将网站从本地环境迁移到生产环境，或者更改数据库详细信息（如用户名和密码）时，您需要手动修改此部分。一旦数据库详细信息被修改并保存，它将立即影响您网站的加载。
- en: The next section defines the WordPress security keys. These keys are automatically
    generated on WordPress installation. In scenarios where you don't have the security
    keys, you can go to [https://api.wordpress.org/secret-key/1.1/salt/](https://api.wordpress.org/secret-key/1.1/salt/)
    and generate a new set of keys. This section consists of four keys and four salts
    for your website. These keys are used to secure the cookies for your users. You
    don't have to know the meaning of each key or remember the keys. WordPress will
    use these keys to generate hash values of cookie names as well as cookie values,
    making it difficult to hack your authentication details. No matter how many security
    precautions we take, there is a chance of your site getting hacked due to the
    open source nature of WordPress and use of third-party plugins. In such situations,
    you can regenerate and add these keys to the config file. This will invalidate
    all existing cookies and hence all users will have to log in again.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分定义了WordPress的安全密钥。这些密钥在WordPress安装时自动生成。在没有安全密钥的情况下，您可以访问[https://api.wordpress.org/secret-key/1.1/salt/](https://api.wordpress.org/secret-key/1.1/salt/)并生成一组新的密钥。本节包含四个密钥和四个盐值，用于您的网站。这些密钥用于保护用户的cookies。您不需要了解每个密钥的含义或记住这些密钥。WordPress将使用这些密钥生成cookie名称以及cookie值的哈希值，这使得黑客攻击您的认证信息变得困难。尽管我们采取了多少安全预防措施，但由于WordPress的开源性质和第三方插件的使用，您的网站仍然有可能被黑客攻击。在这种情况下，您可以重新生成并添加这些密钥到配置文件中。这将使所有现有的cookies失效，因此所有用户都必须重新登录。
- en: The next two lines define the table prefix and the debug mode. The prefix is
    configured by the input you provide in the installation process. It's recommended
    to change the prefix to anything other than `wp`, to improve security. By default,
    the debug mode is set to `FALSE` and hence you won't see any PHP errors on your
    site. In a development environment, you should change this value to `TRUE`, in
    order to identify the errors in code. Once development is completed, you should
    change it back to `FALSE` before uploading the file to a live server. The final
    few lines define the file path, and load the settings file.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下两行定义了表前缀和调试模式。前缀是通过安装过程中提供的输入配置的。建议将前缀更改为除`wp`之外的其他任何内容，以提高安全性。默认情况下，调试模式设置为`FALSE`，因此您不会在网站上看到任何PHP错误。在开发环境中，您应该将此值更改为`TRUE`，以便识别代码中的错误。一旦开发完成，您应该在将文件上传到实时服务器之前将其改回`FALSE`。最后几行定义了文件路径，并加载设置文件。
- en: This is the most basic version of the `wp-config.php` file, and it's adequate
    for handling basic WordPress sites.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`wp-config.php`文件的最基本版本，它足以处理基本的WordPress网站。
- en: An overview of advanced configurations
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级配置概述
- en: As a developer, you will have to build from simple WordPress blogs to fully
    functional web applications. So, advanced configurations become important for
    security, advanced features, and the performance of applications. Let's take a
    quick look at how you can modify the configuration file using other configuration
    options.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，您将需要从简单的WordPress博客构建到完全功能性的网络应用程序。因此，高级配置对于安全性、高级功能和应用程序的性能变得非常重要。让我们快速了解一下您如何使用其他配置选项修改配置文件。
- en: Securing plugins and upload directories
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护插件和上传目录
- en: Due to the open source nature of WordPress, everyone knows where plugins and
    files are stored in your site. Therefore, the process of hacking or spamming your
    site becomes easier for potential attackers. As a solution, we can move plugin
    and upload directories to a different path using the config file, to increase
    the difficulty of finding paths to attack.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于WordPress的开源性质，每个人都知道插件和文件在您的网站中的存储位置。因此，黑客或垃圾邮件攻击者对您的网站进行攻击的过程变得更容易。作为解决方案，我们可以使用配置文件将插件和上传目录移动到不同的路径，以增加攻击者找到攻击路径的难度。
- en: 'Let''s add more configurations to change the default location of these directories:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加更多配置来更改这些目录的默认位置：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first two lines move the plugin directory from `wp-content/plugins` to the
    `modules` directory in your root directory. Since the path has changed to the
    root directory, it will be difficult for attackers to identify the path. These
    configurations only change the directory. If you already have plugins in the `wp-content/plugins`
    directory, you will have to move them manually to a new directory. The next line
    changes the media upload path from `wp-content/uploads` to the `modules/media`
    directory inside the main installation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行将插件目录从 `wp-content/plugins` 移动到您根目录中的 `modules` 目录。由于路径已更改为根目录，攻击者将难以识别路径。这些配置仅更改目录。如果您已经在
    `wp-content/plugins` 目录中安装了插件，您将不得不手动将它们移动到新目录。下一行将媒体上传路径从 `wp-content/uploads`
    更改为主安装内的 `modules/media` 目录。
- en: The process of moving the theme directory is not straightforward as the path
    is configured relative to the `wp-content` directory. Therefore, you will have
    to change the main path of the `wp-content` directory in situations where you
    want to change the theme directory. You may use these configurations manually,
    or use existing plugins to help secure your site.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将主题目录移动的过程并不简单，因为路径是相对于 `wp-content` 目录配置的。因此，在您想要更改主题目录的情况下，您将不得不更改 `wp-content`
    目录的主路径。您可以手动使用这些配置，或者使用现有的插件来帮助保护您的网站。
- en: Configuring advanced debugging settings
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置高级调试设置
- en: Earlier, we enabled debugging in the development environment by setting `WP_Debug`
    to `TRUE`. There are more settings to control the debugging process and provide
    more information on issues in our code. Let's walk through some of the advanced
    options for developers.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们通过将 `WP_Debug` 设置为 `TRUE` 在开发环境中启用了调试。还有更多设置可以控制调试过程并提供有关我们代码中问题的更多信息。让我们了解一下开发者的一些高级选项。
- en: Script debugging
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本调试
- en: 'In general, conflicts in JavaScript files are a common problem due to the use
    of different script versions in different plugins and themes. Identifying these
    errors is a cumbersome process when using minified versions and concatenated script
    files. Let''s take a look at some of the rules used for resolving these issues:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，由于不同插件和主题中使用不同的脚本版本，JavaScript 文件中的冲突是一个常见问题。当使用压缩版本和合并的脚本文件时，识别这些错误是一个繁琐的过程。让我们看看用于解决这些问题的规则：
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first line enables script debugging by loading the uncompressed file instead
    of the minified version. The second line prevents concatenation of multiple scripts,
    allowing you to track the line of the error. You should use these configuration
    rules when you are experiencing script issues in WordPress core files.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行通过加载未压缩的文件而不是压缩版本来启用脚本调试。第二行防止多个脚本的合并，允许您跟踪错误的行。当您在 WordPress 核心文件中遇到脚本问题时，应使用这些配置规则。
- en: Logging errors and customizing php.ini rules
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录错误和自定义 php.ini 规则
- en: We can either display the coding errors in the browser or log them to a separate
    log file. It's at the preference of the developer, but I think logging the errors
    is the ideal solution for future reference. Also, sometimes we need to change
    the PHP configurations to make our code work. Many hosting servers will not allow
    you to directly edit the `php.ini` file, and hence we can use the `wp-config.php`
    file to override the default settings of the `php.ini` file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在浏览器中显示编码错误或将它们记录到单独的日志文件中。这取决于开发者的偏好，但我觉得记录错误是未来参考的理想解决方案。此外，有时我们需要更改 PHP
    配置以使我们的代码工作。许多托管服务器不允许您直接编辑 `php.ini` 文件，因此我们可以使用 `wp-config.php` 文件来覆盖 `php.ini`
    文件的默认设置。
- en: Some hosting providers don't provide access to change the `php.ini` file, and
    you will have to request modification through server support.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一些托管提供商不提供更改 `php.ini` 文件的访问权限，您将不得不通过服务器支持请求修改。
- en: 'Consider the following configuration rules for error logging with `php.ini`
    modifications:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下配置规则，通过修改 `php.ini` 进行错误日志记录：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, we enable error logging in PHP and disable displaying errors in the browser
    by using the `display_errors` setting. Then, we define the path of the file where
    errors will be logged. You need to create this directory first and provide the
    necessary write permissions before this rule takes effect.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过使用 `display_errors` 设置启用 PHP 错误记录并禁用在浏览器中显示错误。然后，我们定义错误将被记录的文件路径。您需要首先创建此目录，并在此规则生效之前提供必要的写入权限。
- en: In this section, we had a brief overview of some of the most basic and advanced
    configurations in WordPress development. There are many other settings to help
    developers, as well as control features. You can take a look at the available
    configurations and their use in the WordPress codex at [https://codex.wordpress.org/Editing_wp-config.php](https://codex.wordpress.org/Editing_wp-config.php).
    Now, we have the complete setup to begin development tasks on top of WordPress.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们简要概述了WordPress开发中最基本和高级的配置。还有很多其他设置可以帮助开发者，以及控制功能。您可以在WordPress手册中查看可用的配置及其用法，网址为[https://codex.wordpress.org/Editing_wp-config.php](https://codex.wordpress.org/Editing_wp-config.php)。现在，我们已经有了完整的设置，可以开始基于WordPress的开发任务。
- en: Understanding the role of the WordPress file and directory structure
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解WordPress文件和目录结构的作用
- en: Beginning WordPress development is not a complex task. It's about making minor
    theme changes, installing and customizing existing plugins, and using the available
    hooks. As you move on, complex requirements come your way with the expectation
    of future-proof solutions. Trying to build such solutions without considering
    future WordPress, plugin, and theme versions can lead to a nightmare. Getting
    used to existing WordPress files/directories and knowing their role is vital in
    developing maintainable solutions. In this section, we are going to look at the
    existing files and directories of a default WordPress installation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 开始WordPress开发并不是一个复杂任务。它涉及对主题进行细微的修改、安装和定制现有插件，以及使用可用的钩子。随着您的进步，您会遇到更复杂的需求，并期望得到未来兼容的解决方案。在不考虑未来WordPress、插件和主题版本的情况下尝试构建这样的解决方案可能会导致噩梦。熟悉现有的WordPress文件/目录及其作用对于开发可维护的解决方案至关重要。在本节中，我们将查看默认WordPress安装中现有的文件和目录。
- en: 'The following is a screenshot of typical files and directories inside your
    WordPress installation:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你WordPress安装中典型文件和目录的截图：
- en: '![](img/50d2bb26-323f-4407-85ca-877138504685.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/50d2bb26-323f-4407-85ca-877138504685.png)'
- en: 'Let''s look at some of the most important files and directories inside WordPress:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看WordPress内部一些最重要的文件和目录：
- en: '`wp-admin`: This is where WordPress stores files related to admin-side functionality.
    The files in this directory are based around the `admin.php` file. Primary functionalities
    of these files include checking admin permission, connecting to the database,
    and loading the admin dashboard features. This directory is upgraded with WordPress
    version updates and hence the content of these files is replaced.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp-admin`：这是WordPress存储与后台功能相关的文件的地方。这个目录中的文件基于`admin.php`文件。这些文件的主要功能包括检查管理员权限、连接到数据库以及加载管理员仪表板功能。这个目录会随着WordPress版本更新而升级，因此这些文件的内容会被替换。'
- en: '`wp-content`: This is where WordPress stores user-uploaded files such as plugins,
    themes, and media files. We can add additional files/directories here without
    being affected by WordPress version updates. So, the content in this directory
    will not be replaced.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp-content`：这是WordPress存储用户上传的文件的地方，如插件、主题和媒体文件。我们可以在不受到WordPress版本更新影响的情况下在这里添加额外的文件/目录。因此，这个目录中的内容不会被替换。'
- en: '`wp-includes`: This is the largest directory in WordPress with over 800 files
    to power the features of the admin dashboard as well as frontend functionality.
    The primary file in this directory is `functions.php`, considered as the main
    WordPress API. This directory is upgraded with WordPress version updates and hence
    the content of these files is  replaced.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp-includes`：这是WordPress中最大的目录，包含超过800个文件，用于提供管理员仪表板以及前端功能。这个目录中的主要文件是`functions.php`，被认为是主要的WordPress
    API。这个目录会随着WordPress版本更新而升级，因此这些文件的内容会被替换。'
- en: '`.htaccess`: This file is where you describe configuration rules for your Apache
    server. By default, it will contain minimal rules. You can manually add configuration
    rules based on your requirements. There are plugins that automatically add the
    necessary configuration rules to this file. This file is used for the configuration
    of WordPress permalinks. Changing the permalink structure from the WordPress settings
    section is the simplest way to track rule changes in this file.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.htaccess`：这个文件是您描述Apache服务器配置规则的地方。默认情况下，它将包含最少的规则。您可以根据需求手动添加配置规则。有一些插件会自动将必要的配置规则添加到这个文件中。这个文件用于WordPress永久链接的配置。从WordPress设置部分更改永久链接结构是跟踪此文件中规则更改的最简单方法。'
- en: '`index.php`: This file is responsible for initializing WordPress based on user
    requests, and serving the response.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.php`：此文件负责根据用户请求初始化WordPress，并提供服务响应。'
- en: '`wp-config.php`: This file is used for all the configurations for your site
    including databases, secret keys, plugins, and theme directory paths. So, it''s
    very important to keep this file as secure as possible. This file is not replaced
    on WordPress version upgrades and hence you can use your own configurations.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp-config.php`：此文件用于网站的配置，包括数据库、密钥、插件和主题目录路径。因此，尽可能保持此文件的安全性非常重要。在WordPress版本升级时，此文件不会被替换，因此你可以使用自己的配置。'
- en: Here, we looked at the most important files and directories involved in development.
    You can also check the comments of other core files to understand their functionality.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们查看涉及开发的最重要文件和目录。你还可以查看其他核心文件的注释，以了解其功能。
- en: How to choose files and directories for development
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何选择开发所需的文件和目录
- en: The process of WordPress development is slightly more challenging compared to
    other PHP frameworks. With any other framework, we choose a specific framework
    version and develop the features for that specific version. It's entirely optional
    to upgrade our solution's future versions of the framework. However, it's the
    opposite with WordPress. We can't stick with a specific WordPress version for
    a long time, especially due to security concerns. Most of you will want to upgrade
    the version as soon as WordPress releases a new version. Therefore, it's important
    to develop solutions that don't break with version upgrades. Basically, we should
    be able to upgrade WordPress without touching any of our code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress开发的流程与其他PHP框架相比稍微更具挑战性。在任何一个其他框架中，我们选择一个特定的框架版本，并为该特定版本开发功能。升级我们解决方案框架的未来版本完全是可选的。然而，与WordPress相反。我们无法长时间坚持使用特定的WordPress版本，尤其是由于安全问题的考虑。你们大多数人都会希望WordPress发布新版本后立即升级版本。因此，开发不因版本升级而中断的解决方案非常重要。基本上，我们应该能够在不触及任何我们的代码的情况下升级WordPress。
- en: So, the first thing you need to understand is where you can place your code
    files and how you can use the core WordPress files/directories in development.
    We discussed the main files and directories inside the WordPress directory in
    the previous section. Let's narrow it down to the files and folders used for custom
    development. Basically, we have to choose files and folders that are not replaced
    by WordPress updates. Among the files and folders we discussed, `wp-content`,
    `wp-config.php`, and `htaccess` are not affected by upgrades. So, our development
    should focus on these files and folders.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你需要首先理解的是你可以将代码文件放在哪里，以及你如何在开发中使用WordPress的核心文件/目录。我们在上一节讨论了WordPress目录内的主要文件和目录。让我们缩小范围，专注于用于自定义开发的文件和文件夹。基本上，我们必须选择不会被WordPress更新所替换的文件和文件夹。在我们讨论的文件和文件夹中，`wp-content`、`wp-config.php`和`htaccess`不受升级的影响。因此，我们的开发应该专注于这些文件和文件夹。
- en: As we mentioned, `wp-content` is the directory where all the user-uploaded files
    are stored. So, we need to add our code files inside this directory. Let's explore
    the contents of this directory to understand where and what kinds of files can
    be created.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，`wp-content`是存储所有用户上传文件的目录。因此，我们需要在这个目录内添加我们的代码文件。让我们探索这个目录的内容，以了解可以创建在哪里以及什么类型的文件。
- en: 'The following is a screenshot of files and folders inside your `wp-content`
    folder:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你`wp-content`文件夹内文件和文件夹的截图：
- en: '![](img/ddd8ba43-48f4-458c-b6e8-b716366cd436.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ddd8ba43-48f4-458c-b6e8-b716366cd436.png)'
- en: 'The preceding screenshot contains both default directories and custom directories
    created based on custom requirements. Let''s have a brief overview of the role
    of each folder:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图包含了默认目录和根据自定义需求创建的自定义目录。让我们简要概述每个文件夹的作用：
- en: '`plugins`: This is where WordPress stores all the plugins required to run your
    site. You will get Akismet Anti-Spam and Hello Dolly plugins on initial installation.
    Afterwards, you can use this directory to add your own plugins as well as install
    existing plugins from other developers. This directory can be considered as the
    heart of WordPress development.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugins`：这是WordPress存储运行网站所需所有插件的地方。在初始安装时，你会获得Akismet反垃圾邮件插件和Hello Dolly插件。之后，你可以使用这个目录添加自己的插件，以及从其他开发者那里安装现有的插件。这个目录可以被认为是WordPress开发的中心。'
- en: '`themes`: This is where WordPress stores all your themes that power the design
    and initial functionality of your site. Initial installation contains a few default
    themes such as **Twenty Seventeen**, **Twenty Sixteen**, and so on. Afterwards,
    you can use this directory to add your own themes as well as install existing
    themes from other developers. Unlike plugins, you can only use one theme from
    this directory at any given time.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`主题`：这是WordPress存储所有主题的地方，这些主题为您的网站提供设计和初始功能。初始安装包含一些默认主题，例如**二十十七**、**二十十六**等。之后，您可以使用此目录添加自己的主题，以及从其他开发者那里安装现有主题。与插件不同，您在任何时候都只能从此目录中使用一个主题。'
- en: '`uploads`: This is where all the user-uploaded files for posts, pages, and
    plugins will be stored. This directory is not created until you upload the first
    file. Usually, all the media files for posts and pages will be stored with a sub-directory
    structure of year/month format. You can create unlimited sub-directories to handle
    files for plugins and themes.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`上传`：这是存储所有用户上传的帖子、页面和插件文件的地方。此目录在您上传第一个文件之前不会创建。通常，帖子和页面的所有媒体文件都将存储在以年/月格式的子目录结构中。您可以为处理插件和主题的文件创建无限多的子目录。'
- en: '`languages`: This directory is not available on initial installation and is
    created when you change the language in WordPress. So, it''s not important for
    the development tasks.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`语言`：此目录在初始安装时不可用，当您在WordPress中更改语言时会创建它。因此，它对开发任务来说并不重要。'
- en: '`mu-plugins`: This directory stores must-use plugins for your site and is not
    available on initial installation. A must-use plugin is a plugin that''s mandatory
    to run the site and hence it''s not possible to deactivate. These plugins are
    automatically enabled on all sites of your WordPress installation. Even though
    these plugins are useful in some scenarios, it''s not ideal to use them due to
    some of the limitations in executing certain hooks. So, we are not considering
    them for the development tasks of this book.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mu-plugins`：此目录存储了网站必须使用的插件，初始安装时不可用。必须使用的插件是运行网站所必需的插件，因此无法停用。这些插件在您的WordPress安装的所有网站上自动启用。尽管在某些情况下这些插件很有用，但由于执行某些钩子时的某些限制，使用它们并不理想。因此，我们不会考虑将它们纳入本书的开发任务中。'
- en: '`upgrade`: This directory is not available by default and is used for storing
    temporary files for WordPress version upgrades. So, it''s important for our development
    tasks.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`升级`：此目录默认不可用，用于存储WordPress版本升级的临时文件。因此，对我们开发任务来说非常重要。'
- en: '`cache and logs`: These are some of the custom directories created by plugins
    or themes to handle certain features. I have used them in this screenshot to explain
    the use of custom folders. You can create such custom folders to handle files
    related to themes or plugins.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`缓存和日志`：这些是一些由插件或主题创建的用于处理某些功能的自定义目录。我在此截图中使用它们来解释自定义文件夹的使用。您可以创建这样的自定义文件夹来处理与主题或插件相关的文件。'
- en: After having a quick overview of files and directories, we can come to the conclusion
    that our primary focus should be on the `plugins`, `themes`, and `uploads` directories
    inside the `wp-content` directory. Using code and media files in these directories
    ensures our solutions are not wiped out by version upgrades.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速浏览了文件和目录之后，我们可以得出结论，我们的主要关注点应该是`wp-content`目录内的`插件`、`主题`和`上传`目录。在这些目录中使用代码和媒体文件确保我们的解决方案不会被版本升级所清除。
- en: A brief overview of WordPress coding standards
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress编码标准的简要概述
- en: In programming, writing working code is not the only responsibility of the developers.
    They are responsible for writing quality code that is extendable for future enhancements,
    as well as making sure the code is easily understandable for other developers.
    This is where coding standards become an important aspect of development. Coding
    standards are a set of rules and conventions specific to a programming language,
    and all developers are expected to follow them to make the code consistent.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，编写可工作的代码并不是开发者唯一的职责。他们还需要负责编写高质量的代码，这些代码可以扩展以供未来的增强，并确保代码对其他开发者易于理解。这就是编码标准成为开发重要方面的地方。编码标准是一套针对特定编程语言的规则和约定，所有开发者都应遵循这些标准以使代码保持一致性。
- en: I assume that you are familiar with PHP coding standards and ready to develop
    WordPress with that experience. However, WordPress itself has a set of coding
    standards and some of these rules are slightly different to PHP standards. The
    coding standards are currently divided into four sections, called PHP, HTML, CSS,
    and JavaScript. As a developer, you need to be familiar with WordPress coding
    standards, especially when you are developing themes and plugins for the WordPress
    repository.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你们熟悉PHP编码标准，并准备好利用这些经验来开发WordPress。然而，WordPress本身有一套编码标准，其中一些规则与PHP标准略有不同。编码标准目前分为四个部分，称为PHP、HTML、CSS和JavaScript。作为一名开发者，你需要熟悉WordPress编码标准，尤其是在你为WordPress仓库开发主题和插件时。
- en: 'Let''s take a look at some of the main PHP coding standards used in WordPress:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看WordPress中使用的一些主要PHP编码标准：
- en: '**Single quotes and double quotes**: PHP processes single quotes quicker than
    double quotes since the parser doesn''t have to detect and execute any variables.
    That''s why it''s better to use single quotes for strings that don''t have any
    evaluations.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单引号和双引号**：PHP处理单引号比双引号快，因为解析器不需要检测和执行任何变量。这就是为什么对于没有评估的字符串，最好使用单引号。'
- en: '**Indentation**: You should use tabs instead of spaces for indenting the code.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩进**：你应该使用制表符而不是空格来缩进代码。'
- en: '**Opening and closing brackets**: You should always use opening and closing
    brackets even when it''s not necessary for single line evaluations.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**括号的开闭**：即使对于单行评估不是必需的，你也应该始终使用开闭括号。'
- en: '**Using spaces**: WordPress recommends putting spaces after commas, and on
    both sides of logical, comparison, string, and assignment operators.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用空格**：WordPress建议在逗号后面，以及在逻辑、比较、字符串和赋值运算符的两侧放置空格。'
- en: '**Naming conventions**: You should always use lowercase letters and underscores
    for naming variables, functions, actions, filters, and so on. The `camelCase`
    method is not recommended in WordPress coding standards.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名约定**：你应该始终使用小写字母和下划线来命名变量、函数、动作、过滤器等。WordPress编码标准中不推荐使用`camelCase`方法。'
- en: '**Dynamic hooks**: Hooks are unique to WordPress and hence the guidelines suggest
    using interpolation by wrapping the variable in curly brackets, instead of using
    concatenation.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态钩子**：钩子是WordPress特有的，因此指南建议通过将变量括在花括号中来使用插值，而不是使用连接。'
- en: These are some of the common coding standards for WordPress, and you can find
    the complete set of standards, including CSS, JavaScript, and HTML, at [https://codex.wordpress.org/WordPress_Coding_Standards](https://codex.wordpress.org/WordPress_Coding_Standards).
    Those developers who are familiar with pure PHP coding will notice the slight
    changes in WordPress standards, such as using lots of spaces and not using camel
    case for functions. So, it's a challenge even for experienced developers to come
    out of your comfort zone and write code the WordPress way.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是WordPress中的一些常见编码标准，你可以在[https://codex.wordpress.org/WordPress_Coding_Standards](https://codex.wordpress.org/WordPress_Coding_Standards)找到完整的标准集，包括CSS、JavaScript和HTML。熟悉纯PHP编码的开发者会注意到WordPress标准中的一些细微变化，例如使用大量空格，并且函数不使用驼峰命名法。因此，即使是经验丰富的开发者，要想跳出舒适区，以WordPress的方式编写代码，也是一个挑战。
- en: The preceding section illustrated the main PHP coding standards. Most of you
    should have a general idea of these standards, as you have already worked with
    PHP. However, there are WordPress-specific coding styles/conventions due to hook-based
    architecture. Many of you may not be aware of these conventions, which are essential
    for building themes and plugins that don't conflict with others.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节介绍了主要的PHP编码标准。你们大多数人应该对这些标准有一个大致的了解，因为你们已经使用过PHP。然而，由于基于钩子的架构，WordPress有一些特定的编码风格/约定。你们中许多人可能没有意识到这些约定，但这些约定对于构建不与其他冲突的主题和插件至关重要。
- en: 'Let''s have a quick overview of some of these conventions, which will be discussed
    in detail throughout the book:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速概述一下这些约定，这些将在本书的后续章节中详细讨论：
- en: '**Loading scripts and styles**: Usually, we can load scripts and styles anywhere
    in an HTML page by using `<script>` and `<link>` tags. WordPress uses built-in
    PHP functions to load scripts and styles. Therefore, it''s recommended that you
    load these files only within an action called `wp_enqueue_scripts`. Loading these
    files outside this action could result in conflicts with WordPress core features
    as well as other `plugins` or `themes`.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载脚本和样式**：通常，我们可以通过使用`<script>`和`<link>`标签在任何HTML页面中加载脚本和样式。WordPress使用内置的PHP函数来加载脚本和样式。因此，建议您只在这些被称为`wp_enqueue_scripts`的操作中加载这些文件。在这些操作之外加载这些文件可能会导致与WordPress核心功能以及其他`插件`或`主题`的冲突。'
- en: '**Loading third-party libraries**: Libraries such as **jQuery**, **Underscore**,
    **and** **Backbone.js** are used frequently in modern web development. Usually,
    developers have the option to include these libraries within their code files
    or load them from a CDN for faster performance. This technique is not feasible
    in WordPress as many plugins from different developers are involved. Therefore,
    we need to load one common version of the library to avoid conflicts in code.
    So, we have to use the library version that comes built-in with WordPress.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载第三方库**：如**jQuery**、**Underscore**、**以及** **Backbone.js**这样的库在现代Web开发中经常被使用。通常，开发者有选择在他们的代码文件中包含这些库或从CDN加载它们以获得更快性能的选项。在WordPress中，由于涉及许多不同开发者的插件，这种方法是不可行的。因此，我们需要加载库的一个通用版本以避免代码冲突。所以，我们必须使用与WordPress内置的库版本。'
- en: '**Using proper events for execution**: In pure PHP programming, we can execute
    code anywhere and anytime based on our preferences. WordPress uses an event-driven
    architecture with hooks, and hence code is executed through events in a predefined
    manner. Unless we use the correct events, our code is going to conflict with code
    from other. For example, we need to access `$_POST` variables within or after
    an `init` hook. Trying to access this data before the necessary event could lead
    to errors in your code.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用适当的执行事件**：在纯PHP编程中，我们可以根据我们的喜好在任何地方和任何时候执行代码。WordPress使用基于钩子的事件驱动架构，因此代码以预定义的方式通过事件执行。除非我们使用正确的事件，否则我们的代码可能会与其他代码冲突。例如，我们需要在`init`钩子内或之后访问`$_POST`变量。在必要的事件之前尝试访问这些数据可能会导致代码中出错。'
- en: We had a brief introduction to the coding standards and conventions needed to
    get started with WordPress development. Often, you will find it sufficient for
    development projects for specific clients. However, you will sometimes need further
    knowledge, especially on event-based conventions for plugin and theme development.
    We will cover the necessary coding conventions throughout the upcoming chapters.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要介绍了开始WordPress开发所需的编码标准和约定。通常，对于特定客户的开发项目来说，这已经足够了。然而，有时您可能需要进一步的知识，尤其是在插件和主题开发的事件驱动约定方面。我们将在接下来的章节中介绍必要的编码约定。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The goal of this chapter was to get the environment ready and understand the
    prerequisites for complex development tasks. We explored the techniques for integrating
    our code into WordPress, as well as identifying the most used modules in development.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是准备好环境并了解复杂开发任务的前提条件。我们探讨了将我们的代码集成到WordPress中的技术，以及确定开发中最常用的模块。
- en: We had a brief overview of the installation and configuration of the development
    environment, while identifying the necessary tools for simplifying our tasks.
    Finally, we went through the WordPress file and directory structure to understand
    how our solutions can be provided in a future-proof manner.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要概述了开发环境的安装和配置，同时确定了简化我们任务的必要工具。最后，我们了解了WordPress文件和目录结构，以便我们的解决方案能够以未来兼容的方式提供。
- en: In [Chapter 2](3e88326a-c8fe-4943-ae81-4ff69e8b865e.xhtml), *Managing Database
    Structure, Storage, and Retrieval*, we will be exploring the existing WordPress
    database structure and its use, while discussing the practical uses of custom
    database tables.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](3e88326a-c8fe-4943-ae81-4ff69e8b865e.xhtml)“管理数据库结构、存储和检索”中，我们将探讨现有的WordPress数据库结构及其使用，同时讨论自定义数据库表的实际应用。
