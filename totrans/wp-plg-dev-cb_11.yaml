- en: Enabling Plugin Internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about plugin localization through the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the WordPress language configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapting default user settings for translation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making admin page code ready for translation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying shortcode output for translation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating text strings using Poedit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a language file in the plugin initialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress is a worldwide phenomenon, with users embracing the platform all around
    the globe. To create a more specific experience for users in different locales,
    WordPress offers the ability to translate all of its user- and visitor-facing
    content, resulting in numerous localizations becoming available for download online.
    Like most other functionalities in the platform, internationalization is also
    available to plugin developers through a set of easy-to-use functions--the main
    difference being that plugin translations are typically included with the extension,
    instead of being downloaded separately as is the case with WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: To prepare their plugin to be localized, developers must use special internationalization
    functions when dealing with text elements. Once this structure is in place, any
    users can create localizations by themselves for languages that they know and
    submit them back to the plugin author for inclusion in a future update to the
    extension. WordPress.org also offers an online interface for users to be able
    to contribute translations without requiring to use offline tools.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explains how to prepare a plugin to be translated and shows how
    to use the Poedit tool to create a new language file for a simple plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the WordPress language configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to translate a plugin is to configure WordPress to a different
    language setting other than English. This will automatically trigger mechanisms
    in the platform to look for alternate language content for any internationalized
    string.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set the site to French.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your site Dashboard and navigate to the General section of the Settings
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Site Language to Franais du Canada and click on Save Changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Site Language configuration option of WordPress allows you to select the
    language that will be seen by visitors when they go to your website. As can be
    seen in the drop-down list of languages, WordPress has a single language installed
    by default, shown at the top of the list. The remainder of the list indicates
    languages that can be added to your website. When you set a new language, translation
    files are automatically downloaded for the selected language and the new selection
    becomes the default for visitors. If you look inside the `wp-content/languages`
    directory of your WordPress installation, you will see that a number of files
    with `.po` and `.mo` extensions were downloaded for the selected language. Portable
    object (`.po`) files are ASCII text files that contain a list of all the original
    English text from the WordPress source code, while machine object (`.mo`) files
    are binary versions of the translation table that have been compiled to be efficiently
    loaded by PHP as a website is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not presented with a list of languages to install automatically in
    the General section of the Dashboard, visit [https://codex.wordpress.org/Installing_WordPress_in_Your_Language](https://codex.wordpress.org/Installing_WordPress_in_Your_Language)
    to learn how to manually download and install translation files for WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Adapting default user settings for translation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can create translation files for our own plugins, their code needs
    to be specifically written to allow text items to be translated. This work starts
    in the plugin's activation routine, where default plugin option values are set,
    to find alternate values when a language other than English is specified in the
    website's configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to assign a translated string to a plugin's default options
    array on initialization.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Changing the WordPress language configuration*
    recipe to have a specified translation language for the website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch11-hello-world`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory and create a text file called `ch11-hello-world.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 11 - Hello World`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when the
    plugin is activated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following block of code to provide an implementation for the `ch11hw_set_default_options_array`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Extensions (Plugins in French) management page and click on
    the Activer (Activate in French) link for the `Chapter 11 - Hello World` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using phpMyAdmin, find the `options` table entry where the `option_name` field
    has a value of `ch11hw_options` to see the newly created option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c361311-43b5-4dbf-b0a0-5ee77711781c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `__` function (that's two underscores) is a WordPress utility function that
    tries to find a translation for the text that it receives in its first argument
    within the text domain specified in the second argument. A text domain is essentially
    a subsection of the global translation table that is managed by WordPress. In
    this example, the text to be translated is the string `Hello World`, for which
    the system tries to find a translation in the `ch11hw_hello_world` domain. Since
    this domain is not available at this time, the function returns the original string
    that it received as its first parameter. The plugin code assigns the value it
    receives to the default configuration array.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that the `__` function is actually an alias for the `translate`
    function. While both functions have the same functionality, using `__` makes the
    code shorter when it contains a lot of text elements to be translated.
  prefs: []
  type: TYPE_NORMAL
- en: While it may be tempting for developers to use a variable or constant in the
    first parameter of the `__` function if they need to display the same text multiple
    times, this should not be done, as it will cause problems with the translation
    lookup mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Changing the WordPress language configuration* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making admin page code ready for translation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the previous recipe showed how to look up the translation of a text item
    and return its value for further processing in the plugin code, there are many
    instances where it is more practical to display the translated content immediately.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to translate the contents of a simple administration page
    for immediate display.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adapting default user settings for translation*
    recipe to have a starting point for this recipe. Alternatively, you can get the
    resulting code (`Chapter 11/ch11-hello-world/ch11-hello-world-v1.php`) for that
    recipe from the code bundle. You should rename the file to `ch11-hello-world.php`
    before starting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch11-hello-world` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch11-hello-world.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code at the end of the file to register a function
    to be called when WordPress is building the administration page''s menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch11hw_settings_menu`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following block of code to create the `ch11hw_config_page` function
    declared in the call to `add_options_page`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to register a function to be executed when the
    administration panel is being prepared to be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following code segment to provide an implementation for the `ch11hw_admin_init`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Provide code for the `process_ch11hw_options` function, declared in the previous
    step, by inserting the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Reglages (Settings in French) section on the left-hand navigation
    menu to expand it. You will see a new menu item called Hello World in the tree.
    Selecting the new entry displays the plugin''s simple configuration form, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a74c5cc-7298-4dd5-b121-d80f65d2a894.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe makes use of the `__` function, covered in the previous recipe,
    along with the `_e` function. This second function's purpose is similar to `__`,
    except that it immediately echoes the outcome of the translation lookup to the
    browser. It should be used for all text elements that would previously have just
    been simple text in HTML code. Of course, making a call to this function requires
    the presence of standard opening and closing PHP tags (`<?` and `?>`) to be executed
    among the surrounding HTML.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this plugin's code takes care of storing user updates in the website
    database, as covered previously in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adapting default user settings for translation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying shortcode output for translation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen in numerous recipes, shortcodes are powerful tools that provide
    an easy way for users to add content to their website posts and pages. Since this
    content is presented to users, it can benefit from a translation just as much
    as the website's administration pages.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to translate shortcode output before it is displayed.
    It also explains how to deal with variable data elements that can be positioned
    differently between languages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Making admin page code ready for translation*
    recipe to have a starting point for this recipe. Alternatively, you can get the
    resulting code (`Chapter 11/ch11-hello-world/ch11-hello-world-v2.php`) for that
    recipe from the code bundle. You should rename the file to `ch11-hello-world.php`
    before starting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch11-hello-world` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch11-hello-world.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code at the end of the file to declare a new shortcode
    that will be available to content authors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch11hw_hello_world_shortcode`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new page (using the Ajouter item of the Pages menu) and insert the
    new shortcode `[hello-world]` in the content, then publish the page (Publier).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the page (Voir la page) to see the output of the shortcode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/192337e6-0088-4f89-bd70-f769b221bc2f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows something that's a bit more complex than the previous two,
    as we want the shortcode output to be a combination of static text with a dynamic
    element, and we want that element to appear in different places based on the grammatical
    structure of the target language. The way to achieve this functionality is to
    combine the `__` internationalization function with the `sprintf` standard PHP
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the `sprintf` function is to insert a variable in a string. It
    performs this task by looking for a placeholder in the target string sent in the
    first argument, and replaces it with the variable that it receives as its second
    argument. Some examples of placeholders are `%s` for a string and `%d` for an
    integer. With this functionality in mind, we use a placeholder as part of the
    string to be translated so that users who create localization files can choose
    where the value will be placed as part of the sentence structure. Once the translation
    has been obtained by the `__` function, we can immediately send the alternate
    language string to `sprintf` to create the final text.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adapting default user settings for translation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating text strings using Poedit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After inserting all the necessary code to look up translations for text elements,
    we need to create the actual translation files. While there are multiple tools
    available to perform this task, we will focus our efforts around the most popular
    one, the free multiplatform Poedit.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to extract all the strings to be translated from the plugin's
    code using Poedit, translate them, and save the resulting language file under
    the plugin directory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Modifying shortcode output for translation*
    recipe to have a starting point for this recipe. Alternatively, you can get the
    resulting code (`Chapter 11/ch11-hello-world/ch11-hello-world-v3.php`) for that
    recipe from the code bundle. You should rename the file to `ch11-hello-world.php`
    before starting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch11-hello-world` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new subdirectory named `languages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Poedit download page and download the appropriate version of
    the tool for your computer ([https://www.poedit.net/download](https://www.poedit.net/download)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install and start the Poedit application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the New menu item under the application's File menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While Poedit offers an automated way to create translations for WordPress themes
    or plugins, we will focus on the free version of Poedit and highlight all steps
    required to create a translation in this mode.
  prefs: []
  type: TYPE_NORMAL
- en: Select French (Canada) as Language of the translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Save button from the toolbar, navigate to the `languages` folder
    created earlier in this recipe, and set the filename to `ch11hw_hello_world-fr_CA.po`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Extract from sources button in the main interface window to open
    the Catalog Properties window, which will default to the Sources paths tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the Poedit window is too small, it will not display the main interface section.
    Simply make the window larger to see the Extract from sources button.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new entry in the Paths list by pressing the New item button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the value of the new path entry to `..` (two period characters).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the Sources keywords tab and add two new items to the list of Additional
    keywords and set their values to `__` and `_e`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the Translation properties tab and set the Project name and version
    field to `Hello World`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the OK button to close the Catalog properties dialog, then click on
    Save from the toolbar to be able to start editing entries in the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the items one by one in order to display them in the lower section of
    the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a translation for each text element in the lower dialog box. The following
    screenshot shows the translations of each item to French:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e620d692-c7cc-4af5-9f0b-1840c4caacfd.png)'
  prefs: []
  type: TYPE_IMG
- en: Save the translation file once completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Poedit tool searches through PHP files, looking for functions that have
    specific names, as specified in the Keywords configuration section. It looks through
    all the files located in the same directory as the catalog itself and in any additional
    folders specified under the Paths section of the catalog settings. By specifying
    `..` as an additional path, we tell Poedit to look one directory up from the `languages`
    folder, where the plugin files are located.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the configuration that we specified, Poedit is able to find all the
    instances of the `__` and `_e` functions in the plugin code and retrieve the text
    strings that are set as the first argument to these functions. Once all the strings
    have been found, Poedit provides a simple interface to provide translations for
    each string and saves the resulting translation file. Upon saving, Poedit actually
    creates two files, the portable object file and the machine object file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of the language files is made from two parts: the name of the text
    domain, `ch11hw_hello_world`, which was used in all of our calls to the `__` and
    `_e` functions in the previous recipes, and the target language code, `fr_CA`,
    to match the language configuration that we set earlier in this chapter. To support
    all the variants of the French language that WordPress supports, you can copy
    the translation files, changing the language code each time in the Poedit catalog
    configuration, as well as in the file names (`ch11hw_hello_world-fr_CA.po` and
    `ch11hw_hello_world-fr_BE.po`).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are only comfortable with English, create a template file that users
    will be able to import to start their translation.
  prefs: []
  type: TYPE_NORMAL
- en: Translation template file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are only familiar with English, you can create a translation template
    that only contains the text to be translated by saving the catalog as a `.pot`
    file instead of a `.po`/`.mo` combination. In addition to the special extension,
    the filename should not contain a language tag (for example, `ch11hw_hello_world.pot`).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adapting default user settings for translation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a language file in the plugin initialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final step to plugin translation is to put the code in place to load a translation
    file. This is done by registering an action hook callback and calling a single
    function when it gets executed.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to load the translation file created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Making admin page code ready for translation*
    and *Translating text strings using Poedit* recipes to have the proper files required
    for this recipe. Alternatively, you can get the resulting code (`Chapter 11/ch11-hello-world/ch11-hello-world-v3.php`
    and `Chapter 11/ch11-hello-world/languages` folder) for these recipes from the
    code bundle. You should rename the file `ch11-hello-world-v3.php` to `ch11-hello-world.php`
    and copy the `languages` folder next to the renamed file before starting the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch11-hello-world` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch11-hello-world.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code at the end of the file to register a function
    to be called when the plugin is initialized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch11hw_plugin_init`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the `ch11hw_set_default_options_array` function and add the same call
    to `load_plugin_textdomain` at the top of the function before the `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Reglages menu to see if the plugin's menu item has changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Bonjour Monde item to see the translated configuration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e42fd6c1-bb03-4d2f-96e6-63d9f7540968.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `load_plugin_textdomain` function has three arguments. When called, it looks
    in the folder specified in the last parameter for a `.mo` file with a name starting
    with the text domain specified in the first parameter, followed by the current
    language set in the WordPress configuration file. If found, the translation file
    is loaded in memory and is used to search for translations every time the `__`
    or `_e` functions are encountered during execution. The middle argument, set to
    a `false` value, is obsolete but is still needed for backward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Once all the hooks are in place in the plugin code, and a first translation
    file (or template) is made available with the plugin, users can easily modify
    text elements to other languages, which they can use immediately. They can also
    provide these new translations back to the plugin author for inclusion in future
    updates. We added a second call to `load_plugin_textdomain` in the activation
    hook, since the `init` action hook is not executed when activation hooks execute.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a plugin evolves over time, new text items may need to be translated. There
    may also be a need to use more advanced translation functions and translate JavaScript
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a translation file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When new calls to the `__` or `_e` functions are made in a plugin, the translation
    file needs to be updated to take new text elements into account. To do this, start
    the Poedit tool and open the existing catalog. Then, select Update from the toolbar.
    This will extract all the text items and identify new entries. Once this is done,
    new items can be translated and saved back to the catalog file.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced translation functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While we used the most common internationalization functions in this chapter,
    there are a few more advanced functions that may be useful in your efforts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_n( $singular, $plural, $number, $domain )`: This function will look up one
    of the first two strings received, depending on whether the number is one or more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_x( $text, $context, $domain )`: Adds a parameter to the localization lookup
    to add a context parameter. This is useful when dealing with words that have the
    same spelling but different meanings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ex( $text, $context, $domain )`: Same as `_x` but echoes the result of the
    lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_nx( $singular, $plural, $number, $context, $domain)`: Same as `_n` with the
    additional context parameter from `_x`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also a number of functions that will perform a localization lookup
    immediately, followed by the escape of the resulting string. These functions include
    `esc_attr__()`, `esc_attr_e()`, `esc_html__()`, `esc_html_x()`, and many more.
    For a full list of internationalization functions, visit [https://codex.wordpress.org/L10n](https://codex.wordpress.org/L10n).
  prefs: []
  type: TYPE_NORMAL
- en: Localizing JavaScript files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript files are a bit more tricky to translate, as they are often read
    from an external file that cannot contain any PHP code. The solution to this is
    the `wp_localize_script` function. When called, this function declares new variables
    in scripts that have already been queued up to be loaded, and populates these
    variables with localized strings. Upon execution, the code will be able to access
    and display the proper text on screen. The following code snippet is an example
    showing how to use the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code example, a new object called `javascript_object` will be
    created inside the `script_handle` script, with a data member called `string_val`
    that contains a translation of the target text in the current WordPress language,
    if available.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Translating text strings using Poedit* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
