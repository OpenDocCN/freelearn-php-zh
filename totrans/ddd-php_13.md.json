["```php\nclass IdeaController extends Zend_Controller_Action\n{\n    public function rateAction()\n    {\n        // Getting parameters from the request\n        $ideaId = $this->request->getParam('id');\n        $rating = $this->request->getParam('rating');\n\n        // Building database connection\n        $db = new Zend_Db_Adapter_Pdo_Mysql([\n            'host'     => 'localhost',\n            'username' => 'idy',\n            'password' => '',\n            'dbname'   => 'idy'\n        ]);\n\n        // Finding the idea in the database\n        $sql = 'SELECT * FROM ideas WHERE idea_id = ?';\n        $row = $db->fetchRow($sql, $ideaId);\n        if (!$row) {\n            throw new Exception('Idea does not exist');\n        }\n\n        // Building the idea from the database\n        $idea = new Idea();\n        $idea->setId($row['id']);\n        $idea->setTitle($row['title']);\n        $idea->setDescription($row['description']);\n        $idea->setRating($row['rating']);\n        $idea->setVotes($row['votes']);\n        $idea->setAuthor($row['email']);\n\n        // Add user rating\n        $idea->addRating($rating);\n\n        // Update the idea and save it to the database\n        $data = [\n            'votes' => $idea->getVotes(),\n            'rating' => $idea->getRating()\n        ];\n        $where['idea_id = ?'] = $ideaId;\n        $db->update('ideas', $data, $where);\n\n        // Redirect to view idea page\n        $this->redirect('/idea/' . $ideaId);\n    }\n}\n\n```", "```php\nclass IdeaController extends Zend_Controller_Action\n{\n    public function rateAction()\n    {\n        $ideaId = $this->request->getParam('id');\n        $rating = $this->request->getParam('rating');\n\n        $ideaRepository = new IdeaRepository();\n        $idea = $ideaRepository->find($ideaId);\n        if (!$idea) {\n            throw new Exception('Idea does not exist');\n        }\n\n        $idea->addRating($rating);\n        $ideaRepository->update($idea);\n\n        $this->redirect('/idea/' . $ideaId);\n    }\n}\n\nclass IdeaRepository\n{\n    private $client;\n\n    public function __construct()\n    {\n        $this->client = new Zend_Db_Adapter_Pdo_Mysql([\n            'host' => 'localhost',\n            'username' => 'idy',\n            'password' => '',\n            'dbname' => 'idy'\n        ]);\n    }\n\n    public function find($id)\n    {\n        $sql = 'SELECT * FROM ideas WHERE idea_id = ?';\n        $row = $this->client->fetchRow($sql, $id);\n        if (!$row) {\n            return null;\n        }\n\n        $idea = new Idea();\n        $idea->setId($row['id']);\n        $idea->setTitle($row['title']);\n        $idea->setDescription($row['description']);\n        $idea->setRating($row['rating']);\n        $idea->setVotes($row['votes']);\n        $idea->setAuthor($row['email']);\n\n        return $idea;\n    }\n\n    public function update(Idea $idea)\n    {\n        $data = [\n            'title' => $idea->getTitle(),\n            'description' => $idea->getDescription(),\n            'rating' => $idea->getRating(),\n            'votes' => $idea->getVotes(),\n            'email' => $idea->getAuthor(),\n        ];\n\n        $where = ['idea_id = ?' => $idea->getId()];\n        $this->client->update('ideas', $data, $where);\n    }\n}\n\n```", "```php\nclass IdeaController extends Zend_Controller_Action\n{\n    public function rateAction()\n    {\n        $ideaId = $this->request->getParam('id');\n        $rating = $this->request->getParam('rating');\n\n        $ideaRepository = new MySQLIdeaRepository();\n        $idea = $ideaRepository->find($ideaId);\n        if(!$idea) {\n            throw new Exception('Idea does not exist');\n        }\n\n        $idea->addRating($rating);\n        $ideaRepository->update($idea);\n\n        $this->redirect('/idea/' . $ideaId);\n    }\n}\n\ninterface IdeaRepository\n{\n    /**\n     * @param int $id\n     * @return null|Idea\n     */\n    public function find($id);\n\n    /**\n     * @param Idea $idea\n     */\n    public function update(Idea $idea);\n}\n\nclass MySQLIdeaRepository implements IdeaRepository\n{\n    // ...\n}\n\n```", "```php\nclass IdeaController extends Zend_Controller_Action\n{\n    public function rateAction()\n    {\n        $ideaId = $this->request->getParam('id');\n        $rating = $this->request->getParam('rating');\n\n        $ideaRepository = new RedisIdeaRepository();\n        $idea = $ideaRepository->find($ideaId);\n        if (!$idea) {\n            throw new Exception('Idea does not exist');\n        }\n\n        $idea->addRating($rating);\n        $ideaRepository->update($idea);\n\n        $this->redirect('/idea/' . $ideaId);\n    }\n}\n\ninterface IdeaRepository\n{\n    // ...\n}\n\nclass RedisIdeaRepository implements IdeaRepository\n{\n    private $client;\n\n    public function __construct()\n    {\n        $this->client = new Predis\\Client();\n    }\n\n    public function find($id)\n    {\n        $idea = $this->client->get($this->getKey($id));\n        if (!$idea) {\n            return null;\n        }\n        return unserialize($idea);\n    }\n\n    public function update(Idea $idea)\n    {\n        $this->client->set(\n            $this->getKey($idea->getId()),\n            serialize($idea)\n        );\n    }\n\n    private function getKey($id)\n    {\n        return 'idea:' . $id;\n    }\n}\n\n```", "```php\nclass IdeaController extends Zend_Controller_Action\n{\n    public function rateAction()\n    { \n        $ideaId = $this->request->getParam('id');\n        $rating = $this->request->getParam('rating');\n\n        $ideaRepository = new RedisIdeaRepository();\n        $useCase = new RateIdeaUseCase($ideaRepository);\n        $response = $useCase->execute($ideaId, $rating);\n\n        $this->redirect('/idea/' . $ideaId);\n    }\n}\n\ninterface IdeaRepository\n{\n    // ...\n}\n\nclass RateIdeaUseCase\n{\n    private $ideaRepository;\n\n    public function __construct(IdeaRepository $ideaRepository)\n    {\n        $this->ideaRepository = $ideaRepository;\n    }\n\n    public function execute($ideaId, $rating)\n    {\n        try {\n            $idea = $this->ideaRepository->find($ideaId);\n        } catch(Exception $e) {\n            throw new RepositoryNotAvailableException();\n        }\n\n        if (!$idea) {\n            throw new IdeaDoesNotExistException();\n        }\n\n        try {\n            $idea->addRating($rating);\n            $this->ideaRepository->update($idea);\n        } catch(Exception $e) {\n            throw new RepositoryNotAvailableException();\n        } \n\n        return $idea;\n    }\n}\n\n```", "```php\nclass IdeaController extends Zend_Controller_Action\n{\n    public function rateAction()\n    {\n        $ideaId = $this->request->getParam('id');\n        $rating = $this->request->getParam('rating');\n\n        $ideaRepository = new RedisIdeaRepository();\n        $useCase = new RateIdeaUseCase($ideaRepository);\n        $response = $useCase->execute(\n            new RateIdeaRequest($ideaId, $rating)\n        );\n\n        $this->redirect('/idea/' . $response->idea->getId());\n    }\n}\n\nclass RateIdeaRequest\n{\n    public $ideaId;\n    public $rating;\n\n    public function __construct($ideaId, $rating)\n    {\n        $this->ideaId = $ideaId;\n        $this->rating = $rating;\n    }\n}\n\nclass RateIdeaResponse\n{\n    public $idea;\n\n    public function __construct(Idea $idea)\n    {\n        $this->idea = $idea;\n    }  \n}\n\nclass RateIdeaUseCase\n{\n    // ...\n\n    public function execute($request)\n    {\n        $ideaId = $request->ideaId;\n        $rating = $request->rating;\n\n        // ...\n\n        return new RateIdeaResponse($idea);\n    }\n}\n\n```", "```php\nrequire_once __DIR__.'/../vendor/autoload.php';\n\n$app = new Silex\\Application();\n\n// ... more routes\n\n$app->get(\n    '/api/rate/idea/{ideaId}/rating/{rating}',\n    function ($ideaId, $rating) use ($app) {\n        $ideaRepository = new RedisIdeaRepository();\n        $useCase = new RateIdeaUseCase($ideaRepository);\n        $response = $useCase->execute(\n            new RateIdeaRequest($ideaId, $rating)\n        );\n\n        return $app->json($response->idea);\n    }\n);\n\n$app->run();\n\n```", "```php\n$ideaRepository = new RedisIdeaRepository();\n$useCase = new RateIdeaUseCase($ideaRepository);\n$response = $useCase->execute(\n    new RateIdeaRequest($ideaId, $rating)\n);\n\n```", "```php\nnamespace Idy\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass VoteIdeaCommand extends Command\n{\n    protected function configure()\n    {\n        $this\n            ->setName('idea:rate')\n            ->setDescription('Rate an idea')\n            ->addArgument('id', InputArgument::REQUIRED)\n            ->addArgument('rating', InputArgument::REQUIRED);\n    }\n\n    protected function execute(\n        InputInterface $input,\n        OutputInterface $output\n    ) {\n        $ideaId = $input->getArgument('id');\n        $rating = $input->getArgument('rating');\n\n        $ideaRepository = new RedisIdeaRepository();\n        $useCase = new RateIdeaUseCase($ideaRepository);\n        $response = $useCase->execute(\n            new RateIdeaRequest($ideaId, $rating)\n        );\n\n        $output->writeln('Done!');\n      }\n }\n\n```", "```php\nclass RateIdeaUseCaseTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n     * @test\n     */\n    public function whenRepositoryNotAvailableAnExceptionIsThrown()\n    {\n        $this->setExpectedException('NotAvailableRepositoryException');\n        $ideaRepository = new NotAvailableRepository();\n        $useCase = new RateIdeaUseCase($ideaRepository);\n        $useCase->execute(\n            new RateIdeaRequest(1, 5)\n        );\n    }\n}\n\nclass NotAvailableRepository implements IdeaRepository\n{\n    public function find($id)\n    {\n        throw new NotAvailableException();\n    }\n\n    public function update(Idea $idea)\n    {\n        throw new NotAvailableException();\n    }\n}\n\n```", "```php\nclass RateIdeaUseCaseTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @test\n     */\n    public function whenIdeaDoesNotExistAnExceptionShouldBeThrown()\n    {\n        $this->setExpectedException('IdeaDoesNotExistException');\n        $ideaRepository = new EmptyIdeaRepository();\n        $useCase = new RateIdeaUseCase($ideaRepository);\n        $useCase->execute(\n            new RateIdeaRequest(1, 5)\n        );\n    }\n}\n\nclass EmptyIdeaRepository implements IdeaRepository\n{\n    public function find($id)\n    {\n        return null;\n    }\n\n    public function update(Idea $idea)\n    {\n\n    }\n}\n\n```", "```php\nclass RateIdeaUseCaseTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @test\n     */\n    public function whenRatingAnIdeaNewRatingShouldBeAdded()\n    {\n        $ideaRepository = new OneIdeaRepository();\n        $useCase = new RateIdeaUseCase($ideaRepository);\n        $response = $useCase->execute(\n            new RateIdeaRequest(1, 5)\n        );\n\n        $this->assertSame(5, $response->idea->getRating());\n        $this->assertTrue($ideaRepository->updateCalled);\n    }\n}\n\nclass OneIdeaRepository implements IdeaRepository\n{\n    public $updateCalled = false;\n\n    public function find($id)\n    {\n        $idea = new Idea();\n        $idea->setId(1);\n        $idea->setTitle('Subscribe to php[architect]');\n        $idea->setDescription('Just buy it!');\n        $idea->setRating(5);\n        $idea->setVotes(10);\n        $idea->setAuthor('john@example.com');\n\n        return $idea;\n    }\n\n    public function update(Idea $idea)\n    {\n        $this->updateCalled = true;\n    }\n}\n\n```", "```php\nclass RateIdeaUseCaseTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @test\n     */\n    public function whenRatingAnIdeaNewRatingShouldBeAdded()\n    {\n        $ideaRepository = new OneIdeaRepository();\n        $useCase = new RateIdeaUseCase($ideaRepository);\n        $response = $useCase->execute(\n            new RateIdeaRequest(1, 5)\n        );\n\n        $this->assertSame(5, $response->idea->getRating());\n        $this->assertTrue($ideaRepository->updateCalled);\n    }\n}\n\nclass OneIdeaRepository implements IdeaRepository\n{\n    public $updateCalled = false;\n\n    public function find($id)\n    {\n        $idea = new Idea();\n        $idea->setId(1);\n        $idea->setTitle('Subscribe to php[architect]');\n        $idea->setDescription('Just buy it!');\n        $idea->setRating(5);\n        $idea->setVotes(10);\n        $idea->setAuthor('john@example.com');\n\n        return $idea;\n    }\n\n    public function update(Idea $idea)\n    {\n        $this->updateCalled = true;\n    }\n}\n\n```", "```php\n$this->updateCalled = true;\n\n```", "```php\nclass IdeaController extends Zend_Controller_Action\n{\n    public function rateAction()\n    {\n        $ideaId = $this->request->getParam('id');\n        $rating = $this->request->getParam('rating');\n\n        $useCase = new RateIdeaUseCase(\n            new RedisIdeaRepository(\n                new Predis\\Client()\n            )\n        );\n\n        $response = $useCase->execute(\n            new RateIdeaRequest($ideaId, $rating)\n        );\n\n        $this->redirect('/idea/' . $response->idea->getId());\n    }\n}\n\nclass RedisIdeaRepository implements IdeaRepository\n{\n    private $client;\n\n    public function __construct($client)\n    {\n        $this->client = $client;\n    }\n\n    // ...\n\n    public function find($id)\n    {\n        $idea = $this->client->get($this->getKey($id));\n        if (!$idea) {\n            return null;\n        }\n\n       return $idea;\n   }\n}\n\n```", "```php\nclass IdeaController extends ContainerAwareController\n{\n    public function rateAction()\n    {\n        $ideaId = $this->request->getParam('id');\n        $rating = $this->request->getParam('rating');\n\n        $useCase = $this->get('rate_idea_use_case');\n        $response = $useCase->execute(\n            new RateIdeaRequest($ideaId, $rating)\n        );\n\n        $this->redirect('/idea/' . $response->idea->getId());\n    }\n}\n\n```", "```php\n<?xml version=\"1.0\" ?>\n<container \n\n    xsi:schemaLocation=\"\n        http://symfony.com/schema/dic/services\n        http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <services>\n        <service\n            id=\"rate_idea_use_case\"\n            class=\"RateIdeaUseCase\">\n            <argument type=\"service\" id=\"idea_repository\" />\n        </service>\n\n        <service\n            id=\"idea_repository\"\n            class=\"RedisIdeaRepository\">\n            <argument type=\"service\">\n                <service class=\"Predis\\Client\" />\n            </argument>\n        </service>\n    </services>\n</container>\n\n```", "```php\nclass RateIdeaUseCase\n{\n    private $ideaRepository;\n    private $authorNotifier;\n\n    public function __construct(\n        IdeaRepository $ideaRepository,\n        AuthorNotifier $authorNotifier\n    ) {\n        $this->ideaRepository = $ideaRepository;\n        $this->authorNotifier = $authorNotifier;\n    }\n\n    public function execute(RateIdeaRequest $request)\n    {\n        $ideaId = $request->ideaId;\n        $rating = $request->rating;\n\n        try {\n            $idea = $this->ideaRepository->find($ideaId);\n        } catch(Exception $e) {\n            throw new RepositoryNotAvailableException();\n        }\n\n        if (!$idea) {\n            throw new IdeaDoesNotExistException();\n        }\n\n        try {\n            $idea->addRating($rating);\n            $this->ideaRepository->update($idea);\n        } catch(Exception $e) {\n            throw new RepositoryNotAvailableException();\n        }\n\n        try {\n            $this->authorNotifier->notify(\n                $idea->getAuthor()\n            );\n        } catch(Exception $e) {\n            throw new NotificationNotSentException();\n        }\n\n        return $idea;\n    }\n}\n\n```"]