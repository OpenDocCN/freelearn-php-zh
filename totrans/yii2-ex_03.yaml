- en: Chapter 3. Making Pretty URLs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 制作漂亮的URL
- en: 'This chapter explains how to configure URL rules and make URLs pretty, in particular
    for search engines. We will cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何配置URL规则并使URL变得漂亮，特别是对于搜索引擎。在本章中，我们将涵盖以下主题：
- en: Using Pretty URLs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用漂亮的URL
- en: Custom URL rules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义URL规则
- en: Example – news items list by year or category
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 按年份或类别列出新闻条目
- en: The default parameters in rules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则中的默认参数
- en: Example – the index page to display list links
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 显示列表链接的索引页面
- en: Complete URL rule parameters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的URL规则参数
- en: The URL pattern to support a multilanguage view
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多语言视图的URL模式
- en: Creating the rule class
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建规则类
- en: Using pretty URLs
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用漂亮的URL
- en: The URL format is very important for SEO. People do not pay attention to URLs
    (some browsers does not display them at all), but search engines make correspondences
    between text in the page and the URL.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: URL格式对于SEO非常重要。人们不会关注URL（一些浏览器甚至完全不显示它们），但搜索引擎会在页面中的文本和URL之间建立对应关系。
- en: Until now, we have used this type of URL `index.php?r=site/index` or `index.php?r=site/about`,
    where `r` indicates the parameter route to follow. Now, we will see how to change
    these formats in `site/index` and `site/about`, that are more easily readable
    and useful for search engines.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了这种类型的URL `index.php?r=site/index` 或 `index.php?r=site/about`，其中`r`表示要遵循的参数路由。现在，我们将看到如何更改`site/index`和`site/about`的这些格式，它们更易于阅读，并且对搜索引擎更有用。
- en: In order to use pretty URLs, we need to configure Yii2 to handle them, and this
    can be done in a couple of minutes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用漂亮的URL，我们需要配置Yii2来处理它们，这可以在几分钟内完成。
- en: First of all, we must ensure that all requests are rewritten to `web/index.php`.
    In Linux, we can change web server configuration using Apache and insert the `.htaccess`
    file in Yii2's app root folder, if this file does not exist. The `.htaccess` file
    allows us to override some default configuration of the web server.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须确保所有请求都被重写到`web/index.php`。在Linux中，我们可以使用Apache更改Web服务器配置，并在Yii2的应用程序根目录中插入`.htaccess`文件，如果该文件不存在。`.htaccess`文件允许我们覆盖Web服务器的一些默认配置。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the Linux environment, the filename starting with dot indicates that this
    file is hidden.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux环境中，以点开头的文件名表示该文件是隐藏的。
- en: 'The content of `.htaccess` is the same as Yii1:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`.htaccess`的内容与Yii1相同：'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the app root is `/var/www/vhosts/yiiapp/basic`, we will insert `.htaccess`
    in `/var/www/vhosts/yiiapp/basic`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序根目录是`/var/www/vhosts/yiiapp/basic`，我们将`.htaccess`插入到`/var/www/vhosts/yiiapp/basic`。
- en: The first row activates `RewriteEngine` of the web server; then, in the second
    and third rows, the script checks whether the request is not in an existing file
    or folder; and finally the request is rewritten to `web/index.php`. With these
    changes, all the requests that are not existing files or path folders will be
    rewritten to `web/index.php`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行激活了Web服务器的`RewriteEngine`；然后，在第二行和第三行，脚本检查请求是否不在现有的文件或文件夹中；最后，请求被重写为`web/index.php`。通过这些更改，所有不是现有文件或路径文件夹的请求都将被重写为`web/index.php`。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can also configure rewrite rules in Apache configuration instead of the `.htaccess`
    file, if we have access to this level of Apache configuration.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有访问Apache配置这一级别的权限，我们也可以在Apache配置中配置重写规则，而不是`.htaccess`文件。
- en: 'If the `.htaccess` configuration has been ignored, check whether `AllowOverride`
    is set to `All` as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`.htaccess`配置已被忽略，请检查是否已将`AllowOverride`设置为`All`，如下所示：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And that is not set to `None`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 而这个选项并没有设置为`None`。
- en: The last thing to do now is to configure Yii2 in order to handle a pretty URL.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在最后要做的就是配置Yii2以处理漂亮的URL。
- en: 'Let''s open `config/web.php` and add these contents in the `components` attribute:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`config/web.php`并在`components`属性中添加以下内容：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding the `enablePrettyUrl` property, we have just configured `urlManager`
    to enable the pretty URL, toggling the pretty URL format.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`enablePrettyUrl`属性，我们刚刚配置了`urlManager`以启用漂亮的URL，切换漂亮的URL格式。
- en: The previous URL `index.php?r=site/index` becomes `/index.php/site/index` and
    `index.php?r=site/about` becomes `/index.php/site/about`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的URL `index.php?r=site/index` 变成了 `/index.php/site/index`，而 `index.php?r=site/about`
    变成了 `/index.php/site/about`。
- en: Using the `enablePrettyUrl` property, we will have the prefix `index.php` again.
    We can choose whether to keep it or not; however, to limit the URL length, it
    is advisable to remove it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`enablePrettyUrl`属性，我们将再次拥有`index.php`前缀。我们可以选择是否保留它；然而，为了限制URL长度，建议移除它。
- en: In order to control the presence of the `index.php` prefix, we use another property
    called `showScriptName`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制`index.php`前缀的存在，我们使用另一个名为`showScriptName`的属性。
- en: 'If we set this property to `false`, we will remove the first part of the URL.
    This is our updated configuration:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将此属性设置为`false`，我们将删除URL的第一部分。这是我们的更新配置：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, point the browser to `http://hostname/basic/web/site/index` to view the
    first page of the Yii2 application and check whether the other links are in the
    pretty format.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将浏览器指向`http://hostname/basic/web/site/index`以查看Yii2应用程序的第一页，并检查其他链接是否以美观的格式显示。
- en: Finally, there is another property for the `urlManager` component, used to enable
    URL parsing based only on given URL rules, named `enableStrictParsing`. If this
    property is true, only the rules defined in `urlManager` will be executed; if
    there is no URL that matches the request, an error will be displayed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一个用于`urlManager`组件的属性，用于仅基于给定的URL规则启用URL解析，该属性名为`enableStrictParsing`。如果此属性为`true`，则仅执行在`urlManager`中定义的规则；如果没有与请求匹配的URL，将显示错误。
- en: Custom URL rules
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义URL规则
- en: Yii2 give us the opportunity to customize URL rules as we want. This can be
    done using the `rules` property in `urlManager`, an array where keys are patterns
    and values are corresponding routes. Patterns are common regular expression patterns,
    so it is necessary to have some familiarity with regular expression.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2给我们提供了自定义URL规则的机会，正如我们想要的。这可以通过在`urlManager`中使用`rules`属性来完成，其中键是模式，值是对应的路由。模式是常见的正则表达式模式，因此有必要对正则表达式有一些了解。
- en: Patterns can contain parameters that will be passed to the route. In the next
    example, we will display a list of news that can be filtered through year or category
    parameter, based on parameters passed to the URL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 模式可以包含参数，这些参数将被传递到路由中。在下一个示例中，我们将显示一个可以通过年份或类别参数进行筛选的新闻列表，这些参数基于传递到URL的参数。
- en: Example – list news items by year or category
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 按年份或类别列出新闻条目
- en: In this example, we will create a new Controller named `News` in `controllers/NewsController.php`.
    In this new controller, we will insert a `data()` function containing an array
    with test data, and a function named `actionItemsList`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将在`controllers/NewsController.php`中创建一个新的名为`News`的控制器。在这个新的控制器中，我们将插入一个包含测试数据的数组`data()`函数，以及一个名为`actionItemsList`的函数。
- en: 'The first thing to do is to configure the `rules` property under the `urlManager`
    component under `config/web.php`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的事情是在`config/web.php`文件下的`urlManager`组件中配置`rules`属性：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we have two patterns:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有两种模式：
- en: '`news/<year:\d{4}>/items-list`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`news/<year:\d{4}>/items-list`'
- en: '`news/<category:\w+>/items-list`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`news/<category:\w+>/items-list`'
- en: The first pattern catches requests with a numeric parameter with four digits,
    passed to the `news /items-list` route as the `year` GET parameter. We can request
    'news/2014/items-list' or 'news/2015/items-list'.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个模式捕获带有四位数字的数字参数的请求，该参数作为`news/items-list`路由的`year` GET参数传递。我们可以请求`news/2014/items-list`或`news/2015/items-list`。
- en: The second pattern catches requests with the word parameter, passed to the `news/items-list`
    route as the `category` GET parameter. We can request `news/business/items-list`
    or `news/shopping/items-list`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个模式捕获带有单词参数的请求，该参数作为`news/items-list`路由的`category` GET参数传递。我们可以请求`news/business/items-list`或`news/shopping/items-list`。
- en: 'Then, we create `NewsController` where to define the `data()` function, to
    return static data to be used as data source, and the `actionItemsList()` function
    to handle requests to `news/year/or/category/itemsList`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建`NewsController`，在其中定义`data()`函数，以返回作为数据源使用的静态数据，以及处理对`news/year/or/category/itemsList`请求的`actionItemsList()`函数：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we create a view in `views/news/itemsList.php`, displaying the parameter
    used, year or category, and a list of results:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在`views/news/itemsList.php`中创建一个视图，显示使用的参数，年份或类别，以及结果列表：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s point to `http://hostname/basic/web/news/2015/items-list` to display
    the items list filtered out by year:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们指向`http://hostname/basic/web/news/2015/items-list`以显示通过年份筛选出的项目列表：
- en: '![Example – list news items by year or category](img/B04656_03_01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 按年份或类别列出新闻条目](img/B04656_03_01.jpg)'
- en: List items filtered by year
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 按年份筛选列表项
- en: 'Try to change the year between news and items list to see how the data result
    changes in the list. The rules that are created allow us to display the items
    list filtered by category. Point to `http://hostname/basic/web/news/business/items-list`
    to see the list filtered by business category:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在新闻和条目列表之间更改年份，以查看列表中的数据结果如何变化。创建的规则允许我们按分类显示条目列表。指向`http://hostname/basic/web/news/business/items-list`以查看按商业分类筛选的列表：
- en: '![Example – list news items by year or category](img/B04656_03_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 按年份或分类列出新闻条目](img/B04656_03_02.jpg)'
- en: List items filtered by category
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 按分类筛选的列表项
- en: We can also point to `http://hostname/basic/web/news/shopping/items-list` to
    see the list filtered by shopping category.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以指向`http://hostname/basic/web/news/shopping/items-list`以查看按购物分类筛选的列表。
- en: Default parameters in rules
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则中的默认参数
- en: In rules, all the parameters that are declared are required; if the URL misses
    some parameter, the rule will not be applied. This problem can be solved using
    the default property of rule.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在规则中，所有声明的参数都是必需的；如果URL缺少某些参数，则规则将不会应用。这个问题可以使用规则的默认属性来解决。
- en: The URL rule structure has a parameter, named defaults, containing default parameters
    to be passed as default. Parameter defaults is an array, where keys are names
    of parameters and values are their corresponding values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: URL规则结构有一个名为`defaults`的参数，包含作为默认值传递的默认参数。参数默认值是一个数组，其中键是参数名称，值是它们对应的值。
- en: 'For example, change the second rule to a complete array and add `[''category''
    => ''shopping'']` as the default property rule:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将第二条规则更改为完整的数组，并添加`['category' => 'shopping']`作为默认属性规则：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, if we point to `http://hostname/basic/web/news/items-list` without specifying
    the year or category parameter, the first rule will be skipped and the second
    one will be executed using shopping as the default value, because the category
    is missing.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们指向`http://hostname/basic/web/news/items-list`而不指定年份或分类参数，第一条规则将被跳过，第二条规则将使用默认值“购物”执行，因为缺少分类参数。
- en: Example – the index page to display the links list
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 显示链接列表的索引页面
- en: Now, create an index page to see how to create these custom URLs. In this page,
    we will display URL links to have the data filtered by year (for the last 5 years)
    and links to view the data filtered by category (shopping and business).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个索引页面以查看如何创建这些自定义URL。在这个页面中，我们将显示按年份（过去5年）筛选数据和按分类（购物和商业）筛选数据的URL链接。
- en: 'URLs are made using `yii\helpers\Url`, along with the `to()` method, where
    the first parameter can be:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`yii\helpers\Url`和`to()`方法创建URL，其中第一个参数可以是：
- en: 'The first parameter can be:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数可以是：
- en: An array that will be passed to the `toRoute()` method to generate the URL.
    The first item of this array is the route to be rendered and the other items are
    the parameters to be passed to the route; for example, `Url::to(['news/items-list',
    'year' => 2015])`.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将要传递给`toRoute()`方法以生成URL的数组。这个数组的第一个元素是要渲染的路由，其他元素是要传递给路由的参数；例如，`Url::to(['news/items-list',
    'year' => 2015])`。
- en: A string with a leading `@`; this is treated as an alias, and the corresponding
    aliased string will be returned
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以`@`开头的前缀字符串；这被视为一个别名，并将返回相应的别名字符串
- en: An empty string that returns the currently requested URL.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空字符串，它将返回当前请求的URL。
- en: A normal string that will be returned as it is.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将按原样返回的正常字符串。
- en: 'Create a simple `actionIndex` in `NewsController`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`NewsController`中创建一个简单的`actionIndex`操作：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, create a view for the index action under `views/news/index.php`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`views/news/index.php`下为索引操作创建一个视图：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Point to `http://hostname/news/index` and it will display:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 指向`http://hostname/news/index`，它将显示：
- en: '![Example – the index page to display the links list](img/B04656_03_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 显示链接列表的索引页面](img/B04656_03_03.jpg)'
- en: Index of the available filtered data
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可用筛选数据的索引
- en: The complete URL rule parameters
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整的URL规则参数
- en: 'The URL rule contains the following parameters:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: URL规则包含以下参数：
- en: '`defaults`: As we have seen, we can declare default GET parameters that this
    rule provides'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaults`：正如我们所见，我们可以声明这个规则提供的默认GET参数'
- en: '`encodeParams`: This value indicates whether the parameters should be encoded
    or not'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encodeParams`：此值表示是否应对参数进行编码'
- en: '`host`: This is the host info part of a URL'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`：这是URL的主机信息部分'
- en: '`mode`: This indicates whether this rule should be used for parsing the requested
    URL or creating a URL'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode`：这表示此规则是否用于解析请求的URL或创建URL'
- en: '`name`: This is the name of the rule'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是规则的名称'
- en: '`pattern`: This is the pattern to be used to parse and create the path info
    part of a URL'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern`：这是用于解析和创建URL路径信息部分的模式'
- en: '`route`: This is the route of the controller action'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`route`：这是控制器操作的路径'
- en: '`suffix`: This is the URL suffix used for this rule (`.json`, `.html`, and
    so on)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`suffix`：这是用于此规则的URL后缀（`.json`、`.html`等）'
- en: '`verb`: This is the HTTP verb that this rule should match with (GET, POST,
    DELETE, and so on)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verb`：这是此规则应与之匹配的HTTP动词（GET、POST、DELETE等）'
- en: The URL pattern to support the multilanguage view
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持多语言视图的URL模式
- en: There are different ways to display the same view in different languages. A
    basic approach to support multilanguage views could be to insert a language code
    at the start of the route. For example, the previous route `news/index` will become
    `en/news/index` in English language, `it/news/index` in Italian language, `fr/news/index`
    in French language, and so on.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同语言中显示相同视图有不同的方法。支持多语言视图的基本方法可以在路由的开头插入一个语言代码。例如，之前的路由`news/index`在英语中变为`en/news/index`，在意大利语中变为`it/news/index`，在法语中变为`fr/news/index`，依此类推。
- en: 'Append this rule in the `rules` property of `UrlManager`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将此规则附加到`UrlManager`的`rules`属性：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: All the requests that have a language ID as the prefix in the path info, will
    be matched and passed to the `<controller>/<action>` route with the $`lang` parameters
    passed in GET.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在路径信息中以语言ID作为前缀的请求都将匹配并传递到带有GET中传递的`$lang`参数的`<controller>/<action>`路由。
- en: 'Now, create a new action named `actionInternationalIndex` in `NewsController`
    to test the multilanguage support:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`NewsController`中创建一个名为`actionInternationalIndex`的新操作来测试多语言支持：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this action, `$lang` is taken from GET parameters. If the request does not
    contain the `$lang` parameter, the `en` value will be used as default.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在此操作中，`$lang`是从GET参数中获取的。如果请求不包含`$lang`参数，则默认使用`en`值。
- en: Create new view in `views/news/internationalIndex.php` to check the language
    code passed to the URL.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`views/news/internationalIndex.php`中创建新的视图来检查传递给URL的语言代码。
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Verify whether this action is working correctly by visiting `http://hostname/news/international-index`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问`http://hostname/news/international-index`来验证此操作是否正确：
- en: '![The URL pattern to support the multilanguage view](img/B04656_03_04.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![支持多语言视图的URL模式](img/B04656_03_04.jpg)'
- en: Setting the English language
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 设置英语
- en: We are visualizing this page in English because no language code was passed
    to the URL. Consequently, the default language code, `en`, has been used. However,
    if we write the language code in the URL, the result will change.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在用英语可视化此页面，因为没有将语言代码传递给URL。因此，已使用默认语言代码`en`。然而，如果我们把语言代码写入URL，结果将改变。
- en: 'For example, pointing to `http://hostname/basic/web/it/news/international-index`
    will display the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，指向`http://hostname/basic/web/it/news/international-index`将显示以下内容：
- en: '![The URL pattern to support the multilanguage view](img/B04656_03_05.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![支持多语言视图的URL模式](img/B04656_03_05.jpg)'
- en: Setting the Italian language
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 设置意大利语
- en: This response gives us the confirmation that we have used `it` as the language
    code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个响应确认我们已经使用了`it`作为语言代码。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this simple approach to support multi language, we get the `$lang` value
    from the request, as we have done in `actionInternationalIndex`; however, this
    is redundant and has to be generalized in all the requests. We could create a
    `BaseController` class as the base class for every Controller and then override
    the `beforeAction()` method, where we can set the `Yii::$app->language` parameter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持多语言这种简单的方法中，我们从请求中获取`$lang`值，就像我们在`actionInternationalIndex`中所做的那样；然而，这是多余的，并且必须在所有请求中通用化。我们可以创建一个`BaseController`类作为每个Controller的基础类，然后覆盖`beforeAction()`方法，在那里我们可以设置`Yii::$app->language`参数。
- en: Creating the rule class
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建规则类
- en: URL rules declared in terms of pattern-route pairs can cover the majority of
    projects. However, it is not flexible enough with dynamic data, where the URL
    could be any format and value stored in the database.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以模式-路由对的形式声明的URL规则可以覆盖大多数项目。然而，对于URL可以是任何格式和数据库中存储的值的动态数据，这种规则不够灵活。
- en: Now, we need to display item details using a URL that contains only the item
    title, such as `http://hostname/basic/web/news/Test` news of 2015-04-19
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用只包含项目标题的URL来显示项目详情，例如`http://hostname/basic/web/news/Test` 2015-04-19的新闻
- en: There is no way to solve this with URL rules, as we have done until now.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们现在所做的那样，没有方法可以用URL规则解决这个问题。
- en: A more general solution to parse and create URL requests is using `Rule` classes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 解析和创建URL请求的更通用解决方案是使用`Rule`类。
- en: The `Rule` class extends `Object` and implements `UrlRuleInterface`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rule`类扩展了`Object`并实现了`UrlRuleInterface`。'
- en: The next example will explain how to display item details, finding it from the
    title (defined in `data()` array of objects), and parsing and creating routes
    with a `Rule` class.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例将解释如何显示项目详情，从标题（在对象的`data()`数组中定义）中找到它，并使用`Rule`类解析和创建路由。
- en: The route displayed in the browser will have the news/title format.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中显示的路由将具有`news/title`格式。
- en: 'For this purpose, create a new folder `components` under the basic folder if
    it does not exist, and create `components/NewsUrlRule.php` with the following
    content:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，如果基本文件夹下不存在，请在基本文件夹下创建一个名为`components`的新文件夹，并创建`components/NewsUrlRule.php`，内容如下：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first method, `createUrl()` receives `$manager`, `$route`, and `$params`.
    With route and params, the framework builds the URL. In this case, we check whether
    the route passed is equivalent to `news/item-detail` and if it is so, return the
    corresponding URL.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法，`createUrl()`接收`$manager`、`$route`和`$params`。有了路由和参数，框架会构建URL。在这种情况下，我们检查传递的路由是否等同于`news/item-detail`，如果是，则返回相应的URL。
- en: The second method, `parseRequest()` receives `$manager` and `$request`. A match
    with a custom regular expression will be done to extract the required parts, using
    the `$request` data. The process will return the route, to be executed.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法，`parseRequest()`接收`$manager`和`$request`。将使用自定义正则表达式进行匹配，以使用`$request`数据提取所需的部分。这个过程将返回要执行的路由。
- en: 'Now, link these components to `urlManager` of the `web.php` file located at
    `config/`, appending the following lines in the `rule` property of the `urlManager`
    component:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将这些组件链接到位于`config/`的`web.php`文件的`urlManager`，在`urlManager`组件的`rule`属性中追加以下行：
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The next thing to do is to create `actionItemDetail` in `NewsController`, as
    follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步要做的是在`NewsController`中创建`actionItemDetail`，如下所示：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this action, we simply find the item starting from the title received from
    the route. We pass the title and `itemFound` to view.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个操作中，我们简单地从路由中接收到的标题开始查找项目。我们将标题和`itemFound`传递给视图。
- en: 'The last file to create is `view` under `views/news/itemDetail.php`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要创建的文件是`views`下的`itemDetail.php`：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Creating the rule class](img/B04656_03_06.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![创建规则类](img/B04656_03_06.jpg)'
- en: Item detail output
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 项目详情输出
- en: In this view, the item details (if the item is found) along with how to build
    the URL of the item detail will be displayed.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视图中，将显示项目详情（如果找到项目），以及如何构建项目详情的URL。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to implement pretty URLs, which is useful for search
    engine optimization. We also created examples where we used custom rules to parse
    and create the URL. Finally, we learned how to build more customized URL rules
    through Rule classes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何实现漂亮的URL，这对于搜索引擎优化很有用。我们还创建了使用自定义规则解析和创建URL的示例。最后，我们学习了如何通过规则类构建更定制的URL规则。
- en: In the next chapter, we will cover the use of a database, which is a fundamental
    aspect of every web application. We will start from the configuration of a database
    connection through to the tools that Yii2 makes available to developers, and to
    build a complete reservation system based on database data, using framework widgets.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍数据库的使用，这是每个Web应用的基本方面。我们将从数据库连接的配置开始，一直到Yii2为开发者提供的工具，并使用框架小部件构建基于数据库数据的完整预订系统。
