- en: Chapter 3. Making Pretty URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter explains how to configure URL rules and make URLs pretty, in particular
    for search engines. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Pretty URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom URL rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – news items list by year or category
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The default parameters in rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – the index page to display list links
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete URL rule parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The URL pattern to support a multilanguage view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the rule class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using pretty URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The URL format is very important for SEO. People do not pay attention to URLs
    (some browsers does not display them at all), but search engines make correspondences
    between text in the page and the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, we have used this type of URL `index.php?r=site/index` or `index.php?r=site/about`,
    where `r` indicates the parameter route to follow. Now, we will see how to change
    these formats in `site/index` and `site/about`, that are more easily readable
    and useful for search engines.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use pretty URLs, we need to configure Yii2 to handle them, and this
    can be done in a couple of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we must ensure that all requests are rewritten to `web/index.php`.
    In Linux, we can change web server configuration using Apache and insert the `.htaccess`
    file in Yii2's app root folder, if this file does not exist. The `.htaccess` file
    allows us to override some default configuration of the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Linux environment, the filename starting with dot indicates that this
    file is hidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of `.htaccess` is the same as Yii1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If the app root is `/var/www/vhosts/yiiapp/basic`, we will insert `.htaccess`
    in `/var/www/vhosts/yiiapp/basic`.
  prefs: []
  type: TYPE_NORMAL
- en: The first row activates `RewriteEngine` of the web server; then, in the second
    and third rows, the script checks whether the request is not in an existing file
    or folder; and finally the request is rewritten to `web/index.php`. With these
    changes, all the requests that are not existing files or path folders will be
    rewritten to `web/index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also configure rewrite rules in Apache configuration instead of the `.htaccess`
    file, if we have access to this level of Apache configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `.htaccess` configuration has been ignored, check whether `AllowOverride`
    is set to `All` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: And that is not set to `None`.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to do now is to configure Yii2 in order to handle a pretty URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open `config/web.php` and add these contents in the `components` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Adding the `enablePrettyUrl` property, we have just configured `urlManager`
    to enable the pretty URL, toggling the pretty URL format.
  prefs: []
  type: TYPE_NORMAL
- en: The previous URL `index.php?r=site/index` becomes `/index.php/site/index` and
    `index.php?r=site/about` becomes `/index.php/site/about`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `enablePrettyUrl` property, we will have the prefix `index.php` again.
    We can choose whether to keep it or not; however, to limit the URL length, it
    is advisable to remove it.
  prefs: []
  type: TYPE_NORMAL
- en: In order to control the presence of the `index.php` prefix, we use another property
    called `showScriptName`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we set this property to `false`, we will remove the first part of the URL.
    This is our updated configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, point the browser to `http://hostname/basic/web/site/index` to view the
    first page of the Yii2 application and check whether the other links are in the
    pretty format.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there is another property for the `urlManager` component, used to enable
    URL parsing based only on given URL rules, named `enableStrictParsing`. If this
    property is true, only the rules defined in `urlManager` will be executed; if
    there is no URL that matches the request, an error will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Custom URL rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 give us the opportunity to customize URL rules as we want. This can be
    done using the `rules` property in `urlManager`, an array where keys are patterns
    and values are corresponding routes. Patterns are common regular expression patterns,
    so it is necessary to have some familiarity with regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: Patterns can contain parameters that will be passed to the route. In the next
    example, we will display a list of news that can be filtered through year or category
    parameter, based on parameters passed to the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Example – list news items by year or category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will create a new Controller named `News` in `controllers/NewsController.php`.
    In this new controller, we will insert a `data()` function containing an array
    with test data, and a function named `actionItemsList`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is to configure the `rules` property under the `urlManager`
    component under `config/web.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have two patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`news/<year:\d{4}>/items-list`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`news/<category:\w+>/items-list`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first pattern catches requests with a numeric parameter with four digits,
    passed to the `news /items-list` route as the `year` GET parameter. We can request
    'news/2014/items-list' or 'news/2015/items-list'.
  prefs: []
  type: TYPE_NORMAL
- en: The second pattern catches requests with the word parameter, passed to the `news/items-list`
    route as the `category` GET parameter. We can request `news/business/items-list`
    or `news/shopping/items-list`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we create `NewsController` where to define the `data()` function, to
    return static data to be used as data source, and the `actionItemsList()` function
    to handle requests to `news/year/or/category/itemsList`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create a view in `views/news/itemsList.php`, displaying the parameter
    used, year or category, and a list of results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s point to `http://hostname/basic/web/news/2015/items-list` to display
    the items list filtered out by year:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – list news items by year or category](img/B04656_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: List items filtered by year
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to change the year between news and items list to see how the data result
    changes in the list. The rules that are created allow us to display the items
    list filtered by category. Point to `http://hostname/basic/web/news/business/items-list`
    to see the list filtered by business category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – list news items by year or category](img/B04656_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: List items filtered by category
  prefs: []
  type: TYPE_NORMAL
- en: We can also point to `http://hostname/basic/web/news/shopping/items-list` to
    see the list filtered by shopping category.
  prefs: []
  type: TYPE_NORMAL
- en: Default parameters in rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In rules, all the parameters that are declared are required; if the URL misses
    some parameter, the rule will not be applied. This problem can be solved using
    the default property of rule.
  prefs: []
  type: TYPE_NORMAL
- en: The URL rule structure has a parameter, named defaults, containing default parameters
    to be passed as default. Parameter defaults is an array, where keys are names
    of parameters and values are their corresponding values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, change the second rule to a complete array and add `[''category''
    => ''shopping'']` as the default property rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we point to `http://hostname/basic/web/news/items-list` without specifying
    the year or category parameter, the first rule will be skipped and the second
    one will be executed using shopping as the default value, because the category
    is missing.
  prefs: []
  type: TYPE_NORMAL
- en: Example – the index page to display the links list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, create an index page to see how to create these custom URLs. In this page,
    we will display URL links to have the data filtered by year (for the last 5 years)
    and links to view the data filtered by category (shopping and business).
  prefs: []
  type: TYPE_NORMAL
- en: 'URLs are made using `yii\helpers\Url`, along with the `to()` method, where
    the first parameter can be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first parameter can be:'
  prefs: []
  type: TYPE_NORMAL
- en: An array that will be passed to the `toRoute()` method to generate the URL.
    The first item of this array is the route to be rendered and the other items are
    the parameters to be passed to the route; for example, `Url::to(['news/items-list',
    'year' => 2015])`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string with a leading `@`; this is treated as an alias, and the corresponding
    aliased string will be returned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An empty string that returns the currently requested URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A normal string that will be returned as it is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a simple `actionIndex` in `NewsController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a view for the index action under `views/news/index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Point to `http://hostname/news/index` and it will display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – the index page to display the links list](img/B04656_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Index of the available filtered data
  prefs: []
  type: TYPE_NORMAL
- en: The complete URL rule parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The URL rule contains the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`defaults`: As we have seen, we can declare default GET parameters that this
    rule provides'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encodeParams`: This value indicates whether the parameters should be encoded
    or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host`: This is the host info part of a URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mode`: This indicates whether this rule should be used for parsing the requested
    URL or creating a URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is the name of the rule'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern`: This is the pattern to be used to parse and create the path info
    part of a URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`route`: This is the route of the controller action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`suffix`: This is the URL suffix used for this rule (`.json`, `.html`, and
    so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verb`: This is the HTTP verb that this rule should match with (GET, POST,
    DELETE, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The URL pattern to support the multilanguage view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different ways to display the same view in different languages. A
    basic approach to support multilanguage views could be to insert a language code
    at the start of the route. For example, the previous route `news/index` will become
    `en/news/index` in English language, `it/news/index` in Italian language, `fr/news/index`
    in French language, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Append this rule in the `rules` property of `UrlManager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: All the requests that have a language ID as the prefix in the path info, will
    be matched and passed to the `<controller>/<action>` route with the $`lang` parameters
    passed in GET.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new action named `actionInternationalIndex` in `NewsController`
    to test the multilanguage support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this action, `$lang` is taken from GET parameters. If the request does not
    contain the `$lang` parameter, the `en` value will be used as default.
  prefs: []
  type: TYPE_NORMAL
- en: Create new view in `views/news/internationalIndex.php` to check the language
    code passed to the URL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify whether this action is working correctly by visiting `http://hostname/news/international-index`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The URL pattern to support the multilanguage view](img/B04656_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting the English language
  prefs: []
  type: TYPE_NORMAL
- en: We are visualizing this page in English because no language code was passed
    to the URL. Consequently, the default language code, `en`, has been used. However,
    if we write the language code in the URL, the result will change.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, pointing to `http://hostname/basic/web/it/news/international-index`
    will display the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The URL pattern to support the multilanguage view](img/B04656_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting the Italian language
  prefs: []
  type: TYPE_NORMAL
- en: This response gives us the confirmation that we have used `it` as the language
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this simple approach to support multi language, we get the `$lang` value
    from the request, as we have done in `actionInternationalIndex`; however, this
    is redundant and has to be generalized in all the requests. We could create a
    `BaseController` class as the base class for every Controller and then override
    the `beforeAction()` method, where we can set the `Yii::$app->language` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the rule class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: URL rules declared in terms of pattern-route pairs can cover the majority of
    projects. However, it is not flexible enough with dynamic data, where the URL
    could be any format and value stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to display item details using a URL that contains only the item
    title, such as `http://hostname/basic/web/news/Test` news of 2015-04-19
  prefs: []
  type: TYPE_NORMAL
- en: There is no way to solve this with URL rules, as we have done until now.
  prefs: []
  type: TYPE_NORMAL
- en: A more general solution to parse and create URL requests is using `Rule` classes.
  prefs: []
  type: TYPE_NORMAL
- en: The `Rule` class extends `Object` and implements `UrlRuleInterface`.
  prefs: []
  type: TYPE_NORMAL
- en: The next example will explain how to display item details, finding it from the
    title (defined in `data()` array of objects), and parsing and creating routes
    with a `Rule` class.
  prefs: []
  type: TYPE_NORMAL
- en: The route displayed in the browser will have the news/title format.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, create a new folder `components` under the basic folder if
    it does not exist, and create `components/NewsUrlRule.php` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first method, `createUrl()` receives `$manager`, `$route`, and `$params`.
    With route and params, the framework builds the URL. In this case, we check whether
    the route passed is equivalent to `news/item-detail` and if it is so, return the
    corresponding URL.
  prefs: []
  type: TYPE_NORMAL
- en: The second method, `parseRequest()` receives `$manager` and `$request`. A match
    with a custom regular expression will be done to extract the required parts, using
    the `$request` data. The process will return the route, to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, link these components to `urlManager` of the `web.php` file located at
    `config/`, appending the following lines in the `rule` property of the `urlManager`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing to do is to create `actionItemDetail` in `NewsController`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this action, we simply find the item starting from the title received from
    the route. We pass the title and `itemFound` to view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last file to create is `view` under `views/news/itemDetail.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating the rule class](img/B04656_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Item detail output
  prefs: []
  type: TYPE_NORMAL
- en: In this view, the item details (if the item is found) along with how to build
    the URL of the item detail will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to implement pretty URLs, which is useful for search
    engine optimization. We also created examples where we used custom rules to parse
    and create the URL. Finally, we learned how to build more customized URL rules
    through Rule classes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the use of a database, which is a fundamental
    aspect of every web application. We will start from the configuration of a database
    connection through to the tools that Yii2 makes available to developers, and to
    build a complete reservation system based on database data, using framework widgets.
  prefs: []
  type: TYPE_NORMAL
