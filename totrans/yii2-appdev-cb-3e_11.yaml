- en: Chapter 11. Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。测试
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Testing application with Codeception
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Codeception 测试应用程序
- en: Unit testing with PHPUnit
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PHPUnit 进行单元测试
- en: Unit testing with Atoum
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Atoum 进行单元测试
- en: Unit testing with Behat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Behat 进行单元测试
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to use the best technologies for testing,
    such as Codeception, PhpUnit, Atoum, and Behat. You will be introduced to how
    to write simple tests and how to avoid regression errors in your application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用最佳的测试技术，如 Codeception、PhpUnit、Atoum 和 Behat。您将了解如何编写简单的测试以及如何避免应用程序中的回归错误。
- en: Testing application with Codeception
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Codeception 测试应用程序
- en: By default, the basic and advanced Yii2 application skeletons use **Codeception**
    as a testing framework. Codeception supports writing of unit, functional, and
    acceptance tests out of the box. For unit tests, it uses the PHPUnit test framework,
    which will be covered in the next recipe.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，基本和高级 Yii2 应用程序骨架使用 **Codeception** 作为测试框架。Codeception 支持开箱即用的单元、功能和验收测试。对于单元测试，它使用
    PHPUnit 测试框架，这将在下一个菜谱中介绍。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Composer 包管理器创建一个新的 `yii2-app-basic` 应用程序，具体操作请参考官方指南 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: Note
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: If your use version 2.0.9 (or earlier) of the basic application just
    upgrade manually `tests` directory, and also add `config/test.php`, `config/test_db.php`
    and `web/index-test.php` files. Besides you must copy `require` and `require-dev`
    sections of `composer.json` file and run `composer updat` `e`.'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意：如果您使用的是基本应用程序的 2.0.9 版本（或更早版本），只需手动升级 `tests` 目录，并添加 `config/test.php`、`config/test_db.php`
    和 `web/index-test.php` 文件。此外，您必须复制 `composer.json` 文件的 `require` 和 `require-dev`
    部分，并运行 `composer update`。
- en: 'Create and apply the following migration:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并应用以下迁移：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the `Post` model:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Post` 模型：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generate CRUD:![Getting ready](img/image00447.jpeg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 CRUD：![准备中](img/image00447.jpeg)
- en: 'Also, add the status drop-down list for the `status` field and name for the
    submit button in `views/admin/posts/_form.php`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在 `views/admin/posts/_form.php` 中为 `status` 字段添加状态下拉列表，并为提交按钮命名：
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now check that the controller works:![Getting ready](img/image00498.jpeg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在检查控制器是否正常工作：![准备中](img/image00498.jpeg)
- en: Create any demo posts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任何演示帖子。
- en: How to do it…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Preparing for the tests
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备测试
- en: 'Follow these steps to prepare for the tests:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤准备测试：
- en: 'Create `yii2_basic_tests` or other test database and update it by applying
    migrations:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `yii2_basic_tests` 或其他测试数据库，并通过应用迁移来更新它：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The command needs to be run in the tests directory. You can specify your test
    database options in configuration file `/config/test_db.php`.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要在测试目录中运行此命令。您可以在配置文件 `/config/test_db.php` 中指定您的测试数据库选项。
- en: 'Codeception uses autogenerated Actor classes for own test suites. Build them
    with this command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Codeception 使用自动生成的 Actor 类为自身的测试套件。使用以下命令构建它们：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Running unit and functional tests
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行单元和功能测试
- en: 'We can run any types of the application''s tests right now:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以运行应用程序的任何类型的测试：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As a result, you can view, testing report like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，您可以查看如下测试报告：
- en: '![Running unit and functional tests](img/image00449.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![运行单元和功能测试](img/image00449.jpeg)'
- en: Getting coverage reports
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取覆盖率报告
- en: 'You can get code coverage reports for your code. By default, code coverage
    is disabled in the `tests/codeception.yml` configuration file; you should uncomment
    the necessary rows to be able to collect code coverage:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为您的代码获取代码覆盖率报告。默认情况下，代码覆盖率在 `tests/codeception.yml` 配置文件中是禁用的；您应该取消注释必要的行以便能够收集代码覆盖率：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You must install the XDebug PHP extension from [https://xdebug.org](https://xdebug.org).
    For example, on Ubuntu or Debian you can type the following in your terminal:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须从 [https://xdebug.org](https://xdebug.org) 安装 XDebug PHP 扩展。例如，在 Ubuntu 或
    Debian 上，您可以在终端中输入以下命令：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'On Windows, you must open the `php.ini` file and add the custom code with the
    path to your PHP installation directory:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，您必须打开 `php.ini` 文件，并添加带有您 PHP 安装目录路径的自定义代码：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Alternatively, if you use the non-thread safe edition, type the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用的是非线程安全版本，请输入以下命令：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, you can run tests and collect the coverage report with the following
    command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以使用以下命令运行测试并收集覆盖率报告：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can see the text code coverage output in the terminal:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在终端中看到文本代码覆盖率输出：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Also, you can see HTML-report under the `tests/codeception/_output/coverage`
    directory:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在`tests/codeception/_output/coverage`目录下看到HTML报告：
- en: '![Getting coverage reports](img/image00378.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![获取覆盖率报告](img/image00378.jpeg)'
- en: You can click on any class and analyze which lines of code have not been executed
    during the testing process.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击任何类并分析在测试过程中哪些代码行没有被执行。
- en: Running acceptance tests
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行验收测试
- en: In acceptance tests you can use PhpBrowser for requesting server via Curl. It
    helps to check your site controllers and to parse HTTP and HTML response codes.
    But if you want to test your CSS or JavaScript behavior, you must use real browser.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在验收测试中，你可以使用PhpBrowser通过Curl请求服务器。这有助于检查你的网站控制器并解析HTTP和HTML响应代码。但如果你想测试CSS或JavaScript行为，你必须使用真实浏览器。
- en: Selenium Server is an interactive tool, which integrates into Firefox and other
    browsers and allows to open site pages and emulate human actions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium Server是一个交互式工具，它可以集成到Firefox和其他浏览器中，允许打开网站页面并模拟人类行为。
- en: 'For working with real browser we must install Selenium Server:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与真实浏览器协同工作，我们必须安装Selenium Server：
- en: 'Require full Codeception package instead of basic:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用完整的Codeception包而不是基本包：
- en: '[PRE12]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Download the following software:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载以下软件：
- en: Install Mozilla Firefox browser from https://www.mozilla.org
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从https://www.mozilla.org安装Mozilla Firefox浏览器
- en: Install Java Runtime Environment from https://www.java.com/en/download/
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从https://www.java.com/en/download/安装Java运行时环境
- en: Download Selenium Standalone Server from http://www.seleniumhq.org/download/
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从http://www.seleniumhq.org/download/下载Selenium Standalone Server
- en: Download Geckodriver from https://github.com/mozilla/geckodriver/releases
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从https://github.com/mozilla/geckodriver/releases下载Geckodriver
- en: 'Launch server with the driver in new terminal window:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的终端窗口中启动带有驱动程序的服务器：
- en: '[PRE13]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Copy `tests/acceptance.suite.yml.example` to `tests/acceptance.suite.yml` file
    and configure one like this:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`tests/acceptance.suite.yml.example`复制到`tests/acceptance.suite.yml`文件，并配置如下：
- en: '[PRE14]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open new terminal frame and start web server:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新的终端窗口并启动Web服务器：
- en: '[PRE15]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run acceptance tests:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行验收测试：
- en: '[PRE16]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: And you should see how Selenium starts the browser and check all site pages.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到Selenium如何启动浏览器并检查所有网站页面。
- en: Creating database fixtures
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建数据库固定数据
- en: 'Before running own tests, we must clear the own test database and load specific
    test data into it. The `yii2-codeception` extension provides the `ActiveFixture`
    base class for creating test data sets for own models. Follow these steps to create
    database fixtures:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行自己的测试之前，我们必须清除自己的测试数据库并将特定的测试数据加载到其中。`yii2-codeception`扩展提供了`ActiveFixture`基类，用于为自己的模型创建测试数据集。按照以下步骤创建数据库固定数据：
- en: 'Create the fixture class for the `Post` model:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Post`模型创建固定数据类：
- en: '[PRE17]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add a demonstration data set in `test/_data/post.php` file:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test/_data/post.php`文件中添加演示数据集：
- en: '[PRE18]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Activate fixtures support for unit and acceptance tests. Just add `fixtures`
    part into `unit.suite.yml` file:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活单元和验收测试的固定数据支持。只需将`fixtures`部分添加到`unit.suite.yml`文件中：
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Also, add the `fixtures` part into `acceptance.suite.yml`:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，将`fixtures`部分添加到`acceptance.suite.yml`：
- en: '[PRE20]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Regenerate `tester` classes for applying these changes by the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令重新生成`tester`类以应用这些更改：
- en: '[PRE21]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Writing unit or integration test
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写单元或集成测试
- en: Unit and integration tests check the source code of our project.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 单元和集成测试检查我们项目的源代码。
- en: Unit tests check only the current class or their method in isolation from other
    classes and resources such as databases, files, and many more.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试只检查当前类或其方法，与其他类和资源（如数据库、文件等）隔离。
- en: Integration tests check the working of your classes in integration with other
    classes and resources.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试检查你的类与其他类和资源集成的运行情况。
- en: ActiveRecord models in Yii2 always use databases for loading table schema as
    we must create a real test database and our tests will be integrational.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii2中，ActiveRecord模型始终使用数据库来加载表模式，因为我们必须创建一个真实的测试数据库，并且我们的测试将是集成性的。
- en: 'Write tests for checking model validation, saving, and changing its status:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写测试以检查模型验证、保存和更改其状态：
- en: '[PRE22]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the tests:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试：
- en: '[PRE23]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now see the result:![Writing unit or integration test](img/image00452.jpeg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在看看结果：![编写单元或集成测试](img/image00452.jpeg)
- en: That is all. If you deliberately or casually break any model's method you will
    see a broken test.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是全部了。如果你故意或偶然地破坏了任何模型的方法，你将看到失败的测试。
- en: Writing functional test
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写功能测试
- en: Functional test checks that your application works correctly. This suite prepares
    `$_GET`, `$_POST`, and others request variables and call the `Application::handleRequest`
    method. It helps to test your controllers and their responses without running
    of real server.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试检查您的应用程序是否运行正确。此套件准备 `$_GET`、`$_POST` 和其他请求变量，并调用 `Application::handleRequest`
    方法。它有助于测试您的控制器及其响应，而无需运行真实服务器。
- en: 'Now we can write tests for our admin CRUD:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为我们的管理员 CRUD 编写测试：
- en: 'Generate a new test class:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个新的测试类：
- en: '[PRE24]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Fix the namespace in the generated file and write own tests:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成的文件中修复命名空间并编写自己的测试：
- en: '[PRE25]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run tests with the command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行测试：
- en: '[PRE26]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now see the results:![Writing functional test](img/image00440.jpeg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在查看结果：![编写功能测试](img/image00440.jpeg)
- en: All tests passed. In other case you can see snapshots of tested pages in `tests/_output`
    directory for failed tests.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试都通过。在其他情况下，您可以在 `tests/_output` 目录中查看失败的测试的页面快照。
- en: Writing acceptance test
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写验收测试
- en: Acceptance tester hit the real site from test server instead of calling `Application::handleRequest`
    method. High-level acceptance tests look like middle-level functional tests, but
    in case of Selenium it allows to check JavaScript behavior in real browser.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验收测试人员从测试服务器直接访问真实网站，而不是调用 `Application::handleRequest` 方法。高级验收测试看起来像中级功能测试，但在
    Selenium 的情况下，它允许检查真实浏览器中的 JavaScript 行为。
- en: 'You must get the following class in `tests/acceptance` directory:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须在 `tests/acceptance` 目录中获取以下类：
- en: '[PRE27]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Do not forget to call `wait` method for waiting for page to be opened or reloaded.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记调用 `wait` 方法以等待页面打开或重新加载。
- en: 'Run the PHP test server in a new terminal frame:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的终端窗口中运行 PHP 测试服务器：
- en: '[PRE28]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the acceptance tests:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行验收测试：
- en: '[PRE29]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: See the results:![Writing acceptance test](img/image00454.jpeg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看结果：![编写验收测试](img/image00454.jpeg)
- en: Selenium will start Firefox web browser and execute our testing commands.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 将启动 Firefox 网络浏览器并执行我们的测试命令。
- en: Creating API test suite
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 API 测试套件
- en: Besides unit, functional, and acceptance suites, Codeception allows to create
    specific test suites. For example, we can create it for API testing with support
    of XML and JSON parsing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单元、功能和验收套件之外，Codeception 允许创建特定的测试套件。例如，我们可以为支持 XML 和 JSON 解析的 API 测试创建一个。
- en: 'Create the REST API controller `controllers/api/PostsController.php` for the
    `Post` model:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `Post` 模型创建 REST API 控制器 `controllers/api/PostsController.php`：
- en: '[PRE30]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add REST routes for the `UrlManager` component in `config/web.php`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config/web.php` 中为 `UrlManager` 组件添加 REST 路由：
- en: '[PRE31]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'and some config (but with enabled `showScriptName` option) in `config/test.php`:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并在 `config/test.php` 中添加一些配置（但启用 `showScriptName` 选项）：
- en: '[PRE32]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the `web/.htaccess` file with the following content:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下内容的 `web/.htaccess` 文件：
- en: '[PRE33]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Check that the `api/posts` controller works:![Creating API test suite](img/image00517.jpeg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `api/posts` 控制器是否工作：![创建 API 测试套件](img/image00517.jpeg)
- en: 'Create the API test suite `tests/api.suite.yml` configuration file with the
    REST module:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 REST 模块创建 API 测试套件 `tests/api.suite.yml` 配置文件：
- en: '[PRE34]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now rebuild testers:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在重新构建测试人员：
- en: '[PRE35]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create `tests/api` directory and generate new test class:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `tests/api` 目录并生成新的测试类：
- en: '[PRE36]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Write tests for your REST-API:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的 REST-API 编写测试：
- en: '[PRE37]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run application server:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序服务器：
- en: '[PRE38]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run API tests:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 API 测试：
- en: '[PRE39]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now see the result:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在查看结果：
- en: '![Creating API test suite](img/image00426.jpeg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建 API 测试套件](img/image00426.jpeg)'
- en: All tests passed and our API works correctly.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试都通过，并且我们的 API 运行正确。
- en: How it works…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Codeception is high-level testing framework, based on the PHPUnit package for
    providing infrastructure for writing unit, integration, functional, and acceptance
    tests.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Codeception 是一个基于 PHPUnit 包的高级测试框架，用于提供编写单元、集成、功能和验收测试的基础设施。
- en: We can use built-in Yii2 module of Codeception which allows us to load fixtures,
    work with models and other things from Yii Framework.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Codeception 内置的 Yii2 模块，它允许我们加载固定数据、与模型和其他事物一起工作，来自 Yii 框架。
- en: See also
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further information, refer to:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多信息，请参阅：
- en: '[http://codeception.com/docs/01-Introduction](http://codeception.com/docs/01-Introduction)'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://codeception.com/docs/01-Introduction](http://codeception.com/docs/01-Introduction)'
- en: '[https://phpunit.de/manual/5.2/en/installation.html](https://phpunit.de/manual/5.2/en/installation.html)'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://phpunit.de/manual/5.2/en/installation.html](https://phpunit.de/manual/5.2/en/installation.html)'
- en: 'The `tests/README.md` file of your basic or advanced application:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的基本或高级应用程序的 `tests/README.md` 文件：
- en: '[https://github.com/yiisoft/yii2-app-basic/blob/master/tests/README.md](https://github.com/yiisoft/yii2-app-basic/blob/master/tests/README.md)'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/yiisoft/yii2-app-basic/blob/master/tests/README.md](https://github.com/yiisoft/yii2-app-basic/blob/master/tests/README.md)'
- en: '[https://github.com/yiisoft/yii2-app-advanced/blob/master/tests/README.md](https://github.com/yiisoft/yii2-app-advanced/blob/master/tests/README.md)'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/yiisoft/yii2-app-advanced/blob/master/tests/README.md](https://github.com/yiisoft/yii2-app-advanced/blob/master/tests/README.md)'
- en: The *Unit testing with PHPUnit* recipe
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用PHPUnit进行单元测试*的菜谱'
- en: Unit testing with PHPUnit
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHPUnit进行单元测试
- en: PHPUnit is the most popular PHP testing framework. It is simple for configuration
    and usage. Also, the framework supports code coverage reports and has a lot of
    additional plugins. Codeception from the previous recipe uses PHPUnit for own
    work and writing unit tests. In this recipe, we will create a demonstration shopping
    cart extension with PHPUnit tests.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit是最受欢迎的PHP测试框架。它配置和使用的简单性。此外，该框架支持代码覆盖率报告，并且有许多附加插件。前一个菜谱中的Codeception使用PHPUnit进行自己的工作和编写单元测试。在这个菜谱中，我们将使用PHPUnit测试创建一个演示购物车扩展。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html)。
- en: How to do it…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: First, we must create a new empty directory for own extension.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须为我们的扩展创建一个新的空目录。
- en: Preparing extension structure
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备扩展结构
- en: 'First, create the directory structure for your extension:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为您的扩展创建目录结构：
- en: '[PRE40]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To work with the extension as a Composer package, prepare the `book/cart/composer.json`
    file like this:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将扩展作为Composer包使用，准备`book/cart/composer.json`文件如下：
- en: '[PRE41]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the `book/cart/.gitignore` file with the following lines:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`book/cart/.gitignore`文件，包含以下行：
- en: '[PRE42]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the following lines to the PHPUnit default configuration file `book/cart/phpunit.xml.dist`
    like this:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到PHPUnit默认配置文件`book/cart/phpunit.xml.dist`中，如下所示：
- en: '[PRE43]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Install all the dependencies of the extension:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装扩展的所有依赖项：
- en: '[PRE44]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now we must get the following structure:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们必须得到以下结构：
- en: '[PRE45]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Writing extension code
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写扩展代码
- en: 'To write the extension code, follow these steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写扩展代码，请按照以下步骤操作：
- en: 'Create the `book\cart\Cart` class in the `src` directory:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`目录中创建`book\cart\Cart`类：
- en: '[PRE46]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create `StorageInterface` interface in the `src/storage` subdirectory:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/storage`子目录中创建`StorageInterface`接口：
- en: '[PRE47]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'and SessionStorage class:'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以及SessionStorage类：
- en: '[PRE48]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now we must get the following structure:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们必须得到以下结构：
- en: '[PRE49]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Writing extension tests
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写扩展测试
- en: 'To conduct the extension test, follow these steps:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行扩展测试，请按照以下步骤操作：
- en: 'Add the `book/cart/tests/bootstrap.php` entry script for PHPUnit:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`book/cart/tests/bootstrap.php`入口脚本以供PHPUnit使用：
- en: '[PRE50]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create a test base class by initializing the Yii application before each test
    and by destroying the application afterwards:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个测试之前初始化Yii应用程序并在之后销毁应用程序以创建一个测试基类：
- en: '[PRE51]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add a memory-based clean fake class that implements the `StorageInterface`
    interface:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个基于内存的清洁模拟类，该类实现了`StorageInterface`接口：
- en: '[PRE52]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: It will store items into a private variable instead of working with a real session.
    It allows to run tests independently (without real storage driver) and also improves
    testing performance.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将项目存储到私有变量中，而不是与真实会话一起工作。它允许独立运行测试（没有真实存储驱动程序），并且也提高了测试性能。
- en: 'Add the `CartTest` class:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`CartTest`类：
- en: '[PRE53]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add a separated test for checking the `SessionStorage` class:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个单独的测试来检查`SessionStorage`类：
- en: '[PRE54]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Right now we must get the following structure:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前我们必须得到以下结构：
- en: '[PRE55]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Running tests
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: During the installation of all dependencies with the `composer install` command,
    the Composer package manager installs the `PHPUnit` package into the `vendor`
    directory and places the executable file `phpunit` in the `vendor/bin` subdirectory.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`composer install`命令安装所有依赖项期间，Composer包管理器将`PHPUnit`包安装到`vendor`目录，并将可执行文件`phpunit`放置在`vendor/bin`子目录中。
- en: 'Now we can run the following script:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行以下脚本：
- en: '[PRE56]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We must see the following testing report:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须查看以下测试报告：
- en: '[PRE57]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Each dot shows a success result of the correspondent test.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 每个点表示对应测试的成功结果。
- en: 'Try to deliberately break an own cart by commenting the `unset` operation:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过注释`unset`操作故意破坏自己的购物车：
- en: '[PRE58]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Run the tests again:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行测试：
- en: '[PRE59]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In this case, we have seen one failure (marked as `F` instead of dot) and a
    failure report.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们看到了一个失败（用`F`代替点）和失败报告。
- en: Analyzing code coverage
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析代码覆盖率
- en: 'You must install the XDebug PHP extension from [https://xdebug.org](https://xdebug.org).
    For example, on Ubuntu or Debian, you can type the following in your terminal:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须从 [https://xdebug.org](https://xdebug.org) 安装 XDebug PHP 扩展。例如，在 Ubuntu 或
    Debian 上，您可以在终端中输入以下内容：
- en: '[PRE60]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'On Windows, you must open the `php.ini` file and add the custom code with path
    to your PHP installation directory:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，您必须打开 `php.ini` 文件，并将路径添加到您的 PHP 安装目录中的自定义代码：
- en: '[PRE61]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Alternatively, if you use the non-thread safe edition, type the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用的是非线程安全版本，请输入以下内容：
- en: '[PRE62]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'After installing XDebug, run the tests again with the `--coverage-html` flag
    and specify a report directory:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 XDebug 后，再次运行测试，并使用 `--coverage-html` 标志指定报告目录：
- en: '[PRE63]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'After running open the `tests/_output/index.html` file in your browser, you
    will see an explicit coverage report for each directory and class:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后，在浏览器中打开 `tests/_output/index.html` 文件，您将看到每个目录和类的显式覆盖率报告：
- en: '![Analyzing code coverage](img/image00415.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![分析代码覆盖率](img/image00415.jpeg)'
- en: 'You can click on any class and analyze which lines of code have not been executed
    during the testing process. For example, open our `Cart` class report:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击任何类并分析在测试过程中未执行的代码行。例如，打开我们的 `Cart` 类报告：
- en: '![Analyzing code coverage](img/image00460.jpeg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![分析代码覆盖率](img/image00460.jpeg)'
- en: In our case, we forgot to test the creating storage from array configuration.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们忘记测试从数组配置创建存储。
- en: Usage of component
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件的使用
- en: 'After publishing the extension on Packagist, we can install a one-to-any project:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Packagist 上发布扩展后，我们可以安装一个一对一的任何项目：
- en: '[PRE64]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Also, enable the component in the application configuration file:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在应用程序配置文件中启用组件：
- en: '[PRE65]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'As an alternative way without publishing the extension on Packagist, we must
    set up the `@book` alias for enabling correct class autoloading:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 作为不发布扩展到 Packagist 的替代方法，我们必须设置 `@book` 别名以启用正确的类自动加载：
- en: '[PRE66]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Anyway, we can use it as the `Yii::$app->cart` component in our project:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我们可以在项目中将其用作 `Yii::$app->cart` 组件：
- en: '[PRE67]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: How it works…
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Before creating your own tests, you must just create any subdirectory and add
    the `phpunit.xml` or `phpunit.xml.dist` file in the root directory of your project:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建自己的测试之前，您只需在项目的根目录中创建任何子目录，并添加 `phpunit.xml` 或 `phpunit.xml.dist` 文件：
- en: '[PRE68]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'PHPUnit loads configuration from the second file if the first one does not
    exist in the working directory. Also, you can create the `bootstrap.php` file
    by initializing autoloader and your framework''s environments:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果工作目录中不存在第一个文件，PHPUnit 从第二个文件加载配置。您还可以通过初始化自动加载器和您的框架环境来创建 `bootstrap.php`
    文件：
- en: '[PRE69]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Finally, you can install PHPUnit via Composer (locally or globally) and use
    the `phpunit` console command in the directory with the XML configuration file.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过 Composer（本地或全局）安装 PHPUnit，并在包含 XML 配置文件的目录中使用 `phpunit` 控制台命令。
- en: 'PHPUnit scans the testing directory and finds files with the `*Test.php` suffix.
    All your test classes must extend the `PHPUnit_Framework_TestCase` class and contain
    public methods with the `test*` prefix like this:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit 扫描测试目录，并找到以 `*Test.php` 后缀的文件。您所有的测试类都必须扩展 `PHPUnit_Framework_TestCase`
    类，并包含具有 `test*` 前缀的公共方法，如下所示：
- en: '[PRE70]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In the body of your tests, you can use any of the existing `assert*` methods:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试的主体中，您可以使用任何现有的 `assert*` 方法：
- en: '[PRE71]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Also, you can override the `setUp()` or `tearDown()` methods for adding expressions
    that will be run before and after each test method.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以覆盖 `setUp()` 或 `tearDown()` 方法以添加在每次测试方法前后运行的表达式。
- en: 'For example, you can define own base `TestCase` class by reinitializing the
    Yii application:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以通过重新初始化 Yii 应用程序来定义自己的基础 `TestCase` 类：
- en: '[PRE72]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Now you can extend this class in your subclasses. Even your `test` method will
    work with an own instance of the application. It helps to avoid side effects and
    to create independent tests.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在子类中扩展此类。即使您的 `test` 方法也会使用应用程序的独立实例。这有助于避免副作用并创建独立的测试。
- en: Note
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Yii 2.0.* uses the old PHPUnit 4.* version for compatibility with PHP 5.4.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 2.0.* 使用旧的 PHPUnit 4.* 版本以与 PHP 5.4 兼容。
- en: See also
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For all information about PHPUnit usage, refer to the official documentation
    at [https://phpunit.de/manual/current/en/index.html](https://phpunit.de/manual/current/en/index.html)
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 PHPUnit 使用的所有信息，请参阅官方文档[https://phpunit.de/manual/current/en/index.html](https://phpunit.de/manual/current/en/index.html)
- en: The *Testing application with Codeception* recipe
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Codeception 测试应用程序* 的配方'
- en: Unit testing with Atoum
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Atoum 进行单元测试
- en: Besides PHPUnit and Codeception, Atoum is a simple unit testing framework. You
    can use this framework for testing your extensions or for testing a code of your
    application.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 PHPUnit 和 Codeception，Atoum 还是一个简单的单元测试框架。您可以使用此框架来测试您的扩展或测试应用程序的代码。
- en: Getting ready
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create an empty directory for the new project.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 为新项目创建一个空目录。
- en: How to do it…
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: In this recipe, we will create a demonstration shopping cart extension with
    Atoum tests.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个带有 Atoum 测试的演示购物车扩展。
- en: Preparing the extension structure
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备扩展结构
- en: 'First, create the directory structure for your extension:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为您的外部扩展创建目录结构：
- en: '[PRE73]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'For working with the extension as a composer package, prepare the `book/cart/composer.json`
    file as follows:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将扩展作为 composer 包使用，按照以下方式准备`book/cart/composer.json`文件：
- en: '[PRE74]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Add the following lines to the `book/cart/,gitignore` file:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到`book/cart/,gitignore`文件中：
- en: '[PRE75]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Install all the dependencies of the extension:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装扩展的所有依赖项：
- en: '[PRE76]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now we will get the following structure:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将得到以下结构：
- en: '[PRE77]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Writing the extension code
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写扩展代码
- en: Copy the `Cart`, `StorageInterface`, and `SessionStorage` classes from the *Unit
    testing with PHPUnit* recipe.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 从*使用 PHPUnit 进行单元测试*菜谱中复制`Cart`、`StorageInterface`和`SessionStorage`类。
- en: 'Finally, we must get the following structure:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须得到以下结构：
- en: '[PRE78]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Writing the extension tests
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写扩展测试
- en: 'Add the `book/cart/tests/bootstrap.php` entry script:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`book/cart/tests/bootstrap.php`入口脚本：
- en: '[PRE79]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Create a test base class by initializing the Yii application before each test
    and by destroying the application after ones:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在每个测试之前初始化 Yii 应用程序并在测试之后销毁应用程序来创建一个测试基类：
- en: '[PRE80]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Add a memory-based clean fake class that implements the `StorageInterface`
    interface:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个基于内存的清洁模拟类，该类实现了`StorageInterface`接口：
- en: '[PRE81]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: This will store items into a private variable instead of working with the real
    session. It allows us to run tests independently (without real storage driver)
    and also improves testing performance.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将把项目存储到私有变量中，而不是与真实会话一起工作。这允许我们独立运行测试（没有真实存储驱动程序），并且也提高了测试性能。
- en: 'Add the `Cart` test class:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`Cart`测试类：
- en: '[PRE82]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Add a separated test for checking the `SessionStorage` class:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个单独的测试来检查`SessionStorage`类：
- en: '[PRE83]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Now we will get the following structure:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将得到以下结构：
- en: '[PRE84]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Running tests
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: During the installation of all dependencies with the `composer install` command,
    the Composer package manager installs the `Atounm` package into the `vendor` directory
    and places the executable file `atoum` in the `vendor/bin` subdirectory.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`composer install`命令安装所有依赖项期间，Composer 包管理器将`Atounm`包安装到`vendor`目录，并将可执行文件`atoum`放置在`vendor/bin`子目录中。
- en: 'Now we can run the following script:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行以下脚本：
- en: '[PRE85]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Also, we must see the following testing report:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还必须看到以下测试报告：
- en: '[PRE86]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Each `S` symbol shows a success result of the correspondent test.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`S`符号表示对应测试的成功结果。
- en: 'Try to deliberately break the cart by commenting the `unset` operation:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过注释`unset`操作来故意破坏购物车：
- en: '[PRE87]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Run the tests again:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行测试：
- en: '[PRE88]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: In this case, we have seen one failure (marked as `F` instead of dot) and a
    failure report.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们看到了一个失败（用`F`代替点）和一份失败报告。
- en: Analyzing code coverage
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析代码覆盖率
- en: 'You must install the XDebug PHP extension from [https://xdebug.org](https://xdebug.org).
    For example, on Ubuntu or Debian you can type the following in your terminal:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须从[https://xdebug.org](https://xdebug.org)安装 XDebug PHP 扩展。例如，在 Ubuntu 或 Debian
    上，您可以在终端中输入以下内容：
- en: '[PRE89]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'On Windows, you must open the `php.ini` file and add the custom code with the
    path to your PHP installation directory:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，您必须打开`php.ini`文件，并添加带有您 PHP 安装目录路径的自定义代码：
- en: '[PRE90]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Alternatively, if you use the non-thread safe edition, type the following:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用的是非线程安全版本，请输入以下内容：
- en: '[PRE91]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'After installing XDebug, create the `book/cart/coverage.php` configuration
    file with coverage report options:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 XDebug 之后，创建一个包含覆盖率报告选项的`book/cart/coverage.php`配置文件：
- en: '[PRE92]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Now run the tests again with the `-c` option to use this configuration:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行测试，使用`-c`选项来使用此配置：
- en: '[PRE93]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'After running the tests, open the `tests/coverage/index.html` file in your
    browser. You will see an explicit coverage report for each directory and class:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试后，在浏览器中打开`tests/coverage/index.html`文件。您将看到每个目录和类的明确覆盖率报告：
- en: '![Analyzing code coverage](img/image00486.jpeg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![分析代码覆盖率](img/image00486.jpeg)'
- en: You can click on any class and analyze which lines of code have not been executed
    during the testing process.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击任何类并分析在测试过程中未执行的代码行。
- en: How it works…
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The Atoum testing framework supports the **Behavior-Driven Design** (**BDD**)
    syntax flow, as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Atoum 测试框架支持 **行为驱动设计** (**BDD**) 语法流，如下所示：
- en: '[PRE94]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'However, you can use the usual PHPUnit-like syntax to write unit tests:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可以使用类似于 PHPUnit 的常规语法来编写单元测试：
- en: '[PRE95]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Atoum also supports code coverage reports for analyzing the testing quality.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Atoum 还支持代码覆盖率报告，用于分析测试质量。
- en: See also
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about Atoum, refer to [http://docs.atoum.org/en/latest/](http://docs.atoum.org/en/latest/)
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 Atoum 的更多信息，请参阅 [http://docs.atoum.org/en/latest/](http://docs.atoum.org/en/latest/)
- en: For sources and usage samples, refer to [https://github.com/atoum/atoum](https://github.com/atoum/atoum)
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关源代码和使用示例，请参阅 [https://github.com/atoum/atoum](https://github.com/atoum/atoum)
- en: The *Unit testing with PHPUnit* recipe
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 PHPUnit 进行单元测试* 菜谱'
- en: Unit testing with Behat
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Behat 进行单元测试
- en: Behat is a BDD framework for testing your code with human-readable sentences
    that describes code behavior in various use cases.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Behat 是一个用于测试代码的 BDD 框架，它使用人类可读的句子描述各种用例中的代码行为。
- en: Getting ready
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create an empty directory for a new project.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 为新项目创建一个空目录。
- en: How to do it…
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: In this recipe, we will create a demonstration shopping cart extension with
    Behat tests.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将创建一个带有 Behat 测试的演示购物车扩展。
- en: Preparing extension structure
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备扩展结构
- en: 'First, create a directory structure for your extension:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为您的扩展创建目录结构：
- en: '[PRE96]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'To work with the extension as a Composer package, prepare the `book/cart/composer.json`
    file as follows:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将扩展作为 Composer 包使用，请按如下准备 `book/cart/composer.json` 文件：
- en: '[PRE97]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Add the following lines to the `book/cart/.gitignore` file:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到 `book/cart/.gitignore` 文件中：
- en: '[PRE98]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Install all the dependencies of the extension:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装扩展的所有依赖项：
- en: '[PRE99]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Now we get the following structure:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们得到以下结构：
- en: '[PRE100]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Writing extension code
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写扩展代码
- en: Copy the `Cart`, `StorageInterface`, and `SessionStorage` classes from the *Unit
    testing with PHPUnit* recipe.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *使用 PHPUnit 进行单元测试* 菜谱中复制 `Cart`、`StorageInterface` 和 `SessionStorage` 类。
- en: 'Finally, we get the following structure:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们得到以下结构：
- en: '[PRE101]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Writing extension tests
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写扩展测试
- en: 'Add the `book/cart/features/bootstrap/bootstrap.php` entry script:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `book/cart/features/bootstrap/bootstrap.php` 入口脚本：
- en: '[PRE102]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Create the `features/cart.feature` file and write cart testing scenarios:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `features/cart.feature` 文件并编写购物车测试场景：
- en: '[PRE103]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Add the storage test `features/storage.feature` file:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加存储测试 `features/storage.feature` 文件：
- en: '[PRE104]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Add implementation for all steps in the `features/bootstrap/CartContext.php`
    file:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `features/bootstrap/CartContext.php` 文件中添加所有步骤的实现：
- en: '[PRE105]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Also, in the `features/bootstrap/StorageContext.php` file, add the following:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `features/bootstrap/StorageContext.php` 文件中，添加以下内容：
- en: '[PRE106]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Add the `features/bootstrap/CartContext/FakeStorage.php` file with a fake storage
    class:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `features/bootstrap/CartContext/FakeStorage.php` 文件，其中包含一个模拟存储类：
- en: '[PRE107]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Add `book/cart/behat.yml` with contexts definition:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `book/cart/behat.yml` 并定义上下文：
- en: '[PRE108]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Now we will get the following structure:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将得到以下结构：
- en: '[PRE109]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Now we can run our tests.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行我们的测试。
- en: Running tests
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: During the installation of all dependencies with the command `composer install`,
    the Composer package manager installs the Behat package into the `vendor` directory
    and places the executable `behat` file in the `vendor/bin` subdirectory.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `composer install` 命令安装所有依赖项期间，Composer 包管理器将 Behat 包安装到 `vendor` 目录，并将可执行文件
    `behat` 放在 `vendor/bin` 子目录中。
- en: 'Now we can run the following script:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行以下脚本：
- en: '[PRE110]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Also, we must see the following testing report:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还必须查看以下测试报告：
- en: '[PRE111]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Try to deliberately break the cart by commenting the `unset` operation:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过注释 `unset` 操作来故意破坏购物车：
- en: '[PRE112]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Now run the tests again:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行测试：
- en: '[PRE113]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: In this case, we have seen one failure and a failure report.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们看到了一次失败和一份失败报告。
- en: How it works…
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Behat is a BDD testing framework. It facilitates writing preceding human-readable
    testing scenarios to low-level technical implementation.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: Behat 是一个 BDD 测试框架。它简化了编写先导的人类可读测试场景到低级技术实现的转换。
- en: 'When we write scenarios for every feature, we can use a set of operators:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为每个功能编写场景时，我们可以使用一组操作符：
- en: '[PRE114]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Behat parses our sentences and finds the associated implementation of the sentence
    in the context class:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: Behat 解析我们的句子，并在上下文类中找到与句子关联的实现：
- en: '[PRE115]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: You can create a single `FeatureContex` `t` class (by default) or create a set
    of specific contexts for feature groups and scenarios.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个单个的 `FeatureContex` `t` 类（默认）或为功能组和场景创建一组特定上下文。
- en: See also
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For getting more information about Behat refer to the following URLs:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Behat 的更多信息，请参阅以下 URL：
- en: '[http://docs.behat.org/en/v3.0/](http://docs.behat.org/en/v3.0/)'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.behat.org/en/v3.0/](http://docs.behat.org/en/v3.0/)'
- en: '[https://github.com/Behat/Behat](https://github.com/Behat/Behat)'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/Behat/Behat](https://github.com/Behat/Behat)'
- en: And to get more information about alternative test frameworks, see the other
    recipes in this chapter.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关替代测试框架的更多信息，请参阅本章中的其他食谱。
