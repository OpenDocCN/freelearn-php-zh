- en: Chapter 11. Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing application with Codeception
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with PHPUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with Atoum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with Behat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use the best technologies for testing,
    such as Codeception, PhpUnit, Atoum, and Behat. You will be introduced to how
    to write simple tests and how to avoid regression errors in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Testing application with Codeception
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the basic and advanced Yii2 application skeletons use **Codeception**
    as a testing framework. Codeception supports writing of unit, functional, and
    acceptance tests out of the box. For unit tests, it uses the PHPUnit test framework,
    which will be covered in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: If your use version 2.0.9 (or earlier) of the basic application just
    upgrade manually `tests` directory, and also add `config/test.php`, `config/test_db.php`
    and `web/index-test.php` files. Besides you must copy `require` and `require-dev`
    sections of `composer.json` file and run `composer updat` `e`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create and apply the following migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Post` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate CRUD:![Getting ready](img/image00447.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, add the status drop-down list for the `status` field and name for the
    submit button in `views/admin/posts/_form.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now check that the controller works:![Getting ready](img/image00498.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create any demo posts.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Preparing for the tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to prepare for the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `yii2_basic_tests` or other test database and update it by applying
    migrations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The command needs to be run in the tests directory. You can specify your test
    database options in configuration file `/config/test_db.php`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Codeception uses autogenerated Actor classes for own test suites. Build them
    with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running unit and functional tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can run any types of the application''s tests right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, you can view, testing report like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running unit and functional tests](img/image00449.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting coverage reports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can get code coverage reports for your code. By default, code coverage
    is disabled in the `tests/codeception.yml` configuration file; you should uncomment
    the necessary rows to be able to collect code coverage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You must install the XDebug PHP extension from [https://xdebug.org](https://xdebug.org).
    For example, on Ubuntu or Debian you can type the following in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, you must open the `php.ini` file and add the custom code with the
    path to your PHP installation directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you use the non-thread safe edition, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can run tests and collect the coverage report with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the text code coverage output in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can see HTML-report under the `tests/codeception/_output/coverage`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting coverage reports](img/image00378.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can click on any class and analyze which lines of code have not been executed
    during the testing process.
  prefs: []
  type: TYPE_NORMAL
- en: Running acceptance tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In acceptance tests you can use PhpBrowser for requesting server via Curl. It
    helps to check your site controllers and to parse HTTP and HTML response codes.
    But if you want to test your CSS or JavaScript behavior, you must use real browser.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium Server is an interactive tool, which integrates into Firefox and other
    browsers and allows to open site pages and emulate human actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For working with real browser we must install Selenium Server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Require full Codeception package instead of basic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the following software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Mozilla Firefox browser from https://www.mozilla.org
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Java Runtime Environment from https://www.java.com/en/download/
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download Selenium Standalone Server from http://www.seleniumhq.org/download/
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download Geckodriver from https://github.com/mozilla/geckodriver/releases
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Launch server with the driver in new terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy `tests/acceptance.suite.yml.example` to `tests/acceptance.suite.yml` file
    and configure one like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open new terminal frame and start web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run acceptance tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And you should see how Selenium starts the browser and check all site pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating database fixtures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before running own tests, we must clear the own test database and load specific
    test data into it. The `yii2-codeception` extension provides the `ActiveFixture`
    base class for creating test data sets for own models. Follow these steps to create
    database fixtures:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the fixture class for the `Post` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a demonstration data set in `test/_data/post.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activate fixtures support for unit and acceptance tests. Just add `fixtures`
    part into `unit.suite.yml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, add the `fixtures` part into `acceptance.suite.yml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Regenerate `tester` classes for applying these changes by the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Writing unit or integration test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unit and integration tests check the source code of our project.
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests check only the current class or their method in isolation from other
    classes and resources such as databases, files, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Integration tests check the working of your classes in integration with other
    classes and resources.
  prefs: []
  type: TYPE_NORMAL
- en: ActiveRecord models in Yii2 always use databases for loading table schema as
    we must create a real test database and our tests will be integrational.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write tests for checking model validation, saving, and changing its status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now see the result:![Writing unit or integration test](img/image00452.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That is all. If you deliberately or casually break any model's method you will
    see a broken test.
  prefs: []
  type: TYPE_NORMAL
- en: Writing functional test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functional test checks that your application works correctly. This suite prepares
    `$_GET`, `$_POST`, and others request variables and call the `Application::handleRequest`
    method. It helps to test your controllers and their responses without running
    of real server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can write tests for our admin CRUD:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a new test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fix the namespace in the generated file and write own tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run tests with the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now see the results:![Writing functional test](img/image00440.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All tests passed. In other case you can see snapshots of tested pages in `tests/_output`
    directory for failed tests.
  prefs: []
  type: TYPE_NORMAL
- en: Writing acceptance test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Acceptance tester hit the real site from test server instead of calling `Application::handleRequest`
    method. High-level acceptance tests look like middle-level functional tests, but
    in case of Selenium it allows to check JavaScript behavior in real browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You must get the following class in `tests/acceptance` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not forget to call `wait` method for waiting for page to be opened or reloaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the PHP test server in a new terminal frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the acceptance tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See the results:![Writing acceptance test](img/image00454.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selenium will start Firefox web browser and execute our testing commands.
  prefs: []
  type: TYPE_NORMAL
- en: Creating API test suite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides unit, functional, and acceptance suites, Codeception allows to create
    specific test suites. For example, we can create it for API testing with support
    of XML and JSON parsing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the REST API controller `controllers/api/PostsController.php` for the
    `Post` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add REST routes for the `UrlManager` component in `config/web.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'and some config (but with enabled `showScriptName` option) in `config/test.php`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `web/.htaccess` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check that the `api/posts` controller works:![Creating API test suite](img/image00517.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the API test suite `tests/api.suite.yml` configuration file with the
    REST module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now rebuild testers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `tests/api` directory and generate new test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write tests for your REST-API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run application server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run API tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now see the result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating API test suite](img/image00426.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: All tests passed and our API works correctly.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Codeception is high-level testing framework, based on the PHPUnit package for
    providing infrastructure for writing unit, integration, functional, and acceptance
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: We can use built-in Yii2 module of Codeception which allows us to load fixtures,
    work with models and other things from Yii Framework.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://codeception.com/docs/01-Introduction](http://codeception.com/docs/01-Introduction)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://phpunit.de/manual/5.2/en/installation.html](https://phpunit.de/manual/5.2/en/installation.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `tests/README.md` file of your basic or advanced application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-app-basic/blob/master/tests/README.md](https://github.com/yiisoft/yii2-app-basic/blob/master/tests/README.md)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-app-advanced/blob/master/tests/README.md](https://github.com/yiisoft/yii2-app-advanced/blob/master/tests/README.md)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Unit testing with PHPUnit* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with PHPUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHPUnit is the most popular PHP testing framework. It is simple for configuration
    and usage. Also, the framework supports code coverage reports and has a lot of
    additional plugins. Codeception from the previous recipe uses PHPUnit for own
    work and writing unit tests. In this recipe, we will create a demonstration shopping
    cart extension with PHPUnit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we must create a new empty directory for own extension.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing extension structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, create the directory structure for your extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To work with the extension as a Composer package, prepare the `book/cart/composer.json`
    file like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `book/cart/.gitignore` file with the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the PHPUnit default configuration file `book/cart/phpunit.xml.dist`
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install all the dependencies of the extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we must get the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Writing extension code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To write the extension code, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `book\cart\Cart` class in the `src` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `StorageInterface` interface in the `src/storage` subdirectory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'and SessionStorage class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we must get the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Writing extension tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To conduct the extension test, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `book/cart/tests/bootstrap.php` entry script for PHPUnit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a test base class by initializing the Yii application before each test
    and by destroying the application afterwards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a memory-based clean fake class that implements the `StorageInterface`
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It will store items into a private variable instead of working with a real session.
    It allows to run tests independently (without real storage driver) and also improves
    testing performance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `CartTest` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a separated test for checking the `SessionStorage` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right now we must get the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the installation of all dependencies with the `composer install` command,
    the Composer package manager installs the `PHPUnit` package into the `vendor`
    directory and places the executable file `phpunit` in the `vendor/bin` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can run the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We must see the following testing report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Each dot shows a success result of the correspondent test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to deliberately break an own cart by commenting the `unset` operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the tests again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we have seen one failure (marked as `F` instead of dot) and a
    failure report.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing code coverage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You must install the XDebug PHP extension from [https://xdebug.org](https://xdebug.org).
    For example, on Ubuntu or Debian, you can type the following in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, you must open the `php.ini` file and add the custom code with path
    to your PHP installation directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you use the non-thread safe edition, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing XDebug, run the tests again with the `--coverage-html` flag
    and specify a report directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'After running open the `tests/_output/index.html` file in your browser, you
    will see an explicit coverage report for each directory and class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing code coverage](img/image00415.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can click on any class and analyze which lines of code have not been executed
    during the testing process. For example, open our `Cart` class report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing code coverage](img/image00460.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In our case, we forgot to test the creating storage from array configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Usage of component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After publishing the extension on Packagist, we can install a one-to-any project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, enable the component in the application configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'As an alternative way without publishing the extension on Packagist, we must
    set up the `@book` alias for enabling correct class autoloading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Anyway, we can use it as the `Yii::$app->cart` component in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before creating your own tests, you must just create any subdirectory and add
    the `phpunit.xml` or `phpunit.xml.dist` file in the root directory of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'PHPUnit loads configuration from the second file if the first one does not
    exist in the working directory. Also, you can create the `bootstrap.php` file
    by initializing autoloader and your framework''s environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you can install PHPUnit via Composer (locally or globally) and use
    the `phpunit` console command in the directory with the XML configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'PHPUnit scans the testing directory and finds files with the `*Test.php` suffix.
    All your test classes must extend the `PHPUnit_Framework_TestCase` class and contain
    public methods with the `test*` prefix like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'In the body of your tests, you can use any of the existing `assert*` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can override the `setUp()` or `tearDown()` methods for adding expressions
    that will be run before and after each test method.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can define own base `TestCase` class by reinitializing the
    Yii application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Now you can extend this class in your subclasses. Even your `test` method will
    work with an own instance of the application. It helps to avoid side effects and
    to create independent tests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii 2.0.* uses the old PHPUnit 4.* version for compatibility with PHP 5.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For all information about PHPUnit usage, refer to the official documentation
    at [https://phpunit.de/manual/current/en/index.html](https://phpunit.de/manual/current/en/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing application with Codeception* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with Atoum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides PHPUnit and Codeception, Atoum is a simple unit testing framework. You
    can use this framework for testing your extensions or for testing a code of your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an empty directory for the new project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a demonstration shopping cart extension with
    Atoum tests.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the extension structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, create the directory structure for your extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For working with the extension as a composer package, prepare the `book/cart/composer.json`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the `book/cart/,gitignore` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install all the dependencies of the extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we will get the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Writing the extension code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Copy the `Cart`, `StorageInterface`, and `SessionStorage` classes from the *Unit
    testing with PHPUnit* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we must get the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Writing the extension tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the `book/cart/tests/bootstrap.php` entry script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a test base class by initializing the Yii application before each test
    and by destroying the application after ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a memory-based clean fake class that implements the `StorageInterface`
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will store items into a private variable instead of working with the real
    session. It allows us to run tests independently (without real storage driver)
    and also improves testing performance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `Cart` test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a separated test for checking the `SessionStorage` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we will get the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the installation of all dependencies with the `composer install` command,
    the Composer package manager installs the `Atounm` package into the `vendor` directory
    and places the executable file `atoum` in the `vendor/bin` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can run the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we must see the following testing report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Each `S` symbol shows a success result of the correspondent test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to deliberately break the cart by commenting the `unset` operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the tests again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we have seen one failure (marked as `F` instead of dot) and a
    failure report.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing code coverage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You must install the XDebug PHP extension from [https://xdebug.org](https://xdebug.org).
    For example, on Ubuntu or Debian you can type the following in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, you must open the `php.ini` file and add the custom code with the
    path to your PHP installation directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you use the non-thread safe edition, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing XDebug, create the `book/cart/coverage.php` configuration
    file with coverage report options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the tests again with the `-c` option to use this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the tests, open the `tests/coverage/index.html` file in your
    browser. You will see an explicit coverage report for each directory and class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing code coverage](img/image00486.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can click on any class and analyze which lines of code have not been executed
    during the testing process.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Atoum testing framework supports the **Behavior-Driven Design** (**BDD**)
    syntax flow, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'However, you can use the usual PHPUnit-like syntax to write unit tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Atoum also supports code coverage reports for analyzing the testing quality.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about Atoum, refer to [http://docs.atoum.org/en/latest/](http://docs.atoum.org/en/latest/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For sources and usage samples, refer to [https://github.com/atoum/atoum](https://github.com/atoum/atoum)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Unit testing with PHPUnit* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with Behat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Behat is a BDD framework for testing your code with human-readable sentences
    that describes code behavior in various use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an empty directory for a new project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a demonstration shopping cart extension with
    Behat tests.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing extension structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, create a directory structure for your extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To work with the extension as a Composer package, prepare the `book/cart/composer.json`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the `book/cart/.gitignore` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install all the dependencies of the extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we get the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Writing extension code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Copy the `Cart`, `StorageInterface`, and `SessionStorage` classes from the *Unit
    testing with PHPUnit* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we get the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Writing extension tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the `book/cart/features/bootstrap/bootstrap.php` entry script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `features/cart.feature` file and write cart testing scenarios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the storage test `features/storage.feature` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add implementation for all steps in the `features/bootstrap/CartContext.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, in the `features/bootstrap/StorageContext.php` file, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `features/bootstrap/CartContext/FakeStorage.php` file with a fake storage
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `book/cart/behat.yml` with contexts definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we will get the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can run our tests.
  prefs: []
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the installation of all dependencies with the command `composer install`,
    the Composer package manager installs the Behat package into the `vendor` directory
    and places the executable `behat` file in the `vendor/bin` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can run the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we must see the following testing report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Try to deliberately break the cart by commenting the `unset` operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the tests again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we have seen one failure and a failure report.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Behat is a BDD testing framework. It facilitates writing preceding human-readable
    testing scenarios to low-level technical implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we write scenarios for every feature, we can use a set of operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Behat parses our sentences and finds the associated implementation of the sentence
    in the context class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: You can create a single `FeatureContex` `t` class (by default) or create a set
    of specific contexts for feature groups and scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For getting more information about Behat refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.behat.org/en/v3.0/](http://docs.behat.org/en/v3.0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/Behat/Behat](https://github.com/Behat/Behat)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And to get more information about alternative test frameworks, see the other
    recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
