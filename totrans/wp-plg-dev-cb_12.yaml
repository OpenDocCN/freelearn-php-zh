- en: Distributing Your Plugin on wordpress.org
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss how to distribute your creations, covering
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a readme file for your plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying for your plugin to be hosted on wordpress.org
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading your plugin using Subversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing plugin banner and thumbnail images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have a version of your new plugin that is ready to be distributed to
    the masses, you need to decide whether you will join the official WordPress repository
    or self-publish it.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, the preferred option is to add your new extension to the official
    WordPress plugin repository, where you have many benefits, including free hosting,
    built-in notification of new updates, and a powerful search engine that users
    can access on [https://wordpress.org](https://wordpress.org) or from the Plugins
    section of their website's administration pages. Other benefits of hosting on
    the official repository include download statistics and the creation of a free
    forum to facilitate user support. To qualify for this hosting, your work must
    be free and open source, as well as comply with the GNU General Public License,
    Version 2 (also known as GPL v2), a common open source software license that WordPress
    itself uses.
  prefs: []
  type: TYPE_NORMAL
- en: This includes any code you wrote, along with any third-party PHP or Javascript
    libraries that you have included in your work. To learn more about the GPL v2
    license, visit [https://www.gnu.org/licenses/gpl-2.0.html](https://www.gnu.org/licenses/gpl-2.0.html).
    It is also possible to publish a plugin with paid premium features on the official
    repository, but you cannot move free features behind a paywall over time.
  prefs: []
  type: TYPE_NORMAL
- en: In comparison, self-hosting gives you full control over pricing, distribution
    license, and general presentation of your work, but it makes it harder for people
    to find your plugin and relies on implementing a custom update notification mechanism
    yourself, using third-party libraries to add equivalent functionality or having
    users manually download updates when available. There are also a number of popular
    plugin digital marketplaces that can help alleviate some of these drawbacks, but
    your work will still have less visibility than it would on the official repository.
  prefs: []
  type: TYPE_NORMAL
- en: Before making your plugin publicly available, you should also be sure that you
    are ready to deal with user feedback and questions. Once your creation is available
    for download, WordPress website administrators will quickly download it, install
    it, and may find that your work covers most, but not all, of their needs. When
    this happens, you will start getting requests to add functionality. This interaction
    with users is usually a great experience that can bring new ideas to the table
    that will enhance your work, but you should also be ready to accept criticism
    and invest time in fixing issues and implementing new features. You also need
    to think of the time that will be involved in testing your extension against new
    versions of WordPress, which typically come out two to three times a year.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explains how to prepare your work to be uploaded to the official
    plugin repository, including the application for an account, the actual code submission
    using Subversion, and how to customize your plugin page to give it a unique look.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a README file for your plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you look at any plugins on the official WordPress repository, you will see
    that their page contains a lot of information, including a description of the
    extension, a list of frequently asked questions, and installation notes. As you
    may have noticed from the work that we have done so far, this data does not reside
    in the main plugin's code file. Instead, the official WordPress repository looks
    for this information in a specially formatted `readme.txt` file that needs to
    be included with the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to create a `readme.txt` file for the Book Reviews plugin
    that we created in [*Chapter 4*](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Updating page title to include custom
    post data using plugin filters* recipe from [*Chapter 4*](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*, to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php`)
    for that recipe from the code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of your WordPress plugins directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new text file named `readme.txt` and open it in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following text in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the text file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Book Reviews edition page and take a screenshot using a third-party
    screen capture tool or your operating system's built-in function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the resulting image as `screenshot-1.jpg` in the plugin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `readme.txt` file uses a wiki-like syntax, with the number of equal signs
    (`=`) indicating the level of each section header. The first and most important
    section is the header, which contains important information, such as the plugin's
    name, the author's [https://wordpress.org](https://wordpress.org) username, donation
    link, search tags, supported versions, along with a one-line description of its
    functionality. This last item will always be visible as users navigate through
    your plugin's pages.
  prefs: []
  type: TYPE_NORMAL
- en: The initial header is followed by multiple sections, which correspond to the
    various sections that appear within a plugin's display pages. More specifically,
    these sections contain a complete description of the extension's capability, a
    step-by-step guide to installing and using your work, a change log containing
    a list of all the versions with a summary of changes for each of them, frequently
    asked questions, and screenshots. It is also possible for plugin authors to create
    their own arbitrary section using the same syntax.
  prefs: []
  type: TYPE_NORMAL
- en: As with the standard wiki syntax, the repeating `1.` in front of each installation
    step will be converted to incrementing values when the system displays these bullets
    using an ordered list on the live website. Finally, if screenshots are listed
    in the `readme.txt` file, the [https://wordpress.org](https://wordpress.org) website
    will search for files whose names start with the keyword `screenshot-`, followed
    by a number corresponding to the values listed in the screenshot section, and
    display them with the associated text as a legend. When taking screenshots of
    your plugin in action, make sure that they are clear and meaningful, as visitors
    will often decide whether they will download your creations based on these images.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more details about the `readme.txt` file format in the [https://wordpress.org](https://wordpress.org)
    plugin handbook ([https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/](https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/)).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To keep plugin code files more organized and have complete control over releases,
    you should consider using Subversion tags.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing specific plugin versions using tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tags are a Subversion concept that allows developers to identify a group of
    files at a specific point in time and label them with a name. This name can be
    used to specify the version of your plugin that [https://wordpress.org](https://wordpress.org)
    visitors will be able to download. While this recipe specifies a value of `trunk`
    as the `Stable Tag`, indicating that the latest version of the files uploaded
    to the plugin's `trunk` folder will be released, it's possible to indicate any
    other tag name in this field. In addition to keeping your work more organized,
    working with tags allows you to commit partially implemented new plugin features
    to your repository without having them automatically available for all to access.
  prefs: []
  type: TYPE_NORMAL
- en: Applying for your plugin to be hosted on WordPress.org
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating proper documentation for your creation, the next step toward
    its publication on the official plugin repository is to apply for hosting. This
    is simply done by submitting a request form in the Developer Center section on
    [http://wordpress.org](http://wordpress.org).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to apply for plugin hosting and offers tips to follow
    for quick acceptance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a zip archive containing your entire plugin directory, including the
    `readme.txt` file created in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log into the [https://wordpress.org](https://wordpress.org) website using the
    form at the top of the plugin submission page with your existing credentials or
    create a new account if you don't currently have one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Point your web browser to the plugin hosting request form page, which is available
    at [https://wordpress.org/plugins/developers/add/](https://wordpress.org/plugins/developers/add/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your ZIP file and upload it to the site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plugin submission is a fairly simple process, giving developers access to a
    Subversion repository that they can use to upload their work and share it with
    the community.
  prefs: []
  type: TYPE_NORMAL
- en: Before submitting your plugin, you should search through existing plugins to
    be sure that you have not selected a name that already exists in the repository,
    as that will result in your request being turned down. You can do this by using
    the website's search engine, as well as trying to access an address that was named
    based on your plugin name. For example, following our Book Reviews plugin example,
    you could check to see whether the address [https://wordpress.org/plugins/book-reviews](https://wordpress.org/plugins/book-reviews)
    exists.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that your plugin needs to be functional when you apply to
    be listed on the repository. Once your plugin has been approved, you will get
    access to a hosted Subversion version control repository to easily keep backups
    of all the versions of your work during development and easily publish your work.
    If you work on a plugin with one or more people, this infrastructure will make
    it very easy to exchange code between all contributors.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a README file for your plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading your plugin using Subversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you thought that using Subversion in the recipes of *Chapter 1*, *Preparing
    a Local Development Environment*, was overkill when you're working on a plugin
    locally, you will see that this knowledge comes in very handy once your hosting
    request has been approved by the WordPress team, as the system's backend relies
    on that version control system.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to submit your creation to the [https://wordpress.org](https://wordpress.org)
    website once a repository has been created for you.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Applying for your plugin to be hosted
    on WordPress.org* recipe to have an approved repository on the official website.
    You should have also installed a Subversion client, as shown in the *Creating
    a local Subversion repository* recipe in *Chapter 1*, *Preparing a Local Development
    Environment*. Finally, you should have plugin files ready for upload.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right-click on a file explorer and select the TortoiseSVN | Repo-browser menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the address of your new repository, as indicated in your hosting approval
    email. For example, for a plugin named Book Reviews, the address would be `http://plugins.svn.wordpress.org/book-reviews`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/abe6c86a-bef6-4589-9257-9d9a970d7d1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the plugin's name on the left-hand side tree view and select
    the Checkout option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a local folder on your computer as the Checkout directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on OK to create a local copy of the server structure with the accompanying
    version control data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy your plugin's files to the `trunk` folder of the resulting directory structure
    if it is empty, or update existing files with newer versions if you continued
    working on them after submission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you added any new files, right-click on them, and select the TortoiseSVN
    | Add... menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `trunk` folder and select the SVN Commit... menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a message indicating that you are uploading new files to the plugin repository
    and what changes have been made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on OK to upload your files to the official repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted for authentication, use your [https://wordpress.org](https://wordpress.org)
    Username and Password. Click on the Save authentication checkbox to avoid providing
    these credentials each time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After committing files, you will receive an email confirming that they have
    been uploaded to the repository, along with information on any changes that were
    made to each file. You will then be able to visit your plugin''s page and download
    it. For our example, the Book Reviews plugin, the address of the page would be
    [https://wordpress.org/plugins/book-reviews](https://wordpress.org/plugins/book-reviews/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1a08d1ff-cb31-4d9c-9aae-d02262e5337b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The official WordPress plugin repository uses Subversion to manage all code
    files, provide version control services to developers, and find information to
    populate the extension''s page. When your new repository is created, it contains
    three main directories: `trunk`, `tags`, and `branches`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `trunk` directory is usually the main location where you place the latest
    version of your plugin files. Following the steps in the recipe, we copy our files
    to this location and commit them to the server. Once uploaded, the WordPress.org
    servers take care of creating a zipped copy of your work.
  prefs: []
  type: TYPE_NORMAL
- en: The `tags` directory is designed to hold pointers to various versions of your
    creation over time, as discussed in the *Creating a README file for your plugin*
    recipe. This functionality used in conjunction with the Stable tag field of your
    plugin's `readme.txt` file allows you to redirect users to a known working version
    of your work while you commit and test potentially unstable work to the `trunk`.
    New tags are created using the Branch/Tag item of the TortoiseSVN menu and associating
    a name to a specific revision. The `branches` directory has a similar function
    to `tags`, but is more focused toward the creation of alternate versions of plugins
    or in-development revisions that include specific functionality.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to execute your plugin's code in a local WordPress development installation
    as you are writing it, the following section shows you how to manage your code.
  prefs: []
  type: TYPE_NORMAL
- en: Checking out plugins to your development installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When checking out the complete plugin directory, you end up with a structure
    that cannot be executed directly in a local development installation of WordPress
    for testing and development purposes. Instead of checking out the entire directory
    structure, you can limit your selection to the `trunk` directory. This will only
    copy the contents of that specific folder to your system and you can set the target
    folder to be located directly under the plugins directory.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a README file for your plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking out files from a Subversion repository* recipe in *Chapter 1*,
    *Preparing a Local Development Environment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Committing changes to a Subversion repository* recipe in *Chapter 1*, *Preparing
    a Local Development Environment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing plugin banner and thumbnail images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the plugin listing that we put in place by creating a `readme.txt` file
    and uploading it to the official plugin repository is perfectly functional, it
    does not really stand out among the sea of extensions that are available on the
    website. Thankfully, [https://wordpress.org](https://wordpress.org) introduced
    a mechanism allowing plugin developers to add a banner image to their listing.
    This image can be anything from a simple picture to a complex graphic to advertise
    your creation.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to prepare images for your plugin and how to upload
    them to your repository.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Applying for your plugin to be hosted
    on wordpress.org* and *Uploading your plugin using Subversion* recipes to have
    an approved repository on the official repository and plugin files uploaded to
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new image that is exactly 772 x 250 pixels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the image as a PNG file with the name `banner-772x250.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on a file explorer and select the TortoiseSVN | Repo-Browser menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the address of your plugin repository. For example, for a plugin named
    Book Reviews, the address would be `http://plugins.svn.wordpress.org/book-reviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new top-level directory named `assets`, at the same level as `trunk`,
    `tags`, and `branches`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `assets` directory, then drag and drop the new image file in the
    folder to upload it to the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify a Log Message in the dialog that appears to explain why the file is
    being uploaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create smaller images that are exactly 256 x 256 pixels and 128 x 128 pixels
    in size and name the files `icon-256x256.png` and `icon-128x128.png`, respectively.
    The larger icon should be a higher resolution version of the exact content of
    the smaller one, since it will be used to replace the smaller one on high DPI
    displays.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 6 and 7 to upload the two icons to the `assets` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit your plugin''s page on [https://wordpress.org](https://wordpress.org)
    to see the images in place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/11966de4-f91b-4637-a4fd-f7ee6febe0fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Search for your plugin through the [https://wordpress.org/plugins](https://wordpress.org/plugins)
    page or the Add New section of the Plugins management interface of WordPress to
    see how the icon and short plugin description are used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/196cb0fe-b1b0-406e-a5e2-7393b3f8b1f5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When files are uploaded to the plugin repositories, the [https://wordpress.org](https://wordpress.org)
    website checks for the presence of specific image files with specific names for
    the plugin banner and icon. If these files are present, it changes the layout
    of the plugin page to incorporate the images. It is important to respect the image
    format and specified dimensions when creating a plugin banner and icons to make
    sure that they are displayed properly on the website.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Uploading your plugin using Subversion* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
