- en: Chapter 8. The Backoffice Module (Part 2)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will develop the remaining sections of the Backoffice module
    so that we can get a fully functional administration area. This chapter covers
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: User CRUD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Article CRUD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already developed part of the code needed for this function, but we
    will rewrite part of it because, in the meantime, we have made changes to the
    database that will affect the functionality of our application. What we are going
    to develop next is similar to the previous CRUD sections. Let's start with the
    API controller.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller (API)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we did in [Chapter 7](ch07.html "Chapter 7. The Backoffice Module (Part
    1)"), *The Backoffice Module (Part 1)*, with hashtag and category, we will need
    to create a controller for the user. Create a new file in `modules/Api/Controller/`
    and name it `UsersController.php`. Then, write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are not many differences between this controller and the
    other controllers except for the parameters' binding. We have omitted the `list()`,
    `get()`, and `delete()` methods, but you can find them in the source code for
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will now move on to the creation of the controller in `Backoffice`.
  prefs: []
  type: TYPE_NORMAL
- en: The user controller from the Backoffice module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new file in `modules/Backoffice/Controller/` and name it `UserController.php`.
    Then, write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The methods that require more attention are `updateAction()` and `createAction()`,
    where we validate a user form and assign the data to the right action within the
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `addAction()`, `deleteAction()`, and `listAction()` methods have been intentionally
    left out, but you can find them in the source code of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The user form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have already learned how and why we use forms. We will create a form that
    will help us render and validate the data required for user creation. Create a
    new file in `modules/Core/Forms/` and name it `UserForm.php`. Then, write the
    following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this form, you may notice a few new things:'
  prefs: []
  type: TYPE_NORMAL
- en: We use `Phalcon\Validation\Validator\StringLength` to validate the length of
    the password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use a new form element, `Phalcon\Forms\Element\Select`, to generate the `select`
    form elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `Phalcon\Validation\Validator\Email` to validate the e-mail address field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We assign the results of `App\Core\Models\AclRoles` as the second parameter
    of the `select` element, `user_acl_role`. The second parameter for this field
    is an array that instructs `Phalcon\Forms\Element\Select` to use the field's name
    when generating the HTML code. Normally, we would use the field's ID and name,
    or something similar. But in this particular case, the `acl_roles` table does
    not have an ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might already have part of the user manager, or perhaps you have created
    it in its entirety. Just in case you didn''t, create it now. Create a new file
    in `modules/Core/Managers/` and name it `UserManager.php`. Then, write the following
    code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `create()` method requires two parameters. The first parameter, `$data`,
    is an array with the values needed to create our new object. The second parameter
    is `$user_role`, with a default value. Going further, we check whether the `$data`
    array has a key named `user_acl_role`. If the key exists, we overwrite the default
    value of the `$user_role` parameter. Finally, we assign values to each of the
    `$user` objects and save them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `update()` method is similar to the `create()` method, except that we first
    check whether the object that we want to update exists. The `delete()` method,
    shown as follows, will simply search for an object by ID; if the object exists,
    we delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Again, the `find()`, `findFirstById()`, and `findFirst()` methods have been
    intentionally left out, but you can find them in the source code of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's pay attention to the `create()` and `update()` methods and how we store
    the relations of the profiles and roles. Because the relation between the user
    and the roles is *1 - N*, to store the values correctly, we use array notation
    for the `$o_user_role` variable. Otherwise, saving will fail. For the password,
    we make use of Phalcon's built-in security module, and we encrypt it by using
    the `$security->hash()` method.
  prefs: []
  type: TYPE_NORMAL
- en: User templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final step is to create the templates. Switch to `modules/Backoffice/Views/Default`
    and create a new directory named `user`. In this new directory, create the four
    needed files: `add.volt`, `delete.volt`, `edit.volt`, and `list.volt`. There is
    nothing new to explain about these templates, so we are just going to write the
    code for them.'
  prefs: []
  type: TYPE_NORMAL
- en: The code for `add.volt` is as follows`:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code for `delete.volt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `edit.volt` file is nearly the same as `add.volt`. Just replace the `form`
    action and point it to `user/update`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for `list.volt` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: And we are done with User CRUD! You should be able to access the `Users` section
    in Backoffice (`http://www.learning-phalcon.localhost/backoffice/user/list`) and
    see a list of existing users. Now that we have enabled CRUD for all the sections
    that are required for adding an article, we will continue with the last part of
    this chapter—Article CRUD.
  prefs: []
  type: TYPE_NORMAL
- en: Article CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We partially wrote some code for this part. It is probably working for you,
    but you will be changing mostly everything in it. The API controller has already
    been developed, so we can move directly on to `ArticleManager` to refactor it.
  prefs: []
  type: TYPE_NORMAL
- en: The Controller (API)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code for this controller is similar to that of the rest of the controllers.
    Let''s see what it looks like. Open the file located at `modules/Api/Controllers/ArticlesController.php`,
    clear its content, and write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The only important thing to pay attention to in this controller is the data
    structure that we expect for `createAction()` and `updateAction()`. Let's continue
    with the next controller.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `addAction()`, `deleteAction()`, and `listAction()` methods have been intentionally
    left out, but you can find them in the source code of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Article controller from the Backoffice module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Switch to the `modules/Backoffice/Controllers/` folder, create a new file named
    `ArticleController.php`, and write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at `createAction()` and `updateAction()`. Here, we use the ID of
    the authenticated user when we set the value for the `article_user_id` field.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Again, methods such as `addAction()`, `deleteAction()`, and `listAction()` have
    been intentionally left out, but you can find them in the source code of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Article form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This form is similar to the one for categories. Let''s see what it looks like.
    Create a new file named `ArticleForm.php` in the `modules/Core/Forms` directory,
    and write this code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We manage the Article translation in the same way as we did for categories.
    As for the article hashtags and article categories, when we edit a record, we
    must somehow retrieve the existing ones and assign them as defaults in the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created the controllers, managers, and forms. What we need now are
    the templates. Switch to `modules/Backoffice/Views/Default/article/` and create
    the three missing files: `add.volt`, `delete.volt`, and `edit.volt`. Here is the
    code for each of them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for `add.volt` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: After you have created this file, try to access `http://www.learning-phalcon.localhost/backoffice/article/add`.
    You should see the form.
  prefs: []
  type: TYPE_NORMAL
- en: The code in `edit.volt` is the same as that for `add.volt`. Copy it and change
    its form action to `article/update` instead of `article/create`.
  prefs: []
  type: TYPE_NORMAL
- en: The `delete.volt` file has the same content as all the `delete.volt` files that
    we have created so far. Just copy the content from any of them and change the
    `links` actions to point to `article/delete`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already created the `list.volt` file, but we will need to delete its
    contents and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: By now, you should have a completely functional administration area. We will
    close this chapter in a few minutes, but before that, we will prettify the UI
    (user interface) a little. Let's start this process by adding the name of the
    authenticated user to the top of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `modules/Backoffice/Controller/BaseControllers.php` file and append
    the following code to the `afterExecuteRoute()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In this way, we assign the identity of our authenticated user to the views.
    Next, open the `modules/Backoffice/Views/Default/common/topbar.volt` template
    file and append the following code before the `"Sign out" <li>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now refresh the page, and you should see the name of the authenticated
    user, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Article form](img/B03522_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, instead of having a default blank page, let''s transform it into a simple
    dashboard. Open `modules/Backoffice/Controller/IndexController.php` and modify
    the `indexAction()` method with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we simply count the total number of articles, users, hashtags,
    and categories. The template code for `modules/Backoffice/Views/Default/index/index.volt`
    can look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you refresh the page, you should be able to see the result of this simple
    dashboard, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Article form](img/B03522_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Article manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the file located at `modules/Core/Manager/ArticleManager.php`, clear its
    contents, and write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In these first lines, we insert all the files that we need for the CRUD operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We added `$default_data` as a private variable to avoid code repetition. We
    will use it for both the `create()` and `update()` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to understand the `create()` method. First, we call the `prepareData()`
    method. This a helper and we also use it for `update()`. Next, we initiate a new
    article object and set the flag for the `article_is_published` field. An article
    needs translations and hashtags and we must assign a user to it. We do this by
    initializing a new object for each translation and hashtag. In the case of a user,
    we need to check whether the user exists in our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the `update()` method follows the same logic as the
    `create()` method. But in the following code, we first need to delete the existing
    relations of the hashtags and categories, and create new ones. This method also
    checks whether the article exists in our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `prepareData()` method is a helper that will help us to avoid code repetition
    in the `update()` and `create()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the `create()` and `update()` methods. We expect the categories
    and hashtags to be comma-separated values of IDs. If these fields contain values,
    we use the `array_map()` method and apply a trim operation to each ID. In the
    case of `update()`, we always delete the existing hashtags and categories and
    add them again (or add new ones). I use this approach because Phalcon's ORM doesn't
    do it automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Important note**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the official documentation, it says you can delete related records in this
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When using many-to-many relations, as in our case, if you execute the preceding
    code for categories or hashtags, you will end up deleting the hashtag and the
    category only. This will not remove the relation from the intermediate model.
    Also, there is another method for updating related records that is not supported
    anymore due to some strange functionality, but it can still be found in the official
    documentation. Don''t use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're finally done with this module. In general, there are infinite approaches
    to writing code. In this chapter, I used an approach that I think is easy to understand.
    Feel free to be different and code the way you like. This book is not intended
    to teach you coding, but to teach you Phalcon. You might have noticed that for
    an API, we don't use any validations. You can practice a little and connect your
    forms to the API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will switch to the `Frontend` module, where we will
    make some small modifications to the API. We will also try to implement a search
    engine based on Elasticsearch ([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch)).
  prefs: []
  type: TYPE_NORMAL
