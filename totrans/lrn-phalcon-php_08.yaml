- en: Chapter 8. The Backoffice Module (Part 2)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。Backoffice模块（第二部分）
- en: 'In this chapter, we will develop the remaining sections of the Backoffice module
    so that we can get a fully functional administration area. This chapter covers
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发Backoffice模块的剩余部分，以便我们可以获得一个完全功能化的管理区域。本章涵盖了以下主题：
- en: User CRUD
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户CRUD
- en: Article CRUD
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文章CRUD
- en: User CRUD
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户CRUD
- en: We have already developed part of the code needed for this function, but we
    will rewrite part of it because, in the meantime, we have made changes to the
    database that will affect the functionality of our application. What we are going
    to develop next is similar to the previous CRUD sections. Let's start with the
    API controller.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经开发出实现此功能所需的部分代码，但我们将重写其中一部分，因为在同时，我们对数据库进行了更改，这将影响我们应用程序的功能。接下来我们要开发的是类似于之前的CRUD部分。让我们从API控制器开始。
- en: Creating the controller (API)
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建控制器（API）
- en: 'As we did in [Chapter 7](ch07.html "Chapter 7. The Backoffice Module (Part
    1)"), *The Backoffice Module (Part 1)*, with hashtag and category, we will need
    to create a controller for the user. Create a new file in `modules/Api/Controller/`
    and name it `UsersController.php`. Then, write the following code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第7章](ch07.html "第7章。Backoffice模块（第一部分）")中做的那样，*Backoffice模块（第一部分）*，带有哈希标签和分类，我们需要为用户创建一个控制器。在`modules/Api/Controller/`目录下创建一个新文件，命名为`UsersController.php`。然后，在文件中编写以下代码：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, there are not many differences between this controller and the
    other controllers except for the parameters' binding. We have omitted the `list()`,
    `get()`, and `delete()` methods, but you can find them in the source code for
    this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个控制器和其他控制器之间没有太多区别，除了参数绑定。我们省略了`list()`、`get()`和`delete()`方法，但你可以在这个章节的源代码中找到它们。
- en: We will now move on to the creation of the controller in `Backoffice`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将进入`Backoffice`中控制器创建的环节。
- en: The user controller from the Backoffice module
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Backoffice模块的用户控制器
- en: 'Create a new file in `modules/Backoffice/Controller/` and name it `UserController.php`.
    Then, write the following code in it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在`modules/Backoffice/Controller/`目录下创建一个新文件，命名为`UserController.php`。然后，在文件中编写以下代码：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The methods that require more attention are `updateAction()` and `createAction()`,
    where we validate a user form and assign the data to the right action within the
    manager.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 需要更多注意的方法是`updateAction()`和`createAction()`，在这些方法中，我们验证用户表单并将数据分配给管理器中的正确操作。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `addAction()`, `deleteAction()`, and `listAction()` methods have been intentionally
    left out, but you can find them in the source code of this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 故意省略了`addAction()`、`deleteAction()`和`listAction()`方法，但你可以在这个章节的源代码中找到它们。
- en: The user form
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户表单
- en: 'You have already learned how and why we use forms. We will create a form that
    will help us render and validate the data required for user creation. Create a
    new file in `modules/Core/Forms/` and name it `UserForm.php`. Then, write the
    following code in it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学到了我们如何以及为什么使用表单。我们将创建一个表单，它将帮助我们渲染和验证用户创建所需的数据。在`modules/Core/Forms/`目录下创建一个新文件，命名为`UserForm.php`。然后，在文件中编写以下代码：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this form, you may notice a few new things:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表单中，你可能注意到一些新事物：
- en: We use `Phalcon\Validation\Validator\StringLength` to validate the length of
    the password.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`Phalcon\Validation\Validator\StringLength`来验证密码的长度。
- en: We use a new form element, `Phalcon\Forms\Element\Select`, to generate the `select`
    form elements.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用一个新的表单元素`Phalcon\Forms\Element\Select`来生成`select`表单元素。
- en: We use `Phalcon\Validation\Validator\Email` to validate the e-mail address field.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`Phalcon\Validation\Validator\Email`来验证电子邮件地址字段。
- en: We assign the results of `App\Core\Models\AclRoles` as the second parameter
    of the `select` element, `user_acl_role`. The second parameter for this field
    is an array that instructs `Phalcon\Forms\Element\Select` to use the field's name
    when generating the HTML code. Normally, we would use the field's ID and name,
    or something similar. But in this particular case, the `acl_roles` table does
    not have an ID.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`App\Core\Models\AclRoles`的结果作为`select`元素`user_acl_role`的第二个参数。这个字段的第二个参数是一个数组，它指示`Phalcon\Forms\Element\Select`在生成HTML代码时使用字段名。通常，我们会使用字段的ID和名称，或者类似的东西。但在这个特定的情况下，`acl_roles`表没有ID。
- en: The user manager
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户管理器
- en: 'You might already have part of the user manager, or perhaps you have created
    it in its entirety. Just in case you didn''t, create it now. Create a new file
    in `modules/Core/Managers/` and name it `UserManager.php`. Then, write the following
    code in it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经有了用户管理器的一部分，或者可能已经完全创建。如果你还没有，现在就创建它。在`modules/Core/Managers/`中创建一个新文件，并将其命名为`UserManager.php`。然后，在它里面写入以下代码：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `create()` method requires two parameters. The first parameter, `$data`,
    is an array with the values needed to create our new object. The second parameter
    is `$user_role`, with a default value. Going further, we check whether the `$data`
    array has a key named `user_acl_role`. If the key exists, we overwrite the default
    value of the `$user_role` parameter. Finally, we assign values to each of the
    `$user` objects and save them:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`create()`方法需要两个参数。第一个参数`$data`是一个包含创建我们新对象所需值的数组。第二个参数是`$user_role`，具有默认值。进一步来说，我们检查`$data`数组是否有一个名为`user_acl_role`的键。如果键存在，我们覆盖`$user_role`参数的默认值。最后，我们将值分配给每个`$user`对象并保存它们：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `update()` method is similar to the `create()` method, except that we first
    check whether the object that we want to update exists. The `delete()` method,
    shown as follows, will simply search for an object by ID; if the object exists,
    we delete it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`update()`方法与`create()`方法类似，但首先检查我们想要更新的对象是否存在。以下所示的`delete()`方法将简单地通过ID搜索对象；如果对象存在，则将其删除：'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Again, the `find()`, `findFirstById()`, and `findFirst()` methods have been
    intentionally left out, but you can find them in the source code of this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，`find()`、`findFirstById()`和`findFirst()`方法已被故意省略，但你可以在本章的源代码中找到它们。
- en: Let's pay attention to the `create()` and `update()` methods and how we store
    the relations of the profiles and roles. Because the relation between the user
    and the roles is *1 - N*, to store the values correctly, we use array notation
    for the `$o_user_role` variable. Otherwise, saving will fail. For the password,
    we make use of Phalcon's built-in security module, and we encrypt it by using
    the `$security->hash()` method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们关注`create()`和`update()`方法以及我们如何存储配置文件和角色的关系。因为用户和角色之间的关系是*1 - N*，为了正确存储值，我们使用数组表示法为`$o_user_role`变量。否则，保存将失败。对于密码，我们利用Phalcon内置的安全模块，并使用`$security->hash()`方法进行加密。
- en: User templates
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户模板
- en: 'The final step is to create the templates. Switch to `modules/Backoffice/Views/Default`
    and create a new directory named `user`. In this new directory, create the four
    needed files: `add.volt`, `delete.volt`, `edit.volt`, and `list.volt`. There is
    nothing new to explain about these templates, so we are just going to write the
    code for them.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是创建模板。切换到`modules/Backoffice/Views/Default`并创建一个名为`user`的新目录。在这个新目录中，创建所需的四个文件：`add.volt`、`delete.volt`、`edit.volt`和`list.volt`。关于这些模板没有新的说明，所以我们只需写出它们的代码。
- en: The code for `add.volt` is as follows`:`
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`add.volt`的代码如下：'
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the code for `delete.volt`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`delete.volt`的代码：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `edit.volt` file is nearly the same as `add.volt`. Just replace the `form`
    action and point it to `user/update`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit.volt`文件几乎与`add.volt`相同。只需替换`form`动作并将其指向`user/update`：'
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The code for `list.volt` is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`list.volt`的代码如下：'
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And we are done with User CRUD! You should be able to access the `Users` section
    in Backoffice (`http://www.learning-phalcon.localhost/backoffice/user/list`) and
    see a list of existing users. Now that we have enabled CRUD for all the sections
    that are required for adding an article, we will continue with the last part of
    this chapter—Article CRUD.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了用户CRUD！你应该能够访问Backoffice中的`Users`部分（`http://www.learning-phalcon.localhost/backoffice/user/list`）并查看现有用户列表。现在我们已经为添加文章所需的所有部分启用了CRUD，我们将继续本章的最后一部分——文章CRUD。
- en: Article CRUD
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文章CRUD
- en: We partially wrote some code for this part. It is probably working for you,
    but you will be changing mostly everything in it. The API controller has already
    been developed, so we can move directly on to `ArticleManager` to refactor it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这部分部分地编写了一些代码。它可能对你来说已经可以工作，但你将主要更改其中的大部分。API控制器已经开发完成，因此我们可以直接进入`ArticleManager`进行重构。
- en: The Controller (API)
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器（API）
- en: 'The code for this controller is similar to that of the rest of the controllers.
    Let''s see what it looks like. Open the file located at `modules/Api/Controllers/ArticlesController.php`,
    clear its content, and write the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个控制器的代码与其它控制器的代码类似。让我们看看它是什么样子。打开位于`modules/Api/Controllers/ArticlesController.php`的文件，清空其内容，并写入以下代码：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The only important thing to pay attention to in this controller is the data
    structure that we expect for `createAction()` and `updateAction()`. Let's continue
    with the next controller.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在此控制器中需要注意的唯一重要事项是我们期望 `createAction()` 和 `updateAction()` 的数据结构。让我们继续下一个控制器。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `addAction()`, `deleteAction()`, and `listAction()` methods have been intentionally
    left out, but you can find them in the source code of this chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`addAction()`、`deleteAction()` 和 `listAction()` 方法被有意地省略了，但您可以在本章的源代码中找到它们。'
- en: The Article controller from the Backoffice module
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后台模块的文章控制器
- en: 'Switch to the `modules/Backoffice/Controllers/` folder, create a new file named
    `ArticleController.php`, and write the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 `modules/Backoffice/Controllers/` 文件夹，创建一个名为 `ArticleController.php` 的新文件，并写入以下代码：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Take a look at `createAction()` and `updateAction()`. Here, we use the ID of
    the authenticated user when we set the value for the `article_user_id` field.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 查看一下 `createAction()` 和 `updateAction()`。在这里，当我们设置 `article_user_id` 字段的值时，我们使用认证用户的
    ID。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Again, methods such as `addAction()`, `deleteAction()`, and `listAction()` have
    been intentionally left out, but you can find them in the source code of this
    chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`addAction()`、`deleteAction()` 和 `listAction()` 等方法被有意地省略了，但您可以在本章的源代码中找到它们。
- en: The Article form
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文章表单
- en: 'This form is similar to the one for categories. Let''s see what it looks like.
    Create a new file named `ArticleForm.php` in the `modules/Core/Forms` directory,
    and write this code in it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此表单与分类表单类似。让我们看看它的样子。在 `modules/Core/Forms` 目录中创建一个名为 `ArticleForm.php` 的新文件，并将此代码写入其中：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We manage the Article translation in the same way as we did for categories.
    As for the article hashtags and article categories, when we edit a record, we
    must somehow retrieve the existing ones and assign them as defaults in the form.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以与分类相同的方式管理文章翻译。至于文章标签和文章分类，当我们编辑记录时，我们必须以某种方式检索现有的标签和分类，并将它们作为表单的默认值分配。
- en: 'We have created the controllers, managers, and forms. What we need now are
    the templates. Switch to `modules/Backoffice/Views/Default/article/` and create
    the three missing files: `add.volt`, `delete.volt`, and `edit.volt`. Here is the
    code for each of them.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了控制器、管理器和表单。我们现在需要的是模板。切换到 `modules/Backoffice/Views/Default/article/`，并创建三个缺失的文件：`add.volt`、`delete.volt`
    和 `edit.volt`。以下是每个文件的代码。
- en: 'The code for `add.volt` is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`add.volt` 的代码如下：'
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After you have created this file, try to access `http://www.learning-phalcon.localhost/backoffice/article/add`.
    You should see the form.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此文件后，尝试访问 `http://www.learning-phalcon.localhost/backoffice/article/add`。您应该会看到表单。
- en: The code in `edit.volt` is the same as that for `add.volt`. Copy it and change
    its form action to `article/update` instead of `article/create`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit.volt` 中的代码与 `add.volt` 中的代码相同。复制它，并将其表单动作更改为 `article/update` 而不是 `article/create`。'
- en: The `delete.volt` file has the same content as all the `delete.volt` files that
    we have created so far. Just copy the content from any of them and change the
    `links` actions to point to `article/delete`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete.volt` 文件与迄今为止我们创建的所有 `delete.volt` 文件内容相同。只需从其中任何一个复制内容，并将 `links`
    动作更改为指向 `article/delete`。'
- en: 'We have already created the `list.volt` file, but we will need to delete its
    contents and write the following code in it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了 `list.volt` 文件，但我们需要删除其内容，并在其中写入以下代码：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: By now, you should have a completely functional administration area. We will
    close this chapter in a few minutes, but before that, we will prettify the UI
    (user interface) a little. Let's start this process by adding the name of the
    authenticated user to the top of the page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该已经拥有了一个完全功能的管理区域。我们将在几分钟内结束本章，但在那之前，我们将稍微美化一下用户界面（UI）。让我们通过将认证用户的名称添加到页面顶部开始这个过程。
- en: 'Open the `modules/Backoffice/Controller/BaseControllers.php` file and append
    the following code to the `afterExecuteRoute()` method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `modules/Backoffice/Controller/BaseControllers.php` 文件，并将以下代码追加到 `afterExecuteRoute()`
    方法中：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this way, we assign the identity of our authenticated user to the views.
    Next, open the `modules/Backoffice/Views/Default/common/topbar.volt` template
    file and append the following code before the `"Sign out" <li>` tag:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们将认证用户的身份分配给视图。接下来，打开 `modules/Backoffice/Views/Default/common/topbar.volt`
    模板文件，并在 `"Sign out" <li>` 标签之前追加以下代码：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can now refresh the page, and you should see the name of the authenticated
    user, as shown here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以刷新页面，应该会看到认证用户的名称，如图所示：
- en: '![The Article form](img/B03522_08_01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![文章表单](img/B03522_08_01.jpg)'
- en: 'Next, instead of having a default blank page, let''s transform it into a simple
    dashboard. Open `modules/Backoffice/Controller/IndexController.php` and modify
    the `indexAction()` method with the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们不再有一个默认的空白页面，而是将其转换成一个简单的仪表板。打开 `modules/Backoffice/Controller/IndexController.php`
    并修改 `indexAction()` 方法，如下所示：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, we simply count the total number of articles, users, hashtags,
    and categories. The template code for `modules/Backoffice/Views/Default/index/index.volt`
    can look like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们只是简单地计算文章、用户、标签和分类的总数。`modules/Backoffice/Views/Default/index/index.volt`
    的模板代码可以看起来像这样：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you refresh the page, you should be able to see the result of this simple
    dashboard, as shown here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刷新页面，你应该能够看到这个简单仪表板的结果，如下所示：
- en: '![The Article form](img/B03522_08_02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![文章表单](img/B03522_08_02.jpg)'
- en: The Article manager
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文章管理器
- en: 'Open the file located at `modules/Core/Manager/ArticleManager.php`, clear its
    contents, and write the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于 `modules/Core/Manager/ArticleManager.php` 的文件，清空其内容，并写入以下代码：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In these first lines, we insert all the files that we need for the CRUD operations:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些第一行中，我们插入所有我们需要用于 CRUD 操作的文件：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We added `$default_data` as a private variable to avoid code repetition. We
    will use it for both the `create()` and `update()` methods:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `$default_data` 添加为一个私有变量以避免代码重复。我们将为 `create()` 和 `update()` 方法使用它：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s try to understand the `create()` method. First, we call the `prepareData()`
    method. This a helper and we also use it for `update()`. Next, we initiate a new
    article object and set the flag for the `article_is_published` field. An article
    needs translations and hashtags and we must assign a user to it. We do this by
    initializing a new object for each translation and hashtag. In the case of a user,
    we need to check whether the user exists in our database:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试理解 `create()` 方法。首先，我们调用 `prepareData()` 方法。这是一个辅助方法，我们也在 `update()` 中使用它。接下来，我们初始化一个新的文章对象，并设置
    `article_is_published` 字段的标志。文章需要翻译和标签，我们必须为它分配一个用户。我们通过为每个翻译和标签初始化一个新的对象来完成这项工作。在用户的情况下，我们需要检查用户是否存在于我们的数据库中：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the preceding code, the `update()` method follows the same logic as the
    `create()` method. But in the following code, we first need to delete the existing
    relations of the hashtags and categories, and create new ones. This method also
    checks whether the article exists in our database:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`update()` 方法遵循与 `create()` 方法相同的逻辑。但在接下来的代码中，我们首先需要删除现有的标签和分类的关系，并创建新的关系。此方法还会检查文章是否存在于我们的数据库中：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `prepareData()` method is a helper that will help us to avoid code repetition
    in the `update()` and `create()` methods.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`prepareData()` 方法是一个辅助方法，它将帮助我们避免在 `update()` 和 `create()` 方法中的代码重复。'
- en: Take a look at the `create()` and `update()` methods. We expect the categories
    and hashtags to be comma-separated values of IDs. If these fields contain values,
    we use the `array_map()` method and apply a trim operation to each ID. In the
    case of `update()`, we always delete the existing hashtags and categories and
    add them again (or add new ones). I use this approach because Phalcon's ORM doesn't
    do it automatically.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下 `create()` 和 `update()` 方法。我们期望分类和标签是 ID 的逗号分隔值。如果这些字段包含值，我们使用 `array_map()`
    方法并对每个 ID 应用修剪操作。在 `update()` 的情况下，我们总是删除现有的标签和分类，然后再次添加（或添加新的）。我之所以使用这种方法，是因为
    Phalcon 的 ORM 不会自动执行此操作。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Important note**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: 'In the official documentation, it says you can delete related records in this
    manner:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方文档中，它说你可以用这种方式删除相关记录：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When using many-to-many relations, as in our case, if you execute the preceding
    code for categories or hashtags, you will end up deleting the hashtag and the
    category only. This will not remove the relation from the intermediate model.
    Also, there is another method for updating related records that is not supported
    anymore due to some strange functionality, but it can still be found in the official
    documentation. Don''t use it:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用多对多关系时，就像我们的情况一样，如果你为分类或标签执行前面的代码，你最终只会删除标签和分类。这不会从中间模型中删除关系。此外，还有一个用于更新相关记录的方法，但由于某些奇怪的功能，它不再被支持，但它仍然可以在官方文档中找到。不要使用它：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We're finally done with this module. In general, there are infinite approaches
    to writing code. In this chapter, I used an approach that I think is easy to understand.
    Feel free to be different and code the way you like. This book is not intended
    to teach you coding, but to teach you Phalcon. You might have noticed that for
    an API, we don't use any validations. You can practice a little and connect your
    forms to the API.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于完成了这个模块。一般来说，编写代码的方法是无限的。在本章中，我使用了一种我认为容易理解的方法。请随意不同，用你喜欢的方式编码。这本书的目的不是教你编程，而是教你Phalcon。你可能已经注意到，对于API，我们没有使用任何验证。你可以稍微练习一下，并将你的表单连接到API。
- en: In the next chapter, we will switch to the `Frontend` module, where we will
    make some small modifications to the API. We will also try to implement a search
    engine based on Elasticsearch ([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch)).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将切换到`前端`模块，在那里我们将对API进行一些小的修改。我们还将尝试基于Elasticsearch（[https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch)）实现一个搜索引擎。
