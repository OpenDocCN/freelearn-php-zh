- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring the RoadRunner Application Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a web application in Laravel, we are used to using a web server
    for the delivery of our web application over the network.
  prefs: []
  type: TYPE_NORMAL
- en: A web server exposes the application via the **HTTP** or **HTTPS** protocol
    and implements functionality that is typically closely related to the delivery
    of resources via the HTTP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: An application server is a somewhat more structured and complex piece of software
    in that it can handle different protocols; it can handle HTTP, as well as lower-level
    protocols such as **TCP**, or other protocols, such as **WebSocket**.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, an application server can implement an articulated worker structure.
    This means that the application server for the execution of the application logic
    delegates its execution to a worker. A worker is an isolated thread that is tasked
    with executing a given task.
  prefs: []
  type: TYPE_NORMAL
- en: Worker management allows applications running via the application server to
    have access to features such as concurrency and parallel task execution.
  prefs: []
  type: TYPE_NORMAL
- en: The application server to be able to manage the various workers must also be
    able to implement load distribution features across workers and must also be able
    to implement proper balancing (using a load balancer).
  prefs: []
  type: TYPE_NORMAL
- en: There are many application servers in the PHP ecosystem, two of which are **RoadRunner**
    and **Swoole**. They are relevant to the Laravel ecosystem because they are directly
    supported by Laravel Octane.
  prefs: []
  type: TYPE_NORMAL
- en: These two solutions have different features; however, both allow Laravel Octane
    to start different workers that will take over the resolution of HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Additional features accessible through Laravel Octane and available only in
    Swoole (and not in RoadRunner) are the ability to execute multiple concurrent
    functions, manage shared data in an optimized manner through special tables, and
    start functions in a scheduled and repetitive mode. We will walk through the additional
    features provided by Swoole in [*Chapter 3*](B17728_03.xhtml#_idTextAnchor048),
    *Configuring the Swoole* *Application Server*.
  prefs: []
  type: TYPE_NORMAL
- en: RoadRunner is perhaps the simplest application server in terms of available
    features, and it is also the easiest to install.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in order to become familiar with the Laravel Octane configuration,
    we will start with using RoadRunner.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to show you how to set up a basic Laravel application,
    add Laravel Octane, start using Octane with RoadRunner, and configure it.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the setup and the configurations are the first steps that allow
    you to control the behavior of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a basic Laravel application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing RoadRunner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Laravel Octane
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching Laravel Octane
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Laravel Octane and RoadRunner advanced configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover the framework and the application server setup (installation
    and configuration).
  prefs: []
  type: TYPE_NORMAL
- en: The assumption is that you have already installed PHP and Composer. We recommend
    you have PHP (at least version 8.0) and Composer updated to the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, we have two main approaches for installing languages and development
    tools. The first one is to install the tools directly in the operating system
    of your machine. The second one is to install the tools in an isolated environment
    such as a virtual machine or Docker.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to follow the instructions and the examples in the book with Docker,
    the assumption is that you have Docker Desktop already installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: For Docker, we will provide you instructions in order to have an image up and
    running with PHP and Composer.
  prefs: []
  type: TYPE_NORMAL
- en: With this approach, you will be able to run commands and follow examples the
    same way, regardless of whether you have Docker or want to run PHP and Composer
    natively.
  prefs: []
  type: TYPE_NORMAL
- en: We will launch commands from the console application (or Terminal Emulator)
    so the expectation is that you are quite familiar with this type of application
    (Terminal, iTerm2, Warp for MacOS, Windows Terminal for Windows, Terminator, xterm,
    GNOME Terminal, Konsole for GNU/Linux, or Alacritty, which is available for all
    operating systems).
  prefs: []
  type: TYPE_NORMAL
- en: Within the terminal emulator, you will need a shell environment, typically Bash
    or ZSH (Z shell). We will use the shell configuration to set some environment
    variables, such as the `PATH` variable. The `PATH` variable specifies the directories
    to be searched to find a command.
  prefs: []
  type: TYPE_NORMAL
- en: Source code
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the source code of the examples used in this chapter in the official
    GitHub repository of this book: [https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch02](https://github.com/PacktPublishing/High-Performance-with-Laravel-Octane/tree/main/octane-ch02).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a basic Laravel application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our aim in this chapter is to configure Laravel Octane with the RoadRunner
    application server. To do that, we have to install the RoadRunner application
    server. However, before that, we must first create a new Laravel application and
    then add and install the Laravel Octane package. In short, to demonstrate how
    to install RoadRunner, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Laravel application from scratch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Laravel Octane package to the new Laravel application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Laravel Octane, executing a specific command provided by the Laravel
    Octane package. The command execution will create a basic configuration, which
    is useful when we start with Laravel Octane. We will show how to install Laravel
    Octane in the *Installing Laravel Octane* section later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting the Laravel installer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Laravel from scratch, you could use the Laravel installer. To globally
    install the Laravel installer, in your terminal emulator, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once Laravel is installed, be sure that your `PATH` variable includes the directory
    where the global composer packages are stored, typically `.composer/vendor/bin/`
    in your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the `PATH` variable persistent and to ensure that it is loaded correctly
    after rebooting your operating system, you can add it to your shell configuration
    file. For example, if you are using Zshell, add this line in your `.``zshrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure that your shell configuration is reloaded correctly and you are
    using Zshell, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you have some doubts, restart the console application (the application you
    are using to launch commands).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check if everything is fine, try to execute the Laravel installer tool with
    the `-V` option via command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you receive an output such as `Laravel Installer 4.2.11`, everything is
    fine; otherwise, you could see an error such as `command not found`. In this case,
    my suggestion is to check the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `laravel` command is present in `~/.composer/vendor/bin/`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `laravel` command is executable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `PATH` variable includes the `~/.``composer/vendor/bin/` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To check whether the Laravel installer command is present and executable, you
    can check it with the classic `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And to see if the permissions include the `x` char, you will see something like
    `-rwxr-xr-x`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the command exists in the right place without executable permission, you
    can fix it with the `chmod` command, adding executable (`+x`) permission to the
    owner (`u`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the command exists and has the right permissions, check if the `PATH` variable
    is correct and includes the `~/.``composer/vendor/bin/` path.
  prefs: []
  type: TYPE_NORMAL
- en: If the `PATH` variable doesn’t include the right path, check that you added
    it to the `PATH` variable and if the `PATH` variable includes the right path,
    be sure to have reloaded the shell environment or, at least, restart your terminal
    emulator.
  prefs: []
  type: TYPE_NORMAL
- en: I wanted to spend a few additional words on this type of check. This type of
    check is useful and will continue to be useful as we add new commands. The existence
    of the command, its permissions, and its reachability are checks that can save
    time if we run into problems running a newly installed command.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let me show you how to install a Laravel application before adding Laravel
    Octane.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a new Laravel web application from scratch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new basic Laravel application, we can use the Laravel installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t have a Laravel installer, you can use the `composer` command to
    install the Laravel application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this basic usage, these commands (`laravel new` and `composer create-project`)
    are pretty similar. They do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the `laravel/laravel` repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `.env` file from `.env.example`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install all dependencies found in `composer.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate optimized autoload files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register or discover any new supported packages via the execution of the `php
    artisan` `package:discover` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish `laravel-assets` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate the application key in the `.``env` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I suggest you use the Laravel command because it has some additional options
    and arguments that allow you to enable some nice features, such as adding Jetstream
    scaffolding, choosing the Livewire stack or Inertia for Jetstream, and enabling
    teams management for Jetstream. All these options, for the goal we currently have,
    are not needed, so for this reason using the first or second command has the same
    result.
  prefs: []
  type: TYPE_NORMAL
- en: So, now you can enter the new `octane-ch2` directory to check your new Laravel
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the internal web server, you can use the `artisan` command provided
    by Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you open the browser at http://127`.0.0.1:8000` you can see the default home
    page of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our Laravel application up and running, it’s time to set up
    the RoadRunner application server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing RoadRunner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RoadRunner is a PHP application server that is mature and stable, so you can
    use it in your production environment. It is written in the **Go** programming
    language, which means that under the hood, RoadRunner uses goroutines and the
    multi-threading capabilities provided by Go. Thanks to its Go implementation,
    RoadRunner runs on the most common operating systems, such as macOS, Windows,
    Linux, FreeBSD, and ARM.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks again to its Go implementation, RoadRunner is released as a binary, so
    the installation process is very simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'RoadRunner is an open source project, so you have access to the source code,
    binaries, and documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code: [https://github.com/roadrunner-server/roadrunner](https://github.com/roadrunner-server/roadrunner)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The binary releases: [https://github.com/roadrunner-server/roadrunner/releases](https://github.com/roadrunner-server/roadrunner/releases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main documentation: [https://roadrunner.dev/docs/readme/2.x/en](https://roadrunner.dev/docs/readme/2.x/en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can obtain RoadRunner in more than one way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just for starting quickly, I’m going to use the Composer method. The Composer
    approach requires two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the RoadRunner CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get RoadRunner binaries via the RoadRunner CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, as a first step, let me install the RoadRunner CLI, according to the official
    documentation available at [https://roadrunner.dev/docs/intro-install](https://roadrunner.dev/docs/intro-install):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are going to add two packages:'
  prefs: []
  type: TYPE_NORMAL
- en: RoadRunner CLI version 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nyholm implementation of **PSR7**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nyholm
  prefs: []
  type: TYPE_NORMAL
- en: 'Nyholm is an open source PHP package that implements the PSR7 standard. The
    source code is here: [https://github.com/Nyholm/psr7](https://github.com/Nyholm/psr7).'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end, the `composer` command adds two lines into the `require` section
    of your `composer.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The mentioned, PSR7 is a standard that defines the PHP interfaces for representing
    HTTP messages and URIs. In this way, if you are going to use a library to manage
    HTTP messages and URIs, and the library implements a PSR7 standard, you know that
    you have some methods with a standardized signature to manage the request. For
    example, you know that you have `getMethod()` to retrieve the HTTP method, and
    the value is a string (because is defined by the standard).
  prefs: []
  type: TYPE_NORMAL
- en: After installing the RoadRunner CLI via Composer, you will find the `rr` executable
    in the `vendor/bin/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check that it’s there, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You will see a file, more or less 3 KB, with executable permissions (denoted
    by the `x` symbol).
  prefs: []
  type: TYPE_NORMAL
- en: 'This executable is the RoadRunner CLI, which allows you to install the RoadRunner
    application server executable. To obtain the executable, you can execute the RoadRunner
    CLI with the `get-binary` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output generated by the command execution will show the version of the
    package, the operating system, and the architecture as shown in the figure below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1: Getting the RoadRunner executable](img/Figure_2.1_B17728.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Getting the RoadRunner executable'
  prefs: []
  type: TYPE_NORMAL
- en: You might have some confusion in that the RoadRunner CLI executable is called
    `rr`, like the RoadRunner executable. What you should know is that the RoadRunner
    CLI is stored in the `vendor/bin` directory, while the RoadRunner application
    server executable is stored in the project root directory. Also, the CLI is about
    3 KB, while the application server is about 50 MB.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2: The two rr executables, the CLI and the application server](img/Figure_2.2_B17728.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: The two rr executables, the CLI and the application server'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, you can run the two executables with the option to show the version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3: The rr versions](img/Figure_2.3_B17728.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: The rr versions'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have installed the `rr` executables (RoadRunner), we can start to
    use it.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the RoadRunner application server (without Octane)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To execute the RoadRunner application server with a basic example, we need
    to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a PHP script called by the application server once an HTTP request hits
    the application server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launch the application server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration file for RoadRunner by default is `.rr.yaml`. It has a lot
    of configuration directives and parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'A minimal configuration file requires a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: The command to launch for each worker instance (`server.command`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The address and port to bind and listen for new HTTP connections (`http.address`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of workers to launch (`http.pool.num_workers`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The level of the log (`logs.level`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of a configuration file with the preceding considerations is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration file, `test-rr.php` is the script to launch for workers,
    `8080` is the port to listen to connections, with `2` workers and `info` for the
    log levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script file for implementing the logic of the workers is `test-rr.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The script does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Includes `vendor/autoload.php`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instances the `worker` object with classes provided by RoadRunner (`RoadRunner\Http\PSR7Worker`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generates a unique ID for showing how the traffic is balanced and delegated
    to the two workers (`$id =` `uniqid('', true)`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Waits for a new connection (`$worker->waitRequest()`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generates a new response (`$worker->respond()`) when a new connection request
    arrives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the configuration file and the preceding worker script, you can launch
    the application server with the `serve` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration, you will see one server started and two workers started
    by the server.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can hit the serve via the `curl` command. The `curl` command is a command
    that sends an HTTP request to a specific URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'In another instance for the terminal emulator (or another tab), launch the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By executing `curl` four times, we will send four different requests to the
    application server to port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the terminal emulator, if you launch the application server, you will see
    the log of the application server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4: The INFO log of the application server](img/Figure_2.4_B17728.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: The INFO log of the application server'
  prefs: []
  type: TYPE_NORMAL
- en: The most relevant thing is that after the first two requests, the elapsed time
    is reduced by at least an order of magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the `elapsed` value, you will see that the first request takes
    20 milliseconds to be executed, while subsequent requests take approximately some
    hundred microseconds (1 millisecond is equivalent to 1,000 microseconds).
  prefs: []
  type: TYPE_NORMAL
- en: The response time in milliseconds (the absolute value) probably depends on multiple
    factors (load, resources, memory, CPU). Take a look at the relative value and
    how much the response time decreases in the next requests. The response times
    are dramatically reduced from a few milliseconds to a few microseconds.
  prefs: []
  type: TYPE_NORMAL
- en: So, we are saying that thanks to the architecture based on workers implemented
    with RoadRunner, we can improve the performance, especially for requests after
    the first request.
  prefs: []
  type: TYPE_NORMAL
- en: But how do we include and use RoadRunner in our Laravel application?
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example uses objects and methods shipped by RoadRunner in a pure
    PHP environment. Now we have to figure out how all of these features/improvements
    could be included in Laravel, especially for all things related to the bootstrap
    of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: This is the goal of Octane. It allows us to use the RoadRunner features while
    hiding the complexity of the integration, the bootstrap process, and the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Laravel Octane
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The script file (`test-rr.php`) and the configuration file (`.rr.yaml`) were
    created so that the dynamics of the operation of RoadRunner can be understood.
    Now, let’s focus on the installation of Laravel Octane. Let’s pick up the discussion
    from the installation of the Laravel application via the `laravel new` command
    and the installation of the RoadRunner executable by running `composer require`
    and then running the `rr get-binaries`. Let me recap quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can install Laravel Octane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can correctly configure Laravel Octane with the `octane:install` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With the latest command, you have to decide whether to use RoadRunner or Swoole.
    For the purpose of this chapter, select RoadRunner. We will cover Swoole in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks performed by `octane:install` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Avoiding commit/push on Git repository RoadRunner files: check and eventually
    fix the `gitignore` file that includes `rr` (the RoadRunner executables) and `.rr.yaml`
    (the RoadRunner configuration file).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring the RoadRunner package is installed in the project. If not, it executes
    the `composer` `require` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring the RoadRunner binary is installed into the project. If not, it executes
    `./vendor/bin/rr get-binary` to download the RoadRunner application server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring the RoadRunner binary is executable (`chmod 755`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking some requirements, such as version 2.x, if the RoadRunner application
    server has already been installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the `OCTANE_SERVER` environment variable in the `.env` file (if it’s
    not already present).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last `octane:install` command will create a `config/octane.php` file and
    will also add a new configuration key to the `.env` file. The new key is named
    `OCTANE_SERVER` and the value is set to `roadrunner`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This value is used in the `config/octane.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: So, with the environment variable, you can control which application server
    you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have installed Laravel Octane, it’s time to launch it.
  prefs: []
  type: TYPE_NORMAL
- en: Launching Laravel Octane
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To launch Laravel Octane, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Once Laravel Octane is started you can visit `http://127.0.0.1:8000` in your
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: Your browser will be shown the classic Laravel welcome page. There are no visual
    differences in the welcome pages of Laravel and Laravel Octane. The big difference
    is the way your application is served via HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can control the execution of Octane with some parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--host`: Default `127.0.0.1`, the IP address the server should bind to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--port`: Default `8000`, the port the server should be available on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--workers`: Default auto, the number of workers that should be available to
    handle requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--max-requests`: Default `500`, the number of requests to process before reloading
    the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, you can launch Octane with just two workers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'So now, open the page at `http://localhost:8000` more than twice (two is the
    number of workers). You can open the page via your browser or by launching `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can see something that we already know because of the previous tests with
    RoadRunner installed without Laravel. The first two requests (two is the number
    of workers) are slower than the next requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following output is related to the log shown by the Laravel Octane server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you launch the server, define the maximum number of requests to process
    (for each worker) before starting the server with the `max-requests` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see a similar output but after six requests (a maximum of three requests
    for two workers), you will see that the message worker has stopped and the response
    after the stopped worker takes the same amount of time as the first two requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Why is restarting the server important? To ensure we prevent any memory leak
    issues due to the long life cycle of the objects (the server and the workers),
    it is a common practice to reset the status. If you are not going to define the
    `max-requests` parameter in the command line, the default is set automatically
    by Laravel Octane to `500`.
  prefs: []
  type: TYPE_NORMAL
- en: In the classic web server scenario (without Laravel Octane), the life cycles
    of all objects related to your application, but especially to the objects automatically
    instantiated and managed by the framework, are confined to each individual request.
    In every single request, all the objects necessary for the framework to work are
    instantiated, and the objects are destroyed when the response is sent back to
    the client. This also explains and helps you understand why the response times
    in a classic framework with a web server are longer than the response times of
    an already initialized worker.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Laravel Octane is launched, we can look at its configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Laravel Octane and RoadRunner advanced configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous section, we can control some parameters during
    the launch of Laravel Octane. This is because you want to change some options,
    such as the number of workers or the port and, like in the next examples, if you
    want to activate the HTTPS protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood, Octane collects parameters from the command line and some Octane
    configuration and starts the RoadRunner process (it starts the `rr` command).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Octane source code, there is a file called `StartRoadRunnerCommand.php`
    that implements a Laravel artisan command with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Looking at this source code helps you understand which parameters are used to
    launch the RoadRunner executable.
  prefs: []
  type: TYPE_NORMAL
- en: With the `-c` option (`$this->configPath()`), an additional configuration file
    is loaded. This means that if there are no basic options managed by Octane that
    match your expectations, you can define them in the `.rr.yaml` configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: The basic parameters managed by Octane (shown in the previous section) are hostname,
    port, worker count, max requests, max execution time for supervisor, the HTTP
    middleware, and the log level.
  prefs: []
  type: TYPE_NORMAL
- en: The RoadRunner configuration file allows you to load special and advanced configurations.
    A classic example is the option to allow local RoadRunner instances to listen
    to and receive HTTPS requests.
  prefs: []
  type: TYPE_NORMAL
- en: Why do you need to serve HTTPS locally in the development environment? You might
    need to activate the HTTPS protocol because some browser features are available
    only when the page is served via HTTPS or localhost. These features are geolocation,
    device motion, device orientation, audio recording, notifications, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, during local development, we are used to serving pages via localhost.
    In this context, there is no need to serve the traffic via HTTPS. However, if
    we wanted to expose pages to the local network so that we could test our web application
    via a mobile device connected to the local network, we would have to make sure
    that the service is reachable via a valid local network address and thus localhost
    is not sufficient. In this case (for those special browser features), HTTPS is
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: Or another scenario, wherein your page served locally is included in a web page
    (via iFrame or as assets) and the host page is served via HTTPS. In this case,
    including assets or including a page delivered by HTTP in an HTTPS context raises
    a security exception in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to configure Octane to serve HTTPS requests, you have to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install a tool such as **mkcert** that allows you to create and manage certificates.
    Because of the design and implementation of HTTPS, the protocol requires public/private
    certificates to work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create certificates for localhost or addresses you want.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the location of the CA certificate and key storage location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To better understand what is needed, let’s look at RoadRunner’s configuration
    for HTTPS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The two mandatory fiels and one optional file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Cert`: The cert file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Key`: The cert key file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Root_ca`: The root certificate authority file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the first two files, HTTPS works but a warning is raised by your browser
    (there’s not a valid certificate, because the certificate is self-signed). Filling
    only the two first parameters, the certificate is evaluated as self-signed and,
    typically, browsers tend not to consider such certificates trustable.
  prefs: []
  type: TYPE_NORMAL
- en: With the third file, the browser allows you to browse via HTTPS without any
    warnings (the certificate is valid).
  prefs: []
  type: TYPE_NORMAL
- en: So, first, you have to install **mkcert**. The Git repository of mkcert is [https://github.com/FiloSottile/mkcert](https://github.com/FiloSottile/mkcert).
  prefs: []
  type: TYPE_NORMAL
- en: mkcert is an open source tool available for all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The instructions to install mkcert and create certificates for macOS are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Windows, you could use the Chocolatey package manager ([https://chocolatey.org/](https://chocolatey.org/)
    ) and use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: For GNU/Linux, you can use the package manager provided by your distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you have two new files in the project directory: `localhost-key.pem` and
    `localhost.pem`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: I strongly recommend listing these two files in the `.gitignore` file prevent
    them from being pushed into your Git repository (if it is used).
  prefs: []
  type: TYPE_NORMAL
- en: You can use the first one in your `.rr.yaml` file for the `key` parameter and
    the second one for the `cert` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fill the `root_ca` parameter, you have to see where CA files are stored
    via the `mkcert` command (with the `CAROOT` option):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This command will show you the directory where the CA files are stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the name of CA files, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can fill the `root_ca` parameter with the full path of the `rootCA.pem`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Firefox and you are still getting the self-signed certificate
    warning, install `certutil` (with Homebrew, `certutil` is included in the `nss`
    package, so execute `brew install nss`) and then execute `mkcert -install` again
    (and restart the Firefox browser).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can start Octane with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser at the URL defined in the `address` parameter. According
    to the parameters used in the last example (the RoadRunner configuration in the
    `.rr.yaml` file), you should open your browser and open the page at this URL:
    `https://127.0.0.1:8893`. (note that `https://` is the protocol instead of `http://`)'
  prefs: []
  type: TYPE_NORMAL
- en: So, now you are familiar with installing RoadRunner with Laravel Octane, starting
    the Octane server, and accessing the advanced configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the installation and configuration of Laravel Octane
    with the RoadRunner application server. We took a look at the benefit we get from
    the usage of RoadRunner and how to enable advanced features such as the HTTPS
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to do the same things with Swoole. We will
    see the additional features Swoole has, compared with RoadRunner, and in [*Chapter
    4*](B17728_04.xhtml#_idTextAnchor065), *Building a Laravel Octane Application*,
    we will start to look at the code for the web application using the Octane service,
    which is now up and running.
  prefs: []
  type: TYPE_NORMAL
