- en: Chapter 2. Building Your First Zend Framework Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In this chapter, we are going to create our first Zend Framework 2.0 project;
    we will be reviewing some of the key aspects of building a ZF2 MVC Application
    by creating modules, controllers, and views. We will be creating our own custom
    module in Zend Framework which will be enhanced further in subsequent chapters
    of this book.*'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you get started with setting up your first ZF2 Project, make sure that
    you have the following software installed and configured in your development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP Command Line Interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git**: Git is needed to check out source code from various [github.com](http://github.com)
    repositories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composer**: Composer is the dependency management tool used for managing
    PHP dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following commands will be useful for installing the necessary tools to
    setup a ZF2 Project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install PHP Command Line Interface:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**$ sudo apt-get install php5-cli**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To install Git:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**$ sudo apt-get install git**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To install Composer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**$ curl -s https://getcomposer.org/installer | php**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ZendSkeletonApplication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ZendSkeletonApplication` provides a sample skeleton application that can be
    used by developers as a starting point to get started with Zend Framework 2.0\.
    The skeleton application makes use of ZF2 MVC, including a new module system.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZendSkeletonApplication` can be downloaded from GitHub ([https://github.com/zendframework/ZendSkeletonApplication](https://github.com/zendframework/ZendSkeletonApplication)).'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a Zend Framework project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up a new Zend Framework project, we will need to download the latest
    version of `ZendSkeletonApplication` and set up a virtual host to point to the
    newly created Zend Framework project. The steps are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to a folder location where you want to set up the new Zend Framework
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clone the `ZendSkeletonApplication` app from GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – creating a Zend Framework project](img/1929OS_02_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In some Linux configurations, necessary permissions may not be available to
    the current user for writing to `/var/www`. In such cases, you can use any folder
    that is writable and make necessary changes to the virtual host configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install dependencies using Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows how Composer downloads and installs the necessary
    dependencies:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating a Zend Framework project](img/1929OS_02_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Before adding a virtual host entry we need to set up a hostname entry in our
    hosts file so that the system points to the local machine whenever the new hostname
    is used. In Linux this can be done by adding an entry to the `/etc/hosts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In Windows, this file can be accessed at `%SystemRoot%\system32\drivers\etc\hosts`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following line to the `hosts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final `hosts` file should look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating a Zend Framework project](img/1929OS_02_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Our next step would be to add a virtual host entry on our web server; this
    can be done by creating a new virtual host''s configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This new virtual host filename could be different for you depending upon the
    web server that you use; please check out your web server documentation for setting
    up new virtual hosts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, if you have Apache2 running on Linux, you will need to create the
    new virtual host file in `/etc/apache2/sites-available` and enable the site using
    the command `a2ensite comm-app.local`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following configuration to the virtual host file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using a different path for checking out the `ZendSkeletonApplication`
    project make sure that you include that path for both `DocumentRoot` and `Directory`
    directives.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After configuring the virtual host file, the web server needs to be restarted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the installation is completed, you should be able to open `http://comm-app.local`
    on your web browser. This should take you to the following test page :![Time for
    action – creating a Zend Framework project](img/1929OS_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Test rewrite rules**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In some cases, `mod_rewrite` may not have been enabled in your web server by
    default; to check if the URL redirects are working properly, try to navigate to
    an invalid URL such as `http://comm-app.local/12345`; if you get an Apache 404
    page, then the `.htaccess` rewrite rules are not working; they will need to be
    fixed, otherwise if you get a page like the following one, you can be sure of
    the URL working as expected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating a Zend Framework project](img/1929OS_02_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully created a new ZF2 project by checking out `ZendSkeletonApplication`
    from GitHub and have used Composer to download the necessary dependencies including
    Zend Framework 2.0\. We have also created a virtual host configuration that points
    to the project's `public` folder and tested the project in a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Alternate installation options**'
  prefs: []
  type: TYPE_NORMAL
- en: We have seen just one of the methods of installing `ZendSkeletonApplication`;
    there are other ways of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use Composer to directly download the skeleton application and create
    the project using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use a recursive Git clone to create the same project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://framework.zend.com/downloads/skeleton-app](http://framework.zend.com/downloads/skeleton-app)'
  prefs: []
  type: TYPE_NORMAL
- en: Zend Framework 2.0 – modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Zend Framework, a module can be defined as a unit of software that is portable
    and reusable and can be interconnected to other modules to construct a larger,
    complex application.
  prefs: []
  type: TYPE_NORMAL
- en: Modules are not new in Zend Framework, but with ZF2, there is a complete overhaul
    in the way modules are used in Zend Framework. With ZF2, modules can be shared
    across various systems, and they can be repackaged and distributed with relative
    ease. One of the other major changes coming into ZF2 is that even the main application
    is now converted into a module; that is, the application module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the key advantages of Zend Framework 2.0 modules are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Self-contained, portable, reusable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightweight and fast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Phar packaging and Pyrus distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zend Framework 2.0 – project folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The folder layout of a ZF2 project is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zend Framework 2.0 – project folder structure](img/1929OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '| Folder name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `config` | Used for managing application configuration. |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | Used as a temporary storage location for storing application data
    including cache files, session files, logs, and indexes. |'
  prefs: []
  type: TYPE_TB
- en: '| `module` | Used to manage all application code. |'
  prefs: []
  type: TYPE_TB
- en: '| `module/Application` | This is the default application module that is provided
    with `ZendSkeletonApplication`. |'
  prefs: []
  type: TYPE_TB
- en: '| `public` | Serves as an entry point to the application; the website''s document
    root points here. All web resources including CSS files, images, and JavaScripts
    are stored here. |'
  prefs: []
  type: TYPE_TB
- en: '| `vendor` | Used to manage common libraries that are used by the application.
    Zend Framework is also installed in this folder. |'
  prefs: []
  type: TYPE_TB
- en: '| `vendor/zendframework` | Zend Framework 2.0 is installed here. |'
  prefs: []
  type: TYPE_TB
- en: Time for action – creating a module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our next activity will be about creating a new `Users` module in Zend Framework
    2.0\. The `Users` module will be used for managing users including user registration,
    authentication, and so on. We will be making use of `ZendSkeletonModule` provided
    by Zend, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the application''s `module` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clone `ZendSkeletonModule` into a desired module name, in this case it is `Users`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the checkout is complete, the folder structure should look like the following
    screenshot:![Time for action – creating a module](img/1929OS_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit `Module.php`; this file will be located in the `Users` folder under modules
    (`CommunicationApp/module/Users/module.php`) and change the namespace to `Users`.
    Replace `namespace ZendSkeletonModule;` with `namespace Users;`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following folders can be removed because we will not be using them in our
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`* Users/src/ZendSkeletonModule`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`* Users/view/zend-skeleton-module`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have installed a skeleton module for Zend Framework; this is just an empty
    module, and we will need to extend this by creating custom controllers and views.
    In our next activity, we will focus on creating new controllers and views for
    this module.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Creating a module using ZFTool**'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZFTool` is a utility for managing Zend Framework applications/projects, and
    it can also be used for creating new modules; in order to do that, you will need
    to install `ZFTool` and use the `create module` command to create the module using
    `ZFTool`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Read more about ZFTool at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://framework.zend.com/manual/2.0/en/modules/zendtool.introduction.html](http://framework.zend.com/manual/2.0/en/modules/zendtool.introduction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: MVC layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The fundamental goal of any MVC Framework is to enable easier segregation of
    three layers of the MVC, namely, model, view, and controller. Before we get to
    the details of creating modules, let''s quickly try to understand how these three
    layers work in an MVC Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: The model is a representation of data; the model also holds the
    business logic for various application transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: The view contains the display logic that is used to display the various
    user interface elements in the web browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: The controller controls the application logic in any MVC application;
    all actions and events are handled at the controller layer. The controller layer
    serves as a communication interface between the model and the view by controlling
    the model state and also by representing the changes to the view. The controller
    also provides an entry point for accessing the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the new ZF2 MVC structure, all the models, views, and controllers are grouped
    by modules. Each module will have its own set of models, views, and controllers,
    and will share some components with other modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zend Framework module – folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The folder structure of Zend Framework 2.0 module has three vital components—the
    configurations, the module logic, and the views. The following table describes
    how contents in a module are organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `config` | Used for managing module configuration |'
  prefs: []
  type: TYPE_TB
- en: '| `src` | Contains all module source code, including all controllers and models
    |'
  prefs: []
  type: TYPE_TB
- en: '| `view` | Used to store all the views used in the module |'
  prefs: []
  type: TYPE_TB
- en: Time for action – creating controllers and views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created the module, our next step would be having our own
    controllers and views defined. In this section, we will create two simple views
    and will write a controller to switch between them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the module location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the folder for controllers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `IndexController` file, `< ModuleName >/src/<ModuleName>/Controller/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `IndexController` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will do the following actions; if the user visits the home
    page, the user is shown the default view; if the user arrives with an action `register`,
    the user is shown the `new-user` template; and if the user arrives with an action
    set to `login`, then the `login` template is rendered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created the controller, we will have to create necessary views
    to render for each of the controller actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the folder for views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the views folder, `<Module>/view/<module-name>/index`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following view files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`index`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new-user`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For creating the `view/users/index/index.phtml` file, use the following code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For creating the `view/users/index/login.phtml` file, use the following code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For creating the `view/users/index/new-user.phtml` file, use the following
    code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now created a new controller and views for our new Zend Framework module;
    the module is still not in a shape to be tested. To make the module fully functional
    we will need to make changes to the module's configuration, and also enable the
    module in the application's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Zend Framework module – configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zend Framework 2.0 module configuration is spread across a series of files
    which can be found in the skeleton module. Some of the configuration files are
    described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Module.php`: The Zend Framework 2 module manager looks for the `Module.php`
    file in the module''s root folder. The module manager uses the `Module.php` file
    to configure the module and invokes the `getAutoloaderConfig()` and `getConfig()`
    methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoload_classmap.php`: The `getAutoloaderConfig()` method in the skeleton
    module loads `autoload_classmap.php` to include any custom overrides other than
    the classes loaded using the standard autoloader format. Entries can be added
    or removed to the `autoload_classmap.php` file to manage these custom overrides.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config/module.config.php`: The `getConfig()` method loads `config/module.config.php`;
    this file is used for configuring various module configuration options including
    routes, controllers, layouts, and various other configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action – modifying module configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section will make configuration changes to the `Users` module to enable
    it to work with the newly created controller and views using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Autoloader configuration** – The default autoloader configuration provided
    by the `ZendSkeletonModule` needs to be disabled; this can be done by editing
    `autoload_classmap.php` and replacing it with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Module configuration** – The module configuration file can be found in `config/module.config.php`;
    this file needs to be updated to reflect the new controllers and views that have
    been created, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Controllers** – The default controller mapping points to the `ZendSkeletonModule`;
    this needs to be replaced with the mapping shown in the following snippet:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Views** – The views for the module have to be mapped to the appropriate view
    location. Make sure that the view uses lowercase names separated by a hyphen (for
    example, `ZendSkeleton` will be referred to as zend-skeleton):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Routes** – The last module configuration is to define a route for accessing
    this module from the browser; in this case we are defining the route as `/users`,
    which will point to the `index` action in the `Index` controller of the `Users`
    module:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'After making all the configuration changes as detailed in the previous sections,
    the final configuration file, `config/module.config.php`, should look like the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Application configuration** – Enable the module in the application''s configuration—this
    can be done by modifying the application''s `config/application.config.php` file,
    and adding `Users` to the list of enabled modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test the module in a web browser, open `http://comm-app.local/users/` in
    your web browser; you should be able to navigate within the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The module home page is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – modifying module configuration](img/1929OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The registration page is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – modifying module configuration](img/1929OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have modified the configuration of `ZendSkeletonModule` to work with the
    new controller and views created for the `Users` module. Now we have a fully-functional
    module up and running using the new ZF module system.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the knowledge to create and configure own modules, your next
    task would be to set up a new `CurrentTime` module. The requirement for this module
    is to render the current time and date in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time: 14:00:00 GMT Date: 12-Oct-2012**'
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – Zend Framework 2.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What is the tool used by `ZendSkeletonApplication` for managing dependencies
    in PHP?
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Composer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Command Line Interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pyrus
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What is the filename of a module's configuration file?
  prefs: []
  type: TYPE_NORMAL
- en: '`<App>/module/<Module>/config.inc`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<App>/<Module>/config/config.php`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<App>/module/<Module>/module.config.php`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<App>/module/<Module>/config/module.config.php`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now learned about setting up a new Zend Framework project using Zend's
    skeleton application and module. In our next chapters, we will be focusing on
    further development on this module and extending it into a fully-fledged application.
  prefs: []
  type: TYPE_NORMAL
