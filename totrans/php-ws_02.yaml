- en: 2\. Types and Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 类型与运算符
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: By the end of this chapter, you will be able to use the different data types
    in PHP to store and work with data; create and use arrays; implement the concept
    of multidimensional arrays; work with operators to evaluate the values of operations;
    and perform type casting to convert variables from one type to another.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用PHP的不同数据类型来存储和处理数据；创建和使用数组；实现多维数组的概念；使用运算符来评估操作值；以及执行类型转换以将变量从一种类型转换为另一种类型。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the last chapter, we covered how to work with PHP's templating engine to
    write information to web pages, how to work with the interactive shell on the
    command line, and what variables are and their importance.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了如何使用PHP的模板引擎将信息写入网页，如何在命令行上使用交互式外壳，以及变量及其重要性。
- en: This chapter will follow on and build on these concepts. We will start by going
    over PHP's data types, followed by an introduction to arrays, what they are, how
    to use them, and the different types of arrays that are possible. Along the way,
    functions built into PHP that enable our code to execute specific actions will
    also be covered.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将在此基础上继续深入。我们将从回顾PHP的数据类型开始，然后介绍数组，它们是什么，如何使用它们，以及可能的不同类型的数组。在此过程中，还将介绍PHP中内置的函数，这些函数使我们的代码能够执行特定的操作。
- en: What are Data Types?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是数据类型？
- en: 'Values assigned to variables in PHP will be of a set data type. The following
    are the eight primitive data types:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中分配给变量的值将具有一组数据类型。以下是有八个原始数据类型：
- en: Strings – A simple text-based value
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串 – 一个基于文本的值
- en: Integers – Hold a numeric value, which is a whole number
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数 – 持有一个数值，它是一个整数
- en: Floats – Hold a numeric value; can be a whole number or decimals
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数 – 持有一个数值；可以是整数或小数
- en: Booleans – Hold a single value equating to `true` or `false` (`1` or `0` is
    the numeric value of `true` and `false`)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值 – 持有一个等于 `true` 或 `false` 的单一值（`true` 和 `false` 的数值为 `1` 或 `0`）
- en: Arrays – Hold multiple values or other arrays within itself
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组 – 在其内部可以持有多个值或其他数组
- en: Objects – Hold a more complex data structure
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象 – 持有一个更复杂的数据结构
- en: Resource – Holds a resource reference; for example, the reference of a function
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源 – 持有一个资源引用；例如，函数的引用
- en: NULL – This value actually means there is no value
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NULL – 这个值实际上表示没有值
- en: Let's now learn about the different types in more detail.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在更详细地了解不同的类型。
- en: Integers
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整数
- en: Integers are whole numbers. Typical examples of working with integers are when
    specifying quantities in a shopping cart, or as an ID when working with databases
    (*Chapter 7*, *Data Persistence*), or any time you need to perform math operations;
    for example, `$number = 1024`. Here, `$number` is of the integer type holding
    the value `1024`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 整数是整数。使用整数的典型例子包括在购物车中指定数量，或者在处理数据库时作为ID（*第7章*，*数据持久性*），或者任何需要执行数学操作的时候；例如，`$number
    = 1024`。在这里，`$number` 是整数类型，持有值 `1024`。
- en: Strings
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: A string is made up of characters and numbers. There is no limit to how long
    a string can be, but you may be restricted when storing strings in a database
    or other storage areas.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串由字符和数字组成。字符串的长度没有限制，但在数据库或其他存储区域中存储字符串时可能会有所限制。
- en: In its simplest form, a string can be created by putting single or double quotes
    around a series of characters. These can be any characters, such as letters, numbers,
    or special characters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最简单的形式中，字符串可以通过在一系列字符周围放置单引号或双引号来创建。这些可以是任何字符，例如字母、数字或特殊字符。
- en: Single and Double-Quoted Strings
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单引号和双引号字符串
- en: 'Strings can contain variables as well as text. Single and double-quoted strings
    are the same except for one variation. Any variables in a single-quoted string
    will display the actual variable, and not its value. For instance, consider the
    following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串可以包含变量以及文本。单引号和双引号字符串除了一个变体外是相同的。单引号字符串中的任何变量将显示其实际变量，而不是其值。例如，考虑以下内容：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will print `Hello $name` instead of `Hello Dave`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印 `Hello $name` 而不是 `Hello Dave`。
- en: 'Now, consider the following example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑以下示例：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will print `Hello Dave`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印 `Hello Dave`。
- en: Thus, we can see how the double quotes display the values of the variable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到双引号如何显示变量的值。
- en: Also, if you want to have a single-quote character in a single-quoted string,
    you will have to escape it using the backslash character. Backslash characters
    also need to be escaped.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你想在单引号字符串中包含单引号字符，你必须使用反斜杠字符来转义它。反斜杠字符也需要被转义。
- en: 'This example demonstrates the use of a backslash to escape single quotes inside
    a single-quoted string:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子演示了在单引号字符串内部使用反斜杠来转义单引号的使用：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will notice the `//` characters in the preceding example. This means it's
    a comment. Comments are useful when you want to make notes explaining what the
    intention of the code is and to make the code readable. The comment is and will
    be ignored by the script.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到前一个例子中的`//`字符。这意味着它是一个注释。当你想要记录解释代码意图并使代码易于阅读时，注释非常有用。注释会被脚本忽略。
- en: There are single-line comments such as those above the `//` characters that
    will add a comment to the current line.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有单行注释，如上面`//`字符之上的注释，它们会在当前行添加注释。
- en: 'To use multiple-line comments, the syntax is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用多行注释，语法如下：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'PHP supports the use of variables inside strings when using double quotes.
    Take this example, where a number is assigned to `$number` and is then displayed
    inside a string:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: PHP支持在双引号字符串中使用变量。以下是一个例子，其中将一个数字赋值给`$number`，然后在字符串中显示它：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s now take a look at some examples of double-quoted strings. We will use
    the same strings we used in the preceding examples relating to single quotes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一些双引号字符串的例子。我们将使用与前面关于单引号的例子中相同的字符串：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Did you notice any difference in the outputs of the single and double-quoted
    strings? Observe the output of the second string. The value of the `$number` variable
    got printed instead when we used double quotes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到单引号和双引号字符串输出之间的任何差异了吗？观察第二个字符串的输出。当我们使用双引号时，打印的是`$number`变量的值：
- en: '![Figure 2.1: Output of the string examples'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1：字符串示例的输出'
- en: '](img/C14196_02_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_02_01.jpg)'
- en: 'Figure 2.1: Output of the string examples'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：字符串示例的输出
- en: Heredoc and Nowdoc Syntaxes
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heredoc和Nowdoc语法
- en: 'At times, there may be a need to declare a large string having large blocks
    of text. Using single and double-quoted methods, things can get messy pretty quickly.
    To help with this, PHP has two more methods for declaring strings. These are called
    the **heredoc** and **nowdoc** syntaxes. Using these syntaxes, a string can span
    multiple lines. Moreover, you do not need to worry about escaping any quotes.
    Here is an example of a string declared using the heredoc syntax:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，可能需要声明一个包含大量文本的大字符串。使用单引号和双引号方法，事情可能会很快变得混乱。为了帮助解决这个问题，PHP提供了两种声明字符串的方法。这些被称为**heredoc**和**nowdoc**语法。使用这些语法，字符串可以跨越多行。此外，你不需要担心转义任何引号。以下是一个使用heredoc语法声明的字符串示例：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Don''t worry if it looks strange. If you print it, the following output will
    be displayed on screen:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果看起来很奇怪，不要担心。如果你打印它，屏幕上会显示以下输出：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code snippet, we first declared a variable, `$number`, and
    set its value to 100\. After that, we declared a `$longString` variable. Note
    the `<<<` operator at the beginning followed by the word `STRING`. `STRING` is
    called a token or identifier here. The `<<<` operator and the token should be
    at the very start, while, using heredoc, there should not be any content on that
    line. The actual string starts from the next line. You can write in multiple lines.
    When you are done, the token is written again in a separate line and without any
    spaces before it. If the `STRING` token at the end is not on a separate line,
    PHP will throw you an error.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们首先声明了一个变量`$number`并将其值设置为100。之后，我们声明了一个`$longString`变量。注意开头的`<<<`运算符后面跟着的单词`STRING`。在这里，`STRING`被称为标记或标识符。`<<<`运算符和标记应该位于非常开始的位置，而使用heredoc时，该行不应有任何内容。实际的字符串从下一行开始。你可以写多行。当你完成时，标记再次在单独的一行上写下，且前面没有空格。如果末尾的`STRING`标记不在单独的一行上，PHP会抛出错误。
- en: 'For example, take a look at the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看下面的内容：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have also used double quotes in the string, and we do not need to escape
    them. Also, note that the variable's value is printed. This means that the heredoc
    syntax behaves like a double-quoted string.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也在字符串中使用了双引号，我们不需要转义它们。此外，请注意变量的值被打印出来。这意味着heredoc语法的行为类似于双引号字符串。
- en: 'This means that you can use any word as the string token but, often, an **End
    of Thread** (**EOT**) name is used. For example, take a look at the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以使用任何单词作为字符串标记，但通常使用**线程结束**（**EOT**）名称。例如，看看以下内容：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A common convention when using heredoc is to use `EOT` to denote the characters
    to start and end the block. Everything in between will be stored in a variable.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用heredoc时，一个常见的约定是使用`EOT`来表示开始和结束块的字符。块之间的所有内容都将存储在变量中。
- en: Variables can also be used without any special configuration. You simply need
    to display them like `$name EOT`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 变量也可以在不进行任何特殊配置的情况下使用。你只需像`$name EOT`一样显示它们即可。
- en: The preceding command is now stored in a variable called `$str`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令现在被存储在一个名为`$str`的变量中。
- en: 'Let''s now have a look at a string declared using the nowdoc syntax. We will
    use the same string used in the previous example and change it to the nowdoc syntax:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看使用nowdoc语法声明的字符串。我们将使用前面示例中的相同字符串，并将其更改为nowdoc语法：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Everything is the same as in the case of heredoc, except for one difference.
    The token or identifier has single quotes around it, which makes it the `nowdoc`
    syntax. It behaves like single-quoted strings and, hence, no variable parsing
    is done inside, which is why it will produce the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都与heredoc的情况相同，只有一个区别。标记或标识符被单引号包围，这使得它是`nowdoc`语法。它表现得像单引号字符串，因此，内部不会进行变量解析，这就是为什么它会产生以下输出：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Unlike heredoc, the `$number` variable has not been parsed and displays as is
    on screen. This is ideal for large blocks of static text.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与heredoc不同，`$number`变量没有被解析，直接显示在屏幕上。这对于大块静态文本来说非常理想。
- en: Floats
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮点数
- en: A float is a number that has decimal values. Floats can be useful when needing
    to store money in a decimal format, for example, for shopping cart systems.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数是具有小数位的数字。当需要以小数格式存储金钱，例如购物车系统时，浮点数非常有用。
- en: 'Floats (also referred to as floating-point numbers or doubles) can be declared
    as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数（也称为浮点数或双精度浮点数）可以声明如下：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have declared four variables in the preceding code block. The `$w` variable
    has a positive value, while `$x` has a negative value. PHP also supports declaration
    using scientific notation. The last two variable declarations, `$y` and `$z`,
    are declared using it. The value of `$y` is `1700`, and the value of `$z` is `0.08`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们声明了四个变量。`$w`变量具有正值，而`$x`具有负值。PHP还支持使用科学记数法进行声明。最后两个变量声明`$y`和`$z`就是使用科学记数法声明的。`$y`的值是`1700`，而`$z`的值是`0.08`。
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Here, `e` means "ten to the power of".
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`e`表示“10的幂”。
- en: Boolean
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔值
- en: 'A Boolean is the simplest type available. It can have only one of two values:
    `true` or `false`. Booleans are used to check whether a condition is true or false,
    as in whether a variable has an intended value. You will see this in upcoming
    exercises and learn in further detail in *Chapter 3*, *Control Statements*, you
    will learn where conditionals are used. Declaring Booleans is easy. Consider the
    following examples:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值是最简单的类型。它只能有两个值之一：`true`或`false`。布尔值用于检查条件是否为真或假，例如，检查变量是否具有预期的值。你将在接下来的练习中看到这一点，并在*第三章*，*控制语句*中进一步详细了解条件的使用。声明布尔值很简单。考虑以下示例：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Exercise 2.1: Using Simple Data Types'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.1：使用简单数据类型
- en: 'So far, we have covered strings, integers, floats, and Booleans. Let''s now
    put this into practice in terms of how you might use them. In this exercise, we
    will calculate the total number of items purchased by a customer in a single order
    and print the total. We can say that a given order is complete only if the final
    total is greater than, or equal to, 25\. Here are the steps required to perform
    this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了字符串、整数、浮点数和布尔值。现在让我们将这些应用到实践中，看看你可能会如何使用它们。在这个练习中，我们将计算一个客户在单个订单中购买的商品总数并打印出来。我们可以这样说，一个订单只有在最终总金额大于或等于25时才算完成。以下是执行此操作所需的步骤：
- en: Create a new file named `order.php` inside the `chapter2` folder (if you haven't
    already created it, please create a folder now and call it `chapter2`).
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter2`文件夹内创建一个名为`order.php`的新文件（如果您还没有创建，请现在创建一个文件夹并命名为`chapter2`）。
- en: 'Next, open PHP and define the following variables. This will allow us to simulate
    an order being processed. We will define a `$str` variable that holds the text
    that is to be printed when displaying the sum, while the `$order` variable will
    hold the cost of the item(s) purchased. We will define the `$additional` variable
    to hold the additional charges added to the bill. The `$orderTotal` variable will
    hold the amount of the total bill, and a Boolean variable, `$complete`, will indicate
    whether the order is complete. Set this to `false` by default:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开PHP并定义以下变量。这将允许我们模拟订单处理过程。我们将定义一个`$str`变量，用于在显示总和时打印文本，而`$order`变量将保存购买的商品的成本。我们将定义`$additional`变量来保存添加到账单的额外费用。`$orderTotal`变量将保存总账单金额，一个布尔变量`$complete`将指示订单是否完成。默认将其设置为`false`：
- en: '[PRE14]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With these variables defined, we can start the order simulation. First, let''s
    add `$additional` to `$order` and store the result in `$orderTotal`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义了这些变量后，我们可以开始订单模拟。首先，让我们将`$additional`添加到`$order`中，并将结果存储在`$orderTotal`中：
- en: '[PRE15]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, using an `if` statement (don''t worry, we haven''t covered this yet,
    but it will be covered in detail in the next chapter; for now, just think `if
    (expression)` then perform the given steps), establish whether `$orderTotal` is
    equal to `25`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`if`语句（别担心，我们还没有介绍这个，但将在下一章中详细介绍；现在，只需考虑`if (expression)`然后执行给定的步骤），确定`$orderTotal`是否等于`25`：
- en: '[PRE16]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The order has been matched to `25`, so change `$complete` to `true` and then
    display a message to the customer:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订单已匹配到`25`，因此将`$complete`设置为`true`，并向客户显示一条消息：
- en: '[PRE17]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Putting it all together gives us the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们得到以下结果：
- en: '[PRE18]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, open the command line and navigate to the `chapter2` folder. Run the following
    command on the command line:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开命令行并导航到`chapter2`文件夹。在命令行上运行以下命令：
- en: '[PRE19]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, go to the browser and open `http://localhost:8085/order.php`.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，转到浏览器并打开`http://localhost:8085/order.php`。
- en: 'You will see the following output on your screen:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将在屏幕上看到以下输出：
- en: '![Figure 2.2: Output of the order'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.2: Order output'
- en: '](img/C14196_02_02.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/C14196_02_02.jpg](img/C14196_02_02.jpg)'
- en: 'Figure 2.2: Output of the order'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：订单输出
- en: In this exercise, we saw how we can use different data types to perform calculations
    and make decisions on that basis. We will cover the `if` condition in *Chapter
    3*, *Control Statements*, in detail, thus providing more clarity on how different
    decisions could be taken depending on the conditions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了如何使用不同的数据类型来进行计算并在其基础上做出决策。我们将在第3章“控制语句”中详细讲解`if`条件，从而更清晰地说明根据不同条件可以做出哪些决策。
- en: Arrays
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组
- en: An array is another data structure that is available in PHP. Unlike a normal
    variable, which stores a single value, an array is a data structure that can hold
    a collection of items. You can think of an array as a list of items. These items
    can be of any type, such as a string, a number, a Boolean, or even another array.
    Each item can be of a different type. The first could be a string, while the second
    could be an integer. The third can be a Boolean or another array. This allows
    for lots of flexibility.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是PHP中可用的一种数据结构。与存储单个值的普通变量不同，数组是一种可以存储项目集合的数据结构。你可以把数组想象成一个项目列表。这些项目可以是任何类型，如字符串、数字、布尔值，甚至是另一个数组。每个项目可以是不同类型的。第一个可以是字符串，而第二个可以是整数。第三个可以是布尔值或另一个数组。这提供了很大的灵活性。
- en: 'Suppose you need to store nine names. Rather than creating nine different variables,
    we can just create an array variable with nine elements. Each element of an array
    can be accessed using an index. This index can either be a numerical or a string.
    Numerical indexes always start from 0\. So, an array having 9 elements will have
    indexes from 0 to 8\. The first element will have an index of 0, the second will
    have an index of 1, and so on. The final element will have an index of 8\. As
    you will see in the examples, these indexes are used to access the values from
    the array. Items can be added to, and removed from, the array using PHP''s built-in
    array functions, which we will see later in this section:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要存储九个名字。而不是创建九个不同的变量，我们只需创建一个包含九个元素的数组变量。数组的每个元素都可以通过索引访问。这个索引可以是数字或字符串。数字索引始终从0开始。因此，包含9个元素的数组将具有从0到8的索引。第一个元素将具有索引0，第二个将具有索引1，依此类推。最后一个元素将具有索引8。正如你将在示例中看到的那样，这些索引用于从数组中访问值。可以使用PHP的内置数组函数向数组中添加项目或从数组中删除项目，我们将在本节稍后介绍：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This displays the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示以下输出：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To display `Jack`, which has an index of `3`, you can print it as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示索引为`3`的`Jack`，你可以按以下方式打印：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Indexed and Associative Arrays
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引数组和关联数组
- en: 'There are two types of arrays in PHP – indexed arrays and associative arrays.
    Indexed arrays have numerical indexes starting from 0, while associative arrays
    have string indexes. Let''s take a look at an example of an indexed array:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: PHP中有两种类型的数组——索引数组和关联数组。索引数组从0开始的数字索引，而关联数组有字符串索引。让我们看看一个索引数组的示例：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We have declared an array named `$arrDays`. To create this array, we have used
    PHP's `[]` function and, inside it, we have provided a comma-separated list of
    seven days of the week. Each of these is called an element of an array. Then,
    we have used the `print_r()` function to print this array.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了一个名为`$arrDays`的数组。为了创建这个数组，我们使用了PHP的`[]`函数，并在其中提供了一个逗号分隔的每周七天列表。这些每个都称为数组的元素。然后，我们使用`print_r()`函数来打印这个数组。
- en: Note
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`print_r()` is used to look at the contents of a variable. This could be a
    single value, an array, or an object. For instance, the following is the outcome
    of printing the contents of the `$arrDays` array to the screen.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`print_r()`用于查看变量的内容。这可以是单个值、数组或对象。例如，以下是将`$arrDays`数组的内容打印到屏幕上的结果。'
- en: 'The following is the output of the preceding snippet will look as follows.
    It will show both the indexes and values of all the array keys as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段的输出将如下所示。它将显示所有数组键的索引和值，如下所示：
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding output shows the array with its indexes and the value of each
    element at that index. Let''s now try to access the individual elements of the
    array. The following code shows how to access individual array elements:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示了数组及其索引和每个索引处的元素值。现在让我们尝试访问数组的各个元素。以下代码显示了如何访问单个数组元素：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Running the preceding code will produce the following output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码将产生以下输出：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Remember that array indexes start from 0\. Hence, to get the first element of
    the array, we used square brackets after the variable name and passed `0` to it.
    Similarly, we passed `4` to get the fifth element.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 记住数组索引是从0开始的。因此，要获取数组的第一个元素，我们在变量名后使用方括号，并将`0`传递给它。同样，我们传递`4`来获取第五个元素。
- en: 'PHP provides a `count` function that can be used to determine the length of
    an array. Here is how to use it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: PHP提供了一个`count`函数，可以用来确定数组的长度。以下是它的用法：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We have used the same `$arrDays` array as earlier. After declaring the array,
    we print the length of the array using the `count` function.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了之前相同的`$arrDays`数组。在声明数组后，我们使用`count`函数打印数组的长度。
- en: 'Moving on to associative arrays, these are similar to indexed arrays, but the
    indexes in associative arrays are provided by us. This makes it easier to access
    items as you do not have to remember indexes. The following is an example of how
    to create an associative array:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是关联数组，这些数组与索引数组类似，但关联数组的索引是由我们提供的。这使得访问项目变得更容易，因为你不需要记住索引。以下是如何创建关联数组的示例：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This results in the following output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下输出：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding code, we have declared a variable, `$heroInfo`. Unlike indexed
    arrays, here, we are providing the indexes explicitly. `name`, `superheroName`,
    `city`, and `creator` are all indexes. The `=>` operator is used after the index
    to assign a value at that index. After assigning, we print the array using the
    `print_r` function.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们声明了一个变量`$heroInfo`。与索引数组不同，在这里，我们明确提供了索引。`name`、`superheroName`、`city`和`creator`都是索引。在索引后面使用`=>`运算符来在该索引处分配值。分配后，我们使用`print_r`函数打印数组。
- en: 'Like indexed arrays, we will use the index to fetch an element from the array.
    The following is the code used to access elements from the `$heroInfo` array:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与索引数组一样，我们将使用索引从数组中获取元素。以下是从`$heroInfo`数组中访问元素的代码：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the preceding code, we are accessing the `name` and `superHero` indexes
    to find respective values. The code will produce the output mentioned here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们通过访问`name`和`superHero`索引来找到相应的值。这段代码将产生以下输出：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To recap, index arrays are arrays where the indexes are numeric. For instance,
    if you have an array of people with their names as the values, the index will
    be the automatic index assigned to each entry starting from 0:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，索引数组是索引为数字的数组。例如，如果你有一个包含人名作为值的数组，索引将是自动分配给每个条目的索引，从0开始：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This produces the following output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下输出：
- en: '![Figure 2.3: Displaying the contents of the array'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3：显示数组内容'
- en: '](img/C14196_02_03.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_02_03.jpg)'
- en: 'Figure 2.3: Displaying the contents of the array'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：显示数组内容
- en: 'Associative arrays, on the other hand, use named keys instead of indexed ones.
    For instance, you could have an array of people with their name as the keys and
    their job title as the values:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，关联数组使用命名键而不是索引键。例如，你可以有一个包含人员的数组，其中人员的名字作为键，职位名称作为值：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This produces the following output:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 2.4: Printing the job titles'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4：打印职位名称'
- en: '](img/C14196_02_04.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_02_04.jpg)'
- en: 'Figure 2.4: Printing the job titles'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：打印职位名称
- en: Adding and Removing Items from an Array
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从数组中添加和删除项目
- en: An array is a stack data structure. Items can be added to the array or removed.
    There are multiple ways to add and remove items, the following section will show
    how to add an item to an array using an array index approach and to use a named
    key approach. The `array_push` function will be explained and how it can be used
    to push an item to an array. `array_pop` can be used to remove an item from an
    array, this will be demonstrated.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是一种栈数据结构。项目可以添加到数组或从中删除。有多种添加和删除项目的方法，以下部分将展示如何使用数组索引方法添加项目到数组，以及如何使用命名键方法。将解释
    `array_push` 函数及其如何用于将项目推送到数组。`array_pop` 可以用来从数组中删除项目，这将在演示中展示。
- en: PHP provides multiple array functions. These functions can be used to add items
    to an array, remove items from an array, and several other tasks besides.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 提供了多个数组函数。这些函数可以用来向数组中添加项目，从数组中删除项目，以及执行其他多项任务。
- en: 'There are two ways in which elements can be added to an array. Here is the
    first method:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以向数组中添加元素。以下是第一种方法：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We have an array, `$animals`, that contains three items. Notice that we have
    used square brackets after the variable name and have assigned a value, `Wolf`,
    to it. This will insert this item at the end of the array and a new index will
    be created. You can confirm this by printing the array, which will give the following
    output:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含三个元素的数组 `$animals`。注意，我们在变量名后面使用了方括号，并将值 `Wolf` 分配给它。这将在此元素末尾插入此项目，并创建一个新的索引。你可以通过打印数组来确认这一点，这将给出以下输出：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the case of associative arrays, you will also have to provide the key name.
    Here is an example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在关联数组的案例中，你还需要提供键名。以下是一个示例：
- en: '[PRE36]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here, we have added a new key publisher to the `$heroInfo` array. This will
    append the value, `Marvel Comics`, to the end of the array and the array will
    appear as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们向 `$heroInfo` 数组添加了一个新的键 publisher。这将把值 `Marvel Comics` 添加到数组的末尾，数组将如下所示：
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Another way to add elements to an array is to use the `array_push` function.
    The following is an example of the `array_push` function. We will use the same
    array used previously:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 向数组中添加元素的另一种方式是使用 `array_push` 函数。以下是一个 `array_push` 函数的示例。我们将使用之前使用的相同数组：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This produces the following output:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `array_push` function takes two parameters. The first is the name of the
    array, and the second is the value we want to insert. It will also append the
    value `Wolf` to the end of the array.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`array_push` 函数接受两个参数。第一个是数组的名称，第二个是我们想要插入的值。它还会将值 `Wolf` 添加到数组的末尾。'
- en: 'The `array_pop` function can be used to remove an element from the end of an
    array; for example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`array_pop` 函数可以用来从数组的末尾删除一个元素；例如：'
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This will produce the following output:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE41]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `unset` method is another way to remove an element, but this allows you
    to specify the key to be removed:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`unset` 方法是另一种删除元素的方式，但它允许你指定要删除的键：'
- en: '[PRE42]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This will produce the following output:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE43]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: A multidimensional array is an array containing one or more arrays. This is
    often used when nesting arrays; for instance, you have a school's array that holds
    arrays of schools in each array where the name and location of the school would
    be stored. Let's elaborate with an exercise.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 多维数组是一个包含一个或多个数组的数组。这通常在嵌套数组时使用；例如，你有一个包含每个学校数组的学校数组，其中每个数组存储学校的名称和位置。让我们通过一个练习来详细说明。
- en: 'Exercise 2.2: Creating a Multidimensional Array'
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.2：创建多维数组
- en: 'As we saw, arrays are a collection of items. These items can be of any type.
    Hence, an array can contain an integer, a float, a Boolean, or any other type.
    This also means that an array can also be an element of an array. Arrays with
    other arrays inside them are called multidimensional arrays. An array that does
    not have any array inside it is termed as being single or one-dimensional. Let''s
    perform an exercise where we will create a multidimensional array and then access
    the items inside it:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，数组是一系列项目的集合。这些项目可以是任何类型。因此，一个数组可以包含整数、浮点数、布尔值或任何其他类型。这也意味着一个数组也可以是数组的一个元素。包含其他数组的数组被称为多维数组。没有包含任何数组的数组被称为单维或一维数组。让我们做一个练习，我们将创建一个多维数组，然后访问其内部的项：
- en: Create a new file named `array.php` inside the `chapter2` folder.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `chapter2` 文件夹内创建一个名为 `array.php` 的新文件。
- en: 'Declare an array, `heroInfo`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个数组，`heroInfo`：
- en: '[PRE44]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Use the `pre` HTML tag to format the output:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pre` HTML 标签来格式化输出：
- en: '[PRE45]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Open the command line and navigate to the `chapter2` folder.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行并导航到 `chapter2` 文件夹。
- en: 'Run the following command on the command line:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中运行以下命令：
- en: '[PRE46]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, go to the browser and open `http://localhost:85/array.php`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开浏览器并访问 `http://localhost:85/array.php`：
- en: 'You will see the following output on your screen:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将在屏幕上看到以下输出：
- en: '![Figure 2.5: Printing the elements of an array'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图2.5：打印数组元素'
- en: '](img/C14196_02_05.jpg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图C14196_02_05.jpg](img/C14196_02_05.jpg)'
- en: 'Figure 2.5: Printing the elements of an array'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.5：打印数组元素
- en: The preceding code declares an array named `$heroInfo` that has four elements.
    All the elements are themselves associative arrays. Each of these arrays has two
    keys, `heroName` and `weapon`. We then print the contents of this array. We have
    used the `pre` HTML tag so that the output is formatted nicely on screen.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码声明了一个名为 `$heroInfo` 的数组，它有四个元素。所有这些元素本身都是关联数组。每个数组都有两个键，`heroName` 和 `weapon`。然后我们打印了这个数组的所有内容。我们使用了
    `pre` HTML 标签，以便在屏幕上格式化输出。
- en: Let's now try to access some elements from this array.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们尝试从这个数组中访问一些元素。
- en: 'Add the following lines after the closing `pre` tag:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pre` 标签关闭后添加以下行：
- en: 'Using the array, extract the hero names and weapons. To do this, specify the
    array name followed by the index, and then the subindex, in other words, `$heroInfo[3][''heroName'']`:'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用数组，提取英雄名称和武器。为此，指定数组名称后跟索引，然后是子索引，换句话说，`$heroInfo[3]['heroName']`：
- en: '[PRE47]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Save the file and refresh the browser page. You should see an output likes
    the following screenshot:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并刷新浏览器页面。你应该会看到以下截图所示的内容：
- en: '![Figure 2.6: Printing the results'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.6：打印结果'
- en: '](img/C14196_02_06.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图C14196_02_06.jpg](img/C14196_02_06.jpg)'
- en: 'Figure 2.6: Printing the results'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：打印结果
- en: The preceding array has four elements. Hence, `$heroInfo[3]` will give us the
    fourth element of this array. The fourth element is an array in itself, with `heroName`
    being `Captain America` and `weapon` being a `Shield`. To get the hero name, we
    use the square brackets again and pass a weapon as the key. Therefore, `$heroInfo[3][
    'heroName']` gives us the value `Captain America`. Similarly, `$heroInfo[3]['weapon']`
    gives us `Shield`. We have done the same for the third element of the array in
    the last line of code. Deeper nesting is also possible for multidimensional arrays.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的数组有四个元素。因此，`$heroInfo[3]` 将给出这个数组的第四个元素。第四个元素本身也是一个数组，其中 `heroName` 是 `美国队长`，`weapon`
    是一个 `盾牌`。要获取英雄名称，我们再次使用方括号，并传递一个 `weapon` 作为键。因此，`$heroInfo[3]['heroName']` 给出的是值
    `美国队长`。同样，`$heroInfo[3]['weapon']` 给出的是 `盾牌`。我们在代码的最后一行也做了同样的处理。多维数组也可以有更深层次的嵌套。
- en: In this exercise, we looked at multidimensional arrays and how they can be used
    to store multiple arrays and display their contents and extract specific items
    from the array.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们研究了多维数组以及如何使用它们来存储多个数组、显示其内容以及从数组中提取特定项。
- en: Scalar Types
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标量类型
- en: Scalar type declaration is either coercive (no need to be specified explicitly)
    or strict (type hinted strictly). By default, types are coercive.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 标量类型声明可以是强制性的（无需显式指定）或严格的（严格类型提示）。默认情况下，类型是强制性的。
- en: Coercive means that PHP will coerce a number to an integer even if it's a string.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 强制转换意味着即使是一个字符串，PHP也会将其强制转换为整数。
- en: Take the following example. Here, we have a function called number that's been
    type hinted to only accept integers.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例。这里，我们有一个名为 `number` 的函数，它被类型提示为只接受整数。
- en: 'In this example, a string is being passed. When running PHP in coercive mode
    (this is on by default), this will work and print `1` to the screen:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，正在传递一个字符串。当以强制模式运行PHP（这是默认开启的）时，这将工作并打印`1`到屏幕上：
- en: '[PRE48]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'To facilitate strict mode, a single `declare` directive is placed at the top
    of the file containing the following:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于严格模式，在包含以下内容的文件顶部放置一个单独的`declare`指令：
- en: '[PRE49]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, run the example again in strict mode:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在严格模式下再次运行示例：
- en: '[PRE50]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This produces an error as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下错误：
- en: '[PRE51]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This is because, in strict mode, a string cannot be cast to an integer.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在严格模式下，字符串不能被转换为整数。
- en: Note
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Type hinting is covered in *Chapter 4*, *Functions*.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示在**第4章**，**函数**中有所介绍。
- en: This forces strict data types, which means that they cannot be changed during
    the script life cycle.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这强制执行严格数据类型，这意味着它们在脚本生命周期内不能被更改。
- en: Type Conversion
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型转换
- en: PHP does not require us to explicitly declare the type of a variable. The type
    of a variable is set when it is assigned a value.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: PHP不需要我们显式声明变量的类型。变量的类型是在它被赋值时设置的。
- en: But there are times when we need to change the type of a variable. Sometimes,
    we have `float` values in the form of a string, and we want to use them as floats
    in our code. This is typical when accepting values from end users. Suppose a user
    has filled a float value in a form. While saving it to a database, you will have
    to change it from a string, which is how the initial values are stored, to a float
    if the database column type is `float`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 但有时我们需要改变变量的类型。有时，我们以字符串的形式有`float`值，我们希望将它们作为浮点数在我们的代码中使用。这在接受最终用户输入时很典型。假设用户在一个表单中填写了一个浮点值。当将其保存到数据库时，你必须将其从字符串（这是初始值存储的方式）转换为浮点数，如果数据库列类型是`float`。
- en: 'To achieve this, type casting is used. Consider the following example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，使用了类型转换。考虑以下示例：
- en: '[PRE52]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: First, we have declared a variable, `$x`, which is a string having a value of
    `13.3333`. Then, we use PHP's `var_dump` function to display the type and the
    value of `$x`. After that, we use PHP's cast float (to cast a data type on a variable,
    set the data type in parentheses before the `$x` variable or float) to change
    the type of the `$x` variable and assign it to `$y`. After this, we again use
    the `var_dump` function to display the type and value of `$y`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明了一个变量，`$x`，它是一个值为`13.3333`的字符串。然后，我们使用PHP的`var_dump`函数来显示`$x`的类型和值。之后，我们使用PHP的cast
    float（在变量上转换数据类型，在`$x`变量之前设置数据类型，括号内）来改变`$x`变量的类型并将其赋值给`$y`。之后，我们再次使用`var_dump`函数来显示`$y`的类型和值。
- en: 'Running the preceding code will generate the following output:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码将生成以下输出：
- en: '[PRE53]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You can see that the type of variable, `$y`, has now changed to float and its
    value is now floating number `13.333` instead of string `13.333`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到变量`$y`的类型已更改为浮点，其值现在是浮点数`13.333`而不是字符串`13.333`。
- en: 'Here is a list of all the casts that are available in PHP:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是PHP中所有可用的类型转换列表：
- en: (`int`) – integer
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`int`) – 整数
- en: (`bool`) – Boolean
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`bool`) – 布尔
- en: (`float`) – float (also known as "floats," "doubles," or "real numbers")
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`float`) – 浮点数（也称为“浮点数”、“双精度浮点数”或“实数”）
- en: (`string`) – string
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`string`) – 字符串
- en: (`array`) – array
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`array`) – 数组
- en: (`object`) – object
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`object`) – 对象
- en: (`unset`) – NULL (NULL means there is no value)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`unset`) – NULL（NULL表示没有值）
- en: Let's have a look at some more examples of different types and understand the
    details behind them.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看更多不同类型的示例，并了解它们背后的细节。
- en: 'Exercise 2.3: Converting a Boolean to an Integer'
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.3：将布尔值转换为整数
- en: 'In this exercise, we will take in Boolean variable and convert it to an integer,
    thus demonstrating the concept of type casting:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将接受布尔变量并将其转换为整数，从而演示类型转换的概念：
- en: 'Create a PHP file called `convertbooleanint.php` inside the `chapter2` folder.
    Open the `php` tag. Display a heading, `Boolean to Int`, and declare two variables
    containing `true` and `false`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter2`文件夹内创建一个名为`convertbooleanint.php`的PHP文件。打开`php`标签。显示一个标题，`布尔转整数`，并声明两个包含`true`和`false`的变量：
- en: '[PRE54]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add another heading and use `var_dump` to look at the value of `$trueValueBool`
    and `$falseValueBool`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个标题，并使用`var_dump`查看`$trueValueBool`和`$falseValueBool`的值：
- en: '[PRE55]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, add another heading, and this time change the variables to be integers
    by casting them to `int`. Then, use `var_dump` to look at their updated values:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加另一个标题，这次通过类型转换将变量改为整数。然后，使用`var_dump`查看它们的更新值：
- en: '[PRE56]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This will produce the following output:'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE57]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This exercise demonstrated how to take Booleans and use casting to change their
    data types to integers.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习演示了如何获取布尔值并使用类型转换将它们的数据类型转换为整数。
- en: 'Exercise 2.4: Converting an Integer to a String'
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.4：将整数转换为字符串
- en: 'In this exercise, we will do the opposite and convert an integer to a Boolean:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将做相反的操作，将整数转换为布尔值：
- en: 'Create a PHP file called `convertintstring.php` inside the `chapter2` folder.
    Open the `php` tag. Display a heading, `int to string`, and declare a variable
    holding an integer called `$number`:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter2`文件夹内创建一个名为`convertintstring.php`的PHP文件。打开`php`标签。显示一个标题，`int to string`，并声明一个名为`$number`的整数变量：
- en: '[PRE58]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Display another heading and use `var_dump` to look at the contents of `$number`:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示另一个标题，并使用`var_dump`查看`$number`的内容：
- en: '[PRE59]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This time, change the data type of `$number` to a string and assign this to
    a new variable called `$stringValue`, and then dump that using `var_dump`:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，将`$number`的数据类型更改为字符串，并将其分配给一个名为`$stringValue`的新变量，然后使用`var_dump`输出它：
- en: '[PRE60]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'This gives the following output:'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '[PRE61]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We started with an integer, `$number`, set its value to another variable, and
    then prefixed it with (a string) to set its data type. We then dumped its contents
    using `var_dump` to examine the contents. This technique can be used to examine
    variables to ensure that they are the desired data type.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个整数`$number`开始，将其值设置到另一个变量中，然后使用（一个字符串）前缀来设置其数据类型。然后我们使用`var_dump`输出其内容以检查内容。这种技术可以用来检查变量以确保它们是所需的数据类型。
- en: 'PHP also provides a series of `is_datatype()` functions:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: PHP还提供了一系列`is_datatype()`函数：
- en: '`is_array`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_array`'
- en: '`is_bool`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_bool`'
- en: '`is_callable`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_callable`'
- en: '`is_countable`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_countable`'
- en: '`is_double`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_double`'
- en: '`is_float`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_float`'
- en: '`is_int`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_int`'
- en: '`is_integer`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_integer`'
- en: '`is_iterable`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_iterable`'
- en: '`is_long`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_long`'
- en: '`is_null`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_null`'
- en: '`is_numeric`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_numeric`'
- en: '`is_object`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_object`'
- en: '`is_real`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_real`'
- en: '`is_resource`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_resource`'
- en: '`is_scalar`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_scalar`'
- en: '`is_string`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_string`'
- en: 'These can be used to determine which data type they use:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以用来确定它们使用的数据类型：
- en: '[PRE62]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This returns a Boolean value indicating whether the given variable matches the
    data type of the function.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回一个布尔值，指示给定的变量是否与函数的数据类型匹配。
- en: 'Exercise 2.5: Converting Centimeters to Meters'
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.5：将厘米转换为米
- en: 'In this exercise, we will create a script that will take three arguments from
    the command line: a name, a number in meters, and another number in centimeters.
    These two numbers together will represent the user''s height. For example, a user
    called Jo whose height is 1 m 65 cm would enter "Jo 1 65." For the output, we
    will convert the centimeters to meters and print it along with the name. Observe
    the following steps:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个脚本，该脚本将从命令行获取三个参数：一个名字，一个以米为单位的数字，以及另一个以厘米为单位的数字。这两个数字加起来将代表用户的高度。例如，一个名叫Jo，身高1米65厘米的用户将输入"Jo
    1 65。"对于输出，我们将厘米转换为米，并打印出来，同时显示名字。观察以下步骤：
- en: Create a file named `activity-height.php` inside the `chapter2` folder.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter2`文件夹内创建一个名为`activity-height.php`的文件。
- en: 'First, open PHP, collect the arguments from the command line, and then assign
    these to variables. To collect the variables, `$argv` can be used. This is a command
    used to collect the variables in this context; they are known as arguments. The
    meters and centimeters should be cast to `int`. This can be done using (`int`)
    `$arg` followed by the index. For example, `(int) $argv[2]`:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开PHP，从命令行收集参数，并将这些参数分配给变量。为了收集变量，可以使用`$argv`。这是一个在此上下文中收集变量的命令；它们被称为参数。米和厘米应该被转换为`int`。这可以通过使用（`int`）`$arg`后跟索引来完成。例如，（`int`)
    `$argv[2]`：
- en: '[PRE63]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Next, convert centimeters to meters by using (`float`) and then divide the
    centimeters by `100`:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用（`float`）将厘米转换为米，然后除以`100`：
- en: '[PRE64]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now, add the height in meter to the result centimeters to meters:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将米的高度加到结果厘米上：
- en: '[PRE65]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Finally, display the results:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，显示结果：
- en: '[PRE66]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Open the Terminal, navigate to the `chapter2` folder, and then run the following
    command at the command line:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到`chapter2`文件夹，然后在命令行中运行以下命令：
- en: '[PRE67]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You should see the output on your Terminal just like in the following screenshot:'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在终端上看到以下截图中的输出：
- en: '![Figure 2.7: Printing the height'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.7：打印高度'
- en: '](img/C14196_02_07.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.7：打印高度'
- en: 'Figure 2.7: Printing the height'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：打印高度
- en: Now, let's try to understand the code. We have declared three variables – `$name`,
    `$heightMeters`, and `$heightCentiMeters`. Since we will be taking 3 values from
    the command line, we have used PHP's predefined `$argv` array to get these values
    using the indexes `1`, `2`, and `3`. We started from index `1` because `$argv[0]`
    is always the script name, which will be `activity-height.php` in this case. Note
    that we have used the integer cast for `$heightMeters` and `$heightCentiMeters`.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试理解这段代码。我们声明了三个变量 - `$name`、`$heightMeters`和`$heightCentiMeters`。由于我们将从命令行获取3个值，我们使用了PHP的预定义`$argv`数组，通过索引`1`、`2`和`3`来获取这些值。我们从索引`1`开始，因为`$argv[0]`总是脚本名称，在这种情况下将是`activity-height.php`。请注意，我们为`$heightMeters`和`$heightCentiMeters`使用了整数转换。
- en: After getting the values of variables, we converted the height in centimeters
    to meters by dividing the figure by `10` and then stored the resulting value in
    the `$cmToMeter` variable. On the last line, we display the result as required.
    The reason casting was needed here was to ensure that the data is of the correct
    data type. For instance, an array could have been passed. By setting the data
    type, the script told it what data type must be set and, if it cannot be set,
    it will throw an error.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取变量的值之后，我们将高度从厘米转换为米，通过将数值除以`10`，然后将结果存储在`$cmToMeter`变量中。在最后一行，我们按要求显示结果。这里需要类型转换的原因是为了确保数据是正确的数据类型。例如，可能传递了一个数组。通过设置数据类型，脚本告诉它必须设置哪种数据类型，如果无法设置，它将抛出一个错误。
- en: In this example, you saw how to divide two values to convert meters to centimeters.
    This is an example of an arithmetic operation. Let's now take a look at some more
    examples of operators.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你看到了如何通过除以两个值来将米转换为厘米。这是一个算术运算的例子。现在，让我们看看更多运算符的例子。
- en: Operators and Expressions
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符和表达式
- en: An operator in PHP is something that takes one or more values or expressions
    and applies an operation to give a result that is either a value or another expression.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，运算符是某种可以接受一个或多个值或表达式，并应用一个操作以给出结果，该结果可以是值或另一个表达式。
- en: 'PHP divides the operators into the following groups:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: PHP将运算符分为以下几组：
- en: Arithmetic operators
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术运算符
- en: String operators
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串运算符
- en: Bitwise operators
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位运算符
- en: Assignment operators
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: Comparison operators
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较运算符
- en: Increment/decrement operators
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量/减少运算符
- en: Logical operators
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: Array operators
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组运算符
- en: Conditional assignment operators
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件赋值运算符
- en: Arithmetic Operators
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算符
- en: Arithmetic operators are used to perform math operations, for example, addition,
    subtraction, division, and multiplication.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符用于执行数学运算，例如，加法、减法、除法和乘法。
- en: 'There is the `+` operator. This takes different numbers separated by a `+`
    operator and will add the values together:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`+`运算符。它将不同的数字通过`+`运算符分隔开来，并将这些值相加：
- en: '[PRE68]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This will give us `26` as the output.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出输出结果为`26`。
- en: 'There is the `-` operator. This takes different numbers separated by a `–`
    operator and will subtract the values:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`-`运算符。它将不同的数字通过`-`运算符分隔开来，并将减去这些值：
- en: '[PRE69]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This will give us `22` as the output.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出输出结果为`22`。
- en: 'There is the `*` operator. This takes different numbers separated by a `*`
    operator and will display the product:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`*`运算符。它将不同的数字通过`*`运算符分隔开来，并将显示它们的乘积：
- en: '[PRE70]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This will give us `48` as the output.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出输出结果为`48`。
- en: 'There is the `/` operator. This takes different numbers separated by a `/`
    operator and will print the result:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`/`运算符。它将不同的数字通过`/`运算符分隔开来，并将打印结果：
- en: '[PRE71]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This will give us `12` as the output.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出输出结果为`12`。
- en: 'The `%` (modulo) operator is used to calculate the remainder of the division
    of two given numbers:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`%`（取模）运算符用于计算两个给定数字除法的余数：'
- en: '[PRE72]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: This will give us `4` as the output.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出输出结果为`4`。
- en: String Operators
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串运算符
- en: 'String operators have concatenation operators and concatenation assignment
    operators. Concatenation means adding one or more variables to an existing variable.
    For instance, let''s say we have the following:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串运算符有连接运算符和连接赋值运算符。连接意味着将一个或多个变量添加到现有变量中。例如，假设我们有以下：
- en: '[PRE73]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now, we want to display these items together using concatenation:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要通过连接来一起显示这些项目：
- en: '[PRE74]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Concatenation uses the `.` notation – we can join multiple variables this way.
    In this example, we separate the two variables with a space. Notice the notation:
    a `.''` followed by a space, and a `''.` to add the required space between the
    words.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 连接使用 `.` 语法 - 我们可以通过这种方式连接多个变量。在这个例子中，我们用空格分隔两个变量。注意语法：一个 `.` 后跟一个空格，然后是一个 `.`
    以在单词之间添加所需的空间。
- en: 'Concatenation assignment means appending a variable to an existing one:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 连接赋值意味着将一个变量追加到现有变量上：
- en: '[PRE75]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The output is as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 2.8: Demonstrating string concatenation'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.8：演示字符串连接'
- en: '](img/C14196_02_08.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_02_08.jpg)'
- en: 'Figure 2.8: Demonstrating string concatenation'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：演示字符串连接
- en: As you can see, using the `.=` notation, the `$str` variable is appended to
    the `$result` variable.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用 `.=` 语法，`$str` 变量被追加到 `$result` 变量。
- en: Bitwise Operators
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位运算符
- en: Bitwise operators allow evaluation and manipulation of specific bits within
    an integer. In this case, the integer is converted to bits (binary) for faster
    calculations.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 位运算符允许对整数中的特定位进行评估和操作。在这种情况下，整数被转换为位（二进制）以进行更快的计算。
- en: 'Take two variables, `$a` and `$b`. They can be evaluated with these conditions:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 取两个变量，`$a` 和 `$b`。它们可以用以下条件进行评估：
- en: '[PRE76]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The output is as follows:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE77]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The `$a && $b` expression will return `1` on calculating the result of AND of
    the last bits of both operands. The `$a || $b` expression will perform OR of the
    last bits of both operands and will return `1`.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`$a && $b` 表达式在计算两个操作数的最后一位的 AND 结果时将返回 `1`。`$a || $b` 表达式将执行两个操作数的最后一位的 OR
    操作，并将返回 `1`。'
- en: The result of `2` is the total number of binary bits that are in either `$a`
    or in `$b`, but excluding the bits that exist in both `$a` and `$b`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`2` 的结果是 `$a` 或 `$b` 中存在的二进制位的总数，但排除了 `$a` 和 `$b` 中都存在的位。'
- en: Note
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the decimal to binary conversion, you can take a look
    at [https://packt.live/2B0M2XK](https://packt.live/2B0M2XK).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于十进制到二进制转换的信息，您可以查看 [https://packt.live/2B0M2XK](https://packt.live/2B0M2XK)。
- en: Assignment Operators
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: 'When assigning a value to a variable using `=`, this constitutes an assignment
    operator:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `=` 为变量赋值时，这构成了一个赋值运算符：
- en: '[PRE78]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Comparison Operators
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较运算符
- en: To compare two values, the comparison operator is used. There are two common
    comparison operators – `==`, meaning equal to, and `!=`, meaning not equal to.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较两个值，使用比较运算符。有两种常见的比较运算符 - `==`，表示等于，和 `!=`，表示不等于。
- en: Note
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The assignment operator (`=`) is used to assign a value. It cannot be used for
    performing comparison operations, since comparing whether a value is the same
    as another requires the use of the `==` operator. To establish whether two variables
    are identical, in other words, the same type, use the identical `===` operator.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值运算符（`=`）用于赋值。它不能用于执行比较操作，因为比较一个值是否与另一个值相同需要使用 `==` 运算符。为了确定两个变量是否相同，换句话说，具有相同的类型，使用相同的
    `===` 运算符。
- en: 'Here is an example:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE79]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The output is as follows:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 2.9: Demonstrating the use of comparison operators'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.9：演示比较运算符的使用'
- en: '](img/C14196_02_09.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_02_09.jpg)'
- en: 'Figure 2.9: Demonstrating the use of comparison operators'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：演示比较运算符的使用
- en: Increment/Decrement Operators
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增量/减少运算符
- en: 'To increment a value, use the `++` operator. This will increment the value
    by one. Alternatively, using `+` and a number will increment a value by that number.
    For example, `+3` will increment by `3`:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 要增加一个值，使用 `++` 运算符。这将值增加一。或者，使用 `+` 和一个数字将值增加该数字。例如，`+3` 将增加 `3`：
- en: '[PRE80]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'To decrement a value, the process is the same, but with `–`:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 要减少一个值，过程相同，但使用 `–`：
- en: '[PRE81]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Logical Operators
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: Here, we will look at logical operators.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将探讨逻辑运算符。
- en: The `and` operator performs the logical conjunction of two expressions. It returns
    the Boolean value `true` if both the expressions evaluate to `true`. The `&&`
    operator is another way of saying `and`. The `OR` operator returns the Boolean
    value `true` if either of the two operands evaluates to `true`, otherwise it returns
    `false`. The `||` operator is another way of saying `or`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`and` 运算符执行两个表达式的逻辑合取。如果两个表达式都评估为 `true`，则返回布尔值 `true`。`&&` 运算符是 `and` 的另一种说法。`OR`
    运算符在两个操作数中的任何一个评估为 `true` 时返回布尔值 `true`，否则返回 `false`。`||` 运算符是 `or` 的另一种说法。'
- en: 'The `!` operator means NOT. It can be used to check whether an expression does
    not match. For instance, consider the following:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`!` 运算符表示非。它可以用来检查一个表达式是否不匹配。例如，考虑以下：'
- en: '[PRE82]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Array Operators
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组运算符
- en: 'The PHP array operators are used to compare arrays:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 数组运算符用于比较数组：
- en: '`==` means equal to (the values of two variables match). Consider the following
    example:'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`==` 表示等于（两个变量的值匹配）。考虑以下示例：'
- en: '[PRE83]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: This returns `true` if the value of `$num1` is equal to the value of `$num2`.
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 `$num1` 的值等于 `$num2` 的值，则返回 `true`。
- en: '`===` means identical to (the two variables are the same type and value):'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`===` 表示等于（两个变量具有相同的类型和值）：'
- en: '[PRE84]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: This returns `true` if the value and the data type of `$num1` are equal to the
    value and data type of `$num2`.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 `$num1` 的值和数据类型等于 `$num2` 的值和数据类型，则返回 `true`。
- en: '`!==` means not equal to (the values from the two variables are different):'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!==` 表示不等于（两个变量的值不同）：'
- en: '[PRE85]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This returns `true` if `$num1` is not equal to `$num2`, or they are not of the
    same type.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 `$num1` 不等于 `$num2`，或者它们不是同一类型，则返回 `true`。
- en: Conditional Assignment Operators
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件赋值运算符
- en: 'The PHP conditional assignment operators are used to set a value depending
    on conditions:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 条件赋值运算符用于根据条件设置值：
- en: '`?`: This is used in ternary comparisons such as `$x = expr1 ? expr2 : expr3`
    (this will be covered in more detail in the next chapter).'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?`：这在三元比较中使用，例如 `$x = expr1 ? expr2 : expr3`（这将在下一章中详细介绍）。'
- en: '`??`: This is a null-coalescing operator meaning that if the first expression
    is `true`, then use it, otherwise use the second condition such as  `$x = expr1
    ?? expr2` (this will be covered in more detail in the next chapter).'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`??`：这是一个空合并运算符，表示如果第一个表达式为 `true`，则使用它，否则使用第二个条件，例如 `$x = expr1 ?? expr2`（这将在下一章中详细介绍）。'
- en: 'Activity 2.1: Printing the BMI of a User'
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二.1：打印用户的 BMI 值
- en: Suppose you decide one day you want to monitor your health, but don't want to
    use a third-party tool. You could build a simple tool to take measurements including
    name, weight, and height. From there, you can calculate your BMI.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一天决定监测你的健康状况，但不想使用第三方工具。你可以构建一个简单的工具来获取包括姓名、体重和身高在内的测量值。从那里，你可以计算你的 BMI。
- en: In this activity, you will write a script that will take variables from the
    script in order to perform calculations to get a BMI result. You will set a number
    of defaults, but also build an option to specify your own data via query strings.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，你将编写一个脚本，从脚本中获取变量以执行计算以获得 BMI 结果。你将设置一些默认值，但也可以通过查询字符串指定自己的数据。
- en: 'Here are the steps to complete the activity:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此活动的步骤如下：
- en: Create a `tracker.php` file.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `tracker.php` 文件。
- en: Define a `$name` string to store the name of the user.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `$name` 字符串来存储用户的姓名。
- en: Define a `$weightKg` integer to store the weight in kilograms.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `$weightKg` 整数来存储千克为单位的体重。
- en: Define a `$heightCm` integer to store the height in centimeters.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `$heightCm` 整数来存储厘米为单位的高度。
- en: Convert the height to meters.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将高度转换为米。
- en: Calculate the value of the height squared.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算高度的平方值。
- en: Calculate the BMI by dividing the user's weight by the value of the height squared.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将用户的体重除以高度的平方值来计算 BMI。
- en: Display a message to the screen displaying the name and BMI result.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上显示一条消息，显示姓名和 BMI 结果。
- en: 'The output will look as follows:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.10: Expected outcome of the activity'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.10：活动的预期结果'
- en: '](img/C14196_02_10.jpg)'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 C14196_02_10.jpg](img/C14196_02_10.jpg)'
- en: 'Figure 2.10: Expected outcome of the activity'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：活动的预期结果
- en: Note
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 505.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第 505 页找到。
- en: Summary
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about different PHP data types, including `string`,
    `integer`, `float`, and `array`. We also learned about different ways of declaring
    strings, including the `heredoc` and `nowdoc` syntaxes. We performed array operations
    in which we used indexed, associative, and multidimensional arrays and added and
    removed elements from arrays. We also performed type casting to change the types
    of variables.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了不同的 PHP 数据类型，包括 `string`（字符串）、`integer`（整数）、`float`（浮点数）和 `array`（数组）。我们还学习了声明字符串的不同方法，包括
    `heredoc` 和 `nowdoc` 语法。我们执行了数组操作，其中使用了索引、关联和多维数组，并从数组中添加和删除元素。我们还执行了类型转换来改变变量的类型。
- en: In the next chapter, conditional logic will be covered. Conditionals introduce
    logic to your scripts and allow different actions to happen depending on different
    conditions; for instance, let's say you had a variable containing the word *Pending*
    and you want to show a statement only if the word is equal to *Pending*.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍条件逻辑。条件语句将逻辑引入到你的脚本中，并允许根据不同的条件执行不同的操作；例如，假设你有一个包含单词 *Pending* 的变量，并且你只想在单词等于
    *Pending* 时显示一条语句。
- en: Understanding conditionals will unlock new ways of writing your code and allow
    further user interaction.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 理解条件语句将解锁编写代码的新方法，并允许进一步的用户交互。
