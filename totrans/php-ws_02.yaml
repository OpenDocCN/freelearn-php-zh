- en: 2\. Types and Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to use the different data types
    in PHP to store and work with data; create and use arrays; implement the concept
    of multidimensional arrays; work with operators to evaluate the values of operations;
    and perform type casting to convert variables from one type to another.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we covered how to work with PHP's templating engine to
    write information to web pages, how to work with the interactive shell on the
    command line, and what variables are and their importance.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will follow on and build on these concepts. We will start by going
    over PHP's data types, followed by an introduction to arrays, what they are, how
    to use them, and the different types of arrays that are possible. Along the way,
    functions built into PHP that enable our code to execute specific actions will
    also be covered.
  prefs: []
  type: TYPE_NORMAL
- en: What are Data Types?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Values assigned to variables in PHP will be of a set data type. The following
    are the eight primitive data types:'
  prefs: []
  type: TYPE_NORMAL
- en: Strings – A simple text-based value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integers – Hold a numeric value, which is a whole number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Floats – Hold a numeric value; can be a whole number or decimals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Booleans – Hold a single value equating to `true` or `false` (`1` or `0` is
    the numeric value of `true` and `false`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays – Hold multiple values or other arrays within itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objects – Hold a more complex data structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource – Holds a resource reference; for example, the reference of a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NULL – This value actually means there is no value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now learn about the different types in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Integers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Integers are whole numbers. Typical examples of working with integers are when
    specifying quantities in a shopping cart, or as an ID when working with databases
    (*Chapter 7*, *Data Persistence*), or any time you need to perform math operations;
    for example, `$number = 1024`. Here, `$number` is of the integer type holding
    the value `1024`.
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A string is made up of characters and numbers. There is no limit to how long
    a string can be, but you may be restricted when storing strings in a database
    or other storage areas.
  prefs: []
  type: TYPE_NORMAL
- en: In its simplest form, a string can be created by putting single or double quotes
    around a series of characters. These can be any characters, such as letters, numbers,
    or special characters.
  prefs: []
  type: TYPE_NORMAL
- en: Single and Double-Quoted Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Strings can contain variables as well as text. Single and double-quoted strings
    are the same except for one variation. Any variables in a single-quoted string
    will display the actual variable, and not its value. For instance, consider the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will print `Hello $name` instead of `Hello Dave`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will print `Hello Dave`.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we can see how the double quotes display the values of the variable.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you want to have a single-quote character in a single-quoted string,
    you will have to escape it using the backslash character. Backslash characters
    also need to be escaped.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example demonstrates the use of a backslash to escape single quotes inside
    a single-quoted string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You will notice the `//` characters in the preceding example. This means it's
    a comment. Comments are useful when you want to make notes explaining what the
    intention of the code is and to make the code readable. The comment is and will
    be ignored by the script.
  prefs: []
  type: TYPE_NORMAL
- en: There are single-line comments such as those above the `//` characters that
    will add a comment to the current line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use multiple-line comments, the syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'PHP supports the use of variables inside strings when using double quotes.
    Take this example, where a number is assigned to `$number` and is then displayed
    inside a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now take a look at some examples of double-quoted strings. We will use
    the same strings we used in the preceding examples relating to single quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Did you notice any difference in the outputs of the single and double-quoted
    strings? Observe the output of the second string. The value of the `$number` variable
    got printed instead when we used double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1: Output of the string examples'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.1: Output of the string examples'
  prefs: []
  type: TYPE_NORMAL
- en: Heredoc and Nowdoc Syntaxes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At times, there may be a need to declare a large string having large blocks
    of text. Using single and double-quoted methods, things can get messy pretty quickly.
    To help with this, PHP has two more methods for declaring strings. These are called
    the **heredoc** and **nowdoc** syntaxes. Using these syntaxes, a string can span
    multiple lines. Moreover, you do not need to worry about escaping any quotes.
    Here is an example of a string declared using the heredoc syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t worry if it looks strange. If you print it, the following output will
    be displayed on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we first declared a variable, `$number`, and
    set its value to 100\. After that, we declared a `$longString` variable. Note
    the `<<<` operator at the beginning followed by the word `STRING`. `STRING` is
    called a token or identifier here. The `<<<` operator and the token should be
    at the very start, while, using heredoc, there should not be any content on that
    line. The actual string starts from the next line. You can write in multiple lines.
    When you are done, the token is written again in a separate line and without any
    spaces before it. If the `STRING` token at the end is not on a separate line,
    PHP will throw you an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We have also used double quotes in the string, and we do not need to escape
    them. Also, note that the variable's value is printed. This means that the heredoc
    syntax behaves like a double-quoted string.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that you can use any word as the string token but, often, an **End
    of Thread** (**EOT**) name is used. For example, take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A common convention when using heredoc is to use `EOT` to denote the characters
    to start and end the block. Everything in between will be stored in a variable.
  prefs: []
  type: TYPE_NORMAL
- en: Variables can also be used without any special configuration. You simply need
    to display them like `$name EOT`.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command is now stored in a variable called `$str`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now have a look at a string declared using the nowdoc syntax. We will
    use the same string used in the previous example and change it to the nowdoc syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything is the same as in the case of heredoc, except for one difference.
    The token or identifier has single quotes around it, which makes it the `nowdoc`
    syntax. It behaves like single-quoted strings and, hence, no variable parsing
    is done inside, which is why it will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Unlike heredoc, the `$number` variable has not been parsed and displays as is
    on screen. This is ideal for large blocks of static text.
  prefs: []
  type: TYPE_NORMAL
- en: Floats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A float is a number that has decimal values. Floats can be useful when needing
    to store money in a decimal format, for example, for shopping cart systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Floats (also referred to as floating-point numbers or doubles) can be declared
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have declared four variables in the preceding code block. The `$w` variable
    has a positive value, while `$x` has a negative value. PHP also supports declaration
    using scientific notation. The last two variable declarations, `$y` and `$z`,
    are declared using it. The value of `$y` is `1700`, and the value of `$z` is `0.08`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Here, `e` means "ten to the power of".
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Boolean is the simplest type available. It can have only one of two values:
    `true` or `false`. Booleans are used to check whether a condition is true or false,
    as in whether a variable has an intended value. You will see this in upcoming
    exercises and learn in further detail in *Chapter 3*, *Control Statements*, you
    will learn where conditionals are used. Declaring Booleans is easy. Consider the
    following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 2.1: Using Simple Data Types'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have covered strings, integers, floats, and Booleans. Let''s now
    put this into practice in terms of how you might use them. In this exercise, we
    will calculate the total number of items purchased by a customer in a single order
    and print the total. We can say that a given order is complete only if the final
    total is greater than, or equal to, 25\. Here are the steps required to perform
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `order.php` inside the `chapter2` folder (if you haven't
    already created it, please create a folder now and call it `chapter2`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open PHP and define the following variables. This will allow us to simulate
    an order being processed. We will define a `$str` variable that holds the text
    that is to be printed when displaying the sum, while the `$order` variable will
    hold the cost of the item(s) purchased. We will define the `$additional` variable
    to hold the additional charges added to the bill. The `$orderTotal` variable will
    hold the amount of the total bill, and a Boolean variable, `$complete`, will indicate
    whether the order is complete. Set this to `false` by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With these variables defined, we can start the order simulation. First, let''s
    add `$additional` to `$order` and store the result in `$orderTotal`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, using an `if` statement (don''t worry, we haven''t covered this yet,
    but it will be covered in detail in the next chapter; for now, just think `if
    (expression)` then perform the given steps), establish whether `$orderTotal` is
    equal to `25`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The order has been matched to `25`, so change `$complete` to `true` and then
    display a message to the customer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Putting it all together gives us the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open the command line and navigate to the `chapter2` folder. Run the following
    command on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, go to the browser and open `http://localhost:8085/order.php`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output on your screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.2: Output of the order'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.2: Output of the order'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we saw how we can use different data types to perform calculations
    and make decisions on that basis. We will cover the `if` condition in *Chapter
    3*, *Control Statements*, in detail, thus providing more clarity on how different
    decisions could be taken depending on the conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An array is another data structure that is available in PHP. Unlike a normal
    variable, which stores a single value, an array is a data structure that can hold
    a collection of items. You can think of an array as a list of items. These items
    can be of any type, such as a string, a number, a Boolean, or even another array.
    Each item can be of a different type. The first could be a string, while the second
    could be an integer. The third can be a Boolean or another array. This allows
    for lots of flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you need to store nine names. Rather than creating nine different variables,
    we can just create an array variable with nine elements. Each element of an array
    can be accessed using an index. This index can either be a numerical or a string.
    Numerical indexes always start from 0\. So, an array having 9 elements will have
    indexes from 0 to 8\. The first element will have an index of 0, the second will
    have an index of 1, and so on. The final element will have an index of 8\. As
    you will see in the examples, these indexes are used to access the values from
    the array. Items can be added to, and removed from, the array using PHP''s built-in
    array functions, which we will see later in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This displays the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To display `Jack`, which has an index of `3`, you can print it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Indexed and Associative Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two types of arrays in PHP – indexed arrays and associative arrays.
    Indexed arrays have numerical indexes starting from 0, while associative arrays
    have string indexes. Let''s take a look at an example of an indexed array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We have declared an array named `$arrDays`. To create this array, we have used
    PHP's `[]` function and, inside it, we have provided a comma-separated list of
    seven days of the week. Each of these is called an element of an array. Then,
    we have used the `print_r()` function to print this array.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`print_r()` is used to look at the contents of a variable. This could be a
    single value, an array, or an object. For instance, the following is the outcome
    of printing the contents of the `$arrDays` array to the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output of the preceding snippet will look as follows.
    It will show both the indexes and values of all the array keys as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding output shows the array with its indexes and the value of each
    element at that index. Let''s now try to access the individual elements of the
    array. The following code shows how to access individual array elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Remember that array indexes start from 0\. Hence, to get the first element of
    the array, we used square brackets after the variable name and passed `0` to it.
    Similarly, we passed `4` to get the fifth element.
  prefs: []
  type: TYPE_NORMAL
- en: 'PHP provides a `count` function that can be used to determine the length of
    an array. Here is how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We have used the same `$arrDays` array as earlier. After declaring the array,
    we print the length of the array using the `count` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on to associative arrays, these are similar to indexed arrays, but the
    indexes in associative arrays are provided by us. This makes it easier to access
    items as you do not have to remember indexes. The following is an example of how
    to create an associative array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have declared a variable, `$heroInfo`. Unlike indexed
    arrays, here, we are providing the indexes explicitly. `name`, `superheroName`,
    `city`, and `creator` are all indexes. The `=>` operator is used after the index
    to assign a value at that index. After assigning, we print the array using the
    `print_r` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like indexed arrays, we will use the index to fetch an element from the array.
    The following is the code used to access elements from the `$heroInfo` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are accessing the `name` and `superHero` indexes
    to find respective values. The code will produce the output mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To recap, index arrays are arrays where the indexes are numeric. For instance,
    if you have an array of people with their names as the values, the index will
    be the automatic index assigned to each entry starting from 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3: Displaying the contents of the array'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.3: Displaying the contents of the array'
  prefs: []
  type: TYPE_NORMAL
- en: 'Associative arrays, on the other hand, use named keys instead of indexed ones.
    For instance, you could have an array of people with their name as the keys and
    their job title as the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4: Printing the job titles'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.4: Printing the job titles'
  prefs: []
  type: TYPE_NORMAL
- en: Adding and Removing Items from an Array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An array is a stack data structure. Items can be added to the array or removed.
    There are multiple ways to add and remove items, the following section will show
    how to add an item to an array using an array index approach and to use a named
    key approach. The `array_push` function will be explained and how it can be used
    to push an item to an array. `array_pop` can be used to remove an item from an
    array, this will be demonstrated.
  prefs: []
  type: TYPE_NORMAL
- en: PHP provides multiple array functions. These functions can be used to add items
    to an array, remove items from an array, and several other tasks besides.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways in which elements can be added to an array. Here is the
    first method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We have an array, `$animals`, that contains three items. Notice that we have
    used square brackets after the variable name and have assigned a value, `Wolf`,
    to it. This will insert this item at the end of the array and a new index will
    be created. You can confirm this by printing the array, which will give the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of associative arrays, you will also have to provide the key name.
    Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have added a new key publisher to the `$heroInfo` array. This will
    append the value, `Marvel Comics`, to the end of the array and the array will
    appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to add elements to an array is to use the `array_push` function.
    The following is an example of the `array_push` function. We will use the same
    array used previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `array_push` function takes two parameters. The first is the name of the
    array, and the second is the value we want to insert. It will also append the
    value `Wolf` to the end of the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `array_pop` function can be used to remove an element from the end of an
    array; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `unset` method is another way to remove an element, but this allows you
    to specify the key to be removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: A multidimensional array is an array containing one or more arrays. This is
    often used when nesting arrays; for instance, you have a school's array that holds
    arrays of schools in each array where the name and location of the school would
    be stored. Let's elaborate with an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2.2: Creating a Multidimensional Array'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we saw, arrays are a collection of items. These items can be of any type.
    Hence, an array can contain an integer, a float, a Boolean, or any other type.
    This also means that an array can also be an element of an array. Arrays with
    other arrays inside them are called multidimensional arrays. An array that does
    not have any array inside it is termed as being single or one-dimensional. Let''s
    perform an exercise where we will create a multidimensional array and then access
    the items inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `array.php` inside the `chapter2` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare an array, `heroInfo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `pre` HTML tag to format the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the command line and navigate to the `chapter2` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, go to the browser and open `http://localhost:85/array.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output on your screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.5: Printing the elements of an array'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_02_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.5: Printing the elements of an array'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding code declares an array named `$heroInfo` that has four elements.
    All the elements are themselves associative arrays. Each of these arrays has two
    keys, `heroName` and `weapon`. We then print the contents of this array. We have
    used the `pre` HTML tag so that the output is formatted nicely on screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's now try to access some elements from this array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following lines after the closing `pre` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the array, extract the hero names and weapons. To do this, specify the
    array name followed by the index, and then the subindex, in other words, `$heroInfo[3][''heroName'']`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file and refresh the browser page. You should see an output likes
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6: Printing the results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.6: Printing the results'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding array has four elements. Hence, `$heroInfo[3]` will give us the
    fourth element of this array. The fourth element is an array in itself, with `heroName`
    being `Captain America` and `weapon` being a `Shield`. To get the hero name, we
    use the square brackets again and pass a weapon as the key. Therefore, `$heroInfo[3][
    'heroName']` gives us the value `Captain America`. Similarly, `$heroInfo[3]['weapon']`
    gives us `Shield`. We have done the same for the third element of the array in
    the last line of code. Deeper nesting is also possible for multidimensional arrays.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we looked at multidimensional arrays and how they can be used
    to store multiple arrays and display their contents and extract specific items
    from the array.
  prefs: []
  type: TYPE_NORMAL
- en: Scalar Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scalar type declaration is either coercive (no need to be specified explicitly)
    or strict (type hinted strictly). By default, types are coercive.
  prefs: []
  type: TYPE_NORMAL
- en: Coercive means that PHP will coerce a number to an integer even if it's a string.
  prefs: []
  type: TYPE_NORMAL
- en: Take the following example. Here, we have a function called number that's been
    type hinted to only accept integers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, a string is being passed. When running PHP in coercive mode
    (this is on by default), this will work and print `1` to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To facilitate strict mode, a single `declare` directive is placed at the top
    of the file containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the example again in strict mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces an error as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This is because, in strict mode, a string cannot be cast to an integer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Type hinting is covered in *Chapter 4*, *Functions*.
  prefs: []
  type: TYPE_NORMAL
- en: This forces strict data types, which means that they cannot be changed during
    the script life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Type Conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP does not require us to explicitly declare the type of a variable. The type
    of a variable is set when it is assigned a value.
  prefs: []
  type: TYPE_NORMAL
- en: But there are times when we need to change the type of a variable. Sometimes,
    we have `float` values in the form of a string, and we want to use them as floats
    in our code. This is typical when accepting values from end users. Suppose a user
    has filled a float value in a form. While saving it to a database, you will have
    to change it from a string, which is how the initial values are stored, to a float
    if the database column type is `float`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, type casting is used. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: First, we have declared a variable, `$x`, which is a string having a value of
    `13.3333`. Then, we use PHP's `var_dump` function to display the type and the
    value of `$x`. After that, we use PHP's cast float (to cast a data type on a variable,
    set the data type in parentheses before the `$x` variable or float) to change
    the type of the `$x` variable and assign it to `$y`. After this, we again use
    the `var_dump` function to display the type and value of `$y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the preceding code will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the type of variable, `$y`, has now changed to float and its
    value is now floating number `13.333` instead of string `13.333`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of all the casts that are available in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: (`int`) – integer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (`bool`) – Boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (`float`) – float (also known as "floats," "doubles," or "real numbers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (`string`) – string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (`array`) – array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (`object`) – object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (`unset`) – NULL (NULL means there is no value)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at some more examples of different types and understand the
    details behind them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2.3: Converting a Boolean to an Integer'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will take in Boolean variable and convert it to an integer,
    thus demonstrating the concept of type casting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a PHP file called `convertbooleanint.php` inside the `chapter2` folder.
    Open the `php` tag. Display a heading, `Boolean to Int`, and declare two variables
    containing `true` and `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another heading and use `var_dump` to look at the value of `$trueValueBool`
    and `$falseValueBool`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add another heading, and this time change the variables to be integers
    by casting them to `int`. Then, use `var_dump` to look at their updated values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will produce the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This exercise demonstrated how to take Booleans and use casting to change their
    data types to integers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2.4: Converting an Integer to a String'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will do the opposite and convert an integer to a Boolean:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a PHP file called `convertintstring.php` inside the `chapter2` folder.
    Open the `php` tag. Display a heading, `int to string`, and declare a variable
    holding an integer called `$number`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display another heading and use `var_dump` to look at the contents of `$number`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This time, change the data type of `$number` to a string and assign this to
    a new variable called `$stringValue`, and then dump that using `var_dump`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We started with an integer, `$number`, set its value to another variable, and
    then prefixed it with (a string) to set its data type. We then dumped its contents
    using `var_dump` to examine the contents. This technique can be used to examine
    variables to ensure that they are the desired data type.
  prefs: []
  type: TYPE_NORMAL
- en: 'PHP also provides a series of `is_datatype()` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`is_array`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_bool`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_callable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_countable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_double`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_float`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_int`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_integer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_iterable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_long`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_numeric`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_real`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_resource`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_scalar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_string`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These can be used to determine which data type they use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This returns a Boolean value indicating whether the given variable matches the
    data type of the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2.5: Converting Centimeters to Meters'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a script that will take three arguments from
    the command line: a name, a number in meters, and another number in centimeters.
    These two numbers together will represent the user''s height. For example, a user
    called Jo whose height is 1 m 65 cm would enter "Jo 1 65." For the output, we
    will convert the centimeters to meters and print it along with the name. Observe
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `activity-height.php` inside the `chapter2` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, open PHP, collect the arguments from the command line, and then assign
    these to variables. To collect the variables, `$argv` can be used. This is a command
    used to collect the variables in this context; they are known as arguments. The
    meters and centimeters should be cast to `int`. This can be done using (`int`)
    `$arg` followed by the index. For example, `(int) $argv[2]`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, convert centimeters to meters by using (`float`) and then divide the
    centimeters by `100`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the height in meter to the result centimeters to meters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, display the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the Terminal, navigate to the `chapter2` folder, and then run the following
    command at the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the output on your Terminal just like in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.7: Printing the height'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.7: Printing the height'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try to understand the code. We have declared three variables – `$name`,
    `$heightMeters`, and `$heightCentiMeters`. Since we will be taking 3 values from
    the command line, we have used PHP's predefined `$argv` array to get these values
    using the indexes `1`, `2`, and `3`. We started from index `1` because `$argv[0]`
    is always the script name, which will be `activity-height.php` in this case. Note
    that we have used the integer cast for `$heightMeters` and `$heightCentiMeters`.
  prefs: []
  type: TYPE_NORMAL
- en: After getting the values of variables, we converted the height in centimeters
    to meters by dividing the figure by `10` and then stored the resulting value in
    the `$cmToMeter` variable. On the last line, we display the result as required.
    The reason casting was needed here was to ensure that the data is of the correct
    data type. For instance, an array could have been passed. By setting the data
    type, the script told it what data type must be set and, if it cannot be set,
    it will throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, you saw how to divide two values to convert meters to centimeters.
    This is an example of an arithmetic operation. Let's now take a look at some more
    examples of operators.
  prefs: []
  type: TYPE_NORMAL
- en: Operators and Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An operator in PHP is something that takes one or more values or expressions
    and applies an operation to give a result that is either a value or another expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'PHP divides the operators into the following groups:'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitwise operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assignment operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increment/decrement operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional assignment operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arithmetic Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arithmetic operators are used to perform math operations, for example, addition,
    subtraction, division, and multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is the `+` operator. This takes different numbers separated by a `+`
    operator and will add the values together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This will give us `26` as the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is the `-` operator. This takes different numbers separated by a `–`
    operator and will subtract the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: This will give us `22` as the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is the `*` operator. This takes different numbers separated by a `*`
    operator and will display the product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This will give us `48` as the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is the `/` operator. This takes different numbers separated by a `/`
    operator and will print the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: This will give us `12` as the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `%` (modulo) operator is used to calculate the remainder of the division
    of two given numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: This will give us `4` as the output.
  prefs: []
  type: TYPE_NORMAL
- en: String Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'String operators have concatenation operators and concatenation assignment
    operators. Concatenation means adding one or more variables to an existing variable.
    For instance, let''s say we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we want to display these items together using concatenation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Concatenation uses the `.` notation – we can join multiple variables this way.
    In this example, we separate the two variables with a space. Notice the notation:
    a `.''` followed by a space, and a `''.` to add the required space between the
    words.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Concatenation assignment means appending a variable to an existing one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8: Demonstrating string concatenation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.8: Demonstrating string concatenation'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, using the `.=` notation, the `$str` variable is appended to
    the `$result` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Bitwise Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bitwise operators allow evaluation and manipulation of specific bits within
    an integer. In this case, the integer is converted to bits (binary) for faster
    calculations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take two variables, `$a` and `$b`. They can be evaluated with these conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The `$a && $b` expression will return `1` on calculating the result of AND of
    the last bits of both operands. The `$a || $b` expression will perform OR of the
    last bits of both operands and will return `1`.
  prefs: []
  type: TYPE_NORMAL
- en: The result of `2` is the total number of binary bits that are in either `$a`
    or in `$b`, but excluding the bits that exist in both `$a` and `$b`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the decimal to binary conversion, you can take a look
    at [https://packt.live/2B0M2XK](https://packt.live/2B0M2XK).
  prefs: []
  type: TYPE_NORMAL
- en: Assignment Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When assigning a value to a variable using `=`, this constitutes an assignment
    operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Comparison Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To compare two values, the comparison operator is used. There are two common
    comparison operators – `==`, meaning equal to, and `!=`, meaning not equal to.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The assignment operator (`=`) is used to assign a value. It cannot be used for
    performing comparison operations, since comparing whether a value is the same
    as another requires the use of the `==` operator. To establish whether two variables
    are identical, in other words, the same type, use the identical `===` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9: Demonstrating the use of comparison operators'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.9: Demonstrating the use of comparison operators'
  prefs: []
  type: TYPE_NORMAL
- en: Increment/Decrement Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To increment a value, use the `++` operator. This will increment the value
    by one. Alternatively, using `+` and a number will increment a value by that number.
    For example, `+3` will increment by `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'To decrement a value, the process is the same, but with `–`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Logical Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we will look at logical operators.
  prefs: []
  type: TYPE_NORMAL
- en: The `and` operator performs the logical conjunction of two expressions. It returns
    the Boolean value `true` if both the expressions evaluate to `true`. The `&&`
    operator is another way of saying `and`. The `OR` operator returns the Boolean
    value `true` if either of the two operands evaluates to `true`, otherwise it returns
    `false`. The `||` operator is another way of saying `or`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `!` operator means NOT. It can be used to check whether an expression does
    not match. For instance, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Array Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PHP array operators are used to compare arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '`==` means equal to (the values of two variables match). Consider the following
    example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This returns `true` if the value of `$num1` is equal to the value of `$num2`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`===` means identical to (the two variables are the same type and value):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This returns `true` if the value and the data type of `$num1` are equal to the
    value and data type of `$num2`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`!==` means not equal to (the values from the two variables are different):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This returns `true` if `$num1` is not equal to `$num2`, or they are not of the
    same type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Conditional Assignment Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PHP conditional assignment operators are used to set a value depending
    on conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`?`: This is used in ternary comparisons such as `$x = expr1 ? expr2 : expr3`
    (this will be covered in more detail in the next chapter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`??`: This is a null-coalescing operator meaning that if the first expression
    is `true`, then use it, otherwise use the second condition such as  `$x = expr1
    ?? expr2` (this will be covered in more detail in the next chapter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Activity 2.1: Printing the BMI of a User'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you decide one day you want to monitor your health, but don't want to
    use a third-party tool. You could build a simple tool to take measurements including
    name, weight, and height. From there, you can calculate your BMI.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you will write a script that will take variables from the
    script in order to perform calculations to get a BMI result. You will set a number
    of defaults, but also build an option to specify your own data via query strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `tracker.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a `$name` string to store the name of the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a `$weightKg` integer to store the weight in kilograms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a `$heightCm` integer to store the height in centimeters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the height to meters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the value of the height squared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the BMI by dividing the user's weight by the value of the height squared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display a message to the screen displaying the name and BMI result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10: Expected outcome of the activity'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_02_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.10: Expected outcome of the activity'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found on page 505.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about different PHP data types, including `string`,
    `integer`, `float`, and `array`. We also learned about different ways of declaring
    strings, including the `heredoc` and `nowdoc` syntaxes. We performed array operations
    in which we used indexed, associative, and multidimensional arrays and added and
    removed elements from arrays. We also performed type casting to change the types
    of variables.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, conditional logic will be covered. Conditionals introduce
    logic to your scripts and allow different actions to happen depending on different
    conditions; for instance, let's say you had a variable containing the word *Pending*
    and you want to show a statement only if the word is equal to *Pending*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding conditionals will unlock new ways of writing your code and allow
    further user interaction.
  prefs: []
  type: TYPE_NORMAL
