["```php\nname: Drupal form example \ndescription: Create a basic Drupal form, accessible from a route \ntype: module \nversion: 1.0 \ncore: 8.x \n```", "```php\n<?php \n\nnamespace Drupal\\drupalform\\Form; \n\nuse Drupal\\Core\\Form\\FormBase; \nuse Drupal\\Core\\Form\\FormStateInterface; \n\nclass ExampleForm extends FormBase { \n\n} \n```", "```php\n\nclass ExampleForm extends FormBase { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getFormId() { \n    return 'drupalform_example_form'; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function buildForm(array $form, FormStateInterface $form_state) { \n     // Return array of Form API elements. \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function validateForm(array &$form,  FormStateInterface $form_state) { \n    // Validation covered in later recipe, required to satisfy interface. \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function submitForm(array &$form,  FormStateInterface $form_state) { \n    // Validation covered in later recipe, required to satisfy interface. \n  } \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function buildForm(array $form, FormStateInterface $form_state) { \n  $form['company_name'] = [ \n    '#type' => 'textfield', \n    '#title' => $this->t('Company name'), \n  ]; \n  $form['submit'] = [ \n    '#type' => 'submit', \n    '#value' => $this->t('Save'), \n  ]; \n  return $form; \n} \n```", "```php\ndrupalform.form: \n  path: '/drupal-example-form' \n  defaults: \n    _title: 'Example form' \n    _form: '\\Drupal\\drupalform\\Form\\ExampleForm' \n  requirements: \n    _access: 'TRUE' \n```", "```php\n$form['phone'] = [ \n  '#type' => 'tel', \n  '#title' => $this->t('Phone'), \n]; \n```", "```php\n$form['email'] = [ \n  '#type' => 'email', \n  '#title' => $this->t('Email'), \n]; \n```", "```php\n$form['integer'] = [ \n  '#type' => 'number', \n  '#title' => $this->t('Some integer'), \n  // The increment or decrement amount \n  '#step' => 1, \n  // Miminum allowed value \n  '#min' => 0, \n  // Maxmimum allowed value \n  '#max' => 100, \n];\n```", "```php\n$form['date'] = [ \n  '#type' => 'date', \n  '#title' => $this->t('Date'), \n  '#date_date_format' => 'Y-m-d', \n]; \n```", "```php\n$form['website'] = [ \n  '#type' => 'url', \n  '#title' => $this->t('Website'), \n]; \n```", "```php\n$form['search'] = [ \n  '#type' => 'search', \n  '#title' => $this->t('Search'), \n  '#autocomplete_route_name' => FALSE, \n]; \n```", "```php\n$form['range'] = [ \n  '#type' => 'range', \n  '#title' => $this->t('Range'), \n  '#min' => 0, \n  '#max' => 100, \n  '#step' => 1, \n]; \n```", "```php\n  /** \n   * Form element validation handler for #type 'email'. \n   * \n   * Note that #maxlength and #required is validated by _form_validate() already. \n   */ \n  public static function validateEmail(&$element, FormStateInterface $form_state, &$complete_form) { \n    $value = trim($element['#value']); \n    $form_state->setValueForElement($element, $value); \n\n    if ($value !== '' && !\\Drupal::service('email.validator')->isValid($value)) { \n      $form_state->setError($element, t('The email address %mail is not valid.', array('%mail' => $value))); \n    } \n  } \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function validateForm(array &$form,  FormStateInterface $form_state) { \n  if (!$form_state->isValueEmpty('company_name')) { \n    // Value is set, perform validation. \n  } \n} \n```", "```php\n/**               \n * {@inheritdoc} \n */ \npublic function validateForm(array &$form,  FormStateInterface $form_state) { \n  if (!$form_state->isValueEmpty('company_name')) { \n    if (strlen($form_state->getValue('company_name')) <= 5) { \n      // Set validation error. \n    } \n  } \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function validateForm(array &$form,  FormStateInterface $form_state) { \n  if (!$form_state->isValueEmpty('company_name')) { \n    if (strlen($form_state->getValue('company_name')) <= 5) { \n $form_state->setErrorByName('company_name', t('Company name is less than 5 characters')); \n    } \n  } \n} \n```", "```php\n$form_state->setValidateHandlers([ \n  ['::validateForm'], \n  ['::method1'], \n  [$this, 'method2'], \n]); \n```", "```php\n  drupalform.company: \n    type: config_object \n    label: 'Drupal form settings' \n    mapping: \n      company_name: \n        type: string \n        label: 'A company name' \n```", "```php\n<?php \n\nnamespace Drupal\\drupalform\\Form; \n\nuse Drupal\\Core\\Form\\ConfigFormBase; \nuse Drupal\\Core\\Form\\FormStateInterface; \n```", "```php\n<?php \n\nnamespace Drupal\\drupalform\\Form; \n\nuse Drupal\\Core\\Form\\ConfigFormBase; \nuse Drupal\\Core\\Form\\FormStateInterface; \n\nclass ExampleForm extends ConfigFormBase {\n...\n}\n```", "```php\n<?php \n\nnamespace Drupal\\drupalform\\Form; \n\nuse Drupal\\Core\\Form\\ConfigFormBase; \nuse Drupal\\Core\\Form\\FormStateInterface; \n\nclass ExampleForm extends ConfigFormBase {\n...\n /** \n * {@inheritdoc} \n */ \n protected function getEditableConfigNames() { \n return ['drupalform.company']; \n } \n...\n}\n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function buildForm(array $form, FormStateInterface $form_state) { \n  $form['company_name'] = [ \n    '#type' => 'textfield', \n    '#title' => $this->t('Company name'), \n '#default_value' => $this->config('drupalform.company')->get('company_name'), \n  ]; \n return parent::buildForm($form, $form_state); \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function buildForm(array $form, FormStateInterface $form_state) { \n  $form['company_name'] = [ \n    '#type' => 'textfield', \n    '#title' => $this->t('Company name'), \n    '#default_value' => $this->config('drupalform.company')->get('name'), \n  ]; \n  return parent::buildForm($form, $form_state); \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function submitForm(array &$form, FormStateInterface $form_state) { \n  parent::submitForm($form, $form_state); \n  $this->config('drupalform.company')->set('name', $form_state->getValue('company_name')); \n} \n```", "```php\n<?php\n\nnamespace Drupal\\drupalform\\Form;\n\nuse Drupal\\Core\\Form\\ConfigFormBase;\nuse Drupal\\Core\\Form\\FormStateInterface;\n\nclass ExampleForm extends ConfigFormBase {\n\n  /**\n   * {@inheritdoc}\n   */\n  protected function getEditableConfigNames() {\n      return ['drupalform.company'];\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function getFormId() {\n    return 'drupalform_example_form';\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildForm(array $form, FormStateInterface $form_state) {\n    $form['company_name'] = array(\n      '#type' => 'textfield',\n      '#title' => t('Company name'),\n      '#default_value' => $this->config('drupalform.company')->get('name'),\n    );\n    return parent::buildForm($form, $form_state);\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function validateForm(array &$form, FormStateInterface $form_state) {\n    if (!$form_state->isValueEmpty('company_name')) {\n      if (strlen($form_state->getValue('company_name')) <= 5) {\n        $form_state->setErrorByName('company_name', t('Company name is less than 5 characters'));\n      }\n    }\n  }\n  /**\n   * {@inheritdoc}\n   */\n  public function submitForm(array &$form, FormStateInterface $form_state) {\n    parent::submitForm($form, $form_state);\n    $this->config('drupalform.company')->set('name', $form_state->getValue('company_name'));\n  }\n}\n```", "```php\n$form_state->setSubmitHandlers([ \n  ['::submitForm'], \n  ['::method1'], \n  [$this, 'method2'] \n]); \n```", "```php\nname: My module \ndescription: Custom module that uses a form alter \ntype: module \ncore: 8.x \n\n```", "```php\n<?php \n\n/** \n * @file \n * Custom module that alters forms. \n */\n```", "```php\n/** \n * Implements hook_form_FORM_ID_alter(). \n */ \nfunction  mymodule_form_system_site_information_settings_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) { \n  // Code to alter form or form state here \n}\n```", "```php\n/** \n * Implements hook_form_FORM_ID_alter(). \n */ \nfunction  mymodule_form_system_site_information_settings_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) { \n  $form['site_phone'] = [ \n    '#type' => 'tel', \n    '#title' => t('Site phone'), \n    '#default_value' => Drupal::config('system.site')->get('phone'), \n  ]; \n} \n```", "```php\n/** \n * Implements hook_form_FORM_ID_alter(). \n */ \nfunction  mymodule_form_system_site_information_settings_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) { \n  $form['site_phone'] = [ \n   '#type' => 'tel', \n   '#title' => t('Site phone'), \n   '#default_value' => Drupal::config('system.site')->get('phone'), \n  ]; \n  $form['#submit'][] = 'mymodule_system_site_information_phone_submit'; \n} \n\n/** \n * Form callback to save site_phone \n * @param array $form \n * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state \n*/ \nfunction mymodule_system_site_information_phone_submit(array &$form,  \\Drupal\\Core\\Form\\FormStateInterface $form_state) { \n  $config = Drupal::configFactory()->getEditable('system.site'); \n  $config \n  ->set('phone', $form_state->getValue('site_phone')) \n  ->save(); \n} \nThe $form['#submit'] modification adds our callback to the form's submit handlers. This allows our module to interact with the form once it has been submitted. \nThe mymodule_system_site_information_phone_submit callback is passed the form array and form state. We load the current configuration factory to receive the configuration that can be edited. We then load system.site and save phone based on the value from the form state. \n```", "```php\n$validators = $form_state->getValidateHandlers(); \n$validators[] = 'mymodule_form_validate'; \n$form_state->setValidateHandlers($validators); \n```", "```php\n$submit_handlers = $form_state->getSubmitHandlers(); \n$submit_handlers[] = 'mymodule_form_submit'; \n$form_state->setSubmitHandlers($submit_handlers ); \n```"]