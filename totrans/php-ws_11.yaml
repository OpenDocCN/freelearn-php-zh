- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introducing PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1.1: Displaying Query Strings in the Browser'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `movies.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Capture query string data in the file to store the details of the movies, such
    as the name, the actors, and the release years:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a basic HTML structure and then display the captured query strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, go to the Terminal and type the following command to start the built-in
    web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a screen like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.17: Starting the server'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_01_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.17: Starting the server'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the web server is up and running, open the PHP page and append your query
    strings to the URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8085/movies.php?movieName=Avengers&movieStar=IronMan&movieYear=2019`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can change the values to anything you like to see how they will be displayed
    in the browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see a screen like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.18: Printing the information about the movie'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_01_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.18: Printing the information about the movie'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the port you have specified is not being used by any other application
    on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the last few exercises, you should now be aware of how this code
    is working. Let's go through the query string and code.
  prefs: []
  type: TYPE_NORMAL
- en: The query string this time is `movieName=Avengers&movieStar=IronMan&movieYear=2019`.
    This means that the `$_GET` variable in PHP will have access to three different
    variables now, which are `movieName`, `movieStar`, and `movieYear`.
  prefs: []
  type: TYPE_NORMAL
- en: In the first three lines of code, we are extracting values for `movieName`,
    `movieStar`, and `movieYear` and assigning them to the `$name`, `$star`, and `$year`
    variables, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: In the head section of HTML, we have a title. Inside it, we have used the `echo`
    statement to print the movie name, which will appear in the browser. Moving further
    down, we have an `h1` element where we are printing the name again. After the
    `h1` element is a `p` element, where we are creating a sentence dynamically. We
    have used the variables and the dot operator (`.`) to append different strings
    and variables to create a full sentence.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Types and Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 2.1: Printing the BMI of a User'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `tracker.php`. Then, open PHP and create a variable
    to store the name. You can assign a value directly, in other words, `$name = ''Joe''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add variables for the weight and height; again, set a default value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Take the `$heightCm` variable, convert it to meters by dividing by `100`, and
    then store the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Square the height and store the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the BMI by taking the weight and dividing it by the squared height:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display a message to the user showing the name and BMI result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the Terminal/Command Prompt and navigate to your `chapter2` folder or
    where you stored `tracker.php`. Run the server by typing in this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, in a browser, go to `http://localhost:8085/tracker.php`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.11: Printing the BMI'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_02_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.11: Printing the BMI'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we've looked at assigning data to variables and performing
    calculations (divisions and multiplications). Then, we printed the end result
    to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Control Statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 3.1: Creating a Movie Listing Script to Print Movies per Director'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to complete the activity are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `activity-movies.php` script and add the following nested array,
    which contains five directors with a list of the five movies associated with them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have an associative array, `$directors`, which contains five directors'
    names and each director is used as a key for the array. Also, each director's
    key has been assigned another associative array that contains five movie names.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using our previous knowledge of nested looping, loop through the nested array
    using two `foreach` loops, as follows. As in the following, add the loops after
    the `$directors` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding example, we have a simple looping through a nested array. Since
    a `foreach` loop is a good choice to iterate through associative arrays, we have
    utilized `foreach` in both the inner and outer loop to print a formatted director's
    name along with the movies they directed on each new line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the PHP file from a Terminal or console with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command outputs the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.21: The activity movies script output with default arguments'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_03_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.21: The activity movies script output with default arguments'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The nested `foreach` loops do their job and iterate through the nested array
    to print the available movie names against the directors' names.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, it''s time to add some dynamic behavior to our looping technique so that
    we can control the iterations in both loops with command-line arguments. This
    means we will be taking two arguments from the command line, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the script name itself is an argument for a `php` command, hence, the
    first, second, and third arguments are `activity-movies.php`, `3`, and `2` respectively.
    The second argument should control the number of directors to iterate and the
    third argument should control the number of movies to iterate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Command-line arguments can be obtained using the `$argv` system variable, so
    we will be using `$argv[1]` and `$argv[2]` for the second and third arguments.
    Note that `$argv[0]` is the script name in this case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following lines at the beginning of the script to add the command-line
    arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `??`, the null coalescing operator, has been used so that if `$argv[1]`
    or `$argv[2]` does not exist or is `NULL`, then we can assign a default number
    5 to the `$directorsLimit` and `$moviesLimit` limit variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we need to add two counters that will count the directors and movies to
    print so that we can maintain the number of directors and movies to print, supplied
    in the form of command-line arguments. Let''s add the counters and the control
    statements to restrict the prints so that the nested loops look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have added `$directorsCounter` before the outer loop and `$moviesCounter`
    before the inner loop. Both of them start counting from `1` and immediately inside
    the loops we have checked whether the directors or movies exceed the limits given
    in `$directorsLimit` and `$moviesLimit` respectively. If any of the counters become
    greater than their limit, we terminate the iteration using the `break` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the beginning of each loop, we have used a condition expression in the `if`
    control to check that the counter doesn't exceed the limit, and at the very end
    of each loop, the corresponding counter gets incremented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final file can be referred at: [https://packt.live/35QfYnp](https://packt.live/35QfYnp).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now run the following command to see the `directors` and `movies` arguments
    in action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command should print one movie from each of the two directors,
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.22: The activity movies script output with custom arguments'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_03_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.22: The activity movies script output with custom arguments'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test the preceding script with different arguments; that is, `php activity-movies.php
    2 3`. As we have already assigned the default limit value to 5 in the limit variables,
    if no arguments are present in the command; that is, `php activity-movies.php`,
    it will complete all iterations to loop through the array elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can also try passing only the `directors` limit argument so that the `movies`
    limit stays at the default limit of 5\. The following command will output all
    of the movies from the given number of directors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.23: The activity movies script output with the first argument'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_03_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.23: The activity movies script output with the first argument'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have used control statements and looping techniques to
    create a dynamic script that works based on command-line arguments. *Control structures
    are used to control the execution of a program*, hence we can leverage such structures
    to make decisions about things such as which branch of code to execute, to perform
    repetitive executions, to control the flow of iterations, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 4.1: Creating a Calculator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file within the `Chapter04` directory with the name `activity.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start your script with the opening PHP tag and set the strict type to `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can start by writing our `factorial` function in the same file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let me explain what the function does. First of all, it takes an integer argument;
    we can be sure that it will always be an integer because we added a type hint
    and declared that we are using strict types. There are several ways in which you
    may have implemented the function, so don't let my solution put you off.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: My take on it is that the first number in the calculation will have to be the
    input number – we store it in `$factorial`, which is the variable we will use
    to hold the result. Then, it is multiplied by `$number - 1`. This goes on until
    `$number === 2;`. The `while` condition runs for the last time when `$number`
    has become `3`; it will then be decremented by `1` and multiplied with the `$factorial`
    variable. By the end, `$factorial` contains the result and is returned from the
    function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Instead of `$number--;` using the post decrement operator, `--`, we could have
    written `$number = $number -1;`. Some people consider the latter to be a better
    practice because it is more explicit. I sometimes prefer to use the handy shortcuts
    that PHP has to offer. Because `$number--` is on its own line as a single statement,
    we could have also written `--$number`. In this case, there is no difference.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The difference between the two operators is that with `--$number`, `$number`
    will be decremented before the statement runs, and with `$number--`, it will be
    decremented after the statement has been evaluated. In this case, there is no
    consequence of that difference.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will define the `sum` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While we could have just looped over `func_get_args();` and added all the numbers
    together to get the sum, there is already a built-in function in PHP that does
    just that. So, why not use it? That is what `array_sum` does: it adds up all the
    numbers in the input array you give it. The `return` keyword makes the function
    return the result.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you wanted to validate each parameter to check whether it was numeric (using
    `is_numeric`), then looping over the arguments would have been better because
    you would do the check in the same iteration as the addition and throw an exception
    when the argument wasn't numeric.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last mathematical function we will define is the `prime` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `prime` function is definitely the most challenging of them all. The naive
    implementation would just try to determine the modulo of the `$number` input by
    all values that are smaller: when the modulo is `0`, then it is not a prime number.
    However, it has already been proven that you only have to check all the numbers
    up to the square root of the input. In fact, you could check even fewer numbers,
    but we have not gone as far as that.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we know 1 is not a prime number so, if the number that is passed through
    is 1 then we return `false` early. This also rules out 0 and negative numbers.
    Prime numbers are positive by definition. Then, starting with 2, up until the
    square root of the `$number` input, we increment `$i` by 1 and check whether the
    modulo of the division of `$number` by `$i` is 0\. If it is, `$number` is not
    a prime number and we again return `false` early. The modulo operator is written
    as `%` (the percentage symbol). In other words, when the `$number` modulo `$i`
    equals 0, `$number` is divisible by `$i`, and since `$i` is not equal to 1 and
    not equal to `$number`, `$number` is not a prime number.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our last major function that we will define is the `performOperation` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function just switches between the three other functions based on the `$operation`
    case you give it as its first argument. Since one of the functions it delegates
    its work to accepts a varying amount of arguments, `performOperation` also has
    to accept a varying number of arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You could also choose an implementation where you let `performOperation` have
    a second parameter, `$number`, which can then be passed exactly as it is to both
    factorial and prime. In that case, you only query `func_get_args` in the case
    of the `sum` operation. The approach you choose is not only a matter of taste,
    but also of performance. It is faster not to use `func_get_args()`, so the alternative
    approach would definitely be the fastest.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the output as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.18: Printing the results'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_04_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.18: Printing the results'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Object-Oriented Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 5.1: Building a Student and Professor Object Relationship'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to complete the activity are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory named `activity1` to put all our activity content in it.
    This should be our working directory (you can `cd` to the directory).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory named `Student` inside the `activity1` directory to put the
    namespaced `Student` class in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a PHP file called `Student.php` inside the `Student` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a `Student` class where the `Student` class has been namespaced as
    `Student` and has two member attributes, `$name` and `$title`, which are `student`
    by default. The constructor method accepts the student''s name as an argument.
    The argument is hinted with its desired type as `string` (anything other than
    `string` will produce an error) and assigns it to the `$name` property using `$this->name`.
    So, whenever we instantiate the `Student` class, we should call the class by its
    namespace, such as the new `Student\Student(''Student Name'')` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the professor, create a directory called `Professor` under the `activity1`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Professor` directory, create a PHP file called `Professor.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the `Professor` class with the `Professor` namespace at `Professor.php`.
    The `Professor` class is similar to `Student` but with an extra private attribute,
    `$students`, which will hold an array of students. The `$students` array is kept
    private so that the students'' list can''t be accessed outside of the `Professor`
    class. The default title for a professor is `Prof.`, which has been assigned in
    the `$title` attribute. The constructor accepts hinted parameters, a name (accepts
    strings only), and the students (accepts arrays only) list as two arguments, and
    the first parameter, `$name`, has been assigned to the `$name` property using
    `$this->name`. We are using parameter type hints to ensure that no other types
    are passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, we will use the instance of the `Student` class within the `Professor`
    namespace, so we need to import the `Student` class via the `Student` namespace
    in `Professor.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, after the `Professor` namespace declaration, we have imported the `Student`
    class via its `Student` namespace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We need to iterate through the array of students and check each of the objects
    – whether it is an instance of the `Student` class or not. If it is a valid student,
    then add it to the professor's `$students` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following filtration in the `Professor` constructor for `$students`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have iterated through `$students` using a `foreach` loop and, inside,
    checked whether `$student` is an instance of the `Student` class, then added it
    to the `$this->students` array. So, only valid students can be added to the professor's
    student list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, add the following setter method in the `Professor` class in order to set
    the title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This one should be used to set the professor's title. If a professor is a `Ph.D.`,
    then we set the title as `Dr.`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a member method, `printStudents()`, as follows, in the `Professor` class,
    which will print the professor''s title, name, the student count, and the list
    of students in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have printed the professor's title, name, and the number of students.
    Again, we have used a `foreach` loop to iterate through the professor's private
    property, `$students`, and inside the loop we have printed each student's name.
    Also, for the sake of maintaining a serial order of the students, we have used
    the `$serial` variable starting from `1`, which increments by one after each iteration
    in order to add a number before each student's name while printing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a PHP file called `activity-classes.php` inside the `activity1` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `spl_autoload_register()` function at the beginning of the file to
    load the `Professor` and `Student` classes automatically according to their namespaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we haven't registered any class loader methods in the `spl_autoload_register()`
    function; rather, we have kept it as the default to load the classes according
    to their namespaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `Professor` instance, providing a name and a list of students that
    contains instances of `Student` in the constructor as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have added a random amount of `Student` instances in an array and passed
    them to the `Professor` constructor. When we instantiate the `Professor` class
    as `new` `Professor\Professor()`, this namespaced class name tells the auto loader
    to load the `Professor` class from the `Professor` directory. This same namespaced
    class' loading technique is applied to the `Student` class as well. The new `Student\Student()`
    namespace tells the autoloader to expect the `Student` class in the `Student`
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, change the professor''s title to `Dr.` using the corresponding setter
    method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the output by invoking the `printStudents()` method with the `Professor`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the `activity-classes.php` looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the PHP script using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.30: Professor’s students list'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_05_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.30: Professor''s students list'
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully obtained a list of a professor's students using OOP techniques.
    In this activity, we have practiced class attributes, access modifiers, methods,
    class declaration, class namespacing, object instantiation, autoloading namespaced
    classes, type hints in parameters, and object filtration using `instanceof`, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Using HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 6.1: Creating a Support Contact Form'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that pops out is the login handling difference since we now
    have to authenticate random users, not just a single one. So, we will need a method
    to fetch the user data for the username that is being logged in. The method will
    return user data for the existing user (using the `level` and `password` hashes),
    or `NULL` if the user is not found. Since we will learn about databases in the
    next chapter, we will store the available user list in code, in the same way as
    the previous exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the `\Handlers\Login::handle()` method will slightly change the way it
    validates the authentication and the stored data in the user session. First, if
    we get user data for the provided username, this means we have a valid user from
    our *database*, and we can proceed further. The password match is performed as
    usual and, if we get a match, then we can proceed by adding the username and user
    data in the session. In the case of any failure (such as fetching the user from
    the *database* or a password match), we should prepare the errors that will be
    displayed in the HTML form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For convenience, generate password hash with command line `using php -r "echo
    password_hash('admin', PASSWORD_BCRYPT);"` command
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The login form doesn''t require any changes; let''s just remove the credentials
    hint for the `admin` user, under the `Authenticate` form title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now the authentication part is covered. The user will be redirected to the `Profile`
    page after login, so they will have to see the layout presented previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `src/templates/profile.php` file will have to be rebuilt from scratch.
    First, let''s add the greetings and logout button part. While browsing Bootstrap''s
    framework documentation, we came across alerts component, and we saw we could
    use this component for our current purpose:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we have to add the support area, and divide it horizontally into two
    equal parts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To learn more about grid system in Bootstrap, please follow this link: [https://packt.live/31zF72E](https://packt.live/31zF72E).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll use a support contact form with the following specifications: two inputs
    of type text, for the name and email, and a text area input for the message. Each
    of these will have an associated `<label>` element and, if there are any errors,
    they will have to be printed under the input with erroneous data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since the standard-level user can only send the form once a day, trying to
    send more messages should result in an error message, which we may assign to the
    form level, and display it right on top of the form. Additionally, we may use
    the alert components again, this time using the `danger` red background:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to add the CSRF token to the form, for security purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the submit button, we may want to add more form data, so that we can know
    for sure what form we have to process in the PHP scripts; this is very useful
    when many forms are added on a single HTML page and each form is sending data
    to the same URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the message list history, we may chose the `card` component, and print
    each of the message details. Each history entry will contain the form data (that
    is, the `form` key) and time when the form was sent (that is, the `timeAdded`
    key):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The complete code in `profile.php` can be referred at: [https://packt.live/2pvh0or](https://packt.live/2pvh0or).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have the layout ready, let''s proceed to the processing part in
    the `\Handlers\Profile` handler. First, what we have to add there is the processing
    form in the case of a `POST` request. The `processContactForm()` will return an
    array of errors when the form validation fails:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If no errors are returned, it means that the form was validated and successfully
    saved; therefore, we can refresh the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The data we have to send in the template is the username (the greeting); the
    form errors, if any; the form CSRF token; and the sent form''s history:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So far, we have referred to three methods that do not exist yet. Let''s address
    them one by one, and start with `getCsrfToken()`. This method will return the
    CSRF token stored in the user session and, if it is not there, it will create
    and set one. To generate the token string, we can use the same approach we used
    in *Exercise 6.9,* *Securing against CSRF*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `processContactForm()` method is returning a list of form errors, so it
    has to validate the data first. A call to the `validateForm()` method should return
    the form with sanitized data and the list of errors, if any:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the `$errors` array is empty, then save the sanitized form data with extra
    information, such as the added time and added date (which is useful for checking
    whether standard-level users have already added one message in the current day).
    Again, since data persistence will be explored in the next chapter, we will use
    the means we have to store the data, and we will use the ephemeral session storage
    in this case. The forms will be stored under the `sentForms` key; therefore, `$_SESSION[''sentForms'']`
    becomes the sent form''s history:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `validateForm()` method will start by checking the CSRF token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we check for multiple submissions in the case of standard-level users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The name validation requires a non-empty input as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The email validation is performed using the `filter_var()` function with the
    `FILTER_VALIDATE_EMAIL` validation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The message validation requires a message of at least 40 characters in length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sanitized form data is collected and stored in the `$form` variable, which
    is then returned with the `$errors` variable, as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We referenced yet another method: `hasSentFormToday()`. This method requires
    the form history as the first parameter, and what it does is iterate through the
    history and check whether there is a message that is registered on the current
    day. As soon as one message is found, it will return `TRUE` immediately:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'What we have not covered yet is the `requestRefresh()` method. This method
    will call the `requestRedirect()` method providing the current request URI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final code in the handler Profile.php can be referred at: [https://packt.live/2VREaRY](https://packt.live/2VREaRY).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we can test our full implementation. Access the Profile page at `http://127.0.0.1:8080/profile`:![Figure
    6.42: Authentication at the profile page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14196_06_42.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.42: Authentication at the profile page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s log in as a standard-level user by entering `user` for both `Username`
    and `Password`:![Figure 6.43: The login page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14196_06_43.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.43: The login page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are redirected to the Profile page and we can see the HTML elements we have
    worked on so far.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By sending an empty form, we should get all the inputs marked with errors:![Figure
    6.44: Sending an empty form'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14196_06_44.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.44: Sending an empty form'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By entering `invalid@email` for our email, and a short sentence as a message,
    we should get another error, such as `Email address is invalid` or `The message
    is too short`:![Figure 6.45: Messages for invalid input'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14196_06_45.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.45: Messages for invalid input'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sending valid data should result in a successful form-saving operation, and
    a listing in the Send messages list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could try this data:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Name: Luigi'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Email: `luigi@marionbros.mb`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Message: `I would like to be able to upload a profile picture. Do you consider
    adding this feature?`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.46: Displaying the list of the sent messages'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_06_46.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.46: Displaying the list of the sent messages'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Trying to post more messages on the same day will result in an error:![Figure
    6.47: Posting more messages results in an error'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14196_06_47.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.47: Posting more messages results in an error'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s log out (to do this, click on the `Logout` button from the greeting
    header) and log in as a VIP-level user, using `vip` for `Username` and `Password`:![Figure
    6.48: Welcome message for a VIP user'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14196_06_48.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.48: Welcome message for a VIP user'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s add the first message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: Mario'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Email: `mario@marionbros.mb`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Message: `I would like to be able to upload a profile picture. Do you consider
    adding this feature?`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.49: Adding the first message'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_06_49.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.49: Adding the first message'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It looks fine, as expected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s try to add another message; this time, we should be able to add
    messages without any limitations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: Mario'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Email: `mario@marionbros.mb`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Message: `Can I filter my order history by the payment method used to make
    the purchase?`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.50: The output for adding messages without limitations'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_06_50.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.50: The output for adding messages without limitations'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we succeeded in adding another entry, as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Data Persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 7.1: Contact Management Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss the new or changed items, from the most uncoupled ones to the
    most complex ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good start here is the `User` model class since this class will be invoked
    on every page for authenticated users; let''s put this file inside the `src/models/`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `src/models/User.php` file and add the following content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After declaring the namespace and imports (the `use` keyword), we define the
    properties of the `User` class, giving names similar to the column names of the
    `users` table from the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the constructor method, which requires an input array that represents a
    record of the `users` table, and, for each class field, fetch the appropriate
    value from the input array; also add the getter methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the method that will perform the password match, requiring the
    raw input value (the value submitted with the login form):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This class aims to be a representation of a database record from the `users`
    table. The `constructor` function will ensure that each field will get data of
    its own type. The following methods are simple getters, and the last method, `Users::passwordMatches()`,
    is a convenient way to validate the input passwords at login.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since the `User` entity is strongly related to the authentication mechanism,
    let's see what the `Auth` component would look like.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the `src/components/Auth.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the namespace, the imports, and add the `userIsAuthenticated()` and
    `getLastLogin()` methods that return information for the current session, in the
    `Auth` class. Add the following in the `src/components/Auth.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the methods that return the `User` instance, when the user is authenticated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the methods that modify the session state by authenticating or de-authenticating
    a user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `src/components/Database.php` file and add the following content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the usual namespace declaration and imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `Database` class and add the `construct` method. In `construct`
    is where you will instantiate the `PDO` object, establishing the database connection.
    To reuse the `PDO` object inside the `Database` class, you set it to the `$pdo`
    private field of the `Database` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `instance()` method to return the same instance of `Database` when
    this method is invoked (the singleton pattern):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s add `users` table-related methods, and let''s start with `addUser()`;
    this method would require the username and the raw password as input parameters,
    and the return value would be the `PDOStatement` instance. Prepared statements
    will be used for all queries that involve user input data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is advised to return the `PDOStatement` instance in this case, instead of
    Boolean `true`/`false` values, which indicate whether the operation succeeded,
    because the former can give more info in the event of a failed operation (for
    example, `PDOStatement::errorInfo()`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the two methods that query for the user from the database – the `getUserByUsername()`
    and `getUserById()` methods. As their names suggest, one method requires a username,
    and the other a numerical ID. Both of them will return the `User` instance when
    the queried record exists, or `null` otherwise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice the `if (stmt->execute() && ($data = $stmt->fetch(PDO::FETCH_ASSOC)))
    { /* ... */ }` expression. This is a combined expression that executes the evaluation-assignment-evaluation
    type of operations, and is identical to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While the latter block might look more readable, especially for beginner developers,
    the former expression might look cleaner, especially for seasoned developers.
    Both approaches are valid and, in the end, it's a matter of subjective preference.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We are done with the `users` table; now, let''s add some contact table-related
    queries. Add the `getOwnContacts()` method, which requires the user ID for which
    the contacts list is fetched. The `PDOStatement` instance will be returned in
    this case as well, as in the case of queries that change the state of a database
    (`INSERT`/`UPDATE`/`DELETE`). This approach is preferred, rather than an array
    of entries, because it gives a greater degree of flexibility in terms of how the
    data is fetched from `PDOStatement` after it is returned – as an associative array,
    as an instance of a class, and so on. Also, in the case of big result sets, it
    helps to avoid high memory usage or script failure on account of exhausted memory.
    Iterating over a big result set, loading, and then discarding the records from
    memory one at a time, is an approach that''s way more friendly to memory usage
    than loading the entire result set in memory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `getOwnContactById()` method, which is useful when one record is fetched
    to fill the Edit Contact form. This method requires two parameters, the user ID
    that owns the contact, and the contact ID. The returned value is an associative
    array, if the record was found, or `null` otherwise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `addContact()` method. This will require a list of parameters for each
    `contacts` table column, except the `id` column, the value of which is generated
    by MySQL. This method will return the `PDOStatement` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `updateContact()` method. This is similar to the `addContact()` method,
    except for the fact that it also requires the contact ID, used to match the record
    to update, together with the user ID. This method will return the `PDOStatement`
    instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `deleteOwnContactById()` method, which requires the user ID that owns
    the contact, and the contact ID. The two input parameters will be used to match
    the record to be deleted. This method will return the `PDOStatement` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Router` component (`src/components/Router.php` file) will now cover the
    `/signup` and `/contacts` URIs as well. The highlighted part is the addition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the case of the `''/''` route (home), a check for a currently authenticated
    user is performed and, in the event of a positive return, a redirect to `/profile`
    is requested. Otherwise, just return the `home` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s check the new and modified handlers. First, let''s implement the Contacts
    page; this is the page that lists contacts and allows new entries to be added
    and existing ones to be edited. Create the `src/handlers/Contacts.php` file and
    add the following content. Declare the `Handlers` namespace and add the imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `handle()` method, and start with an authentication check. If the user
    is not authenticated, then the login form is displayed; otherwise, the user is
    fetched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `$formError` and `$formData` variables as arrays; they will
    be used to collect useful info, such as the form data to fill in the HTML form,
    or error messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the case of the `POST` HTTP method, process the form (call a separate method,
    to improve the readability of the current method). If no errors are returned,
    then redirect user to the Contacts page (refresh the page):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the `edit` entry is found in a query string, then the form data will be
    the record from the database – a contact will be edited. The form data is rendered
    on the HTML page, on the Edit Contact form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the `delete` entry is found in a query string, then the record will be deleted
    and a redirect to the Contacts page (refresh page) will be performed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the last part of the `handle()` method, the `contacts` template (the Contacts
    page) will be rendered, being provided with the data from the variables defined
    previously, and then returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the aforementioned `processForm()` method. In the first part, validate
    the input data as requested:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the `$formErrors` array is empty, proceed with the contact update or insertion.
    To decide whether to insert a new record or to update the existing ones, the script
    will look for the ID parameter in the `POST` data, which will be the ID of the
    contact being edited. Finally, the `$formErrors` variable is returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Sign up page: This page is for adding new users to the database. Create
    the `src/handlers/Signup.php` file and add the following content. Declare the
    `Handlers` namespace and add the imports. Add the Sign up class with the `handle()`
    method. This method will check whether the user is already authenticated, in which
    case they will be redirected to the Profile page. In the case of `POST` requests,
    they will call the `handleSignup()` method to deal with the `POST` data. Finally,
    return the rendered `signup-form` template, providing the requisite data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `handleSignup()` method in order to process the sign up form data.
    First, validate the input data, as requested. If the validation is successful,
    proceed with the new record insertion and, if the query executes successfully,
    authenticate the new user and redirect them to the Profile page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Profile page is a simple page that will only display some user info and
    the current session login time. Open the Profile page handler – `src/handlers/Profile.php`
    – and make sure that only the `handle()` method remains, which would only print
    the Profile page. In the case of unauthenticated users, it will print the login
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Logout page: This page logs the user out. Open the `src/handlers/Logout.php`
    file and make sure to use the `Auth` component to log the user out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Login page: This page authenticates the username and password. Open the `src/handlers/Login.php`
    file and make sure that the necessary adjustments are performed. The `Handlers\Login::handle()`
    method will redirect the authenticated users to the Profile page as well. Otherwise,
    it will perform the same flow as in the previous activity but will evaluate the
    data differently in each step. That''s because it now uses the database as a source
    of data and the User model with a dedicated method to perform password validation
    (the differences are highlighted). So, in the case of a `POST` request, first,
    it retrieves the user from the database by calling `Database::getUserByUsername()`
    and then evaluates them (the `$user` value can be the `User` object or null).
    If no user was found and returned, an error message is set in the `$formError`
    variable. The next step is to validate the login password and, in the event of
    an error, to set the error message in the `$formError` variable. In the end, if
    all checkpoints have been passed, the authentication is made by calling the `Auth::authenticate()`
    method, and then redirecting to the Profile page. If the request was not of the
    `POST` type, or there was an error with the username or password, the login form
    template (Login page) is rendered and returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entry point of the application (`web/index.php`) does not change the logic;
    it will just require the new script files (highlighted rows):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now to the templates – let's see what has changed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Firstly, the `main` template – the `src/templates/main.php` file. The changes
    are highlighted and commented on further. The `navbar` has changed to Contacts
    list. As requested, the navbar links are Username (link to the Profile page),
    Contacts, and Logout for an authenticated user, and Login for an unauthenticated
    user. The default content is now replaced by the `home` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the `home` template – the `src/templates/home.php` file. This template
    prints two links – Sign up and Login, as requested:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the `login-form` template – the `src/templates/login-form.php` file. In
    this template, only the link to the "sign up" page (highlighted) was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the `signup-form` template—the `src/templates/signup-form.php` file. This
    template is similar to the `login` template. The only differences are the form
    action (`/signup`), header title (`Sign up`), the extra input (`Password verify`),
    and the fact that the link points to the Login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the `profile` template – the `src/templates/profile.php` file. The Profile
    page template looks totally different to the one in the previous activity. Now,
    it simply outputs a welcoming message and some minimal user information: username,
    signup date, and session login time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the `contacts` template, the contacts list – the `src/templates/contacts.php`
    file (the first part). The Contacts page template has two major areas: the contacts
    list, on the one hand, and the contacts form (with add/edit actions), on the other.
    Before rendering the contacts list, `PDOStatement` (stored in the `$contacts`
    variable) is "asked" about the number of rows and, if there are no rows, then
    the message `No contacts` is printed. If the row count returns at least one, then
    the table is printed, iterating over the results of `$contacts`, using the `while`
    loop. The `Edit` and `Delete` buttons are also printed for every contact. For
    the `Delete` button, a confirmation dialog is used, utilizing the `onclick` tag
    attribute and the `confirm()` JavaScript function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the `contacts` template, the edit form – the `src/templates/contacts.php`
    file (the second part). The contacts add/edit form features four visible inputs
    (`name`, `email`, `phone`, and `address`), one hidden input (contact ID when editing,
    0 otherwise), and the `Save` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Thus, we have created a contact management system based on the concepts covered
    so far in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Error Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 8.1: Improving the User Experience through the Handling System and
    User-Level Errors'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `factorial.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, add the exception handler that, in order to log the exceptions to the
    log file, will create a data stream resource using the `fopen()` function, which
    is assigned to the static variable, `$fh`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Format the log message and write to the log file, using the `fwrite()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the error handler, which will translate the errors to exceptions and
    forward these to the exception handler. This error handler is meant to collect
    all the system errors reported, which are required to be handled as an exception
    (to log to a file, in a specific format, in our case):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register both handlers, using `set_error_handler()` and `set_exception_handler()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a list of custom exceptions, one for each validation rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `printError()` function, which will prepend `(!)` to the input message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `calculateFactorial()` function, which will initially validate the
    input argument. If any validation fails, an appropriate exception will be thrown,
    including a detailed message regarding the validation failure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use `is_numeric()` to check whether the input is an integer or a numeric
    string and throw a `NotANumber` exception if the validation fails. Then, we validate
    whether the input is a decimal number since we only want to allow integers. To
    achieve this, we have to "convert" the potential string numeral to one of integers
    or float types, and therefore we multiply the number with the numeric `1` so that
    PHP will convert the input automatically for us. Another way of checking whether
    we are dealing with decimals is to look for decimal separators in the input, using
    the built-in `strpos()` function. In the case of a decimal value, we throw a `DecimalNumber`
    exception. Then, if the input number is lower than `1`, we throw a `NumberIsZeroOrNegative`
    exception. At this step, validation ends, and we can proceed with the computation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once validation is complete, proceed to the factorial number calculation, and
    then return it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A `for` loop is used to multiplicate the `$factorial` variable through its iterations
    until `$i` reaches the `$number` input value provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We use the `$factorial *= $i;` notation, which is equivalent to the more verbose
    one—`$factorial = $factorial * $i;`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Consider input arguments starting with the second element, since the first
    one is the script name. If no input arguments are provided, then print the error
    message asking for an input argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Otherwise, iterate through the input arguments and invoke the `calculateFactorial()`
    function, the result of which will be printed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `calculateFactorial()` function is wrapped in a `try` block since we are
    expecting an exception to be thrown, which we want to catch eventually. Remember
    that we have to display an output value for each input argument, so, in the event
    of errors for one argument, we want to be able to continue to advance the script
    to the next argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Catch any of the custom exceptions defined previously and print the error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Catch any other exception and send this to the exception handler to log to
    a file and print a generic error message that will highlight the current argument
    for which the unexpected exception was thrown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.38: Executing the script without an argument'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_08_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.38: Executing the script without an argument'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since no arguments were passed to the script, the appropriate error message
    is printed on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the script with `php factorial.php 1 2 3 20 21 -1 4.2 4th four`; expect
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.39: Printing a factorial for integer values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_08_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.39: Printing a factorial for integer values'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, a list of arguments was provided, starting with `1` and ending
    in `four`. As expected, for each argument, a new line is printed, containing either
    the response or the error. An interesting line here is the one for the argument
    `21`, for which we got an `Unexpected error` message, without giving many details.
    We should look in the log file to see some relevant data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.40: Data for the input value “21”'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_08_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.40: Data for the input value "21"'
  prefs: []
  type: TYPE_NORMAL
- en: The complaint here concerns a `float` type being returned by the `calculateFactorial()`
    function, while `int` is expected. That's because the resulting factorial number
    for `21` (`51090942171709440000`) is higher than the maximum integer the PHP engine
    can handle (`php -r 'echo PHP_INT_MAX;'` would output 9223372036854775807), and
    so is converted to a float type and is presented in scientific notation (5.1090942171709E+19).
    Since the `calculateFactorial()` function has declared `int` as a return type,
    the returned float type value has caused a `TypeError`, and now we may decide
    to apply an extra condition to input arguments, limiting the maximum number to
    `20`, throwing a custom exception when the number is higher, or to check the type
    of factorial in `calculateFactorial()` before the value is returned, and throw
    a custom exception as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you managed to improve the user experience by printing pretty
    messages to user output, even for unexpected errors. Also, in the case of unexpected
    errors, the messages were logged to a log file so that the developer could check
    on them and, based on that data, reproduce the issue, and then come up with a
    fix or an improved solution for the script.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 9.1: Implementing a Package to Generate a UUID'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.17: Requiring the packages'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_09_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.17: Requiring the packages'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List the packages in your vendor directory using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.18: Listing the packages'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_09_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.18: Listing the packages'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit `Example.php` to add a `use ramsey/uuid/uuid` statement, and add a method
    similar to `printUuid()` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit your `index.php` file to add the call to `printUuid()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `php index.php`. The UUID generated will be different to the one in the
    screenshot, but should follow a similar format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.19: Printing the UUID'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_09_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.19: Printing the UUID'
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 10.1: Making Your Own POST Request to httpbin.org'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `httpbin.php` file in the `guzzle-example` directory. Require the
    Composer autoload file and import the `Guzzle Client` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate a new `Guzzle Client` by passing the `httpbin` address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside a `try`…`catch` block, make a `POST` request to the `/response-headers`
    endpoint. Add an `Accept` header set to `application/json` and set two query parameter
    key-value pairs, with `first` as `John` and `last` as `Doe`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the HTTP status code is not 200, and if so, throw an exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parse the response body into an object using `json_decode()` and store it in
    a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output a string, `The web service responded with`, concatenated with the first
    and last properties from the response object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script and see whether the output contains `John Doe`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.13: The output of the script](img/C14196_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.13: The output of the script'
  prefs: []
  type: TYPE_NORMAL
